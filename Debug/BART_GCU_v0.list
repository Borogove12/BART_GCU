
BART_GCU_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd18  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  0802ffb8  0802ffb8  0001ffb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08030de8  08030de8  00020de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08030df0  08030df0  00020df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08030df4  08030df4  00020df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  24000000  08030df8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001db4  240000b8  08030eac  000300b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000c04  24001e6c  08030eac  00031e6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000293e3  00000000  00000000  000300e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005056  00000000  00000000  000594c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e88  00000000  00000000  0005e520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c88  00000000  00000000  000603a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040acf  00000000  00000000  00062030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029917  00000000  00000000  000a2aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017c3b2  00000000  00000000  000cc416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002487c8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008864  00000000  00000000  00248818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	240000b8 	.word	0x240000b8
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0802ffa0 	.word	0x0802ffa0

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	240000bc 	.word	0x240000bc
 80202dc:	0802ffa0 	.word	0x0802ffa0

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295
 8020390:	f04f 30ff 	movne.w	r0, #4294967295
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <Brr_SetEmergency>:
 * In:       bool isActive: indicator for the active/deactive
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_SetEmergency(bool isActive)
{
 8020684:	b580      	push	{r7, lr}
 8020686:	b084      	sub	sp, #16
 8020688:	af00      	add	r7, sp, #0
 802068a:	4603      	mov	r3, r0
 802068c:	71fb      	strb	r3, [r7, #7]

	BYTE cmd = isActive ? CMD_SET_EMEREGENCY : CMD_RESET_EMEREGENCY;
 802068e:	79fb      	ldrb	r3, [r7, #7]
 8020690:	2b00      	cmp	r3, #0
 8020692:	d001      	beq.n	8020698 <Brr_SetEmergency+0x14>
 8020694:	2378      	movs	r3, #120	; 0x78
 8020696:	e000      	b.n	802069a <Brr_SetEmergency+0x16>
 8020698:	2379      	movs	r3, #121	; 0x79
 802069a:	73fb      	strb	r3, [r7, #15]
	#if BART_IO
	Brr_SetEmergency_P(isActive);
 802069c:	79fb      	ldrb	r3, [r7, #7]
 802069e:	4618      	mov	r0, r3
 80206a0:	f005 f836 	bl	8025710 <Brr_SetEmergency_P>
	Brr_SetEmergency_S(isActive);
 80206a4:	79fb      	ldrb	r3, [r7, #7]
 80206a6:	4618      	mov	r0, r3
 80206a8:	f005 f85c 	bl	8025764 <Brr_SetEmergency_S>
	printf("[%d] command  \n", cmd);
 80206ac:	7bfb      	ldrb	r3, [r7, #15]
 80206ae:	4619      	mov	r1, r3
 80206b0:	4803      	ldr	r0, [pc, #12]	; (80206c0 <Brr_SetEmergency+0x3c>)
 80206b2:	f008 f9d3 	bl	8028a5c <printf_>

		MakeRequest(cmd, NULL, 0);
		PRINTL("[%d] command", cmd);

	#endif
}
 80206b6:	bf00      	nop
 80206b8:	3710      	adds	r7, #16
 80206ba:	46bd      	mov	sp, r7
 80206bc:	bd80      	pop	{r7, pc}
 80206be:	bf00      	nop
 80206c0:	0802ffb8 	.word	0x0802ffb8

080206c4 <Brr_SetSerialComm>:
 * In:       bool isEnabled: indicator for the enabled/disabled
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_SetSerialComm(bool isEnabled)			//	not used pms
{
 80206c4:	b580      	push	{r7, lr}
 80206c6:	b084      	sub	sp, #16
 80206c8:	af00      	add	r7, sp, #0
 80206ca:	4603      	mov	r3, r0
 80206cc:	71fb      	strb	r3, [r7, #7]
	BYTE cmd = isEnabled ? CMD_SET_SERIAL_COMM : CMD_RESET_SERIAL_COMM;
 80206ce:	79fb      	ldrb	r3, [r7, #7]
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	d001      	beq.n	80206d8 <Brr_SetSerialComm+0x14>
 80206d4:	237a      	movs	r3, #122	; 0x7a
 80206d6:	e000      	b.n	80206da <Brr_SetSerialComm+0x16>
 80206d8:	237b      	movs	r3, #123	; 0x7b
 80206da:	73fb      	strb	r3, [r7, #15]
	MakeRequest(cmd, NULL, 0);
 80206dc:	7bfb      	ldrb	r3, [r7, #15]
 80206de:	2200      	movs	r2, #0
 80206e0:	2100      	movs	r1, #0
 80206e2:	4618      	mov	r0, r3
 80206e4:	f000 f92e 	bl	8020944 <MakeRequest>
	//PRINTL("[%d] command", cmd);
	printf("[%d] command  \n", cmd);
 80206e8:	7bfb      	ldrb	r3, [r7, #15]
 80206ea:	4619      	mov	r1, r3
 80206ec:	4803      	ldr	r0, [pc, #12]	; (80206fc <Brr_SetSerialComm+0x38>)
 80206ee:	f008 f9b5 	bl	8028a5c <printf_>
}
 80206f2:	bf00      	nop
 80206f4:	3710      	adds	r7, #16
 80206f6:	46bd      	mov	sp, r7
 80206f8:	bd80      	pop	{r7, pc}
 80206fa:	bf00      	nop
 80206fc:	0802ffb8 	.word	0x0802ffb8

08020700 <Brr_OpenBarrier>:
 * In:       BYTE direction: 1-Entry / 2-Exit
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_OpenBarrier(BYTE direction)
{
 8020700:	b580      	push	{r7, lr}
 8020702:	b082      	sub	sp, #8
 8020704:	af00      	add	r7, sp, #0
 8020706:	4603      	mov	r3, r0
 8020708:	71fb      	strb	r3, [r7, #7]
	#if BART_IO
		switch(direction)
 802070a:	79fb      	ldrb	r3, [r7, #7]
 802070c:	2b01      	cmp	r3, #1
 802070e:	d002      	beq.n	8020716 <Brr_OpenBarrier+0x16>
 8020710:	2b02      	cmp	r3, #2
 8020712:	d007      	beq.n	8020724 <Brr_OpenBarrier+0x24>
 8020714:	e00d      	b.n	8020732 <Brr_OpenBarrier+0x32>
		{
		case BARRIER_OPEN_FOR_EX:
			Brr_ControlBarrier_P(ENTRY_OPEN);
 8020716:	2000      	movs	r0, #0
 8020718:	f005 f8a2 	bl	8025860 <Brr_ControlBarrier_P>
			Brr_ControlBarrier_S(ENTRY_OPEN);
 802071c:	2000      	movs	r0, #0
 802071e:	f005 f8ed 	bl	80258fc <Brr_ControlBarrier_S>
			break;
 8020722:	e006      	b.n	8020732 <Brr_OpenBarrier+0x32>

		case BARRIER_OPEN_FOR_EN:
			Brr_ControlBarrier_P(EXIT_OPEN);
 8020724:	2002      	movs	r0, #2
 8020726:	f005 f89b 	bl	8025860 <Brr_ControlBarrier_P>
			Brr_ControlBarrier_S(EXIT_OPEN);
 802072a:	2002      	movs	r0, #2
 802072c:	f005 f8e6 	bl	80258fc <Brr_ControlBarrier_S>
			break;
 8020730:	bf00      	nop
		}

		printf("[%d] command  \n", CMD_OPEN_BARRIER);
 8020732:	217c      	movs	r1, #124	; 0x7c
 8020734:	4803      	ldr	r0, [pc, #12]	; (8020744 <Brr_OpenBarrier+0x44>)
 8020736:	f008 f991 	bl	8028a5c <printf_>
	#else
		MakeRequest(CMD_OPEN_BARRIER, &direction, 1);
		PRINTL("[%d] command", CMD_OPEN_BARRIER);
	#endif
}
 802073a:	bf00      	nop
 802073c:	3708      	adds	r7, #8
 802073e:	46bd      	mov	sp, r7
 8020740:	bd80      	pop	{r7, pc}
 8020742:	bf00      	nop
 8020744:	0802ffb8 	.word	0x0802ffb8

08020748 <Brr_CloseBarrier>:
 * In:       None
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_CloseBarrier(void)
{
 8020748:	b580      	push	{r7, lr}
 802074a:	af00      	add	r7, sp, #0
	#if BART_IO
		Brr_ControlBarrier_P(CLOSE);
 802074c:	2001      	movs	r0, #1
 802074e:	f005 f887 	bl	8025860 <Brr_ControlBarrier_P>
		Brr_ControlBarrier_S(CLOSE);
 8020752:	2001      	movs	r0, #1
 8020754:	f005 f8d2 	bl	80258fc <Brr_ControlBarrier_S>
		printf("[%d] command  \n", CMD_CLOSE_BARRIER);
 8020758:	217d      	movs	r1, #125	; 0x7d
 802075a:	4802      	ldr	r0, [pc, #8]	; (8020764 <Brr_CloseBarrier+0x1c>)
 802075c:	f008 f97e 	bl	8028a5c <printf_>
		{
			MakeRequest(CMD_CLOSE_BARRIER, NULL, 0);
			PRINTL("[%d] command", CMD_CLOSE_BARRIER);
		}
	#endif
}
 8020760:	bf00      	nop
 8020762:	bd80      	pop	{r7, pc}
 8020764:	0802ffb8 	.word	0x0802ffb8

08020768 <Brr_StopBarrier>:
 * In:       bool isStop: indicator for the stop/release
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_StopBarrier(bool isStop)
{
 8020768:	b580      	push	{r7, lr}
 802076a:	b084      	sub	sp, #16
 802076c:	af00      	add	r7, sp, #0
 802076e:	4603      	mov	r3, r0
 8020770:	71fb      	strb	r3, [r7, #7]
	BYTE cmd = isStop ? CMD_SET_STOP_BARRIER : CMD_RESET_STOP_BARRIER;
 8020772:	79fb      	ldrb	r3, [r7, #7]
 8020774:	2b00      	cmp	r3, #0
 8020776:	d001      	beq.n	802077c <Brr_StopBarrier+0x14>
 8020778:	237e      	movs	r3, #126	; 0x7e
 802077a:	e000      	b.n	802077e <Brr_StopBarrier+0x16>
 802077c:	237f      	movs	r3, #127	; 0x7f
 802077e:	73fb      	strb	r3, [r7, #15]
	#if BART_IO
		Brr_SetBreak_P(isStop);
 8020780:	79fb      	ldrb	r3, [r7, #7]
 8020782:	4618      	mov	r0, r3
 8020784:	f005 f818 	bl	80257b8 <Brr_SetBreak_P>
		Brr_SetBreak_S(isStop);
 8020788:	79fb      	ldrb	r3, [r7, #7]
 802078a:	4618      	mov	r0, r3
 802078c:	f005 f83e 	bl	802580c <Brr_SetBreak_S>
		printf("[%d] command  \n", cmd);
 8020790:	7bfb      	ldrb	r3, [r7, #15]
 8020792:	4619      	mov	r1, r3
 8020794:	4803      	ldr	r0, [pc, #12]	; (80207a4 <Brr_StopBarrier+0x3c>)
 8020796:	f008 f961 	bl	8028a5c <printf_>
	#else
		BYTE cmd = isStop ? CMD_SET_STOP_BARRIER : CMD_RESET_STOP_BARRIER;
		MakeRequest(cmd, NULL, 0);
		PRINTL("[%d] command", cmd);
	#endif
}
 802079a:	bf00      	nop
 802079c:	3710      	adds	r7, #16
 802079e:	46bd      	mov	sp, r7
 80207a0:	bd80      	pop	{r7, pc}
 80207a2:	bf00      	nop
 80207a4:	0802ffb8 	.word	0x0802ffb8

080207a8 <Brr_Inq_Status>:
 * In:       None
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_Inq_Status(void)			// 현재 barrier 에서는 IO input 만 받는 상태이므로 해당 통신은 하지 않음
{									// FAULT, ANOMALY, BRAKED, GSTATUS를 input으로 받는데 FAULT ANOMALY의 신호가 정확하
 80207a8:	b580      	push	{r7, lr}
 80207aa:	af00      	add	r7, sp, #0
	MakeRequest(CMD_GET_STATUS_MAIN, NULL, 0);
 80207ac:	2200      	movs	r2, #0
 80207ae:	2100      	movs	r1, #0
 80207b0:	2092      	movs	r0, #146	; 0x92
 80207b2:	f000 f8c7 	bl	8020944 <MakeRequest>
	// PRINTL("[%d] command", CMD_GET_STATUS_MAIN);
	printf("[%d] command  \n", CMD_GET_STATUS_MAIN);
 80207b6:	2192      	movs	r1, #146	; 0x92
 80207b8:	4802      	ldr	r0, [pc, #8]	; (80207c4 <Brr_Inq_Status+0x1c>)
 80207ba:	f008 f94f 	bl	8028a5c <printf_>
}
 80207be:	bf00      	nop
 80207c0:	bd80      	pop	{r7, pc}
 80207c2:	bf00      	nop
 80207c4:	0802ffb8 	.word	0x0802ffb8

080207c8 <Brr_Res_Status>:
 * In:       bool isMain
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_Res_Status(bool isMain)			//isMain : TRUE - UART1 / FALSE - UART3
{
 80207c8:	b580      	push	{r7, lr}
 80207ca:	b082      	sub	sp, #8
 80207cc:	af00      	add	r7, sp, #0
 80207ce:	4603      	mov	r3, r0
 80207d0:	71fb      	strb	r3, [r7, #7]
    if (isMain) 		//UART4
 80207d2:	79fb      	ldrb	r3, [r7, #7]
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	d010      	beq.n	80207fa <Brr_Res_Status+0x32>
    {
        memcpy(&gMainBarrierStatus, (B_BARRIER_STATUS *)rsp_U4.d.data, sizeof(B_BARRIER_STATUS));
 80207d8:	2208      	movs	r2, #8
 80207da:	4912      	ldr	r1, [pc, #72]	; (8020824 <Brr_Res_Status+0x5c>)
 80207dc:	4812      	ldr	r0, [pc, #72]	; (8020828 <Brr_Res_Status+0x60>)
 80207de:	f00e fa6d 	bl	802ecbc <memcpy>
        // PRINTL(" Receive Main Status %d/%d/%d", gMainBarrierStatus.B.status0, gMainBarrierStatus.B.status3, gMainBarrierStatus.B.status4);
        printf(" Receive Main Status %d/%d/%d  \n", gMainBarrierStatus.B.status0, gMainBarrierStatus.B.status3, gMainBarrierStatus.B.status4);
 80207e2:	4b11      	ldr	r3, [pc, #68]	; (8020828 <Brr_Res_Status+0x60>)
 80207e4:	781b      	ldrb	r3, [r3, #0]
 80207e6:	4619      	mov	r1, r3
 80207e8:	4b0f      	ldr	r3, [pc, #60]	; (8020828 <Brr_Res_Status+0x60>)
 80207ea:	78db      	ldrb	r3, [r3, #3]
 80207ec:	461a      	mov	r2, r3
 80207ee:	4b0e      	ldr	r3, [pc, #56]	; (8020828 <Brr_Res_Status+0x60>)
 80207f0:	791b      	ldrb	r3, [r3, #4]
 80207f2:	480e      	ldr	r0, [pc, #56]	; (802082c <Brr_Res_Status+0x64>)
 80207f4:	f008 f932 	bl	8028a5c <printf_>
        memcpy(&gSubBarrierStatus, (B_BARRIER_STATUS *)rsp_U5.d.data, sizeof(B_BARRIER_STATUS));
        // PRINTL(" Receive Sub Status %d/%d/%d", gSubBarrierStatus.B.status0, gSubBarrierStatus.B.status3, gSubBarrierStatus.B.status4);

        printf(" Receive Sub Status %d/%d/%d  \n", gSubBarrierStatus.B.status0, gSubBarrierStatus.B.status3, gSubBarrierStatus.B.status4);
    }
}
 80207f8:	e00f      	b.n	802081a <Brr_Res_Status+0x52>
        memcpy(&gSubBarrierStatus, (B_BARRIER_STATUS *)rsp_U5.d.data, sizeof(B_BARRIER_STATUS));
 80207fa:	2208      	movs	r2, #8
 80207fc:	490c      	ldr	r1, [pc, #48]	; (8020830 <Brr_Res_Status+0x68>)
 80207fe:	480d      	ldr	r0, [pc, #52]	; (8020834 <Brr_Res_Status+0x6c>)
 8020800:	f00e fa5c 	bl	802ecbc <memcpy>
        printf(" Receive Sub Status %d/%d/%d  \n", gSubBarrierStatus.B.status0, gSubBarrierStatus.B.status3, gSubBarrierStatus.B.status4);
 8020804:	4b0b      	ldr	r3, [pc, #44]	; (8020834 <Brr_Res_Status+0x6c>)
 8020806:	781b      	ldrb	r3, [r3, #0]
 8020808:	4619      	mov	r1, r3
 802080a:	4b0a      	ldr	r3, [pc, #40]	; (8020834 <Brr_Res_Status+0x6c>)
 802080c:	78db      	ldrb	r3, [r3, #3]
 802080e:	461a      	mov	r2, r3
 8020810:	4b08      	ldr	r3, [pc, #32]	; (8020834 <Brr_Res_Status+0x6c>)
 8020812:	791b      	ldrb	r3, [r3, #4]
 8020814:	4808      	ldr	r0, [pc, #32]	; (8020838 <Brr_Res_Status+0x70>)
 8020816:	f008 f921 	bl	8028a5c <printf_>
}
 802081a:	bf00      	nop
 802081c:	3708      	adds	r7, #8
 802081e:	46bd      	mov	sp, r7
 8020820:	bd80      	pop	{r7, pc}
 8020822:	bf00      	nop
 8020824:	240000d7 	.word	0x240000d7
 8020828:	240004dc 	.word	0x240004dc
 802082c:	0802ffc8 	.word	0x0802ffc8
 8020830:	240000eb 	.word	0x240000eb
 8020834:	240004e4 	.word	0x240004e4
 8020838:	0802ffec 	.word	0x0802ffec

0802083c <WaitTX>:

}
#endif

void WaitTX(void)
{
 802083c:	b580      	push	{r7, lr}
 802083e:	af00      	add	r7, sp, #0
    if (gfSubBarrierRunning == TRUE)
 8020840:	4b06      	ldr	r3, [pc, #24]	; (802085c <WaitTX+0x20>)
 8020842:	781b      	ldrb	r3, [r3, #0]
 8020844:	2b00      	cmp	r3, #0
 8020846:	d001      	beq.n	802084c <WaitTX+0x10>
    {
        U5_TxWait();
 8020848:	f000 faba 	bl	8020dc0 <U5_TxWait>
    }

    if (gfMainBarrierRunning == TRUE)
 802084c:	4b04      	ldr	r3, [pc, #16]	; (8020860 <WaitTX+0x24>)
 802084e:	781b      	ldrb	r3, [r3, #0]
 8020850:	2b00      	cmp	r3, #0
 8020852:	d001      	beq.n	8020858 <WaitTX+0x1c>
    {
        U4_TxWait();
 8020854:	f000 faa0 	bl	8020d98 <U4_TxWait>
    }
}
 8020858:	bf00      	nop
 802085a:	bd80      	pop	{r7, pc}
 802085c:	240004ed 	.word	0x240004ed
 8020860:	240004ec 	.word	0x240004ec

08020864 <SendSTX>:

void SendSTX(void)
{
 8020864:	b580      	push	{r7, lr}
 8020866:	af00      	add	r7, sp, #0
    WaitTX();
 8020868:	f7ff ffe8 	bl	802083c <WaitTX>

    if (gfSubBarrierRunning == TRUE)
 802086c:	4b07      	ldr	r3, [pc, #28]	; (802088c <SendSTX+0x28>)
 802086e:	781b      	ldrb	r3, [r3, #0]
 8020870:	2b00      	cmp	r3, #0
 8020872:	d002      	beq.n	802087a <SendSTX+0x16>
    {
        U5_Putch(0xAA);
 8020874:	20aa      	movs	r0, #170	; 0xaa
 8020876:	f000 fac5 	bl	8020e04 <U5_Putch>
    }

    if (gfMainBarrierRunning == TRUE)
 802087a:	4b05      	ldr	r3, [pc, #20]	; (8020890 <SendSTX+0x2c>)
 802087c:	781b      	ldrb	r3, [r3, #0]
 802087e:	2b00      	cmp	r3, #0
 8020880:	d002      	beq.n	8020888 <SendSTX+0x24>
    {
        U4_Putch(0xAA);
 8020882:	20aa      	movs	r0, #170	; 0xaa
 8020884:	f000 fab0 	bl	8020de8 <U4_Putch>
    }
}
 8020888:	bf00      	nop
 802088a:	bd80      	pop	{r7, pc}
 802088c:	240004ed 	.word	0x240004ed
 8020890:	240004ec 	.word	0x240004ec

08020894 <SendBCC>:

void SendBCC(BYTE bBCC)
{
 8020894:	b580      	push	{r7, lr}
 8020896:	b082      	sub	sp, #8
 8020898:	af00      	add	r7, sp, #0
 802089a:	4603      	mov	r3, r0
 802089c:	71fb      	strb	r3, [r7, #7]
    WaitTX();
 802089e:	f7ff ffcd 	bl	802083c <WaitTX>

    if (gfSubBarrierRunning == TRUE)
 80208a2:	4b0a      	ldr	r3, [pc, #40]	; (80208cc <SendBCC+0x38>)
 80208a4:	781b      	ldrb	r3, [r3, #0]
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d003      	beq.n	80208b2 <SendBCC+0x1e>
    {
        U5_Putch(bBCC);
 80208aa:	79fb      	ldrb	r3, [r7, #7]
 80208ac:	4618      	mov	r0, r3
 80208ae:	f000 faa9 	bl	8020e04 <U5_Putch>
    }

    if (gfMainBarrierRunning == TRUE)
 80208b2:	4b07      	ldr	r3, [pc, #28]	; (80208d0 <SendBCC+0x3c>)
 80208b4:	781b      	ldrb	r3, [r3, #0]
 80208b6:	2b00      	cmp	r3, #0
 80208b8:	d003      	beq.n	80208c2 <SendBCC+0x2e>
    {
        U4_Putch(bBCC);
 80208ba:	79fb      	ldrb	r3, [r7, #7]
 80208bc:	4618      	mov	r0, r3
 80208be:	f000 fa93 	bl	8020de8 <U4_Putch>
    }
}
 80208c2:	bf00      	nop
 80208c4:	3708      	adds	r7, #8
 80208c6:	46bd      	mov	sp, r7
 80208c8:	bd80      	pop	{r7, pc}
 80208ca:	bf00      	nop
 80208cc:	240004ed 	.word	0x240004ed
 80208d0:	240004ec 	.word	0x240004ec

080208d4 <SendData>:

BYTE SendData(void)
{
 80208d4:	b580      	push	{r7, lr}
 80208d6:	b084      	sub	sp, #16
 80208d8:	af00      	add	r7, sp, #0
    BYTE bBCC;
    BYTE *pbReqBuff;
    int nReqLen;

    bBCC = 0;
 80208da:	2300      	movs	r3, #0
 80208dc:	73fb      	strb	r3, [r7, #15]
    pbReqBuff = req.Buff;
 80208de:	4b16      	ldr	r3, [pc, #88]	; (8020938 <SendData+0x64>)
 80208e0:	60bb      	str	r3, [r7, #8]
    nReqLen = req.d.dataLen + FRAME_HEADER_LEN;
 80208e2:	4b15      	ldr	r3, [pc, #84]	; (8020938 <SendData+0x64>)
 80208e4:	789b      	ldrb	r3, [r3, #2]
 80208e6:	3303      	adds	r3, #3
 80208e8:	607b      	str	r3, [r7, #4]

    while (nReqLen--)
 80208ea:	e01b      	b.n	8020924 <SendData+0x50>
    {
        WaitTX();
 80208ec:	f7ff ffa6 	bl	802083c <WaitTX>
        if (gfSubBarrierRunning == TRUE)
 80208f0:	4b12      	ldr	r3, [pc, #72]	; (802093c <SendData+0x68>)
 80208f2:	781b      	ldrb	r3, [r3, #0]
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	d004      	beq.n	8020902 <SendData+0x2e>
        {
            U5_Putch(*pbReqBuff);
 80208f8:	68bb      	ldr	r3, [r7, #8]
 80208fa:	781b      	ldrb	r3, [r3, #0]
 80208fc:	4618      	mov	r0, r3
 80208fe:	f000 fa81 	bl	8020e04 <U5_Putch>
        }

        if (gfMainBarrierRunning == TRUE)
 8020902:	4b0f      	ldr	r3, [pc, #60]	; (8020940 <SendData+0x6c>)
 8020904:	781b      	ldrb	r3, [r3, #0]
 8020906:	2b00      	cmp	r3, #0
 8020908:	d004      	beq.n	8020914 <SendData+0x40>
        {
            U4_Putch(*pbReqBuff);
 802090a:	68bb      	ldr	r3, [r7, #8]
 802090c:	781b      	ldrb	r3, [r3, #0]
 802090e:	4618      	mov	r0, r3
 8020910:	f000 fa6a 	bl	8020de8 <U4_Putch>
        }

        bBCC ^= *pbReqBuff; // BCC calculation
 8020914:	68bb      	ldr	r3, [r7, #8]
 8020916:	781a      	ldrb	r2, [r3, #0]
 8020918:	7bfb      	ldrb	r3, [r7, #15]
 802091a:	4053      	eors	r3, r2
 802091c:	73fb      	strb	r3, [r7, #15]
        pbReqBuff++;
 802091e:	68bb      	ldr	r3, [r7, #8]
 8020920:	3301      	adds	r3, #1
 8020922:	60bb      	str	r3, [r7, #8]
    while (nReqLen--)
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	1e5a      	subs	r2, r3, #1
 8020928:	607a      	str	r2, [r7, #4]
 802092a:	2b00      	cmp	r3, #0
 802092c:	d1de      	bne.n	80208ec <SendData+0x18>
    }

    return bBCC;
 802092e:	7bfb      	ldrb	r3, [r7, #15]
}
 8020930:	4618      	mov	r0, r3
 8020932:	3710      	adds	r7, #16
 8020934:	46bd      	mov	sp, r7
 8020936:	bd80      	pop	{r7, pc}
 8020938:	240000fc 	.word	0x240000fc
 802093c:	240004ed 	.word	0x240004ed
 8020940:	240004ec 	.word	0x240004ec

08020944 <MakeRequest>:
 * Out:      None
 * Return:   void
 * comments:
 *******************************************************************************/
void MakeRequest(BYTE command, BYTE *data, int nOptionLen)
{
 8020944:	b580      	push	{r7, lr}
 8020946:	b086      	sub	sp, #24
 8020948:	af00      	add	r7, sp, #0
 802094a:	4603      	mov	r3, r0
 802094c:	60b9      	str	r1, [r7, #8]
 802094e:	607a      	str	r2, [r7, #4]
 8020950:	73fb      	strb	r3, [r7, #15]
    BYTE bBCC;

    if (req.d.moduleSeq == MAX_SEQUENCE)
 8020952:	4b17      	ldr	r3, [pc, #92]	; (80209b0 <MakeRequest+0x6c>)
 8020954:	785b      	ldrb	r3, [r3, #1]
 8020956:	2bff      	cmp	r3, #255	; 0xff
 8020958:	d103      	bne.n	8020962 <MakeRequest+0x1e>
        req.d.moduleSeq = 0;
 802095a:	4b15      	ldr	r3, [pc, #84]	; (80209b0 <MakeRequest+0x6c>)
 802095c:	2200      	movs	r2, #0
 802095e:	705a      	strb	r2, [r3, #1]
 8020960:	e007      	b.n	8020972 <MakeRequest+0x2e>
    else
        req.d.moduleSeq = gbLastMainSeq_Swing++;
 8020962:	4b14      	ldr	r3, [pc, #80]	; (80209b4 <MakeRequest+0x70>)
 8020964:	781b      	ldrb	r3, [r3, #0]
 8020966:	1c5a      	adds	r2, r3, #1
 8020968:	b2d1      	uxtb	r1, r2
 802096a:	4a12      	ldr	r2, [pc, #72]	; (80209b4 <MakeRequest+0x70>)
 802096c:	7011      	strb	r1, [r2, #0]
 802096e:	4a10      	ldr	r2, [pc, #64]	; (80209b0 <MakeRequest+0x6c>)
 8020970:	7053      	strb	r3, [r2, #1]

    req.d.command = command;
 8020972:	4a0f      	ldr	r2, [pc, #60]	; (80209b0 <MakeRequest+0x6c>)
 8020974:	7bfb      	ldrb	r3, [r7, #15]
 8020976:	7013      	strb	r3, [r2, #0]
    req.d.dataLen = nOptionLen;
 8020978:	687b      	ldr	r3, [r7, #4]
 802097a:	b2da      	uxtb	r2, r3
 802097c:	4b0c      	ldr	r3, [pc, #48]	; (80209b0 <MakeRequest+0x6c>)
 802097e:	709a      	strb	r2, [r3, #2]

    if (nOptionLen)
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	2b00      	cmp	r3, #0
 8020984:	d005      	beq.n	8020992 <MakeRequest+0x4e>
        memcpy(req.d.data, data, nOptionLen);
 8020986:	687b      	ldr	r3, [r7, #4]
 8020988:	461a      	mov	r2, r3
 802098a:	68b9      	ldr	r1, [r7, #8]
 802098c:	480a      	ldr	r0, [pc, #40]	; (80209b8 <MakeRequest+0x74>)
 802098e:	f00e f995 	bl	802ecbc <memcpy>


    SendSTX();
 8020992:	f7ff ff67 	bl	8020864 <SendSTX>
    bBCC = SendData();
 8020996:	f7ff ff9d 	bl	80208d4 <SendData>
 802099a:	4603      	mov	r3, r0
 802099c:	75fb      	strb	r3, [r7, #23]
    SendBCC(bBCC);
 802099e:	7dfb      	ldrb	r3, [r7, #23]
 80209a0:	4618      	mov	r0, r3
 80209a2:	f7ff ff77 	bl	8020894 <SendBCC>
}
 80209a6:	bf00      	nop
 80209a8:	3718      	adds	r7, #24
 80209aa:	46bd      	mov	sp, r7
 80209ac:	bd80      	pop	{r7, pc}
 80209ae:	bf00      	nop
 80209b0:	240000fc 	.word	0x240000fc
 80209b4:	2400010f 	.word	0x2400010f
 80209b8:	240000ff 	.word	0x240000ff

080209bc <CheckProtocol_UART4>:
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/

int CheckProtocol_UART4(void)
{
 80209bc:	b580      	push	{r7, lr}
 80209be:	b082      	sub	sp, #8
 80209c0:	af00      	add	r7, sp, #0
    BYTE rcvData;



  //  while (U1_Getch(&rcvData))			//스타트는 [AA] 다음 [len]이 들어오고 다음[Data]
	 while (IUart_RecvByte_check(COM4,&rcvData))
 80209c2:	e08a      	b.n	8020ada <CheckProtocol_UART4+0x11e>
    {
        if (rcvData == 0xAA)
 80209c4:	79fb      	ldrb	r3, [r7, #7]
 80209c6:	2baa      	cmp	r3, #170	; 0xaa
 80209c8:	d10c      	bne.n	80209e4 <CheckProtocol_UART4+0x28>
        {
        	packetLen_U4 = 0;
 80209ca:	4b4b      	ldr	r3, [pc, #300]	; (8020af8 <CheckProtocol_UART4+0x13c>)
 80209cc:	2200      	movs	r2, #0
 80209ce:	601a      	str	r2, [r3, #0]
        	len_U4 = 0;
 80209d0:	4b4a      	ldr	r3, [pc, #296]	; (8020afc <CheckProtocol_UART4+0x140>)
 80209d2:	2200      	movs	r2, #0
 80209d4:	601a      	str	r2, [r3, #0]
            BCC_U4 = 0;
 80209d6:	4b4a      	ldr	r3, [pc, #296]	; (8020b00 <CheckProtocol_UART4+0x144>)
 80209d8:	2200      	movs	r2, #0
 80209da:	701a      	strb	r2, [r3, #0]
            rcvState_U4 = STATE_DATA_HEAD;
 80209dc:	4b49      	ldr	r3, [pc, #292]	; (8020b04 <CheckProtocol_UART4+0x148>)
 80209de:	2205      	movs	r2, #5
 80209e0:	701a      	strb	r2, [r3, #0]
 80209e2:	e07a      	b.n	8020ada <CheckProtocol_UART4+0x11e>
        }
        else 
        {
            switch (rcvState_U4)
 80209e4:	4b47      	ldr	r3, [pc, #284]	; (8020b04 <CheckProtocol_UART4+0x148>)
 80209e6:	781b      	ldrb	r3, [r3, #0]
 80209e8:	2b06      	cmp	r3, #6
 80209ea:	d028      	beq.n	8020a3e <CheckProtocol_UART4+0x82>
 80209ec:	2b06      	cmp	r3, #6
 80209ee:	dc74      	bgt.n	8020ada <CheckProtocol_UART4+0x11e>
 80209f0:	2b02      	cmp	r3, #2
 80209f2:	d040      	beq.n	8020a76 <CheckProtocol_UART4+0xba>
 80209f4:	2b05      	cmp	r3, #5
 80209f6:	d170      	bne.n	8020ada <CheckProtocol_UART4+0x11e>
            {
            case STATE_DATA_HEAD:
                rsp_U4.Buff[packetLen_U4++] = rcvData;
 80209f8:	4b3f      	ldr	r3, [pc, #252]	; (8020af8 <CheckProtocol_UART4+0x13c>)
 80209fa:	681b      	ldr	r3, [r3, #0]
 80209fc:	1c5a      	adds	r2, r3, #1
 80209fe:	493e      	ldr	r1, [pc, #248]	; (8020af8 <CheckProtocol_UART4+0x13c>)
 8020a00:	600a      	str	r2, [r1, #0]
 8020a02:	79f9      	ldrb	r1, [r7, #7]
 8020a04:	4a40      	ldr	r2, [pc, #256]	; (8020b08 <CheckProtocol_UART4+0x14c>)
 8020a06:	54d1      	strb	r1, [r2, r3]
                BCC_U4 ^= rcvData;
 8020a08:	4b3d      	ldr	r3, [pc, #244]	; (8020b00 <CheckProtocol_UART4+0x144>)
 8020a0a:	781a      	ldrb	r2, [r3, #0]
 8020a0c:	79fb      	ldrb	r3, [r7, #7]
 8020a0e:	4053      	eors	r3, r2
 8020a10:	b2da      	uxtb	r2, r3
 8020a12:	4b3b      	ldr	r3, [pc, #236]	; (8020b00 <CheckProtocol_UART4+0x144>)
 8020a14:	701a      	strb	r2, [r3, #0]
                if (packetLen_U4 == 3)
 8020a16:	4b38      	ldr	r3, [pc, #224]	; (8020af8 <CheckProtocol_UART4+0x13c>)
 8020a18:	681b      	ldr	r3, [r3, #0]
 8020a1a:	2b03      	cmp	r3, #3
 8020a1c:	d15d      	bne.n	8020ada <CheckProtocol_UART4+0x11e>
                {
                	len_U4 = rcvData;
 8020a1e:	79fb      	ldrb	r3, [r7, #7]
 8020a20:	461a      	mov	r2, r3
 8020a22:	4b36      	ldr	r3, [pc, #216]	; (8020afc <CheckProtocol_UART4+0x140>)
 8020a24:	601a      	str	r2, [r3, #0]
                    if (len_U4 == 0)
 8020a26:	4b35      	ldr	r3, [pc, #212]	; (8020afc <CheckProtocol_UART4+0x140>)
 8020a28:	681b      	ldr	r3, [r3, #0]
 8020a2a:	2b00      	cmp	r3, #0
 8020a2c:	d103      	bne.n	8020a36 <CheckProtocol_UART4+0x7a>
                    {
                    	rcvState_U4 = STATE_DATA_BCC;
 8020a2e:	4b35      	ldr	r3, [pc, #212]	; (8020b04 <CheckProtocol_UART4+0x148>)
 8020a30:	2202      	movs	r2, #2
 8020a32:	701a      	strb	r2, [r3, #0]
 8020a34:	e051      	b.n	8020ada <CheckProtocol_UART4+0x11e>
                    }
                    else
                    {
                    	rcvState_U4 = STATE_DATA_BODY;
 8020a36:	4b33      	ldr	r3, [pc, #204]	; (8020b04 <CheckProtocol_UART4+0x148>)
 8020a38:	2206      	movs	r2, #6
 8020a3a:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 8020a3c:	e04d      	b.n	8020ada <CheckProtocol_UART4+0x11e>
            case STATE_DATA_BODY:
            	rsp_U4.Buff[packetLen_U4++] = rcvData;
 8020a3e:	4b2e      	ldr	r3, [pc, #184]	; (8020af8 <CheckProtocol_UART4+0x13c>)
 8020a40:	681b      	ldr	r3, [r3, #0]
 8020a42:	1c5a      	adds	r2, r3, #1
 8020a44:	492c      	ldr	r1, [pc, #176]	; (8020af8 <CheckProtocol_UART4+0x13c>)
 8020a46:	600a      	str	r2, [r1, #0]
 8020a48:	79f9      	ldrb	r1, [r7, #7]
 8020a4a:	4a2f      	ldr	r2, [pc, #188]	; (8020b08 <CheckProtocol_UART4+0x14c>)
 8020a4c:	54d1      	strb	r1, [r2, r3]
            	BCC_U4 ^= rcvData;
 8020a4e:	4b2c      	ldr	r3, [pc, #176]	; (8020b00 <CheckProtocol_UART4+0x144>)
 8020a50:	781a      	ldrb	r2, [r3, #0]
 8020a52:	79fb      	ldrb	r3, [r7, #7]
 8020a54:	4053      	eors	r3, r2
 8020a56:	b2da      	uxtb	r2, r3
 8020a58:	4b29      	ldr	r3, [pc, #164]	; (8020b00 <CheckProtocol_UART4+0x144>)
 8020a5a:	701a      	strb	r2, [r3, #0]
            	len_U4--;
 8020a5c:	4b27      	ldr	r3, [pc, #156]	; (8020afc <CheckProtocol_UART4+0x140>)
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	3b01      	subs	r3, #1
 8020a62:	4a26      	ldr	r2, [pc, #152]	; (8020afc <CheckProtocol_UART4+0x140>)
 8020a64:	6013      	str	r3, [r2, #0]

                if (len_U4 == 0)
 8020a66:	4b25      	ldr	r3, [pc, #148]	; (8020afc <CheckProtocol_UART4+0x140>)
 8020a68:	681b      	ldr	r3, [r3, #0]
 8020a6a:	2b00      	cmp	r3, #0
 8020a6c:	d135      	bne.n	8020ada <CheckProtocol_UART4+0x11e>
                {
                	rcvState_U4 = STATE_DATA_BCC;
 8020a6e:	4b25      	ldr	r3, [pc, #148]	; (8020b04 <CheckProtocol_UART4+0x148>)
 8020a70:	2202      	movs	r2, #2
 8020a72:	701a      	strb	r2, [r3, #0]
                }
                break;
 8020a74:	e031      	b.n	8020ada <CheckProtocol_UART4+0x11e>
            case STATE_DATA_BCC:
            	rcvState_U4 = STATE_STX_WAIT;
 8020a76:	4b23      	ldr	r3, [pc, #140]	; (8020b04 <CheckProtocol_UART4+0x148>)
 8020a78:	2200      	movs	r2, #0
 8020a7a:	701a      	strb	r2, [r3, #0]
                if (BCC_U4 == rcvData)
 8020a7c:	4b20      	ldr	r3, [pc, #128]	; (8020b00 <CheckProtocol_UART4+0x144>)
 8020a7e:	781a      	ldrb	r2, [r3, #0]
 8020a80:	79fb      	ldrb	r3, [r7, #7]
 8020a82:	429a      	cmp	r2, r3
 8020a84:	d116      	bne.n	8020ab4 <CheckProtocol_UART4+0xf8>
                {
                    if (rsp_U4.d.dataLen != (BYTE)(packetLen_U4 - FRAME_HEADER_LEN))
 8020a86:	4b20      	ldr	r3, [pc, #128]	; (8020b08 <CheckProtocol_UART4+0x14c>)
 8020a88:	789a      	ldrb	r2, [r3, #2]
 8020a8a:	4b1b      	ldr	r3, [pc, #108]	; (8020af8 <CheckProtocol_UART4+0x13c>)
 8020a8c:	681b      	ldr	r3, [r3, #0]
 8020a8e:	b2db      	uxtb	r3, r3
 8020a90:	3b03      	subs	r3, #3
 8020a92:	b2db      	uxtb	r3, r3
 8020a94:	429a      	cmp	r2, r3
 8020a96:	d00b      	beq.n	8020ab0 <CheckProtocol_UART4+0xf4>
                    {
                       // PRINTL("U4 LENGTH ERR: %d - %d", rsp_U4.d.dataLen, (packetLen_U4 - FRAME_HEADER_LEN));
                    	 printf("U4 LENGTH ERR: %d - %d  \n", rsp_U4.d.dataLen, (packetLen_U4 - FRAME_HEADER_LEN));
 8020a98:	4b1b      	ldr	r3, [pc, #108]	; (8020b08 <CheckProtocol_UART4+0x14c>)
 8020a9a:	789b      	ldrb	r3, [r3, #2]
 8020a9c:	4619      	mov	r1, r3
 8020a9e:	4b16      	ldr	r3, [pc, #88]	; (8020af8 <CheckProtocol_UART4+0x13c>)
 8020aa0:	681b      	ldr	r3, [r3, #0]
 8020aa2:	3b03      	subs	r3, #3
 8020aa4:	461a      	mov	r2, r3
 8020aa6:	4819      	ldr	r0, [pc, #100]	; (8020b0c <CheckProtocol_UART4+0x150>)
 8020aa8:	f007 ffd8 	bl	8028a5c <printf_>
                        return ERR_WRONG_CMD_LEN;
 8020aac:	230a      	movs	r3, #10
 8020aae:	e01f      	b.n	8020af0 <CheckProtocol_UART4+0x134>
                    }
                    else
                    {
                        return SUCCESS;
 8020ab0:	2300      	movs	r3, #0
 8020ab2:	e01d      	b.n	8020af0 <CheckProtocol_UART4+0x134>
                    }
                }
                else
                {
                    //PRINTL("U1 BCC ERR. len: %d, BCC: %d, rcv: %d", rsp_U4.d.dataLen, BCC_U4, rcvData);
                	 printf("U4 BCC ERR. len: %d, BCC: %d, rcv: %d  \n", rsp_U4.d.dataLen, BCC_U4, rcvData);
 8020ab4:	4b14      	ldr	r3, [pc, #80]	; (8020b08 <CheckProtocol_UART4+0x14c>)
 8020ab6:	789b      	ldrb	r3, [r3, #2]
 8020ab8:	4619      	mov	r1, r3
 8020aba:	4b11      	ldr	r3, [pc, #68]	; (8020b00 <CheckProtocol_UART4+0x144>)
 8020abc:	781b      	ldrb	r3, [r3, #0]
 8020abe:	461a      	mov	r2, r3
 8020ac0:	79fb      	ldrb	r3, [r7, #7]
 8020ac2:	4813      	ldr	r0, [pc, #76]	; (8020b10 <CheckProtocol_UART4+0x154>)
 8020ac4:	f007 ffca 	bl	8028a5c <printf_>
                    Print2Hex("", rsp_U4.Buff, packetLen_U4);
 8020ac8:	4b0b      	ldr	r3, [pc, #44]	; (8020af8 <CheckProtocol_UART4+0x13c>)
 8020aca:	681b      	ldr	r3, [r3, #0]
 8020acc:	461a      	mov	r2, r3
 8020ace:	490e      	ldr	r1, [pc, #56]	; (8020b08 <CheckProtocol_UART4+0x14c>)
 8020ad0:	4810      	ldr	r0, [pc, #64]	; (8020b14 <CheckProtocol_UART4+0x158>)
 8020ad2:	f00e f833 	bl	802eb3c <Print2Hex>
                    return ERR_BCC;
 8020ad6:	2305      	movs	r3, #5
 8020ad8:	e00a      	b.n	8020af0 <CheckProtocol_UART4+0x134>
	 while (IUart_RecvByte_check(COM4,&rcvData))
 8020ada:	1dfb      	adds	r3, r7, #7
 8020adc:	4619      	mov	r1, r3
 8020ade:	2003      	movs	r0, #3
 8020ae0:	f005 f9ea 	bl	8025eb8 <IUart_RecvByte_check>
 8020ae4:	4603      	mov	r3, r0
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	f47f af6c 	bne.w	80209c4 <CheckProtocol_UART4+0x8>
            }
        }
        
    }

    return FAIL;
 8020aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020af0:	4618      	mov	r0, r3
 8020af2:	3708      	adds	r7, #8
 8020af4:	46bd      	mov	sp, r7
 8020af6:	bd80      	pop	{r7, pc}
 8020af8:	24000110 	.word	0x24000110
 8020afc:	24000114 	.word	0x24000114
 8020b00:	24000118 	.word	0x24000118
 8020b04:	24000119 	.word	0x24000119
 8020b08:	240000d4 	.word	0x240000d4
 8020b0c:	0803000c 	.word	0x0803000c
 8020b10:	08030028 	.word	0x08030028
 8020b14:	08030054 	.word	0x08030054

08020b18 <CheckProtocol_UART5>:
 *			    - else        : no command is received
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/
int CheckProtocol_UART5(void)
{
 8020b18:	b580      	push	{r7, lr}
 8020b1a:	b082      	sub	sp, #8
 8020b1c:	af00      	add	r7, sp, #0
    static int packetLen_U5 = 0;
    BYTE rcvData;

   // while (U3_Getch(&rcvData))

	while (IUart_RecvByte_check(COM5,&rcvData))
 8020b1e:	e08a      	b.n	8020c36 <CheckProtocol_UART5+0x11e>
    {
        if (rcvData == 0xAA)
 8020b20:	79fb      	ldrb	r3, [r7, #7]
 8020b22:	2baa      	cmp	r3, #170	; 0xaa
 8020b24:	d10c      	bne.n	8020b40 <CheckProtocol_UART5+0x28>
        {
        	packetLen_U5 = 0;
 8020b26:	4b4b      	ldr	r3, [pc, #300]	; (8020c54 <CheckProtocol_UART5+0x13c>)
 8020b28:	2200      	movs	r2, #0
 8020b2a:	601a      	str	r2, [r3, #0]
            len_U5 = 0;
 8020b2c:	4b4a      	ldr	r3, [pc, #296]	; (8020c58 <CheckProtocol_UART5+0x140>)
 8020b2e:	2200      	movs	r2, #0
 8020b30:	601a      	str	r2, [r3, #0]
            BCC_U5 = 0;
 8020b32:	4b4a      	ldr	r3, [pc, #296]	; (8020c5c <CheckProtocol_UART5+0x144>)
 8020b34:	2200      	movs	r2, #0
 8020b36:	701a      	strb	r2, [r3, #0]
            rcvState_U5 = STATE_DATA_HEAD;
 8020b38:	4b49      	ldr	r3, [pc, #292]	; (8020c60 <CheckProtocol_UART5+0x148>)
 8020b3a:	2205      	movs	r2, #5
 8020b3c:	701a      	strb	r2, [r3, #0]
 8020b3e:	e07a      	b.n	8020c36 <CheckProtocol_UART5+0x11e>
        }
        else
        {
            switch (rcvState_U5)
 8020b40:	4b47      	ldr	r3, [pc, #284]	; (8020c60 <CheckProtocol_UART5+0x148>)
 8020b42:	781b      	ldrb	r3, [r3, #0]
 8020b44:	2b06      	cmp	r3, #6
 8020b46:	d028      	beq.n	8020b9a <CheckProtocol_UART5+0x82>
 8020b48:	2b06      	cmp	r3, #6
 8020b4a:	dc74      	bgt.n	8020c36 <CheckProtocol_UART5+0x11e>
 8020b4c:	2b02      	cmp	r3, #2
 8020b4e:	d040      	beq.n	8020bd2 <CheckProtocol_UART5+0xba>
 8020b50:	2b05      	cmp	r3, #5
 8020b52:	d170      	bne.n	8020c36 <CheckProtocol_UART5+0x11e>
            {
            case STATE_DATA_HEAD:
                rsp_U5.Buff[packetLen_U5++] = rcvData;
 8020b54:	4b3f      	ldr	r3, [pc, #252]	; (8020c54 <CheckProtocol_UART5+0x13c>)
 8020b56:	681b      	ldr	r3, [r3, #0]
 8020b58:	1c5a      	adds	r2, r3, #1
 8020b5a:	493e      	ldr	r1, [pc, #248]	; (8020c54 <CheckProtocol_UART5+0x13c>)
 8020b5c:	600a      	str	r2, [r1, #0]
 8020b5e:	79f9      	ldrb	r1, [r7, #7]
 8020b60:	4a40      	ldr	r2, [pc, #256]	; (8020c64 <CheckProtocol_UART5+0x14c>)
 8020b62:	54d1      	strb	r1, [r2, r3]
                BCC_U5 ^= rcvData;
 8020b64:	4b3d      	ldr	r3, [pc, #244]	; (8020c5c <CheckProtocol_UART5+0x144>)
 8020b66:	781a      	ldrb	r2, [r3, #0]
 8020b68:	79fb      	ldrb	r3, [r7, #7]
 8020b6a:	4053      	eors	r3, r2
 8020b6c:	b2da      	uxtb	r2, r3
 8020b6e:	4b3b      	ldr	r3, [pc, #236]	; (8020c5c <CheckProtocol_UART5+0x144>)
 8020b70:	701a      	strb	r2, [r3, #0]
                if (packetLen_U5 == 3)
 8020b72:	4b38      	ldr	r3, [pc, #224]	; (8020c54 <CheckProtocol_UART5+0x13c>)
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	2b03      	cmp	r3, #3
 8020b78:	d15d      	bne.n	8020c36 <CheckProtocol_UART5+0x11e>
                {
                	len_U5 = rcvData;
 8020b7a:	79fb      	ldrb	r3, [r7, #7]
 8020b7c:	461a      	mov	r2, r3
 8020b7e:	4b36      	ldr	r3, [pc, #216]	; (8020c58 <CheckProtocol_UART5+0x140>)
 8020b80:	601a      	str	r2, [r3, #0]
                    if (len_U5 == 0)
 8020b82:	4b35      	ldr	r3, [pc, #212]	; (8020c58 <CheckProtocol_UART5+0x140>)
 8020b84:	681b      	ldr	r3, [r3, #0]
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	d103      	bne.n	8020b92 <CheckProtocol_UART5+0x7a>
                    {
                    	rcvState_U5 = STATE_DATA_BCC;
 8020b8a:	4b35      	ldr	r3, [pc, #212]	; (8020c60 <CheckProtocol_UART5+0x148>)
 8020b8c:	2202      	movs	r2, #2
 8020b8e:	701a      	strb	r2, [r3, #0]
 8020b90:	e051      	b.n	8020c36 <CheckProtocol_UART5+0x11e>
                    }
                    else
                    {
                    	rcvState_U5 = STATE_DATA_BODY;
 8020b92:	4b33      	ldr	r3, [pc, #204]	; (8020c60 <CheckProtocol_UART5+0x148>)
 8020b94:	2206      	movs	r2, #6
 8020b96:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 8020b98:	e04d      	b.n	8020c36 <CheckProtocol_UART5+0x11e>
            case STATE_DATA_BODY:
            	rsp_U5.Buff[packetLen_U5++] = rcvData;
 8020b9a:	4b2e      	ldr	r3, [pc, #184]	; (8020c54 <CheckProtocol_UART5+0x13c>)
 8020b9c:	681b      	ldr	r3, [r3, #0]
 8020b9e:	1c5a      	adds	r2, r3, #1
 8020ba0:	492c      	ldr	r1, [pc, #176]	; (8020c54 <CheckProtocol_UART5+0x13c>)
 8020ba2:	600a      	str	r2, [r1, #0]
 8020ba4:	79f9      	ldrb	r1, [r7, #7]
 8020ba6:	4a2f      	ldr	r2, [pc, #188]	; (8020c64 <CheckProtocol_UART5+0x14c>)
 8020ba8:	54d1      	strb	r1, [r2, r3]
                BCC_U5 ^= rcvData;
 8020baa:	4b2c      	ldr	r3, [pc, #176]	; (8020c5c <CheckProtocol_UART5+0x144>)
 8020bac:	781a      	ldrb	r2, [r3, #0]
 8020bae:	79fb      	ldrb	r3, [r7, #7]
 8020bb0:	4053      	eors	r3, r2
 8020bb2:	b2da      	uxtb	r2, r3
 8020bb4:	4b29      	ldr	r3, [pc, #164]	; (8020c5c <CheckProtocol_UART5+0x144>)
 8020bb6:	701a      	strb	r2, [r3, #0]
                len_U5--;
 8020bb8:	4b27      	ldr	r3, [pc, #156]	; (8020c58 <CheckProtocol_UART5+0x140>)
 8020bba:	681b      	ldr	r3, [r3, #0]
 8020bbc:	3b01      	subs	r3, #1
 8020bbe:	4a26      	ldr	r2, [pc, #152]	; (8020c58 <CheckProtocol_UART5+0x140>)
 8020bc0:	6013      	str	r3, [r2, #0]

                if (len_U5 == 0)
 8020bc2:	4b25      	ldr	r3, [pc, #148]	; (8020c58 <CheckProtocol_UART5+0x140>)
 8020bc4:	681b      	ldr	r3, [r3, #0]
 8020bc6:	2b00      	cmp	r3, #0
 8020bc8:	d135      	bne.n	8020c36 <CheckProtocol_UART5+0x11e>
                {
                	rcvState_U5 = STATE_DATA_BCC;
 8020bca:	4b25      	ldr	r3, [pc, #148]	; (8020c60 <CheckProtocol_UART5+0x148>)
 8020bcc:	2202      	movs	r2, #2
 8020bce:	701a      	strb	r2, [r3, #0]
                }
                break;
 8020bd0:	e031      	b.n	8020c36 <CheckProtocol_UART5+0x11e>
            case STATE_DATA_BCC:
            	rcvState_U5 = STATE_STX_WAIT;
 8020bd2:	4b23      	ldr	r3, [pc, #140]	; (8020c60 <CheckProtocol_UART5+0x148>)
 8020bd4:	2200      	movs	r2, #0
 8020bd6:	701a      	strb	r2, [r3, #0]
                if (BCC_U5 == rcvData)
 8020bd8:	4b20      	ldr	r3, [pc, #128]	; (8020c5c <CheckProtocol_UART5+0x144>)
 8020bda:	781a      	ldrb	r2, [r3, #0]
 8020bdc:	79fb      	ldrb	r3, [r7, #7]
 8020bde:	429a      	cmp	r2, r3
 8020be0:	d116      	bne.n	8020c10 <CheckProtocol_UART5+0xf8>
                {
                    if (rsp_U5.d.dataLen != (BYTE)(packetLen_U5 - FRAME_HEADER_LEN))
 8020be2:	4b20      	ldr	r3, [pc, #128]	; (8020c64 <CheckProtocol_UART5+0x14c>)
 8020be4:	789a      	ldrb	r2, [r3, #2]
 8020be6:	4b1b      	ldr	r3, [pc, #108]	; (8020c54 <CheckProtocol_UART5+0x13c>)
 8020be8:	681b      	ldr	r3, [r3, #0]
 8020bea:	b2db      	uxtb	r3, r3
 8020bec:	3b03      	subs	r3, #3
 8020bee:	b2db      	uxtb	r3, r3
 8020bf0:	429a      	cmp	r2, r3
 8020bf2:	d00b      	beq.n	8020c0c <CheckProtocol_UART5+0xf4>
                    {
                        //PRINTL("U3 LENGTH ERR: %d - %d", rsp_U5.d.dataLen, (packetLen_U5 - FRAME_HEADER_LEN));
                    	 printf("U5 LENGTH ERR: %d - %d  \n", rsp_U5.d.dataLen, (packetLen_U5 - FRAME_HEADER_LEN));
 8020bf4:	4b1b      	ldr	r3, [pc, #108]	; (8020c64 <CheckProtocol_UART5+0x14c>)
 8020bf6:	789b      	ldrb	r3, [r3, #2]
 8020bf8:	4619      	mov	r1, r3
 8020bfa:	4b16      	ldr	r3, [pc, #88]	; (8020c54 <CheckProtocol_UART5+0x13c>)
 8020bfc:	681b      	ldr	r3, [r3, #0]
 8020bfe:	3b03      	subs	r3, #3
 8020c00:	461a      	mov	r2, r3
 8020c02:	4819      	ldr	r0, [pc, #100]	; (8020c68 <CheckProtocol_UART5+0x150>)
 8020c04:	f007 ff2a 	bl	8028a5c <printf_>
                        return ERR_WRONG_CMD_LEN;
 8020c08:	230a      	movs	r3, #10
 8020c0a:	e01f      	b.n	8020c4c <CheckProtocol_UART5+0x134>
                    }
                    else
                    {
                        return SUCCESS;
 8020c0c:	2300      	movs	r3, #0
 8020c0e:	e01d      	b.n	8020c4c <CheckProtocol_UART5+0x134>
                    }
                }
                else
                {
                   // PRINTL("U3 BCC ERR. len: %d, BCC: %d, rcv: %d", rsp_U5.d.dataLen, BCC_U5, rcvData);
                	 printf("U5 BCC ERR. len: %d, BCC: %d, rcv: %d  \n", rsp_U5.d.dataLen, BCC_U5, rcvData);
 8020c10:	4b14      	ldr	r3, [pc, #80]	; (8020c64 <CheckProtocol_UART5+0x14c>)
 8020c12:	789b      	ldrb	r3, [r3, #2]
 8020c14:	4619      	mov	r1, r3
 8020c16:	4b11      	ldr	r3, [pc, #68]	; (8020c5c <CheckProtocol_UART5+0x144>)
 8020c18:	781b      	ldrb	r3, [r3, #0]
 8020c1a:	461a      	mov	r2, r3
 8020c1c:	79fb      	ldrb	r3, [r7, #7]
 8020c1e:	4813      	ldr	r0, [pc, #76]	; (8020c6c <CheckProtocol_UART5+0x154>)
 8020c20:	f007 ff1c 	bl	8028a5c <printf_>
                    Print2Hex("", rsp_U5.Buff, packetLen_U5);
 8020c24:	4b0b      	ldr	r3, [pc, #44]	; (8020c54 <CheckProtocol_UART5+0x13c>)
 8020c26:	681b      	ldr	r3, [r3, #0]
 8020c28:	461a      	mov	r2, r3
 8020c2a:	490e      	ldr	r1, [pc, #56]	; (8020c64 <CheckProtocol_UART5+0x14c>)
 8020c2c:	4810      	ldr	r0, [pc, #64]	; (8020c70 <CheckProtocol_UART5+0x158>)
 8020c2e:	f00d ff85 	bl	802eb3c <Print2Hex>
                    return ERR_BCC;
 8020c32:	2305      	movs	r3, #5
 8020c34:	e00a      	b.n	8020c4c <CheckProtocol_UART5+0x134>
	while (IUart_RecvByte_check(COM5,&rcvData))
 8020c36:	1dfb      	adds	r3, r7, #7
 8020c38:	4619      	mov	r1, r3
 8020c3a:	2004      	movs	r0, #4
 8020c3c:	f005 f93c 	bl	8025eb8 <IUart_RecvByte_check>
 8020c40:	4603      	mov	r3, r0
 8020c42:	2b00      	cmp	r3, #0
 8020c44:	f47f af6c 	bne.w	8020b20 <CheckProtocol_UART5+0x8>
                }
            }
        }
    }

    return FAIL;
 8020c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020c4c:	4618      	mov	r0, r3
 8020c4e:	3708      	adds	r7, #8
 8020c50:	46bd      	mov	sp, r7
 8020c52:	bd80      	pop	{r7, pc}
 8020c54:	2400011c 	.word	0x2400011c
 8020c58:	24000120 	.word	0x24000120
 8020c5c:	24000124 	.word	0x24000124
 8020c60:	24000125 	.word	0x24000125
 8020c64:	240000e8 	.word	0x240000e8
 8020c68:	08030058 	.word	0x08030058
 8020c6c:	08030074 	.word	0x08030074
 8020c70:	08030054 	.word	0x08030054

08020c74 <ProcessCommand_Barrier>:
 *			- ERR_ILLEGAL_CMD  : command code is not defined
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/
int ProcessCommand_Barrier(bool isMain)
{
 8020c74:	b580      	push	{r7, lr}
 8020c76:	b084      	sub	sp, #16
 8020c78:	af00      	add	r7, sp, #0
 8020c7a:	4603      	mov	r3, r0
 8020c7c:	71fb      	strb	r3, [r7, #7]
    BYTE cmd;
    if (isMain == TRUE)
 8020c7e:	79fb      	ldrb	r3, [r7, #7]
 8020c80:	2b00      	cmp	r3, #0
 8020c82:	d003      	beq.n	8020c8c <ProcessCommand_Barrier+0x18>
    {
        cmd = rsp_U4.d.command;
 8020c84:	4b2d      	ldr	r3, [pc, #180]	; (8020d3c <ProcessCommand_Barrier+0xc8>)
 8020c86:	781b      	ldrb	r3, [r3, #0]
 8020c88:	73fb      	strb	r3, [r7, #15]
 8020c8a:	e002      	b.n	8020c92 <ProcessCommand_Barrier+0x1e>
    }
    else
    {
        cmd = rsp_U5.d.command;
 8020c8c:	4b2c      	ldr	r3, [pc, #176]	; (8020d40 <ProcessCommand_Barrier+0xcc>)
 8020c8e:	781b      	ldrb	r3, [r3, #0]
 8020c90:	73fb      	strb	r3, [r7, #15]
    }
    switch (cmd) // command
 8020c92:	7bfb      	ldrb	r3, [r7, #15]
 8020c94:	2b04      	cmp	r3, #4
 8020c96:	dc37      	bgt.n	8020d08 <ProcessCommand_Barrier+0x94>
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	dc27      	bgt.n	8020cec <ProcessCommand_Barrier+0x78>
 8020c9c:	e046      	b.n	8020d2c <ProcessCommand_Barrier+0xb8>
 8020c9e:	3b90      	subs	r3, #144	; 0x90
 8020ca0:	2b0f      	cmp	r3, #15
 8020ca2:	d843      	bhi.n	8020d2c <ProcessCommand_Barrier+0xb8>
 8020ca4:	a201      	add	r2, pc, #4	; (adr r2, 8020cac <ProcessCommand_Barrier+0x38>)
 8020ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020caa:	bf00      	nop
 8020cac:	08020d31 	.word	0x08020d31
 8020cb0:	08020d31 	.word	0x08020d31
 8020cb4:	08020d13 	.word	0x08020d13
 8020cb8:	08020d31 	.word	0x08020d31
 8020cbc:	08020d31 	.word	0x08020d31
 8020cc0:	08020d31 	.word	0x08020d31
 8020cc4:	08020d2d 	.word	0x08020d2d
 8020cc8:	08020d2d 	.word	0x08020d2d
 8020ccc:	08020d2d 	.word	0x08020d2d
 8020cd0:	08020d2d 	.word	0x08020d2d
 8020cd4:	08020d2d 	.word	0x08020d2d
 8020cd8:	08020d2d 	.word	0x08020d2d
 8020cdc:	08020d31 	.word	0x08020d31
 8020ce0:	08020d31 	.word	0x08020d31
 8020ce4:	08020d31 	.word	0x08020d31
 8020ce8:	08020d31 	.word	0x08020d31
 8020cec:	3b01      	subs	r3, #1
 8020cee:	2b03      	cmp	r3, #3
 8020cf0:	d81c      	bhi.n	8020d2c <ProcessCommand_Barrier+0xb8>
 8020cf2:	a201      	add	r2, pc, #4	; (adr r2, 8020cf8 <ProcessCommand_Barrier+0x84>)
 8020cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020cf8:	08020d1d 	.word	0x08020d1d
 8020cfc:	08020d21 	.word	0x08020d21
 8020d00:	08020d25 	.word	0x08020d25
 8020d04:	08020d29 	.word	0x08020d29
 8020d08:	2b9f      	cmp	r3, #159	; 0x9f
 8020d0a:	dc0f      	bgt.n	8020d2c <ProcessCommand_Barrier+0xb8>
 8020d0c:	2b90      	cmp	r3, #144	; 0x90
 8020d0e:	dac6      	bge.n	8020c9e <ProcessCommand_Barrier+0x2a>
 8020d10:	e00c      	b.n	8020d2c <ProcessCommand_Barrier+0xb8>
        break;
    case CMD_GET_PARAM_SUB:
        // CMDGetGCUOpMode();
        break;
    case CMD_GET_STATUS_MAIN:
        Brr_Res_Status(isMain);
 8020d12:	79fb      	ldrb	r3, [r7, #7]
 8020d14:	4618      	mov	r0, r3
 8020d16:	f7ff fd57 	bl	80207c8 <Brr_Res_Status>
        break;
 8020d1a:	e00a      	b.n	8020d32 <ProcessCommand_Barrier+0xbe>
        break;
    case CMD_GET_IAP_VERSION_SUB:
        // CMDGetGCUOpMode();
        break;
    case CMD_ACK:
        return SUCCESS;
 8020d1c:	2300      	movs	r3, #0
 8020d1e:	e009      	b.n	8020d34 <ProcessCommand_Barrier+0xc0>
    case CMD_NAK:
        return SUCCESS;
 8020d20:	2300      	movs	r3, #0
 8020d22:	e007      	b.n	8020d34 <ProcessCommand_Barrier+0xc0>
    case CMD_MSG_ERR:
        return SUCCESS;
 8020d24:	2300      	movs	r3, #0
 8020d26:	e005      	b.n	8020d34 <ProcessCommand_Barrier+0xc0>
    case CMD_MSG_DUP:
        return SUCCESS;
 8020d28:	2300      	movs	r3, #0
 8020d2a:	e003      	b.n	8020d34 <ProcessCommand_Barrier+0xc0>
    default:
        return SUCCESS;
 8020d2c:	2300      	movs	r3, #0
 8020d2e:	e001      	b.n	8020d34 <ProcessCommand_Barrier+0xc0>
        break;
 8020d30:	bf00      	nop
    }

    return SUCCESS;
 8020d32:	2300      	movs	r3, #0
}
 8020d34:	4618      	mov	r0, r3
 8020d36:	3710      	adds	r7, #16
 8020d38:	46bd      	mov	sp, r7
 8020d3a:	bd80      	pop	{r7, pc}
 8020d3c:	240000d4 	.word	0x240000d4
 8020d40:	240000e8 	.word	0x240000e8

08020d44 <ProcessComm_Barrier>:
 * comments: it checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it makes action refer to the command
 *           from Host.
 *******************************************************************************/
void ProcessComm_Barrier(void)
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b082      	sub	sp, #8
 8020d48:	af00      	add	r7, sp, #0
    // Changed an order. Slave barrier first.
    int nError = CheckProtocol_UART5();
 8020d4a:	f7ff fee5 	bl	8020b18 <CheckProtocol_UART5>
 8020d4e:	6078      	str	r0, [r7, #4]
    if (nError == SUCCESS)
 8020d50:	687b      	ldr	r3, [r7, #4]
 8020d52:	2b00      	cmp	r3, #0
 8020d54:	d108      	bne.n	8020d68 <ProcessComm_Barrier+0x24>
    {
        if (ProcessCommand_Barrier(FALSE) != SUCCESS)
 8020d56:	2000      	movs	r0, #0
 8020d58:	f7ff ff8c 	bl	8020c74 <ProcessCommand_Barrier>
 8020d5c:	4603      	mov	r3, r0
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d002      	beq.n	8020d68 <ProcessComm_Barrier+0x24>
        {
            //PRINTL("UART3 ERR");
        	printf("UART5 ERR  \n");
 8020d62:	480b      	ldr	r0, [pc, #44]	; (8020d90 <ProcessComm_Barrier+0x4c>)
 8020d64:	f007 fe7a 	bl	8028a5c <printf_>
        }        
    }

    nError = CheckProtocol_UART4();
 8020d68:	f7ff fe28 	bl	80209bc <CheckProtocol_UART4>
 8020d6c:	6078      	str	r0, [r7, #4]
    if (nError == SUCCESS)
 8020d6e:	687b      	ldr	r3, [r7, #4]
 8020d70:	2b00      	cmp	r3, #0
 8020d72:	d108      	bne.n	8020d86 <ProcessComm_Barrier+0x42>
    {
        if (ProcessCommand_Barrier(TRUE) != SUCCESS)
 8020d74:	2001      	movs	r0, #1
 8020d76:	f7ff ff7d 	bl	8020c74 <ProcessCommand_Barrier>
 8020d7a:	4603      	mov	r3, r0
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	d002      	beq.n	8020d86 <ProcessComm_Barrier+0x42>
        {
            // TODO: Do we need the retry logic?
        	printf("UART4 ERR  \n");
 8020d80:	4804      	ldr	r0, [pc, #16]	; (8020d94 <ProcessComm_Barrier+0x50>)
 8020d82:	f007 fe6b 	bl	8028a5c <printf_>
        }
    }
}
 8020d86:	bf00      	nop
 8020d88:	3708      	adds	r7, #8
 8020d8a:	46bd      	mov	sp, r7
 8020d8c:	bd80      	pop	{r7, pc}
 8020d8e:	bf00      	nop
 8020d90:	080300a0 	.word	0x080300a0
 8020d94:	080300b0 	.word	0x080300b0

08020d98 <U4_TxWait>:
}
*/


void U4_TxWait(void)
{
 8020d98:	b480      	push	{r7}
 8020d9a:	af00      	add	r7, sp, #0
	while ((iUartTable[COM4].hUart->Instance->ISR & UART_FLAG_TXE) == RESET)
 8020d9c:	bf00      	nop
 8020d9e:	4b07      	ldr	r3, [pc, #28]	; (8020dbc <U4_TxWait+0x24>)
 8020da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	69db      	ldr	r3, [r3, #28]
 8020da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020daa:	2b00      	cmp	r3, #0
 8020dac:	d0f7      	beq.n	8020d9e <U4_TxWait+0x6>
		;
}
 8020dae:	bf00      	nop
 8020db0:	bf00      	nop
 8020db2:	46bd      	mov	sp, r7
 8020db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020db8:	4770      	bx	lr
 8020dba:	bf00      	nop
 8020dbc:	24001964 	.word	0x24001964

08020dc0 <U5_TxWait>:


void U5_TxWait(void)
{
 8020dc0:	b480      	push	{r7}
 8020dc2:	af00      	add	r7, sp, #0
	while ((iUartTable[COM5].hUart->Instance->ISR & UART_FLAG_TXE) == RESET)
 8020dc4:	bf00      	nop
 8020dc6:	4b07      	ldr	r3, [pc, #28]	; (8020de4 <U5_TxWait+0x24>)
 8020dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020dca:	681b      	ldr	r3, [r3, #0]
 8020dcc:	69db      	ldr	r3, [r3, #28]
 8020dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	d0f7      	beq.n	8020dc6 <U5_TxWait+0x6>
		;
}
 8020dd6:	bf00      	nop
 8020dd8:	bf00      	nop
 8020dda:	46bd      	mov	sp, r7
 8020ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020de0:	4770      	bx	lr
 8020de2:	bf00      	nop
 8020de4:	24001964 	.word	0x24001964

08020de8 <U4_Putch>:

void U4_Putch(BYTE c)
{
 8020de8:	b580      	push	{r7, lr}
 8020dea:	b082      	sub	sp, #8
 8020dec:	af00      	add	r7, sp, #0
 8020dee:	4603      	mov	r3, r0
 8020df0:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM4, (uint8_t)c);
 8020df2:	79fb      	ldrb	r3, [r7, #7]
 8020df4:	4619      	mov	r1, r3
 8020df6:	2003      	movs	r0, #3
 8020df8:	f004 ffcc 	bl	8025d94 <IUart_SendByte>
}
 8020dfc:	bf00      	nop
 8020dfe:	3708      	adds	r7, #8
 8020e00:	46bd      	mov	sp, r7
 8020e02:	bd80      	pop	{r7, pc}

08020e04 <U5_Putch>:

void U5_Putch(BYTE c)
{
 8020e04:	b580      	push	{r7, lr}
 8020e06:	b082      	sub	sp, #8
 8020e08:	af00      	add	r7, sp, #0
 8020e0a:	4603      	mov	r3, r0
 8020e0c:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM5, (uint8_t)c);
 8020e0e:	79fb      	ldrb	r3, [r7, #7]
 8020e10:	4619      	mov	r1, r3
 8020e12:	2004      	movs	r0, #4
 8020e14:	f004 ffbe 	bl	8025d94 <IUart_SendByte>
}
 8020e18:	bf00      	nop
 8020e1a:	3708      	adds	r7, #8
 8020e1c:	46bd      	mov	sp, r7
 8020e1e:	bd80      	pop	{r7, pc}

08020e20 <SetDefaultOpMode>:
int nBuzzerCount[BUZZER_COUNT];

extern T_PASS_SEN_SWING psenNew;				// T_PASS_SEN structure does not exist		pms
/* Setting Functions ------------------------------------------------------*/
void SetDefaultOpMode(void)
{
 8020e20:	b480      	push	{r7}
 8020e22:	af00      	add	r7, sp, #0
    gCurGCUOpMode.bServiceMode_EN = NO_SERVICE;
 8020e24:	4b0a      	ldr	r3, [pc, #40]	; (8020e50 <SetDefaultOpMode+0x30>)
 8020e26:	2200      	movs	r2, #0
 8020e28:	701a      	strb	r2, [r3, #0]
    gCurGCUOpMode.bServiceMode_EX = NO_SERVICE;
 8020e2a:	4b09      	ldr	r3, [pc, #36]	; (8020e50 <SetDefaultOpMode+0x30>)
 8020e2c:	2200      	movs	r2, #0
 8020e2e:	705a      	strb	r2, [r3, #1]
    gCurGCUOpMode.bEmergencyMaint = MODE_NONE;
 8020e30:	4b07      	ldr	r3, [pc, #28]	; (8020e50 <SetDefaultOpMode+0x30>)
 8020e32:	2200      	movs	r2, #0
 8020e34:	709a      	strb	r2, [r3, #2]
    gCurGCUOpMode.bFlapDoorMode = FD_MODE_OPEN;
 8020e36:	4b06      	ldr	r3, [pc, #24]	; (8020e50 <SetDefaultOpMode+0x30>)
 8020e38:	2201      	movs	r2, #1
 8020e3a:	70da      	strb	r2, [r3, #3]
 8020e3c:	4b04      	ldr	r3, [pc, #16]	; (8020e50 <SetDefaultOpMode+0x30>)
 8020e3e:	681b      	ldr	r3, [r3, #0]
 8020e40:	461a      	mov	r2, r3

    memcpy(&gNewGCUOpMode, &gCurGCUOpMode, sizeof(T_GCU_OP_MODE));
 8020e42:	4b04      	ldr	r3, [pc, #16]	; (8020e54 <SetDefaultOpMode+0x34>)
 8020e44:	601a      	str	r2, [r3, #0]
}
 8020e46:	bf00      	nop
 8020e48:	46bd      	mov	sp, r7
 8020e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e4e:	4770      	bx	lr
 8020e50:	240004d4 	.word	0x240004d4
 8020e54:	240004d8 	.word	0x240004d8

08020e58 <SetDefaultParameter>:

void SetDefaultParameter(void)
{
 8020e58:	b480      	push	{r7}
 8020e5a:	af00      	add	r7, sp, #0
    gGCUParameter.bPassageType = PASSAGE_TYPE_S;
 8020e5c:	4b1a      	ldr	r3, [pc, #104]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020e5e:	2253      	movs	r2, #83	; 0x53
 8020e60:	701a      	strb	r2, [r3, #0]
    gGCUParameter.bPassageMode = PASS_MODE_EASY;
 8020e62:	4b19      	ldr	r3, [pc, #100]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020e64:	2201      	movs	r2, #1
 8020e66:	705a      	strb	r2, [r3, #1]
    gGCUParameter.bAlarmMode = ALARM_MODE_POLL;
 8020e68:	4b17      	ldr	r3, [pc, #92]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020e6a:	2200      	movs	r2, #0
 8020e6c:	709a      	strb	r2, [r3, #2]
    gGCUParameter.bAuthType = AUTH_TYPE_TTL;
 8020e6e:	4b16      	ldr	r3, [pc, #88]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020e70:	2201      	movs	r2, #1
 8020e72:	70da      	strb	r2, [r3, #3]
    gGCUParameter.bAuthTimeOut = DEFAULT_AUTH_TIMEOUT;
 8020e74:	4b14      	ldr	r3, [pc, #80]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020e76:	2214      	movs	r2, #20
 8020e78:	711a      	strb	r2, [r3, #4]
    gGCUParameter.bCriticalZone = ALARM_ZONE_NONE;
 8020e7a:	4b13      	ldr	r3, [pc, #76]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020e7c:	2200      	movs	r2, #0
 8020e7e:	715a      	strb	r2, [r3, #5]
    gGCUParameter.bCounterZone = ALARM_ZONE_NONE;
 8020e80:	4b11      	ldr	r3, [pc, #68]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020e82:	2200      	movs	r2, #0
 8020e84:	719a      	strb	r2, [r3, #6]
    gGCUParameter.bEMGTimeout = DEFAULT_EMG_TIMEOUT;
 8020e86:	4b10      	ldr	r3, [pc, #64]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020e88:	222d      	movs	r2, #45	; 0x2d
 8020e8a:	71da      	strb	r2, [r3, #7]
    gGCUParameter.bSensorBlockTimeout = DEFAULT_SENSOR_BLOCK_TIMEOUT;
 8020e8c:	4b0e      	ldr	r3, [pc, #56]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020e8e:	22b4      	movs	r2, #180	; 0xb4
 8020e90:	721a      	strb	r2, [r3, #8]
    gGCUParameter.bBarrierOpenTimeout = DEFAULT_BARRIER_OPEN_TIMEOUT;
 8020e92:	4b0d      	ldr	r3, [pc, #52]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020e94:	2203      	movs	r2, #3
 8020e96:	725a      	strb	r2, [r3, #9]
    gGCUParameter.bAutoEmergency = ON;
 8020e98:	4b0b      	ldr	r3, [pc, #44]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020e9a:	2201      	movs	r2, #1
 8020e9c:	731a      	strb	r2, [r3, #12]
    gGCUParameter.bCheckChild = ON;
 8020e9e:	4b0a      	ldr	r3, [pc, #40]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020ea0:	2201      	movs	r2, #1
 8020ea2:	735a      	strb	r2, [r3, #13]
    gGCUParameter.bAlarmTimeout = DEFAULT_ALARM_TIMEOUT;
 8020ea4:	4b08      	ldr	r3, [pc, #32]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020ea6:	2205      	movs	r2, #5
 8020ea8:	729a      	strb	r2, [r3, #10]
    gGCUParameter.bGateType = STANDARD;
 8020eaa:	4b07      	ldr	r3, [pc, #28]	; (8020ec8 <SetDefaultParameter+0x70>)
 8020eac:	2200      	movs	r2, #0
 8020eae:	739a      	strb	r2, [r3, #14]

    gdwTimeoutSafety = SAFETY_TIMEOUT_STD;
 8020eb0:	4b06      	ldr	r3, [pc, #24]	; (8020ecc <SetDefaultParameter+0x74>)
 8020eb2:	220a      	movs	r2, #10
 8020eb4:	601a      	str	r2, [r3, #0]
    gdwTimeoutLuggage = LUGGAGE_LIMIT_STD;
 8020eb6:	4b06      	ldr	r3, [pc, #24]	; (8020ed0 <SetDefaultParameter+0x78>)
 8020eb8:	2296      	movs	r2, #150	; 0x96
 8020eba:	601a      	str	r2, [r3, #0]
}
 8020ebc:	bf00      	nop
 8020ebe:	46bd      	mov	sp, r7
 8020ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec4:	4770      	bx	lr
 8020ec6:	bf00      	nop
 8020ec8:	240004a0 	.word	0x240004a0
 8020ecc:	24000148 	.word	0x24000148
 8020ed0:	2400014c 	.word	0x2400014c

08020ed4 <SetDefaultStatus>:

void SetDefaultStatus(void)
{
 8020ed4:	b480      	push	{r7}
 8020ed6:	af00      	add	r7, sp, #0
    gGCUStatus.bAuthCount_EN = 0;
 8020ed8:	4b0f      	ldr	r3, [pc, #60]	; (8020f18 <SetDefaultStatus+0x44>)
 8020eda:	2200      	movs	r2, #0
 8020edc:	711a      	strb	r2, [r3, #4]
    gGCUStatus.bAuthCount_EX = 0;
 8020ede:	4b0e      	ldr	r3, [pc, #56]	; (8020f18 <SetDefaultStatus+0x44>)
 8020ee0:	2200      	movs	r2, #0
 8020ee2:	715a      	strb	r2, [r3, #5]
    gGCUStatus.PassageAlarm.bAlarm = 0;
 8020ee4:	4b0c      	ldr	r3, [pc, #48]	; (8020f18 <SetDefaultStatus+0x44>)
 8020ee6:	2200      	movs	r2, #0
 8020ee8:	721a      	strb	r2, [r3, #8]
    gGCUStatus.ModuleAlarm.bAlarm = 0;
 8020eea:	4b0b      	ldr	r3, [pc, #44]	; (8020f18 <SetDefaultStatus+0x44>)
 8020eec:	2200      	movs	r2, #0
 8020eee:	731a      	strb	r2, [r3, #12]
#if BART_IO
    gGCUStatus.bMaintenanceDoorSw = (RD_SWITCH & MASK_SDOOR);		//door mask 0xff
 8020ef0:	4b0a      	ldr	r3, [pc, #40]	; (8020f1c <SetDefaultStatus+0x48>)
 8020ef2:	781b      	ldrb	r3, [r3, #0]
 8020ef4:	b2da      	uxtb	r2, r3
 8020ef6:	4b08      	ldr	r3, [pc, #32]	; (8020f18 <SetDefaultStatus+0x44>)
 8020ef8:	745a      	strb	r2, [r3, #17]
#else
    gGCUStatus.bMaintenanceDoorSw = (RD_SWITCH1 & MASK_SDOOR1) | ((RD_SWITCH2 & MASK_SDOOR2) << 4);
#endif
    gGCUStatus.bUPSStatus = 0x06;
 8020efa:	4b07      	ldr	r3, [pc, #28]	; (8020f18 <SetDefaultStatus+0x44>)
 8020efc:	2206      	movs	r2, #6
 8020efe:	749a      	strb	r2, [r3, #18]
    gGCUStatus.bDoorForcedOpen = OFF;
 8020f00:	4b05      	ldr	r3, [pc, #20]	; (8020f18 <SetDefaultStatus+0x44>)
 8020f02:	2200      	movs	r2, #0
 8020f04:	755a      	strb	r2, [r3, #21]
    gbDoorForecedOpen = OFF;
 8020f06:	4b06      	ldr	r3, [pc, #24]	; (8020f20 <SetDefaultStatus+0x4c>)
 8020f08:	2200      	movs	r2, #0
 8020f0a:	701a      	strb	r2, [r3, #0]
}
 8020f0c:	bf00      	nop
 8020f0e:	46bd      	mov	sp, r7
 8020f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f14:	4770      	bx	lr
 8020f16:	bf00      	nop
 8020f18:	240004b0 	.word	0x240004b0
 8020f1c:	60000300 	.word	0x60000300
 8020f20:	24000439 	.word	0x24000439

08020f24 <ApplyStatusMode>:

void ApplyStatusMode(void)
{
 8020f24:	b480      	push	{r7}
 8020f26:	af00      	add	r7, sp, #0
    gGCUStatus.ModeStatus.b.nServiceMode_EN = gCurGCUOpMode.bServiceMode_EN;
 8020f28:	4b1a      	ldr	r3, [pc, #104]	; (8020f94 <ApplyStatusMode+0x70>)
 8020f2a:	781b      	ldrb	r3, [r3, #0]
 8020f2c:	019b      	lsls	r3, r3, #6
 8020f2e:	b25b      	sxtb	r3, r3
 8020f30:	119b      	asrs	r3, r3, #6
 8020f32:	b259      	sxtb	r1, r3
 8020f34:	4a18      	ldr	r2, [pc, #96]	; (8020f98 <ApplyStatusMode+0x74>)
 8020f36:	7813      	ldrb	r3, [r2, #0]
 8020f38:	f361 0301 	bfi	r3, r1, #0, #2
 8020f3c:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nServiceMode_EX = gCurGCUOpMode.bServiceMode_EX;
 8020f3e:	4b15      	ldr	r3, [pc, #84]	; (8020f94 <ApplyStatusMode+0x70>)
 8020f40:	785b      	ldrb	r3, [r3, #1]
 8020f42:	019b      	lsls	r3, r3, #6
 8020f44:	b25b      	sxtb	r3, r3
 8020f46:	119b      	asrs	r3, r3, #6
 8020f48:	b259      	sxtb	r1, r3
 8020f4a:	4a13      	ldr	r2, [pc, #76]	; (8020f98 <ApplyStatusMode+0x74>)
 8020f4c:	7813      	ldrb	r3, [r2, #0]
 8020f4e:	f361 0383 	bfi	r3, r1, #2, #2
 8020f52:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nEmergencyMode = (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY);
 8020f54:	4b0f      	ldr	r3, [pc, #60]	; (8020f94 <ApplyStatusMode+0x70>)
 8020f56:	789b      	ldrb	r3, [r3, #2]
 8020f58:	019b      	lsls	r3, r3, #6
 8020f5a:	b25b      	sxtb	r3, r3
 8020f5c:	119b      	asrs	r3, r3, #6
 8020f5e:	b259      	sxtb	r1, r3
 8020f60:	4a0d      	ldr	r2, [pc, #52]	; (8020f98 <ApplyStatusMode+0x74>)
 8020f62:	7813      	ldrb	r3, [r2, #0]
 8020f64:	f361 1305 	bfi	r3, r1, #4, #2
 8020f68:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nMaintenanceMode = (gCurGCUOpMode.bEmergencyMaint << 7) & 1;
 8020f6a:	4a0b      	ldr	r2, [pc, #44]	; (8020f98 <ApplyStatusMode+0x74>)
 8020f6c:	7813      	ldrb	r3, [r2, #0]
 8020f6e:	f36f 1386 	bfc	r3, #6, #1
 8020f72:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nFlapDoorMode = gCurGCUOpMode.bFlapDoorMode;
 8020f74:	4b07      	ldr	r3, [pc, #28]	; (8020f94 <ApplyStatusMode+0x70>)
 8020f76:	78db      	ldrb	r3, [r3, #3]
 8020f78:	01db      	lsls	r3, r3, #7
 8020f7a:	b25b      	sxtb	r3, r3
 8020f7c:	11db      	asrs	r3, r3, #7
 8020f7e:	b259      	sxtb	r1, r3
 8020f80:	4a05      	ldr	r2, [pc, #20]	; (8020f98 <ApplyStatusMode+0x74>)
 8020f82:	7813      	ldrb	r3, [r2, #0]
 8020f84:	f361 13c7 	bfi	r3, r1, #7, #1
 8020f88:	7013      	strb	r3, [r2, #0]
}
 8020f8a:	bf00      	nop
 8020f8c:	46bd      	mov	sp, r7
 8020f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f92:	4770      	bx	lr
 8020f94:	240004d4 	.word	0x240004d4
 8020f98:	240004b0 	.word	0x240004b0

08020f9c <SetNewOpMode>:

void SetNewOpMode(T_GCU_OP_MODE *pNewMode)
{
 8020f9c:	b580      	push	{r7, lr}
 8020f9e:	b082      	sub	sp, #8
 8020fa0:	af00      	add	r7, sp, #0
 8020fa2:	6078      	str	r0, [r7, #4]
    if (pNewMode->bServiceMode_EN > FREE_SERVICE)
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	781b      	ldrb	r3, [r3, #0]
 8020fa8:	2b02      	cmp	r3, #2
 8020faa:	d903      	bls.n	8020fb4 <SetNewOpMode+0x18>
        pNewMode->bServiceMode_EN = gCurGCUOpMode.bServiceMode_EN;
 8020fac:	4b18      	ldr	r3, [pc, #96]	; (8021010 <SetNewOpMode+0x74>)
 8020fae:	781a      	ldrb	r2, [r3, #0]
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	701a      	strb	r2, [r3, #0]

    if (pNewMode->bServiceMode_EX > FREE_SERVICE)
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	785b      	ldrb	r3, [r3, #1]
 8020fb8:	2b02      	cmp	r3, #2
 8020fba:	d903      	bls.n	8020fc4 <SetNewOpMode+0x28>
        pNewMode->bServiceMode_EX = gCurGCUOpMode.bServiceMode_EX;
 8020fbc:	4b14      	ldr	r3, [pc, #80]	; (8021010 <SetNewOpMode+0x74>)
 8020fbe:	785a      	ldrb	r2, [r3, #1]
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	705a      	strb	r2, [r3, #1]

    if (pNewMode->bFlapDoorMode > FD_MODE_OPEN)
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	78db      	ldrb	r3, [r3, #3]
 8020fc8:	2b01      	cmp	r3, #1
 8020fca:	d903      	bls.n	8020fd4 <SetNewOpMode+0x38>
        pNewMode->bFlapDoorMode = gCurGCUOpMode.bFlapDoorMode;
 8020fcc:	4b10      	ldr	r3, [pc, #64]	; (8021010 <SetNewOpMode+0x74>)
 8020fce:	78da      	ldrb	r2, [r3, #3]
 8020fd0:	687b      	ldr	r3, [r7, #4]
 8020fd2:	70da      	strb	r2, [r3, #3]
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	681b      	ldr	r3, [r3, #0]
 8020fd8:	461a      	mov	r2, r3

    memcpy(&gNewGCUOpMode, pNewMode, sizeof(T_GCU_OP_MODE));
 8020fda:	4b0e      	ldr	r3, [pc, #56]	; (8021014 <SetNewOpMode+0x78>)
 8020fdc:	601a      	str	r2, [r3, #0]

    if (gNewGCUOpMode.bEmergencyMaint)
 8020fde:	4b0d      	ldr	r3, [pc, #52]	; (8021014 <SetNewOpMode+0x78>)
 8020fe0:	789b      	ldrb	r3, [r3, #2]
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	d00c      	beq.n	8021000 <SetNewOpMode+0x64>
 8020fe6:	4b0b      	ldr	r3, [pc, #44]	; (8021014 <SetNewOpMode+0x78>)
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	461a      	mov	r2, r3
    {
        // If emergency or maint mode, apply new mode immediately.
        memcpy(&gCurGCUOpMode, &gNewGCUOpMode, sizeof(T_GCU_OP_MODE));
 8020fec:	4b08      	ldr	r3, [pc, #32]	; (8021010 <SetNewOpMode+0x74>)
 8020fee:	601a      	str	r2, [r3, #0]
        ApplyStatusMode();
 8020ff0:	f7ff ff98 	bl	8020f24 <ApplyStatusMode>
        InitPassageMode();
 8020ff4:	f001 f970 	bl	80222d8 <InitPassageMode>
        gfModeChanged = FALSE;
 8020ff8:	4b07      	ldr	r3, [pc, #28]	; (8021018 <SetNewOpMode+0x7c>)
 8020ffa:	2200      	movs	r2, #0
 8020ffc:	701a      	strb	r2, [r3, #0]
    else
    {
        // If in service mode, decide to apply new mode by passenger check logic (refer to CheckModeChange()).
        gfModeChanged = TRUE;
    }
}
 8020ffe:	e002      	b.n	8021006 <SetNewOpMode+0x6a>
        gfModeChanged = TRUE;
 8021000:	4b05      	ldr	r3, [pc, #20]	; (8021018 <SetNewOpMode+0x7c>)
 8021002:	2201      	movs	r2, #1
 8021004:	701a      	strb	r2, [r3, #0]
}
 8021006:	bf00      	nop
 8021008:	3708      	adds	r7, #8
 802100a:	46bd      	mov	sp, r7
 802100c:	bd80      	pop	{r7, pc}
 802100e:	bf00      	nop
 8021010:	240004d4 	.word	0x240004d4
 8021014:	240004d8 	.word	0x240004d8
 8021018:	24000133 	.word	0x24000133

0802101c <CheckModeChange>:

void CheckModeChange(void)
{
 802101c:	b580      	push	{r7, lr}
 802101e:	af00      	add	r7, sp, #0
    if (gfModeChanged == TRUE && (gGCUStatus.bAuthCount_EN == 0) && (gGCUStatus.bAuthCount_EX == 0))
 8021020:	4b16      	ldr	r3, [pc, #88]	; (802107c <CheckModeChange+0x60>)
 8021022:	781b      	ldrb	r3, [r3, #0]
 8021024:	2b00      	cmp	r3, #0
 8021026:	d027      	beq.n	8021078 <CheckModeChange+0x5c>
 8021028:	4b15      	ldr	r3, [pc, #84]	; (8021080 <CheckModeChange+0x64>)
 802102a:	791b      	ldrb	r3, [r3, #4]
 802102c:	b2db      	uxtb	r3, r3
 802102e:	2b00      	cmp	r3, #0
 8021030:	d122      	bne.n	8021078 <CheckModeChange+0x5c>
 8021032:	4b13      	ldr	r3, [pc, #76]	; (8021080 <CheckModeChange+0x64>)
 8021034:	795b      	ldrb	r3, [r3, #5]
 8021036:	b2db      	uxtb	r3, r3
 8021038:	2b00      	cmp	r3, #0
 802103a:	d11d      	bne.n	8021078 <CheckModeChange+0x5c>
    {
        //PRINTL(" [CheckModeChange] Old mode EX:%d/EN:%d", gCurGCUOpMode.bServiceMode_EX, gCurGCUOpMode.bServiceMode_EN);
        //PRINTL(" [CheckModeChange] New mode EX:%d/EN:%d", gNewGCUOpMode.bServiceMode_EX, gNewGCUOpMode.bServiceMode_EN);

        printf(" [CheckModeChange] Old mode EX:%d/EN:%d  \n", gCurGCUOpMode.bServiceMode_EX, gCurGCUOpMode.bServiceMode_EN);
 802103c:	4b11      	ldr	r3, [pc, #68]	; (8021084 <CheckModeChange+0x68>)
 802103e:	785b      	ldrb	r3, [r3, #1]
 8021040:	4619      	mov	r1, r3
 8021042:	4b10      	ldr	r3, [pc, #64]	; (8021084 <CheckModeChange+0x68>)
 8021044:	781b      	ldrb	r3, [r3, #0]
 8021046:	461a      	mov	r2, r3
 8021048:	480f      	ldr	r0, [pc, #60]	; (8021088 <CheckModeChange+0x6c>)
 802104a:	f007 fd07 	bl	8028a5c <printf_>
        printf(" [CheckModeChange] New mode EX:%d/EN:%d  \n", gNewGCUOpMode.bServiceMode_EX, gNewGCUOpMode.bServiceMode_EN);
 802104e:	4b0f      	ldr	r3, [pc, #60]	; (802108c <CheckModeChange+0x70>)
 8021050:	785b      	ldrb	r3, [r3, #1]
 8021052:	4619      	mov	r1, r3
 8021054:	4b0d      	ldr	r3, [pc, #52]	; (802108c <CheckModeChange+0x70>)
 8021056:	781b      	ldrb	r3, [r3, #0]
 8021058:	461a      	mov	r2, r3
 802105a:	480d      	ldr	r0, [pc, #52]	; (8021090 <CheckModeChange+0x74>)
 802105c:	f007 fcfe 	bl	8028a5c <printf_>
    	gfModeChanged = FALSE;
 8021060:	4b06      	ldr	r3, [pc, #24]	; (802107c <CheckModeChange+0x60>)
 8021062:	2200      	movs	r2, #0
 8021064:	701a      	strb	r2, [r3, #0]
 8021066:	4b09      	ldr	r3, [pc, #36]	; (802108c <CheckModeChange+0x70>)
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	461a      	mov	r2, r3
        memcpy(&gCurGCUOpMode, &gNewGCUOpMode, sizeof(T_GCU_OP_MODE));
 802106c:	4b05      	ldr	r3, [pc, #20]	; (8021084 <CheckModeChange+0x68>)
 802106e:	601a      	str	r2, [r3, #0]
        ApplyStatusMode();
 8021070:	f7ff ff58 	bl	8020f24 <ApplyStatusMode>
        InitPassageMode();
 8021074:	f001 f930 	bl	80222d8 <InitPassageMode>
    }
}
 8021078:	bf00      	nop
 802107a:	bd80      	pop	{r7, pc}
 802107c:	24000133 	.word	0x24000133
 8021080:	240004b0 	.word	0x240004b0
 8021084:	240004d4 	.word	0x240004d4
 8021088:	080300c0 	.word	0x080300c0
 802108c:	240004d8 	.word	0x240004d8
 8021090:	080300ec 	.word	0x080300ec

08021094 <GetCurrentOpMode>:

void GetCurrentOpMode(T_GCU_OP_MODE *pCurMode)
{
 8021094:	b480      	push	{r7}
 8021096:	b083      	sub	sp, #12
 8021098:	af00      	add	r7, sp, #0
 802109a:	6078      	str	r0, [r7, #4]
 802109c:	4b05      	ldr	r3, [pc, #20]	; (80210b4 <GetCurrentOpMode+0x20>)
 802109e:	681b      	ldr	r3, [r3, #0]
 80210a0:	461a      	mov	r2, r3
    memcpy(pCurMode, &gCurGCUOpMode, sizeof(T_GCU_OP_MODE));
 80210a2:	687b      	ldr	r3, [r7, #4]
 80210a4:	601a      	str	r2, [r3, #0]
}
 80210a6:	bf00      	nop
 80210a8:	370c      	adds	r7, #12
 80210aa:	46bd      	mov	sp, r7
 80210ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210b0:	4770      	bx	lr
 80210b2:	bf00      	nop
 80210b4:	240004d4 	.word	0x240004d4

080210b8 <SetGCUParameter>:

void SetGCUParameter(T_GCU_PARAMETER *pNewParameter, int nLen)
{
 80210b8:	b490      	push	{r4, r7}
 80210ba:	b082      	sub	sp, #8
 80210bc:	af00      	add	r7, sp, #0
 80210be:	6078      	str	r0, [r7, #4]
 80210c0:	6039      	str	r1, [r7, #0]
    pNewParameter->bPassageType = PASSAGE_TYPE_S;
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	2253      	movs	r2, #83	; 0x53
 80210c6:	701a      	strb	r2, [r3, #0]

    if (pNewParameter->bPassageMode > PASS_MODE_EASY)
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	785b      	ldrb	r3, [r3, #1]
 80210cc:	2b01      	cmp	r3, #1
 80210ce:	d903      	bls.n	80210d8 <SetGCUParameter+0x20>
        pNewParameter->bPassageMode = gGCUParameter.bPassageMode;
 80210d0:	4b1d      	ldr	r3, [pc, #116]	; (8021148 <SetGCUParameter+0x90>)
 80210d2:	785a      	ldrb	r2, [r3, #1]
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	705a      	strb	r2, [r3, #1]

    if (pNewParameter->bAlarmMode > ALARM_MODE_ACTIVE)
 80210d8:	687b      	ldr	r3, [r7, #4]
 80210da:	789b      	ldrb	r3, [r3, #2]
 80210dc:	2b01      	cmp	r3, #1
 80210de:	d903      	bls.n	80210e8 <SetGCUParameter+0x30>
        pNewParameter->bAlarmMode = gGCUParameter.bAlarmMode;
 80210e0:	4b19      	ldr	r3, [pc, #100]	; (8021148 <SetGCUParameter+0x90>)
 80210e2:	789a      	ldrb	r2, [r3, #2]
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	709a      	strb	r2, [r3, #2]

    if (pNewParameter->bAuthType > AUTH_TYPE_TTL)
 80210e8:	687b      	ldr	r3, [r7, #4]
 80210ea:	78db      	ldrb	r3, [r3, #3]
 80210ec:	2b01      	cmp	r3, #1
 80210ee:	d903      	bls.n	80210f8 <SetGCUParameter+0x40>
        pNewParameter->bAuthType = gGCUParameter.bAuthType;
 80210f0:	4b15      	ldr	r3, [pc, #84]	; (8021148 <SetGCUParameter+0x90>)
 80210f2:	78da      	ldrb	r2, [r3, #3]
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	70da      	strb	r2, [r3, #3]

    if (pNewParameter->bCriticalZone > ALARM_ZONE3)
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	795b      	ldrb	r3, [r3, #5]
 80210fc:	2b03      	cmp	r3, #3
 80210fe:	d903      	bls.n	8021108 <SetGCUParameter+0x50>
        pNewParameter->bCriticalZone = gGCUParameter.bCriticalZone;
 8021100:	4b11      	ldr	r3, [pc, #68]	; (8021148 <SetGCUParameter+0x90>)
 8021102:	795a      	ldrb	r2, [r3, #5]
 8021104:	687b      	ldr	r3, [r7, #4]
 8021106:	715a      	strb	r2, [r3, #5]

    if (pNewParameter->bCounterZone > ALARM_ZONE3)
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	799b      	ldrb	r3, [r3, #6]
 802110c:	2b03      	cmp	r3, #3
 802110e:	d903      	bls.n	8021118 <SetGCUParameter+0x60>
        pNewParameter->bCounterZone = gGCUParameter.bCounterZone;
 8021110:	4b0d      	ldr	r3, [pc, #52]	; (8021148 <SetGCUParameter+0x90>)
 8021112:	799a      	ldrb	r2, [r3, #6]
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	719a      	strb	r2, [r3, #6]

    gdwTimeoutSafety = SAFETY_TIMEOUT_STD;
 8021118:	4b0c      	ldr	r3, [pc, #48]	; (802114c <SetGCUParameter+0x94>)
 802111a:	220a      	movs	r2, #10
 802111c:	601a      	str	r2, [r3, #0]
    gdwTimeoutLuggage = LUGGAGE_LIMIT_STD;
 802111e:	4b0c      	ldr	r3, [pc, #48]	; (8021150 <SetGCUParameter+0x98>)
 8021120:	2296      	movs	r2, #150	; 0x96
 8021122:	601a      	str	r2, [r3, #0]

    memcpy(&gGCUParameter, pNewParameter, sizeof(T_GCU_PARAMETER));
 8021124:	4b08      	ldr	r3, [pc, #32]	; (8021148 <SetGCUParameter+0x90>)
 8021126:	687a      	ldr	r2, [r7, #4]
 8021128:	6814      	ldr	r4, [r2, #0]
 802112a:	6850      	ldr	r0, [r2, #4]
 802112c:	6891      	ldr	r1, [r2, #8]
 802112e:	601c      	str	r4, [r3, #0]
 8021130:	6058      	str	r0, [r3, #4]
 8021132:	6099      	str	r1, [r3, #8]
 8021134:	8991      	ldrh	r1, [r2, #12]
 8021136:	7b92      	ldrb	r2, [r2, #14]
 8021138:	8199      	strh	r1, [r3, #12]
 802113a:	739a      	strb	r2, [r3, #14]
}
 802113c:	bf00      	nop
 802113e:	3708      	adds	r7, #8
 8021140:	46bd      	mov	sp, r7
 8021142:	bc90      	pop	{r4, r7}
 8021144:	4770      	bx	lr
 8021146:	bf00      	nop
 8021148:	240004a0 	.word	0x240004a0
 802114c:	24000148 	.word	0x24000148
 8021150:	2400014c 	.word	0x2400014c

08021154 <GetGCUParameter>:

void GetGCUParameter(T_GCU_PARAMETER *pCurParameter)
{
 8021154:	b490      	push	{r4, r7}
 8021156:	b082      	sub	sp, #8
 8021158:	af00      	add	r7, sp, #0
 802115a:	6078      	str	r0, [r7, #4]
    memcpy(pCurParameter, &gGCUParameter, sizeof(T_GCU_PARAMETER));
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	4a08      	ldr	r2, [pc, #32]	; (8021180 <GetGCUParameter+0x2c>)
 8021160:	6814      	ldr	r4, [r2, #0]
 8021162:	6850      	ldr	r0, [r2, #4]
 8021164:	6891      	ldr	r1, [r2, #8]
 8021166:	601c      	str	r4, [r3, #0]
 8021168:	6058      	str	r0, [r3, #4]
 802116a:	6099      	str	r1, [r3, #8]
 802116c:	8991      	ldrh	r1, [r2, #12]
 802116e:	7b92      	ldrb	r2, [r2, #14]
 8021170:	8199      	strh	r1, [r3, #12]
 8021172:	739a      	strb	r2, [r3, #14]
}
 8021174:	bf00      	nop
 8021176:	3708      	adds	r7, #8
 8021178:	46bd      	mov	sp, r7
 802117a:	bc90      	pop	{r4, r7}
 802117c:	4770      	bx	lr
 802117e:	bf00      	nop
 8021180:	240004a0 	.word	0x240004a0

08021184 <GetGCUStatus>:

void GetGCUStatus(T_GCU_STATUS_RES *pCurStatus)
{
 8021184:	b580      	push	{r7, lr}
 8021186:	b084      	sub	sp, #16
 8021188:	af00      	add	r7, sp, #0
 802118a:	6078      	str	r0, [r7, #4]
    T_MODE_STATUS ModeStatus;
	DWORD	dwSpareSenserValue  = 0;
 802118c:	2300      	movs	r3, #0
 802118e:	60fb      	str	r3, [r7, #12]

    // mode status
    ModeStatus.b.nServiceMode_EN = (int)gCurGCUOpMode.bServiceMode_EN;
 8021190:	4b54      	ldr	r3, [pc, #336]	; (80212e4 <GetGCUStatus+0x160>)
 8021192:	781b      	ldrb	r3, [r3, #0]
 8021194:	019b      	lsls	r3, r3, #6
 8021196:	b25b      	sxtb	r3, r3
 8021198:	119b      	asrs	r3, r3, #6
 802119a:	b25a      	sxtb	r2, r3
 802119c:	7a3b      	ldrb	r3, [r7, #8]
 802119e:	f362 0301 	bfi	r3, r2, #0, #2
 80211a2:	723b      	strb	r3, [r7, #8]
    ModeStatus.b.nServiceMode_EX = (int)gCurGCUOpMode.bServiceMode_EX;
 80211a4:	4b4f      	ldr	r3, [pc, #316]	; (80212e4 <GetGCUStatus+0x160>)
 80211a6:	785b      	ldrb	r3, [r3, #1]
 80211a8:	019b      	lsls	r3, r3, #6
 80211aa:	b25b      	sxtb	r3, r3
 80211ac:	119b      	asrs	r3, r3, #6
 80211ae:	b25a      	sxtb	r2, r3
 80211b0:	7a3b      	ldrb	r3, [r7, #8]
 80211b2:	f362 0383 	bfi	r3, r2, #2, #2
 80211b6:	723b      	strb	r3, [r7, #8]
    ModeStatus.b.nEmergencyMode = (int)(gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY);
 80211b8:	4b4a      	ldr	r3, [pc, #296]	; (80212e4 <GetGCUStatus+0x160>)
 80211ba:	789b      	ldrb	r3, [r3, #2]
 80211bc:	019b      	lsls	r3, r3, #6
 80211be:	b25b      	sxtb	r3, r3
 80211c0:	119b      	asrs	r3, r3, #6
 80211c2:	b25a      	sxtb	r2, r3
 80211c4:	7a3b      	ldrb	r3, [r7, #8]
 80211c6:	f362 1305 	bfi	r3, r2, #4, #2
 80211ca:	723b      	strb	r3, [r7, #8]

    if (gCurGCUOpMode.bEmergencyMaint & MAINTENANCE_MODE)
 80211cc:	4b45      	ldr	r3, [pc, #276]	; (80212e4 <GetGCUStatus+0x160>)
 80211ce:	789b      	ldrb	r3, [r3, #2]
 80211d0:	f003 0310 	and.w	r3, r3, #16
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	d004      	beq.n	80211e2 <GetGCUStatus+0x5e>
        ModeStatus.b.nMaintenanceMode = ON;
 80211d8:	7a3b      	ldrb	r3, [r7, #8]
 80211da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80211de:	723b      	strb	r3, [r7, #8]
 80211e0:	e003      	b.n	80211ea <GetGCUStatus+0x66>
    else
        ModeStatus.b.nMaintenanceMode = OFF;
 80211e2:	7a3b      	ldrb	r3, [r7, #8]
 80211e4:	f36f 1386 	bfc	r3, #6, #1
 80211e8:	723b      	strb	r3, [r7, #8]

    ModeStatus.b.nFlapDoorMode = (int)gCurGCUOpMode.bFlapDoorMode;
 80211ea:	4b3e      	ldr	r3, [pc, #248]	; (80212e4 <GetGCUStatus+0x160>)
 80211ec:	78db      	ldrb	r3, [r3, #3]
 80211ee:	01db      	lsls	r3, r3, #7
 80211f0:	b25b      	sxtb	r3, r3
 80211f2:	11db      	asrs	r3, r3, #7
 80211f4:	b25a      	sxtb	r2, r3
 80211f6:	7a3b      	ldrb	r3, [r7, #8]
 80211f8:	f362 13c7 	bfi	r3, r2, #7, #1
 80211fc:	723b      	strb	r3, [r7, #8]

    // passage alarm
    pCurStatus->bModeStatus = ModeStatus.bMode;
 80211fe:	7a3a      	ldrb	r2, [r7, #8]
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	701a      	strb	r2, [r3, #0]
    pCurStatus->bAuthCount_EN = gGCUStatus.bAuthCount_EN;
 8021204:	4b38      	ldr	r3, [pc, #224]	; (80212e8 <GetGCUStatus+0x164>)
 8021206:	791b      	ldrb	r3, [r3, #4]
 8021208:	b2da      	uxtb	r2, r3
 802120a:	687b      	ldr	r3, [r7, #4]
 802120c:	705a      	strb	r2, [r3, #1]
    pCurStatus->bAuthCount_EX = gGCUStatus.bAuthCount_EX;
 802120e:	4b36      	ldr	r3, [pc, #216]	; (80212e8 <GetGCUStatus+0x164>)
 8021210:	795b      	ldrb	r3, [r3, #5]
 8021212:	b2da      	uxtb	r2, r3
 8021214:	687b      	ldr	r3, [r7, #4]
 8021216:	709a      	strb	r2, [r3, #2]
    pCurStatus->bPassageAlarm = gGCUStatus.PassageAlarm.bAlarm;
 8021218:	4b33      	ldr	r3, [pc, #204]	; (80212e8 <GetGCUStatus+0x164>)
 802121a:	7a1a      	ldrb	r2, [r3, #8]
 802121c:	687b      	ldr	r3, [r7, #4]
 802121e:	70da      	strb	r2, [r3, #3]
    pCurStatus->bModuleAlarm = gGCUStatus.ModuleAlarm.bAlarm;
 8021220:	4b31      	ldr	r3, [pc, #196]	; (80212e8 <GetGCUStatus+0x164>)
 8021222:	7b1a      	ldrb	r2, [r3, #12]
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	711a      	strb	r2, [r3, #4]
    pCurStatus->bBarrierSw = gGCUStatus.bBarrierSw;
 8021228:	4b2f      	ldr	r3, [pc, #188]	; (80212e8 <GetGCUStatus+0x164>)
 802122a:	7c1b      	ldrb	r3, [r3, #16]
 802122c:	b2da      	uxtb	r2, r3
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	715a      	strb	r2, [r3, #5]

#if BART_IO
    pCurStatus->bMaintenanceDoorSw = (RD_SWITCH & MASK_SDOOR);
 8021232:	4b2e      	ldr	r3, [pc, #184]	; (80212ec <GetGCUStatus+0x168>)
 8021234:	781b      	ldrb	r3, [r3, #0]
 8021236:	b2da      	uxtb	r2, r3
 8021238:	687b      	ldr	r3, [r7, #4]
 802123a:	719a      	strb	r2, [r3, #6]
#else
    pCurStatus->bMaintenanceDoorSw = (RD_SWITCH1 & MASK_SDOOR1) | ((RD_SWITCH2 & MASK_SDOOR2) << 4);
#endif
    pCurStatus->bUPSStatus = gGCUStatus.bUPSStatus;
 802123c:	4b2a      	ldr	r3, [pc, #168]	; (80212e8 <GetGCUStatus+0x164>)
 802123e:	7c9b      	ldrb	r3, [r3, #18]
 8021240:	b2da      	uxtb	r2, r3
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	71da      	strb	r2, [r3, #7]
    pCurStatus->bSafetySen = gGCUStatus.bSafetyDetection;
 8021246:	4b28      	ldr	r3, [pc, #160]	; (80212e8 <GetGCUStatus+0x164>)
 8021248:	7cdb      	ldrb	r3, [r3, #19]
 802124a:	b2da      	uxtb	r2, r3
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	721a      	strb	r2, [r3, #8]
    pCurStatus->bSCADA = gGCUStatus.bSCADA;
 8021250:	4b25      	ldr	r3, [pc, #148]	; (80212e8 <GetGCUStatus+0x164>)
 8021252:	7d1b      	ldrb	r3, [r3, #20]
 8021254:	b2da      	uxtb	r2, r3
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	725a      	strb	r2, [r3, #9]
    pCurStatus->bDoorForcedOpen = gGCUStatus.bDoorForcedOpen;
 802125a:	4b23      	ldr	r3, [pc, #140]	; (80212e8 <GetGCUStatus+0x164>)
 802125c:	7d5b      	ldrb	r3, [r3, #21]
 802125e:	b2da      	uxtb	r2, r3
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	729a      	strb	r2, [r3, #10]


#if BART_IO

	dwSpareSenserValue = (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN1_Pin))? 0x01: 0x00;  // Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기)
 8021264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021268:	4821      	ldr	r0, [pc, #132]	; (80212f0 <GetGCUStatus+0x16c>)
 802126a:	f008 fea3 	bl	8029fb4 <HAL_GPIO_ReadPin>
 802126e:	4603      	mov	r3, r0
 8021270:	2b00      	cmp	r3, #0
 8021272:	bf14      	ite	ne
 8021274:	2301      	movne	r3, #1
 8021276:	2300      	moveq	r3, #0
 8021278:	b2db      	uxtb	r3, r3
 802127a:	60fb      	str	r3, [r7, #12]
	dwSpareSenserValue |= (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN2_Pin))? 0x02: 0x00;
 802127c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8021280:	481b      	ldr	r0, [pc, #108]	; (80212f0 <GetGCUStatus+0x16c>)
 8021282:	f008 fe97 	bl	8029fb4 <HAL_GPIO_ReadPin>
 8021286:	4603      	mov	r3, r0
 8021288:	2b00      	cmp	r3, #0
 802128a:	d001      	beq.n	8021290 <GetGCUStatus+0x10c>
 802128c:	2302      	movs	r3, #2
 802128e:	e000      	b.n	8021292 <GetGCUStatus+0x10e>
 8021290:	2300      	movs	r3, #0
 8021292:	461a      	mov	r2, r3
 8021294:	68fb      	ldr	r3, [r7, #12]
 8021296:	4313      	orrs	r3, r2
 8021298:	60fb      	str	r3, [r7, #12]



    pCurStatus->bPassengerSensor1 = RD_PASSSEN1;
 802129a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 802129e:	781b      	ldrb	r3, [r3, #0]
 80212a0:	b2da      	uxtb	r2, r3
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	72da      	strb	r2, [r3, #11]
    pCurStatus->bPassengerSensor2 = RD_PASSSEN2;
 80212a6:	4b13      	ldr	r3, [pc, #76]	; (80212f4 <GetGCUStatus+0x170>)
 80212a8:	781b      	ldrb	r3, [r3, #0]
 80212aa:	b2da      	uxtb	r2, r3
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	731a      	strb	r2, [r3, #12]
    pCurStatus->bPassengerSensor3 = dwSpareSenserValue;
 80212b0:	68fb      	ldr	r3, [r7, #12]
 80212b2:	b2da      	uxtb	r2, r3
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	735a      	strb	r2, [r3, #13]
#else
    pCurStatus->bPassengerSensor1 = RD_PASSSEN1;
    pCurStatus->bPassengerSensor2 = RD_PASSSEN2;
    pCurStatus->bPassengerSensor3 = RD_PASSSEN3;
#endif
    pCurStatus->bIllegalPass = gGCUStatus.IllegalPass.bIllegalPass;
 80212b8:	4b0b      	ldr	r3, [pc, #44]	; (80212e8 <GetGCUStatus+0x164>)
 80212ba:	7f1a      	ldrb	r2, [r3, #28]
 80212bc:	687b      	ldr	r3, [r7, #4]
 80212be:	739a      	strb	r2, [r3, #14]
    pCurStatus->bDipSwitchValue = ReadDipSwitch();
 80212c0:	4b0d      	ldr	r3, [pc, #52]	; (80212f8 <GetGCUStatus+0x174>)
 80212c2:	691b      	ldr	r3, [r3, #16]
 80212c4:	b2db      	uxtb	r3, r3
 80212c6:	43db      	mvns	r3, r3
 80212c8:	b2da      	uxtb	r2, r3
 80212ca:	687b      	ldr	r3, [r7, #4]
 80212cc:	73da      	strb	r2, [r3, #15]
    pCurStatus->bPeopleCount = gGCUStatus.bPeopleCount;
 80212ce:	4b06      	ldr	r3, [pc, #24]	; (80212e8 <GetGCUStatus+0x164>)
 80212d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80212d4:	b2da      	uxtb	r2, r3
 80212d6:	687b      	ldr	r3, [r7, #4]
 80212d8:	745a      	strb	r2, [r3, #17]
}
 80212da:	bf00      	nop
 80212dc:	3710      	adds	r7, #16
 80212de:	46bd      	mov	sp, r7
 80212e0:	bd80      	pop	{r7, pc}
 80212e2:	bf00      	nop
 80212e4:	240004d4 	.word	0x240004d4
 80212e8:	240004b0 	.word	0x240004b0
 80212ec:	60000300 	.word	0x60000300
 80212f0:	58020000 	.word	0x58020000
 80212f4:	60000100 	.word	0x60000100
 80212f8:	58020400 	.word	0x58020400

080212fc <GetAuthCount>:

/* Auth Functions ------------------------------------------------------*/
void GetAuthCount(T_GCU_AUTH_COUNT *pAuthCount)
{
 80212fc:	b480      	push	{r7}
 80212fe:	b083      	sub	sp, #12
 8021300:	af00      	add	r7, sp, #0
 8021302:	6078      	str	r0, [r7, #4]
    pAuthCount->bAuthCount_EN = gGCUStatus.bAuthCount_EN;
 8021304:	4b07      	ldr	r3, [pc, #28]	; (8021324 <GetAuthCount+0x28>)
 8021306:	791b      	ldrb	r3, [r3, #4]
 8021308:	b2da      	uxtb	r2, r3
 802130a:	687b      	ldr	r3, [r7, #4]
 802130c:	701a      	strb	r2, [r3, #0]
    pAuthCount->bAuthCount_EX = gGCUStatus.bAuthCount_EX;
 802130e:	4b05      	ldr	r3, [pc, #20]	; (8021324 <GetAuthCount+0x28>)
 8021310:	795b      	ldrb	r3, [r3, #5]
 8021312:	b2da      	uxtb	r2, r3
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	705a      	strb	r2, [r3, #1]
}
 8021318:	bf00      	nop
 802131a:	370c      	adds	r7, #12
 802131c:	46bd      	mov	sp, r7
 802131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021322:	4770      	bx	lr
 8021324:	240004b0 	.word	0x240004b0

08021328 <IncreaseAuthCount>:

void IncreaseAuthCount(BYTE bDir)
{
 8021328:	b580      	push	{r7, lr}
 802132a:	b082      	sub	sp, #8
 802132c:	af00      	add	r7, sp, #0
 802132e:	4603      	mov	r3, r0
 8021330:	71fb      	strb	r3, [r7, #7]
    //PRINTL(" [IncreaseAuthCount] Dir:%d", bDir);

    printf(" [IncreaseAuthCount] Dir:%d \n", bDir);
 8021332:	79fb      	ldrb	r3, [r7, #7]
 8021334:	4619      	mov	r1, r3
 8021336:	482d      	ldr	r0, [pc, #180]	; (80213ec <IncreaseAuthCount+0xc4>)
 8021338:	f007 fb90 	bl	8028a5c <printf_>

    if (bDir == FROM_ENTRY)
 802133c:	79fb      	ldrb	r3, [r7, #7]
 802133e:	2b01      	cmp	r3, #1
 8021340:	d113      	bne.n	802136a <IncreaseAuthCount+0x42>
    {
        gGCUStatus.bAuthCount_EN = (gGCUStatus.bAuthCount_EN < AUTHORIZE_MAX_COUNT) ? gGCUStatus.bAuthCount_EN + 1 : AUTHORIZE_MAX_COUNT;
 8021342:	4b2b      	ldr	r3, [pc, #172]	; (80213f0 <IncreaseAuthCount+0xc8>)
 8021344:	791b      	ldrb	r3, [r3, #4]
 8021346:	b2db      	uxtb	r3, r3
 8021348:	2bff      	cmp	r3, #255	; 0xff
 802134a:	d005      	beq.n	8021358 <IncreaseAuthCount+0x30>
 802134c:	4b28      	ldr	r3, [pc, #160]	; (80213f0 <IncreaseAuthCount+0xc8>)
 802134e:	791b      	ldrb	r3, [r3, #4]
 8021350:	b2db      	uxtb	r3, r3
 8021352:	3301      	adds	r3, #1
 8021354:	b2db      	uxtb	r3, r3
 8021356:	e000      	b.n	802135a <IncreaseAuthCount+0x32>
 8021358:	23ff      	movs	r3, #255	; 0xff
 802135a:	4a25      	ldr	r2, [pc, #148]	; (80213f0 <IncreaseAuthCount+0xc8>)
 802135c:	7113      	strb	r3, [r2, #4]
        gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
 802135e:	4a24      	ldr	r2, [pc, #144]	; (80213f0 <IncreaseAuthCount+0xc8>)
 8021360:	7f13      	ldrb	r3, [r2, #28]
 8021362:	f36f 0382 	bfc	r3, #2, #1
 8021366:	7713      	strb	r3, [r2, #28]
 8021368:	e015      	b.n	8021396 <IncreaseAuthCount+0x6e>
    }
    else if (bDir == FROM_EXIT)
 802136a:	79fb      	ldrb	r3, [r7, #7]
 802136c:	2b02      	cmp	r3, #2
 802136e:	d112      	bne.n	8021396 <IncreaseAuthCount+0x6e>
    {
        gGCUStatus.bAuthCount_EX = (gGCUStatus.bAuthCount_EX < AUTHORIZE_MAX_COUNT) ? gGCUStatus.bAuthCount_EX + 1 : AUTHORIZE_MAX_COUNT;
 8021370:	4b1f      	ldr	r3, [pc, #124]	; (80213f0 <IncreaseAuthCount+0xc8>)
 8021372:	795b      	ldrb	r3, [r3, #5]
 8021374:	b2db      	uxtb	r3, r3
 8021376:	2bff      	cmp	r3, #255	; 0xff
 8021378:	d005      	beq.n	8021386 <IncreaseAuthCount+0x5e>
 802137a:	4b1d      	ldr	r3, [pc, #116]	; (80213f0 <IncreaseAuthCount+0xc8>)
 802137c:	795b      	ldrb	r3, [r3, #5]
 802137e:	b2db      	uxtb	r3, r3
 8021380:	3301      	adds	r3, #1
 8021382:	b2db      	uxtb	r3, r3
 8021384:	e000      	b.n	8021388 <IncreaseAuthCount+0x60>
 8021386:	23ff      	movs	r3, #255	; 0xff
 8021388:	4a19      	ldr	r2, [pc, #100]	; (80213f0 <IncreaseAuthCount+0xc8>)
 802138a:	7153      	strb	r3, [r2, #5]
        gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
 802138c:	4a18      	ldr	r2, [pc, #96]	; (80213f0 <IncreaseAuthCount+0xc8>)
 802138e:	7f13      	ldrb	r3, [r2, #28]
 8021390:	f36f 1386 	bfc	r3, #6, #1
 8021394:	7713      	strb	r3, [r2, #28]
    }

    if (gbPrevDir != bDir)
 8021396:	4b17      	ldr	r3, [pc, #92]	; (80213f4 <IncreaseAuthCount+0xcc>)
 8021398:	781b      	ldrb	r3, [r3, #0]
 802139a:	79fa      	ldrb	r2, [r7, #7]
 802139c:	429a      	cmp	r2, r3
 802139e:	d004      	beq.n	80213aa <IncreaseAuthCount+0x82>
    {
        ClearPassageAlarm();				//used?
 80213a0:	f000 fd16 	bl	8021dd0 <ClearPassageAlarm>
        gbPrevDir = bDir;
 80213a4:	4a13      	ldr	r2, [pc, #76]	; (80213f4 <IncreaseAuthCount+0xcc>)
 80213a6:	79fb      	ldrb	r3, [r7, #7]
 80213a8:	7013      	strb	r3, [r2, #0]
    }

    ControlBarrier(bDir);
 80213aa:	79fb      	ldrb	r3, [r7, #7]
 80213ac:	4618      	mov	r0, r3
 80213ae:	f000 f855 	bl	802145c <ControlBarrier>
    ResetTimer(&timerLuggageWait);
 80213b2:	4811      	ldr	r0, [pc, #68]	; (80213f8 <IncreaseAuthCount+0xd0>)
 80213b4:	f00d fc0a 	bl	802ebcc <ResetTimer>
    ResetTimer(&timerSafety);
 80213b8:	4810      	ldr	r0, [pc, #64]	; (80213fc <IncreaseAuthCount+0xd4>)
 80213ba:	f00d fc07 	bl	802ebcc <ResetTimer>
    ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 80213be:	2200      	movs	r2, #0
 80213c0:	2100      	movs	r1, #0
 80213c2:	2000      	movs	r0, #0
 80213c4:	f000 f882 	bl	80214cc <ControlBuzzer>
    SetAuthTimer();
 80213c8:	f000 ff5a 	bl	8022280 <SetAuthTimer>

    //PRINTL(" [IncreaseAuthCount] auth cnt EN:%d, EX:%d", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
    printf(" [IncreaseAuthCount] auth cnt EN:%d, EX:%d  \n", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
 80213cc:	4b08      	ldr	r3, [pc, #32]	; (80213f0 <IncreaseAuthCount+0xc8>)
 80213ce:	791b      	ldrb	r3, [r3, #4]
 80213d0:	b2db      	uxtb	r3, r3
 80213d2:	4619      	mov	r1, r3
 80213d4:	4b06      	ldr	r3, [pc, #24]	; (80213f0 <IncreaseAuthCount+0xc8>)
 80213d6:	795b      	ldrb	r3, [r3, #5]
 80213d8:	b2db      	uxtb	r3, r3
 80213da:	461a      	mov	r2, r3
 80213dc:	4808      	ldr	r0, [pc, #32]	; (8021400 <IncreaseAuthCount+0xd8>)
 80213de:	f007 fb3d 	bl	8028a5c <printf_>
}
 80213e2:	bf00      	nop
 80213e4:	3708      	adds	r7, #8
 80213e6:	46bd      	mov	sp, r7
 80213e8:	bd80      	pop	{r7, pc}
 80213ea:	bf00      	nop
 80213ec:	08030118 	.word	0x08030118
 80213f0:	240004b0 	.word	0x240004b0
 80213f4:	24000438 	.word	0x24000438
 80213f8:	240001d8 	.word	0x240001d8
 80213fc:	240001e4 	.word	0x240001e4
 8021400:	08030138 	.word	0x08030138

08021404 <ClearAuthCount>:

void ClearAuthCount(void)
{
 8021404:	b580      	push	{r7, lr}
 8021406:	af00      	add	r7, sp, #0
    gGCUStatus.bAuthCount_EN = 0;
 8021408:	4b12      	ldr	r3, [pc, #72]	; (8021454 <ClearAuthCount+0x50>)
 802140a:	2200      	movs	r2, #0
 802140c:	711a      	strb	r2, [r3, #4]
    gGCUStatus.bAuthCount_EX = 0;
 802140e:	4b11      	ldr	r3, [pc, #68]	; (8021454 <ClearAuthCount+0x50>)
 8021410:	2200      	movs	r2, #0
 8021412:	715a      	strb	r2, [r3, #5]
    gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8021414:	4a0f      	ldr	r2, [pc, #60]	; (8021454 <ClearAuthCount+0x50>)
 8021416:	7a13      	ldrb	r3, [r2, #8]
 8021418:	f36f 03c3 	bfc	r3, #3, #1
 802141c:	7213      	strb	r3, [r2, #8]
    gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 802141e:	4a0d      	ldr	r2, [pc, #52]	; (8021454 <ClearAuthCount+0x50>)
 8021420:	7a13      	ldrb	r3, [r2, #8]
 8021422:	f36f 13c7 	bfc	r3, #7, #1
 8021426:	7213      	strb	r3, [r2, #8]
    ResetTimer(&timerAuthorize);
 8021428:	480b      	ldr	r0, [pc, #44]	; (8021458 <ClearAuthCount+0x54>)
 802142a:	f00d fbcf 	bl	802ebcc <ResetTimer>

    if (!gGCUStatus.PassageAlarm.b.nFromEN && !gGCUStatus.PassageAlarm.b.nFromEX)
 802142e:	4b09      	ldr	r3, [pc, #36]	; (8021454 <ClearAuthCount+0x50>)
 8021430:	7a1b      	ldrb	r3, [r3, #8]
 8021432:	f003 0307 	and.w	r3, r3, #7
 8021436:	b2db      	uxtb	r3, r3
 8021438:	2b00      	cmp	r3, #0
 802143a:	d108      	bne.n	802144e <ClearAuthCount+0x4a>
 802143c:	4b05      	ldr	r3, [pc, #20]	; (8021454 <ClearAuthCount+0x50>)
 802143e:	7a1b      	ldrb	r3, [r3, #8]
 8021440:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8021444:	b2db      	uxtb	r3, r3
 8021446:	2b00      	cmp	r3, #0
 8021448:	d101      	bne.n	802144e <ClearAuthCount+0x4a>
        InitPassageMode();
 802144a:	f000 ff45 	bl	80222d8 <InitPassageMode>
}
 802144e:	bf00      	nop
 8021450:	bd80      	pop	{r7, pc}
 8021452:	bf00      	nop
 8021454:	240004b0 	.word	0x240004b0
 8021458:	24000160 	.word	0x24000160

0802145c <ControlBarrier>:

/* Module Control Functions ------------------------------------------------------*/
void ControlBarrier(BYTE bFDoorControl)
{
 802145c:	b580      	push	{r7, lr}
 802145e:	b082      	sub	sp, #8
 8021460:	af00      	add	r7, sp, #0
 8021462:	4603      	mov	r3, r0
 8021464:	71fb      	strb	r3, [r7, #7]
    //PRINTL(" [ControlBarrier] cmd:%d", bFDoorControl);
    printf(" [ControlBarrier] cmd:%d \n", bFDoorControl);
 8021466:	79fb      	ldrb	r3, [r7, #7]
 8021468:	4619      	mov	r1, r3
 802146a:	4815      	ldr	r0, [pc, #84]	; (80214c0 <ControlBarrier+0x64>)
 802146c:	f007 faf6 	bl	8028a5c <printf_>
    gbBarrierCmd = bFDoorControl;
 8021470:	4a14      	ldr	r2, [pc, #80]	; (80214c4 <ControlBarrier+0x68>)
 8021472:	79fb      	ldrb	r3, [r7, #7]
 8021474:	7013      	strb	r3, [r2, #0]

    if (gbBarrierCmd == BARRIER_OPEN_FOR_EN)
 8021476:	4b13      	ldr	r3, [pc, #76]	; (80214c4 <ControlBarrier+0x68>)
 8021478:	781b      	ldrb	r3, [r3, #0]
 802147a:	2b02      	cmp	r3, #2
 802147c:	d108      	bne.n	8021490 <ControlBarrier+0x34>
    {
        ResetTimer(&timerSafety);
 802147e:	4812      	ldr	r0, [pc, #72]	; (80214c8 <ControlBarrier+0x6c>)
 8021480:	f00d fba4 	bl	802ebcc <ResetTimer>
        //OpenBarrierForSwing(gbBarrierCmd);			pms
        Brr_OpenBarrier(gbBarrierCmd);
 8021484:	4b0f      	ldr	r3, [pc, #60]	; (80214c4 <ControlBarrier+0x68>)
 8021486:	781b      	ldrb	r3, [r3, #0]
 8021488:	4618      	mov	r0, r3
 802148a:	f7ff f939 	bl	8020700 <Brr_OpenBarrier>
    }
    else if (gbBarrierCmd == BARRIER_CLOSE_S)
    {
        SetTimer(&timerSafety);
    }
}
 802148e:	e013      	b.n	80214b8 <ControlBarrier+0x5c>
    else if (gbBarrierCmd == BARRIER_OPEN_FOR_EX)
 8021490:	4b0c      	ldr	r3, [pc, #48]	; (80214c4 <ControlBarrier+0x68>)
 8021492:	781b      	ldrb	r3, [r3, #0]
 8021494:	2b01      	cmp	r3, #1
 8021496:	d108      	bne.n	80214aa <ControlBarrier+0x4e>
        ResetTimer(&timerSafety);
 8021498:	480b      	ldr	r0, [pc, #44]	; (80214c8 <ControlBarrier+0x6c>)
 802149a:	f00d fb97 	bl	802ebcc <ResetTimer>
        Brr_OpenBarrier(gbBarrierCmd);
 802149e:	4b09      	ldr	r3, [pc, #36]	; (80214c4 <ControlBarrier+0x68>)
 80214a0:	781b      	ldrb	r3, [r3, #0]
 80214a2:	4618      	mov	r0, r3
 80214a4:	f7ff f92c 	bl	8020700 <Brr_OpenBarrier>
}
 80214a8:	e006      	b.n	80214b8 <ControlBarrier+0x5c>
    else if (gbBarrierCmd == BARRIER_CLOSE_S)
 80214aa:	4b06      	ldr	r3, [pc, #24]	; (80214c4 <ControlBarrier+0x68>)
 80214ac:	781b      	ldrb	r3, [r3, #0]
 80214ae:	2b03      	cmp	r3, #3
 80214b0:	d102      	bne.n	80214b8 <ControlBarrier+0x5c>
        SetTimer(&timerSafety);
 80214b2:	4805      	ldr	r0, [pc, #20]	; (80214c8 <ControlBarrier+0x6c>)
 80214b4:	f00d fb76 	bl	802eba4 <SetTimer>
}
 80214b8:	bf00      	nop
 80214ba:	3708      	adds	r7, #8
 80214bc:	46bd      	mov	sp, r7
 80214be:	bd80      	pop	{r7, pc}
 80214c0:	08030168 	.word	0x08030168
 80214c4:	24000028 	.word	0x24000028
 80214c8:	240001e4 	.word	0x240001e4

080214cc <ControlBuzzer>:

void ControlBuzzer(BYTE bBuzzerNo, BYTE bBuzzerControl, BYTE bDuration)	//main 부저 외에 다른 부저가 없기 때문에 다른 것으로 동작 변경이 필요 pms
{
 80214cc:	b580      	push	{r7, lr}
 80214ce:	b082      	sub	sp, #8
 80214d0:	af00      	add	r7, sp, #0
 80214d2:	4603      	mov	r3, r0
 80214d4:	71fb      	strb	r3, [r7, #7]
 80214d6:	460b      	mov	r3, r1
 80214d8:	71bb      	strb	r3, [r7, #6]
 80214da:	4613      	mov	r3, r2
 80214dc:	717b      	strb	r3, [r7, #5]
    ResetTimer(&timerBuzzer[bBuzzerNo]);
 80214de:	79fa      	ldrb	r2, [r7, #7]
 80214e0:	4613      	mov	r3, r2
 80214e2:	005b      	lsls	r3, r3, #1
 80214e4:	4413      	add	r3, r2
 80214e6:	009b      	lsls	r3, r3, #2
 80214e8:	4a21      	ldr	r2, [pc, #132]	; (8021570 <ControlBuzzer+0xa4>)
 80214ea:	4413      	add	r3, r2
 80214ec:	4618      	mov	r0, r3
 80214ee:	f00d fb6d 	bl	802ebcc <ResetTimer>
    gbBuzzerCMD[bBuzzerNo] = bBuzzerControl & MASK_BUZZER_CMD;
 80214f2:	79fb      	ldrb	r3, [r7, #7]
 80214f4:	79ba      	ldrb	r2, [r7, #6]
 80214f6:	f002 0203 	and.w	r2, r2, #3
 80214fa:	b2d1      	uxtb	r1, r2
 80214fc:	4a1d      	ldr	r2, [pc, #116]	; (8021574 <ControlBuzzer+0xa8>)
 80214fe:	54d1      	strb	r1, [r2, r3]

    if (bBuzzerControl == BUZZER_OFF || bDuration == 0)
 8021500:	79bb      	ldrb	r3, [r7, #6]
 8021502:	2b00      	cmp	r3, #0
 8021504:	d002      	beq.n	802150c <ControlBuzzer+0x40>
 8021506:	797b      	ldrb	r3, [r7, #5]
 8021508:	2b00      	cmp	r3, #0
 802150a:	d102      	bne.n	8021512 <ControlBuzzer+0x46>
    {
       // BuzzerOffEx(bBuzzerNo);      		//pms
    	BuzzerOff();						//temp pms
 802150c:	f003 ffd8 	bl	80254c0 <BuzzerOff>

            gdwBuzzerTimeout[bBuzzerNo] = bDuration * TICK_COUNT_1SEC;
            SetTimer(&timerBuzzer[bBuzzerNo]);
        }
    }
}
 8021510:	e029      	b.n	8021566 <ControlBuzzer+0x9a>
        if (gbBuzzerCMD[bBuzzerNo] == BUZZER_PERIODIC)
 8021512:	79fb      	ldrb	r3, [r7, #7]
 8021514:	4a17      	ldr	r2, [pc, #92]	; (8021574 <ControlBuzzer+0xa8>)
 8021516:	5cd3      	ldrb	r3, [r2, r3]
 8021518:	2b02      	cmp	r3, #2
 802151a:	d105      	bne.n	8021528 <ControlBuzzer+0x5c>
            nBuzzerCount[bBuzzerNo] = 1;
 802151c:	79fb      	ldrb	r3, [r7, #7]
 802151e:	4a16      	ldr	r2, [pc, #88]	; (8021578 <ControlBuzzer+0xac>)
 8021520:	2101      	movs	r1, #1
 8021522:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8021526:	e004      	b.n	8021532 <ControlBuzzer+0x66>
            nBuzzerCount[bBuzzerNo] = 0;
 8021528:	79fb      	ldrb	r3, [r7, #7]
 802152a:	4a13      	ldr	r2, [pc, #76]	; (8021578 <ControlBuzzer+0xac>)
 802152c:	2100      	movs	r1, #0
 802152e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (gbBuzzerCMD[bBuzzerNo])
 8021532:	79fb      	ldrb	r3, [r7, #7]
 8021534:	4a0f      	ldr	r2, [pc, #60]	; (8021574 <ControlBuzzer+0xa8>)
 8021536:	5cd3      	ldrb	r3, [r2, r3]
 8021538:	2b00      	cmp	r3, #0
 802153a:	d014      	beq.n	8021566 <ControlBuzzer+0x9a>
        	BuzzerOn();					//temp pms
 802153c:	f003 ffb4 	bl	80254a8 <BuzzerOn>
            gdwBuzzerTimeout[bBuzzerNo] = bDuration * TICK_COUNT_1SEC;
 8021540:	797b      	ldrb	r3, [r7, #5]
 8021542:	2264      	movs	r2, #100	; 0x64
 8021544:	fb03 f202 	mul.w	r2, r3, r2
 8021548:	79fb      	ldrb	r3, [r7, #7]
 802154a:	4611      	mov	r1, r2
 802154c:	4a0b      	ldr	r2, [pc, #44]	; (802157c <ControlBuzzer+0xb0>)
 802154e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            SetTimer(&timerBuzzer[bBuzzerNo]);
 8021552:	79fa      	ldrb	r2, [r7, #7]
 8021554:	4613      	mov	r3, r2
 8021556:	005b      	lsls	r3, r3, #1
 8021558:	4413      	add	r3, r2
 802155a:	009b      	lsls	r3, r3, #2
 802155c:	4a04      	ldr	r2, [pc, #16]	; (8021570 <ControlBuzzer+0xa4>)
 802155e:	4413      	add	r3, r2
 8021560:	4618      	mov	r0, r3
 8021562:	f00d fb1f 	bl	802eba4 <SetTimer>
}
 8021566:	bf00      	nop
 8021568:	3708      	adds	r7, #8
 802156a:	46bd      	mov	sp, r7
 802156c:	bd80      	pop	{r7, pc}
 802156e:	bf00      	nop
 8021570:	24000250 	.word	0x24000250
 8021574:	24000130 	.word	0x24000130
 8021578:	24000274 	.word	0x24000274
 802157c:	24000138 	.word	0x24000138

08021580 <ControlDirectionLED>:

void ControlDirectionLED(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8021580:	b580      	push	{r7, lr}
 8021582:	b082      	sub	sp, #8
 8021584:	af00      	add	r7, sp, #0
 8021586:	4603      	mov	r3, r0
 8021588:	460a      	mov	r2, r1
 802158a:	71fb      	strb	r3, [r7, #7]
 802158c:	4613      	mov	r3, r2
 802158e:	71bb      	strb	r3, [r7, #6]
    if (gbLampCMD_EN != bLEDControl_EN)
 8021590:	4b13      	ldr	r3, [pc, #76]	; (80215e0 <ControlDirectionLED+0x60>)
 8021592:	781b      	ldrb	r3, [r3, #0]
 8021594:	79fa      	ldrb	r2, [r7, #7]
 8021596:	429a      	cmp	r2, r3
 8021598:	d002      	beq.n	80215a0 <ControlDirectionLED+0x20>
        gbLampCMD_EN = bLEDControl_EN;
 802159a:	4a11      	ldr	r2, [pc, #68]	; (80215e0 <ControlDirectionLED+0x60>)
 802159c:	79fb      	ldrb	r3, [r7, #7]
 802159e:	7013      	strb	r3, [r2, #0]
    if (gbLampCMD_EX != bLEDControl_EX)
 80215a0:	4b10      	ldr	r3, [pc, #64]	; (80215e4 <ControlDirectionLED+0x64>)
 80215a2:	781b      	ldrb	r3, [r3, #0]
 80215a4:	79ba      	ldrb	r2, [r7, #6]
 80215a6:	429a      	cmp	r2, r3
 80215a8:	d002      	beq.n	80215b0 <ControlDirectionLED+0x30>
        gbLampCMD_EX = bLEDControl_EX;
 80215aa:	4a0e      	ldr	r2, [pc, #56]	; (80215e4 <ControlDirectionLED+0x64>)
 80215ac:	79bb      	ldrb	r3, [r7, #6]
 80215ae:	7013      	strb	r3, [r2, #0]

    ControlStatusLED_En(gbLampCMD_EN);
 80215b0:	4b0b      	ldr	r3, [pc, #44]	; (80215e0 <ControlDirectionLED+0x60>)
 80215b2:	781b      	ldrb	r3, [r3, #0]
 80215b4:	4618      	mov	r0, r3
 80215b6:	f003 ff8f 	bl	80254d8 <ControlStatusLED_En>
    ControlStatusLED_Ex(gbLampCMD_EX);    
 80215ba:	4b0a      	ldr	r3, [pc, #40]	; (80215e4 <ControlDirectionLED+0x64>)
 80215bc:	781b      	ldrb	r3, [r3, #0]
 80215be:	4618      	mov	r0, r3
 80215c0:	f003 ffba 	bl	8025538 <ControlStatusLED_Ex>
    ControlOverHeadDisplay_En(gbLampCMD_EN);
 80215c4:	4b06      	ldr	r3, [pc, #24]	; (80215e0 <ControlDirectionLED+0x60>)
 80215c6:	781b      	ldrb	r3, [r3, #0]
 80215c8:	4618      	mov	r0, r3
 80215ca:	f003 ffe5 	bl	8025598 <ControlOverHeadDisplay_En>
    ControlOverHeadDisplay_Ex(gbLampCMD_EX);
 80215ce:	4b05      	ldr	r3, [pc, #20]	; (80215e4 <ControlDirectionLED+0x64>)
 80215d0:	781b      	ldrb	r3, [r3, #0]
 80215d2:	4618      	mov	r0, r3
 80215d4:	f004 f812 	bl	80255fc <ControlOverHeadDisplay_Ex>
}
 80215d8:	bf00      	nop
 80215da:	3708      	adds	r7, #8
 80215dc:	46bd      	mov	sp, r7
 80215de:	bd80      	pop	{r7, pc}
 80215e0:	24000129 	.word	0x24000129
 80215e4:	2400012a 	.word	0x2400012a

080215e8 <ControlStatusLED>:

void ControlStatusLED(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 80215e8:	b580      	push	{r7, lr}
 80215ea:	b082      	sub	sp, #8
 80215ec:	af00      	add	r7, sp, #0
 80215ee:	4603      	mov	r3, r0
 80215f0:	460a      	mov	r2, r1
 80215f2:	71fb      	strb	r3, [r7, #7]
 80215f4:	4613      	mov	r3, r2
 80215f6:	71bb      	strb	r3, [r7, #6]
    ControlStatusLED_En(bLEDControl_EN);
 80215f8:	79fb      	ldrb	r3, [r7, #7]
 80215fa:	4618      	mov	r0, r3
 80215fc:	f003 ff6c 	bl	80254d8 <ControlStatusLED_En>
    ControlStatusLED_Ex(bLEDControl_EX);
 8021600:	79bb      	ldrb	r3, [r7, #6]
 8021602:	4618      	mov	r0, r3
 8021604:	f003 ff98 	bl	8025538 <ControlStatusLED_Ex>
}
 8021608:	bf00      	nop
 802160a:	3708      	adds	r7, #8
 802160c:	46bd      	mov	sp, r7
 802160e:	bd80      	pop	{r7, pc}

08021610 <ControlOverheadDisplay>:

void ControlOverheadDisplay(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8021610:	b580      	push	{r7, lr}
 8021612:	b082      	sub	sp, #8
 8021614:	af00      	add	r7, sp, #0
 8021616:	4603      	mov	r3, r0
 8021618:	460a      	mov	r2, r1
 802161a:	71fb      	strb	r3, [r7, #7]
 802161c:	4613      	mov	r3, r2
 802161e:	71bb      	strb	r3, [r7, #6]
    ControlOverHeadDisplay_En(bLEDControl_EN);
 8021620:	79fb      	ldrb	r3, [r7, #7]
 8021622:	4618      	mov	r0, r3
 8021624:	f003 ffb8 	bl	8025598 <ControlOverHeadDisplay_En>
    ControlOverHeadDisplay_Ex(bLEDControl_EX);
 8021628:	79bb      	ldrb	r3, [r7, #6]
 802162a:	4618      	mov	r0, r3
 802162c:	f003 ffe6 	bl	80255fc <ControlOverHeadDisplay_Ex>
}
 8021630:	bf00      	nop
 8021632:	3708      	adds	r7, #8
 8021634:	46bd      	mov	sp, r7
 8021636:	bd80      	pop	{r7, pc}

08021638 <ControlIndicator>:

void ControlIndicator(BYTE bLEDControl_EN, BYTE bLEDControl_EX, BYTE bDuration, bool isOneTime)
{
 8021638:	b590      	push	{r4, r7, lr}
 802163a:	b083      	sub	sp, #12
 802163c:	af00      	add	r7, sp, #0
 802163e:	4604      	mov	r4, r0
 8021640:	4608      	mov	r0, r1
 8021642:	4611      	mov	r1, r2
 8021644:	461a      	mov	r2, r3
 8021646:	4623      	mov	r3, r4
 8021648:	71fb      	strb	r3, [r7, #7]
 802164a:	4603      	mov	r3, r0
 802164c:	71bb      	strb	r3, [r7, #6]
 802164e:	460b      	mov	r3, r1
 8021650:	717b      	strb	r3, [r7, #5]
 8021652:	4613      	mov	r3, r2
 8021654:	713b      	strb	r3, [r7, #4]
    if (isOneTime == FALSE)
 8021656:	793b      	ldrb	r3, [r7, #4]
 8021658:	f083 0301 	eor.w	r3, r3, #1
 802165c:	b2db      	uxtb	r3, r3
 802165e:	2b00      	cmp	r3, #0
 8021660:	d00f      	beq.n	8021682 <ControlIndicator+0x4a>
    {
        if (gbIndicatorCMD_EN != bLEDControl_EN)
 8021662:	4b2a      	ldr	r3, [pc, #168]	; (802170c <ControlIndicator+0xd4>)
 8021664:	781b      	ldrb	r3, [r3, #0]
 8021666:	79fa      	ldrb	r2, [r7, #7]
 8021668:	429a      	cmp	r2, r3
 802166a:	d002      	beq.n	8021672 <ControlIndicator+0x3a>
            gbIndicatorCMD_EN = bLEDControl_EN;
 802166c:	4a27      	ldr	r2, [pc, #156]	; (802170c <ControlIndicator+0xd4>)
 802166e:	79fb      	ldrb	r3, [r7, #7]
 8021670:	7013      	strb	r3, [r2, #0]
        if (gbIndicatorCMD_EX != bLEDControl_EX)
 8021672:	4b27      	ldr	r3, [pc, #156]	; (8021710 <ControlIndicator+0xd8>)
 8021674:	781b      	ldrb	r3, [r3, #0]
 8021676:	79ba      	ldrb	r2, [r7, #6]
 8021678:	429a      	cmp	r2, r3
 802167a:	d002      	beq.n	8021682 <ControlIndicator+0x4a>
            gbIndicatorCMD_EX = bLEDControl_EX;
 802167c:	4a24      	ldr	r2, [pc, #144]	; (8021710 <ControlIndicator+0xd8>)
 802167e:	79bb      	ldrb	r3, [r7, #6]
 8021680:	7013      	strb	r3, [r2, #0]
    }

    if (gCurGCUOpMode.bServiceMode_EN != NO_SERVICE || gCurGCUOpMode.bEmergencyMaint == EMERGENCY_MODE || gCurGCUOpMode.bEmergencyMaint == FREE_MODE)
 8021682:	4b24      	ldr	r3, [pc, #144]	; (8021714 <ControlIndicator+0xdc>)
 8021684:	781b      	ldrb	r3, [r3, #0]
 8021686:	2b00      	cmp	r3, #0
 8021688:	d107      	bne.n	802169a <ControlIndicator+0x62>
 802168a:	4b22      	ldr	r3, [pc, #136]	; (8021714 <ControlIndicator+0xdc>)
 802168c:	789b      	ldrb	r3, [r3, #2]
 802168e:	2b01      	cmp	r3, #1
 8021690:	d003      	beq.n	802169a <ControlIndicator+0x62>
 8021692:	4b20      	ldr	r3, [pc, #128]	; (8021714 <ControlIndicator+0xdc>)
 8021694:	789b      	ldrb	r3, [r3, #2]
 8021696:	2b20      	cmp	r3, #32
 8021698:	d104      	bne.n	80216a4 <ControlIndicator+0x6c>
    {
        ControlIndicatorLight_En(bLEDControl_EN);
 802169a:	79fb      	ldrb	r3, [r7, #7]
 802169c:	4618      	mov	r0, r3
 802169e:	f003 ffdb 	bl	8025658 <ControlIndicatorLight_En>
 80216a2:	e002      	b.n	80216aa <ControlIndicator+0x72>
    }
    else
    {
        ControlIndicatorLight_En(LAMP_RED_ON);
 80216a4:	2001      	movs	r0, #1
 80216a6:	f003 ffd7 	bl	8025658 <ControlIndicatorLight_En>
    }

    if (gCurGCUOpMode.bServiceMode_EX != NO_SERVICE || gCurGCUOpMode.bEmergencyMaint == EMERGENCY_MODE || gCurGCUOpMode.bEmergencyMaint == FREE_MODE)
 80216aa:	4b1a      	ldr	r3, [pc, #104]	; (8021714 <ControlIndicator+0xdc>)
 80216ac:	785b      	ldrb	r3, [r3, #1]
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d107      	bne.n	80216c2 <ControlIndicator+0x8a>
 80216b2:	4b18      	ldr	r3, [pc, #96]	; (8021714 <ControlIndicator+0xdc>)
 80216b4:	789b      	ldrb	r3, [r3, #2]
 80216b6:	2b01      	cmp	r3, #1
 80216b8:	d003      	beq.n	80216c2 <ControlIndicator+0x8a>
 80216ba:	4b16      	ldr	r3, [pc, #88]	; (8021714 <ControlIndicator+0xdc>)
 80216bc:	789b      	ldrb	r3, [r3, #2]
 80216be:	2b20      	cmp	r3, #32
 80216c0:	d104      	bne.n	80216cc <ControlIndicator+0x94>
    {
        ControlIndicatorLight_Ex(bLEDControl_EX);
 80216c2:	79bb      	ldrb	r3, [r7, #6]
 80216c4:	4618      	mov	r0, r3
 80216c6:	f003 fff5 	bl	80256b4 <ControlIndicatorLight_Ex>
 80216ca:	e002      	b.n	80216d2 <ControlIndicator+0x9a>
    }
    else
    {
        ControlIndicatorLight_Ex(LAMP_RED_ON);
 80216cc:	2001      	movs	r0, #1
 80216ce:	f003 fff1 	bl	80256b4 <ControlIndicatorLight_Ex>
    }

    if (bDuration && (bLEDControl_EN || bLEDControl_EX))
 80216d2:	797b      	ldrb	r3, [r7, #5]
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d010      	beq.n	80216fa <ControlIndicator+0xc2>
 80216d8:	79fb      	ldrb	r3, [r7, #7]
 80216da:	2b00      	cmp	r3, #0
 80216dc:	d102      	bne.n	80216e4 <ControlIndicator+0xac>
 80216de:	79bb      	ldrb	r3, [r7, #6]
 80216e0:	2b00      	cmp	r3, #0
 80216e2:	d00a      	beq.n	80216fa <ControlIndicator+0xc2>
    {
        gdwTimeoutIndicator = bDuration * TICK_COUNT_1SEC;
 80216e4:	797b      	ldrb	r3, [r7, #5]
 80216e6:	2264      	movs	r2, #100	; 0x64
 80216e8:	fb02 f303 	mul.w	r3, r2, r3
 80216ec:	461a      	mov	r2, r3
 80216ee:	4b0a      	ldr	r3, [pc, #40]	; (8021718 <ControlIndicator+0xe0>)
 80216f0:	601a      	str	r2, [r3, #0]
        SetTimer(&timerIndicator);
 80216f2:	480a      	ldr	r0, [pc, #40]	; (802171c <ControlIndicator+0xe4>)
 80216f4:	f00d fa56 	bl	802eba4 <SetTimer>
 80216f8:	e003      	b.n	8021702 <ControlIndicator+0xca>
    }
    else
        ResetTimer(&timerIndicator);
 80216fa:	4808      	ldr	r0, [pc, #32]	; (802171c <ControlIndicator+0xe4>)
 80216fc:	f00d fa66 	bl	802ebcc <ResetTimer>
}
 8021700:	bf00      	nop
 8021702:	bf00      	nop
 8021704:	370c      	adds	r7, #12
 8021706:	46bd      	mov	sp, r7
 8021708:	bd90      	pop	{r4, r7, pc}
 802170a:	bf00      	nop
 802170c:	24000127 	.word	0x24000127
 8021710:	24000128 	.word	0x24000128
 8021714:	240004d4 	.word	0x240004d4
 8021718:	24000144 	.word	0x24000144
 802171c:	240001cc 	.word	0x240001cc

08021720 <ControlIndicator4Test>:

void ControlIndicator4Test(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8021720:	b580      	push	{r7, lr}
 8021722:	b082      	sub	sp, #8
 8021724:	af00      	add	r7, sp, #0
 8021726:	4603      	mov	r3, r0
 8021728:	460a      	mov	r2, r1
 802172a:	71fb      	strb	r3, [r7, #7]
 802172c:	4613      	mov	r3, r2
 802172e:	71bb      	strb	r3, [r7, #6]
    ControlIndicatorLight_En(bLEDControl_EN);
 8021730:	79fb      	ldrb	r3, [r7, #7]
 8021732:	4618      	mov	r0, r3
 8021734:	f003 ff90 	bl	8025658 <ControlIndicatorLight_En>
    ControlIndicatorLight_Ex(bLEDControl_EN);
 8021738:	79fb      	ldrb	r3, [r7, #7]
 802173a:	4618      	mov	r0, r3
 802173c:	f003 ffba 	bl	80256b4 <ControlIndicatorLight_Ex>
}
 8021740:	bf00      	nop
 8021742:	3708      	adds	r7, #8
 8021744:	46bd      	mov	sp, r7
 8021746:	bd80      	pop	{r7, pc}

08021748 <ControlIndicatorBlink>:

void ControlIndicatorBlink(BYTE isSet)
{
 8021748:	b580      	push	{r7, lr}
 802174a:	b082      	sub	sp, #8
 802174c:	af00      	add	r7, sp, #0
 802174e:	4603      	mov	r3, r0
 8021750:	71fb      	strb	r3, [r7, #7]
    if (FLG_SET == isSet)
 8021752:	79fb      	ldrb	r3, [r7, #7]
 8021754:	2b01      	cmp	r3, #1
 8021756:	d10c      	bne.n	8021772 <ControlIndicatorBlink+0x2a>
    {
        gbIndicatorBlink = FLG_SET;
 8021758:	4b0f      	ldr	r3, [pc, #60]	; (8021798 <ControlIndicatorBlink+0x50>)
 802175a:	2201      	movs	r2, #1
 802175c:	701a      	strb	r2, [r3, #0]
        gbIndicatorFlag = FLG_OFF;
 802175e:	4b0f      	ldr	r3, [pc, #60]	; (802179c <ControlIndicatorBlink+0x54>)
 8021760:	2200      	movs	r2, #0
 8021762:	701a      	strb	r2, [r3, #0]
        gdwTimeoutBlink = 5 * TICK_COUNT_100MS;
 8021764:	4b0e      	ldr	r3, [pc, #56]	; (80217a0 <ControlIndicatorBlink+0x58>)
 8021766:	2232      	movs	r2, #50	; 0x32
 8021768:	601a      	str	r2, [r3, #0]
        SetTimer(&timerBlink);
 802176a:	480e      	ldr	r0, [pc, #56]	; (80217a4 <ControlIndicatorBlink+0x5c>)
 802176c:	f00d fa1a 	bl	802eba4 <SetTimer>
        ResetTimer(&timerBlink);

        gbIndicatorFlag = FLG_OFF;
        ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
    }
}
 8021770:	e00e      	b.n	8021790 <ControlIndicatorBlink+0x48>
        gbIndicatorBlink = FLG_OFF;
 8021772:	4b09      	ldr	r3, [pc, #36]	; (8021798 <ControlIndicatorBlink+0x50>)
 8021774:	2200      	movs	r2, #0
 8021776:	701a      	strb	r2, [r3, #0]
        ResetTimer(&timerBlink);
 8021778:	480a      	ldr	r0, [pc, #40]	; (80217a4 <ControlIndicatorBlink+0x5c>)
 802177a:	f00d fa27 	bl	802ebcc <ResetTimer>
        gbIndicatorFlag = FLG_OFF;
 802177e:	4b07      	ldr	r3, [pc, #28]	; (802179c <ControlIndicatorBlink+0x54>)
 8021780:	2200      	movs	r2, #0
 8021782:	701a      	strb	r2, [r3, #0]
        ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 8021784:	2300      	movs	r3, #0
 8021786:	2200      	movs	r2, #0
 8021788:	2100      	movs	r1, #0
 802178a:	2000      	movs	r0, #0
 802178c:	f7ff ff54 	bl	8021638 <ControlIndicator>
}
 8021790:	bf00      	nop
 8021792:	3708      	adds	r7, #8
 8021794:	46bd      	mov	sp, r7
 8021796:	bd80      	pop	{r7, pc}
 8021798:	24000126 	.word	0x24000126
 802179c:	2400012c 	.word	0x2400012c
 80217a0:	24000150 	.word	0x24000150
 80217a4:	240001b4 	.word	0x240001b4

080217a8 <CheckUPSStatus>:

void CheckUPSStatus(void)
{
 80217a8:	b580      	push	{r7, lr}
 80217aa:	b082      	sub	sp, #8
 80217ac:	af00      	add	r7, sp, #0
    BYTE bUPSStatus = RD_UPSSTAT & MASK_POWER_CHK;
 80217ae:	2300      	movs	r3, #0
 80217b0:	71fb      	strb	r3, [r7, #7]

    switch (bUPSStatus)
 80217b2:	79fb      	ldrb	r3, [r7, #7]
 80217b4:	2b06      	cmp	r3, #6
 80217b6:	f200 80aa 	bhi.w	802190e <CheckUPSStatus+0x166>
 80217ba:	a201      	add	r2, pc, #4	; (adr r2, 80217c0 <CheckUPSStatus+0x18>)
 80217bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80217c0:	080217eb 	.word	0x080217eb
 80217c4:	080217dd 	.word	0x080217dd
 80217c8:	0802190f 	.word	0x0802190f
 80217cc:	0802190f 	.word	0x0802190f
 80217d0:	080217eb 	.word	0x080217eb
 80217d4:	0802190f 	.word	0x0802190f
 80217d8:	08021851 	.word	0x08021851
    {
    case 0x01:
        gGCUStatus.bUPSStatus = bUPSStatus;
 80217dc:	4a4e      	ldr	r2, [pc, #312]	; (8021918 <CheckUPSStatus+0x170>)
 80217de:	79fb      	ldrb	r3, [r7, #7]
 80217e0:	7493      	strb	r3, [r2, #18]
        // PRINTL(" [CheckUPSStatus] UPS Comm failure");
        printf(" [CheckUPSStatus] UPS Comm failure  \n");
 80217e2:	484e      	ldr	r0, [pc, #312]	; (802191c <CheckUPSStatus+0x174>)
 80217e4:	f007 f93a 	bl	8028a5c <printf_>
        break;
 80217e8:	e091      	b.n	802190e <CheckUPSStatus+0x166>
    case 0x00:
    case 0x04:
        if (gbPowerFailFlag == FLG_OFF)
 80217ea:	4b4d      	ldr	r3, [pc, #308]	; (8021920 <CheckUPSStatus+0x178>)
 80217ec:	781b      	ldrb	r3, [r3, #0]
 80217ee:	2b00      	cmp	r3, #0
 80217f0:	d126      	bne.n	8021840 <CheckUPSStatus+0x98>
        {
            if (timerPowerFailureCheck.fStart)
 80217f2:	4b4c      	ldr	r3, [pc, #304]	; (8021924 <CheckUPSStatus+0x17c>)
 80217f4:	781b      	ldrb	r3, [r3, #0]
 80217f6:	2b00      	cmp	r3, #0
 80217f8:	d01b      	beq.n	8021832 <CheckUPSStatus+0x8a>
            {
                if (IsTimeout(&timerPowerFailureCheck, DEFAULT_POWER_FAIL_TIMEOUT * TICK_COUNT_1SEC))
 80217fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80217fe:	4849      	ldr	r0, [pc, #292]	; (8021924 <CheckUPSStatus+0x17c>)
 8021800:	f00d f9f2 	bl	802ebe8 <IsTimeout>
 8021804:	4603      	mov	r3, r0
 8021806:	2b00      	cmp	r3, #0
 8021808:	d07e      	beq.n	8021908 <CheckUPSStatus+0x160>
                {
                    ResetTimer(&timerPowerFailureCheck);
 802180a:	4846      	ldr	r0, [pc, #280]	; (8021924 <CheckUPSStatus+0x17c>)
 802180c:	f00d f9de 	bl	802ebcc <ResetTimer>
                    gbPowerFailFlag = FLG_SET;
 8021810:	4b43      	ldr	r3, [pc, #268]	; (8021920 <CheckUPSStatus+0x178>)
 8021812:	2201      	movs	r2, #1
 8021814:	701a      	strb	r2, [r3, #0]
                    ControlBarrier(BARRIER_OPEN_FOR_EX);                
 8021816:	2001      	movs	r0, #1
 8021818:	f7ff fe20 	bl	802145c <ControlBarrier>
                    gGCUStatus.bUPSStatus = bUPSStatus;
 802181c:	4a3e      	ldr	r2, [pc, #248]	; (8021918 <CheckUPSStatus+0x170>)
 802181e:	79fb      	ldrb	r3, [r7, #7]
 8021820:	7493      	strb	r3, [r2, #18]
                    ControlDirectionLED(DIR_RED, DIR_RED);
 8021822:	2102      	movs	r1, #2
 8021824:	2002      	movs	r0, #2
 8021826:	f7ff feab 	bl	8021580 <ControlDirectionLED>
                   // PRINTL(" [CheckUPSStatus] Power failure");
                    printf(" [CheckUPSStatus] Power failure  \n");
 802182a:	483f      	ldr	r0, [pc, #252]	; (8021928 <CheckUPSStatus+0x180>)
 802182c:	f007 f916 	bl	8028a5c <printf_>
            if (timerPowerRecoveryCheck.fStart)
            {
                ResetTimer(&timerPowerRecoveryCheck);
            }
        }
        break;
 8021830:	e06a      	b.n	8021908 <CheckUPSStatus+0x160>
                SetTimer(&timerPowerFailureCheck);
 8021832:	483c      	ldr	r0, [pc, #240]	; (8021924 <CheckUPSStatus+0x17c>)
 8021834:	f00d f9b6 	bl	802eba4 <SetTimer>
                ResetTimer(&timerPowerRecoveryCheck);
 8021838:	483c      	ldr	r0, [pc, #240]	; (802192c <CheckUPSStatus+0x184>)
 802183a:	f00d f9c7 	bl	802ebcc <ResetTimer>
        break;
 802183e:	e063      	b.n	8021908 <CheckUPSStatus+0x160>
            if (timerPowerRecoveryCheck.fStart)
 8021840:	4b3a      	ldr	r3, [pc, #232]	; (802192c <CheckUPSStatus+0x184>)
 8021842:	781b      	ldrb	r3, [r3, #0]
 8021844:	2b00      	cmp	r3, #0
 8021846:	d05f      	beq.n	8021908 <CheckUPSStatus+0x160>
                ResetTimer(&timerPowerRecoveryCheck);
 8021848:	4838      	ldr	r0, [pc, #224]	; (802192c <CheckUPSStatus+0x184>)
 802184a:	f00d f9bf 	bl	802ebcc <ResetTimer>
        break;
 802184e:	e05b      	b.n	8021908 <CheckUPSStatus+0x160>
    case 0x06:
        if (gbPowerFailFlag == FLG_SET)
 8021850:	4b33      	ldr	r3, [pc, #204]	; (8021920 <CheckUPSStatus+0x178>)
 8021852:	781b      	ldrb	r3, [r3, #0]
 8021854:	2b01      	cmp	r3, #1
 8021856:	d14c      	bne.n	80218f2 <CheckUPSStatus+0x14a>
        {
            if (timerPowerRecoveryCheck.fStart)
 8021858:	4b34      	ldr	r3, [pc, #208]	; (802192c <CheckUPSStatus+0x184>)
 802185a:	781b      	ldrb	r3, [r3, #0]
 802185c:	2b00      	cmp	r3, #0
 802185e:	d041      	beq.n	80218e4 <CheckUPSStatus+0x13c>
            {
                if (IsTimeout(&timerPowerRecoveryCheck, DEFAULT_POWER_FAIL_TIMEOUT * TICK_COUNT_1SEC))
 8021860:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8021864:	4831      	ldr	r0, [pc, #196]	; (802192c <CheckUPSStatus+0x184>)
 8021866:	f00d f9bf 	bl	802ebe8 <IsTimeout>
 802186a:	4603      	mov	r3, r0
 802186c:	2b00      	cmp	r3, #0
 802186e:	d04d      	beq.n	802190c <CheckUPSStatus+0x164>
                {
                    if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 8021870:	4b2f      	ldr	r3, [pc, #188]	; (8021930 <CheckUPSStatus+0x188>)
 8021872:	781b      	ldrb	r3, [r3, #0]
 8021874:	2b00      	cmp	r3, #0
 8021876:	d008      	beq.n	802188a <CheckUPSStatus+0xe2>
                        (gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 8021878:	4b27      	ldr	r3, [pc, #156]	; (8021918 <CheckUPSStatus+0x170>)
 802187a:	795b      	ldrb	r3, [r3, #5]
 802187c:	b2db      	uxtb	r3, r3
                    if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 802187e:	2b00      	cmp	r3, #0
 8021880:	d007      	beq.n	8021892 <CheckUPSStatus+0xea>
                        (gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 8021882:	4b2b      	ldr	r3, [pc, #172]	; (8021930 <CheckUPSStatus+0x188>)
 8021884:	781b      	ldrb	r3, [r3, #0]
 8021886:	2b01      	cmp	r3, #1
 8021888:	d103      	bne.n	8021892 <CheckUPSStatus+0xea>
                        gbLampCMD_EN = DIR_RED;
 802188a:	4b2a      	ldr	r3, [pc, #168]	; (8021934 <CheckUPSStatus+0x18c>)
 802188c:	2202      	movs	r2, #2
 802188e:	701a      	strb	r2, [r3, #0]
 8021890:	e002      	b.n	8021898 <CheckUPSStatus+0xf0>
                    else
                        gbLampCMD_EN = DIR_GREEN;
 8021892:	4b28      	ldr	r3, [pc, #160]	; (8021934 <CheckUPSStatus+0x18c>)
 8021894:	2201      	movs	r2, #1
 8021896:	701a      	strb	r2, [r3, #0]

                    if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 8021898:	4b25      	ldr	r3, [pc, #148]	; (8021930 <CheckUPSStatus+0x188>)
 802189a:	785b      	ldrb	r3, [r3, #1]
 802189c:	2b00      	cmp	r3, #0
 802189e:	d008      	beq.n	80218b2 <CheckUPSStatus+0x10a>
                        (gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80218a0:	4b1d      	ldr	r3, [pc, #116]	; (8021918 <CheckUPSStatus+0x170>)
 80218a2:	791b      	ldrb	r3, [r3, #4]
 80218a4:	b2db      	uxtb	r3, r3
                    if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 80218a6:	2b00      	cmp	r3, #0
 80218a8:	d007      	beq.n	80218ba <CheckUPSStatus+0x112>
                        (gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80218aa:	4b21      	ldr	r3, [pc, #132]	; (8021930 <CheckUPSStatus+0x188>)
 80218ac:	785b      	ldrb	r3, [r3, #1]
 80218ae:	2b01      	cmp	r3, #1
 80218b0:	d103      	bne.n	80218ba <CheckUPSStatus+0x112>
                        gbLampCMD_EX = DIR_RED;
 80218b2:	4b21      	ldr	r3, [pc, #132]	; (8021938 <CheckUPSStatus+0x190>)
 80218b4:	2202      	movs	r2, #2
 80218b6:	701a      	strb	r2, [r3, #0]
 80218b8:	e002      	b.n	80218c0 <CheckUPSStatus+0x118>
                    else
                        gbLampCMD_EX = DIR_GREEN;
 80218ba:	4b1f      	ldr	r3, [pc, #124]	; (8021938 <CheckUPSStatus+0x190>)
 80218bc:	2201      	movs	r2, #1
 80218be:	701a      	strb	r2, [r3, #0]

                    gbPowerFailFlag = FLG_OFF;
 80218c0:	4b17      	ldr	r3, [pc, #92]	; (8021920 <CheckUPSStatus+0x178>)
 80218c2:	2200      	movs	r2, #0
 80218c4:	701a      	strb	r2, [r3, #0]
                    gGCUStatus.bUPSStatus = bUPSStatus;
 80218c6:	4a14      	ldr	r2, [pc, #80]	; (8021918 <CheckUPSStatus+0x170>)
 80218c8:	79fb      	ldrb	r3, [r7, #7]
 80218ca:	7493      	strb	r3, [r2, #18]
                    ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 80218cc:	4b19      	ldr	r3, [pc, #100]	; (8021934 <CheckUPSStatus+0x18c>)
 80218ce:	781b      	ldrb	r3, [r3, #0]
 80218d0:	4a19      	ldr	r2, [pc, #100]	; (8021938 <CheckUPSStatus+0x190>)
 80218d2:	7812      	ldrb	r2, [r2, #0]
 80218d4:	4611      	mov	r1, r2
 80218d6:	4618      	mov	r0, r3
 80218d8:	f7ff fe52 	bl	8021580 <ControlDirectionLED>
                    //PRINTL(" [CheckUPSStatus] Power recovered");
                    printf(" [CheckUPSStatus] Power recovered  \n");
 80218dc:	4817      	ldr	r0, [pc, #92]	; (802193c <CheckUPSStatus+0x194>)
 80218de:	f007 f8bd 	bl	8028a5c <printf_>
            {
                ResetTimer(&timerPowerFailureCheck);
            }
        }

        break;
 80218e2:	e013      	b.n	802190c <CheckUPSStatus+0x164>
                SetTimer(&timerPowerRecoveryCheck);
 80218e4:	4811      	ldr	r0, [pc, #68]	; (802192c <CheckUPSStatus+0x184>)
 80218e6:	f00d f95d 	bl	802eba4 <SetTimer>
                ResetTimer(&timerPowerFailureCheck);
 80218ea:	480e      	ldr	r0, [pc, #56]	; (8021924 <CheckUPSStatus+0x17c>)
 80218ec:	f00d f96e 	bl	802ebcc <ResetTimer>
        break;
 80218f0:	e00c      	b.n	802190c <CheckUPSStatus+0x164>
            gGCUStatus.bUPSStatus = bUPSStatus;
 80218f2:	4a09      	ldr	r2, [pc, #36]	; (8021918 <CheckUPSStatus+0x170>)
 80218f4:	79fb      	ldrb	r3, [r7, #7]
 80218f6:	7493      	strb	r3, [r2, #18]
            if (timerPowerFailureCheck.fStart)
 80218f8:	4b0a      	ldr	r3, [pc, #40]	; (8021924 <CheckUPSStatus+0x17c>)
 80218fa:	781b      	ldrb	r3, [r3, #0]
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	d005      	beq.n	802190c <CheckUPSStatus+0x164>
                ResetTimer(&timerPowerFailureCheck);
 8021900:	4808      	ldr	r0, [pc, #32]	; (8021924 <CheckUPSStatus+0x17c>)
 8021902:	f00d f963 	bl	802ebcc <ResetTimer>
        break;
 8021906:	e001      	b.n	802190c <CheckUPSStatus+0x164>
        break;
 8021908:	bf00      	nop
 802190a:	e000      	b.n	802190e <CheckUPSStatus+0x166>
        break;
 802190c:	bf00      	nop
    }
}
 802190e:	bf00      	nop
 8021910:	3708      	adds	r7, #8
 8021912:	46bd      	mov	sp, r7
 8021914:	bd80      	pop	{r7, pc}
 8021916:	bf00      	nop
 8021918:	240004b0 	.word	0x240004b0
 802191c:	08030184 	.word	0x08030184
 8021920:	2400012b 	.word	0x2400012b
 8021924:	24000184 	.word	0x24000184
 8021928:	080301ac 	.word	0x080301ac
 802192c:	24000190 	.word	0x24000190
 8021930:	240004d4 	.word	0x240004d4
 8021934:	24000129 	.word	0x24000129
 8021938:	2400012a 	.word	0x2400012a
 802193c:	080301d0 	.word	0x080301d0

08021940 <CheckEmergencySignal>:

void CheckEmergencySignal(void)
{
 8021940:	b580      	push	{r7, lr}
 8021942:	b084      	sub	sp, #16
 8021944:	af00      	add	r7, sp, #0
    BYTE bNewEmergencySignal = OFF;
 8021946:	2300      	movs	r3, #0
 8021948:	73fb      	strb	r3, [r7, #15]
    BYTE bDipSwitch4 = ReadDipSwitch() & MASK_EMG_SIGNAL;
 802194a:	4b39      	ldr	r3, [pc, #228]	; (8021a30 <CheckEmergencySignal+0xf0>)
 802194c:	691b      	ldr	r3, [r3, #16]
 802194e:	b2db      	uxtb	r3, r3
 8021950:	43db      	mvns	r3, r3
 8021952:	b2db      	uxtb	r3, r3
 8021954:	f003 0308 	and.w	r3, r3, #8
 8021958:	71fb      	strb	r3, [r7, #7]
    T_GCU_OP_MODE newMode;
    int nTriggerCount;

    if (bDipSwitch4)
 802195a:	79fb      	ldrb	r3, [r7, #7]
 802195c:	2b00      	cmp	r3, #0
 802195e:	d002      	beq.n	8021966 <CheckEmergencySignal+0x26>
        bNewEmergencySignal = OFF;
 8021960:	2300      	movs	r3, #0
 8021962:	73fb      	strb	r3, [r7, #15]
 8021964:	e006      	b.n	8021974 <CheckEmergencySignal+0x34>
    else
        bNewEmergencySignal = (BYTE)IsEMGSignalOn();
 8021966:	f44f 7100 	mov.w	r1, #512	; 0x200
 802196a:	4831      	ldr	r0, [pc, #196]	; (8021a30 <CheckEmergencySignal+0xf0>)
 802196c:	f008 fb22 	bl	8029fb4 <HAL_GPIO_ReadPin>
 8021970:	4603      	mov	r3, r0
 8021972:	73fb      	strb	r3, [r7, #15]

    
    if (bNewEmergencySignal) // TODO: EMG signal must be checked in BART Fare Gate by Joseph 20231002
 8021974:	7bfb      	ldrb	r3, [r7, #15]
 8021976:	2b00      	cmp	r3, #0
 8021978:	d006      	beq.n	8021988 <CheckEmergencySignal+0x48>
        gGCUStatus.ModeStatus.b.nEmergencyMode = ON;
 802197a:	4a2e      	ldr	r2, [pc, #184]	; (8021a34 <CheckEmergencySignal+0xf4>)
 802197c:	7813      	ldrb	r3, [r2, #0]
 802197e:	2101      	movs	r1, #1
 8021980:	f361 1305 	bfi	r3, r1, #4, #2
 8021984:	7013      	strb	r3, [r2, #0]
 8021986:	e005      	b.n	8021994 <CheckEmergencySignal+0x54>
    else
        gGCUStatus.ModeStatus.b.nEmergencyMode = ON;
 8021988:	4a2a      	ldr	r2, [pc, #168]	; (8021a34 <CheckEmergencySignal+0xf4>)
 802198a:	7813      	ldrb	r3, [r2, #0]
 802198c:	2101      	movs	r1, #1
 802198e:	f361 1305 	bfi	r3, r1, #4, #2
 8021992:	7013      	strb	r3, [r2, #0]

     
    if (gbPrevEmgSignal != bNewEmergencySignal)
 8021994:	4b28      	ldr	r3, [pc, #160]	; (8021a38 <CheckEmergencySignal+0xf8>)
 8021996:	781b      	ldrb	r3, [r3, #0]
 8021998:	7bfa      	ldrb	r2, [r7, #15]
 802199a:	429a      	cmp	r2, r3
 802199c:	d006      	beq.n	80219ac <CheckEmergencySignal+0x6c>
    {
        gnSignalCount = 1;
 802199e:	4b27      	ldr	r3, [pc, #156]	; (8021a3c <CheckEmergencySignal+0xfc>)
 80219a0:	2201      	movs	r2, #1
 80219a2:	601a      	str	r2, [r3, #0]
        gbPrevEmgSignal = bNewEmergencySignal;
 80219a4:	4a24      	ldr	r2, [pc, #144]	; (8021a38 <CheckEmergencySignal+0xf8>)
 80219a6:	7bfb      	ldrb	r3, [r7, #15]
 80219a8:	7013      	strb	r3, [r2, #0]
                    }
                }
            }
        }
    }
}
 80219aa:	e03c      	b.n	8021a26 <CheckEmergencySignal+0xe6>
        if (gnSignalCount)
 80219ac:	4b23      	ldr	r3, [pc, #140]	; (8021a3c <CheckEmergencySignal+0xfc>)
 80219ae:	681b      	ldr	r3, [r3, #0]
 80219b0:	2b00      	cmp	r3, #0
 80219b2:	d038      	beq.n	8021a26 <CheckEmergencySignal+0xe6>
            nTriggerCount = gGCUParameter.bEMGTimeout * TICK_COUNT_1SEC;
 80219b4:	4b22      	ldr	r3, [pc, #136]	; (8021a40 <CheckEmergencySignal+0x100>)
 80219b6:	79db      	ldrb	r3, [r3, #7]
 80219b8:	461a      	mov	r2, r3
 80219ba:	2364      	movs	r3, #100	; 0x64
 80219bc:	fb02 f303 	mul.w	r3, r2, r3
 80219c0:	60bb      	str	r3, [r7, #8]
            if (!nTriggerCount)
 80219c2:	68bb      	ldr	r3, [r7, #8]
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d101      	bne.n	80219cc <CheckEmergencySignal+0x8c>
                nTriggerCount = 1;
 80219c8:	2301      	movs	r3, #1
 80219ca:	60bb      	str	r3, [r7, #8]
            if (gnSignalCount++ == nTriggerCount)
 80219cc:	4b1b      	ldr	r3, [pc, #108]	; (8021a3c <CheckEmergencySignal+0xfc>)
 80219ce:	681b      	ldr	r3, [r3, #0]
 80219d0:	1c5a      	adds	r2, r3, #1
 80219d2:	491a      	ldr	r1, [pc, #104]	; (8021a3c <CheckEmergencySignal+0xfc>)
 80219d4:	600a      	str	r2, [r1, #0]
 80219d6:	68ba      	ldr	r2, [r7, #8]
 80219d8:	429a      	cmp	r2, r3
 80219da:	d124      	bne.n	8021a26 <CheckEmergencySignal+0xe6>
                gnSignalCount = 0;
 80219dc:	4b17      	ldr	r3, [pc, #92]	; (8021a3c <CheckEmergencySignal+0xfc>)
 80219de:	2200      	movs	r2, #0
 80219e0:	601a      	str	r2, [r3, #0]
                if (bNewEmergencySignal)
 80219e2:	7bfb      	ldrb	r3, [r7, #15]
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d01e      	beq.n	8021a26 <CheckEmergencySignal+0xe6>
                    if (gGCUStatus.ModuleAlarm.b.nEMGSignal == OFF)
 80219e8:	4b12      	ldr	r3, [pc, #72]	; (8021a34 <CheckEmergencySignal+0xf4>)
 80219ea:	7b1b      	ldrb	r3, [r3, #12]
 80219ec:	f003 0310 	and.w	r3, r3, #16
 80219f0:	b2db      	uxtb	r3, r3
 80219f2:	2b00      	cmp	r3, #0
 80219f4:	d117      	bne.n	8021a26 <CheckEmergencySignal+0xe6>
                    	 printf(" [CheckEmergencySignal] EMG on!  \n");
 80219f6:	4813      	ldr	r0, [pc, #76]	; (8021a44 <CheckEmergencySignal+0x104>)
 80219f8:	f007 f830 	bl	8028a5c <printf_>
                        gGCUStatus.ModuleAlarm.b.nEMGSignal = ON;
 80219fc:	4a0d      	ldr	r2, [pc, #52]	; (8021a34 <CheckEmergencySignal+0xf4>)
 80219fe:	7b13      	ldrb	r3, [r2, #12]
 8021a00:	f043 0310 	orr.w	r3, r3, #16
 8021a04:	7313      	strb	r3, [r2, #12]
                        newMode.bServiceMode_EN = NO_SERVICE;
 8021a06:	2300      	movs	r3, #0
 8021a08:	703b      	strb	r3, [r7, #0]
                        newMode.bServiceMode_EX = NO_SERVICE;
 8021a0a:	2300      	movs	r3, #0
 8021a0c:	707b      	strb	r3, [r7, #1]
                        newMode.bEmergencyMaint = gCurGCUOpMode.bEmergencyMaint | EMERGENCY_MODE;
 8021a0e:	4b0e      	ldr	r3, [pc, #56]	; (8021a48 <CheckEmergencySignal+0x108>)
 8021a10:	789b      	ldrb	r3, [r3, #2]
 8021a12:	f043 0301 	orr.w	r3, r3, #1
 8021a16:	b2db      	uxtb	r3, r3
 8021a18:	70bb      	strb	r3, [r7, #2]
                        newMode.bFlapDoorMode = FD_MODE_OPEN;
 8021a1a:	2301      	movs	r3, #1
 8021a1c:	70fb      	strb	r3, [r7, #3]
                        SetNewOpMode(&newMode);
 8021a1e:	463b      	mov	r3, r7
 8021a20:	4618      	mov	r0, r3
 8021a22:	f7ff fabb 	bl	8020f9c <SetNewOpMode>
}
 8021a26:	bf00      	nop
 8021a28:	3710      	adds	r7, #16
 8021a2a:	46bd      	mov	sp, r7
 8021a2c:	bd80      	pop	{r7, pc}
 8021a2e:	bf00      	nop
 8021a30:	58020400 	.word	0x58020400
 8021a34:	240004b0 	.word	0x240004b0
 8021a38:	2400012f 	.word	0x2400012f
 8021a3c:	24000444 	.word	0x24000444
 8021a40:	240004a0 	.word	0x240004a0
 8021a44:	080301f8 	.word	0x080301f8
 8021a48:	240004d4 	.word	0x240004d4

08021a4c <CheckBuzzerTimer>:

void CheckBuzzerTimer(void)
{
 8021a4c:	b580      	push	{r7, lr}
 8021a4e:	b082      	sub	sp, #8
 8021a50:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < BUZZER_COUNT; i++) // BUZZER_NO_MAIN, BUZZER_NO_DIRB, BUZZER_NO_DIRA
 8021a52:	2300      	movs	r3, #0
 8021a54:	607b      	str	r3, [r7, #4]
 8021a56:	e054      	b.n	8021b02 <CheckBuzzerTimer+0xb6>
    {
        if (timerBuzzer[i].fStart)
 8021a58:	492e      	ldr	r1, [pc, #184]	; (8021b14 <CheckBuzzerTimer+0xc8>)
 8021a5a:	687a      	ldr	r2, [r7, #4]
 8021a5c:	4613      	mov	r3, r2
 8021a5e:	005b      	lsls	r3, r3, #1
 8021a60:	4413      	add	r3, r2
 8021a62:	009b      	lsls	r3, r3, #2
 8021a64:	440b      	add	r3, r1
 8021a66:	781b      	ldrb	r3, [r3, #0]
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	d022      	beq.n	8021ab2 <CheckBuzzerTimer+0x66>
        {
            if (IsTimeout(&timerBuzzer[i], gdwBuzzerTimeout[i]))
 8021a6c:	687a      	ldr	r2, [r7, #4]
 8021a6e:	4613      	mov	r3, r2
 8021a70:	005b      	lsls	r3, r3, #1
 8021a72:	4413      	add	r3, r2
 8021a74:	009b      	lsls	r3, r3, #2
 8021a76:	4a27      	ldr	r2, [pc, #156]	; (8021b14 <CheckBuzzerTimer+0xc8>)
 8021a78:	441a      	add	r2, r3
 8021a7a:	4927      	ldr	r1, [pc, #156]	; (8021b18 <CheckBuzzerTimer+0xcc>)
 8021a7c:	687b      	ldr	r3, [r7, #4]
 8021a7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021a82:	4619      	mov	r1, r3
 8021a84:	4610      	mov	r0, r2
 8021a86:	f00d f8af 	bl	802ebe8 <IsTimeout>
 8021a8a:	4603      	mov	r3, r0
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	d010      	beq.n	8021ab2 <CheckBuzzerTimer+0x66>
            {
                nBuzzerCount[i] = 0;
 8021a90:	4a22      	ldr	r2, [pc, #136]	; (8021b1c <CheckBuzzerTimer+0xd0>)
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	2100      	movs	r1, #0
 8021a96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                ResetTimer(&timerBuzzer[i]);
 8021a9a:	687a      	ldr	r2, [r7, #4]
 8021a9c:	4613      	mov	r3, r2
 8021a9e:	005b      	lsls	r3, r3, #1
 8021aa0:	4413      	add	r3, r2
 8021aa2:	009b      	lsls	r3, r3, #2
 8021aa4:	4a1b      	ldr	r2, [pc, #108]	; (8021b14 <CheckBuzzerTimer+0xc8>)
 8021aa6:	4413      	add	r3, r2
 8021aa8:	4618      	mov	r0, r3
 8021aaa:	f00d f88f 	bl	802ebcc <ResetTimer>
               // BuzzerOffEx(i);					//부저 한종류 밖에 없음 pms
                BuzzerOff();						//temp pms
 8021aae:	f003 fd07 	bl	80254c0 <BuzzerOff>
            }
        }

        if (nBuzzerCount[i])
 8021ab2:	4a1a      	ldr	r2, [pc, #104]	; (8021b1c <CheckBuzzerTimer+0xd0>)
 8021ab4:	687b      	ldr	r3, [r7, #4]
 8021ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	d01e      	beq.n	8021afc <CheckBuzzerTimer+0xb0>
        {
            nBuzzerCount[i]++;
 8021abe:	4a17      	ldr	r2, [pc, #92]	; (8021b1c <CheckBuzzerTimer+0xd0>)
 8021ac0:	687b      	ldr	r3, [r7, #4]
 8021ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021ac6:	1c5a      	adds	r2, r3, #1
 8021ac8:	4914      	ldr	r1, [pc, #80]	; (8021b1c <CheckBuzzerTimer+0xd0>)
 8021aca:	687b      	ldr	r3, [r7, #4]
 8021acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if (nBuzzerCount[i] == 10)
 8021ad0:	4a12      	ldr	r2, [pc, #72]	; (8021b1c <CheckBuzzerTimer+0xd0>)
 8021ad2:	687b      	ldr	r3, [r7, #4]
 8021ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021ad8:	2b0a      	cmp	r3, #10
 8021ada:	d102      	bne.n	8021ae2 <CheckBuzzerTimer+0x96>
            {
               // BuzzerOffEx(i);					//부저 한종류 밖에 없음 pms
            	 BuzzerOff();
 8021adc:	f003 fcf0 	bl	80254c0 <BuzzerOff>
 8021ae0:	e00c      	b.n	8021afc <CheckBuzzerTimer+0xb0>
            }
            else if (nBuzzerCount[i] == 20)
 8021ae2:	4a0e      	ldr	r2, [pc, #56]	; (8021b1c <CheckBuzzerTimer+0xd0>)
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021aea:	2b14      	cmp	r3, #20
 8021aec:	d106      	bne.n	8021afc <CheckBuzzerTimer+0xb0>
            {
                nBuzzerCount[i] = 1;
 8021aee:	4a0b      	ldr	r2, [pc, #44]	; (8021b1c <CheckBuzzerTimer+0xd0>)
 8021af0:	687b      	ldr	r3, [r7, #4]
 8021af2:	2101      	movs	r1, #1
 8021af4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                //BuzzerOnEx(i);					//부저 한종류 밖에 없음 pms
                BuzzerOn();
 8021af8:	f003 fcd6 	bl	80254a8 <BuzzerOn>
    for (i = 0; i < BUZZER_COUNT; i++) // BUZZER_NO_MAIN, BUZZER_NO_DIRB, BUZZER_NO_DIRA
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	3301      	adds	r3, #1
 8021b00:	607b      	str	r3, [r7, #4]
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	2b02      	cmp	r3, #2
 8021b06:	dda7      	ble.n	8021a58 <CheckBuzzerTimer+0xc>
            }
        }
    }
}
 8021b08:	bf00      	nop
 8021b0a:	bf00      	nop
 8021b0c:	3708      	adds	r7, #8
 8021b0e:	46bd      	mov	sp, r7
 8021b10:	bd80      	pop	{r7, pc}
 8021b12:	bf00      	nop
 8021b14:	24000250 	.word	0x24000250
 8021b18:	24000138 	.word	0x24000138
 8021b1c:	24000274 	.word	0x24000274

08021b20 <CheckIndicatorTimer>:

void CheckIndicatorTimer(void)
{
 8021b20:	b580      	push	{r7, lr}
 8021b22:	af00      	add	r7, sp, #0
    if (timerIndicator.fStart)
 8021b24:	4b0b      	ldr	r3, [pc, #44]	; (8021b54 <CheckIndicatorTimer+0x34>)
 8021b26:	781b      	ldrb	r3, [r3, #0]
 8021b28:	2b00      	cmp	r3, #0
 8021b2a:	d011      	beq.n	8021b50 <CheckIndicatorTimer+0x30>
    {
        if (IsTimeout(&timerIndicator, gdwTimeoutIndicator))
 8021b2c:	4b0a      	ldr	r3, [pc, #40]	; (8021b58 <CheckIndicatorTimer+0x38>)
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	4619      	mov	r1, r3
 8021b32:	4808      	ldr	r0, [pc, #32]	; (8021b54 <CheckIndicatorTimer+0x34>)
 8021b34:	f00d f858 	bl	802ebe8 <IsTimeout>
 8021b38:	4603      	mov	r3, r0
 8021b3a:	2b00      	cmp	r3, #0
 8021b3c:	d008      	beq.n	8021b50 <CheckIndicatorTimer+0x30>
        {
            ResetTimer(&timerIndicator);
 8021b3e:	4805      	ldr	r0, [pc, #20]	; (8021b54 <CheckIndicatorTimer+0x34>)
 8021b40:	f00d f844 	bl	802ebcc <ResetTimer>
            ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 8021b44:	2300      	movs	r3, #0
 8021b46:	2200      	movs	r2, #0
 8021b48:	2100      	movs	r1, #0
 8021b4a:	2000      	movs	r0, #0
 8021b4c:	f7ff fd74 	bl	8021638 <ControlIndicator>
        }
    }
}
 8021b50:	bf00      	nop
 8021b52:	bd80      	pop	{r7, pc}
 8021b54:	240001cc 	.word	0x240001cc
 8021b58:	24000144 	.word	0x24000144

08021b5c <CheckPassSenError>:
        }
    }
}

void CheckPassSenError(bool isSwing)
{
 8021b5c:	b580      	push	{r7, lr}
 8021b5e:	b084      	sub	sp, #16
 8021b60:	af00      	add	r7, sp, #0
 8021b62:	4603      	mov	r3, r0
 8021b64:	71fb      	strb	r3, [r7, #7]
    int i;
    BYTE bSensorData = RD_PASSSEN1;
 8021b66:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8021b6a:	781b      	ldrb	r3, [r3, #0]
 8021b6c:	73fb      	strb	r3, [r7, #15]

    for (i = 0; i < 16; i++)
 8021b6e:	2300      	movs	r3, #0
 8021b70:	60bb      	str	r3, [r7, #8]
 8021b72:	e0de      	b.n	8021d32 <CheckPassSenError+0x1d6>
    {
        if (i == 8)
 8021b74:	68bb      	ldr	r3, [r7, #8]
 8021b76:	2b08      	cmp	r3, #8
 8021b78:	d102      	bne.n	8021b80 <CheckPassSenError+0x24>
            bSensorData = RD_PASSSEN2;
 8021b7a:	4b72      	ldr	r3, [pc, #456]	; (8021d44 <CheckPassSenError+0x1e8>)
 8021b7c:	781b      	ldrb	r3, [r3, #0]
 8021b7e:	73fb      	strb	r3, [r7, #15]

        if (bSensorData & (1 << (i % 8)))
 8021b80:	7bfa      	ldrb	r2, [r7, #15]
 8021b82:	68bb      	ldr	r3, [r7, #8]
 8021b84:	4259      	negs	r1, r3
 8021b86:	f003 0307 	and.w	r3, r3, #7
 8021b8a:	f001 0107 	and.w	r1, r1, #7
 8021b8e:	bf58      	it	pl
 8021b90:	424b      	negpl	r3, r1
 8021b92:	fa42 f303 	asr.w	r3, r2, r3
 8021b96:	f003 0301 	and.w	r3, r3, #1
 8021b9a:	2b00      	cmp	r3, #0
 8021b9c:	f000 808a 	beq.w	8021cb4 <CheckPassSenError+0x158>
        {
            if (mdwTickPSensorBlock[i] == (gGCUParameter.bSensorBlockTimeout * TICK_COUNT_1SEC * 10))
 8021ba0:	4a69      	ldr	r2, [pc, #420]	; (8021d48 <CheckPassSenError+0x1ec>)
 8021ba2:	68bb      	ldr	r3, [r7, #8]
 8021ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021ba8:	4a68      	ldr	r2, [pc, #416]	; (8021d4c <CheckPassSenError+0x1f0>)
 8021baa:	7a12      	ldrb	r2, [r2, #8]
 8021bac:	4611      	mov	r1, r2
 8021bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8021bb2:	fb01 f202 	mul.w	r2, r1, r2
 8021bb6:	4293      	cmp	r3, r2
 8021bb8:	d165      	bne.n	8021c86 <CheckPassSenError+0x12a>
            {
                gdwPSensorError |= (1 << i);
 8021bba:	2201      	movs	r2, #1
 8021bbc:	68bb      	ldr	r3, [r7, #8]
 8021bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8021bc2:	461a      	mov	r2, r3
 8021bc4:	4b62      	ldr	r3, [pc, #392]	; (8021d50 <CheckPassSenError+0x1f4>)
 8021bc6:	681b      	ldr	r3, [r3, #0]
 8021bc8:	4313      	orrs	r3, r2
 8021bca:	4a61      	ldr	r2, [pc, #388]	; (8021d50 <CheckPassSenError+0x1f4>)
 8021bcc:	6013      	str	r3, [r2, #0]

                if (gGCUStatus.ModuleAlarm.b.nPSensor == OFF)
 8021bce:	4b61      	ldr	r3, [pc, #388]	; (8021d54 <CheckPassSenError+0x1f8>)
 8021bd0:	7b1b      	ldrb	r3, [r3, #12]
 8021bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021bd6:	b2db      	uxtb	r3, r3
 8021bd8:	2b00      	cmp	r3, #0
 8021bda:	d10b      	bne.n	8021bf4 <CheckPassSenError+0x98>
                {
                    if (gCurGCUOpMode.bEmergencyMaint == MODE_NONE)
 8021bdc:	4b5e      	ldr	r3, [pc, #376]	; (8021d58 <CheckPassSenError+0x1fc>)
 8021bde:	789b      	ldrb	r3, [r3, #2]
 8021be0:	2b00      	cmp	r3, #0
 8021be2:	d104      	bne.n	8021bee <CheckPassSenError+0x92>
                        gGCUStatus.ModuleAlarm.b.nPSensor = ON;
 8021be4:	4a5b      	ldr	r2, [pc, #364]	; (8021d54 <CheckPassSenError+0x1f8>)
 8021be6:	7b13      	ldrb	r3, [r2, #12]
 8021be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021bec:	7313      	strb	r3, [r2, #12]

                    printf(" [CheckPassSenError] Sensor Error Detected!!  \n");
 8021bee:	485b      	ldr	r0, [pc, #364]	; (8021d5c <CheckPassSenError+0x200>)
 8021bf0:	f006 ff34 	bl	8028a5c <printf_>
                }

                if (i >= 0 && i < 8)
 8021bf4:	68bb      	ldr	r3, [r7, #8]
 8021bf6:	2b00      	cmp	r3, #0
 8021bf8:	db10      	blt.n	8021c1c <CheckPassSenError+0xc0>
 8021bfa:	68bb      	ldr	r3, [r7, #8]
 8021bfc:	2b07      	cmp	r3, #7
 8021bfe:	dc0d      	bgt.n	8021c1c <CheckPassSenError+0xc0>
                    psenError.B.bSen1 |= (1 << i);
 8021c00:	4b57      	ldr	r3, [pc, #348]	; (8021d60 <CheckPassSenError+0x204>)
 8021c02:	781b      	ldrb	r3, [r3, #0]
 8021c04:	b25a      	sxtb	r2, r3
 8021c06:	2101      	movs	r1, #1
 8021c08:	68bb      	ldr	r3, [r7, #8]
 8021c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8021c0e:	b25b      	sxtb	r3, r3
 8021c10:	4313      	orrs	r3, r2
 8021c12:	b25b      	sxtb	r3, r3
 8021c14:	b2da      	uxtb	r2, r3
 8021c16:	4b52      	ldr	r3, [pc, #328]	; (8021d60 <CheckPassSenError+0x204>)
 8021c18:	701a      	strb	r2, [r3, #0]
 8021c1a:	e013      	b.n	8021c44 <CheckPassSenError+0xe8>
                else if (i >= 8 && i < 16)
 8021c1c:	68bb      	ldr	r3, [r7, #8]
 8021c1e:	2b07      	cmp	r3, #7
 8021c20:	dd10      	ble.n	8021c44 <CheckPassSenError+0xe8>
 8021c22:	68bb      	ldr	r3, [r7, #8]
 8021c24:	2b0f      	cmp	r3, #15
 8021c26:	dc0d      	bgt.n	8021c44 <CheckPassSenError+0xe8>
                    psenError.B.bSen2 |= (1 << (i - 8));
 8021c28:	4b4d      	ldr	r3, [pc, #308]	; (8021d60 <CheckPassSenError+0x204>)
 8021c2a:	785b      	ldrb	r3, [r3, #1]
 8021c2c:	b25a      	sxtb	r2, r3
 8021c2e:	68bb      	ldr	r3, [r7, #8]
 8021c30:	3b08      	subs	r3, #8
 8021c32:	2101      	movs	r1, #1
 8021c34:	fa01 f303 	lsl.w	r3, r1, r3
 8021c38:	b25b      	sxtb	r3, r3
 8021c3a:	4313      	orrs	r3, r2
 8021c3c:	b25b      	sxtb	r3, r3
 8021c3e:	b2da      	uxtb	r2, r3
 8021c40:	4b47      	ldr	r3, [pc, #284]	; (8021d60 <CheckPassSenError+0x204>)
 8021c42:	705a      	strb	r2, [r3, #1]

                if (gCurGCUOpMode.bEmergencyMaint == MODE_NONE)
 8021c44:	4b44      	ldr	r3, [pc, #272]	; (8021d58 <CheckPassSenError+0x1fc>)
 8021c46:	789b      	ldrb	r3, [r3, #2]
 8021c48:	2b00      	cmp	r3, #0
 8021c4a:	d112      	bne.n	8021c72 <CheckPassSenError+0x116>
                {
                    if (psenError.swing.safety_EN || psenError.swing.safety_EX)
 8021c4c:	4b44      	ldr	r3, [pc, #272]	; (8021d60 <CheckPassSenError+0x204>)
 8021c4e:	781b      	ldrb	r3, [r3, #0]
 8021c50:	f023 030f 	bic.w	r3, r3, #15
 8021c54:	b2db      	uxtb	r3, r3
 8021c56:	2b00      	cmp	r3, #0
 8021c58:	d106      	bne.n	8021c68 <CheckPassSenError+0x10c>
 8021c5a:	4b41      	ldr	r3, [pc, #260]	; (8021d60 <CheckPassSenError+0x204>)
 8021c5c:	785b      	ldrb	r3, [r3, #1]
 8021c5e:	f023 030f 	bic.w	r3, r3, #15
 8021c62:	b2db      	uxtb	r3, r3
 8021c64:	2b00      	cmp	r3, #0
 8021c66:	d004      	beq.n	8021c72 <CheckPassSenError+0x116>
                        gGCUStatus.ModuleAlarm.b.nSafetyErr = ON;
 8021c68:	4a3a      	ldr	r2, [pc, #232]	; (8021d54 <CheckPassSenError+0x1f8>)
 8021c6a:	7b13      	ldrb	r3, [r2, #12]
 8021c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021c70:	7313      	strb	r3, [r2, #12]
                }

                mdwTickPSensorBlock[i]++;
 8021c72:	4a35      	ldr	r2, [pc, #212]	; (8021d48 <CheckPassSenError+0x1ec>)
 8021c74:	68bb      	ldr	r3, [r7, #8]
 8021c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021c7a:	1c5a      	adds	r2, r3, #1
 8021c7c:	4932      	ldr	r1, [pc, #200]	; (8021d48 <CheckPassSenError+0x1ec>)
 8021c7e:	68bb      	ldr	r3, [r7, #8]
 8021c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021c84:	e052      	b.n	8021d2c <CheckPassSenError+0x1d0>
            }
            else if (mdwTickPSensorBlock[i] < (gGCUParameter.bSensorBlockTimeout * TICK_COUNT_1SEC * 10))
 8021c86:	4a30      	ldr	r2, [pc, #192]	; (8021d48 <CheckPassSenError+0x1ec>)
 8021c88:	68bb      	ldr	r3, [r7, #8]
 8021c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021c8e:	4a2f      	ldr	r2, [pc, #188]	; (8021d4c <CheckPassSenError+0x1f0>)
 8021c90:	7a12      	ldrb	r2, [r2, #8]
 8021c92:	4611      	mov	r1, r2
 8021c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8021c98:	fb01 f202 	mul.w	r2, r1, r2
 8021c9c:	4293      	cmp	r3, r2
 8021c9e:	d245      	bcs.n	8021d2c <CheckPassSenError+0x1d0>
            {
                mdwTickPSensorBlock[i]++;
 8021ca0:	4a29      	ldr	r2, [pc, #164]	; (8021d48 <CheckPassSenError+0x1ec>)
 8021ca2:	68bb      	ldr	r3, [r7, #8]
 8021ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021ca8:	1c5a      	adds	r2, r3, #1
 8021caa:	4927      	ldr	r1, [pc, #156]	; (8021d48 <CheckPassSenError+0x1ec>)
 8021cac:	68bb      	ldr	r3, [r7, #8]
 8021cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021cb2:	e03b      	b.n	8021d2c <CheckPassSenError+0x1d0>
            }
        }
        else
        {
            mdwTickPSensorBlock[i] = 0;
 8021cb4:	4a24      	ldr	r2, [pc, #144]	; (8021d48 <CheckPassSenError+0x1ec>)
 8021cb6:	68bb      	ldr	r3, [r7, #8]
 8021cb8:	2100      	movs	r1, #0
 8021cba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            gdwPSensorError &= ~(1 << i);
 8021cbe:	2201      	movs	r2, #1
 8021cc0:	68bb      	ldr	r3, [r7, #8]
 8021cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8021cc6:	43db      	mvns	r3, r3
 8021cc8:	461a      	mov	r2, r3
 8021cca:	4b21      	ldr	r3, [pc, #132]	; (8021d50 <CheckPassSenError+0x1f4>)
 8021ccc:	681b      	ldr	r3, [r3, #0]
 8021cce:	4013      	ands	r3, r2
 8021cd0:	4a1f      	ldr	r2, [pc, #124]	; (8021d50 <CheckPassSenError+0x1f4>)
 8021cd2:	6013      	str	r3, [r2, #0]

            if (i >= 0 && i < 8)
 8021cd4:	68bb      	ldr	r3, [r7, #8]
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	db12      	blt.n	8021d00 <CheckPassSenError+0x1a4>
 8021cda:	68bb      	ldr	r3, [r7, #8]
 8021cdc:	2b07      	cmp	r3, #7
 8021cde:	dc0f      	bgt.n	8021d00 <CheckPassSenError+0x1a4>
                psenError.B.bSen1 &= ~(1 << i);
 8021ce0:	4b1f      	ldr	r3, [pc, #124]	; (8021d60 <CheckPassSenError+0x204>)
 8021ce2:	781b      	ldrb	r3, [r3, #0]
 8021ce4:	b25a      	sxtb	r2, r3
 8021ce6:	2101      	movs	r1, #1
 8021ce8:	68bb      	ldr	r3, [r7, #8]
 8021cea:	fa01 f303 	lsl.w	r3, r1, r3
 8021cee:	b25b      	sxtb	r3, r3
 8021cf0:	43db      	mvns	r3, r3
 8021cf2:	b25b      	sxtb	r3, r3
 8021cf4:	4013      	ands	r3, r2
 8021cf6:	b25b      	sxtb	r3, r3
 8021cf8:	b2da      	uxtb	r2, r3
 8021cfa:	4b19      	ldr	r3, [pc, #100]	; (8021d60 <CheckPassSenError+0x204>)
 8021cfc:	701a      	strb	r2, [r3, #0]
 8021cfe:	e015      	b.n	8021d2c <CheckPassSenError+0x1d0>
            else if (i >= 8 && i < 16)
 8021d00:	68bb      	ldr	r3, [r7, #8]
 8021d02:	2b07      	cmp	r3, #7
 8021d04:	dd12      	ble.n	8021d2c <CheckPassSenError+0x1d0>
 8021d06:	68bb      	ldr	r3, [r7, #8]
 8021d08:	2b0f      	cmp	r3, #15
 8021d0a:	dc0f      	bgt.n	8021d2c <CheckPassSenError+0x1d0>
                psenError.B.bSen2 &= ~(1 << (i - 8));
 8021d0c:	4b14      	ldr	r3, [pc, #80]	; (8021d60 <CheckPassSenError+0x204>)
 8021d0e:	785b      	ldrb	r3, [r3, #1]
 8021d10:	b25a      	sxtb	r2, r3
 8021d12:	68bb      	ldr	r3, [r7, #8]
 8021d14:	3b08      	subs	r3, #8
 8021d16:	2101      	movs	r1, #1
 8021d18:	fa01 f303 	lsl.w	r3, r1, r3
 8021d1c:	b25b      	sxtb	r3, r3
 8021d1e:	43db      	mvns	r3, r3
 8021d20:	b25b      	sxtb	r3, r3
 8021d22:	4013      	ands	r3, r2
 8021d24:	b25b      	sxtb	r3, r3
 8021d26:	b2da      	uxtb	r2, r3
 8021d28:	4b0d      	ldr	r3, [pc, #52]	; (8021d60 <CheckPassSenError+0x204>)
 8021d2a:	705a      	strb	r2, [r3, #1]
    for (i = 0; i < 16; i++)
 8021d2c:	68bb      	ldr	r3, [r7, #8]
 8021d2e:	3301      	adds	r3, #1
 8021d30:	60bb      	str	r3, [r7, #8]
 8021d32:	68bb      	ldr	r3, [r7, #8]
 8021d34:	2b0f      	cmp	r3, #15
 8021d36:	f77f af1d 	ble.w	8021b74 <CheckPassSenError+0x18>
        {
            if (!psenError.swing.safety_EN && !psenError.swing.safety_EX)
                gGCUStatus.ModuleAlarm.b.nSafetyErr = OFF;
        }
    }
}
 8021d3a:	bf00      	nop
 8021d3c:	3710      	adds	r7, #16
 8021d3e:	46bd      	mov	sp, r7
 8021d40:	bd80      	pop	{r7, pc}
 8021d42:	bf00      	nop
 8021d44:	60000100 	.word	0x60000100
 8021d48:	2400044c 	.word	0x2400044c
 8021d4c:	240004a0 	.word	0x240004a0
 8021d50:	24000448 	.word	0x24000448
 8021d54:	240004b0 	.word	0x240004b0
 8021d58:	240004d4 	.word	0x240004d4
 8021d5c:	0803021c 	.word	0x0803021c
 8021d60:	2400049c 	.word	0x2400049c

08021d64 <InhibitPass>:
void InhibitPass(int nDir)
{
 8021d64:	b580      	push	{r7, lr}
 8021d66:	b082      	sub	sp, #8
 8021d68:	af00      	add	r7, sp, #0
 8021d6a:	6078      	str	r0, [r7, #4]
	printf(" [InhibitPass] Dir:%d  \n", nDir);
 8021d6c:	6879      	ldr	r1, [r7, #4]
 8021d6e:	4814      	ldr	r0, [pc, #80]	; (8021dc0 <InhibitPass+0x5c>)
 8021d70:	f006 fe74 	bl	8028a5c <printf_>
    ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8021d74:	4b13      	ldr	r3, [pc, #76]	; (8021dc4 <InhibitPass+0x60>)
 8021d76:	7a9b      	ldrb	r3, [r3, #10]
 8021d78:	461a      	mov	r2, r3
 8021d7a:	2101      	movs	r1, #1
 8021d7c:	2000      	movs	r0, #0
 8021d7e:	f7ff fba5 	bl	80214cc <ControlBuzzer>
    ControlDirectionLED(DIR_RED, DIR_RED);
 8021d82:	2102      	movs	r1, #2
 8021d84:	2002      	movs	r0, #2
 8021d86:	f7ff fbfb 	bl	8021580 <ControlDirectionLED>

    if (nDir == FROM_ENTRY)
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	2b01      	cmp	r3, #1
 8021d8e:	d108      	bne.n	8021da2 <InhibitPass+0x3e>
    {
        ControlIndicator(LAMP_RED_ON, gbIndicatorCMD_EX, gGCUParameter.bAlarmTimeout, TRUE);
 8021d90:	4b0d      	ldr	r3, [pc, #52]	; (8021dc8 <InhibitPass+0x64>)
 8021d92:	7819      	ldrb	r1, [r3, #0]
 8021d94:	4b0b      	ldr	r3, [pc, #44]	; (8021dc4 <InhibitPass+0x60>)
 8021d96:	7a9a      	ldrb	r2, [r3, #10]
 8021d98:	2301      	movs	r3, #1
 8021d9a:	2001      	movs	r0, #1
 8021d9c:	f7ff fc4c 	bl	8021638 <ControlIndicator>
    }
    else if (nDir == FROM_EXIT)
    {
        ControlIndicator(gbIndicatorCMD_EN, LAMP_RED_ON, gGCUParameter.bAlarmTimeout, TRUE);
    }
}
 8021da0:	e00a      	b.n	8021db8 <InhibitPass+0x54>
    else if (nDir == FROM_EXIT)
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	2b02      	cmp	r3, #2
 8021da6:	d107      	bne.n	8021db8 <InhibitPass+0x54>
        ControlIndicator(gbIndicatorCMD_EN, LAMP_RED_ON, gGCUParameter.bAlarmTimeout, TRUE);
 8021da8:	4b08      	ldr	r3, [pc, #32]	; (8021dcc <InhibitPass+0x68>)
 8021daa:	7818      	ldrb	r0, [r3, #0]
 8021dac:	4b05      	ldr	r3, [pc, #20]	; (8021dc4 <InhibitPass+0x60>)
 8021dae:	7a9a      	ldrb	r2, [r3, #10]
 8021db0:	2301      	movs	r3, #1
 8021db2:	2101      	movs	r1, #1
 8021db4:	f7ff fc40 	bl	8021638 <ControlIndicator>
}
 8021db8:	bf00      	nop
 8021dba:	3708      	adds	r7, #8
 8021dbc:	46bd      	mov	sp, r7
 8021dbe:	bd80      	pop	{r7, pc}
 8021dc0:	0803024c 	.word	0x0803024c
 8021dc4:	240004a0 	.word	0x240004a0
 8021dc8:	24000128 	.word	0x24000128
 8021dcc:	24000127 	.word	0x24000127

08021dd0 <ClearPassageAlarm>:

void ClearPassageAlarm()
{
 8021dd0:	b580      	push	{r7, lr}
 8021dd2:	af00      	add	r7, sp, #0
    ResetTimer(&timerIllegalEnterEN);
 8021dd4:	482c      	ldr	r0, [pc, #176]	; (8021e88 <ClearPassageAlarm+0xb8>)
 8021dd6:	f00c fef9 	bl	802ebcc <ResetTimer>
    ResetTimer(&timerIllegalEnterEX);
 8021dda:	482c      	ldr	r0, [pc, #176]	; (8021e8c <ClearPassageAlarm+0xbc>)
 8021ddc:	f00c fef6 	bl	802ebcc <ResetTimer>
    ResetTimer(&timerLuggageWait);
 8021de0:	482b      	ldr	r0, [pc, #172]	; (8021e90 <ClearPassageAlarm+0xc0>)
 8021de2:	f00c fef3 	bl	802ebcc <ResetTimer>

    // Passage clear timeout is reached, clear passage
    if (gGCUStatus.PassageAlarm.b.nFromEN)
 8021de6:	4b2b      	ldr	r3, [pc, #172]	; (8021e94 <ClearPassageAlarm+0xc4>)
 8021de8:	7a1b      	ldrb	r3, [r3, #8]
 8021dea:	f003 0307 	and.w	r3, r3, #7
 8021dee:	b2db      	uxtb	r3, r3
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	d004      	beq.n	8021dfe <ClearPassageAlarm+0x2e>
        gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8021df4:	4a27      	ldr	r2, [pc, #156]	; (8021e94 <ClearPassageAlarm+0xc4>)
 8021df6:	7a13      	ldrb	r3, [r2, #8]
 8021df8:	f36f 0302 	bfc	r3, #0, #3
 8021dfc:	7213      	strb	r3, [r2, #8]

    if (gGCUStatus.PassageAlarm.b.nFromEX)
 8021dfe:	4b25      	ldr	r3, [pc, #148]	; (8021e94 <ClearPassageAlarm+0xc4>)
 8021e00:	7a1b      	ldrb	r3, [r3, #8]
 8021e02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8021e06:	b2db      	uxtb	r3, r3
 8021e08:	2b00      	cmp	r3, #0
 8021e0a:	d004      	beq.n	8021e16 <ClearPassageAlarm+0x46>
        gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8021e0c:	4a21      	ldr	r2, [pc, #132]	; (8021e94 <ClearPassageAlarm+0xc4>)
 8021e0e:	7a13      	ldrb	r3, [r2, #8]
 8021e10:	f36f 1306 	bfc	r3, #4, #3
 8021e14:	7213      	strb	r3, [r2, #8]

    if (gGCUStatus.PassageAlarm.b.nPassOverFromEN || gGCUStatus.PassageAlarm.b.nPassOverFromEX)
 8021e16:	4b1f      	ldr	r3, [pc, #124]	; (8021e94 <ClearPassageAlarm+0xc4>)
 8021e18:	7a1b      	ldrb	r3, [r3, #8]
 8021e1a:	f003 0308 	and.w	r3, r3, #8
 8021e1e:	b2db      	uxtb	r3, r3
 8021e20:	2b00      	cmp	r3, #0
 8021e22:	d106      	bne.n	8021e32 <ClearPassageAlarm+0x62>
 8021e24:	4b1b      	ldr	r3, [pc, #108]	; (8021e94 <ClearPassageAlarm+0xc4>)
 8021e26:	7a1b      	ldrb	r3, [r3, #8]
 8021e28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021e2c:	b2db      	uxtb	r3, r3
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	d009      	beq.n	8021e46 <ClearPassageAlarm+0x76>
    {
        gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8021e32:	4a18      	ldr	r2, [pc, #96]	; (8021e94 <ClearPassageAlarm+0xc4>)
 8021e34:	7a13      	ldrb	r3, [r2, #8]
 8021e36:	f36f 03c3 	bfc	r3, #3, #1
 8021e3a:	7213      	strb	r3, [r2, #8]
        gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8021e3c:	4a15      	ldr	r2, [pc, #84]	; (8021e94 <ClearPassageAlarm+0xc4>)
 8021e3e:	7a13      	ldrb	r3, [r2, #8]
 8021e40:	f36f 13c7 	bfc	r3, #7, #1
 8021e44:	7213      	strb	r3, [r2, #8]
    }

    if (!psenNew.side.entry && (0 == gGCUStatus.bAuthCount_EN))
 8021e46:	4b14      	ldr	r3, [pc, #80]	; (8021e98 <ClearPassageAlarm+0xc8>)
 8021e48:	f993 3000 	ldrsb.w	r3, [r3]
 8021e4c:	2b00      	cmp	r3, #0
 8021e4e:	d107      	bne.n	8021e60 <ClearPassageAlarm+0x90>
 8021e50:	4b10      	ldr	r3, [pc, #64]	; (8021e94 <ClearPassageAlarm+0xc4>)
 8021e52:	791b      	ldrb	r3, [r3, #4]
 8021e54:	b2db      	uxtb	r3, r3
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d102      	bne.n	8021e60 <ClearPassageAlarm+0x90>
    {
        gisEntryPassenger = FALSE;
 8021e5a:	4b10      	ldr	r3, [pc, #64]	; (8021e9c <ClearPassageAlarm+0xcc>)
 8021e5c:	2200      	movs	r2, #0
 8021e5e:	701a      	strb	r2, [r3, #0]
    }

    if (!psenNew.side.exit && (0 == gGCUStatus.bAuthCount_EX))
 8021e60:	4b0d      	ldr	r3, [pc, #52]	; (8021e98 <ClearPassageAlarm+0xc8>)
 8021e62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8021e66:	2b00      	cmp	r3, #0
 8021e68:	d107      	bne.n	8021e7a <ClearPassageAlarm+0xaa>
 8021e6a:	4b0a      	ldr	r3, [pc, #40]	; (8021e94 <ClearPassageAlarm+0xc4>)
 8021e6c:	795b      	ldrb	r3, [r3, #5]
 8021e6e:	b2db      	uxtb	r3, r3
 8021e70:	2b00      	cmp	r3, #0
 8021e72:	d102      	bne.n	8021e7a <ClearPassageAlarm+0xaa>
    {
        gisExitPassenger = FALSE;
 8021e74:	4b0a      	ldr	r3, [pc, #40]	; (8021ea0 <ClearPassageAlarm+0xd0>)
 8021e76:	2200      	movs	r2, #0
 8021e78:	701a      	strb	r2, [r3, #0]
    }

    gGCUStatus.IllegalPass.bIllegalPass = FLG_OFF;
 8021e7a:	4b06      	ldr	r3, [pc, #24]	; (8021e94 <ClearPassageAlarm+0xc4>)
 8021e7c:	2200      	movs	r2, #0
 8021e7e:	771a      	strb	r2, [r3, #28]

    ClearIllegalPass();
 8021e80:	f000 f810 	bl	8021ea4 <ClearIllegalPass>
}
 8021e84:	bf00      	nop
 8021e86:	bd80      	pop	{r7, pc}
 8021e88:	2400019c 	.word	0x2400019c
 8021e8c:	240001a8 	.word	0x240001a8
 8021e90:	240001d8 	.word	0x240001d8
 8021e94:	240004b0 	.word	0x240004b0
 8021e98:	24000414 	.word	0x24000414
 8021e9c:	2400043b 	.word	0x2400043b
 8021ea0:	2400043c 	.word	0x2400043c

08021ea4 <ClearIllegalPass>:

void ClearIllegalPass(void)
{
 8021ea4:	b580      	push	{r7, lr}
 8021ea6:	af00      	add	r7, sp, #0
    if (gGCUStatus.PassageAlarm.b.nFromEN)
 8021ea8:	4b2a      	ldr	r3, [pc, #168]	; (8021f54 <ClearIllegalPass+0xb0>)
 8021eaa:	7a1b      	ldrb	r3, [r3, #8]
 8021eac:	f003 0307 	and.w	r3, r3, #7
 8021eb0:	b2db      	uxtb	r3, r3
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	d022      	beq.n	8021efc <ClearIllegalPass+0x58>
    {
        if (!psenNew.side.entry)
 8021eb6:	4b28      	ldr	r3, [pc, #160]	; (8021f58 <ClearIllegalPass+0xb4>)
 8021eb8:	f993 3000 	ldrsb.w	r3, [r3]
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	d11d      	bne.n	8021efc <ClearIllegalPass+0x58>
        {
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8021ec0:	4a24      	ldr	r2, [pc, #144]	; (8021f54 <ClearIllegalPass+0xb0>)
 8021ec2:	7a13      	ldrb	r3, [r2, #8]
 8021ec4:	f36f 0302 	bfc	r3, #0, #3
 8021ec8:	7213      	strb	r3, [r2, #8]
            gisEntryPassenger = FALSE;
 8021eca:	4b24      	ldr	r3, [pc, #144]	; (8021f5c <ClearIllegalPass+0xb8>)
 8021ecc:	2200      	movs	r2, #0
 8021ece:	701a      	strb	r2, [r3, #0]
            {
                gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
                //PRINTL(" [EN] Clear Illegal Enter");
                printf(" [EN] Clear Illegal Enter  \n");
            }
            ResetTimer(&timerIllegalEnterEN);
 8021ed0:	4823      	ldr	r0, [pc, #140]	; (8021f60 <ClearIllegalPass+0xbc>)
 8021ed2:	f00c fe7b 	bl	802ebcc <ResetTimer>

            if (timerJumping.fStart == FALSE && timerTailgating.fStart == FALSE)
 8021ed6:	4b23      	ldr	r3, [pc, #140]	; (8021f64 <ClearIllegalPass+0xc0>)
 8021ed8:	781b      	ldrb	r3, [r3, #0]
 8021eda:	f083 0301 	eor.w	r3, r3, #1
 8021ede:	b2db      	uxtb	r3, r3
 8021ee0:	2b00      	cmp	r3, #0
 8021ee2:	d00b      	beq.n	8021efc <ClearIllegalPass+0x58>
 8021ee4:	4b20      	ldr	r3, [pc, #128]	; (8021f68 <ClearIllegalPass+0xc4>)
 8021ee6:	781b      	ldrb	r3, [r3, #0]
 8021ee8:	f083 0301 	eor.w	r3, r3, #1
 8021eec:	b2db      	uxtb	r3, r3
 8021eee:	2b00      	cmp	r3, #0
 8021ef0:	d004      	beq.n	8021efc <ClearIllegalPass+0x58>
            {
                InitPassageMode();
 8021ef2:	f000 f9f1 	bl	80222d8 <InitPassageMode>
                //PRINTL(" [EN] ClearIllegalPass - InitPassageMode");
                printf(" [EN] ClearIllegalPass - InitPassageMode  \n");
 8021ef6:	481d      	ldr	r0, [pc, #116]	; (8021f6c <ClearIllegalPass+0xc8>)
 8021ef8:	f006 fdb0 	bl	8028a5c <printf_>
            }
        }
    }

    if (gGCUStatus.PassageAlarm.b.nFromEX)
 8021efc:	4b15      	ldr	r3, [pc, #84]	; (8021f54 <ClearIllegalPass+0xb0>)
 8021efe:	7a1b      	ldrb	r3, [r3, #8]
 8021f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8021f04:	b2db      	uxtb	r3, r3
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d022      	beq.n	8021f50 <ClearIllegalPass+0xac>
    {
        if (!psenNew.side.exit)
 8021f0a:	4b13      	ldr	r3, [pc, #76]	; (8021f58 <ClearIllegalPass+0xb4>)
 8021f0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8021f10:	2b00      	cmp	r3, #0
 8021f12:	d11d      	bne.n	8021f50 <ClearIllegalPass+0xac>
        {
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8021f14:	4a0f      	ldr	r2, [pc, #60]	; (8021f54 <ClearIllegalPass+0xb0>)
 8021f16:	7a13      	ldrb	r3, [r2, #8]
 8021f18:	f36f 1306 	bfc	r3, #4, #3
 8021f1c:	7213      	strb	r3, [r2, #8]
            gisExitPassenger = FALSE;
 8021f1e:	4b14      	ldr	r3, [pc, #80]	; (8021f70 <ClearIllegalPass+0xcc>)
 8021f20:	2200      	movs	r2, #0
 8021f22:	701a      	strb	r2, [r3, #0]
            {
                gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
                //PRINTL(" [EX] Clear Illegal Enter");
                printf(" [EX] Clear Illegal Enter  \n");
            }
            ResetTimer(&timerIllegalEnterEX);
 8021f24:	4813      	ldr	r0, [pc, #76]	; (8021f74 <ClearIllegalPass+0xd0>)
 8021f26:	f00c fe51 	bl	802ebcc <ResetTimer>

            if (timerJumping.fStart == FALSE && timerTailgating.fStart == FALSE)
 8021f2a:	4b0e      	ldr	r3, [pc, #56]	; (8021f64 <ClearIllegalPass+0xc0>)
 8021f2c:	781b      	ldrb	r3, [r3, #0]
 8021f2e:	f083 0301 	eor.w	r3, r3, #1
 8021f32:	b2db      	uxtb	r3, r3
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	d00b      	beq.n	8021f50 <ClearIllegalPass+0xac>
 8021f38:	4b0b      	ldr	r3, [pc, #44]	; (8021f68 <ClearIllegalPass+0xc4>)
 8021f3a:	781b      	ldrb	r3, [r3, #0]
 8021f3c:	f083 0301 	eor.w	r3, r3, #1
 8021f40:	b2db      	uxtb	r3, r3
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	d004      	beq.n	8021f50 <ClearIllegalPass+0xac>
            {
                InitPassageMode();
 8021f46:	f000 f9c7 	bl	80222d8 <InitPassageMode>
               // PRINTL(" [EX] ClearIllegalPass - InitPassageMode");

                printf(" [EX] ClearIllegalPass - InitPassageMode  \n");
 8021f4a:	480b      	ldr	r0, [pc, #44]	; (8021f78 <ClearIllegalPass+0xd4>)
 8021f4c:	f006 fd86 	bl	8028a5c <printf_>
            }
        }
    }
}
 8021f50:	bf00      	nop
 8021f52:	bd80      	pop	{r7, pc}
 8021f54:	240004b0 	.word	0x240004b0
 8021f58:	24000414 	.word	0x24000414
 8021f5c:	2400043b 	.word	0x2400043b
 8021f60:	2400019c 	.word	0x2400019c
 8021f64:	240001f0 	.word	0x240001f0
 8021f68:	240001fc 	.word	0x240001fc
 8021f6c:	08030268 	.word	0x08030268
 8021f70:	2400043c 	.word	0x2400043c
 8021f74:	240001a8 	.word	0x240001a8
 8021f78:	08030294 	.word	0x08030294

08021f7c <CheckAuthTimeout>:

void CheckAuthTimeout(void)
{
 8021f7c:	b580      	push	{r7, lr}
 8021f7e:	af00      	add	r7, sp, #0
    if (timerAuthorize.fStart)
 8021f80:	4b1a      	ldr	r3, [pc, #104]	; (8021fec <CheckAuthTimeout+0x70>)
 8021f82:	781b      	ldrb	r3, [r3, #0]
 8021f84:	2b00      	cmp	r3, #0
 8021f86:	d02e      	beq.n	8021fe6 <CheckAuthTimeout+0x6a>
    {
        if (IsTimeout(&timerAuthorize, (gdwTimeoutAuthorize * TICK_COUNT_1SEC)))
 8021f88:	4b19      	ldr	r3, [pc, #100]	; (8021ff0 <CheckAuthTimeout+0x74>)
 8021f8a:	681b      	ldr	r3, [r3, #0]
 8021f8c:	2264      	movs	r2, #100	; 0x64
 8021f8e:	fb02 f303 	mul.w	r3, r2, r3
 8021f92:	4619      	mov	r1, r3
 8021f94:	4815      	ldr	r0, [pc, #84]	; (8021fec <CheckAuthTimeout+0x70>)
 8021f96:	f00c fe27 	bl	802ebe8 <IsTimeout>
 8021f9a:	4603      	mov	r3, r0
 8021f9c:	2b00      	cmp	r3, #0
 8021f9e:	d022      	beq.n	8021fe6 <CheckAuthTimeout+0x6a>
        {
           // PRINTL(" [CheckAuthTimeout] ElapsedTime:%d", gdwTimeoutAuthorize);
        	printf(" [CheckAuthTimeout] ElapsedTime:%d  \n", gdwTimeoutAuthorize);
 8021fa0:	4b13      	ldr	r3, [pc, #76]	; (8021ff0 <CheckAuthTimeout+0x74>)
 8021fa2:	681b      	ldr	r3, [r3, #0]
 8021fa4:	4619      	mov	r1, r3
 8021fa6:	4813      	ldr	r0, [pc, #76]	; (8021ff4 <CheckAuthTimeout+0x78>)
 8021fa8:	f006 fd58 	bl	8028a5c <printf_>
            ResetTimer(&timerAuthorize);            
 8021fac:	480f      	ldr	r0, [pc, #60]	; (8021fec <CheckAuthTimeout+0x70>)
 8021fae:	f00c fe0d 	bl	802ebcc <ResetTimer>
            gGCUStatus.bAuthCount_EN = 0;
 8021fb2:	4b11      	ldr	r3, [pc, #68]	; (8021ff8 <CheckAuthTimeout+0x7c>)
 8021fb4:	2200      	movs	r2, #0
 8021fb6:	711a      	strb	r2, [r3, #4]
            gGCUStatus.bAuthCount_EX = 0;
 8021fb8:	4b0f      	ldr	r3, [pc, #60]	; (8021ff8 <CheckAuthTimeout+0x7c>)
 8021fba:	2200      	movs	r2, #0
 8021fbc:	715a      	strb	r2, [r3, #5]
            gfisAuthTimeout = TRUE;
 8021fbe:	4b0f      	ldr	r3, [pc, #60]	; (8021ffc <CheckAuthTimeout+0x80>)
 8021fc0:	2201      	movs	r2, #1
 8021fc2:	701a      	strb	r2, [r3, #0]
            ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 8021fc4:	2300      	movs	r3, #0
 8021fc6:	2200      	movs	r2, #0
 8021fc8:	2100      	movs	r1, #0
 8021fca:	2000      	movs	r0, #0
 8021fcc:	f7ff fb34 	bl	8021638 <ControlIndicator>
            if (gGCUStatus.PassageAlarm.bAlarm != 0)
 8021fd0:	4b09      	ldr	r3, [pc, #36]	; (8021ff8 <CheckAuthTimeout+0x7c>)
 8021fd2:	7a1b      	ldrb	r3, [r3, #8]
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	d004      	beq.n	8021fe2 <CheckAuthTimeout+0x66>
            {
                ClearIllegalPass();
 8021fd8:	f7ff ff64 	bl	8021ea4 <ClearIllegalPass>
                gGCUStatus.PassageAlarm.bAlarm = 0;
 8021fdc:	4b06      	ldr	r3, [pc, #24]	; (8021ff8 <CheckAuthTimeout+0x7c>)
 8021fde:	2200      	movs	r2, #0
 8021fe0:	721a      	strb	r2, [r3, #8]
            }

            InitPassageMode();
 8021fe2:	f000 f979 	bl	80222d8 <InitPassageMode>
        }
    }
}
 8021fe6:	bf00      	nop
 8021fe8:	bd80      	pop	{r7, pc}
 8021fea:	bf00      	nop
 8021fec:	24000160 	.word	0x24000160
 8021ff0:	24000154 	.word	0x24000154
 8021ff4:	080302c0 	.word	0x080302c0
 8021ff8:	240004b0 	.word	0x240004b0
 8021ffc:	24000134 	.word	0x24000134

08022000 <CheckIllegalAlarmTimer>:

void CheckIllegalAlarmTimer(void)
{
 8022000:	b580      	push	{r7, lr}
 8022002:	af00      	add	r7, sp, #0
    if (timerJumping.fStart)
 8022004:	4b33      	ldr	r3, [pc, #204]	; (80220d4 <CheckIllegalAlarmTimer+0xd4>)
 8022006:	781b      	ldrb	r3, [r3, #0]
 8022008:	2b00      	cmp	r3, #0
 802200a:	d02f      	beq.n	802206c <CheckIllegalAlarmTimer+0x6c>
    {
        if (IsTimeout(&timerJumping, gdwTimeoutJumping))
 802200c:	4b32      	ldr	r3, [pc, #200]	; (80220d8 <CheckIllegalAlarmTimer+0xd8>)
 802200e:	681b      	ldr	r3, [r3, #0]
 8022010:	4619      	mov	r1, r3
 8022012:	4830      	ldr	r0, [pc, #192]	; (80220d4 <CheckIllegalAlarmTimer+0xd4>)
 8022014:	f00c fde8 	bl	802ebe8 <IsTimeout>
 8022018:	4603      	mov	r3, r0
 802201a:	2b00      	cmp	r3, #0
 802201c:	d026      	beq.n	802206c <CheckIllegalAlarmTimer+0x6c>
        {
            gGCUStatus.IllegalPass.b.nJumping_EN = FLG_OFF;
 802201e:	4a2f      	ldr	r2, [pc, #188]	; (80220dc <CheckIllegalAlarmTimer+0xdc>)
 8022020:	7f13      	ldrb	r3, [r2, #28]
 8022022:	f36f 0341 	bfc	r3, #1, #1
 8022026:	7713      	strb	r3, [r2, #28]
            gGCUStatus.IllegalPass.b.nJumping_EX = FLG_OFF;
 8022028:	4a2c      	ldr	r2, [pc, #176]	; (80220dc <CheckIllegalAlarmTimer+0xdc>)
 802202a:	7f13      	ldrb	r3, [r2, #28]
 802202c:	f36f 1345 	bfc	r3, #5, #1
 8022030:	7713      	strb	r3, [r2, #28]
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8022032:	4a2a      	ldr	r2, [pc, #168]	; (80220dc <CheckIllegalAlarmTimer+0xdc>)
 8022034:	7a13      	ldrb	r3, [r2, #8]
 8022036:	f36f 0302 	bfc	r3, #0, #3
 802203a:	7213      	strb	r3, [r2, #8]
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 802203c:	4a27      	ldr	r2, [pc, #156]	; (80220dc <CheckIllegalAlarmTimer+0xdc>)
 802203e:	7a13      	ldrb	r3, [r2, #8]
 8022040:	f36f 1306 	bfc	r3, #4, #3
 8022044:	7213      	strb	r3, [r2, #8]
            ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 8022046:	4b26      	ldr	r3, [pc, #152]	; (80220e0 <CheckIllegalAlarmTimer+0xe0>)
 8022048:	781b      	ldrb	r3, [r3, #0]
 802204a:	4a26      	ldr	r2, [pc, #152]	; (80220e4 <CheckIllegalAlarmTimer+0xe4>)
 802204c:	7812      	ldrb	r2, [r2, #0]
 802204e:	4611      	mov	r1, r2
 8022050:	4618      	mov	r0, r3
 8022052:	f7ff fa95 	bl	8021580 <ControlDirectionLED>
            ControlIndicatorBlink(FLG_OFF);
 8022056:	2000      	movs	r0, #0
 8022058:	f7ff fb76 	bl	8021748 <ControlIndicatorBlink>
            ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 802205c:	2200      	movs	r2, #0
 802205e:	2100      	movs	r1, #0
 8022060:	2000      	movs	r0, #0
 8022062:	f7ff fa33 	bl	80214cc <ControlBuzzer>
            ResetTimer(&timerJumping);
 8022066:	481b      	ldr	r0, [pc, #108]	; (80220d4 <CheckIllegalAlarmTimer+0xd4>)
 8022068:	f00c fdb0 	bl	802ebcc <ResetTimer>
        }
    }

    if (timerTailgating.fStart)
 802206c:	4b1e      	ldr	r3, [pc, #120]	; (80220e8 <CheckIllegalAlarmTimer+0xe8>)
 802206e:	781b      	ldrb	r3, [r3, #0]
 8022070:	2b00      	cmp	r3, #0
 8022072:	d02d      	beq.n	80220d0 <CheckIllegalAlarmTimer+0xd0>
    {
        if (IsTimeout(&timerTailgating, DEFAULT_TAILGATING_TIMEOUT * TICK_COUNT_1SEC))
 8022074:	21c8      	movs	r1, #200	; 0xc8
 8022076:	481c      	ldr	r0, [pc, #112]	; (80220e8 <CheckIllegalAlarmTimer+0xe8>)
 8022078:	f00c fdb6 	bl	802ebe8 <IsTimeout>
 802207c:	4603      	mov	r3, r0
 802207e:	2b00      	cmp	r3, #0
 8022080:	d026      	beq.n	80220d0 <CheckIllegalAlarmTimer+0xd0>
        {
            gGCUStatus.IllegalPass.b.nTailgating_EN = FLG_OFF;
 8022082:	4a16      	ldr	r2, [pc, #88]	; (80220dc <CheckIllegalAlarmTimer+0xdc>)
 8022084:	7f13      	ldrb	r3, [r2, #28]
 8022086:	f36f 0300 	bfc	r3, #0, #1
 802208a:	7713      	strb	r3, [r2, #28]
            gGCUStatus.IllegalPass.b.nTailgating_EX = FLG_OFF;
 802208c:	4a13      	ldr	r2, [pc, #76]	; (80220dc <CheckIllegalAlarmTimer+0xdc>)
 802208e:	7f13      	ldrb	r3, [r2, #28]
 8022090:	f36f 1304 	bfc	r3, #4, #1
 8022094:	7713      	strb	r3, [r2, #28]
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8022096:	4a11      	ldr	r2, [pc, #68]	; (80220dc <CheckIllegalAlarmTimer+0xdc>)
 8022098:	7a13      	ldrb	r3, [r2, #8]
 802209a:	f36f 0302 	bfc	r3, #0, #3
 802209e:	7213      	strb	r3, [r2, #8]
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 80220a0:	4a0e      	ldr	r2, [pc, #56]	; (80220dc <CheckIllegalAlarmTimer+0xdc>)
 80220a2:	7a13      	ldrb	r3, [r2, #8]
 80220a4:	f36f 1306 	bfc	r3, #4, #3
 80220a8:	7213      	strb	r3, [r2, #8]
            ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 80220aa:	4b0d      	ldr	r3, [pc, #52]	; (80220e0 <CheckIllegalAlarmTimer+0xe0>)
 80220ac:	781b      	ldrb	r3, [r3, #0]
 80220ae:	4a0d      	ldr	r2, [pc, #52]	; (80220e4 <CheckIllegalAlarmTimer+0xe4>)
 80220b0:	7812      	ldrb	r2, [r2, #0]
 80220b2:	4611      	mov	r1, r2
 80220b4:	4618      	mov	r0, r3
 80220b6:	f7ff fa63 	bl	8021580 <ControlDirectionLED>
            ControlIndicatorBlink(FLG_OFF);
 80220ba:	2000      	movs	r0, #0
 80220bc:	f7ff fb44 	bl	8021748 <ControlIndicatorBlink>
            ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 80220c0:	2200      	movs	r2, #0
 80220c2:	2100      	movs	r1, #0
 80220c4:	2000      	movs	r0, #0
 80220c6:	f7ff fa01 	bl	80214cc <ControlBuzzer>
            ResetTimer(&timerTailgating);
 80220ca:	4807      	ldr	r0, [pc, #28]	; (80220e8 <CheckIllegalAlarmTimer+0xe8>)
 80220cc:	f00c fd7e 	bl	802ebcc <ResetTimer>
        }
    }
}
 80220d0:	bf00      	nop
 80220d2:	bd80      	pop	{r7, pc}
 80220d4:	240001f0 	.word	0x240001f0
 80220d8:	24000158 	.word	0x24000158
 80220dc:	240004b0 	.word	0x240004b0
 80220e0:	24000129 	.word	0x24000129
 80220e4:	2400012a 	.word	0x2400012a
 80220e8:	240001fc 	.word	0x240001fc

080220ec <CheckBlinkTimer>:

void CheckBlinkTimer(void)
{
 80220ec:	b580      	push	{r7, lr}
 80220ee:	af00      	add	r7, sp, #0
    if (timerBlink.fStart)
 80220f0:	4b17      	ldr	r3, [pc, #92]	; (8022150 <CheckBlinkTimer+0x64>)
 80220f2:	781b      	ldrb	r3, [r3, #0]
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d029      	beq.n	802214c <CheckBlinkTimer+0x60>
    {
        if (IsTimeout(&timerBlink, gdwTimeoutBlink))
 80220f8:	4b16      	ldr	r3, [pc, #88]	; (8022154 <CheckBlinkTimer+0x68>)
 80220fa:	681b      	ldr	r3, [r3, #0]
 80220fc:	4619      	mov	r1, r3
 80220fe:	4814      	ldr	r0, [pc, #80]	; (8022150 <CheckBlinkTimer+0x64>)
 8022100:	f00c fd72 	bl	802ebe8 <IsTimeout>
 8022104:	4603      	mov	r3, r0
 8022106:	2b00      	cmp	r3, #0
 8022108:	d020      	beq.n	802214c <CheckBlinkTimer+0x60>
        {
            if (FLG_SET == gbIndicatorBlink)
 802210a:	4b13      	ldr	r3, [pc, #76]	; (8022158 <CheckBlinkTimer+0x6c>)
 802210c:	781b      	ldrb	r3, [r3, #0]
 802210e:	2b01      	cmp	r3, #1
 8022110:	d116      	bne.n	8022140 <CheckBlinkTimer+0x54>
            {
                if (gbIndicatorFlag)
 8022112:	4b12      	ldr	r3, [pc, #72]	; (802215c <CheckBlinkTimer+0x70>)
 8022114:	781b      	ldrb	r3, [r3, #0]
 8022116:	2b00      	cmp	r3, #0
 8022118:	d009      	beq.n	802212e <CheckBlinkTimer+0x42>
                {
                    gbIndicatorFlag = FLG_OFF;
 802211a:	4b10      	ldr	r3, [pc, #64]	; (802215c <CheckBlinkTimer+0x70>)
 802211c:	2200      	movs	r2, #0
 802211e:	701a      	strb	r2, [r3, #0]
                    ControlIndicator(LAMP_OFF, LAMP_OFF, 0, TRUE);
 8022120:	2301      	movs	r3, #1
 8022122:	2200      	movs	r2, #0
 8022124:	2100      	movs	r1, #0
 8022126:	2000      	movs	r0, #0
 8022128:	f7ff fa86 	bl	8021638 <ControlIndicator>
 802212c:	e008      	b.n	8022140 <CheckBlinkTimer+0x54>
                }
                else
                {
                    gbIndicatorFlag = FLG_SET;
 802212e:	4b0b      	ldr	r3, [pc, #44]	; (802215c <CheckBlinkTimer+0x70>)
 8022130:	2201      	movs	r2, #1
 8022132:	701a      	strb	r2, [r3, #0]
                    ControlIndicator(LAMP_RED_ON, LAMP_RED_ON, 0, TRUE);
 8022134:	2301      	movs	r3, #1
 8022136:	2200      	movs	r2, #0
 8022138:	2101      	movs	r1, #1
 802213a:	2001      	movs	r0, #1
 802213c:	f7ff fa7c 	bl	8021638 <ControlIndicator>
                }
            }
            ResetTimer(&timerBlink);
 8022140:	4803      	ldr	r0, [pc, #12]	; (8022150 <CheckBlinkTimer+0x64>)
 8022142:	f00c fd43 	bl	802ebcc <ResetTimer>
            SetTimer(&timerBlink);
 8022146:	4802      	ldr	r0, [pc, #8]	; (8022150 <CheckBlinkTimer+0x64>)
 8022148:	f00c fd2c 	bl	802eba4 <SetTimer>
        }
    }
}
 802214c:	bf00      	nop
 802214e:	bd80      	pop	{r7, pc}
 8022150:	240001b4 	.word	0x240001b4
 8022154:	24000150 	.word	0x24000150
 8022158:	24000126 	.word	0x24000126
 802215c:	2400012c 	.word	0x2400012c

08022160 <CheckIllegalEnterTimer>:

void CheckIllegalEnterTimer(BYTE dir)
{
 8022160:	b580      	push	{r7, lr}
 8022162:	b082      	sub	sp, #8
 8022164:	af00      	add	r7, sp, #0
 8022166:	4603      	mov	r3, r0
 8022168:	71fb      	strb	r3, [r7, #7]
    if (FROM_ENTRY == dir)
 802216a:	79fb      	ldrb	r3, [r7, #7]
 802216c:	2b01      	cmp	r3, #1
 802216e:	d139      	bne.n	80221e4 <CheckIllegalEnterTimer+0x84>
    {
        if (timerIllegalEnterEN.fStart)
 8022170:	4b3c      	ldr	r3, [pc, #240]	; (8022264 <CheckIllegalEnterTimer+0x104>)
 8022172:	781b      	ldrb	r3, [r3, #0]
 8022174:	2b00      	cmp	r3, #0
 8022176:	d01d      	beq.n	80221b4 <CheckIllegalEnterTimer+0x54>
        {
            if (IsTimeout(&timerIllegalEnterEN, gdwTimeoutUnauthorize))
 8022178:	4b3b      	ldr	r3, [pc, #236]	; (8022268 <CheckIllegalEnterTimer+0x108>)
 802217a:	681b      	ldr	r3, [r3, #0]
 802217c:	4619      	mov	r1, r3
 802217e:	4839      	ldr	r0, [pc, #228]	; (8022264 <CheckIllegalEnterTimer+0x104>)
 8022180:	f00c fd32 	bl	802ebe8 <IsTimeout>
 8022184:	4603      	mov	r3, r0
 8022186:	2b00      	cmp	r3, #0
 8022188:	d068      	beq.n	802225c <CheckIllegalEnterTimer+0xfc>
            {
                ResetTimer(&timerIllegalEnterEN);
 802218a:	4836      	ldr	r0, [pc, #216]	; (8022264 <CheckIllegalEnterTimer+0x104>)
 802218c:	f00c fd1e 	bl	802ebcc <ResetTimer>
                gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_SET;
 8022190:	4a36      	ldr	r2, [pc, #216]	; (802226c <CheckIllegalEnterTimer+0x10c>)
 8022192:	7f13      	ldrb	r3, [r2, #28]
 8022194:	f043 0304 	orr.w	r3, r3, #4
 8022198:	7713      	strb	r3, [r2, #28]
                gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_ILLEGAL_ENTER;
 802219a:	4a34      	ldr	r2, [pc, #208]	; (802226c <CheckIllegalEnterTimer+0x10c>)
 802219c:	7a13      	ldrb	r3, [r2, #8]
 802219e:	2101      	movs	r1, #1
 80221a0:	f361 0302 	bfi	r3, r1, #0, #3
 80221a4:	7213      	strb	r3, [r2, #8]
                InhibitPass(FROM_ENTRY);
 80221a6:	2001      	movs	r0, #1
 80221a8:	f7ff fddc 	bl	8021d64 <InhibitPass>
               // PRINTL(" [EN] Inhibit Pass - Illegal Enter");
                printf(" [EN] Inhibit Pass - Illegal Enter  \n");
 80221ac:	4830      	ldr	r0, [pc, #192]	; (8022270 <CheckIllegalEnterTimer+0x110>)
 80221ae:	f006 fc55 	bl	8028a5c <printf_>
                    SetTimer(&timerIllegalEnterEX);
                }
            }
        }
    }
}
 80221b2:	e053      	b.n	802225c <CheckIllegalEnterTimer+0xfc>
            if (gGCUStatus.IllegalPass.b.nIllegal_EN == FLG_OFF)
 80221b4:	4b2d      	ldr	r3, [pc, #180]	; (802226c <CheckIllegalEnterTimer+0x10c>)
 80221b6:	7f1b      	ldrb	r3, [r3, #28]
 80221b8:	f003 0304 	and.w	r3, r3, #4
 80221bc:	b2db      	uxtb	r3, r3
 80221be:	2b00      	cmp	r3, #0
 80221c0:	d14c      	bne.n	802225c <CheckIllegalEnterTimer+0xfc>
                if (gGCUParameter.bIllegalEntryTimeout)
 80221c2:	4b2c      	ldr	r3, [pc, #176]	; (8022274 <CheckIllegalEnterTimer+0x114>)
 80221c4:	7adb      	ldrb	r3, [r3, #11]
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d048      	beq.n	802225c <CheckIllegalEnterTimer+0xfc>
                    gdwTimeoutUnauthorize = gGCUParameter.bIllegalEntryTimeout * TICK_COUNT_1SEC;
 80221ca:	4b2a      	ldr	r3, [pc, #168]	; (8022274 <CheckIllegalEnterTimer+0x114>)
 80221cc:	7adb      	ldrb	r3, [r3, #11]
 80221ce:	461a      	mov	r2, r3
 80221d0:	2364      	movs	r3, #100	; 0x64
 80221d2:	fb02 f303 	mul.w	r3, r2, r3
 80221d6:	461a      	mov	r2, r3
 80221d8:	4b23      	ldr	r3, [pc, #140]	; (8022268 <CheckIllegalEnterTimer+0x108>)
 80221da:	601a      	str	r2, [r3, #0]
                    SetTimer(&timerIllegalEnterEN);
 80221dc:	4821      	ldr	r0, [pc, #132]	; (8022264 <CheckIllegalEnterTimer+0x104>)
 80221de:	f00c fce1 	bl	802eba4 <SetTimer>
}
 80221e2:	e03b      	b.n	802225c <CheckIllegalEnterTimer+0xfc>
    else if (FROM_EXIT == dir)
 80221e4:	79fb      	ldrb	r3, [r7, #7]
 80221e6:	2b02      	cmp	r3, #2
 80221e8:	d138      	bne.n	802225c <CheckIllegalEnterTimer+0xfc>
        if (timerIllegalEnterEX.fStart)
 80221ea:	4b23      	ldr	r3, [pc, #140]	; (8022278 <CheckIllegalEnterTimer+0x118>)
 80221ec:	781b      	ldrb	r3, [r3, #0]
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	d01d      	beq.n	802222e <CheckIllegalEnterTimer+0xce>
            if (IsTimeout(&timerIllegalEnterEX, gdwTimeoutUnauthorize))
 80221f2:	4b1d      	ldr	r3, [pc, #116]	; (8022268 <CheckIllegalEnterTimer+0x108>)
 80221f4:	681b      	ldr	r3, [r3, #0]
 80221f6:	4619      	mov	r1, r3
 80221f8:	481f      	ldr	r0, [pc, #124]	; (8022278 <CheckIllegalEnterTimer+0x118>)
 80221fa:	f00c fcf5 	bl	802ebe8 <IsTimeout>
 80221fe:	4603      	mov	r3, r0
 8022200:	2b00      	cmp	r3, #0
 8022202:	d02b      	beq.n	802225c <CheckIllegalEnterTimer+0xfc>
                ResetTimer(&timerIllegalEnterEX);
 8022204:	481c      	ldr	r0, [pc, #112]	; (8022278 <CheckIllegalEnterTimer+0x118>)
 8022206:	f00c fce1 	bl	802ebcc <ResetTimer>
                gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_SET;
 802220a:	4a18      	ldr	r2, [pc, #96]	; (802226c <CheckIllegalEnterTimer+0x10c>)
 802220c:	7f13      	ldrb	r3, [r2, #28]
 802220e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022212:	7713      	strb	r3, [r2, #28]
                gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_ILLEGAL_ENTER;
 8022214:	4a15      	ldr	r2, [pc, #84]	; (802226c <CheckIllegalEnterTimer+0x10c>)
 8022216:	7a13      	ldrb	r3, [r2, #8]
 8022218:	2101      	movs	r1, #1
 802221a:	f361 1306 	bfi	r3, r1, #4, #3
 802221e:	7213      	strb	r3, [r2, #8]
                InhibitPass(FROM_EXIT);
 8022220:	2002      	movs	r0, #2
 8022222:	f7ff fd9f 	bl	8021d64 <InhibitPass>
                printf(" [EX] Inhibit Pass - Illegal Enter  \n");
 8022226:	4815      	ldr	r0, [pc, #84]	; (802227c <CheckIllegalEnterTimer+0x11c>)
 8022228:	f006 fc18 	bl	8028a5c <printf_>
}
 802222c:	e016      	b.n	802225c <CheckIllegalEnterTimer+0xfc>
            if (gGCUStatus.IllegalPass.b.nIllegal_EX == FLG_OFF)
 802222e:	4b0f      	ldr	r3, [pc, #60]	; (802226c <CheckIllegalEnterTimer+0x10c>)
 8022230:	7f1b      	ldrb	r3, [r3, #28]
 8022232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022236:	b2db      	uxtb	r3, r3
 8022238:	2b00      	cmp	r3, #0
 802223a:	d10f      	bne.n	802225c <CheckIllegalEnterTimer+0xfc>
                if (gGCUParameter.bIllegalEntryTimeout)
 802223c:	4b0d      	ldr	r3, [pc, #52]	; (8022274 <CheckIllegalEnterTimer+0x114>)
 802223e:	7adb      	ldrb	r3, [r3, #11]
 8022240:	2b00      	cmp	r3, #0
 8022242:	d00b      	beq.n	802225c <CheckIllegalEnterTimer+0xfc>
                    gdwTimeoutUnauthorize = gGCUParameter.bIllegalEntryTimeout * TICK_COUNT_1SEC;
 8022244:	4b0b      	ldr	r3, [pc, #44]	; (8022274 <CheckIllegalEnterTimer+0x114>)
 8022246:	7adb      	ldrb	r3, [r3, #11]
 8022248:	461a      	mov	r2, r3
 802224a:	2364      	movs	r3, #100	; 0x64
 802224c:	fb02 f303 	mul.w	r3, r2, r3
 8022250:	461a      	mov	r2, r3
 8022252:	4b05      	ldr	r3, [pc, #20]	; (8022268 <CheckIllegalEnterTimer+0x108>)
 8022254:	601a      	str	r2, [r3, #0]
                    SetTimer(&timerIllegalEnterEX);
 8022256:	4808      	ldr	r0, [pc, #32]	; (8022278 <CheckIllegalEnterTimer+0x118>)
 8022258:	f00c fca4 	bl	802eba4 <SetTimer>
}
 802225c:	bf00      	nop
 802225e:	3708      	adds	r7, #8
 8022260:	46bd      	mov	sp, r7
 8022262:	bd80      	pop	{r7, pc}
 8022264:	2400019c 	.word	0x2400019c
 8022268:	2400015c 	.word	0x2400015c
 802226c:	240004b0 	.word	0x240004b0
 8022270:	080302e8 	.word	0x080302e8
 8022274:	240004a0 	.word	0x240004a0
 8022278:	240001a8 	.word	0x240001a8
 802227c:	08030310 	.word	0x08030310

08022280 <SetAuthTimer>:

void SetAuthTimer(void)
{
 8022280:	b580      	push	{r7, lr}
 8022282:	af00      	add	r7, sp, #0
    gdwTimeoutAuthorize = gGCUParameter.bAuthTimeOut;
 8022284:	4b09      	ldr	r3, [pc, #36]	; (80222ac <SetAuthTimer+0x2c>)
 8022286:	791b      	ldrb	r3, [r3, #4]
 8022288:	461a      	mov	r2, r3
 802228a:	4b09      	ldr	r3, [pc, #36]	; (80222b0 <SetAuthTimer+0x30>)
 802228c:	601a      	str	r2, [r3, #0]
    gfisAuthTimeout = FALSE;
 802228e:	4b09      	ldr	r3, [pc, #36]	; (80222b4 <SetAuthTimer+0x34>)
 8022290:	2200      	movs	r2, #0
 8022292:	701a      	strb	r2, [r3, #0]
    if (gdwTimeoutAuthorize > MAX_AUTH_TIMEOUT)
 8022294:	4b06      	ldr	r3, [pc, #24]	; (80222b0 <SetAuthTimer+0x30>)
 8022296:	681b      	ldr	r3, [r3, #0]
 8022298:	2b3c      	cmp	r3, #60	; 0x3c
 802229a:	d902      	bls.n	80222a2 <SetAuthTimer+0x22>
        gdwTimeoutAuthorize = MAX_AUTH_TIMEOUT;
 802229c:	4b04      	ldr	r3, [pc, #16]	; (80222b0 <SetAuthTimer+0x30>)
 802229e:	223c      	movs	r2, #60	; 0x3c
 80222a0:	601a      	str	r2, [r3, #0]

    SetTimer(&timerAuthorize);
 80222a2:	4805      	ldr	r0, [pc, #20]	; (80222b8 <SetAuthTimer+0x38>)
 80222a4:	f00c fc7e 	bl	802eba4 <SetTimer>
}
 80222a8:	bf00      	nop
 80222aa:	bd80      	pop	{r7, pc}
 80222ac:	240004a0 	.word	0x240004a0
 80222b0:	24000154 	.word	0x24000154
 80222b4:	24000134 	.word	0x24000134
 80222b8:	24000160 	.word	0x24000160

080222bc <SetTailgatingTimer>:

void SetTailgatingTimer(void)
{
 80222bc:	b580      	push	{r7, lr}
 80222be:	af00      	add	r7, sp, #0
    SetTimer(&timerTailgatingDetection);
 80222c0:	4803      	ldr	r0, [pc, #12]	; (80222d0 <SetTailgatingTimer+0x14>)
 80222c2:	f00c fc6f 	bl	802eba4 <SetTimer>
    SetTimer(&timerTailgating);
 80222c6:	4803      	ldr	r0, [pc, #12]	; (80222d4 <SetTailgatingTimer+0x18>)
 80222c8:	f00c fc6c 	bl	802eba4 <SetTimer>
}
 80222cc:	bf00      	nop
 80222ce:	bd80      	pop	{r7, pc}
 80222d0:	24000178 	.word	0x24000178
 80222d4:	240001fc 	.word	0x240001fc

080222d8 <InitPassageMode>:

void InitPassageMode(void)
{
 80222d8:	b580      	push	{r7, lr}
 80222da:	af00      	add	r7, sp, #0
    InitPassageModeForSwing();
 80222dc:	f001 f968 	bl	80235b0 <InitPassageModeForSwing>
}
 80222e0:	bf00      	nop
 80222e2:	bd80      	pop	{r7, pc}

080222e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80222e4:	b480      	push	{r7}
 80222e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80222e8:	f3bf 8f4f 	dsb	sy
}
 80222ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80222ee:	4b06      	ldr	r3, [pc, #24]	; (8022308 <__NVIC_SystemReset+0x24>)
 80222f0:	68db      	ldr	r3, [r3, #12]
 80222f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80222f6:	4904      	ldr	r1, [pc, #16]	; (8022308 <__NVIC_SystemReset+0x24>)
 80222f8:	4b04      	ldr	r3, [pc, #16]	; (802230c <__NVIC_SystemReset+0x28>)
 80222fa:	4313      	orrs	r3, r2
 80222fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80222fe:	f3bf 8f4f 	dsb	sy
}
 8022302:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8022304:	bf00      	nop
 8022306:	e7fd      	b.n	8022304 <__NVIC_SystemReset+0x20>
 8022308:	e000ed00 	.word	0xe000ed00
 802230c:	05fa0004 	.word	0x05fa0004

08022310 <SetDoorControl>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SetDoorControl(BYTE bCMDOption)
{
 8022310:	b580      	push	{r7, lr}
 8022312:	b082      	sub	sp, #8
 8022314:	af00      	add	r7, sp, #0
 8022316:	4603      	mov	r3, r0
 8022318:	71fb      	strb	r3, [r7, #7]
	if (bCMDOption == 0)
 802231a:	79fb      	ldrb	r3, [r7, #7]
 802231c:	2b00      	cmp	r3, #0
 802231e:	d118      	bne.n	8022352 <SetDoorControl+0x42>
	{
		if (gfTestMode == TRUE && isNeedToSetSerial == TRUE)
 8022320:	4b24      	ldr	r3, [pc, #144]	; (80223b4 <SetDoorControl+0xa4>)
 8022322:	781b      	ldrb	r3, [r3, #0]
 8022324:	2b00      	cmp	r3, #0
 8022326:	d00d      	beq.n	8022344 <SetDoorControl+0x34>
 8022328:	4b23      	ldr	r3, [pc, #140]	; (80223b8 <SetDoorControl+0xa8>)
 802232a:	781b      	ldrb	r3, [r3, #0]
 802232c:	2b00      	cmp	r3, #0
 802232e:	d009      	beq.n	8022344 <SetDoorControl+0x34>
		{
			gfFreeMode = TRUE;
 8022330:	4b22      	ldr	r3, [pc, #136]	; (80223bc <SetDoorControl+0xac>)
 8022332:	2201      	movs	r2, #1
 8022334:	701a      	strb	r2, [r3, #0]
			isNeedToSetSerial = FALSE;
 8022336:	4b20      	ldr	r3, [pc, #128]	; (80223b8 <SetDoorControl+0xa8>)
 8022338:	2200      	movs	r2, #0
 802233a:	701a      	strb	r2, [r3, #0]
			Brr_SetSerialComm(TRUE);
 802233c:	2001      	movs	r0, #1
 802233e:	f7fe f9c1 	bl	80206c4 <Brr_SetSerialComm>
 8022342:	e002      	b.n	802234a <SetDoorControl+0x3a>
		}
		else
		{
			gfFreeMode = FALSE;
 8022344:	4b1d      	ldr	r3, [pc, #116]	; (80223bc <SetDoorControl+0xac>)
 8022346:	2200      	movs	r2, #0
 8022348:	701a      	strb	r2, [r3, #0]
		}
		ControlBarrier(BARRIER_CLOSE_S);
 802234a:	2003      	movs	r0, #3
 802234c:	f7ff f886 	bl	802145c <ControlBarrier>
	{
		gfTestMode = FALSE;
		gfFreeMode = FALSE;
		Brr_SetEmergency(TRUE);
	}
}
 8022350:	e02c      	b.n	80223ac <SetDoorControl+0x9c>
	else if (bCMDOption == 1)
 8022352:	79fb      	ldrb	r3, [r7, #7]
 8022354:	2b01      	cmp	r3, #1
 8022356:	d106      	bne.n	8022366 <SetDoorControl+0x56>
		gfFreeMode = TRUE;
 8022358:	4b18      	ldr	r3, [pc, #96]	; (80223bc <SetDoorControl+0xac>)
 802235a:	2201      	movs	r2, #1
 802235c:	701a      	strb	r2, [r3, #0]
		ControlBarrier(BARRIER_OPEN_FOR_EX);	
 802235e:	2001      	movs	r0, #1
 8022360:	f7ff f87c 	bl	802145c <ControlBarrier>
}
 8022364:	e022      	b.n	80223ac <SetDoorControl+0x9c>
	else if (bCMDOption == 2)
 8022366:	79fb      	ldrb	r3, [r7, #7]
 8022368:	2b02      	cmp	r3, #2
 802236a:	d106      	bne.n	802237a <SetDoorControl+0x6a>
		gfFreeMode = TRUE;
 802236c:	4b13      	ldr	r3, [pc, #76]	; (80223bc <SetDoorControl+0xac>)
 802236e:	2201      	movs	r2, #1
 8022370:	701a      	strb	r2, [r3, #0]
		ControlBarrier(BARRIER_OPEN_FOR_EN);
 8022372:	2002      	movs	r0, #2
 8022374:	f7ff f872 	bl	802145c <ControlBarrier>
}
 8022378:	e018      	b.n	80223ac <SetDoorControl+0x9c>
	else if (bCMDOption == 3)
 802237a:	79fb      	ldrb	r3, [r7, #7]
 802237c:	2b03      	cmp	r3, #3
 802237e:	d109      	bne.n	8022394 <SetDoorControl+0x84>
		gfTestMode = TRUE;
 8022380:	4b0c      	ldr	r3, [pc, #48]	; (80223b4 <SetDoorControl+0xa4>)
 8022382:	2201      	movs	r2, #1
 8022384:	701a      	strb	r2, [r3, #0]
		isNeedToSetSerial = TRUE;
 8022386:	4b0c      	ldr	r3, [pc, #48]	; (80223b8 <SetDoorControl+0xa8>)
 8022388:	2201      	movs	r2, #1
 802238a:	701a      	strb	r2, [r3, #0]
		Brr_SetEmergency(FALSE);
 802238c:	2000      	movs	r0, #0
 802238e:	f7fe f979 	bl	8020684 <Brr_SetEmergency>
}
 8022392:	e00b      	b.n	80223ac <SetDoorControl+0x9c>
	else if (bCMDOption == 4)
 8022394:	79fb      	ldrb	r3, [r7, #7]
 8022396:	2b04      	cmp	r3, #4
 8022398:	d108      	bne.n	80223ac <SetDoorControl+0x9c>
		gfTestMode = FALSE;
 802239a:	4b06      	ldr	r3, [pc, #24]	; (80223b4 <SetDoorControl+0xa4>)
 802239c:	2200      	movs	r2, #0
 802239e:	701a      	strb	r2, [r3, #0]
		gfFreeMode = FALSE;
 80223a0:	4b06      	ldr	r3, [pc, #24]	; (80223bc <SetDoorControl+0xac>)
 80223a2:	2200      	movs	r2, #0
 80223a4:	701a      	strb	r2, [r3, #0]
		Brr_SetEmergency(TRUE);
 80223a6:	2001      	movs	r0, #1
 80223a8:	f7fe f96c 	bl	8020684 <Brr_SetEmergency>
}
 80223ac:	bf00      	nop
 80223ae:	3708      	adds	r7, #8
 80223b0:	46bd      	mov	sp, r7
 80223b2:	bd80      	pop	{r7, pc}
 80223b4:	2400043e 	.word	0x2400043e
 80223b8:	24000406 	.word	0x24000406
 80223bc:	2400043d 	.word	0x2400043d

080223c0 <SendACK>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendACK(void)
{
 80223c0:	b580      	push	{r7, lr}
 80223c2:	af00      	add	r7, sp, #0
	U3_Putch(ACK);
 80223c4:	2006      	movs	r0, #6
 80223c6:	f004 f99b 	bl	8026700 <U3_Putch>
}
 80223ca:	bf00      	nop
 80223cc:	bd80      	pop	{r7, pc}

080223ce <SendNAK>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendNAK(void)
{
 80223ce:	b580      	push	{r7, lr}
 80223d0:	af00      	add	r7, sp, #0
	U3_Putch(NAK);
 80223d2:	2015      	movs	r0, #21
 80223d4:	f004 f994 	bl	8026700 <U3_Putch>
}
 80223d8:	bf00      	nop
 80223da:	bd80      	pop	{r7, pc}

080223dc <IsCommandNeedResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
bool IsCommandNeedResponse(BYTE bCMDCode)
{
 80223dc:	b480      	push	{r7}
 80223de:	b087      	sub	sp, #28
 80223e0:	af00      	add	r7, sp, #0
 80223e2:	4603      	mov	r3, r0
 80223e4:	71fb      	strb	r3, [r7, #7]
	int i;
	BYTE no_response_code[] = {
 80223e6:	4a10      	ldr	r2, [pc, #64]	; (8022428 <IsCommandNeedResponse+0x4c>)
 80223e8:	f107 0308 	add.w	r3, r7, #8
 80223ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80223ee:	c303      	stmia	r3!, {r0, r1}
 80223f0:	701a      	strb	r2, [r3, #0]
		CMD_CONTROL_BUZZER,
		CMD_SAFETY_STOP,
		CMD_WRITE_REGISTER,
		CMD_SET_UPS_COMMAND};

	for (i = 0; i < sizeof(no_response_code); i++)
 80223f2:	2300      	movs	r3, #0
 80223f4:	617b      	str	r3, [r7, #20]
 80223f6:	e00c      	b.n	8022412 <IsCommandNeedResponse+0x36>
	{
		if (no_response_code[i] == bCMDCode)
 80223f8:	f107 0208 	add.w	r2, r7, #8
 80223fc:	697b      	ldr	r3, [r7, #20]
 80223fe:	4413      	add	r3, r2
 8022400:	781b      	ldrb	r3, [r3, #0]
 8022402:	79fa      	ldrb	r2, [r7, #7]
 8022404:	429a      	cmp	r2, r3
 8022406:	d101      	bne.n	802240c <IsCommandNeedResponse+0x30>
		{
			return FALSE;
 8022408:	2300      	movs	r3, #0
 802240a:	e006      	b.n	802241a <IsCommandNeedResponse+0x3e>
	for (i = 0; i < sizeof(no_response_code); i++)
 802240c:	697b      	ldr	r3, [r7, #20]
 802240e:	3301      	adds	r3, #1
 8022410:	617b      	str	r3, [r7, #20]
 8022412:	697b      	ldr	r3, [r7, #20]
 8022414:	2b08      	cmp	r3, #8
 8022416:	d9ef      	bls.n	80223f8 <IsCommandNeedResponse+0x1c>
		}
	}

	return TRUE;
 8022418:	2301      	movs	r3, #1
}
 802241a:	4618      	mov	r0, r3
 802241c:	371c      	adds	r7, #28
 802241e:	46bd      	mov	sp, r7
 8022420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022424:	4770      	bx	lr
 8022426:	bf00      	nop
 8022428:	08030338 	.word	0x08030338

0802242c <MakeResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void MakeResponse(BYTE *pbResOption, int nOptionLen)
{
 802242c:	b580      	push	{r7, lr}
 802242e:	b082      	sub	sp, #8
 8022430:	af00      	add	r7, sp, #0
 8022432:	6078      	str	r0, [r7, #4]
 8022434:	6039      	str	r1, [r7, #0]
	GCUResponse.d.bMainSeq = GCUCommand.d.bMainSeq;
 8022436:	4b14      	ldr	r3, [pc, #80]	; (8022488 <MakeResponse+0x5c>)
 8022438:	781a      	ldrb	r2, [r3, #0]
 802243a:	4b14      	ldr	r3, [pc, #80]	; (802248c <MakeResponse+0x60>)
 802243c:	701a      	strb	r2, [r3, #0]

	if (GCUCommand.d.bMouleSeq == MAX_SEQUENCE)
 802243e:	4b12      	ldr	r3, [pc, #72]	; (8022488 <MakeResponse+0x5c>)
 8022440:	785b      	ldrb	r3, [r3, #1]
 8022442:	2bff      	cmp	r3, #255	; 0xff
 8022444:	d103      	bne.n	802244e <MakeResponse+0x22>
		GCUResponse.d.bMouleSeq = 0;
 8022446:	4b11      	ldr	r3, [pc, #68]	; (802248c <MakeResponse+0x60>)
 8022448:	2200      	movs	r2, #0
 802244a:	705a      	strb	r2, [r3, #1]
 802244c:	e005      	b.n	802245a <MakeResponse+0x2e>
	else
		GCUResponse.d.bMouleSeq = (GCUCommand.d.bMouleSeq+1);
 802244e:	4b0e      	ldr	r3, [pc, #56]	; (8022488 <MakeResponse+0x5c>)
 8022450:	785b      	ldrb	r3, [r3, #1]
 8022452:	3301      	adds	r3, #1
 8022454:	b2da      	uxtb	r2, r3
 8022456:	4b0d      	ldr	r3, [pc, #52]	; (802248c <MakeResponse+0x60>)
 8022458:	705a      	strb	r2, [r3, #1]

	GCUResponse.d.bCmdCode = GCUCommand.d.bCmdCode;
 802245a:	4b0b      	ldr	r3, [pc, #44]	; (8022488 <MakeResponse+0x5c>)
 802245c:	78da      	ldrb	r2, [r3, #3]
 802245e:	4b0b      	ldr	r3, [pc, #44]	; (802248c <MakeResponse+0x60>)
 8022460:	70da      	strb	r2, [r3, #3]
	GCUResponse.d.bDataLen = nOptionLen+sizeof(GCUResponse.d.bCmdCode);	// add command length
 8022462:	683b      	ldr	r3, [r7, #0]
 8022464:	b2db      	uxtb	r3, r3
 8022466:	3301      	adds	r3, #1
 8022468:	b2da      	uxtb	r2, r3
 802246a:	4b08      	ldr	r3, [pc, #32]	; (802248c <MakeResponse+0x60>)
 802246c:	709a      	strb	r2, [r3, #2]

	if (nOptionLen)
 802246e:	683b      	ldr	r3, [r7, #0]
 8022470:	2b00      	cmp	r3, #0
 8022472:	d005      	beq.n	8022480 <MakeResponse+0x54>
		memcpy(GCUResponse.d.mbOptionData, pbResOption, nOptionLen);
 8022474:	683b      	ldr	r3, [r7, #0]
 8022476:	461a      	mov	r2, r3
 8022478:	6879      	ldr	r1, [r7, #4]
 802247a:	4805      	ldr	r0, [pc, #20]	; (8022490 <MakeResponse+0x64>)
 802247c:	f00c fc1e 	bl	802ecbc <memcpy>
}
 8022480:	bf00      	nop
 8022482:	3708      	adds	r7, #8
 8022484:	46bd      	mov	sp, r7
 8022486:	bd80      	pop	{r7, pc}
 8022488:	24000280 	.word	0x24000280
 802248c:	24000304 	.word	0x24000304
 8022490:	24000308 	.word	0x24000308

08022494 <SendResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendResponse(void)
{
 8022494:	b580      	push	{r7, lr}
 8022496:	b084      	sub	sp, #16
 8022498:	af00      	add	r7, sp, #0
	BYTE	bBCC;
	BYTE	*pbResBuff;
	int		nResLen;

	pbResBuff	= GCUResponse.Buff;
 802249a:	4b2a      	ldr	r3, [pc, #168]	; (8022544 <SendResponse+0xb0>)
 802249c:	60bb      	str	r3, [r7, #8]
	nResLen		= GCUResponse.d.bDataLen+FRAME_HEADER_LEN;
 802249e:	4b29      	ldr	r3, [pc, #164]	; (8022544 <SendResponse+0xb0>)
 80224a0:	789b      	ldrb	r3, [r3, #2]
 80224a2:	3303      	adds	r3, #3
 80224a4:	607b      	str	r3, [r7, #4]

	// send STX
	U3_Putch(STX);
 80224a6:	2002      	movs	r0, #2
 80224a8:	f004 f92a 	bl	8026700 <U3_Putch>
	bBCC = STX;				// BCC calculation
 80224ac:	2302      	movs	r3, #2
 80224ae:	73fb      	strb	r3, [r7, #15]

	// send data
	while (nResLen--)
 80224b0:	e034      	b.n	802251c <SendResponse+0x88>
	{
		// DLE processing
		if ((*pbResBuff == STX) || (*pbResBuff == ETX) || (*pbResBuff == DLE))
 80224b2:	68bb      	ldr	r3, [r7, #8]
 80224b4:	781b      	ldrb	r3, [r3, #0]
 80224b6:	2b02      	cmp	r3, #2
 80224b8:	d007      	beq.n	80224ca <SendResponse+0x36>
 80224ba:	68bb      	ldr	r3, [r7, #8]
 80224bc:	781b      	ldrb	r3, [r3, #0]
 80224be:	2b03      	cmp	r3, #3
 80224c0:	d003      	beq.n	80224ca <SendResponse+0x36>
 80224c2:	68bb      	ldr	r3, [r7, #8]
 80224c4:	781b      	ldrb	r3, [r3, #0]
 80224c6:	2b10      	cmp	r3, #16
 80224c8:	d11b      	bne.n	8022502 <SendResponse+0x6e>
		{
			U3_Putch(DLE);
 80224ca:	2010      	movs	r0, #16
 80224cc:	f004 f918 	bl	8026700 <U3_Putch>
			bBCC ^= DLE;				// BCC calculation
 80224d0:	7bfb      	ldrb	r3, [r7, #15]
 80224d2:	f083 0310 	eor.w	r3, r3, #16
 80224d6:	73fb      	strb	r3, [r7, #15]

			U3_Putch((*pbResBuff+DLE_OP));
 80224d8:	68bb      	ldr	r3, [r7, #8]
 80224da:	781b      	ldrb	r3, [r3, #0]
 80224dc:	3340      	adds	r3, #64	; 0x40
 80224de:	b2db      	uxtb	r3, r3
 80224e0:	4618      	mov	r0, r3
 80224e2:	f004 f90d 	bl	8026700 <U3_Putch>
			bBCC ^= (*pbResBuff+DLE_OP);	// BCC calculation
 80224e6:	68bb      	ldr	r3, [r7, #8]
 80224e8:	781b      	ldrb	r3, [r3, #0]
 80224ea:	3340      	adds	r3, #64	; 0x40
 80224ec:	b2db      	uxtb	r3, r3
 80224ee:	b25a      	sxtb	r2, r3
 80224f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80224f4:	4053      	eors	r3, r2
 80224f6:	b25b      	sxtb	r3, r3
 80224f8:	73fb      	strb	r3, [r7, #15]
			pbResBuff++;
 80224fa:	68bb      	ldr	r3, [r7, #8]
 80224fc:	3301      	adds	r3, #1
 80224fe:	60bb      	str	r3, [r7, #8]
 8022500:	e00c      	b.n	802251c <SendResponse+0x88>
		}
		else
		{
			U3_Putch(*pbResBuff);
 8022502:	68bb      	ldr	r3, [r7, #8]
 8022504:	781b      	ldrb	r3, [r3, #0]
 8022506:	4618      	mov	r0, r3
 8022508:	f004 f8fa 	bl	8026700 <U3_Putch>
			bBCC ^= *pbResBuff;			// BCC calculation
 802250c:	68bb      	ldr	r3, [r7, #8]
 802250e:	781a      	ldrb	r2, [r3, #0]
 8022510:	7bfb      	ldrb	r3, [r7, #15]
 8022512:	4053      	eors	r3, r2
 8022514:	73fb      	strb	r3, [r7, #15]
			pbResBuff++;
 8022516:	68bb      	ldr	r3, [r7, #8]
 8022518:	3301      	adds	r3, #1
 802251a:	60bb      	str	r3, [r7, #8]
	while (nResLen--)
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	1e5a      	subs	r2, r3, #1
 8022520:	607a      	str	r2, [r7, #4]
 8022522:	2b00      	cmp	r3, #0
 8022524:	d1c5      	bne.n	80224b2 <SendResponse+0x1e>
		}
	}

	// send ETX
	U3_Putch(ETX);
 8022526:	2003      	movs	r0, #3
 8022528:	f004 f8ea 	bl	8026700 <U3_Putch>
	bBCC ^= ETX;
 802252c:	7bfb      	ldrb	r3, [r7, #15]
 802252e:	f083 0303 	eor.w	r3, r3, #3
 8022532:	73fb      	strb	r3, [r7, #15]

	// send BCC
	U3_Putch(bBCC);
 8022534:	7bfb      	ldrb	r3, [r7, #15]
 8022536:	4618      	mov	r0, r3
 8022538:	f004 f8e2 	bl	8026700 <U3_Putch>

#if _RES_DUMP_
	PRINT("\nRES %02X Data", GCUResponse.d.bCmdCode);
	Print2Hex("", GCUResponse.Buff, GCUResponse.d.bDataLen+FRAME_HEADER_LEN);
#endif
}
 802253c:	bf00      	nop
 802253e:	3710      	adds	r7, #16
 8022540:	46bd      	mov	sp, r7
 8022542:	bd80      	pop	{r7, pc}
 8022544:	24000304 	.word	0x24000304

08022548 <CMDSetGCUOpMode>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetGCUOpMode(void)
{
 8022548:	b580      	push	{r7, lr}
 802254a:	af00      	add	r7, sp, #0
	SetNewOpMode((T_GCU_OP_MODE *)GCUCommand.d.mbOptionData);
 802254c:	4804      	ldr	r0, [pc, #16]	; (8022560 <CMDSetGCUOpMode+0x18>)
 802254e:	f7fe fd25 	bl	8020f9c <SetNewOpMode>
	// TestCaptureUnit(TCU_TEST_STOP);
	MakeResponse(GCUCommand.d.mbOptionData, sizeof(T_GCU_OP_MODE));
 8022552:	2104      	movs	r1, #4
 8022554:	4802      	ldr	r0, [pc, #8]	; (8022560 <CMDSetGCUOpMode+0x18>)
 8022556:	f7ff ff69 	bl	802242c <MakeResponse>
}
 802255a:	bf00      	nop
 802255c:	bd80      	pop	{r7, pc}
 802255e:	bf00      	nop
 8022560:	24000284 	.word	0x24000284

08022564 <CMDGetGCUOpMode>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetGCUOpMode(void)
{
 8022564:	b580      	push	{r7, lr}
 8022566:	b082      	sub	sp, #8
 8022568:	af00      	add	r7, sp, #0
	T_GCU_OP_MODE CurMode;

	GetCurrentOpMode(&CurMode);
 802256a:	1d3b      	adds	r3, r7, #4
 802256c:	4618      	mov	r0, r3
 802256e:	f7fe fd91 	bl	8021094 <GetCurrentOpMode>

	MakeResponse((BYTE*)&CurMode, sizeof(T_GCU_OP_MODE));
 8022572:	1d3b      	adds	r3, r7, #4
 8022574:	2104      	movs	r1, #4
 8022576:	4618      	mov	r0, r3
 8022578:	f7ff ff58 	bl	802242c <MakeResponse>
}
 802257c:	bf00      	nop
 802257e:	3708      	adds	r7, #8
 8022580:	46bd      	mov	sp, r7
 8022582:	bd80      	pop	{r7, pc}

08022584 <CMDSetGCUParameter>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetGCUParameter(void)
{
 8022584:	b580      	push	{r7, lr}
 8022586:	af00      	add	r7, sp, #0
	gnParameterLength = GCUCommand.d.bDataLen-1;
 8022588:	4b09      	ldr	r3, [pc, #36]	; (80225b0 <CMDSetGCUParameter+0x2c>)
 802258a:	789b      	ldrb	r3, [r3, #2]
 802258c:	3b01      	subs	r3, #1
 802258e:	4a09      	ldr	r2, [pc, #36]	; (80225b4 <CMDSetGCUParameter+0x30>)
 8022590:	6013      	str	r3, [r2, #0]

	SetGCUParameter((T_GCU_PARAMETER*)GCUCommand.d.mbOptionData, gnParameterLength);
 8022592:	4b08      	ldr	r3, [pc, #32]	; (80225b4 <CMDSetGCUParameter+0x30>)
 8022594:	681b      	ldr	r3, [r3, #0]
 8022596:	4619      	mov	r1, r3
 8022598:	4807      	ldr	r0, [pc, #28]	; (80225b8 <CMDSetGCUParameter+0x34>)
 802259a:	f7fe fd8d 	bl	80210b8 <SetGCUParameter>
	MakeResponse(GCUCommand.d.mbOptionData, gnParameterLength);
 802259e:	4b05      	ldr	r3, [pc, #20]	; (80225b4 <CMDSetGCUParameter+0x30>)
 80225a0:	681b      	ldr	r3, [r3, #0]
 80225a2:	4619      	mov	r1, r3
 80225a4:	4804      	ldr	r0, [pc, #16]	; (80225b8 <CMDSetGCUParameter+0x34>)
 80225a6:	f7ff ff41 	bl	802242c <MakeResponse>
}
 80225aa:	bf00      	nop
 80225ac:	bd80      	pop	{r7, pc}
 80225ae:	bf00      	nop
 80225b0:	24000280 	.word	0x24000280
 80225b4:	24000004 	.word	0x24000004
 80225b8:	24000284 	.word	0x24000284

080225bc <CMDGetGCUParameter>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetGCUParameter(void)
{
 80225bc:	b580      	push	{r7, lr}
 80225be:	b084      	sub	sp, #16
 80225c0:	af00      	add	r7, sp, #0
	T_GCU_PARAMETER	GurGCUParameter;

	GetGCUParameter(&GurGCUParameter);
 80225c2:	463b      	mov	r3, r7
 80225c4:	4618      	mov	r0, r3
 80225c6:	f7fe fdc5 	bl	8021154 <GetGCUParameter>

	MakeResponse((BYTE*)&GurGCUParameter, gnParameterLength);
 80225ca:	4b05      	ldr	r3, [pc, #20]	; (80225e0 <CMDGetGCUParameter+0x24>)
 80225cc:	681a      	ldr	r2, [r3, #0]
 80225ce:	463b      	mov	r3, r7
 80225d0:	4611      	mov	r1, r2
 80225d2:	4618      	mov	r0, r3
 80225d4:	f7ff ff2a 	bl	802242c <MakeResponse>
}
 80225d8:	bf00      	nop
 80225da:	3710      	adds	r7, #16
 80225dc:	46bd      	mov	sp, r7
 80225de:	bd80      	pop	{r7, pc}
 80225e0:	24000004 	.word	0x24000004

080225e4 <CMDGetVersion>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetVersion(void)
{
 80225e4:	b580      	push	{r7, lr}
 80225e6:	af00      	add	r7, sp, #0
	Brr_SetSerialComm(TRUE);
 80225e8:	2001      	movs	r0, #1
 80225ea:	f7fe f86b 	bl	80206c4 <Brr_SetSerialComm>
	MakeResponse((BYTE*)GCU_FW_VERSION, sizeof(GCU_FW_VERSION));
 80225ee:	2108      	movs	r1, #8
 80225f0:	4802      	ldr	r0, [pc, #8]	; (80225fc <CMDGetVersion+0x18>)
 80225f2:	f7ff ff1b 	bl	802242c <MakeResponse>
}
 80225f6:	bf00      	nop
 80225f8:	bd80      	pop	{r7, pc}
 80225fa:	bf00      	nop
 80225fc:	08030344 	.word	0x08030344

08022600 <CMDSetBaudRate>:
* Return:   void
* comments: 
*******************************************************************************/

void CMDSetBaudRate(void)
{
 8022600:	b580      	push	{r7, lr}
 8022602:	b082      	sub	sp, #8
 8022604:	af00      	add	r7, sp, #0
	int  nBaudRate = -1;
 8022606:	f04f 33ff 	mov.w	r3, #4294967295
 802260a:	607b      	str	r3, [r7, #4]
	BYTE bBaudRate = GCUCommand.d.mbOptionData[0];
 802260c:	4b26      	ldr	r3, [pc, #152]	; (80226a8 <CMDSetBaudRate+0xa8>)
 802260e:	791b      	ldrb	r3, [r3, #4]
 8022610:	70fb      	strb	r3, [r7, #3]

	// check boundary value
	if (bBaudRate <= BAUD_MAX_PARAM)
 8022612:	78fb      	ldrb	r3, [r7, #3]
 8022614:	2b04      	cmp	r3, #4
 8022616:	d830      	bhi.n	802267a <CMDSetBaudRate+0x7a>
	{
		if (gbHostBaudRate != bBaudRate)
 8022618:	4b24      	ldr	r3, [pc, #144]	; (80226ac <CMDSetBaudRate+0xac>)
 802261a:	781b      	ldrb	r3, [r3, #0]
 802261c:	78fa      	ldrb	r2, [r7, #3]
 802261e:	429a      	cmp	r2, r3
 8022620:	d02b      	beq.n	802267a <CMDSetBaudRate+0x7a>
		{
			switch (bBaudRate)
 8022622:	78fb      	ldrb	r3, [r7, #3]
 8022624:	2b04      	cmp	r3, #4
 8022626:	d821      	bhi.n	802266c <CMDSetBaudRate+0x6c>
 8022628:	a201      	add	r2, pc, #4	; (adr r2, 8022630 <CMDSetBaudRate+0x30>)
 802262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802262e:	bf00      	nop
 8022630:	08022645 	.word	0x08022645
 8022634:	0802264d 	.word	0x0802264d
 8022638:	08022655 	.word	0x08022655
 802263c:	0802265d 	.word	0x0802265d
 8022640:	08022665 	.word	0x08022665
			{
			case BAUD_9600:		nBaudRate = 9600;	break;
 8022644:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8022648:	607b      	str	r3, [r7, #4]
 802264a:	e013      	b.n	8022674 <CMDSetBaudRate+0x74>
			case BAUD_19200:	nBaudRate = 19200;	break;
 802264c:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8022650:	607b      	str	r3, [r7, #4]
 8022652:	e00f      	b.n	8022674 <CMDSetBaudRate+0x74>
			case BAUD_38400:	nBaudRate = 38400;	break;
 8022654:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8022658:	607b      	str	r3, [r7, #4]
 802265a:	e00b      	b.n	8022674 <CMDSetBaudRate+0x74>
			case BAUD_57600:	nBaudRate = 57600;	break;
 802265c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8022660:	607b      	str	r3, [r7, #4]
 8022662:	e007      	b.n	8022674 <CMDSetBaudRate+0x74>
			case BAUD_115200:	nBaudRate = 115200;	break;
 8022664:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8022668:	607b      	str	r3, [r7, #4]
 802266a:	e003      	b.n	8022674 <CMDSetBaudRate+0x74>
			default:			bBaudRate = gbHostBaudRate;	break;	// In case of invalid baud rate
 802266c:	4b0f      	ldr	r3, [pc, #60]	; (80226ac <CMDSetBaudRate+0xac>)
 802266e:	781b      	ldrb	r3, [r3, #0]
 8022670:	70fb      	strb	r3, [r7, #3]
 8022672:	bf00      	nop
			}

			gbHostBaudRate = bBaudRate;
 8022674:	4a0d      	ldr	r2, [pc, #52]	; (80226ac <CMDSetBaudRate+0xac>)
 8022676:	78fb      	ldrb	r3, [r7, #3]
 8022678:	7013      	strb	r3, [r2, #0]
		}
	}

	MakeResponse(&gbHostBaudRate, sizeof(BYTE));
 802267a:	2101      	movs	r1, #1
 802267c:	480b      	ldr	r0, [pc, #44]	; (80226ac <CMDSetBaudRate+0xac>)
 802267e:	f7ff fed5 	bl	802242c <MakeResponse>
	SendResponse();
 8022682:	f7ff ff07 	bl	8022494 <SendResponse>

	HAL_Delay(100);
 8022686:	2064      	movs	r0, #100	; 0x64
 8022688:	f007 f81e 	bl	80296c8 <HAL_Delay>

	//delay_ms(100);
	
	if (nBaudRate != -1)	// if baud rate is changed
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022692:	d005      	beq.n	80226a0 <CMDSetBaudRate+0xa0>
	{
		//UARTxConfig(UART2, (u32)nBaudRate);
		USART3_UART_Init((u32)nBaudRate);
 8022694:	6878      	ldr	r0, [r7, #4]
 8022696:	f003 f97f 	bl	8025998 <USART3_UART_Init>
		//delay_ms(100);
		HAL_Delay(100);
 802269a:	2064      	movs	r0, #100	; 0x64
 802269c:	f007 f814 	bl	80296c8 <HAL_Delay>
	}
}
 80226a0:	bf00      	nop
 80226a2:	3708      	adds	r7, #8
 80226a4:	46bd      	mov	sp, r7
 80226a6:	bd80      	pop	{r7, pc}
 80226a8:	24000280 	.word	0x24000280
 80226ac:	24000000 	.word	0x24000000

080226b0 <CMDResetGCU>:
* Return:   void
* comments: 
*******************************************************************************/

void CMDResetGCU(void)
{
 80226b0:	b580      	push	{r7, lr}
 80226b2:	af00      	add	r7, sp, #0
	MakeResponse(NULL, 0);
 80226b4:	2100      	movs	r1, #0
 80226b6:	2000      	movs	r0, #0
 80226b8:	f7ff feb8 	bl	802242c <MakeResponse>
	SendResponse();
 80226bc:	f7ff feea 	bl	8022494 <SendResponse>
	HAL_Delay(50);
 80226c0:	2032      	movs	r0, #50	; 0x32
 80226c2:	f007 f801 	bl	80296c8 <HAL_Delay>
	NVIC_SystemReset();
 80226c6:	f7ff fe0d 	bl	80222e4 <__NVIC_SystemReset>
	...

080226cc <CMDAuthorizePass>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDAuthorizePass(void)
{
 80226cc:	b580      	push	{r7, lr}
 80226ce:	b082      	sub	sp, #8
 80226d0:	af00      	add	r7, sp, #0
	T_CMD_AUTH_PASS *pcmdAuthPass = (T_CMD_AUTH_PASS*)GCUCommand.d.mbOptionData;
 80226d2:	4b27      	ldr	r3, [pc, #156]	; (8022770 <CMDAuthorizePass+0xa4>)
 80226d4:	607b      	str	r3, [r7, #4]
	T_GCU_AUTH_COUNT resAuthCount;

	if (pcmdAuthPass->bAuthCount == 0)
 80226d6:	687b      	ldr	r3, [r7, #4]
 80226d8:	785b      	ldrb	r3, [r3, #1]
 80226da:	2b00      	cmp	r3, #0
 80226dc:	d114      	bne.n	8022708 <CMDAuthorizePass+0x3c>
	{		
		//PRINTL(" [CMDAuthorizePass] zero count! - A:%d, D:%d", pcmdAuthPass->bAuthCount, pcmdAuthPass->bDirection);
		//PRINTL(" [CMDAuthorizePass] org data. - A:%d, D:%d", GCUCommand.d.mbOptionData[1], GCUCommand.d.mbOptionData[0]);

		printf(" [CMDAuthorizePass] zero count! - A:%d, D:%d \n", pcmdAuthPass->bAuthCount, pcmdAuthPass->bDirection);
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	785b      	ldrb	r3, [r3, #1]
 80226e2:	4619      	mov	r1, r3
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	781b      	ldrb	r3, [r3, #0]
 80226e8:	461a      	mov	r2, r3
 80226ea:	4822      	ldr	r0, [pc, #136]	; (8022774 <CMDAuthorizePass+0xa8>)
 80226ec:	f006 f9b6 	bl	8028a5c <printf_>
		printf(" [CMDAuthorizePass] org data. - A:%d, D:%d \n", GCUCommand.d.mbOptionData[1], GCUCommand.d.mbOptionData[0]);
 80226f0:	4b21      	ldr	r3, [pc, #132]	; (8022778 <CMDAuthorizePass+0xac>)
 80226f2:	795b      	ldrb	r3, [r3, #5]
 80226f4:	4619      	mov	r1, r3
 80226f6:	4b20      	ldr	r3, [pc, #128]	; (8022778 <CMDAuthorizePass+0xac>)
 80226f8:	791b      	ldrb	r3, [r3, #4]
 80226fa:	461a      	mov	r2, r3
 80226fc:	481f      	ldr	r0, [pc, #124]	; (802277c <CMDAuthorizePass+0xb0>)
 80226fe:	f006 f9ad 	bl	8028a5c <printf_>
		pcmdAuthPass->bAuthCount = 1;
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	2201      	movs	r2, #1
 8022706:	705a      	strb	r2, [r3, #1]
	}

	IncreaseAuthCount(pcmdAuthPass->bDirection);
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	781b      	ldrb	r3, [r3, #0]
 802270c:	4618      	mov	r0, r3
 802270e:	f7fe fe0b 	bl	8021328 <IncreaseAuthCount>

	if (pcmdAuthPass->bDirection == FROM_ENTRY)
 8022712:	687b      	ldr	r3, [r7, #4]
 8022714:	781b      	ldrb	r3, [r3, #0]
 8022716:	2b01      	cmp	r3, #1
 8022718:	d10e      	bne.n	8022738 <CMDAuthorizePass+0x6c>
	{
		ControlIndicator(pcmdAuthPass->bLamp, LAMP_OFF, pcmdAuthPass->bDuration, FALSE);
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	7898      	ldrb	r0, [r3, #2]
 802271e:	687b      	ldr	r3, [r7, #4]
 8022720:	791a      	ldrb	r2, [r3, #4]
 8022722:	2300      	movs	r3, #0
 8022724:	2100      	movs	r1, #0
 8022726:	f7fe ff87 	bl	8021638 <ControlIndicator>
		ControlDirectionLED(pcmdAuthPass->bLampBar, DIR_RED);
 802272a:	687b      	ldr	r3, [r7, #4]
 802272c:	78db      	ldrb	r3, [r3, #3]
 802272e:	2102      	movs	r1, #2
 8022730:	4618      	mov	r0, r3
 8022732:	f7fe ff25 	bl	8021580 <ControlDirectionLED>
 8022736:	e00d      	b.n	8022754 <CMDAuthorizePass+0x88>
	}
	else
	{
		ControlIndicator(LAMP_OFF, pcmdAuthPass->bLamp, pcmdAuthPass->bDuration, FALSE);
 8022738:	687b      	ldr	r3, [r7, #4]
 802273a:	7899      	ldrb	r1, [r3, #2]
 802273c:	687b      	ldr	r3, [r7, #4]
 802273e:	791a      	ldrb	r2, [r3, #4]
 8022740:	2300      	movs	r3, #0
 8022742:	2000      	movs	r0, #0
 8022744:	f7fe ff78 	bl	8021638 <ControlIndicator>
		ControlDirectionLED(DIR_RED, pcmdAuthPass->bLampBar);
 8022748:	687b      	ldr	r3, [r7, #4]
 802274a:	78db      	ldrb	r3, [r3, #3]
 802274c:	4619      	mov	r1, r3
 802274e:	2002      	movs	r0, #2
 8022750:	f7fe ff16 	bl	8021580 <ControlDirectionLED>
	}

	GetAuthCount(&resAuthCount);
 8022754:	463b      	mov	r3, r7
 8022756:	4618      	mov	r0, r3
 8022758:	f7fe fdd0 	bl	80212fc <GetAuthCount>
	MakeResponse((BYTE*)&resAuthCount, sizeof(T_GCU_AUTH_COUNT));
 802275c:	463b      	mov	r3, r7
 802275e:	2102      	movs	r1, #2
 8022760:	4618      	mov	r0, r3
 8022762:	f7ff fe63 	bl	802242c <MakeResponse>
}
 8022766:	bf00      	nop
 8022768:	3708      	adds	r7, #8
 802276a:	46bd      	mov	sp, r7
 802276c:	bd80      	pop	{r7, pc}
 802276e:	bf00      	nop
 8022770:	24000284 	.word	0x24000284
 8022774:	0803034c 	.word	0x0803034c
 8022778:	24000280 	.word	0x24000280
 802277c:	0803037c 	.word	0x0803037c

08022780 <CMDClearAuthorization>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDClearAuthorization(void)
{
 8022780:	b580      	push	{r7, lr}
 8022782:	b082      	sub	sp, #8
 8022784:	af00      	add	r7, sp, #0
	T_GCU_AUTH_COUNT resAuthCount;

	ClearAuthCount();
 8022786:	f7fe fe3d 	bl	8021404 <ClearAuthCount>
	GetAuthCount(&resAuthCount);
 802278a:	1d3b      	adds	r3, r7, #4
 802278c:	4618      	mov	r0, r3
 802278e:	f7fe fdb5 	bl	80212fc <GetAuthCount>

	MakeResponse((BYTE*)&resAuthCount, sizeof(T_GCU_AUTH_COUNT));
 8022792:	1d3b      	adds	r3, r7, #4
 8022794:	2102      	movs	r1, #2
 8022796:	4618      	mov	r0, r3
 8022798:	f7ff fe48 	bl	802242c <MakeResponse>
}
 802279c:	bf00      	nop
 802279e:	3708      	adds	r7, #8
 80227a0:	46bd      	mov	sp, r7
 80227a2:	bd80      	pop	{r7, pc}

080227a4 <CMDGetStatus>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetStatus(void)
{
 80227a4:	b580      	push	{r7, lr}
 80227a6:	b086      	sub	sp, #24
 80227a8:	af00      	add	r7, sp, #0
	T_GCU_STATUS_RES GurStatus;

	GetGCUStatus(&GurStatus);
 80227aa:	1d3b      	adds	r3, r7, #4
 80227ac:	4618      	mov	r0, r3
 80227ae:	f7fe fce9 	bl	8021184 <GetGCUStatus>

	MakeResponse((BYTE*)&GurStatus, sizeof(T_GCU_STATUS_RES));
 80227b2:	1d3b      	adds	r3, r7, #4
 80227b4:	2112      	movs	r1, #18
 80227b6:	4618      	mov	r0, r3
 80227b8:	f7ff fe38 	bl	802242c <MakeResponse>
}
 80227bc:	bf00      	nop
 80227be:	3718      	adds	r7, #24
 80227c0:	46bd      	mov	sp, r7
 80227c2:	bd80      	pop	{r7, pc}

080227c4 <CMDGetSensorSwitch>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetSensorSwitch(void)
{
 80227c4:	b480      	push	{r7}
 80227c6:	af00      	add	r7, sp, #0
	// not used
}
 80227c8:	bf00      	nop
 80227ca:	46bd      	mov	sp, r7
 80227cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227d0:	4770      	bx	lr
	...

080227d4 <CMDControlAllLED>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlAllLED(void)
{
 80227d4:	b580      	push	{r7, lr}
 80227d6:	b082      	sub	sp, #8
 80227d8:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_ALL_LED *pcmdControlAll = (T_CMD_CONTROL_ALL_LED *)GCUCommand.d.mbOptionData;
 80227da:	4b15      	ldr	r3, [pc, #84]	; (8022830 <CMDControlAllLED+0x5c>)
 80227dc:	607b      	str	r3, [r7, #4]

	if (pcmdControlAll->test_flag == SET)
 80227de:	687b      	ldr	r3, [r7, #4]
 80227e0:	781b      	ldrb	r3, [r3, #0]
 80227e2:	2b01      	cmp	r3, #1
 80227e4:	d110      	bne.n	8022808 <CMDControlAllLED+0x34>
	{
		ControlStatusLED(pcmdControlAll->bLamp_EN, pcmdControlAll->bLamp_EX);
 80227e6:	687b      	ldr	r3, [r7, #4]
 80227e8:	785a      	ldrb	r2, [r3, #1]
 80227ea:	687b      	ldr	r3, [r7, #4]
 80227ec:	789b      	ldrb	r3, [r3, #2]
 80227ee:	4619      	mov	r1, r3
 80227f0:	4610      	mov	r0, r2
 80227f2:	f7fe fef9 	bl	80215e8 <ControlStatusLED>
		ControlOverheadDisplay(pcmdControlAll->bOverhead_EN, pcmdControlAll->bOverhead_EX);
 80227f6:	687b      	ldr	r3, [r7, #4]
 80227f8:	795a      	ldrb	r2, [r3, #5]
 80227fa:	687b      	ldr	r3, [r7, #4]
 80227fc:	799b      	ldrb	r3, [r3, #6]
 80227fe:	4619      	mov	r1, r3
 8022800:	4610      	mov	r0, r2
 8022802:	f7fe ff05 	bl	8021610 <ControlOverheadDisplay>
 8022806:	e007      	b.n	8022818 <CMDControlAllLED+0x44>
	}
	else
	{
		ControlDirectionLED(pcmdControlAll->bLamp_EN, pcmdControlAll->bLamp_EN);
 8022808:	687b      	ldr	r3, [r7, #4]
 802280a:	785a      	ldrb	r2, [r3, #1]
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	785b      	ldrb	r3, [r3, #1]
 8022810:	4619      	mov	r1, r3
 8022812:	4610      	mov	r0, r2
 8022814:	f7fe feb4 	bl	8021580 <ControlDirectionLED>
	}

	ControlIndicator(pcmdControlAll->bIndicator_EN, pcmdControlAll->bIndicator_EX, 0, FALSE);	
 8022818:	687b      	ldr	r3, [r7, #4]
 802281a:	78d8      	ldrb	r0, [r3, #3]
 802281c:	687b      	ldr	r3, [r7, #4]
 802281e:	7919      	ldrb	r1, [r3, #4]
 8022820:	2300      	movs	r3, #0
 8022822:	2200      	movs	r2, #0
 8022824:	f7fe ff08 	bl	8021638 <ControlIndicator>
}
 8022828:	bf00      	nop
 802282a:	3708      	adds	r7, #8
 802282c:	46bd      	mov	sp, r7
 802282e:	bd80      	pop	{r7, pc}
 8022830:	24000284 	.word	0x24000284

08022834 <CMDControlFlapDoor>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlFlapDoor(void)
{
 8022834:	b580      	push	{r7, lr}
 8022836:	af00      	add	r7, sp, #0
	SetDoorControl(GCUCommand.d.mbOptionData[0]);
 8022838:	4b03      	ldr	r3, [pc, #12]	; (8022848 <CMDControlFlapDoor+0x14>)
 802283a:	791b      	ldrb	r3, [r3, #4]
 802283c:	4618      	mov	r0, r3
 802283e:	f7ff fd67 	bl	8022310 <SetDoorControl>
}
 8022842:	bf00      	nop
 8022844:	bd80      	pop	{r7, pc}
 8022846:	bf00      	nop
 8022848:	24000280 	.word	0x24000280

0802284c <CMDControlIndicator>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlIndicator(void)
{
 802284c:	b580      	push	{r7, lr}
 802284e:	b082      	sub	sp, #8
 8022850:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_INDICATOR *pcmdIndicator = (T_CMD_CONTROL_INDICATOR *)GCUCommand.d.mbOptionData;
 8022852:	4b07      	ldr	r3, [pc, #28]	; (8022870 <CMDControlIndicator+0x24>)
 8022854:	607b      	str	r3, [r7, #4]
	ControlIndicator4Test(pcmdIndicator->bIndicator_EN, pcmdIndicator->bIndicator_EX);	
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	781a      	ldrb	r2, [r3, #0]
 802285a:	687b      	ldr	r3, [r7, #4]
 802285c:	785b      	ldrb	r3, [r3, #1]
 802285e:	4619      	mov	r1, r3
 8022860:	4610      	mov	r0, r2
 8022862:	f7fe ff5d 	bl	8021720 <ControlIndicator4Test>
}
 8022866:	bf00      	nop
 8022868:	3708      	adds	r7, #8
 802286a:	46bd      	mov	sp, r7
 802286c:	bd80      	pop	{r7, pc}
 802286e:	bf00      	nop
 8022870:	24000284 	.word	0x24000284

08022874 <CMDControlLamp>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlLamp(void)
{
 8022874:	b580      	push	{r7, lr}
 8022876:	b082      	sub	sp, #8
 8022878:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_LAMP *pcmdLamp = (T_CMD_CONTROL_LAMP *)GCUCommand.d.mbOptionData;
 802287a:	4b07      	ldr	r3, [pc, #28]	; (8022898 <CMDControlLamp+0x24>)
 802287c:	607b      	str	r3, [r7, #4]
	ControlStatusLED(pcmdLamp->bLamp_EN, pcmdLamp->bLamp_EX);
 802287e:	687b      	ldr	r3, [r7, #4]
 8022880:	781a      	ldrb	r2, [r3, #0]
 8022882:	687b      	ldr	r3, [r7, #4]
 8022884:	785b      	ldrb	r3, [r3, #1]
 8022886:	4619      	mov	r1, r3
 8022888:	4610      	mov	r0, r2
 802288a:	f7fe fead 	bl	80215e8 <ControlStatusLED>
}
 802288e:	bf00      	nop
 8022890:	3708      	adds	r7, #8
 8022892:	46bd      	mov	sp, r7
 8022894:	bd80      	pop	{r7, pc}
 8022896:	bf00      	nop
 8022898:	24000284 	.word	0x24000284

0802289c <CMDControlBuzzer>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlBuzzer(void)
{
 802289c:	b580      	push	{r7, lr}
 802289e:	b082      	sub	sp, #8
 80228a0:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_BUZZER *pcmdBuzzer = (T_CMD_CONTROL_BUZZER *)GCUCommand.d.mbOptionData;
 80228a2:	4b1e      	ldr	r3, [pc, #120]	; (802291c <CMDControlBuzzer+0x80>)
 80228a4:	607b      	str	r3, [r7, #4]

	if (GCUCommand.d.bDataLen == (sizeof(T_CMD_CONTROL_BUZZER)+1))
 80228a6:	4b1e      	ldr	r3, [pc, #120]	; (8022920 <CMDControlBuzzer+0x84>)
 80228a8:	789b      	ldrb	r3, [r3, #2]
 80228aa:	2b04      	cmp	r3, #4
 80228ac:	d12a      	bne.n	8022904 <CMDControlBuzzer+0x68>
	{
		if (pcmdBuzzer->bBuzzerNo & MASK_TEST_BUZZER_MAIN)
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	789b      	ldrb	r3, [r3, #2]
 80228b2:	f003 0301 	and.w	r3, r3, #1
 80228b6:	2b00      	cmp	r3, #0
 80228b8:	d007      	beq.n	80228ca <CMDControlBuzzer+0x2e>
			ControlBuzzer(BUZZER_NO_MAIN, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 80228ba:	687b      	ldr	r3, [r7, #4]
 80228bc:	7819      	ldrb	r1, [r3, #0]
 80228be:	687b      	ldr	r3, [r7, #4]
 80228c0:	785b      	ldrb	r3, [r3, #1]
 80228c2:	461a      	mov	r2, r3
 80228c4:	2000      	movs	r0, #0
 80228c6:	f7fe fe01 	bl	80214cc <ControlBuzzer>

		if (pcmdBuzzer->bBuzzerNo & MASK_TEST_BUZZER_DIRA)
 80228ca:	687b      	ldr	r3, [r7, #4]
 80228cc:	789b      	ldrb	r3, [r3, #2]
 80228ce:	f003 0302 	and.w	r3, r3, #2
 80228d2:	2b00      	cmp	r3, #0
 80228d4:	d007      	beq.n	80228e6 <CMDControlBuzzer+0x4a>
			ControlBuzzer(BUZZER_NO_DIRA, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 80228d6:	687b      	ldr	r3, [r7, #4]
 80228d8:	7819      	ldrb	r1, [r3, #0]
 80228da:	687b      	ldr	r3, [r7, #4]
 80228dc:	785b      	ldrb	r3, [r3, #1]
 80228de:	461a      	mov	r2, r3
 80228e0:	2002      	movs	r0, #2
 80228e2:	f7fe fdf3 	bl	80214cc <ControlBuzzer>

		if (pcmdBuzzer->bBuzzerNo & MASK_TEST_BUZZER_DIRB)
 80228e6:	687b      	ldr	r3, [r7, #4]
 80228e8:	789b      	ldrb	r3, [r3, #2]
 80228ea:	f003 0304 	and.w	r3, r3, #4
 80228ee:	2b00      	cmp	r3, #0
 80228f0:	d010      	beq.n	8022914 <CMDControlBuzzer+0x78>
			ControlBuzzer(BUZZER_NO_DIRB, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 80228f2:	687b      	ldr	r3, [r7, #4]
 80228f4:	7819      	ldrb	r1, [r3, #0]
 80228f6:	687b      	ldr	r3, [r7, #4]
 80228f8:	785b      	ldrb	r3, [r3, #1]
 80228fa:	461a      	mov	r2, r3
 80228fc:	2001      	movs	r0, #1
 80228fe:	f7fe fde5 	bl	80214cc <ControlBuzzer>
	else
	{
		ControlBuzzer(BUZZER_NO_MAIN, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
	}
	
}
 8022902:	e007      	b.n	8022914 <CMDControlBuzzer+0x78>
		ControlBuzzer(BUZZER_NO_MAIN, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 8022904:	687b      	ldr	r3, [r7, #4]
 8022906:	7819      	ldrb	r1, [r3, #0]
 8022908:	687b      	ldr	r3, [r7, #4]
 802290a:	785b      	ldrb	r3, [r3, #1]
 802290c:	461a      	mov	r2, r3
 802290e:	2000      	movs	r0, #0
 8022910:	f7fe fddc 	bl	80214cc <ControlBuzzer>
}
 8022914:	bf00      	nop
 8022916:	3708      	adds	r7, #8
 8022918:	46bd      	mov	sp, r7
 802291a:	bd80      	pop	{r7, pc}
 802291c:	24000284 	.word	0x24000284
 8022920:	24000280 	.word	0x24000280

08022924 <CMDSafetyStop>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSafetyStop(void)
{
 8022924:	b480      	push	{r7}
 8022926:	b083      	sub	sp, #12
 8022928:	af00      	add	r7, sp, #0
	T_CMD_SAFETY_STOP *pcmdSafetyStop = (T_CMD_SAFETY_STOP *)GCUCommand.d.mbOptionData;
 802292a:	4b08      	ldr	r3, [pc, #32]	; (802294c <CMDSafetyStop+0x28>)
 802292c:	607b      	str	r3, [r7, #4]
	gfAISafetyOn = pcmdSafetyStop->bSafety;
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	781b      	ldrb	r3, [r3, #0]
 8022932:	2b00      	cmp	r3, #0
 8022934:	bf14      	ite	ne
 8022936:	2301      	movne	r3, #1
 8022938:	2300      	moveq	r3, #0
 802293a:	b2da      	uxtb	r2, r3
 802293c:	4b04      	ldr	r3, [pc, #16]	; (8022950 <CMDSafetyStop+0x2c>)
 802293e:	701a      	strb	r2, [r3, #0]
}
 8022940:	bf00      	nop
 8022942:	370c      	adds	r7, #12
 8022944:	46bd      	mov	sp, r7
 8022946:	f85d 7b04 	ldr.w	r7, [sp], #4
 802294a:	4770      	bx	lr
 802294c:	24000284 	.word	0x24000284
 8022950:	2400043f 	.word	0x2400043f

08022954 <CMDWriteRegister>:
* Return:   void
* comments: 
*******************************************************************************/

void CMDWriteRegister(void)
{
 8022954:	b580      	push	{r7, lr}
 8022956:	b084      	sub	sp, #16
 8022958:	af00      	add	r7, sp, #0
	BYTE	*pbControl = (BYTE *)GCUCommand.d.mbOptionData;
 802295a:	4bb6      	ldr	r3, [pc, #728]	; (8022c34 <CMDWriteRegister+0x2e0>)
 802295c:	60fb      	str	r3, [r7, #12]
	BYTE	dwPrimaryLEDValue 		= 0;
 802295e:	2300      	movs	r3, #0
 8022960:	72fb      	strb	r3, [r7, #11]
	BYTE	dwSecondaryLEDValue 	= 0;
 8022962:	2300      	movs	r3, #0
 8022964:	72bb      	strb	r3, [r7, #10]
	BYTE	dwBarrierValue 			= 0;
 8022966:	2300      	movs	r3, #0
 8022968:	727b      	strb	r3, [r7, #9]
	BYTE	dwScadaValue 			= 0;
 802296a:	2300      	movs	r3, #0
 802296c:	723b      	strb	r3, [r7, #8]
	BYTE	dwUPSCHKValue 			= 0;
 802296e:	2300      	movs	r3, #0
 8022970:	71fb      	strb	r3, [r7, #7]
	BYTE	dwUPSSHDNKValue 		= 0;
 8022972:	2300      	movs	r3, #0
 8022974:	71bb      	strb	r3, [r7, #6]

	printf("pbControl[0] = [%d] \n",pbControl[0]);        //Barrier, S_EMG = [0x80], S_DIR = [0x40], S_BRAKE = [0x20], S_OPEN = [0x10], P_EMG = [0x08], P_DIR = [0x04], P_BRAKE = [0x02], P_OPEN = [0x01]
 8022976:	68fb      	ldr	r3, [r7, #12]
 8022978:	781b      	ldrb	r3, [r3, #0]
 802297a:	4619      	mov	r1, r3
 802297c:	48ae      	ldr	r0, [pc, #696]	; (8022c38 <CMDWriteRegister+0x2e4>)
 802297e:	f006 f86d 	bl	8028a5c <printf_>
	printf("pbControl[1] = [%d] \n",pbControl[1]);		//SCADA OUT, NXO = [0x8], TDO = [0x4], EBO = [0x2], OOS = [0x1]
 8022982:	68fb      	ldr	r3, [r7, #12]
 8022984:	3301      	adds	r3, #1
 8022986:	781b      	ldrb	r3, [r3, #0]
 8022988:	4619      	mov	r1, r3
 802298a:	48ac      	ldr	r0, [pc, #688]	; (8022c3c <CMDWriteRegister+0x2e8>)
 802298c:	f006 f866 	bl	8028a5c <printf_>
	printf("pbControl[2] = [%d] \n",pbControl[2]);
 8022990:	68fb      	ldr	r3, [r7, #12]
 8022992:	3302      	adds	r3, #2
 8022994:	781b      	ldrb	r3, [r3, #0]
 8022996:	4619      	mov	r1, r3
 8022998:	48a9      	ldr	r0, [pc, #676]	; (8022c40 <CMDWriteRegister+0x2ec>)
 802299a:	f006 f85f 	bl	8028a5c <printf_>
	printf("pbControl[3] = [%d] \n",pbControl[3]);		//jig master dir green = [0x4], red = [0x2], yellow = [0x1]
 802299e:	68fb      	ldr	r3, [r7, #12]
 80229a0:	3303      	adds	r3, #3
 80229a2:	781b      	ldrb	r3, [r3, #0]
 80229a4:	4619      	mov	r1, r3
 80229a6:	48a7      	ldr	r0, [pc, #668]	; (8022c44 <CMDWriteRegister+0x2f0>)
 80229a8:	f006 f858 	bl	8028a5c <printf_>
	printf("pbControl[4] = [%d] \n",pbControl[4]);		//jig slave dir green = [0x4], red = [0x2], yellow = [0x1]
 80229ac:	68fb      	ldr	r3, [r7, #12]
 80229ae:	3304      	adds	r3, #4
 80229b0:	781b      	ldrb	r3, [r3, #0]
 80229b2:	4619      	mov	r1, r3
 80229b4:	48a4      	ldr	r0, [pc, #656]	; (8022c48 <CMDWriteRegister+0x2f4>)
 80229b6:	f006 f851 	bl	8028a5c <printf_>
	printf("pbControl[5] = [%d] \n",pbControl[5]);
 80229ba:	68fb      	ldr	r3, [r7, #12]
 80229bc:	3305      	adds	r3, #5
 80229be:	781b      	ldrb	r3, [r3, #0]
 80229c0:	4619      	mov	r1, r3
 80229c2:	48a2      	ldr	r0, [pc, #648]	; (8022c4c <CMDWriteRegister+0x2f8>)
 80229c4:	f006 f84a 	bl	8028a5c <printf_>
	printf("pbControl[6] = [%d] \n",pbControl[6]);		//jig master alm green = [0x4], blue = [0x2], red = [0x1]
 80229c8:	68fb      	ldr	r3, [r7, #12]
 80229ca:	3306      	adds	r3, #6
 80229cc:	781b      	ldrb	r3, [r3, #0]
 80229ce:	4619      	mov	r1, r3
 80229d0:	489f      	ldr	r0, [pc, #636]	; (8022c50 <CMDWriteRegister+0x2fc>)
 80229d2:	f006 f843 	bl	8028a5c <printf_>
	printf("pbControl[7] = [%d] \n",pbControl[7]);		//jig slave alm green = [0x4], blue = [0x2], red = [0x1]
 80229d6:	68fb      	ldr	r3, [r7, #12]
 80229d8:	3307      	adds	r3, #7
 80229da:	781b      	ldrb	r3, [r3, #0]
 80229dc:	4619      	mov	r1, r3
 80229de:	489d      	ldr	r0, [pc, #628]	; (8022c54 <CMDWriteRegister+0x300>)
 80229e0:	f006 f83c 	bl	8028a5c <printf_>
	printf("pbControl[8] = [%d] \n",pbControl[8]);		//default 0x33 SHDN button 0x01 CHK 0x02 reverse
 80229e4:	68fb      	ldr	r3, [r7, #12]
 80229e6:	3308      	adds	r3, #8
 80229e8:	781b      	ldrb	r3, [r3, #0]
 80229ea:	4619      	mov	r1, r3
 80229ec:	489a      	ldr	r0, [pc, #616]	; (8022c58 <CMDWriteRegister+0x304>)
 80229ee:	f006 f835 	bl	8028a5c <printf_>

	// Barrier - Primary
	dwBarrierValue =  (pbControl[0] & 0x01)? 0x01: 0x00;			// output Primary Barrier - Open/Close
 80229f2:	68fb      	ldr	r3, [r7, #12]
 80229f4:	781b      	ldrb	r3, [r3, #0]
 80229f6:	f003 0301 	and.w	r3, r3, #1
 80229fa:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x02)? 0x02: 0x00;			// output Primary Barrier - Emg(Free)
 80229fc:	68fb      	ldr	r3, [r7, #12]
 80229fe:	781b      	ldrb	r3, [r3, #0]
 8022a00:	b25b      	sxtb	r3, r3
 8022a02:	f003 0302 	and.w	r3, r3, #2
 8022a06:	b25a      	sxtb	r2, r3
 8022a08:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a0c:	4313      	orrs	r3, r2
 8022a0e:	b25b      	sxtb	r3, r3
 8022a10:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x04)? 0x04: 0x00;			// output Primary Barrier - Direction
 8022a12:	68fb      	ldr	r3, [r7, #12]
 8022a14:	781b      	ldrb	r3, [r3, #0]
 8022a16:	b25b      	sxtb	r3, r3
 8022a18:	f003 0304 	and.w	r3, r3, #4
 8022a1c:	b25a      	sxtb	r2, r3
 8022a1e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a22:	4313      	orrs	r3, r2
 8022a24:	b25b      	sxtb	r3, r3
 8022a26:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x08)? 0x08: 0x00;			// output Primary Barrier - Brake(Stop)
 8022a28:	68fb      	ldr	r3, [r7, #12]
 8022a2a:	781b      	ldrb	r3, [r3, #0]
 8022a2c:	b25b      	sxtb	r3, r3
 8022a2e:	f003 0308 	and.w	r3, r3, #8
 8022a32:	b25a      	sxtb	r2, r3
 8022a34:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a38:	4313      	orrs	r3, r2
 8022a3a:	b25b      	sxtb	r3, r3
 8022a3c:	727b      	strb	r3, [r7, #9]

	// Barrier - Secondary
	dwBarrierValue |= (pbControl[0] & 0x10)? 0x10: 0x00;			// output Secondary Barrier - Open/Close
 8022a3e:	68fb      	ldr	r3, [r7, #12]
 8022a40:	781b      	ldrb	r3, [r3, #0]
 8022a42:	b25b      	sxtb	r3, r3
 8022a44:	f003 0310 	and.w	r3, r3, #16
 8022a48:	b25a      	sxtb	r2, r3
 8022a4a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a4e:	4313      	orrs	r3, r2
 8022a50:	b25b      	sxtb	r3, r3
 8022a52:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x20)? 0x20: 0x00;			// output Secondary Barrier - Emg(Free)
 8022a54:	68fb      	ldr	r3, [r7, #12]
 8022a56:	781b      	ldrb	r3, [r3, #0]
 8022a58:	b25b      	sxtb	r3, r3
 8022a5a:	f003 0320 	and.w	r3, r3, #32
 8022a5e:	b25a      	sxtb	r2, r3
 8022a60:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a64:	4313      	orrs	r3, r2
 8022a66:	b25b      	sxtb	r3, r3
 8022a68:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x40)? 0x40: 0x00;			// output Secondary Barrier - Direction
 8022a6a:	68fb      	ldr	r3, [r7, #12]
 8022a6c:	781b      	ldrb	r3, [r3, #0]
 8022a6e:	b25b      	sxtb	r3, r3
 8022a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022a74:	b25a      	sxtb	r2, r3
 8022a76:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a7a:	4313      	orrs	r3, r2
 8022a7c:	b25b      	sxtb	r3, r3
 8022a7e:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x80)? 0x80: 0x00;			// output Secondary Barrier - Brake(Stop)
 8022a80:	68fb      	ldr	r3, [r7, #12]
 8022a82:	781b      	ldrb	r3, [r3, #0]
 8022a84:	b25b      	sxtb	r3, r3
 8022a86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8022a8a:	b25a      	sxtb	r2, r3
 8022a8c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a90:	4313      	orrs	r3, r2
 8022a92:	b25b      	sxtb	r3, r3
 8022a94:	727b      	strb	r3, [r7, #9]
	
	outb(WRITE02_ADR, dwBarrierValue);
 8022a96:	4a71      	ldr	r2, [pc, #452]	; (8022c5c <CMDWriteRegister+0x308>)
 8022a98:	7a7b      	ldrb	r3, [r7, #9]
 8022a9a:	7013      	strb	r3, [r2, #0]

	// SCADA
	dwScadaValue =  (pbControl[1] & 0x01)? 0x01: 0x00;				// output SCADA - OOS
 8022a9c:	68fb      	ldr	r3, [r7, #12]
 8022a9e:	3301      	adds	r3, #1
 8022aa0:	781b      	ldrb	r3, [r3, #0]
 8022aa2:	f003 0301 	and.w	r3, r3, #1
 8022aa6:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x02)? 0x02: 0x00;				// output SCADA - EBO
 8022aa8:	68fb      	ldr	r3, [r7, #12]
 8022aaa:	3301      	adds	r3, #1
 8022aac:	781b      	ldrb	r3, [r3, #0]
 8022aae:	b25b      	sxtb	r3, r3
 8022ab0:	f003 0302 	and.w	r3, r3, #2
 8022ab4:	b25a      	sxtb	r2, r3
 8022ab6:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8022aba:	4313      	orrs	r3, r2
 8022abc:	b25b      	sxtb	r3, r3
 8022abe:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x04)? 0x04: 0x00;				// output SCADA - TDO
 8022ac0:	68fb      	ldr	r3, [r7, #12]
 8022ac2:	3301      	adds	r3, #1
 8022ac4:	781b      	ldrb	r3, [r3, #0]
 8022ac6:	b25b      	sxtb	r3, r3
 8022ac8:	f003 0304 	and.w	r3, r3, #4
 8022acc:	b25a      	sxtb	r2, r3
 8022ace:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8022ad2:	4313      	orrs	r3, r2
 8022ad4:	b25b      	sxtb	r3, r3
 8022ad6:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x08)? 0x08: 0x00;				// output SCADA - NXO
 8022ad8:	68fb      	ldr	r3, [r7, #12]
 8022ada:	3301      	adds	r3, #1
 8022adc:	781b      	ldrb	r3, [r3, #0]
 8022ade:	b25b      	sxtb	r3, r3
 8022ae0:	f003 0308 	and.w	r3, r3, #8
 8022ae4:	b25a      	sxtb	r2, r3
 8022ae6:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8022aea:	4313      	orrs	r3, r2
 8022aec:	b25b      	sxtb	r3, r3
 8022aee:	723b      	strb	r3, [r7, #8]

	outb(WRITE03_ADR, dwScadaValue);
 8022af0:	4a5b      	ldr	r2, [pc, #364]	; (8022c60 <CMDWriteRegister+0x30c>)
 8022af2:	7a3b      	ldrb	r3, [r7, #8]
 8022af4:	7013      	strb	r3, [r2, #0]

	// Status Display - Primary
	dwPrimaryLEDValue =  (pbControl[3] & 0x01)? 0x01: 0x00;			//Status display - green
 8022af6:	68fb      	ldr	r3, [r7, #12]
 8022af8:	3303      	adds	r3, #3
 8022afa:	781b      	ldrb	r3, [r3, #0]
 8022afc:	f003 0301 	and.w	r3, r3, #1
 8022b00:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[3] & 0x02)? 0x02: 0x00;			//Status display - red
 8022b02:	68fb      	ldr	r3, [r7, #12]
 8022b04:	3303      	adds	r3, #3
 8022b06:	781b      	ldrb	r3, [r3, #0]
 8022b08:	b25b      	sxtb	r3, r3
 8022b0a:	f003 0302 	and.w	r3, r3, #2
 8022b0e:	b25a      	sxtb	r2, r3
 8022b10:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b14:	4313      	orrs	r3, r2
 8022b16:	b25b      	sxtb	r3, r3
 8022b18:	72fb      	strb	r3, [r7, #11]

	// Overhead Display - Primary
	dwPrimaryLEDValue |= (pbControl[3] & 0x04)? 0x04: 0x00;			//Overhead display - green
 8022b1a:	68fb      	ldr	r3, [r7, #12]
 8022b1c:	3303      	adds	r3, #3
 8022b1e:	781b      	ldrb	r3, [r3, #0]
 8022b20:	b25b      	sxtb	r3, r3
 8022b22:	f003 0304 	and.w	r3, r3, #4
 8022b26:	b25a      	sxtb	r2, r3
 8022b28:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b2c:	4313      	orrs	r3, r2
 8022b2e:	b25b      	sxtb	r3, r3
 8022b30:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[3] & 0x08)? 0x08: 0x00;			//Overhead display - red
 8022b32:	68fb      	ldr	r3, [r7, #12]
 8022b34:	3303      	adds	r3, #3
 8022b36:	781b      	ldrb	r3, [r3, #0]
 8022b38:	b25b      	sxtb	r3, r3
 8022b3a:	f003 0308 	and.w	r3, r3, #8
 8022b3e:	b25a      	sxtb	r2, r3
 8022b40:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b44:	4313      	orrs	r3, r2
 8022b46:	b25b      	sxtb	r3, r3
 8022b48:	72fb      	strb	r3, [r7, #11]

	// Status Display - Secondary
	dwPrimaryLEDValue |= (pbControl[4] & 0x01)? 0x10: 0x00;		//Status display - green
 8022b4a:	68fb      	ldr	r3, [r7, #12]
 8022b4c:	3304      	adds	r3, #4
 8022b4e:	781b      	ldrb	r3, [r3, #0]
 8022b50:	011b      	lsls	r3, r3, #4
 8022b52:	b25b      	sxtb	r3, r3
 8022b54:	f003 0310 	and.w	r3, r3, #16
 8022b58:	b25a      	sxtb	r2, r3
 8022b5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b5e:	4313      	orrs	r3, r2
 8022b60:	b25b      	sxtb	r3, r3
 8022b62:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[4] & 0x02)? 0x20: 0x00;		//Status display - red
 8022b64:	68fb      	ldr	r3, [r7, #12]
 8022b66:	3304      	adds	r3, #4
 8022b68:	781b      	ldrb	r3, [r3, #0]
 8022b6a:	011b      	lsls	r3, r3, #4
 8022b6c:	b25b      	sxtb	r3, r3
 8022b6e:	f003 0320 	and.w	r3, r3, #32
 8022b72:	b25a      	sxtb	r2, r3
 8022b74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b78:	4313      	orrs	r3, r2
 8022b7a:	b25b      	sxtb	r3, r3
 8022b7c:	72fb      	strb	r3, [r7, #11]

	// Overhead Display - Secondary
	dwPrimaryLEDValue |= (pbControl[4] & 0x04)? 0x40: 0x00;		//Overhead display - green
 8022b7e:	68fb      	ldr	r3, [r7, #12]
 8022b80:	3304      	adds	r3, #4
 8022b82:	781b      	ldrb	r3, [r3, #0]
 8022b84:	011b      	lsls	r3, r3, #4
 8022b86:	b25b      	sxtb	r3, r3
 8022b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022b8c:	b25a      	sxtb	r2, r3
 8022b8e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b92:	4313      	orrs	r3, r2
 8022b94:	b25b      	sxtb	r3, r3
 8022b96:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[4] & 0x08)? 0x80: 0x00;		//Overhead display - red
 8022b98:	68fb      	ldr	r3, [r7, #12]
 8022b9a:	3304      	adds	r3, #4
 8022b9c:	781b      	ldrb	r3, [r3, #0]
 8022b9e:	011b      	lsls	r3, r3, #4
 8022ba0:	b25b      	sxtb	r3, r3
 8022ba2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8022ba6:	b25a      	sxtb	r2, r3
 8022ba8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022bac:	4313      	orrs	r3, r2
 8022bae:	b25b      	sxtb	r3, r3
 8022bb0:	72fb      	strb	r3, [r7, #11]

	outb(WRITE00_ADR, dwPrimaryLEDValue);
 8022bb2:	f04f 42c8 	mov.w	r2, #1677721600	; 0x64000000
 8022bb6:	7afb      	ldrb	r3, [r7, #11]
 8022bb8:	7013      	strb	r3, [r2, #0]


	// Indicator Light - Primary
	dwSecondaryLEDValue  = (pbControl[6] & 0x01)? 0x01: 0x00;			//red
 8022bba:	68fb      	ldr	r3, [r7, #12]
 8022bbc:	3306      	adds	r3, #6
 8022bbe:	781b      	ldrb	r3, [r3, #0]
 8022bc0:	f003 0301 	and.w	r3, r3, #1
 8022bc4:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[6] & 0x04)? 0x02: 0x00;			//green
 8022bc6:	68fb      	ldr	r3, [r7, #12]
 8022bc8:	3306      	adds	r3, #6
 8022bca:	781b      	ldrb	r3, [r3, #0]
 8022bcc:	105b      	asrs	r3, r3, #1
 8022bce:	b25b      	sxtb	r3, r3
 8022bd0:	f003 0302 	and.w	r3, r3, #2
 8022bd4:	b25a      	sxtb	r2, r3
 8022bd6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022bda:	4313      	orrs	r3, r2
 8022bdc:	b25b      	sxtb	r3, r3
 8022bde:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[6] & 0x02)? 0x04: 0x00;			//blue
 8022be0:	68fb      	ldr	r3, [r7, #12]
 8022be2:	3306      	adds	r3, #6
 8022be4:	781b      	ldrb	r3, [r3, #0]
 8022be6:	005b      	lsls	r3, r3, #1
 8022be8:	b25b      	sxtb	r3, r3
 8022bea:	f003 0304 	and.w	r3, r3, #4
 8022bee:	b25a      	sxtb	r2, r3
 8022bf0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022bf4:	4313      	orrs	r3, r2
 8022bf6:	b25b      	sxtb	r3, r3
 8022bf8:	72bb      	strb	r3, [r7, #10]

	// Indicator Light - Secondary
	dwSecondaryLEDValue |= (pbControl[7] & 0x01)? 0x10: 0x00;		//red
 8022bfa:	68fb      	ldr	r3, [r7, #12]
 8022bfc:	3307      	adds	r3, #7
 8022bfe:	781b      	ldrb	r3, [r3, #0]
 8022c00:	011b      	lsls	r3, r3, #4
 8022c02:	b25b      	sxtb	r3, r3
 8022c04:	f003 0310 	and.w	r3, r3, #16
 8022c08:	b25a      	sxtb	r2, r3
 8022c0a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022c0e:	4313      	orrs	r3, r2
 8022c10:	b25b      	sxtb	r3, r3
 8022c12:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[7] & 0x04)? 0x20: 0x00;		//green
 8022c14:	68fb      	ldr	r3, [r7, #12]
 8022c16:	3307      	adds	r3, #7
 8022c18:	781b      	ldrb	r3, [r3, #0]
 8022c1a:	00db      	lsls	r3, r3, #3
 8022c1c:	b25b      	sxtb	r3, r3
 8022c1e:	f003 0320 	and.w	r3, r3, #32
 8022c22:	b25a      	sxtb	r2, r3
 8022c24:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022c28:	4313      	orrs	r3, r2
 8022c2a:	b25b      	sxtb	r3, r3
 8022c2c:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[7] & 0x02)? 0x40: 0x00;		//blue
 8022c2e:	68fb      	ldr	r3, [r7, #12]
 8022c30:	e018      	b.n	8022c64 <CMDWriteRegister+0x310>
 8022c32:	bf00      	nop
 8022c34:	24000284 	.word	0x24000284
 8022c38:	080303ac 	.word	0x080303ac
 8022c3c:	080303c4 	.word	0x080303c4
 8022c40:	080303dc 	.word	0x080303dc
 8022c44:	080303f4 	.word	0x080303f4
 8022c48:	0803040c 	.word	0x0803040c
 8022c4c:	08030424 	.word	0x08030424
 8022c50:	0803043c 	.word	0x0803043c
 8022c54:	08030454 	.word	0x08030454
 8022c58:	0803046c 	.word	0x0803046c
 8022c5c:	64000200 	.word	0x64000200
 8022c60:	64000400 	.word	0x64000400
 8022c64:	3307      	adds	r3, #7
 8022c66:	781b      	ldrb	r3, [r3, #0]
 8022c68:	015b      	lsls	r3, r3, #5
 8022c6a:	b25b      	sxtb	r3, r3
 8022c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022c70:	b25a      	sxtb	r2, r3
 8022c72:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022c76:	4313      	orrs	r3, r2
 8022c78:	b25b      	sxtb	r3, r3
 8022c7a:	72bb      	strb	r3, [r7, #10]


	// Write Register

	outb(WRITE01_ADR, dwSecondaryLEDValue);	
 8022c7c:	4a1f      	ldr	r2, [pc, #124]	; (8022cfc <CMDWriteRegister+0x3a8>)
 8022c7e:	7abb      	ldrb	r3, [r7, #10]
 8022c80:	7013      	strb	r3, [r2, #0]

	if (pbControl[8] == 0x33)
 8022c82:	68fb      	ldr	r3, [r7, #12]
 8022c84:	3308      	adds	r3, #8
 8022c86:	781b      	ldrb	r3, [r3, #0]
 8022c88:	2b33      	cmp	r3, #51	; 0x33
 8022c8a:	d10a      	bne.n	8022ca2 <CMDWriteRegister+0x34e>
	{
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_CHK_Pin, GPIO_PIN_RESET);			//Default Low / Active High	 New Board
 8022c8c:	2200      	movs	r2, #0
 8022c8e:	2140      	movs	r1, #64	; 0x40
 8022c90:	481b      	ldr	r0, [pc, #108]	; (8022d00 <CMDWriteRegister+0x3ac>)
 8022c92:	f007 f9a7 	bl	8029fe4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_SHDN_Pin, GPIO_PIN_SET);			//Default High / Active Low	 New Board
 8022c96:	2201      	movs	r2, #1
 8022c98:	2180      	movs	r1, #128	; 0x80
 8022c9a:	4819      	ldr	r0, [pc, #100]	; (8022d00 <CMDWriteRegister+0x3ac>)
 8022c9c:	f007 f9a2 	bl	8029fe4 <HAL_GPIO_WritePin>
 8022ca0:	e01e      	b.n	8022ce0 <CMDWriteRegister+0x38c>
	}
	else
	{
		dwUPSCHKValue  = (pbControl[8] & 0x02)? 0x01: 0x00;						//CHK	High / Low
 8022ca2:	68fb      	ldr	r3, [r7, #12]
 8022ca4:	3308      	adds	r3, #8
 8022ca6:	781b      	ldrb	r3, [r3, #0]
 8022ca8:	105b      	asrs	r3, r3, #1
 8022caa:	b2db      	uxtb	r3, r3
 8022cac:	f003 0301 	and.w	r3, r3, #1
 8022cb0:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_CHK_Pin, dwUPSCHKValue);
 8022cb2:	79fb      	ldrb	r3, [r7, #7]
 8022cb4:	461a      	mov	r2, r3
 8022cb6:	2140      	movs	r1, #64	; 0x40
 8022cb8:	4811      	ldr	r0, [pc, #68]	; (8022d00 <CMDWriteRegister+0x3ac>)
 8022cba:	f007 f993 	bl	8029fe4 <HAL_GPIO_WritePin>

		dwUPSSHDNKValue = (pbControl[8] & 0x01)? 0x00: 0x01;					//SHDN	Low / High
 8022cbe:	68fb      	ldr	r3, [r7, #12]
 8022cc0:	3308      	adds	r3, #8
 8022cc2:	781b      	ldrb	r3, [r3, #0]
 8022cc4:	f003 0301 	and.w	r3, r3, #1
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	bf0c      	ite	eq
 8022ccc:	2301      	moveq	r3, #1
 8022cce:	2300      	movne	r3, #0
 8022cd0:	b2db      	uxtb	r3, r3
 8022cd2:	71bb      	strb	r3, [r7, #6]
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_SHDN_Pin, dwUPSSHDNKValue);
 8022cd4:	79bb      	ldrb	r3, [r7, #6]
 8022cd6:	461a      	mov	r2, r3
 8022cd8:	2180      	movs	r1, #128	; 0x80
 8022cda:	4809      	ldr	r0, [pc, #36]	; (8022d00 <CMDWriteRegister+0x3ac>)
 8022cdc:	f007 f982 	bl	8029fe4 <HAL_GPIO_WritePin>

	//pbControl[5] =  0;						// Control dummy direction display (WMATA not used)
	//pbControl[8] => UPS Shuddown On [0x00], UPS Shuddown Off [0x01] / UPS Check On [0x02], UPS Check Off [0x00] 
	//pbControl[8] =  0;						// UPS Command - BART도 UPS I/F 사용 (Out: 2EA) - 현재 SHDN 1EA만 구현되어 있으나 CHK신호 추가예정 -> Jig Program 에서는 UPS Write 시그널 줌. 20231002 by Joseph

	if (pbControl[10])	
 8022ce0:	68fb      	ldr	r3, [r7, #12]
 8022ce2:	330a      	adds	r3, #10
 8022ce4:	781b      	ldrb	r3, [r3, #0]
 8022ce6:	2b00      	cmp	r3, #0
 8022ce8:	d002      	beq.n	8022cf0 <CMDWriteRegister+0x39c>
		BuzzerOn();			//buzzer 한개만 사용
 8022cea:	f002 fbdd 	bl	80254a8 <BuzzerOn>
	else										
		BuzzerOff();
}
 8022cee:	e001      	b.n	8022cf4 <CMDWriteRegister+0x3a0>
		BuzzerOff();
 8022cf0:	f002 fbe6 	bl	80254c0 <BuzzerOff>
}
 8022cf4:	bf00      	nop
 8022cf6:	3710      	adds	r7, #16
 8022cf8:	46bd      	mov	sp, r7
 8022cfa:	bd80      	pop	{r7, pc}
 8022cfc:	64000100 	.word	0x64000100
 8022d00:	58021400 	.word	0x58021400

08022d04 <CMDReadRegister>:
* Out:      Values of current register
* Return:   void
* comments: 
*******************************************************************************/
void CMDReadRegister(void)			//pms		이 함수 모두 확인 필요
{
 8022d04:	b580      	push	{r7, lr}
 8022d06:	b086      	sub	sp, #24
 8022d08:	af00      	add	r7, sp, #0
	BYTE	mbReadData[MAX_READ_REG];			//0 ~ 10 = Total 11 0x6400000B 까지 read
	DWORD	dwSpareSenserValue  = 0;
 8022d0a:	2300      	movs	r3, #0
 8022d0c:	617b      	str	r3, [r7, #20]
	DWORD	dwUPSValue = 0;
 8022d0e:	2300      	movs	r3, #0
 8022d10:	613b      	str	r3, [r7, #16]

	dwUPSValue = (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_CONN_Pin))? 0x01: 0x00;			// Connection Failure, High active //stm32L496 적용 보드에서는 conn이 없었음
 8022d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022d16:	483d      	ldr	r0, [pc, #244]	; (8022e0c <CMDReadRegister+0x108>)
 8022d18:	f007 f94c 	bl	8029fb4 <HAL_GPIO_ReadPin>
 8022d1c:	4603      	mov	r3, r0
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	bf14      	ite	ne
 8022d22:	2301      	movne	r3, #1
 8022d24:	2300      	moveq	r3, #0
 8022d26:	b2db      	uxtb	r3, r3
 8022d28:	613b      	str	r3, [r7, #16]
	dwUPSValue |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_LINE_FAIL_Pin))? 0x02: 0x00;			// Power Failure, Low active
 8022d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022d2e:	4837      	ldr	r0, [pc, #220]	; (8022e0c <CMDReadRegister+0x108>)
 8022d30:	f007 f940 	bl	8029fb4 <HAL_GPIO_ReadPin>
 8022d34:	4603      	mov	r3, r0
 8022d36:	2b00      	cmp	r3, #0
 8022d38:	d001      	beq.n	8022d3e <CMDReadRegister+0x3a>
 8022d3a:	2302      	movs	r3, #2
 8022d3c:	e000      	b.n	8022d40 <CMDReadRegister+0x3c>
 8022d3e:	2300      	movs	r3, #0
 8022d40:	461a      	mov	r2, r3
 8022d42:	693b      	ldr	r3, [r7, #16]
 8022d44:	4313      	orrs	r3, r2
 8022d46:	613b      	str	r3, [r7, #16]
	dwUPSValue |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_LOW_BAT_Pin))? 0x04: 0x00;		// Low battery, Low active
 8022d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8022d4c:	482f      	ldr	r0, [pc, #188]	; (8022e0c <CMDReadRegister+0x108>)
 8022d4e:	f007 f931 	bl	8029fb4 <HAL_GPIO_ReadPin>
 8022d52:	4603      	mov	r3, r0
 8022d54:	2b00      	cmp	r3, #0
 8022d56:	d001      	beq.n	8022d5c <CMDReadRegister+0x58>
 8022d58:	2304      	movs	r3, #4
 8022d5a:	e000      	b.n	8022d5e <CMDReadRegister+0x5a>
 8022d5c:	2300      	movs	r3, #0
 8022d5e:	461a      	mov	r2, r3
 8022d60:	693b      	ldr	r3, [r7, #16]
 8022d62:	4313      	orrs	r3, r2
 8022d64:	613b      	str	r3, [r7, #16]

	// BART 에서는 Passenger sensor 01 ~ 16(2 bytes) 만 사용
	dwSpareSenserValue = (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN1_Pin))? 0x01: 0x00;  	// Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기)
 8022d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022d6a:	4829      	ldr	r0, [pc, #164]	; (8022e10 <CMDReadRegister+0x10c>)
 8022d6c:	f007 f922 	bl	8029fb4 <HAL_GPIO_ReadPin>
 8022d70:	4603      	mov	r3, r0
 8022d72:	2b00      	cmp	r3, #0
 8022d74:	bf14      	ite	ne
 8022d76:	2301      	movne	r3, #1
 8022d78:	2300      	moveq	r3, #0
 8022d7a:	b2db      	uxtb	r3, r3
 8022d7c:	617b      	str	r3, [r7, #20]
	dwSpareSenserValue |= (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN2_Pin))? 0x02: 0x00;
 8022d7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8022d82:	4823      	ldr	r0, [pc, #140]	; (8022e10 <CMDReadRegister+0x10c>)
 8022d84:	f007 f916 	bl	8029fb4 <HAL_GPIO_ReadPin>
 8022d88:	4603      	mov	r3, r0
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d001      	beq.n	8022d92 <CMDReadRegister+0x8e>
 8022d8e:	2302      	movs	r3, #2
 8022d90:	e000      	b.n	8022d94 <CMDReadRegister+0x90>
 8022d92:	2300      	movs	r3, #0
 8022d94:	461a      	mov	r2, r3
 8022d96:	697b      	ldr	r3, [r7, #20]
 8022d98:	4313      	orrs	r3, r2
 8022d9a:	617b      	str	r3, [r7, #20]

	mbReadData[0] =  RD_SWITCH & 0x0F;			// Door/Module switch 1 - BART는 Door Switch 1~4만 사용, High - detected, Low - not detected
 8022d9c:	4b1d      	ldr	r3, [pc, #116]	; (8022e14 <CMDReadRegister+0x110>)
 8022d9e:	781b      	ldrb	r3, [r3, #0]
 8022da0:	b2db      	uxtb	r3, r3
 8022da2:	f003 030f 	and.w	r3, r3, #15
 8022da6:	b2db      	uxtb	r3, r3
 8022da8:	713b      	strb	r3, [r7, #4]
	mbReadData[1] =  (RD_SWITCH >> 4) & 0x0F;	// Door/Module switch 2 - BART는 Door Switch 5~8만 사용, High - detected, Low - not detected
 8022daa:	4b1a      	ldr	r3, [pc, #104]	; (8022e14 <CMDReadRegister+0x110>)
 8022dac:	781b      	ldrb	r3, [r3, #0]
 8022dae:	b2db      	uxtb	r3, r3
 8022db0:	091b      	lsrs	r3, r3, #4
 8022db2:	b2db      	uxtb	r3, r3
 8022db4:	f003 030f 	and.w	r3, r3, #15
 8022db8:	b2db      	uxtb	r3, r3
 8022dba:	717b      	strb	r3, [r7, #5]
	mbReadData[2] =  0;							// Token capture unit sensor - Token box 없음
 8022dbc:	2300      	movs	r3, #0
 8022dbe:	71bb      	strb	r3, [r7, #6]
	mbReadData[3] =  (*(BYTE*)READ00_ADR);		// Passenger sensor 1 - BART는 Passenger sensor 1~8사용, High - detected, Low - not detected
 8022dc0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8022dc4:	781b      	ldrb	r3, [r3, #0]
 8022dc6:	71fb      	strb	r3, [r7, #7]
	mbReadData[4] =  (*(BYTE*)READ01_ADR);		// Passenger sensor 2 - BART는 Passenger sensor 9~16사용(회로상엔 11~18로 표기) -> 회로상에도 9~16으로 표기 바랍니다 20230927 by Joseph, High - detected, Low - not detected
 8022dc8:	4b13      	ldr	r3, [pc, #76]	; (8022e18 <CMDReadRegister+0x114>)
 8022dca:	781b      	ldrb	r3, [r3, #0]
 8022dcc:	723b      	strb	r3, [r7, #8]
	mbReadData[5] =  dwSpareSenserValue;		// Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기) -> 회로상에도 스페어는 17,18 로 표기 바랍니다 20230927 by Joseph
 8022dce:	697b      	ldr	r3, [r7, #20]
 8022dd0:	b2db      	uxtb	r3, r3
 8022dd2:	727b      	strb	r3, [r7, #9]
												// add - jig test에서는 17 18 할당 -> JIG 에서는 17,18 sensor 체크는 뺄 예정입니다. 20230927 by Joseph
	mbReadData[6] =  0;							// Spare sensor (WMATA not used) -> JIG 에서는 Spare sensor 체크는 뺄 예정입니다. 20230927 by Joseph
 8022dd4:	2300      	movs	r3, #0
 8022dd6:	72bb      	strb	r3, [r7, #10]
	mbReadData[7] =  (*(BYTE*)READ04_ADR);		// Barrier status, High active
 8022dd8:	4b10      	ldr	r3, [pc, #64]	; (8022e1c <CMDReadRegister+0x118>)
 8022dda:	781b      	ldrb	r3, [r3, #0]
 8022ddc:	72fb      	strb	r3, [r7, #11]
	mbReadData[8] =  (*(BYTE*)READ03_ADR);		// SCADA, High active
 8022dde:	4b10      	ldr	r3, [pc, #64]	; (8022e20 <CMDReadRegister+0x11c>)
 8022de0:	781b      	ldrb	r3, [r3, #0]
 8022de2:	733b      	strb	r3, [r7, #12]
	mbReadData[9] =  IsEMGSignalOn();			// External IRQ source  - 인터럽트 신호 BART에서 사용여부는 첨부 GCU_IO Specification 참조 -> EBO (Emergency) Signal 값으로 변경. 20231002 by Joseph
 8022de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8022de8:	480e      	ldr	r0, [pc, #56]	; (8022e24 <CMDReadRegister+0x120>)
 8022dea:	f007 f8e3 	bl	8029fb4 <HAL_GPIO_ReadPin>
 8022dee:	4603      	mov	r3, r0
 8022df0:	737b      	strb	r3, [r7, #13]
	mbReadData[10] =  dwUPSValue;				// UPS Status - BART도 UPS I/F 사용 (In: 3EA) 
 8022df2:	693b      	ldr	r3, [r7, #16]
 8022df4:	b2db      	uxtb	r3, r3
 8022df6:	73bb      	strb	r3, [r7, #14]

	MakeResponse(mbReadData, sizeof(mbReadData));
 8022df8:	1d3b      	adds	r3, r7, #4
 8022dfa:	210b      	movs	r1, #11
 8022dfc:	4618      	mov	r0, r3
 8022dfe:	f7ff fb15 	bl	802242c <MakeResponse>
}
 8022e02:	bf00      	nop
 8022e04:	3718      	adds	r7, #24
 8022e06:	46bd      	mov	sp, r7
 8022e08:	bd80      	pop	{r7, pc}
 8022e0a:	bf00      	nop
 8022e0c:	58021400 	.word	0x58021400
 8022e10:	58020000 	.word	0x58020000
 8022e14:	60000300 	.word	0x60000300
 8022e18:	60000100 	.word	0x60000100
 8022e1c:	60000600 	.word	0x60000600
 8022e20:	60000500 	.word	0x60000500
 8022e24:	58020400 	.word	0x58020400

08022e28 <CMDGetCPLDVersion>:
* Out:      Current CPLD version
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetCPLDVersion(void)
{
 8022e28:	b580      	push	{r7, lr}
 8022e2a:	b082      	sub	sp, #8
 8022e2c:	af00      	add	r7, sp, #0
	BYTE	bCPLDVersion = RD_CPLDVER;
 8022e2e:	2300      	movs	r3, #0
 8022e30:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&bCPLDVersion, sizeof(bCPLDVersion));
 8022e32:	1dfb      	adds	r3, r7, #7
 8022e34:	2101      	movs	r1, #1
 8022e36:	4618      	mov	r0, r3
 8022e38:	f7ff faf8 	bl	802242c <MakeResponse>
}
 8022e3c:	bf00      	nop
 8022e3e:	3708      	adds	r7, #8
 8022e40:	46bd      	mov	sp, r7
 8022e42:	bd80      	pop	{r7, pc}

08022e44 <CMDGetDipSwitch>:
* Out:      Value of current dip switch 
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetDipSwitch(void)
{
 8022e44:	b580      	push	{r7, lr}
 8022e46:	b082      	sub	sp, #8
 8022e48:	af00      	add	r7, sp, #0
	BYTE dipSwitch = ReadDipSwitch();
 8022e4a:	4b07      	ldr	r3, [pc, #28]	; (8022e68 <CMDGetDipSwitch+0x24>)
 8022e4c:	691b      	ldr	r3, [r3, #16]
 8022e4e:	b2db      	uxtb	r3, r3
 8022e50:	43db      	mvns	r3, r3
 8022e52:	b2db      	uxtb	r3, r3
 8022e54:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&dipSwitch, sizeof(dipSwitch));
 8022e56:	1dfb      	adds	r3, r7, #7
 8022e58:	2101      	movs	r1, #1
 8022e5a:	4618      	mov	r0, r3
 8022e5c:	f7ff fae6 	bl	802242c <MakeResponse>
}
 8022e60:	bf00      	nop
 8022e62:	3708      	adds	r7, #8
 8022e64:	46bd      	mov	sp, r7
 8022e66:	bd80      	pop	{r7, pc}
 8022e68:	58020400 	.word	0x58020400

08022e6c <CMDSetUPSCommand>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetUPSCommand(void)
{
 8022e6c:	b580      	push	{r7, lr}
 8022e6e:	b082      	sub	sp, #8
 8022e70:	af00      	add	r7, sp, #0
	// Set UPS command
	BYTE bUPSCommand = GCUCommand.d.mbOptionData[0];
 8022e72:	4b0c      	ldr	r3, [pc, #48]	; (8022ea4 <CMDSetUPSCommand+0x38>)
 8022e74:	791b      	ldrb	r3, [r3, #4]
 8022e76:	71fb      	strb	r3, [r7, #7]


	printf("Send Command \n");
 8022e78:	480b      	ldr	r0, [pc, #44]	; (8022ea8 <CMDSetUPSCommand+0x3c>)
 8022e7a:	f005 fdef 	bl	8028a5c <printf_>
	printf("%x \n", GCUCommand.d.mbOptionData[0]);
 8022e7e:	4b09      	ldr	r3, [pc, #36]	; (8022ea4 <CMDSetUPSCommand+0x38>)
 8022e80:	791b      	ldrb	r3, [r3, #4]
 8022e82:	4619      	mov	r1, r3
 8022e84:	4809      	ldr	r0, [pc, #36]	; (8022eac <CMDSetUPSCommand+0x40>)
 8022e86:	f005 fde9 	bl	8028a5c <printf_>

	//PRINTL("Send Command\n");
	//PRINTL("%x", GCUCommand.d.mbOptionData[0]);
	//PRINTL("\n");

	ControlUPS(bUPSCommand);
 8022e8a:	79fb      	ldrb	r3, [r7, #7]
 8022e8c:	b29b      	uxth	r3, r3
 8022e8e:	019b      	lsls	r3, r3, #6
 8022e90:	b29b      	uxth	r3, r3
 8022e92:	2201      	movs	r2, #1
 8022e94:	4619      	mov	r1, r3
 8022e96:	4806      	ldr	r0, [pc, #24]	; (8022eb0 <CMDSetUPSCommand+0x44>)
 8022e98:	f007 f8a4 	bl	8029fe4 <HAL_GPIO_WritePin>
}
 8022e9c:	bf00      	nop
 8022e9e:	3708      	adds	r7, #8
 8022ea0:	46bd      	mov	sp, r7
 8022ea2:	bd80      	pop	{r7, pc}
 8022ea4:	24000280 	.word	0x24000280
 8022ea8:	08030484 	.word	0x08030484
 8022eac:	08030494 	.word	0x08030494
 8022eb0:	58021400 	.word	0x58021400

08022eb4 <CMDGetUPSStatus>:
* Out:      Current UPS Status
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetUPSStatus(void)
{
 8022eb4:	b580      	push	{r7, lr}
 8022eb6:	b082      	sub	sp, #8
 8022eb8:	af00      	add	r7, sp, #0
	BYTE bUPSStatus = 0x00;
 8022eba:	2300      	movs	r3, #0
 8022ebc:	71fb      	strb	r3, [r7, #7]

	// Get UPS status
	bUPSStatus = RD_UPSSTAT;
 8022ebe:	2300      	movs	r3, #0
 8022ec0:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&bUPSStatus, sizeof(bUPSStatus));
 8022ec2:	1dfb      	adds	r3, r7, #7
 8022ec4:	2101      	movs	r1, #1
 8022ec6:	4618      	mov	r0, r3
 8022ec8:	f7ff fab0 	bl	802242c <MakeResponse>
}
 8022ecc:	bf00      	nop
 8022ece:	3708      	adds	r7, #8
 8022ed0:	46bd      	mov	sp, r7
 8022ed2:	bd80      	pop	{r7, pc}

08022ed4 <CheckProtocol_UART3>:
* comments: It checks serial data from Host and protocol format of data received.
*           If the protocol format is correct, it returns SUCCESS result.
*******************************************************************************/

int CheckProtocol_UART3(void)
{
 8022ed4:	b580      	push	{r7, lr}
 8022ed6:	af00      	add	r7, sp, #0
	static BYTE bRcvState = STATE_STX_WAIT;
	static BYTE bBCC;
	static BYTE bRcvData;

	while (IUart_RecvByte_check(COM3, &bRcvData))
 8022ed8:	e0d5      	b.n	8023086 <CheckProtocol_UART3+0x1b2>
	{
		// printf("RecvByte CheckProtocol_UART3 : %d[%02X]\n", bRcvData, bRcvData);
		if (bRcvState == STATE_DATA_BCC)
 8022eda:	4b70      	ldr	r3, [pc, #448]	; (802309c <CheckProtocol_UART3+0x1c8>)
 8022edc:	781b      	ldrb	r3, [r3, #0]
 8022ede:	2b02      	cmp	r3, #2
 8022ee0:	d138      	bne.n	8022f54 <CheckProtocol_UART3+0x80>
		{
			bRcvState = STATE_STX_WAIT;
 8022ee2:	4b6e      	ldr	r3, [pc, #440]	; (802309c <CheckProtocol_UART3+0x1c8>)
 8022ee4:	2200      	movs	r2, #0
 8022ee6:	701a      	strb	r2, [r3, #0]

			if (bBCC == bRcvData)
 8022ee8:	4b6d      	ldr	r3, [pc, #436]	; (80230a0 <CheckProtocol_UART3+0x1cc>)
 8022eea:	781a      	ldrb	r2, [r3, #0]
 8022eec:	4b6d      	ldr	r3, [pc, #436]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8022eee:	781b      	ldrb	r3, [r3, #0]
 8022ef0:	429a      	cmp	r2, r3
 8022ef2:	d119      	bne.n	8022f28 <CheckProtocol_UART3+0x54>
			{
				if (GCUCommand.d.bDataLen != (BYTE)(gnFrameLen - FRAME_HEADER_LEN))
 8022ef4:	4b6c      	ldr	r3, [pc, #432]	; (80230a8 <CheckProtocol_UART3+0x1d4>)
 8022ef6:	789a      	ldrb	r2, [r3, #2]
 8022ef8:	4b6c      	ldr	r3, [pc, #432]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8022efa:	681b      	ldr	r3, [r3, #0]
 8022efc:	b2db      	uxtb	r3, r3
 8022efe:	3b03      	subs	r3, #3
 8022f00:	b2db      	uxtb	r3, r3
 8022f02:	429a      	cmp	r2, r3
 8022f04:	d00e      	beq.n	8022f24 <CheckProtocol_UART3+0x50>
				{
					//PRINTL("LENGTH ERR: %d - %d", GCUCommand.d.bDataLen, (gnFrameLen - FRAME_HEADER_LEN));
					printf("LENGTH ERR: %d - %d \n", GCUCommand.d.bDataLen, (gnFrameLen - FRAME_HEADER_LEN));
 8022f06:	4b68      	ldr	r3, [pc, #416]	; (80230a8 <CheckProtocol_UART3+0x1d4>)
 8022f08:	789b      	ldrb	r3, [r3, #2]
 8022f0a:	4619      	mov	r1, r3
 8022f0c:	4b67      	ldr	r3, [pc, #412]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8022f0e:	681b      	ldr	r3, [r3, #0]
 8022f10:	3b03      	subs	r3, #3
 8022f12:	461a      	mov	r2, r3
 8022f14:	4866      	ldr	r0, [pc, #408]	; (80230b0 <CheckProtocol_UART3+0x1dc>)
 8022f16:	f005 fda1 	bl	8028a5c <printf_>
					gnFrameLen = 0;
 8022f1a:	4b64      	ldr	r3, [pc, #400]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8022f1c:	2200      	movs	r2, #0
 8022f1e:	601a      	str	r2, [r3, #0]
					return ERR_WRONG_CMD_LEN;
 8022f20:	230a      	movs	r3, #10
 8022f22:	e0b9      	b.n	8023098 <CheckProtocol_UART3+0x1c4>
				}
				else
					return SUCCESS;
 8022f24:	2300      	movs	r3, #0
 8022f26:	e0b7      	b.n	8023098 <CheckProtocol_UART3+0x1c4>
			}
			else
			{
				//PRINT("len: %d, BCC: %d, rcv: %d", gnFrameLen, bBCC, bRcvData);

				printf("len: %d, BCC: %d, rcv: %d \n", gnFrameLen, bBCC, bRcvData);
 8022f28:	4b60      	ldr	r3, [pc, #384]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8022f2a:	6819      	ldr	r1, [r3, #0]
 8022f2c:	4b5c      	ldr	r3, [pc, #368]	; (80230a0 <CheckProtocol_UART3+0x1cc>)
 8022f2e:	781b      	ldrb	r3, [r3, #0]
 8022f30:	461a      	mov	r2, r3
 8022f32:	4b5c      	ldr	r3, [pc, #368]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8022f34:	781b      	ldrb	r3, [r3, #0]
 8022f36:	485f      	ldr	r0, [pc, #380]	; (80230b4 <CheckProtocol_UART3+0x1e0>)
 8022f38:	f005 fd90 	bl	8028a5c <printf_>
				Print2Hex("", GCUCommand.Buff, gnFrameLen);
 8022f3c:	4b5b      	ldr	r3, [pc, #364]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8022f3e:	681b      	ldr	r3, [r3, #0]
 8022f40:	461a      	mov	r2, r3
 8022f42:	4959      	ldr	r1, [pc, #356]	; (80230a8 <CheckProtocol_UART3+0x1d4>)
 8022f44:	485c      	ldr	r0, [pc, #368]	; (80230b8 <CheckProtocol_UART3+0x1e4>)
 8022f46:	f00b fdf9 	bl	802eb3c <Print2Hex>
				gnFrameLen = 0;
 8022f4a:	4b58      	ldr	r3, [pc, #352]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8022f4c:	2200      	movs	r2, #0
 8022f4e:	601a      	str	r2, [r3, #0]
				return ERR_BCC;
 8022f50:	2305      	movs	r3, #5
 8022f52:	e0a1      	b.n	8023098 <CheckProtocol_UART3+0x1c4>
			}
		}
		else
		{
			switch (bRcvData)
 8022f54:	4b53      	ldr	r3, [pc, #332]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8022f56:	781b      	ldrb	r3, [r3, #0]
 8022f58:	2b10      	cmp	r3, #16
 8022f5a:	d01d      	beq.n	8022f98 <CheckProtocol_UART3+0xc4>
 8022f5c:	2b10      	cmp	r3, #16
 8022f5e:	dc2b      	bgt.n	8022fb8 <CheckProtocol_UART3+0xe4>
 8022f60:	2b02      	cmp	r3, #2
 8022f62:	d002      	beq.n	8022f6a <CheckProtocol_UART3+0x96>
 8022f64:	2b03      	cmp	r3, #3
 8022f66:	d00b      	beq.n	8022f80 <CheckProtocol_UART3+0xac>
 8022f68:	e026      	b.n	8022fb8 <CheckProtocol_UART3+0xe4>
			{
			case STX:
				bRcvState = STATE_DATA_RCV;
 8022f6a:	4b4c      	ldr	r3, [pc, #304]	; (802309c <CheckProtocol_UART3+0x1c8>)
 8022f6c:	2201      	movs	r2, #1
 8022f6e:	701a      	strb	r2, [r3, #0]
				bBCC = bRcvData;
 8022f70:	4b4c      	ldr	r3, [pc, #304]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8022f72:	781a      	ldrb	r2, [r3, #0]
 8022f74:	4b4a      	ldr	r3, [pc, #296]	; (80230a0 <CheckProtocol_UART3+0x1cc>)
 8022f76:	701a      	strb	r2, [r3, #0]
				gnFrameLen = 0;
 8022f78:	4b4c      	ldr	r3, [pc, #304]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8022f7a:	2200      	movs	r2, #0
 8022f7c:	601a      	str	r2, [r3, #0]
				break;
 8022f7e:	e073      	b.n	8023068 <CheckProtocol_UART3+0x194>
			case ETX:
				bRcvState = STATE_DATA_BCC;
 8022f80:	4b46      	ldr	r3, [pc, #280]	; (802309c <CheckProtocol_UART3+0x1c8>)
 8022f82:	2202      	movs	r2, #2
 8022f84:	701a      	strb	r2, [r3, #0]
				bBCC ^= bRcvData;
 8022f86:	4b46      	ldr	r3, [pc, #280]	; (80230a0 <CheckProtocol_UART3+0x1cc>)
 8022f88:	781a      	ldrb	r2, [r3, #0]
 8022f8a:	4b46      	ldr	r3, [pc, #280]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8022f8c:	781b      	ldrb	r3, [r3, #0]
 8022f8e:	4053      	eors	r3, r2
 8022f90:	b2da      	uxtb	r2, r3
 8022f92:	4b43      	ldr	r3, [pc, #268]	; (80230a0 <CheckProtocol_UART3+0x1cc>)
 8022f94:	701a      	strb	r2, [r3, #0]
				break;
 8022f96:	e067      	b.n	8023068 <CheckProtocol_UART3+0x194>
			case DLE:
				if (bRcvState == STATE_DATA_RCV)
 8022f98:	4b40      	ldr	r3, [pc, #256]	; (802309c <CheckProtocol_UART3+0x1c8>)
 8022f9a:	781b      	ldrb	r3, [r3, #0]
 8022f9c:	2b01      	cmp	r3, #1
 8022f9e:	d160      	bne.n	8023062 <CheckProtocol_UART3+0x18e>
				{
					bRcvState = STATE_DATA_DLE;
 8022fa0:	4b3e      	ldr	r3, [pc, #248]	; (802309c <CheckProtocol_UART3+0x1c8>)
 8022fa2:	2203      	movs	r2, #3
 8022fa4:	701a      	strb	r2, [r3, #0]
					bBCC ^= bRcvData;
 8022fa6:	4b3e      	ldr	r3, [pc, #248]	; (80230a0 <CheckProtocol_UART3+0x1cc>)
 8022fa8:	781a      	ldrb	r2, [r3, #0]
 8022faa:	4b3e      	ldr	r3, [pc, #248]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8022fac:	781b      	ldrb	r3, [r3, #0]
 8022fae:	4053      	eors	r3, r2
 8022fb0:	b2da      	uxtb	r2, r3
 8022fb2:	4b3b      	ldr	r3, [pc, #236]	; (80230a0 <CheckProtocol_UART3+0x1cc>)
 8022fb4:	701a      	strb	r2, [r3, #0]
				}
				break;
 8022fb6:	e054      	b.n	8023062 <CheckProtocol_UART3+0x18e>
			default:
				if (bRcvState == STATE_DATA_RCV)
 8022fb8:	4b38      	ldr	r3, [pc, #224]	; (802309c <CheckProtocol_UART3+0x1c8>)
 8022fba:	781b      	ldrb	r3, [r3, #0]
 8022fbc:	2b01      	cmp	r3, #1
 8022fbe:	d111      	bne.n	8022fe4 <CheckProtocol_UART3+0x110>
				{
					GCUCommand.Buff[gnFrameLen++] = bRcvData;
 8022fc0:	4b3a      	ldr	r3, [pc, #232]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8022fc2:	681b      	ldr	r3, [r3, #0]
 8022fc4:	1c5a      	adds	r2, r3, #1
 8022fc6:	4939      	ldr	r1, [pc, #228]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8022fc8:	600a      	str	r2, [r1, #0]
 8022fca:	4a36      	ldr	r2, [pc, #216]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8022fcc:	7811      	ldrb	r1, [r2, #0]
 8022fce:	4a36      	ldr	r2, [pc, #216]	; (80230a8 <CheckProtocol_UART3+0x1d4>)
 8022fd0:	54d1      	strb	r1, [r2, r3]
					bBCC ^= bRcvData;
 8022fd2:	4b33      	ldr	r3, [pc, #204]	; (80230a0 <CheckProtocol_UART3+0x1cc>)
 8022fd4:	781a      	ldrb	r2, [r3, #0]
 8022fd6:	4b33      	ldr	r3, [pc, #204]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8022fd8:	781b      	ldrb	r3, [r3, #0]
 8022fda:	4053      	eors	r3, r2
 8022fdc:	b2da      	uxtb	r2, r3
 8022fde:	4b30      	ldr	r3, [pc, #192]	; (80230a0 <CheckProtocol_UART3+0x1cc>)
 8022fe0:	701a      	strb	r2, [r3, #0]
					if (bRcvData == ACK)
						return ACK_RECEIVED;
					else if (bRcvData == NAK)
						return NAK_RECEIVED;
				}
				break;
 8022fe2:	e040      	b.n	8023066 <CheckProtocol_UART3+0x192>
				else if (bRcvState == STATE_DATA_DLE)
 8022fe4:	4b2d      	ldr	r3, [pc, #180]	; (802309c <CheckProtocol_UART3+0x1c8>)
 8022fe6:	781b      	ldrb	r3, [r3, #0]
 8022fe8:	2b03      	cmp	r3, #3
 8022fea:	d12e      	bne.n	802304a <CheckProtocol_UART3+0x176>
					if ((bRcvData == DLE_STX) || (bRcvData == DLE_ETX) || (bRcvData == DLE_DLE))
 8022fec:	4b2d      	ldr	r3, [pc, #180]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8022fee:	781b      	ldrb	r3, [r3, #0]
 8022ff0:	2b42      	cmp	r3, #66	; 0x42
 8022ff2:	d007      	beq.n	8023004 <CheckProtocol_UART3+0x130>
 8022ff4:	4b2b      	ldr	r3, [pc, #172]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8022ff6:	781b      	ldrb	r3, [r3, #0]
 8022ff8:	2b43      	cmp	r3, #67	; 0x43
 8022ffa:	d003      	beq.n	8023004 <CheckProtocol_UART3+0x130>
 8022ffc:	4b29      	ldr	r3, [pc, #164]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8022ffe:	781b      	ldrb	r3, [r3, #0]
 8023000:	2b50      	cmp	r3, #80	; 0x50
 8023002:	d117      	bne.n	8023034 <CheckProtocol_UART3+0x160>
						bRcvState = STATE_DATA_RCV;
 8023004:	4b25      	ldr	r3, [pc, #148]	; (802309c <CheckProtocol_UART3+0x1c8>)
 8023006:	2201      	movs	r2, #1
 8023008:	701a      	strb	r2, [r3, #0]
						GCUCommand.Buff[gnFrameLen++] = (bRcvData ^ DLE_OP);
 802300a:	4b26      	ldr	r3, [pc, #152]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 802300c:	781a      	ldrb	r2, [r3, #0]
 802300e:	4b27      	ldr	r3, [pc, #156]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8023010:	681b      	ldr	r3, [r3, #0]
 8023012:	1c59      	adds	r1, r3, #1
 8023014:	4825      	ldr	r0, [pc, #148]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8023016:	6001      	str	r1, [r0, #0]
 8023018:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 802301c:	b2d1      	uxtb	r1, r2
 802301e:	4a22      	ldr	r2, [pc, #136]	; (80230a8 <CheckProtocol_UART3+0x1d4>)
 8023020:	54d1      	strb	r1, [r2, r3]
						bBCC ^= bRcvData;
 8023022:	4b1f      	ldr	r3, [pc, #124]	; (80230a0 <CheckProtocol_UART3+0x1cc>)
 8023024:	781a      	ldrb	r2, [r3, #0]
 8023026:	4b1f      	ldr	r3, [pc, #124]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8023028:	781b      	ldrb	r3, [r3, #0]
 802302a:	4053      	eors	r3, r2
 802302c:	b2da      	uxtb	r2, r3
 802302e:	4b1c      	ldr	r3, [pc, #112]	; (80230a0 <CheckProtocol_UART3+0x1cc>)
 8023030:	701a      	strb	r2, [r3, #0]
				break;
 8023032:	e018      	b.n	8023066 <CheckProtocol_UART3+0x192>
						bRcvState = STATE_STX_WAIT;
 8023034:	4b19      	ldr	r3, [pc, #100]	; (802309c <CheckProtocol_UART3+0x1c8>)
 8023036:	2200      	movs	r2, #0
 8023038:	701a      	strb	r2, [r3, #0]
						gnFrameLen = 0;
 802303a:	4b1c      	ldr	r3, [pc, #112]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 802303c:	2200      	movs	r2, #0
 802303e:	601a      	str	r2, [r3, #0]
						printf("ERR_DLE_PROCESS \n");
 8023040:	481e      	ldr	r0, [pc, #120]	; (80230bc <CheckProtocol_UART3+0x1e8>)
 8023042:	f005 fd0b 	bl	8028a5c <printf_>
						return ERR_DLE_PROCESS;
 8023046:	230d      	movs	r3, #13
 8023048:	e026      	b.n	8023098 <CheckProtocol_UART3+0x1c4>
					if (bRcvData == ACK)
 802304a:	4b16      	ldr	r3, [pc, #88]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 802304c:	781b      	ldrb	r3, [r3, #0]
 802304e:	2b06      	cmp	r3, #6
 8023050:	d101      	bne.n	8023056 <CheckProtocol_UART3+0x182>
						return ACK_RECEIVED;
 8023052:	2306      	movs	r3, #6
 8023054:	e020      	b.n	8023098 <CheckProtocol_UART3+0x1c4>
					else if (bRcvData == NAK)
 8023056:	4b13      	ldr	r3, [pc, #76]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8023058:	781b      	ldrb	r3, [r3, #0]
 802305a:	2b15      	cmp	r3, #21
 802305c:	d103      	bne.n	8023066 <CheckProtocol_UART3+0x192>
						return NAK_RECEIVED;
 802305e:	2307      	movs	r3, #7
 8023060:	e01a      	b.n	8023098 <CheckProtocol_UART3+0x1c4>
				break;
 8023062:	bf00      	nop
 8023064:	e000      	b.n	8023068 <CheckProtocol_UART3+0x194>
				break;
 8023066:	bf00      	nop
			}
		}

		if (gnFrameLen >= FRAME_LEN_RET)
 8023068:	4b10      	ldr	r3, [pc, #64]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 802306a:	681b      	ldr	r3, [r3, #0]
 802306c:	2b7f      	cmp	r3, #127	; 0x7f
 802306e:	dd0a      	ble.n	8023086 <CheckProtocol_UART3+0x1b2>
		{
			bRcvState = STATE_STX_WAIT;
 8023070:	4b0a      	ldr	r3, [pc, #40]	; (802309c <CheckProtocol_UART3+0x1c8>)
 8023072:	2200      	movs	r2, #0
 8023074:	701a      	strb	r2, [r3, #0]
			gnFrameLen = 0;
 8023076:	4b0d      	ldr	r3, [pc, #52]	; (80230ac <CheckProtocol_UART3+0x1d8>)
 8023078:	2200      	movs	r2, #0
 802307a:	601a      	str	r2, [r3, #0]
			//PRINTL("ERR_FRAME_LENGTH");
			printf("ERR_FRAME_LENGTH \n");
 802307c:	4810      	ldr	r0, [pc, #64]	; (80230c0 <CheckProtocol_UART3+0x1ec>)
 802307e:	f005 fced 	bl	8028a5c <printf_>
			return ERR_FRAME_LENGTH;
 8023082:	230c      	movs	r3, #12
 8023084:	e008      	b.n	8023098 <CheckProtocol_UART3+0x1c4>
	while (IUart_RecvByte_check(COM3, &bRcvData))
 8023086:	4907      	ldr	r1, [pc, #28]	; (80230a4 <CheckProtocol_UART3+0x1d0>)
 8023088:	2002      	movs	r0, #2
 802308a:	f002 ff15 	bl	8025eb8 <IUart_RecvByte_check>
 802308e:	4603      	mov	r3, r0
 8023090:	2b00      	cmp	r3, #0
 8023092:	f47f af22 	bne.w	8022eda <CheckProtocol_UART3+0x6>
		}
	}

	return ERR_NO_DATA;
 8023096:	23ff      	movs	r3, #255	; 0xff
}
 8023098:	4618      	mov	r0, r3
 802309a:	bd80      	pop	{r7, pc}
 802309c:	24000407 	.word	0x24000407
 80230a0:	24000408 	.word	0x24000408
 80230a4:	24000409 	.word	0x24000409
 80230a8:	24000280 	.word	0x24000280
 80230ac:	24000300 	.word	0x24000300
 80230b0:	0803049c 	.word	0x0803049c
 80230b4:	080304b4 	.word	0x080304b4
 80230b8:	080304d0 	.word	0x080304d0
 80230bc:	080304d4 	.word	0x080304d4
 80230c0:	080304e8 	.word	0x080304e8

080230c4 <ProcessCommand>:
*			- ERR_ILLEGAL_CMD  : command code is not defined
* comments: It checks serial data from Host and protocol format of data received.
*           If the protocol format is correct, it returns SUCCESS result.
*******************************************************************************/
int ProcessCommand(void)
{
 80230c4:	b580      	push	{r7, lr}
 80230c6:	af00      	add	r7, sp, #0
#if _CMD_DUMP_
	PRINT("\nCMD %02X PROC", GCUCommand.d.bCmdCode);
	Print2Hex("", GCUCommand.Buff, GCUCommand.d.bDataLen+FRAME_HEADER_LEN);
#endif	//DBG_PRINT

	if (GCUCommand.d.bMainSeq == gbLastMainSeq)	// Same main sequence
 80230c8:	4baa      	ldr	r3, [pc, #680]	; (8023374 <ProcessCommand+0x2b0>)
 80230ca:	781a      	ldrb	r2, [r3, #0]
 80230cc:	4baa      	ldr	r3, [pc, #680]	; (8023378 <ProcessCommand+0x2b4>)
 80230ce:	781b      	ldrb	r3, [r3, #0]
 80230d0:	429a      	cmp	r2, r3
 80230d2:	d12a      	bne.n	802312a <ProcessCommand+0x66>
	{
		if (GCUCommand.d.bCmdCode == GCUResponse.d.bCmdCode)	// command code is same with that of the last response
 80230d4:	4ba7      	ldr	r3, [pc, #668]	; (8023374 <ProcessCommand+0x2b0>)
 80230d6:	78da      	ldrb	r2, [r3, #3]
 80230d8:	4ba8      	ldr	r3, [pc, #672]	; (802337c <ProcessCommand+0x2b8>)
 80230da:	78db      	ldrb	r3, [r3, #3]
 80230dc:	429a      	cmp	r2, r3
 80230de:	d101      	bne.n	80230e4 <ProcessCommand+0x20>
			return ERR_OLD_SEQUENCE;
 80230e0:	2308      	movs	r3, #8
 80230e2:	e145      	b.n	8023370 <ProcessCommand+0x2ac>
		else if (GCUCommand.d.bCmdCode == gbLastHostCMD)		// command code is same with last host command code
 80230e4:	4ba3      	ldr	r3, [pc, #652]	; (8023374 <ProcessCommand+0x2b0>)
 80230e6:	78da      	ldrb	r2, [r3, #3]
 80230e8:	4ba5      	ldr	r3, [pc, #660]	; (8023380 <ProcessCommand+0x2bc>)
 80230ea:	781b      	ldrb	r3, [r3, #0]
 80230ec:	429a      	cmp	r2, r3
 80230ee:	d11c      	bne.n	802312a <ProcessCommand+0x66>
		{
			if (!IsCommandNeedResponse(GCUCommand.d.bCmdCode))
 80230f0:	4ba0      	ldr	r3, [pc, #640]	; (8023374 <ProcessCommand+0x2b0>)
 80230f2:	78db      	ldrb	r3, [r3, #3]
 80230f4:	4618      	mov	r0, r3
 80230f6:	f7ff f971 	bl	80223dc <IsCommandNeedResponse>
 80230fa:	4603      	mov	r3, r0
 80230fc:	f083 0301 	eor.w	r3, r3, #1
 8023100:	b2db      	uxtb	r3, r3
 8023102:	2b00      	cmp	r3, #0
 8023104:	d001      	beq.n	802310a <ProcessCommand+0x46>
			{
				return ERR_OLD_SEQ_NO_RESPONSE;
 8023106:	2309      	movs	r3, #9
 8023108:	e132      	b.n	8023370 <ProcessCommand+0x2ac>
			}
			else if (GCUCommand.d.bCmdCode == LastHostCMDResponse.d.bCmdCode)
 802310a:	4b9a      	ldr	r3, [pc, #616]	; (8023374 <ProcessCommand+0x2b0>)
 802310c:	78da      	ldrb	r2, [r3, #3]
 802310e:	4b9d      	ldr	r3, [pc, #628]	; (8023384 <ProcessCommand+0x2c0>)
 8023110:	78db      	ldrb	r3, [r3, #3]
 8023112:	429a      	cmp	r2, r3
 8023114:	d109      	bne.n	802312a <ProcessCommand+0x66>
			{// command code is same with that of the stored response for the last host command.
				memcpy(&GCUResponse, &LastHostCMDResponse, (LastHostCMDResponse.d.bDataLen+FRAME_HEADER_LEN));
 8023116:	4b9b      	ldr	r3, [pc, #620]	; (8023384 <ProcessCommand+0x2c0>)
 8023118:	789b      	ldrb	r3, [r3, #2]
 802311a:	3303      	adds	r3, #3
 802311c:	461a      	mov	r2, r3
 802311e:	4999      	ldr	r1, [pc, #612]	; (8023384 <ProcessCommand+0x2c0>)
 8023120:	4896      	ldr	r0, [pc, #600]	; (802337c <ProcessCommand+0x2b8>)
 8023122:	f00b fdcb 	bl	802ecbc <memcpy>
				return ERR_OLD_SEQUENCE;
 8023126:	2308      	movs	r3, #8
 8023128:	e122      	b.n	8023370 <ProcessCommand+0x2ac>
			}
		}
		// except above case, process the command from Host 
	}
	
	SendACK();
 802312a:	f7ff f949 	bl	80223c0 <SendACK>

	gbLastHostCMD = GCUCommand.d.bCmdCode;
 802312e:	4b91      	ldr	r3, [pc, #580]	; (8023374 <ProcessCommand+0x2b0>)
 8023130:	78da      	ldrb	r2, [r3, #3]
 8023132:	4b93      	ldr	r3, [pc, #588]	; (8023380 <ProcessCommand+0x2bc>)
 8023134:	701a      	strb	r2, [r3, #0]

	switch (GCUCommand.d.bCmdCode)	// command
 8023136:	4b8f      	ldr	r3, [pc, #572]	; (8023374 <ProcessCommand+0x2b0>)
 8023138:	78db      	ldrb	r3, [r3, #3]
 802313a:	3b30      	subs	r3, #48	; 0x30
 802313c:	2b65      	cmp	r3, #101	; 0x65
 802313e:	f200 8114 	bhi.w	802336a <ProcessCommand+0x2a6>
 8023142:	a201      	add	r2, pc, #4	; (adr r2, 8023148 <ProcessCommand+0x84>)
 8023144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023148:	080232e1 	.word	0x080232e1
 802314c:	080232e7 	.word	0x080232e7
 8023150:	080232ed 	.word	0x080232ed
 8023154:	080232f3 	.word	0x080232f3
 8023158:	080232f9 	.word	0x080232f9
 802315c:	080232ff 	.word	0x080232ff
 8023160:	0802336b 	.word	0x0802336b
 8023164:	0802336b 	.word	0x0802336b
 8023168:	08023305 	.word	0x08023305
 802316c:	0802336b 	.word	0x0802336b
 8023170:	0802336b 	.word	0x0802336b
 8023174:	0802336b 	.word	0x0802336b
 8023178:	0802336b 	.word	0x0802336b
 802317c:	0802336b 	.word	0x0802336b
 8023180:	0802336b 	.word	0x0802336b
 8023184:	0802336b 	.word	0x0802336b
 8023188:	0802330b 	.word	0x0802330b
 802318c:	08023311 	.word	0x08023311
 8023190:	08023317 	.word	0x08023317
 8023194:	0802336b 	.word	0x0802336b
 8023198:	0802336b 	.word	0x0802336b
 802319c:	0802336b 	.word	0x0802336b
 80231a0:	0802336b 	.word	0x0802336b
 80231a4:	0802336b 	.word	0x0802336b
 80231a8:	0802331d 	.word	0x0802331d
 80231ac:	0802336b 	.word	0x0802336b
 80231b0:	0802336b 	.word	0x0802336b
 80231b4:	0802336b 	.word	0x0802336b
 80231b8:	0802336b 	.word	0x0802336b
 80231bc:	0802336b 	.word	0x0802336b
 80231c0:	0802336b 	.word	0x0802336b
 80231c4:	0802336b 	.word	0x0802336b
 80231c8:	0802336b 	.word	0x0802336b
 80231cc:	0802336b 	.word	0x0802336b
 80231d0:	0802336b 	.word	0x0802336b
 80231d4:	0802336b 	.word	0x0802336b
 80231d8:	0802336b 	.word	0x0802336b
 80231dc:	0802336b 	.word	0x0802336b
 80231e0:	0802336b 	.word	0x0802336b
 80231e4:	0802336b 	.word	0x0802336b
 80231e8:	0802336b 	.word	0x0802336b
 80231ec:	0802336b 	.word	0x0802336b
 80231f0:	0802336b 	.word	0x0802336b
 80231f4:	0802336b 	.word	0x0802336b
 80231f8:	0802336b 	.word	0x0802336b
 80231fc:	0802336b 	.word	0x0802336b
 8023200:	0802336b 	.word	0x0802336b
 8023204:	0802336b 	.word	0x0802336b
 8023208:	08023323 	.word	0x08023323
 802320c:	08023329 	.word	0x08023329
 8023210:	0802332f 	.word	0x0802332f
 8023214:	08023335 	.word	0x08023335
 8023218:	0802333b 	.word	0x0802333b
 802321c:	08023341 	.word	0x08023341
 8023220:	0802336b 	.word	0x0802336b
 8023224:	0802336b 	.word	0x0802336b
 8023228:	0802336b 	.word	0x0802336b
 802322c:	0802336b 	.word	0x0802336b
 8023230:	0802336b 	.word	0x0802336b
 8023234:	0802336b 	.word	0x0802336b
 8023238:	0802336b 	.word	0x0802336b
 802323c:	0802336b 	.word	0x0802336b
 8023240:	0802336b 	.word	0x0802336b
 8023244:	0802336b 	.word	0x0802336b
 8023248:	0802336b 	.word	0x0802336b
 802324c:	0802336b 	.word	0x0802336b
 8023250:	0802336b 	.word	0x0802336b
 8023254:	0802336b 	.word	0x0802336b
 8023258:	0802336b 	.word	0x0802336b
 802325c:	0802336b 	.word	0x0802336b
 8023260:	0802336b 	.word	0x0802336b
 8023264:	0802336b 	.word	0x0802336b
 8023268:	0802336b 	.word	0x0802336b
 802326c:	0802336b 	.word	0x0802336b
 8023270:	0802336b 	.word	0x0802336b
 8023274:	0802336b 	.word	0x0802336b
 8023278:	0802336b 	.word	0x0802336b
 802327c:	0802336b 	.word	0x0802336b
 8023280:	0802336b 	.word	0x0802336b
 8023284:	0802336b 	.word	0x0802336b
 8023288:	0802336b 	.word	0x0802336b
 802328c:	0802336b 	.word	0x0802336b
 8023290:	0802336b 	.word	0x0802336b
 8023294:	0802336b 	.word	0x0802336b
 8023298:	0802336b 	.word	0x0802336b
 802329c:	0802336b 	.word	0x0802336b
 80232a0:	0802336b 	.word	0x0802336b
 80232a4:	0802336b 	.word	0x0802336b
 80232a8:	0802336b 	.word	0x0802336b
 80232ac:	0802336b 	.word	0x0802336b
 80232b0:	0802336b 	.word	0x0802336b
 80232b4:	0802336b 	.word	0x0802336b
 80232b8:	0802336b 	.word	0x0802336b
 80232bc:	0802336b 	.word	0x0802336b
 80232c0:	0802336b 	.word	0x0802336b
 80232c4:	0802336b 	.word	0x0802336b
 80232c8:	08023347 	.word	0x08023347
 80232cc:	0802334d 	.word	0x0802334d
 80232d0:	08023353 	.word	0x08023353
 80232d4:	08023359 	.word	0x08023359
 80232d8:	0802335f 	.word	0x0802335f
 80232dc:	08023365 	.word	0x08023365
	{
	case CMD_SET_MODE:			CMDSetGCUOpMode();		break;
 80232e0:	f7ff f932 	bl	8022548 <CMDSetGCUOpMode>
 80232e4:	e043      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_GET_MODE:			CMDGetGCUOpMode();		break;
 80232e6:	f7ff f93d 	bl	8022564 <CMDGetGCUOpMode>
 80232ea:	e040      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_SET_PARAMETER:		CMDSetGCUParameter();	break;
 80232ec:	f7ff f94a 	bl	8022584 <CMDSetGCUParameter>
 80232f0:	e03d      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_GET_PARAMETER:		CMDGetGCUParameter();	break;
 80232f2:	f7ff f963 	bl	80225bc <CMDGetGCUParameter>
 80232f6:	e03a      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_GET_VERSION:		CMDGetVersion();		break;
 80232f8:	f7ff f974 	bl	80225e4 <CMDGetVersion>
 80232fc:	e037      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_SET_BAUD:			CMDSetBaudRate();		break;
 80232fe:	f7ff f97f 	bl	8022600 <CMDSetBaudRate>
 8023302:	e034      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_SW_RESET:			CMDResetGCU();			break;
 8023304:	f7ff f9d4 	bl	80226b0 <CMDResetGCU>
 8023308:	e031      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_AUTHORIZE:			CMDAuthorizePass();		break;
 802330a:	f7ff f9df 	bl	80226cc <CMDAuthorizePass>
 802330e:	e02e      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_CLEAR_AUTH:		CMDClearAuthorization();break;
 8023310:	f7ff fa36 	bl	8022780 <CMDClearAuthorization>
 8023314:	e02b      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_GET_STATUS:		CMDGetStatus();			break;
 8023316:	f7ff fa45 	bl	80227a4 <CMDGetStatus>
 802331a:	e028      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_GET_SENSOR_SWITCH:	CMDGetSensorSwitch();	break;
 802331c:	f7ff fa52 	bl	80227c4 <CMDGetSensorSwitch>
 8023320:	e025      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_CONTROL_ALL:		CMDControlAllLED();		break;
 8023322:	f7ff fa57 	bl	80227d4 <CMDControlAllLED>
 8023326:	e022      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_CONTROL_DOOR:		CMDControlFlapDoor();	break;
 8023328:	f7ff fa84 	bl	8022834 <CMDControlFlapDoor>
 802332c:	e01f      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_CONTROL_LAMP:		CMDControlLamp();		break;
 802332e:	f7ff faa1 	bl	8022874 <CMDControlLamp>
 8023332:	e01c      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_CONTROL_INDICATOR:	CMDControlIndicator();	break;
 8023334:	f7ff fa8a 	bl	802284c <CMDControlIndicator>
 8023338:	e019      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_CONTROL_BUZZER:	CMDControlBuzzer();		break;
 802333a:	f7ff faaf 	bl	802289c <CMDControlBuzzer>
 802333e:	e016      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_SAFETY_STOP:		CMDSafetyStop();		break;
 8023340:	f7ff faf0 	bl	8022924 <CMDSafetyStop>
 8023344:	e013      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_WRITE_REGISTER:	CMDWriteRegister();		break;
 8023346:	f7ff fb05 	bl	8022954 <CMDWriteRegister>
 802334a:	e010      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_READ_REGISTER:		CMDReadRegister();		break;
 802334c:	f7ff fcda 	bl	8022d04 <CMDReadRegister>
 8023350:	e00d      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_GET_CPLD_VERSION:	CMDGetCPLDVersion();	break;
 8023352:	f7ff fd69 	bl	8022e28 <CMDGetCPLDVersion>
 8023356:	e00a      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_GET_DIP_SWITCH:	CMDGetDipSwitch();		break;
 8023358:	f7ff fd74 	bl	8022e44 <CMDGetDipSwitch>
 802335c:	e007      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_SET_UPS_COMMAND:	CMDSetUPSCommand();		break;
 802335e:	f7ff fd85 	bl	8022e6c <CMDSetUPSCommand>
 8023362:	e004      	b.n	802336e <ProcessCommand+0x2aa>
	case CMD_GET_UPS_STATUS:	CMDGetUPSStatus();		break;
 8023364:	f7ff fda6 	bl	8022eb4 <CMDGetUPSStatus>
 8023368:	e001      	b.n	802336e <ProcessCommand+0x2aa>
	default:
		return ERR_ILLEGAL_CMD;
 802336a:	230b      	movs	r3, #11
 802336c:	e000      	b.n	8023370 <ProcessCommand+0x2ac>
	}

	return SUCCESS;
 802336e:	2300      	movs	r3, #0
}
 8023370:	4618      	mov	r0, r3
 8023372:	bd80      	pop	{r7, pc}
 8023374:	24000280 	.word	0x24000280
 8023378:	24000404 	.word	0x24000404
 802337c:	24000304 	.word	0x24000304
 8023380:	24000405 	.word	0x24000405
 8023384:	24000384 	.word	0x24000384

08023388 <ProcessComm_ECU>:
 * comments: it checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it makes action refer to the command
 *           from Host.
 *******************************************************************************/
void ProcessComm_ECU(void)
{
 8023388:	b580      	push	{r7, lr}
 802338a:	b082      	sub	sp, #8
 802338c:	af00      	add	r7, sp, #0
	int nError = CheckProtocol_UART3();
 802338e:	f7ff fda1 	bl	8022ed4 <CheckProtocol_UART3>
 8023392:	6078      	str	r0, [r7, #4]
	if (nError == SUCCESS)
 8023394:	687b      	ldr	r3, [r7, #4]
 8023396:	2b00      	cmp	r3, #0
 8023398:	d124      	bne.n	80233e4 <ProcessComm_ECU+0x5c>
	{
		nError = ProcessCommand();
 802339a:	f7ff fe93 	bl	80230c4 <ProcessCommand>
 802339e:	6078      	str	r0, [r7, #4]
		if (nError == SUCCESS)
 80233a0:	687b      	ldr	r3, [r7, #4]
 80233a2:	2b00      	cmp	r3, #0
 80233a4:	d112      	bne.n	80233cc <ProcessComm_ECU+0x44>
		{
			// if (GCUCommand.d.bCmdCode != CMD_SET_BAUD)
			if (IsCommandNeedResponse(GCUCommand.d.bCmdCode))
 80233a6:	4b1a      	ldr	r3, [pc, #104]	; (8023410 <ProcessComm_ECU+0x88>)
 80233a8:	78db      	ldrb	r3, [r3, #3]
 80233aa:	4618      	mov	r0, r3
 80233ac:	f7ff f816 	bl	80223dc <IsCommandNeedResponse>
 80233b0:	4603      	mov	r3, r0
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d027      	beq.n	8023406 <ProcessComm_ECU+0x7e>
			{
				SendResponse();
 80233b6:	f7ff f86d 	bl	8022494 <SendResponse>
				memcpy(&LastHostCMDResponse, &GCUResponse, (GCUResponse.d.bDataLen + FRAME_HEADER_LEN));
 80233ba:	4b16      	ldr	r3, [pc, #88]	; (8023414 <ProcessComm_ECU+0x8c>)
 80233bc:	789b      	ldrb	r3, [r3, #2]
 80233be:	3303      	adds	r3, #3
 80233c0:	461a      	mov	r2, r3
 80233c2:	4914      	ldr	r1, [pc, #80]	; (8023414 <ProcessComm_ECU+0x8c>)
 80233c4:	4814      	ldr	r0, [pc, #80]	; (8023418 <ProcessComm_ECU+0x90>)
 80233c6:	f00b fc79 	bl	802ecbc <memcpy>
		if ((nError == ERR_BCC) || (nError == ERR_WRONG_CMD_LEN) || (nError == ERR_DLE_PROCESS))
			SendNAK();
		else if (nError == NAK_RECEIVED)
			SendResponse();
	}
}
 80233ca:	e01c      	b.n	8023406 <ProcessComm_ECU+0x7e>
		else if (nError == ERR_OLD_SEQUENCE)
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	2b08      	cmp	r3, #8
 80233d0:	d102      	bne.n	80233d8 <ProcessComm_ECU+0x50>
			SendResponse();
 80233d2:	f7ff f85f 	bl	8022494 <SendResponse>
}
 80233d6:	e016      	b.n	8023406 <ProcessComm_ECU+0x7e>
		else if (nError == ERR_ILLEGAL_CMD)
 80233d8:	687b      	ldr	r3, [r7, #4]
 80233da:	2b0b      	cmp	r3, #11
 80233dc:	d113      	bne.n	8023406 <ProcessComm_ECU+0x7e>
			SendNAK();
 80233de:	f7fe fff6 	bl	80223ce <SendNAK>
}
 80233e2:	e010      	b.n	8023406 <ProcessComm_ECU+0x7e>
		if ((nError == ERR_BCC) || (nError == ERR_WRONG_CMD_LEN) || (nError == ERR_DLE_PROCESS))
 80233e4:	687b      	ldr	r3, [r7, #4]
 80233e6:	2b05      	cmp	r3, #5
 80233e8:	d005      	beq.n	80233f6 <ProcessComm_ECU+0x6e>
 80233ea:	687b      	ldr	r3, [r7, #4]
 80233ec:	2b0a      	cmp	r3, #10
 80233ee:	d002      	beq.n	80233f6 <ProcessComm_ECU+0x6e>
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	2b0d      	cmp	r3, #13
 80233f4:	d102      	bne.n	80233fc <ProcessComm_ECU+0x74>
			SendNAK();
 80233f6:	f7fe ffea 	bl	80223ce <SendNAK>
}
 80233fa:	e004      	b.n	8023406 <ProcessComm_ECU+0x7e>
		else if (nError == NAK_RECEIVED)
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	2b07      	cmp	r3, #7
 8023400:	d101      	bne.n	8023406 <ProcessComm_ECU+0x7e>
			SendResponse();
 8023402:	f7ff f847 	bl	8022494 <SendResponse>
}
 8023406:	bf00      	nop
 8023408:	3708      	adds	r7, #8
 802340a:	46bd      	mov	sp, r7
 802340c:	bd80      	pop	{r7, pc}
 802340e:	bf00      	nop
 8023410:	24000280 	.word	0x24000280
 8023414:	24000304 	.word	0x24000304
 8023418:	24000384 	.word	0x24000384

0802341c <CheckBarrierClosedStatus>:

/*******************************************************************************
 * Passenger Service Functions
 *******************************************************************************/
bool CheckBarrierClosedStatus()
{
 802341c:	b480      	push	{r7}
 802341e:	af00      	add	r7, sp, #0
	if (gbPowerFailFlag == FLG_OFF && gbEmergencyFlag == FLG_OFF && gfFreeMode == FALSE)
 8023420:	4b0b      	ldr	r3, [pc, #44]	; (8023450 <CheckBarrierClosedStatus+0x34>)
 8023422:	781b      	ldrb	r3, [r3, #0]
 8023424:	2b00      	cmp	r3, #0
 8023426:	d10c      	bne.n	8023442 <CheckBarrierClosedStatus+0x26>
 8023428:	4b0a      	ldr	r3, [pc, #40]	; (8023454 <CheckBarrierClosedStatus+0x38>)
 802342a:	781b      	ldrb	r3, [r3, #0]
 802342c:	2b00      	cmp	r3, #0
 802342e:	d108      	bne.n	8023442 <CheckBarrierClosedStatus+0x26>
 8023430:	4b09      	ldr	r3, [pc, #36]	; (8023458 <CheckBarrierClosedStatus+0x3c>)
 8023432:	781b      	ldrb	r3, [r3, #0]
 8023434:	f083 0301 	eor.w	r3, r3, #1
 8023438:	b2db      	uxtb	r3, r3
 802343a:	2b00      	cmp	r3, #0
 802343c:	d001      	beq.n	8023442 <CheckBarrierClosedStatus+0x26>
	{
		return TRUE;
 802343e:	2301      	movs	r3, #1
 8023440:	e000      	b.n	8023444 <CheckBarrierClosedStatus+0x28>
	}
	else
	{
		return FALSE;
 8023442:	2300      	movs	r3, #0
	}
}
 8023444:	4618      	mov	r0, r3
 8023446:	46bd      	mov	sp, r7
 8023448:	f85d 7b04 	ldr.w	r7, [sp], #4
 802344c:	4770      	bx	lr
 802344e:	bf00      	nop
 8023450:	2400012b 	.word	0x2400012b
 8023454:	2400012d 	.word	0x2400012d
 8023458:	2400043d 	.word	0x2400043d

0802345c <CheckZeroAuthCount>:

bool CheckZeroAuthCount()
{
 802345c:	b480      	push	{r7}
 802345e:	af00      	add	r7, sp, #0
	if (gGCUStatus.bAuthCount_EN == 0 && gGCUStatus.bAuthCount_EX == 0)
 8023460:	4b08      	ldr	r3, [pc, #32]	; (8023484 <CheckZeroAuthCount+0x28>)
 8023462:	791b      	ldrb	r3, [r3, #4]
 8023464:	b2db      	uxtb	r3, r3
 8023466:	2b00      	cmp	r3, #0
 8023468:	d106      	bne.n	8023478 <CheckZeroAuthCount+0x1c>
 802346a:	4b06      	ldr	r3, [pc, #24]	; (8023484 <CheckZeroAuthCount+0x28>)
 802346c:	795b      	ldrb	r3, [r3, #5]
 802346e:	b2db      	uxtb	r3, r3
 8023470:	2b00      	cmp	r3, #0
 8023472:	d101      	bne.n	8023478 <CheckZeroAuthCount+0x1c>
	{
		return TRUE;
 8023474:	2301      	movs	r3, #1
 8023476:	e000      	b.n	802347a <CheckZeroAuthCount+0x1e>
	}
	else
	{
		return FALSE;
 8023478:	2300      	movs	r3, #0
	}
}
 802347a:	4618      	mov	r0, r3
 802347c:	46bd      	mov	sp, r7
 802347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023482:	4770      	bx	lr
 8023484:	240004b0 	.word	0x240004b0

08023488 <CheckCritical>:

bool CheckCritical()
{
 8023488:	b480      	push	{r7}
 802348a:	af00      	add	r7, sp, #0
	if (gisEntryPassenger)
 802348c:	4b26      	ldr	r3, [pc, #152]	; (8023528 <CheckCritical+0xa0>)
 802348e:	781b      	ldrb	r3, [r3, #0]
 8023490:	2b00      	cmp	r3, #0
 8023492:	d01f      	beq.n	80234d4 <CheckCritical+0x4c>
	{
		if (gGCUParameter.bCriticalZone == ALARM_ZONE1)
 8023494:	4b25      	ldr	r3, [pc, #148]	; (802352c <CheckCritical+0xa4>)
 8023496:	795b      	ldrb	r3, [r3, #5]
 8023498:	2b01      	cmp	r3, #1
 802349a:	d101      	bne.n	80234a0 <CheckCritical+0x18>
			return TRUE;
 802349c:	2301      	movs	r3, #1
 802349e:	e03e      	b.n	802351e <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE2 && psenNewSwing.dirEntry.passage)
 80234a0:	4b22      	ldr	r3, [pc, #136]	; (802352c <CheckCritical+0xa4>)
 80234a2:	795b      	ldrb	r3, [r3, #5]
 80234a4:	2b02      	cmp	r3, #2
 80234a6:	d108      	bne.n	80234ba <CheckCritical+0x32>
 80234a8:	4b21      	ldr	r3, [pc, #132]	; (8023530 <CheckCritical+0xa8>)
 80234aa:	781b      	ldrb	r3, [r3, #0]
 80234ac:	f023 0303 	bic.w	r3, r3, #3
 80234b0:	b2db      	uxtb	r3, r3
 80234b2:	2b00      	cmp	r3, #0
 80234b4:	d001      	beq.n	80234ba <CheckCritical+0x32>
			return TRUE;
 80234b6:	2301      	movs	r3, #1
 80234b8:	e031      	b.n	802351e <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE3 && (psenNewSwing.b.s03))
 80234ba:	4b1c      	ldr	r3, [pc, #112]	; (802352c <CheckCritical+0xa4>)
 80234bc:	795b      	ldrb	r3, [r3, #5]
 80234be:	2b03      	cmp	r3, #3
 80234c0:	d12c      	bne.n	802351c <CheckCritical+0x94>
 80234c2:	4b1b      	ldr	r3, [pc, #108]	; (8023530 <CheckCritical+0xa8>)
 80234c4:	781b      	ldrb	r3, [r3, #0]
 80234c6:	f003 0304 	and.w	r3, r3, #4
 80234ca:	b2db      	uxtb	r3, r3
 80234cc:	2b00      	cmp	r3, #0
 80234ce:	d025      	beq.n	802351c <CheckCritical+0x94>
			return TRUE;
 80234d0:	2301      	movs	r3, #1
 80234d2:	e024      	b.n	802351e <CheckCritical+0x96>
	}
	else if (gisExitPassenger)
 80234d4:	4b17      	ldr	r3, [pc, #92]	; (8023534 <CheckCritical+0xac>)
 80234d6:	781b      	ldrb	r3, [r3, #0]
 80234d8:	2b00      	cmp	r3, #0
 80234da:	d01f      	beq.n	802351c <CheckCritical+0x94>
	{
		if (gGCUParameter.bCriticalZone == ALARM_ZONE1)
 80234dc:	4b13      	ldr	r3, [pc, #76]	; (802352c <CheckCritical+0xa4>)
 80234de:	795b      	ldrb	r3, [r3, #5]
 80234e0:	2b01      	cmp	r3, #1
 80234e2:	d101      	bne.n	80234e8 <CheckCritical+0x60>
			return TRUE;
 80234e4:	2301      	movs	r3, #1
 80234e6:	e01a      	b.n	802351e <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE2 && psenNewSwing.dirExit.passage)
 80234e8:	4b10      	ldr	r3, [pc, #64]	; (802352c <CheckCritical+0xa4>)
 80234ea:	795b      	ldrb	r3, [r3, #5]
 80234ec:	2b02      	cmp	r3, #2
 80234ee:	d108      	bne.n	8023502 <CheckCritical+0x7a>
 80234f0:	4b0f      	ldr	r3, [pc, #60]	; (8023530 <CheckCritical+0xa8>)
 80234f2:	785b      	ldrb	r3, [r3, #1]
 80234f4:	f023 0303 	bic.w	r3, r3, #3
 80234f8:	b2db      	uxtb	r3, r3
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	d001      	beq.n	8023502 <CheckCritical+0x7a>
			return TRUE;
 80234fe:	2301      	movs	r3, #1
 8023500:	e00d      	b.n	802351e <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE3 && (psenNewSwing.b.s11))
 8023502:	4b0a      	ldr	r3, [pc, #40]	; (802352c <CheckCritical+0xa4>)
 8023504:	795b      	ldrb	r3, [r3, #5]
 8023506:	2b03      	cmp	r3, #3
 8023508:	d108      	bne.n	802351c <CheckCritical+0x94>
 802350a:	4b09      	ldr	r3, [pc, #36]	; (8023530 <CheckCritical+0xa8>)
 802350c:	785b      	ldrb	r3, [r3, #1]
 802350e:	f003 0304 	and.w	r3, r3, #4
 8023512:	b2db      	uxtb	r3, r3
 8023514:	2b00      	cmp	r3, #0
 8023516:	d001      	beq.n	802351c <CheckCritical+0x94>
			return TRUE;
 8023518:	2301      	movs	r3, #1
 802351a:	e000      	b.n	802351e <CheckCritical+0x96>
	}

	return FALSE;
 802351c:	2300      	movs	r3, #0
}
 802351e:	4618      	mov	r0, r3
 8023520:	46bd      	mov	sp, r7
 8023522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023526:	4770      	bx	lr
 8023528:	2400043b 	.word	0x2400043b
 802352c:	240004a0 	.word	0x240004a0
 8023530:	2400040c 	.word	0x2400040c
 8023534:	2400043c 	.word	0x2400043c

08023538 <UpdateSensorData>:

void UpdateSensorData()
{
 8023538:	b480      	push	{r7}
 802353a:	af00      	add	r7, sp, #0
	psenNew.B.bSen1 = RD_PASSSEN1 & (~psenError.B.bSen1);
 802353c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8023540:	781b      	ldrb	r3, [r3, #0]
 8023542:	b2db      	uxtb	r3, r3
 8023544:	b25a      	sxtb	r2, r3
 8023546:	4b0e      	ldr	r3, [pc, #56]	; (8023580 <UpdateSensorData+0x48>)
 8023548:	781b      	ldrb	r3, [r3, #0]
 802354a:	b25b      	sxtb	r3, r3
 802354c:	43db      	mvns	r3, r3
 802354e:	b25b      	sxtb	r3, r3
 8023550:	4013      	ands	r3, r2
 8023552:	b25b      	sxtb	r3, r3
 8023554:	b2da      	uxtb	r2, r3
 8023556:	4b0b      	ldr	r3, [pc, #44]	; (8023584 <UpdateSensorData+0x4c>)
 8023558:	701a      	strb	r2, [r3, #0]
	psenNew.B.bSen2 = RD_PASSSEN2 & (~psenError.B.bSen2);
 802355a:	4b0b      	ldr	r3, [pc, #44]	; (8023588 <UpdateSensorData+0x50>)
 802355c:	781b      	ldrb	r3, [r3, #0]
 802355e:	b2db      	uxtb	r3, r3
 8023560:	b25a      	sxtb	r2, r3
 8023562:	4b07      	ldr	r3, [pc, #28]	; (8023580 <UpdateSensorData+0x48>)
 8023564:	785b      	ldrb	r3, [r3, #1]
 8023566:	b25b      	sxtb	r3, r3
 8023568:	43db      	mvns	r3, r3
 802356a:	b25b      	sxtb	r3, r3
 802356c:	4013      	ands	r3, r2
 802356e:	b25b      	sxtb	r3, r3
 8023570:	b2da      	uxtb	r2, r3
 8023572:	4b04      	ldr	r3, [pc, #16]	; (8023584 <UpdateSensorData+0x4c>)
 8023574:	705a      	strb	r2, [r3, #1]
}
 8023576:	bf00      	nop
 8023578:	46bd      	mov	sp, r7
 802357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802357e:	4770      	bx	lr
 8023580:	2400049c 	.word	0x2400049c
 8023584:	24000414 	.word	0x24000414
 8023588:	60000100 	.word	0x60000100

0802358c <StopBarrierForSwing>:

void StopBarrierForSwing(bool isStop)
{
 802358c:	b580      	push	{r7, lr}
 802358e:	b082      	sub	sp, #8
 8023590:	af00      	add	r7, sp, #0
 8023592:	4603      	mov	r3, r0
 8023594:	71fb      	strb	r3, [r7, #7]
	isBarrierStop = isStop;
 8023596:	4a05      	ldr	r2, [pc, #20]	; (80235ac <StopBarrierForSwing+0x20>)
 8023598:	79fb      	ldrb	r3, [r7, #7]
 802359a:	7013      	strb	r3, [r2, #0]
	Brr_StopBarrier(isStop);
 802359c:	79fb      	ldrb	r3, [r7, #7]
 802359e:	4618      	mov	r0, r3
 80235a0:	f7fd f8e2 	bl	8020768 <Brr_StopBarrier>
}
 80235a4:	bf00      	nop
 80235a6:	3708      	adds	r7, #8
 80235a8:	46bd      	mov	sp, r7
 80235aa:	bd80      	pop	{r7, pc}
 80235ac:	24000424 	.word	0x24000424

080235b0 <InitPassageModeForSwing>:

void InitPassageModeForSwing(void)
{
 80235b0:	b580      	push	{r7, lr}
 80235b2:	af00      	add	r7, sp, #0
	if (isBarrierStop == TRUE)
 80235b4:	4b95      	ldr	r3, [pc, #596]	; (802380c <InitPassageModeForSwing+0x25c>)
 80235b6:	781b      	ldrb	r3, [r3, #0]
 80235b8:	2b00      	cmp	r3, #0
 80235ba:	d005      	beq.n	80235c8 <InitPassageModeForSwing+0x18>
	{
		//PRINTL(" [InitPassageMode] Release the barrier stop");
		printf(" [InitPassageMode] Release the barrier stop \n");
 80235bc:	4894      	ldr	r0, [pc, #592]	; (8023810 <InitPassageModeForSwing+0x260>)
 80235be:	f005 fa4d 	bl	8028a5c <printf_>
		StopBarrierForSwing(FALSE);
 80235c2:	2000      	movs	r0, #0
 80235c4:	f7ff ffe2 	bl	802358c <StopBarrierForSwing>
	}

	if (gCurGCUOpMode.bEmergencyMaint && gfTestMode == FALSE)
 80235c8:	4b92      	ldr	r3, [pc, #584]	; (8023814 <InitPassageModeForSwing+0x264>)
 80235ca:	789b      	ldrb	r3, [r3, #2]
 80235cc:	2b00      	cmp	r3, #0
 80235ce:	d067      	beq.n	80236a0 <InitPassageModeForSwing+0xf0>
 80235d0:	4b91      	ldr	r3, [pc, #580]	; (8023818 <InitPassageModeForSwing+0x268>)
 80235d2:	781b      	ldrb	r3, [r3, #0]
 80235d4:	f083 0301 	eor.w	r3, r3, #1
 80235d8:	b2db      	uxtb	r3, r3
 80235da:	2b00      	cmp	r3, #0
 80235dc:	d060      	beq.n	80236a0 <InitPassageModeForSwing+0xf0>
	{
		ResetTimer(&timerReset);
 80235de:	488f      	ldr	r0, [pc, #572]	; (802381c <InitPassageModeForSwing+0x26c>)
 80235e0:	f00b faf4 	bl	802ebcc <ResetTimer>
		gbEmergencyFlag = FLG_SET;
 80235e4:	4b8e      	ldr	r3, [pc, #568]	; (8023820 <InitPassageModeForSwing+0x270>)
 80235e6:	2201      	movs	r2, #1
 80235e8:	701a      	strb	r2, [r3, #0]
		gGCUStatus.bAuthCount_EN = 0;
 80235ea:	4b8e      	ldr	r3, [pc, #568]	; (8023824 <InitPassageModeForSwing+0x274>)
 80235ec:	2200      	movs	r2, #0
 80235ee:	711a      	strb	r2, [r3, #4]
		gGCUStatus.bAuthCount_EX = 0;
 80235f0:	4b8c      	ldr	r3, [pc, #560]	; (8023824 <InitPassageModeForSwing+0x274>)
 80235f2:	2200      	movs	r2, #0
 80235f4:	715a      	strb	r2, [r3, #5]
		gbAuthDirection = FROM_NONE;
 80235f6:	4b8c      	ldr	r3, [pc, #560]	; (8023828 <InitPassageModeForSwing+0x278>)
 80235f8:	2200      	movs	r2, #0
 80235fa:	701a      	strb	r2, [r3, #0]
		gisEntryPassenger = FALSE;
 80235fc:	4b8b      	ldr	r3, [pc, #556]	; (802382c <InitPassageModeForSwing+0x27c>)
 80235fe:	2200      	movs	r2, #0
 8023600:	701a      	strb	r2, [r3, #0]
		gisExitPassenger = FALSE;
 8023602:	4b8b      	ldr	r3, [pc, #556]	; (8023830 <InitPassageModeForSwing+0x280>)
 8023604:	2200      	movs	r2, #0
 8023606:	701a      	strb	r2, [r3, #0]
		gnPassPattern = PASS_PATN_NONE;
 8023608:	4b8a      	ldr	r3, [pc, #552]	; (8023834 <InitPassageModeForSwing+0x284>)
 802360a:	2200      	movs	r2, #0
 802360c:	601a      	str	r2, [r3, #0]
		isPassOver_EN = FALSE;
 802360e:	4b8a      	ldr	r3, [pc, #552]	; (8023838 <InitPassageModeForSwing+0x288>)
 8023610:	2200      	movs	r2, #0
 8023612:	701a      	strb	r2, [r3, #0]
		isPassOver_EX = FALSE;
 8023614:	4b89      	ldr	r3, [pc, #548]	; (802383c <InitPassageModeForSwing+0x28c>)
 8023616:	2200      	movs	r2, #0
 8023618:	701a      	strb	r2, [r3, #0]
		timerAuthorize.fStart = FALSE;
 802361a:	4b89      	ldr	r3, [pc, #548]	; (8023840 <InitPassageModeForSwing+0x290>)
 802361c:	2200      	movs	r2, #0
 802361e:	701a      	strb	r2, [r3, #0]
		timerPassageClear.fStart = FALSE;
 8023620:	4b88      	ldr	r3, [pc, #544]	; (8023844 <InitPassageModeForSwing+0x294>)
 8023622:	2200      	movs	r2, #0
 8023624:	701a      	strb	r2, [r3, #0]
		timerSafety.fStart = FALSE;
 8023626:	4b88      	ldr	r3, [pc, #544]	; (8023848 <InitPassageModeForSwing+0x298>)
 8023628:	2200      	movs	r2, #0
 802362a:	701a      	strb	r2, [r3, #0]
		bPassPattern_EN = PASS_PATN_NONE;
 802362c:	4b87      	ldr	r3, [pc, #540]	; (802384c <InitPassageModeForSwing+0x29c>)
 802362e:	2200      	movs	r2, #0
 8023630:	701a      	strb	r2, [r3, #0]
		bPassPattern_EX = PASS_PATN_NONE;
 8023632:	4b87      	ldr	r3, [pc, #540]	; (8023850 <InitPassageModeForSwing+0x2a0>)
 8023634:	2200      	movs	r2, #0
 8023636:	701a      	strb	r2, [r3, #0]

		//PRINTL(" [InitPassageMode] bEmergencyMaint: %d", gCurGCUOpMode.bEmergencyMaint);.
		printf(" [InitPassageMode] bEmergencyMaint: %d \n", gCurGCUOpMode.bEmergencyMaint);
 8023638:	4b76      	ldr	r3, [pc, #472]	; (8023814 <InitPassageModeForSwing+0x264>)
 802363a:	789b      	ldrb	r3, [r3, #2]
 802363c:	4619      	mov	r1, r3
 802363e:	4885      	ldr	r0, [pc, #532]	; (8023854 <InitPassageModeForSwing+0x2a4>)
 8023640:	f005 fa0c 	bl	8028a5c <printf_>

		Brr_SetEmergency(TRUE);
 8023644:	2001      	movs	r0, #1
 8023646:	f7fd f81d 	bl	8020684 <Brr_SetEmergency>

		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 802364a:	4b72      	ldr	r3, [pc, #456]	; (8023814 <InitPassageModeForSwing+0x264>)
 802364c:	789b      	ldrb	r3, [r3, #2]
 802364e:	f003 0303 	and.w	r3, r3, #3
 8023652:	2b00      	cmp	r3, #0
 8023654:	d007      	beq.n	8023666 <InitPassageModeForSwing+0xb6>
		{
			ControlDirectionLED(DIR_RED, DIR_GREEN);
 8023656:	2101      	movs	r1, #1
 8023658:	2002      	movs	r0, #2
 802365a:	f7fd ff91 	bl	8021580 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_SET);
 802365e:	2001      	movs	r0, #1
 8023660:	f7fe f872 	bl	8021748 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 8023664:	e0ce      	b.n	8023804 <InitPassageModeForSwing+0x254>
		}
		else if (gCurGCUOpMode.bEmergencyMaint & MAINTENANCE_MODE)
 8023666:	4b6b      	ldr	r3, [pc, #428]	; (8023814 <InitPassageModeForSwing+0x264>)
 8023668:	789b      	ldrb	r3, [r3, #2]
 802366a:	f003 0310 	and.w	r3, r3, #16
 802366e:	2b00      	cmp	r3, #0
 8023670:	d007      	beq.n	8023682 <InitPassageModeForSwing+0xd2>
		{
			ControlDirectionLED(DIR_RED, DIR_RED);
 8023672:	2102      	movs	r1, #2
 8023674:	2002      	movs	r0, #2
 8023676:	f7fd ff83 	bl	8021580 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_OFF);
 802367a:	2000      	movs	r0, #0
 802367c:	f7fe f864 	bl	8021748 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 8023680:	e0c0      	b.n	8023804 <InitPassageModeForSwing+0x254>
		}
		else if (gCurGCUOpMode.bEmergencyMaint & FREE_MODE)
 8023682:	4b64      	ldr	r3, [pc, #400]	; (8023814 <InitPassageModeForSwing+0x264>)
 8023684:	789b      	ldrb	r3, [r3, #2]
 8023686:	f003 0320 	and.w	r3, r3, #32
 802368a:	2b00      	cmp	r3, #0
 802368c:	f000 80ba 	beq.w	8023804 <InitPassageModeForSwing+0x254>
		{
			ControlDirectionLED(DIR_GREEN, DIR_GREEN);
 8023690:	2101      	movs	r1, #1
 8023692:	2001      	movs	r0, #1
 8023694:	f7fd ff74 	bl	8021580 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_OFF);
 8023698:	2000      	movs	r0, #0
 802369a:	f7fe f855 	bl	8021748 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 802369e:	e0b1      	b.n	8023804 <InitPassageModeForSwing+0x254>
		}
	}
	else
	{
		bPassPattern_EN = PASS_PATN_NONE;
 80236a0:	4b6a      	ldr	r3, [pc, #424]	; (802384c <InitPassageModeForSwing+0x29c>)
 80236a2:	2200      	movs	r2, #0
 80236a4:	701a      	strb	r2, [r3, #0]
		bPassPattern_EX = PASS_PATN_NONE;
 80236a6:	4b6a      	ldr	r3, [pc, #424]	; (8023850 <InitPassageModeForSwing+0x2a0>)
 80236a8:	2200      	movs	r2, #0
 80236aa:	701a      	strb	r2, [r3, #0]

		if (FLG_SET == gbEmergencyFlag && gfTestMode == FALSE)
 80236ac:	4b5c      	ldr	r3, [pc, #368]	; (8023820 <InitPassageModeForSwing+0x270>)
 80236ae:	781b      	ldrb	r3, [r3, #0]
 80236b0:	2b01      	cmp	r3, #1
 80236b2:	d115      	bne.n	80236e0 <InitPassageModeForSwing+0x130>
 80236b4:	4b58      	ldr	r3, [pc, #352]	; (8023818 <InitPassageModeForSwing+0x268>)
 80236b6:	781b      	ldrb	r3, [r3, #0]
 80236b8:	f083 0301 	eor.w	r3, r3, #1
 80236bc:	b2db      	uxtb	r3, r3
 80236be:	2b00      	cmp	r3, #0
 80236c0:	d00e      	beq.n	80236e0 <InitPassageModeForSwing+0x130>
		{
			//PRINTL(" [InitPassageMode] Safety Check for mode change!!");
			printf(" [InitPassageMode] Safety Check for mode change!! \n");
 80236c2:	4865      	ldr	r0, [pc, #404]	; (8023858 <InitPassageModeForSwing+0x2a8>)
 80236c4:	f005 f9ca 	bl	8028a5c <printf_>
			ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, 2);
 80236c8:	2202      	movs	r2, #2
 80236ca:	2101      	movs	r1, #1
 80236cc:	2000      	movs	r0, #0
 80236ce:	f7fd fefd 	bl	80214cc <ControlBuzzer>
			dwResetTime = 30;
 80236d2:	4b62      	ldr	r3, [pc, #392]	; (802385c <InitPassageModeForSwing+0x2ac>)
 80236d4:	221e      	movs	r2, #30
 80236d6:	601a      	str	r2, [r3, #0]
			SetTimer(&timerReset);
 80236d8:	4850      	ldr	r0, [pc, #320]	; (802381c <InitPassageModeForSwing+0x26c>)
 80236da:	f00b fa63 	bl	802eba4 <SetTimer>
 80236de:	e092      	b.n	8023806 <InitPassageModeForSwing+0x256>
		}
		else
		{
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 80236e0:	4b4c      	ldr	r3, [pc, #304]	; (8023814 <InitPassageModeForSwing+0x264>)
 80236e2:	781b      	ldrb	r3, [r3, #0]
 80236e4:	2b00      	cmp	r3, #0
 80236e6:	d008      	beq.n	80236fa <InitPassageModeForSwing+0x14a>
				((gCurGCUOpMode.bServiceMode_EN == FREE_SERVICE) && !psenNewSwing.side.entry))
 80236e8:	4b4a      	ldr	r3, [pc, #296]	; (8023814 <InitPassageModeForSwing+0x264>)
 80236ea:	781b      	ldrb	r3, [r3, #0]
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 80236ec:	2b02      	cmp	r3, #2
 80236ee:	d107      	bne.n	8023700 <InitPassageModeForSwing+0x150>
				((gCurGCUOpMode.bServiceMode_EN == FREE_SERVICE) && !psenNewSwing.side.entry))
 80236f0:	4b5b      	ldr	r3, [pc, #364]	; (8023860 <InitPassageModeForSwing+0x2b0>)
 80236f2:	f993 3000 	ldrsb.w	r3, [r3]
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	d102      	bne.n	8023700 <InitPassageModeForSwing+0x150>
				gGCUStatus.bAuthCount_EN = 0;
 80236fa:	4b4a      	ldr	r3, [pc, #296]	; (8023824 <InitPassageModeForSwing+0x274>)
 80236fc:	2200      	movs	r2, #0
 80236fe:	711a      	strb	r2, [r3, #4]

			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 8023700:	4b44      	ldr	r3, [pc, #272]	; (8023814 <InitPassageModeForSwing+0x264>)
 8023702:	785b      	ldrb	r3, [r3, #1]
 8023704:	2b00      	cmp	r3, #0
 8023706:	d008      	beq.n	802371a <InitPassageModeForSwing+0x16a>
				((gCurGCUOpMode.bServiceMode_EX == FREE_SERVICE) && !psenNewSwing.side.exit))
 8023708:	4b42      	ldr	r3, [pc, #264]	; (8023814 <InitPassageModeForSwing+0x264>)
 802370a:	785b      	ldrb	r3, [r3, #1]
			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 802370c:	2b02      	cmp	r3, #2
 802370e:	d107      	bne.n	8023720 <InitPassageModeForSwing+0x170>
				((gCurGCUOpMode.bServiceMode_EX == FREE_SERVICE) && !psenNewSwing.side.exit))
 8023710:	4b53      	ldr	r3, [pc, #332]	; (8023860 <InitPassageModeForSwing+0x2b0>)
 8023712:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8023716:	2b00      	cmp	r3, #0
 8023718:	d102      	bne.n	8023720 <InitPassageModeForSwing+0x170>
				gGCUStatus.bAuthCount_EX = 0;
 802371a:	4b42      	ldr	r3, [pc, #264]	; (8023824 <InitPassageModeForSwing+0x274>)
 802371c:	2200      	movs	r2, #0
 802371e:	715a      	strb	r2, [r3, #5]

			if (gGCUStatus.bAuthCount_EN || gGCUStatus.bAuthCount_EX)
 8023720:	4b40      	ldr	r3, [pc, #256]	; (8023824 <InitPassageModeForSwing+0x274>)
 8023722:	791b      	ldrb	r3, [r3, #4]
 8023724:	b2db      	uxtb	r3, r3
 8023726:	2b00      	cmp	r3, #0
 8023728:	d104      	bne.n	8023734 <InitPassageModeForSwing+0x184>
 802372a:	4b3e      	ldr	r3, [pc, #248]	; (8023824 <InitPassageModeForSwing+0x274>)
 802372c:	795b      	ldrb	r3, [r3, #5]
 802372e:	b2db      	uxtb	r3, r3
 8023730:	2b00      	cmp	r3, #0
 8023732:	d011      	beq.n	8023758 <InitPassageModeForSwing+0x1a8>
			{
				if (gGCUStatus.bAuthCount_EN)
 8023734:	4b3b      	ldr	r3, [pc, #236]	; (8023824 <InitPassageModeForSwing+0x274>)
 8023736:	791b      	ldrb	r3, [r3, #4]
 8023738:	b2db      	uxtb	r3, r3
 802373a:	2b00      	cmp	r3, #0
 802373c:	d003      	beq.n	8023746 <InitPassageModeForSwing+0x196>
					ControlBarrier(BARRIER_OPEN_FOR_EN);
 802373e:	2002      	movs	r0, #2
 8023740:	f7fd fe8c 	bl	802145c <ControlBarrier>
				if (gGCUStatus.bAuthCount_EN)
 8023744:	e014      	b.n	8023770 <InitPassageModeForSwing+0x1c0>
				else if (gGCUStatus.bAuthCount_EX)
 8023746:	4b37      	ldr	r3, [pc, #220]	; (8023824 <InitPassageModeForSwing+0x274>)
 8023748:	795b      	ldrb	r3, [r3, #5]
 802374a:	b2db      	uxtb	r3, r3
 802374c:	2b00      	cmp	r3, #0
 802374e:	d00f      	beq.n	8023770 <InitPassageModeForSwing+0x1c0>
					ControlBarrier(BARRIER_OPEN_FOR_EX);
 8023750:	2001      	movs	r0, #1
 8023752:	f7fd fe83 	bl	802145c <ControlBarrier>
				if (gGCUStatus.bAuthCount_EN)
 8023756:	e00b      	b.n	8023770 <InitPassageModeForSwing+0x1c0>
			}
			else
			{
				if (gbPowerFailFlag == FLG_SET)
 8023758:	4b42      	ldr	r3, [pc, #264]	; (8023864 <InitPassageModeForSwing+0x2b4>)
 802375a:	781b      	ldrb	r3, [r3, #0]
 802375c:	2b01      	cmp	r3, #1
 802375e:	d103      	bne.n	8023768 <InitPassageModeForSwing+0x1b8>
					ControlBarrier(BARRIER_OPEN_FOR_EX);
 8023760:	2001      	movs	r0, #1
 8023762:	f7fd fe7b 	bl	802145c <ControlBarrier>
 8023766:	e004      	b.n	8023772 <InitPassageModeForSwing+0x1c2>
				else //  if (gCurGCUOpMode.bEmergencyMaint == MAINTENANCE_MODE)
					ControlBarrier(BARRIER_CLOSE_S);
 8023768:	2003      	movs	r0, #3
 802376a:	f7fd fe77 	bl	802145c <ControlBarrier>
 802376e:	e000      	b.n	8023772 <InitPassageModeForSwing+0x1c2>
				if (gGCUStatus.bAuthCount_EN)
 8023770:	bf00      	nop
			}

			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 8023772:	4b28      	ldr	r3, [pc, #160]	; (8023814 <InitPassageModeForSwing+0x264>)
 8023774:	781b      	ldrb	r3, [r3, #0]
 8023776:	2b00      	cmp	r3, #0
 8023778:	d008      	beq.n	802378c <InitPassageModeForSwing+0x1dc>
				(gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 802377a:	4b2a      	ldr	r3, [pc, #168]	; (8023824 <InitPassageModeForSwing+0x274>)
 802377c:	795b      	ldrb	r3, [r3, #5]
 802377e:	b2db      	uxtb	r3, r3
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 8023780:	2b00      	cmp	r3, #0
 8023782:	d007      	beq.n	8023794 <InitPassageModeForSwing+0x1e4>
				(gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 8023784:	4b23      	ldr	r3, [pc, #140]	; (8023814 <InitPassageModeForSwing+0x264>)
 8023786:	781b      	ldrb	r3, [r3, #0]
 8023788:	2b01      	cmp	r3, #1
 802378a:	d103      	bne.n	8023794 <InitPassageModeForSwing+0x1e4>
				gbLampCMD_EN = DIR_RED;
 802378c:	4b36      	ldr	r3, [pc, #216]	; (8023868 <InitPassageModeForSwing+0x2b8>)
 802378e:	2202      	movs	r2, #2
 8023790:	701a      	strb	r2, [r3, #0]
 8023792:	e002      	b.n	802379a <InitPassageModeForSwing+0x1ea>
			else
				gbLampCMD_EN = DIR_GREEN;
 8023794:	4b34      	ldr	r3, [pc, #208]	; (8023868 <InitPassageModeForSwing+0x2b8>)
 8023796:	2201      	movs	r2, #1
 8023798:	701a      	strb	r2, [r3, #0]

			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 802379a:	4b1e      	ldr	r3, [pc, #120]	; (8023814 <InitPassageModeForSwing+0x264>)
 802379c:	785b      	ldrb	r3, [r3, #1]
 802379e:	2b00      	cmp	r3, #0
 80237a0:	d008      	beq.n	80237b4 <InitPassageModeForSwing+0x204>
				(gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80237a2:	4b20      	ldr	r3, [pc, #128]	; (8023824 <InitPassageModeForSwing+0x274>)
 80237a4:	791b      	ldrb	r3, [r3, #4]
 80237a6:	b2db      	uxtb	r3, r3
			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	d007      	beq.n	80237bc <InitPassageModeForSwing+0x20c>
				(gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80237ac:	4b19      	ldr	r3, [pc, #100]	; (8023814 <InitPassageModeForSwing+0x264>)
 80237ae:	785b      	ldrb	r3, [r3, #1]
 80237b0:	2b01      	cmp	r3, #1
 80237b2:	d103      	bne.n	80237bc <InitPassageModeForSwing+0x20c>
				gbLampCMD_EX = DIR_RED;
 80237b4:	4b2d      	ldr	r3, [pc, #180]	; (802386c <InitPassageModeForSwing+0x2bc>)
 80237b6:	2202      	movs	r2, #2
 80237b8:	701a      	strb	r2, [r3, #0]
 80237ba:	e002      	b.n	80237c2 <InitPassageModeForSwing+0x212>
			else
				gbLampCMD_EX = DIR_GREEN;
 80237bc:	4b2b      	ldr	r3, [pc, #172]	; (802386c <InitPassageModeForSwing+0x2bc>)
 80237be:	2201      	movs	r2, #1
 80237c0:	701a      	strb	r2, [r3, #0]

			ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 80237c2:	2200      	movs	r2, #0
 80237c4:	2100      	movs	r1, #0
 80237c6:	2000      	movs	r0, #0
 80237c8:	f7fd fe80 	bl	80214cc <ControlBuzzer>
			ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 80237cc:	4b26      	ldr	r3, [pc, #152]	; (8023868 <InitPassageModeForSwing+0x2b8>)
 80237ce:	781b      	ldrb	r3, [r3, #0]
 80237d0:	4a26      	ldr	r2, [pc, #152]	; (802386c <InitPassageModeForSwing+0x2bc>)
 80237d2:	7812      	ldrb	r2, [r2, #0]
 80237d4:	4611      	mov	r1, r2
 80237d6:	4618      	mov	r0, r3
 80237d8:	f7fd fed2 	bl	8021580 <ControlDirectionLED>
			ControlIndicator(gbIndicatorCMD_EN, gbIndicatorCMD_EX, 0, FALSE);
 80237dc:	4b24      	ldr	r3, [pc, #144]	; (8023870 <InitPassageModeForSwing+0x2c0>)
 80237de:	7818      	ldrb	r0, [r3, #0]
 80237e0:	4b24      	ldr	r3, [pc, #144]	; (8023874 <InitPassageModeForSwing+0x2c4>)
 80237e2:	7819      	ldrb	r1, [r3, #0]
 80237e4:	2300      	movs	r3, #0
 80237e6:	2200      	movs	r2, #0
 80237e8:	f7fd ff26 	bl	8021638 <ControlIndicator>

			if (CheckZeroAuthCount())
 80237ec:	f7ff fe36 	bl	802345c <CheckZeroAuthCount>
 80237f0:	4603      	mov	r3, r0
 80237f2:	2b00      	cmp	r3, #0
 80237f4:	d007      	beq.n	8023806 <InitPassageModeForSwing+0x256>
			{
				//PRINTL(" [InitPassageMode] ResetAuthTimer!!");
				printf(" [InitPassageMode] ResetAuthTimer!! \n");
 80237f6:	4820      	ldr	r0, [pc, #128]	; (8023878 <InitPassageModeForSwing+0x2c8>)
 80237f8:	f005 f930 	bl	8028a5c <printf_>
				ResetTimer(&timerAuthorize);
 80237fc:	4810      	ldr	r0, [pc, #64]	; (8023840 <InitPassageModeForSwing+0x290>)
 80237fe:	f00b f9e5 	bl	802ebcc <ResetTimer>
			}
		}
	}
}
 8023802:	e000      	b.n	8023806 <InitPassageModeForSwing+0x256>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 8023804:	bf00      	nop
}
 8023806:	bf00      	nop
 8023808:	bd80      	pop	{r7, pc}
 802380a:	bf00      	nop
 802380c:	24000424 	.word	0x24000424
 8023810:	080304fc 	.word	0x080304fc
 8023814:	240004d4 	.word	0x240004d4
 8023818:	2400043e 	.word	0x2400043e
 802381c:	2400022c 	.word	0x2400022c
 8023820:	2400012d 	.word	0x2400012d
 8023824:	240004b0 	.word	0x240004b0
 8023828:	2400012e 	.word	0x2400012e
 802382c:	2400043b 	.word	0x2400043b
 8023830:	2400043c 	.word	0x2400043c
 8023834:	24000440 	.word	0x24000440
 8023838:	2400041e 	.word	0x2400041e
 802383c:	2400041f 	.word	0x2400041f
 8023840:	24000160 	.word	0x24000160
 8023844:	2400016c 	.word	0x2400016c
 8023848:	240001e4 	.word	0x240001e4
 802384c:	2400041a 	.word	0x2400041a
 8023850:	2400041b 	.word	0x2400041b
 8023854:	0803052c 	.word	0x0803052c
 8023858:	08030558 	.word	0x08030558
 802385c:	2400000c 	.word	0x2400000c
 8023860:	2400040c 	.word	0x2400040c
 8023864:	2400012b 	.word	0x2400012b
 8023868:	24000129 	.word	0x24000129
 802386c:	2400012a 	.word	0x2400012a
 8023870:	24000127 	.word	0x24000127
 8023874:	24000128 	.word	0x24000128
 8023878:	0803058c 	.word	0x0803058c

0802387c <CloseBarrierForSwing>:

void CloseBarrierForSwing(void)
{
 802387c:	b580      	push	{r7, lr}
 802387e:	af00      	add	r7, sp, #0
	if (gfTestMode == TRUE || CheckBarrierClosedStatus())
 8023880:	4b0b      	ldr	r3, [pc, #44]	; (80238b0 <CloseBarrierForSwing+0x34>)
 8023882:	781b      	ldrb	r3, [r3, #0]
 8023884:	2b00      	cmp	r3, #0
 8023886:	d104      	bne.n	8023892 <CloseBarrierForSwing+0x16>
 8023888:	f7ff fdc8 	bl	802341c <CheckBarrierClosedStatus>
 802388c:	4603      	mov	r3, r0
 802388e:	2b00      	cmp	r3, #0
 8023890:	d00b      	beq.n	80238aa <CloseBarrierForSwing+0x2e>
	{
		if (isBarrierStop == TRUE)
 8023892:	4b08      	ldr	r3, [pc, #32]	; (80238b4 <CloseBarrierForSwing+0x38>)
 8023894:	781b      	ldrb	r3, [r3, #0]
 8023896:	2b00      	cmp	r3, #0
 8023898:	d002      	beq.n	80238a0 <CloseBarrierForSwing+0x24>
		{
			StopBarrierForSwing(FALSE);
 802389a:	2000      	movs	r0, #0
 802389c:	f7ff fe76 	bl	802358c <StopBarrierForSwing>
		}

		isForceOpen = FALSE;
 80238a0:	4b05      	ldr	r3, [pc, #20]	; (80238b8 <CloseBarrierForSwing+0x3c>)
 80238a2:	2200      	movs	r2, #0
 80238a4:	701a      	strb	r2, [r3, #0]
		Brr_CloseBarrier();
 80238a6:	f7fc ff4f 	bl	8020748 <Brr_CloseBarrier>
	}
}
 80238aa:	bf00      	nop
 80238ac:	bd80      	pop	{r7, pc}
 80238ae:	bf00      	nop
 80238b0:	2400043e 	.word	0x2400043e
 80238b4:	24000424 	.word	0x24000424
 80238b8:	24000425 	.word	0x24000425

080238bc <CheckBarrierOperation>:

void CheckBarrierOperation(void)
{
 80238bc:	b580      	push	{r7, lr}
 80238be:	af00      	add	r7, sp, #0
	if (gfTestMode == FALSE && timerBarrierCheck.fStart)
 80238c0:	4b9a      	ldr	r3, [pc, #616]	; (8023b2c <CheckBarrierOperation+0x270>)
 80238c2:	781b      	ldrb	r3, [r3, #0]
 80238c4:	f083 0301 	eor.w	r3, r3, #1
 80238c8:	b2db      	uxtb	r3, r3
 80238ca:	2b00      	cmp	r3, #0
 80238cc:	f000 81d0 	beq.w	8023c70 <CheckBarrierOperation+0x3b4>
 80238d0:	4b97      	ldr	r3, [pc, #604]	; (8023b30 <CheckBarrierOperation+0x274>)
 80238d2:	781b      	ldrb	r3, [r3, #0]
 80238d4:	2b00      	cmp	r3, #0
 80238d6:	f000 81cb 	beq.w	8023c70 <CheckBarrierOperation+0x3b4>
	{
		if (IsTimeout(&timerBarrierCheck, dwBarrierCheckTime * TICK_COUNT_100MS))
 80238da:	4b96      	ldr	r3, [pc, #600]	; (8023b34 <CheckBarrierOperation+0x278>)
 80238dc:	681a      	ldr	r2, [r3, #0]
 80238de:	4613      	mov	r3, r2
 80238e0:	009b      	lsls	r3, r3, #2
 80238e2:	4413      	add	r3, r2
 80238e4:	005b      	lsls	r3, r3, #1
 80238e6:	4619      	mov	r1, r3
 80238e8:	4891      	ldr	r0, [pc, #580]	; (8023b30 <CheckBarrierOperation+0x274>)
 80238ea:	f00b f97d 	bl	802ebe8 <IsTimeout>
 80238ee:	4603      	mov	r3, r0
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	f000 81c1 	beq.w	8023c78 <CheckBarrierOperation+0x3bc>
		{
			ResetTimer(&timerBarrierCheck);
 80238f6:	488e      	ldr	r0, [pc, #568]	; (8023b30 <CheckBarrierOperation+0x274>)
 80238f8:	f00b f968 	bl	802ebcc <ResetTimer>

			// PRINTL(" =[%d]= ", gbBarrierCmd);
			if (gGCUStatus.ModuleAlarm.b.nFDoor1 != FDOOR_ALARM_NONE || gGCUStatus.ModuleAlarm.b.nFDoor2 != FDOOR_ALARM_NONE)
 80238fc:	4b8e      	ldr	r3, [pc, #568]	; (8023b38 <CheckBarrierOperation+0x27c>)
 80238fe:	7b1b      	ldrb	r3, [r3, #12]
 8023900:	f003 0303 	and.w	r3, r3, #3
 8023904:	b2db      	uxtb	r3, r3
 8023906:	2b00      	cmp	r3, #0
 8023908:	d106      	bne.n	8023918 <CheckBarrierOperation+0x5c>
 802390a:	4b8b      	ldr	r3, [pc, #556]	; (8023b38 <CheckBarrierOperation+0x27c>)
 802390c:	7b1b      	ldrb	r3, [r3, #12]
 802390e:	f003 030c 	and.w	r3, r3, #12
 8023912:	b2db      	uxtb	r3, r3
 8023914:	2b00      	cmp	r3, #0
 8023916:	d00e      	beq.n	8023936 <CheckBarrierOperation+0x7a>
			{
				//PRINTL(" [BarrierStatus] BNC:%d/%d", gGCUStatus.ModuleAlarm.b.nFDoor1, gGCUStatus.ModuleAlarm.b.nFDoor2);
				printf(" [BarrierStatus] BNC:%d/%d \n", gGCUStatus.ModuleAlarm.b.nFDoor1, gGCUStatus.ModuleAlarm.b.nFDoor2);
 8023918:	4b87      	ldr	r3, [pc, #540]	; (8023b38 <CheckBarrierOperation+0x27c>)
 802391a:	7b1b      	ldrb	r3, [r3, #12]
 802391c:	f343 0301 	sbfx	r3, r3, #0, #2
 8023920:	b25b      	sxtb	r3, r3
 8023922:	4619      	mov	r1, r3
 8023924:	4b84      	ldr	r3, [pc, #528]	; (8023b38 <CheckBarrierOperation+0x27c>)
 8023926:	7b1b      	ldrb	r3, [r3, #12]
 8023928:	f343 0381 	sbfx	r3, r3, #2, #2
 802392c:	b25b      	sxtb	r3, r3
 802392e:	461a      	mov	r2, r3
 8023930:	4882      	ldr	r0, [pc, #520]	; (8023b3c <CheckBarrierOperation+0x280>)
 8023932:	f005 f893 	bl	8028a5c <printf_>
			}

			// PRINTL(" [BarrierStatus] act:%d/%d", gMainBarrierStatus.param.actStatus, gSubBarrierStatus.param.actStatus);
			// PRINTL(" [BarrierStatus] Running:%d/%d", gfMainBarrierRunning, gfSubBarrierRunning);

			if ((gfMainBarrierRunning == FALSE || gMainBarrierStatus.param.actStatus == 0) &&
 8023936:	4b82      	ldr	r3, [pc, #520]	; (8023b40 <CheckBarrierOperation+0x284>)
 8023938:	781b      	ldrb	r3, [r3, #0]
 802393a:	f083 0301 	eor.w	r3, r3, #1
 802393e:	b2db      	uxtb	r3, r3
 8023940:	2b00      	cmp	r3, #0
 8023942:	d107      	bne.n	8023954 <CheckBarrierOperation+0x98>
 8023944:	4b7f      	ldr	r3, [pc, #508]	; (8023b44 <CheckBarrierOperation+0x288>)
 8023946:	791b      	ldrb	r3, [r3, #4]
 8023948:	f003 0308 	and.w	r3, r3, #8
 802394c:	b2db      	uxtb	r3, r3
 802394e:	2b00      	cmp	r3, #0
 8023950:	f040 814f 	bne.w	8023bf2 <CheckBarrierOperation+0x336>
				(gfSubBarrierRunning == FALSE || gSubBarrierStatus.param.actStatus == 0))
 8023954:	4b7c      	ldr	r3, [pc, #496]	; (8023b48 <CheckBarrierOperation+0x28c>)
 8023956:	781b      	ldrb	r3, [r3, #0]
 8023958:	f083 0301 	eor.w	r3, r3, #1
 802395c:	b2db      	uxtb	r3, r3
			if ((gfMainBarrierRunning == FALSE || gMainBarrierStatus.param.actStatus == 0) &&
 802395e:	2b00      	cmp	r3, #0
 8023960:	d107      	bne.n	8023972 <CheckBarrierOperation+0xb6>
				(gfSubBarrierRunning == FALSE || gSubBarrierStatus.param.actStatus == 0))
 8023962:	4b7a      	ldr	r3, [pc, #488]	; (8023b4c <CheckBarrierOperation+0x290>)
 8023964:	791b      	ldrb	r3, [r3, #4]
 8023966:	f003 0308 	and.w	r3, r3, #8
 802396a:	b2db      	uxtb	r3, r3
 802396c:	2b00      	cmp	r3, #0
 802396e:	f040 8140 	bne.w	8023bf2 <CheckBarrierOperation+0x336>
			{
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023972:	4b77      	ldr	r3, [pc, #476]	; (8023b50 <CheckBarrierOperation+0x294>)
 8023974:	781b      	ldrb	r3, [r3, #0]
 8023976:	2b02      	cmp	r3, #2
 8023978:	d007      	beq.n	802398a <CheckBarrierOperation+0xce>
 802397a:	4b75      	ldr	r3, [pc, #468]	; (8023b50 <CheckBarrierOperation+0x294>)
 802397c:	781b      	ldrb	r3, [r3, #0]
 802397e:	2b01      	cmp	r3, #1
 8023980:	d003      	beq.n	802398a <CheckBarrierOperation+0xce>
 8023982:	4b74      	ldr	r3, [pc, #464]	; (8023b54 <CheckBarrierOperation+0x298>)
 8023984:	781b      	ldrb	r3, [r3, #0]
 8023986:	2b01      	cmp	r3, #1
 8023988:	d140      	bne.n	8023a0c <CheckBarrierOperation+0x150>
				{
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 802398a:	4b6d      	ldr	r3, [pc, #436]	; (8023b40 <CheckBarrierOperation+0x284>)
 802398c:	781b      	ldrb	r3, [r3, #0]
 802398e:	2b00      	cmp	r3, #0
 8023990:	d103      	bne.n	802399a <CheckBarrierOperation+0xde>
						(gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_OPEN))
 8023992:	4b6d      	ldr	r3, [pc, #436]	; (8023b48 <CheckBarrierOperation+0x28c>)
 8023994:	781b      	ldrb	r3, [r3, #0]
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 8023996:	2b00      	cmp	r3, #0
 8023998:	d00c      	beq.n	80239b4 <CheckBarrierOperation+0xf8>
					{
						if (isCounterEnter == FALSE)
 802399a:	4b6f      	ldr	r3, [pc, #444]	; (8023b58 <CheckBarrierOperation+0x29c>)
 802399c:	781b      	ldrb	r3, [r3, #0]
 802399e:	f083 0301 	eor.w	r3, r3, #1
 80239a2:	b2db      	uxtb	r3, r3
 80239a4:	2b00      	cmp	r3, #0
 80239a6:	d030      	beq.n	8023a0a <CheckBarrierOperation+0x14e>
						{
							ControlBarrier(gbBarrierCmd);
 80239a8:	4b69      	ldr	r3, [pc, #420]	; (8023b50 <CheckBarrierOperation+0x294>)
 80239aa:	781b      	ldrb	r3, [r3, #0]
 80239ac:	4618      	mov	r0, r3
 80239ae:	f7fd fd55 	bl	802145c <ControlBarrier>
						if (isCounterEnter == FALSE)
 80239b2:	e02a      	b.n	8023a0a <CheckBarrierOperation+0x14e>
						}
					}
					else if (isSafetyOn4Init == FALSE)
 80239b4:	4b69      	ldr	r3, [pc, #420]	; (8023b5c <CheckBarrierOperation+0x2a0>)
 80239b6:	781b      	ldrb	r3, [r3, #0]
 80239b8:	f083 0301 	eor.w	r3, r3, #1
 80239bc:	b2db      	uxtb	r3, r3
 80239be:	2b00      	cmp	r3, #0
 80239c0:	f000 8113 	beq.w	8023bea <CheckBarrierOperation+0x32e>
					{
						nBarrierErrorCnt = 0;
 80239c4:	4b66      	ldr	r3, [pc, #408]	; (8023b60 <CheckBarrierOperation+0x2a4>)
 80239c6:	2200      	movs	r2, #0
 80239c8:	601a      	str	r2, [r3, #0]
						gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_NONE;
 80239ca:	4a5b      	ldr	r2, [pc, #364]	; (8023b38 <CheckBarrierOperation+0x27c>)
 80239cc:	7b13      	ldrb	r3, [r2, #12]
 80239ce:	f36f 0301 	bfc	r3, #0, #2
 80239d2:	7313      	strb	r3, [r2, #12]
						gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_NONE;
 80239d4:	4a58      	ldr	r2, [pc, #352]	; (8023b38 <CheckBarrierOperation+0x27c>)
 80239d6:	7b13      	ldrb	r3, [r2, #12]
 80239d8:	f36f 0383 	bfc	r3, #2, #2
 80239dc:	7313      	strb	r3, [r2, #12]
						gGCUStatus.bBarrierSw = 0x11;
 80239de:	4b56      	ldr	r3, [pc, #344]	; (8023b38 <CheckBarrierOperation+0x27c>)
 80239e0:	2211      	movs	r2, #17
 80239e2:	741a      	strb	r2, [r3, #16]

						if (CheckBarrierClosedStatus() && CheckZeroAuthCount())
 80239e4:	f7ff fd1a 	bl	802341c <CheckBarrierClosedStatus>
 80239e8:	4603      	mov	r3, r0
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	f000 80fd 	beq.w	8023bea <CheckBarrierOperation+0x32e>
 80239f0:	f7ff fd34 	bl	802345c <CheckZeroAuthCount>
 80239f4:	4603      	mov	r3, r0
 80239f6:	2b00      	cmp	r3, #0
 80239f8:	f000 80f7 	beq.w	8023bea <CheckBarrierOperation+0x32e>
						{
							//PRINTL(" [CheckBarrier] Current Status is open");
							printf(" [CheckBarrier] Current Status is open \n");
 80239fc:	4859      	ldr	r0, [pc, #356]	; (8023b64 <CheckBarrierOperation+0x2a8>)
 80239fe:	f005 f82d 	bl	8028a5c <printf_>
							ControlBarrier(BARRIER_CLOSE_S);
 8023a02:	2003      	movs	r0, #3
 8023a04:	f7fd fd2a 	bl	802145c <ControlBarrier>
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 8023a08:	e0ef      	b.n	8023bea <CheckBarrierOperation+0x32e>
 8023a0a:	e0ee      	b.n	8023bea <CheckBarrierOperation+0x32e>
						}
					}
				}
				else if (gbBarrierCmd == BARRIER_CLOSE_S)
 8023a0c:	4b50      	ldr	r3, [pc, #320]	; (8023b50 <CheckBarrierOperation+0x294>)
 8023a0e:	781b      	ldrb	r3, [r3, #0]
 8023a10:	2b03      	cmp	r3, #3
 8023a12:	f040 8127 	bne.w	8023c64 <CheckBarrierOperation+0x3a8>
				{
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_CLOSE) ||
 8023a16:	4b4a      	ldr	r3, [pc, #296]	; (8023b40 <CheckBarrierOperation+0x284>)
 8023a18:	781b      	ldrb	r3, [r3, #0]
 8023a1a:	2b00      	cmp	r3, #0
 8023a1c:	d006      	beq.n	8023a2c <CheckBarrierOperation+0x170>
 8023a1e:	4b49      	ldr	r3, [pc, #292]	; (8023b44 <CheckBarrierOperation+0x288>)
 8023a20:	791b      	ldrb	r3, [r3, #4]
 8023a22:	f003 0307 	and.w	r3, r3, #7
 8023a26:	b2db      	uxtb	r3, r3
 8023a28:	2b02      	cmp	r3, #2
 8023a2a:	d10c      	bne.n	8023a46 <CheckBarrierOperation+0x18a>
						(gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_CLOSE))
 8023a2c:	4b46      	ldr	r3, [pc, #280]	; (8023b48 <CheckBarrierOperation+0x28c>)
 8023a2e:	781b      	ldrb	r3, [r3, #0]
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_CLOSE) ||
 8023a30:	2b00      	cmp	r3, #0
 8023a32:	f000 80a3 	beq.w	8023b7c <CheckBarrierOperation+0x2c0>
						(gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_CLOSE))
 8023a36:	4b45      	ldr	r3, [pc, #276]	; (8023b4c <CheckBarrierOperation+0x290>)
 8023a38:	791b      	ldrb	r3, [r3, #4]
 8023a3a:	f003 0307 	and.w	r3, r3, #7
 8023a3e:	b2db      	uxtb	r3, r3
 8023a40:	2b02      	cmp	r3, #2
 8023a42:	f000 809b 	beq.w	8023b7c <CheckBarrierOperation+0x2c0>
					{
						if (CheckBarrierClosedStatus())
 8023a46:	f7ff fce9 	bl	802341c <CheckBarrierClosedStatus>
 8023a4a:	4603      	mov	r3, r0
 8023a4c:	2b00      	cmp	r3, #0
 8023a4e:	f000 80ce 	beq.w	8023bee <CheckBarrierOperation+0x332>
						{
							//PRINTL(" [CheckBarrier] pos:%d/%d", gMainBarrierStatus.param.posStatus, gSubBarrierStatus.param.posStatus);
							printf(" [CheckBarrier] pos:%d/%d \n", gMainBarrierStatus.param.posStatus, gSubBarrierStatus.param.posStatus);
 8023a52:	4b3c      	ldr	r3, [pc, #240]	; (8023b44 <CheckBarrierOperation+0x288>)
 8023a54:	791b      	ldrb	r3, [r3, #4]
 8023a56:	f343 0302 	sbfx	r3, r3, #0, #3
 8023a5a:	b25b      	sxtb	r3, r3
 8023a5c:	4619      	mov	r1, r3
 8023a5e:	4b3b      	ldr	r3, [pc, #236]	; (8023b4c <CheckBarrierOperation+0x290>)
 8023a60:	791b      	ldrb	r3, [r3, #4]
 8023a62:	f343 0302 	sbfx	r3, r3, #0, #3
 8023a66:	b25b      	sxtb	r3, r3
 8023a68:	461a      	mov	r2, r3
 8023a6a:	483f      	ldr	r0, [pc, #252]	; (8023b68 <CheckBarrierOperation+0x2ac>)
 8023a6c:	f004 fff6 	bl	8028a5c <printf_>

							if (isCalibrationStart == FALSE && (isSafetyOn == FALSE || gfisAuthTimeout == TRUE))
 8023a70:	4b3e      	ldr	r3, [pc, #248]	; (8023b6c <CheckBarrierOperation+0x2b0>)
 8023a72:	781b      	ldrb	r3, [r3, #0]
 8023a74:	f083 0301 	eor.w	r3, r3, #1
 8023a78:	b2db      	uxtb	r3, r3
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	f000 80b7 	beq.w	8023bee <CheckBarrierOperation+0x332>
 8023a80:	4b3b      	ldr	r3, [pc, #236]	; (8023b70 <CheckBarrierOperation+0x2b4>)
 8023a82:	781b      	ldrb	r3, [r3, #0]
 8023a84:	f083 0301 	eor.w	r3, r3, #1
 8023a88:	b2db      	uxtb	r3, r3
 8023a8a:	2b00      	cmp	r3, #0
 8023a8c:	d104      	bne.n	8023a98 <CheckBarrierOperation+0x1dc>
 8023a8e:	4b39      	ldr	r3, [pc, #228]	; (8023b74 <CheckBarrierOperation+0x2b8>)
 8023a90:	781b      	ldrb	r3, [r3, #0]
 8023a92:	2b00      	cmp	r3, #0
 8023a94:	f000 80ab 	beq.w	8023bee <CheckBarrierOperation+0x332>
							{
								nBarrierErrorCnt++;
 8023a98:	4b31      	ldr	r3, [pc, #196]	; (8023b60 <CheckBarrierOperation+0x2a4>)
 8023a9a:	681b      	ldr	r3, [r3, #0]
 8023a9c:	3301      	adds	r3, #1
 8023a9e:	4a30      	ldr	r2, [pc, #192]	; (8023b60 <CheckBarrierOperation+0x2a4>)
 8023aa0:	6013      	str	r3, [r2, #0]

								if (nBarrierErrorCnt == 20) // After 4 sec, Barrier fault is generated.
 8023aa2:	4b2f      	ldr	r3, [pc, #188]	; (8023b60 <CheckBarrierOperation+0x2a4>)
 8023aa4:	681b      	ldr	r3, [r3, #0]
 8023aa6:	2b14      	cmp	r3, #20
 8023aa8:	f040 80a1 	bne.w	8023bee <CheckBarrierOperation+0x332>
								{
									if (gGCUStatus.ModuleAlarm.b.nFDoor1 == FDOOR_ALARM_NONE && gGCUStatus.ModuleAlarm.b.nFDoor2 == FDOOR_ALARM_NONE)
 8023aac:	4b22      	ldr	r3, [pc, #136]	; (8023b38 <CheckBarrierOperation+0x27c>)
 8023aae:	7b1b      	ldrb	r3, [r3, #12]
 8023ab0:	f003 0303 	and.w	r3, r3, #3
 8023ab4:	b2db      	uxtb	r3, r3
 8023ab6:	2b00      	cmp	r3, #0
 8023ab8:	d10d      	bne.n	8023ad6 <CheckBarrierOperation+0x21a>
 8023aba:	4b1f      	ldr	r3, [pc, #124]	; (8023b38 <CheckBarrierOperation+0x27c>)
 8023abc:	7b1b      	ldrb	r3, [r3, #12]
 8023abe:	f003 030c 	and.w	r3, r3, #12
 8023ac2:	b2db      	uxtb	r3, r3
 8023ac4:	2b00      	cmp	r3, #0
 8023ac6:	d106      	bne.n	8023ad6 <CheckBarrierOperation+0x21a>
									{
										ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8023ac8:	4b2b      	ldr	r3, [pc, #172]	; (8023b78 <CheckBarrierOperation+0x2bc>)
 8023aca:	7a9b      	ldrb	r3, [r3, #10]
 8023acc:	461a      	mov	r2, r3
 8023ace:	2101      	movs	r1, #1
 8023ad0:	2000      	movs	r0, #0
 8023ad2:	f7fd fcfb 	bl	80214cc <ControlBuzzer>
									}

									if (gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_CLOSE)
 8023ad6:	4b1a      	ldr	r3, [pc, #104]	; (8023b40 <CheckBarrierOperation+0x284>)
 8023ad8:	781b      	ldrb	r3, [r3, #0]
 8023ada:	2b00      	cmp	r3, #0
 8023adc:	d00d      	beq.n	8023afa <CheckBarrierOperation+0x23e>
 8023ade:	4b19      	ldr	r3, [pc, #100]	; (8023b44 <CheckBarrierOperation+0x288>)
 8023ae0:	791b      	ldrb	r3, [r3, #4]
 8023ae2:	f003 0307 	and.w	r3, r3, #7
 8023ae6:	b2db      	uxtb	r3, r3
 8023ae8:	2b02      	cmp	r3, #2
 8023aea:	d006      	beq.n	8023afa <CheckBarrierOperation+0x23e>
										gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_CLOSE_FAULT;
 8023aec:	4a12      	ldr	r2, [pc, #72]	; (8023b38 <CheckBarrierOperation+0x27c>)
 8023aee:	7b13      	ldrb	r3, [r2, #12]
 8023af0:	f06f 0101 	mvn.w	r1, #1
 8023af4:	f361 0301 	bfi	r3, r1, #0, #2
 8023af8:	7313      	strb	r3, [r2, #12]
									if (gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_CLOSE)
 8023afa:	4b13      	ldr	r3, [pc, #76]	; (8023b48 <CheckBarrierOperation+0x28c>)
 8023afc:	781b      	ldrb	r3, [r3, #0]
 8023afe:	2b00      	cmp	r3, #0
 8023b00:	d00d      	beq.n	8023b1e <CheckBarrierOperation+0x262>
 8023b02:	4b12      	ldr	r3, [pc, #72]	; (8023b4c <CheckBarrierOperation+0x290>)
 8023b04:	791b      	ldrb	r3, [r3, #4]
 8023b06:	f003 0307 	and.w	r3, r3, #7
 8023b0a:	b2db      	uxtb	r3, r3
 8023b0c:	2b02      	cmp	r3, #2
 8023b0e:	d006      	beq.n	8023b1e <CheckBarrierOperation+0x262>
										gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_CLOSE_FAULT;
 8023b10:	4a09      	ldr	r2, [pc, #36]	; (8023b38 <CheckBarrierOperation+0x27c>)
 8023b12:	7b13      	ldrb	r3, [r2, #12]
 8023b14:	f06f 0101 	mvn.w	r1, #1
 8023b18:	f361 0383 	bfi	r3, r1, #2, #2
 8023b1c:	7313      	strb	r3, [r2, #12]

									nBarrierErrorCnt = 0;
 8023b1e:	4b10      	ldr	r3, [pc, #64]	; (8023b60 <CheckBarrierOperation+0x2a4>)
 8023b20:	2200      	movs	r2, #0
 8023b22:	601a      	str	r2, [r3, #0]
									ControlBarrier(BARRIER_CLOSE_S);
 8023b24:	2003      	movs	r0, #3
 8023b26:	f7fd fc99 	bl	802145c <ControlBarrier>
						if (CheckBarrierClosedStatus())
 8023b2a:	e060      	b.n	8023bee <CheckBarrierOperation+0x332>
 8023b2c:	2400043e 	.word	0x2400043e
 8023b30:	240001c0 	.word	0x240001c0
 8023b34:	2400001c 	.word	0x2400001c
 8023b38:	240004b0 	.word	0x240004b0
 8023b3c:	080305b4 	.word	0x080305b4
 8023b40:	240004ec 	.word	0x240004ec
 8023b44:	240004dc 	.word	0x240004dc
 8023b48:	240004ed 	.word	0x240004ed
 8023b4c:	240004e4 	.word	0x240004e4
 8023b50:	24000028 	.word	0x24000028
 8023b54:	2400012d 	.word	0x2400012d
 8023b58:	24000427 	.word	0x24000427
 8023b5c:	24000428 	.word	0x24000428
 8023b60:	24000430 	.word	0x24000430
 8023b64:	080305d4 	.word	0x080305d4
 8023b68:	08030600 	.word	0x08030600
 8023b6c:	2400042a 	.word	0x2400042a
 8023b70:	24000426 	.word	0x24000426
 8023b74:	24000134 	.word	0x24000134
 8023b78:	240004a0 	.word	0x240004a0
								}
							}
						}
					}
					else if (isSafetyOn4Init == FALSE)
 8023b7c:	4b3f      	ldr	r3, [pc, #252]	; (8023c7c <CheckBarrierOperation+0x3c0>)
 8023b7e:	781b      	ldrb	r3, [r3, #0]
 8023b80:	f083 0301 	eor.w	r3, r3, #1
 8023b84:	b2db      	uxtb	r3, r3
 8023b86:	2b00      	cmp	r3, #0
 8023b88:	d06c      	beq.n	8023c64 <CheckBarrierOperation+0x3a8>
					{
						nForceOpenCnt = 0;
 8023b8a:	4b3d      	ldr	r3, [pc, #244]	; (8023c80 <CheckBarrierOperation+0x3c4>)
 8023b8c:	2200      	movs	r2, #0
 8023b8e:	601a      	str	r2, [r3, #0]
						nBarrierErrorCnt = 0;
 8023b90:	4b3c      	ldr	r3, [pc, #240]	; (8023c84 <CheckBarrierOperation+0x3c8>)
 8023b92:	2200      	movs	r2, #0
 8023b94:	601a      	str	r2, [r3, #0]
						gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_NONE;
 8023b96:	4a3c      	ldr	r2, [pc, #240]	; (8023c88 <CheckBarrierOperation+0x3cc>)
 8023b98:	7b13      	ldrb	r3, [r2, #12]
 8023b9a:	f36f 0301 	bfc	r3, #0, #2
 8023b9e:	7313      	strb	r3, [r2, #12]
						gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_NONE;
 8023ba0:	4a39      	ldr	r2, [pc, #228]	; (8023c88 <CheckBarrierOperation+0x3cc>)
 8023ba2:	7b13      	ldrb	r3, [r2, #12]
 8023ba4:	f36f 0383 	bfc	r3, #2, #2
 8023ba8:	7313      	strb	r3, [r2, #12]
						gGCUStatus.bBarrierSw = 0x22;
 8023baa:	4b37      	ldr	r3, [pc, #220]	; (8023c88 <CheckBarrierOperation+0x3cc>)
 8023bac:	2222      	movs	r2, #34	; 0x22
 8023bae:	741a      	strb	r2, [r3, #16]
						isForceOpen = FALSE;
 8023bb0:	4b36      	ldr	r3, [pc, #216]	; (8023c8c <CheckBarrierOperation+0x3d0>)
 8023bb2:	2200      	movs	r2, #0
 8023bb4:	701a      	strb	r2, [r3, #0]

						if (gGCUStatus.bAuthCount_EN)
 8023bb6:	4b34      	ldr	r3, [pc, #208]	; (8023c88 <CheckBarrierOperation+0x3cc>)
 8023bb8:	791b      	ldrb	r3, [r3, #4]
 8023bba:	b2db      	uxtb	r3, r3
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	d003      	beq.n	8023bc8 <CheckBarrierOperation+0x30c>
						{
							ControlBarrier(BARRIER_OPEN_FOR_EN);
 8023bc0:	2002      	movs	r0, #2
 8023bc2:	f7fd fc4b 	bl	802145c <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023bc6:	e04d      	b.n	8023c64 <CheckBarrierOperation+0x3a8>
						}
						else if (gGCUStatus.bAuthCount_EX)
 8023bc8:	4b2f      	ldr	r3, [pc, #188]	; (8023c88 <CheckBarrierOperation+0x3cc>)
 8023bca:	795b      	ldrb	r3, [r3, #5]
 8023bcc:	b2db      	uxtb	r3, r3
 8023bce:	2b00      	cmp	r3, #0
 8023bd0:	d003      	beq.n	8023bda <CheckBarrierOperation+0x31e>
						{
							ControlBarrier(BARRIER_OPEN_FOR_EX);
 8023bd2:	2001      	movs	r0, #1
 8023bd4:	f7fd fc42 	bl	802145c <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023bd8:	e044      	b.n	8023c64 <CheckBarrierOperation+0x3a8>
						}
						else if (gbPowerFailFlag == FLG_SET)
 8023bda:	4b2d      	ldr	r3, [pc, #180]	; (8023c90 <CheckBarrierOperation+0x3d4>)
 8023bdc:	781b      	ldrb	r3, [r3, #0]
 8023bde:	2b01      	cmp	r3, #1
 8023be0:	d140      	bne.n	8023c64 <CheckBarrierOperation+0x3a8>
						{
							ControlBarrier(BARRIER_OPEN_FOR_EX);
 8023be2:	2001      	movs	r0, #1
 8023be4:	f7fd fc3a 	bl	802145c <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023be8:	e03c      	b.n	8023c64 <CheckBarrierOperation+0x3a8>
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 8023bea:	bf00      	nop
 8023bec:	e03a      	b.n	8023c64 <CheckBarrierOperation+0x3a8>
						if (CheckBarrierClosedStatus())
 8023bee:	bf00      	nop
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023bf0:	e038      	b.n	8023c64 <CheckBarrierOperation+0x3a8>
					}
				}
			}
			else
			{
				if (!timerTailgating.fStart && gGCUStatus.bAuthCount_EN == 0 && gGCUStatus.bAuthCount_EX == 0 && CheckBarrierClosedStatus())
 8023bf2:	4b28      	ldr	r3, [pc, #160]	; (8023c94 <CheckBarrierOperation+0x3d8>)
 8023bf4:	781b      	ldrb	r3, [r3, #0]
 8023bf6:	f083 0301 	eor.w	r3, r3, #1
 8023bfa:	b2db      	uxtb	r3, r3
 8023bfc:	2b00      	cmp	r3, #0
 8023bfe:	d02d      	beq.n	8023c5c <CheckBarrierOperation+0x3a0>
 8023c00:	4b21      	ldr	r3, [pc, #132]	; (8023c88 <CheckBarrierOperation+0x3cc>)
 8023c02:	791b      	ldrb	r3, [r3, #4]
 8023c04:	b2db      	uxtb	r3, r3
 8023c06:	2b00      	cmp	r3, #0
 8023c08:	d128      	bne.n	8023c5c <CheckBarrierOperation+0x3a0>
 8023c0a:	4b1f      	ldr	r3, [pc, #124]	; (8023c88 <CheckBarrierOperation+0x3cc>)
 8023c0c:	795b      	ldrb	r3, [r3, #5]
 8023c0e:	b2db      	uxtb	r3, r3
 8023c10:	2b00      	cmp	r3, #0
 8023c12:	d123      	bne.n	8023c5c <CheckBarrierOperation+0x3a0>
 8023c14:	f7ff fc02 	bl	802341c <CheckBarrierClosedStatus>
 8023c18:	4603      	mov	r3, r0
 8023c1a:	2b00      	cmp	r3, #0
 8023c1c:	d01e      	beq.n	8023c5c <CheckBarrierOperation+0x3a0>
				{
					if (isCalibrationStart == FALSE)
 8023c1e:	4b1e      	ldr	r3, [pc, #120]	; (8023c98 <CheckBarrierOperation+0x3dc>)
 8023c20:	781b      	ldrb	r3, [r3, #0]
 8023c22:	f083 0301 	eor.w	r3, r3, #1
 8023c26:	b2db      	uxtb	r3, r3
 8023c28:	2b00      	cmp	r3, #0
 8023c2a:	d01d      	beq.n	8023c68 <CheckBarrierOperation+0x3ac>
					{
						if (isForceOpenReady_EN == TRUE || isForceOpenReady_EX == TRUE)
 8023c2c:	4b1b      	ldr	r3, [pc, #108]	; (8023c9c <CheckBarrierOperation+0x3e0>)
 8023c2e:	781b      	ldrb	r3, [r3, #0]
 8023c30:	2b00      	cmp	r3, #0
 8023c32:	d103      	bne.n	8023c3c <CheckBarrierOperation+0x380>
 8023c34:	4b1a      	ldr	r3, [pc, #104]	; (8023ca0 <CheckBarrierOperation+0x3e4>)
 8023c36:	781b      	ldrb	r3, [r3, #0]
 8023c38:	2b00      	cmp	r3, #0
 8023c3a:	d015      	beq.n	8023c68 <CheckBarrierOperation+0x3ac>
						{
							nForceOpenCnt++;
 8023c3c:	4b10      	ldr	r3, [pc, #64]	; (8023c80 <CheckBarrierOperation+0x3c4>)
 8023c3e:	681b      	ldr	r3, [r3, #0]
 8023c40:	3301      	adds	r3, #1
 8023c42:	4a0f      	ldr	r2, [pc, #60]	; (8023c80 <CheckBarrierOperation+0x3c4>)
 8023c44:	6013      	str	r3, [r2, #0]

							if (nForceOpenCnt >= 2)
 8023c46:	4b0e      	ldr	r3, [pc, #56]	; (8023c80 <CheckBarrierOperation+0x3c4>)
 8023c48:	681b      	ldr	r3, [r3, #0]
 8023c4a:	2b01      	cmp	r3, #1
 8023c4c:	dd0c      	ble.n	8023c68 <CheckBarrierOperation+0x3ac>
							{
								//PRINTL(" [CheckBarrier] Force Open Detected!!");
								printf(" [CheckBarrier] Force Open Detected!!\n");
 8023c4e:	4815      	ldr	r0, [pc, #84]	; (8023ca4 <CheckBarrierOperation+0x3e8>)
 8023c50:	f004 ff04 	bl	8028a5c <printf_>
								isForceOpen = TRUE;
 8023c54:	4b0d      	ldr	r3, [pc, #52]	; (8023c8c <CheckBarrierOperation+0x3d0>)
 8023c56:	2201      	movs	r2, #1
 8023c58:	701a      	strb	r2, [r3, #0]
					if (isCalibrationStart == FALSE)
 8023c5a:	e005      	b.n	8023c68 <CheckBarrierOperation+0x3ac>
						}
					}
				}
				else
				{
					nBarrierErrorCnt = 0;
 8023c5c:	4b09      	ldr	r3, [pc, #36]	; (8023c84 <CheckBarrierOperation+0x3c8>)
 8023c5e:	2200      	movs	r2, #0
 8023c60:	601a      	str	r2, [r3, #0]
 8023c62:	e002      	b.n	8023c6a <CheckBarrierOperation+0x3ae>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023c64:	bf00      	nop
 8023c66:	e000      	b.n	8023c6a <CheckBarrierOperation+0x3ae>
					if (isCalibrationStart == FALSE)
 8023c68:	bf00      	nop
				}
			}

			Brr_Inq_Status();			//확인 필요 pms
 8023c6a:	f7fc fd9d 	bl	80207a8 <Brr_Inq_Status>
		if (IsTimeout(&timerBarrierCheck, dwBarrierCheckTime * TICK_COUNT_100MS))
 8023c6e:	e003      	b.n	8023c78 <CheckBarrierOperation+0x3bc>
		}
	}
	else
	{
		SetTimer(&timerBarrierCheck);
 8023c70:	480d      	ldr	r0, [pc, #52]	; (8023ca8 <CheckBarrierOperation+0x3ec>)
 8023c72:	f00a ff97 	bl	802eba4 <SetTimer>
	}
}
 8023c76:	bf00      	nop
 8023c78:	bf00      	nop
 8023c7a:	bd80      	pop	{r7, pc}
 8023c7c:	24000428 	.word	0x24000428
 8023c80:	24000434 	.word	0x24000434
 8023c84:	24000430 	.word	0x24000430
 8023c88:	240004b0 	.word	0x240004b0
 8023c8c:	24000425 	.word	0x24000425
 8023c90:	2400012b 	.word	0x2400012b
 8023c94:	240001fc 	.word	0x240001fc
 8023c98:	2400042a 	.word	0x2400042a
 8023c9c:	24000422 	.word	0x24000422
 8023ca0:	24000423 	.word	0x24000423
 8023ca4:	0803061c 	.word	0x0803061c
 8023ca8:	240001c0 	.word	0x240001c0

08023cac <ClearPassHistory>:

void ClearPassHistory(void)
{
 8023cac:	b580      	push	{r7, lr}
 8023cae:	af00      	add	r7, sp, #0
	if (gGCUStatus.PassageAlarm.b.nFromEN)
 8023cb0:	4b3e      	ldr	r3, [pc, #248]	; (8023dac <ClearPassHistory+0x100>)
 8023cb2:	7a1b      	ldrb	r3, [r3, #8]
 8023cb4:	f003 0307 	and.w	r3, r3, #7
 8023cb8:	b2db      	uxtb	r3, r3
 8023cba:	2b00      	cmp	r3, #0
 8023cbc:	d00f      	beq.n	8023cde <ClearPassHistory+0x32>
	{
		if (!psenNewSwing.side.entry)
 8023cbe:	4b3c      	ldr	r3, [pc, #240]	; (8023db0 <ClearPassHistory+0x104>)
 8023cc0:	f993 3000 	ldrsb.w	r3, [r3]
 8023cc4:	2b00      	cmp	r3, #0
 8023cc6:	d10a      	bne.n	8023cde <ClearPassHistory+0x32>
		{
			gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8023cc8:	4a38      	ldr	r2, [pc, #224]	; (8023dac <ClearPassHistory+0x100>)
 8023cca:	7a13      	ldrb	r3, [r2, #8]
 8023ccc:	f36f 0302 	bfc	r3, #0, #3
 8023cd0:	7213      	strb	r3, [r2, #8]
			gisEntryPassenger = FALSE;
 8023cd2:	4b38      	ldr	r3, [pc, #224]	; (8023db4 <ClearPassHistory+0x108>)
 8023cd4:	2200      	movs	r2, #0
 8023cd6:	701a      	strb	r2, [r3, #0]
			{
				gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
				//PRINTL(" [EN] Clear Illegal Enter");
				printf(" [EN] Clear Illegal Enter \n");
			}
			ResetTimer(&timerIllegalEnterEN);
 8023cd8:	4837      	ldr	r0, [pc, #220]	; (8023db8 <ClearPassHistory+0x10c>)
 8023cda:	f00a ff77 	bl	802ebcc <ResetTimer>
		}
	}

	if (gGCUStatus.PassageAlarm.b.nFromEX)
 8023cde:	4b33      	ldr	r3, [pc, #204]	; (8023dac <ClearPassHistory+0x100>)
 8023ce0:	7a1b      	ldrb	r3, [r3, #8]
 8023ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8023ce6:	b2db      	uxtb	r3, r3
 8023ce8:	2b00      	cmp	r3, #0
 8023cea:	d00f      	beq.n	8023d0c <ClearPassHistory+0x60>
	{
		if (!psenNewSwing.side.exit)
 8023cec:	4b30      	ldr	r3, [pc, #192]	; (8023db0 <ClearPassHistory+0x104>)
 8023cee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8023cf2:	2b00      	cmp	r3, #0
 8023cf4:	d10a      	bne.n	8023d0c <ClearPassHistory+0x60>
		{
			gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8023cf6:	4a2d      	ldr	r2, [pc, #180]	; (8023dac <ClearPassHistory+0x100>)
 8023cf8:	7a13      	ldrb	r3, [r2, #8]
 8023cfa:	f36f 1306 	bfc	r3, #4, #3
 8023cfe:	7213      	strb	r3, [r2, #8]
			gisExitPassenger = FALSE;
 8023d00:	4b2e      	ldr	r3, [pc, #184]	; (8023dbc <ClearPassHistory+0x110>)
 8023d02:	2200      	movs	r2, #0
 8023d04:	701a      	strb	r2, [r3, #0]
			{
				gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
				//PRINTL(" [EX] Clear Illegal Enter");
				printf(" [EX] Clear Illegal Enter \n");
			}
			ResetTimer(&timerIllegalEnterEN);
 8023d06:	482c      	ldr	r0, [pc, #176]	; (8023db8 <ClearPassHistory+0x10c>)
 8023d08:	f00a ff60 	bl	802ebcc <ResetTimer>
		}
	}

	if (FLG_OFF == gbEmergencyFlag)
 8023d0c:	4b2c      	ldr	r3, [pc, #176]	; (8023dc0 <ClearPassHistory+0x114>)
 8023d0e:	781b      	ldrb	r3, [r3, #0]
 8023d10:	2b00      	cmp	r3, #0
 8023d12:	d148      	bne.n	8023da6 <ClearPassHistory+0xfa>
	{
		if (gCurGCUOpMode.bServiceMode_EN == NO_SERVICE || (gGCUStatus.bAuthCount_EX && gCurGCUOpMode.bServiceMode_EN == IN_SERVICE))
 8023d14:	4b2b      	ldr	r3, [pc, #172]	; (8023dc4 <ClearPassHistory+0x118>)
 8023d16:	781b      	ldrb	r3, [r3, #0]
 8023d18:	2b00      	cmp	r3, #0
 8023d1a:	d008      	beq.n	8023d2e <ClearPassHistory+0x82>
 8023d1c:	4b23      	ldr	r3, [pc, #140]	; (8023dac <ClearPassHistory+0x100>)
 8023d1e:	795b      	ldrb	r3, [r3, #5]
 8023d20:	b2db      	uxtb	r3, r3
 8023d22:	2b00      	cmp	r3, #0
 8023d24:	d00a      	beq.n	8023d3c <ClearPassHistory+0x90>
 8023d26:	4b27      	ldr	r3, [pc, #156]	; (8023dc4 <ClearPassHistory+0x118>)
 8023d28:	781b      	ldrb	r3, [r3, #0]
 8023d2a:	2b01      	cmp	r3, #1
 8023d2c:	d106      	bne.n	8023d3c <ClearPassHistory+0x90>
		{
			gbLampCMD_EN = DIR_RED;
 8023d2e:	4b26      	ldr	r3, [pc, #152]	; (8023dc8 <ClearPassHistory+0x11c>)
 8023d30:	2202      	movs	r2, #2
 8023d32:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EN = LAMP_OFF;
 8023d34:	4b25      	ldr	r3, [pc, #148]	; (8023dcc <ClearPassHistory+0x120>)
 8023d36:	2200      	movs	r2, #0
 8023d38:	701a      	strb	r2, [r3, #0]
 8023d3a:	e005      	b.n	8023d48 <ClearPassHistory+0x9c>
		}
		else
		{
			gbLampCMD_EN = DIR_GREEN;
 8023d3c:	4b22      	ldr	r3, [pc, #136]	; (8023dc8 <ClearPassHistory+0x11c>)
 8023d3e:	2201      	movs	r2, #1
 8023d40:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EX = LAMP_OFF;
 8023d42:	4b23      	ldr	r3, [pc, #140]	; (8023dd0 <ClearPassHistory+0x124>)
 8023d44:	2200      	movs	r2, #0
 8023d46:	701a      	strb	r2, [r3, #0]
		}

		if (gCurGCUOpMode.bServiceMode_EX == NO_SERVICE || (gGCUStatus.bAuthCount_EN && gCurGCUOpMode.bServiceMode_EX == IN_SERVICE))
 8023d48:	4b1e      	ldr	r3, [pc, #120]	; (8023dc4 <ClearPassHistory+0x118>)
 8023d4a:	785b      	ldrb	r3, [r3, #1]
 8023d4c:	2b00      	cmp	r3, #0
 8023d4e:	d008      	beq.n	8023d62 <ClearPassHistory+0xb6>
 8023d50:	4b16      	ldr	r3, [pc, #88]	; (8023dac <ClearPassHistory+0x100>)
 8023d52:	791b      	ldrb	r3, [r3, #4]
 8023d54:	b2db      	uxtb	r3, r3
 8023d56:	2b00      	cmp	r3, #0
 8023d58:	d00a      	beq.n	8023d70 <ClearPassHistory+0xc4>
 8023d5a:	4b1a      	ldr	r3, [pc, #104]	; (8023dc4 <ClearPassHistory+0x118>)
 8023d5c:	785b      	ldrb	r3, [r3, #1]
 8023d5e:	2b01      	cmp	r3, #1
 8023d60:	d106      	bne.n	8023d70 <ClearPassHistory+0xc4>
		{
			gbLampCMD_EX = DIR_RED;
 8023d62:	4b1c      	ldr	r3, [pc, #112]	; (8023dd4 <ClearPassHistory+0x128>)
 8023d64:	2202      	movs	r2, #2
 8023d66:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EX = LAMP_OFF;
 8023d68:	4b19      	ldr	r3, [pc, #100]	; (8023dd0 <ClearPassHistory+0x124>)
 8023d6a:	2200      	movs	r2, #0
 8023d6c:	701a      	strb	r2, [r3, #0]
 8023d6e:	e005      	b.n	8023d7c <ClearPassHistory+0xd0>
		}
		else
		{
			gbLampCMD_EX = DIR_GREEN;
 8023d70:	4b18      	ldr	r3, [pc, #96]	; (8023dd4 <ClearPassHistory+0x128>)
 8023d72:	2201      	movs	r2, #1
 8023d74:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EN = LAMP_OFF;
 8023d76:	4b15      	ldr	r3, [pc, #84]	; (8023dcc <ClearPassHistory+0x120>)
 8023d78:	2200      	movs	r2, #0
 8023d7a:	701a      	strb	r2, [r3, #0]
		}

		ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 8023d7c:	2200      	movs	r2, #0
 8023d7e:	2100      	movs	r1, #0
 8023d80:	2000      	movs	r0, #0
 8023d82:	f7fd fba3 	bl	80214cc <ControlBuzzer>
		ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 8023d86:	4b10      	ldr	r3, [pc, #64]	; (8023dc8 <ClearPassHistory+0x11c>)
 8023d88:	781b      	ldrb	r3, [r3, #0]
 8023d8a:	4a12      	ldr	r2, [pc, #72]	; (8023dd4 <ClearPassHistory+0x128>)
 8023d8c:	7812      	ldrb	r2, [r2, #0]
 8023d8e:	4611      	mov	r1, r2
 8023d90:	4618      	mov	r0, r3
 8023d92:	f7fd fbf5 	bl	8021580 <ControlDirectionLED>
		ControlIndicator(gbIndicatorCMD_EN, gbIndicatorCMD_EX, 0, FALSE);
 8023d96:	4b0d      	ldr	r3, [pc, #52]	; (8023dcc <ClearPassHistory+0x120>)
 8023d98:	7818      	ldrb	r0, [r3, #0]
 8023d9a:	4b0d      	ldr	r3, [pc, #52]	; (8023dd0 <ClearPassHistory+0x124>)
 8023d9c:	7819      	ldrb	r1, [r3, #0]
 8023d9e:	2300      	movs	r3, #0
 8023da0:	2200      	movs	r2, #0
 8023da2:	f7fd fc49 	bl	8021638 <ControlIndicator>
	}
}
 8023da6:	bf00      	nop
 8023da8:	bd80      	pop	{r7, pc}
 8023daa:	bf00      	nop
 8023dac:	240004b0 	.word	0x240004b0
 8023db0:	2400040c 	.word	0x2400040c
 8023db4:	2400043b 	.word	0x2400043b
 8023db8:	2400019c 	.word	0x2400019c
 8023dbc:	2400043c 	.word	0x2400043c
 8023dc0:	2400012d 	.word	0x2400012d
 8023dc4:	240004d4 	.word	0x240004d4
 8023dc8:	24000129 	.word	0x24000129
 8023dcc:	24000127 	.word	0x24000127
 8023dd0:	24000128 	.word	0x24000128
 8023dd4:	2400012a 	.word	0x2400012a

08023dd8 <CheckEntranceSwing>:

void CheckEntranceSwing(void)
{
 8023dd8:	b580      	push	{r7, lr}
 8023dda:	af00      	add	r7, sp, #0
	if (gisEntryPassenger)
 8023ddc:	4b80      	ldr	r3, [pc, #512]	; (8023fe0 <CheckEntranceSwing+0x208>)
 8023dde:	781b      	ldrb	r3, [r3, #0]
 8023de0:	2b00      	cmp	r3, #0
 8023de2:	d059      	beq.n	8023e98 <CheckEntranceSwing+0xc0>
	{
		if (gGCUStatus.bAuthCount_EN)
 8023de4:	4b7f      	ldr	r3, [pc, #508]	; (8023fe4 <CheckEntranceSwing+0x20c>)
 8023de6:	791b      	ldrb	r3, [r3, #4]
 8023de8:	b2db      	uxtb	r3, r3
 8023dea:	2b00      	cmp	r3, #0
 8023dec:	d021      	beq.n	8023e32 <CheckEntranceSwing+0x5a>
		{
			if (!psenNewSwing.side.entry)
 8023dee:	4b7e      	ldr	r3, [pc, #504]	; (8023fe8 <CheckEntranceSwing+0x210>)
 8023df0:	f993 3000 	ldrsb.w	r3, [r3]
 8023df4:	2b00      	cmp	r3, #0
 8023df6:	d171      	bne.n	8023edc <CheckEntranceSwing+0x104>
			{
				ResetTimer(&timerIllegalEnterEN);
 8023df8:	487c      	ldr	r0, [pc, #496]	; (8023fec <CheckEntranceSwing+0x214>)
 8023dfa:	f00a fee7 	bl	802ebcc <ResetTimer>
				gisEntryPassenger = FALSE;
 8023dfe:	4b78      	ldr	r3, [pc, #480]	; (8023fe0 <CheckEntranceSwing+0x208>)
 8023e00:	2200      	movs	r2, #0
 8023e02:	701a      	strb	r2, [r3, #0]
				isPassReady_EN = FALSE;
 8023e04:	4b7a      	ldr	r3, [pc, #488]	; (8023ff0 <CheckEntranceSwing+0x218>)
 8023e06:	2200      	movs	r2, #0
 8023e08:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EN = PASS_PATN_NONE;
 8023e0a:	4b7a      	ldr	r3, [pc, #488]	; (8023ff4 <CheckEntranceSwing+0x21c>)
 8023e0c:	2200      	movs	r2, #0
 8023e0e:	701a      	strb	r2, [r3, #0]
				bPassPattern_EN = PASS_PATN_NONE;
 8023e10:	4b79      	ldr	r3, [pc, #484]	; (8023ff8 <CheckEntranceSwing+0x220>)
 8023e12:	2200      	movs	r2, #0
 8023e14:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8023e16:	4a73      	ldr	r2, [pc, #460]	; (8023fe4 <CheckEntranceSwing+0x20c>)
 8023e18:	7a13      	ldrb	r3, [r2, #8]
 8023e1a:	f36f 13c7 	bfc	r3, #7, #1
 8023e1e:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023e20:	4b76      	ldr	r3, [pc, #472]	; (8023ffc <CheckEntranceSwing+0x224>)
 8023e22:	2200      	movs	r2, #0
 8023e24:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023e26:	f7ff ff41 	bl	8023cac <ClearPassHistory>
				//PRINTL(" [EN] Enter Clear 1");
				printf(" [EN] Enter Clear 1\n");
 8023e2a:	4875      	ldr	r0, [pc, #468]	; (8024000 <CheckEntranceSwing+0x228>)
 8023e2c:	f004 fe16 	bl	8028a5c <printf_>
 8023e30:	e054      	b.n	8023edc <CheckEntranceSwing+0x104>
			}
		}
		else
		{
			if (!psenNewSwing.section.enter_EN && !psenNewSwing.section.lower_EN)
 8023e32:	4b6d      	ldr	r3, [pc, #436]	; (8023fe8 <CheckEntranceSwing+0x210>)
 8023e34:	781b      	ldrb	r3, [r3, #0]
 8023e36:	f003 0303 	and.w	r3, r3, #3
 8023e3a:	b2db      	uxtb	r3, r3
 8023e3c:	2b00      	cmp	r3, #0
 8023e3e:	d14d      	bne.n	8023edc <CheckEntranceSwing+0x104>
 8023e40:	4b69      	ldr	r3, [pc, #420]	; (8023fe8 <CheckEntranceSwing+0x210>)
 8023e42:	781b      	ldrb	r3, [r3, #0]
 8023e44:	f023 030f 	bic.w	r3, r3, #15
 8023e48:	b2db      	uxtb	r3, r3
 8023e4a:	2b00      	cmp	r3, #0
 8023e4c:	d146      	bne.n	8023edc <CheckEntranceSwing+0x104>
			{
				ResetTimer(&timerIllegalEnterEN);
 8023e4e:	4867      	ldr	r0, [pc, #412]	; (8023fec <CheckEntranceSwing+0x214>)
 8023e50:	f00a febc 	bl	802ebcc <ResetTimer>
				gisEntryPassenger = FALSE;
 8023e54:	4b62      	ldr	r3, [pc, #392]	; (8023fe0 <CheckEntranceSwing+0x208>)
 8023e56:	2200      	movs	r2, #0
 8023e58:	701a      	strb	r2, [r3, #0]
				isPassReady_EN = FALSE;
 8023e5a:	4b65      	ldr	r3, [pc, #404]	; (8023ff0 <CheckEntranceSwing+0x218>)
 8023e5c:	2200      	movs	r2, #0
 8023e5e:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EN = PASS_PATN_NONE;
 8023e60:	4b64      	ldr	r3, [pc, #400]	; (8023ff4 <CheckEntranceSwing+0x21c>)
 8023e62:	2200      	movs	r2, #0
 8023e64:	701a      	strb	r2, [r3, #0]
				bPassPattern_EN = PASS_PATN_NONE;
 8023e66:	4b64      	ldr	r3, [pc, #400]	; (8023ff8 <CheckEntranceSwing+0x220>)
 8023e68:	2200      	movs	r2, #0
 8023e6a:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8023e6c:	4a5d      	ldr	r2, [pc, #372]	; (8023fe4 <CheckEntranceSwing+0x20c>)
 8023e6e:	7a13      	ldrb	r3, [r2, #8]
 8023e70:	f36f 13c7 	bfc	r3, #7, #1
 8023e74:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023e76:	4b61      	ldr	r3, [pc, #388]	; (8023ffc <CheckEntranceSwing+0x224>)
 8023e78:	2200      	movs	r2, #0
 8023e7a:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023e7c:	f7ff ff16 	bl	8023cac <ClearPassHistory>
				if (gGCUStatus.bAuthCount_EX)
 8023e80:	4b58      	ldr	r3, [pc, #352]	; (8023fe4 <CheckEntranceSwing+0x20c>)
 8023e82:	795b      	ldrb	r3, [r3, #5]
 8023e84:	b2db      	uxtb	r3, r3
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	d002      	beq.n	8023e90 <CheckEntranceSwing+0xb8>
				{
					ControlBarrier(BARRIER_OPEN_FOR_EX);
 8023e8a:	2001      	movs	r0, #1
 8023e8c:	f7fd fae6 	bl	802145c <ControlBarrier>
				}
				//PRINTL(" [EN] Enter Clear 2");
				printf(" [EN] Enter Clear 2\n");
 8023e90:	485c      	ldr	r0, [pc, #368]	; (8024004 <CheckEntranceSwing+0x22c>)
 8023e92:	f004 fde3 	bl	8028a5c <printf_>
 8023e96:	e021      	b.n	8023edc <CheckEntranceSwing+0x104>
	else
	{
		// TODO: Check needs of this alarm
		if (gGCUStatus.PassageAlarm.b.nPassOverFromEX != ON)
		{
			if (psenNewSwing.dirEntry.enter)
 8023e98:	4b53      	ldr	r3, [pc, #332]	; (8023fe8 <CheckEntranceSwing+0x210>)
 8023e9a:	781b      	ldrb	r3, [r3, #0]
 8023e9c:	f003 0303 	and.w	r3, r3, #3
 8023ea0:	b2db      	uxtb	r3, r3
 8023ea2:	2b00      	cmp	r3, #0
 8023ea4:	d01a      	beq.n	8023edc <CheckEntranceSwing+0x104>
			{
				bEnterPattern_EN |= psenNewSwing.dirEntry.enter;
 8023ea6:	4b50      	ldr	r3, [pc, #320]	; (8023fe8 <CheckEntranceSwing+0x210>)
 8023ea8:	781b      	ldrb	r3, [r3, #0]
 8023eaa:	f343 0301 	sbfx	r3, r3, #0, #2
 8023eae:	b25b      	sxtb	r3, r3
 8023eb0:	461a      	mov	r2, r3
 8023eb2:	4b50      	ldr	r3, [pc, #320]	; (8023ff4 <CheckEntranceSwing+0x21c>)
 8023eb4:	781b      	ldrb	r3, [r3, #0]
 8023eb6:	b25b      	sxtb	r3, r3
 8023eb8:	4313      	orrs	r3, r2
 8023eba:	b25b      	sxtb	r3, r3
 8023ebc:	b2da      	uxtb	r2, r3
 8023ebe:	4b4d      	ldr	r3, [pc, #308]	; (8023ff4 <CheckEntranceSwing+0x21c>)
 8023ec0:	701a      	strb	r2, [r3, #0]

				if (bEnterPattern_EN >= PASS_PATN_ENTER)
 8023ec2:	4b4c      	ldr	r3, [pc, #304]	; (8023ff4 <CheckEntranceSwing+0x21c>)
 8023ec4:	781b      	ldrb	r3, [r3, #0]
 8023ec6:	2b02      	cmp	r3, #2
 8023ec8:	d908      	bls.n	8023edc <CheckEntranceSwing+0x104>
				{
					gisEntryPassenger = TRUE;
 8023eca:	4b45      	ldr	r3, [pc, #276]	; (8023fe0 <CheckEntranceSwing+0x208>)
 8023ecc:	2201      	movs	r2, #1
 8023ece:	701a      	strb	r2, [r3, #0]

					//PRINTL(" [EN] Enter - [%d]", bEnterPattern_EN);
					printf(" [EN] Enter - [%d]\n", bEnterPattern_EN);
 8023ed0:	4b48      	ldr	r3, [pc, #288]	; (8023ff4 <CheckEntranceSwing+0x21c>)
 8023ed2:	781b      	ldrb	r3, [r3, #0]
 8023ed4:	4619      	mov	r1, r3
 8023ed6:	484c      	ldr	r0, [pc, #304]	; (8024008 <CheckEntranceSwing+0x230>)
 8023ed8:	f004 fdc0 	bl	8028a5c <printf_>
				}
			}
		}
	}

	if (gisExitPassenger)
 8023edc:	4b4b      	ldr	r3, [pc, #300]	; (802400c <CheckEntranceSwing+0x234>)
 8023ede:	781b      	ldrb	r3, [r3, #0]
 8023ee0:	2b00      	cmp	r3, #0
 8023ee2:	d059      	beq.n	8023f98 <CheckEntranceSwing+0x1c0>
	{
		if (gGCUStatus.bAuthCount_EX)
 8023ee4:	4b3f      	ldr	r3, [pc, #252]	; (8023fe4 <CheckEntranceSwing+0x20c>)
 8023ee6:	795b      	ldrb	r3, [r3, #5]
 8023ee8:	b2db      	uxtb	r3, r3
 8023eea:	2b00      	cmp	r3, #0
 8023eec:	d021      	beq.n	8023f32 <CheckEntranceSwing+0x15a>
		{
			if (!psenNewSwing.side.exit)
 8023eee:	4b3e      	ldr	r3, [pc, #248]	; (8023fe8 <CheckEntranceSwing+0x210>)
 8023ef0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8023ef4:	2b00      	cmp	r3, #0
 8023ef6:	d171      	bne.n	8023fdc <CheckEntranceSwing+0x204>
			{
				ResetTimer(&timerIllegalEnterEX);
 8023ef8:	4845      	ldr	r0, [pc, #276]	; (8024010 <CheckEntranceSwing+0x238>)
 8023efa:	f00a fe67 	bl	802ebcc <ResetTimer>
				gisExitPassenger = FALSE;
 8023efe:	4b43      	ldr	r3, [pc, #268]	; (802400c <CheckEntranceSwing+0x234>)
 8023f00:	2200      	movs	r2, #0
 8023f02:	701a      	strb	r2, [r3, #0]
				isPassReady_EX = FALSE;
 8023f04:	4b43      	ldr	r3, [pc, #268]	; (8024014 <CheckEntranceSwing+0x23c>)
 8023f06:	2200      	movs	r2, #0
 8023f08:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EX = PASS_PATN_NONE;
 8023f0a:	4b43      	ldr	r3, [pc, #268]	; (8024018 <CheckEntranceSwing+0x240>)
 8023f0c:	2200      	movs	r2, #0
 8023f0e:	701a      	strb	r2, [r3, #0]
				bPassPattern_EX = PASS_PATN_NONE;
 8023f10:	4b42      	ldr	r3, [pc, #264]	; (802401c <CheckEntranceSwing+0x244>)
 8023f12:	2200      	movs	r2, #0
 8023f14:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8023f16:	4a33      	ldr	r2, [pc, #204]	; (8023fe4 <CheckEntranceSwing+0x20c>)
 8023f18:	7a13      	ldrb	r3, [r2, #8]
 8023f1a:	f36f 03c3 	bfc	r3, #3, #1
 8023f1e:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023f20:	4b36      	ldr	r3, [pc, #216]	; (8023ffc <CheckEntranceSwing+0x224>)
 8023f22:	2200      	movs	r2, #0
 8023f24:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023f26:	f7ff fec1 	bl	8023cac <ClearPassHistory>
				//PRINTL(" [EX] Enter Clear 1");
				printf(" [EX] Enter Clear 1\n");
 8023f2a:	483d      	ldr	r0, [pc, #244]	; (8024020 <CheckEntranceSwing+0x248>)
 8023f2c:	f004 fd96 	bl	8028a5c <printf_>
					printf(" [EX] Enter - [%d]\n", bEnterPattern_EX);
				}
			}
		}
	}
}
 8023f30:	e054      	b.n	8023fdc <CheckEntranceSwing+0x204>
			if (!psenNewSwing.section.enter_EX && !psenNewSwing.section.lower_EX)
 8023f32:	4b2d      	ldr	r3, [pc, #180]	; (8023fe8 <CheckEntranceSwing+0x210>)
 8023f34:	785b      	ldrb	r3, [r3, #1]
 8023f36:	f003 0303 	and.w	r3, r3, #3
 8023f3a:	b2db      	uxtb	r3, r3
 8023f3c:	2b00      	cmp	r3, #0
 8023f3e:	d14d      	bne.n	8023fdc <CheckEntranceSwing+0x204>
 8023f40:	4b29      	ldr	r3, [pc, #164]	; (8023fe8 <CheckEntranceSwing+0x210>)
 8023f42:	785b      	ldrb	r3, [r3, #1]
 8023f44:	f023 030f 	bic.w	r3, r3, #15
 8023f48:	b2db      	uxtb	r3, r3
 8023f4a:	2b00      	cmp	r3, #0
 8023f4c:	d146      	bne.n	8023fdc <CheckEntranceSwing+0x204>
				ResetTimer(&timerIllegalEnterEX);
 8023f4e:	4830      	ldr	r0, [pc, #192]	; (8024010 <CheckEntranceSwing+0x238>)
 8023f50:	f00a fe3c 	bl	802ebcc <ResetTimer>
				gisExitPassenger = FALSE;
 8023f54:	4b2d      	ldr	r3, [pc, #180]	; (802400c <CheckEntranceSwing+0x234>)
 8023f56:	2200      	movs	r2, #0
 8023f58:	701a      	strb	r2, [r3, #0]
				isPassReady_EX = FALSE;
 8023f5a:	4b2e      	ldr	r3, [pc, #184]	; (8024014 <CheckEntranceSwing+0x23c>)
 8023f5c:	2200      	movs	r2, #0
 8023f5e:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EX = PASS_PATN_NONE;
 8023f60:	4b2d      	ldr	r3, [pc, #180]	; (8024018 <CheckEntranceSwing+0x240>)
 8023f62:	2200      	movs	r2, #0
 8023f64:	701a      	strb	r2, [r3, #0]
				bPassPattern_EX = PASS_PATN_NONE;
 8023f66:	4b2d      	ldr	r3, [pc, #180]	; (802401c <CheckEntranceSwing+0x244>)
 8023f68:	2200      	movs	r2, #0
 8023f6a:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8023f6c:	4a1d      	ldr	r2, [pc, #116]	; (8023fe4 <CheckEntranceSwing+0x20c>)
 8023f6e:	7a13      	ldrb	r3, [r2, #8]
 8023f70:	f36f 03c3 	bfc	r3, #3, #1
 8023f74:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023f76:	4b21      	ldr	r3, [pc, #132]	; (8023ffc <CheckEntranceSwing+0x224>)
 8023f78:	2200      	movs	r2, #0
 8023f7a:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023f7c:	f7ff fe96 	bl	8023cac <ClearPassHistory>
				if (gGCUStatus.bAuthCount_EN)
 8023f80:	4b18      	ldr	r3, [pc, #96]	; (8023fe4 <CheckEntranceSwing+0x20c>)
 8023f82:	791b      	ldrb	r3, [r3, #4]
 8023f84:	b2db      	uxtb	r3, r3
 8023f86:	2b00      	cmp	r3, #0
 8023f88:	d002      	beq.n	8023f90 <CheckEntranceSwing+0x1b8>
					ControlBarrier(BARRIER_OPEN_FOR_EN);
 8023f8a:	2002      	movs	r0, #2
 8023f8c:	f7fd fa66 	bl	802145c <ControlBarrier>
				printf(" [EX] Enter Clear 2\n");
 8023f90:	4824      	ldr	r0, [pc, #144]	; (8024024 <CheckEntranceSwing+0x24c>)
 8023f92:	f004 fd63 	bl	8028a5c <printf_>
}
 8023f96:	e021      	b.n	8023fdc <CheckEntranceSwing+0x204>
			if (psenNewSwing.dirExit.enter)
 8023f98:	4b13      	ldr	r3, [pc, #76]	; (8023fe8 <CheckEntranceSwing+0x210>)
 8023f9a:	785b      	ldrb	r3, [r3, #1]
 8023f9c:	f003 0303 	and.w	r3, r3, #3
 8023fa0:	b2db      	uxtb	r3, r3
 8023fa2:	2b00      	cmp	r3, #0
 8023fa4:	d01a      	beq.n	8023fdc <CheckEntranceSwing+0x204>
				bEnterPattern_EX |= psenNewSwing.dirExit.enter;
 8023fa6:	4b10      	ldr	r3, [pc, #64]	; (8023fe8 <CheckEntranceSwing+0x210>)
 8023fa8:	785b      	ldrb	r3, [r3, #1]
 8023faa:	f343 0301 	sbfx	r3, r3, #0, #2
 8023fae:	b25b      	sxtb	r3, r3
 8023fb0:	461a      	mov	r2, r3
 8023fb2:	4b19      	ldr	r3, [pc, #100]	; (8024018 <CheckEntranceSwing+0x240>)
 8023fb4:	781b      	ldrb	r3, [r3, #0]
 8023fb6:	b25b      	sxtb	r3, r3
 8023fb8:	4313      	orrs	r3, r2
 8023fba:	b25b      	sxtb	r3, r3
 8023fbc:	b2da      	uxtb	r2, r3
 8023fbe:	4b16      	ldr	r3, [pc, #88]	; (8024018 <CheckEntranceSwing+0x240>)
 8023fc0:	701a      	strb	r2, [r3, #0]
				if (bEnterPattern_EX >= PASS_PATN_ENTER)
 8023fc2:	4b15      	ldr	r3, [pc, #84]	; (8024018 <CheckEntranceSwing+0x240>)
 8023fc4:	781b      	ldrb	r3, [r3, #0]
 8023fc6:	2b02      	cmp	r3, #2
 8023fc8:	d908      	bls.n	8023fdc <CheckEntranceSwing+0x204>
					gisExitPassenger = TRUE;
 8023fca:	4b10      	ldr	r3, [pc, #64]	; (802400c <CheckEntranceSwing+0x234>)
 8023fcc:	2201      	movs	r2, #1
 8023fce:	701a      	strb	r2, [r3, #0]
					printf(" [EX] Enter - [%d]\n", bEnterPattern_EX);
 8023fd0:	4b11      	ldr	r3, [pc, #68]	; (8024018 <CheckEntranceSwing+0x240>)
 8023fd2:	781b      	ldrb	r3, [r3, #0]
 8023fd4:	4619      	mov	r1, r3
 8023fd6:	4814      	ldr	r0, [pc, #80]	; (8024028 <CheckEntranceSwing+0x250>)
 8023fd8:	f004 fd40 	bl	8028a5c <printf_>
}
 8023fdc:	bf00      	nop
 8023fde:	bd80      	pop	{r7, pc}
 8023fe0:	2400043b 	.word	0x2400043b
 8023fe4:	240004b0 	.word	0x240004b0
 8023fe8:	2400040c 	.word	0x2400040c
 8023fec:	2400019c 	.word	0x2400019c
 8023ff0:	2400041c 	.word	0x2400041c
 8023ff4:	24000418 	.word	0x24000418
 8023ff8:	2400041a 	.word	0x2400041a
 8023ffc:	24000427 	.word	0x24000427
 8024000:	08030644 	.word	0x08030644
 8024004:	0803065c 	.word	0x0803065c
 8024008:	08030674 	.word	0x08030674
 802400c:	2400043c 	.word	0x2400043c
 8024010:	240001a8 	.word	0x240001a8
 8024014:	2400041d 	.word	0x2400041d
 8024018:	24000419 	.word	0x24000419
 802401c:	2400041b 	.word	0x2400041b
 8024020:	08030688 	.word	0x08030688
 8024024:	080306a0 	.word	0x080306a0
 8024028:	080306b8 	.word	0x080306b8

0802402c <CheckPassReadySwing>:

void CheckPassReadySwing(void)
{
 802402c:	b580      	push	{r7, lr}
 802402e:	af00      	add	r7, sp, #0
	if (gisExitPassenger == TRUE)
 8024030:	4b76      	ldr	r3, [pc, #472]	; (802420c <CheckPassReadySwing+0x1e0>)
 8024032:	781b      	ldrb	r3, [r3, #0]
 8024034:	2b00      	cmp	r3, #0
 8024036:	d073      	beq.n	8024120 <CheckPassReadySwing+0xf4>
	{
		if (isPassReady_EN == FALSE)
 8024038:	4b75      	ldr	r3, [pc, #468]	; (8024210 <CheckPassReadySwing+0x1e4>)
 802403a:	781b      	ldrb	r3, [r3, #0]
 802403c:	f083 0301 	eor.w	r3, r3, #1
 8024040:	b2db      	uxtb	r3, r3
 8024042:	2b00      	cmp	r3, #0
 8024044:	d040      	beq.n	80240c8 <CheckPassReadySwing+0x9c>
		{
			bPassPattern_EX |= psenNewSwing.dirExit.passage;
 8024046:	4b73      	ldr	r3, [pc, #460]	; (8024214 <CheckPassReadySwing+0x1e8>)
 8024048:	785b      	ldrb	r3, [r3, #1]
 802404a:	f343 0385 	sbfx	r3, r3, #2, #6
 802404e:	b25b      	sxtb	r3, r3
 8024050:	461a      	mov	r2, r3
 8024052:	4b71      	ldr	r3, [pc, #452]	; (8024218 <CheckPassReadySwing+0x1ec>)
 8024054:	781b      	ldrb	r3, [r3, #0]
 8024056:	b25b      	sxtb	r3, r3
 8024058:	4313      	orrs	r3, r2
 802405a:	b25b      	sxtb	r3, r3
 802405c:	b2da      	uxtb	r2, r3
 802405e:	4b6e      	ldr	r3, [pc, #440]	; (8024218 <CheckPassReadySwing+0x1ec>)
 8024060:	701a      	strb	r2, [r3, #0]

			if (bPassPattern_EX >= PASS_PATN_PASS_READY)
 8024062:	4b6d      	ldr	r3, [pc, #436]	; (8024218 <CheckPassReadySwing+0x1ec>)
 8024064:	781b      	ldrb	r3, [r3, #0]
 8024066:	2b03      	cmp	r3, #3
 8024068:	d92e      	bls.n	80240c8 <CheckPassReadySwing+0x9c>
			{
				//PRINTL(" [EX] Pass Ready");
				printf(" [EX] Pass Ready \n");
 802406a:	486c      	ldr	r0, [pc, #432]	; (802421c <CheckPassReadySwing+0x1f0>)
 802406c:	f004 fcf6 	bl	8028a5c <printf_>
				isPassReady_EX = TRUE;
 8024070:	4b6b      	ldr	r3, [pc, #428]	; (8024220 <CheckPassReadySwing+0x1f4>)
 8024072:	2201      	movs	r2, #1
 8024074:	701a      	strb	r2, [r3, #0]

				if (gGCUStatus.bAuthCount_EX)
 8024076:	4b6b      	ldr	r3, [pc, #428]	; (8024224 <CheckPassReadySwing+0x1f8>)
 8024078:	795b      	ldrb	r3, [r3, #5]
 802407a:	b2db      	uxtb	r3, r3
 802407c:	2b00      	cmp	r3, #0
 802407e:	d003      	beq.n	8024088 <CheckPassReadySwing+0x5c>
				{
					gisExitPassenger = FALSE;
 8024080:	4b62      	ldr	r3, [pc, #392]	; (802420c <CheckPassReadySwing+0x1e0>)
 8024082:	2200      	movs	r2, #0
 8024084:	701a      	strb	r2, [r3, #0]
 8024086:	e01f      	b.n	80240c8 <CheckPassReadySwing+0x9c>
				}
				else if (CheckZeroAuthCount() && gGCUStatus.IllegalPass.b.nTailgating_EX == FLG_OFF && gGCUStatus.PassageAlarm.b.nPassOverFromEX == OFF)
 8024088:	f7ff f9e8 	bl	802345c <CheckZeroAuthCount>
 802408c:	4603      	mov	r3, r0
 802408e:	2b00      	cmp	r3, #0
 8024090:	d01a      	beq.n	80240c8 <CheckPassReadySwing+0x9c>
 8024092:	4b64      	ldr	r3, [pc, #400]	; (8024224 <CheckPassReadySwing+0x1f8>)
 8024094:	7f1b      	ldrb	r3, [r3, #28]
 8024096:	f003 0310 	and.w	r3, r3, #16
 802409a:	b2db      	uxtb	r3, r3
 802409c:	2b00      	cmp	r3, #0
 802409e:	d113      	bne.n	80240c8 <CheckPassReadySwing+0x9c>
 80240a0:	4b60      	ldr	r3, [pc, #384]	; (8024224 <CheckPassReadySwing+0x1f8>)
 80240a2:	7a1b      	ldrb	r3, [r3, #8]
 80240a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80240a8:	b2db      	uxtb	r3, r3
 80240aa:	2b00      	cmp	r3, #0
 80240ac:	d10c      	bne.n	80240c8 <CheckPassReadySwing+0x9c>
				{
					// if nobody is in the opposite side
					if (!psenNewSwing.section.lower_EN)
 80240ae:	4b59      	ldr	r3, [pc, #356]	; (8024214 <CheckPassReadySwing+0x1e8>)
 80240b0:	781b      	ldrb	r3, [r3, #0]
 80240b2:	f023 030f 	bic.w	r3, r3, #15
 80240b6:	b2db      	uxtb	r3, r3
 80240b8:	2b00      	cmp	r3, #0
 80240ba:	d105      	bne.n	80240c8 <CheckPassReadySwing+0x9c>
					{
						isForceOpenReady_EX = TRUE;
 80240bc:	4b5a      	ldr	r3, [pc, #360]	; (8024228 <CheckPassReadySwing+0x1fc>)
 80240be:	2201      	movs	r2, #1
 80240c0:	701a      	strb	r2, [r3, #0]
						//PRINTL(" [EX] Force Open Ready");
						printf(" [EX] Force Open Ready\n");
 80240c2:	485a      	ldr	r0, [pc, #360]	; (802422c <CheckPassReadySwing+0x200>)
 80240c4:	f004 fcca 	bl	8028a5c <printf_>
				}
			}
		}

		// Luggage check (Stroller, Bicycle, Luggage)
		if (gGCUStatus.bAuthCount_EX && psenNewSwing.dirExit.enter && psenNewSwing.b.s13 && psenNewSwing.b.s14 && !psenNewSwing.b.s11)
 80240c8:	4b56      	ldr	r3, [pc, #344]	; (8024224 <CheckPassReadySwing+0x1f8>)
 80240ca:	795b      	ldrb	r3, [r3, #5]
 80240cc:	b2db      	uxtb	r3, r3
 80240ce:	2b00      	cmp	r3, #0
 80240d0:	f000 8099 	beq.w	8024206 <CheckPassReadySwing+0x1da>
 80240d4:	4b4f      	ldr	r3, [pc, #316]	; (8024214 <CheckPassReadySwing+0x1e8>)
 80240d6:	785b      	ldrb	r3, [r3, #1]
 80240d8:	f003 0303 	and.w	r3, r3, #3
 80240dc:	b2db      	uxtb	r3, r3
 80240de:	2b00      	cmp	r3, #0
 80240e0:	f000 8091 	beq.w	8024206 <CheckPassReadySwing+0x1da>
 80240e4:	4b4b      	ldr	r3, [pc, #300]	; (8024214 <CheckPassReadySwing+0x1e8>)
 80240e6:	785b      	ldrb	r3, [r3, #1]
 80240e8:	f003 0310 	and.w	r3, r3, #16
 80240ec:	b2db      	uxtb	r3, r3
 80240ee:	2b00      	cmp	r3, #0
 80240f0:	f000 8089 	beq.w	8024206 <CheckPassReadySwing+0x1da>
 80240f4:	4b47      	ldr	r3, [pc, #284]	; (8024214 <CheckPassReadySwing+0x1e8>)
 80240f6:	785b      	ldrb	r3, [r3, #1]
 80240f8:	f003 0320 	and.w	r3, r3, #32
 80240fc:	b2db      	uxtb	r3, r3
 80240fe:	2b00      	cmp	r3, #0
 8024100:	f000 8081 	beq.w	8024206 <CheckPassReadySwing+0x1da>
 8024104:	4b43      	ldr	r3, [pc, #268]	; (8024214 <CheckPassReadySwing+0x1e8>)
 8024106:	785b      	ldrb	r3, [r3, #1]
 8024108:	f003 0304 	and.w	r3, r3, #4
 802410c:	b2db      	uxtb	r3, r3
 802410e:	2b00      	cmp	r3, #0
 8024110:	d179      	bne.n	8024206 <CheckPassReadySwing+0x1da>
		{
			isLuggageSet_EX = TRUE;
 8024112:	4b47      	ldr	r3, [pc, #284]	; (8024230 <CheckPassReadySwing+0x204>)
 8024114:	2201      	movs	r2, #1
 8024116:	701a      	strb	r2, [r3, #0]
			//PRINTL(" [EX] Set Luggage Flag");
			printf(" [EX] Set Luggage Flag\n");
 8024118:	4846      	ldr	r0, [pc, #280]	; (8024234 <CheckPassReadySwing+0x208>)
 802411a:	f004 fc9f 	bl	8028a5c <printf_>
			isLuggageSet_EN = TRUE;
			//PRINTL(" [EN] Set Luggage Flag");
			printf(" [EN] Set Luggage Flag  \n");
		}
	}
}
 802411e:	e072      	b.n	8024206 <CheckPassReadySwing+0x1da>
	else if (gisEntryPassenger == TRUE)
 8024120:	4b45      	ldr	r3, [pc, #276]	; (8024238 <CheckPassReadySwing+0x20c>)
 8024122:	781b      	ldrb	r3, [r3, #0]
 8024124:	2b00      	cmp	r3, #0
 8024126:	d06e      	beq.n	8024206 <CheckPassReadySwing+0x1da>
		if (isPassReady_EX == FALSE)
 8024128:	4b3d      	ldr	r3, [pc, #244]	; (8024220 <CheckPassReadySwing+0x1f4>)
 802412a:	781b      	ldrb	r3, [r3, #0]
 802412c:	f083 0301 	eor.w	r3, r3, #1
 8024130:	b2db      	uxtb	r3, r3
 8024132:	2b00      	cmp	r3, #0
 8024134:	d040      	beq.n	80241b8 <CheckPassReadySwing+0x18c>
			bPassPattern_EN |= psenNewSwing.dirEntry.passage;
 8024136:	4b37      	ldr	r3, [pc, #220]	; (8024214 <CheckPassReadySwing+0x1e8>)
 8024138:	781b      	ldrb	r3, [r3, #0]
 802413a:	f343 0385 	sbfx	r3, r3, #2, #6
 802413e:	b25b      	sxtb	r3, r3
 8024140:	461a      	mov	r2, r3
 8024142:	4b3e      	ldr	r3, [pc, #248]	; (802423c <CheckPassReadySwing+0x210>)
 8024144:	781b      	ldrb	r3, [r3, #0]
 8024146:	b25b      	sxtb	r3, r3
 8024148:	4313      	orrs	r3, r2
 802414a:	b25b      	sxtb	r3, r3
 802414c:	b2da      	uxtb	r2, r3
 802414e:	4b3b      	ldr	r3, [pc, #236]	; (802423c <CheckPassReadySwing+0x210>)
 8024150:	701a      	strb	r2, [r3, #0]
			if (bPassPattern_EN >= PASS_PATN_PASS_READY)
 8024152:	4b3a      	ldr	r3, [pc, #232]	; (802423c <CheckPassReadySwing+0x210>)
 8024154:	781b      	ldrb	r3, [r3, #0]
 8024156:	2b03      	cmp	r3, #3
 8024158:	d92e      	bls.n	80241b8 <CheckPassReadySwing+0x18c>
				printf(" [EN] Pass Ready \n");
 802415a:	4839      	ldr	r0, [pc, #228]	; (8024240 <CheckPassReadySwing+0x214>)
 802415c:	f004 fc7e 	bl	8028a5c <printf_>
				isPassReady_EN = TRUE;
 8024160:	4b2b      	ldr	r3, [pc, #172]	; (8024210 <CheckPassReadySwing+0x1e4>)
 8024162:	2201      	movs	r2, #1
 8024164:	701a      	strb	r2, [r3, #0]
				if (gGCUStatus.bAuthCount_EN)
 8024166:	4b2f      	ldr	r3, [pc, #188]	; (8024224 <CheckPassReadySwing+0x1f8>)
 8024168:	791b      	ldrb	r3, [r3, #4]
 802416a:	b2db      	uxtb	r3, r3
 802416c:	2b00      	cmp	r3, #0
 802416e:	d003      	beq.n	8024178 <CheckPassReadySwing+0x14c>
					gisEntryPassenger = FALSE;
 8024170:	4b31      	ldr	r3, [pc, #196]	; (8024238 <CheckPassReadySwing+0x20c>)
 8024172:	2200      	movs	r2, #0
 8024174:	701a      	strb	r2, [r3, #0]
 8024176:	e01f      	b.n	80241b8 <CheckPassReadySwing+0x18c>
				else if (CheckZeroAuthCount() && gGCUStatus.IllegalPass.b.nTailgating_EN == FLG_OFF && gGCUStatus.PassageAlarm.b.nPassOverFromEN == OFF)
 8024178:	f7ff f970 	bl	802345c <CheckZeroAuthCount>
 802417c:	4603      	mov	r3, r0
 802417e:	2b00      	cmp	r3, #0
 8024180:	d01a      	beq.n	80241b8 <CheckPassReadySwing+0x18c>
 8024182:	4b28      	ldr	r3, [pc, #160]	; (8024224 <CheckPassReadySwing+0x1f8>)
 8024184:	7f1b      	ldrb	r3, [r3, #28]
 8024186:	f003 0301 	and.w	r3, r3, #1
 802418a:	b2db      	uxtb	r3, r3
 802418c:	2b00      	cmp	r3, #0
 802418e:	d113      	bne.n	80241b8 <CheckPassReadySwing+0x18c>
 8024190:	4b24      	ldr	r3, [pc, #144]	; (8024224 <CheckPassReadySwing+0x1f8>)
 8024192:	7a1b      	ldrb	r3, [r3, #8]
 8024194:	f003 0308 	and.w	r3, r3, #8
 8024198:	b2db      	uxtb	r3, r3
 802419a:	2b00      	cmp	r3, #0
 802419c:	d10c      	bne.n	80241b8 <CheckPassReadySwing+0x18c>
					if (!psenNewSwing.section.lower_EX)
 802419e:	4b1d      	ldr	r3, [pc, #116]	; (8024214 <CheckPassReadySwing+0x1e8>)
 80241a0:	785b      	ldrb	r3, [r3, #1]
 80241a2:	f023 030f 	bic.w	r3, r3, #15
 80241a6:	b2db      	uxtb	r3, r3
 80241a8:	2b00      	cmp	r3, #0
 80241aa:	d105      	bne.n	80241b8 <CheckPassReadySwing+0x18c>
						isForceOpenReady_EN = TRUE;
 80241ac:	4b25      	ldr	r3, [pc, #148]	; (8024244 <CheckPassReadySwing+0x218>)
 80241ae:	2201      	movs	r2, #1
 80241b0:	701a      	strb	r2, [r3, #0]
						printf(" [EN]  Force Open Ready \n");
 80241b2:	4825      	ldr	r0, [pc, #148]	; (8024248 <CheckPassReadySwing+0x21c>)
 80241b4:	f004 fc52 	bl	8028a5c <printf_>
		if (gGCUStatus.bAuthCount_EN && psenNewSwing.dirEntry.enter && psenNewSwing.b.s03 && psenNewSwing.b.s04 && !psenNewSwing.b.s01)
 80241b8:	4b1a      	ldr	r3, [pc, #104]	; (8024224 <CheckPassReadySwing+0x1f8>)
 80241ba:	791b      	ldrb	r3, [r3, #4]
 80241bc:	b2db      	uxtb	r3, r3
 80241be:	2b00      	cmp	r3, #0
 80241c0:	d021      	beq.n	8024206 <CheckPassReadySwing+0x1da>
 80241c2:	4b14      	ldr	r3, [pc, #80]	; (8024214 <CheckPassReadySwing+0x1e8>)
 80241c4:	781b      	ldrb	r3, [r3, #0]
 80241c6:	f003 0303 	and.w	r3, r3, #3
 80241ca:	b2db      	uxtb	r3, r3
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	d01a      	beq.n	8024206 <CheckPassReadySwing+0x1da>
 80241d0:	4b10      	ldr	r3, [pc, #64]	; (8024214 <CheckPassReadySwing+0x1e8>)
 80241d2:	781b      	ldrb	r3, [r3, #0]
 80241d4:	f003 0304 	and.w	r3, r3, #4
 80241d8:	b2db      	uxtb	r3, r3
 80241da:	2b00      	cmp	r3, #0
 80241dc:	d013      	beq.n	8024206 <CheckPassReadySwing+0x1da>
 80241de:	4b0d      	ldr	r3, [pc, #52]	; (8024214 <CheckPassReadySwing+0x1e8>)
 80241e0:	781b      	ldrb	r3, [r3, #0]
 80241e2:	f003 0308 	and.w	r3, r3, #8
 80241e6:	b2db      	uxtb	r3, r3
 80241e8:	2b00      	cmp	r3, #0
 80241ea:	d00c      	beq.n	8024206 <CheckPassReadySwing+0x1da>
 80241ec:	4b09      	ldr	r3, [pc, #36]	; (8024214 <CheckPassReadySwing+0x1e8>)
 80241ee:	781b      	ldrb	r3, [r3, #0]
 80241f0:	f003 0301 	and.w	r3, r3, #1
 80241f4:	b2db      	uxtb	r3, r3
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	d105      	bne.n	8024206 <CheckPassReadySwing+0x1da>
			isLuggageSet_EN = TRUE;
 80241fa:	4b14      	ldr	r3, [pc, #80]	; (802424c <CheckPassReadySwing+0x220>)
 80241fc:	2201      	movs	r2, #1
 80241fe:	701a      	strb	r2, [r3, #0]
			printf(" [EN] Set Luggage Flag  \n");
 8024200:	4813      	ldr	r0, [pc, #76]	; (8024250 <CheckPassReadySwing+0x224>)
 8024202:	f004 fc2b 	bl	8028a5c <printf_>
}
 8024206:	bf00      	nop
 8024208:	bd80      	pop	{r7, pc}
 802420a:	bf00      	nop
 802420c:	2400043c 	.word	0x2400043c
 8024210:	2400041c 	.word	0x2400041c
 8024214:	2400040c 	.word	0x2400040c
 8024218:	2400041b 	.word	0x2400041b
 802421c:	080306cc 	.word	0x080306cc
 8024220:	2400041d 	.word	0x2400041d
 8024224:	240004b0 	.word	0x240004b0
 8024228:	24000423 	.word	0x24000423
 802422c:	080306e0 	.word	0x080306e0
 8024230:	24000421 	.word	0x24000421
 8024234:	080306f8 	.word	0x080306f8
 8024238:	2400043b 	.word	0x2400043b
 802423c:	2400041a 	.word	0x2400041a
 8024240:	08030710 	.word	0x08030710
 8024244:	24000422 	.word	0x24000422
 8024248:	08030724 	.word	0x08030724
 802424c:	24000420 	.word	0x24000420
 8024250:	08030740 	.word	0x08030740

08024254 <CheckPassingSwing>:

// JOB DONE
void CheckPassingSwing(void)
{
 8024254:	b580      	push	{r7, lr}
 8024256:	af00      	add	r7, sp, #0
	// To prevent the counter-enter, I utilize two boolean variable "isPassReady" and "isPassOver"
	if (isPassReady_EN)
 8024258:	4b8f      	ldr	r3, [pc, #572]	; (8024498 <CheckPassingSwing+0x244>)
 802425a:	781b      	ldrb	r3, [r3, #0]
 802425c:	2b00      	cmp	r3, #0
 802425e:	f000 808a 	beq.w	8024376 <CheckPassingSwing+0x122>
	{
		if (isPassOver_EN)
 8024262:	4b8e      	ldr	r3, [pc, #568]	; (802449c <CheckPassingSwing+0x248>)
 8024264:	781b      	ldrb	r3, [r3, #0]
 8024266:	2b00      	cmp	r3, #0
 8024268:	d06b      	beq.n	8024342 <CheckPassingSwing+0xee>
		{
			if (psenNewSwing.dirEntry.end)
 802426a:	4b8d      	ldr	r3, [pc, #564]	; (80244a0 <CheckPassingSwing+0x24c>)
 802426c:	785b      	ldrb	r3, [r3, #1]
 802426e:	f003 0303 	and.w	r3, r3, #3
 8024272:	b2db      	uxtb	r3, r3
 8024274:	2b00      	cmp	r3, #0
 8024276:	d07e      	beq.n	8024376 <CheckPassingSwing+0x122>
			{
				//PRINTL(" [EN] Pass over");
				printf(" [EN] Pass over  \n");
 8024278:	488a      	ldr	r0, [pc, #552]	; (80244a4 <CheckPassingSwing+0x250>)
 802427a:	f004 fbef 	bl	8028a5c <printf_>
				isPassReady_EN = FALSE;
 802427e:	4b86      	ldr	r3, [pc, #536]	; (8024498 <CheckPassingSwing+0x244>)
 8024280:	2200      	movs	r2, #0
 8024282:	701a      	strb	r2, [r3, #0]
				isPassOver_EN = FALSE;
 8024284:	4b85      	ldr	r3, [pc, #532]	; (802449c <CheckPassingSwing+0x248>)
 8024286:	2200      	movs	r2, #0
 8024288:	701a      	strb	r2, [r3, #0]
				bPassPattern_EN = PASS_PATN_NONE;
 802428a:	4b87      	ldr	r3, [pc, #540]	; (80244a8 <CheckPassingSwing+0x254>)
 802428c:	2200      	movs	r2, #0
 802428e:	701a      	strb	r2, [r3, #0]

				if (gGCUStatus.bAuthCount_EN == 1)
 8024290:	4b86      	ldr	r3, [pc, #536]	; (80244ac <CheckPassingSwing+0x258>)
 8024292:	791b      	ldrb	r3, [r3, #4]
 8024294:	b2db      	uxtb	r3, r3
 8024296:	2b01      	cmp	r3, #1
 8024298:	d144      	bne.n	8024324 <CheckPassingSwing+0xd0>
				{
					if (psenNewSwing.section.upper_EN)
 802429a:	4b81      	ldr	r3, [pc, #516]	; (80244a0 <CheckPassingSwing+0x24c>)
 802429c:	781b      	ldrb	r3, [r3, #0]
 802429e:	f003 030c 	and.w	r3, r3, #12
 80242a2:	b2db      	uxtb	r3, r3
 80242a4:	2b00      	cmp	r3, #0
 80242a6:	d02c      	beq.n	8024302 <CheckPassingSwing+0xae>
					{
						isPassReady_EN = TRUE;
 80242a8:	4b7b      	ldr	r3, [pc, #492]	; (8024498 <CheckPassingSwing+0x244>)
 80242aa:	2201      	movs	r2, #1
 80242ac:	701a      	strb	r2, [r3, #0]
						isPassOver_EN = TRUE;
 80242ae:	4b7b      	ldr	r3, [pc, #492]	; (802449c <CheckPassingSwing+0x248>)
 80242b0:	2201      	movs	r2, #1
 80242b2:	701a      	strb	r2, [r3, #0]

						if (!psenNewSwing.b.s13 && !psenNewSwing.b.s14 && !psenNewSwing.b.s15)
 80242b4:	4b7a      	ldr	r3, [pc, #488]	; (80244a0 <CheckPassingSwing+0x24c>)
 80242b6:	785b      	ldrb	r3, [r3, #1]
 80242b8:	f003 0310 	and.w	r3, r3, #16
 80242bc:	b2db      	uxtb	r3, r3
 80242be:	2b00      	cmp	r3, #0
 80242c0:	d159      	bne.n	8024376 <CheckPassingSwing+0x122>
 80242c2:	4b77      	ldr	r3, [pc, #476]	; (80244a0 <CheckPassingSwing+0x24c>)
 80242c4:	785b      	ldrb	r3, [r3, #1]
 80242c6:	f003 0320 	and.w	r3, r3, #32
 80242ca:	b2db      	uxtb	r3, r3
 80242cc:	2b00      	cmp	r3, #0
 80242ce:	d152      	bne.n	8024376 <CheckPassingSwing+0x122>
 80242d0:	4b73      	ldr	r3, [pc, #460]	; (80244a0 <CheckPassingSwing+0x24c>)
 80242d2:	785b      	ldrb	r3, [r3, #1]
 80242d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80242d8:	b2db      	uxtb	r3, r3
 80242da:	2b00      	cmp	r3, #0
 80242dc:	d14b      	bne.n	8024376 <CheckPassingSwing+0x122>
						{
							if (gGCUStatus.IllegalPass.b.nTailgating_EN == FLG_OFF && timerTgFilter.fStart == FALSE)
 80242de:	4b73      	ldr	r3, [pc, #460]	; (80244ac <CheckPassingSwing+0x258>)
 80242e0:	7f1b      	ldrb	r3, [r3, #28]
 80242e2:	f003 0301 	and.w	r3, r3, #1
 80242e6:	b2db      	uxtb	r3, r3
 80242e8:	2b00      	cmp	r3, #0
 80242ea:	d144      	bne.n	8024376 <CheckPassingSwing+0x122>
 80242ec:	4b70      	ldr	r3, [pc, #448]	; (80244b0 <CheckPassingSwing+0x25c>)
 80242ee:	781b      	ldrb	r3, [r3, #0]
 80242f0:	f083 0301 	eor.w	r3, r3, #1
 80242f4:	b2db      	uxtb	r3, r3
 80242f6:	2b00      	cmp	r3, #0
 80242f8:	d03d      	beq.n	8024376 <CheckPassingSwing+0x122>
							{
								SetTimer(&timerTgFilter);
 80242fa:	486d      	ldr	r0, [pc, #436]	; (80244b0 <CheckPassingSwing+0x25c>)
 80242fc:	f00a fc52 	bl	802eba4 <SetTimer>
 8024300:	e039      	b.n	8024376 <CheckPassingSwing+0x122>
							}
						}
					}
					else
					{
						gGCUStatus.bAuthCount_EN--;
 8024302:	4b6a      	ldr	r3, [pc, #424]	; (80244ac <CheckPassingSwing+0x258>)
 8024304:	791b      	ldrb	r3, [r3, #4]
 8024306:	b2db      	uxtb	r3, r3
 8024308:	3b01      	subs	r3, #1
 802430a:	b2da      	uxtb	r2, r3
 802430c:	4b67      	ldr	r3, [pc, #412]	; (80244ac <CheckPassingSwing+0x258>)
 802430e:	711a      	strb	r2, [r3, #4]
						SetTimer(&timerCloseWait);
 8024310:	4868      	ldr	r0, [pc, #416]	; (80244b4 <CheckPassingSwing+0x260>)
 8024312:	f00a fc47 	bl	802eba4 <SetTimer>
						ResetTimer(&timerAuthorize);
 8024316:	4868      	ldr	r0, [pc, #416]	; (80244b8 <CheckPassingSwing+0x264>)
 8024318:	f00a fc58 	bl	802ebcc <ResetTimer>
						//PRINTL(" [EN] Barrier close");
						printf(" [EN] Barrier close \n");
 802431c:	4867      	ldr	r0, [pc, #412]	; (80244bc <CheckPassingSwing+0x268>)
 802431e:	f004 fb9d 	bl	8028a5c <printf_>
 8024322:	e028      	b.n	8024376 <CheckPassingSwing+0x122>
					}
				}
				else if (gGCUStatus.bAuthCount_EN > 1)
 8024324:	4b61      	ldr	r3, [pc, #388]	; (80244ac <CheckPassingSwing+0x258>)
 8024326:	791b      	ldrb	r3, [r3, #4]
 8024328:	b2db      	uxtb	r3, r3
 802432a:	2b01      	cmp	r3, #1
 802432c:	d923      	bls.n	8024376 <CheckPassingSwing+0x122>
				{
					gGCUStatus.bAuthCount_EN--;
 802432e:	4b5f      	ldr	r3, [pc, #380]	; (80244ac <CheckPassingSwing+0x258>)
 8024330:	791b      	ldrb	r3, [r3, #4]
 8024332:	b2db      	uxtb	r3, r3
 8024334:	3b01      	subs	r3, #1
 8024336:	b2da      	uxtb	r2, r3
 8024338:	4b5c      	ldr	r3, [pc, #368]	; (80244ac <CheckPassingSwing+0x258>)
 802433a:	711a      	strb	r2, [r3, #4]
					SetAuthTimer();
 802433c:	f7fd ffa0 	bl	8022280 <SetAuthTimer>
 8024340:	e019      	b.n	8024376 <CheckPassingSwing+0x122>
				}
			}
		}
		else
		{
			if (psenNewSwing.dirEntry.lower)
 8024342:	4b57      	ldr	r3, [pc, #348]	; (80244a0 <CheckPassingSwing+0x24c>)
 8024344:	785b      	ldrb	r3, [r3, #1]
 8024346:	f023 030f 	bic.w	r3, r3, #15
 802434a:	b2db      	uxtb	r3, r3
 802434c:	2b00      	cmp	r3, #0
 802434e:	d012      	beq.n	8024376 <CheckPassingSwing+0x122>
			{
				//PRINTL(" [EN] passing before");
				printf(" [EN] passing before \n");
 8024350:	485b      	ldr	r0, [pc, #364]	; (80244c0 <CheckPassingSwing+0x26c>)
 8024352:	f004 fb83 	bl	8028a5c <printf_>

				if (gGCUStatus.bAuthCount_EN || gGCUStatus.IllegalPass.b.nTailgating_EN == FLG_SET)
 8024356:	4b55      	ldr	r3, [pc, #340]	; (80244ac <CheckPassingSwing+0x258>)
 8024358:	791b      	ldrb	r3, [r3, #4]
 802435a:	b2db      	uxtb	r3, r3
 802435c:	2b00      	cmp	r3, #0
 802435e:	d00a      	beq.n	8024376 <CheckPassingSwing+0x122>
				{
					isPassOver_EN = TRUE;
 8024360:	4b4e      	ldr	r3, [pc, #312]	; (802449c <CheckPassingSwing+0x248>)
 8024362:	2201      	movs	r2, #1
 8024364:	701a      	strb	r2, [r3, #0]
					gGCUStatus.PassageAlarm.b.nPassOverFromEN = ON;
 8024366:	4a51      	ldr	r2, [pc, #324]	; (80244ac <CheckPassingSwing+0x258>)
 8024368:	7a13      	ldrb	r3, [r2, #8]
 802436a:	f043 0308 	orr.w	r3, r3, #8
 802436e:	7213      	strb	r3, [r2, #8]
					//PRINTL(" [EN] passing");
					printf(" [EN] passing \n");
 8024370:	4854      	ldr	r0, [pc, #336]	; (80244c4 <CheckPassingSwing+0x270>)
 8024372:	f004 fb73 	bl	8028a5c <printf_>
				}
			}
		}
	}

	if (isPassReady_EX)
 8024376:	4b54      	ldr	r3, [pc, #336]	; (80244c8 <CheckPassingSwing+0x274>)
 8024378:	781b      	ldrb	r3, [r3, #0]
 802437a:	2b00      	cmp	r3, #0
 802437c:	f000 808a 	beq.w	8024494 <CheckPassingSwing+0x240>
	{
		if (isPassOver_EX)
 8024380:	4b52      	ldr	r3, [pc, #328]	; (80244cc <CheckPassingSwing+0x278>)
 8024382:	781b      	ldrb	r3, [r3, #0]
 8024384:	2b00      	cmp	r3, #0
 8024386:	d06b      	beq.n	8024460 <CheckPassingSwing+0x20c>
		{
			if (psenNewSwing.dirExit.end)
 8024388:	4b45      	ldr	r3, [pc, #276]	; (80244a0 <CheckPassingSwing+0x24c>)
 802438a:	781b      	ldrb	r3, [r3, #0]
 802438c:	f003 0303 	and.w	r3, r3, #3
 8024390:	b2db      	uxtb	r3, r3
 8024392:	2b00      	cmp	r3, #0
 8024394:	d07e      	beq.n	8024494 <CheckPassingSwing+0x240>
			{
				//PRINTL(" [EX] Pass over");
				printf(" [EX] Pass over \n");
 8024396:	484e      	ldr	r0, [pc, #312]	; (80244d0 <CheckPassingSwing+0x27c>)
 8024398:	f004 fb60 	bl	8028a5c <printf_>
				isPassReady_EX = FALSE;
 802439c:	4b4a      	ldr	r3, [pc, #296]	; (80244c8 <CheckPassingSwing+0x274>)
 802439e:	2200      	movs	r2, #0
 80243a0:	701a      	strb	r2, [r3, #0]
				isPassOver_EX = FALSE;
 80243a2:	4b4a      	ldr	r3, [pc, #296]	; (80244cc <CheckPassingSwing+0x278>)
 80243a4:	2200      	movs	r2, #0
 80243a6:	701a      	strb	r2, [r3, #0]
				bPassPattern_EX = PASS_PATN_NONE;
 80243a8:	4b4a      	ldr	r3, [pc, #296]	; (80244d4 <CheckPassingSwing+0x280>)
 80243aa:	2200      	movs	r2, #0
 80243ac:	701a      	strb	r2, [r3, #0]

				if (gGCUStatus.bAuthCount_EX == 1)
 80243ae:	4b3f      	ldr	r3, [pc, #252]	; (80244ac <CheckPassingSwing+0x258>)
 80243b0:	795b      	ldrb	r3, [r3, #5]
 80243b2:	b2db      	uxtb	r3, r3
 80243b4:	2b01      	cmp	r3, #1
 80243b6:	d144      	bne.n	8024442 <CheckPassingSwing+0x1ee>
				{
					if (psenNewSwing.section.upper_EX)
 80243b8:	4b39      	ldr	r3, [pc, #228]	; (80244a0 <CheckPassingSwing+0x24c>)
 80243ba:	785b      	ldrb	r3, [r3, #1]
 80243bc:	f003 030c 	and.w	r3, r3, #12
 80243c0:	b2db      	uxtb	r3, r3
 80243c2:	2b00      	cmp	r3, #0
 80243c4:	d02c      	beq.n	8024420 <CheckPassingSwing+0x1cc>
					{
						isPassReady_EX = TRUE;
 80243c6:	4b40      	ldr	r3, [pc, #256]	; (80244c8 <CheckPassingSwing+0x274>)
 80243c8:	2201      	movs	r2, #1
 80243ca:	701a      	strb	r2, [r3, #0]
						isPassOver_EX = TRUE;
 80243cc:	4b3f      	ldr	r3, [pc, #252]	; (80244cc <CheckPassingSwing+0x278>)
 80243ce:	2201      	movs	r2, #1
 80243d0:	701a      	strb	r2, [r3, #0]

						if (!psenNewSwing.b.s05 && !psenNewSwing.b.s06 && !psenNewSwing.b.s07)
 80243d2:	4b33      	ldr	r3, [pc, #204]	; (80244a0 <CheckPassingSwing+0x24c>)
 80243d4:	781b      	ldrb	r3, [r3, #0]
 80243d6:	f003 0310 	and.w	r3, r3, #16
 80243da:	b2db      	uxtb	r3, r3
 80243dc:	2b00      	cmp	r3, #0
 80243de:	d159      	bne.n	8024494 <CheckPassingSwing+0x240>
 80243e0:	4b2f      	ldr	r3, [pc, #188]	; (80244a0 <CheckPassingSwing+0x24c>)
 80243e2:	781b      	ldrb	r3, [r3, #0]
 80243e4:	f003 0320 	and.w	r3, r3, #32
 80243e8:	b2db      	uxtb	r3, r3
 80243ea:	2b00      	cmp	r3, #0
 80243ec:	d152      	bne.n	8024494 <CheckPassingSwing+0x240>
 80243ee:	4b2c      	ldr	r3, [pc, #176]	; (80244a0 <CheckPassingSwing+0x24c>)
 80243f0:	781b      	ldrb	r3, [r3, #0]
 80243f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80243f6:	b2db      	uxtb	r3, r3
 80243f8:	2b00      	cmp	r3, #0
 80243fa:	d14b      	bne.n	8024494 <CheckPassingSwing+0x240>
						{ // If not detected on the upper sensors, no tailgating
							if (gGCUStatus.IllegalPass.b.nTailgating_EX == FLG_OFF && timerTgFilter.fStart == FALSE)
 80243fc:	4b2b      	ldr	r3, [pc, #172]	; (80244ac <CheckPassingSwing+0x258>)
 80243fe:	7f1b      	ldrb	r3, [r3, #28]
 8024400:	f003 0310 	and.w	r3, r3, #16
 8024404:	b2db      	uxtb	r3, r3
 8024406:	2b00      	cmp	r3, #0
 8024408:	d144      	bne.n	8024494 <CheckPassingSwing+0x240>
 802440a:	4b29      	ldr	r3, [pc, #164]	; (80244b0 <CheckPassingSwing+0x25c>)
 802440c:	781b      	ldrb	r3, [r3, #0]
 802440e:	f083 0301 	eor.w	r3, r3, #1
 8024412:	b2db      	uxtb	r3, r3
 8024414:	2b00      	cmp	r3, #0
 8024416:	d03d      	beq.n	8024494 <CheckPassingSwing+0x240>
							{
								SetTimer(&timerTgFilter);
 8024418:	4825      	ldr	r0, [pc, #148]	; (80244b0 <CheckPassingSwing+0x25c>)
 802441a:	f00a fbc3 	bl	802eba4 <SetTimer>
					printf(" [EX] passing\n");
				}
			}
		}
	}
}
 802441e:	e039      	b.n	8024494 <CheckPassingSwing+0x240>
						gGCUStatus.bAuthCount_EX--;
 8024420:	4b22      	ldr	r3, [pc, #136]	; (80244ac <CheckPassingSwing+0x258>)
 8024422:	795b      	ldrb	r3, [r3, #5]
 8024424:	b2db      	uxtb	r3, r3
 8024426:	3b01      	subs	r3, #1
 8024428:	b2da      	uxtb	r2, r3
 802442a:	4b20      	ldr	r3, [pc, #128]	; (80244ac <CheckPassingSwing+0x258>)
 802442c:	715a      	strb	r2, [r3, #5]
						SetTimer(&timerCloseWait);
 802442e:	4821      	ldr	r0, [pc, #132]	; (80244b4 <CheckPassingSwing+0x260>)
 8024430:	f00a fbb8 	bl	802eba4 <SetTimer>
						ResetTimer(&timerAuthorize);
 8024434:	4820      	ldr	r0, [pc, #128]	; (80244b8 <CheckPassingSwing+0x264>)
 8024436:	f00a fbc9 	bl	802ebcc <ResetTimer>
						printf(" [EX] Barrier close \n");
 802443a:	4827      	ldr	r0, [pc, #156]	; (80244d8 <CheckPassingSwing+0x284>)
 802443c:	f004 fb0e 	bl	8028a5c <printf_>
}
 8024440:	e028      	b.n	8024494 <CheckPassingSwing+0x240>
				else if (gGCUStatus.bAuthCount_EX > 1)
 8024442:	4b1a      	ldr	r3, [pc, #104]	; (80244ac <CheckPassingSwing+0x258>)
 8024444:	795b      	ldrb	r3, [r3, #5]
 8024446:	b2db      	uxtb	r3, r3
 8024448:	2b01      	cmp	r3, #1
 802444a:	d923      	bls.n	8024494 <CheckPassingSwing+0x240>
					gGCUStatus.bAuthCount_EX--;
 802444c:	4b17      	ldr	r3, [pc, #92]	; (80244ac <CheckPassingSwing+0x258>)
 802444e:	795b      	ldrb	r3, [r3, #5]
 8024450:	b2db      	uxtb	r3, r3
 8024452:	3b01      	subs	r3, #1
 8024454:	b2da      	uxtb	r2, r3
 8024456:	4b15      	ldr	r3, [pc, #84]	; (80244ac <CheckPassingSwing+0x258>)
 8024458:	715a      	strb	r2, [r3, #5]
					SetAuthTimer();
 802445a:	f7fd ff11 	bl	8022280 <SetAuthTimer>
}
 802445e:	e019      	b.n	8024494 <CheckPassingSwing+0x240>
			if (psenNewSwing.dirExit.lower)
 8024460:	4b0f      	ldr	r3, [pc, #60]	; (80244a0 <CheckPassingSwing+0x24c>)
 8024462:	781b      	ldrb	r3, [r3, #0]
 8024464:	f023 030f 	bic.w	r3, r3, #15
 8024468:	b2db      	uxtb	r3, r3
 802446a:	2b00      	cmp	r3, #0
 802446c:	d012      	beq.n	8024494 <CheckPassingSwing+0x240>
				printf(" [EX] passing before \n");
 802446e:	481b      	ldr	r0, [pc, #108]	; (80244dc <CheckPassingSwing+0x288>)
 8024470:	f004 faf4 	bl	8028a5c <printf_>
				if (gGCUStatus.bAuthCount_EX || gGCUStatus.IllegalPass.b.nTailgating_EX == FLG_SET)
 8024474:	4b0d      	ldr	r3, [pc, #52]	; (80244ac <CheckPassingSwing+0x258>)
 8024476:	795b      	ldrb	r3, [r3, #5]
 8024478:	b2db      	uxtb	r3, r3
 802447a:	2b00      	cmp	r3, #0
 802447c:	d00a      	beq.n	8024494 <CheckPassingSwing+0x240>
					isPassOver_EX = TRUE;
 802447e:	4b13      	ldr	r3, [pc, #76]	; (80244cc <CheckPassingSwing+0x278>)
 8024480:	2201      	movs	r2, #1
 8024482:	701a      	strb	r2, [r3, #0]
					gGCUStatus.PassageAlarm.b.nPassOverFromEX = ON;
 8024484:	4a09      	ldr	r2, [pc, #36]	; (80244ac <CheckPassingSwing+0x258>)
 8024486:	7a13      	ldrb	r3, [r2, #8]
 8024488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802448c:	7213      	strb	r3, [r2, #8]
					printf(" [EX] passing\n");
 802448e:	4814      	ldr	r0, [pc, #80]	; (80244e0 <CheckPassingSwing+0x28c>)
 8024490:	f004 fae4 	bl	8028a5c <printf_>
}
 8024494:	bf00      	nop
 8024496:	bd80      	pop	{r7, pc}
 8024498:	2400041c 	.word	0x2400041c
 802449c:	2400041e 	.word	0x2400041e
 80244a0:	2400040c 	.word	0x2400040c
 80244a4:	0803075c 	.word	0x0803075c
 80244a8:	2400041a 	.word	0x2400041a
 80244ac:	240004b0 	.word	0x240004b0
 80244b0:	24000244 	.word	0x24000244
 80244b4:	24000238 	.word	0x24000238
 80244b8:	24000160 	.word	0x24000160
 80244bc:	08030770 	.word	0x08030770
 80244c0:	08030788 	.word	0x08030788
 80244c4:	080307a0 	.word	0x080307a0
 80244c8:	2400041d 	.word	0x2400041d
 80244cc:	2400041f 	.word	0x2400041f
 80244d0:	080307b0 	.word	0x080307b0
 80244d4:	2400041b 	.word	0x2400041b
 80244d8:	080307c4 	.word	0x080307c4
 80244dc:	080307dc 	.word	0x080307dc
 80244e0:	080307f4 	.word	0x080307f4

080244e4 <CheckCounterEnterTimer>:

void CheckCounterEnterTimer(void)
{
 80244e4:	b580      	push	{r7, lr}
 80244e6:	af00      	add	r7, sp, #0
	if (timerInverseEnter.fStart)
 80244e8:	4b0a      	ldr	r3, [pc, #40]	; (8024514 <CheckCounterEnterTimer+0x30>)
 80244ea:	781b      	ldrb	r3, [r3, #0]
 80244ec:	2b00      	cmp	r3, #0
 80244ee:	d00f      	beq.n	8024510 <CheckCounterEnterTimer+0x2c>
	{
		if (IsTimeout(&timerInverseEnter, dwInverseCloseTime * TICK_COUNT_100MS))
 80244f0:	4b09      	ldr	r3, [pc, #36]	; (8024518 <CheckCounterEnterTimer+0x34>)
 80244f2:	681a      	ldr	r2, [r3, #0]
 80244f4:	4613      	mov	r3, r2
 80244f6:	009b      	lsls	r3, r3, #2
 80244f8:	4413      	add	r3, r2
 80244fa:	005b      	lsls	r3, r3, #1
 80244fc:	4619      	mov	r1, r3
 80244fe:	4805      	ldr	r0, [pc, #20]	; (8024514 <CheckCounterEnterTimer+0x30>)
 8024500:	f00a fb72 	bl	802ebe8 <IsTimeout>
 8024504:	4603      	mov	r3, r0
 8024506:	2b00      	cmp	r3, #0
 8024508:	d002      	beq.n	8024510 <CheckCounterEnterTimer+0x2c>
		{
			ResetTimer(&timerInverseEnter);
 802450a:	4802      	ldr	r0, [pc, #8]	; (8024514 <CheckCounterEnterTimer+0x30>)
 802450c:	f00a fb5e 	bl	802ebcc <ResetTimer>
					isCounterEnter = FALSE;
				}
			}
		}
	}
}
 8024510:	bf00      	nop
 8024512:	bd80      	pop	{r7, pc}
 8024514:	24000220 	.word	0x24000220
 8024518:	24000018 	.word	0x24000018

0802451c <CheckIllegalEnterSwing>:

void CheckIllegalEnterSwing(void)
{
 802451c:	b580      	push	{r7, lr}
 802451e:	af00      	add	r7, sp, #0
	if (gisEntryPassenger && gGCUStatus.PassageAlarm.b.nPassOverFromEX != ON)
 8024520:	4b50      	ldr	r3, [pc, #320]	; (8024664 <CheckIllegalEnterSwing+0x148>)
 8024522:	781b      	ldrb	r3, [r3, #0]
 8024524:	2b00      	cmp	r3, #0
 8024526:	d04b      	beq.n	80245c0 <CheckIllegalEnterSwing+0xa4>
	{
		if (gGCUStatus.bAuthCount_EX)
 8024528:	4b4f      	ldr	r3, [pc, #316]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 802452a:	795b      	ldrb	r3, [r3, #5]
 802452c:	b2db      	uxtb	r3, r3
 802452e:	2b00      	cmp	r3, #0
 8024530:	d039      	beq.n	80245a6 <CheckIllegalEnterSwing+0x8a>
		{
			if (gGCUStatus.IllegalPass.b.nCounter_EX == FLG_OFF && isPassReady_EX == FALSE && psenNewSwing.b.s02)
 8024532:	4b4d      	ldr	r3, [pc, #308]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 8024534:	7f1b      	ldrb	r3, [r3, #28]
 8024536:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802453a:	b2db      	uxtb	r3, r3
 802453c:	2b00      	cmp	r3, #0
 802453e:	d13f      	bne.n	80245c0 <CheckIllegalEnterSwing+0xa4>
 8024540:	4b4a      	ldr	r3, [pc, #296]	; (802466c <CheckIllegalEnterSwing+0x150>)
 8024542:	781b      	ldrb	r3, [r3, #0]
 8024544:	f083 0301 	eor.w	r3, r3, #1
 8024548:	b2db      	uxtb	r3, r3
 802454a:	2b00      	cmp	r3, #0
 802454c:	d038      	beq.n	80245c0 <CheckIllegalEnterSwing+0xa4>
 802454e:	4b48      	ldr	r3, [pc, #288]	; (8024670 <CheckIllegalEnterSwing+0x154>)
 8024550:	781b      	ldrb	r3, [r3, #0]
 8024552:	f003 0302 	and.w	r3, r3, #2
 8024556:	b2db      	uxtb	r3, r3
 8024558:	2b00      	cmp	r3, #0
 802455a:	d031      	beq.n	80245c0 <CheckIllegalEnterSwing+0xa4>
			{
				if (isCounterEnter == FALSE)
 802455c:	4b45      	ldr	r3, [pc, #276]	; (8024674 <CheckIllegalEnterSwing+0x158>)
 802455e:	781b      	ldrb	r3, [r3, #0]
 8024560:	f083 0301 	eor.w	r3, r3, #1
 8024564:	b2db      	uxtb	r3, r3
 8024566:	2b00      	cmp	r3, #0
 8024568:	d02a      	beq.n	80245c0 <CheckIllegalEnterSwing+0xa4>
				{
					SetTimer(&timerInverseEnter);
 802456a:	4843      	ldr	r0, [pc, #268]	; (8024678 <CheckIllegalEnterSwing+0x15c>)
 802456c:	f00a fb1a 	bl	802eba4 <SetTimer>
					CloseBarrierForSwing();
 8024570:	f7ff f984 	bl	802387c <CloseBarrierForSwing>
					isCounterEnter = TRUE;
 8024574:	4b3f      	ldr	r3, [pc, #252]	; (8024674 <CheckIllegalEnterSwing+0x158>)
 8024576:	2201      	movs	r2, #1
 8024578:	701a      	strb	r2, [r3, #0]
					InhibitPass(FROM_ENTRY);
 802457a:	2001      	movs	r0, #1
 802457c:	f7fd fbf2 	bl	8021d64 <InhibitPass>
					gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_COUNTER_ENTER;
 8024580:	4a39      	ldr	r2, [pc, #228]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 8024582:	7a13      	ldrb	r3, [r2, #8]
 8024584:	2102      	movs	r1, #2
 8024586:	f361 1306 	bfi	r3, r1, #4, #3
 802458a:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nCounter_EX = FLG_SET;
 802458c:	4a36      	ldr	r2, [pc, #216]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 802458e:	7f13      	ldrb	r3, [r2, #28]
 8024590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024594:	7713      	strb	r3, [r2, #28]
					//PRINTL(" [EX] Inhibit Pass - Inverse Enter:%d", gGCUStatus.bAuthCount_EX);
					printf(" [EX] Inhibit Pass - Inverse Enter:%d \n", gGCUStatus.bAuthCount_EX);
 8024596:	4b34      	ldr	r3, [pc, #208]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 8024598:	795b      	ldrb	r3, [r3, #5]
 802459a:	b2db      	uxtb	r3, r3
 802459c:	4619      	mov	r1, r3
 802459e:	4837      	ldr	r0, [pc, #220]	; (802467c <CheckIllegalEnterSwing+0x160>)
 80245a0:	f004 fa5c 	bl	8028a5c <printf_>
 80245a4:	e00c      	b.n	80245c0 <CheckIllegalEnterSwing+0xa4>
				}
			}
		}
		else if (!gGCUStatus.bAuthCount_EN)
 80245a6:	4b30      	ldr	r3, [pc, #192]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 80245a8:	791b      	ldrb	r3, [r3, #4]
 80245aa:	b2db      	uxtb	r3, r3
 80245ac:	2b00      	cmp	r3, #0
 80245ae:	d107      	bne.n	80245c0 <CheckIllegalEnterSwing+0xa4>
		{
			if (CheckCritical())
 80245b0:	f7fe ff6a 	bl	8023488 <CheckCritical>
 80245b4:	4603      	mov	r3, r0
 80245b6:	2b00      	cmp	r3, #0
 80245b8:	d002      	beq.n	80245c0 <CheckIllegalEnterSwing+0xa4>
			{
				CheckIllegalEnterTimer(FROM_ENTRY);
 80245ba:	2001      	movs	r0, #1
 80245bc:	f7fd fdd0 	bl	8022160 <CheckIllegalEnterTimer>
			}
		}
	}

	if (gisExitPassenger && gGCUStatus.PassageAlarm.b.nPassOverFromEN != ON)
 80245c0:	4b2f      	ldr	r3, [pc, #188]	; (8024680 <CheckIllegalEnterSwing+0x164>)
 80245c2:	781b      	ldrb	r3, [r3, #0]
 80245c4:	2b00      	cmp	r3, #0
 80245c6:	d04b      	beq.n	8024660 <CheckIllegalEnterSwing+0x144>
	{
		if (gGCUStatus.bAuthCount_EN)
 80245c8:	4b27      	ldr	r3, [pc, #156]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 80245ca:	791b      	ldrb	r3, [r3, #4]
 80245cc:	b2db      	uxtb	r3, r3
 80245ce:	2b00      	cmp	r3, #0
 80245d0:	d039      	beq.n	8024646 <CheckIllegalEnterSwing+0x12a>
		{
			if (gGCUStatus.IllegalPass.b.nCounter_EN == FLG_OFF && isPassReady_EN == FALSE && psenNewSwing.b.s12)
 80245d2:	4b25      	ldr	r3, [pc, #148]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 80245d4:	7f1b      	ldrb	r3, [r3, #28]
 80245d6:	f003 0308 	and.w	r3, r3, #8
 80245da:	b2db      	uxtb	r3, r3
 80245dc:	2b00      	cmp	r3, #0
 80245de:	d13f      	bne.n	8024660 <CheckIllegalEnterSwing+0x144>
 80245e0:	4b28      	ldr	r3, [pc, #160]	; (8024684 <CheckIllegalEnterSwing+0x168>)
 80245e2:	781b      	ldrb	r3, [r3, #0]
 80245e4:	f083 0301 	eor.w	r3, r3, #1
 80245e8:	b2db      	uxtb	r3, r3
 80245ea:	2b00      	cmp	r3, #0
 80245ec:	d038      	beq.n	8024660 <CheckIllegalEnterSwing+0x144>
 80245ee:	4b20      	ldr	r3, [pc, #128]	; (8024670 <CheckIllegalEnterSwing+0x154>)
 80245f0:	785b      	ldrb	r3, [r3, #1]
 80245f2:	f003 0308 	and.w	r3, r3, #8
 80245f6:	b2db      	uxtb	r3, r3
 80245f8:	2b00      	cmp	r3, #0
 80245fa:	d031      	beq.n	8024660 <CheckIllegalEnterSwing+0x144>
			{
				if (isCounterEnter == FALSE)
 80245fc:	4b1d      	ldr	r3, [pc, #116]	; (8024674 <CheckIllegalEnterSwing+0x158>)
 80245fe:	781b      	ldrb	r3, [r3, #0]
 8024600:	f083 0301 	eor.w	r3, r3, #1
 8024604:	b2db      	uxtb	r3, r3
 8024606:	2b00      	cmp	r3, #0
 8024608:	d02a      	beq.n	8024660 <CheckIllegalEnterSwing+0x144>
				{
					SetTimer(&timerInverseEnter);
 802460a:	481b      	ldr	r0, [pc, #108]	; (8024678 <CheckIllegalEnterSwing+0x15c>)
 802460c:	f00a faca 	bl	802eba4 <SetTimer>
					CloseBarrierForSwing();
 8024610:	f7ff f934 	bl	802387c <CloseBarrierForSwing>
					isCounterEnter = TRUE;
 8024614:	4b17      	ldr	r3, [pc, #92]	; (8024674 <CheckIllegalEnterSwing+0x158>)
 8024616:	2201      	movs	r2, #1
 8024618:	701a      	strb	r2, [r3, #0]
					InhibitPass(FROM_EXIT);
 802461a:	2002      	movs	r0, #2
 802461c:	f7fd fba2 	bl	8021d64 <InhibitPass>
					gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_COUNTER_ENTER;
 8024620:	4a11      	ldr	r2, [pc, #68]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 8024622:	7a13      	ldrb	r3, [r2, #8]
 8024624:	2102      	movs	r1, #2
 8024626:	f361 0302 	bfi	r3, r1, #0, #3
 802462a:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nCounter_EN = FLG_SET;
 802462c:	4a0e      	ldr	r2, [pc, #56]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 802462e:	7f13      	ldrb	r3, [r2, #28]
 8024630:	f043 0308 	orr.w	r3, r3, #8
 8024634:	7713      	strb	r3, [r2, #28]
					//PRINTL(" [EN] Inhibit Pass - Inverse Enter:%d", gGCUStatus.bAuthCount_EN);
					printf(" [EN] Inhibit Pass - Inverse Enter:%d \n", gGCUStatus.bAuthCount_EN);
 8024636:	4b0c      	ldr	r3, [pc, #48]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 8024638:	791b      	ldrb	r3, [r3, #4]
 802463a:	b2db      	uxtb	r3, r3
 802463c:	4619      	mov	r1, r3
 802463e:	4812      	ldr	r0, [pc, #72]	; (8024688 <CheckIllegalEnterSwing+0x16c>)
 8024640:	f004 fa0c 	bl	8028a5c <printf_>
			{
				CheckIllegalEnterTimer(FROM_EXIT);
			}
		}
	}
}
 8024644:	e00c      	b.n	8024660 <CheckIllegalEnterSwing+0x144>
		else if (!gGCUStatus.bAuthCount_EX)
 8024646:	4b08      	ldr	r3, [pc, #32]	; (8024668 <CheckIllegalEnterSwing+0x14c>)
 8024648:	795b      	ldrb	r3, [r3, #5]
 802464a:	b2db      	uxtb	r3, r3
 802464c:	2b00      	cmp	r3, #0
 802464e:	d107      	bne.n	8024660 <CheckIllegalEnterSwing+0x144>
			if (CheckCritical())
 8024650:	f7fe ff1a 	bl	8023488 <CheckCritical>
 8024654:	4603      	mov	r3, r0
 8024656:	2b00      	cmp	r3, #0
 8024658:	d002      	beq.n	8024660 <CheckIllegalEnterSwing+0x144>
				CheckIllegalEnterTimer(FROM_EXIT);
 802465a:	2002      	movs	r0, #2
 802465c:	f7fd fd80 	bl	8022160 <CheckIllegalEnterTimer>
}
 8024660:	bf00      	nop
 8024662:	bd80      	pop	{r7, pc}
 8024664:	2400043b 	.word	0x2400043b
 8024668:	240004b0 	.word	0x240004b0
 802466c:	2400041d 	.word	0x2400041d
 8024670:	2400040c 	.word	0x2400040c
 8024674:	24000427 	.word	0x24000427
 8024678:	24000220 	.word	0x24000220
 802467c:	08030804 	.word	0x08030804
 8024680:	2400043c 	.word	0x2400043c
 8024684:	2400041c 	.word	0x2400041c
 8024688:	0803082c 	.word	0x0803082c

0802468c <CheckTGTimerForSwing>:

void CheckTGTimerForSwing(void)
{
 802468c:	b580      	push	{r7, lr}
 802468e:	af00      	add	r7, sp, #0
	if (timerTailgatingDetection.fStart)
 8024690:	4b31      	ldr	r3, [pc, #196]	; (8024758 <CheckTGTimerForSwing+0xcc>)
 8024692:	781b      	ldrb	r3, [r3, #0]
 8024694:	2b00      	cmp	r3, #0
 8024696:	d05d      	beq.n	8024754 <CheckTGTimerForSwing+0xc8>
	{
		if (IsTimeout(&timerTailgatingDetection, dwTgDetectionTime * TICK_COUNT_100MS)) // 1.5 s
 8024698:	4b30      	ldr	r3, [pc, #192]	; (802475c <CheckTGTimerForSwing+0xd0>)
 802469a:	681a      	ldr	r2, [r3, #0]
 802469c:	4613      	mov	r3, r2
 802469e:	009b      	lsls	r3, r3, #2
 80246a0:	4413      	add	r3, r2
 80246a2:	005b      	lsls	r3, r3, #1
 80246a4:	4619      	mov	r1, r3
 80246a6:	482c      	ldr	r0, [pc, #176]	; (8024758 <CheckTGTimerForSwing+0xcc>)
 80246a8:	f00a fa9e 	bl	802ebe8 <IsTimeout>
 80246ac:	4603      	mov	r3, r0
 80246ae:	2b00      	cmp	r3, #0
 80246b0:	d050      	beq.n	8024754 <CheckTGTimerForSwing+0xc8>
		{
			ResetTimer(&timerTailgatingDetection);
 80246b2:	4829      	ldr	r0, [pc, #164]	; (8024758 <CheckTGTimerForSwing+0xcc>)
 80246b4:	f00a fa8a 	bl	802ebcc <ResetTimer>

			if (gGCUStatus.bAuthCount_EN || gGCUStatus.bAuthCount_EX)
 80246b8:	4b29      	ldr	r3, [pc, #164]	; (8024760 <CheckTGTimerForSwing+0xd4>)
 80246ba:	791b      	ldrb	r3, [r3, #4]
 80246bc:	b2db      	uxtb	r3, r3
 80246be:	2b00      	cmp	r3, #0
 80246c0:	d104      	bne.n	80246cc <CheckTGTimerForSwing+0x40>
 80246c2:	4b27      	ldr	r3, [pc, #156]	; (8024760 <CheckTGTimerForSwing+0xd4>)
 80246c4:	795b      	ldrb	r3, [r3, #5]
 80246c6:	b2db      	uxtb	r3, r3
 80246c8:	2b00      	cmp	r3, #0
 80246ca:	d043      	beq.n	8024754 <CheckTGTimerForSwing+0xc8>
			{
				if (!psenNewSwing.section.lower_EN && !psenNewSwing.section.lower_EX)
 80246cc:	4b25      	ldr	r3, [pc, #148]	; (8024764 <CheckTGTimerForSwing+0xd8>)
 80246ce:	781b      	ldrb	r3, [r3, #0]
 80246d0:	f023 030f 	bic.w	r3, r3, #15
 80246d4:	b2db      	uxtb	r3, r3
 80246d6:	2b00      	cmp	r3, #0
 80246d8:	d135      	bne.n	8024746 <CheckTGTimerForSwing+0xba>
 80246da:	4b22      	ldr	r3, [pc, #136]	; (8024764 <CheckTGTimerForSwing+0xd8>)
 80246dc:	785b      	ldrb	r3, [r3, #1]
 80246de:	f023 030f 	bic.w	r3, r3, #15
 80246e2:	b2db      	uxtb	r3, r3
 80246e4:	2b00      	cmp	r3, #0
 80246e6:	d12e      	bne.n	8024746 <CheckTGTimerForSwing+0xba>
				{
					//PRINTL(" [CheckTGTimerForSwing] No follower [%d/%d]", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
					printf(" [CheckTGTimerForSwing] No follower [%d/%d] \n", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
 80246e8:	4b1d      	ldr	r3, [pc, #116]	; (8024760 <CheckTGTimerForSwing+0xd4>)
 80246ea:	791b      	ldrb	r3, [r3, #4]
 80246ec:	b2db      	uxtb	r3, r3
 80246ee:	4619      	mov	r1, r3
 80246f0:	4b1b      	ldr	r3, [pc, #108]	; (8024760 <CheckTGTimerForSwing+0xd4>)
 80246f2:	795b      	ldrb	r3, [r3, #5]
 80246f4:	b2db      	uxtb	r3, r3
 80246f6:	461a      	mov	r2, r3
 80246f8:	481b      	ldr	r0, [pc, #108]	; (8024768 <CheckTGTimerForSwing+0xdc>)
 80246fa:	f004 f9af 	bl	8028a5c <printf_>


					if (gGCUStatus.bAuthCount_EN > 0)
 80246fe:	4b18      	ldr	r3, [pc, #96]	; (8024760 <CheckTGTimerForSwing+0xd4>)
 8024700:	791b      	ldrb	r3, [r3, #4]
 8024702:	b2db      	uxtb	r3, r3
 8024704:	2b00      	cmp	r3, #0
 8024706:	d007      	beq.n	8024718 <CheckTGTimerForSwing+0x8c>
					{
						gGCUStatus.bAuthCount_EN--;
 8024708:	4b15      	ldr	r3, [pc, #84]	; (8024760 <CheckTGTimerForSwing+0xd4>)
 802470a:	791b      	ldrb	r3, [r3, #4]
 802470c:	b2db      	uxtb	r3, r3
 802470e:	3b01      	subs	r3, #1
 8024710:	b2da      	uxtb	r2, r3
 8024712:	4b13      	ldr	r3, [pc, #76]	; (8024760 <CheckTGTimerForSwing+0xd4>)
 8024714:	711a      	strb	r2, [r3, #4]
 8024716:	e00b      	b.n	8024730 <CheckTGTimerForSwing+0xa4>
					}
					else if (gGCUStatus.bAuthCount_EX > 0)
 8024718:	4b11      	ldr	r3, [pc, #68]	; (8024760 <CheckTGTimerForSwing+0xd4>)
 802471a:	795b      	ldrb	r3, [r3, #5]
 802471c:	b2db      	uxtb	r3, r3
 802471e:	2b00      	cmp	r3, #0
 8024720:	d006      	beq.n	8024730 <CheckTGTimerForSwing+0xa4>
					{
						gGCUStatus.bAuthCount_EX--;
 8024722:	4b0f      	ldr	r3, [pc, #60]	; (8024760 <CheckTGTimerForSwing+0xd4>)
 8024724:	795b      	ldrb	r3, [r3, #5]
 8024726:	b2db      	uxtb	r3, r3
 8024728:	3b01      	subs	r3, #1
 802472a:	b2da      	uxtb	r2, r3
 802472c:	4b0c      	ldr	r3, [pc, #48]	; (8024760 <CheckTGTimerForSwing+0xd4>)
 802472e:	715a      	strb	r2, [r3, #5]
					}

					if (CheckZeroAuthCount())
 8024730:	f7fe fe94 	bl	802345c <CheckZeroAuthCount>
 8024734:	4603      	mov	r3, r0
 8024736:	2b00      	cmp	r3, #0
 8024738:	d00c      	beq.n	8024754 <CheckTGTimerForSwing+0xc8>
					{
						CloseBarrierForSwing();
 802473a:	f7ff f89f 	bl	802387c <CloseBarrierForSwing>
						//PRINTL(" [CheckTGTimerForSwing] Close barrier!");
						printf(" [CheckTGTimerForSwing] Close barrier! \n");
 802473e:	480b      	ldr	r0, [pc, #44]	; (802476c <CheckTGTimerForSwing+0xe0>)
 8024740:	f004 f98c 	bl	8028a5c <printf_>
					if (CheckZeroAuthCount())
 8024744:	e006      	b.n	8024754 <CheckTGTimerForSwing+0xc8>
					}
				}
				else
				{
					//PRINTL(" [CheckTGTimerForSwing] Something still detected.");
					printf(" [CheckTGTimerForSwing] Something still detected.\n");
 8024746:	480a      	ldr	r0, [pc, #40]	; (8024770 <CheckTGTimerForSwing+0xe4>)
 8024748:	f004 f988 	bl	8028a5c <printf_>
					SetTimer(&timerTailgatingDetection);
 802474c:	4802      	ldr	r0, [pc, #8]	; (8024758 <CheckTGTimerForSwing+0xcc>)
 802474e:	f00a fa29 	bl	802eba4 <SetTimer>
				}
			}
		}
	}
}
 8024752:	e7ff      	b.n	8024754 <CheckTGTimerForSwing+0xc8>
 8024754:	bf00      	nop
 8024756:	bd80      	pop	{r7, pc}
 8024758:	24000178 	.word	0x24000178
 802475c:	24000014 	.word	0x24000014
 8024760:	240004b0 	.word	0x240004b0
 8024764:	2400040c 	.word	0x2400040c
 8024768:	08030854 	.word	0x08030854
 802476c:	08030884 	.word	0x08030884
 8024770:	080308b0 	.word	0x080308b0

08024774 <CheckForceOpen>:

void CheckForceOpen(void)
{
 8024774:	b580      	push	{r7, lr}
 8024776:	af00      	add	r7, sp, #0
	if (timerForceOpenClear.fStart)
 8024778:	4b46      	ldr	r3, [pc, #280]	; (8024894 <CheckForceOpen+0x120>)
 802477a:	781b      	ldrb	r3, [r3, #0]
 802477c:	2b00      	cmp	r3, #0
 802477e:	d023      	beq.n	80247c8 <CheckForceOpen+0x54>
	{
		if (IsTimeout(&timerForceOpenClear, dwForceOpenClearTime * TICK_COUNT_100MS))
 8024780:	4b45      	ldr	r3, [pc, #276]	; (8024898 <CheckForceOpen+0x124>)
 8024782:	681a      	ldr	r2, [r3, #0]
 8024784:	4613      	mov	r3, r2
 8024786:	009b      	lsls	r3, r3, #2
 8024788:	4413      	add	r3, r2
 802478a:	005b      	lsls	r3, r3, #1
 802478c:	4619      	mov	r1, r3
 802478e:	4841      	ldr	r0, [pc, #260]	; (8024894 <CheckForceOpen+0x120>)
 8024790:	f00a fa2a 	bl	802ebe8 <IsTimeout>
 8024794:	4603      	mov	r3, r0
 8024796:	2b00      	cmp	r3, #0
 8024798:	d07a      	beq.n	8024890 <CheckForceOpen+0x11c>
		{
			//PRINTL(" [CheckForceOpen] Flag Clear!!!!");
			printf(" [CheckForceOpen] Flag Clear!!!! \n");
 802479a:	4840      	ldr	r0, [pc, #256]	; (802489c <CheckForceOpen+0x128>)
 802479c:	f004 f95e 	bl	8028a5c <printf_>
			ResetTimer(&timerForceOpenClear);
 80247a0:	483c      	ldr	r0, [pc, #240]	; (8024894 <CheckForceOpen+0x120>)
 80247a2:	f00a fa13 	bl	802ebcc <ResetTimer>
			isForceOpen = FALSE;
 80247a6:	4b3e      	ldr	r3, [pc, #248]	; (80248a0 <CheckForceOpen+0x12c>)
 80247a8:	2200      	movs	r2, #0
 80247aa:	701a      	strb	r2, [r3, #0]
			gGCUStatus.IllegalPass.b.nJumping_EN = FLG_OFF;
 80247ac:	4a3d      	ldr	r2, [pc, #244]	; (80248a4 <CheckForceOpen+0x130>)
 80247ae:	7f13      	ldrb	r3, [r2, #28]
 80247b0:	f36f 0341 	bfc	r3, #1, #1
 80247b4:	7713      	strb	r3, [r2, #28]
			gGCUStatus.IllegalPass.b.nJumping_EX = FLG_OFF;
 80247b6:	4a3b      	ldr	r2, [pc, #236]	; (80248a4 <CheckForceOpen+0x130>)
 80247b8:	7f13      	ldrb	r3, [r2, #28]
 80247ba:	f36f 1345 	bfc	r3, #5, #1
 80247be:	7713      	strb	r3, [r2, #28]
			gGCUStatus.bDoorForcedOpen = FROM_NONE;
 80247c0:	4b38      	ldr	r3, [pc, #224]	; (80248a4 <CheckForceOpen+0x130>)
 80247c2:	2200      	movs	r2, #0
 80247c4:	755a      	strb	r2, [r3, #21]
				//PRINTL(" [EX] Force Open!");
				printf(" [EX] Force Open! \n");
			}
		}
	}
}
 80247c6:	e063      	b.n	8024890 <CheckForceOpen+0x11c>
		if (isForceOpen == TRUE && gGCUStatus.bAuthCount_EN == 0 && gGCUStatus.bAuthCount_EX == 0)
 80247c8:	4b35      	ldr	r3, [pc, #212]	; (80248a0 <CheckForceOpen+0x12c>)
 80247ca:	781b      	ldrb	r3, [r3, #0]
 80247cc:	2b00      	cmp	r3, #0
 80247ce:	d05f      	beq.n	8024890 <CheckForceOpen+0x11c>
 80247d0:	4b34      	ldr	r3, [pc, #208]	; (80248a4 <CheckForceOpen+0x130>)
 80247d2:	791b      	ldrb	r3, [r3, #4]
 80247d4:	b2db      	uxtb	r3, r3
 80247d6:	2b00      	cmp	r3, #0
 80247d8:	d15a      	bne.n	8024890 <CheckForceOpen+0x11c>
 80247da:	4b32      	ldr	r3, [pc, #200]	; (80248a4 <CheckForceOpen+0x130>)
 80247dc:	795b      	ldrb	r3, [r3, #5]
 80247de:	b2db      	uxtb	r3, r3
 80247e0:	2b00      	cmp	r3, #0
 80247e2:	d155      	bne.n	8024890 <CheckForceOpen+0x11c>
			if (isForceOpenReady_EN == TRUE && (psenNewSwing.b.s13 || psenNewSwing.b.s14))
 80247e4:	4b30      	ldr	r3, [pc, #192]	; (80248a8 <CheckForceOpen+0x134>)
 80247e6:	781b      	ldrb	r3, [r3, #0]
 80247e8:	2b00      	cmp	r3, #0
 80247ea:	d026      	beq.n	802483a <CheckForceOpen+0xc6>
 80247ec:	4b2f      	ldr	r3, [pc, #188]	; (80248ac <CheckForceOpen+0x138>)
 80247ee:	785b      	ldrb	r3, [r3, #1]
 80247f0:	f003 0310 	and.w	r3, r3, #16
 80247f4:	b2db      	uxtb	r3, r3
 80247f6:	2b00      	cmp	r3, #0
 80247f8:	d106      	bne.n	8024808 <CheckForceOpen+0x94>
 80247fa:	4b2c      	ldr	r3, [pc, #176]	; (80248ac <CheckForceOpen+0x138>)
 80247fc:	785b      	ldrb	r3, [r3, #1]
 80247fe:	f003 0320 	and.w	r3, r3, #32
 8024802:	b2db      	uxtb	r3, r3
 8024804:	2b00      	cmp	r3, #0
 8024806:	d018      	beq.n	802483a <CheckForceOpen+0xc6>
				isForceOpenReady_EN = FALSE;
 8024808:	4b27      	ldr	r3, [pc, #156]	; (80248a8 <CheckForceOpen+0x134>)
 802480a:	2200      	movs	r2, #0
 802480c:	701a      	strb	r2, [r3, #0]
				gGCUStatus.bDoorForcedOpen = FROM_ENTRY;
 802480e:	4b25      	ldr	r3, [pc, #148]	; (80248a4 <CheckForceOpen+0x130>)
 8024810:	2201      	movs	r2, #1
 8024812:	755a      	strb	r2, [r3, #21]
				ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8024814:	4b26      	ldr	r3, [pc, #152]	; (80248b0 <CheckForceOpen+0x13c>)
 8024816:	7a9b      	ldrb	r3, [r3, #10]
 8024818:	461a      	mov	r2, r3
 802481a:	2101      	movs	r1, #1
 802481c:	2000      	movs	r0, #0
 802481e:	f7fc fe55 	bl	80214cc <ControlBuzzer>
				InhibitPass(FROM_EXIT);
 8024822:	2002      	movs	r0, #2
 8024824:	f7fd fa9e 	bl	8021d64 <InhibitPass>
				SetTimer(&timerForceOpenClear);
 8024828:	481a      	ldr	r0, [pc, #104]	; (8024894 <CheckForceOpen+0x120>)
 802482a:	f00a f9bb 	bl	802eba4 <SetTimer>
				isForceOpen = FALSE;
 802482e:	4b1c      	ldr	r3, [pc, #112]	; (80248a0 <CheckForceOpen+0x12c>)
 8024830:	2200      	movs	r2, #0
 8024832:	701a      	strb	r2, [r3, #0]
				printf(" [EN] Force Open! \n");
 8024834:	481f      	ldr	r0, [pc, #124]	; (80248b4 <CheckForceOpen+0x140>)
 8024836:	f004 f911 	bl	8028a5c <printf_>
			if (isForceOpenReady_EX == TRUE && (psenNewSwing.b.s05 || psenNewSwing.b.s06))
 802483a:	4b1f      	ldr	r3, [pc, #124]	; (80248b8 <CheckForceOpen+0x144>)
 802483c:	781b      	ldrb	r3, [r3, #0]
 802483e:	2b00      	cmp	r3, #0
 8024840:	d026      	beq.n	8024890 <CheckForceOpen+0x11c>
 8024842:	4b1a      	ldr	r3, [pc, #104]	; (80248ac <CheckForceOpen+0x138>)
 8024844:	781b      	ldrb	r3, [r3, #0]
 8024846:	f003 0310 	and.w	r3, r3, #16
 802484a:	b2db      	uxtb	r3, r3
 802484c:	2b00      	cmp	r3, #0
 802484e:	d106      	bne.n	802485e <CheckForceOpen+0xea>
 8024850:	4b16      	ldr	r3, [pc, #88]	; (80248ac <CheckForceOpen+0x138>)
 8024852:	781b      	ldrb	r3, [r3, #0]
 8024854:	f003 0320 	and.w	r3, r3, #32
 8024858:	b2db      	uxtb	r3, r3
 802485a:	2b00      	cmp	r3, #0
 802485c:	d018      	beq.n	8024890 <CheckForceOpen+0x11c>
				isForceOpenReady_EX = FALSE;
 802485e:	4b16      	ldr	r3, [pc, #88]	; (80248b8 <CheckForceOpen+0x144>)
 8024860:	2200      	movs	r2, #0
 8024862:	701a      	strb	r2, [r3, #0]
				gGCUStatus.bDoorForcedOpen = FROM_EXIT;
 8024864:	4b0f      	ldr	r3, [pc, #60]	; (80248a4 <CheckForceOpen+0x130>)
 8024866:	2202      	movs	r2, #2
 8024868:	755a      	strb	r2, [r3, #21]
				ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 802486a:	4b11      	ldr	r3, [pc, #68]	; (80248b0 <CheckForceOpen+0x13c>)
 802486c:	7a9b      	ldrb	r3, [r3, #10]
 802486e:	461a      	mov	r2, r3
 8024870:	2101      	movs	r1, #1
 8024872:	2000      	movs	r0, #0
 8024874:	f7fc fe2a 	bl	80214cc <ControlBuzzer>
				InhibitPass(FROM_ENTRY);
 8024878:	2001      	movs	r0, #1
 802487a:	f7fd fa73 	bl	8021d64 <InhibitPass>
				SetTimer(&timerForceOpenClear);
 802487e:	4805      	ldr	r0, [pc, #20]	; (8024894 <CheckForceOpen+0x120>)
 8024880:	f00a f990 	bl	802eba4 <SetTimer>
				isForceOpen = FALSE;
 8024884:	4b06      	ldr	r3, [pc, #24]	; (80248a0 <CheckForceOpen+0x12c>)
 8024886:	2200      	movs	r2, #0
 8024888:	701a      	strb	r2, [r3, #0]
				printf(" [EX] Force Open! \n");
 802488a:	480c      	ldr	r0, [pc, #48]	; (80248bc <CheckForceOpen+0x148>)
 802488c:	f004 f8e6 	bl	8028a5c <printf_>
}
 8024890:	bf00      	nop
 8024892:	bd80      	pop	{r7, pc}
 8024894:	24000214 	.word	0x24000214
 8024898:	24000024 	.word	0x24000024
 802489c:	080308e4 	.word	0x080308e4
 80248a0:	24000425 	.word	0x24000425
 80248a4:	240004b0 	.word	0x240004b0
 80248a8:	24000422 	.word	0x24000422
 80248ac:	2400040c 	.word	0x2400040c
 80248b0:	240004a0 	.word	0x240004a0
 80248b4:	08030908 	.word	0x08030908
 80248b8:	24000423 	.word	0x24000423
 80248bc:	0803091c 	.word	0x0803091c

080248c0 <CheckBarrierStop>:

void CheckBarrierStop(void)
{
 80248c0:	b580      	push	{r7, lr}
 80248c2:	af00      	add	r7, sp, #0
	if (timerBarrierStop.fStart)
 80248c4:	4b0f      	ldr	r3, [pc, #60]	; (8024904 <CheckBarrierStop+0x44>)
 80248c6:	781b      	ldrb	r3, [r3, #0]
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	d018      	beq.n	80248fe <CheckBarrierStop+0x3e>
	{
		if (IsTimeout(&timerBarrierStop, dwBarrierStopTime * TICK_COUNT_100MS))
 80248cc:	4b0e      	ldr	r3, [pc, #56]	; (8024908 <CheckBarrierStop+0x48>)
 80248ce:	681a      	ldr	r2, [r3, #0]
 80248d0:	4613      	mov	r3, r2
 80248d2:	009b      	lsls	r3, r3, #2
 80248d4:	4413      	add	r3, r2
 80248d6:	005b      	lsls	r3, r3, #1
 80248d8:	4619      	mov	r1, r3
 80248da:	480a      	ldr	r0, [pc, #40]	; (8024904 <CheckBarrierStop+0x44>)
 80248dc:	f00a f984 	bl	802ebe8 <IsTimeout>
 80248e0:	4603      	mov	r3, r0
 80248e2:	2b00      	cmp	r3, #0
 80248e4:	d00b      	beq.n	80248fe <CheckBarrierStop+0x3e>
		{
			//PRINTL(" [CheckBarrierStop] Safety Stop Expired");
			printf(" [CheckBarrierStop] Safety Stop Expired \n");
 80248e6:	4809      	ldr	r0, [pc, #36]	; (802490c <CheckBarrierStop+0x4c>)
 80248e8:	f004 f8b8 	bl	8028a5c <printf_>
			StopBarrierForSwing(FALSE);
 80248ec:	2000      	movs	r0, #0
 80248ee:	f7fe fe4d 	bl	802358c <StopBarrierForSwing>
			ResetTimer(&timerBarrierStop);
 80248f2:	4804      	ldr	r0, [pc, #16]	; (8024904 <CheckBarrierStop+0x44>)
 80248f4:	f00a f96a 	bl	802ebcc <ResetTimer>
			SetTimer(&timerSafety);
 80248f8:	4805      	ldr	r0, [pc, #20]	; (8024910 <CheckBarrierStop+0x50>)
 80248fa:	f00a f953 	bl	802eba4 <SetTimer>
		}
	}
}
 80248fe:	bf00      	nop
 8024900:	bd80      	pop	{r7, pc}
 8024902:	bf00      	nop
 8024904:	24000208 	.word	0x24000208
 8024908:	24000020 	.word	0x24000020
 802490c:	08030930 	.word	0x08030930
 8024910:	240001e4 	.word	0x240001e4

08024914 <CheckSafetyTimerForSwing>:

void CheckSafetyTimerForSwing(void)
{
 8024914:	b580      	push	{r7, lr}
 8024916:	af00      	add	r7, sp, #0
	if (timerSafety.fStart)
 8024918:	4b95      	ldr	r3, [pc, #596]	; (8024b70 <CheckSafetyTimerForSwing+0x25c>)
 802491a:	781b      	ldrb	r3, [r3, #0]
 802491c:	2b00      	cmp	r3, #0
 802491e:	f000 8124 	beq.w	8024b6a <CheckSafetyTimerForSwing+0x256>
	{
		if (IsTimeout(&timerSafety, gdwTimeoutSafety * TICK_COUNT_100MS))
 8024922:	4b94      	ldr	r3, [pc, #592]	; (8024b74 <CheckSafetyTimerForSwing+0x260>)
 8024924:	681a      	ldr	r2, [r3, #0]
 8024926:	4613      	mov	r3, r2
 8024928:	009b      	lsls	r3, r3, #2
 802492a:	4413      	add	r3, r2
 802492c:	005b      	lsls	r3, r3, #1
 802492e:	4619      	mov	r1, r3
 8024930:	488f      	ldr	r0, [pc, #572]	; (8024b70 <CheckSafetyTimerForSwing+0x25c>)
 8024932:	f00a f959 	bl	802ebe8 <IsTimeout>
 8024936:	4603      	mov	r3, r0
 8024938:	2b00      	cmp	r3, #0
 802493a:	d00f      	beq.n	802495c <CheckSafetyTimerForSwing+0x48>
		{
			//PRINTL(" [CheckSafetyTimerForSwing] Safety Time Out!");
			printf(" [CheckSafetyTimerForSwing] Safety Time Out! \n");
 802493c:	488e      	ldr	r0, [pc, #568]	; (8024b78 <CheckSafetyTimerForSwing+0x264>)
 802493e:	f004 f88d 	bl	8028a5c <printf_>
			ResetTimer(&timerSafety);
 8024942:	488b      	ldr	r0, [pc, #556]	; (8024b70 <CheckSafetyTimerForSwing+0x25c>)
 8024944:	f00a f942 	bl	802ebcc <ResetTimer>
			gbAuthDirection = FROM_NONE;
 8024948:	4b8c      	ldr	r3, [pc, #560]	; (8024b7c <CheckSafetyTimerForSwing+0x268>)
 802494a:	2200      	movs	r2, #0
 802494c:	701a      	strb	r2, [r3, #0]
			isSafetyOn = FALSE;
 802494e:	4b8c      	ldr	r3, [pc, #560]	; (8024b80 <CheckSafetyTimerForSwing+0x26c>)
 8024950:	2200      	movs	r2, #0
 8024952:	701a      	strb	r2, [r3, #0]
			isSentClose = FALSE;
 8024954:	4b8b      	ldr	r3, [pc, #556]	; (8024b84 <CheckSafetyTimerForSwing+0x270>)
 8024956:	2200      	movs	r2, #0
 8024958:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 802495a:	e106      	b.n	8024b6a <CheckSafetyTimerForSwing+0x256>
			if (gbEmergencyFlag == FLG_OFF || gfTestMode == TRUE)
 802495c:	4b8a      	ldr	r3, [pc, #552]	; (8024b88 <CheckSafetyTimerForSwing+0x274>)
 802495e:	781b      	ldrb	r3, [r3, #0]
 8024960:	2b00      	cmp	r3, #0
 8024962:	d004      	beq.n	802496e <CheckSafetyTimerForSwing+0x5a>
 8024964:	4b89      	ldr	r3, [pc, #548]	; (8024b8c <CheckSafetyTimerForSwing+0x278>)
 8024966:	781b      	ldrb	r3, [r3, #0]
 8024968:	2b00      	cmp	r3, #0
 802496a:	f000 80fe 	beq.w	8024b6a <CheckSafetyTimerForSwing+0x256>
				if (gbAuthDirection == FROM_ENTRY)
 802496e:	4b83      	ldr	r3, [pc, #524]	; (8024b7c <CheckSafetyTimerForSwing+0x268>)
 8024970:	781b      	ldrb	r3, [r3, #0]
 8024972:	2b01      	cmp	r3, #1
 8024974:	d158      	bne.n	8024a28 <CheckSafetyTimerForSwing+0x114>
					gGCUStatus.bSafetyDetection = FLG_SET;
 8024976:	4b86      	ldr	r3, [pc, #536]	; (8024b90 <CheckSafetyTimerForSwing+0x27c>)
 8024978:	2201      	movs	r2, #1
 802497a:	74da      	strb	r2, [r3, #19]
					if (psenNewSwing.section.lower_EX || psenNewSwing.b.s04 || psenNewSwing.b.s08 || gfAISafetyOn == TRUE)
 802497c:	4b85      	ldr	r3, [pc, #532]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 802497e:	785b      	ldrb	r3, [r3, #1]
 8024980:	f023 030f 	bic.w	r3, r3, #15
 8024984:	b2db      	uxtb	r3, r3
 8024986:	2b00      	cmp	r3, #0
 8024988:	d111      	bne.n	80249ae <CheckSafetyTimerForSwing+0x9a>
 802498a:	4b82      	ldr	r3, [pc, #520]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 802498c:	781b      	ldrb	r3, [r3, #0]
 802498e:	f003 0308 	and.w	r3, r3, #8
 8024992:	b2db      	uxtb	r3, r3
 8024994:	2b00      	cmp	r3, #0
 8024996:	d10a      	bne.n	80249ae <CheckSafetyTimerForSwing+0x9a>
 8024998:	4b7e      	ldr	r3, [pc, #504]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 802499a:	781b      	ldrb	r3, [r3, #0]
 802499c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80249a0:	b2db      	uxtb	r3, r3
 80249a2:	2b00      	cmp	r3, #0
 80249a4:	d103      	bne.n	80249ae <CheckSafetyTimerForSwing+0x9a>
 80249a6:	4b7c      	ldr	r3, [pc, #496]	; (8024b98 <CheckSafetyTimerForSwing+0x284>)
 80249a8:	781b      	ldrb	r3, [r3, #0]
 80249aa:	2b00      	cmp	r3, #0
 80249ac:	d023      	beq.n	80249f6 <CheckSafetyTimerForSwing+0xe2>
						printf(" [EN] Safety Activation [%d/%d/%d] \n", psenNewSwing.section.lower_EX, psenNewSwing.b.s04, psenNewSwing.b.s08);
 80249ae:	4b79      	ldr	r3, [pc, #484]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 80249b0:	785b      	ldrb	r3, [r3, #1]
 80249b2:	f343 1303 	sbfx	r3, r3, #4, #4
 80249b6:	b25b      	sxtb	r3, r3
 80249b8:	4619      	mov	r1, r3
 80249ba:	4b76      	ldr	r3, [pc, #472]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 80249bc:	781b      	ldrb	r3, [r3, #0]
 80249be:	f343 03c0 	sbfx	r3, r3, #3, #1
 80249c2:	b25b      	sxtb	r3, r3
 80249c4:	461a      	mov	r2, r3
 80249c6:	4b73      	ldr	r3, [pc, #460]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 80249c8:	781b      	ldrb	r3, [r3, #0]
 80249ca:	f343 13c0 	sbfx	r3, r3, #7, #1
 80249ce:	b25b      	sxtb	r3, r3
 80249d0:	4872      	ldr	r0, [pc, #456]	; (8024b9c <CheckSafetyTimerForSwing+0x288>)
 80249d2:	f004 f843 	bl	8028a5c <printf_>
						StopBarrierForSwing(TRUE);
 80249d6:	2001      	movs	r0, #1
 80249d8:	f7fe fdd8 	bl	802358c <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 80249dc:	4864      	ldr	r0, [pc, #400]	; (8024b70 <CheckSafetyTimerForSwing+0x25c>)
 80249de:	f00a f8f5 	bl	802ebcc <ResetTimer>
						SetTimer(&timerBarrierStop);
 80249e2:	486f      	ldr	r0, [pc, #444]	; (8024ba0 <CheckSafetyTimerForSwing+0x28c>)
 80249e4:	f00a f8de 	bl	802eba4 <SetTimer>
						isSafetyOn = TRUE;
 80249e8:	4b65      	ldr	r3, [pc, #404]	; (8024b80 <CheckSafetyTimerForSwing+0x26c>)
 80249ea:	2201      	movs	r2, #1
 80249ec:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 80249ee:	4b65      	ldr	r3, [pc, #404]	; (8024b84 <CheckSafetyTimerForSwing+0x270>)
 80249f0:	2200      	movs	r2, #0
 80249f2:	701a      	strb	r2, [r3, #0]
 80249f4:	e0b9      	b.n	8024b6a <CheckSafetyTimerForSwing+0x256>
						if (!psenNewSwing.b.s08 && isSentClose == FALSE)
 80249f6:	4b67      	ldr	r3, [pc, #412]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 80249f8:	781b      	ldrb	r3, [r3, #0]
 80249fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80249fe:	b2db      	uxtb	r3, r3
 8024a00:	2b00      	cmp	r3, #0
 8024a02:	f040 80b2 	bne.w	8024b6a <CheckSafetyTimerForSwing+0x256>
 8024a06:	4b5f      	ldr	r3, [pc, #380]	; (8024b84 <CheckSafetyTimerForSwing+0x270>)
 8024a08:	781b      	ldrb	r3, [r3, #0]
 8024a0a:	f083 0301 	eor.w	r3, r3, #1
 8024a0e:	b2db      	uxtb	r3, r3
 8024a10:	2b00      	cmp	r3, #0
 8024a12:	f000 80aa 	beq.w	8024b6a <CheckSafetyTimerForSwing+0x256>
							gGCUStatus.bSafetyDetection = FLG_OFF;
 8024a16:	4b5e      	ldr	r3, [pc, #376]	; (8024b90 <CheckSafetyTimerForSwing+0x27c>)
 8024a18:	2200      	movs	r2, #0
 8024a1a:	74da      	strb	r2, [r3, #19]
							isSentClose = TRUE;
 8024a1c:	4b59      	ldr	r3, [pc, #356]	; (8024b84 <CheckSafetyTimerForSwing+0x270>)
 8024a1e:	2201      	movs	r2, #1
 8024a20:	701a      	strb	r2, [r3, #0]
							CloseBarrierForSwing();
 8024a22:	f7fe ff2b 	bl	802387c <CloseBarrierForSwing>
}
 8024a26:	e0a0      	b.n	8024b6a <CheckSafetyTimerForSwing+0x256>
				else if (gbAuthDirection == FROM_EXIT)
 8024a28:	4b54      	ldr	r3, [pc, #336]	; (8024b7c <CheckSafetyTimerForSwing+0x268>)
 8024a2a:	781b      	ldrb	r3, [r3, #0]
 8024a2c:	2b02      	cmp	r3, #2
 8024a2e:	d156      	bne.n	8024ade <CheckSafetyTimerForSwing+0x1ca>
					gGCUStatus.bSafetyDetection = FLG_SET;
 8024a30:	4b57      	ldr	r3, [pc, #348]	; (8024b90 <CheckSafetyTimerForSwing+0x27c>)
 8024a32:	2201      	movs	r2, #1
 8024a34:	74da      	strb	r2, [r3, #19]
					if (psenNewSwing.section.lower_EN || psenNewSwing.b.s12 || psenNewSwing.b.s16 || gfAISafetyOn == TRUE)
 8024a36:	4b57      	ldr	r3, [pc, #348]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 8024a38:	781b      	ldrb	r3, [r3, #0]
 8024a3a:	f023 030f 	bic.w	r3, r3, #15
 8024a3e:	b2db      	uxtb	r3, r3
 8024a40:	2b00      	cmp	r3, #0
 8024a42:	d111      	bne.n	8024a68 <CheckSafetyTimerForSwing+0x154>
 8024a44:	4b53      	ldr	r3, [pc, #332]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 8024a46:	785b      	ldrb	r3, [r3, #1]
 8024a48:	f003 0308 	and.w	r3, r3, #8
 8024a4c:	b2db      	uxtb	r3, r3
 8024a4e:	2b00      	cmp	r3, #0
 8024a50:	d10a      	bne.n	8024a68 <CheckSafetyTimerForSwing+0x154>
 8024a52:	4b50      	ldr	r3, [pc, #320]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 8024a54:	785b      	ldrb	r3, [r3, #1]
 8024a56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8024a5a:	b2db      	uxtb	r3, r3
 8024a5c:	2b00      	cmp	r3, #0
 8024a5e:	d103      	bne.n	8024a68 <CheckSafetyTimerForSwing+0x154>
 8024a60:	4b4d      	ldr	r3, [pc, #308]	; (8024b98 <CheckSafetyTimerForSwing+0x284>)
 8024a62:	781b      	ldrb	r3, [r3, #0]
 8024a64:	2b00      	cmp	r3, #0
 8024a66:	d023      	beq.n	8024ab0 <CheckSafetyTimerForSwing+0x19c>
						printf(" [EX] Safety Activation [%d/%d/%d] \n", psenNewSwing.section.lower_EN, psenNewSwing.b.s12, psenNewSwing.b.s16);
 8024a68:	4b4a      	ldr	r3, [pc, #296]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 8024a6a:	781b      	ldrb	r3, [r3, #0]
 8024a6c:	f343 1303 	sbfx	r3, r3, #4, #4
 8024a70:	b25b      	sxtb	r3, r3
 8024a72:	4619      	mov	r1, r3
 8024a74:	4b47      	ldr	r3, [pc, #284]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 8024a76:	785b      	ldrb	r3, [r3, #1]
 8024a78:	f343 03c0 	sbfx	r3, r3, #3, #1
 8024a7c:	b25b      	sxtb	r3, r3
 8024a7e:	461a      	mov	r2, r3
 8024a80:	4b44      	ldr	r3, [pc, #272]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 8024a82:	785b      	ldrb	r3, [r3, #1]
 8024a84:	f343 13c0 	sbfx	r3, r3, #7, #1
 8024a88:	b25b      	sxtb	r3, r3
 8024a8a:	4846      	ldr	r0, [pc, #280]	; (8024ba4 <CheckSafetyTimerForSwing+0x290>)
 8024a8c:	f003 ffe6 	bl	8028a5c <printf_>
						StopBarrierForSwing(TRUE);
 8024a90:	2001      	movs	r0, #1
 8024a92:	f7fe fd7b 	bl	802358c <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 8024a96:	4836      	ldr	r0, [pc, #216]	; (8024b70 <CheckSafetyTimerForSwing+0x25c>)
 8024a98:	f00a f898 	bl	802ebcc <ResetTimer>
						SetTimer(&timerBarrierStop);
 8024a9c:	4840      	ldr	r0, [pc, #256]	; (8024ba0 <CheckSafetyTimerForSwing+0x28c>)
 8024a9e:	f00a f881 	bl	802eba4 <SetTimer>
						isSafetyOn = TRUE;
 8024aa2:	4b37      	ldr	r3, [pc, #220]	; (8024b80 <CheckSafetyTimerForSwing+0x26c>)
 8024aa4:	2201      	movs	r2, #1
 8024aa6:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 8024aa8:	4b36      	ldr	r3, [pc, #216]	; (8024b84 <CheckSafetyTimerForSwing+0x270>)
 8024aaa:	2200      	movs	r2, #0
 8024aac:	701a      	strb	r2, [r3, #0]
 8024aae:	e05c      	b.n	8024b6a <CheckSafetyTimerForSwing+0x256>
						if (!psenNewSwing.b.s16 && isSentClose == FALSE)
 8024ab0:	4b38      	ldr	r3, [pc, #224]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 8024ab2:	785b      	ldrb	r3, [r3, #1]
 8024ab4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8024ab8:	b2db      	uxtb	r3, r3
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	d155      	bne.n	8024b6a <CheckSafetyTimerForSwing+0x256>
 8024abe:	4b31      	ldr	r3, [pc, #196]	; (8024b84 <CheckSafetyTimerForSwing+0x270>)
 8024ac0:	781b      	ldrb	r3, [r3, #0]
 8024ac2:	f083 0301 	eor.w	r3, r3, #1
 8024ac6:	b2db      	uxtb	r3, r3
 8024ac8:	2b00      	cmp	r3, #0
 8024aca:	d04e      	beq.n	8024b6a <CheckSafetyTimerForSwing+0x256>
							gGCUStatus.bSafetyDetection = FLG_OFF;
 8024acc:	4b30      	ldr	r3, [pc, #192]	; (8024b90 <CheckSafetyTimerForSwing+0x27c>)
 8024ace:	2200      	movs	r2, #0
 8024ad0:	74da      	strb	r2, [r3, #19]
							isSentClose = TRUE;
 8024ad2:	4b2c      	ldr	r3, [pc, #176]	; (8024b84 <CheckSafetyTimerForSwing+0x270>)
 8024ad4:	2201      	movs	r2, #1
 8024ad6:	701a      	strb	r2, [r3, #0]
							CloseBarrierForSwing();
 8024ad8:	f7fe fed0 	bl	802387c <CloseBarrierForSwing>
}
 8024adc:	e045      	b.n	8024b6a <CheckSafetyTimerForSwing+0x256>
					if (psenNewSwing.section.lower_EN || psenNewSwing.section.lower_EN || psenNewSwing.b.s02 || psenNewSwing.b.s10 || gfAISafetyOn == TRUE)
 8024ade:	4b2d      	ldr	r3, [pc, #180]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 8024ae0:	781b      	ldrb	r3, [r3, #0]
 8024ae2:	f023 030f 	bic.w	r3, r3, #15
 8024ae6:	b2db      	uxtb	r3, r3
 8024ae8:	2b00      	cmp	r3, #0
 8024aea:	d118      	bne.n	8024b1e <CheckSafetyTimerForSwing+0x20a>
 8024aec:	4b29      	ldr	r3, [pc, #164]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 8024aee:	781b      	ldrb	r3, [r3, #0]
 8024af0:	f023 030f 	bic.w	r3, r3, #15
 8024af4:	b2db      	uxtb	r3, r3
 8024af6:	2b00      	cmp	r3, #0
 8024af8:	d111      	bne.n	8024b1e <CheckSafetyTimerForSwing+0x20a>
 8024afa:	4b26      	ldr	r3, [pc, #152]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 8024afc:	781b      	ldrb	r3, [r3, #0]
 8024afe:	f003 0302 	and.w	r3, r3, #2
 8024b02:	b2db      	uxtb	r3, r3
 8024b04:	2b00      	cmp	r3, #0
 8024b06:	d10a      	bne.n	8024b1e <CheckSafetyTimerForSwing+0x20a>
 8024b08:	4b22      	ldr	r3, [pc, #136]	; (8024b94 <CheckSafetyTimerForSwing+0x280>)
 8024b0a:	785b      	ldrb	r3, [r3, #1]
 8024b0c:	f003 0302 	and.w	r3, r3, #2
 8024b10:	b2db      	uxtb	r3, r3
 8024b12:	2b00      	cmp	r3, #0
 8024b14:	d103      	bne.n	8024b1e <CheckSafetyTimerForSwing+0x20a>
 8024b16:	4b20      	ldr	r3, [pc, #128]	; (8024b98 <CheckSafetyTimerForSwing+0x284>)
 8024b18:	781b      	ldrb	r3, [r3, #0]
 8024b1a:	2b00      	cmp	r3, #0
 8024b1c:	d015      	beq.n	8024b4a <CheckSafetyTimerForSwing+0x236>
						printf(" [EN/EX] Safety Activation \n");
 8024b1e:	4822      	ldr	r0, [pc, #136]	; (8024ba8 <CheckSafetyTimerForSwing+0x294>)
 8024b20:	f003 ff9c 	bl	8028a5c <printf_>
						gGCUStatus.bSafetyDetection = FLG_SET;
 8024b24:	4b1a      	ldr	r3, [pc, #104]	; (8024b90 <CheckSafetyTimerForSwing+0x27c>)
 8024b26:	2201      	movs	r2, #1
 8024b28:	74da      	strb	r2, [r3, #19]
						StopBarrierForSwing(TRUE);
 8024b2a:	2001      	movs	r0, #1
 8024b2c:	f7fe fd2e 	bl	802358c <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 8024b30:	480f      	ldr	r0, [pc, #60]	; (8024b70 <CheckSafetyTimerForSwing+0x25c>)
 8024b32:	f00a f84b 	bl	802ebcc <ResetTimer>
						SetTimer(&timerBarrierStop);
 8024b36:	481a      	ldr	r0, [pc, #104]	; (8024ba0 <CheckSafetyTimerForSwing+0x28c>)
 8024b38:	f00a f834 	bl	802eba4 <SetTimer>
						isSafetyOn = TRUE;
 8024b3c:	4b10      	ldr	r3, [pc, #64]	; (8024b80 <CheckSafetyTimerForSwing+0x26c>)
 8024b3e:	2201      	movs	r2, #1
 8024b40:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 8024b42:	4b10      	ldr	r3, [pc, #64]	; (8024b84 <CheckSafetyTimerForSwing+0x270>)
 8024b44:	2200      	movs	r2, #0
 8024b46:	701a      	strb	r2, [r3, #0]
 8024b48:	e00f      	b.n	8024b6a <CheckSafetyTimerForSwing+0x256>
					else if (isSentClose == FALSE)
 8024b4a:	4b0e      	ldr	r3, [pc, #56]	; (8024b84 <CheckSafetyTimerForSwing+0x270>)
 8024b4c:	781b      	ldrb	r3, [r3, #0]
 8024b4e:	f083 0301 	eor.w	r3, r3, #1
 8024b52:	b2db      	uxtb	r3, r3
 8024b54:	2b00      	cmp	r3, #0
 8024b56:	d008      	beq.n	8024b6a <CheckSafetyTimerForSwing+0x256>
						gGCUStatus.bSafetyDetection = FLG_OFF;
 8024b58:	4b0d      	ldr	r3, [pc, #52]	; (8024b90 <CheckSafetyTimerForSwing+0x27c>)
 8024b5a:	2200      	movs	r2, #0
 8024b5c:	74da      	strb	r2, [r3, #19]
						isSentClose = TRUE;
 8024b5e:	4b09      	ldr	r3, [pc, #36]	; (8024b84 <CheckSafetyTimerForSwing+0x270>)
 8024b60:	2201      	movs	r2, #1
 8024b62:	701a      	strb	r2, [r3, #0]
						CloseBarrierForSwing();
 8024b64:	f7fe fe8a 	bl	802387c <CloseBarrierForSwing>
}
 8024b68:	e7ff      	b.n	8024b6a <CheckSafetyTimerForSwing+0x256>
 8024b6a:	bf00      	nop
 8024b6c:	bd80      	pop	{r7, pc}
 8024b6e:	bf00      	nop
 8024b70:	240001e4 	.word	0x240001e4
 8024b74:	24000148 	.word	0x24000148
 8024b78:	0803095c 	.word	0x0803095c
 8024b7c:	2400012e 	.word	0x2400012e
 8024b80:	24000426 	.word	0x24000426
 8024b84:	2400042b 	.word	0x2400042b
 8024b88:	2400012d 	.word	0x2400012d
 8024b8c:	2400043e 	.word	0x2400043e
 8024b90:	240004b0 	.word	0x240004b0
 8024b94:	2400040c 	.word	0x2400040c
 8024b98:	2400043f 	.word	0x2400043f
 8024b9c:	0803098c 	.word	0x0803098c
 8024ba0:	24000208 	.word	0x24000208
 8024ba4:	080309b4 	.word	0x080309b4
 8024ba8:	080309dc 	.word	0x080309dc

08024bac <CheckResetTimer>:

void CheckResetTimer(void)
{
 8024bac:	b580      	push	{r7, lr}
 8024bae:	af00      	add	r7, sp, #0
	if (timerReset.fStart)
 8024bb0:	4b47      	ldr	r3, [pc, #284]	; (8024cd0 <CheckResetTimer+0x124>)
 8024bb2:	781b      	ldrb	r3, [r3, #0]
 8024bb4:	2b00      	cmp	r3, #0
 8024bb6:	d05d      	beq.n	8024c74 <CheckResetTimer+0xc8>
	{
		if (IsTimeout(&timerReset, dwResetTime * TICK_COUNT_100MS))
 8024bb8:	4b46      	ldr	r3, [pc, #280]	; (8024cd4 <CheckResetTimer+0x128>)
 8024bba:	681a      	ldr	r2, [r3, #0]
 8024bbc:	4613      	mov	r3, r2
 8024bbe:	009b      	lsls	r3, r3, #2
 8024bc0:	4413      	add	r3, r2
 8024bc2:	005b      	lsls	r3, r3, #1
 8024bc4:	4619      	mov	r1, r3
 8024bc6:	4842      	ldr	r0, [pc, #264]	; (8024cd0 <CheckResetTimer+0x124>)
 8024bc8:	f00a f80e 	bl	802ebe8 <IsTimeout>
 8024bcc:	4603      	mov	r3, r0
 8024bce:	2b00      	cmp	r3, #0
 8024bd0:	d07b      	beq.n	8024cca <CheckResetTimer+0x11e>
		{
			ResetTimer(&timerReset);
 8024bd2:	483f      	ldr	r0, [pc, #252]	; (8024cd0 <CheckResetTimer+0x124>)
 8024bd4:	f009 fffa 	bl	802ebcc <ResetTimer>

			if (gbEmergencyFlag == FLG_SET)
 8024bd8:	4b3f      	ldr	r3, [pc, #252]	; (8024cd8 <CheckResetTimer+0x12c>)
 8024bda:	781b      	ldrb	r3, [r3, #0]
 8024bdc:	2b01      	cmp	r3, #1
 8024bde:	d13f      	bne.n	8024c60 <CheckResetTimer+0xb4>
			{
				if (!psenNewSwing.dirEntry.enter && !psenNewSwing.section.lower_EN && !psenNewSwing.side.exit)
 8024be0:	4b3e      	ldr	r3, [pc, #248]	; (8024cdc <CheckResetTimer+0x130>)
 8024be2:	781b      	ldrb	r3, [r3, #0]
 8024be4:	f003 0303 	and.w	r3, r3, #3
 8024be8:	b2db      	uxtb	r3, r3
 8024bea:	2b00      	cmp	r3, #0
 8024bec:	d124      	bne.n	8024c38 <CheckResetTimer+0x8c>
 8024bee:	4b3b      	ldr	r3, [pc, #236]	; (8024cdc <CheckResetTimer+0x130>)
 8024bf0:	781b      	ldrb	r3, [r3, #0]
 8024bf2:	f023 030f 	bic.w	r3, r3, #15
 8024bf6:	b2db      	uxtb	r3, r3
 8024bf8:	2b00      	cmp	r3, #0
 8024bfa:	d11d      	bne.n	8024c38 <CheckResetTimer+0x8c>
 8024bfc:	4b37      	ldr	r3, [pc, #220]	; (8024cdc <CheckResetTimer+0x130>)
 8024bfe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8024c02:	2b00      	cmp	r3, #0
 8024c04:	d118      	bne.n	8024c38 <CheckResetTimer+0x8c>
				{
					isCalibrationStart = TRUE;
 8024c06:	4b36      	ldr	r3, [pc, #216]	; (8024ce0 <CheckResetTimer+0x134>)
 8024c08:	2201      	movs	r2, #1
 8024c0a:	701a      	strb	r2, [r3, #0]
					isSafetyOn4Init = FALSE;
 8024c0c:	4b35      	ldr	r3, [pc, #212]	; (8024ce4 <CheckResetTimer+0x138>)
 8024c0e:	2200      	movs	r2, #0
 8024c10:	701a      	strb	r2, [r3, #0]
					Brr_SetEmergency(FALSE);
 8024c12:	2000      	movs	r0, #0
 8024c14:	f7fb fd36 	bl	8020684 <Brr_SetEmergency>
					gbEmergencyFlag = FLG_OFF;
 8024c18:	4b2f      	ldr	r3, [pc, #188]	; (8024cd8 <CheckResetTimer+0x12c>)
 8024c1a:	2200      	movs	r2, #0
 8024c1c:	701a      	strb	r2, [r3, #0]
					ControlIndicatorBlink(FLG_OFF);
 8024c1e:	2000      	movs	r0, #0
 8024c20:	f7fc fd92 	bl	8021748 <ControlIndicatorBlink>
					gbBarrierCmd = BARRIER_CLOSE_S;
 8024c24:	4b30      	ldr	r3, [pc, #192]	; (8024ce8 <CheckResetTimer+0x13c>)
 8024c26:	2203      	movs	r2, #3
 8024c28:	701a      	strb	r2, [r3, #0]
					dwResetTime = 90;
 8024c2a:	4b2a      	ldr	r3, [pc, #168]	; (8024cd4 <CheckResetTimer+0x128>)
 8024c2c:	225a      	movs	r2, #90	; 0x5a
 8024c2e:	601a      	str	r2, [r3, #0]
					SetTimer(&timerReset);
 8024c30:	4827      	ldr	r0, [pc, #156]	; (8024cd0 <CheckResetTimer+0x124>)
 8024c32:	f009 ffb7 	bl	802eba4 <SetTimer>
				isCalibrationStart = FALSE;
				InitPassageModeForSwing();
			}
		}
	}
}
 8024c36:	e048      	b.n	8024cca <CheckResetTimer+0x11e>
					isSafetyOn4Init = TRUE;
 8024c38:	4b2a      	ldr	r3, [pc, #168]	; (8024ce4 <CheckResetTimer+0x138>)
 8024c3a:	2201      	movs	r2, #1
 8024c3c:	701a      	strb	r2, [r3, #0]
					gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_CLOSE_FAULT;
 8024c3e:	4a2b      	ldr	r2, [pc, #172]	; (8024cec <CheckResetTimer+0x140>)
 8024c40:	7b13      	ldrb	r3, [r2, #12]
 8024c42:	f06f 0101 	mvn.w	r1, #1
 8024c46:	f361 0301 	bfi	r3, r1, #0, #2
 8024c4a:	7313      	strb	r3, [r2, #12]
					gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_CLOSE_FAULT;
 8024c4c:	4a27      	ldr	r2, [pc, #156]	; (8024cec <CheckResetTimer+0x140>)
 8024c4e:	7b13      	ldrb	r3, [r2, #12]
 8024c50:	f06f 0101 	mvn.w	r1, #1
 8024c54:	f361 0383 	bfi	r3, r1, #2, #2
 8024c58:	7313      	strb	r3, [r2, #12]
					InitPassageModeForSwing();
 8024c5a:	f7fe fca9 	bl	80235b0 <InitPassageModeForSwing>
}
 8024c5e:	e034      	b.n	8024cca <CheckResetTimer+0x11e>
				Brr_SetSerialComm(TRUE);
 8024c60:	2001      	movs	r0, #1
 8024c62:	f7fb fd2f 	bl	80206c4 <Brr_SetSerialComm>
				isCalibration = TRUE;
 8024c66:	4b22      	ldr	r3, [pc, #136]	; (8024cf0 <CheckResetTimer+0x144>)
 8024c68:	2201      	movs	r2, #1
 8024c6a:	701a      	strb	r2, [r3, #0]
				nCalibrationCnt = 0;
 8024c6c:	4b21      	ldr	r3, [pc, #132]	; (8024cf4 <CheckResetTimer+0x148>)
 8024c6e:	2200      	movs	r2, #0
 8024c70:	601a      	str	r2, [r3, #0]
}
 8024c72:	e02a      	b.n	8024cca <CheckResetTimer+0x11e>
		if (isCalibration == TRUE)
 8024c74:	4b1e      	ldr	r3, [pc, #120]	; (8024cf0 <CheckResetTimer+0x144>)
 8024c76:	781b      	ldrb	r3, [r3, #0]
 8024c78:	2b00      	cmp	r3, #0
 8024c7a:	d026      	beq.n	8024cca <CheckResetTimer+0x11e>
			if (nCalibrationCnt <= 300)
 8024c7c:	4b1d      	ldr	r3, [pc, #116]	; (8024cf4 <CheckResetTimer+0x148>)
 8024c7e:	681b      	ldr	r3, [r3, #0]
 8024c80:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8024c84:	dc16      	bgt.n	8024cb4 <CheckResetTimer+0x108>
				if (nCalibrationCnt % 20 == 0)
 8024c86:	4b1b      	ldr	r3, [pc, #108]	; (8024cf4 <CheckResetTimer+0x148>)
 8024c88:	6819      	ldr	r1, [r3, #0]
 8024c8a:	4b1b      	ldr	r3, [pc, #108]	; (8024cf8 <CheckResetTimer+0x14c>)
 8024c8c:	fb83 2301 	smull	r2, r3, r3, r1
 8024c90:	10da      	asrs	r2, r3, #3
 8024c92:	17cb      	asrs	r3, r1, #31
 8024c94:	1ad2      	subs	r2, r2, r3
 8024c96:	4613      	mov	r3, r2
 8024c98:	009b      	lsls	r3, r3, #2
 8024c9a:	4413      	add	r3, r2
 8024c9c:	009b      	lsls	r3, r3, #2
 8024c9e:	1aca      	subs	r2, r1, r3
 8024ca0:	2a00      	cmp	r2, #0
 8024ca2:	d101      	bne.n	8024ca8 <CheckResetTimer+0xfc>
					Brr_CloseBarrier();
 8024ca4:	f7fb fd50 	bl	8020748 <Brr_CloseBarrier>
				nCalibrationCnt++;
 8024ca8:	4b12      	ldr	r3, [pc, #72]	; (8024cf4 <CheckResetTimer+0x148>)
 8024caa:	681b      	ldr	r3, [r3, #0]
 8024cac:	3301      	adds	r3, #1
 8024cae:	4a11      	ldr	r2, [pc, #68]	; (8024cf4 <CheckResetTimer+0x148>)
 8024cb0:	6013      	str	r3, [r2, #0]
}
 8024cb2:	e00a      	b.n	8024cca <CheckResetTimer+0x11e>
				nCalibrationCnt = 0;
 8024cb4:	4b0f      	ldr	r3, [pc, #60]	; (8024cf4 <CheckResetTimer+0x148>)
 8024cb6:	2200      	movs	r2, #0
 8024cb8:	601a      	str	r2, [r3, #0]
				isCalibration = FALSE;
 8024cba:	4b0d      	ldr	r3, [pc, #52]	; (8024cf0 <CheckResetTimer+0x144>)
 8024cbc:	2200      	movs	r2, #0
 8024cbe:	701a      	strb	r2, [r3, #0]
				isCalibrationStart = FALSE;
 8024cc0:	4b07      	ldr	r3, [pc, #28]	; (8024ce0 <CheckResetTimer+0x134>)
 8024cc2:	2200      	movs	r2, #0
 8024cc4:	701a      	strb	r2, [r3, #0]
				InitPassageModeForSwing();
 8024cc6:	f7fe fc73 	bl	80235b0 <InitPassageModeForSwing>
}
 8024cca:	bf00      	nop
 8024ccc:	bd80      	pop	{r7, pc}
 8024cce:	bf00      	nop
 8024cd0:	2400022c 	.word	0x2400022c
 8024cd4:	2400000c 	.word	0x2400000c
 8024cd8:	2400012d 	.word	0x2400012d
 8024cdc:	2400040c 	.word	0x2400040c
 8024ce0:	2400042a 	.word	0x2400042a
 8024ce4:	24000428 	.word	0x24000428
 8024ce8:	24000028 	.word	0x24000028
 8024cec:	240004b0 	.word	0x240004b0
 8024cf0:	24000429 	.word	0x24000429
 8024cf4:	2400042c 	.word	0x2400042c
 8024cf8:	66666667 	.word	0x66666667

08024cfc <CheckTailgateFilterTimer>:
		}
	}
}

void CheckTailgateFilterTimer(void)
{
 8024cfc:	b580      	push	{r7, lr}
 8024cfe:	af00      	add	r7, sp, #0
	if (timerTgFilter.fStart)
 8024d00:	4b41      	ldr	r3, [pc, #260]	; (8024e08 <CheckTailgateFilterTimer+0x10c>)
 8024d02:	781b      	ldrb	r3, [r3, #0]
 8024d04:	2b00      	cmp	r3, #0
 8024d06:	d07c      	beq.n	8024e02 <CheckTailgateFilterTimer+0x106>
	{
		if (IsTimeout(&timerTgFilter, dwTgFilterTime * TICK_COUNT_100MS))
 8024d08:	4b40      	ldr	r3, [pc, #256]	; (8024e0c <CheckTailgateFilterTimer+0x110>)
 8024d0a:	681a      	ldr	r2, [r3, #0]
 8024d0c:	4613      	mov	r3, r2
 8024d0e:	009b      	lsls	r3, r3, #2
 8024d10:	4413      	add	r3, r2
 8024d12:	005b      	lsls	r3, r3, #1
 8024d14:	4619      	mov	r1, r3
 8024d16:	483c      	ldr	r0, [pc, #240]	; (8024e08 <CheckTailgateFilterTimer+0x10c>)
 8024d18:	f009 ff66 	bl	802ebe8 <IsTimeout>
 8024d1c:	4603      	mov	r3, r0
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	d04a      	beq.n	8024db8 <CheckTailgateFilterTimer+0xbc>
		{
			ResetTimer(&timerTgFilter);
 8024d22:	4839      	ldr	r0, [pc, #228]	; (8024e08 <CheckTailgateFilterTimer+0x10c>)
 8024d24:	f009 ff52 	bl	802ebcc <ResetTimer>

			if (isLuggageSet_EN == TRUE)
 8024d28:	4b39      	ldr	r3, [pc, #228]	; (8024e10 <CheckTailgateFilterTimer+0x114>)
 8024d2a:	781b      	ldrb	r3, [r3, #0]
 8024d2c:	2b00      	cmp	r3, #0
 8024d2e:	d003      	beq.n	8024d38 <CheckTailgateFilterTimer+0x3c>
			{
				//PRINTL(" [CheckTailgateFilterTimer] Luggage sensors detected. No EN TG!!");
				printf(" [CheckTailgateFilterTimer] Luggage sensors detected. No EN TG!! \n");
 8024d30:	4838      	ldr	r0, [pc, #224]	; (8024e14 <CheckTailgateFilterTimer+0x118>)
 8024d32:	f003 fe93 	bl	8028a5c <printf_>
				printf(" [CheckTailgateFilterTimer] Something detected. No EX TG!! \n");
				ResetTimer(&timerTgFilter);
			}
		}
	}
}
 8024d36:	e064      	b.n	8024e02 <CheckTailgateFilterTimer+0x106>
			else if (isLuggageSet_EX == TRUE)
 8024d38:	4b37      	ldr	r3, [pc, #220]	; (8024e18 <CheckTailgateFilterTimer+0x11c>)
 8024d3a:	781b      	ldrb	r3, [r3, #0]
 8024d3c:	2b00      	cmp	r3, #0
 8024d3e:	d003      	beq.n	8024d48 <CheckTailgateFilterTimer+0x4c>
				printf(" [CheckTailgateFilterTimer] Luggage sensors detected. No EX TG!! \n");
 8024d40:	4836      	ldr	r0, [pc, #216]	; (8024e1c <CheckTailgateFilterTimer+0x120>)
 8024d42:	f003 fe8b 	bl	8028a5c <printf_>
}
 8024d46:	e05c      	b.n	8024e02 <CheckTailgateFilterTimer+0x106>
				ControlDirectionLED(DIR_RED, DIR_RED);
 8024d48:	2102      	movs	r1, #2
 8024d4a:	2002      	movs	r0, #2
 8024d4c:	f7fc fc18 	bl	8021580 <ControlDirectionLED>
				ControlIndicatorBlink(FLG_SET);
 8024d50:	2001      	movs	r0, #1
 8024d52:	f7fc fcf9 	bl	8021748 <ControlIndicatorBlink>
				ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8024d56:	4b32      	ldr	r3, [pc, #200]	; (8024e20 <CheckTailgateFilterTimer+0x124>)
 8024d58:	7a9b      	ldrb	r3, [r3, #10]
 8024d5a:	461a      	mov	r2, r3
 8024d5c:	2101      	movs	r1, #1
 8024d5e:	2000      	movs	r0, #0
 8024d60:	f7fc fbb4 	bl	80214cc <ControlBuzzer>
				SetTailgatingTimer();
 8024d64:	f7fd faaa 	bl	80222bc <SetTailgatingTimer>
				if (gGCUStatus.bAuthCount_EN)
 8024d68:	4b2e      	ldr	r3, [pc, #184]	; (8024e24 <CheckTailgateFilterTimer+0x128>)
 8024d6a:	791b      	ldrb	r3, [r3, #4]
 8024d6c:	b2db      	uxtb	r3, r3
 8024d6e:	2b00      	cmp	r3, #0
 8024d70:	d00e      	beq.n	8024d90 <CheckTailgateFilterTimer+0x94>
					gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_TAILGATING;
 8024d72:	4a2c      	ldr	r2, [pc, #176]	; (8024e24 <CheckTailgateFilterTimer+0x128>)
 8024d74:	7a13      	ldrb	r3, [r2, #8]
 8024d76:	2103      	movs	r1, #3
 8024d78:	f361 0302 	bfi	r3, r1, #0, #3
 8024d7c:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nTailgating_EN = FLG_SET;
 8024d7e:	4a29      	ldr	r2, [pc, #164]	; (8024e24 <CheckTailgateFilterTimer+0x128>)
 8024d80:	7f13      	ldrb	r3, [r2, #28]
 8024d82:	f043 0301 	orr.w	r3, r3, #1
 8024d86:	7713      	strb	r3, [r2, #28]
					printf(" [EN] Tailgating detected! \n");
 8024d88:	4827      	ldr	r0, [pc, #156]	; (8024e28 <CheckTailgateFilterTimer+0x12c>)
 8024d8a:	f003 fe67 	bl	8028a5c <printf_>
}
 8024d8e:	e038      	b.n	8024e02 <CheckTailgateFilterTimer+0x106>
				else if (gGCUStatus.bAuthCount_EX)
 8024d90:	4b24      	ldr	r3, [pc, #144]	; (8024e24 <CheckTailgateFilterTimer+0x128>)
 8024d92:	795b      	ldrb	r3, [r3, #5]
 8024d94:	b2db      	uxtb	r3, r3
 8024d96:	2b00      	cmp	r3, #0
 8024d98:	d033      	beq.n	8024e02 <CheckTailgateFilterTimer+0x106>
					gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_TAILGATING;
 8024d9a:	4a22      	ldr	r2, [pc, #136]	; (8024e24 <CheckTailgateFilterTimer+0x128>)
 8024d9c:	7a13      	ldrb	r3, [r2, #8]
 8024d9e:	2103      	movs	r1, #3
 8024da0:	f361 1306 	bfi	r3, r1, #4, #3
 8024da4:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nTailgating_EX = FLG_SET;
 8024da6:	4a1f      	ldr	r2, [pc, #124]	; (8024e24 <CheckTailgateFilterTimer+0x128>)
 8024da8:	7f13      	ldrb	r3, [r2, #28]
 8024daa:	f043 0310 	orr.w	r3, r3, #16
 8024dae:	7713      	strb	r3, [r2, #28]
					printf(" [EX] Tailgating detected! \n");
 8024db0:	481e      	ldr	r0, [pc, #120]	; (8024e2c <CheckTailgateFilterTimer+0x130>)
 8024db2:	f003 fe53 	bl	8028a5c <printf_>
}
 8024db6:	e024      	b.n	8024e02 <CheckTailgateFilterTimer+0x106>
			if (gGCUStatus.bAuthCount_EN && psenNewSwing.b.s13)
 8024db8:	4b1a      	ldr	r3, [pc, #104]	; (8024e24 <CheckTailgateFilterTimer+0x128>)
 8024dba:	791b      	ldrb	r3, [r3, #4]
 8024dbc:	b2db      	uxtb	r3, r3
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	d00d      	beq.n	8024dde <CheckTailgateFilterTimer+0xe2>
 8024dc2:	4b1b      	ldr	r3, [pc, #108]	; (8024e30 <CheckTailgateFilterTimer+0x134>)
 8024dc4:	785b      	ldrb	r3, [r3, #1]
 8024dc6:	f003 0310 	and.w	r3, r3, #16
 8024dca:	b2db      	uxtb	r3, r3
 8024dcc:	2b00      	cmp	r3, #0
 8024dce:	d006      	beq.n	8024dde <CheckTailgateFilterTimer+0xe2>
				printf(" [CheckTailgateFilterTimer] Something detected. No EN TG!!\n");
 8024dd0:	4818      	ldr	r0, [pc, #96]	; (8024e34 <CheckTailgateFilterTimer+0x138>)
 8024dd2:	f003 fe43 	bl	8028a5c <printf_>
				ResetTimer(&timerTgFilter);
 8024dd6:	480c      	ldr	r0, [pc, #48]	; (8024e08 <CheckTailgateFilterTimer+0x10c>)
 8024dd8:	f009 fef8 	bl	802ebcc <ResetTimer>
}
 8024ddc:	e011      	b.n	8024e02 <CheckTailgateFilterTimer+0x106>
			else if (gGCUStatus.bAuthCount_EX && psenNewSwing.b.s05)
 8024dde:	4b11      	ldr	r3, [pc, #68]	; (8024e24 <CheckTailgateFilterTimer+0x128>)
 8024de0:	795b      	ldrb	r3, [r3, #5]
 8024de2:	b2db      	uxtb	r3, r3
 8024de4:	2b00      	cmp	r3, #0
 8024de6:	d00c      	beq.n	8024e02 <CheckTailgateFilterTimer+0x106>
 8024de8:	4b11      	ldr	r3, [pc, #68]	; (8024e30 <CheckTailgateFilterTimer+0x134>)
 8024dea:	781b      	ldrb	r3, [r3, #0]
 8024dec:	f003 0310 	and.w	r3, r3, #16
 8024df0:	b2db      	uxtb	r3, r3
 8024df2:	2b00      	cmp	r3, #0
 8024df4:	d005      	beq.n	8024e02 <CheckTailgateFilterTimer+0x106>
				printf(" [CheckTailgateFilterTimer] Something detected. No EX TG!! \n");
 8024df6:	4810      	ldr	r0, [pc, #64]	; (8024e38 <CheckTailgateFilterTimer+0x13c>)
 8024df8:	f003 fe30 	bl	8028a5c <printf_>
				ResetTimer(&timerTgFilter);
 8024dfc:	4802      	ldr	r0, [pc, #8]	; (8024e08 <CheckTailgateFilterTimer+0x10c>)
 8024dfe:	f009 fee5 	bl	802ebcc <ResetTimer>
}
 8024e02:	bf00      	nop
 8024e04:	bd80      	pop	{r7, pc}
 8024e06:	bf00      	nop
 8024e08:	24000244 	.word	0x24000244
 8024e0c:	24000010 	.word	0x24000010
 8024e10:	24000420 	.word	0x24000420
 8024e14:	08030a84 	.word	0x08030a84
 8024e18:	24000421 	.word	0x24000421
 8024e1c:	08030ac8 	.word	0x08030ac8
 8024e20:	240004a0 	.word	0x240004a0
 8024e24:	240004b0 	.word	0x240004b0
 8024e28:	08030b0c 	.word	0x08030b0c
 8024e2c:	08030b2c 	.word	0x08030b2c
 8024e30:	2400040c 	.word	0x2400040c
 8024e34:	08030b4c 	.word	0x08030b4c
 8024e38:	08030b88 	.word	0x08030b88

08024e3c <CheckCloseWaitTimer>:

void CheckCloseWaitTimer(void)
{
 8024e3c:	b580      	push	{r7, lr}
 8024e3e:	af00      	add	r7, sp, #0
	if (IsTimeout(&timerCloseWait, dwCloseWaitTime * TICK_COUNT_100MS))
 8024e40:	4b0a      	ldr	r3, [pc, #40]	; (8024e6c <CheckCloseWaitTimer+0x30>)
 8024e42:	681a      	ldr	r2, [r3, #0]
 8024e44:	4613      	mov	r3, r2
 8024e46:	009b      	lsls	r3, r3, #2
 8024e48:	4413      	add	r3, r2
 8024e4a:	005b      	lsls	r3, r3, #1
 8024e4c:	4619      	mov	r1, r3
 8024e4e:	4808      	ldr	r0, [pc, #32]	; (8024e70 <CheckCloseWaitTimer+0x34>)
 8024e50:	f009 feca 	bl	802ebe8 <IsTimeout>
 8024e54:	4603      	mov	r3, r0
 8024e56:	2b00      	cmp	r3, #0
 8024e58:	d005      	beq.n	8024e66 <CheckCloseWaitTimer+0x2a>
	{
		ResetTimer(&timerCloseWait);
 8024e5a:	4805      	ldr	r0, [pc, #20]	; (8024e70 <CheckCloseWaitTimer+0x34>)
 8024e5c:	f009 feb6 	bl	802ebcc <ResetTimer>
		ControlBarrier(BARRIER_CLOSE_S);
 8024e60:	2003      	movs	r0, #3
 8024e62:	f7fc fafb 	bl	802145c <ControlBarrier>
	}
}
 8024e66:	bf00      	nop
 8024e68:	bd80      	pop	{r7, pc}
 8024e6a:	bf00      	nop
 8024e6c:	24000008 	.word	0x24000008
 8024e70:	24000238 	.word	0x24000238

08024e74 <PassageProcessForSwing>:
/*******************************************************************************
 * Main Passage Process for swing gate
 *******************************************************************************/

void PassageProcessForSwing()				//used barrierTest from WMATA		pms
{
 8024e74:	b580      	push	{r7, lr}
 8024e76:	af00      	add	r7, sp, #0
	UpdateSensorData();
 8024e78:	f7fe fb5e 	bl	8023538 <UpdateSensorData>

	// SCADA data
	gGCUStatus.bSCADA = (*(BYTE*)READ03_ADR);
 8024e7c:	4b51      	ldr	r3, [pc, #324]	; (8024fc4 <PassageProcessForSwing+0x150>)
 8024e7e:	781a      	ldrb	r2, [r3, #0]
 8024e80:	4b51      	ldr	r3, [pc, #324]	; (8024fc8 <PassageProcessForSwing+0x154>)
 8024e82:	751a      	strb	r2, [r3, #20]

	if ((RD_SWITCH & MASK_PUSH) == MASK_PUSH)			//RD_SWITCH1 -> RD_SWITCH
 8024e84:	4b51      	ldr	r3, [pc, #324]	; (8024fcc <PassageProcessForSwing+0x158>)
 8024e86:	781b      	ldrb	r3, [r3, #0]
 8024e88:	b2db      	uxtb	r3, r3
 8024e8a:	f003 0310 	and.w	r3, r3, #16
 8024e8e:	2b10      	cmp	r3, #16
 8024e90:	d102      	bne.n	8024e98 <PassageProcessForSwing+0x24>
	{
		Brr_SetEmergency(TRUE);
 8024e92:	2001      	movs	r0, #1
 8024e94:	f7fb fbf6 	bl	8020684 <Brr_SetEmergency>
	}

	CheckBarrierOperation();
 8024e98:	f7fe fd10 	bl	80238bc <CheckBarrierOperation>
	CheckBarrierStop();
 8024e9c:	f7ff fd10 	bl	80248c0 <CheckBarrierStop>
	CheckSafetyTimerForSwing();
 8024ea0:	f7ff fd38 	bl	8024914 <CheckSafetyTimerForSwing>
	CheckIndicatorTimer();
 8024ea4:	f7fc fe3c 	bl	8021b20 <CheckIndicatorTimer>
	CheckBlinkTimer();					//function does not exist
 8024ea8:	f7fd f920 	bl	80220ec <CheckBlinkTimer>
	CheckBuzzerTimer();
 8024eac:	f7fc fdce 	bl	8021a4c <CheckBuzzerTimer>
	CheckEmergencySignal();
 8024eb0:	f7fc fd46 	bl	8021940 <CheckEmergencySignal>
	CheckUPSStatus();
 8024eb4:	f7fc fc78 	bl	80217a8 <CheckUPSStatus>
	CheckForceOpen();
 8024eb8:	f7ff fc5c 	bl	8024774 <CheckForceOpen>
	CheckResetTimer();
 8024ebc:	f7ff fe76 	bl	8024bac <CheckResetTimer>
	CheckCloseWaitTimer();
 8024ec0:	f7ff ffbc 	bl	8024e3c <CheckCloseWaitTimer>

	if (memcmp(&psenNewSwing, &psenOldSwing, sizeof(T_PASS_SEN_SWING)))
 8024ec4:	2204      	movs	r2, #4
 8024ec6:	4942      	ldr	r1, [pc, #264]	; (8024fd0 <PassageProcessForSwing+0x15c>)
 8024ec8:	4842      	ldr	r0, [pc, #264]	; (8024fd4 <PassageProcessForSwing+0x160>)
 8024eca:	f009 fee7 	bl	802ec9c <memcmp>
 8024ece:	4603      	mov	r3, r0
 8024ed0:	2b00      	cmp	r3, #0
 8024ed2:	d01c      	beq.n	8024f0e <PassageProcessForSwing+0x9a>
	{
		// check timers
		ResetTimer(&timerPassageClear);
 8024ed4:	4840      	ldr	r0, [pc, #256]	; (8024fd8 <PassageProcessForSwing+0x164>)
 8024ed6:	f009 fe79 	bl	802ebcc <ResetTimer>

		if (!gCurGCUOpMode.bEmergencyMaint && gfFreeMode == FALSE)
 8024eda:	4b40      	ldr	r3, [pc, #256]	; (8024fdc <PassageProcessForSwing+0x168>)
 8024edc:	789b      	ldrb	r3, [r3, #2]
 8024ede:	2b00      	cmp	r3, #0
 8024ee0:	d159      	bne.n	8024f96 <PassageProcessForSwing+0x122>
 8024ee2:	4b3f      	ldr	r3, [pc, #252]	; (8024fe0 <PassageProcessForSwing+0x16c>)
 8024ee4:	781b      	ldrb	r3, [r3, #0]
 8024ee6:	f083 0301 	eor.w	r3, r3, #1
 8024eea:	b2db      	uxtb	r3, r3
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	d052      	beq.n	8024f96 <PassageProcessForSwing+0x122>
		{
			if ((gCurGCUOpMode.bServiceMode_EN != NO_SERVICE) || (gCurGCUOpMode.bServiceMode_EX != NO_SERVICE))
 8024ef0:	4b3a      	ldr	r3, [pc, #232]	; (8024fdc <PassageProcessForSwing+0x168>)
 8024ef2:	781b      	ldrb	r3, [r3, #0]
 8024ef4:	2b00      	cmp	r3, #0
 8024ef6:	d103      	bne.n	8024f00 <PassageProcessForSwing+0x8c>
 8024ef8:	4b38      	ldr	r3, [pc, #224]	; (8024fdc <PassageProcessForSwing+0x168>)
 8024efa:	785b      	ldrb	r3, [r3, #1]
 8024efc:	2b00      	cmp	r3, #0
 8024efe:	d04a      	beq.n	8024f96 <PassageProcessForSwing+0x122>
			{
				CheckEntranceSwing();
 8024f00:	f7fe ff6a 	bl	8023dd8 <CheckEntranceSwing>
				CheckPassReadySwing();
 8024f04:	f7ff f892 	bl	802402c <CheckPassReadySwing>
				CheckPassingSwing();
 8024f08:	f7ff f9a4 	bl	8024254 <CheckPassingSwing>
 8024f0c:	e043      	b.n	8024f96 <PassageProcessForSwing+0x122>
		}
	}
	else
	{
		// if (psenNewSwing.B.bSen1 || psenNewSwing.B.bSen2 || psenNewSwing.B.bSen3)
		if (psenNewSwing.dirEntry.enter || psenNewSwing.section.lower_EN || psenNewSwing.side.exit)
 8024f0e:	4b31      	ldr	r3, [pc, #196]	; (8024fd4 <PassageProcessForSwing+0x160>)
 8024f10:	781b      	ldrb	r3, [r3, #0]
 8024f12:	f003 0303 	and.w	r3, r3, #3
 8024f16:	b2db      	uxtb	r3, r3
 8024f18:	2b00      	cmp	r3, #0
 8024f1a:	d10b      	bne.n	8024f34 <PassageProcessForSwing+0xc0>
 8024f1c:	4b2d      	ldr	r3, [pc, #180]	; (8024fd4 <PassageProcessForSwing+0x160>)
 8024f1e:	781b      	ldrb	r3, [r3, #0]
 8024f20:	f023 030f 	bic.w	r3, r3, #15
 8024f24:	b2db      	uxtb	r3, r3
 8024f26:	2b00      	cmp	r3, #0
 8024f28:	d104      	bne.n	8024f34 <PassageProcessForSwing+0xc0>
 8024f2a:	4b2a      	ldr	r3, [pc, #168]	; (8024fd4 <PassageProcessForSwing+0x160>)
 8024f2c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8024f30:	2b00      	cmp	r3, #0
 8024f32:	d003      	beq.n	8024f3c <PassageProcessForSwing+0xc8>
		{
			// Update Timer
			ResetTimer(&timerPassageClear);
 8024f34:	4828      	ldr	r0, [pc, #160]	; (8024fd8 <PassageProcessForSwing+0x164>)
 8024f36:	f009 fe49 	bl	802ebcc <ResetTimer>
 8024f3a:	e028      	b.n	8024f8e <PassageProcessForSwing+0x11a>
		}
		else
		{
			if (timerPassageClear.fStart)
 8024f3c:	4b26      	ldr	r3, [pc, #152]	; (8024fd8 <PassageProcessForSwing+0x164>)
 8024f3e:	781b      	ldrb	r3, [r3, #0]
 8024f40:	2b00      	cmp	r3, #0
 8024f42:	d021      	beq.n	8024f88 <PassageProcessForSwing+0x114>
			{
				if (IsTimeout(&timerPassageClear, (DEFAULT_PASSAGE_CLEAR_TIMEOUT * TICK_COUNT_1SEC)))
 8024f44:	21c8      	movs	r1, #200	; 0xc8
 8024f46:	4824      	ldr	r0, [pc, #144]	; (8024fd8 <PassageProcessForSwing+0x164>)
 8024f48:	f009 fe4e 	bl	802ebe8 <IsTimeout>
 8024f4c:	4603      	mov	r3, r0
 8024f4e:	2b00      	cmp	r3, #0
 8024f50:	d01d      	beq.n	8024f8e <PassageProcessForSwing+0x11a>
				{
					isForceOpenReady_EN = FALSE;
 8024f52:	4b24      	ldr	r3, [pc, #144]	; (8024fe4 <PassageProcessForSwing+0x170>)
 8024f54:	2200      	movs	r2, #0
 8024f56:	701a      	strb	r2, [r3, #0]
					isForceOpenReady_EX = FALSE;
 8024f58:	4b23      	ldr	r3, [pc, #140]	; (8024fe8 <PassageProcessForSwing+0x174>)
 8024f5a:	2200      	movs	r2, #0
 8024f5c:	701a      	strb	r2, [r3, #0]
					isPassReady_EN = FALSE;
 8024f5e:	4b23      	ldr	r3, [pc, #140]	; (8024fec <PassageProcessForSwing+0x178>)
 8024f60:	2200      	movs	r2, #0
 8024f62:	701a      	strb	r2, [r3, #0]
					isPassReady_EX = FALSE;
 8024f64:	4b22      	ldr	r3, [pc, #136]	; (8024ff0 <PassageProcessForSwing+0x17c>)
 8024f66:	2200      	movs	r2, #0
 8024f68:	701a      	strb	r2, [r3, #0]
					isLuggageSet_EN = FALSE;
 8024f6a:	4b22      	ldr	r3, [pc, #136]	; (8024ff4 <PassageProcessForSwing+0x180>)
 8024f6c:	2200      	movs	r2, #0
 8024f6e:	701a      	strb	r2, [r3, #0]
					isLuggageSet_EX = FALSE;
 8024f70:	4b21      	ldr	r3, [pc, #132]	; (8024ff8 <PassageProcessForSwing+0x184>)
 8024f72:	2200      	movs	r2, #0
 8024f74:	701a      	strb	r2, [r3, #0]
					isForceOpen = FALSE;
 8024f76:	4b21      	ldr	r3, [pc, #132]	; (8024ffc <PassageProcessForSwing+0x188>)
 8024f78:	2200      	movs	r2, #0
 8024f7a:	701a      	strb	r2, [r3, #0]
					ClearPassageAlarm();
 8024f7c:	f7fc ff28 	bl	8021dd0 <ClearPassageAlarm>
					ResetTimer(&timerPassageClear);
 8024f80:	4815      	ldr	r0, [pc, #84]	; (8024fd8 <PassageProcessForSwing+0x164>)
 8024f82:	f009 fe23 	bl	802ebcc <ResetTimer>
 8024f86:	e002      	b.n	8024f8e <PassageProcessForSwing+0x11a>
			}
			else
			{
				// Last update 20230107
				// if (gGCUStatus.PassageAlarm.b.nFromEN || gGCUStatus.PassageAlarm.b.nFromEX )
				SetTimer(&timerPassageClear);
 8024f88:	4813      	ldr	r0, [pc, #76]	; (8024fd8 <PassageProcessForSwing+0x164>)
 8024f8a:	f009 fe0b 	bl	802eba4 <SetTimer>
			}
		}

		CheckAuthTimeout();
 8024f8e:	f7fc fff5 	bl	8021f7c <CheckAuthTimeout>
		CheckModeChange();
 8024f92:	f7fc f843 	bl	802101c <CheckModeChange>
	}

	if (!gCurGCUOpMode.bEmergencyMaint)
 8024f96:	4b11      	ldr	r3, [pc, #68]	; (8024fdc <PassageProcessForSwing+0x168>)
 8024f98:	789b      	ldrb	r3, [r3, #2]
 8024f9a:	2b00      	cmp	r3, #0
 8024f9c:	d109      	bne.n	8024fb2 <PassageProcessForSwing+0x13e>
	{
		CheckTailgateFilterTimer();
 8024f9e:	f7ff fead 	bl	8024cfc <CheckTailgateFilterTimer>
		CheckCounterEnterTimer();
 8024fa2:	f7ff fa9f 	bl	80244e4 <CheckCounterEnterTimer>
		CheckIllegalEnterSwing();
 8024fa6:	f7ff fab9 	bl	802451c <CheckIllegalEnterSwing>
		CheckTGTimerForSwing();
 8024faa:	f7ff fb6f 	bl	802468c <CheckTGTimerForSwing>
		CheckIllegalAlarmTimer();
 8024fae:	f7fd f827 	bl	8022000 <CheckIllegalAlarmTimer>
 8024fb2:	4b08      	ldr	r3, [pc, #32]	; (8024fd4 <PassageProcessForSwing+0x160>)
 8024fb4:	681b      	ldr	r3, [r3, #0]
	}

	// update sensor state
	memcpy(&psenOldSwing, &psenNewSwing, sizeof(T_PASS_SEN_SWING));
 8024fb6:	4a06      	ldr	r2, [pc, #24]	; (8024fd0 <PassageProcessForSwing+0x15c>)
 8024fb8:	6013      	str	r3, [r2, #0]

	CheckPassSenError(TRUE);
 8024fba:	2001      	movs	r0, #1
 8024fbc:	f7fc fdce 	bl	8021b5c <CheckPassSenError>
}
 8024fc0:	bf00      	nop
 8024fc2:	bd80      	pop	{r7, pc}
 8024fc4:	60000500 	.word	0x60000500
 8024fc8:	240004b0 	.word	0x240004b0
 8024fcc:	60000300 	.word	0x60000300
 8024fd0:	24000410 	.word	0x24000410
 8024fd4:	2400040c 	.word	0x2400040c
 8024fd8:	2400016c 	.word	0x2400016c
 8024fdc:	240004d4 	.word	0x240004d4
 8024fe0:	2400043d 	.word	0x2400043d
 8024fe4:	24000422 	.word	0x24000422
 8024fe8:	24000423 	.word	0x24000423
 8024fec:	2400041c 	.word	0x2400041c
 8024ff0:	2400041d 	.word	0x2400041d
 8024ff4:	24000420 	.word	0x24000420
 8024ff8:	24000421 	.word	0x24000421
 8024ffc:	24000425 	.word	0x24000425

08025000 <TestDirection>:
	if (U0_Getch(&testData))
		U0_Putch(testData);
}

void TestDirection(void)
{
 8025000:	b580      	push	{r7, lr}
 8025002:	b082      	sub	sp, #8
 8025004:	af00      	add	r7, sp, #0
	BYTE bColor = DIR_OFF;
 8025006:	2300      	movs	r3, #0
 8025008:	71fb      	strb	r3, [r7, #7]

	if (nDirOpSeq)
 802500a:	4b24      	ldr	r3, [pc, #144]	; (802509c <TestDirection+0x9c>)
 802500c:	681b      	ldr	r3, [r3, #0]
 802500e:	2b00      	cmp	r3, #0
 8025010:	d036      	beq.n	8025080 <TestDirection+0x80>
	{
		if (!TestOption.b.fTestDir )
 8025012:	4b23      	ldr	r3, [pc, #140]	; (80250a0 <TestDirection+0xa0>)
 8025014:	681b      	ldr	r3, [r3, #0]
 8025016:	f343 0340 	sbfx	r3, r3, #1, #1
 802501a:	b25b      	sxtb	r3, r3
 802501c:	2b00      	cmp	r3, #0
 802501e:	d105      	bne.n	802502c <TestDirection+0x2c>
		{
			nDirOpSeq = 0;
 8025020:	4b1e      	ldr	r3, [pc, #120]	; (802509c <TestDirection+0x9c>)
 8025022:	2200      	movs	r2, #0
 8025024:	601a      	str	r2, [r3, #0]
			bColor = DIR_OFF;
 8025026:	2300      	movs	r3, #0
 8025028:	71fb      	strb	r3, [r7, #7]
 802502a:	e020      	b.n	802506e <TestDirection+0x6e>
		}
		else
		{
			switch (nDirOpSeq)
 802502c:	4b1b      	ldr	r3, [pc, #108]	; (802509c <TestDirection+0x9c>)
 802502e:	681b      	ldr	r3, [r3, #0]
 8025030:	2b03      	cmp	r3, #3
 8025032:	d016      	beq.n	8025062 <TestDirection+0x62>
 8025034:	2b03      	cmp	r3, #3
 8025036:	dc1a      	bgt.n	802506e <TestDirection+0x6e>
 8025038:	2b01      	cmp	r3, #1
 802503a:	d002      	beq.n	8025042 <TestDirection+0x42>
 802503c:	2b02      	cmp	r3, #2
 802503e:	d008      	beq.n	8025052 <TestDirection+0x52>
 8025040:	e015      	b.n	802506e <TestDirection+0x6e>
			{
			case 1:
				bColor = STATE_ALLOW;
 8025042:	2301      	movs	r3, #1
 8025044:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq++;
 8025046:	4b15      	ldr	r3, [pc, #84]	; (802509c <TestDirection+0x9c>)
 8025048:	681b      	ldr	r3, [r3, #0]
 802504a:	3301      	adds	r3, #1
 802504c:	4a13      	ldr	r2, [pc, #76]	; (802509c <TestDirection+0x9c>)
 802504e:	6013      	str	r3, [r2, #0]
				break;
 8025050:	e00d      	b.n	802506e <TestDirection+0x6e>
			case 2:
				bColor = STATE_STOP;
 8025052:	2302      	movs	r3, #2
 8025054:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq++;
 8025056:	4b11      	ldr	r3, [pc, #68]	; (802509c <TestDirection+0x9c>)
 8025058:	681b      	ldr	r3, [r3, #0]
 802505a:	3301      	adds	r3, #1
 802505c:	4a0f      	ldr	r2, [pc, #60]	; (802509c <TestDirection+0x9c>)
 802505e:	6013      	str	r3, [r2, #0]
				break;
 8025060:	e005      	b.n	802506e <TestDirection+0x6e>
			case 3:
				bColor = DIR_OFF;
 8025062:	2300      	movs	r3, #0
 8025064:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq = 1;
 8025066:	4b0d      	ldr	r3, [pc, #52]	; (802509c <TestDirection+0x9c>)
 8025068:	2201      	movs	r2, #1
 802506a:	601a      	str	r2, [r3, #0]
				break;
 802506c:	bf00      	nop
			}
		}
		ControlStatusLED_Ex(bColor);
 802506e:	79fb      	ldrb	r3, [r7, #7]
 8025070:	4618      	mov	r0, r3
 8025072:	f000 fa61 	bl	8025538 <ControlStatusLED_Ex>
		ControlStatusLED_En(bColor);
 8025076:	79fb      	ldrb	r3, [r7, #7]
 8025078:	4618      	mov	r0, r3
 802507a:	f000 fa2d 	bl	80254d8 <ControlStatusLED_En>
	}
	else if (TestOption.b.fTestDir)
	{
		nDirOpSeq = 1;
	}
}
 802507e:	e009      	b.n	8025094 <TestDirection+0x94>
	else if (TestOption.b.fTestDir)
 8025080:	4b07      	ldr	r3, [pc, #28]	; (80250a0 <TestDirection+0xa0>)
 8025082:	681b      	ldr	r3, [r3, #0]
 8025084:	f343 0340 	sbfx	r3, r3, #1, #1
 8025088:	b25b      	sxtb	r3, r3
 802508a:	2b00      	cmp	r3, #0
 802508c:	d002      	beq.n	8025094 <TestDirection+0x94>
		nDirOpSeq = 1;
 802508e:	4b03      	ldr	r3, [pc, #12]	; (802509c <TestDirection+0x9c>)
 8025090:	2201      	movs	r2, #1
 8025092:	601a      	str	r2, [r3, #0]
}
 8025094:	bf00      	nop
 8025096:	3708      	adds	r7, #8
 8025098:	46bd      	mov	sp, r7
 802509a:	bd80      	pop	{r7, pc}
 802509c:	24000504 	.word	0x24000504
 80250a0:	240004f0 	.word	0x240004f0

080250a4 <TestOverHeadDirection>:


void TestOverHeadDirection(void)
{
 80250a4:	b580      	push	{r7, lr}
 80250a6:	b082      	sub	sp, #8
 80250a8:	af00      	add	r7, sp, #0
	BYTE bColor = DIR_OFF;
 80250aa:	2300      	movs	r3, #0
 80250ac:	71fb      	strb	r3, [r7, #7]

	if (nOverOpSeq)
 80250ae:	4b24      	ldr	r3, [pc, #144]	; (8025140 <TestOverHeadDirection+0x9c>)
 80250b0:	681b      	ldr	r3, [r3, #0]
 80250b2:	2b00      	cmp	r3, #0
 80250b4:	d036      	beq.n	8025124 <TestOverHeadDirection+0x80>
	{
		if (!TestOption.b.fTestOverHeadLamp )
 80250b6:	4b23      	ldr	r3, [pc, #140]	; (8025144 <TestOverHeadDirection+0xa0>)
 80250b8:	681b      	ldr	r3, [r3, #0]
 80250ba:	f343 1300 	sbfx	r3, r3, #4, #1
 80250be:	b25b      	sxtb	r3, r3
 80250c0:	2b00      	cmp	r3, #0
 80250c2:	d105      	bne.n	80250d0 <TestOverHeadDirection+0x2c>
		{
			nOverOpSeq = 0;
 80250c4:	4b1e      	ldr	r3, [pc, #120]	; (8025140 <TestOverHeadDirection+0x9c>)
 80250c6:	2200      	movs	r2, #0
 80250c8:	601a      	str	r2, [r3, #0]
			bColor = DIR_OFF;
 80250ca:	2300      	movs	r3, #0
 80250cc:	71fb      	strb	r3, [r7, #7]
 80250ce:	e020      	b.n	8025112 <TestOverHeadDirection+0x6e>
		}
		else
		{
			switch (nOverOpSeq)
 80250d0:	4b1b      	ldr	r3, [pc, #108]	; (8025140 <TestOverHeadDirection+0x9c>)
 80250d2:	681b      	ldr	r3, [r3, #0]
 80250d4:	2b03      	cmp	r3, #3
 80250d6:	d016      	beq.n	8025106 <TestOverHeadDirection+0x62>
 80250d8:	2b03      	cmp	r3, #3
 80250da:	dc1a      	bgt.n	8025112 <TestOverHeadDirection+0x6e>
 80250dc:	2b01      	cmp	r3, #1
 80250de:	d002      	beq.n	80250e6 <TestOverHeadDirection+0x42>
 80250e0:	2b02      	cmp	r3, #2
 80250e2:	d008      	beq.n	80250f6 <TestOverHeadDirection+0x52>
 80250e4:	e015      	b.n	8025112 <TestOverHeadDirection+0x6e>
			{
			case 1:
				bColor = STATE_ALLOW;
 80250e6:	2301      	movs	r3, #1
 80250e8:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq++;
 80250ea:	4b15      	ldr	r3, [pc, #84]	; (8025140 <TestOverHeadDirection+0x9c>)
 80250ec:	681b      	ldr	r3, [r3, #0]
 80250ee:	3301      	adds	r3, #1
 80250f0:	4a13      	ldr	r2, [pc, #76]	; (8025140 <TestOverHeadDirection+0x9c>)
 80250f2:	6013      	str	r3, [r2, #0]
				break;
 80250f4:	e00d      	b.n	8025112 <TestOverHeadDirection+0x6e>
			case 2:
				bColor = STATE_STOP;
 80250f6:	2302      	movs	r3, #2
 80250f8:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq++;
 80250fa:	4b11      	ldr	r3, [pc, #68]	; (8025140 <TestOverHeadDirection+0x9c>)
 80250fc:	681b      	ldr	r3, [r3, #0]
 80250fe:	3301      	adds	r3, #1
 8025100:	4a0f      	ldr	r2, [pc, #60]	; (8025140 <TestOverHeadDirection+0x9c>)
 8025102:	6013      	str	r3, [r2, #0]
				break;
 8025104:	e005      	b.n	8025112 <TestOverHeadDirection+0x6e>
			case 3:
				bColor = DIR_OFF;
 8025106:	2300      	movs	r3, #0
 8025108:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq = 1;
 802510a:	4b0d      	ldr	r3, [pc, #52]	; (8025140 <TestOverHeadDirection+0x9c>)
 802510c:	2201      	movs	r2, #1
 802510e:	601a      	str	r2, [r3, #0]
				break;
 8025110:	bf00      	nop
			}
		}
		ControlOverHeadDisplay_Ex(bColor);
 8025112:	79fb      	ldrb	r3, [r7, #7]
 8025114:	4618      	mov	r0, r3
 8025116:	f000 fa71 	bl	80255fc <ControlOverHeadDisplay_Ex>
		ControlOverHeadDisplay_En(bColor);
 802511a:	79fb      	ldrb	r3, [r7, #7]
 802511c:	4618      	mov	r0, r3
 802511e:	f000 fa3b 	bl	8025598 <ControlOverHeadDisplay_En>
	}
	else if (TestOption.b.fTestOverHeadLamp)
	{
		nOverOpSeq = 1;
	}
}
 8025122:	e009      	b.n	8025138 <TestOverHeadDirection+0x94>
	else if (TestOption.b.fTestOverHeadLamp)
 8025124:	4b07      	ldr	r3, [pc, #28]	; (8025144 <TestOverHeadDirection+0xa0>)
 8025126:	681b      	ldr	r3, [r3, #0]
 8025128:	f343 1300 	sbfx	r3, r3, #4, #1
 802512c:	b25b      	sxtb	r3, r3
 802512e:	2b00      	cmp	r3, #0
 8025130:	d002      	beq.n	8025138 <TestOverHeadDirection+0x94>
		nOverOpSeq = 1;
 8025132:	4b03      	ldr	r3, [pc, #12]	; (8025140 <TestOverHeadDirection+0x9c>)
 8025134:	2201      	movs	r2, #1
 8025136:	601a      	str	r2, [r3, #0]
}
 8025138:	bf00      	nop
 802513a:	3708      	adds	r7, #8
 802513c:	46bd      	mov	sp, r7
 802513e:	bd80      	pop	{r7, pc}
 8025140:	24000508 	.word	0x24000508
 8025144:	240004f0 	.word	0x240004f0

08025148 <TestLamp>:

void TestLamp(void)
{
 8025148:	b580      	push	{r7, lr}
 802514a:	b082      	sub	sp, #8
 802514c:	af00      	add	r7, sp, #0

	BYTE bColor = LAMP_OFF;
 802514e:	2300      	movs	r3, #0
 8025150:	71fb      	strb	r3, [r7, #7]
	if (nLampOpSeq)
 8025152:	4b3a      	ldr	r3, [pc, #232]	; (802523c <TestLamp+0xf4>)
 8025154:	681b      	ldr	r3, [r3, #0]
 8025156:	2b00      	cmp	r3, #0
 8025158:	d061      	beq.n	802521e <TestLamp+0xd6>
	{
		if (!TestOption.b.fTestLamp)
 802515a:	4b39      	ldr	r3, [pc, #228]	; (8025240 <TestLamp+0xf8>)
 802515c:	681b      	ldr	r3, [r3, #0]
 802515e:	f343 0380 	sbfx	r3, r3, #2, #1
 8025162:	b25b      	sxtb	r3, r3
 8025164:	2b00      	cmp	r3, #0
 8025166:	d105      	bne.n	8025174 <TestLamp+0x2c>
		{
			nLampOpSeq = 0;
 8025168:	4b34      	ldr	r3, [pc, #208]	; (802523c <TestLamp+0xf4>)
 802516a:	2200      	movs	r2, #0
 802516c:	601a      	str	r2, [r3, #0]
			bColor = LAMP_OFF;
 802516e:	2300      	movs	r3, #0
 8025170:	71fb      	strb	r3, [r7, #7]
 8025172:	e04b      	b.n	802520c <TestLamp+0xc4>
		}
		else
		{
			switch (nLampOpSeq)
 8025174:	4b31      	ldr	r3, [pc, #196]	; (802523c <TestLamp+0xf4>)
 8025176:	681b      	ldr	r3, [r3, #0]
 8025178:	3b01      	subs	r3, #1
 802517a:	2b06      	cmp	r3, #6
 802517c:	d846      	bhi.n	802520c <TestLamp+0xc4>
 802517e:	a201      	add	r2, pc, #4	; (adr r2, 8025184 <TestLamp+0x3c>)
 8025180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025184:	080251a1 	.word	0x080251a1
 8025188:	080251b1 	.word	0x080251b1
 802518c:	080251c1 	.word	0x080251c1
 8025190:	080251d1 	.word	0x080251d1
 8025194:	080251e1 	.word	0x080251e1
 8025198:	080251f1 	.word	0x080251f1
 802519c:	08025201 	.word	0x08025201
			{
			case 1:				
				bColor = LAMP_RED_ON;
 80251a0:	2301      	movs	r3, #1
 80251a2:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80251a4:	4b25      	ldr	r3, [pc, #148]	; (802523c <TestLamp+0xf4>)
 80251a6:	681b      	ldr	r3, [r3, #0]
 80251a8:	3301      	adds	r3, #1
 80251aa:	4a24      	ldr	r2, [pc, #144]	; (802523c <TestLamp+0xf4>)
 80251ac:	6013      	str	r3, [r2, #0]
				break;
 80251ae:	e02d      	b.n	802520c <TestLamp+0xc4>
			case 2:
				bColor = LAMP_GREEN_ON;
 80251b0:	2302      	movs	r3, #2
 80251b2:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80251b4:	4b21      	ldr	r3, [pc, #132]	; (802523c <TestLamp+0xf4>)
 80251b6:	681b      	ldr	r3, [r3, #0]
 80251b8:	3301      	adds	r3, #1
 80251ba:	4a20      	ldr	r2, [pc, #128]	; (802523c <TestLamp+0xf4>)
 80251bc:	6013      	str	r3, [r2, #0]
				break;
 80251be:	e025      	b.n	802520c <TestLamp+0xc4>
			case 3:
				bColor = LAMP_BLUE_ON;
 80251c0:	2304      	movs	r3, #4
 80251c2:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80251c4:	4b1d      	ldr	r3, [pc, #116]	; (802523c <TestLamp+0xf4>)
 80251c6:	681b      	ldr	r3, [r3, #0]
 80251c8:	3301      	adds	r3, #1
 80251ca:	4a1c      	ldr	r2, [pc, #112]	; (802523c <TestLamp+0xf4>)
 80251cc:	6013      	str	r3, [r2, #0]
				break;
 80251ce:	e01d      	b.n	802520c <TestLamp+0xc4>
			case 4:				
				bColor = LAMP_RED_ON + LAMP_GREEN_ON;
 80251d0:	2303      	movs	r3, #3
 80251d2:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80251d4:	4b19      	ldr	r3, [pc, #100]	; (802523c <TestLamp+0xf4>)
 80251d6:	681b      	ldr	r3, [r3, #0]
 80251d8:	3301      	adds	r3, #1
 80251da:	4a18      	ldr	r2, [pc, #96]	; (802523c <TestLamp+0xf4>)
 80251dc:	6013      	str	r3, [r2, #0]
				break;
 80251de:	e015      	b.n	802520c <TestLamp+0xc4>
			case 5:
				bColor = LAMP_RED_ON + LAMP_BLUE_ON;
 80251e0:	2305      	movs	r3, #5
 80251e2:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80251e4:	4b15      	ldr	r3, [pc, #84]	; (802523c <TestLamp+0xf4>)
 80251e6:	681b      	ldr	r3, [r3, #0]
 80251e8:	3301      	adds	r3, #1
 80251ea:	4a14      	ldr	r2, [pc, #80]	; (802523c <TestLamp+0xf4>)
 80251ec:	6013      	str	r3, [r2, #0]
				break;
 80251ee:	e00d      	b.n	802520c <TestLamp+0xc4>
			case 6:
				bColor = LAMP_BLUE_ON + LAMP_GREEN_ON;
 80251f0:	2306      	movs	r3, #6
 80251f2:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80251f4:	4b11      	ldr	r3, [pc, #68]	; (802523c <TestLamp+0xf4>)
 80251f6:	681b      	ldr	r3, [r3, #0]
 80251f8:	3301      	adds	r3, #1
 80251fa:	4a10      	ldr	r2, [pc, #64]	; (802523c <TestLamp+0xf4>)
 80251fc:	6013      	str	r3, [r2, #0]
				break;
 80251fe:	e005      	b.n	802520c <TestLamp+0xc4>
			case 7:
				bColor = LAMP_RED_ON + LAMP_BLUE_ON + LAMP_GREEN_ON;
 8025200:	2307      	movs	r3, #7
 8025202:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq = 1;
 8025204:	4b0d      	ldr	r3, [pc, #52]	; (802523c <TestLamp+0xf4>)
 8025206:	2201      	movs	r2, #1
 8025208:	601a      	str	r2, [r3, #0]
				break;
 802520a:	bf00      	nop
			}
		}
		ControlIndicatorLight_En(bColor);
 802520c:	79fb      	ldrb	r3, [r7, #7]
 802520e:	4618      	mov	r0, r3
 8025210:	f000 fa22 	bl	8025658 <ControlIndicatorLight_En>
		ControlIndicatorLight_Ex(bColor);
 8025214:	79fb      	ldrb	r3, [r7, #7]
 8025216:	4618      	mov	r0, r3
 8025218:	f000 fa4c 	bl	80256b4 <ControlIndicatorLight_Ex>
	}
	else if (TestOption.b.fTestLamp)
	{
		nLampOpSeq = 1;
	}
}
 802521c:	e009      	b.n	8025232 <TestLamp+0xea>
	else if (TestOption.b.fTestLamp)
 802521e:	4b08      	ldr	r3, [pc, #32]	; (8025240 <TestLamp+0xf8>)
 8025220:	681b      	ldr	r3, [r3, #0]
 8025222:	f343 0380 	sbfx	r3, r3, #2, #1
 8025226:	b25b      	sxtb	r3, r3
 8025228:	2b00      	cmp	r3, #0
 802522a:	d002      	beq.n	8025232 <TestLamp+0xea>
		nLampOpSeq = 1;
 802522c:	4b03      	ldr	r3, [pc, #12]	; (802523c <TestLamp+0xf4>)
 802522e:	2201      	movs	r2, #1
 8025230:	601a      	str	r2, [r3, #0]
}
 8025232:	bf00      	nop
 8025234:	3708      	adds	r7, #8
 8025236:	46bd      	mov	sp, r7
 8025238:	bd80      	pop	{r7, pc}
 802523a:	bf00      	nop
 802523c:	24000500 	.word	0x24000500
 8025240:	240004f0 	.word	0x240004f0

08025244 <TestDoor_P>:

void TestDoor_P(void)
{
 8025244:	b580      	push	{r7, lr}
 8025246:	b082      	sub	sp, #8
 8025248:	af00      	add	r7, sp, #0
	BYTE bDir = ENTRY_OPEN;
 802524a:	2300      	movs	r3, #0
 802524c:	71fb      	strb	r3, [r7, #7]

	if (nPDoorOpSeq)
 802524e:	4b2c      	ldr	r3, [pc, #176]	; (8025300 <TestDoor_P+0xbc>)
 8025250:	681b      	ldr	r3, [r3, #0]
 8025252:	2b00      	cmp	r3, #0
 8025254:	d043      	beq.n	80252de <TestDoor_P+0x9a>
	{
		if (!TestOption.b.fTestBarrier)
 8025256:	4b2b      	ldr	r3, [pc, #172]	; (8025304 <TestDoor_P+0xc0>)
 8025258:	681b      	ldr	r3, [r3, #0]
 802525a:	f343 1340 	sbfx	r3, r3, #5, #1
 802525e:	b25b      	sxtb	r3, r3
 8025260:	2b00      	cmp	r3, #0
 8025262:	d108      	bne.n	8025276 <TestDoor_P+0x32>
		{
			nPDoorOpSeq = 0;
 8025264:	4b26      	ldr	r3, [pc, #152]	; (8025300 <TestDoor_P+0xbc>)
 8025266:	2200      	movs	r2, #0
 8025268:	601a      	str	r2, [r3, #0]
			Brr_SetEmergency_P(TRUE);
 802526a:	2001      	movs	r0, #1
 802526c:	f000 fa50 	bl	8025710 <Brr_SetEmergency_P>
			bDir = ENTRY_OPEN;
 8025270:	2300      	movs	r3, #0
 8025272:	71fb      	strb	r3, [r7, #7]
 8025274:	e02e      	b.n	80252d4 <TestDoor_P+0x90>
		}
		else
		{
			switch (nPDoorOpSeq)
 8025276:	4b22      	ldr	r3, [pc, #136]	; (8025300 <TestDoor_P+0xbc>)
 8025278:	681b      	ldr	r3, [r3, #0]
 802527a:	3b01      	subs	r3, #1
 802527c:	2b03      	cmp	r3, #3
 802527e:	d829      	bhi.n	80252d4 <TestDoor_P+0x90>
 8025280:	a201      	add	r2, pc, #4	; (adr r2, 8025288 <TestDoor_P+0x44>)
 8025282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025286:	bf00      	nop
 8025288:	08025299 	.word	0x08025299
 802528c:	080252a9 	.word	0x080252a9
 8025290:	080252b9 	.word	0x080252b9
 8025294:	080252c9 	.word	0x080252c9
			{
			case 1:
				bDir = ENTRY_OPEN;
 8025298:	2300      	movs	r3, #0
 802529a:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 802529c:	4b18      	ldr	r3, [pc, #96]	; (8025300 <TestDoor_P+0xbc>)
 802529e:	681b      	ldr	r3, [r3, #0]
 80252a0:	3301      	adds	r3, #1
 80252a2:	4a17      	ldr	r2, [pc, #92]	; (8025300 <TestDoor_P+0xbc>)
 80252a4:	6013      	str	r3, [r2, #0]
				break;
 80252a6:	e015      	b.n	80252d4 <TestDoor_P+0x90>
			case 2:
				bDir = CLOSE;
 80252a8:	2301      	movs	r3, #1
 80252aa:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 80252ac:	4b14      	ldr	r3, [pc, #80]	; (8025300 <TestDoor_P+0xbc>)
 80252ae:	681b      	ldr	r3, [r3, #0]
 80252b0:	3301      	adds	r3, #1
 80252b2:	4a13      	ldr	r2, [pc, #76]	; (8025300 <TestDoor_P+0xbc>)
 80252b4:	6013      	str	r3, [r2, #0]
				break;
 80252b6:	e00d      	b.n	80252d4 <TestDoor_P+0x90>
			case 3:
				bDir = EXIT_OPEN;
 80252b8:	2302      	movs	r3, #2
 80252ba:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 80252bc:	4b10      	ldr	r3, [pc, #64]	; (8025300 <TestDoor_P+0xbc>)
 80252be:	681b      	ldr	r3, [r3, #0]
 80252c0:	3301      	adds	r3, #1
 80252c2:	4a0f      	ldr	r2, [pc, #60]	; (8025300 <TestDoor_P+0xbc>)
 80252c4:	6013      	str	r3, [r2, #0]
				break;
 80252c6:	e005      	b.n	80252d4 <TestDoor_P+0x90>
			case 4:
				bDir = CLOSE;
 80252c8:	2301      	movs	r3, #1
 80252ca:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq = 1;
 80252cc:	4b0c      	ldr	r3, [pc, #48]	; (8025300 <TestDoor_P+0xbc>)
 80252ce:	2201      	movs	r2, #1
 80252d0:	601a      	str	r2, [r3, #0]
				break;
 80252d2:	bf00      	nop
			}
		}
		Brr_ControlBarrier_P(bDir);
 80252d4:	79fb      	ldrb	r3, [r7, #7]
 80252d6:	4618      	mov	r0, r3
 80252d8:	f000 fac2 	bl	8025860 <Brr_ControlBarrier_P>
	else if (TestOption.b.fTestBarrier)
	{
		nPDoorOpSeq = 1;
		Brr_SetEmergency_P(FALSE);
	}
}
 80252dc:	e00c      	b.n	80252f8 <TestDoor_P+0xb4>
	else if (TestOption.b.fTestBarrier)
 80252de:	4b09      	ldr	r3, [pc, #36]	; (8025304 <TestDoor_P+0xc0>)
 80252e0:	681b      	ldr	r3, [r3, #0]
 80252e2:	f343 1340 	sbfx	r3, r3, #5, #1
 80252e6:	b25b      	sxtb	r3, r3
 80252e8:	2b00      	cmp	r3, #0
 80252ea:	d005      	beq.n	80252f8 <TestDoor_P+0xb4>
		nPDoorOpSeq = 1;
 80252ec:	4b04      	ldr	r3, [pc, #16]	; (8025300 <TestDoor_P+0xbc>)
 80252ee:	2201      	movs	r2, #1
 80252f0:	601a      	str	r2, [r3, #0]
		Brr_SetEmergency_P(FALSE);
 80252f2:	2000      	movs	r0, #0
 80252f4:	f000 fa0c 	bl	8025710 <Brr_SetEmergency_P>
}
 80252f8:	bf00      	nop
 80252fa:	3708      	adds	r7, #8
 80252fc:	46bd      	mov	sp, r7
 80252fe:	bd80      	pop	{r7, pc}
 8025300:	240004fc 	.word	0x240004fc
 8025304:	240004f0 	.word	0x240004f0

08025308 <TestDoor_S>:

void TestDoor_S(void)
{
 8025308:	b580      	push	{r7, lr}
 802530a:	b082      	sub	sp, #8
 802530c:	af00      	add	r7, sp, #0
	BYTE bDir = ENTRY_OPEN;
 802530e:	2300      	movs	r3, #0
 8025310:	71fb      	strb	r3, [r7, #7]

	if (nSDoorOpSeq)
 8025312:	4b2c      	ldr	r3, [pc, #176]	; (80253c4 <TestDoor_S+0xbc>)
 8025314:	681b      	ldr	r3, [r3, #0]
 8025316:	2b00      	cmp	r3, #0
 8025318:	d043      	beq.n	80253a2 <TestDoor_S+0x9a>
	{
		if (!TestOption.b.fTestBarrier)
 802531a:	4b2b      	ldr	r3, [pc, #172]	; (80253c8 <TestDoor_S+0xc0>)
 802531c:	681b      	ldr	r3, [r3, #0]
 802531e:	f343 1340 	sbfx	r3, r3, #5, #1
 8025322:	b25b      	sxtb	r3, r3
 8025324:	2b00      	cmp	r3, #0
 8025326:	d108      	bne.n	802533a <TestDoor_S+0x32>
		{
			nSDoorOpSeq = 0;
 8025328:	4b26      	ldr	r3, [pc, #152]	; (80253c4 <TestDoor_S+0xbc>)
 802532a:	2200      	movs	r2, #0
 802532c:	601a      	str	r2, [r3, #0]
			Brr_SetEmergency_S(TRUE);
 802532e:	2001      	movs	r0, #1
 8025330:	f000 fa18 	bl	8025764 <Brr_SetEmergency_S>
			bDir = ENTRY_OPEN;
 8025334:	2300      	movs	r3, #0
 8025336:	71fb      	strb	r3, [r7, #7]
 8025338:	e02e      	b.n	8025398 <TestDoor_S+0x90>
		}
		else
		{
			switch (nSDoorOpSeq)
 802533a:	4b22      	ldr	r3, [pc, #136]	; (80253c4 <TestDoor_S+0xbc>)
 802533c:	681b      	ldr	r3, [r3, #0]
 802533e:	3b01      	subs	r3, #1
 8025340:	2b03      	cmp	r3, #3
 8025342:	d829      	bhi.n	8025398 <TestDoor_S+0x90>
 8025344:	a201      	add	r2, pc, #4	; (adr r2, 802534c <TestDoor_S+0x44>)
 8025346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802534a:	bf00      	nop
 802534c:	0802535d 	.word	0x0802535d
 8025350:	0802536d 	.word	0x0802536d
 8025354:	0802537d 	.word	0x0802537d
 8025358:	0802538d 	.word	0x0802538d
			{
			case 1:
				bDir = ENTRY_OPEN;
 802535c:	2300      	movs	r3, #0
 802535e:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 8025360:	4b18      	ldr	r3, [pc, #96]	; (80253c4 <TestDoor_S+0xbc>)
 8025362:	681b      	ldr	r3, [r3, #0]
 8025364:	3301      	adds	r3, #1
 8025366:	4a17      	ldr	r2, [pc, #92]	; (80253c4 <TestDoor_S+0xbc>)
 8025368:	6013      	str	r3, [r2, #0]
				break;
 802536a:	e015      	b.n	8025398 <TestDoor_S+0x90>
			case 2:
				bDir = CLOSE;
 802536c:	2301      	movs	r3, #1
 802536e:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 8025370:	4b14      	ldr	r3, [pc, #80]	; (80253c4 <TestDoor_S+0xbc>)
 8025372:	681b      	ldr	r3, [r3, #0]
 8025374:	3301      	adds	r3, #1
 8025376:	4a13      	ldr	r2, [pc, #76]	; (80253c4 <TestDoor_S+0xbc>)
 8025378:	6013      	str	r3, [r2, #0]
				break;
 802537a:	e00d      	b.n	8025398 <TestDoor_S+0x90>
			case 3:
				bDir = EXIT_OPEN;
 802537c:	2302      	movs	r3, #2
 802537e:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 8025380:	4b10      	ldr	r3, [pc, #64]	; (80253c4 <TestDoor_S+0xbc>)
 8025382:	681b      	ldr	r3, [r3, #0]
 8025384:	3301      	adds	r3, #1
 8025386:	4a0f      	ldr	r2, [pc, #60]	; (80253c4 <TestDoor_S+0xbc>)
 8025388:	6013      	str	r3, [r2, #0]
				break;
 802538a:	e005      	b.n	8025398 <TestDoor_S+0x90>
			case 4:
				bDir = CLOSE;
 802538c:	2301      	movs	r3, #1
 802538e:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq = 1;
 8025390:	4b0c      	ldr	r3, [pc, #48]	; (80253c4 <TestDoor_S+0xbc>)
 8025392:	2201      	movs	r2, #1
 8025394:	601a      	str	r2, [r3, #0]
				break;
 8025396:	bf00      	nop
			}
		}
		Brr_ControlBarrier_S(bDir);
 8025398:	79fb      	ldrb	r3, [r7, #7]
 802539a:	4618      	mov	r0, r3
 802539c:	f000 faae 	bl	80258fc <Brr_ControlBarrier_S>
	else if (TestOption.b.fTestBarrier)
	{
		nSDoorOpSeq = 1;
		Brr_SetEmergency_S(FALSE);
	}
}
 80253a0:	e00c      	b.n	80253bc <TestDoor_S+0xb4>
	else if (TestOption.b.fTestBarrier)
 80253a2:	4b09      	ldr	r3, [pc, #36]	; (80253c8 <TestDoor_S+0xc0>)
 80253a4:	681b      	ldr	r3, [r3, #0]
 80253a6:	f343 1340 	sbfx	r3, r3, #5, #1
 80253aa:	b25b      	sxtb	r3, r3
 80253ac:	2b00      	cmp	r3, #0
 80253ae:	d005      	beq.n	80253bc <TestDoor_S+0xb4>
		nSDoorOpSeq = 1;
 80253b0:	4b04      	ldr	r3, [pc, #16]	; (80253c4 <TestDoor_S+0xbc>)
 80253b2:	2201      	movs	r2, #1
 80253b4:	601a      	str	r2, [r3, #0]
		Brr_SetEmergency_S(FALSE);
 80253b6:	2000      	movs	r0, #0
 80253b8:	f000 f9d4 	bl	8025764 <Brr_SetEmergency_S>
}
 80253bc:	bf00      	nop
 80253be:	3708      	adds	r7, #8
 80253c0:	46bd      	mov	sp, r7
 80253c2:	bd80      	pop	{r7, pc}
 80253c4:	240004f8 	.word	0x240004f8
 80253c8:	240004f0 	.word	0x240004f0

080253cc <TestBuzzer>:

void TestBuzzer(void)
{
 80253cc:	b580      	push	{r7, lr}
 80253ce:	af00      	add	r7, sp, #0


	if (nBuzzOpSeq)
 80253d0:	4b1b      	ldr	r3, [pc, #108]	; (8025440 <TestBuzzer+0x74>)
 80253d2:	681b      	ldr	r3, [r3, #0]
 80253d4:	2b00      	cmp	r3, #0
 80253d6:	d027      	beq.n	8025428 <TestBuzzer+0x5c>
	{
		if (!TestOption.b.fTestBuzzer)
 80253d8:	4b1a      	ldr	r3, [pc, #104]	; (8025444 <TestBuzzer+0x78>)
 80253da:	681b      	ldr	r3, [r3, #0]
 80253dc:	f343 1380 	sbfx	r3, r3, #6, #1
 80253e0:	b25b      	sxtb	r3, r3
 80253e2:	2b00      	cmp	r3, #0
 80253e4:	d103      	bne.n	80253ee <TestBuzzer+0x22>
		{
			nBuzzOpSeq = 0;
 80253e6:	4b16      	ldr	r3, [pc, #88]	; (8025440 <TestBuzzer+0x74>)
 80253e8:	2200      	movs	r2, #0
 80253ea:	601a      	str	r2, [r3, #0]
 80253ec:	e012      	b.n	8025414 <TestBuzzer+0x48>
		}
		else
		{
			switch (nBuzzOpSeq)
 80253ee:	4b14      	ldr	r3, [pc, #80]	; (8025440 <TestBuzzer+0x74>)
 80253f0:	681b      	ldr	r3, [r3, #0]
 80253f2:	2b01      	cmp	r3, #1
 80253f4:	d002      	beq.n	80253fc <TestBuzzer+0x30>
 80253f6:	2b02      	cmp	r3, #2
 80253f8:	d006      	beq.n	8025408 <TestBuzzer+0x3c>
 80253fa:	e00b      	b.n	8025414 <TestBuzzer+0x48>
			{
			case 1:
				nBuzzOpSeq++;
 80253fc:	4b10      	ldr	r3, [pc, #64]	; (8025440 <TestBuzzer+0x74>)
 80253fe:	681b      	ldr	r3, [r3, #0]
 8025400:	3301      	adds	r3, #1
 8025402:	4a0f      	ldr	r2, [pc, #60]	; (8025440 <TestBuzzer+0x74>)
 8025404:	6013      	str	r3, [r2, #0]
				break;
 8025406:	e005      	b.n	8025414 <TestBuzzer+0x48>
			case 2:
				nBuzzOpSeq--;
 8025408:	4b0d      	ldr	r3, [pc, #52]	; (8025440 <TestBuzzer+0x74>)
 802540a:	681b      	ldr	r3, [r3, #0]
 802540c:	3b01      	subs	r3, #1
 802540e:	4a0c      	ldr	r2, [pc, #48]	; (8025440 <TestBuzzer+0x74>)
 8025410:	6013      	str	r3, [r2, #0]
				break;
 8025412:	bf00      	nop
			}
		}

		if (nBuzzOpSeq == 1)
 8025414:	4b0a      	ldr	r3, [pc, #40]	; (8025440 <TestBuzzer+0x74>)
 8025416:	681b      	ldr	r3, [r3, #0]
 8025418:	2b01      	cmp	r3, #1
 802541a:	d102      	bne.n	8025422 <TestBuzzer+0x56>
		{
			BuzzerOn();
 802541c:	f000 f844 	bl	80254a8 <BuzzerOn>
	}
	else if (TestOption.b.fTestBuzzer)
	{
		nBuzzOpSeq = 1;
	}
}
 8025420:	e00c      	b.n	802543c <TestBuzzer+0x70>
			BuzzerOff();
 8025422:	f000 f84d 	bl	80254c0 <BuzzerOff>
}
 8025426:	e009      	b.n	802543c <TestBuzzer+0x70>
	else if (TestOption.b.fTestBuzzer)
 8025428:	4b06      	ldr	r3, [pc, #24]	; (8025444 <TestBuzzer+0x78>)
 802542a:	681b      	ldr	r3, [r3, #0]
 802542c:	f343 1380 	sbfx	r3, r3, #6, #1
 8025430:	b25b      	sxtb	r3, r3
 8025432:	2b00      	cmp	r3, #0
 8025434:	d002      	beq.n	802543c <TestBuzzer+0x70>
		nBuzzOpSeq = 1;
 8025436:	4b02      	ldr	r3, [pc, #8]	; (8025440 <TestBuzzer+0x74>)
 8025438:	2201      	movs	r2, #1
 802543a:	601a      	str	r2, [r3, #0]
}
 802543c:	bf00      	nop
 802543e:	bd80      	pop	{r7, pc}
 8025440:	240004f4 	.word	0x240004f4
 8025444:	240004f0 	.word	0x240004f0

08025448 <TestAging>:
	nOverOpSeq 	= 0;
}


void TestAging(void)
{
 8025448:	b580      	push	{r7, lr}
 802544a:	af00      	add	r7, sp, #0
	static DWORD loop = 0;	// 1 loop = 10ms

	// Every 2 seconds, the test function will run.
	if (!loop)
 802544c:	4b13      	ldr	r3, [pc, #76]	; (802549c <TestAging+0x54>)
 802544e:	681b      	ldr	r3, [r3, #0]
 8025450:	2b00      	cmp	r3, #0
 8025452:	d112      	bne.n	802547a <TestAging+0x32>
	{
		TestOption.bVal = ReadDipSwitch();
 8025454:	4b12      	ldr	r3, [pc, #72]	; (80254a0 <TestAging+0x58>)
 8025456:	691b      	ldr	r3, [r3, #16]
 8025458:	b2db      	uxtb	r3, r3
 802545a:	43db      	mvns	r3, r3
 802545c:	b2da      	uxtb	r2, r3
 802545e:	4b11      	ldr	r3, [pc, #68]	; (80254a4 <TestAging+0x5c>)
 8025460:	701a      	strb	r2, [r3, #0]
		TestDirection();
 8025462:	f7ff fdcd 	bl	8025000 <TestDirection>
		TestOverHeadDirection();
 8025466:	f7ff fe1d 	bl	80250a4 <TestOverHeadDirection>
		TestLamp();
 802546a:	f7ff fe6d 	bl	8025148 <TestLamp>
		TestDoor_P();
 802546e:	f7ff fee9 	bl	8025244 <TestDoor_P>
		TestDoor_S();
 8025472:	f7ff ff49 	bl	8025308 <TestDoor_S>
		TestBuzzer();
 8025476:	f7ff ffa9 	bl	80253cc <TestBuzzer>
	}
	
	loop++;
 802547a:	4b08      	ldr	r3, [pc, #32]	; (802549c <TestAging+0x54>)
 802547c:	681b      	ldr	r3, [r3, #0]
 802547e:	3301      	adds	r3, #1
 8025480:	4a06      	ldr	r2, [pc, #24]	; (802549c <TestAging+0x54>)
 8025482:	6013      	str	r3, [r2, #0]
	if (loop >= 3000)
 8025484:	4b05      	ldr	r3, [pc, #20]	; (802549c <TestAging+0x54>)
 8025486:	681b      	ldr	r3, [r3, #0]
 8025488:	f640 32b7 	movw	r2, #2999	; 0xbb7
 802548c:	4293      	cmp	r3, r2
 802548e:	d902      	bls.n	8025496 <TestAging+0x4e>
		loop = 0;
 8025490:	4b02      	ldr	r3, [pc, #8]	; (802549c <TestAging+0x54>)
 8025492:	2200      	movs	r2, #0
 8025494:	601a      	str	r2, [r3, #0]
}
 8025496:	bf00      	nop
 8025498:	bd80      	pop	{r7, pc}
 802549a:	bf00      	nop
 802549c:	2400050c 	.word	0x2400050c
 80254a0:	58020400 	.word	0x58020400
 80254a4:	240004f0 	.word	0x240004f0

080254a8 <BuzzerOn>:
uint8_t Add_100_Value = 0;
uint8_t Add_200_Value = 0;
uint8_t Add_400_Value = 0;

void BuzzerOn(void)
{
 80254a8:	b580      	push	{r7, lr}
 80254aa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(BUZZ_CON_GPIO_Port,BUZZ_CON_Pin,GPIO_PIN_SET);
 80254ac:	2201      	movs	r2, #1
 80254ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80254b2:	4802      	ldr	r0, [pc, #8]	; (80254bc <BuzzerOn+0x14>)
 80254b4:	f004 fd96 	bl	8029fe4 <HAL_GPIO_WritePin>
}
 80254b8:	bf00      	nop
 80254ba:	bd80      	pop	{r7, pc}
 80254bc:	58020000 	.word	0x58020000

080254c0 <BuzzerOff>:


void BuzzerOff(void)
{
 80254c0:	b580      	push	{r7, lr}
 80254c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZ_CON_GPIO_Port,BUZZ_CON_Pin,GPIO_PIN_RESET);
 80254c4:	2200      	movs	r2, #0
 80254c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80254ca:	4802      	ldr	r0, [pc, #8]	; (80254d4 <BuzzerOff+0x14>)
 80254cc:	f004 fd8a 	bl	8029fe4 <HAL_GPIO_WritePin>
}
 80254d0:	bf00      	nop
 80254d2:	bd80      	pop	{r7, pc}
 80254d4:	58020000 	.word	0x58020000

080254d8 <ControlStatusLED_En>:


void ControlStatusLED_En(UINT8 nValue)
{
 80254d8:	b480      	push	{r7}
 80254da:	b083      	sub	sp, #12
 80254dc:	af00      	add	r7, sp, #0
 80254de:	4603      	mov	r3, r0
 80254e0:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0xFC;			//1111 1100
 80254e2:	4b14      	ldr	r3, [pc, #80]	; (8025534 <ControlStatusLED_En+0x5c>)
 80254e4:	781b      	ldrb	r3, [r3, #0]
 80254e6:	f023 0303 	bic.w	r3, r3, #3
 80254ea:	b2da      	uxtb	r2, r3
 80254ec:	4b11      	ldr	r3, [pc, #68]	; (8025534 <ControlStatusLED_En+0x5c>)
 80254ee:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 80254f0:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80254f4:	4a0f      	ldr	r2, [pc, #60]	; (8025534 <ControlStatusLED_En+0x5c>)
 80254f6:	7812      	ldrb	r2, [r2, #0]
 80254f8:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= (UINT8)(nValue & 0x03);
 80254fa:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80254fe:	781b      	ldrb	r3, [r3, #0]
 8025500:	b2db      	uxtb	r3, r3
 8025502:	b25a      	sxtb	r2, r3
 8025504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025508:	f003 0303 	and.w	r3, r3, #3
 802550c:	b25b      	sxtb	r3, r3
 802550e:	4313      	orrs	r3, r2
 8025510:	b25a      	sxtb	r2, r3
 8025512:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025516:	b2d2      	uxtb	r2, r2
 8025518:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 802551a:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 802551e:	781b      	ldrb	r3, [r3, #0]
 8025520:	b2da      	uxtb	r2, r3
 8025522:	4b04      	ldr	r3, [pc, #16]	; (8025534 <ControlStatusLED_En+0x5c>)
 8025524:	701a      	strb	r2, [r3, #0]

}
 8025526:	bf00      	nop
 8025528:	370c      	adds	r7, #12
 802552a:	46bd      	mov	sp, r7
 802552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025530:	4770      	bx	lr
 8025532:	bf00      	nop
 8025534:	24000510 	.word	0x24000510

08025538 <ControlStatusLED_Ex>:

void ControlStatusLED_Ex(UINT8 nValue)
{
 8025538:	b480      	push	{r7}
 802553a:	b083      	sub	sp, #12
 802553c:	af00      	add	r7, sp, #0
 802553e:	4603      	mov	r3, r0
 8025540:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0xCF;				//1100 1111
 8025542:	4b14      	ldr	r3, [pc, #80]	; (8025594 <ControlStatusLED_Ex+0x5c>)
 8025544:	781b      	ldrb	r3, [r3, #0]
 8025546:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 802554a:	b2da      	uxtb	r2, r3
 802554c:	4b11      	ldr	r3, [pc, #68]	; (8025594 <ControlStatusLED_Ex+0x5c>)
 802554e:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8025550:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025554:	4a0f      	ldr	r2, [pc, #60]	; (8025594 <ControlStatusLED_Ex+0x5c>)
 8025556:	7812      	ldrb	r2, [r2, #0]
 8025558:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= (UINT8)((nValue << 4) & 0x30);
 802555a:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 802555e:	781b      	ldrb	r3, [r3, #0]
 8025560:	b2db      	uxtb	r3, r3
 8025562:	b25a      	sxtb	r2, r3
 8025564:	79fb      	ldrb	r3, [r7, #7]
 8025566:	011b      	lsls	r3, r3, #4
 8025568:	b25b      	sxtb	r3, r3
 802556a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 802556e:	b25b      	sxtb	r3, r3
 8025570:	4313      	orrs	r3, r2
 8025572:	b25a      	sxtb	r2, r3
 8025574:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025578:	b2d2      	uxtb	r2, r2
 802557a:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 802557c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025580:	781b      	ldrb	r3, [r3, #0]
 8025582:	b2da      	uxtb	r2, r3
 8025584:	4b03      	ldr	r3, [pc, #12]	; (8025594 <ControlStatusLED_Ex+0x5c>)
 8025586:	701a      	strb	r2, [r3, #0]

}
 8025588:	bf00      	nop
 802558a:	370c      	adds	r7, #12
 802558c:	46bd      	mov	sp, r7
 802558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025592:	4770      	bx	lr
 8025594:	24000510 	.word	0x24000510

08025598 <ControlOverHeadDisplay_En>:

void ControlOverHeadDisplay_En(UINT8 nValue)
{
 8025598:	b480      	push	{r7}
 802559a:	b083      	sub	sp, #12
 802559c:	af00      	add	r7, sp, #0
 802559e:	4603      	mov	r3, r0
 80255a0:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0xF3;	// 1001 1111
 80255a2:	4b15      	ldr	r3, [pc, #84]	; (80255f8 <ControlOverHeadDisplay_En+0x60>)
 80255a4:	781b      	ldrb	r3, [r3, #0]
 80255a6:	f023 030c 	bic.w	r3, r3, #12
 80255aa:	b2da      	uxtb	r2, r3
 80255ac:	4b12      	ldr	r3, [pc, #72]	; (80255f8 <ControlOverHeadDisplay_En+0x60>)
 80255ae:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 80255b0:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80255b4:	4a10      	ldr	r2, [pc, #64]	; (80255f8 <ControlOverHeadDisplay_En+0x60>)
 80255b6:	7812      	ldrb	r2, [r2, #0]
 80255b8:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= ((UINT8) (nValue << 2) & 0x0C);
 80255ba:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80255be:	781b      	ldrb	r3, [r3, #0]
 80255c0:	b2db      	uxtb	r3, r3
 80255c2:	b25a      	sxtb	r2, r3
 80255c4:	79fb      	ldrb	r3, [r7, #7]
 80255c6:	009b      	lsls	r3, r3, #2
 80255c8:	b2db      	uxtb	r3, r3
 80255ca:	b25b      	sxtb	r3, r3
 80255cc:	f003 030c 	and.w	r3, r3, #12
 80255d0:	b25b      	sxtb	r3, r3
 80255d2:	4313      	orrs	r3, r2
 80255d4:	b25a      	sxtb	r2, r3
 80255d6:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80255da:	b2d2      	uxtb	r2, r2
 80255dc:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 80255de:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80255e2:	781b      	ldrb	r3, [r3, #0]
 80255e4:	b2da      	uxtb	r2, r3
 80255e6:	4b04      	ldr	r3, [pc, #16]	; (80255f8 <ControlOverHeadDisplay_En+0x60>)
 80255e8:	701a      	strb	r2, [r3, #0]

	
	// H743 Version
	// WRITE00_ADR |= ((UINT8) nValue << 2);
}
 80255ea:	bf00      	nop
 80255ec:	370c      	adds	r7, #12
 80255ee:	46bd      	mov	sp, r7
 80255f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255f4:	4770      	bx	lr
 80255f6:	bf00      	nop
 80255f8:	24000510 	.word	0x24000510

080255fc <ControlOverHeadDisplay_Ex>:

void ControlOverHeadDisplay_Ex(UINT8 nValue)
{
 80255fc:	b480      	push	{r7}
 80255fe:	b083      	sub	sp, #12
 8025600:	af00      	add	r7, sp, #0
 8025602:	4603      	mov	r3, r0
 8025604:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0x3F;
 8025606:	4b13      	ldr	r3, [pc, #76]	; (8025654 <ControlOverHeadDisplay_Ex+0x58>)
 8025608:	781b      	ldrb	r3, [r3, #0]
 802560a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802560e:	b2da      	uxtb	r2, r3
 8025610:	4b10      	ldr	r3, [pc, #64]	; (8025654 <ControlOverHeadDisplay_Ex+0x58>)
 8025612:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8025614:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025618:	4a0e      	ldr	r2, [pc, #56]	; (8025654 <ControlOverHeadDisplay_Ex+0x58>)
 802561a:	7812      	ldrb	r2, [r2, #0]
 802561c:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= ((UINT8) (nValue << 6) & 0xC0);
 802561e:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025622:	781b      	ldrb	r3, [r3, #0]
 8025624:	b2db      	uxtb	r3, r3
 8025626:	b25a      	sxtb	r2, r3
 8025628:	79fb      	ldrb	r3, [r7, #7]
 802562a:	019b      	lsls	r3, r3, #6
 802562c:	b2db      	uxtb	r3, r3
 802562e:	b25b      	sxtb	r3, r3
 8025630:	4313      	orrs	r3, r2
 8025632:	b25a      	sxtb	r2, r3
 8025634:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025638:	b2d2      	uxtb	r2, r2
 802563a:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 802563c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025640:	781b      	ldrb	r3, [r3, #0]
 8025642:	b2da      	uxtb	r2, r3
 8025644:	4b03      	ldr	r3, [pc, #12]	; (8025654 <ControlOverHeadDisplay_Ex+0x58>)
 8025646:	701a      	strb	r2, [r3, #0]

	// H743 Version
	// WRITE00_ADR |= ((UINT8) nValue << 6);
}
 8025648:	bf00      	nop
 802564a:	370c      	adds	r7, #12
 802564c:	46bd      	mov	sp, r7
 802564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025652:	4770      	bx	lr
 8025654:	24000510 	.word	0x24000510

08025658 <ControlIndicatorLight_En>:


void ControlIndicatorLight_En(UINT8 nValue)
{
 8025658:	b480      	push	{r7}
 802565a:	b083      	sub	sp, #12
 802565c:	af00      	add	r7, sp, #0
 802565e:	4603      	mov	r3, r0
 8025660:	71fb      	strb	r3, [r7, #7]

	Add_100_Value &= 0xF8;
 8025662:	4b12      	ldr	r3, [pc, #72]	; (80256ac <ControlIndicatorLight_En+0x54>)
 8025664:	781b      	ldrb	r3, [r3, #0]
 8025666:	f023 0307 	bic.w	r3, r3, #7
 802566a:	b2da      	uxtb	r2, r3
 802566c:	4b0f      	ldr	r3, [pc, #60]	; (80256ac <ControlIndicatorLight_En+0x54>)
 802566e:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR = Add_100_Value;
 8025670:	4b0f      	ldr	r3, [pc, #60]	; (80256b0 <ControlIndicatorLight_En+0x58>)
 8025672:	4a0e      	ldr	r2, [pc, #56]	; (80256ac <ControlIndicatorLight_En+0x54>)
 8025674:	7812      	ldrb	r2, [r2, #0]
 8025676:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR |= (UINT8)(nValue & 0x07);
 8025678:	4b0d      	ldr	r3, [pc, #52]	; (80256b0 <ControlIndicatorLight_En+0x58>)
 802567a:	781b      	ldrb	r3, [r3, #0]
 802567c:	b2db      	uxtb	r3, r3
 802567e:	b25a      	sxtb	r2, r3
 8025680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025684:	f003 0307 	and.w	r3, r3, #7
 8025688:	b25b      	sxtb	r3, r3
 802568a:	4313      	orrs	r3, r2
 802568c:	b25a      	sxtb	r2, r3
 802568e:	4b08      	ldr	r3, [pc, #32]	; (80256b0 <ControlIndicatorLight_En+0x58>)
 8025690:	b2d2      	uxtb	r2, r2
 8025692:	701a      	strb	r2, [r3, #0]

	Add_100_Value = wnS_LED_CS_ADDR;
 8025694:	4b06      	ldr	r3, [pc, #24]	; (80256b0 <ControlIndicatorLight_En+0x58>)
 8025696:	781b      	ldrb	r3, [r3, #0]
 8025698:	b2da      	uxtb	r2, r3
 802569a:	4b04      	ldr	r3, [pc, #16]	; (80256ac <ControlIndicatorLight_En+0x54>)
 802569c:	701a      	strb	r2, [r3, #0]

}
 802569e:	bf00      	nop
 80256a0:	370c      	adds	r7, #12
 80256a2:	46bd      	mov	sp, r7
 80256a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256a8:	4770      	bx	lr
 80256aa:	bf00      	nop
 80256ac:	24000511 	.word	0x24000511
 80256b0:	64000100 	.word	0x64000100

080256b4 <ControlIndicatorLight_Ex>:

void ControlIndicatorLight_Ex(UINT8 nValue)
{
 80256b4:	b480      	push	{r7}
 80256b6:	b083      	sub	sp, #12
 80256b8:	af00      	add	r7, sp, #0
 80256ba:	4603      	mov	r3, r0
 80256bc:	71fb      	strb	r3, [r7, #7]

	Add_100_Value &= 0x8F;
 80256be:	4b12      	ldr	r3, [pc, #72]	; (8025708 <ControlIndicatorLight_Ex+0x54>)
 80256c0:	781b      	ldrb	r3, [r3, #0]
 80256c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80256c6:	b2da      	uxtb	r2, r3
 80256c8:	4b0f      	ldr	r3, [pc, #60]	; (8025708 <ControlIndicatorLight_Ex+0x54>)
 80256ca:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR = Add_100_Value;
 80256cc:	4b0f      	ldr	r3, [pc, #60]	; (802570c <ControlIndicatorLight_Ex+0x58>)
 80256ce:	4a0e      	ldr	r2, [pc, #56]	; (8025708 <ControlIndicatorLight_Ex+0x54>)
 80256d0:	7812      	ldrb	r2, [r2, #0]
 80256d2:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR |= (UINT8)((nValue<<4) & 0x70);
 80256d4:	4b0d      	ldr	r3, [pc, #52]	; (802570c <ControlIndicatorLight_Ex+0x58>)
 80256d6:	781b      	ldrb	r3, [r3, #0]
 80256d8:	b2db      	uxtb	r3, r3
 80256da:	b25a      	sxtb	r2, r3
 80256dc:	79fb      	ldrb	r3, [r7, #7]
 80256de:	011b      	lsls	r3, r3, #4
 80256e0:	b25b      	sxtb	r3, r3
 80256e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80256e6:	b25b      	sxtb	r3, r3
 80256e8:	4313      	orrs	r3, r2
 80256ea:	b25a      	sxtb	r2, r3
 80256ec:	4b07      	ldr	r3, [pc, #28]	; (802570c <ControlIndicatorLight_Ex+0x58>)
 80256ee:	b2d2      	uxtb	r2, r2
 80256f0:	701a      	strb	r2, [r3, #0]

	Add_100_Value = wnS_LED_CS_ADDR;
 80256f2:	4b06      	ldr	r3, [pc, #24]	; (802570c <ControlIndicatorLight_Ex+0x58>)
 80256f4:	781b      	ldrb	r3, [r3, #0]
 80256f6:	b2da      	uxtb	r2, r3
 80256f8:	4b03      	ldr	r3, [pc, #12]	; (8025708 <ControlIndicatorLight_Ex+0x54>)
 80256fa:	701a      	strb	r2, [r3, #0]

}
 80256fc:	bf00      	nop
 80256fe:	370c      	adds	r7, #12
 8025700:	46bd      	mov	sp, r7
 8025702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025706:	4770      	bx	lr
 8025708:	24000511 	.word	0x24000511
 802570c:	64000100 	.word	0x64000100

08025710 <Brr_SetEmergency_P>:


void Brr_SetEmergency_P(bool isActive)
{
 8025710:	b480      	push	{r7}
 8025712:	b083      	sub	sp, #12
 8025714:	af00      	add	r7, sp, #0
 8025716:	4603      	mov	r3, r0
 8025718:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 802571a:	4b10      	ldr	r3, [pc, #64]	; (802575c <Brr_SetEmergency_P+0x4c>)
 802571c:	781a      	ldrb	r2, [r3, #0]
 802571e:	4b0f      	ldr	r3, [pc, #60]	; (802575c <Brr_SetEmergency_P+0x4c>)
 8025720:	701a      	strb	r2, [r3, #0]

	switch(isActive)
 8025722:	79fb      	ldrb	r3, [r7, #7]
 8025724:	2b01      	cmp	r3, #1
 8025726:	d107      	bne.n	8025738 <Brr_SetEmergency_P+0x28>
	{
	case TRUE:
		Add_200_Value |= ((UINT8) ON << 1);
 8025728:	4b0c      	ldr	r3, [pc, #48]	; (802575c <Brr_SetEmergency_P+0x4c>)
 802572a:	781b      	ldrb	r3, [r3, #0]
 802572c:	f043 0302 	orr.w	r3, r3, #2
 8025730:	b2da      	uxtb	r2, r3
 8025732:	4b0a      	ldr	r3, [pc, #40]	; (802575c <Brr_SetEmergency_P+0x4c>)
 8025734:	701a      	strb	r2, [r3, #0]
		break;
 8025736:	e007      	b.n	8025748 <Brr_SetEmergency_P+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 1) & 0xFF));
 8025738:	4b08      	ldr	r3, [pc, #32]	; (802575c <Brr_SetEmergency_P+0x4c>)
 802573a:	781b      	ldrb	r3, [r3, #0]
 802573c:	f023 0302 	bic.w	r3, r3, #2
 8025740:	b2da      	uxtb	r2, r3
 8025742:	4b06      	ldr	r3, [pc, #24]	; (802575c <Brr_SetEmergency_P+0x4c>)
 8025744:	701a      	strb	r2, [r3, #0]
		break;
 8025746:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8025748:	4b05      	ldr	r3, [pc, #20]	; (8025760 <Brr_SetEmergency_P+0x50>)
 802574a:	4a04      	ldr	r2, [pc, #16]	; (802575c <Brr_SetEmergency_P+0x4c>)
 802574c:	7812      	ldrb	r2, [r2, #0]
 802574e:	701a      	strb	r2, [r3, #0]
}
 8025750:	bf00      	nop
 8025752:	370c      	adds	r7, #12
 8025754:	46bd      	mov	sp, r7
 8025756:	f85d 7b04 	ldr.w	r7, [sp], #4
 802575a:	4770      	bx	lr
 802575c:	24000512 	.word	0x24000512
 8025760:	64000200 	.word	0x64000200

08025764 <Brr_SetEmergency_S>:


void Brr_SetEmergency_S(bool isActive)
{
 8025764:	b480      	push	{r7}
 8025766:	b083      	sub	sp, #12
 8025768:	af00      	add	r7, sp, #0
 802576a:	4603      	mov	r3, r0
 802576c:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 802576e:	4b10      	ldr	r3, [pc, #64]	; (80257b0 <Brr_SetEmergency_S+0x4c>)
 8025770:	781a      	ldrb	r2, [r3, #0]
 8025772:	4b0f      	ldr	r3, [pc, #60]	; (80257b0 <Brr_SetEmergency_S+0x4c>)
 8025774:	701a      	strb	r2, [r3, #0]
	switch(isActive)
 8025776:	79fb      	ldrb	r3, [r7, #7]
 8025778:	2b01      	cmp	r3, #1
 802577a:	d107      	bne.n	802578c <Brr_SetEmergency_S+0x28>
	{
	case TRUE:
		Add_200_Value  |= ((UINT8) ON << 5);
 802577c:	4b0c      	ldr	r3, [pc, #48]	; (80257b0 <Brr_SetEmergency_S+0x4c>)
 802577e:	781b      	ldrb	r3, [r3, #0]
 8025780:	f043 0320 	orr.w	r3, r3, #32
 8025784:	b2da      	uxtb	r2, r3
 8025786:	4b0a      	ldr	r3, [pc, #40]	; (80257b0 <Brr_SetEmergency_S+0x4c>)
 8025788:	701a      	strb	r2, [r3, #0]
		break;
 802578a:	e007      	b.n	802579c <Brr_SetEmergency_S+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 5) & 0xFF));
 802578c:	4b08      	ldr	r3, [pc, #32]	; (80257b0 <Brr_SetEmergency_S+0x4c>)
 802578e:	781b      	ldrb	r3, [r3, #0]
 8025790:	f023 0320 	bic.w	r3, r3, #32
 8025794:	b2da      	uxtb	r2, r3
 8025796:	4b06      	ldr	r3, [pc, #24]	; (80257b0 <Brr_SetEmergency_S+0x4c>)
 8025798:	701a      	strb	r2, [r3, #0]
		break;
 802579a:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 802579c:	4b05      	ldr	r3, [pc, #20]	; (80257b4 <Brr_SetEmergency_S+0x50>)
 802579e:	4a04      	ldr	r2, [pc, #16]	; (80257b0 <Brr_SetEmergency_S+0x4c>)
 80257a0:	7812      	ldrb	r2, [r2, #0]
 80257a2:	701a      	strb	r2, [r3, #0]
}
 80257a4:	bf00      	nop
 80257a6:	370c      	adds	r7, #12
 80257a8:	46bd      	mov	sp, r7
 80257aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257ae:	4770      	bx	lr
 80257b0:	24000512 	.word	0x24000512
 80257b4:	64000200 	.word	0x64000200

080257b8 <Brr_SetBreak_P>:



void Brr_SetBreak_P(bool isActive)
{
 80257b8:	b480      	push	{r7}
 80257ba:	b083      	sub	sp, #12
 80257bc:	af00      	add	r7, sp, #0
 80257be:	4603      	mov	r3, r0
 80257c0:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 80257c2:	4b10      	ldr	r3, [pc, #64]	; (8025804 <Brr_SetBreak_P+0x4c>)
 80257c4:	781a      	ldrb	r2, [r3, #0]
 80257c6:	4b0f      	ldr	r3, [pc, #60]	; (8025804 <Brr_SetBreak_P+0x4c>)
 80257c8:	701a      	strb	r2, [r3, #0]

	switch(isActive)
 80257ca:	79fb      	ldrb	r3, [r7, #7]
 80257cc:	2b01      	cmp	r3, #1
 80257ce:	d107      	bne.n	80257e0 <Brr_SetBreak_P+0x28>
	{
	case TRUE:
		Add_200_Value |= ((UINT8) ON << 3);
 80257d0:	4b0c      	ldr	r3, [pc, #48]	; (8025804 <Brr_SetBreak_P+0x4c>)
 80257d2:	781b      	ldrb	r3, [r3, #0]
 80257d4:	f043 0308 	orr.w	r3, r3, #8
 80257d8:	b2da      	uxtb	r2, r3
 80257da:	4b0a      	ldr	r3, [pc, #40]	; (8025804 <Brr_SetBreak_P+0x4c>)
 80257dc:	701a      	strb	r2, [r3, #0]
		break;
 80257de:	e007      	b.n	80257f0 <Brr_SetBreak_P+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 3) & 0xFF));
 80257e0:	4b08      	ldr	r3, [pc, #32]	; (8025804 <Brr_SetBreak_P+0x4c>)
 80257e2:	781b      	ldrb	r3, [r3, #0]
 80257e4:	f023 0308 	bic.w	r3, r3, #8
 80257e8:	b2da      	uxtb	r2, r3
 80257ea:	4b06      	ldr	r3, [pc, #24]	; (8025804 <Brr_SetBreak_P+0x4c>)
 80257ec:	701a      	strb	r2, [r3, #0]
		break;
 80257ee:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 80257f0:	4b05      	ldr	r3, [pc, #20]	; (8025808 <Brr_SetBreak_P+0x50>)
 80257f2:	4a04      	ldr	r2, [pc, #16]	; (8025804 <Brr_SetBreak_P+0x4c>)
 80257f4:	7812      	ldrb	r2, [r2, #0]
 80257f6:	701a      	strb	r2, [r3, #0]
}
 80257f8:	bf00      	nop
 80257fa:	370c      	adds	r7, #12
 80257fc:	46bd      	mov	sp, r7
 80257fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025802:	4770      	bx	lr
 8025804:	24000512 	.word	0x24000512
 8025808:	64000200 	.word	0x64000200

0802580c <Brr_SetBreak_S>:


void Brr_SetBreak_S(bool isActive)
{
 802580c:	b480      	push	{r7}
 802580e:	b083      	sub	sp, #12
 8025810:	af00      	add	r7, sp, #0
 8025812:	4603      	mov	r3, r0
 8025814:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 8025816:	4b10      	ldr	r3, [pc, #64]	; (8025858 <Brr_SetBreak_S+0x4c>)
 8025818:	781a      	ldrb	r2, [r3, #0]
 802581a:	4b0f      	ldr	r3, [pc, #60]	; (8025858 <Brr_SetBreak_S+0x4c>)
 802581c:	701a      	strb	r2, [r3, #0]
	switch(isActive)
 802581e:	79fb      	ldrb	r3, [r7, #7]
 8025820:	2b01      	cmp	r3, #1
 8025822:	d107      	bne.n	8025834 <Brr_SetBreak_S+0x28>
	{
	case TRUE:
		Add_200_Value  |= ((UINT8) ON << 7);
 8025824:	4b0c      	ldr	r3, [pc, #48]	; (8025858 <Brr_SetBreak_S+0x4c>)
 8025826:	781b      	ldrb	r3, [r3, #0]
 8025828:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802582c:	b2da      	uxtb	r2, r3
 802582e:	4b0a      	ldr	r3, [pc, #40]	; (8025858 <Brr_SetBreak_S+0x4c>)
 8025830:	701a      	strb	r2, [r3, #0]
		break;
 8025832:	e007      	b.n	8025844 <Brr_SetBreak_S+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 7) & 0xFF));
 8025834:	4b08      	ldr	r3, [pc, #32]	; (8025858 <Brr_SetBreak_S+0x4c>)
 8025836:	781b      	ldrb	r3, [r3, #0]
 8025838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802583c:	b2da      	uxtb	r2, r3
 802583e:	4b06      	ldr	r3, [pc, #24]	; (8025858 <Brr_SetBreak_S+0x4c>)
 8025840:	701a      	strb	r2, [r3, #0]
		break;
 8025842:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8025844:	4b05      	ldr	r3, [pc, #20]	; (802585c <Brr_SetBreak_S+0x50>)
 8025846:	4a04      	ldr	r2, [pc, #16]	; (8025858 <Brr_SetBreak_S+0x4c>)
 8025848:	7812      	ldrb	r2, [r2, #0]
 802584a:	701a      	strb	r2, [r3, #0]
}
 802584c:	bf00      	nop
 802584e:	370c      	adds	r7, #12
 8025850:	46bd      	mov	sp, r7
 8025852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025856:	4770      	bx	lr
 8025858:	24000512 	.word	0x24000512
 802585c:	64000200 	.word	0x64000200

08025860 <Brr_ControlBarrier_P>:

void Brr_ControlBarrier_P(UINT8 nValue)
{
 8025860:	b480      	push	{r7}
 8025862:	b083      	sub	sp, #12
 8025864:	af00      	add	r7, sp, #0
 8025866:	4603      	mov	r3, r0
 8025868:	71fb      	strb	r3, [r7, #7]

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 802586a:	4b22      	ldr	r3, [pc, #136]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 802586c:	4a22      	ldr	r2, [pc, #136]	; (80258f8 <Brr_ControlBarrier_P+0x98>)
 802586e:	7812      	ldrb	r2, [r2, #0]
 8025870:	701a      	strb	r2, [r3, #0]

	switch(nValue)
 8025872:	79fb      	ldrb	r3, [r7, #7]
 8025874:	2b02      	cmp	r3, #2
 8025876:	d020      	beq.n	80258ba <Brr_ControlBarrier_P+0x5a>
 8025878:	2b02      	cmp	r3, #2
 802587a:	dc2f      	bgt.n	80258dc <Brr_ControlBarrier_P+0x7c>
 802587c:	2b00      	cmp	r3, #0
 802587e:	d002      	beq.n	8025886 <Brr_ControlBarrier_P+0x26>
 8025880:	2b01      	cmp	r3, #1
 8025882:	d011      	beq.n	80258a8 <Brr_ControlBarrier_P+0x48>
 8025884:	e02a      	b.n	80258dc <Brr_ControlBarrier_P+0x7c>
	{
	case ENTRY_OPEN :
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 2) & 0xFF));
 8025886:	4b1b      	ldr	r3, [pc, #108]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 8025888:	781b      	ldrb	r3, [r3, #0]
 802588a:	b2db      	uxtb	r3, r3
 802588c:	4a19      	ldr	r2, [pc, #100]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 802588e:	f023 0304 	bic.w	r3, r3, #4
 8025892:	b2db      	uxtb	r3, r3
 8025894:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 0) & 0xFF));
 8025896:	4b17      	ldr	r3, [pc, #92]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 8025898:	781b      	ldrb	r3, [r3, #0]
 802589a:	b2db      	uxtb	r3, r3
 802589c:	4a15      	ldr	r2, [pc, #84]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 802589e:	f023 0301 	bic.w	r3, r3, #1
 80258a2:	b2db      	uxtb	r3, r3
 80258a4:	7013      	strb	r3, [r2, #0]
		break;
 80258a6:	e019      	b.n	80258dc <Brr_ControlBarrier_P+0x7c>
	case CLOSE :
		wnBRR_OUT_CS_ADDR |= (UINT8)(1 << 0);
 80258a8:	4b12      	ldr	r3, [pc, #72]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 80258aa:	781b      	ldrb	r3, [r3, #0]
 80258ac:	b2db      	uxtb	r3, r3
 80258ae:	4a11      	ldr	r2, [pc, #68]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 80258b0:	f043 0301 	orr.w	r3, r3, #1
 80258b4:	b2db      	uxtb	r3, r3
 80258b6:	7013      	strb	r3, [r2, #0]
		break;
 80258b8:	e010      	b.n	80258dc <Brr_ControlBarrier_P+0x7c>
	case EXIT_OPEN :
		wnBRR_OUT_CS_ADDR |= (UINT8)(((1 << 2) & 0xFF));
 80258ba:	4b0e      	ldr	r3, [pc, #56]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 80258bc:	781b      	ldrb	r3, [r3, #0]
 80258be:	b2db      	uxtb	r3, r3
 80258c0:	4a0c      	ldr	r2, [pc, #48]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 80258c2:	f043 0304 	orr.w	r3, r3, #4
 80258c6:	b2db      	uxtb	r3, r3
 80258c8:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR  &= (UINT8)((~(1 << 0) & 0xFF));
 80258ca:	4b0a      	ldr	r3, [pc, #40]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 80258cc:	781b      	ldrb	r3, [r3, #0]
 80258ce:	b2db      	uxtb	r3, r3
 80258d0:	4a08      	ldr	r2, [pc, #32]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 80258d2:	f023 0301 	bic.w	r3, r3, #1
 80258d6:	b2db      	uxtb	r3, r3
 80258d8:	7013      	strb	r3, [r2, #0]
		break;
 80258da:	bf00      	nop
	}

	Add_200_Value = wnBRR_OUT_CS_ADDR;
 80258dc:	4b05      	ldr	r3, [pc, #20]	; (80258f4 <Brr_ControlBarrier_P+0x94>)
 80258de:	781b      	ldrb	r3, [r3, #0]
 80258e0:	b2da      	uxtb	r2, r3
 80258e2:	4b05      	ldr	r3, [pc, #20]	; (80258f8 <Brr_ControlBarrier_P+0x98>)
 80258e4:	701a      	strb	r2, [r3, #0]
}
 80258e6:	bf00      	nop
 80258e8:	370c      	adds	r7, #12
 80258ea:	46bd      	mov	sp, r7
 80258ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258f0:	4770      	bx	lr
 80258f2:	bf00      	nop
 80258f4:	64000200 	.word	0x64000200
 80258f8:	24000512 	.word	0x24000512

080258fc <Brr_ControlBarrier_S>:


void Brr_ControlBarrier_S(UINT8 nValue)
{
 80258fc:	b480      	push	{r7}
 80258fe:	b083      	sub	sp, #12
 8025900:	af00      	add	r7, sp, #0
 8025902:	4603      	mov	r3, r0
 8025904:	71fb      	strb	r3, [r7, #7]

    wnBRR_OUT_CS_ADDR = Add_200_Value;
 8025906:	4b22      	ldr	r3, [pc, #136]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 8025908:	4a22      	ldr	r2, [pc, #136]	; (8025994 <Brr_ControlBarrier_S+0x98>)
 802590a:	7812      	ldrb	r2, [r2, #0]
 802590c:	701a      	strb	r2, [r3, #0]

	switch(nValue)
 802590e:	79fb      	ldrb	r3, [r7, #7]
 8025910:	2b02      	cmp	r3, #2
 8025912:	d020      	beq.n	8025956 <Brr_ControlBarrier_S+0x5a>
 8025914:	2b02      	cmp	r3, #2
 8025916:	dc2f      	bgt.n	8025978 <Brr_ControlBarrier_S+0x7c>
 8025918:	2b00      	cmp	r3, #0
 802591a:	d002      	beq.n	8025922 <Brr_ControlBarrier_S+0x26>
 802591c:	2b01      	cmp	r3, #1
 802591e:	d011      	beq.n	8025944 <Brr_ControlBarrier_S+0x48>
 8025920:	e02a      	b.n	8025978 <Brr_ControlBarrier_S+0x7c>
	{
	case ENTRY_OPEN :
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 6) & 0xFF));
 8025922:	4b1b      	ldr	r3, [pc, #108]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 8025924:	781b      	ldrb	r3, [r3, #0]
 8025926:	b2db      	uxtb	r3, r3
 8025928:	4a19      	ldr	r2, [pc, #100]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 802592a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802592e:	b2db      	uxtb	r3, r3
 8025930:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 4) & 0xFF));
 8025932:	4b17      	ldr	r3, [pc, #92]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 8025934:	781b      	ldrb	r3, [r3, #0]
 8025936:	b2db      	uxtb	r3, r3
 8025938:	4a15      	ldr	r2, [pc, #84]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 802593a:	f023 0310 	bic.w	r3, r3, #16
 802593e:	b2db      	uxtb	r3, r3
 8025940:	7013      	strb	r3, [r2, #0]
		break;
 8025942:	e019      	b.n	8025978 <Brr_ControlBarrier_S+0x7c>
	case CLOSE :
		wnBRR_OUT_CS_ADDR |= (UINT8)(1 << 4);
 8025944:	4b12      	ldr	r3, [pc, #72]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 8025946:	781b      	ldrb	r3, [r3, #0]
 8025948:	b2db      	uxtb	r3, r3
 802594a:	4a11      	ldr	r2, [pc, #68]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 802594c:	f043 0310 	orr.w	r3, r3, #16
 8025950:	b2db      	uxtb	r3, r3
 8025952:	7013      	strb	r3, [r2, #0]
		break;
 8025954:	e010      	b.n	8025978 <Brr_ControlBarrier_S+0x7c>
	case EXIT_OPEN :
		wnBRR_OUT_CS_ADDR |= (UINT8)(((1 << 6) & 0xFF));
 8025956:	4b0e      	ldr	r3, [pc, #56]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 8025958:	781b      	ldrb	r3, [r3, #0]
 802595a:	b2db      	uxtb	r3, r3
 802595c:	4a0c      	ldr	r2, [pc, #48]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 802595e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025962:	b2db      	uxtb	r3, r3
 8025964:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR  &= (UINT8)((~(1 << 4) & 0xFF));
 8025966:	4b0a      	ldr	r3, [pc, #40]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 8025968:	781b      	ldrb	r3, [r3, #0]
 802596a:	b2db      	uxtb	r3, r3
 802596c:	4a08      	ldr	r2, [pc, #32]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 802596e:	f023 0310 	bic.w	r3, r3, #16
 8025972:	b2db      	uxtb	r3, r3
 8025974:	7013      	strb	r3, [r2, #0]
		break;
 8025976:	bf00      	nop
	}

	Add_200_Value = wnBRR_OUT_CS_ADDR;
 8025978:	4b05      	ldr	r3, [pc, #20]	; (8025990 <Brr_ControlBarrier_S+0x94>)
 802597a:	781b      	ldrb	r3, [r3, #0]
 802597c:	b2da      	uxtb	r2, r3
 802597e:	4b05      	ldr	r3, [pc, #20]	; (8025994 <Brr_ControlBarrier_S+0x98>)
 8025980:	701a      	strb	r2, [r3, #0]
}
 8025982:	bf00      	nop
 8025984:	370c      	adds	r7, #12
 8025986:	46bd      	mov	sp, r7
 8025988:	f85d 7b04 	ldr.w	r7, [sp], #4
 802598c:	4770      	bx	lr
 802598e:	bf00      	nop
 8025990:	64000200 	.word	0x64000200
 8025994:	24000512 	.word	0x24000512

08025998 <USART3_UART_Init>:

IUART_T 	iUartTable[IUART_MAXPORT];


void USART3_UART_Init(int nBaudRate)
{
 8025998:	b580      	push	{r7, lr}
 802599a:	b082      	sub	sp, #8
 802599c:	af00      	add	r7, sp, #0
 802599e:	6078      	str	r0, [r7, #4]
	HAL_UART_DeInit(&huart3);
 80259a0:	480b      	ldr	r0, [pc, #44]	; (80259d0 <USART3_UART_Init+0x38>)
 80259a2:	f007 feed 	bl	802d780 <HAL_UART_DeInit>
	iUartTable[2].fIsOpen = FALSE;
 80259a6:	4b0b      	ldr	r3, [pc, #44]	; (80259d4 <USART3_UART_Init+0x3c>)
 80259a8:	2200      	movs	r2, #0
 80259aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	iUartTable[2].nBaud = nBaudRate;
 80259ae:	687b      	ldr	r3, [r7, #4]
 80259b0:	4a08      	ldr	r2, [pc, #32]	; (80259d4 <USART3_UART_Init+0x3c>)
 80259b2:	62d3      	str	r3, [r2, #44]	; 0x2c
	iUartTable[2].hUart = NULL;
 80259b4:	4b07      	ldr	r3, [pc, #28]	; (80259d4 <USART3_UART_Init+0x3c>)
 80259b6:	2200      	movs	r2, #0
 80259b8:	639a      	str	r2, [r3, #56]	; 0x38
	IUart_Open(COM3, iUartTable[COM3].nBaud);
 80259ba:	4b06      	ldr	r3, [pc, #24]	; (80259d4 <USART3_UART_Init+0x3c>)
 80259bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80259be:	4619      	mov	r1, r3
 80259c0:	2002      	movs	r0, #2
 80259c2:	f000 f8d3 	bl	8025b6c <IUart_Open>
}
 80259c6:	bf00      	nop
 80259c8:	3708      	adds	r7, #8
 80259ca:	46bd      	mov	sp, r7
 80259cc:	bd80      	pop	{r7, pc}
 80259ce:	bf00      	nop
 80259d0:	24001d18 	.word	0x24001d18
 80259d4:	24001964 	.word	0x24001964

080259d8 <bsp_InitIUart>:

void bsp_InitIUart()
{
 80259d8:	b580      	push	{r7, lr}
 80259da:	b082      	sub	sp, #8
 80259dc:	af00      	add	r7, sp, #0
	UINT32 	i;

	HAL_UART_DeInit(&huart1);
 80259de:	485d      	ldr	r0, [pc, #372]	; (8025b54 <bsp_InitIUart+0x17c>)
 80259e0:	f007 fece 	bl	802d780 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart2);
 80259e4:	485c      	ldr	r0, [pc, #368]	; (8025b58 <bsp_InitIUart+0x180>)
 80259e6:	f007 fecb 	bl	802d780 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart3);
 80259ea:	485c      	ldr	r0, [pc, #368]	; (8025b5c <bsp_InitIUart+0x184>)
 80259ec:	f007 fec8 	bl	802d780 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart4);
 80259f0:	485b      	ldr	r0, [pc, #364]	; (8025b60 <bsp_InitIUart+0x188>)
 80259f2:	f007 fec5 	bl	802d780 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart5);
 80259f6:	485b      	ldr	r0, [pc, #364]	; (8025b64 <bsp_InitIUart+0x18c>)
 80259f8:	f007 fec2 	bl	802d780 <HAL_UART_DeInit>

	for ( i = 0; i < IUART_MAXPORT; i++)
 80259fc:	2300      	movs	r3, #0
 80259fe:	607b      	str	r3, [r7, #4]
 8025a00:	e086      	b.n	8025b10 <bsp_InitIUart+0x138>
	{
		if(i == COM3)			//
 8025a02:	687b      	ldr	r3, [r7, #4]
 8025a04:	2b02      	cmp	r3, #2
 8025a06:	d11e      	bne.n	8025a46 <bsp_InitIUart+0x6e>
		{
			iUartTable[i].fIsOpen = FALSE;
 8025a08:	4957      	ldr	r1, [pc, #348]	; (8025b68 <bsp_InitIUart+0x190>)
 8025a0a:	687a      	ldr	r2, [r7, #4]
 8025a0c:	4613      	mov	r3, r2
 8025a0e:	009b      	lsls	r3, r3, #2
 8025a10:	4413      	add	r3, r2
 8025a12:	009b      	lsls	r3, r3, #2
 8025a14:	440b      	add	r3, r1
 8025a16:	2200      	movs	r2, #0
 8025a18:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 57600;
 8025a1a:	4953      	ldr	r1, [pc, #332]	; (8025b68 <bsp_InitIUart+0x190>)
 8025a1c:	687a      	ldr	r2, [r7, #4]
 8025a1e:	4613      	mov	r3, r2
 8025a20:	009b      	lsls	r3, r3, #2
 8025a22:	4413      	add	r3, r2
 8025a24:	009b      	lsls	r3, r3, #2
 8025a26:	440b      	add	r3, r1
 8025a28:	3304      	adds	r3, #4
 8025a2a:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8025a2e:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8025a30:	494d      	ldr	r1, [pc, #308]	; (8025b68 <bsp_InitIUart+0x190>)
 8025a32:	687a      	ldr	r2, [r7, #4]
 8025a34:	4613      	mov	r3, r2
 8025a36:	009b      	lsls	r3, r3, #2
 8025a38:	4413      	add	r3, r2
 8025a3a:	009b      	lsls	r3, r3, #2
 8025a3c:	440b      	add	r3, r1
 8025a3e:	3310      	adds	r3, #16
 8025a40:	2200      	movs	r2, #0
 8025a42:	601a      	str	r2, [r3, #0]
 8025a44:	e061      	b.n	8025b0a <bsp_InitIUart+0x132>

		}
		else if(i == COM4)
 8025a46:	687b      	ldr	r3, [r7, #4]
 8025a48:	2b03      	cmp	r3, #3
 8025a4a:	d11e      	bne.n	8025a8a <bsp_InitIUart+0xb2>
		{
			iUartTable[i].fIsOpen = FALSE;
 8025a4c:	4946      	ldr	r1, [pc, #280]	; (8025b68 <bsp_InitIUart+0x190>)
 8025a4e:	687a      	ldr	r2, [r7, #4]
 8025a50:	4613      	mov	r3, r2
 8025a52:	009b      	lsls	r3, r3, #2
 8025a54:	4413      	add	r3, r2
 8025a56:	009b      	lsls	r3, r3, #2
 8025a58:	440b      	add	r3, r1
 8025a5a:	2200      	movs	r2, #0
 8025a5c:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 38400;
 8025a5e:	4942      	ldr	r1, [pc, #264]	; (8025b68 <bsp_InitIUart+0x190>)
 8025a60:	687a      	ldr	r2, [r7, #4]
 8025a62:	4613      	mov	r3, r2
 8025a64:	009b      	lsls	r3, r3, #2
 8025a66:	4413      	add	r3, r2
 8025a68:	009b      	lsls	r3, r3, #2
 8025a6a:	440b      	add	r3, r1
 8025a6c:	3304      	adds	r3, #4
 8025a6e:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8025a72:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8025a74:	493c      	ldr	r1, [pc, #240]	; (8025b68 <bsp_InitIUart+0x190>)
 8025a76:	687a      	ldr	r2, [r7, #4]
 8025a78:	4613      	mov	r3, r2
 8025a7a:	009b      	lsls	r3, r3, #2
 8025a7c:	4413      	add	r3, r2
 8025a7e:	009b      	lsls	r3, r3, #2
 8025a80:	440b      	add	r3, r1
 8025a82:	3310      	adds	r3, #16
 8025a84:	2200      	movs	r2, #0
 8025a86:	601a      	str	r2, [r3, #0]
 8025a88:	e03f      	b.n	8025b0a <bsp_InitIUart+0x132>
		}
		else if(i == COM5)
 8025a8a:	687b      	ldr	r3, [r7, #4]
 8025a8c:	2b04      	cmp	r3, #4
 8025a8e:	d11e      	bne.n	8025ace <bsp_InitIUart+0xf6>
		{
			iUartTable[i].fIsOpen = FALSE;
 8025a90:	4935      	ldr	r1, [pc, #212]	; (8025b68 <bsp_InitIUart+0x190>)
 8025a92:	687a      	ldr	r2, [r7, #4]
 8025a94:	4613      	mov	r3, r2
 8025a96:	009b      	lsls	r3, r3, #2
 8025a98:	4413      	add	r3, r2
 8025a9a:	009b      	lsls	r3, r3, #2
 8025a9c:	440b      	add	r3, r1
 8025a9e:	2200      	movs	r2, #0
 8025aa0:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 38400;
 8025aa2:	4931      	ldr	r1, [pc, #196]	; (8025b68 <bsp_InitIUart+0x190>)
 8025aa4:	687a      	ldr	r2, [r7, #4]
 8025aa6:	4613      	mov	r3, r2
 8025aa8:	009b      	lsls	r3, r3, #2
 8025aaa:	4413      	add	r3, r2
 8025aac:	009b      	lsls	r3, r3, #2
 8025aae:	440b      	add	r3, r1
 8025ab0:	3304      	adds	r3, #4
 8025ab2:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8025ab6:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8025ab8:	492b      	ldr	r1, [pc, #172]	; (8025b68 <bsp_InitIUart+0x190>)
 8025aba:	687a      	ldr	r2, [r7, #4]
 8025abc:	4613      	mov	r3, r2
 8025abe:	009b      	lsls	r3, r3, #2
 8025ac0:	4413      	add	r3, r2
 8025ac2:	009b      	lsls	r3, r3, #2
 8025ac4:	440b      	add	r3, r1
 8025ac6:	3310      	adds	r3, #16
 8025ac8:	2200      	movs	r2, #0
 8025aca:	601a      	str	r2, [r3, #0]
 8025acc:	e01d      	b.n	8025b0a <bsp_InitIUart+0x132>
		}
		else
		{
			iUartTable[i].fIsOpen = FALSE;
 8025ace:	4926      	ldr	r1, [pc, #152]	; (8025b68 <bsp_InitIUart+0x190>)
 8025ad0:	687a      	ldr	r2, [r7, #4]
 8025ad2:	4613      	mov	r3, r2
 8025ad4:	009b      	lsls	r3, r3, #2
 8025ad6:	4413      	add	r3, r2
 8025ad8:	009b      	lsls	r3, r3, #2
 8025ada:	440b      	add	r3, r1
 8025adc:	2200      	movs	r2, #0
 8025ade:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 115200;
 8025ae0:	4921      	ldr	r1, [pc, #132]	; (8025b68 <bsp_InitIUart+0x190>)
 8025ae2:	687a      	ldr	r2, [r7, #4]
 8025ae4:	4613      	mov	r3, r2
 8025ae6:	009b      	lsls	r3, r3, #2
 8025ae8:	4413      	add	r3, r2
 8025aea:	009b      	lsls	r3, r3, #2
 8025aec:	440b      	add	r3, r1
 8025aee:	3304      	adds	r3, #4
 8025af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8025af4:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8025af6:	491c      	ldr	r1, [pc, #112]	; (8025b68 <bsp_InitIUart+0x190>)
 8025af8:	687a      	ldr	r2, [r7, #4]
 8025afa:	4613      	mov	r3, r2
 8025afc:	009b      	lsls	r3, r3, #2
 8025afe:	4413      	add	r3, r2
 8025b00:	009b      	lsls	r3, r3, #2
 8025b02:	440b      	add	r3, r1
 8025b04:	3310      	adds	r3, #16
 8025b06:	2200      	movs	r2, #0
 8025b08:	601a      	str	r2, [r3, #0]
	for ( i = 0; i < IUART_MAXPORT; i++)
 8025b0a:	687b      	ldr	r3, [r7, #4]
 8025b0c:	3301      	adds	r3, #1
 8025b0e:	607b      	str	r3, [r7, #4]
 8025b10:	687b      	ldr	r3, [r7, #4]
 8025b12:	2b04      	cmp	r3, #4
 8025b14:	f67f af75 	bls.w	8025a02 <bsp_InitIUart+0x2a>
		}
	}

	IUart_Open(COM1, IUART1_BAUD);
 8025b18:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8025b1c:	2000      	movs	r0, #0
 8025b1e:	f000 f825 	bl	8025b6c <IUart_Open>
	IUart_Open(COM2, IUART2_BAUD);
 8025b22:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8025b26:	2001      	movs	r0, #1
 8025b28:	f000 f820 	bl	8025b6c <IUart_Open>
	IUart_Open(COM3, IUART3_BAUD);
 8025b2c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8025b30:	2002      	movs	r0, #2
 8025b32:	f000 f81b 	bl	8025b6c <IUart_Open>
	IUart_Open(COM4, IUART4_BAUD);
 8025b36:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8025b3a:	2003      	movs	r0, #3
 8025b3c:	f000 f816 	bl	8025b6c <IUart_Open>
	IUart_Open(COM5, IUART5_BAUD);
 8025b40:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8025b44:	2004      	movs	r0, #4
 8025b46:	f000 f811 	bl	8025b6c <IUart_Open>
}
 8025b4a:	bf00      	nop
 8025b4c:	3708      	adds	r7, #8
 8025b4e:	46bd      	mov	sp, r7
 8025b50:	bd80      	pop	{r7, pc}
 8025b52:	bf00      	nop
 8025b54:	24001bf0 	.word	0x24001bf0
 8025b58:	24001c84 	.word	0x24001c84
 8025b5c:	24001d18 	.word	0x24001d18
 8025b60:	24001ac8 	.word	0x24001ac8
 8025b64:	24001b5c 	.word	0x24001b5c
 8025b68:	24001964 	.word	0x24001964

08025b6c <IUart_Open>:


BOOL IUart_Open(int nComPort, UINT32 nBaud)
{
 8025b6c:	b580      	push	{r7, lr}
 8025b6e:	b08a      	sub	sp, #40	; 0x28
 8025b70:	af00      	add	r7, sp, #0
 8025b72:	6078      	str	r0, [r7, #4]
 8025b74:	6039      	str	r1, [r7, #0]
	IUART_T* pIUart = NULL;
 8025b76:	2300      	movs	r3, #0
 8025b78:	623b      	str	r3, [r7, #32]
	IRQn_Type	irqNType = USART1_IRQn;
 8025b7a:	2325      	movs	r3, #37	; 0x25
 8025b7c:	84fb      	strh	r3, [r7, #38]	; 0x26

	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 8025b7e:	687b      	ldr	r3, [r7, #4]
 8025b80:	2b00      	cmp	r3, #0
 8025b82:	db02      	blt.n	8025b8a <IUart_Open+0x1e>
 8025b84:	687b      	ldr	r3, [r7, #4]
 8025b86:	2b04      	cmp	r3, #4
 8025b88:	dd01      	ble.n	8025b8e <IUart_Open+0x22>
		return FALSE;
 8025b8a:	2300      	movs	r3, #0
 8025b8c:	e0dd      	b.n	8025d4a <IUart_Open+0x1de>

	pIUart = &iUartTable[nComPort];
 8025b8e:	687a      	ldr	r2, [r7, #4]
 8025b90:	4613      	mov	r3, r2
 8025b92:	009b      	lsls	r3, r3, #2
 8025b94:	4413      	add	r3, r2
 8025b96:	009b      	lsls	r3, r3, #2
 8025b98:	4a6e      	ldr	r2, [pc, #440]	; (8025d54 <IUart_Open+0x1e8>)
 8025b9a:	4413      	add	r3, r2
 8025b9c:	623b      	str	r3, [r7, #32]

	if (nComPort == COM1)
 8025b9e:	687b      	ldr	r3, [r7, #4]
 8025ba0:	2b00      	cmp	r3, #0
 8025ba2:	d110      	bne.n	8025bc6 <IUart_Open+0x5a>
	{
		pIUart->hUart = &huart1;
 8025ba4:	6a3b      	ldr	r3, [r7, #32]
 8025ba6:	4a6c      	ldr	r2, [pc, #432]	; (8025d58 <IUart_Open+0x1ec>)
 8025ba8:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf1;
 8025baa:	6a3b      	ldr	r3, [r7, #32]
 8025bac:	4a6b      	ldr	r2, [pc, #428]	; (8025d5c <IUart_Open+0x1f0>)
 8025bae:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf1, IUART1_RX_BUF_SIZE);
 8025bb0:	6a3b      	ldr	r3, [r7, #32]
 8025bb2:	68db      	ldr	r3, [r3, #12]
 8025bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025bb8:	4969      	ldr	r1, [pc, #420]	; (8025d60 <IUart_Open+0x1f4>)
 8025bba:	4618      	mov	r0, r3
 8025bbc:	f000 fa9c 	bl	80260f8 <RBuf_Init>
		irqNType = USART1_IRQn;
 8025bc0:	2325      	movs	r3, #37	; 0x25
 8025bc2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025bc4:	e051      	b.n	8025c6a <IUart_Open+0xfe>
	}
	else if (nComPort == COM2)
 8025bc6:	687b      	ldr	r3, [r7, #4]
 8025bc8:	2b01      	cmp	r3, #1
 8025bca:	d110      	bne.n	8025bee <IUart_Open+0x82>
	{
		pIUart->hUart = &huart2;
 8025bcc:	6a3b      	ldr	r3, [r7, #32]
 8025bce:	4a65      	ldr	r2, [pc, #404]	; (8025d64 <IUart_Open+0x1f8>)
 8025bd0:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf2;
 8025bd2:	6a3b      	ldr	r3, [r7, #32]
 8025bd4:	4a64      	ldr	r2, [pc, #400]	; (8025d68 <IUart_Open+0x1fc>)
 8025bd6:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf2, IUART2_RX_BUF_SIZE);
 8025bd8:	6a3b      	ldr	r3, [r7, #32]
 8025bda:	68db      	ldr	r3, [r3, #12]
 8025bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025be0:	4962      	ldr	r1, [pc, #392]	; (8025d6c <IUart_Open+0x200>)
 8025be2:	4618      	mov	r0, r3
 8025be4:	f000 fa88 	bl	80260f8 <RBuf_Init>
		irqNType = USART2_IRQn;
 8025be8:	2326      	movs	r3, #38	; 0x26
 8025bea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025bec:	e03d      	b.n	8025c6a <IUart_Open+0xfe>
	}
	else if (nComPort == COM3)
 8025bee:	687b      	ldr	r3, [r7, #4]
 8025bf0:	2b02      	cmp	r3, #2
 8025bf2:	d110      	bne.n	8025c16 <IUart_Open+0xaa>
	{
		pIUart->hUart = &huart3;
 8025bf4:	6a3b      	ldr	r3, [r7, #32]
 8025bf6:	4a5e      	ldr	r2, [pc, #376]	; (8025d70 <IUart_Open+0x204>)
 8025bf8:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf3;
 8025bfa:	6a3b      	ldr	r3, [r7, #32]
 8025bfc:	4a5d      	ldr	r2, [pc, #372]	; (8025d74 <IUart_Open+0x208>)
 8025bfe:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf3, IUART3_RX_BUF_SIZE);
 8025c00:	6a3b      	ldr	r3, [r7, #32]
 8025c02:	68db      	ldr	r3, [r3, #12]
 8025c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025c08:	495b      	ldr	r1, [pc, #364]	; (8025d78 <IUart_Open+0x20c>)
 8025c0a:	4618      	mov	r0, r3
 8025c0c:	f000 fa74 	bl	80260f8 <RBuf_Init>
		irqNType = USART3_IRQn;
 8025c10:	2327      	movs	r3, #39	; 0x27
 8025c12:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025c14:	e029      	b.n	8025c6a <IUart_Open+0xfe>
	}
	else if (nComPort == COM4)
 8025c16:	687b      	ldr	r3, [r7, #4]
 8025c18:	2b03      	cmp	r3, #3
 8025c1a:	d110      	bne.n	8025c3e <IUart_Open+0xd2>
	{
		pIUart->hUart = &huart4;
 8025c1c:	6a3b      	ldr	r3, [r7, #32]
 8025c1e:	4a57      	ldr	r2, [pc, #348]	; (8025d7c <IUart_Open+0x210>)
 8025c20:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf4;
 8025c22:	6a3b      	ldr	r3, [r7, #32]
 8025c24:	4a56      	ldr	r2, [pc, #344]	; (8025d80 <IUart_Open+0x214>)
 8025c26:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf4, IUART4_RX_BUF_SIZE);
 8025c28:	6a3b      	ldr	r3, [r7, #32]
 8025c2a:	68db      	ldr	r3, [r3, #12]
 8025c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025c30:	4954      	ldr	r1, [pc, #336]	; (8025d84 <IUart_Open+0x218>)
 8025c32:	4618      	mov	r0, r3
 8025c34:	f000 fa60 	bl	80260f8 <RBuf_Init>
		irqNType = UART4_IRQn;
 8025c38:	2334      	movs	r3, #52	; 0x34
 8025c3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025c3c:	e015      	b.n	8025c6a <IUart_Open+0xfe>
	}
	else if (nComPort == COM5)
 8025c3e:	687b      	ldr	r3, [r7, #4]
 8025c40:	2b04      	cmp	r3, #4
 8025c42:	d110      	bne.n	8025c66 <IUart_Open+0xfa>
	{
		pIUart->hUart = &huart5;
 8025c44:	6a3b      	ldr	r3, [r7, #32]
 8025c46:	4a50      	ldr	r2, [pc, #320]	; (8025d88 <IUart_Open+0x21c>)
 8025c48:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf5;
 8025c4a:	6a3b      	ldr	r3, [r7, #32]
 8025c4c:	4a4f      	ldr	r2, [pc, #316]	; (8025d8c <IUart_Open+0x220>)
 8025c4e:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf5, IUART5_RX_BUF_SIZE);
 8025c50:	6a3b      	ldr	r3, [r7, #32]
 8025c52:	68db      	ldr	r3, [r3, #12]
 8025c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025c58:	494d      	ldr	r1, [pc, #308]	; (8025d90 <IUart_Open+0x224>)
 8025c5a:	4618      	mov	r0, r3
 8025c5c:	f000 fa4c 	bl	80260f8 <RBuf_Init>
		irqNType = UART5_IRQn;
 8025c60:	2335      	movs	r3, #53	; 0x35
 8025c62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025c64:	e001      	b.n	8025c6a <IUart_Open+0xfe>

	}
	else
	{
		return FALSE;
 8025c66:	2300      	movs	r3, #0
 8025c68:	e06f      	b.n	8025d4a <IUart_Open+0x1de>
	}

	pIUart->hUart->Init.BaudRate 		= nBaud;
 8025c6a:	6a3b      	ldr	r3, [r7, #32]
 8025c6c:	691b      	ldr	r3, [r3, #16]
 8025c6e:	683a      	ldr	r2, [r7, #0]
 8025c70:	605a      	str	r2, [r3, #4]
	pIUart->hUart->Init.WordLength   	= UART_WORDLENGTH_8B;
 8025c72:	6a3b      	ldr	r3, [r7, #32]
 8025c74:	691b      	ldr	r3, [r3, #16]
 8025c76:	2200      	movs	r2, #0
 8025c78:	609a      	str	r2, [r3, #8]
	pIUart->hUart->Init.StopBits     	= UART_STOPBITS_1;
 8025c7a:	6a3b      	ldr	r3, [r7, #32]
 8025c7c:	691b      	ldr	r3, [r3, #16]
 8025c7e:	2200      	movs	r2, #0
 8025c80:	60da      	str	r2, [r3, #12]
	pIUart->hUart->Init.Parity       	= UART_PARITY_NONE;
 8025c82:	6a3b      	ldr	r3, [r7, #32]
 8025c84:	691b      	ldr	r3, [r3, #16]
 8025c86:	2200      	movs	r2, #0
 8025c88:	611a      	str	r2, [r3, #16]
	pIUart->hUart->Init.Mode         	= UART_MODE_TX_RX;
 8025c8a:	6a3b      	ldr	r3, [r7, #32]
 8025c8c:	691b      	ldr	r3, [r3, #16]
 8025c8e:	220c      	movs	r2, #12
 8025c90:	615a      	str	r2, [r3, #20]
	pIUart->hUart->Init.HwFlowCtl    	= UART_HWCONTROL_NONE;
 8025c92:	6a3b      	ldr	r3, [r7, #32]
 8025c94:	691b      	ldr	r3, [r3, #16]
 8025c96:	2200      	movs	r2, #0
 8025c98:	619a      	str	r2, [r3, #24]
	pIUart->hUart->Init.OverSampling 	= UART_OVERSAMPLING_16;
 8025c9a:	6a3b      	ldr	r3, [r7, #32]
 8025c9c:	691b      	ldr	r3, [r3, #16]
 8025c9e:	2200      	movs	r2, #0
 8025ca0:	61da      	str	r2, [r3, #28]
	pIUart->hUart->Init.OneBitSampling 	= UART_ONE_BIT_SAMPLE_DISABLE;
 8025ca2:	6a3b      	ldr	r3, [r7, #32]
 8025ca4:	691b      	ldr	r3, [r3, #16]
 8025ca6:	2200      	movs	r2, #0
 8025ca8:	621a      	str	r2, [r3, #32]
	pIUart->hUart->Init.ClockPrescaler 	= UART_PRESCALER_DIV1;
 8025caa:	6a3b      	ldr	r3, [r7, #32]
 8025cac:	691b      	ldr	r3, [r3, #16]
 8025cae:	2200      	movs	r2, #0
 8025cb0:	625a      	str	r2, [r3, #36]	; 0x24
	pIUart->hUart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8025cb2:	6a3b      	ldr	r3, [r7, #32]
 8025cb4:	691b      	ldr	r3, [r3, #16]
 8025cb6:	2200      	movs	r2, #0
 8025cb8:	629a      	str	r2, [r3, #40]	; 0x28
	pIUart->hUart->AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_DISABLE;
 8025cba:	6a3b      	ldr	r3, [r7, #32]
 8025cbc:	691b      	ldr	r3, [r3, #16]
 8025cbe:	2200      	movs	r2, #0
 8025cc0:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_UART_Init(pIUart->hUart);
 8025cc2:	6a3b      	ldr	r3, [r7, #32]
 8025cc4:	691b      	ldr	r3, [r3, #16]
 8025cc6:	4618      	mov	r0, r3
 8025cc8:	f007 fd0a 	bl	802d6e0 <HAL_UART_Init>

    HAL_NVIC_SetPriority(irqNType, 0, 1);
 8025ccc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8025cd0:	2201      	movs	r2, #1
 8025cd2:	2100      	movs	r1, #0
 8025cd4:	4618      	mov	r0, r3
 8025cd6:	f003 fe02 	bl	80298de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNType);
 8025cda:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8025cde:	4618      	mov	r0, r3
 8025ce0:	f003 fe17 	bl	8029912 <HAL_NVIC_EnableIRQ>
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR3, USART_CR3_RXFTIE);
    // Enable the UART Parity Error interrupt and Data Register Not Empty interrupt
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
	*/

    SET_BIT(pIUart->hUart->Instance->ICR, USART_ICR_TCCF);   // Set Clear transfer complete flag
 8025ce4:	6a3b      	ldr	r3, [r7, #32]
 8025ce6:	691b      	ldr	r3, [r3, #16]
 8025ce8:	681b      	ldr	r3, [r3, #0]
 8025cea:	6a1a      	ldr	r2, [r3, #32]
 8025cec:	6a3b      	ldr	r3, [r7, #32]
 8025cee:	691b      	ldr	r3, [r3, #16]
 8025cf0:	681b      	ldr	r3, [r3, #0]
 8025cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025cf6:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->RQR, USART_RQR_RXFRQ);  // Set Receive Data flush Request
 8025cf8:	6a3b      	ldr	r3, [r7, #32]
 8025cfa:	691b      	ldr	r3, [r3, #16]
 8025cfc:	681b      	ldr	r3, [r3, #0]
 8025cfe:	699a      	ldr	r2, [r3, #24]
 8025d00:	6a3b      	ldr	r3, [r7, #32]
 8025d02:	691b      	ldr	r3, [r3, #16]
 8025d04:	681b      	ldr	r3, [r3, #0]
 8025d06:	f042 0208 	orr.w	r2, r2, #8
 8025d0a:	619a      	str	r2, [r3, #24]
    // USART_CR1_PEIE | USART_CR1_RXNEIE
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR1, USART_CR1_RXNEIE); // Set RX 수신 인터럽트
 8025d0c:	6a3b      	ldr	r3, [r7, #32]
 8025d0e:	691b      	ldr	r3, [r3, #16]
 8025d10:	681b      	ldr	r3, [r3, #0]
 8025d12:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025d14:	68fb      	ldr	r3, [r7, #12]
 8025d16:	e853 3f00 	ldrex	r3, [r3]
 8025d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8025d1c:	68bb      	ldr	r3, [r7, #8]
 8025d1e:	f043 0320 	orr.w	r3, r3, #32
 8025d22:	61fb      	str	r3, [r7, #28]
 8025d24:	6a3b      	ldr	r3, [r7, #32]
 8025d26:	691b      	ldr	r3, [r3, #16]
 8025d28:	681b      	ldr	r3, [r3, #0]
 8025d2a:	461a      	mov	r2, r3
 8025d2c:	69fb      	ldr	r3, [r7, #28]
 8025d2e:	61bb      	str	r3, [r7, #24]
 8025d30:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025d32:	6979      	ldr	r1, [r7, #20]
 8025d34:	69ba      	ldr	r2, [r7, #24]
 8025d36:	e841 2300 	strex	r3, r2, [r1]
 8025d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8025d3c:	693b      	ldr	r3, [r7, #16]
 8025d3e:	2b00      	cmp	r3, #0
 8025d40:	d1e4      	bne.n	8025d0c <IUart_Open+0x1a0>

    pIUart->fIsOpen = TRUE;
 8025d42:	6a3b      	ldr	r3, [r7, #32]
 8025d44:	2201      	movs	r2, #1
 8025d46:	701a      	strb	r2, [r3, #0]


	return TRUE;
 8025d48:	2301      	movs	r3, #1
}
 8025d4a:	4618      	mov	r0, r3
 8025d4c:	3728      	adds	r7, #40	; 0x28
 8025d4e:	46bd      	mov	sp, r7
 8025d50:	bd80      	pop	{r7, pc}
 8025d52:	bf00      	nop
 8025d54:	24001964 	.word	0x24001964
 8025d58:	24001bf0 	.word	0x24001bf0
 8025d5c:	24000914 	.word	0x24000914
 8025d60:	24000514 	.word	0x24000514
 8025d64:	24001c84 	.word	0x24001c84
 8025d68:	24000d24 	.word	0x24000d24
 8025d6c:	24000924 	.word	0x24000924
 8025d70:	24001d18 	.word	0x24001d18
 8025d74:	24001134 	.word	0x24001134
 8025d78:	24000d34 	.word	0x24000d34
 8025d7c:	24001ac8 	.word	0x24001ac8
 8025d80:	24001544 	.word	0x24001544
 8025d84:	24001144 	.word	0x24001144
 8025d88:	24001b5c 	.word	0x24001b5c
 8025d8c:	24001954 	.word	0x24001954
 8025d90:	24001554 	.word	0x24001554

08025d94 <IUart_SendByte>:
	}
}


int IUart_SendByte(int nComPort, BYTE bCh)
{
 8025d94:	b480      	push	{r7}
 8025d96:	b083      	sub	sp, #12
 8025d98:	af00      	add	r7, sp, #0
 8025d9a:	6078      	str	r0, [r7, #4]
 8025d9c:	460b      	mov	r3, r1
 8025d9e:	70fb      	strb	r3, [r7, #3]
	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 8025da0:	687b      	ldr	r3, [r7, #4]
 8025da2:	2b00      	cmp	r3, #0
 8025da4:	db02      	blt.n	8025dac <IUart_SendByte+0x18>
 8025da6:	687b      	ldr	r3, [r7, #4]
 8025da8:	2b04      	cmp	r3, #4
 8025daa:	dd02      	ble.n	8025db2 <IUart_SendByte+0x1e>
		return -1;
 8025dac:	f04f 33ff 	mov.w	r3, #4294967295
 8025db0:	e01c      	b.n	8025dec <IUart_SendByte+0x58>

	while ((iUartTable[nComPort].hUart->Instance->ISR & UART_FLAG_TXE) == RESET);
 8025db2:	bf00      	nop
 8025db4:	4910      	ldr	r1, [pc, #64]	; (8025df8 <IUart_SendByte+0x64>)
 8025db6:	687a      	ldr	r2, [r7, #4]
 8025db8:	4613      	mov	r3, r2
 8025dba:	009b      	lsls	r3, r3, #2
 8025dbc:	4413      	add	r3, r2
 8025dbe:	009b      	lsls	r3, r3, #2
 8025dc0:	440b      	add	r3, r1
 8025dc2:	3310      	adds	r3, #16
 8025dc4:	681b      	ldr	r3, [r3, #0]
 8025dc6:	681b      	ldr	r3, [r3, #0]
 8025dc8:	69db      	ldr	r3, [r3, #28]
 8025dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025dce:	2b00      	cmp	r3, #0
 8025dd0:	d0f0      	beq.n	8025db4 <IUart_SendByte+0x20>
	iUartTable[nComPort].hUart->Instance->TDR = bCh;
 8025dd2:	4909      	ldr	r1, [pc, #36]	; (8025df8 <IUart_SendByte+0x64>)
 8025dd4:	687a      	ldr	r2, [r7, #4]
 8025dd6:	4613      	mov	r3, r2
 8025dd8:	009b      	lsls	r3, r3, #2
 8025dda:	4413      	add	r3, r2
 8025ddc:	009b      	lsls	r3, r3, #2
 8025dde:	440b      	add	r3, r1
 8025de0:	3310      	adds	r3, #16
 8025de2:	681b      	ldr	r3, [r3, #0]
 8025de4:	681b      	ldr	r3, [r3, #0]
 8025de6:	78fa      	ldrb	r2, [r7, #3]
 8025de8:	629a      	str	r2, [r3, #40]	; 0x28

	return bCh;
 8025dea:	78fb      	ldrb	r3, [r7, #3]
}
 8025dec:	4618      	mov	r0, r3
 8025dee:	370c      	adds	r7, #12
 8025df0:	46bd      	mov	sp, r7
 8025df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025df6:	4770      	bx	lr
 8025df8:	24001964 	.word	0x24001964

08025dfc <IUart_SendBuffer>:



int IUart_SendBuffer(int nComPort, PUCHAR pBuf, UINT16 usLen)
{
 8025dfc:	b580      	push	{r7, lr}
 8025dfe:	b086      	sub	sp, #24
 8025e00:	af00      	add	r7, sp, #0
 8025e02:	60f8      	str	r0, [r7, #12]
 8025e04:	60b9      	str	r1, [r7, #8]
 8025e06:	4613      	mov	r3, r2
 8025e08:	80fb      	strh	r3, [r7, #6]
	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 8025e0a:	68fb      	ldr	r3, [r7, #12]
 8025e0c:	2b00      	cmp	r3, #0
 8025e0e:	db02      	blt.n	8025e16 <IUart_SendBuffer+0x1a>
 8025e10:	68fb      	ldr	r3, [r7, #12]
 8025e12:	2b04      	cmp	r3, #4
 8025e14:	dd02      	ble.n	8025e1c <IUart_SendBuffer+0x20>
		return -1;
 8025e16:	f04f 33ff 	mov.w	r3, #4294967295
 8025e1a:	e012      	b.n	8025e42 <IUart_SendBuffer+0x46>

	for (int i = 0; i < usLen; i++)
 8025e1c:	2300      	movs	r3, #0
 8025e1e:	617b      	str	r3, [r7, #20]
 8025e20:	e00a      	b.n	8025e38 <IUart_SendBuffer+0x3c>
		IUart_SendByte(nComPort, pBuf[i]);
 8025e22:	697b      	ldr	r3, [r7, #20]
 8025e24:	68ba      	ldr	r2, [r7, #8]
 8025e26:	4413      	add	r3, r2
 8025e28:	781b      	ldrb	r3, [r3, #0]
 8025e2a:	4619      	mov	r1, r3
 8025e2c:	68f8      	ldr	r0, [r7, #12]
 8025e2e:	f7ff ffb1 	bl	8025d94 <IUart_SendByte>
	for (int i = 0; i < usLen; i++)
 8025e32:	697b      	ldr	r3, [r7, #20]
 8025e34:	3301      	adds	r3, #1
 8025e36:	617b      	str	r3, [r7, #20]
 8025e38:	88fb      	ldrh	r3, [r7, #6]
 8025e3a:	697a      	ldr	r2, [r7, #20]
 8025e3c:	429a      	cmp	r2, r3
 8025e3e:	dbf0      	blt.n	8025e22 <IUart_SendBuffer+0x26>

	return usLen;
 8025e40:	88fb      	ldrh	r3, [r7, #6]
}
 8025e42:	4618      	mov	r0, r3
 8025e44:	3718      	adds	r7, #24
 8025e46:	46bd      	mov	sp, r7
 8025e48:	bd80      	pop	{r7, pc}
	...

08025e4c <IUart_RecvByte>:



int IUart_RecvByte(int nComPort)
{
 8025e4c:	b580      	push	{r7, lr}
 8025e4e:	b084      	sub	sp, #16
 8025e50:	af00      	add	r7, sp, #0
 8025e52:	6078      	str	r0, [r7, #4]
	BYTE	bRecvByte;

	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 8025e54:	687b      	ldr	r3, [r7, #4]
 8025e56:	2b00      	cmp	r3, #0
 8025e58:	db02      	blt.n	8025e60 <IUart_RecvByte+0x14>
 8025e5a:	687b      	ldr	r3, [r7, #4]
 8025e5c:	2b04      	cmp	r3, #4
 8025e5e:	dd02      	ble.n	8025e66 <IUart_RecvByte+0x1a>
		return -1;
 8025e60:	f04f 33ff 	mov.w	r3, #4294967295
 8025e64:	e021      	b.n	8025eaa <IUart_RecvByte+0x5e>

	if (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) > 0)
 8025e66:	4913      	ldr	r1, [pc, #76]	; (8025eb4 <IUart_RecvByte+0x68>)
 8025e68:	687a      	ldr	r2, [r7, #4]
 8025e6a:	4613      	mov	r3, r2
 8025e6c:	009b      	lsls	r3, r3, #2
 8025e6e:	4413      	add	r3, r2
 8025e70:	009b      	lsls	r3, r3, #2
 8025e72:	440b      	add	r3, r1
 8025e74:	330c      	adds	r3, #12
 8025e76:	681b      	ldr	r3, [r3, #0]
 8025e78:	4618      	mov	r0, r3
 8025e7a:	f000 fa6b 	bl	8026354 <RBuf_Get_Full>
 8025e7e:	4603      	mov	r3, r0
 8025e80:	2b00      	cmp	r3, #0
 8025e82:	d010      	beq.n	8025ea6 <IUart_RecvByte+0x5a>
	{
		RBuf_Read(iUartTable[nComPort].pRxRingBuf, &bRecvByte, 1);
 8025e84:	490b      	ldr	r1, [pc, #44]	; (8025eb4 <IUart_RecvByte+0x68>)
 8025e86:	687a      	ldr	r2, [r7, #4]
 8025e88:	4613      	mov	r3, r2
 8025e8a:	009b      	lsls	r3, r3, #2
 8025e8c:	4413      	add	r3, r2
 8025e8e:	009b      	lsls	r3, r3, #2
 8025e90:	440b      	add	r3, r1
 8025e92:	330c      	adds	r3, #12
 8025e94:	681b      	ldr	r3, [r3, #0]
 8025e96:	f107 010f 	add.w	r1, r7, #15
 8025e9a:	2201      	movs	r2, #1
 8025e9c:	4618      	mov	r0, r3
 8025e9e:	f000 f9b7 	bl	8026210 <RBuf_Read>
	else
	{
		return -1;
	}

	return bRecvByte;
 8025ea2:	7bfb      	ldrb	r3, [r7, #15]
 8025ea4:	e001      	b.n	8025eaa <IUart_RecvByte+0x5e>
		return -1;
 8025ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8025eaa:	4618      	mov	r0, r3
 8025eac:	3710      	adds	r7, #16
 8025eae:	46bd      	mov	sp, r7
 8025eb0:	bd80      	pop	{r7, pc}
 8025eb2:	bf00      	nop
 8025eb4:	24001964 	.word	0x24001964

08025eb8 <IUart_RecvByte_check>:


int IUart_RecvByte_check(int nComPort, BYTE *pData)
{
 8025eb8:	b580      	push	{r7, lr}
 8025eba:	b084      	sub	sp, #16
 8025ebc:	af00      	add	r7, sp, #0
 8025ebe:	6078      	str	r0, [r7, #4]
 8025ec0:	6039      	str	r1, [r7, #0]
    BYTE    bRecvByte;

	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 8025ec2:	687b      	ldr	r3, [r7, #4]
 8025ec4:	2b00      	cmp	r3, #0
 8025ec6:	db02      	blt.n	8025ece <IUart_RecvByte_check+0x16>
 8025ec8:	687b      	ldr	r3, [r7, #4]
 8025eca:	2b04      	cmp	r3, #4
 8025ecc:	dd02      	ble.n	8025ed4 <IUart_RecvByte_check+0x1c>
		return -1;
 8025ece:	f04f 33ff 	mov.w	r3, #4294967295
 8025ed2:	e023      	b.n	8025f1c <IUart_RecvByte_check+0x64>

	if (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) > 0)
 8025ed4:	4913      	ldr	r1, [pc, #76]	; (8025f24 <IUart_RecvByte_check+0x6c>)
 8025ed6:	687a      	ldr	r2, [r7, #4]
 8025ed8:	4613      	mov	r3, r2
 8025eda:	009b      	lsls	r3, r3, #2
 8025edc:	4413      	add	r3, r2
 8025ede:	009b      	lsls	r3, r3, #2
 8025ee0:	440b      	add	r3, r1
 8025ee2:	330c      	adds	r3, #12
 8025ee4:	681b      	ldr	r3, [r3, #0]
 8025ee6:	4618      	mov	r0, r3
 8025ee8:	f000 fa34 	bl	8026354 <RBuf_Get_Full>
 8025eec:	4603      	mov	r3, r0
 8025eee:	2b00      	cmp	r3, #0
 8025ef0:	d013      	beq.n	8025f1a <IUart_RecvByte_check+0x62>
    {
    	RBuf_Read(iUartTable[nComPort].pRxRingBuf, &bRecvByte, 1);
 8025ef2:	490c      	ldr	r1, [pc, #48]	; (8025f24 <IUart_RecvByte_check+0x6c>)
 8025ef4:	687a      	ldr	r2, [r7, #4]
 8025ef6:	4613      	mov	r3, r2
 8025ef8:	009b      	lsls	r3, r3, #2
 8025efa:	4413      	add	r3, r2
 8025efc:	009b      	lsls	r3, r3, #2
 8025efe:	440b      	add	r3, r1
 8025f00:	330c      	adds	r3, #12
 8025f02:	681b      	ldr	r3, [r3, #0]
 8025f04:	f107 010f 	add.w	r1, r7, #15
 8025f08:	2201      	movs	r2, #1
 8025f0a:	4618      	mov	r0, r3
 8025f0c:	f000 f980 	bl	8026210 <RBuf_Read>

        *pData = bRecvByte;
 8025f10:	7bfa      	ldrb	r2, [r7, #15]
 8025f12:	683b      	ldr	r3, [r7, #0]
 8025f14:	701a      	strb	r2, [r3, #0]
    else
    {
        return FALSE;
    }

    return TRUE;
 8025f16:	2301      	movs	r3, #1
 8025f18:	e000      	b.n	8025f1c <IUart_RecvByte_check+0x64>
        return FALSE;
 8025f1a:	2300      	movs	r3, #0
}
 8025f1c:	4618      	mov	r0, r3
 8025f1e:	3710      	adds	r7, #16
 8025f20:	46bd      	mov	sp, r7
 8025f22:	bd80      	pop	{r7, pc}
 8025f24:	24001964 	.word	0x24001964

08025f28 <IUart_RecvByteBlocked>:
	return nReaded;
}


int IUart_RecvByteBlocked(int nComPort)
{
 8025f28:	b580      	push	{r7, lr}
 8025f2a:	b082      	sub	sp, #8
 8025f2c:	af00      	add	r7, sp, #0
 8025f2e:	6078      	str	r0, [r7, #4]
	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 8025f30:	687b      	ldr	r3, [r7, #4]
 8025f32:	2b00      	cmp	r3, #0
 8025f34:	db02      	blt.n	8025f3c <IUart_RecvByteBlocked+0x14>
 8025f36:	687b      	ldr	r3, [r7, #4]
 8025f38:	2b04      	cmp	r3, #4
 8025f3a:	dd02      	ble.n	8025f42 <IUart_RecvByteBlocked+0x1a>
		return -1;
 8025f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8025f40:	e013      	b.n	8025f6a <IUart_RecvByteBlocked+0x42>

   // while (RBuf_Available(iUartTable[nComPort].pRxRingBuf) == 0)
    while (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) == 0)
 8025f42:	bf00      	nop
 8025f44:	490b      	ldr	r1, [pc, #44]	; (8025f74 <IUart_RecvByteBlocked+0x4c>)
 8025f46:	687a      	ldr	r2, [r7, #4]
 8025f48:	4613      	mov	r3, r2
 8025f4a:	009b      	lsls	r3, r3, #2
 8025f4c:	4413      	add	r3, r2
 8025f4e:	009b      	lsls	r3, r3, #2
 8025f50:	440b      	add	r3, r1
 8025f52:	330c      	adds	r3, #12
 8025f54:	681b      	ldr	r3, [r3, #0]
 8025f56:	4618      	mov	r0, r3
 8025f58:	f000 f9fc 	bl	8026354 <RBuf_Get_Full>
 8025f5c:	4603      	mov	r3, r0
 8025f5e:	2b00      	cmp	r3, #0
 8025f60:	d0f0      	beq.n	8025f44 <IUart_RecvByteBlocked+0x1c>
        ;

    return IUart_RecvByte(nComPort);
 8025f62:	6878      	ldr	r0, [r7, #4]
 8025f64:	f7ff ff72 	bl	8025e4c <IUart_RecvByte>
 8025f68:	4603      	mov	r3, r0
}
 8025f6a:	4618      	mov	r0, r3
 8025f6c:	3708      	adds	r7, #8
 8025f6e:	46bd      	mov	sp, r7
 8025f70:	bd80      	pop	{r7, pc}
 8025f72:	bf00      	nop
 8025f74:	24001964 	.word	0x24001964

08025f78 <IUartISR>:
** ==========================================================================
*/

// 내부 USART/UART 인터럽트 서비스 처리 루틴
void IUartISR(IUART_T* pIUart)
{
 8025f78:	b580      	push	{r7, lr}
 8025f7a:	b084      	sub	sp, #16
 8025f7c:	af00      	add	r7, sp, #0
 8025f7e:	6078      	str	r0, [r7, #4]
    uint32_t isrflags   = READ_REG(pIUart->hUart->Instance->ISR);
 8025f80:	687b      	ldr	r3, [r7, #4]
 8025f82:	691b      	ldr	r3, [r3, #16]
 8025f84:	681b      	ldr	r3, [r3, #0]
 8025f86:	69db      	ldr	r3, [r3, #28]
 8025f88:	60fb      	str	r3, [r7, #12]

    // 수신 인터럽트 처리
    if ((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 8025f8a:	68fb      	ldr	r3, [r7, #12]
 8025f8c:	f003 0320 	and.w	r3, r3, #32
 8025f90:	2b00      	cmp	r3, #0
 8025f92:	d00d      	beq.n	8025fb0 <IUartISR+0x38>
    {
        uint8_t ch;

        ch = (uint8_t)(READ_REG(pIUart->hUart->Instance->RDR) & 0x00FF);
 8025f94:	687b      	ldr	r3, [r7, #4]
 8025f96:	691b      	ldr	r3, [r3, #16]
 8025f98:	681b      	ldr	r3, [r3, #0]
 8025f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025f9c:	b2db      	uxtb	r3, r3
 8025f9e:	72fb      	strb	r3, [r7, #11]
        RBuf_Write(pIUart->pRxRingBuf, &ch, 1);
 8025fa0:	687b      	ldr	r3, [r7, #4]
 8025fa2:	68db      	ldr	r3, [r3, #12]
 8025fa4:	f107 010b 	add.w	r1, r7, #11
 8025fa8:	2201      	movs	r2, #1
 8025faa:	4618      	mov	r0, r3
 8025fac:	f000 f8c5 	bl	802613a <RBuf_Write>
    }

    // Clear Interrupt Flag
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_PEF);     // Parity Error Clear Flag
 8025fb0:	687b      	ldr	r3, [r7, #4]
 8025fb2:	691b      	ldr	r3, [r3, #16]
 8025fb4:	681b      	ldr	r3, [r3, #0]
 8025fb6:	6a1a      	ldr	r2, [r3, #32]
 8025fb8:	687b      	ldr	r3, [r7, #4]
 8025fba:	691b      	ldr	r3, [r3, #16]
 8025fbc:	681b      	ldr	r3, [r3, #0]
 8025fbe:	f042 0201 	orr.w	r2, r2, #1
 8025fc2:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_FEF);     // Framing Error Clear Flag
 8025fc4:	687b      	ldr	r3, [r7, #4]
 8025fc6:	691b      	ldr	r3, [r3, #16]
 8025fc8:	681b      	ldr	r3, [r3, #0]
 8025fca:	6a1a      	ldr	r2, [r3, #32]
 8025fcc:	687b      	ldr	r3, [r7, #4]
 8025fce:	691b      	ldr	r3, [r3, #16]
 8025fd0:	681b      	ldr	r3, [r3, #0]
 8025fd2:	f042 0202 	orr.w	r2, r2, #2
 8025fd6:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_NEF);     // Noise detected Clear Flag
 8025fd8:	687b      	ldr	r3, [r7, #4]
 8025fda:	691b      	ldr	r3, [r3, #16]
 8025fdc:	681b      	ldr	r3, [r3, #0]
 8025fde:	6a1a      	ldr	r2, [r3, #32]
 8025fe0:	687b      	ldr	r3, [r7, #4]
 8025fe2:	691b      	ldr	r3, [r3, #16]
 8025fe4:	681b      	ldr	r3, [r3, #0]
 8025fe6:	f042 0204 	orr.w	r2, r2, #4
 8025fea:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_OREF);    // OverRun Error Clear Flag
 8025fec:	687b      	ldr	r3, [r7, #4]
 8025fee:	691b      	ldr	r3, [r3, #16]
 8025ff0:	681b      	ldr	r3, [r3, #0]
 8025ff2:	6a1a      	ldr	r2, [r3, #32]
 8025ff4:	687b      	ldr	r3, [r7, #4]
 8025ff6:	691b      	ldr	r3, [r3, #16]
 8025ff8:	681b      	ldr	r3, [r3, #0]
 8025ffa:	f042 0208 	orr.w	r2, r2, #8
 8025ffe:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_IDLEF);   // IDLE line detected Clear Flag
 8026000:	687b      	ldr	r3, [r7, #4]
 8026002:	691b      	ldr	r3, [r3, #16]
 8026004:	681b      	ldr	r3, [r3, #0]
 8026006:	6a1a      	ldr	r2, [r3, #32]
 8026008:	687b      	ldr	r3, [r7, #4]
 802600a:	691b      	ldr	r3, [r3, #16]
 802600c:	681b      	ldr	r3, [r3, #0]
 802600e:	f042 0210 	orr.w	r2, r2, #16
 8026012:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_TCF);     // Transmission Complete Clear Flag
 8026014:	687b      	ldr	r3, [r7, #4]
 8026016:	691b      	ldr	r3, [r3, #16]
 8026018:	681b      	ldr	r3, [r3, #0]
 802601a:	6a1a      	ldr	r2, [r3, #32]
 802601c:	687b      	ldr	r3, [r7, #4]
 802601e:	691b      	ldr	r3, [r3, #16]
 8026020:	681b      	ldr	r3, [r3, #0]
 8026022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026026:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_LBDF);    // LIN Break Detection Clear Flag
 8026028:	687b      	ldr	r3, [r7, #4]
 802602a:	691b      	ldr	r3, [r3, #16]
 802602c:	681b      	ldr	r3, [r3, #0]
 802602e:	6a1a      	ldr	r2, [r3, #32]
 8026030:	687b      	ldr	r3, [r7, #4]
 8026032:	691b      	ldr	r3, [r3, #16]
 8026034:	681b      	ldr	r3, [r3, #0]
 8026036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802603a:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_CTSF);    // CTS Interrupt Clear Flag
 802603c:	687b      	ldr	r3, [r7, #4]
 802603e:	691b      	ldr	r3, [r3, #16]
 8026040:	681b      	ldr	r3, [r3, #0]
 8026042:	6a1a      	ldr	r2, [r3, #32]
 8026044:	687b      	ldr	r3, [r7, #4]
 8026046:	691b      	ldr	r3, [r3, #16]
 8026048:	681b      	ldr	r3, [r3, #0]
 802604a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802604e:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_CMF);     // Character Match Clear Flag
 8026050:	687b      	ldr	r3, [r7, #4]
 8026052:	691b      	ldr	r3, [r3, #16]
 8026054:	681b      	ldr	r3, [r3, #0]
 8026056:	6a1a      	ldr	r2, [r3, #32]
 8026058:	687b      	ldr	r3, [r7, #4]
 802605a:	691b      	ldr	r3, [r3, #16]
 802605c:	681b      	ldr	r3, [r3, #0]
 802605e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8026062:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_WUF);     // Wake Up from stop mode Clear Flag
 8026064:	687b      	ldr	r3, [r7, #4]
 8026066:	691b      	ldr	r3, [r3, #16]
 8026068:	681b      	ldr	r3, [r3, #0]
 802606a:	6a1a      	ldr	r2, [r3, #32]
 802606c:	687b      	ldr	r3, [r7, #4]
 802606e:	691b      	ldr	r3, [r3, #16]
 8026070:	681b      	ldr	r3, [r3, #0]
 8026072:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8026076:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_TXFECF);  // TXFIFO empty Clear Flag
 8026078:	687b      	ldr	r3, [r7, #4]
 802607a:	691b      	ldr	r3, [r3, #16]
 802607c:	681b      	ldr	r3, [r3, #0]
 802607e:	6a1a      	ldr	r2, [r3, #32]
 8026080:	687b      	ldr	r3, [r7, #4]
 8026082:	691b      	ldr	r3, [r3, #16]
 8026084:	681b      	ldr	r3, [r3, #0]
 8026086:	f042 0220 	orr.w	r2, r2, #32
 802608a:	621a      	str	r2, [r3, #32]
}
 802608c:	bf00      	nop
 802608e:	3710      	adds	r7, #16
 8026090:	46bd      	mov	sp, r7
 8026092:	bd80      	pop	{r7, pc}

08026094 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8026094:	b580      	push	{r7, lr}
 8026096:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM1]);
 8026098:	4802      	ldr	r0, [pc, #8]	; (80260a4 <USART1_IRQHandler+0x10>)
 802609a:	f7ff ff6d 	bl	8025f78 <IUartISR>
}
 802609e:	bf00      	nop
 80260a0:	bd80      	pop	{r7, pc}
 80260a2:	bf00      	nop
 80260a4:	24001964 	.word	0x24001964

080260a8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80260a8:	b580      	push	{r7, lr}
 80260aa:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM2]);
 80260ac:	4802      	ldr	r0, [pc, #8]	; (80260b8 <USART2_IRQHandler+0x10>)
 80260ae:	f7ff ff63 	bl	8025f78 <IUartISR>
}
 80260b2:	bf00      	nop
 80260b4:	bd80      	pop	{r7, pc}
 80260b6:	bf00      	nop
 80260b8:	24001978 	.word	0x24001978

080260bc <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80260bc:	b580      	push	{r7, lr}
 80260be:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM3]);
 80260c0:	4802      	ldr	r0, [pc, #8]	; (80260cc <USART3_IRQHandler+0x10>)
 80260c2:	f7ff ff59 	bl	8025f78 <IUartISR>
}
 80260c6:	bf00      	nop
 80260c8:	bd80      	pop	{r7, pc}
 80260ca:	bf00      	nop
 80260cc:	2400198c 	.word	0x2400198c

080260d0 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80260d0:	b580      	push	{r7, lr}
 80260d2:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM4]);
 80260d4:	4802      	ldr	r0, [pc, #8]	; (80260e0 <UART4_IRQHandler+0x10>)
 80260d6:	f7ff ff4f 	bl	8025f78 <IUartISR>
}
 80260da:	bf00      	nop
 80260dc:	bd80      	pop	{r7, pc}
 80260de:	bf00      	nop
 80260e0:	240019a0 	.word	0x240019a0

080260e4 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80260e4:	b580      	push	{r7, lr}
 80260e6:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM5]);
 80260e8:	4802      	ldr	r0, [pc, #8]	; (80260f4 <UART5_IRQHandler+0x10>)
 80260ea:	f7ff ff45 	bl	8025f78 <IUartISR>
}
 80260ee:	bf00      	nop
 80260f0:	bd80      	pop	{r7, pc}
 80260f2:	bf00      	nop
 80260f4:	240019b4 	.word	0x240019b4

080260f8 <RBuf_Init>:
#define BUF_MIN(x, y)                   ((x) < (y) ? (x) : (y))
#define BUF_MAX(x, y)                   ((x) > (y) ? (x) : (y))


uint8_t RBuf_Init(RBUF_T* pRBuf, void* buffer, size_t size)
{
 80260f8:	b580      	push	{r7, lr}
 80260fa:	b084      	sub	sp, #16
 80260fc:	af00      	add	r7, sp, #0
 80260fe:	60f8      	str	r0, [r7, #12]
 8026100:	60b9      	str	r1, [r7, #8]
 8026102:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || buffer == NULL || size == 0)
 8026104:	68bb      	ldr	r3, [r7, #8]
 8026106:	2b00      	cmp	r3, #0
 8026108:	d005      	beq.n	8026116 <RBuf_Init+0x1e>
 802610a:	68bb      	ldr	r3, [r7, #8]
 802610c:	2b00      	cmp	r3, #0
 802610e:	d002      	beq.n	8026116 <RBuf_Init+0x1e>
 8026110:	687b      	ldr	r3, [r7, #4]
 8026112:	2b00      	cmp	r3, #0
 8026114:	d101      	bne.n	802611a <RBuf_Init+0x22>
    {
        return 0;
 8026116:	2300      	movs	r3, #0
 8026118:	e00b      	b.n	8026132 <RBuf_Init+0x3a>
    }

    BUF_MEMSET((void*)buffer, 0x00, sizeof(*buffer));
 802611a:	2201      	movs	r2, #1
 802611c:	2100      	movs	r1, #0
 802611e:	68b8      	ldr	r0, [r7, #8]
 8026120:	f008 fdda 	bl	802ecd8 <memset>

    pRBuf->size = size;
 8026124:	68fb      	ldr	r3, [r7, #12]
 8026126:	687a      	ldr	r2, [r7, #4]
 8026128:	605a      	str	r2, [r3, #4]
    pRBuf->buff = buffer;
 802612a:	68fb      	ldr	r3, [r7, #12]
 802612c:	68ba      	ldr	r2, [r7, #8]
 802612e:	601a      	str	r2, [r3, #0]

    return 1;
 8026130:	2301      	movs	r3, #1
}
 8026132:	4618      	mov	r0, r3
 8026134:	3710      	adds	r7, #16
 8026136:	46bd      	mov	sp, r7
 8026138:	bd80      	pop	{r7, pc}

0802613a <RBuf_Write>:
 *  btw : 기록할 데이터 크기(Bytes of write)
 *
 *  return : 기록한 데이터 크기, btw 보다 작으면 링버퍼에 공간이 없음을 의미
 */
size_t RBuf_Write(RBUF_T* pRBuf, const void* data, size_t btw)
{
 802613a:	b580      	push	{r7, lr}
 802613c:	b088      	sub	sp, #32
 802613e:	af00      	add	r7, sp, #0
 8026140:	60f8      	str	r0, [r7, #12]
 8026142:	60b9      	str	r1, [r7, #8]
 8026144:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    volatile size_t buff_w_ptr;
    const uint8_t* d = data;
 8026146:	68bb      	ldr	r3, [r7, #8]
 8026148:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(pRBuf) || data == NULL || btw == 0)
 802614a:	68fb      	ldr	r3, [r7, #12]
 802614c:	2b00      	cmp	r3, #0
 802614e:	d00d      	beq.n	802616c <RBuf_Write+0x32>
 8026150:	68fb      	ldr	r3, [r7, #12]
 8026152:	681b      	ldr	r3, [r3, #0]
 8026154:	2b00      	cmp	r3, #0
 8026156:	d009      	beq.n	802616c <RBuf_Write+0x32>
 8026158:	68fb      	ldr	r3, [r7, #12]
 802615a:	685b      	ldr	r3, [r3, #4]
 802615c:	2b00      	cmp	r3, #0
 802615e:	d005      	beq.n	802616c <RBuf_Write+0x32>
 8026160:	68bb      	ldr	r3, [r7, #8]
 8026162:	2b00      	cmp	r3, #0
 8026164:	d002      	beq.n	802616c <RBuf_Write+0x32>
 8026166:	687b      	ldr	r3, [r7, #4]
 8026168:	2b00      	cmp	r3, #0
 802616a:	d101      	bne.n	8026170 <RBuf_Write+0x36>
    {
        return 0;
 802616c:	2300      	movs	r3, #0
 802616e:	e04b      	b.n	8026208 <RBuf_Write+0xce>
    }

    /* Calculate maximum number of bytes available to write */
    free = RBuf_Get_Free(pRBuf);
 8026170:	68f8      	ldr	r0, [r7, #12]
 8026172:	f000 f8b8 	bl	80262e6 <RBuf_Get_Free>
 8026176:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8026178:	687a      	ldr	r2, [r7, #4]
 802617a:	69bb      	ldr	r3, [r7, #24]
 802617c:	4293      	cmp	r3, r2
 802617e:	bf28      	it	cs
 8026180:	4613      	movcs	r3, r2
 8026182:	607b      	str	r3, [r7, #4]
    if (btw == 0)
 8026184:	687b      	ldr	r3, [r7, #4]
 8026186:	2b00      	cmp	r3, #0
 8026188:	d101      	bne.n	802618e <RBuf_Write+0x54>
    {
        return 0;
 802618a:	2300      	movs	r3, #0
 802618c:	e03c      	b.n	8026208 <RBuf_Write+0xce>
    }

    /* Step 1: Write data to linear part of buffer */
    buff_w_ptr = pRBuf->w;
 802618e:	68fb      	ldr	r3, [r7, #12]
 8026190:	68db      	ldr	r3, [r3, #12]
 8026192:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(pRBuf->size - buff_w_ptr, btw);
 8026194:	68fb      	ldr	r3, [r7, #12]
 8026196:	685a      	ldr	r2, [r3, #4]
 8026198:	693b      	ldr	r3, [r7, #16]
 802619a:	1ad3      	subs	r3, r2, r3
 802619c:	687a      	ldr	r2, [r7, #4]
 802619e:	429a      	cmp	r2, r3
 80261a0:	d904      	bls.n	80261ac <RBuf_Write+0x72>
 80261a2:	68fb      	ldr	r3, [r7, #12]
 80261a4:	685a      	ldr	r2, [r3, #4]
 80261a6:	693b      	ldr	r3, [r7, #16]
 80261a8:	1ad3      	subs	r3, r2, r3
 80261aa:	e000      	b.n	80261ae <RBuf_Write+0x74>
 80261ac:	687b      	ldr	r3, [r7, #4]
 80261ae:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&pRBuf->buff[buff_w_ptr], d, tocopy);
 80261b0:	68fb      	ldr	r3, [r7, #12]
 80261b2:	681a      	ldr	r2, [r3, #0]
 80261b4:	693b      	ldr	r3, [r7, #16]
 80261b6:	4413      	add	r3, r2
 80261b8:	697a      	ldr	r2, [r7, #20]
 80261ba:	69f9      	ldr	r1, [r7, #28]
 80261bc:	4618      	mov	r0, r3
 80261be:	f008 fd7d 	bl	802ecbc <memcpy>
    buff_w_ptr += tocopy;
 80261c2:	693a      	ldr	r2, [r7, #16]
 80261c4:	697b      	ldr	r3, [r7, #20]
 80261c6:	4413      	add	r3, r2
 80261c8:	613b      	str	r3, [r7, #16]
    btw -= tocopy;
 80261ca:	687a      	ldr	r2, [r7, #4]
 80261cc:	697b      	ldr	r3, [r7, #20]
 80261ce:	1ad3      	subs	r3, r2, r3
 80261d0:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0)
 80261d2:	687b      	ldr	r3, [r7, #4]
 80261d4:	2b00      	cmp	r3, #0
 80261d6:	d00a      	beq.n	80261ee <RBuf_Write+0xb4>
    {
        BUF_MEMCPY(pRBuf->buff, &d[tocopy], btw);
 80261d8:	68fb      	ldr	r3, [r7, #12]
 80261da:	6818      	ldr	r0, [r3, #0]
 80261dc:	69fa      	ldr	r2, [r7, #28]
 80261de:	697b      	ldr	r3, [r7, #20]
 80261e0:	4413      	add	r3, r2
 80261e2:	687a      	ldr	r2, [r7, #4]
 80261e4:	4619      	mov	r1, r3
 80261e6:	f008 fd69 	bl	802ecbc <memcpy>
        buff_w_ptr = btw;
 80261ea:	687b      	ldr	r3, [r7, #4]
 80261ec:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= pRBuf->size)
 80261ee:	68fb      	ldr	r3, [r7, #12]
 80261f0:	685a      	ldr	r2, [r3, #4]
 80261f2:	693b      	ldr	r3, [r7, #16]
 80261f4:	429a      	cmp	r2, r3
 80261f6:	d801      	bhi.n	80261fc <RBuf_Write+0xc2>
    {
        buff_w_ptr = 0;
 80261f8:	2300      	movs	r3, #0
 80261fa:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    pRBuf->w = buff_w_ptr;
 80261fc:	693a      	ldr	r2, [r7, #16]
 80261fe:	68fb      	ldr	r3, [r7, #12]
 8026200:	60da      	str	r2, [r3, #12]

    return tocopy + btw;
 8026202:	697a      	ldr	r2, [r7, #20]
 8026204:	687b      	ldr	r3, [r7, #4]
 8026206:	4413      	add	r3, r2
}
 8026208:	4618      	mov	r0, r3
 802620a:	3720      	adds	r7, #32
 802620c:	46bd      	mov	sp, r7
 802620e:	bd80      	pop	{r7, pc}

08026210 <RBuf_Read>:
 *  btr	 : 읽을 데이터 크기(Bytes of read)
 *
 *  return : 실제 읽어온 데이터 크기
 */
size_t RBuf_Read(RBUF_T* pRBuf, void* data, size_t btr)
{
 8026210:	b580      	push	{r7, lr}
 8026212:	b088      	sub	sp, #32
 8026214:	af00      	add	r7, sp, #0
 8026216:	60f8      	str	r0, [r7, #12]
 8026218:	60b9      	str	r1, [r7, #8]
 802621a:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    volatile size_t buff_r_ptr;
    uint8_t* d = data;
 802621c:	68bb      	ldr	r3, [r7, #8]
 802621e:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(pRBuf) || data == NULL || btr == 0)
 8026220:	68fb      	ldr	r3, [r7, #12]
 8026222:	2b00      	cmp	r3, #0
 8026224:	d00d      	beq.n	8026242 <RBuf_Read+0x32>
 8026226:	68fb      	ldr	r3, [r7, #12]
 8026228:	681b      	ldr	r3, [r3, #0]
 802622a:	2b00      	cmp	r3, #0
 802622c:	d009      	beq.n	8026242 <RBuf_Read+0x32>
 802622e:	68fb      	ldr	r3, [r7, #12]
 8026230:	685b      	ldr	r3, [r3, #4]
 8026232:	2b00      	cmp	r3, #0
 8026234:	d005      	beq.n	8026242 <RBuf_Read+0x32>
 8026236:	68bb      	ldr	r3, [r7, #8]
 8026238:	2b00      	cmp	r3, #0
 802623a:	d002      	beq.n	8026242 <RBuf_Read+0x32>
 802623c:	687b      	ldr	r3, [r7, #4]
 802623e:	2b00      	cmp	r3, #0
 8026240:	d101      	bne.n	8026246 <RBuf_Read+0x36>
    {
        return 0;
 8026242:	2300      	movs	r3, #0
 8026244:	e04b      	b.n	80262de <RBuf_Read+0xce>
    }

    /* Calculate maximum number of bytes available to read */
    full = RBuf_Get_Full(pRBuf);
 8026246:	68f8      	ldr	r0, [r7, #12]
 8026248:	f000 f884 	bl	8026354 <RBuf_Get_Full>
 802624c:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 802624e:	687a      	ldr	r2, [r7, #4]
 8026250:	69bb      	ldr	r3, [r7, #24]
 8026252:	4293      	cmp	r3, r2
 8026254:	bf28      	it	cs
 8026256:	4613      	movcs	r3, r2
 8026258:	607b      	str	r3, [r7, #4]
    if (btr == 0)
 802625a:	687b      	ldr	r3, [r7, #4]
 802625c:	2b00      	cmp	r3, #0
 802625e:	d101      	bne.n	8026264 <RBuf_Read+0x54>
    {
        return 0;
 8026260:	2300      	movs	r3, #0
 8026262:	e03c      	b.n	80262de <RBuf_Read+0xce>
    }

    /* Step 1: Read data from linear part of buffer */
    buff_r_ptr = pRBuf->r;
 8026264:	68fb      	ldr	r3, [r7, #12]
 8026266:	689b      	ldr	r3, [r3, #8]
 8026268:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(pRBuf->size - buff_r_ptr, btr);
 802626a:	68fb      	ldr	r3, [r7, #12]
 802626c:	685a      	ldr	r2, [r3, #4]
 802626e:	693b      	ldr	r3, [r7, #16]
 8026270:	1ad3      	subs	r3, r2, r3
 8026272:	687a      	ldr	r2, [r7, #4]
 8026274:	429a      	cmp	r2, r3
 8026276:	d904      	bls.n	8026282 <RBuf_Read+0x72>
 8026278:	68fb      	ldr	r3, [r7, #12]
 802627a:	685a      	ldr	r2, [r3, #4]
 802627c:	693b      	ldr	r3, [r7, #16]
 802627e:	1ad3      	subs	r3, r2, r3
 8026280:	e000      	b.n	8026284 <RBuf_Read+0x74>
 8026282:	687b      	ldr	r3, [r7, #4]
 8026284:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &pRBuf->buff[buff_r_ptr], tocopy);
 8026286:	68fb      	ldr	r3, [r7, #12]
 8026288:	681a      	ldr	r2, [r3, #0]
 802628a:	693b      	ldr	r3, [r7, #16]
 802628c:	4413      	add	r3, r2
 802628e:	697a      	ldr	r2, [r7, #20]
 8026290:	4619      	mov	r1, r3
 8026292:	69f8      	ldr	r0, [r7, #28]
 8026294:	f008 fd12 	bl	802ecbc <memcpy>
    buff_r_ptr += tocopy;
 8026298:	693a      	ldr	r2, [r7, #16]
 802629a:	697b      	ldr	r3, [r7, #20]
 802629c:	4413      	add	r3, r2
 802629e:	613b      	str	r3, [r7, #16]
    btr -= tocopy;
 80262a0:	687a      	ldr	r2, [r7, #4]
 80262a2:	697b      	ldr	r3, [r7, #20]
 80262a4:	1ad3      	subs	r3, r2, r3
 80262a6:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0)
 80262a8:	687b      	ldr	r3, [r7, #4]
 80262aa:	2b00      	cmp	r3, #0
 80262ac:	d00a      	beq.n	80262c4 <RBuf_Read+0xb4>
    {
        BUF_MEMCPY(&d[tocopy], pRBuf->buff, btr);
 80262ae:	69fa      	ldr	r2, [r7, #28]
 80262b0:	697b      	ldr	r3, [r7, #20]
 80262b2:	18d0      	adds	r0, r2, r3
 80262b4:	68fb      	ldr	r3, [r7, #12]
 80262b6:	681b      	ldr	r3, [r3, #0]
 80262b8:	687a      	ldr	r2, [r7, #4]
 80262ba:	4619      	mov	r1, r3
 80262bc:	f008 fcfe 	bl	802ecbc <memcpy>
        buff_r_ptr = btr;
 80262c0:	687b      	ldr	r3, [r7, #4]
 80262c2:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= pRBuf->size)
 80262c4:	68fb      	ldr	r3, [r7, #12]
 80262c6:	685a      	ldr	r2, [r3, #4]
 80262c8:	693b      	ldr	r3, [r7, #16]
 80262ca:	429a      	cmp	r2, r3
 80262cc:	d801      	bhi.n	80262d2 <RBuf_Read+0xc2>
    {
        buff_r_ptr = 0;
 80262ce:	2300      	movs	r3, #0
 80262d0:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    pRBuf->r = buff_r_ptr;
 80262d2:	693a      	ldr	r2, [r7, #16]
 80262d4:	68fb      	ldr	r3, [r7, #12]
 80262d6:	609a      	str	r2, [r3, #8]

    return tocopy + btr;
 80262d8:	697a      	ldr	r2, [r7, #20]
 80262da:	687b      	ldr	r3, [r7, #4]
 80262dc:	4413      	add	r3, r2
}
 80262de:	4618      	mov	r0, r3
 80262e0:	3720      	adds	r7, #32
 80262e2:	46bd      	mov	sp, r7
 80262e4:	bd80      	pop	{r7, pc}

080262e6 <RBuf_Get_Free>:

/**
 * 	링버퍼의 기록 가용 크기를 리턴한다.
 */
size_t RBuf_Get_Free(RBUF_T* pRBuf)
{
 80262e6:	b480      	push	{r7}
 80262e8:	b087      	sub	sp, #28
 80262ea:	af00      	add	r7, sp, #0
 80262ec:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(pRBuf))
 80262ee:	687b      	ldr	r3, [r7, #4]
 80262f0:	2b00      	cmp	r3, #0
 80262f2:	d007      	beq.n	8026304 <RBuf_Get_Free+0x1e>
 80262f4:	687b      	ldr	r3, [r7, #4]
 80262f6:	681b      	ldr	r3, [r3, #0]
 80262f8:	2b00      	cmp	r3, #0
 80262fa:	d003      	beq.n	8026304 <RBuf_Get_Free+0x1e>
 80262fc:	687b      	ldr	r3, [r7, #4]
 80262fe:	685b      	ldr	r3, [r3, #4]
 8026300:	2b00      	cmp	r3, #0
 8026302:	d101      	bne.n	8026308 <RBuf_Get_Free+0x22>
    {
        return 0;
 8026304:	2300      	movs	r3, #0
 8026306:	e01f      	b.n	8026348 <RBuf_Get_Free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = pRBuf->w;
 8026308:	687b      	ldr	r3, [r7, #4]
 802630a:	68db      	ldr	r3, [r3, #12]
 802630c:	613b      	str	r3, [r7, #16]
    r = pRBuf->r;
 802630e:	687b      	ldr	r3, [r7, #4]
 8026310:	689b      	ldr	r3, [r3, #8]
 8026312:	60fb      	str	r3, [r7, #12]
    if (w == r)		// empty
 8026314:	693a      	ldr	r2, [r7, #16]
 8026316:	68fb      	ldr	r3, [r7, #12]
 8026318:	429a      	cmp	r2, r3
 802631a:	d103      	bne.n	8026324 <RBuf_Get_Free+0x3e>
    {
        size = pRBuf->size;
 802631c:	687b      	ldr	r3, [r7, #4]
 802631e:	685b      	ldr	r3, [r3, #4]
 8026320:	617b      	str	r3, [r7, #20]
 8026322:	e00f      	b.n	8026344 <RBuf_Get_Free+0x5e>
    }
    else if (r > w)
 8026324:	68fa      	ldr	r2, [r7, #12]
 8026326:	693b      	ldr	r3, [r7, #16]
 8026328:	429a      	cmp	r2, r3
 802632a:	d904      	bls.n	8026336 <RBuf_Get_Free+0x50>
    {
        size = r - w;
 802632c:	68fa      	ldr	r2, [r7, #12]
 802632e:	693b      	ldr	r3, [r7, #16]
 8026330:	1ad3      	subs	r3, r2, r3
 8026332:	617b      	str	r3, [r7, #20]
 8026334:	e006      	b.n	8026344 <RBuf_Get_Free+0x5e>
    }
    else
    {
        size = pRBuf->size - (w - r);
 8026336:	687b      	ldr	r3, [r7, #4]
 8026338:	685a      	ldr	r2, [r3, #4]
 802633a:	68f9      	ldr	r1, [r7, #12]
 802633c:	693b      	ldr	r3, [r7, #16]
 802633e:	1acb      	subs	r3, r1, r3
 8026340:	4413      	add	r3, r2
 8026342:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8026344:	697b      	ldr	r3, [r7, #20]
 8026346:	3b01      	subs	r3, #1
}
 8026348:	4618      	mov	r0, r3
 802634a:	371c      	adds	r7, #28
 802634c:	46bd      	mov	sp, r7
 802634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026352:	4770      	bx	lr

08026354 <RBuf_Get_Full>:

/**
 * 	링버퍼에 저장되어 있는 데이터 크기를 리턴(읽기용)
 */
size_t RBuf_Get_Full(RBUF_T* pRBuf)
{
 8026354:	b480      	push	{r7}
 8026356:	b087      	sub	sp, #28
 8026358:	af00      	add	r7, sp, #0
 802635a:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(pRBuf))
 802635c:	687b      	ldr	r3, [r7, #4]
 802635e:	2b00      	cmp	r3, #0
 8026360:	d007      	beq.n	8026372 <RBuf_Get_Full+0x1e>
 8026362:	687b      	ldr	r3, [r7, #4]
 8026364:	681b      	ldr	r3, [r3, #0]
 8026366:	2b00      	cmp	r3, #0
 8026368:	d003      	beq.n	8026372 <RBuf_Get_Full+0x1e>
 802636a:	687b      	ldr	r3, [r7, #4]
 802636c:	685b      	ldr	r3, [r3, #4]
 802636e:	2b00      	cmp	r3, #0
 8026370:	d101      	bne.n	8026376 <RBuf_Get_Full+0x22>
    {
        return 0;
 8026372:	2300      	movs	r3, #0
 8026374:	e01d      	b.n	80263b2 <RBuf_Get_Full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = pRBuf->w;
 8026376:	687b      	ldr	r3, [r7, #4]
 8026378:	68db      	ldr	r3, [r3, #12]
 802637a:	613b      	str	r3, [r7, #16]
    r = pRBuf->r;
 802637c:	687b      	ldr	r3, [r7, #4]
 802637e:	689b      	ldr	r3, [r3, #8]
 8026380:	60fb      	str	r3, [r7, #12]
    if (w == r)		// buffer is empty
 8026382:	693a      	ldr	r2, [r7, #16]
 8026384:	68fb      	ldr	r3, [r7, #12]
 8026386:	429a      	cmp	r2, r3
 8026388:	d102      	bne.n	8026390 <RBuf_Get_Full+0x3c>
    {
        size = 0;
 802638a:	2300      	movs	r3, #0
 802638c:	617b      	str	r3, [r7, #20]
 802638e:	e00f      	b.n	80263b0 <RBuf_Get_Full+0x5c>
    }
    else if (w > r)
 8026390:	693a      	ldr	r2, [r7, #16]
 8026392:	68fb      	ldr	r3, [r7, #12]
 8026394:	429a      	cmp	r2, r3
 8026396:	d904      	bls.n	80263a2 <RBuf_Get_Full+0x4e>
    {
        size = w - r;
 8026398:	693a      	ldr	r2, [r7, #16]
 802639a:	68fb      	ldr	r3, [r7, #12]
 802639c:	1ad3      	subs	r3, r2, r3
 802639e:	617b      	str	r3, [r7, #20]
 80263a0:	e006      	b.n	80263b0 <RBuf_Get_Full+0x5c>
    }
    else
    {
        size = pRBuf->size - (r - w);
 80263a2:	687b      	ldr	r3, [r7, #4]
 80263a4:	685a      	ldr	r2, [r3, #4]
 80263a6:	6939      	ldr	r1, [r7, #16]
 80263a8:	68fb      	ldr	r3, [r7, #12]
 80263aa:	1acb      	subs	r3, r1, r3
 80263ac:	4413      	add	r3, r2
 80263ae:	617b      	str	r3, [r7, #20]
    }
    return size;
 80263b0:	697b      	ldr	r3, [r7, #20]
}
 80263b2:	4618      	mov	r0, r3
 80263b4:	371c      	adds	r7, #28
 80263b6:	46bd      	mov	sp, r7
 80263b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263bc:	4770      	bx	lr
	...

080263c0 <bsp_InitTimer>:
extern bool bDip_SW_Flag;

extern dword exiAddr[5];

void bsp_InitTimer(void)
{
 80263c0:	b580      	push	{r7, lr}
 80263c2:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim7);
 80263c4:	4802      	ldr	r0, [pc, #8]	; (80263d0 <bsp_InitTimer+0x10>)
 80263c6:	f006 fe85 	bl	802d0d4 <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start_IT(&htim1);
}
 80263ca:	bf00      	nop
 80263cc:	bd80      	pop	{r7, pc}
 80263ce:	bf00      	nop
 80263d0:	24001a7c 	.word	0x24001a7c

080263d4 <bsp_TimCallback>:
**
*/
//BYTE gbDipSW, gbOldDipSW;

void bsp_TimCallback(void)
{
 80263d4:	b5b0      	push	{r4, r5, r7, lr}
 80263d6:	b082      	sub	sp, #8
 80263d8:	af02      	add	r7, sp, #8
    static UINT16   sCount = 0;
    static UINT32   s5Count = 0;

    g_TickCount++;
 80263da:	4b4f      	ldr	r3, [pc, #316]	; (8026518 <bsp_TimCallback+0x144>)
 80263dc:	681b      	ldr	r3, [r3, #0]
 80263de:	3301      	adds	r3, #1
 80263e0:	4a4d      	ldr	r2, [pc, #308]	; (8026518 <bsp_TimCallback+0x144>)
 80263e2:	6013      	str	r3, [r2, #0]
    g_exTimeTick++;
 80263e4:	4b4d      	ldr	r3, [pc, #308]	; (802651c <bsp_TimCallback+0x148>)
 80263e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80263ea:	1c50      	adds	r0, r2, #1
 80263ec:	f143 0100 	adc.w	r1, r3, #0
 80263f0:	4b4a      	ldr	r3, [pc, #296]	; (802651c <bsp_TimCallback+0x148>)
 80263f2:	e9c3 0100 	strd	r0, r1, [r3]
    if (s_Per1msCallBack != NULL)
 80263f6:	4b4a      	ldr	r3, [pc, #296]	; (8026520 <bsp_TimCallback+0x14c>)
 80263f8:	681b      	ldr	r3, [r3, #0]
 80263fa:	2b00      	cmp	r3, #0
 80263fc:	d002      	beq.n	8026404 <bsp_TimCallback+0x30>
        s_Per1msCallBack();
 80263fe:	4b48      	ldr	r3, [pc, #288]	; (8026520 <bsp_TimCallback+0x14c>)
 8026400:	681b      	ldr	r3, [r3, #0]
 8026402:	4798      	blx	r3

    sCount++;
 8026404:	4b47      	ldr	r3, [pc, #284]	; (8026524 <bsp_TimCallback+0x150>)
 8026406:	881b      	ldrh	r3, [r3, #0]
 8026408:	3301      	adds	r3, #1
 802640a:	b29a      	uxth	r2, r3
 802640c:	4b45      	ldr	r3, [pc, #276]	; (8026524 <bsp_TimCallback+0x150>)
 802640e:	801a      	strh	r2, [r3, #0]
    s5Count++;
 8026410:	4b45      	ldr	r3, [pc, #276]	; (8026528 <bsp_TimCallback+0x154>)
 8026412:	681b      	ldr	r3, [r3, #0]
 8026414:	3301      	adds	r3, #1
 8026416:	4a44      	ldr	r2, [pc, #272]	; (8026528 <bsp_TimCallback+0x154>)
 8026418:	6013      	str	r3, [r2, #0]

    if (sCount % 10 == 0)   // per 10ms
 802641a:	4b42      	ldr	r3, [pc, #264]	; (8026524 <bsp_TimCallback+0x150>)
 802641c:	881a      	ldrh	r2, [r3, #0]
 802641e:	4b43      	ldr	r3, [pc, #268]	; (802652c <bsp_TimCallback+0x158>)
 8026420:	fba3 1302 	umull	r1, r3, r3, r2
 8026424:	08d9      	lsrs	r1, r3, #3
 8026426:	460b      	mov	r3, r1
 8026428:	009b      	lsls	r3, r3, #2
 802642a:	440b      	add	r3, r1
 802642c:	005b      	lsls	r3, r3, #1
 802642e:	1ad3      	subs	r3, r2, r3
 8026430:	b29b      	uxth	r3, r3
 8026432:	2b00      	cmp	r3, #0
 8026434:	d106      	bne.n	8026444 <bsp_TimCallback+0x70>
    {
        if (s_Per10msCallBack != NULL)
 8026436:	4b3e      	ldr	r3, [pc, #248]	; (8026530 <bsp_TimCallback+0x15c>)
 8026438:	681b      	ldr	r3, [r3, #0]
 802643a:	2b00      	cmp	r3, #0
 802643c:	d002      	beq.n	8026444 <bsp_TimCallback+0x70>
            s_Per10msCallBack();
 802643e:	4b3c      	ldr	r3, [pc, #240]	; (8026530 <bsp_TimCallback+0x15c>)
 8026440:	681b      	ldr	r3, [r3, #0]
 8026442:	4798      	blx	r3
    }
    if (sCount % 100 == 0)   // per 100ms
    {
    }
    if (sCount % 500 == 0)  // per 0.5 sec : WDT & STS Led toggle
 8026444:	4b37      	ldr	r3, [pc, #220]	; (8026524 <bsp_TimCallback+0x150>)
 8026446:	881b      	ldrh	r3, [r3, #0]
 8026448:	4a3a      	ldr	r2, [pc, #232]	; (8026534 <bsp_TimCallback+0x160>)
 802644a:	fba2 1203 	umull	r1, r2, r2, r3
 802644e:	0952      	lsrs	r2, r2, #5
 8026450:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8026454:	fb01 f202 	mul.w	r2, r1, r2
 8026458:	1a9b      	subs	r3, r3, r2
 802645a:	b29b      	uxth	r3, r3
 802645c:	2b00      	cmp	r3, #0
 802645e:	d107      	bne.n	8026470 <bsp_TimCallback+0x9c>
    {
 		HAL_GPIO_TogglePin(WDT_GPIO_Port, WDT_Pin);
 8026460:	2104      	movs	r1, #4
 8026462:	4835      	ldr	r0, [pc, #212]	; (8026538 <bsp_TimCallback+0x164>)
 8026464:	f003 fdd7 	bl	802a016 <HAL_GPIO_TogglePin>
 		HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED1_Pin);
 8026468:	2110      	movs	r1, #16
 802646a:	4834      	ldr	r0, [pc, #208]	; (802653c <bsp_TimCallback+0x168>)
 802646c:	f003 fdd3 	bl	802a016 <HAL_GPIO_TogglePin>
    }
    if (sCount >= 1000)     // per 1sec
 8026470:	4b2c      	ldr	r3, [pc, #176]	; (8026524 <bsp_TimCallback+0x150>)
 8026472:	881b      	ldrh	r3, [r3, #0]
 8026474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8026478:	d342      	bcc.n	8026500 <bsp_TimCallback+0x12c>
    {
        sCount = 0;
 802647a:	4b2a      	ldr	r3, [pc, #168]	; (8026524 <bsp_TimCallback+0x150>)
 802647c:	2200      	movs	r2, #0
 802647e:	801a      	strh	r2, [r3, #0]
        g_Epoch++;
 8026480:	4b2f      	ldr	r3, [pc, #188]	; (8026540 <bsp_TimCallback+0x16c>)
 8026482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026486:	1c54      	adds	r4, r2, #1
 8026488:	f143 0500 	adc.w	r5, r3, #0
 802648c:	4b2c      	ldr	r3, [pc, #176]	; (8026540 <bsp_TimCallback+0x16c>)
 802648e:	e9c3 4500 	strd	r4, r5, [r3]
        //printf("%s\n",strmtime());
      //  printf("in [0x%x]\n",inb(exiAddr[0]));
       printf("in [0x%x][0x%x][0x%x][0x%x][0x%x]\n",inb(exiAddr[0]),inb(exiAddr[1]),inb(exiAddr[2]),inb(exiAddr[3]),inb(exiAddr[4]));
 8026492:	4b2c      	ldr	r3, [pc, #176]	; (8026544 <bsp_TimCallback+0x170>)
 8026494:	681b      	ldr	r3, [r3, #0]
 8026496:	781b      	ldrb	r3, [r3, #0]
 8026498:	b2db      	uxtb	r3, r3
 802649a:	4619      	mov	r1, r3
 802649c:	4b29      	ldr	r3, [pc, #164]	; (8026544 <bsp_TimCallback+0x170>)
 802649e:	685b      	ldr	r3, [r3, #4]
 80264a0:	781b      	ldrb	r3, [r3, #0]
 80264a2:	b2db      	uxtb	r3, r3
 80264a4:	4618      	mov	r0, r3
 80264a6:	4b27      	ldr	r3, [pc, #156]	; (8026544 <bsp_TimCallback+0x170>)
 80264a8:	689b      	ldr	r3, [r3, #8]
 80264aa:	781b      	ldrb	r3, [r3, #0]
 80264ac:	b2db      	uxtb	r3, r3
 80264ae:	461c      	mov	r4, r3
 80264b0:	4b24      	ldr	r3, [pc, #144]	; (8026544 <bsp_TimCallback+0x170>)
 80264b2:	68db      	ldr	r3, [r3, #12]
 80264b4:	781b      	ldrb	r3, [r3, #0]
 80264b6:	b2db      	uxtb	r3, r3
 80264b8:	461a      	mov	r2, r3
 80264ba:	4b22      	ldr	r3, [pc, #136]	; (8026544 <bsp_TimCallback+0x170>)
 80264bc:	691b      	ldr	r3, [r3, #16]
 80264be:	781b      	ldrb	r3, [r3, #0]
 80264c0:	b2db      	uxtb	r3, r3
 80264c2:	9301      	str	r3, [sp, #4]
 80264c4:	9200      	str	r2, [sp, #0]
 80264c6:	4623      	mov	r3, r4
 80264c8:	4602      	mov	r2, r0
 80264ca:	481f      	ldr	r0, [pc, #124]	; (8026548 <bsp_TimCallback+0x174>)
 80264cc:	f008 fcec 	bl	802eea8 <iprintf>

       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED1_Pin);
 80264d0:	2110      	movs	r1, #16
 80264d2:	481a      	ldr	r0, [pc, #104]	; (802653c <bsp_TimCallback+0x168>)
 80264d4:	f003 fd9f 	bl	802a016 <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED2_Pin);
 80264d8:	2120      	movs	r1, #32
 80264da:	4818      	ldr	r0, [pc, #96]	; (802653c <bsp_TimCallback+0x168>)
 80264dc:	f003 fd9b 	bl	802a016 <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED3_Pin);
 80264e0:	2140      	movs	r1, #64	; 0x40
 80264e2:	4816      	ldr	r0, [pc, #88]	; (802653c <bsp_TimCallback+0x168>)
 80264e4:	f003 fd97 	bl	802a016 <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED4_Pin);
 80264e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80264ec:	4813      	ldr	r0, [pc, #76]	; (802653c <bsp_TimCallback+0x168>)
 80264ee:	f003 fd92 	bl	802a016 <HAL_GPIO_TogglePin>



       //outb(WRITE00_ADR,test2);

        if (s_Per1SecCallBack != NULL)
 80264f2:	4b16      	ldr	r3, [pc, #88]	; (802654c <bsp_TimCallback+0x178>)
 80264f4:	681b      	ldr	r3, [r3, #0]
 80264f6:	2b00      	cmp	r3, #0
 80264f8:	d002      	beq.n	8026500 <bsp_TimCallback+0x12c>
            s_Per1SecCallBack();
 80264fa:	4b14      	ldr	r3, [pc, #80]	; (802654c <bsp_TimCallback+0x178>)
 80264fc:	681b      	ldr	r3, [r3, #0]
 80264fe:	4798      	blx	r3

    }

    if (s5Count >= 5000)     // per 5sec
 8026500:	4b09      	ldr	r3, [pc, #36]	; (8026528 <bsp_TimCallback+0x154>)
 8026502:	681b      	ldr	r3, [r3, #0]
 8026504:	f241 3287 	movw	r2, #4999	; 0x1387
 8026508:	4293      	cmp	r3, r2
 802650a:	d902      	bls.n	8026512 <bsp_TimCallback+0x13e>
    {
    	s5Count = 0;
 802650c:	4b06      	ldr	r3, [pc, #24]	; (8026528 <bsp_TimCallback+0x154>)
 802650e:	2200      	movs	r2, #0
 8026510:	601a      	str	r2, [r3, #0]

    }
}
 8026512:	bf00      	nop
 8026514:	46bd      	mov	sp, r7
 8026516:	bdb0      	pop	{r4, r5, r7, pc}
 8026518:	240019c8 	.word	0x240019c8
 802651c:	240019d8 	.word	0x240019d8
 8026520:	240019e0 	.word	0x240019e0
 8026524:	240019ec 	.word	0x240019ec
 8026528:	240019f0 	.word	0x240019f0
 802652c:	cccccccd 	.word	0xcccccccd
 8026530:	240019e4 	.word	0x240019e4
 8026534:	10624dd3 	.word	0x10624dd3
 8026538:	58020c00 	.word	0x58020c00
 802653c:	58020800 	.word	0x58020800
 8026540:	240019d0 	.word	0x240019d0
 8026544:	2400002c 	.word	0x2400002c
 8026548:	08030bc8 	.word	0x08030bc8
 802654c:	240019e8 	.word	0x240019e8

08026550 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8026550:	b580      	push	{r7, lr}
 8026552:	b082      	sub	sp, #8
 8026554:	af00      	add	r7, sp, #0
 8026556:	6078      	str	r0, [r7, #4]

    if (htim->Instance == htim7.Instance)
 8026558:	687b      	ldr	r3, [r7, #4]
 802655a:	681a      	ldr	r2, [r3, #0]
 802655c:	4b04      	ldr	r3, [pc, #16]	; (8026570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 802655e:	681b      	ldr	r3, [r3, #0]
 8026560:	429a      	cmp	r2, r3
 8026562:	d101      	bne.n	8026568 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        bsp_TimCallback();
 8026564:	f7ff ff36 	bl	80263d4 <bsp_TimCallback>
    }
}
 8026568:	bf00      	nop
 802656a:	3708      	adds	r7, #8
 802656c:	46bd      	mov	sp, r7
 802656e:	bd80      	pop	{r7, pc}
 8026570:	24001a7c 	.word	0x24001a7c

08026574 <bsp_InitUart>:
#include "bsp.h"
#include <stdio.h>
#include <stdarg.h>

void bsp_InitUart()
{
 8026574:	b580      	push	{r7, lr}
 8026576:	af00      	add	r7, sp, #0
	bsp_InitIUart();
 8026578:	f7ff fa2e 	bl	80259d8 <bsp_InitIUart>
}
 802657c:	bf00      	nop
 802657e:	bd80      	pop	{r7, pc}

08026580 <Uart_SendByte>:
}



int Uart_SendByte(int nComPort, BYTE c)
{
 8026580:	b580      	push	{r7, lr}
 8026582:	b082      	sub	sp, #8
 8026584:	af00      	add	r7, sp, #0
 8026586:	6078      	str	r0, [r7, #4]
 8026588:	460b      	mov	r3, r1
 802658a:	70fb      	strb	r3, [r7, #3]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 802658c:	687b      	ldr	r3, [r7, #4]
 802658e:	2b00      	cmp	r3, #0
 8026590:	db09      	blt.n	80265a6 <Uart_SendByte+0x26>
 8026592:	687b      	ldr	r3, [r7, #4]
 8026594:	2b04      	cmp	r3, #4
 8026596:	dc06      	bgt.n	80265a6 <Uart_SendByte+0x26>
		return (IUart_SendByte(nComPort, c));
 8026598:	78fb      	ldrb	r3, [r7, #3]
 802659a:	4619      	mov	r1, r3
 802659c:	6878      	ldr	r0, [r7, #4]
 802659e:	f7ff fbf9 	bl	8025d94 <IUart_SendByte>
 80265a2:	4603      	mov	r3, r0
 80265a4:	e001      	b.n	80265aa <Uart_SendByte+0x2a>

	return -1;
 80265a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80265aa:	4618      	mov	r0, r3
 80265ac:	3708      	adds	r7, #8
 80265ae:	46bd      	mov	sp, r7
 80265b0:	bd80      	pop	{r7, pc}

080265b2 <Uart_SendBuffer>:



int Uart_SendBuffer(int nComPort, PUCHAR pBuf, UINT16 usLen)
{
 80265b2:	b580      	push	{r7, lr}
 80265b4:	b084      	sub	sp, #16
 80265b6:	af00      	add	r7, sp, #0
 80265b8:	60f8      	str	r0, [r7, #12]
 80265ba:	60b9      	str	r1, [r7, #8]
 80265bc:	4613      	mov	r3, r2
 80265be:	80fb      	strh	r3, [r7, #6]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 80265c0:	68fb      	ldr	r3, [r7, #12]
 80265c2:	2b00      	cmp	r3, #0
 80265c4:	db0a      	blt.n	80265dc <Uart_SendBuffer+0x2a>
 80265c6:	68fb      	ldr	r3, [r7, #12]
 80265c8:	2b04      	cmp	r3, #4
 80265ca:	dc07      	bgt.n	80265dc <Uart_SendBuffer+0x2a>
		return (IUart_SendBuffer(nComPort, pBuf, usLen));
 80265cc:	88fb      	ldrh	r3, [r7, #6]
 80265ce:	461a      	mov	r2, r3
 80265d0:	68b9      	ldr	r1, [r7, #8]
 80265d2:	68f8      	ldr	r0, [r7, #12]
 80265d4:	f7ff fc12 	bl	8025dfc <IUart_SendBuffer>
 80265d8:	4603      	mov	r3, r0
 80265da:	e001      	b.n	80265e0 <Uart_SendBuffer+0x2e>

	return -1;
 80265dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80265e0:	4618      	mov	r0, r3
 80265e2:	3710      	adds	r7, #16
 80265e4:	46bd      	mov	sp, r7
 80265e6:	bd80      	pop	{r7, pc}

080265e8 <Uart_RecvByteBlocked>:
    return -1;
}


int Uart_RecvByteBlocked(int nComPort)
{
 80265e8:	b580      	push	{r7, lr}
 80265ea:	b082      	sub	sp, #8
 80265ec:	af00      	add	r7, sp, #0
 80265ee:	6078      	str	r0, [r7, #4]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 80265f0:	687b      	ldr	r3, [r7, #4]
 80265f2:	2b00      	cmp	r3, #0
 80265f4:	db07      	blt.n	8026606 <Uart_RecvByteBlocked+0x1e>
 80265f6:	687b      	ldr	r3, [r7, #4]
 80265f8:	2b04      	cmp	r3, #4
 80265fa:	dc04      	bgt.n	8026606 <Uart_RecvByteBlocked+0x1e>
        return (IUart_RecvByteBlocked(nComPort));
 80265fc:	6878      	ldr	r0, [r7, #4]
 80265fe:	f7ff fc93 	bl	8025f28 <IUart_RecvByteBlocked>
 8026602:	4603      	mov	r3, r0
 8026604:	e001      	b.n	802660a <Uart_RecvByteBlocked+0x22>

    return -1;
 8026606:	f04f 33ff 	mov.w	r3, #4294967295
}
 802660a:	4618      	mov	r0, r3
 802660c:	3708      	adds	r7, #8
 802660e:	46bd      	mov	sp, r7
 8026610:	bd80      	pop	{r7, pc}

08026612 <__io_putchar>:

/*
**	CubeIde 호환 함수
 */
int __io_putchar(int ch)
{
 8026612:	b580      	push	{r7, lr}
 8026614:	b082      	sub	sp, #8
 8026616:	af00      	add	r7, sp, #0
 8026618:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 802661a:	687b      	ldr	r3, [r7, #4]
 802661c:	2b0a      	cmp	r3, #10
 802661e:	d102      	bne.n	8026626 <__io_putchar+0x14>
		_low_level_put('\r');
 8026620:	200d      	movs	r0, #13
 8026622:	f000 f84b 	bl	80266bc <_low_level_put>
	_low_level_put((char)ch);
 8026626:	687b      	ldr	r3, [r7, #4]
 8026628:	b2db      	uxtb	r3, r3
 802662a:	4618      	mov	r0, r3
 802662c:	f000 f846 	bl	80266bc <_low_level_put>

	return ch;
 8026630:	687b      	ldr	r3, [r7, #4]
}
 8026632:	4618      	mov	r0, r3
 8026634:	3708      	adds	r7, #8
 8026636:	46bd      	mov	sp, r7
 8026638:	bd80      	pop	{r7, pc}
	...

0802663c <__io_getchar>:


// scanf 사용시 필요
int __io_getchar(void)
{
 802663c:	b580      	push	{r7, lr}
 802663e:	b082      	sub	sp, #8
 8026640:	af00      	add	r7, sp, #0
    char data[4];
    uint8_t ch, len = 1;
 8026642:	2301      	movs	r3, #1
 8026644:	71fb      	strb	r3, [r7, #7]

    ch = (uint8_t)Uart_RecvByteBlocked(DEBUG_PORT);
 8026646:	2000      	movs	r0, #0
 8026648:	f7ff ffce 	bl	80265e8 <Uart_RecvByteBlocked>
 802664c:	4603      	mov	r3, r0
 802664e:	71bb      	strb	r3, [r7, #6]

    memset(data, 0x00, 4);
 8026650:	463b      	mov	r3, r7
 8026652:	2204      	movs	r2, #4
 8026654:	2100      	movs	r1, #0
 8026656:	4618      	mov	r0, r3
 8026658:	f008 fb3e 	bl	802ecd8 <memset>
    switch(ch)
 802665c:	79bb      	ldrb	r3, [r7, #6]
 802665e:	2b7f      	cmp	r3, #127	; 0x7f
 8026660:	d011      	beq.n	8026686 <__io_getchar+0x4a>
 8026662:	2b7f      	cmp	r3, #127	; 0x7f
 8026664:	dc17      	bgt.n	8026696 <__io_getchar+0x5a>
 8026666:	2b0d      	cmp	r3, #13
 8026668:	d005      	beq.n	8026676 <__io_getchar+0x3a>
 802666a:	2b0d      	cmp	r3, #13
 802666c:	dc13      	bgt.n	8026696 <__io_getchar+0x5a>
 802666e:	2b08      	cmp	r3, #8
 8026670:	d009      	beq.n	8026686 <__io_getchar+0x4a>
 8026672:	2b0a      	cmp	r3, #10
 8026674:	d10f      	bne.n	8026696 <__io_getchar+0x5a>
    {
        case '\r':
        case '\n':
            len = 2;
 8026676:	2302      	movs	r3, #2
 8026678:	71fb      	strb	r3, [r7, #7]
            sprintf(data, "\r\n");
 802667a:	463b      	mov	r3, r7
 802667c:	490d      	ldr	r1, [pc, #52]	; (80266b4 <__io_getchar+0x78>)
 802667e:	4618      	mov	r0, r3
 8026680:	f008 fc3a 	bl	802eef8 <siprintf>
            break;
 8026684:	e00a      	b.n	802669c <__io_getchar+0x60>

        case '\b':
        case 0x7F:
            len = 3;
 8026686:	2303      	movs	r3, #3
 8026688:	71fb      	strb	r3, [r7, #7]
            sprintf(data, "\b \b");
 802668a:	463b      	mov	r3, r7
 802668c:	490a      	ldr	r1, [pc, #40]	; (80266b8 <__io_getchar+0x7c>)
 802668e:	4618      	mov	r0, r3
 8026690:	f008 fc32 	bl	802eef8 <siprintf>
            break;
 8026694:	e002      	b.n	802669c <__io_getchar+0x60>

        default:
            data[0] = ch;
 8026696:	79bb      	ldrb	r3, [r7, #6]
 8026698:	703b      	strb	r3, [r7, #0]
            break;
 802669a:	bf00      	nop
    }
    Uart_SendBuffer(DEBUG_PORT, (uint8_t *)data, len);
 802669c:	79fb      	ldrb	r3, [r7, #7]
 802669e:	b29a      	uxth	r2, r3
 80266a0:	463b      	mov	r3, r7
 80266a2:	4619      	mov	r1, r3
 80266a4:	2000      	movs	r0, #0
 80266a6:	f7ff ff84 	bl	80265b2 <Uart_SendBuffer>

    return ch;
 80266aa:	79bb      	ldrb	r3, [r7, #6]
}
 80266ac:	4618      	mov	r0, r3
 80266ae:	3708      	adds	r7, #8
 80266b0:	46bd      	mov	sp, r7
 80266b2:	bd80      	pop	{r7, pc}
 80266b4:	08030c50 	.word	0x08030c50
 80266b8:	08030c54 	.word	0x08030c54

080266bc <_low_level_put>:



void _low_level_put(char c)
{
 80266bc:	b580      	push	{r7, lr}
 80266be:	b082      	sub	sp, #8
 80266c0:	af00      	add	r7, sp, #0
 80266c2:	4603      	mov	r3, r0
 80266c4:	71fb      	strb	r3, [r7, #7]
    Uart_SendByte(DEBUG_PORT, c);
 80266c6:	79fb      	ldrb	r3, [r7, #7]
 80266c8:	4619      	mov	r1, r3
 80266ca:	2000      	movs	r0, #0
 80266cc:	f7ff ff58 	bl	8026580 <Uart_SendByte>

//	USART1->TDR = c;
//
//	while((USART1->ISR & USART_ISR_TC) == 0)
//	{}
}
 80266d0:	bf00      	nop
 80266d2:	3708      	adds	r7, #8
 80266d4:	46bd      	mov	sp, r7
 80266d6:	bd80      	pop	{r7, pc}

080266d8 <_putchar>:
}



int _putchar(int c)
{
 80266d8:	b580      	push	{r7, lr}
 80266da:	b082      	sub	sp, #8
 80266dc:	af00      	add	r7, sp, #0
 80266de:	6078      	str	r0, [r7, #4]
    if ( c == '\n' )
 80266e0:	687b      	ldr	r3, [r7, #4]
 80266e2:	2b0a      	cmp	r3, #10
 80266e4:	d102      	bne.n	80266ec <_putchar+0x14>
        _low_level_put((char)'\r');
 80266e6:	200d      	movs	r0, #13
 80266e8:	f7ff ffe8 	bl	80266bc <_low_level_put>
    _low_level_put((char)c);
 80266ec:	687b      	ldr	r3, [r7, #4]
 80266ee:	b2db      	uxtb	r3, r3
 80266f0:	4618      	mov	r0, r3
 80266f2:	f7ff ffe3 	bl	80266bc <_low_level_put>

    return(c);
 80266f6:	687b      	ldr	r3, [r7, #4]
}
 80266f8:	4618      	mov	r0, r3
 80266fa:	3708      	adds	r7, #8
 80266fc:	46bd      	mov	sp, r7
 80266fe:	bd80      	pop	{r7, pc}

08026700 <U3_Putch>:
    Uart_Printf(nComPort, "\r\n");
}


void U3_Putch(BYTE c)
{
 8026700:	b580      	push	{r7, lr}
 8026702:	b082      	sub	sp, #8
 8026704:	af00      	add	r7, sp, #0
 8026706:	4603      	mov	r3, r0
 8026708:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM3, (uint8_t)c);
 802670a:	79fb      	ldrb	r3, [r7, #7]
 802670c:	4619      	mov	r1, r3
 802670e:	2002      	movs	r0, #2
 8026710:	f7ff fb40 	bl	8025d94 <IUart_SendByte>
}
 8026714:	bf00      	nop
 8026716:	3708      	adds	r7, #8
 8026718:	46bd      	mov	sp, r7
 802671a:	bd80      	pop	{r7, pc}

0802671c <MPU_Config>:
CRC_HandleTypeDef hcrc;



void MPU_Config(void)
{
 802671c:	b580      	push	{r7, lr}
 802671e:	b084      	sub	sp, #16
 8026720:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8026722:	463b      	mov	r3, r7
 8026724:	2200      	movs	r2, #0
 8026726:	601a      	str	r2, [r3, #0]
 8026728:	605a      	str	r2, [r3, #4]
 802672a:	609a      	str	r2, [r3, #8]
 802672c:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 802672e:	f003 f90b 	bl	8029948 <HAL_MPU_Disable>

    /** 전체 메모리 영역 설정 - 기본설정[0x60000000~0xDFFFFFFF:Strongly ordered]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8026732:	2301      	movs	r3, #1
 8026734:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8026736:	2300      	movs	r3, #0
 8026738:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x00;
 802673a:	2300      	movs	r3, #0
 802673c:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 802673e:	231f      	movs	r3, #31
 8026740:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x87;
 8026742:	2387      	movs	r3, #135	; 0x87
 8026744:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8026746:	2303      	movs	r3, #3
 8026748:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 802674a:	2300      	movs	r3, #0
 802674c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 802674e:	2301      	movs	r3, #1
 8026750:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8026752:	2301      	movs	r3, #1
 8026754:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8026756:	2300      	movs	r3, #0
 8026758:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 802675a:	2300      	movs	r3, #0
 802675c:	73fb      	strb	r3, [r7, #15]


    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 802675e:	463b      	mov	r3, r7
 8026760:	4618      	mov	r0, r3
 8026762:	f003 f929 	bl	80299b8 <HAL_MPU_ConfigRegion>

    /** FPGA[0x60000000, 1K]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8026766:	2301      	movs	r3, #1
 8026768:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 802676a:	2301      	movs	r3, #1
 802676c:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x60000000;
 802676e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8026772:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8026774:	2309      	movs	r3, #9
 8026776:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8026778:	2300      	movs	r3, #0
 802677a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 802677c:	2300      	movs	r3, #0
 802677e:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8026780:	2303      	movs	r3, #3
 8026782:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8026784:	2301      	movs	r3, #1
 8026786:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8026788:	2301      	movs	r3, #1
 802678a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 802678c:	2300      	movs	r3, #0
 802678e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8026790:	2300      	movs	r3, #0
 8026792:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8026794:	463b      	mov	r3, r7
 8026796:	4618      	mov	r0, r3
 8026798:	f003 f90e 	bl	80299b8 <HAL_MPU_ConfigRegion>

    /** NAND[0x80000000, 128M]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 802679c:	2301      	movs	r3, #1
 802679e:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80267a0:	2302      	movs	r3, #2
 80267a2:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x80000000;
 80267a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80267a8:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80267aa:	231a      	movs	r3, #26
 80267ac:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80267ae:	2300      	movs	r3, #0
 80267b0:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80267b2:	2300      	movs	r3, #0
 80267b4:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80267b6:	2303      	movs	r3, #3
 80267b8:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80267ba:	2301      	movs	r3, #1
 80267bc:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80267be:	2301      	movs	r3, #1
 80267c0:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80267c2:	2300      	movs	r3, #0
 80267c4:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80267c6:	2300      	movs	r3, #0
 80267c8:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80267ca:	463b      	mov	r3, r7
 80267cc:	4618      	mov	r0, r3
 80267ce:	f003 f8f3 	bl	80299b8 <HAL_MPU_ConfigRegion>

    /** SDRAM[0xD0000000] - IS45S16400J : 1 Mega Bits x 16 Bits x 4 Banks(64MBit)
     **  TEX:1, C:1, B:1, S:0 - MemType:Normal -> Write back, write and read allocate
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80267d2:	2301      	movs	r3, #1
 80267d4:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80267d6:	2303      	movs	r3, #3
 80267d8:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0xD0000000;
 80267da:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80267de:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80267e0:	2316      	movs	r3, #22
 80267e2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80267e4:	2300      	movs	r3, #0
 80267e6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80267e8:	2301      	movs	r3, #1
 80267ea:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80267ec:	2303      	movs	r3, #3
 80267ee:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80267f0:	2301      	movs	r3, #1
 80267f2:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80267f4:	2300      	movs	r3, #0
 80267f6:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80267f8:	2301      	movs	r3, #1
 80267fa:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80267fc:	2301      	movs	r3, #1
 80267fe:	73fb      	strb	r3, [r7, #15]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8026800:	463b      	mov	r3, r7
 8026802:	4618      	mov	r0, r3
 8026804:	f003 f8d8 	bl	80299b8 <HAL_MPU_ConfigRegion>

    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8026808:	2004      	movs	r0, #4
 802680a:	f003 f8b5 	bl	8029978 <HAL_MPU_Enable>
}
 802680e:	bf00      	nop
 8026810:	3710      	adds	r7, #16
 8026812:	46bd      	mov	sp, r7
 8026814:	bd80      	pop	{r7, pc}
	...

08026818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8026818:	b580      	push	{r7, lr}
 802681a:	b09e      	sub	sp, #120	; 0x78
 802681c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802681e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8026822:	224c      	movs	r2, #76	; 0x4c
 8026824:	2100      	movs	r1, #0
 8026826:	4618      	mov	r0, r3
 8026828:	f008 fa56 	bl	802ecd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802682c:	f107 030c 	add.w	r3, r7, #12
 8026830:	2220      	movs	r2, #32
 8026832:	2100      	movs	r1, #0
 8026834:	4618      	mov	r0, r3
 8026836:	f008 fa4f 	bl	802ecd8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 802683a:	2002      	movs	r0, #2
 802683c:	f003 fc16 	bl	802a06c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8026840:	2300      	movs	r3, #0
 8026842:	60bb      	str	r3, [r7, #8]
 8026844:	4b4e      	ldr	r3, [pc, #312]	; (8026980 <SystemClock_Config+0x168>)
 8026846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026848:	4a4d      	ldr	r2, [pc, #308]	; (8026980 <SystemClock_Config+0x168>)
 802684a:	f023 0301 	bic.w	r3, r3, #1
 802684e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8026850:	4b4b      	ldr	r3, [pc, #300]	; (8026980 <SystemClock_Config+0x168>)
 8026852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026854:	f003 0301 	and.w	r3, r3, #1
 8026858:	60bb      	str	r3, [r7, #8]
 802685a:	4b4a      	ldr	r3, [pc, #296]	; (8026984 <SystemClock_Config+0x16c>)
 802685c:	699b      	ldr	r3, [r3, #24]
 802685e:	4a49      	ldr	r2, [pc, #292]	; (8026984 <SystemClock_Config+0x16c>)
 8026860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8026864:	6193      	str	r3, [r2, #24]
 8026866:	4b47      	ldr	r3, [pc, #284]	; (8026984 <SystemClock_Config+0x16c>)
 8026868:	699b      	ldr	r3, [r3, #24]
 802686a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802686e:	60bb      	str	r3, [r7, #8]
 8026870:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8026872:	bf00      	nop
 8026874:	4b43      	ldr	r3, [pc, #268]	; (8026984 <SystemClock_Config+0x16c>)
 8026876:	699b      	ldr	r3, [r3, #24]
 8026878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802687c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026880:	d1f8      	bne.n	8026874 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8026882:	4b41      	ldr	r3, [pc, #260]	; (8026988 <SystemClock_Config+0x170>)
 8026884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8026888:	4a3f      	ldr	r2, [pc, #252]	; (8026988 <SystemClock_Config+0x170>)
 802688a:	f043 0302 	orr.w	r3, r3, #2
 802688e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8026892:	4b3d      	ldr	r3, [pc, #244]	; (8026988 <SystemClock_Config+0x170>)
 8026894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8026898:	f003 0302 	and.w	r3, r3, #2
 802689c:	607b      	str	r3, [r7, #4]
 802689e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80268a0:	2300      	movs	r3, #0
 80268a2:	603b      	str	r3, [r7, #0]
 80268a4:	4b37      	ldr	r3, [pc, #220]	; (8026984 <SystemClock_Config+0x16c>)
 80268a6:	699b      	ldr	r3, [r3, #24]
 80268a8:	4a36      	ldr	r2, [pc, #216]	; (8026984 <SystemClock_Config+0x16c>)
 80268aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80268ae:	6193      	str	r3, [r2, #24]
 80268b0:	4b34      	ldr	r3, [pc, #208]	; (8026984 <SystemClock_Config+0x16c>)
 80268b2:	699b      	ldr	r3, [r3, #24]
 80268b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80268b8:	603b      	str	r3, [r7, #0]
 80268ba:	4b31      	ldr	r3, [pc, #196]	; (8026980 <SystemClock_Config+0x168>)
 80268bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80268be:	4a30      	ldr	r2, [pc, #192]	; (8026980 <SystemClock_Config+0x168>)
 80268c0:	f043 0301 	orr.w	r3, r3, #1
 80268c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80268c6:	4b2e      	ldr	r3, [pc, #184]	; (8026980 <SystemClock_Config+0x168>)
 80268c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80268ca:	f003 0301 	and.w	r3, r3, #1
 80268ce:	603b      	str	r3, [r7, #0]
 80268d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80268d2:	bf00      	nop
 80268d4:	4b2b      	ldr	r3, [pc, #172]	; (8026984 <SystemClock_Config+0x16c>)
 80268d6:	699b      	ldr	r3, [r3, #24]
 80268d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80268dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80268e0:	d1f8      	bne.n	80268d4 <SystemClock_Config+0xbc>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80268e2:	f003 fbb3 	bl	802a04c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80268e6:	f002 ff13 	bl	8029710 <HAL_GetREVID>
 80268ea:	4b27      	ldr	r3, [pc, #156]	; (8026988 <SystemClock_Config+0x170>)
 80268ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80268ee:	4a26      	ldr	r2, [pc, #152]	; (8026988 <SystemClock_Config+0x170>)
 80268f0:	f023 0318 	bic.w	r3, r3, #24
 80268f4:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80268f6:	2305      	movs	r3, #5
 80268f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80268fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80268fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8026900:	2301      	movs	r3, #1
 8026902:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8026904:	2302      	movs	r3, #2
 8026906:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8026908:	2302      	movs	r3, #2
 802690a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 802690c:	2305      	movs	r3, #5
 802690e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8026910:	23c0      	movs	r3, #192	; 0xc0
 8026912:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8026914:	2302      	movs	r3, #2
 8026916:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8026918:	2301      	movs	r3, #1
 802691a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 802691c:	2302      	movs	r3, #2
 802691e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8026920:	2308      	movs	r3, #8
 8026922:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8026924:	2300      	movs	r3, #0
 8026926:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8026928:	2300      	movs	r3, #0
 802692a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802692c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8026930:	4618      	mov	r0, r3
 8026932:	f003 fbd5 	bl	802a0e0 <HAL_RCC_OscConfig>
 8026936:	4603      	mov	r3, r0
 8026938:	2b00      	cmp	r3, #0
 802693a:	d001      	beq.n	8026940 <SystemClock_Config+0x128>
  {
    Error_Handler();
 802693c:	f000 fceb 	bl	8027316 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8026940:	233f      	movs	r3, #63	; 0x3f
 8026942:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8026944:	2303      	movs	r3, #3
 8026946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8026948:	2300      	movs	r3, #0
 802694a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 802694c:	2308      	movs	r3, #8
 802694e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8026950:	2340      	movs	r3, #64	; 0x40
 8026952:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8026954:	2340      	movs	r3, #64	; 0x40
 8026956:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8026958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802695c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 802695e:	2340      	movs	r3, #64	; 0x40
 8026960:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8026962:	f107 030c 	add.w	r3, r7, #12
 8026966:	2104      	movs	r1, #4
 8026968:	4618      	mov	r0, r3
 802696a:	f004 f813 	bl	802a994 <HAL_RCC_ClockConfig>
 802696e:	4603      	mov	r3, r0
 8026970:	2b00      	cmp	r3, #0
 8026972:	d001      	beq.n	8026978 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8026974:	f000 fccf 	bl	8027316 <Error_Handler>
  }
}
 8026978:	bf00      	nop
 802697a:	3778      	adds	r7, #120	; 0x78
 802697c:	46bd      	mov	sp, r7
 802697e:	bd80      	pop	{r7, pc}
 8026980:	58000400 	.word	0x58000400
 8026984:	58024800 	.word	0x58024800
 8026988:	58024400 	.word	0x58024400

0802698c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 802698c:	b580      	push	{r7, lr}
 802698e:	b08e      	sub	sp, #56	; 0x38
 8026990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026996:	2200      	movs	r2, #0
 8026998:	601a      	str	r2, [r3, #0]
 802699a:	605a      	str	r2, [r3, #4]
 802699c:	609a      	str	r2, [r3, #8]
 802699e:	60da      	str	r2, [r3, #12]
 80269a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80269a2:	4b95      	ldr	r3, [pc, #596]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 80269a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80269a8:	4a93      	ldr	r2, [pc, #588]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 80269aa:	f043 0304 	orr.w	r3, r3, #4
 80269ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80269b2:	4b91      	ldr	r3, [pc, #580]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 80269b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80269b8:	f003 0304 	and.w	r3, r3, #4
 80269bc:	623b      	str	r3, [r7, #32]
 80269be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80269c0:	4b8d      	ldr	r3, [pc, #564]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 80269c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80269c6:	4a8c      	ldr	r2, [pc, #560]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 80269c8:	f043 0320 	orr.w	r3, r3, #32
 80269cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80269d0:	4b89      	ldr	r3, [pc, #548]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 80269d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80269d6:	f003 0320 	and.w	r3, r3, #32
 80269da:	61fb      	str	r3, [r7, #28]
 80269dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80269de:	4b86      	ldr	r3, [pc, #536]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 80269e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80269e4:	4a84      	ldr	r2, [pc, #528]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 80269e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80269ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80269ee:	4b82      	ldr	r3, [pc, #520]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 80269f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80269f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80269f8:	61bb      	str	r3, [r7, #24]
 80269fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80269fc:	4b7e      	ldr	r3, [pc, #504]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 80269fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026a02:	4a7d      	ldr	r2, [pc, #500]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a04:	f043 0301 	orr.w	r3, r3, #1
 8026a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026a0c:	4b7a      	ldr	r3, [pc, #488]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026a12:	f003 0301 	and.w	r3, r3, #1
 8026a16:	617b      	str	r3, [r7, #20]
 8026a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8026a1a:	4b77      	ldr	r3, [pc, #476]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026a20:	4a75      	ldr	r2, [pc, #468]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a22:	f043 0302 	orr.w	r3, r3, #2
 8026a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026a2a:	4b73      	ldr	r3, [pc, #460]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026a30:	f003 0302 	and.w	r3, r3, #2
 8026a34:	613b      	str	r3, [r7, #16]
 8026a36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8026a38:	4b6f      	ldr	r3, [pc, #444]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026a3e:	4a6e      	ldr	r2, [pc, #440]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026a48:	4b6b      	ldr	r3, [pc, #428]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026a52:	60fb      	str	r3, [r7, #12]
 8026a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8026a56:	4b68      	ldr	r3, [pc, #416]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026a5c:	4a66      	ldr	r2, [pc, #408]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a5e:	f043 0310 	orr.w	r3, r3, #16
 8026a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026a66:	4b64      	ldr	r3, [pc, #400]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026a6c:	f003 0310 	and.w	r3, r3, #16
 8026a70:	60bb      	str	r3, [r7, #8]
 8026a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8026a74:	4b60      	ldr	r3, [pc, #384]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026a7a:	4a5f      	ldr	r2, [pc, #380]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a7c:	f043 0308 	orr.w	r3, r3, #8
 8026a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026a84:	4b5c      	ldr	r3, [pc, #368]	; (8026bf8 <MX_GPIO_Init+0x26c>)
 8026a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026a8a:	f003 0308 	and.w	r3, r3, #8
 8026a8e:	607b      	str	r3, [r7, #4]
 8026a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, UPS_CHK_Pin, GPIO_PIN_RESET);									//Default Low / Active High	 New Board
 8026a92:	2200      	movs	r2, #0
 8026a94:	2140      	movs	r1, #64	; 0x40
 8026a96:	4859      	ldr	r0, [pc, #356]	; (8026bfc <MX_GPIO_Init+0x270>)
 8026a98:	f003 faa4 	bl	8029fe4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOF, UPS_SHDN_Pin, GPIO_PIN_SET);										//Default High / Active Low	 New Board
 8026a9c:	2201      	movs	r2, #1
 8026a9e:	2180      	movs	r1, #128	; 0x80
 8026aa0:	4856      	ldr	r0, [pc, #344]	; (8026bfc <MX_GPIO_Init+0x270>)
 8026aa2:	f003 fa9f 	bl	8029fe4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(WDT_CONTROL_GPIO_Port, WDT_CONTROL_Pin, GPIO_PIN_RESET);				//WDT Enalbe			New Board
 8026aa6:	2200      	movs	r2, #0
 8026aa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8026aac:	4854      	ldr	r0, [pc, #336]	; (8026c00 <MX_GPIO_Init+0x274>)
 8026aae:	f003 fa99 	bl	8029fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Serial_flash_CS_Pin|BUZZ_CON_Pin, GPIO_PIN_RESET);
 8026ab2:	2200      	movs	r2, #0
 8026ab4:	f241 0110 	movw	r1, #4112	; 0x1010
 8026ab8:	4851      	ldr	r0, [pc, #324]	; (8026c00 <MX_GPIO_Init+0x274>)
 8026aba:	f003 fa93 	bl	8029fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STS_LED1_Pin|STS_LED2_Pin|STS_LED3_Pin|STS_LED4_Pin, GPIO_PIN_RESET);
 8026abe:	2200      	movs	r2, #0
 8026ac0:	f44f 711c 	mov.w	r1, #624	; 0x270
 8026ac4:	484f      	ldr	r0, [pc, #316]	; (8026c04 <MX_GPIO_Init+0x278>)
 8026ac6:	f003 fa8d 	bl	8029fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EMG_GPIO_Port, EMG_Pin, GPIO_PIN_RESET);
 8026aca:	2200      	movs	r2, #0
 8026acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8026ad0:	484d      	ldr	r0, [pc, #308]	; (8026c08 <MX_GPIO_Init+0x27c>)
 8026ad2:	f003 fa87 	bl	8029fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WDT_GPIO_Port, WDT_Pin, GPIO_PIN_SET);
 8026ad6:	2201      	movs	r2, #1
 8026ad8:	2104      	movs	r1, #4
 8026ada:	484c      	ldr	r0, [pc, #304]	; (8026c0c <MX_GPIO_Init+0x280>)
 8026adc:	f003 fa82 	bl	8029fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UPS_CHK_Pin UPS_SHDN_Pin */
  GPIO_InitStruct.Pin = UPS_CHK_Pin|UPS_SHDN_Pin;
 8026ae0:	23c0      	movs	r3, #192	; 0xc0
 8026ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026ae4:	2301      	movs	r3, #1
 8026ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026ae8:	2300      	movs	r3, #0
 8026aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026aec:	2300      	movs	r3, #0
 8026aee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8026af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026af4:	4619      	mov	r1, r3
 8026af6:	4841      	ldr	r0, [pc, #260]	; (8026bfc <MX_GPIO_Init+0x270>)
 8026af8:	f002 ffa2 	bl	8029a40 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = WDT_CONTROL_Pin;
 8026afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8026b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026b02:	2301      	movs	r3, #1
 8026b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026b06:	2300      	movs	r3, #0
 8026b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026b0a:	2300      	movs	r3, #0
 8026b0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WDT_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8026b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026b12:	4619      	mov	r1, r3
 8026b14:	483a      	ldr	r0, [pc, #232]	; (8026c00 <MX_GPIO_Init+0x274>)
 8026b16:	f002 ff93 	bl	8029a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : nUPS_LINE_FAIL_Pin nUPS_LOW_BAT_Pin nUPS_CONN_Pin */
  GPIO_InitStruct.Pin = nUPS_LINE_FAIL_Pin|nUPS_LOW_BAT_Pin|nUPS_CONN_Pin;
 8026b1a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8026b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026b20:	2300      	movs	r3, #0
 8026b22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026b24:	2301      	movs	r3, #1
 8026b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8026b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026b2c:	4619      	mov	r1, r3
 8026b2e:	4833      	ldr	r0, [pc, #204]	; (8026bfc <MX_GPIO_Init+0x270>)
 8026b30:	f002 ff86 	bl	8029a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SP_SW1_Pin SP_SW2_Pin */
  GPIO_InitStruct.Pin = SP_SW1_Pin|SP_SW2_Pin;
 8026b34:	2303      	movs	r3, #3
 8026b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026b38:	2300      	movs	r3, #0
 8026b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026b3c:	2301      	movs	r3, #1
 8026b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8026b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026b44:	4619      	mov	r1, r3
 8026b46:	482f      	ldr	r0, [pc, #188]	; (8026c04 <MX_GPIO_Init+0x278>)
 8026b48:	f002 ff7a 	bl	8029a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Serial_flash_CS_Pin BUZZ_CON_Pin */
  GPIO_InitStruct.Pin = Serial_flash_CS_Pin|BUZZ_CON_Pin;
 8026b4c:	f241 0310 	movw	r3, #4112	; 0x1010
 8026b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026b52:	2301      	movs	r3, #1
 8026b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026b56:	2300      	movs	r3, #0
 8026b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026b5a:	2300      	movs	r3, #0
 8026b5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026b62:	4619      	mov	r1, r3
 8026b64:	4826      	ldr	r0, [pc, #152]	; (8026c00 <MX_GPIO_Init+0x274>)
 8026b66:	f002 ff6b 	bl	8029a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : STS_LED1_Pin STS_LED2_Pin STS_LED3_Pin STS_LED4_Pin */
  GPIO_InitStruct.Pin = STS_LED1_Pin|STS_LED2_Pin|STS_LED3_Pin|STS_LED4_Pin;
 8026b6a:	f44f 731c 	mov.w	r3, #624	; 0x270
 8026b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026b70:	2301      	movs	r3, #1
 8026b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026b74:	2300      	movs	r3, #0
 8026b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026b78:	2300      	movs	r3, #0
 8026b7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8026b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026b80:	4619      	mov	r1, r3
 8026b82:	4820      	ldr	r0, [pc, #128]	; (8026c04 <MX_GPIO_Init+0x278>)
 8026b84:	f002 ff5c 	bl	8029a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DipSW1_Pin DipSW2_Pin DipSW3_Pin DipSW4_Pin
                           DipSW5_Pin DipSW6_Pin DipSW7_Pin DipSW8_Pin */
  GPIO_InitStruct.Pin = DipSW1_Pin|DipSW2_Pin|DipSW3_Pin|DipSW4_Pin
 8026b88:	23ff      	movs	r3, #255	; 0xff
 8026b8a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DipSW5_Pin|DipSW6_Pin|DipSW7_Pin|DipSW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026b8c:	2300      	movs	r3, #0
 8026b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026b90:	2301      	movs	r3, #1
 8026b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DipSW_GPIO_Port, &GPIO_InitStruct);
 8026b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026b98:	4619      	mov	r1, r3
 8026b9a:	481b      	ldr	r0, [pc, #108]	; (8026c08 <MX_GPIO_Init+0x27c>)
 8026b9c:	f002 ff50 	bl	8029a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SP_SEN1_Pin SP_SEN2_Pin */
  GPIO_InitStruct.Pin = SP_SEN1_Pin|SP_SEN2_Pin;
 8026ba0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8026ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026ba6:	2300      	movs	r3, #0
 8026ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026baa:	2301      	movs	r3, #1
 8026bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026bb2:	4619      	mov	r1, r3
 8026bb4:	4812      	ldr	r0, [pc, #72]	; (8026c00 <MX_GPIO_Init+0x274>)
 8026bb6:	f002 ff43 	bl	8029a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : WDT_Pin */
  GPIO_InitStruct.Pin = WDT_Pin;
 8026bba:	2304      	movs	r3, #4
 8026bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026bbe:	2301      	movs	r3, #1
 8026bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026bc2:	2300      	movs	r3, #0
 8026bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026bc6:	2300      	movs	r3, #0
 8026bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WDT_GPIO_Port, &GPIO_InitStruct);
 8026bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026bce:	4619      	mov	r1, r3
 8026bd0:	480e      	ldr	r0, [pc, #56]	; (8026c0c <MX_GPIO_Init+0x280>)
 8026bd2:	f002 ff35 	bl	8029a40 <HAL_GPIO_Init>


  /*Configure GPIO pin : EMG_Pin */
  GPIO_InitStruct.Pin = EMG_Pin;
 8026bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8026bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026bdc:	2300      	movs	r3, #0
 8026bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026be0:	2301      	movs	r3, #1
 8026be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EMG_GPIO_Port, &GPIO_InitStruct);
 8026be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026be8:	4619      	mov	r1, r3
 8026bea:	4807      	ldr	r0, [pc, #28]	; (8026c08 <MX_GPIO_Init+0x27c>)
 8026bec:	f002 ff28 	bl	8029a40 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8026bf0:	bf00      	nop
 8026bf2:	3738      	adds	r7, #56	; 0x38
 8026bf4:	46bd      	mov	sp, r7
 8026bf6:	bd80      	pop	{r7, pc}
 8026bf8:	58024400 	.word	0x58024400
 8026bfc:	58021400 	.word	0x58021400
 8026c00:	58020000 	.word	0x58020000
 8026c04:	58020800 	.word	0x58020800
 8026c08:	58020400 	.word	0x58020400
 8026c0c:	58020c00 	.word	0x58020c00

08026c10 <MX_FMC_Init>:
 * @retval None
 */


static void MX_FMC_Init(void)
{
 8026c10:	b580      	push	{r7, lr}
 8026c12:	b088      	sub	sp, #32
 8026c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8026c16:	1d3b      	adds	r3, r7, #4
 8026c18:	2200      	movs	r2, #0
 8026c1a:	601a      	str	r2, [r3, #0]
 8026c1c:	605a      	str	r2, [r3, #4]
 8026c1e:	609a      	str	r2, [r3, #8]
 8026c20:	60da      	str	r2, [r3, #12]
 8026c22:	611a      	str	r2, [r3, #16]
 8026c24:	615a      	str	r2, [r3, #20]
 8026c26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8026c28:	4b4f      	ldr	r3, [pc, #316]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c2a:	4a50      	ldr	r2, [pc, #320]	; (8026d6c <MX_FMC_Init+0x15c>)
 8026c2c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8026c2e:	4b4e      	ldr	r3, [pc, #312]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c30:	4a4f      	ldr	r2, [pc, #316]	; (8026d70 <MX_FMC_Init+0x160>)
 8026c32:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8026c34:	4b4c      	ldr	r3, [pc, #304]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c36:	2200      	movs	r2, #0
 8026c38:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8026c3a:	4b4b      	ldr	r3, [pc, #300]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c3c:	2200      	movs	r2, #0
 8026c3e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8026c40:	4b49      	ldr	r3, [pc, #292]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c42:	2200      	movs	r2, #0
 8026c44:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8026c46:	4b48      	ldr	r3, [pc, #288]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c48:	2200      	movs	r2, #0
 8026c4a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8026c4c:	4b46      	ldr	r3, [pc, #280]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c4e:	2200      	movs	r2, #0
 8026c50:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8026c52:	4b45      	ldr	r3, [pc, #276]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c54:	2200      	movs	r2, #0
 8026c56:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8026c58:	4b43      	ldr	r3, [pc, #268]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c5a:	2200      	movs	r2, #0
 8026c5c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8026c5e:	4b42      	ldr	r3, [pc, #264]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8026c64:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8026c66:	4b40      	ldr	r3, [pc, #256]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c68:	2200      	movs	r2, #0
 8026c6a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8026c6c:	4b3e      	ldr	r3, [pc, #248]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c6e:	2200      	movs	r2, #0
 8026c70:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8026c72:	4b3d      	ldr	r3, [pc, #244]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c74:	2200      	movs	r2, #0
 8026c76:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8026c78:	4b3b      	ldr	r3, [pc, #236]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c7a:	2200      	movs	r2, #0
 8026c7c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 8026c7e:	4b3a      	ldr	r3, [pc, #232]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8026c84:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8026c86:	4b38      	ldr	r3, [pc, #224]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c88:	2200      	movs	r2, #0
 8026c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8026c8c:	4b36      	ldr	r3, [pc, #216]	; (8026d68 <MX_FMC_Init+0x158>)
 8026c8e:	2200      	movs	r2, #0
 8026c90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8026c92:	230f      	movs	r3, #15
 8026c94:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8026c96:	230f      	movs	r3, #15
 8026c98:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8026c9a:	23ff      	movs	r3, #255	; 0xff
 8026c9c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8026c9e:	230f      	movs	r3, #15
 8026ca0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8026ca2:	2310      	movs	r3, #16
 8026ca4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8026ca6:	2311      	movs	r3, #17
 8026ca8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8026caa:	2300      	movs	r3, #0
 8026cac:	61fb      	str	r3, [r7, #28]


  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8026cae:	1d3b      	adds	r3, r7, #4
 8026cb0:	2200      	movs	r2, #0
 8026cb2:	4619      	mov	r1, r3
 8026cb4:	482c      	ldr	r0, [pc, #176]	; (8026d68 <MX_FMC_Init+0x158>)
 8026cb6:	f006 f965 	bl	802cf84 <HAL_SRAM_Init>
 8026cba:	4603      	mov	r3, r0
 8026cbc:	2b00      	cmp	r3, #0
 8026cbe:	d001      	beq.n	8026cc4 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8026cc0:	f000 fb29 	bl	8027316 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8026cc4:	4b2b      	ldr	r3, [pc, #172]	; (8026d74 <MX_FMC_Init+0x164>)
 8026cc6:	4a29      	ldr	r2, [pc, #164]	; (8026d6c <MX_FMC_Init+0x15c>)
 8026cc8:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8026cca:	4b2a      	ldr	r3, [pc, #168]	; (8026d74 <MX_FMC_Init+0x164>)
 8026ccc:	4a28      	ldr	r2, [pc, #160]	; (8026d70 <MX_FMC_Init+0x160>)
 8026cce:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK2;
 8026cd0:	4b28      	ldr	r3, [pc, #160]	; (8026d74 <MX_FMC_Init+0x164>)
 8026cd2:	2202      	movs	r2, #2
 8026cd4:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8026cd6:	4b27      	ldr	r3, [pc, #156]	; (8026d74 <MX_FMC_Init+0x164>)
 8026cd8:	2200      	movs	r2, #0
 8026cda:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8026cdc:	4b25      	ldr	r3, [pc, #148]	; (8026d74 <MX_FMC_Init+0x164>)
 8026cde:	2200      	movs	r2, #0
 8026ce0:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8026ce2:	4b24      	ldr	r3, [pc, #144]	; (8026d74 <MX_FMC_Init+0x164>)
 8026ce4:	2200      	movs	r2, #0
 8026ce6:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8026ce8:	4b22      	ldr	r3, [pc, #136]	; (8026d74 <MX_FMC_Init+0x164>)
 8026cea:	2200      	movs	r2, #0
 8026cec:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8026cee:	4b21      	ldr	r3, [pc, #132]	; (8026d74 <MX_FMC_Init+0x164>)
 8026cf0:	2200      	movs	r2, #0
 8026cf2:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8026cf4:	4b1f      	ldr	r3, [pc, #124]	; (8026d74 <MX_FMC_Init+0x164>)
 8026cf6:	2200      	movs	r2, #0
 8026cf8:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8026cfa:	4b1e      	ldr	r3, [pc, #120]	; (8026d74 <MX_FMC_Init+0x164>)
 8026cfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8026d00:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8026d02:	4b1c      	ldr	r3, [pc, #112]	; (8026d74 <MX_FMC_Init+0x164>)
 8026d04:	2200      	movs	r2, #0
 8026d06:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8026d08:	4b1a      	ldr	r3, [pc, #104]	; (8026d74 <MX_FMC_Init+0x164>)
 8026d0a:	2200      	movs	r2, #0
 8026d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8026d0e:	4b19      	ldr	r3, [pc, #100]	; (8026d74 <MX_FMC_Init+0x164>)
 8026d10:	2200      	movs	r2, #0
 8026d12:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8026d14:	4b17      	ldr	r3, [pc, #92]	; (8026d74 <MX_FMC_Init+0x164>)
 8026d16:	2200      	movs	r2, #0
 8026d18:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 8026d1a:	4b16      	ldr	r3, [pc, #88]	; (8026d74 <MX_FMC_Init+0x164>)
 8026d1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8026d20:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8026d22:	4b14      	ldr	r3, [pc, #80]	; (8026d74 <MX_FMC_Init+0x164>)
 8026d24:	2200      	movs	r2, #0
 8026d26:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8026d28:	4b12      	ldr	r3, [pc, #72]	; (8026d74 <MX_FMC_Init+0x164>)
 8026d2a:	2200      	movs	r2, #0
 8026d2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8026d2e:	230f      	movs	r3, #15
 8026d30:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8026d32:	230f      	movs	r3, #15
 8026d34:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8026d36:	23ff      	movs	r3, #255	; 0xff
 8026d38:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8026d3a:	230f      	movs	r3, #15
 8026d3c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8026d3e:	2310      	movs	r3, #16
 8026d40:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8026d42:	2311      	movs	r3, #17
 8026d44:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8026d46:	2300      	movs	r3, #0
 8026d48:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8026d4a:	1d3b      	adds	r3, r7, #4
 8026d4c:	2200      	movs	r2, #0
 8026d4e:	4619      	mov	r1, r3
 8026d50:	4808      	ldr	r0, [pc, #32]	; (8026d74 <MX_FMC_Init+0x164>)
 8026d52:	f006 f917 	bl	802cf84 <HAL_SRAM_Init>
 8026d56:	4603      	mov	r3, r0
 8026d58:	2b00      	cmp	r3, #0
 8026d5a:	d001      	beq.n	8026d60 <MX_FMC_Init+0x150>
  {
    Error_Handler( );
 8026d5c:	f000 fadb 	bl	8027316 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8026d60:	bf00      	nop
 8026d62:	3720      	adds	r7, #32
 8026d64:	46bd      	mov	sp, r7
 8026d66:	bd80      	pop	{r7, pc}
 8026d68:	24001dac 	.word	0x24001dac
 8026d6c:	52004000 	.word	0x52004000
 8026d70:	52004104 	.word	0x52004104
 8026d74:	24001df8 	.word	0x24001df8

08026d78 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 8026d78:	b580      	push	{r7, lr}
 8026d7a:	b084      	sub	sp, #16
 8026d7c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM7_Init 0 */

    /* USER CODE END TIM7_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8026d7e:	1d3b      	adds	r3, r7, #4
 8026d80:	2200      	movs	r2, #0
 8026d82:	601a      	str	r2, [r3, #0]
 8026d84:	605a      	str	r2, [r3, #4]
 8026d86:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM7_Init 1 */

    /* USER CODE END TIM7_Init 1 */
    htim7.Instance = TIM7;
 8026d88:	4b14      	ldr	r3, [pc, #80]	; (8026ddc <MX_TIM7_Init+0x64>)
 8026d8a:	4a15      	ldr	r2, [pc, #84]	; (8026de0 <MX_TIM7_Init+0x68>)
 8026d8c:	601a      	str	r2, [r3, #0]
    htim7.Init.Prescaler = 239;
 8026d8e:	4b13      	ldr	r3, [pc, #76]	; (8026ddc <MX_TIM7_Init+0x64>)
 8026d90:	22ef      	movs	r2, #239	; 0xef
 8026d92:	605a      	str	r2, [r3, #4]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8026d94:	4b11      	ldr	r3, [pc, #68]	; (8026ddc <MX_TIM7_Init+0x64>)
 8026d96:	2200      	movs	r2, #0
 8026d98:	609a      	str	r2, [r3, #8]
    htim7.Init.Period = 999;
 8026d9a:	4b10      	ldr	r3, [pc, #64]	; (8026ddc <MX_TIM7_Init+0x64>)
 8026d9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8026da0:	60da      	str	r2, [r3, #12]
    htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8026da2:	4b0e      	ldr	r3, [pc, #56]	; (8026ddc <MX_TIM7_Init+0x64>)
 8026da4:	2200      	movs	r2, #0
 8026da6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8026da8:	480c      	ldr	r0, [pc, #48]	; (8026ddc <MX_TIM7_Init+0x64>)
 8026daa:	f006 f93b 	bl	802d024 <HAL_TIM_Base_Init>
 8026dae:	4603      	mov	r3, r0
 8026db0:	2b00      	cmp	r3, #0
 8026db2:	d001      	beq.n	8026db8 <MX_TIM7_Init+0x40>
    {
        Error_Handler();
 8026db4:	f000 faaf 	bl	8027316 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8026db8:	2300      	movs	r3, #0
 8026dba:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8026dbc:	2300      	movs	r3, #0
 8026dbe:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8026dc0:	1d3b      	adds	r3, r7, #4
 8026dc2:	4619      	mov	r1, r3
 8026dc4:	4805      	ldr	r0, [pc, #20]	; (8026ddc <MX_TIM7_Init+0x64>)
 8026dc6:	f006 fbdf 	bl	802d588 <HAL_TIMEx_MasterConfigSynchronization>
 8026dca:	4603      	mov	r3, r0
 8026dcc:	2b00      	cmp	r3, #0
 8026dce:	d001      	beq.n	8026dd4 <MX_TIM7_Init+0x5c>
    {
        Error_Handler();
 8026dd0:	f000 faa1 	bl	8027316 <Error_Handler>
    }
    /* USER CODE BEGIN TIM7_Init 2 */

    /* USER CODE END TIM7_Init 2 */

}
 8026dd4:	bf00      	nop
 8026dd6:	3710      	adds	r7, #16
 8026dd8:	46bd      	mov	sp, r7
 8026dda:	bd80      	pop	{r7, pc}
 8026ddc:	24001a7c 	.word	0x24001a7c
 8026de0:	40001400 	.word	0x40001400

08026de4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8026de4:	b580      	push	{r7, lr}
 8026de6:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8026de8:	4b22      	ldr	r3, [pc, #136]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026dea:	4a23      	ldr	r2, [pc, #140]	; (8026e78 <MX_USART1_UART_Init+0x94>)
 8026dec:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8026dee:	4b21      	ldr	r3, [pc, #132]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8026df4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8026df6:	4b1f      	ldr	r3, [pc, #124]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026df8:	2200      	movs	r2, #0
 8026dfa:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8026dfc:	4b1d      	ldr	r3, [pc, #116]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026dfe:	2200      	movs	r2, #0
 8026e00:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8026e02:	4b1c      	ldr	r3, [pc, #112]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026e04:	2200      	movs	r2, #0
 8026e06:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8026e08:	4b1a      	ldr	r3, [pc, #104]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026e0a:	220c      	movs	r2, #12
 8026e0c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8026e0e:	4b19      	ldr	r3, [pc, #100]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026e10:	2200      	movs	r2, #0
 8026e12:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8026e14:	4b17      	ldr	r3, [pc, #92]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026e16:	2200      	movs	r2, #0
 8026e18:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8026e1a:	4b16      	ldr	r3, [pc, #88]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026e1c:	2200      	movs	r2, #0
 8026e1e:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8026e20:	4b14      	ldr	r3, [pc, #80]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026e22:	2200      	movs	r2, #0
 8026e24:	625a      	str	r2, [r3, #36]	; 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8026e26:	4b13      	ldr	r3, [pc, #76]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026e28:	2200      	movs	r2, #0
 8026e2a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8026e2c:	4811      	ldr	r0, [pc, #68]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026e2e:	f006 fc57 	bl	802d6e0 <HAL_UART_Init>
 8026e32:	4603      	mov	r3, r0
 8026e34:	2b00      	cmp	r3, #0
 8026e36:	d001      	beq.n	8026e3c <MX_USART1_UART_Init+0x58>
    {
        Error_Handler();
 8026e38:	f000 fa6d 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8026e3c:	2100      	movs	r1, #0
 8026e3e:	480d      	ldr	r0, [pc, #52]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026e40:	f007 fc99 	bl	802e776 <HAL_UARTEx_SetTxFifoThreshold>
 8026e44:	4603      	mov	r3, r0
 8026e46:	2b00      	cmp	r3, #0
 8026e48:	d001      	beq.n	8026e4e <MX_USART1_UART_Init+0x6a>
    {
        Error_Handler();
 8026e4a:	f000 fa64 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8026e4e:	2100      	movs	r1, #0
 8026e50:	4808      	ldr	r0, [pc, #32]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026e52:	f007 fcce 	bl	802e7f2 <HAL_UARTEx_SetRxFifoThreshold>
 8026e56:	4603      	mov	r3, r0
 8026e58:	2b00      	cmp	r3, #0
 8026e5a:	d001      	beq.n	8026e60 <MX_USART1_UART_Init+0x7c>
    {
        Error_Handler();
 8026e5c:	f000 fa5b 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8026e60:	4804      	ldr	r0, [pc, #16]	; (8026e74 <MX_USART1_UART_Init+0x90>)
 8026e62:	f007 fc4f 	bl	802e704 <HAL_UARTEx_DisableFifoMode>
 8026e66:	4603      	mov	r3, r0
 8026e68:	2b00      	cmp	r3, #0
 8026e6a:	d001      	beq.n	8026e70 <MX_USART1_UART_Init+0x8c>
    {
        Error_Handler();
 8026e6c:	f000 fa53 	bl	8027316 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8026e70:	bf00      	nop
 8026e72:	bd80      	pop	{r7, pc}
 8026e74:	24001bf0 	.word	0x24001bf0
 8026e78:	40011000 	.word	0x40011000

08026e7c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8026e7c:	b580      	push	{r7, lr}
 8026e7e:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8026e80:	4b22      	ldr	r3, [pc, #136]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026e82:	4a23      	ldr	r2, [pc, #140]	; (8026f10 <MX_USART2_UART_Init+0x94>)
 8026e84:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8026e86:	4b21      	ldr	r3, [pc, #132]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8026e8c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8026e8e:	4b1f      	ldr	r3, [pc, #124]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026e90:	2200      	movs	r2, #0
 8026e92:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8026e94:	4b1d      	ldr	r3, [pc, #116]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026e96:	2200      	movs	r2, #0
 8026e98:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8026e9a:	4b1c      	ldr	r3, [pc, #112]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026e9c:	2200      	movs	r2, #0
 8026e9e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8026ea0:	4b1a      	ldr	r3, [pc, #104]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026ea2:	220c      	movs	r2, #12
 8026ea4:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8026ea6:	4b19      	ldr	r3, [pc, #100]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026ea8:	2200      	movs	r2, #0
 8026eaa:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8026eac:	4b17      	ldr	r3, [pc, #92]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026eae:	2200      	movs	r2, #0
 8026eb0:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8026eb2:	4b16      	ldr	r3, [pc, #88]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026eb4:	2200      	movs	r2, #0
 8026eb6:	621a      	str	r2, [r3, #32]
    huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8026eb8:	4b14      	ldr	r3, [pc, #80]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026eba:	2200      	movs	r2, #0
 8026ebc:	625a      	str	r2, [r3, #36]	; 0x24
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8026ebe:	4b13      	ldr	r3, [pc, #76]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026ec0:	2200      	movs	r2, #0
 8026ec2:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8026ec4:	4811      	ldr	r0, [pc, #68]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026ec6:	f006 fc0b 	bl	802d6e0 <HAL_UART_Init>
 8026eca:	4603      	mov	r3, r0
 8026ecc:	2b00      	cmp	r3, #0
 8026ece:	d001      	beq.n	8026ed4 <MX_USART2_UART_Init+0x58>
    {
        Error_Handler();
 8026ed0:	f000 fa21 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8026ed4:	2100      	movs	r1, #0
 8026ed6:	480d      	ldr	r0, [pc, #52]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026ed8:	f007 fc4d 	bl	802e776 <HAL_UARTEx_SetTxFifoThreshold>
 8026edc:	4603      	mov	r3, r0
 8026ede:	2b00      	cmp	r3, #0
 8026ee0:	d001      	beq.n	8026ee6 <MX_USART2_UART_Init+0x6a>
    {
        Error_Handler();
 8026ee2:	f000 fa18 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8026ee6:	2100      	movs	r1, #0
 8026ee8:	4808      	ldr	r0, [pc, #32]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026eea:	f007 fc82 	bl	802e7f2 <HAL_UARTEx_SetRxFifoThreshold>
 8026eee:	4603      	mov	r3, r0
 8026ef0:	2b00      	cmp	r3, #0
 8026ef2:	d001      	beq.n	8026ef8 <MX_USART2_UART_Init+0x7c>
    {
        Error_Handler();
 8026ef4:	f000 fa0f 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8026ef8:	4804      	ldr	r0, [pc, #16]	; (8026f0c <MX_USART2_UART_Init+0x90>)
 8026efa:	f007 fc03 	bl	802e704 <HAL_UARTEx_DisableFifoMode>
 8026efe:	4603      	mov	r3, r0
 8026f00:	2b00      	cmp	r3, #0
 8026f02:	d001      	beq.n	8026f08 <MX_USART2_UART_Init+0x8c>
    {
        Error_Handler();
 8026f04:	f000 fa07 	bl	8027316 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8026f08:	bf00      	nop
 8026f0a:	bd80      	pop	{r7, pc}
 8026f0c:	24001c84 	.word	0x24001c84
 8026f10:	40004400 	.word	0x40004400

08026f14 <MX_USART3_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8026f14:	b580      	push	{r7, lr}
 8026f16:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart3.Instance = USART3;
 8026f18:	4b22      	ldr	r3, [pc, #136]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f1a:	4a23      	ldr	r2, [pc, #140]	; (8026fa8 <MX_USART3_UART_Init+0x94>)
 8026f1c:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 57600;
 8026f1e:	4b21      	ldr	r3, [pc, #132]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f20:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8026f24:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8026f26:	4b1f      	ldr	r3, [pc, #124]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f28:	2200      	movs	r2, #0
 8026f2a:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8026f2c:	4b1d      	ldr	r3, [pc, #116]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f2e:	2200      	movs	r2, #0
 8026f30:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8026f32:	4b1c      	ldr	r3, [pc, #112]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f34:	2200      	movs	r2, #0
 8026f36:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8026f38:	4b1a      	ldr	r3, [pc, #104]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f3a:	220c      	movs	r2, #12
 8026f3c:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8026f3e:	4b19      	ldr	r3, [pc, #100]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f40:	2200      	movs	r2, #0
 8026f42:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8026f44:	4b17      	ldr	r3, [pc, #92]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f46:	2200      	movs	r2, #0
 8026f48:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8026f4a:	4b16      	ldr	r3, [pc, #88]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f4c:	2200      	movs	r2, #0
 8026f4e:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8026f50:	4b14      	ldr	r3, [pc, #80]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f52:	2200      	movs	r2, #0
 8026f54:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8026f56:	4b13      	ldr	r3, [pc, #76]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f58:	2200      	movs	r2, #0
 8026f5a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK)
 8026f5c:	4811      	ldr	r0, [pc, #68]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f5e:	f006 fbbf 	bl	802d6e0 <HAL_UART_Init>
 8026f62:	4603      	mov	r3, r0
 8026f64:	2b00      	cmp	r3, #0
 8026f66:	d001      	beq.n	8026f6c <MX_USART3_UART_Init+0x58>
    {
        Error_Handler();
 8026f68:	f000 f9d5 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8026f6c:	2100      	movs	r1, #0
 8026f6e:	480d      	ldr	r0, [pc, #52]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f70:	f007 fc01 	bl	802e776 <HAL_UARTEx_SetTxFifoThreshold>
 8026f74:	4603      	mov	r3, r0
 8026f76:	2b00      	cmp	r3, #0
 8026f78:	d001      	beq.n	8026f7e <MX_USART3_UART_Init+0x6a>
    {
        Error_Handler();
 8026f7a:	f000 f9cc 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8026f7e:	2100      	movs	r1, #0
 8026f80:	4808      	ldr	r0, [pc, #32]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f82:	f007 fc36 	bl	802e7f2 <HAL_UARTEx_SetRxFifoThreshold>
 8026f86:	4603      	mov	r3, r0
 8026f88:	2b00      	cmp	r3, #0
 8026f8a:	d001      	beq.n	8026f90 <MX_USART3_UART_Init+0x7c>
    {
        Error_Handler();
 8026f8c:	f000 f9c3 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8026f90:	4804      	ldr	r0, [pc, #16]	; (8026fa4 <MX_USART3_UART_Init+0x90>)
 8026f92:	f007 fbb7 	bl	802e704 <HAL_UARTEx_DisableFifoMode>
 8026f96:	4603      	mov	r3, r0
 8026f98:	2b00      	cmp	r3, #0
 8026f9a:	d001      	beq.n	8026fa0 <MX_USART3_UART_Init+0x8c>
    {
        Error_Handler();
 8026f9c:	f000 f9bb 	bl	8027316 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */

}
 8026fa0:	bf00      	nop
 8026fa2:	bd80      	pop	{r7, pc}
 8026fa4:	24001d18 	.word	0x24001d18
 8026fa8:	40004800 	.word	0x40004800

08026fac <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8026fac:	b580      	push	{r7, lr}
 8026fae:	af00      	add	r7, sp, #0
    /* USER CODE END UART4_Init 0 */

    /* USER CODE BEGIN UART4_Init 1 */

    /* USER CODE END UART4_Init 1 */
    huart4.Instance = UART4;
 8026fb0:	4b22      	ldr	r3, [pc, #136]	; (802703c <MX_UART4_Init+0x90>)
 8026fb2:	4a23      	ldr	r2, [pc, #140]	; (8027040 <MX_UART4_Init+0x94>)
 8026fb4:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 38400;
 8026fb6:	4b21      	ldr	r3, [pc, #132]	; (802703c <MX_UART4_Init+0x90>)
 8026fb8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8026fbc:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8026fbe:	4b1f      	ldr	r3, [pc, #124]	; (802703c <MX_UART4_Init+0x90>)
 8026fc0:	2200      	movs	r2, #0
 8026fc2:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 8026fc4:	4b1d      	ldr	r3, [pc, #116]	; (802703c <MX_UART4_Init+0x90>)
 8026fc6:	2200      	movs	r2, #0
 8026fc8:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 8026fca:	4b1c      	ldr	r3, [pc, #112]	; (802703c <MX_UART4_Init+0x90>)
 8026fcc:	2200      	movs	r2, #0
 8026fce:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 8026fd0:	4b1a      	ldr	r3, [pc, #104]	; (802703c <MX_UART4_Init+0x90>)
 8026fd2:	220c      	movs	r2, #12
 8026fd4:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8026fd6:	4b19      	ldr	r3, [pc, #100]	; (802703c <MX_UART4_Init+0x90>)
 8026fd8:	2200      	movs	r2, #0
 8026fda:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8026fdc:	4b17      	ldr	r3, [pc, #92]	; (802703c <MX_UART4_Init+0x90>)
 8026fde:	2200      	movs	r2, #0
 8026fe0:	61da      	str	r2, [r3, #28]
    huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8026fe2:	4b16      	ldr	r3, [pc, #88]	; (802703c <MX_UART4_Init+0x90>)
 8026fe4:	2200      	movs	r2, #0
 8026fe6:	621a      	str	r2, [r3, #32]
    huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8026fe8:	4b14      	ldr	r3, [pc, #80]	; (802703c <MX_UART4_Init+0x90>)
 8026fea:	2200      	movs	r2, #0
 8026fec:	625a      	str	r2, [r3, #36]	; 0x24
    huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8026fee:	4b13      	ldr	r3, [pc, #76]	; (802703c <MX_UART4_Init+0x90>)
 8026ff0:	2200      	movs	r2, #0
 8026ff2:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart4) != HAL_OK)
 8026ff4:	4811      	ldr	r0, [pc, #68]	; (802703c <MX_UART4_Init+0x90>)
 8026ff6:	f006 fb73 	bl	802d6e0 <HAL_UART_Init>
 8026ffa:	4603      	mov	r3, r0
 8026ffc:	2b00      	cmp	r3, #0
 8026ffe:	d001      	beq.n	8027004 <MX_UART4_Init+0x58>
    {
        Error_Handler();
 8027000:	f000 f989 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8027004:	2100      	movs	r1, #0
 8027006:	480d      	ldr	r0, [pc, #52]	; (802703c <MX_UART4_Init+0x90>)
 8027008:	f007 fbb5 	bl	802e776 <HAL_UARTEx_SetTxFifoThreshold>
 802700c:	4603      	mov	r3, r0
 802700e:	2b00      	cmp	r3, #0
 8027010:	d001      	beq.n	8027016 <MX_UART4_Init+0x6a>
    {
        Error_Handler();
 8027012:	f000 f980 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8027016:	2100      	movs	r1, #0
 8027018:	4808      	ldr	r0, [pc, #32]	; (802703c <MX_UART4_Init+0x90>)
 802701a:	f007 fbea 	bl	802e7f2 <HAL_UARTEx_SetRxFifoThreshold>
 802701e:	4603      	mov	r3, r0
 8027020:	2b00      	cmp	r3, #0
 8027022:	d001      	beq.n	8027028 <MX_UART4_Init+0x7c>
    {
        Error_Handler();
 8027024:	f000 f977 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8027028:	4804      	ldr	r0, [pc, #16]	; (802703c <MX_UART4_Init+0x90>)
 802702a:	f007 fb6b 	bl	802e704 <HAL_UARTEx_DisableFifoMode>
 802702e:	4603      	mov	r3, r0
 8027030:	2b00      	cmp	r3, #0
 8027032:	d001      	beq.n	8027038 <MX_UART4_Init+0x8c>
    {
        Error_Handler();
 8027034:	f000 f96f 	bl	8027316 <Error_Handler>
    }
    /* USER CODE BEGIN UART4_Init 2 */

    /* USER CODE END UART4_Init 2 */

}
 8027038:	bf00      	nop
 802703a:	bd80      	pop	{r7, pc}
 802703c:	24001ac8 	.word	0x24001ac8
 8027040:	40004c00 	.word	0x40004c00

08027044 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8027044:	b580      	push	{r7, lr}
 8027046:	af00      	add	r7, sp, #0
    /* USER CODE END UART5_Init 0 */

    /* USER CODE BEGIN UART5_Init 1 */

    /* USER CODE END UART5_Init 1 */
    huart5.Instance = UART5;
 8027048:	4b22      	ldr	r3, [pc, #136]	; (80270d4 <MX_UART5_Init+0x90>)
 802704a:	4a23      	ldr	r2, [pc, #140]	; (80270d8 <MX_UART5_Init+0x94>)
 802704c:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate = 38400;
 802704e:	4b21      	ldr	r3, [pc, #132]	; (80270d4 <MX_UART5_Init+0x90>)
 8027050:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8027054:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8027056:	4b1f      	ldr	r3, [pc, #124]	; (80270d4 <MX_UART5_Init+0x90>)
 8027058:	2200      	movs	r2, #0
 802705a:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits = UART_STOPBITS_1;
 802705c:	4b1d      	ldr	r3, [pc, #116]	; (80270d4 <MX_UART5_Init+0x90>)
 802705e:	2200      	movs	r2, #0
 8027060:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity = UART_PARITY_NONE;
 8027062:	4b1c      	ldr	r3, [pc, #112]	; (80270d4 <MX_UART5_Init+0x90>)
 8027064:	2200      	movs	r2, #0
 8027066:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode = UART_MODE_TX_RX;
 8027068:	4b1a      	ldr	r3, [pc, #104]	; (80270d4 <MX_UART5_Init+0x90>)
 802706a:	220c      	movs	r2, #12
 802706c:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802706e:	4b19      	ldr	r3, [pc, #100]	; (80270d4 <MX_UART5_Init+0x90>)
 8027070:	2200      	movs	r2, #0
 8027072:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8027074:	4b17      	ldr	r3, [pc, #92]	; (80270d4 <MX_UART5_Init+0x90>)
 8027076:	2200      	movs	r2, #0
 8027078:	61da      	str	r2, [r3, #28]
    huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802707a:	4b16      	ldr	r3, [pc, #88]	; (80270d4 <MX_UART5_Init+0x90>)
 802707c:	2200      	movs	r2, #0
 802707e:	621a      	str	r2, [r3, #32]
    huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8027080:	4b14      	ldr	r3, [pc, #80]	; (80270d4 <MX_UART5_Init+0x90>)
 8027082:	2200      	movs	r2, #0
 8027084:	625a      	str	r2, [r3, #36]	; 0x24
    huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8027086:	4b13      	ldr	r3, [pc, #76]	; (80270d4 <MX_UART5_Init+0x90>)
 8027088:	2200      	movs	r2, #0
 802708a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart5) != HAL_OK)
 802708c:	4811      	ldr	r0, [pc, #68]	; (80270d4 <MX_UART5_Init+0x90>)
 802708e:	f006 fb27 	bl	802d6e0 <HAL_UART_Init>
 8027092:	4603      	mov	r3, r0
 8027094:	2b00      	cmp	r3, #0
 8027096:	d001      	beq.n	802709c <MX_UART5_Init+0x58>
    {
        Error_Handler();
 8027098:	f000 f93d 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802709c:	2100      	movs	r1, #0
 802709e:	480d      	ldr	r0, [pc, #52]	; (80270d4 <MX_UART5_Init+0x90>)
 80270a0:	f007 fb69 	bl	802e776 <HAL_UARTEx_SetTxFifoThreshold>
 80270a4:	4603      	mov	r3, r0
 80270a6:	2b00      	cmp	r3, #0
 80270a8:	d001      	beq.n	80270ae <MX_UART5_Init+0x6a>
    {
        Error_Handler();
 80270aa:	f000 f934 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80270ae:	2100      	movs	r1, #0
 80270b0:	4808      	ldr	r0, [pc, #32]	; (80270d4 <MX_UART5_Init+0x90>)
 80270b2:	f007 fb9e 	bl	802e7f2 <HAL_UARTEx_SetRxFifoThreshold>
 80270b6:	4603      	mov	r3, r0
 80270b8:	2b00      	cmp	r3, #0
 80270ba:	d001      	beq.n	80270c0 <MX_UART5_Init+0x7c>
    {
        Error_Handler();
 80270bc:	f000 f92b 	bl	8027316 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80270c0:	4804      	ldr	r0, [pc, #16]	; (80270d4 <MX_UART5_Init+0x90>)
 80270c2:	f007 fb1f 	bl	802e704 <HAL_UARTEx_DisableFifoMode>
 80270c6:	4603      	mov	r3, r0
 80270c8:	2b00      	cmp	r3, #0
 80270ca:	d001      	beq.n	80270d0 <MX_UART5_Init+0x8c>
    {
        Error_Handler();
 80270cc:	f000 f923 	bl	8027316 <Error_Handler>
    }
    /* USER CODE BEGIN UART5_Init 2 */

    /* USER CODE END UART5_Init 2 */

}
 80270d0:	bf00      	nop
 80270d2:	bd80      	pop	{r7, pc}
 80270d4:	24001b5c 	.word	0x24001b5c
 80270d8:	40005000 	.word	0x40005000

080270dc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 80270dc:	b580      	push	{r7, lr}
 80270de:	af00      	add	r7, sp, #0
    {
        Error_Handler();
    }
#endif

    hspi1.Instance = SPI1;
 80270e0:	4b27      	ldr	r3, [pc, #156]	; (8027180 <MX_SPI1_Init+0xa4>)
 80270e2:	4a28      	ldr	r2, [pc, #160]	; (8027184 <MX_SPI1_Init+0xa8>)
 80270e4:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80270e6:	4b26      	ldr	r3, [pc, #152]	; (8027180 <MX_SPI1_Init+0xa4>)
 80270e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80270ec:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80270ee:	4b24      	ldr	r3, [pc, #144]	; (8027180 <MX_SPI1_Init+0xa4>)
 80270f0:	2200      	movs	r2, #0
 80270f2:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80270f4:	4b22      	ldr	r3, [pc, #136]	; (8027180 <MX_SPI1_Init+0xa4>)
 80270f6:	2203      	movs	r2, #3
 80270f8:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80270fa:	4b21      	ldr	r3, [pc, #132]	; (8027180 <MX_SPI1_Init+0xa4>)
 80270fc:	2200      	movs	r2, #0
 80270fe:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8027100:	4b1f      	ldr	r3, [pc, #124]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027102:	2200      	movs	r2, #0
 8027104:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8027106:	4b1e      	ldr	r3, [pc, #120]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027108:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 802710c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 802710e:	4b1c      	ldr	r3, [pc, #112]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027110:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8027114:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8027116:	4b1a      	ldr	r3, [pc, #104]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027118:	2200      	movs	r2, #0
 802711a:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 802711c:	4b18      	ldr	r3, [pc, #96]	; (8027180 <MX_SPI1_Init+0xa4>)
 802711e:	2200      	movs	r2, #0
 8027120:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8027122:	4b17      	ldr	r3, [pc, #92]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027124:	2200      	movs	r2, #0
 8027126:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 0x0;
 8027128:	4b15      	ldr	r3, [pc, #84]	; (8027180 <MX_SPI1_Init+0xa4>)
 802712a:	2200      	movs	r2, #0
 802712c:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 802712e:	4b14      	ldr	r3, [pc, #80]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8027134:	635a      	str	r2, [r3, #52]	; 0x34
    hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8027136:	4b12      	ldr	r3, [pc, #72]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027138:	2200      	movs	r2, #0
 802713a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 802713c:	4b10      	ldr	r3, [pc, #64]	; (8027180 <MX_SPI1_Init+0xa4>)
 802713e:	2200      	movs	r2, #0
 8027140:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8027142:	4b0f      	ldr	r3, [pc, #60]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027144:	2200      	movs	r2, #0
 8027146:	641a      	str	r2, [r3, #64]	; 0x40
    hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8027148:	4b0d      	ldr	r3, [pc, #52]	; (8027180 <MX_SPI1_Init+0xa4>)
 802714a:	2200      	movs	r2, #0
 802714c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 802714e:	4b0c      	ldr	r3, [pc, #48]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027150:	2200      	movs	r2, #0
 8027152:	649a      	str	r2, [r3, #72]	; 0x48
    hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8027154:	4b0a      	ldr	r3, [pc, #40]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027156:	2200      	movs	r2, #0
 8027158:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 802715a:	4b09      	ldr	r3, [pc, #36]	; (8027180 <MX_SPI1_Init+0xa4>)
 802715c:	2200      	movs	r2, #0
 802715e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8027160:	4b07      	ldr	r3, [pc, #28]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027162:	2200      	movs	r2, #0
 8027164:	655a      	str	r2, [r3, #84]	; 0x54
    hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8027166:	4b06      	ldr	r3, [pc, #24]	; (8027180 <MX_SPI1_Init+0xa4>)
 8027168:	2200      	movs	r2, #0
 802716a:	659a      	str	r2, [r3, #88]	; 0x58
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 802716c:	4804      	ldr	r0, [pc, #16]	; (8027180 <MX_SPI1_Init+0xa4>)
 802716e:	f005 fdc9 	bl	802cd04 <HAL_SPI_Init>
 8027172:	4603      	mov	r3, r0
 8027174:	2b00      	cmp	r3, #0
 8027176:	d001      	beq.n	802717c <MX_SPI1_Init+0xa0>
    {
      Error_Handler();
 8027178:	f000 f8cd 	bl	8027316 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 802717c:	bf00      	nop
 802717e:	bd80      	pop	{r7, pc}
 8027180:	240019f4 	.word	0x240019f4
 8027184:	40013000 	.word	0x40013000

08027188 <InitPeripherals>:

}


void InitPeripherals(void)
{
 8027188:	b580      	push	{r7, lr}
 802718a:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 802718c:	f7ff fbfe 	bl	802698c <MX_GPIO_Init>
    MX_FMC_Init();
 8027190:	f7ff fd3e 	bl	8026c10 <MX_FMC_Init>
    MX_TIM7_Init();
 8027194:	f7ff fdf0 	bl	8026d78 <MX_TIM7_Init>

    //MX_RTC_Init();

    MX_USART1_UART_Init();
 8027198:	f7ff fe24 	bl	8026de4 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 802719c:	f7ff fe6e 	bl	8026e7c <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 80271a0:	f7ff feb8 	bl	8026f14 <MX_USART3_UART_Init>
    MX_UART4_Init();
 80271a4:	f7ff ff02 	bl	8026fac <MX_UART4_Init>
    MX_UART5_Init();
 80271a8:	f7ff ff4c 	bl	8027044 <MX_UART5_Init>

    MX_SPI1_Init();
 80271ac:	f7ff ff96 	bl	80270dc <MX_SPI1_Init>
    //MX_CRC_Init();

}
 80271b0:	bf00      	nop
 80271b2:	bd80      	pop	{r7, pc}

080271b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80271b4:	b580      	push	{r7, lr}
 80271b6:	b084      	sub	sp, #16
 80271b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  MPU_Config();
 80271ba:	f7ff faaf 	bl	802671c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80271be:	4b3a      	ldr	r3, [pc, #232]	; (80272a8 <main+0xf4>)
 80271c0:	695b      	ldr	r3, [r3, #20]
 80271c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80271c6:	2b00      	cmp	r3, #0
 80271c8:	d11b      	bne.n	8027202 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 80271ca:	f3bf 8f4f 	dsb	sy
}
 80271ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80271d0:	f3bf 8f6f 	isb	sy
}
 80271d4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80271d6:	4b34      	ldr	r3, [pc, #208]	; (80272a8 <main+0xf4>)
 80271d8:	2200      	movs	r2, #0
 80271da:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80271de:	f3bf 8f4f 	dsb	sy
}
 80271e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80271e4:	f3bf 8f6f 	isb	sy
}
 80271e8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80271ea:	4b2f      	ldr	r3, [pc, #188]	; (80272a8 <main+0xf4>)
 80271ec:	695b      	ldr	r3, [r3, #20]
 80271ee:	4a2e      	ldr	r2, [pc, #184]	; (80272a8 <main+0xf4>)
 80271f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80271f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80271f6:	f3bf 8f4f 	dsb	sy
}
 80271fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80271fc:	f3bf 8f6f 	isb	sy
}
 8027200:	e000      	b.n	8027204 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8027202:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8027204:	4b28      	ldr	r3, [pc, #160]	; (80272a8 <main+0xf4>)
 8027206:	695b      	ldr	r3, [r3, #20]
 8027208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802720c:	2b00      	cmp	r3, #0
 802720e:	d138      	bne.n	8027282 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8027210:	4b25      	ldr	r3, [pc, #148]	; (80272a8 <main+0xf4>)
 8027212:	2200      	movs	r2, #0
 8027214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8027218:	f3bf 8f4f 	dsb	sy
}
 802721c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 802721e:	4b22      	ldr	r3, [pc, #136]	; (80272a8 <main+0xf4>)
 8027220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8027224:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8027226:	68fb      	ldr	r3, [r7, #12]
 8027228:	0b5b      	lsrs	r3, r3, #13
 802722a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 802722e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8027230:	68fb      	ldr	r3, [r7, #12]
 8027232:	08db      	lsrs	r3, r3, #3
 8027234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8027238:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 802723a:	68bb      	ldr	r3, [r7, #8]
 802723c:	015a      	lsls	r2, r3, #5
 802723e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8027242:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8027244:	687a      	ldr	r2, [r7, #4]
 8027246:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8027248:	4917      	ldr	r1, [pc, #92]	; (80272a8 <main+0xf4>)
 802724a:	4313      	orrs	r3, r2
 802724c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8027250:	687b      	ldr	r3, [r7, #4]
 8027252:	1e5a      	subs	r2, r3, #1
 8027254:	607a      	str	r2, [r7, #4]
 8027256:	2b00      	cmp	r3, #0
 8027258:	d1ef      	bne.n	802723a <main+0x86>
    } while(sets-- != 0U);
 802725a:	68bb      	ldr	r3, [r7, #8]
 802725c:	1e5a      	subs	r2, r3, #1
 802725e:	60ba      	str	r2, [r7, #8]
 8027260:	2b00      	cmp	r3, #0
 8027262:	d1e5      	bne.n	8027230 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8027264:	f3bf 8f4f 	dsb	sy
}
 8027268:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 802726a:	4b0f      	ldr	r3, [pc, #60]	; (80272a8 <main+0xf4>)
 802726c:	695b      	ldr	r3, [r3, #20]
 802726e:	4a0e      	ldr	r2, [pc, #56]	; (80272a8 <main+0xf4>)
 8027270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027274:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8027276:	f3bf 8f4f 	dsb	sy
}
 802727a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802727c:	f3bf 8f6f 	isb	sy
}
 8027280:	e000      	b.n	8027284 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8027282:	bf00      	nop

  SCB_EnableICache();
  SCB_EnableDCache();

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8027284:	f002 f98e 	bl	80295a4 <HAL_Init>
  SystemClock_Config();
 8027288:	f7ff fac6 	bl	8026818 <SystemClock_Config>

  /* USER CODE BEGIN Init */
  InitPeripherals();
 802728c:	f7ff ff7c 	bl	8027188 <InitPeripherals>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_InitTimer();
 8027290:	f7ff f896 	bl	80263c0 <bsp_InitTimer>
  bsp_InitUart();
 8027294:	f7ff f96e 	bl	8026574 <bsp_InitUart>
  bDip_SW_Flag = TRUE;
 8027298:	4b04      	ldr	r3, [pc, #16]	; (80272ac <main+0xf8>)
 802729a:	2201      	movs	r2, #1
 802729c:	701a      	strb	r2, [r3, #0]
  GCUInitialize();
 802729e:	f000 f81b 	bl	80272d8 <GCUInitialize>
  SerialProcess();
 80272a2:	f000 f831 	bl	8027308 <SerialProcess>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80272a6:	e7fe      	b.n	80272a6 <main+0xf2>
 80272a8:	e000ed00 	.word	0xe000ed00
 80272ac:	24001e44 	.word	0x24001e44

080272b0 <dip_sw>:
}



word dip_sw(void)
{
 80272b0:	b480      	push	{r7}
 80272b2:	b083      	sub	sp, #12
 80272b4:	af00      	add	r7, sp, #0
	word	idata;

	idata = (GPIOB->IDR)^0xff;
 80272b6:	4b07      	ldr	r3, [pc, #28]	; (80272d4 <dip_sw+0x24>)
 80272b8:	691b      	ldr	r3, [r3, #16]
 80272ba:	b29b      	uxth	r3, r3
 80272bc:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80272c0:	80fb      	strh	r3, [r7, #6]

	return(idata & 0xff);
 80272c2:	88fb      	ldrh	r3, [r7, #6]
 80272c4:	b2db      	uxtb	r3, r3
 80272c6:	b29b      	uxth	r3, r3
}
 80272c8:	4618      	mov	r0, r3
 80272ca:	370c      	adds	r7, #12
 80272cc:	46bd      	mov	sp, r7
 80272ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272d2:	4770      	bx	lr
 80272d4:	58020400 	.word	0x58020400

080272d8 <GCUInitialize>:
* Out:      None
* Return:   void
* comments:
*******************************************************************************/
void GCUInitialize(void)
{
 80272d8:	b580      	push	{r7, lr}
 80272da:	af00      	add	r7, sp, #0
	//EcuEmergencyOff();
	BuzzerOff();
 80272dc:	f7fe f8f0 	bl	80254c0 <BuzzerOff>

	//ControlStatusLED_En(DIR_RED);
	//ControlStatusLED_Ex(DIR_RED);
	ControlIndicatorLight_En(LAMP_OFF);
 80272e0:	2000      	movs	r0, #0
 80272e2:	f7fe f9b9 	bl	8025658 <ControlIndicatorLight_En>
	ControlIndicatorLight_Ex(LAMP_OFF);
 80272e6:	2000      	movs	r0, #0
 80272e8:	f7fe f9e4 	bl	80256b4 <ControlIndicatorLight_Ex>
	//ControlUPS(UPS_CMD_CHK);
	//ok ms
	SetDefaultOpMode();
 80272ec:	f7f9 fd98 	bl	8020e20 <SetDefaultOpMode>
	SetDefaultParameter();
 80272f0:	f7f9 fdb2 	bl	8020e58 <SetDefaultParameter>
	SetDefaultStatus();
 80272f4:	f7f9 fdee 	bl	8020ed4 <SetDefaultStatus>
	Brr_SetSerialComm(TRUE);
 80272f8:	2001      	movs	r0, #1
 80272fa:	f7f9 f9e3 	bl	80206c4 <Brr_SetSerialComm>
	Brr_OpenBarrier(BARRIER_OPEN_FOR_EX);
 80272fe:	2001      	movs	r0, #1
 8027300:	f7f9 f9fe 	bl	8020700 <Brr_OpenBarrier>
}
 8027304:	bf00      	nop
 8027306:	bd80      	pop	{r7, pc}

08027308 <SerialProcess>:


inline void SerialProcess(void)
{
 8027308:	b580      	push	{r7, lr}
 802730a:	af00      	add	r7, sp, #0
	for (;;)
	{
		ProcessComm_Barrier();
 802730c:	f7f9 fd1a 	bl	8020d44 <ProcessComm_Barrier>
		ProcessComm_ECU();
 8027310:	f7fc f83a 	bl	8023388 <ProcessComm_ECU>
		ProcessComm_Barrier();
 8027314:	e7fa      	b.n	802730c <SerialProcess+0x4>

08027316 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8027316:	b480      	push	{r7}
 8027318:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 802731a:	b672      	cpsid	i
}
 802731c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 802731e:	e7fe      	b.n	802731e <Error_Handler+0x8>

08027320 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8027320:	b480      	push	{r7}
 8027322:	b085      	sub	sp, #20
 8027324:	af00      	add	r7, sp, #0
 8027326:	60b9      	str	r1, [r7, #8]
 8027328:	607a      	str	r2, [r7, #4]
 802732a:	603b      	str	r3, [r7, #0]
 802732c:	4603      	mov	r3, r0
 802732e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8027330:	bf00      	nop
 8027332:	3714      	adds	r7, #20
 8027334:	46bd      	mov	sp, r7
 8027336:	f85d 7b04 	ldr.w	r7, [sp], #4
 802733a:	4770      	bx	lr

0802733c <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 802733c:	b580      	push	{r7, lr}
 802733e:	b084      	sub	sp, #16
 8027340:	af00      	add	r7, sp, #0
 8027342:	60b9      	str	r1, [r7, #8]
 8027344:	607a      	str	r2, [r7, #4]
 8027346:	603b      	str	r3, [r7, #0]
 8027348:	4603      	mov	r3, r0
 802734a:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 802734c:	7bfb      	ldrb	r3, [r7, #15]
 802734e:	2b00      	cmp	r3, #0
 8027350:	d003      	beq.n	802735a <_out_char+0x1e>
    _putchar(character);
 8027352:	7bfb      	ldrb	r3, [r7, #15]
 8027354:	4618      	mov	r0, r3
 8027356:	f7ff f9bf 	bl	80266d8 <_putchar>
  }
}
 802735a:	bf00      	nop
 802735c:	3710      	adds	r7, #16
 802735e:	46bd      	mov	sp, r7
 8027360:	bd80      	pop	{r7, pc}

08027362 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8027362:	b480      	push	{r7}
 8027364:	b085      	sub	sp, #20
 8027366:	af00      	add	r7, sp, #0
 8027368:	6078      	str	r0, [r7, #4]
 802736a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 802736c:	687b      	ldr	r3, [r7, #4]
 802736e:	60fb      	str	r3, [r7, #12]
 8027370:	e002      	b.n	8027378 <_strnlen_s+0x16>
 8027372:	68fb      	ldr	r3, [r7, #12]
 8027374:	3301      	adds	r3, #1
 8027376:	60fb      	str	r3, [r7, #12]
 8027378:	68fb      	ldr	r3, [r7, #12]
 802737a:	781b      	ldrb	r3, [r3, #0]
 802737c:	2b00      	cmp	r3, #0
 802737e:	d004      	beq.n	802738a <_strnlen_s+0x28>
 8027380:	683b      	ldr	r3, [r7, #0]
 8027382:	1e5a      	subs	r2, r3, #1
 8027384:	603a      	str	r2, [r7, #0]
 8027386:	2b00      	cmp	r3, #0
 8027388:	d1f3      	bne.n	8027372 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 802738a:	68fa      	ldr	r2, [r7, #12]
 802738c:	687b      	ldr	r3, [r7, #4]
 802738e:	1ad3      	subs	r3, r2, r3
}
 8027390:	4618      	mov	r0, r3
 8027392:	3714      	adds	r7, #20
 8027394:	46bd      	mov	sp, r7
 8027396:	f85d 7b04 	ldr.w	r7, [sp], #4
 802739a:	4770      	bx	lr

0802739c <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 802739c:	b480      	push	{r7}
 802739e:	b083      	sub	sp, #12
 80273a0:	af00      	add	r7, sp, #0
 80273a2:	4603      	mov	r3, r0
 80273a4:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80273a6:	79fb      	ldrb	r3, [r7, #7]
 80273a8:	2b2f      	cmp	r3, #47	; 0x2f
 80273aa:	d904      	bls.n	80273b6 <_is_digit+0x1a>
 80273ac:	79fb      	ldrb	r3, [r7, #7]
 80273ae:	2b39      	cmp	r3, #57	; 0x39
 80273b0:	d801      	bhi.n	80273b6 <_is_digit+0x1a>
 80273b2:	2301      	movs	r3, #1
 80273b4:	e000      	b.n	80273b8 <_is_digit+0x1c>
 80273b6:	2300      	movs	r3, #0
 80273b8:	f003 0301 	and.w	r3, r3, #1
 80273bc:	b2db      	uxtb	r3, r3
}
 80273be:	4618      	mov	r0, r3
 80273c0:	370c      	adds	r7, #12
 80273c2:	46bd      	mov	sp, r7
 80273c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273c8:	4770      	bx	lr

080273ca <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80273ca:	b580      	push	{r7, lr}
 80273cc:	b084      	sub	sp, #16
 80273ce:	af00      	add	r7, sp, #0
 80273d0:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80273d2:	2300      	movs	r3, #0
 80273d4:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80273d6:	e00e      	b.n	80273f6 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80273d8:	68fa      	ldr	r2, [r7, #12]
 80273da:	4613      	mov	r3, r2
 80273dc:	009b      	lsls	r3, r3, #2
 80273de:	4413      	add	r3, r2
 80273e0:	005b      	lsls	r3, r3, #1
 80273e2:	4618      	mov	r0, r3
 80273e4:	687b      	ldr	r3, [r7, #4]
 80273e6:	681b      	ldr	r3, [r3, #0]
 80273e8:	1c59      	adds	r1, r3, #1
 80273ea:	687a      	ldr	r2, [r7, #4]
 80273ec:	6011      	str	r1, [r2, #0]
 80273ee:	781b      	ldrb	r3, [r3, #0]
 80273f0:	4403      	add	r3, r0
 80273f2:	3b30      	subs	r3, #48	; 0x30
 80273f4:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80273f6:	687b      	ldr	r3, [r7, #4]
 80273f8:	681b      	ldr	r3, [r3, #0]
 80273fa:	781b      	ldrb	r3, [r3, #0]
 80273fc:	4618      	mov	r0, r3
 80273fe:	f7ff ffcd 	bl	802739c <_is_digit>
 8027402:	4603      	mov	r3, r0
 8027404:	2b00      	cmp	r3, #0
 8027406:	d1e7      	bne.n	80273d8 <_atoi+0xe>
  }
  return i;
 8027408:	68fb      	ldr	r3, [r7, #12]
}
 802740a:	4618      	mov	r0, r3
 802740c:	3710      	adds	r7, #16
 802740e:	46bd      	mov	sp, r7
 8027410:	bd80      	pop	{r7, pc}

08027412 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8027412:	b590      	push	{r4, r7, lr}
 8027414:	b087      	sub	sp, #28
 8027416:	af00      	add	r7, sp, #0
 8027418:	60f8      	str	r0, [r7, #12]
 802741a:	60b9      	str	r1, [r7, #8]
 802741c:	607a      	str	r2, [r7, #4]
 802741e:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8027420:	687b      	ldr	r3, [r7, #4]
 8027422:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8027424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027426:	f003 0302 	and.w	r3, r3, #2
 802742a:	2b00      	cmp	r3, #0
 802742c:	d125      	bne.n	802747a <_out_rev+0x68>
 802742e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027430:	f003 0301 	and.w	r3, r3, #1
 8027434:	2b00      	cmp	r3, #0
 8027436:	d120      	bne.n	802747a <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8027438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802743a:	617b      	str	r3, [r7, #20]
 802743c:	e00a      	b.n	8027454 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 802743e:	687a      	ldr	r2, [r7, #4]
 8027440:	1c53      	adds	r3, r2, #1
 8027442:	607b      	str	r3, [r7, #4]
 8027444:	68fc      	ldr	r4, [r7, #12]
 8027446:	683b      	ldr	r3, [r7, #0]
 8027448:	68b9      	ldr	r1, [r7, #8]
 802744a:	2020      	movs	r0, #32
 802744c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 802744e:	697b      	ldr	r3, [r7, #20]
 8027450:	3301      	adds	r3, #1
 8027452:	617b      	str	r3, [r7, #20]
 8027454:	697a      	ldr	r2, [r7, #20]
 8027456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027458:	429a      	cmp	r2, r3
 802745a:	d3f0      	bcc.n	802743e <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 802745c:	e00d      	b.n	802747a <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 802745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027460:	3b01      	subs	r3, #1
 8027462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027468:	4413      	add	r3, r2
 802746a:	7818      	ldrb	r0, [r3, #0]
 802746c:	687a      	ldr	r2, [r7, #4]
 802746e:	1c53      	adds	r3, r2, #1
 8027470:	607b      	str	r3, [r7, #4]
 8027472:	68fc      	ldr	r4, [r7, #12]
 8027474:	683b      	ldr	r3, [r7, #0]
 8027476:	68b9      	ldr	r1, [r7, #8]
 8027478:	47a0      	blx	r4
  while (len) {
 802747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802747c:	2b00      	cmp	r3, #0
 802747e:	d1ee      	bne.n	802745e <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8027480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027482:	f003 0302 	and.w	r3, r3, #2
 8027486:	2b00      	cmp	r3, #0
 8027488:	d00e      	beq.n	80274a8 <_out_rev+0x96>
    while (idx - start_idx < width) {
 802748a:	e007      	b.n	802749c <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 802748c:	687a      	ldr	r2, [r7, #4]
 802748e:	1c53      	adds	r3, r2, #1
 8027490:	607b      	str	r3, [r7, #4]
 8027492:	68fc      	ldr	r4, [r7, #12]
 8027494:	683b      	ldr	r3, [r7, #0]
 8027496:	68b9      	ldr	r1, [r7, #8]
 8027498:	2020      	movs	r0, #32
 802749a:	47a0      	blx	r4
    while (idx - start_idx < width) {
 802749c:	687a      	ldr	r2, [r7, #4]
 802749e:	693b      	ldr	r3, [r7, #16]
 80274a0:	1ad3      	subs	r3, r2, r3
 80274a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80274a4:	429a      	cmp	r2, r3
 80274a6:	d8f1      	bhi.n	802748c <_out_rev+0x7a>
    }
  }

  return idx;
 80274a8:	687b      	ldr	r3, [r7, #4]
}
 80274aa:	4618      	mov	r0, r3
 80274ac:	371c      	adds	r7, #28
 80274ae:	46bd      	mov	sp, r7
 80274b0:	bd90      	pop	{r4, r7, pc}

080274b2 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80274b2:	b580      	push	{r7, lr}
 80274b4:	b088      	sub	sp, #32
 80274b6:	af04      	add	r7, sp, #16
 80274b8:	60f8      	str	r0, [r7, #12]
 80274ba:	60b9      	str	r1, [r7, #8]
 80274bc:	607a      	str	r2, [r7, #4]
 80274be:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80274c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80274c2:	f003 0302 	and.w	r3, r3, #2
 80274c6:	2b00      	cmp	r3, #0
 80274c8:	d136      	bne.n	8027538 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80274ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80274cc:	2b00      	cmp	r3, #0
 80274ce:	d018      	beq.n	8027502 <_ntoa_format+0x50>
 80274d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80274d2:	f003 0301 	and.w	r3, r3, #1
 80274d6:	2b00      	cmp	r3, #0
 80274d8:	d013      	beq.n	8027502 <_ntoa_format+0x50>
 80274da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80274de:	2b00      	cmp	r3, #0
 80274e0:	d104      	bne.n	80274ec <_ntoa_format+0x3a>
 80274e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80274e4:	f003 030c 	and.w	r3, r3, #12
 80274e8:	2b00      	cmp	r3, #0
 80274ea:	d00a      	beq.n	8027502 <_ntoa_format+0x50>
      width--;
 80274ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80274ee:	3b01      	subs	r3, #1
 80274f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80274f2:	e006      	b.n	8027502 <_ntoa_format+0x50>
      buf[len++] = '0';
 80274f4:	69fb      	ldr	r3, [r7, #28]
 80274f6:	1c5a      	adds	r2, r3, #1
 80274f8:	61fa      	str	r2, [r7, #28]
 80274fa:	69ba      	ldr	r2, [r7, #24]
 80274fc:	4413      	add	r3, r2
 80274fe:	2230      	movs	r2, #48	; 0x30
 8027500:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8027502:	69fa      	ldr	r2, [r7, #28]
 8027504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027506:	429a      	cmp	r2, r3
 8027508:	d20a      	bcs.n	8027520 <_ntoa_format+0x6e>
 802750a:	69fb      	ldr	r3, [r7, #28]
 802750c:	2b1f      	cmp	r3, #31
 802750e:	d9f1      	bls.n	80274f4 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8027510:	e006      	b.n	8027520 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8027512:	69fb      	ldr	r3, [r7, #28]
 8027514:	1c5a      	adds	r2, r3, #1
 8027516:	61fa      	str	r2, [r7, #28]
 8027518:	69ba      	ldr	r2, [r7, #24]
 802751a:	4413      	add	r3, r2
 802751c:	2230      	movs	r2, #48	; 0x30
 802751e:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8027520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027522:	f003 0301 	and.w	r3, r3, #1
 8027526:	2b00      	cmp	r3, #0
 8027528:	d006      	beq.n	8027538 <_ntoa_format+0x86>
 802752a:	69fa      	ldr	r2, [r7, #28]
 802752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802752e:	429a      	cmp	r2, r3
 8027530:	d202      	bcs.n	8027538 <_ntoa_format+0x86>
 8027532:	69fb      	ldr	r3, [r7, #28]
 8027534:	2b1f      	cmp	r3, #31
 8027536:	d9ec      	bls.n	8027512 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8027538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802753a:	f003 0310 	and.w	r3, r3, #16
 802753e:	2b00      	cmp	r3, #0
 8027540:	d058      	beq.n	80275f4 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8027542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027548:	2b00      	cmp	r3, #0
 802754a:	d116      	bne.n	802757a <_ntoa_format+0xc8>
 802754c:	69fb      	ldr	r3, [r7, #28]
 802754e:	2b00      	cmp	r3, #0
 8027550:	d013      	beq.n	802757a <_ntoa_format+0xc8>
 8027552:	69fa      	ldr	r2, [r7, #28]
 8027554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027556:	429a      	cmp	r2, r3
 8027558:	d003      	beq.n	8027562 <_ntoa_format+0xb0>
 802755a:	69fa      	ldr	r2, [r7, #28]
 802755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802755e:	429a      	cmp	r2, r3
 8027560:	d10b      	bne.n	802757a <_ntoa_format+0xc8>
      len--;
 8027562:	69fb      	ldr	r3, [r7, #28]
 8027564:	3b01      	subs	r3, #1
 8027566:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8027568:	69fb      	ldr	r3, [r7, #28]
 802756a:	2b00      	cmp	r3, #0
 802756c:	d005      	beq.n	802757a <_ntoa_format+0xc8>
 802756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027570:	2b10      	cmp	r3, #16
 8027572:	d102      	bne.n	802757a <_ntoa_format+0xc8>
        len--;
 8027574:	69fb      	ldr	r3, [r7, #28]
 8027576:	3b01      	subs	r3, #1
 8027578:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 802757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802757c:	2b10      	cmp	r3, #16
 802757e:	d10f      	bne.n	80275a0 <_ntoa_format+0xee>
 8027580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027582:	f003 0320 	and.w	r3, r3, #32
 8027586:	2b00      	cmp	r3, #0
 8027588:	d10a      	bne.n	80275a0 <_ntoa_format+0xee>
 802758a:	69fb      	ldr	r3, [r7, #28]
 802758c:	2b1f      	cmp	r3, #31
 802758e:	d807      	bhi.n	80275a0 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8027590:	69fb      	ldr	r3, [r7, #28]
 8027592:	1c5a      	adds	r2, r3, #1
 8027594:	61fa      	str	r2, [r7, #28]
 8027596:	69ba      	ldr	r2, [r7, #24]
 8027598:	4413      	add	r3, r2
 802759a:	2278      	movs	r2, #120	; 0x78
 802759c:	701a      	strb	r2, [r3, #0]
 802759e:	e01f      	b.n	80275e0 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80275a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80275a2:	2b10      	cmp	r3, #16
 80275a4:	d10f      	bne.n	80275c6 <_ntoa_format+0x114>
 80275a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80275a8:	f003 0320 	and.w	r3, r3, #32
 80275ac:	2b00      	cmp	r3, #0
 80275ae:	d00a      	beq.n	80275c6 <_ntoa_format+0x114>
 80275b0:	69fb      	ldr	r3, [r7, #28]
 80275b2:	2b1f      	cmp	r3, #31
 80275b4:	d807      	bhi.n	80275c6 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80275b6:	69fb      	ldr	r3, [r7, #28]
 80275b8:	1c5a      	adds	r2, r3, #1
 80275ba:	61fa      	str	r2, [r7, #28]
 80275bc:	69ba      	ldr	r2, [r7, #24]
 80275be:	4413      	add	r3, r2
 80275c0:	2258      	movs	r2, #88	; 0x58
 80275c2:	701a      	strb	r2, [r3, #0]
 80275c4:	e00c      	b.n	80275e0 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80275c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80275c8:	2b02      	cmp	r3, #2
 80275ca:	d109      	bne.n	80275e0 <_ntoa_format+0x12e>
 80275cc:	69fb      	ldr	r3, [r7, #28]
 80275ce:	2b1f      	cmp	r3, #31
 80275d0:	d806      	bhi.n	80275e0 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80275d2:	69fb      	ldr	r3, [r7, #28]
 80275d4:	1c5a      	adds	r2, r3, #1
 80275d6:	61fa      	str	r2, [r7, #28]
 80275d8:	69ba      	ldr	r2, [r7, #24]
 80275da:	4413      	add	r3, r2
 80275dc:	2262      	movs	r2, #98	; 0x62
 80275de:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80275e0:	69fb      	ldr	r3, [r7, #28]
 80275e2:	2b1f      	cmp	r3, #31
 80275e4:	d806      	bhi.n	80275f4 <_ntoa_format+0x142>
      buf[len++] = '0';
 80275e6:	69fb      	ldr	r3, [r7, #28]
 80275e8:	1c5a      	adds	r2, r3, #1
 80275ea:	61fa      	str	r2, [r7, #28]
 80275ec:	69ba      	ldr	r2, [r7, #24]
 80275ee:	4413      	add	r3, r2
 80275f0:	2230      	movs	r2, #48	; 0x30
 80275f2:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80275f4:	69fb      	ldr	r3, [r7, #28]
 80275f6:	2b1f      	cmp	r3, #31
 80275f8:	d824      	bhi.n	8027644 <_ntoa_format+0x192>
    if (negative) {
 80275fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80275fe:	2b00      	cmp	r3, #0
 8027600:	d007      	beq.n	8027612 <_ntoa_format+0x160>
      buf[len++] = '-';
 8027602:	69fb      	ldr	r3, [r7, #28]
 8027604:	1c5a      	adds	r2, r3, #1
 8027606:	61fa      	str	r2, [r7, #28]
 8027608:	69ba      	ldr	r2, [r7, #24]
 802760a:	4413      	add	r3, r2
 802760c:	222d      	movs	r2, #45	; 0x2d
 802760e:	701a      	strb	r2, [r3, #0]
 8027610:	e018      	b.n	8027644 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8027612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027614:	f003 0304 	and.w	r3, r3, #4
 8027618:	2b00      	cmp	r3, #0
 802761a:	d007      	beq.n	802762c <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 802761c:	69fb      	ldr	r3, [r7, #28]
 802761e:	1c5a      	adds	r2, r3, #1
 8027620:	61fa      	str	r2, [r7, #28]
 8027622:	69ba      	ldr	r2, [r7, #24]
 8027624:	4413      	add	r3, r2
 8027626:	222b      	movs	r2, #43	; 0x2b
 8027628:	701a      	strb	r2, [r3, #0]
 802762a:	e00b      	b.n	8027644 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 802762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802762e:	f003 0308 	and.w	r3, r3, #8
 8027632:	2b00      	cmp	r3, #0
 8027634:	d006      	beq.n	8027644 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8027636:	69fb      	ldr	r3, [r7, #28]
 8027638:	1c5a      	adds	r2, r3, #1
 802763a:	61fa      	str	r2, [r7, #28]
 802763c:	69ba      	ldr	r2, [r7, #24]
 802763e:	4413      	add	r3, r2
 8027640:	2220      	movs	r2, #32
 8027642:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8027644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027646:	9303      	str	r3, [sp, #12]
 8027648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802764a:	9302      	str	r3, [sp, #8]
 802764c:	69fb      	ldr	r3, [r7, #28]
 802764e:	9301      	str	r3, [sp, #4]
 8027650:	69bb      	ldr	r3, [r7, #24]
 8027652:	9300      	str	r3, [sp, #0]
 8027654:	683b      	ldr	r3, [r7, #0]
 8027656:	687a      	ldr	r2, [r7, #4]
 8027658:	68b9      	ldr	r1, [r7, #8]
 802765a:	68f8      	ldr	r0, [r7, #12]
 802765c:	f7ff fed9 	bl	8027412 <_out_rev>
 8027660:	4603      	mov	r3, r0
}
 8027662:	4618      	mov	r0, r3
 8027664:	3710      	adds	r7, #16
 8027666:	46bd      	mov	sp, r7
 8027668:	bd80      	pop	{r7, pc}

0802766a <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 802766a:	b580      	push	{r7, lr}
 802766c:	b096      	sub	sp, #88	; 0x58
 802766e:	af08      	add	r7, sp, #32
 8027670:	60f8      	str	r0, [r7, #12]
 8027672:	60b9      	str	r1, [r7, #8]
 8027674:	607a      	str	r2, [r7, #4]
 8027676:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8027678:	2300      	movs	r3, #0
 802767a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 802767c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802767e:	2b00      	cmp	r3, #0
 8027680:	d103      	bne.n	802768a <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8027682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027684:	f023 0310 	bic.w	r3, r3, #16
 8027688:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 802768a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802768c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027690:	2b00      	cmp	r3, #0
 8027692:	d002      	beq.n	802769a <_ntoa_long+0x30>
 8027694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027696:	2b00      	cmp	r3, #0
 8027698:	d032      	beq.n	8027700 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 802769a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802769c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802769e:	fbb3 f2f2 	udiv	r2, r3, r2
 80276a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80276a4:	fb01 f202 	mul.w	r2, r1, r2
 80276a8:	1a9b      	subs	r3, r3, r2
 80276aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80276ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80276b2:	2b09      	cmp	r3, #9
 80276b4:	d804      	bhi.n	80276c0 <_ntoa_long+0x56>
 80276b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80276ba:	3330      	adds	r3, #48	; 0x30
 80276bc:	b2da      	uxtb	r2, r3
 80276be:	e00d      	b.n	80276dc <_ntoa_long+0x72>
 80276c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80276c2:	f003 0320 	and.w	r3, r3, #32
 80276c6:	2b00      	cmp	r3, #0
 80276c8:	d001      	beq.n	80276ce <_ntoa_long+0x64>
 80276ca:	2241      	movs	r2, #65	; 0x41
 80276cc:	e000      	b.n	80276d0 <_ntoa_long+0x66>
 80276ce:	2261      	movs	r2, #97	; 0x61
 80276d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80276d4:	4413      	add	r3, r2
 80276d6:	b2db      	uxtb	r3, r3
 80276d8:	3b0a      	subs	r3, #10
 80276da:	b2da      	uxtb	r2, r3
 80276dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80276de:	1c59      	adds	r1, r3, #1
 80276e0:	6379      	str	r1, [r7, #52]	; 0x34
 80276e2:	3338      	adds	r3, #56	; 0x38
 80276e4:	443b      	add	r3, r7
 80276e6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80276ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80276ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80276ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80276f2:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80276f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80276f6:	2b00      	cmp	r3, #0
 80276f8:	d002      	beq.n	8027700 <_ntoa_long+0x96>
 80276fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80276fc:	2b1f      	cmp	r3, #31
 80276fe:	d9cc      	bls.n	802769a <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8027700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027702:	9306      	str	r3, [sp, #24]
 8027704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027706:	9305      	str	r3, [sp, #20]
 8027708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802770a:	9304      	str	r3, [sp, #16]
 802770c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802770e:	9303      	str	r3, [sp, #12]
 8027710:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8027714:	9302      	str	r3, [sp, #8]
 8027716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027718:	9301      	str	r3, [sp, #4]
 802771a:	f107 0310 	add.w	r3, r7, #16
 802771e:	9300      	str	r3, [sp, #0]
 8027720:	683b      	ldr	r3, [r7, #0]
 8027722:	687a      	ldr	r2, [r7, #4]
 8027724:	68b9      	ldr	r1, [r7, #8]
 8027726:	68f8      	ldr	r0, [r7, #12]
 8027728:	f7ff fec3 	bl	80274b2 <_ntoa_format>
 802772c:	4603      	mov	r3, r0
}
 802772e:	4618      	mov	r0, r3
 8027730:	3738      	adds	r7, #56	; 0x38
 8027732:	46bd      	mov	sp, r7
 8027734:	bd80      	pop	{r7, pc}

08027736 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8027736:	b580      	push	{r7, lr}
 8027738:	b096      	sub	sp, #88	; 0x58
 802773a:	af08      	add	r7, sp, #32
 802773c:	60f8      	str	r0, [r7, #12]
 802773e:	60b9      	str	r1, [r7, #8]
 8027740:	607a      	str	r2, [r7, #4]
 8027742:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8027744:	2300      	movs	r3, #0
 8027746:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8027748:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802774c:	4313      	orrs	r3, r2
 802774e:	d103      	bne.n	8027758 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8027750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027752:	f023 0310 	bic.w	r3, r3, #16
 8027756:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8027758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802775a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802775e:	2b00      	cmp	r3, #0
 8027760:	d003      	beq.n	802776a <_ntoa_long_long+0x34>
 8027762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8027766:	4313      	orrs	r3, r2
 8027768:	d037      	beq.n	80277da <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 802776a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 802776e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8027772:	f7f8 fe05 	bl	8020380 <__aeabi_uldivmod>
 8027776:	4613      	mov	r3, r2
 8027778:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 802777c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8027780:	2b09      	cmp	r3, #9
 8027782:	d804      	bhi.n	802778e <_ntoa_long_long+0x58>
 8027784:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8027788:	3330      	adds	r3, #48	; 0x30
 802778a:	b2da      	uxtb	r2, r3
 802778c:	e00d      	b.n	80277aa <_ntoa_long_long+0x74>
 802778e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027790:	f003 0320 	and.w	r3, r3, #32
 8027794:	2b00      	cmp	r3, #0
 8027796:	d001      	beq.n	802779c <_ntoa_long_long+0x66>
 8027798:	2241      	movs	r2, #65	; 0x41
 802779a:	e000      	b.n	802779e <_ntoa_long_long+0x68>
 802779c:	2261      	movs	r2, #97	; 0x61
 802779e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80277a2:	4413      	add	r3, r2
 80277a4:	b2db      	uxtb	r3, r3
 80277a6:	3b0a      	subs	r3, #10
 80277a8:	b2da      	uxtb	r2, r3
 80277aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80277ac:	1c59      	adds	r1, r3, #1
 80277ae:	6379      	str	r1, [r7, #52]	; 0x34
 80277b0:	3338      	adds	r3, #56	; 0x38
 80277b2:	443b      	add	r3, r7
 80277b4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80277b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80277bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80277c0:	f7f8 fdde 	bl	8020380 <__aeabi_uldivmod>
 80277c4:	4602      	mov	r2, r0
 80277c6:	460b      	mov	r3, r1
 80277c8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80277cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80277d0:	4313      	orrs	r3, r2
 80277d2:	d002      	beq.n	80277da <_ntoa_long_long+0xa4>
 80277d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80277d6:	2b1f      	cmp	r3, #31
 80277d8:	d9c7      	bls.n	802776a <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80277da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80277dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80277de:	9206      	str	r2, [sp, #24]
 80277e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80277e2:	9205      	str	r2, [sp, #20]
 80277e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80277e6:	9204      	str	r2, [sp, #16]
 80277e8:	9303      	str	r3, [sp, #12]
 80277ea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80277ee:	9302      	str	r3, [sp, #8]
 80277f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80277f2:	9301      	str	r3, [sp, #4]
 80277f4:	f107 0310 	add.w	r3, r7, #16
 80277f8:	9300      	str	r3, [sp, #0]
 80277fa:	683b      	ldr	r3, [r7, #0]
 80277fc:	687a      	ldr	r2, [r7, #4]
 80277fe:	68b9      	ldr	r1, [r7, #8]
 8027800:	68f8      	ldr	r0, [r7, #12]
 8027802:	f7ff fe56 	bl	80274b2 <_ntoa_format>
 8027806:	4603      	mov	r3, r0
}
 8027808:	4618      	mov	r0, r3
 802780a:	3738      	adds	r7, #56	; 0x38
 802780c:	46bd      	mov	sp, r7
 802780e:	bd80      	pop	{r7, pc}

08027810 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8027810:	b580      	push	{r7, lr}
 8027812:	b09c      	sub	sp, #112	; 0x70
 8027814:	af04      	add	r7, sp, #16
 8027816:	6178      	str	r0, [r7, #20]
 8027818:	6139      	str	r1, [r7, #16]
 802781a:	60fa      	str	r2, [r7, #12]
 802781c:	60bb      	str	r3, [r7, #8]
 802781e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8027822:	2300      	movs	r3, #0
 8027824:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8027826:	f04f 0200 	mov.w	r2, #0
 802782a:	f04f 0300 	mov.w	r3, #0
 802782e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8027832:	ed97 6b00 	vldr	d6, [r7]
 8027836:	ed97 7b00 	vldr	d7, [r7]
 802783a:	eeb4 6b47 	vcmp.f64	d6, d7
 802783e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027842:	d00f      	beq.n	8027864 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8027844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027846:	9303      	str	r3, [sp, #12]
 8027848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802784a:	9302      	str	r3, [sp, #8]
 802784c:	2303      	movs	r3, #3
 802784e:	9301      	str	r3, [sp, #4]
 8027850:	4bb5      	ldr	r3, [pc, #724]	; (8027b28 <_ftoa+0x318>)
 8027852:	9300      	str	r3, [sp, #0]
 8027854:	68bb      	ldr	r3, [r7, #8]
 8027856:	68fa      	ldr	r2, [r7, #12]
 8027858:	6939      	ldr	r1, [r7, #16]
 802785a:	6978      	ldr	r0, [r7, #20]
 802785c:	f7ff fdd9 	bl	8027412 <_out_rev>
 8027860:	4603      	mov	r3, r0
 8027862:	e215      	b.n	8027c90 <_ftoa+0x480>
  if (value < -DBL_MAX)
 8027864:	ed97 7b00 	vldr	d7, [r7]
 8027868:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8027b00 <_ftoa+0x2f0>
 802786c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027874:	d50f      	bpl.n	8027896 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8027876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027878:	9303      	str	r3, [sp, #12]
 802787a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802787c:	9302      	str	r3, [sp, #8]
 802787e:	2304      	movs	r3, #4
 8027880:	9301      	str	r3, [sp, #4]
 8027882:	4baa      	ldr	r3, [pc, #680]	; (8027b2c <_ftoa+0x31c>)
 8027884:	9300      	str	r3, [sp, #0]
 8027886:	68bb      	ldr	r3, [r7, #8]
 8027888:	68fa      	ldr	r2, [r7, #12]
 802788a:	6939      	ldr	r1, [r7, #16]
 802788c:	6978      	ldr	r0, [r7, #20]
 802788e:	f7ff fdc0 	bl	8027412 <_out_rev>
 8027892:	4603      	mov	r3, r0
 8027894:	e1fc      	b.n	8027c90 <_ftoa+0x480>
  if (value > DBL_MAX)
 8027896:	ed97 7b00 	vldr	d7, [r7]
 802789a:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8027b08 <_ftoa+0x2f8>
 802789e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80278a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278a6:	dd1d      	ble.n	80278e4 <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80278a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80278aa:	f003 0304 	and.w	r3, r3, #4
 80278ae:	2b00      	cmp	r3, #0
 80278b0:	d001      	beq.n	80278b6 <_ftoa+0xa6>
 80278b2:	4b9f      	ldr	r3, [pc, #636]	; (8027b30 <_ftoa+0x320>)
 80278b4:	e000      	b.n	80278b8 <_ftoa+0xa8>
 80278b6:	4b9f      	ldr	r3, [pc, #636]	; (8027b34 <_ftoa+0x324>)
 80278b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80278ba:	f002 0204 	and.w	r2, r2, #4
 80278be:	2a00      	cmp	r2, #0
 80278c0:	d001      	beq.n	80278c6 <_ftoa+0xb6>
 80278c2:	2204      	movs	r2, #4
 80278c4:	e000      	b.n	80278c8 <_ftoa+0xb8>
 80278c6:	2203      	movs	r2, #3
 80278c8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80278ca:	9103      	str	r1, [sp, #12]
 80278cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80278ce:	9102      	str	r1, [sp, #8]
 80278d0:	9201      	str	r2, [sp, #4]
 80278d2:	9300      	str	r3, [sp, #0]
 80278d4:	68bb      	ldr	r3, [r7, #8]
 80278d6:	68fa      	ldr	r2, [r7, #12]
 80278d8:	6939      	ldr	r1, [r7, #16]
 80278da:	6978      	ldr	r0, [r7, #20]
 80278dc:	f7ff fd99 	bl	8027412 <_out_rev>
 80278e0:	4603      	mov	r3, r0
 80278e2:	e1d5      	b.n	8027c90 <_ftoa+0x480>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80278e4:	ed97 7b00 	vldr	d7, [r7]
 80278e8:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8027b10 <_ftoa+0x300>
 80278ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80278f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278f4:	dc08      	bgt.n	8027908 <_ftoa+0xf8>
 80278f6:	ed97 7b00 	vldr	d7, [r7]
 80278fa:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8027b18 <_ftoa+0x308>
 80278fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027906:	d50f      	bpl.n	8027928 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8027908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802790a:	9302      	str	r3, [sp, #8]
 802790c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802790e:	9301      	str	r3, [sp, #4]
 8027910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8027912:	9300      	str	r3, [sp, #0]
 8027914:	ed97 0b00 	vldr	d0, [r7]
 8027918:	68bb      	ldr	r3, [r7, #8]
 802791a:	68fa      	ldr	r2, [r7, #12]
 802791c:	6939      	ldr	r1, [r7, #16]
 802791e:	6978      	ldr	r0, [r7, #20]
 8027920:	f000 f9be 	bl	8027ca0 <_etoa>
 8027924:	4603      	mov	r3, r0
 8027926:	e1b3      	b.n	8027c90 <_ftoa+0x480>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8027928:	2300      	movs	r3, #0
 802792a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 802792e:	ed97 7b00 	vldr	d7, [r7]
 8027932:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8027936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802793a:	d50a      	bpl.n	8027952 <_ftoa+0x142>
    negative = true;
 802793c:	2301      	movs	r3, #1
 802793e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8027942:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8027b20 <_ftoa+0x310>
 8027946:	ed97 7b00 	vldr	d7, [r7]
 802794a:	ee36 7b47 	vsub.f64	d7, d6, d7
 802794e:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8027952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027958:	2b00      	cmp	r3, #0
 802795a:	d10d      	bne.n	8027978 <_ftoa+0x168>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 802795c:	2306      	movs	r3, #6
 802795e:	66bb      	str	r3, [r7, #104]	; 0x68
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8027960:	e00a      	b.n	8027978 <_ftoa+0x168>
    buf[len++] = '0';
 8027962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027964:	1c5a      	adds	r2, r3, #1
 8027966:	65fa      	str	r2, [r7, #92]	; 0x5c
 8027968:	3360      	adds	r3, #96	; 0x60
 802796a:	443b      	add	r3, r7
 802796c:	2230      	movs	r2, #48	; 0x30
 802796e:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8027972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8027974:	3b01      	subs	r3, #1
 8027976:	66bb      	str	r3, [r7, #104]	; 0x68
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8027978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802797a:	2b1f      	cmp	r3, #31
 802797c:	d802      	bhi.n	8027984 <_ftoa+0x174>
 802797e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8027980:	2b09      	cmp	r3, #9
 8027982:	d8ee      	bhi.n	8027962 <_ftoa+0x152>
  }

  int whole = (int)value;
 8027984:	ed97 7b00 	vldr	d7, [r7]
 8027988:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802798c:	ee17 3a90 	vmov	r3, s15
 8027990:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8027992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027994:	ee07 3a90 	vmov	s15, r3
 8027998:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802799c:	ed97 6b00 	vldr	d6, [r7]
 80279a0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80279a4:	4a64      	ldr	r2, [pc, #400]	; (8027b38 <_ftoa+0x328>)
 80279a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80279a8:	00db      	lsls	r3, r3, #3
 80279aa:	4413      	add	r3, r2
 80279ac:	ed93 7b00 	vldr	d7, [r3]
 80279b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80279b4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80279b8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80279bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80279c0:	ee17 3a90 	vmov	r3, s15
 80279c4:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80279c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80279c8:	ee07 3a90 	vmov	s15, r3
 80279cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80279d0:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80279d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80279d8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80279dc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80279e0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80279e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80279e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80279ec:	dd18      	ble.n	8027a20 <_ftoa+0x210>
    ++frac;
 80279ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80279f0:	3301      	adds	r3, #1
 80279f2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80279f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80279f6:	ee07 3a90 	vmov	s15, r3
 80279fa:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80279fe:	4a4e      	ldr	r2, [pc, #312]	; (8027b38 <_ftoa+0x328>)
 8027a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8027a02:	00db      	lsls	r3, r3, #3
 8027a04:	4413      	add	r3, r2
 8027a06:	ed93 7b00 	vldr	d7, [r3]
 8027a0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a12:	db19      	blt.n	8027a48 <_ftoa+0x238>
      frac = 0;
 8027a14:	2300      	movs	r3, #0
 8027a16:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8027a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027a1a:	3301      	adds	r3, #1
 8027a1c:	657b      	str	r3, [r7, #84]	; 0x54
 8027a1e:	e013      	b.n	8027a48 <_ftoa+0x238>
    }
  }
  else if (diff < 0.5) {
 8027a20:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8027a24:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8027a28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a30:	d40a      	bmi.n	8027a48 <_ftoa+0x238>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8027a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027a34:	2b00      	cmp	r3, #0
 8027a36:	d004      	beq.n	8027a42 <_ftoa+0x232>
 8027a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027a3a:	f003 0301 	and.w	r3, r3, #1
 8027a3e:	2b00      	cmp	r3, #0
 8027a40:	d002      	beq.n	8027a48 <_ftoa+0x238>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8027a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027a44:	3301      	adds	r3, #1
 8027a46:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8027a48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8027a4a:	2b00      	cmp	r3, #0
 8027a4c:	d12e      	bne.n	8027aac <_ftoa+0x29c>
    diff = value - (double)whole;
 8027a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027a50:	ee07 3a90 	vmov	s15, r3
 8027a54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8027a58:	ed97 6b00 	vldr	d6, [r7]
 8027a5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8027a60:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8027a64:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8027a68:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8027a6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a74:	bf4c      	ite	mi
 8027a76:	2301      	movmi	r3, #1
 8027a78:	2300      	movpl	r3, #0
 8027a7a:	b2db      	uxtb	r3, r3
 8027a7c:	f083 0301 	eor.w	r3, r3, #1
 8027a80:	b2db      	uxtb	r3, r3
 8027a82:	2b00      	cmp	r3, #0
 8027a84:	d108      	bne.n	8027a98 <_ftoa+0x288>
 8027a86:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8027a8a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8027a8e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a96:	dd70      	ble.n	8027b7a <_ftoa+0x36a>
 8027a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027a9a:	f003 0301 	and.w	r3, r3, #1
 8027a9e:	2b00      	cmp	r3, #0
 8027aa0:	f000 808d 	beq.w	8027bbe <_ftoa+0x3ae>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8027aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027aa6:	3301      	adds	r3, #1
 8027aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8027aaa:	e088      	b.n	8027bbe <_ftoa+0x3ae>
    }
  }
  else {
    unsigned int count = prec;
 8027aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8027aae:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8027ab0:	e01f      	b.n	8027af2 <_ftoa+0x2e2>
      --count;
 8027ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027ab4:	3b01      	subs	r3, #1
 8027ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8027ab8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8027aba:	4b20      	ldr	r3, [pc, #128]	; (8027b3c <_ftoa+0x32c>)
 8027abc:	fba3 2301 	umull	r2, r3, r3, r1
 8027ac0:	08da      	lsrs	r2, r3, #3
 8027ac2:	4613      	mov	r3, r2
 8027ac4:	009b      	lsls	r3, r3, #2
 8027ac6:	4413      	add	r3, r2
 8027ac8:	005b      	lsls	r3, r3, #1
 8027aca:	1aca      	subs	r2, r1, r3
 8027acc:	b2d2      	uxtb	r2, r2
 8027ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027ad0:	1c59      	adds	r1, r3, #1
 8027ad2:	65f9      	str	r1, [r7, #92]	; 0x5c
 8027ad4:	3230      	adds	r2, #48	; 0x30
 8027ad6:	b2d2      	uxtb	r2, r2
 8027ad8:	3360      	adds	r3, #96	; 0x60
 8027ada:	443b      	add	r3, r7
 8027adc:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8027ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027ae2:	4a16      	ldr	r2, [pc, #88]	; (8027b3c <_ftoa+0x32c>)
 8027ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8027ae8:	08db      	lsrs	r3, r3, #3
 8027aea:	653b      	str	r3, [r7, #80]	; 0x50
 8027aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027aee:	2b00      	cmp	r3, #0
 8027af0:	d026      	beq.n	8027b40 <_ftoa+0x330>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8027af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027af4:	2b1f      	cmp	r3, #31
 8027af6:	d9dc      	bls.n	8027ab2 <_ftoa+0x2a2>
 8027af8:	e02c      	b.n	8027b54 <_ftoa+0x344>
 8027afa:	bf00      	nop
 8027afc:	f3af 8000 	nop.w
 8027b00:	ffffffff 	.word	0xffffffff
 8027b04:	ffefffff 	.word	0xffefffff
 8027b08:	ffffffff 	.word	0xffffffff
 8027b0c:	7fefffff 	.word	0x7fefffff
 8027b10:	00000000 	.word	0x00000000
 8027b14:	41cdcd65 	.word	0x41cdcd65
 8027b18:	00000000 	.word	0x00000000
 8027b1c:	c1cdcd65 	.word	0xc1cdcd65
	...
 8027b28:	08030c90 	.word	0x08030c90
 8027b2c:	08030c94 	.word	0x08030c94
 8027b30:	08030c9c 	.word	0x08030c9c
 8027b34:	08030ca4 	.word	0x08030ca4
 8027b38:	08030cc8 	.word	0x08030cc8
 8027b3c:	cccccccd 	.word	0xcccccccd
        break;
 8027b40:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8027b42:	e007      	b.n	8027b54 <_ftoa+0x344>
      buf[len++] = '0';
 8027b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027b46:	1c5a      	adds	r2, r3, #1
 8027b48:	65fa      	str	r2, [r7, #92]	; 0x5c
 8027b4a:	3360      	adds	r3, #96	; 0x60
 8027b4c:	443b      	add	r3, r7
 8027b4e:	2230      	movs	r2, #48	; 0x30
 8027b50:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8027b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027b56:	2b1f      	cmp	r3, #31
 8027b58:	d804      	bhi.n	8027b64 <_ftoa+0x354>
 8027b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027b5c:	1e5a      	subs	r2, r3, #1
 8027b5e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8027b60:	2b00      	cmp	r3, #0
 8027b62:	d1ef      	bne.n	8027b44 <_ftoa+0x334>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8027b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027b66:	2b1f      	cmp	r3, #31
 8027b68:	d829      	bhi.n	8027bbe <_ftoa+0x3ae>
      // add decimal
      buf[len++] = '.';
 8027b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027b6c:	1c5a      	adds	r2, r3, #1
 8027b6e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8027b70:	3360      	adds	r3, #96	; 0x60
 8027b72:	443b      	add	r3, r7
 8027b74:	222e      	movs	r2, #46	; 0x2e
 8027b76:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8027b7a:	e020      	b.n	8027bbe <_ftoa+0x3ae>
    buf[len++] = (char)(48 + (whole % 10));
 8027b7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027b7e:	4b46      	ldr	r3, [pc, #280]	; (8027c98 <_ftoa+0x488>)
 8027b80:	fb83 1302 	smull	r1, r3, r3, r2
 8027b84:	1099      	asrs	r1, r3, #2
 8027b86:	17d3      	asrs	r3, r2, #31
 8027b88:	1ac9      	subs	r1, r1, r3
 8027b8a:	460b      	mov	r3, r1
 8027b8c:	009b      	lsls	r3, r3, #2
 8027b8e:	440b      	add	r3, r1
 8027b90:	005b      	lsls	r3, r3, #1
 8027b92:	1ad1      	subs	r1, r2, r3
 8027b94:	b2ca      	uxtb	r2, r1
 8027b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027b98:	1c59      	adds	r1, r3, #1
 8027b9a:	65f9      	str	r1, [r7, #92]	; 0x5c
 8027b9c:	3230      	adds	r2, #48	; 0x30
 8027b9e:	b2d2      	uxtb	r2, r2
 8027ba0:	3360      	adds	r3, #96	; 0x60
 8027ba2:	443b      	add	r3, r7
 8027ba4:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8027ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027baa:	4a3b      	ldr	r2, [pc, #236]	; (8027c98 <_ftoa+0x488>)
 8027bac:	fb82 1203 	smull	r1, r2, r2, r3
 8027bb0:	1092      	asrs	r2, r2, #2
 8027bb2:	17db      	asrs	r3, r3, #31
 8027bb4:	1ad3      	subs	r3, r2, r3
 8027bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8027bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027bba:	2b00      	cmp	r3, #0
 8027bbc:	d003      	beq.n	8027bc6 <_ftoa+0x3b6>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8027bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027bc0:	2b1f      	cmp	r3, #31
 8027bc2:	d9db      	bls.n	8027b7c <_ftoa+0x36c>
 8027bc4:	e000      	b.n	8027bc8 <_ftoa+0x3b8>
      break;
 8027bc6:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8027bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027bca:	f003 0302 	and.w	r3, r3, #2
 8027bce:	2b00      	cmp	r3, #0
 8027bd0:	d123      	bne.n	8027c1a <_ftoa+0x40a>
 8027bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027bd4:	f003 0301 	and.w	r3, r3, #1
 8027bd8:	2b00      	cmp	r3, #0
 8027bda:	d01e      	beq.n	8027c1a <_ftoa+0x40a>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8027bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027bde:	2b00      	cmp	r3, #0
 8027be0:	d014      	beq.n	8027c0c <_ftoa+0x3fc>
 8027be2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8027be6:	2b00      	cmp	r3, #0
 8027be8:	d104      	bne.n	8027bf4 <_ftoa+0x3e4>
 8027bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027bec:	f003 030c 	and.w	r3, r3, #12
 8027bf0:	2b00      	cmp	r3, #0
 8027bf2:	d00b      	beq.n	8027c0c <_ftoa+0x3fc>
      width--;
 8027bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027bf6:	3b01      	subs	r3, #1
 8027bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8027bfa:	e007      	b.n	8027c0c <_ftoa+0x3fc>
      buf[len++] = '0';
 8027bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027bfe:	1c5a      	adds	r2, r3, #1
 8027c00:	65fa      	str	r2, [r7, #92]	; 0x5c
 8027c02:	3360      	adds	r3, #96	; 0x60
 8027c04:	443b      	add	r3, r7
 8027c06:	2230      	movs	r2, #48	; 0x30
 8027c08:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8027c0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8027c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027c10:	429a      	cmp	r2, r3
 8027c12:	d202      	bcs.n	8027c1a <_ftoa+0x40a>
 8027c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027c16:	2b1f      	cmp	r3, #31
 8027c18:	d9f0      	bls.n	8027bfc <_ftoa+0x3ec>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8027c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027c1c:	2b1f      	cmp	r3, #31
 8027c1e:	d827      	bhi.n	8027c70 <_ftoa+0x460>
    if (negative) {
 8027c20:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8027c24:	2b00      	cmp	r3, #0
 8027c26:	d008      	beq.n	8027c3a <_ftoa+0x42a>
      buf[len++] = '-';
 8027c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027c2a:	1c5a      	adds	r2, r3, #1
 8027c2c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8027c2e:	3360      	adds	r3, #96	; 0x60
 8027c30:	443b      	add	r3, r7
 8027c32:	222d      	movs	r2, #45	; 0x2d
 8027c34:	f803 2c48 	strb.w	r2, [r3, #-72]
 8027c38:	e01a      	b.n	8027c70 <_ftoa+0x460>
    }
    else if (flags & FLAGS_PLUS) {
 8027c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027c3c:	f003 0304 	and.w	r3, r3, #4
 8027c40:	2b00      	cmp	r3, #0
 8027c42:	d008      	beq.n	8027c56 <_ftoa+0x446>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8027c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027c46:	1c5a      	adds	r2, r3, #1
 8027c48:	65fa      	str	r2, [r7, #92]	; 0x5c
 8027c4a:	3360      	adds	r3, #96	; 0x60
 8027c4c:	443b      	add	r3, r7
 8027c4e:	222b      	movs	r2, #43	; 0x2b
 8027c50:	f803 2c48 	strb.w	r2, [r3, #-72]
 8027c54:	e00c      	b.n	8027c70 <_ftoa+0x460>
    }
    else if (flags & FLAGS_SPACE) {
 8027c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027c58:	f003 0308 	and.w	r3, r3, #8
 8027c5c:	2b00      	cmp	r3, #0
 8027c5e:	d007      	beq.n	8027c70 <_ftoa+0x460>
      buf[len++] = ' ';
 8027c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027c62:	1c5a      	adds	r2, r3, #1
 8027c64:	65fa      	str	r2, [r7, #92]	; 0x5c
 8027c66:	3360      	adds	r3, #96	; 0x60
 8027c68:	443b      	add	r3, r7
 8027c6a:	2220      	movs	r2, #32
 8027c6c:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8027c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027c72:	9303      	str	r3, [sp, #12]
 8027c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027c76:	9302      	str	r3, [sp, #8]
 8027c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027c7a:	9301      	str	r3, [sp, #4]
 8027c7c:	f107 0318 	add.w	r3, r7, #24
 8027c80:	9300      	str	r3, [sp, #0]
 8027c82:	68bb      	ldr	r3, [r7, #8]
 8027c84:	68fa      	ldr	r2, [r7, #12]
 8027c86:	6939      	ldr	r1, [r7, #16]
 8027c88:	6978      	ldr	r0, [r7, #20]
 8027c8a:	f7ff fbc2 	bl	8027412 <_out_rev>
 8027c8e:	4603      	mov	r3, r0
}
 8027c90:	4618      	mov	r0, r3
 8027c92:	3760      	adds	r7, #96	; 0x60
 8027c94:	46bd      	mov	sp, r7
 8027c96:	bd80      	pop	{r7, pc}
 8027c98:	66666667 	.word	0x66666667
 8027c9c:	00000000 	.word	0x00000000

08027ca0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8027ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8027ca4:	b09a      	sub	sp, #104	; 0x68
 8027ca6:	af06      	add	r7, sp, #24
 8027ca8:	6178      	str	r0, [r7, #20]
 8027caa:	6139      	str	r1, [r7, #16]
 8027cac:	60fa      	str	r2, [r7, #12]
 8027cae:	60bb      	str	r3, [r7, #8]
 8027cb0:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8027cb4:	ed97 6b00 	vldr	d6, [r7]
 8027cb8:	ed97 7b00 	vldr	d7, [r7]
 8027cbc:	eeb4 6b47 	vcmp.f64	d6, d7
 8027cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cc4:	d111      	bne.n	8027cea <_etoa+0x4a>
 8027cc6:	ed97 7b00 	vldr	d7, [r7]
 8027cca:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8027f98 <_etoa+0x2f8>
 8027cce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cd6:	dc08      	bgt.n	8027cea <_etoa+0x4a>
 8027cd8:	ed97 7b00 	vldr	d7, [r7]
 8027cdc:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8027fa0 <_etoa+0x300>
 8027ce0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ce8:	d50f      	bpl.n	8027d0a <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8027cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027cec:	9302      	str	r3, [sp, #8]
 8027cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8027cf0:	9301      	str	r3, [sp, #4]
 8027cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027cf4:	9300      	str	r3, [sp, #0]
 8027cf6:	ed97 0b00 	vldr	d0, [r7]
 8027cfa:	68bb      	ldr	r3, [r7, #8]
 8027cfc:	68fa      	ldr	r2, [r7, #12]
 8027cfe:	6939      	ldr	r1, [r7, #16]
 8027d00:	6978      	ldr	r0, [r7, #20]
 8027d02:	f7ff fd85 	bl	8027810 <_ftoa>
 8027d06:	4603      	mov	r3, r0
 8027d08:	e1c2      	b.n	8028090 <_etoa+0x3f0>
  }

  // determine the sign
  const bool negative = value < 0;
 8027d0a:	ed97 7b00 	vldr	d7, [r7]
 8027d0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8027d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d16:	bf4c      	ite	mi
 8027d18:	2301      	movmi	r3, #1
 8027d1a:	2300      	movpl	r3, #0
 8027d1c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 8027d20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8027d24:	2b00      	cmp	r3, #0
 8027d26:	d005      	beq.n	8027d34 <_etoa+0x94>
    value = -value;
 8027d28:	ed97 7b00 	vldr	d7, [r7]
 8027d2c:	eeb1 7b47 	vneg.f64	d7, d7
 8027d30:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8027d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027d3a:	2b00      	cmp	r3, #0
 8027d3c:	d101      	bne.n	8027d42 <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8027d3e:	2306      	movs	r3, #6
 8027d40:	673b      	str	r3, [r7, #112]	; 0x70
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8027d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027d46:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8027d4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8027d4e:	f04f 0200 	mov.w	r2, #0
 8027d52:	f04f 0300 	mov.w	r3, #0
 8027d56:	0d0a      	lsrs	r2, r1, #20
 8027d58:	2300      	movs	r3, #0
 8027d5a:	4613      	mov	r3, r2
 8027d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8027d60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8027d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8027d66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027d6a:	4690      	mov	r8, r2
 8027d6c:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8027d70:	4644      	mov	r4, r8
 8027d72:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8027d76:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8027d7a:	e9c7 4506 	strd	r4, r5, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8027d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027d80:	ee07 3a90 	vmov	s15, r3
 8027d84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8027d88:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8027fa8 <_etoa+0x308>
 8027d8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027d90:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8027fb0 <_etoa+0x310>
 8027d94:	ee37 6b06 	vadd.f64	d6, d7, d6
 8027d98:	ed97 7b06 	vldr	d7, [r7, #24]
 8027d9c:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 8027da0:	ee37 7b45 	vsub.f64	d7, d7, d5
 8027da4:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8027fb8 <_etoa+0x318>
 8027da8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8027dac:	ee36 7b07 	vadd.f64	d7, d6, d7
 8027db0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8027db4:	ee17 3a90 	vmov	r3, s15
 8027db8:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8027dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027dbc:	ee07 3a90 	vmov	s15, r3
 8027dc0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8027dc4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8027fc0 <_etoa+0x320>
 8027dc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027dcc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8027dd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8027dd4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8027dd8:	ee17 3a90 	vmov	r3, s15
 8027ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8027dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027de0:	ee07 3a90 	vmov	s15, r3
 8027de4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8027de8:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8027fc8 <_etoa+0x328>
 8027dec:	ee27 6b06 	vmul.f64	d6, d7, d6
 8027df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027df2:	ee07 3a90 	vmov	s15, r3
 8027df6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8027dfa:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8027fd0 <_etoa+0x330>
 8027dfe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8027e02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8027e06:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 8027e0a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8027e0e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8027e12:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8027e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027e18:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8027e1c:	17da      	asrs	r2, r3, #31
 8027e1e:	469a      	mov	sl, r3
 8027e20:	4693      	mov	fp, r2
 8027e22:	f04f 0200 	mov.w	r2, #0
 8027e26:	f04f 0300 	mov.w	r3, #0
 8027e2a:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8027e2e:	2200      	movs	r2, #0
 8027e30:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8027e34:	ed97 6b06 	vldr	d6, [r7, #24]
 8027e38:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8027e3c:	ee37 4b07 	vadd.f64	d4, d7, d7
 8027e40:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8027e44:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8027e48:	ee35 5b47 	vsub.f64	d5, d5, d7
 8027e4c:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8027e50:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 8027e54:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8027e58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8027e5c:	ee37 3b03 	vadd.f64	d3, d7, d3
 8027e60:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8027e64:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8027e68:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 8027e6c:	ee37 3b03 	vadd.f64	d3, d7, d3
 8027e70:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8027e74:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8027e78:	ee35 5b07 	vadd.f64	d5, d5, d7
 8027e7c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8027e80:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8027e84:	ee37 7b05 	vadd.f64	d7, d7, d5
 8027e88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027e8c:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 8027e90:	ed97 7b06 	vldr	d7, [r7, #24]
 8027e94:	ed97 6b00 	vldr	d6, [r7]
 8027e98:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ea0:	d50a      	bpl.n	8027eb8 <_etoa+0x218>
    expval--;
 8027ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027ea4:	3b01      	subs	r3, #1
 8027ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 8027ea8:	ed97 6b06 	vldr	d6, [r7, #24]
 8027eac:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8027eb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8027eb4:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8027eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027eba:	2b63      	cmp	r3, #99	; 0x63
 8027ebc:	dc05      	bgt.n	8027eca <_etoa+0x22a>
 8027ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027ec0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8027ec4:	db01      	blt.n	8027eca <_etoa+0x22a>
 8027ec6:	2304      	movs	r3, #4
 8027ec8:	e000      	b.n	8027ecc <_etoa+0x22c>
 8027eca:	2305      	movs	r3, #5
 8027ecc:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8027ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8027ed4:	2b00      	cmp	r3, #0
 8027ed6:	d031      	beq.n	8027f3c <_etoa+0x29c>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8027ed8:	ed97 7b00 	vldr	d7, [r7]
 8027edc:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8027fd8 <_etoa+0x338>
 8027ee0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ee8:	db1d      	blt.n	8027f26 <_etoa+0x286>
 8027eea:	ed97 7b00 	vldr	d7, [r7]
 8027eee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8027fe0 <_etoa+0x340>
 8027ef2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027efa:	d514      	bpl.n	8027f26 <_etoa+0x286>
      if ((int)prec > expval) {
 8027efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027efe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027f00:	429a      	cmp	r2, r3
 8027f02:	da05      	bge.n	8027f10 <_etoa+0x270>
        prec = (unsigned)((int)prec - expval - 1);
 8027f04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8027f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027f08:	1ad3      	subs	r3, r2, r3
 8027f0a:	3b01      	subs	r3, #1
 8027f0c:	673b      	str	r3, [r7, #112]	; 0x70
 8027f0e:	e001      	b.n	8027f14 <_etoa+0x274>
      }
      else {
        prec = 0;
 8027f10:	2300      	movs	r3, #0
 8027f12:	673b      	str	r3, [r7, #112]	; 0x70
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8027f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027f1a:	67bb      	str	r3, [r7, #120]	; 0x78
      // no characters in exponent
      minwidth = 0U;
 8027f1c:	2300      	movs	r3, #0
 8027f1e:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 8027f20:	2300      	movs	r3, #0
 8027f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027f24:	e00a      	b.n	8027f3c <_etoa+0x29c>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8027f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027f28:	2b00      	cmp	r3, #0
 8027f2a:	d007      	beq.n	8027f3c <_etoa+0x29c>
 8027f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027f32:	2b00      	cmp	r3, #0
 8027f34:	d002      	beq.n	8027f3c <_etoa+0x29c>
        --prec;
 8027f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027f38:	3b01      	subs	r3, #1
 8027f3a:	673b      	str	r3, [r7, #112]	; 0x70
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8027f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8027f3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 8027f40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8027f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027f44:	429a      	cmp	r2, r3
 8027f46:	d904      	bls.n	8027f52 <_etoa+0x2b2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8027f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027f4c:	1ad3      	subs	r3, r2, r3
 8027f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8027f50:	e001      	b.n	8027f56 <_etoa+0x2b6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8027f52:	2300      	movs	r3, #0
 8027f54:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8027f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027f58:	f003 0302 	and.w	r3, r3, #2
 8027f5c:	2b00      	cmp	r3, #0
 8027f5e:	d004      	beq.n	8027f6a <_etoa+0x2ca>
 8027f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027f62:	2b00      	cmp	r3, #0
 8027f64:	d001      	beq.n	8027f6a <_etoa+0x2ca>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8027f66:	2300      	movs	r3, #0
 8027f68:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 8027f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027f6c:	2b00      	cmp	r3, #0
 8027f6e:	d007      	beq.n	8027f80 <_etoa+0x2e0>
    value /= conv.F;
 8027f70:	ed97 6b06 	vldr	d6, [r7, #24]
 8027f74:	ed97 5b00 	vldr	d5, [r7]
 8027f78:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8027f7c:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 8027f80:	68fb      	ldr	r3, [r7, #12]
 8027f82:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8027f84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8027f88:	2b00      	cmp	r3, #0
 8027f8a:	d02d      	beq.n	8027fe8 <_etoa+0x348>
 8027f8c:	ed97 7b00 	vldr	d7, [r7]
 8027f90:	eeb1 7b47 	vneg.f64	d7, d7
 8027f94:	e02a      	b.n	8027fec <_etoa+0x34c>
 8027f96:	bf00      	nop
 8027f98:	ffffffff 	.word	0xffffffff
 8027f9c:	7fefffff 	.word	0x7fefffff
 8027fa0:	ffffffff 	.word	0xffffffff
 8027fa4:	ffefffff 	.word	0xffefffff
 8027fa8:	509f79fb 	.word	0x509f79fb
 8027fac:	3fd34413 	.word	0x3fd34413
 8027fb0:	8b60c8b3 	.word	0x8b60c8b3
 8027fb4:	3fc68a28 	.word	0x3fc68a28
 8027fb8:	636f4361 	.word	0x636f4361
 8027fbc:	3fd287a7 	.word	0x3fd287a7
 8027fc0:	0979a371 	.word	0x0979a371
 8027fc4:	400a934f 	.word	0x400a934f
 8027fc8:	bbb55516 	.word	0xbbb55516
 8027fcc:	40026bb1 	.word	0x40026bb1
 8027fd0:	fefa39ef 	.word	0xfefa39ef
 8027fd4:	3fe62e42 	.word	0x3fe62e42
 8027fd8:	eb1c432d 	.word	0xeb1c432d
 8027fdc:	3f1a36e2 	.word	0x3f1a36e2
 8027fe0:	00000000 	.word	0x00000000
 8027fe4:	412e8480 	.word	0x412e8480
 8027fe8:	ed97 7b00 	vldr	d7, [r7]
 8027fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8027ff2:	9302      	str	r3, [sp, #8]
 8027ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027ff6:	9301      	str	r3, [sp, #4]
 8027ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027ffa:	9300      	str	r3, [sp, #0]
 8027ffc:	eeb0 0b47 	vmov.f64	d0, d7
 8028000:	68bb      	ldr	r3, [r7, #8]
 8028002:	68fa      	ldr	r2, [r7, #12]
 8028004:	6939      	ldr	r1, [r7, #16]
 8028006:	6978      	ldr	r0, [r7, #20]
 8028008:	f7ff fc02 	bl	8027810 <_ftoa>
 802800c:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 802800e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028010:	2b00      	cmp	r3, #0
 8028012:	d03c      	beq.n	802808e <_etoa+0x3ee>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8028014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028016:	f003 0320 	and.w	r3, r3, #32
 802801a:	2b00      	cmp	r3, #0
 802801c:	d001      	beq.n	8028022 <_etoa+0x382>
 802801e:	2045      	movs	r0, #69	; 0x45
 8028020:	e000      	b.n	8028024 <_etoa+0x384>
 8028022:	2065      	movs	r0, #101	; 0x65
 8028024:	68fa      	ldr	r2, [r7, #12]
 8028026:	1c53      	adds	r3, r2, #1
 8028028:	60fb      	str	r3, [r7, #12]
 802802a:	697c      	ldr	r4, [r7, #20]
 802802c:	68bb      	ldr	r3, [r7, #8]
 802802e:	6939      	ldr	r1, [r7, #16]
 8028030:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8028032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028034:	2b00      	cmp	r3, #0
 8028036:	bfb8      	it	lt
 8028038:	425b      	neglt	r3, r3
 802803a:	4618      	mov	r0, r3
 802803c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802803e:	0fdb      	lsrs	r3, r3, #31
 8028040:	b2db      	uxtb	r3, r3
 8028042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8028044:	3a01      	subs	r2, #1
 8028046:	2105      	movs	r1, #5
 8028048:	9105      	str	r1, [sp, #20]
 802804a:	9204      	str	r2, [sp, #16]
 802804c:	2200      	movs	r2, #0
 802804e:	9203      	str	r2, [sp, #12]
 8028050:	220a      	movs	r2, #10
 8028052:	9202      	str	r2, [sp, #8]
 8028054:	9301      	str	r3, [sp, #4]
 8028056:	9000      	str	r0, [sp, #0]
 8028058:	68bb      	ldr	r3, [r7, #8]
 802805a:	68fa      	ldr	r2, [r7, #12]
 802805c:	6939      	ldr	r1, [r7, #16]
 802805e:	6978      	ldr	r0, [r7, #20]
 8028060:	f7ff fb03 	bl	802766a <_ntoa_long>
 8028064:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8028066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028068:	f003 0302 	and.w	r3, r3, #2
 802806c:	2b00      	cmp	r3, #0
 802806e:	d00e      	beq.n	802808e <_etoa+0x3ee>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8028070:	e007      	b.n	8028082 <_etoa+0x3e2>
 8028072:	68fa      	ldr	r2, [r7, #12]
 8028074:	1c53      	adds	r3, r2, #1
 8028076:	60fb      	str	r3, [r7, #12]
 8028078:	697c      	ldr	r4, [r7, #20]
 802807a:	68bb      	ldr	r3, [r7, #8]
 802807c:	6939      	ldr	r1, [r7, #16]
 802807e:	2020      	movs	r0, #32
 8028080:	47a0      	blx	r4
 8028082:	68fa      	ldr	r2, [r7, #12]
 8028084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028086:	1ad3      	subs	r3, r2, r3
 8028088:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802808a:	429a      	cmp	r2, r3
 802808c:	d8f1      	bhi.n	8028072 <_etoa+0x3d2>
    }
  }
  return idx;
 802808e:	68fb      	ldr	r3, [r7, #12]
}
 8028090:	4618      	mov	r0, r3
 8028092:	3750      	adds	r7, #80	; 0x50
 8028094:	46bd      	mov	sp, r7
 8028096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802809a:	bf00      	nop

0802809c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 802809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280a0:	b0a3      	sub	sp, #140	; 0x8c
 80280a2:	af0a      	add	r7, sp, #40	; 0x28
 80280a4:	6178      	str	r0, [r7, #20]
 80280a6:	6139      	str	r1, [r7, #16]
 80280a8:	60fa      	str	r2, [r7, #12]
 80280aa:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80280ac:	2300      	movs	r3, #0
 80280ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 80280b0:	693b      	ldr	r3, [r7, #16]
 80280b2:	2b00      	cmp	r3, #0
 80280b4:	f040 84ba 	bne.w	8028a2c <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 80280b8:	4ba3      	ldr	r3, [pc, #652]	; (8028348 <_vsnprintf+0x2ac>)
 80280ba:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80280bc:	f000 bcb6 	b.w	8028a2c <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80280c0:	68bb      	ldr	r3, [r7, #8]
 80280c2:	781b      	ldrb	r3, [r3, #0]
 80280c4:	2b25      	cmp	r3, #37	; 0x25
 80280c6:	d00d      	beq.n	80280e4 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80280c8:	68bb      	ldr	r3, [r7, #8]
 80280ca:	7818      	ldrb	r0, [r3, #0]
 80280cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80280ce:	1c53      	adds	r3, r2, #1
 80280d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80280d2:	697c      	ldr	r4, [r7, #20]
 80280d4:	68fb      	ldr	r3, [r7, #12]
 80280d6:	6939      	ldr	r1, [r7, #16]
 80280d8:	47a0      	blx	r4
      format++;
 80280da:	68bb      	ldr	r3, [r7, #8]
 80280dc:	3301      	adds	r3, #1
 80280de:	60bb      	str	r3, [r7, #8]
      continue;
 80280e0:	f000 bca4 	b.w	8028a2c <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 80280e4:	68bb      	ldr	r3, [r7, #8]
 80280e6:	3301      	adds	r3, #1
 80280e8:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80280ea:	2300      	movs	r3, #0
 80280ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80280ee:	68bb      	ldr	r3, [r7, #8]
 80280f0:	781b      	ldrb	r3, [r3, #0]
 80280f2:	3b20      	subs	r3, #32
 80280f4:	2b10      	cmp	r3, #16
 80280f6:	d857      	bhi.n	80281a8 <_vsnprintf+0x10c>
 80280f8:	a201      	add	r2, pc, #4	; (adr r2, 8028100 <_vsnprintf+0x64>)
 80280fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80280fe:	bf00      	nop
 8028100:	08028181 	.word	0x08028181
 8028104:	080281a9 	.word	0x080281a9
 8028108:	080281a9 	.word	0x080281a9
 802810c:	08028195 	.word	0x08028195
 8028110:	080281a9 	.word	0x080281a9
 8028114:	080281a9 	.word	0x080281a9
 8028118:	080281a9 	.word	0x080281a9
 802811c:	080281a9 	.word	0x080281a9
 8028120:	080281a9 	.word	0x080281a9
 8028124:	080281a9 	.word	0x080281a9
 8028128:	080281a9 	.word	0x080281a9
 802812c:	0802816d 	.word	0x0802816d
 8028130:	080281a9 	.word	0x080281a9
 8028134:	08028159 	.word	0x08028159
 8028138:	080281a9 	.word	0x080281a9
 802813c:	080281a9 	.word	0x080281a9
 8028140:	08028145 	.word	0x08028145
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8028144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028146:	f043 0301 	orr.w	r3, r3, #1
 802814a:	65fb      	str	r3, [r7, #92]	; 0x5c
 802814c:	68bb      	ldr	r3, [r7, #8]
 802814e:	3301      	adds	r3, #1
 8028150:	60bb      	str	r3, [r7, #8]
 8028152:	2301      	movs	r3, #1
 8028154:	653b      	str	r3, [r7, #80]	; 0x50
 8028156:	e02a      	b.n	80281ae <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8028158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802815a:	f043 0302 	orr.w	r3, r3, #2
 802815e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028160:	68bb      	ldr	r3, [r7, #8]
 8028162:	3301      	adds	r3, #1
 8028164:	60bb      	str	r3, [r7, #8]
 8028166:	2301      	movs	r3, #1
 8028168:	653b      	str	r3, [r7, #80]	; 0x50
 802816a:	e020      	b.n	80281ae <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 802816c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802816e:	f043 0304 	orr.w	r3, r3, #4
 8028172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028174:	68bb      	ldr	r3, [r7, #8]
 8028176:	3301      	adds	r3, #1
 8028178:	60bb      	str	r3, [r7, #8]
 802817a:	2301      	movs	r3, #1
 802817c:	653b      	str	r3, [r7, #80]	; 0x50
 802817e:	e016      	b.n	80281ae <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8028180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028182:	f043 0308 	orr.w	r3, r3, #8
 8028186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028188:	68bb      	ldr	r3, [r7, #8]
 802818a:	3301      	adds	r3, #1
 802818c:	60bb      	str	r3, [r7, #8]
 802818e:	2301      	movs	r3, #1
 8028190:	653b      	str	r3, [r7, #80]	; 0x50
 8028192:	e00c      	b.n	80281ae <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8028194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028196:	f043 0310 	orr.w	r3, r3, #16
 802819a:	65fb      	str	r3, [r7, #92]	; 0x5c
 802819c:	68bb      	ldr	r3, [r7, #8]
 802819e:	3301      	adds	r3, #1
 80281a0:	60bb      	str	r3, [r7, #8]
 80281a2:	2301      	movs	r3, #1
 80281a4:	653b      	str	r3, [r7, #80]	; 0x50
 80281a6:	e002      	b.n	80281ae <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80281a8:	2300      	movs	r3, #0
 80281aa:	653b      	str	r3, [r7, #80]	; 0x50
 80281ac:	bf00      	nop
      }
    } while (n);
 80281ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80281b0:	2b00      	cmp	r3, #0
 80281b2:	d19c      	bne.n	80280ee <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80281b4:	2300      	movs	r3, #0
 80281b6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80281b8:	68bb      	ldr	r3, [r7, #8]
 80281ba:	781b      	ldrb	r3, [r3, #0]
 80281bc:	4618      	mov	r0, r3
 80281be:	f7ff f8ed 	bl	802739c <_is_digit>
 80281c2:	4603      	mov	r3, r0
 80281c4:	2b00      	cmp	r3, #0
 80281c6:	d006      	beq.n	80281d6 <_vsnprintf+0x13a>
      width = _atoi(&format);
 80281c8:	f107 0308 	add.w	r3, r7, #8
 80281cc:	4618      	mov	r0, r3
 80281ce:	f7ff f8fc 	bl	80273ca <_atoi>
 80281d2:	65b8      	str	r0, [r7, #88]	; 0x58
 80281d4:	e01a      	b.n	802820c <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80281d6:	68bb      	ldr	r3, [r7, #8]
 80281d8:	781b      	ldrb	r3, [r3, #0]
 80281da:	2b2a      	cmp	r3, #42	; 0x2a
 80281dc:	d116      	bne.n	802820c <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 80281de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80281e2:	1d1a      	adds	r2, r3, #4
 80281e4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80281e8:	681b      	ldr	r3, [r3, #0]
 80281ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 80281ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80281ee:	2b00      	cmp	r3, #0
 80281f0:	da07      	bge.n	8028202 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80281f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80281f4:	f043 0302 	orr.w	r3, r3, #2
 80281f8:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80281fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80281fc:	425b      	negs	r3, r3
 80281fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8028200:	e001      	b.n	8028206 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8028202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028204:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8028206:	68bb      	ldr	r3, [r7, #8]
 8028208:	3301      	adds	r3, #1
 802820a:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 802820c:	2300      	movs	r3, #0
 802820e:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8028210:	68bb      	ldr	r3, [r7, #8]
 8028212:	781b      	ldrb	r3, [r3, #0]
 8028214:	2b2e      	cmp	r3, #46	; 0x2e
 8028216:	d127      	bne.n	8028268 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8028218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802821a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802821e:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8028220:	68bb      	ldr	r3, [r7, #8]
 8028222:	3301      	adds	r3, #1
 8028224:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8028226:	68bb      	ldr	r3, [r7, #8]
 8028228:	781b      	ldrb	r3, [r3, #0]
 802822a:	4618      	mov	r0, r3
 802822c:	f7ff f8b6 	bl	802739c <_is_digit>
 8028230:	4603      	mov	r3, r0
 8028232:	2b00      	cmp	r3, #0
 8028234:	d006      	beq.n	8028244 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8028236:	f107 0308 	add.w	r3, r7, #8
 802823a:	4618      	mov	r0, r3
 802823c:	f7ff f8c5 	bl	80273ca <_atoi>
 8028240:	6578      	str	r0, [r7, #84]	; 0x54
 8028242:	e011      	b.n	8028268 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8028244:	68bb      	ldr	r3, [r7, #8]
 8028246:	781b      	ldrb	r3, [r3, #0]
 8028248:	2b2a      	cmp	r3, #42	; 0x2a
 802824a:	d10d      	bne.n	8028268 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 802824c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028250:	1d1a      	adds	r2, r3, #4
 8028252:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028256:	681b      	ldr	r3, [r3, #0]
 8028258:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 802825a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802825c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028260:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8028262:	68bb      	ldr	r3, [r7, #8]
 8028264:	3301      	adds	r3, #1
 8028266:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8028268:	68bb      	ldr	r3, [r7, #8]
 802826a:	781b      	ldrb	r3, [r3, #0]
 802826c:	3b68      	subs	r3, #104	; 0x68
 802826e:	2b12      	cmp	r3, #18
 8028270:	d866      	bhi.n	8028340 <_vsnprintf+0x2a4>
 8028272:	a201      	add	r2, pc, #4	; (adr r2, 8028278 <_vsnprintf+0x1dc>)
 8028274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028278:	080282eb 	.word	0x080282eb
 802827c:	08028341 	.word	0x08028341
 8028280:	08028321 	.word	0x08028321
 8028284:	08028341 	.word	0x08028341
 8028288:	080282c5 	.word	0x080282c5
 802828c:	08028341 	.word	0x08028341
 8028290:	08028341 	.word	0x08028341
 8028294:	08028341 	.word	0x08028341
 8028298:	08028341 	.word	0x08028341
 802829c:	08028341 	.word	0x08028341
 80282a0:	08028341 	.word	0x08028341
 80282a4:	08028341 	.word	0x08028341
 80282a8:	08028311 	.word	0x08028311
 80282ac:	08028341 	.word	0x08028341
 80282b0:	08028341 	.word	0x08028341
 80282b4:	08028341 	.word	0x08028341
 80282b8:	08028341 	.word	0x08028341
 80282bc:	08028341 	.word	0x08028341
 80282c0:	08028331 	.word	0x08028331
      case 'l' :
        flags |= FLAGS_LONG;
 80282c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80282c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80282ca:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80282cc:	68bb      	ldr	r3, [r7, #8]
 80282ce:	3301      	adds	r3, #1
 80282d0:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80282d2:	68bb      	ldr	r3, [r7, #8]
 80282d4:	781b      	ldrb	r3, [r3, #0]
 80282d6:	2b6c      	cmp	r3, #108	; 0x6c
 80282d8:	d134      	bne.n	8028344 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80282da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80282dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80282e0:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80282e2:	68bb      	ldr	r3, [r7, #8]
 80282e4:	3301      	adds	r3, #1
 80282e6:	60bb      	str	r3, [r7, #8]
        }
        break;
 80282e8:	e02c      	b.n	8028344 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80282ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80282ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80282f0:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80282f2:	68bb      	ldr	r3, [r7, #8]
 80282f4:	3301      	adds	r3, #1
 80282f6:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80282f8:	68bb      	ldr	r3, [r7, #8]
 80282fa:	781b      	ldrb	r3, [r3, #0]
 80282fc:	2b68      	cmp	r3, #104	; 0x68
 80282fe:	d125      	bne.n	802834c <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8028300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028306:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8028308:	68bb      	ldr	r3, [r7, #8]
 802830a:	3301      	adds	r3, #1
 802830c:	60bb      	str	r3, [r7, #8]
        }
        break;
 802830e:	e01d      	b.n	802834c <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8028310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028316:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8028318:	68bb      	ldr	r3, [r7, #8]
 802831a:	3301      	adds	r3, #1
 802831c:	60bb      	str	r3, [r7, #8]
        break;
 802831e:	e016      	b.n	802834e <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8028320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8028326:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8028328:	68bb      	ldr	r3, [r7, #8]
 802832a:	3301      	adds	r3, #1
 802832c:	60bb      	str	r3, [r7, #8]
        break;
 802832e:	e00e      	b.n	802834e <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8028330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028336:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8028338:	68bb      	ldr	r3, [r7, #8]
 802833a:	3301      	adds	r3, #1
 802833c:	60bb      	str	r3, [r7, #8]
        break;
 802833e:	e006      	b.n	802834e <_vsnprintf+0x2b2>
      default :
        break;
 8028340:	bf00      	nop
 8028342:	e004      	b.n	802834e <_vsnprintf+0x2b2>
        break;
 8028344:	bf00      	nop
 8028346:	e002      	b.n	802834e <_vsnprintf+0x2b2>
 8028348:	08027321 	.word	0x08027321
        break;
 802834c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 802834e:	68bb      	ldr	r3, [r7, #8]
 8028350:	781b      	ldrb	r3, [r3, #0]
 8028352:	3b25      	subs	r3, #37	; 0x25
 8028354:	2b53      	cmp	r3, #83	; 0x53
 8028356:	f200 835c 	bhi.w	8028a12 <_vsnprintf+0x976>
 802835a:	a201      	add	r2, pc, #4	; (adr r2, 8028360 <_vsnprintf+0x2c4>)
 802835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028360:	080289fb 	.word	0x080289fb
 8028364:	08028a13 	.word	0x08028a13
 8028368:	08028a13 	.word	0x08028a13
 802836c:	08028a13 	.word	0x08028a13
 8028370:	08028a13 	.word	0x08028a13
 8028374:	08028a13 	.word	0x08028a13
 8028378:	08028a13 	.word	0x08028a13
 802837c:	08028a13 	.word	0x08028a13
 8028380:	08028a13 	.word	0x08028a13
 8028384:	08028a13 	.word	0x08028a13
 8028388:	08028a13 	.word	0x08028a13
 802838c:	08028a13 	.word	0x08028a13
 8028390:	08028a13 	.word	0x08028a13
 8028394:	08028a13 	.word	0x08028a13
 8028398:	08028a13 	.word	0x08028a13
 802839c:	08028a13 	.word	0x08028a13
 80283a0:	08028a13 	.word	0x08028a13
 80283a4:	08028a13 	.word	0x08028a13
 80283a8:	08028a13 	.word	0x08028a13
 80283ac:	08028a13 	.word	0x08028a13
 80283b0:	08028a13 	.word	0x08028a13
 80283b4:	08028a13 	.word	0x08028a13
 80283b8:	08028a13 	.word	0x08028a13
 80283bc:	08028a13 	.word	0x08028a13
 80283c0:	08028a13 	.word	0x08028a13
 80283c4:	08028a13 	.word	0x08028a13
 80283c8:	08028a13 	.word	0x08028a13
 80283cc:	08028a13 	.word	0x08028a13
 80283d0:	08028a13 	.word	0x08028a13
 80283d4:	08028a13 	.word	0x08028a13
 80283d8:	08028a13 	.word	0x08028a13
 80283dc:	08028a13 	.word	0x08028a13
 80283e0:	080287b3 	.word	0x080287b3
 80283e4:	08028767 	.word	0x08028767
 80283e8:	080287b3 	.word	0x080287b3
 80283ec:	08028a13 	.word	0x08028a13
 80283f0:	08028a13 	.word	0x08028a13
 80283f4:	08028a13 	.word	0x08028a13
 80283f8:	08028a13 	.word	0x08028a13
 80283fc:	08028a13 	.word	0x08028a13
 8028400:	08028a13 	.word	0x08028a13
 8028404:	08028a13 	.word	0x08028a13
 8028408:	08028a13 	.word	0x08028a13
 802840c:	08028a13 	.word	0x08028a13
 8028410:	08028a13 	.word	0x08028a13
 8028414:	08028a13 	.word	0x08028a13
 8028418:	08028a13 	.word	0x08028a13
 802841c:	08028a13 	.word	0x08028a13
 8028420:	08028a13 	.word	0x08028a13
 8028424:	08028a13 	.word	0x08028a13
 8028428:	08028a13 	.word	0x08028a13
 802842c:	080284b1 	.word	0x080284b1
 8028430:	08028a13 	.word	0x08028a13
 8028434:	08028a13 	.word	0x08028a13
 8028438:	08028a13 	.word	0x08028a13
 802843c:	08028a13 	.word	0x08028a13
 8028440:	08028a13 	.word	0x08028a13
 8028444:	08028a13 	.word	0x08028a13
 8028448:	08028a13 	.word	0x08028a13
 802844c:	08028a13 	.word	0x08028a13
 8028450:	08028a13 	.word	0x08028a13
 8028454:	080284b1 	.word	0x080284b1
 8028458:	0802881f 	.word	0x0802881f
 802845c:	080284b1 	.word	0x080284b1
 8028460:	080287b3 	.word	0x080287b3
 8028464:	08028767 	.word	0x08028767
 8028468:	080287b3 	.word	0x080287b3
 802846c:	08028a13 	.word	0x08028a13
 8028470:	080284b1 	.word	0x080284b1
 8028474:	08028a13 	.word	0x08028a13
 8028478:	08028a13 	.word	0x08028a13
 802847c:	08028a13 	.word	0x08028a13
 8028480:	08028a13 	.word	0x08028a13
 8028484:	08028a13 	.word	0x08028a13
 8028488:	080284b1 	.word	0x080284b1
 802848c:	0802895f 	.word	0x0802895f
 8028490:	08028a13 	.word	0x08028a13
 8028494:	08028a13 	.word	0x08028a13
 8028498:	08028897 	.word	0x08028897
 802849c:	08028a13 	.word	0x08028a13
 80284a0:	080284b1 	.word	0x080284b1
 80284a4:	08028a13 	.word	0x08028a13
 80284a8:	08028a13 	.word	0x08028a13
 80284ac:	080284b1 	.word	0x080284b1
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80284b0:	68bb      	ldr	r3, [r7, #8]
 80284b2:	781b      	ldrb	r3, [r3, #0]
 80284b4:	2b78      	cmp	r3, #120	; 0x78
 80284b6:	d003      	beq.n	80284c0 <_vsnprintf+0x424>
 80284b8:	68bb      	ldr	r3, [r7, #8]
 80284ba:	781b      	ldrb	r3, [r3, #0]
 80284bc:	2b58      	cmp	r3, #88	; 0x58
 80284be:	d102      	bne.n	80284c6 <_vsnprintf+0x42a>
          base = 16U;
 80284c0:	2310      	movs	r3, #16
 80284c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80284c4:	e013      	b.n	80284ee <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 80284c6:	68bb      	ldr	r3, [r7, #8]
 80284c8:	781b      	ldrb	r3, [r3, #0]
 80284ca:	2b6f      	cmp	r3, #111	; 0x6f
 80284cc:	d102      	bne.n	80284d4 <_vsnprintf+0x438>
          base =  8U;
 80284ce:	2308      	movs	r3, #8
 80284d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80284d2:	e00c      	b.n	80284ee <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 80284d4:	68bb      	ldr	r3, [r7, #8]
 80284d6:	781b      	ldrb	r3, [r3, #0]
 80284d8:	2b62      	cmp	r3, #98	; 0x62
 80284da:	d102      	bne.n	80284e2 <_vsnprintf+0x446>
          base =  2U;
 80284dc:	2302      	movs	r3, #2
 80284de:	64bb      	str	r3, [r7, #72]	; 0x48
 80284e0:	e005      	b.n	80284ee <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 80284e2:	230a      	movs	r3, #10
 80284e4:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80284e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80284e8:	f023 0310 	bic.w	r3, r3, #16
 80284ec:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80284ee:	68bb      	ldr	r3, [r7, #8]
 80284f0:	781b      	ldrb	r3, [r3, #0]
 80284f2:	2b58      	cmp	r3, #88	; 0x58
 80284f4:	d103      	bne.n	80284fe <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 80284f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80284f8:	f043 0320 	orr.w	r3, r3, #32
 80284fc:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80284fe:	68bb      	ldr	r3, [r7, #8]
 8028500:	781b      	ldrb	r3, [r3, #0]
 8028502:	2b69      	cmp	r3, #105	; 0x69
 8028504:	d007      	beq.n	8028516 <_vsnprintf+0x47a>
 8028506:	68bb      	ldr	r3, [r7, #8]
 8028508:	781b      	ldrb	r3, [r3, #0]
 802850a:	2b64      	cmp	r3, #100	; 0x64
 802850c:	d003      	beq.n	8028516 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 802850e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028510:	f023 030c 	bic.w	r3, r3, #12
 8028514:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8028516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802851c:	2b00      	cmp	r3, #0
 802851e:	d003      	beq.n	8028528 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8028520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028522:	f023 0301 	bic.w	r3, r3, #1
 8028526:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8028528:	68bb      	ldr	r3, [r7, #8]
 802852a:	781b      	ldrb	r3, [r3, #0]
 802852c:	2b69      	cmp	r3, #105	; 0x69
 802852e:	d004      	beq.n	802853a <_vsnprintf+0x49e>
 8028530:	68bb      	ldr	r3, [r7, #8]
 8028532:	781b      	ldrb	r3, [r3, #0]
 8028534:	2b64      	cmp	r3, #100	; 0x64
 8028536:	f040 8098 	bne.w	802866a <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 802853a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802853c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028540:	2b00      	cmp	r3, #0
 8028542:	d031      	beq.n	80285a8 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8028544:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028548:	3307      	adds	r3, #7
 802854a:	f023 0307 	bic.w	r3, r3, #7
 802854e:	f103 0208 	add.w	r2, r3, #8
 8028552:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028556:	e9d3 2300 	ldrd	r2, r3, [r3]
 802855a:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 802855e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8028562:	2b00      	cmp	r3, #0
 8028564:	da06      	bge.n	8028574 <_vsnprintf+0x4d8>
 8028566:	2100      	movs	r1, #0
 8028568:	f1d2 0800 	rsbs	r8, r2, #0
 802856c:	eb61 0903 	sbc.w	r9, r1, r3
 8028570:	4642      	mov	r2, r8
 8028572:	464b      	mov	r3, r9
 8028574:	69f9      	ldr	r1, [r7, #28]
 8028576:	0fc9      	lsrs	r1, r1, #31
 8028578:	b2c9      	uxtb	r1, r1
 802857a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 802857c:	2400      	movs	r4, #0
 802857e:	4682      	mov	sl, r0
 8028580:	46a3      	mov	fp, r4
 8028582:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8028584:	9008      	str	r0, [sp, #32]
 8028586:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8028588:	9007      	str	r0, [sp, #28]
 802858a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802858c:	9006      	str	r0, [sp, #24]
 802858e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8028592:	9102      	str	r1, [sp, #8]
 8028594:	e9cd 2300 	strd	r2, r3, [sp]
 8028598:	68fb      	ldr	r3, [r7, #12]
 802859a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802859c:	6939      	ldr	r1, [r7, #16]
 802859e:	6978      	ldr	r0, [r7, #20]
 80285a0:	f7ff f8c9 	bl	8027736 <_ntoa_long_long>
 80285a4:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80285a6:	e0da      	b.n	802875e <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80285a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80285aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80285ae:	2b00      	cmp	r3, #0
 80285b0:	d020      	beq.n	80285f4 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 80285b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80285b6:	1d1a      	adds	r2, r3, #4
 80285b8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80285bc:	681b      	ldr	r3, [r3, #0]
 80285be:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80285c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80285c2:	2b00      	cmp	r3, #0
 80285c4:	bfb8      	it	lt
 80285c6:	425b      	neglt	r3, r3
 80285c8:	4619      	mov	r1, r3
 80285ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80285cc:	0fdb      	lsrs	r3, r3, #31
 80285ce:	b2db      	uxtb	r3, r3
 80285d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80285d2:	9205      	str	r2, [sp, #20]
 80285d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80285d6:	9204      	str	r2, [sp, #16]
 80285d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80285da:	9203      	str	r2, [sp, #12]
 80285dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80285de:	9202      	str	r2, [sp, #8]
 80285e0:	9301      	str	r3, [sp, #4]
 80285e2:	9100      	str	r1, [sp, #0]
 80285e4:	68fb      	ldr	r3, [r7, #12]
 80285e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80285e8:	6939      	ldr	r1, [r7, #16]
 80285ea:	6978      	ldr	r0, [r7, #20]
 80285ec:	f7ff f83d 	bl	802766a <_ntoa_long>
 80285f0:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80285f2:	e0b4      	b.n	802875e <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80285f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80285f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80285fa:	2b00      	cmp	r3, #0
 80285fc:	d007      	beq.n	802860e <_vsnprintf+0x572>
 80285fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028602:	1d1a      	adds	r2, r3, #4
 8028604:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028608:	681b      	ldr	r3, [r3, #0]
 802860a:	b2db      	uxtb	r3, r3
 802860c:	e012      	b.n	8028634 <_vsnprintf+0x598>
 802860e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028614:	2b00      	cmp	r3, #0
 8028616:	d007      	beq.n	8028628 <_vsnprintf+0x58c>
 8028618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802861c:	1d1a      	adds	r2, r3, #4
 802861e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028622:	681b      	ldr	r3, [r3, #0]
 8028624:	b21b      	sxth	r3, r3
 8028626:	e005      	b.n	8028634 <_vsnprintf+0x598>
 8028628:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802862c:	1d1a      	adds	r2, r3, #4
 802862e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028632:	681b      	ldr	r3, [r3, #0]
 8028634:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8028636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028638:	2b00      	cmp	r3, #0
 802863a:	bfb8      	it	lt
 802863c:	425b      	neglt	r3, r3
 802863e:	4619      	mov	r1, r3
 8028640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028642:	0fdb      	lsrs	r3, r3, #31
 8028644:	b2db      	uxtb	r3, r3
 8028646:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8028648:	9205      	str	r2, [sp, #20]
 802864a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802864c:	9204      	str	r2, [sp, #16]
 802864e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028650:	9203      	str	r2, [sp, #12]
 8028652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8028654:	9202      	str	r2, [sp, #8]
 8028656:	9301      	str	r3, [sp, #4]
 8028658:	9100      	str	r1, [sp, #0]
 802865a:	68fb      	ldr	r3, [r7, #12]
 802865c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802865e:	6939      	ldr	r1, [r7, #16]
 8028660:	6978      	ldr	r0, [r7, #20]
 8028662:	f7ff f802 	bl	802766a <_ntoa_long>
 8028666:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8028668:	e079      	b.n	802875e <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 802866a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802866c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028670:	2b00      	cmp	r3, #0
 8028672:	d022      	beq.n	80286ba <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8028674:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028678:	3307      	adds	r3, #7
 802867a:	f023 0307 	bic.w	r3, r3, #7
 802867e:	f103 0208 	add.w	r2, r3, #8
 8028682:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802868a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 802868c:	2000      	movs	r0, #0
 802868e:	460d      	mov	r5, r1
 8028690:	4606      	mov	r6, r0
 8028692:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8028694:	9108      	str	r1, [sp, #32]
 8028696:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8028698:	9107      	str	r1, [sp, #28]
 802869a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802869c:	9106      	str	r1, [sp, #24]
 802869e:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80286a2:	2100      	movs	r1, #0
 80286a4:	9102      	str	r1, [sp, #8]
 80286a6:	e9cd 2300 	strd	r2, r3, [sp]
 80286aa:	68fb      	ldr	r3, [r7, #12]
 80286ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80286ae:	6939      	ldr	r1, [r7, #16]
 80286b0:	6978      	ldr	r0, [r7, #20]
 80286b2:	f7ff f840 	bl	8027736 <_ntoa_long_long>
 80286b6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80286b8:	e051      	b.n	802875e <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80286ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80286bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80286c0:	2b00      	cmp	r3, #0
 80286c2:	d018      	beq.n	80286f6 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80286c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80286c8:	1d1a      	adds	r2, r3, #4
 80286ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80286ce:	681b      	ldr	r3, [r3, #0]
 80286d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80286d2:	9205      	str	r2, [sp, #20]
 80286d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80286d6:	9204      	str	r2, [sp, #16]
 80286d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80286da:	9203      	str	r2, [sp, #12]
 80286dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80286de:	9202      	str	r2, [sp, #8]
 80286e0:	2200      	movs	r2, #0
 80286e2:	9201      	str	r2, [sp, #4]
 80286e4:	9300      	str	r3, [sp, #0]
 80286e6:	68fb      	ldr	r3, [r7, #12]
 80286e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80286ea:	6939      	ldr	r1, [r7, #16]
 80286ec:	6978      	ldr	r0, [r7, #20]
 80286ee:	f7fe ffbc 	bl	802766a <_ntoa_long>
 80286f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80286f4:	e033      	b.n	802875e <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80286f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80286f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80286fc:	2b00      	cmp	r3, #0
 80286fe:	d007      	beq.n	8028710 <_vsnprintf+0x674>
 8028700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028704:	1d1a      	adds	r2, r3, #4
 8028706:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802870a:	681b      	ldr	r3, [r3, #0]
 802870c:	b2db      	uxtb	r3, r3
 802870e:	e012      	b.n	8028736 <_vsnprintf+0x69a>
 8028710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028716:	2b00      	cmp	r3, #0
 8028718:	d007      	beq.n	802872a <_vsnprintf+0x68e>
 802871a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802871e:	1d1a      	adds	r2, r3, #4
 8028720:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028724:	681b      	ldr	r3, [r3, #0]
 8028726:	b29b      	uxth	r3, r3
 8028728:	e005      	b.n	8028736 <_vsnprintf+0x69a>
 802872a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802872e:	1d1a      	adds	r2, r3, #4
 8028730:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028734:	681b      	ldr	r3, [r3, #0]
 8028736:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8028738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802873a:	9305      	str	r3, [sp, #20]
 802873c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802873e:	9304      	str	r3, [sp, #16]
 8028740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028742:	9303      	str	r3, [sp, #12]
 8028744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028746:	9302      	str	r3, [sp, #8]
 8028748:	2300      	movs	r3, #0
 802874a:	9301      	str	r3, [sp, #4]
 802874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802874e:	9300      	str	r3, [sp, #0]
 8028750:	68fb      	ldr	r3, [r7, #12]
 8028752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028754:	6939      	ldr	r1, [r7, #16]
 8028756:	6978      	ldr	r0, [r7, #20]
 8028758:	f7fe ff87 	bl	802766a <_ntoa_long>
 802875c:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 802875e:	68bb      	ldr	r3, [r7, #8]
 8028760:	3301      	adds	r3, #1
 8028762:	60bb      	str	r3, [r7, #8]
        break;
 8028764:	e162      	b.n	8028a2c <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8028766:	68bb      	ldr	r3, [r7, #8]
 8028768:	781b      	ldrb	r3, [r3, #0]
 802876a:	2b46      	cmp	r3, #70	; 0x46
 802876c:	d103      	bne.n	8028776 <_vsnprintf+0x6da>
 802876e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028770:	f043 0320 	orr.w	r3, r3, #32
 8028774:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8028776:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802877a:	3307      	adds	r3, #7
 802877c:	f023 0307 	bic.w	r3, r3, #7
 8028780:	f103 0208 	add.w	r2, r3, #8
 8028784:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028788:	ed93 7b00 	vldr	d7, [r3]
 802878c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802878e:	9302      	str	r3, [sp, #8]
 8028790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028792:	9301      	str	r3, [sp, #4]
 8028794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028796:	9300      	str	r3, [sp, #0]
 8028798:	eeb0 0b47 	vmov.f64	d0, d7
 802879c:	68fb      	ldr	r3, [r7, #12]
 802879e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80287a0:	6939      	ldr	r1, [r7, #16]
 80287a2:	6978      	ldr	r0, [r7, #20]
 80287a4:	f7ff f834 	bl	8027810 <_ftoa>
 80287a8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80287aa:	68bb      	ldr	r3, [r7, #8]
 80287ac:	3301      	adds	r3, #1
 80287ae:	60bb      	str	r3, [r7, #8]
        break;
 80287b0:	e13c      	b.n	8028a2c <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80287b2:	68bb      	ldr	r3, [r7, #8]
 80287b4:	781b      	ldrb	r3, [r3, #0]
 80287b6:	2b67      	cmp	r3, #103	; 0x67
 80287b8:	d003      	beq.n	80287c2 <_vsnprintf+0x726>
 80287ba:	68bb      	ldr	r3, [r7, #8]
 80287bc:	781b      	ldrb	r3, [r3, #0]
 80287be:	2b47      	cmp	r3, #71	; 0x47
 80287c0:	d103      	bne.n	80287ca <_vsnprintf+0x72e>
 80287c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80287c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80287c8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80287ca:	68bb      	ldr	r3, [r7, #8]
 80287cc:	781b      	ldrb	r3, [r3, #0]
 80287ce:	2b45      	cmp	r3, #69	; 0x45
 80287d0:	d003      	beq.n	80287da <_vsnprintf+0x73e>
 80287d2:	68bb      	ldr	r3, [r7, #8]
 80287d4:	781b      	ldrb	r3, [r3, #0]
 80287d6:	2b47      	cmp	r3, #71	; 0x47
 80287d8:	d103      	bne.n	80287e2 <_vsnprintf+0x746>
 80287da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80287dc:	f043 0320 	orr.w	r3, r3, #32
 80287e0:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80287e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80287e6:	3307      	adds	r3, #7
 80287e8:	f023 0307 	bic.w	r3, r3, #7
 80287ec:	f103 0208 	add.w	r2, r3, #8
 80287f0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80287f4:	ed93 7b00 	vldr	d7, [r3]
 80287f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80287fa:	9302      	str	r3, [sp, #8]
 80287fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80287fe:	9301      	str	r3, [sp, #4]
 8028800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028802:	9300      	str	r3, [sp, #0]
 8028804:	eeb0 0b47 	vmov.f64	d0, d7
 8028808:	68fb      	ldr	r3, [r7, #12]
 802880a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802880c:	6939      	ldr	r1, [r7, #16]
 802880e:	6978      	ldr	r0, [r7, #20]
 8028810:	f7ff fa46 	bl	8027ca0 <_etoa>
 8028814:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8028816:	68bb      	ldr	r3, [r7, #8]
 8028818:	3301      	adds	r3, #1
 802881a:	60bb      	str	r3, [r7, #8]
        break;
 802881c:	e106      	b.n	8028a2c <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 802881e:	2301      	movs	r3, #1
 8028820:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8028822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028824:	f003 0302 	and.w	r3, r3, #2
 8028828:	2b00      	cmp	r3, #0
 802882a:	d10e      	bne.n	802884a <_vsnprintf+0x7ae>
          while (l++ < width) {
 802882c:	e007      	b.n	802883e <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 802882e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028830:	1c53      	adds	r3, r2, #1
 8028832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8028834:	697c      	ldr	r4, [r7, #20]
 8028836:	68fb      	ldr	r3, [r7, #12]
 8028838:	6939      	ldr	r1, [r7, #16]
 802883a:	2020      	movs	r0, #32
 802883c:	47a0      	blx	r4
          while (l++ < width) {
 802883e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028840:	1c5a      	adds	r2, r3, #1
 8028842:	647a      	str	r2, [r7, #68]	; 0x44
 8028844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8028846:	429a      	cmp	r2, r3
 8028848:	d8f1      	bhi.n	802882e <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 802884a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802884e:	1d1a      	adds	r2, r3, #4
 8028850:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028854:	681b      	ldr	r3, [r3, #0]
 8028856:	b2d8      	uxtb	r0, r3
 8028858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802885a:	1c53      	adds	r3, r2, #1
 802885c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802885e:	697c      	ldr	r4, [r7, #20]
 8028860:	68fb      	ldr	r3, [r7, #12]
 8028862:	6939      	ldr	r1, [r7, #16]
 8028864:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8028866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028868:	f003 0302 	and.w	r3, r3, #2
 802886c:	2b00      	cmp	r3, #0
 802886e:	d00e      	beq.n	802888e <_vsnprintf+0x7f2>
          while (l++ < width) {
 8028870:	e007      	b.n	8028882 <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 8028872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028874:	1c53      	adds	r3, r2, #1
 8028876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8028878:	697c      	ldr	r4, [r7, #20]
 802887a:	68fb      	ldr	r3, [r7, #12]
 802887c:	6939      	ldr	r1, [r7, #16]
 802887e:	2020      	movs	r0, #32
 8028880:	47a0      	blx	r4
          while (l++ < width) {
 8028882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028884:	1c5a      	adds	r2, r3, #1
 8028886:	647a      	str	r2, [r7, #68]	; 0x44
 8028888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802888a:	429a      	cmp	r2, r3
 802888c:	d8f1      	bhi.n	8028872 <_vsnprintf+0x7d6>
          }
        }
        format++;
 802888e:	68bb      	ldr	r3, [r7, #8]
 8028890:	3301      	adds	r3, #1
 8028892:	60bb      	str	r3, [r7, #8]
        break;
 8028894:	e0ca      	b.n	8028a2c <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8028896:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802889a:	1d1a      	adds	r2, r3, #4
 802889c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80288a0:	681b      	ldr	r3, [r3, #0]
 80288a2:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80288a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80288a6:	2b00      	cmp	r3, #0
 80288a8:	d001      	beq.n	80288ae <_vsnprintf+0x812>
 80288aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80288ac:	e001      	b.n	80288b2 <_vsnprintf+0x816>
 80288ae:	f04f 33ff 	mov.w	r3, #4294967295
 80288b2:	4619      	mov	r1, r3
 80288b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80288b6:	f7fe fd54 	bl	8027362 <_strnlen_s>
 80288ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80288bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80288be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80288c2:	2b00      	cmp	r3, #0
 80288c4:	d005      	beq.n	80288d2 <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 80288c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80288c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80288ca:	4293      	cmp	r3, r2
 80288cc:	bf28      	it	cs
 80288ce:	4613      	movcs	r3, r2
 80288d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80288d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80288d4:	f003 0302 	and.w	r3, r3, #2
 80288d8:	2b00      	cmp	r3, #0
 80288da:	d11a      	bne.n	8028912 <_vsnprintf+0x876>
          while (l++ < width) {
 80288dc:	e007      	b.n	80288ee <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 80288de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80288e0:	1c53      	adds	r3, r2, #1
 80288e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80288e4:	697c      	ldr	r4, [r7, #20]
 80288e6:	68fb      	ldr	r3, [r7, #12]
 80288e8:	6939      	ldr	r1, [r7, #16]
 80288ea:	2020      	movs	r0, #32
 80288ec:	47a0      	blx	r4
          while (l++ < width) {
 80288ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80288f0:	1c5a      	adds	r2, r3, #1
 80288f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80288f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80288f6:	429a      	cmp	r2, r3
 80288f8:	d8f1      	bhi.n	80288de <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80288fa:	e00a      	b.n	8028912 <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 80288fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80288fe:	1c5a      	adds	r2, r3, #1
 8028900:	643a      	str	r2, [r7, #64]	; 0x40
 8028902:	7818      	ldrb	r0, [r3, #0]
 8028904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028906:	1c53      	adds	r3, r2, #1
 8028908:	64fb      	str	r3, [r7, #76]	; 0x4c
 802890a:	697c      	ldr	r4, [r7, #20]
 802890c:	68fb      	ldr	r3, [r7, #12]
 802890e:	6939      	ldr	r1, [r7, #16]
 8028910:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8028912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028914:	781b      	ldrb	r3, [r3, #0]
 8028916:	2b00      	cmp	r3, #0
 8028918:	d009      	beq.n	802892e <_vsnprintf+0x892>
 802891a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802891c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028920:	2b00      	cmp	r3, #0
 8028922:	d0eb      	beq.n	80288fc <_vsnprintf+0x860>
 8028924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028926:	1e5a      	subs	r2, r3, #1
 8028928:	657a      	str	r2, [r7, #84]	; 0x54
 802892a:	2b00      	cmp	r3, #0
 802892c:	d1e6      	bne.n	80288fc <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 802892e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028930:	f003 0302 	and.w	r3, r3, #2
 8028934:	2b00      	cmp	r3, #0
 8028936:	d00e      	beq.n	8028956 <_vsnprintf+0x8ba>
          while (l++ < width) {
 8028938:	e007      	b.n	802894a <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 802893a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802893c:	1c53      	adds	r3, r2, #1
 802893e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8028940:	697c      	ldr	r4, [r7, #20]
 8028942:	68fb      	ldr	r3, [r7, #12]
 8028944:	6939      	ldr	r1, [r7, #16]
 8028946:	2020      	movs	r0, #32
 8028948:	47a0      	blx	r4
          while (l++ < width) {
 802894a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802894c:	1c5a      	adds	r2, r3, #1
 802894e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8028950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8028952:	429a      	cmp	r2, r3
 8028954:	d8f1      	bhi.n	802893a <_vsnprintf+0x89e>
          }
        }
        format++;
 8028956:	68bb      	ldr	r3, [r7, #8]
 8028958:	3301      	adds	r3, #1
 802895a:	60bb      	str	r3, [r7, #8]
        break;
 802895c:	e066      	b.n	8028a2c <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 802895e:	2308      	movs	r3, #8
 8028960:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8028962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028964:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8028968:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 802896a:	2300      	movs	r3, #0
 802896c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8028970:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8028974:	2b00      	cmp	r3, #0
 8028976:	d023      	beq.n	80289c0 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8028978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802897c:	1d1a      	adds	r2, r3, #4
 802897e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028982:	681b      	ldr	r3, [r3, #0]
 8028984:	461a      	mov	r2, r3
 8028986:	2300      	movs	r3, #0
 8028988:	603a      	str	r2, [r7, #0]
 802898a:	607b      	str	r3, [r7, #4]
 802898c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802898e:	9308      	str	r3, [sp, #32]
 8028990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028992:	9307      	str	r3, [sp, #28]
 8028994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028996:	9306      	str	r3, [sp, #24]
 8028998:	f04f 0210 	mov.w	r2, #16
 802899c:	f04f 0300 	mov.w	r3, #0
 80289a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80289a4:	2300      	movs	r3, #0
 80289a6:	9302      	str	r3, [sp, #8]
 80289a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80289ac:	e9cd 3400 	strd	r3, r4, [sp]
 80289b0:	68fb      	ldr	r3, [r7, #12]
 80289b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80289b4:	6939      	ldr	r1, [r7, #16]
 80289b6:	6978      	ldr	r0, [r7, #20]
 80289b8:	f7fe febd 	bl	8027736 <_ntoa_long_long>
 80289bc:	64f8      	str	r0, [r7, #76]	; 0x4c
 80289be:	e018      	b.n	80289f2 <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80289c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80289c4:	1d1a      	adds	r2, r3, #4
 80289c6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80289ca:	681b      	ldr	r3, [r3, #0]
 80289cc:	461a      	mov	r2, r3
 80289ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80289d0:	9305      	str	r3, [sp, #20]
 80289d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80289d4:	9304      	str	r3, [sp, #16]
 80289d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80289d8:	9303      	str	r3, [sp, #12]
 80289da:	2310      	movs	r3, #16
 80289dc:	9302      	str	r3, [sp, #8]
 80289de:	2300      	movs	r3, #0
 80289e0:	9301      	str	r3, [sp, #4]
 80289e2:	9200      	str	r2, [sp, #0]
 80289e4:	68fb      	ldr	r3, [r7, #12]
 80289e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80289e8:	6939      	ldr	r1, [r7, #16]
 80289ea:	6978      	ldr	r0, [r7, #20]
 80289ec:	f7fe fe3d 	bl	802766a <_ntoa_long>
 80289f0:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80289f2:	68bb      	ldr	r3, [r7, #8]
 80289f4:	3301      	adds	r3, #1
 80289f6:	60bb      	str	r3, [r7, #8]
        break;
 80289f8:	e018      	b.n	8028a2c <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80289fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80289fc:	1c53      	adds	r3, r2, #1
 80289fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8028a00:	697c      	ldr	r4, [r7, #20]
 8028a02:	68fb      	ldr	r3, [r7, #12]
 8028a04:	6939      	ldr	r1, [r7, #16]
 8028a06:	2025      	movs	r0, #37	; 0x25
 8028a08:	47a0      	blx	r4
        format++;
 8028a0a:	68bb      	ldr	r3, [r7, #8]
 8028a0c:	3301      	adds	r3, #1
 8028a0e:	60bb      	str	r3, [r7, #8]
        break;
 8028a10:	e00c      	b.n	8028a2c <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 8028a12:	68bb      	ldr	r3, [r7, #8]
 8028a14:	7818      	ldrb	r0, [r3, #0]
 8028a16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028a18:	1c53      	adds	r3, r2, #1
 8028a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8028a1c:	697c      	ldr	r4, [r7, #20]
 8028a1e:	68fb      	ldr	r3, [r7, #12]
 8028a20:	6939      	ldr	r1, [r7, #16]
 8028a22:	47a0      	blx	r4
        format++;
 8028a24:	68bb      	ldr	r3, [r7, #8]
 8028a26:	3301      	adds	r3, #1
 8028a28:	60bb      	str	r3, [r7, #8]
        break;
 8028a2a:	bf00      	nop
  while (*format)
 8028a2c:	68bb      	ldr	r3, [r7, #8]
 8028a2e:	781b      	ldrb	r3, [r3, #0]
 8028a30:	2b00      	cmp	r3, #0
 8028a32:	f47f ab45 	bne.w	80280c0 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8028a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028a38:	68fb      	ldr	r3, [r7, #12]
 8028a3a:	429a      	cmp	r2, r3
 8028a3c:	d302      	bcc.n	8028a44 <_vsnprintf+0x9a8>
 8028a3e:	68fb      	ldr	r3, [r7, #12]
 8028a40:	1e5a      	subs	r2, r3, #1
 8028a42:	e000      	b.n	8028a46 <_vsnprintf+0x9aa>
 8028a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028a46:	697c      	ldr	r4, [r7, #20]
 8028a48:	68fb      	ldr	r3, [r7, #12]
 8028a4a:	6939      	ldr	r1, [r7, #16]
 8028a4c:	2000      	movs	r0, #0
 8028a4e:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8028a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8028a52:	4618      	mov	r0, r3
 8028a54:	3764      	adds	r7, #100	; 0x64
 8028a56:	46bd      	mov	sp, r7
 8028a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028a5c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8028a5c:	b40f      	push	{r0, r1, r2, r3}
 8028a5e:	b580      	push	{r7, lr}
 8028a60:	b086      	sub	sp, #24
 8028a62:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8028a64:	f107 031c 	add.w	r3, r7, #28
 8028a68:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8028a6a:	1d39      	adds	r1, r7, #4
 8028a6c:	68bb      	ldr	r3, [r7, #8]
 8028a6e:	9300      	str	r3, [sp, #0]
 8028a70:	69bb      	ldr	r3, [r7, #24]
 8028a72:	f04f 32ff 	mov.w	r2, #4294967295
 8028a76:	4806      	ldr	r0, [pc, #24]	; (8028a90 <printf_+0x34>)
 8028a78:	f7ff fb10 	bl	802809c <_vsnprintf>
 8028a7c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8028a7e:	68fb      	ldr	r3, [r7, #12]
}
 8028a80:	4618      	mov	r0, r3
 8028a82:	3710      	adds	r7, #16
 8028a84:	46bd      	mov	sp, r7
 8028a86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8028a8a:	b004      	add	sp, #16
 8028a8c:	4770      	bx	lr
 8028a8e:	bf00      	nop
 8028a90:	0802733d 	.word	0x0802733d

08028a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8028a94:	b480      	push	{r7}
 8028a96:	b083      	sub	sp, #12
 8028a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8028a9a:	4b0a      	ldr	r3, [pc, #40]	; (8028ac4 <HAL_MspInit+0x30>)
 8028a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8028aa0:	4a08      	ldr	r2, [pc, #32]	; (8028ac4 <HAL_MspInit+0x30>)
 8028aa2:	f043 0302 	orr.w	r3, r3, #2
 8028aa6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8028aaa:	4b06      	ldr	r3, [pc, #24]	; (8028ac4 <HAL_MspInit+0x30>)
 8028aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8028ab0:	f003 0302 	and.w	r3, r3, #2
 8028ab4:	607b      	str	r3, [r7, #4]
 8028ab6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8028ab8:	bf00      	nop
 8028aba:	370c      	adds	r7, #12
 8028abc:	46bd      	mov	sp, r7
 8028abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ac2:	4770      	bx	lr
 8028ac4:	58024400 	.word	0x58024400

08028ac8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8028ac8:	b580      	push	{r7, lr}
 8028aca:	b0ba      	sub	sp, #232	; 0xe8
 8028acc:	af00      	add	r7, sp, #0
 8028ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8028ad0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8028ad4:	2200      	movs	r2, #0
 8028ad6:	601a      	str	r2, [r3, #0]
 8028ad8:	605a      	str	r2, [r3, #4]
 8028ada:	609a      	str	r2, [r3, #8]
 8028adc:	60da      	str	r2, [r3, #12]
 8028ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8028ae0:	f107 0310 	add.w	r3, r7, #16
 8028ae4:	22c0      	movs	r2, #192	; 0xc0
 8028ae6:	2100      	movs	r1, #0
 8028ae8:	4618      	mov	r0, r3
 8028aea:	f006 f8f5 	bl	802ecd8 <memset>
  if(hspi->Instance==SPI1)
 8028aee:	687b      	ldr	r3, [r7, #4]
 8028af0:	681b      	ldr	r3, [r3, #0]
 8028af2:	4a2e      	ldr	r2, [pc, #184]	; (8028bac <HAL_SPI_MspInit+0xe4>)
 8028af4:	4293      	cmp	r3, r2
 8028af6:	d155      	bne.n	8028ba4 <HAL_SPI_MspInit+0xdc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8028af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8028afc:	f04f 0300 	mov.w	r3, #0
 8028b00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8028b04:	2302      	movs	r3, #2
 8028b06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8028b08:	230c      	movs	r3, #12
 8028b0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 8028b0c:	2301      	movs	r3, #1
 8028b0e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8028b10:	2308      	movs	r3, #8
 8028b12:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8028b14:	2302      	movs	r3, #2
 8028b16:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8028b18:	23c0      	movs	r3, #192	; 0xc0
 8028b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8028b1c:	2320      	movs	r3, #32
 8028b1e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8028b20:	2300      	movs	r3, #0
 8028b22:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8028b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8028b28:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8028b2a:	f107 0310 	add.w	r3, r7, #16
 8028b2e:	4618      	mov	r0, r3
 8028b30:	f002 fabc 	bl	802b0ac <HAL_RCCEx_PeriphCLKConfig>
 8028b34:	4603      	mov	r3, r0
 8028b36:	2b00      	cmp	r3, #0
 8028b38:	d001      	beq.n	8028b3e <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 8028b3a:	f7fe fbec 	bl	8027316 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8028b3e:	4b1c      	ldr	r3, [pc, #112]	; (8028bb0 <HAL_SPI_MspInit+0xe8>)
 8028b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8028b44:	4a1a      	ldr	r2, [pc, #104]	; (8028bb0 <HAL_SPI_MspInit+0xe8>)
 8028b46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8028b4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8028b4e:	4b18      	ldr	r3, [pc, #96]	; (8028bb0 <HAL_SPI_MspInit+0xe8>)
 8028b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8028b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8028b58:	60fb      	str	r3, [r7, #12]
 8028b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8028b5c:	4b14      	ldr	r3, [pc, #80]	; (8028bb0 <HAL_SPI_MspInit+0xe8>)
 8028b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028b62:	4a13      	ldr	r2, [pc, #76]	; (8028bb0 <HAL_SPI_MspInit+0xe8>)
 8028b64:	f043 0301 	orr.w	r3, r3, #1
 8028b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8028b6c:	4b10      	ldr	r3, [pc, #64]	; (8028bb0 <HAL_SPI_MspInit+0xe8>)
 8028b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028b72:	f003 0301 	and.w	r3, r3, #1
 8028b76:	60bb      	str	r3, [r7, #8]
 8028b78:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8028b7a:	23e0      	movs	r3, #224	; 0xe0
 8028b7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8028b80:	2302      	movs	r3, #2
 8028b82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8028b86:	2300      	movs	r3, #0
 8028b88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8028b8c:	2300      	movs	r3, #0
 8028b8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8028b92:	2305      	movs	r3, #5
 8028b94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8028b98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8028b9c:	4619      	mov	r1, r3
 8028b9e:	4805      	ldr	r0, [pc, #20]	; (8028bb4 <HAL_SPI_MspInit+0xec>)
 8028ba0:	f000 ff4e 	bl	8029a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8028ba4:	bf00      	nop
 8028ba6:	37e8      	adds	r7, #232	; 0xe8
 8028ba8:	46bd      	mov	sp, r7
 8028baa:	bd80      	pop	{r7, pc}
 8028bac:	40013000 	.word	0x40013000
 8028bb0:	58024400 	.word	0x58024400
 8028bb4:	58020000 	.word	0x58020000

08028bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8028bb8:	b580      	push	{r7, lr}
 8028bba:	b084      	sub	sp, #16
 8028bbc:	af00      	add	r7, sp, #0
 8028bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8028bc0:	687b      	ldr	r3, [r7, #4]
 8028bc2:	681b      	ldr	r3, [r3, #0]
 8028bc4:	4a0e      	ldr	r2, [pc, #56]	; (8028c00 <HAL_TIM_Base_MspInit+0x48>)
 8028bc6:	4293      	cmp	r3, r2
 8028bc8:	d116      	bne.n	8028bf8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8028bca:	4b0e      	ldr	r3, [pc, #56]	; (8028c04 <HAL_TIM_Base_MspInit+0x4c>)
 8028bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028bd0:	4a0c      	ldr	r2, [pc, #48]	; (8028c04 <HAL_TIM_Base_MspInit+0x4c>)
 8028bd2:	f043 0320 	orr.w	r3, r3, #32
 8028bd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8028bda:	4b0a      	ldr	r3, [pc, #40]	; (8028c04 <HAL_TIM_Base_MspInit+0x4c>)
 8028bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028be0:	f003 0320 	and.w	r3, r3, #32
 8028be4:	60fb      	str	r3, [r7, #12]
 8028be6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8028be8:	2200      	movs	r2, #0
 8028bea:	2100      	movs	r1, #0
 8028bec:	2037      	movs	r0, #55	; 0x37
 8028bee:	f000 fe76 	bl	80298de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8028bf2:	2037      	movs	r0, #55	; 0x37
 8028bf4:	f000 fe8d 	bl	8029912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8028bf8:	bf00      	nop
 8028bfa:	3710      	adds	r7, #16
 8028bfc:	46bd      	mov	sp, r7
 8028bfe:	bd80      	pop	{r7, pc}
 8028c00:	40001400 	.word	0x40001400
 8028c04:	58024400 	.word	0x58024400

08028c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8028c08:	b580      	push	{r7, lr}
 8028c0a:	b0c2      	sub	sp, #264	; 0x108
 8028c0c:	af00      	add	r7, sp, #0
 8028c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8028c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8028c16:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8028c18:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8028c1c:	2200      	movs	r2, #0
 8028c1e:	601a      	str	r2, [r3, #0]
 8028c20:	605a      	str	r2, [r3, #4]
 8028c22:	609a      	str	r2, [r3, #8]
 8028c24:	60da      	str	r2, [r3, #12]
 8028c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8028c28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028c2c:	22c0      	movs	r2, #192	; 0xc0
 8028c2e:	2100      	movs	r1, #0
 8028c30:	4618      	mov	r0, r3
 8028c32:	f006 f851 	bl	802ecd8 <memset>
  if(huart->Instance==UART4)
 8028c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8028c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8028c3e:	681b      	ldr	r3, [r3, #0]
 8028c40:	681b      	ldr	r3, [r3, #0]
 8028c42:	4acc      	ldr	r2, [pc, #816]	; (8028f74 <HAL_UART_MspInit+0x36c>)
 8028c44:	4293      	cmp	r3, r2
 8028c46:	d146      	bne.n	8028cd6 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8028c48:	f04f 0202 	mov.w	r2, #2
 8028c4c:	f04f 0300 	mov.w	r3, #0
 8028c50:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8028c54:	2300      	movs	r3, #0
 8028c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8028c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028c5e:	4618      	mov	r0, r3
 8028c60:	f002 fa24 	bl	802b0ac <HAL_RCCEx_PeriphCLKConfig>
 8028c64:	4603      	mov	r3, r0
 8028c66:	2b00      	cmp	r3, #0
 8028c68:	d001      	beq.n	8028c6e <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8028c6a:	f7fe fb54 	bl	8027316 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8028c6e:	4bc2      	ldr	r3, [pc, #776]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028c74:	4ac0      	ldr	r2, [pc, #768]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8028c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8028c7e:	4bbe      	ldr	r3, [pc, #760]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028c84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8028c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8028c8c:	4bba      	ldr	r3, [pc, #744]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028c92:	4ab9      	ldr	r2, [pc, #740]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028c94:	f043 0301 	orr.w	r3, r3, #1
 8028c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8028c9c:	4bb6      	ldr	r3, [pc, #728]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028ca2:	f003 0301 	and.w	r3, r3, #1
 8028ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8028ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8028caa:	2303      	movs	r3, #3
 8028cac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8028cb0:	2302      	movs	r3, #2
 8028cb2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8028cb6:	2300      	movs	r3, #0
 8028cb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8028cbc:	2300      	movs	r3, #0
 8028cbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8028cc2:	2308      	movs	r3, #8
 8028cc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8028cc8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8028ccc:	4619      	mov	r1, r3
 8028cce:	48ab      	ldr	r0, [pc, #684]	; (8028f7c <HAL_UART_MspInit+0x374>)
 8028cd0:	f000 feb6 	bl	8029a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8028cd4:	e149      	b.n	8028f6a <HAL_UART_MspInit+0x362>
  else if(huart->Instance==UART5)
 8028cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8028cda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8028cde:	681b      	ldr	r3, [r3, #0]
 8028ce0:	681b      	ldr	r3, [r3, #0]
 8028ce2:	4aa7      	ldr	r2, [pc, #668]	; (8028f80 <HAL_UART_MspInit+0x378>)
 8028ce4:	4293      	cmp	r3, r2
 8028ce6:	d147      	bne.n	8028d78 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8028ce8:	f04f 0202 	mov.w	r2, #2
 8028cec:	f04f 0300 	mov.w	r3, #0
 8028cf0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8028cf4:	2300      	movs	r3, #0
 8028cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8028cfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028cfe:	4618      	mov	r0, r3
 8028d00:	f002 f9d4 	bl	802b0ac <HAL_RCCEx_PeriphCLKConfig>
 8028d04:	4603      	mov	r3, r0
 8028d06:	2b00      	cmp	r3, #0
 8028d08:	d001      	beq.n	8028d0e <HAL_UART_MspInit+0x106>
      Error_Handler();
 8028d0a:	f7fe fb04 	bl	8027316 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8028d0e:	4b9a      	ldr	r3, [pc, #616]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028d14:	4a98      	ldr	r2, [pc, #608]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028d1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8028d1e:	4b96      	ldr	r3, [pc, #600]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028d28:	627b      	str	r3, [r7, #36]	; 0x24
 8028d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8028d2c:	4b92      	ldr	r3, [pc, #584]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028d32:	4a91      	ldr	r2, [pc, #580]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028d34:	f043 0302 	orr.w	r3, r3, #2
 8028d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8028d3c:	4b8e      	ldr	r3, [pc, #568]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028d42:	f003 0302 	and.w	r3, r3, #2
 8028d46:	623b      	str	r3, [r7, #32]
 8028d48:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8028d4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8028d4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8028d52:	2302      	movs	r3, #2
 8028d54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8028d58:	2300      	movs	r3, #0
 8028d5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8028d5e:	2300      	movs	r3, #0
 8028d60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8028d64:	230e      	movs	r3, #14
 8028d66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8028d6a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8028d6e:	4619      	mov	r1, r3
 8028d70:	4884      	ldr	r0, [pc, #528]	; (8028f84 <HAL_UART_MspInit+0x37c>)
 8028d72:	f000 fe65 	bl	8029a40 <HAL_GPIO_Init>
}
 8028d76:	e0f8      	b.n	8028f6a <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART1)
 8028d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8028d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8028d80:	681b      	ldr	r3, [r3, #0]
 8028d82:	681b      	ldr	r3, [r3, #0]
 8028d84:	4a80      	ldr	r2, [pc, #512]	; (8028f88 <HAL_UART_MspInit+0x380>)
 8028d86:	4293      	cmp	r3, r2
 8028d88:	d147      	bne.n	8028e1a <HAL_UART_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8028d8a:	f04f 0201 	mov.w	r2, #1
 8028d8e:	f04f 0300 	mov.w	r3, #0
 8028d92:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8028d96:	2300      	movs	r3, #0
 8028d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8028d9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028da0:	4618      	mov	r0, r3
 8028da2:	f002 f983 	bl	802b0ac <HAL_RCCEx_PeriphCLKConfig>
 8028da6:	4603      	mov	r3, r0
 8028da8:	2b00      	cmp	r3, #0
 8028daa:	d001      	beq.n	8028db0 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8028dac:	f7fe fab3 	bl	8027316 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8028db0:	4b71      	ldr	r3, [pc, #452]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8028db6:	4a70      	ldr	r2, [pc, #448]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028db8:	f043 0310 	orr.w	r3, r3, #16
 8028dbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8028dc0:	4b6d      	ldr	r3, [pc, #436]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8028dc6:	f003 0310 	and.w	r3, r3, #16
 8028dca:	61fb      	str	r3, [r7, #28]
 8028dcc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8028dce:	4b6a      	ldr	r3, [pc, #424]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028dd4:	4a68      	ldr	r2, [pc, #416]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028dd6:	f043 0302 	orr.w	r3, r3, #2
 8028dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8028dde:	4b66      	ldr	r3, [pc, #408]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028de4:	f003 0302 	and.w	r3, r3, #2
 8028de8:	61bb      	str	r3, [r7, #24]
 8028dea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8028dec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8028df0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8028df4:	2302      	movs	r3, #2
 8028df6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8028dfa:	2300      	movs	r3, #0
 8028dfc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8028e00:	2300      	movs	r3, #0
 8028e02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8028e06:	2304      	movs	r3, #4
 8028e08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8028e0c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8028e10:	4619      	mov	r1, r3
 8028e12:	485c      	ldr	r0, [pc, #368]	; (8028f84 <HAL_UART_MspInit+0x37c>)
 8028e14:	f000 fe14 	bl	8029a40 <HAL_GPIO_Init>
}
 8028e18:	e0a7      	b.n	8028f6a <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART2)
 8028e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8028e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8028e22:	681b      	ldr	r3, [r3, #0]
 8028e24:	681b      	ldr	r3, [r3, #0]
 8028e26:	4a59      	ldr	r2, [pc, #356]	; (8028f8c <HAL_UART_MspInit+0x384>)
 8028e28:	4293      	cmp	r3, r2
 8028e2a:	d146      	bne.n	8028eba <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8028e2c:	f04f 0202 	mov.w	r2, #2
 8028e30:	f04f 0300 	mov.w	r3, #0
 8028e34:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8028e38:	2300      	movs	r3, #0
 8028e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8028e3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028e42:	4618      	mov	r0, r3
 8028e44:	f002 f932 	bl	802b0ac <HAL_RCCEx_PeriphCLKConfig>
 8028e48:	4603      	mov	r3, r0
 8028e4a:	2b00      	cmp	r3, #0
 8028e4c:	d001      	beq.n	8028e52 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8028e4e:	f7fe fa62 	bl	8027316 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8028e52:	4b49      	ldr	r3, [pc, #292]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028e58:	4a47      	ldr	r2, [pc, #284]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8028e5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8028e62:	4b45      	ldr	r3, [pc, #276]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028e6c:	617b      	str	r3, [r7, #20]
 8028e6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8028e70:	4b41      	ldr	r3, [pc, #260]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028e76:	4a40      	ldr	r2, [pc, #256]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028e78:	f043 0301 	orr.w	r3, r3, #1
 8028e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8028e80:	4b3d      	ldr	r3, [pc, #244]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028e86:	f003 0301 	and.w	r3, r3, #1
 8028e8a:	613b      	str	r3, [r7, #16]
 8028e8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8028e8e:	230c      	movs	r3, #12
 8028e90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8028e94:	2302      	movs	r3, #2
 8028e96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8028e9a:	2300      	movs	r3, #0
 8028e9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8028ea0:	2300      	movs	r3, #0
 8028ea2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8028ea6:	2307      	movs	r3, #7
 8028ea8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8028eac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8028eb0:	4619      	mov	r1, r3
 8028eb2:	4832      	ldr	r0, [pc, #200]	; (8028f7c <HAL_UART_MspInit+0x374>)
 8028eb4:	f000 fdc4 	bl	8029a40 <HAL_GPIO_Init>
}
 8028eb8:	e057      	b.n	8028f6a <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART3)
 8028eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8028ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8028ec2:	681b      	ldr	r3, [r3, #0]
 8028ec4:	681b      	ldr	r3, [r3, #0]
 8028ec6:	4a32      	ldr	r2, [pc, #200]	; (8028f90 <HAL_UART_MspInit+0x388>)
 8028ec8:	4293      	cmp	r3, r2
 8028eca:	d14e      	bne.n	8028f6a <HAL_UART_MspInit+0x362>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8028ecc:	f04f 0202 	mov.w	r2, #2
 8028ed0:	f04f 0300 	mov.w	r3, #0
 8028ed4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8028ed8:	2300      	movs	r3, #0
 8028eda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8028ede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028ee2:	4618      	mov	r0, r3
 8028ee4:	f002 f8e2 	bl	802b0ac <HAL_RCCEx_PeriphCLKConfig>
 8028ee8:	4603      	mov	r3, r0
 8028eea:	2b00      	cmp	r3, #0
 8028eec:	d001      	beq.n	8028ef2 <HAL_UART_MspInit+0x2ea>
      Error_Handler();
 8028eee:	f7fe fa12 	bl	8027316 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8028ef2:	4b21      	ldr	r3, [pc, #132]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028ef8:	4a1f      	ldr	r2, [pc, #124]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8028efe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8028f02:	4b1d      	ldr	r3, [pc, #116]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028f0c:	60fb      	str	r3, [r7, #12]
 8028f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8028f10:	4b19      	ldr	r3, [pc, #100]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028f16:	4a18      	ldr	r2, [pc, #96]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028f18:	f043 0302 	orr.w	r3, r3, #2
 8028f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8028f20:	4b15      	ldr	r3, [pc, #84]	; (8028f78 <HAL_UART_MspInit+0x370>)
 8028f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8028f26:	f003 0202 	and.w	r2, r3, #2
 8028f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8028f2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8028f32:	601a      	str	r2, [r3, #0]
 8028f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8028f38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8028f3c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8028f3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8028f42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8028f46:	2302      	movs	r3, #2
 8028f48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8028f4c:	2300      	movs	r3, #0
 8028f4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8028f52:	2300      	movs	r3, #0
 8028f54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8028f58:	2307      	movs	r3, #7
 8028f5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8028f5e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8028f62:	4619      	mov	r1, r3
 8028f64:	4807      	ldr	r0, [pc, #28]	; (8028f84 <HAL_UART_MspInit+0x37c>)
 8028f66:	f000 fd6b 	bl	8029a40 <HAL_GPIO_Init>
}
 8028f6a:	bf00      	nop
 8028f6c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8028f70:	46bd      	mov	sp, r7
 8028f72:	bd80      	pop	{r7, pc}
 8028f74:	40004c00 	.word	0x40004c00
 8028f78:	58024400 	.word	0x58024400
 8028f7c:	58020000 	.word	0x58020000
 8028f80:	40005000 	.word	0x40005000
 8028f84:	58020400 	.word	0x58020400
 8028f88:	40011000 	.word	0x40011000
 8028f8c:	40004400 	.word	0x40004400
 8028f90:	40004800 	.word	0x40004800

08028f94 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8028f94:	b580      	push	{r7, lr}
 8028f96:	b082      	sub	sp, #8
 8028f98:	af00      	add	r7, sp, #0
 8028f9a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8028f9c:	687b      	ldr	r3, [r7, #4]
 8028f9e:	681b      	ldr	r3, [r3, #0]
 8028fa0:	4a2e      	ldr	r2, [pc, #184]	; (802905c <HAL_UART_MspDeInit+0xc8>)
 8028fa2:	4293      	cmp	r3, r2
 8028fa4:	d10c      	bne.n	8028fc0 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8028fa6:	4b2e      	ldr	r3, [pc, #184]	; (8029060 <HAL_UART_MspDeInit+0xcc>)
 8028fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028fac:	4a2c      	ldr	r2, [pc, #176]	; (8029060 <HAL_UART_MspDeInit+0xcc>)
 8028fae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8028fb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8028fb6:	2103      	movs	r1, #3
 8028fb8:	482a      	ldr	r0, [pc, #168]	; (8029064 <HAL_UART_MspDeInit+0xd0>)
 8028fba:	f000 fef1 	bl	8029da0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8028fbe:	e049      	b.n	8029054 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==UART5)
 8028fc0:	687b      	ldr	r3, [r7, #4]
 8028fc2:	681b      	ldr	r3, [r3, #0]
 8028fc4:	4a28      	ldr	r2, [pc, #160]	; (8029068 <HAL_UART_MspDeInit+0xd4>)
 8028fc6:	4293      	cmp	r3, r2
 8028fc8:	d10d      	bne.n	8028fe6 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_UART5_CLK_DISABLE();
 8028fca:	4b25      	ldr	r3, [pc, #148]	; (8029060 <HAL_UART_MspDeInit+0xcc>)
 8028fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8028fd0:	4a23      	ldr	r2, [pc, #140]	; (8029060 <HAL_UART_MspDeInit+0xcc>)
 8028fd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8028fd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 8028fda:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8028fde:	4823      	ldr	r0, [pc, #140]	; (802906c <HAL_UART_MspDeInit+0xd8>)
 8028fe0:	f000 fede 	bl	8029da0 <HAL_GPIO_DeInit>
}
 8028fe4:	e036      	b.n	8029054 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART1)
 8028fe6:	687b      	ldr	r3, [r7, #4]
 8028fe8:	681b      	ldr	r3, [r3, #0]
 8028fea:	4a21      	ldr	r2, [pc, #132]	; (8029070 <HAL_UART_MspDeInit+0xdc>)
 8028fec:	4293      	cmp	r3, r2
 8028fee:	d10d      	bne.n	802900c <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART1_CLK_DISABLE();
 8028ff0:	4b1b      	ldr	r3, [pc, #108]	; (8029060 <HAL_UART_MspDeInit+0xcc>)
 8028ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8028ff6:	4a1a      	ldr	r2, [pc, #104]	; (8029060 <HAL_UART_MspDeInit+0xcc>)
 8028ff8:	f023 0310 	bic.w	r3, r3, #16
 8028ffc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14|GPIO_PIN_15);
 8029000:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8029004:	4819      	ldr	r0, [pc, #100]	; (802906c <HAL_UART_MspDeInit+0xd8>)
 8029006:	f000 fecb 	bl	8029da0 <HAL_GPIO_DeInit>
}
 802900a:	e023      	b.n	8029054 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART2)
 802900c:	687b      	ldr	r3, [r7, #4]
 802900e:	681b      	ldr	r3, [r3, #0]
 8029010:	4a18      	ldr	r2, [pc, #96]	; (8029074 <HAL_UART_MspDeInit+0xe0>)
 8029012:	4293      	cmp	r3, r2
 8029014:	d10c      	bne.n	8029030 <HAL_UART_MspDeInit+0x9c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8029016:	4b12      	ldr	r3, [pc, #72]	; (8029060 <HAL_UART_MspDeInit+0xcc>)
 8029018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802901c:	4a10      	ldr	r2, [pc, #64]	; (8029060 <HAL_UART_MspDeInit+0xcc>)
 802901e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8029022:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8029026:	210c      	movs	r1, #12
 8029028:	480e      	ldr	r0, [pc, #56]	; (8029064 <HAL_UART_MspDeInit+0xd0>)
 802902a:	f000 feb9 	bl	8029da0 <HAL_GPIO_DeInit>
}
 802902e:	e011      	b.n	8029054 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART3)
 8029030:	687b      	ldr	r3, [r7, #4]
 8029032:	681b      	ldr	r3, [r3, #0]
 8029034:	4a10      	ldr	r2, [pc, #64]	; (8029078 <HAL_UART_MspDeInit+0xe4>)
 8029036:	4293      	cmp	r3, r2
 8029038:	d10c      	bne.n	8029054 <HAL_UART_MspDeInit+0xc0>
    __HAL_RCC_USART3_CLK_DISABLE();
 802903a:	4b09      	ldr	r3, [pc, #36]	; (8029060 <HAL_UART_MspDeInit+0xcc>)
 802903c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029040:	4a07      	ldr	r2, [pc, #28]	; (8029060 <HAL_UART_MspDeInit+0xcc>)
 8029042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8029046:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 802904a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 802904e:	4807      	ldr	r0, [pc, #28]	; (802906c <HAL_UART_MspDeInit+0xd8>)
 8029050:	f000 fea6 	bl	8029da0 <HAL_GPIO_DeInit>
}
 8029054:	bf00      	nop
 8029056:	3708      	adds	r7, #8
 8029058:	46bd      	mov	sp, r7
 802905a:	bd80      	pop	{r7, pc}
 802905c:	40004c00 	.word	0x40004c00
 8029060:	58024400 	.word	0x58024400
 8029064:	58020000 	.word	0x58020000
 8029068:	40005000 	.word	0x40005000
 802906c:	58020400 	.word	0x58020400
 8029070:	40011000 	.word	0x40011000
 8029074:	40004400 	.word	0x40004400
 8029078:	40004800 	.word	0x40004800

0802907c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 802907c:	b580      	push	{r7, lr}
 802907e:	b0b8      	sub	sp, #224	; 0xe0
 8029080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8029082:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029086:	2200      	movs	r2, #0
 8029088:	601a      	str	r2, [r3, #0]
 802908a:	605a      	str	r2, [r3, #4]
 802908c:	609a      	str	r2, [r3, #8]
 802908e:	60da      	str	r2, [r3, #12]
 8029090:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8029092:	4b51      	ldr	r3, [pc, #324]	; (80291d8 <HAL_FMC_MspInit+0x15c>)
 8029094:	681b      	ldr	r3, [r3, #0]
 8029096:	2b00      	cmp	r3, #0
 8029098:	f040 8099 	bne.w	80291ce <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 802909c:	4b4e      	ldr	r3, [pc, #312]	; (80291d8 <HAL_FMC_MspInit+0x15c>)
 802909e:	2201      	movs	r2, #1
 80290a0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80290a2:	f107 0308 	add.w	r3, r7, #8
 80290a6:	22c0      	movs	r2, #192	; 0xc0
 80290a8:	2100      	movs	r1, #0
 80290aa:	4618      	mov	r0, r3
 80290ac:	f005 fe14 	bl	802ecd8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80290b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80290b4:	f04f 0300 	mov.w	r3, #0
 80290b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80290bc:	2300      	movs	r3, #0
 80290be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80290c0:	f107 0308 	add.w	r3, r7, #8
 80290c4:	4618      	mov	r0, r3
 80290c6:	f001 fff1 	bl	802b0ac <HAL_RCCEx_PeriphCLKConfig>
 80290ca:	4603      	mov	r3, r0
 80290cc:	2b00      	cmp	r3, #0
 80290ce:	d001      	beq.n	80290d4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80290d0:	f7fe f921 	bl	8027316 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80290d4:	4b41      	ldr	r3, [pc, #260]	; (80291dc <HAL_FMC_MspInit+0x160>)
 80290d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80290da:	4a40      	ldr	r2, [pc, #256]	; (80291dc <HAL_FMC_MspInit+0x160>)
 80290dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80290e0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80290e4:	4b3d      	ldr	r3, [pc, #244]	; (80291dc <HAL_FMC_MspInit+0x160>)
 80290e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80290ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80290ee:	607b      	str	r3, [r7, #4]
 80290f0:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80290f2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80290f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80290fa:	2302      	movs	r3, #2
 80290fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029100:	2300      	movs	r3, #0
 8029102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029106:	2303      	movs	r3, #3
 8029108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 802910c:	230c      	movs	r3, #12
 802910e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8029112:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029116:	4619      	mov	r1, r3
 8029118:	4831      	ldr	r0, [pc, #196]	; (80291e0 <HAL_FMC_MspInit+0x164>)
 802911a:	f000 fc91 	bl	8029a40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802911e:	2303      	movs	r3, #3
 8029120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029124:	2302      	movs	r3, #2
 8029126:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802912a:	2300      	movs	r3, #0
 802912c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029130:	2303      	movs	r3, #3
 8029132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8029136:	230c      	movs	r3, #12
 8029138:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 802913c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029140:	4619      	mov	r1, r3
 8029142:	4828      	ldr	r0, [pc, #160]	; (80291e4 <HAL_FMC_MspInit+0x168>)
 8029144:	f000 fc7c 	bl	8029a40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8029148:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 802914c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029150:	2302      	movs	r3, #2
 8029152:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029156:	2300      	movs	r3, #0
 8029158:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802915c:	2303      	movs	r3, #3
 802915e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8029162:	230c      	movs	r3, #12
 8029164:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8029168:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802916c:	4619      	mov	r1, r3
 802916e:	481e      	ldr	r0, [pc, #120]	; (80291e8 <HAL_FMC_MspInit+0x16c>)
 8029170:	f000 fc66 	bl	8029a40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8029174:	f24c 0333 	movw	r3, #49203	; 0xc033
 8029178:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802917c:	2302      	movs	r3, #2
 802917e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029182:	2300      	movs	r3, #0
 8029184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029188:	2303      	movs	r3, #3
 802918a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 802918e:	230c      	movs	r3, #12
 8029190:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8029194:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029198:	4619      	mov	r1, r3
 802919a:	4814      	ldr	r0, [pc, #80]	; (80291ec <HAL_FMC_MspInit+0x170>)
 802919c:	f000 fc50 	bl	8029a40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80291a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80291a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80291a8:	2302      	movs	r3, #2
 80291aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80291ae:	2300      	movs	r3, #0
 80291b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80291b4:	2303      	movs	r3, #3
 80291b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80291ba:	2309      	movs	r3, #9
 80291bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80291c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80291c4:	4619      	mov	r1, r3
 80291c6:	480a      	ldr	r0, [pc, #40]	; (80291f0 <HAL_FMC_MspInit+0x174>)
 80291c8:	f000 fc3a 	bl	8029a40 <HAL_GPIO_Init>
 80291cc:	e000      	b.n	80291d0 <HAL_FMC_MspInit+0x154>
    return;
 80291ce:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80291d0:	37e0      	adds	r7, #224	; 0xe0
 80291d2:	46bd      	mov	sp, r7
 80291d4:	bd80      	pop	{r7, pc}
 80291d6:	bf00      	nop
 80291d8:	24001e48 	.word	0x24001e48
 80291dc:	58024400 	.word	0x58024400
 80291e0:	58021400 	.word	0x58021400
 80291e4:	58021800 	.word	0x58021800
 80291e8:	58021000 	.word	0x58021000
 80291ec:	58020c00 	.word	0x58020c00
 80291f0:	58020800 	.word	0x58020800

080291f4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80291f4:	b580      	push	{r7, lr}
 80291f6:	b082      	sub	sp, #8
 80291f8:	af00      	add	r7, sp, #0
 80291fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80291fc:	f7ff ff3e 	bl	802907c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8029200:	bf00      	nop
 8029202:	3708      	adds	r7, #8
 8029204:	46bd      	mov	sp, r7
 8029206:	bd80      	pop	{r7, pc}

08029208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8029208:	b480      	push	{r7}
 802920a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 802920c:	e7fe      	b.n	802920c <NMI_Handler+0x4>

0802920e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802920e:	b480      	push	{r7}
 8029210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8029212:	e7fe      	b.n	8029212 <HardFault_Handler+0x4>

08029214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8029214:	b480      	push	{r7}
 8029216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8029218:	e7fe      	b.n	8029218 <MemManage_Handler+0x4>

0802921a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802921a:	b480      	push	{r7}
 802921c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802921e:	e7fe      	b.n	802921e <BusFault_Handler+0x4>

08029220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8029220:	b480      	push	{r7}
 8029222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8029224:	e7fe      	b.n	8029224 <UsageFault_Handler+0x4>

08029226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8029226:	b480      	push	{r7}
 8029228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802922a:	bf00      	nop
 802922c:	46bd      	mov	sp, r7
 802922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029232:	4770      	bx	lr

08029234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8029234:	b480      	push	{r7}
 8029236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8029238:	bf00      	nop
 802923a:	46bd      	mov	sp, r7
 802923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029240:	4770      	bx	lr

08029242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8029242:	b480      	push	{r7}
 8029244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8029246:	bf00      	nop
 8029248:	46bd      	mov	sp, r7
 802924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802924e:	4770      	bx	lr

08029250 <SysTick_Handler>:
  */

BYTE ch =  0;

void SysTick_Handler(void)
{
 8029250:	b580      	push	{r7, lr}
 8029252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8029254:	f000 fa18 	bl	8029688 <HAL_IncTick>

  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(bDip_SW_Flag == TRUE)			//The hal tick works immediately after SystemClock_Config is enabled.
 8029258:	4b18      	ldr	r3, [pc, #96]	; (80292bc <SysTick_Handler+0x6c>)
 802925a:	781b      	ldrb	r3, [r3, #0]
 802925c:	2b00      	cmp	r3, #0
 802925e:	d02b      	beq.n	80292b8 <SysTick_Handler+0x68>
	{									// The dipswitch should work after the FMC initialization.		pms
		gbDipSW = dip_sw();				//(BYTE)GPIO_ByteRead(GPIO1, GPIO_LSB)^0xFF;
 8029260:	f7fe f826 	bl	80272b0 <dip_sw>
 8029264:	4603      	mov	r3, r0
 8029266:	b2da      	uxtb	r2, r3
 8029268:	4b15      	ldr	r3, [pc, #84]	; (80292c0 <SysTick_Handler+0x70>)
 802926a:	701a      	strb	r2, [r3, #0]


		if (gbDipSW & MASK_SELF_TEST)					//Self 테스트 모드		temp
 802926c:	4b14      	ldr	r3, [pc, #80]	; (80292c0 <SysTick_Handler+0x70>)
 802926e:	781b      	ldrb	r3, [r3, #0]
 8029270:	f003 0376 	and.w	r3, r3, #118	; 0x76
 8029274:	2b00      	cmp	r3, #0
 8029276:	d004      	beq.n	8029282 <SysTick_Handler+0x32>
		{
			TestAging();
 8029278:	f7fc f8e6 	bl	8025448 <TestAging>
			bDip_SW_Init = TRUE;
 802927c:	4b11      	ldr	r3, [pc, #68]	; (80292c4 <SysTick_Handler+0x74>)
 802927e:	2201      	movs	r2, #1
 8029280:	701a      	strb	r2, [r3, #0]
			Write_IO_init();
		}

		*/

		if (!(gbDipSW & MASK_JIG_TEST) && (gbDipSW == gbOldDipSW))
 8029282:	4b0f      	ldr	r3, [pc, #60]	; (80292c0 <SysTick_Handler+0x70>)
 8029284:	781b      	ldrb	r3, [r3, #0]
 8029286:	f003 0301 	and.w	r3, r3, #1
 802928a:	2b00      	cmp	r3, #0
 802928c:	d110      	bne.n	80292b0 <SysTick_Handler+0x60>
 802928e:	4b0c      	ldr	r3, [pc, #48]	; (80292c0 <SysTick_Handler+0x70>)
 8029290:	781a      	ldrb	r2, [r3, #0]
 8029292:	4b0d      	ldr	r3, [pc, #52]	; (80292c8 <SysTick_Handler+0x78>)
 8029294:	781b      	ldrb	r3, [r3, #0]
 8029296:	429a      	cmp	r2, r3
 8029298:	d10a      	bne.n	80292b0 <SysTick_Handler+0x60>
		{
			gfMainBarrierRunning = TRUE;
 802929a:	4b0c      	ldr	r3, [pc, #48]	; (80292cc <SysTick_Handler+0x7c>)
 802929c:	2201      	movs	r2, #1
 802929e:	701a      	strb	r2, [r3, #0]
			gfSubBarrierRunning = TRUE;
 80292a0:	4b0b      	ldr	r3, [pc, #44]	; (80292d0 <SysTick_Handler+0x80>)
 80292a2:	2201      	movs	r2, #1
 80292a4:	701a      	strb	r2, [r3, #0]
			gbBarrierType = BARRIER_SWING;
 80292a6:	4b0b      	ldr	r3, [pc, #44]	; (80292d4 <SysTick_Handler+0x84>)
 80292a8:	2200      	movs	r2, #0
 80292aa:	701a      	strb	r2, [r3, #0]
			PassageProcessForSwing();
 80292ac:	f7fb fde2 	bl	8024e74 <PassageProcessForSwing>
		}
		gbOldDipSW = gbDipSW;
 80292b0:	4b03      	ldr	r3, [pc, #12]	; (80292c0 <SysTick_Handler+0x70>)
 80292b2:	781a      	ldrb	r2, [r3, #0]
 80292b4:	4b04      	ldr	r3, [pc, #16]	; (80292c8 <SysTick_Handler+0x78>)
 80292b6:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 80292b8:	bf00      	nop
 80292ba:	bd80      	pop	{r7, pc}
 80292bc:	24001e44 	.word	0x24001e44
 80292c0:	24001e4d 	.word	0x24001e4d
 80292c4:	24001e4c 	.word	0x24001e4c
 80292c8:	24001e4e 	.word	0x24001e4e
 80292cc:	240004ec 	.word	0x240004ec
 80292d0:	240004ed 	.word	0x240004ed
 80292d4:	2400043a 	.word	0x2400043a

080292d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80292d8:	b580      	push	{r7, lr}
 80292da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80292dc:	4802      	ldr	r0, [pc, #8]	; (80292e8 <TIM7_IRQHandler+0x10>)
 80292de:	f003 ff71 	bl	802d1c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80292e2:	bf00      	nop
 80292e4:	bd80      	pop	{r7, pc}
 80292e6:	bf00      	nop
 80292e8:	24001a7c 	.word	0x24001a7c

080292ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80292ec:	b580      	push	{r7, lr}
 80292ee:	b086      	sub	sp, #24
 80292f0:	af00      	add	r7, sp, #0
 80292f2:	60f8      	str	r0, [r7, #12]
 80292f4:	60b9      	str	r1, [r7, #8]
 80292f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80292f8:	2300      	movs	r3, #0
 80292fa:	617b      	str	r3, [r7, #20]
 80292fc:	e00a      	b.n	8029314 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80292fe:	f7fd f99d 	bl	802663c <__io_getchar>
 8029302:	4601      	mov	r1, r0
 8029304:	68bb      	ldr	r3, [r7, #8]
 8029306:	1c5a      	adds	r2, r3, #1
 8029308:	60ba      	str	r2, [r7, #8]
 802930a:	b2ca      	uxtb	r2, r1
 802930c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802930e:	697b      	ldr	r3, [r7, #20]
 8029310:	3301      	adds	r3, #1
 8029312:	617b      	str	r3, [r7, #20]
 8029314:	697a      	ldr	r2, [r7, #20]
 8029316:	687b      	ldr	r3, [r7, #4]
 8029318:	429a      	cmp	r2, r3
 802931a:	dbf0      	blt.n	80292fe <_read+0x12>
  }

  return len;
 802931c:	687b      	ldr	r3, [r7, #4]
}
 802931e:	4618      	mov	r0, r3
 8029320:	3718      	adds	r7, #24
 8029322:	46bd      	mov	sp, r7
 8029324:	bd80      	pop	{r7, pc}

08029326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8029326:	b580      	push	{r7, lr}
 8029328:	b086      	sub	sp, #24
 802932a:	af00      	add	r7, sp, #0
 802932c:	60f8      	str	r0, [r7, #12]
 802932e:	60b9      	str	r1, [r7, #8]
 8029330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029332:	2300      	movs	r3, #0
 8029334:	617b      	str	r3, [r7, #20]
 8029336:	e009      	b.n	802934c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8029338:	68bb      	ldr	r3, [r7, #8]
 802933a:	1c5a      	adds	r2, r3, #1
 802933c:	60ba      	str	r2, [r7, #8]
 802933e:	781b      	ldrb	r3, [r3, #0]
 8029340:	4618      	mov	r0, r3
 8029342:	f7fd f966 	bl	8026612 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029346:	697b      	ldr	r3, [r7, #20]
 8029348:	3301      	adds	r3, #1
 802934a:	617b      	str	r3, [r7, #20]
 802934c:	697a      	ldr	r2, [r7, #20]
 802934e:	687b      	ldr	r3, [r7, #4]
 8029350:	429a      	cmp	r2, r3
 8029352:	dbf1      	blt.n	8029338 <_write+0x12>
  }
  return len;
 8029354:	687b      	ldr	r3, [r7, #4]
}
 8029356:	4618      	mov	r0, r3
 8029358:	3718      	adds	r7, #24
 802935a:	46bd      	mov	sp, r7
 802935c:	bd80      	pop	{r7, pc}

0802935e <_close>:

int _close(int file)
{
 802935e:	b480      	push	{r7}
 8029360:	b083      	sub	sp, #12
 8029362:	af00      	add	r7, sp, #0
 8029364:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8029366:	f04f 33ff 	mov.w	r3, #4294967295
}
 802936a:	4618      	mov	r0, r3
 802936c:	370c      	adds	r7, #12
 802936e:	46bd      	mov	sp, r7
 8029370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029374:	4770      	bx	lr

08029376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8029376:	b480      	push	{r7}
 8029378:	b083      	sub	sp, #12
 802937a:	af00      	add	r7, sp, #0
 802937c:	6078      	str	r0, [r7, #4]
 802937e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8029380:	683b      	ldr	r3, [r7, #0]
 8029382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8029386:	605a      	str	r2, [r3, #4]
  return 0;
 8029388:	2300      	movs	r3, #0
}
 802938a:	4618      	mov	r0, r3
 802938c:	370c      	adds	r7, #12
 802938e:	46bd      	mov	sp, r7
 8029390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029394:	4770      	bx	lr

08029396 <_isatty>:

int _isatty(int file)
{
 8029396:	b480      	push	{r7}
 8029398:	b083      	sub	sp, #12
 802939a:	af00      	add	r7, sp, #0
 802939c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802939e:	2301      	movs	r3, #1
}
 80293a0:	4618      	mov	r0, r3
 80293a2:	370c      	adds	r7, #12
 80293a4:	46bd      	mov	sp, r7
 80293a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293aa:	4770      	bx	lr

080293ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80293ac:	b480      	push	{r7}
 80293ae:	b085      	sub	sp, #20
 80293b0:	af00      	add	r7, sp, #0
 80293b2:	60f8      	str	r0, [r7, #12]
 80293b4:	60b9      	str	r1, [r7, #8]
 80293b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80293b8:	2300      	movs	r3, #0
}
 80293ba:	4618      	mov	r0, r3
 80293bc:	3714      	adds	r7, #20
 80293be:	46bd      	mov	sp, r7
 80293c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293c4:	4770      	bx	lr
	...

080293c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80293c8:	b580      	push	{r7, lr}
 80293ca:	b086      	sub	sp, #24
 80293cc:	af00      	add	r7, sp, #0
 80293ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80293d0:	4a14      	ldr	r2, [pc, #80]	; (8029424 <_sbrk+0x5c>)
 80293d2:	4b15      	ldr	r3, [pc, #84]	; (8029428 <_sbrk+0x60>)
 80293d4:	1ad3      	subs	r3, r2, r3
 80293d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80293d8:	697b      	ldr	r3, [r7, #20]
 80293da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80293dc:	4b13      	ldr	r3, [pc, #76]	; (802942c <_sbrk+0x64>)
 80293de:	681b      	ldr	r3, [r3, #0]
 80293e0:	2b00      	cmp	r3, #0
 80293e2:	d102      	bne.n	80293ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80293e4:	4b11      	ldr	r3, [pc, #68]	; (802942c <_sbrk+0x64>)
 80293e6:	4a12      	ldr	r2, [pc, #72]	; (8029430 <_sbrk+0x68>)
 80293e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80293ea:	4b10      	ldr	r3, [pc, #64]	; (802942c <_sbrk+0x64>)
 80293ec:	681a      	ldr	r2, [r3, #0]
 80293ee:	687b      	ldr	r3, [r7, #4]
 80293f0:	4413      	add	r3, r2
 80293f2:	693a      	ldr	r2, [r7, #16]
 80293f4:	429a      	cmp	r2, r3
 80293f6:	d207      	bcs.n	8029408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80293f8:	f005 fc26 	bl	802ec48 <__errno>
 80293fc:	4603      	mov	r3, r0
 80293fe:	220c      	movs	r2, #12
 8029400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8029402:	f04f 33ff 	mov.w	r3, #4294967295
 8029406:	e009      	b.n	802941c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8029408:	4b08      	ldr	r3, [pc, #32]	; (802942c <_sbrk+0x64>)
 802940a:	681b      	ldr	r3, [r3, #0]
 802940c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802940e:	4b07      	ldr	r3, [pc, #28]	; (802942c <_sbrk+0x64>)
 8029410:	681a      	ldr	r2, [r3, #0]
 8029412:	687b      	ldr	r3, [r7, #4]
 8029414:	4413      	add	r3, r2
 8029416:	4a05      	ldr	r2, [pc, #20]	; (802942c <_sbrk+0x64>)
 8029418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802941a:	68fb      	ldr	r3, [r7, #12]
}
 802941c:	4618      	mov	r0, r3
 802941e:	3718      	adds	r7, #24
 8029420:	46bd      	mov	sp, r7
 8029422:	bd80      	pop	{r7, pc}
 8029424:	24080000 	.word	0x24080000
 8029428:	00000800 	.word	0x00000800
 802942c:	24001e50 	.word	0x24001e50
 8029430:	24001e70 	.word	0x24001e70

08029434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8029434:	b480      	push	{r7}
 8029436:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8029438:	4b39      	ldr	r3, [pc, #228]	; (8029520 <SystemInit+0xec>)
 802943a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802943e:	4a38      	ldr	r2, [pc, #224]	; (8029520 <SystemInit+0xec>)
 8029440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8029444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8029448:	4b36      	ldr	r3, [pc, #216]	; (8029524 <SystemInit+0xf0>)
 802944a:	681b      	ldr	r3, [r3, #0]
 802944c:	f003 030f 	and.w	r3, r3, #15
 8029450:	2b06      	cmp	r3, #6
 8029452:	d807      	bhi.n	8029464 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8029454:	4b33      	ldr	r3, [pc, #204]	; (8029524 <SystemInit+0xf0>)
 8029456:	681b      	ldr	r3, [r3, #0]
 8029458:	f023 030f 	bic.w	r3, r3, #15
 802945c:	4a31      	ldr	r2, [pc, #196]	; (8029524 <SystemInit+0xf0>)
 802945e:	f043 0307 	orr.w	r3, r3, #7
 8029462:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8029464:	4b30      	ldr	r3, [pc, #192]	; (8029528 <SystemInit+0xf4>)
 8029466:	681b      	ldr	r3, [r3, #0]
 8029468:	4a2f      	ldr	r2, [pc, #188]	; (8029528 <SystemInit+0xf4>)
 802946a:	f043 0301 	orr.w	r3, r3, #1
 802946e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8029470:	4b2d      	ldr	r3, [pc, #180]	; (8029528 <SystemInit+0xf4>)
 8029472:	2200      	movs	r2, #0
 8029474:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8029476:	4b2c      	ldr	r3, [pc, #176]	; (8029528 <SystemInit+0xf4>)
 8029478:	681a      	ldr	r2, [r3, #0]
 802947a:	492b      	ldr	r1, [pc, #172]	; (8029528 <SystemInit+0xf4>)
 802947c:	4b2b      	ldr	r3, [pc, #172]	; (802952c <SystemInit+0xf8>)
 802947e:	4013      	ands	r3, r2
 8029480:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8029482:	4b28      	ldr	r3, [pc, #160]	; (8029524 <SystemInit+0xf0>)
 8029484:	681b      	ldr	r3, [r3, #0]
 8029486:	f003 0308 	and.w	r3, r3, #8
 802948a:	2b00      	cmp	r3, #0
 802948c:	d007      	beq.n	802949e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802948e:	4b25      	ldr	r3, [pc, #148]	; (8029524 <SystemInit+0xf0>)
 8029490:	681b      	ldr	r3, [r3, #0]
 8029492:	f023 030f 	bic.w	r3, r3, #15
 8029496:	4a23      	ldr	r2, [pc, #140]	; (8029524 <SystemInit+0xf0>)
 8029498:	f043 0307 	orr.w	r3, r3, #7
 802949c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802949e:	4b22      	ldr	r3, [pc, #136]	; (8029528 <SystemInit+0xf4>)
 80294a0:	2200      	movs	r2, #0
 80294a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80294a4:	4b20      	ldr	r3, [pc, #128]	; (8029528 <SystemInit+0xf4>)
 80294a6:	2200      	movs	r2, #0
 80294a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80294aa:	4b1f      	ldr	r3, [pc, #124]	; (8029528 <SystemInit+0xf4>)
 80294ac:	2200      	movs	r2, #0
 80294ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80294b0:	4b1d      	ldr	r3, [pc, #116]	; (8029528 <SystemInit+0xf4>)
 80294b2:	4a1f      	ldr	r2, [pc, #124]	; (8029530 <SystemInit+0xfc>)
 80294b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80294b6:	4b1c      	ldr	r3, [pc, #112]	; (8029528 <SystemInit+0xf4>)
 80294b8:	4a1e      	ldr	r2, [pc, #120]	; (8029534 <SystemInit+0x100>)
 80294ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80294bc:	4b1a      	ldr	r3, [pc, #104]	; (8029528 <SystemInit+0xf4>)
 80294be:	4a1e      	ldr	r2, [pc, #120]	; (8029538 <SystemInit+0x104>)
 80294c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80294c2:	4b19      	ldr	r3, [pc, #100]	; (8029528 <SystemInit+0xf4>)
 80294c4:	2200      	movs	r2, #0
 80294c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80294c8:	4b17      	ldr	r3, [pc, #92]	; (8029528 <SystemInit+0xf4>)
 80294ca:	4a1b      	ldr	r2, [pc, #108]	; (8029538 <SystemInit+0x104>)
 80294cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80294ce:	4b16      	ldr	r3, [pc, #88]	; (8029528 <SystemInit+0xf4>)
 80294d0:	2200      	movs	r2, #0
 80294d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80294d4:	4b14      	ldr	r3, [pc, #80]	; (8029528 <SystemInit+0xf4>)
 80294d6:	4a18      	ldr	r2, [pc, #96]	; (8029538 <SystemInit+0x104>)
 80294d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80294da:	4b13      	ldr	r3, [pc, #76]	; (8029528 <SystemInit+0xf4>)
 80294dc:	2200      	movs	r2, #0
 80294de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80294e0:	4b11      	ldr	r3, [pc, #68]	; (8029528 <SystemInit+0xf4>)
 80294e2:	681b      	ldr	r3, [r3, #0]
 80294e4:	4a10      	ldr	r2, [pc, #64]	; (8029528 <SystemInit+0xf4>)
 80294e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80294ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80294ec:	4b0e      	ldr	r3, [pc, #56]	; (8029528 <SystemInit+0xf4>)
 80294ee:	2200      	movs	r2, #0
 80294f0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80294f2:	4b12      	ldr	r3, [pc, #72]	; (802953c <SystemInit+0x108>)
 80294f4:	681a      	ldr	r2, [r3, #0]
 80294f6:	4b12      	ldr	r3, [pc, #72]	; (8029540 <SystemInit+0x10c>)
 80294f8:	4013      	ands	r3, r2
 80294fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80294fe:	d202      	bcs.n	8029506 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8029500:	4b10      	ldr	r3, [pc, #64]	; (8029544 <SystemInit+0x110>)
 8029502:	2201      	movs	r2, #1
 8029504:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8029506:	4b10      	ldr	r3, [pc, #64]	; (8029548 <SystemInit+0x114>)
 8029508:	f243 02d2 	movw	r2, #12498	; 0x30d2
 802950c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 802950e:	4b04      	ldr	r3, [pc, #16]	; (8029520 <SystemInit+0xec>)
 8029510:	4a0e      	ldr	r2, [pc, #56]	; (802954c <SystemInit+0x118>)
 8029512:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8029514:	bf00      	nop
 8029516:	46bd      	mov	sp, r7
 8029518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802951c:	4770      	bx	lr
 802951e:	bf00      	nop
 8029520:	e000ed00 	.word	0xe000ed00
 8029524:	52002000 	.word	0x52002000
 8029528:	58024400 	.word	0x58024400
 802952c:	eaf6ed7f 	.word	0xeaf6ed7f
 8029530:	02020200 	.word	0x02020200
 8029534:	01ff0000 	.word	0x01ff0000
 8029538:	01010280 	.word	0x01010280
 802953c:	5c001000 	.word	0x5c001000
 8029540:	ffff0000 	.word	0xffff0000
 8029544:	51008108 	.word	0x51008108
 8029548:	52004000 	.word	0x52004000
 802954c:	08020000 	.word	0x08020000

08029550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8029550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8029588 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8029554:	f7ff ff6e 	bl	8029434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8029558:	480c      	ldr	r0, [pc, #48]	; (802958c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802955a:	490d      	ldr	r1, [pc, #52]	; (8029590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802955c:	4a0d      	ldr	r2, [pc, #52]	; (8029594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 802955e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8029560:	e002      	b.n	8029568 <LoopCopyDataInit>

08029562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8029562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8029564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8029566:	3304      	adds	r3, #4

08029568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8029568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802956a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802956c:	d3f9      	bcc.n	8029562 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802956e:	4a0a      	ldr	r2, [pc, #40]	; (8029598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8029570:	4c0a      	ldr	r4, [pc, #40]	; (802959c <LoopFillZerobss+0x22>)
  movs r3, #0
 8029572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8029574:	e001      	b.n	802957a <LoopFillZerobss>

08029576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8029576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8029578:	3204      	adds	r2, #4

0802957a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802957a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802957c:	d3fb      	bcc.n	8029576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802957e:	f005 fb69 	bl	802ec54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8029582:	f7fd fe17 	bl	80271b4 <main>
  bx  lr
 8029586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8029588:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802958c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8029590:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 8029594:	08030df8 	.word	0x08030df8
  ldr r2, =_sbss
 8029598:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 802959c:	24001e6c 	.word	0x24001e6c

080295a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80295a0:	e7fe      	b.n	80295a0 <ADC3_IRQHandler>
	...

080295a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80295a4:	b580      	push	{r7, lr}
 80295a6:	b082      	sub	sp, #8
 80295a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80295aa:	2003      	movs	r0, #3
 80295ac:	f000 f98c 	bl	80298c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80295b0:	f001 fba6 	bl	802ad00 <HAL_RCC_GetSysClockFreq>
 80295b4:	4602      	mov	r2, r0
 80295b6:	4b15      	ldr	r3, [pc, #84]	; (802960c <HAL_Init+0x68>)
 80295b8:	699b      	ldr	r3, [r3, #24]
 80295ba:	0a1b      	lsrs	r3, r3, #8
 80295bc:	f003 030f 	and.w	r3, r3, #15
 80295c0:	4913      	ldr	r1, [pc, #76]	; (8029610 <HAL_Init+0x6c>)
 80295c2:	5ccb      	ldrb	r3, [r1, r3]
 80295c4:	f003 031f 	and.w	r3, r3, #31
 80295c8:	fa22 f303 	lsr.w	r3, r2, r3
 80295cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80295ce:	4b0f      	ldr	r3, [pc, #60]	; (802960c <HAL_Init+0x68>)
 80295d0:	699b      	ldr	r3, [r3, #24]
 80295d2:	f003 030f 	and.w	r3, r3, #15
 80295d6:	4a0e      	ldr	r2, [pc, #56]	; (8029610 <HAL_Init+0x6c>)
 80295d8:	5cd3      	ldrb	r3, [r2, r3]
 80295da:	f003 031f 	and.w	r3, r3, #31
 80295de:	687a      	ldr	r2, [r7, #4]
 80295e0:	fa22 f303 	lsr.w	r3, r2, r3
 80295e4:	4a0b      	ldr	r2, [pc, #44]	; (8029614 <HAL_Init+0x70>)
 80295e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80295e8:	4a0b      	ldr	r2, [pc, #44]	; (8029618 <HAL_Init+0x74>)
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80295ee:	200f      	movs	r0, #15
 80295f0:	f000 f814 	bl	802961c <HAL_InitTick>
 80295f4:	4603      	mov	r3, r0
 80295f6:	2b00      	cmp	r3, #0
 80295f8:	d001      	beq.n	80295fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80295fa:	2301      	movs	r3, #1
 80295fc:	e002      	b.n	8029604 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80295fe:	f7ff fa49 	bl	8028a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8029602:	2300      	movs	r3, #0
}
 8029604:	4618      	mov	r0, r3
 8029606:	3708      	adds	r7, #8
 8029608:	46bd      	mov	sp, r7
 802960a:	bd80      	pop	{r7, pc}
 802960c:	58024400 	.word	0x58024400
 8029610:	08030d18 	.word	0x08030d18
 8029614:	24000044 	.word	0x24000044
 8029618:	24000040 	.word	0x24000040

0802961c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802961c:	b580      	push	{r7, lr}
 802961e:	b082      	sub	sp, #8
 8029620:	af00      	add	r7, sp, #0
 8029622:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8029624:	4b15      	ldr	r3, [pc, #84]	; (802967c <HAL_InitTick+0x60>)
 8029626:	781b      	ldrb	r3, [r3, #0]
 8029628:	2b00      	cmp	r3, #0
 802962a:	d101      	bne.n	8029630 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802962c:	2301      	movs	r3, #1
 802962e:	e021      	b.n	8029674 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8029630:	4b13      	ldr	r3, [pc, #76]	; (8029680 <HAL_InitTick+0x64>)
 8029632:	681a      	ldr	r2, [r3, #0]
 8029634:	4b11      	ldr	r3, [pc, #68]	; (802967c <HAL_InitTick+0x60>)
 8029636:	781b      	ldrb	r3, [r3, #0]
 8029638:	4619      	mov	r1, r3
 802963a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802963e:	fbb3 f3f1 	udiv	r3, r3, r1
 8029642:	fbb2 f3f3 	udiv	r3, r2, r3
 8029646:	4618      	mov	r0, r3
 8029648:	f000 f971 	bl	802992e <HAL_SYSTICK_Config>
 802964c:	4603      	mov	r3, r0
 802964e:	2b00      	cmp	r3, #0
 8029650:	d001      	beq.n	8029656 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8029652:	2301      	movs	r3, #1
 8029654:	e00e      	b.n	8029674 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8029656:	687b      	ldr	r3, [r7, #4]
 8029658:	2b0f      	cmp	r3, #15
 802965a:	d80a      	bhi.n	8029672 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802965c:	2200      	movs	r2, #0
 802965e:	6879      	ldr	r1, [r7, #4]
 8029660:	f04f 30ff 	mov.w	r0, #4294967295
 8029664:	f000 f93b 	bl	80298de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8029668:	4a06      	ldr	r2, [pc, #24]	; (8029684 <HAL_InitTick+0x68>)
 802966a:	687b      	ldr	r3, [r7, #4]
 802966c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802966e:	2300      	movs	r3, #0
 8029670:	e000      	b.n	8029674 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8029672:	2301      	movs	r3, #1
}
 8029674:	4618      	mov	r0, r3
 8029676:	3708      	adds	r7, #8
 8029678:	46bd      	mov	sp, r7
 802967a:	bd80      	pop	{r7, pc}
 802967c:	2400004c 	.word	0x2400004c
 8029680:	24000040 	.word	0x24000040
 8029684:	24000048 	.word	0x24000048

08029688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8029688:	b480      	push	{r7}
 802968a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802968c:	4b06      	ldr	r3, [pc, #24]	; (80296a8 <HAL_IncTick+0x20>)
 802968e:	781b      	ldrb	r3, [r3, #0]
 8029690:	461a      	mov	r2, r3
 8029692:	4b06      	ldr	r3, [pc, #24]	; (80296ac <HAL_IncTick+0x24>)
 8029694:	681b      	ldr	r3, [r3, #0]
 8029696:	4413      	add	r3, r2
 8029698:	4a04      	ldr	r2, [pc, #16]	; (80296ac <HAL_IncTick+0x24>)
 802969a:	6013      	str	r3, [r2, #0]
}
 802969c:	bf00      	nop
 802969e:	46bd      	mov	sp, r7
 80296a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80296a4:	4770      	bx	lr
 80296a6:	bf00      	nop
 80296a8:	2400004c 	.word	0x2400004c
 80296ac:	24001e54 	.word	0x24001e54

080296b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80296b0:	b480      	push	{r7}
 80296b2:	af00      	add	r7, sp, #0
  return uwTick;
 80296b4:	4b03      	ldr	r3, [pc, #12]	; (80296c4 <HAL_GetTick+0x14>)
 80296b6:	681b      	ldr	r3, [r3, #0]
}
 80296b8:	4618      	mov	r0, r3
 80296ba:	46bd      	mov	sp, r7
 80296bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80296c0:	4770      	bx	lr
 80296c2:	bf00      	nop
 80296c4:	24001e54 	.word	0x24001e54

080296c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80296c8:	b580      	push	{r7, lr}
 80296ca:	b084      	sub	sp, #16
 80296cc:	af00      	add	r7, sp, #0
 80296ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80296d0:	f7ff ffee 	bl	80296b0 <HAL_GetTick>
 80296d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80296d6:	687b      	ldr	r3, [r7, #4]
 80296d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80296da:	68fb      	ldr	r3, [r7, #12]
 80296dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80296e0:	d005      	beq.n	80296ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80296e2:	4b0a      	ldr	r3, [pc, #40]	; (802970c <HAL_Delay+0x44>)
 80296e4:	781b      	ldrb	r3, [r3, #0]
 80296e6:	461a      	mov	r2, r3
 80296e8:	68fb      	ldr	r3, [r7, #12]
 80296ea:	4413      	add	r3, r2
 80296ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80296ee:	bf00      	nop
 80296f0:	f7ff ffde 	bl	80296b0 <HAL_GetTick>
 80296f4:	4602      	mov	r2, r0
 80296f6:	68bb      	ldr	r3, [r7, #8]
 80296f8:	1ad3      	subs	r3, r2, r3
 80296fa:	68fa      	ldr	r2, [r7, #12]
 80296fc:	429a      	cmp	r2, r3
 80296fe:	d8f7      	bhi.n	80296f0 <HAL_Delay+0x28>
  {
  }
}
 8029700:	bf00      	nop
 8029702:	bf00      	nop
 8029704:	3710      	adds	r7, #16
 8029706:	46bd      	mov	sp, r7
 8029708:	bd80      	pop	{r7, pc}
 802970a:	bf00      	nop
 802970c:	2400004c 	.word	0x2400004c

08029710 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8029710:	b480      	push	{r7}
 8029712:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8029714:	4b03      	ldr	r3, [pc, #12]	; (8029724 <HAL_GetREVID+0x14>)
 8029716:	681b      	ldr	r3, [r3, #0]
 8029718:	0c1b      	lsrs	r3, r3, #16
}
 802971a:	4618      	mov	r0, r3
 802971c:	46bd      	mov	sp, r7
 802971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029722:	4770      	bx	lr
 8029724:	5c001000 	.word	0x5c001000

08029728 <__NVIC_SetPriorityGrouping>:
{
 8029728:	b480      	push	{r7}
 802972a:	b085      	sub	sp, #20
 802972c:	af00      	add	r7, sp, #0
 802972e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8029730:	687b      	ldr	r3, [r7, #4]
 8029732:	f003 0307 	and.w	r3, r3, #7
 8029736:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8029738:	4b0b      	ldr	r3, [pc, #44]	; (8029768 <__NVIC_SetPriorityGrouping+0x40>)
 802973a:	68db      	ldr	r3, [r3, #12]
 802973c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802973e:	68ba      	ldr	r2, [r7, #8]
 8029740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8029744:	4013      	ands	r3, r2
 8029746:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8029748:	68fb      	ldr	r3, [r7, #12]
 802974a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802974c:	68bb      	ldr	r3, [r7, #8]
 802974e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8029750:	4b06      	ldr	r3, [pc, #24]	; (802976c <__NVIC_SetPriorityGrouping+0x44>)
 8029752:	4313      	orrs	r3, r2
 8029754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8029756:	4a04      	ldr	r2, [pc, #16]	; (8029768 <__NVIC_SetPriorityGrouping+0x40>)
 8029758:	68bb      	ldr	r3, [r7, #8]
 802975a:	60d3      	str	r3, [r2, #12]
}
 802975c:	bf00      	nop
 802975e:	3714      	adds	r7, #20
 8029760:	46bd      	mov	sp, r7
 8029762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029766:	4770      	bx	lr
 8029768:	e000ed00 	.word	0xe000ed00
 802976c:	05fa0000 	.word	0x05fa0000

08029770 <__NVIC_GetPriorityGrouping>:
{
 8029770:	b480      	push	{r7}
 8029772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8029774:	4b04      	ldr	r3, [pc, #16]	; (8029788 <__NVIC_GetPriorityGrouping+0x18>)
 8029776:	68db      	ldr	r3, [r3, #12]
 8029778:	0a1b      	lsrs	r3, r3, #8
 802977a:	f003 0307 	and.w	r3, r3, #7
}
 802977e:	4618      	mov	r0, r3
 8029780:	46bd      	mov	sp, r7
 8029782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029786:	4770      	bx	lr
 8029788:	e000ed00 	.word	0xe000ed00

0802978c <__NVIC_EnableIRQ>:
{
 802978c:	b480      	push	{r7}
 802978e:	b083      	sub	sp, #12
 8029790:	af00      	add	r7, sp, #0
 8029792:	4603      	mov	r3, r0
 8029794:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8029796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802979a:	2b00      	cmp	r3, #0
 802979c:	db0b      	blt.n	80297b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802979e:	88fb      	ldrh	r3, [r7, #6]
 80297a0:	f003 021f 	and.w	r2, r3, #31
 80297a4:	4907      	ldr	r1, [pc, #28]	; (80297c4 <__NVIC_EnableIRQ+0x38>)
 80297a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80297aa:	095b      	lsrs	r3, r3, #5
 80297ac:	2001      	movs	r0, #1
 80297ae:	fa00 f202 	lsl.w	r2, r0, r2
 80297b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80297b6:	bf00      	nop
 80297b8:	370c      	adds	r7, #12
 80297ba:	46bd      	mov	sp, r7
 80297bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80297c0:	4770      	bx	lr
 80297c2:	bf00      	nop
 80297c4:	e000e100 	.word	0xe000e100

080297c8 <__NVIC_SetPriority>:
{
 80297c8:	b480      	push	{r7}
 80297ca:	b083      	sub	sp, #12
 80297cc:	af00      	add	r7, sp, #0
 80297ce:	4603      	mov	r3, r0
 80297d0:	6039      	str	r1, [r7, #0]
 80297d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80297d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80297d8:	2b00      	cmp	r3, #0
 80297da:	db0a      	blt.n	80297f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80297dc:	683b      	ldr	r3, [r7, #0]
 80297de:	b2da      	uxtb	r2, r3
 80297e0:	490c      	ldr	r1, [pc, #48]	; (8029814 <__NVIC_SetPriority+0x4c>)
 80297e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80297e6:	0112      	lsls	r2, r2, #4
 80297e8:	b2d2      	uxtb	r2, r2
 80297ea:	440b      	add	r3, r1
 80297ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80297f0:	e00a      	b.n	8029808 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80297f2:	683b      	ldr	r3, [r7, #0]
 80297f4:	b2da      	uxtb	r2, r3
 80297f6:	4908      	ldr	r1, [pc, #32]	; (8029818 <__NVIC_SetPriority+0x50>)
 80297f8:	88fb      	ldrh	r3, [r7, #6]
 80297fa:	f003 030f 	and.w	r3, r3, #15
 80297fe:	3b04      	subs	r3, #4
 8029800:	0112      	lsls	r2, r2, #4
 8029802:	b2d2      	uxtb	r2, r2
 8029804:	440b      	add	r3, r1
 8029806:	761a      	strb	r2, [r3, #24]
}
 8029808:	bf00      	nop
 802980a:	370c      	adds	r7, #12
 802980c:	46bd      	mov	sp, r7
 802980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029812:	4770      	bx	lr
 8029814:	e000e100 	.word	0xe000e100
 8029818:	e000ed00 	.word	0xe000ed00

0802981c <NVIC_EncodePriority>:
{
 802981c:	b480      	push	{r7}
 802981e:	b089      	sub	sp, #36	; 0x24
 8029820:	af00      	add	r7, sp, #0
 8029822:	60f8      	str	r0, [r7, #12]
 8029824:	60b9      	str	r1, [r7, #8]
 8029826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8029828:	68fb      	ldr	r3, [r7, #12]
 802982a:	f003 0307 	and.w	r3, r3, #7
 802982e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8029830:	69fb      	ldr	r3, [r7, #28]
 8029832:	f1c3 0307 	rsb	r3, r3, #7
 8029836:	2b04      	cmp	r3, #4
 8029838:	bf28      	it	cs
 802983a:	2304      	movcs	r3, #4
 802983c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802983e:	69fb      	ldr	r3, [r7, #28]
 8029840:	3304      	adds	r3, #4
 8029842:	2b06      	cmp	r3, #6
 8029844:	d902      	bls.n	802984c <NVIC_EncodePriority+0x30>
 8029846:	69fb      	ldr	r3, [r7, #28]
 8029848:	3b03      	subs	r3, #3
 802984a:	e000      	b.n	802984e <NVIC_EncodePriority+0x32>
 802984c:	2300      	movs	r3, #0
 802984e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8029850:	f04f 32ff 	mov.w	r2, #4294967295
 8029854:	69bb      	ldr	r3, [r7, #24]
 8029856:	fa02 f303 	lsl.w	r3, r2, r3
 802985a:	43da      	mvns	r2, r3
 802985c:	68bb      	ldr	r3, [r7, #8]
 802985e:	401a      	ands	r2, r3
 8029860:	697b      	ldr	r3, [r7, #20]
 8029862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8029864:	f04f 31ff 	mov.w	r1, #4294967295
 8029868:	697b      	ldr	r3, [r7, #20]
 802986a:	fa01 f303 	lsl.w	r3, r1, r3
 802986e:	43d9      	mvns	r1, r3
 8029870:	687b      	ldr	r3, [r7, #4]
 8029872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8029874:	4313      	orrs	r3, r2
}
 8029876:	4618      	mov	r0, r3
 8029878:	3724      	adds	r7, #36	; 0x24
 802987a:	46bd      	mov	sp, r7
 802987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029880:	4770      	bx	lr
	...

08029884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8029884:	b580      	push	{r7, lr}
 8029886:	b082      	sub	sp, #8
 8029888:	af00      	add	r7, sp, #0
 802988a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802988c:	687b      	ldr	r3, [r7, #4]
 802988e:	3b01      	subs	r3, #1
 8029890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8029894:	d301      	bcc.n	802989a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8029896:	2301      	movs	r3, #1
 8029898:	e00f      	b.n	80298ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802989a:	4a0a      	ldr	r2, [pc, #40]	; (80298c4 <SysTick_Config+0x40>)
 802989c:	687b      	ldr	r3, [r7, #4]
 802989e:	3b01      	subs	r3, #1
 80298a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80298a2:	210f      	movs	r1, #15
 80298a4:	f04f 30ff 	mov.w	r0, #4294967295
 80298a8:	f7ff ff8e 	bl	80297c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80298ac:	4b05      	ldr	r3, [pc, #20]	; (80298c4 <SysTick_Config+0x40>)
 80298ae:	2200      	movs	r2, #0
 80298b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80298b2:	4b04      	ldr	r3, [pc, #16]	; (80298c4 <SysTick_Config+0x40>)
 80298b4:	2207      	movs	r2, #7
 80298b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80298b8:	2300      	movs	r3, #0
}
 80298ba:	4618      	mov	r0, r3
 80298bc:	3708      	adds	r7, #8
 80298be:	46bd      	mov	sp, r7
 80298c0:	bd80      	pop	{r7, pc}
 80298c2:	bf00      	nop
 80298c4:	e000e010 	.word	0xe000e010

080298c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80298c8:	b580      	push	{r7, lr}
 80298ca:	b082      	sub	sp, #8
 80298cc:	af00      	add	r7, sp, #0
 80298ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80298d0:	6878      	ldr	r0, [r7, #4]
 80298d2:	f7ff ff29 	bl	8029728 <__NVIC_SetPriorityGrouping>
}
 80298d6:	bf00      	nop
 80298d8:	3708      	adds	r7, #8
 80298da:	46bd      	mov	sp, r7
 80298dc:	bd80      	pop	{r7, pc}

080298de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80298de:	b580      	push	{r7, lr}
 80298e0:	b086      	sub	sp, #24
 80298e2:	af00      	add	r7, sp, #0
 80298e4:	4603      	mov	r3, r0
 80298e6:	60b9      	str	r1, [r7, #8]
 80298e8:	607a      	str	r2, [r7, #4]
 80298ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80298ec:	f7ff ff40 	bl	8029770 <__NVIC_GetPriorityGrouping>
 80298f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80298f2:	687a      	ldr	r2, [r7, #4]
 80298f4:	68b9      	ldr	r1, [r7, #8]
 80298f6:	6978      	ldr	r0, [r7, #20]
 80298f8:	f7ff ff90 	bl	802981c <NVIC_EncodePriority>
 80298fc:	4602      	mov	r2, r0
 80298fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8029902:	4611      	mov	r1, r2
 8029904:	4618      	mov	r0, r3
 8029906:	f7ff ff5f 	bl	80297c8 <__NVIC_SetPriority>
}
 802990a:	bf00      	nop
 802990c:	3718      	adds	r7, #24
 802990e:	46bd      	mov	sp, r7
 8029910:	bd80      	pop	{r7, pc}

08029912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8029912:	b580      	push	{r7, lr}
 8029914:	b082      	sub	sp, #8
 8029916:	af00      	add	r7, sp, #0
 8029918:	4603      	mov	r3, r0
 802991a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802991c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8029920:	4618      	mov	r0, r3
 8029922:	f7ff ff33 	bl	802978c <__NVIC_EnableIRQ>
}
 8029926:	bf00      	nop
 8029928:	3708      	adds	r7, #8
 802992a:	46bd      	mov	sp, r7
 802992c:	bd80      	pop	{r7, pc}

0802992e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802992e:	b580      	push	{r7, lr}
 8029930:	b082      	sub	sp, #8
 8029932:	af00      	add	r7, sp, #0
 8029934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8029936:	6878      	ldr	r0, [r7, #4]
 8029938:	f7ff ffa4 	bl	8029884 <SysTick_Config>
 802993c:	4603      	mov	r3, r0
}
 802993e:	4618      	mov	r0, r3
 8029940:	3708      	adds	r7, #8
 8029942:	46bd      	mov	sp, r7
 8029944:	bd80      	pop	{r7, pc}
	...

08029948 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8029948:	b480      	push	{r7}
 802994a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 802994c:	f3bf 8f5f 	dmb	sy
}
 8029950:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8029952:	4b07      	ldr	r3, [pc, #28]	; (8029970 <HAL_MPU_Disable+0x28>)
 8029954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029956:	4a06      	ldr	r2, [pc, #24]	; (8029970 <HAL_MPU_Disable+0x28>)
 8029958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802995c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 802995e:	4b05      	ldr	r3, [pc, #20]	; (8029974 <HAL_MPU_Disable+0x2c>)
 8029960:	2200      	movs	r2, #0
 8029962:	605a      	str	r2, [r3, #4]
}
 8029964:	bf00      	nop
 8029966:	46bd      	mov	sp, r7
 8029968:	f85d 7b04 	ldr.w	r7, [sp], #4
 802996c:	4770      	bx	lr
 802996e:	bf00      	nop
 8029970:	e000ed00 	.word	0xe000ed00
 8029974:	e000ed90 	.word	0xe000ed90

08029978 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8029978:	b480      	push	{r7}
 802997a:	b083      	sub	sp, #12
 802997c:	af00      	add	r7, sp, #0
 802997e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8029980:	4a0b      	ldr	r2, [pc, #44]	; (80299b0 <HAL_MPU_Enable+0x38>)
 8029982:	687b      	ldr	r3, [r7, #4]
 8029984:	f043 0301 	orr.w	r3, r3, #1
 8029988:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 802998a:	4b0a      	ldr	r3, [pc, #40]	; (80299b4 <HAL_MPU_Enable+0x3c>)
 802998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802998e:	4a09      	ldr	r2, [pc, #36]	; (80299b4 <HAL_MPU_Enable+0x3c>)
 8029990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8029994:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8029996:	f3bf 8f4f 	dsb	sy
}
 802999a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802999c:	f3bf 8f6f 	isb	sy
}
 80299a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80299a2:	bf00      	nop
 80299a4:	370c      	adds	r7, #12
 80299a6:	46bd      	mov	sp, r7
 80299a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80299ac:	4770      	bx	lr
 80299ae:	bf00      	nop
 80299b0:	e000ed90 	.word	0xe000ed90
 80299b4:	e000ed00 	.word	0xe000ed00

080299b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80299b8:	b480      	push	{r7}
 80299ba:	b083      	sub	sp, #12
 80299bc:	af00      	add	r7, sp, #0
 80299be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80299c0:	687b      	ldr	r3, [r7, #4]
 80299c2:	785a      	ldrb	r2, [r3, #1]
 80299c4:	4b1d      	ldr	r3, [pc, #116]	; (8029a3c <HAL_MPU_ConfigRegion+0x84>)
 80299c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80299c8:	687b      	ldr	r3, [r7, #4]
 80299ca:	781b      	ldrb	r3, [r3, #0]
 80299cc:	2b00      	cmp	r3, #0
 80299ce:	d029      	beq.n	8029a24 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80299d0:	4a1a      	ldr	r2, [pc, #104]	; (8029a3c <HAL_MPU_ConfigRegion+0x84>)
 80299d2:	687b      	ldr	r3, [r7, #4]
 80299d4:	685b      	ldr	r3, [r3, #4]
 80299d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80299d8:	687b      	ldr	r3, [r7, #4]
 80299da:	7b1b      	ldrb	r3, [r3, #12]
 80299dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80299de:	687b      	ldr	r3, [r7, #4]
 80299e0:	7adb      	ldrb	r3, [r3, #11]
 80299e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80299e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80299e6:	687b      	ldr	r3, [r7, #4]
 80299e8:	7a9b      	ldrb	r3, [r3, #10]
 80299ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80299ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80299ee:	687b      	ldr	r3, [r7, #4]
 80299f0:	7b5b      	ldrb	r3, [r3, #13]
 80299f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80299f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80299f6:	687b      	ldr	r3, [r7, #4]
 80299f8:	7b9b      	ldrb	r3, [r3, #14]
 80299fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80299fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80299fe:	687b      	ldr	r3, [r7, #4]
 8029a00:	7bdb      	ldrb	r3, [r3, #15]
 8029a02:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8029a04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8029a06:	687b      	ldr	r3, [r7, #4]
 8029a08:	7a5b      	ldrb	r3, [r3, #9]
 8029a0a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8029a0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8029a0e:	687b      	ldr	r3, [r7, #4]
 8029a10:	7a1b      	ldrb	r3, [r3, #8]
 8029a12:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8029a14:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8029a16:	687a      	ldr	r2, [r7, #4]
 8029a18:	7812      	ldrb	r2, [r2, #0]
 8029a1a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8029a1c:	4a07      	ldr	r2, [pc, #28]	; (8029a3c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8029a1e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8029a20:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8029a22:	e005      	b.n	8029a30 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8029a24:	4b05      	ldr	r3, [pc, #20]	; (8029a3c <HAL_MPU_ConfigRegion+0x84>)
 8029a26:	2200      	movs	r2, #0
 8029a28:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8029a2a:	4b04      	ldr	r3, [pc, #16]	; (8029a3c <HAL_MPU_ConfigRegion+0x84>)
 8029a2c:	2200      	movs	r2, #0
 8029a2e:	611a      	str	r2, [r3, #16]
}
 8029a30:	bf00      	nop
 8029a32:	370c      	adds	r7, #12
 8029a34:	46bd      	mov	sp, r7
 8029a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a3a:	4770      	bx	lr
 8029a3c:	e000ed90 	.word	0xe000ed90

08029a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8029a40:	b480      	push	{r7}
 8029a42:	b089      	sub	sp, #36	; 0x24
 8029a44:	af00      	add	r7, sp, #0
 8029a46:	6078      	str	r0, [r7, #4]
 8029a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8029a4a:	2300      	movs	r3, #0
 8029a4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8029a4e:	4b89      	ldr	r3, [pc, #548]	; (8029c74 <HAL_GPIO_Init+0x234>)
 8029a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8029a52:	e194      	b.n	8029d7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8029a54:	683b      	ldr	r3, [r7, #0]
 8029a56:	681a      	ldr	r2, [r3, #0]
 8029a58:	2101      	movs	r1, #1
 8029a5a:	69fb      	ldr	r3, [r7, #28]
 8029a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8029a60:	4013      	ands	r3, r2
 8029a62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8029a64:	693b      	ldr	r3, [r7, #16]
 8029a66:	2b00      	cmp	r3, #0
 8029a68:	f000 8186 	beq.w	8029d78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8029a6c:	683b      	ldr	r3, [r7, #0]
 8029a6e:	685b      	ldr	r3, [r3, #4]
 8029a70:	f003 0303 	and.w	r3, r3, #3
 8029a74:	2b01      	cmp	r3, #1
 8029a76:	d005      	beq.n	8029a84 <HAL_GPIO_Init+0x44>
 8029a78:	683b      	ldr	r3, [r7, #0]
 8029a7a:	685b      	ldr	r3, [r3, #4]
 8029a7c:	f003 0303 	and.w	r3, r3, #3
 8029a80:	2b02      	cmp	r3, #2
 8029a82:	d130      	bne.n	8029ae6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8029a84:	687b      	ldr	r3, [r7, #4]
 8029a86:	689b      	ldr	r3, [r3, #8]
 8029a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8029a8a:	69fb      	ldr	r3, [r7, #28]
 8029a8c:	005b      	lsls	r3, r3, #1
 8029a8e:	2203      	movs	r2, #3
 8029a90:	fa02 f303 	lsl.w	r3, r2, r3
 8029a94:	43db      	mvns	r3, r3
 8029a96:	69ba      	ldr	r2, [r7, #24]
 8029a98:	4013      	ands	r3, r2
 8029a9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8029a9c:	683b      	ldr	r3, [r7, #0]
 8029a9e:	68da      	ldr	r2, [r3, #12]
 8029aa0:	69fb      	ldr	r3, [r7, #28]
 8029aa2:	005b      	lsls	r3, r3, #1
 8029aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8029aa8:	69ba      	ldr	r2, [r7, #24]
 8029aaa:	4313      	orrs	r3, r2
 8029aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8029aae:	687b      	ldr	r3, [r7, #4]
 8029ab0:	69ba      	ldr	r2, [r7, #24]
 8029ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8029ab4:	687b      	ldr	r3, [r7, #4]
 8029ab6:	685b      	ldr	r3, [r3, #4]
 8029ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8029aba:	2201      	movs	r2, #1
 8029abc:	69fb      	ldr	r3, [r7, #28]
 8029abe:	fa02 f303 	lsl.w	r3, r2, r3
 8029ac2:	43db      	mvns	r3, r3
 8029ac4:	69ba      	ldr	r2, [r7, #24]
 8029ac6:	4013      	ands	r3, r2
 8029ac8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8029aca:	683b      	ldr	r3, [r7, #0]
 8029acc:	685b      	ldr	r3, [r3, #4]
 8029ace:	091b      	lsrs	r3, r3, #4
 8029ad0:	f003 0201 	and.w	r2, r3, #1
 8029ad4:	69fb      	ldr	r3, [r7, #28]
 8029ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8029ada:	69ba      	ldr	r2, [r7, #24]
 8029adc:	4313      	orrs	r3, r2
 8029ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8029ae0:	687b      	ldr	r3, [r7, #4]
 8029ae2:	69ba      	ldr	r2, [r7, #24]
 8029ae4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8029ae6:	683b      	ldr	r3, [r7, #0]
 8029ae8:	685b      	ldr	r3, [r3, #4]
 8029aea:	f003 0303 	and.w	r3, r3, #3
 8029aee:	2b03      	cmp	r3, #3
 8029af0:	d017      	beq.n	8029b22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8029af2:	687b      	ldr	r3, [r7, #4]
 8029af4:	68db      	ldr	r3, [r3, #12]
 8029af6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8029af8:	69fb      	ldr	r3, [r7, #28]
 8029afa:	005b      	lsls	r3, r3, #1
 8029afc:	2203      	movs	r2, #3
 8029afe:	fa02 f303 	lsl.w	r3, r2, r3
 8029b02:	43db      	mvns	r3, r3
 8029b04:	69ba      	ldr	r2, [r7, #24]
 8029b06:	4013      	ands	r3, r2
 8029b08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8029b0a:	683b      	ldr	r3, [r7, #0]
 8029b0c:	689a      	ldr	r2, [r3, #8]
 8029b0e:	69fb      	ldr	r3, [r7, #28]
 8029b10:	005b      	lsls	r3, r3, #1
 8029b12:	fa02 f303 	lsl.w	r3, r2, r3
 8029b16:	69ba      	ldr	r2, [r7, #24]
 8029b18:	4313      	orrs	r3, r2
 8029b1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8029b1c:	687b      	ldr	r3, [r7, #4]
 8029b1e:	69ba      	ldr	r2, [r7, #24]
 8029b20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8029b22:	683b      	ldr	r3, [r7, #0]
 8029b24:	685b      	ldr	r3, [r3, #4]
 8029b26:	f003 0303 	and.w	r3, r3, #3
 8029b2a:	2b02      	cmp	r3, #2
 8029b2c:	d123      	bne.n	8029b76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8029b2e:	69fb      	ldr	r3, [r7, #28]
 8029b30:	08da      	lsrs	r2, r3, #3
 8029b32:	687b      	ldr	r3, [r7, #4]
 8029b34:	3208      	adds	r2, #8
 8029b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8029b3c:	69fb      	ldr	r3, [r7, #28]
 8029b3e:	f003 0307 	and.w	r3, r3, #7
 8029b42:	009b      	lsls	r3, r3, #2
 8029b44:	220f      	movs	r2, #15
 8029b46:	fa02 f303 	lsl.w	r3, r2, r3
 8029b4a:	43db      	mvns	r3, r3
 8029b4c:	69ba      	ldr	r2, [r7, #24]
 8029b4e:	4013      	ands	r3, r2
 8029b50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8029b52:	683b      	ldr	r3, [r7, #0]
 8029b54:	691a      	ldr	r2, [r3, #16]
 8029b56:	69fb      	ldr	r3, [r7, #28]
 8029b58:	f003 0307 	and.w	r3, r3, #7
 8029b5c:	009b      	lsls	r3, r3, #2
 8029b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8029b62:	69ba      	ldr	r2, [r7, #24]
 8029b64:	4313      	orrs	r3, r2
 8029b66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8029b68:	69fb      	ldr	r3, [r7, #28]
 8029b6a:	08da      	lsrs	r2, r3, #3
 8029b6c:	687b      	ldr	r3, [r7, #4]
 8029b6e:	3208      	adds	r2, #8
 8029b70:	69b9      	ldr	r1, [r7, #24]
 8029b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8029b76:	687b      	ldr	r3, [r7, #4]
 8029b78:	681b      	ldr	r3, [r3, #0]
 8029b7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8029b7c:	69fb      	ldr	r3, [r7, #28]
 8029b7e:	005b      	lsls	r3, r3, #1
 8029b80:	2203      	movs	r2, #3
 8029b82:	fa02 f303 	lsl.w	r3, r2, r3
 8029b86:	43db      	mvns	r3, r3
 8029b88:	69ba      	ldr	r2, [r7, #24]
 8029b8a:	4013      	ands	r3, r2
 8029b8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8029b8e:	683b      	ldr	r3, [r7, #0]
 8029b90:	685b      	ldr	r3, [r3, #4]
 8029b92:	f003 0203 	and.w	r2, r3, #3
 8029b96:	69fb      	ldr	r3, [r7, #28]
 8029b98:	005b      	lsls	r3, r3, #1
 8029b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8029b9e:	69ba      	ldr	r2, [r7, #24]
 8029ba0:	4313      	orrs	r3, r2
 8029ba2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8029ba4:	687b      	ldr	r3, [r7, #4]
 8029ba6:	69ba      	ldr	r2, [r7, #24]
 8029ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8029baa:	683b      	ldr	r3, [r7, #0]
 8029bac:	685b      	ldr	r3, [r3, #4]
 8029bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8029bb2:	2b00      	cmp	r3, #0
 8029bb4:	f000 80e0 	beq.w	8029d78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029bb8:	4b2f      	ldr	r3, [pc, #188]	; (8029c78 <HAL_GPIO_Init+0x238>)
 8029bba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029bbe:	4a2e      	ldr	r2, [pc, #184]	; (8029c78 <HAL_GPIO_Init+0x238>)
 8029bc0:	f043 0302 	orr.w	r3, r3, #2
 8029bc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8029bc8:	4b2b      	ldr	r3, [pc, #172]	; (8029c78 <HAL_GPIO_Init+0x238>)
 8029bca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029bce:	f003 0302 	and.w	r3, r3, #2
 8029bd2:	60fb      	str	r3, [r7, #12]
 8029bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8029bd6:	4a29      	ldr	r2, [pc, #164]	; (8029c7c <HAL_GPIO_Init+0x23c>)
 8029bd8:	69fb      	ldr	r3, [r7, #28]
 8029bda:	089b      	lsrs	r3, r3, #2
 8029bdc:	3302      	adds	r3, #2
 8029bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8029be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8029be4:	69fb      	ldr	r3, [r7, #28]
 8029be6:	f003 0303 	and.w	r3, r3, #3
 8029bea:	009b      	lsls	r3, r3, #2
 8029bec:	220f      	movs	r2, #15
 8029bee:	fa02 f303 	lsl.w	r3, r2, r3
 8029bf2:	43db      	mvns	r3, r3
 8029bf4:	69ba      	ldr	r2, [r7, #24]
 8029bf6:	4013      	ands	r3, r2
 8029bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8029bfa:	687b      	ldr	r3, [r7, #4]
 8029bfc:	4a20      	ldr	r2, [pc, #128]	; (8029c80 <HAL_GPIO_Init+0x240>)
 8029bfe:	4293      	cmp	r3, r2
 8029c00:	d052      	beq.n	8029ca8 <HAL_GPIO_Init+0x268>
 8029c02:	687b      	ldr	r3, [r7, #4]
 8029c04:	4a1f      	ldr	r2, [pc, #124]	; (8029c84 <HAL_GPIO_Init+0x244>)
 8029c06:	4293      	cmp	r3, r2
 8029c08:	d031      	beq.n	8029c6e <HAL_GPIO_Init+0x22e>
 8029c0a:	687b      	ldr	r3, [r7, #4]
 8029c0c:	4a1e      	ldr	r2, [pc, #120]	; (8029c88 <HAL_GPIO_Init+0x248>)
 8029c0e:	4293      	cmp	r3, r2
 8029c10:	d02b      	beq.n	8029c6a <HAL_GPIO_Init+0x22a>
 8029c12:	687b      	ldr	r3, [r7, #4]
 8029c14:	4a1d      	ldr	r2, [pc, #116]	; (8029c8c <HAL_GPIO_Init+0x24c>)
 8029c16:	4293      	cmp	r3, r2
 8029c18:	d025      	beq.n	8029c66 <HAL_GPIO_Init+0x226>
 8029c1a:	687b      	ldr	r3, [r7, #4]
 8029c1c:	4a1c      	ldr	r2, [pc, #112]	; (8029c90 <HAL_GPIO_Init+0x250>)
 8029c1e:	4293      	cmp	r3, r2
 8029c20:	d01f      	beq.n	8029c62 <HAL_GPIO_Init+0x222>
 8029c22:	687b      	ldr	r3, [r7, #4]
 8029c24:	4a1b      	ldr	r2, [pc, #108]	; (8029c94 <HAL_GPIO_Init+0x254>)
 8029c26:	4293      	cmp	r3, r2
 8029c28:	d019      	beq.n	8029c5e <HAL_GPIO_Init+0x21e>
 8029c2a:	687b      	ldr	r3, [r7, #4]
 8029c2c:	4a1a      	ldr	r2, [pc, #104]	; (8029c98 <HAL_GPIO_Init+0x258>)
 8029c2e:	4293      	cmp	r3, r2
 8029c30:	d013      	beq.n	8029c5a <HAL_GPIO_Init+0x21a>
 8029c32:	687b      	ldr	r3, [r7, #4]
 8029c34:	4a19      	ldr	r2, [pc, #100]	; (8029c9c <HAL_GPIO_Init+0x25c>)
 8029c36:	4293      	cmp	r3, r2
 8029c38:	d00d      	beq.n	8029c56 <HAL_GPIO_Init+0x216>
 8029c3a:	687b      	ldr	r3, [r7, #4]
 8029c3c:	4a18      	ldr	r2, [pc, #96]	; (8029ca0 <HAL_GPIO_Init+0x260>)
 8029c3e:	4293      	cmp	r3, r2
 8029c40:	d007      	beq.n	8029c52 <HAL_GPIO_Init+0x212>
 8029c42:	687b      	ldr	r3, [r7, #4]
 8029c44:	4a17      	ldr	r2, [pc, #92]	; (8029ca4 <HAL_GPIO_Init+0x264>)
 8029c46:	4293      	cmp	r3, r2
 8029c48:	d101      	bne.n	8029c4e <HAL_GPIO_Init+0x20e>
 8029c4a:	2309      	movs	r3, #9
 8029c4c:	e02d      	b.n	8029caa <HAL_GPIO_Init+0x26a>
 8029c4e:	230a      	movs	r3, #10
 8029c50:	e02b      	b.n	8029caa <HAL_GPIO_Init+0x26a>
 8029c52:	2308      	movs	r3, #8
 8029c54:	e029      	b.n	8029caa <HAL_GPIO_Init+0x26a>
 8029c56:	2307      	movs	r3, #7
 8029c58:	e027      	b.n	8029caa <HAL_GPIO_Init+0x26a>
 8029c5a:	2306      	movs	r3, #6
 8029c5c:	e025      	b.n	8029caa <HAL_GPIO_Init+0x26a>
 8029c5e:	2305      	movs	r3, #5
 8029c60:	e023      	b.n	8029caa <HAL_GPIO_Init+0x26a>
 8029c62:	2304      	movs	r3, #4
 8029c64:	e021      	b.n	8029caa <HAL_GPIO_Init+0x26a>
 8029c66:	2303      	movs	r3, #3
 8029c68:	e01f      	b.n	8029caa <HAL_GPIO_Init+0x26a>
 8029c6a:	2302      	movs	r3, #2
 8029c6c:	e01d      	b.n	8029caa <HAL_GPIO_Init+0x26a>
 8029c6e:	2301      	movs	r3, #1
 8029c70:	e01b      	b.n	8029caa <HAL_GPIO_Init+0x26a>
 8029c72:	bf00      	nop
 8029c74:	58000080 	.word	0x58000080
 8029c78:	58024400 	.word	0x58024400
 8029c7c:	58000400 	.word	0x58000400
 8029c80:	58020000 	.word	0x58020000
 8029c84:	58020400 	.word	0x58020400
 8029c88:	58020800 	.word	0x58020800
 8029c8c:	58020c00 	.word	0x58020c00
 8029c90:	58021000 	.word	0x58021000
 8029c94:	58021400 	.word	0x58021400
 8029c98:	58021800 	.word	0x58021800
 8029c9c:	58021c00 	.word	0x58021c00
 8029ca0:	58022000 	.word	0x58022000
 8029ca4:	58022400 	.word	0x58022400
 8029ca8:	2300      	movs	r3, #0
 8029caa:	69fa      	ldr	r2, [r7, #28]
 8029cac:	f002 0203 	and.w	r2, r2, #3
 8029cb0:	0092      	lsls	r2, r2, #2
 8029cb2:	4093      	lsls	r3, r2
 8029cb4:	69ba      	ldr	r2, [r7, #24]
 8029cb6:	4313      	orrs	r3, r2
 8029cb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8029cba:	4938      	ldr	r1, [pc, #224]	; (8029d9c <HAL_GPIO_Init+0x35c>)
 8029cbc:	69fb      	ldr	r3, [r7, #28]
 8029cbe:	089b      	lsrs	r3, r3, #2
 8029cc0:	3302      	adds	r3, #2
 8029cc2:	69ba      	ldr	r2, [r7, #24]
 8029cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8029cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8029ccc:	681b      	ldr	r3, [r3, #0]
 8029cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8029cd0:	693b      	ldr	r3, [r7, #16]
 8029cd2:	43db      	mvns	r3, r3
 8029cd4:	69ba      	ldr	r2, [r7, #24]
 8029cd6:	4013      	ands	r3, r2
 8029cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8029cda:	683b      	ldr	r3, [r7, #0]
 8029cdc:	685b      	ldr	r3, [r3, #4]
 8029cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029ce2:	2b00      	cmp	r3, #0
 8029ce4:	d003      	beq.n	8029cee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8029ce6:	69ba      	ldr	r2, [r7, #24]
 8029ce8:	693b      	ldr	r3, [r7, #16]
 8029cea:	4313      	orrs	r3, r2
 8029cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8029cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8029cf2:	69bb      	ldr	r3, [r7, #24]
 8029cf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8029cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8029cfa:	685b      	ldr	r3, [r3, #4]
 8029cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8029cfe:	693b      	ldr	r3, [r7, #16]
 8029d00:	43db      	mvns	r3, r3
 8029d02:	69ba      	ldr	r2, [r7, #24]
 8029d04:	4013      	ands	r3, r2
 8029d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8029d08:	683b      	ldr	r3, [r7, #0]
 8029d0a:	685b      	ldr	r3, [r3, #4]
 8029d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8029d10:	2b00      	cmp	r3, #0
 8029d12:	d003      	beq.n	8029d1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8029d14:	69ba      	ldr	r2, [r7, #24]
 8029d16:	693b      	ldr	r3, [r7, #16]
 8029d18:	4313      	orrs	r3, r2
 8029d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8029d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8029d20:	69bb      	ldr	r3, [r7, #24]
 8029d22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8029d24:	697b      	ldr	r3, [r7, #20]
 8029d26:	685b      	ldr	r3, [r3, #4]
 8029d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8029d2a:	693b      	ldr	r3, [r7, #16]
 8029d2c:	43db      	mvns	r3, r3
 8029d2e:	69ba      	ldr	r2, [r7, #24]
 8029d30:	4013      	ands	r3, r2
 8029d32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8029d34:	683b      	ldr	r3, [r7, #0]
 8029d36:	685b      	ldr	r3, [r3, #4]
 8029d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029d3c:	2b00      	cmp	r3, #0
 8029d3e:	d003      	beq.n	8029d48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8029d40:	69ba      	ldr	r2, [r7, #24]
 8029d42:	693b      	ldr	r3, [r7, #16]
 8029d44:	4313      	orrs	r3, r2
 8029d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8029d48:	697b      	ldr	r3, [r7, #20]
 8029d4a:	69ba      	ldr	r2, [r7, #24]
 8029d4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8029d4e:	697b      	ldr	r3, [r7, #20]
 8029d50:	681b      	ldr	r3, [r3, #0]
 8029d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8029d54:	693b      	ldr	r3, [r7, #16]
 8029d56:	43db      	mvns	r3, r3
 8029d58:	69ba      	ldr	r2, [r7, #24]
 8029d5a:	4013      	ands	r3, r2
 8029d5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8029d5e:	683b      	ldr	r3, [r7, #0]
 8029d60:	685b      	ldr	r3, [r3, #4]
 8029d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8029d66:	2b00      	cmp	r3, #0
 8029d68:	d003      	beq.n	8029d72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8029d6a:	69ba      	ldr	r2, [r7, #24]
 8029d6c:	693b      	ldr	r3, [r7, #16]
 8029d6e:	4313      	orrs	r3, r2
 8029d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8029d72:	697b      	ldr	r3, [r7, #20]
 8029d74:	69ba      	ldr	r2, [r7, #24]
 8029d76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8029d78:	69fb      	ldr	r3, [r7, #28]
 8029d7a:	3301      	adds	r3, #1
 8029d7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8029d7e:	683b      	ldr	r3, [r7, #0]
 8029d80:	681a      	ldr	r2, [r3, #0]
 8029d82:	69fb      	ldr	r3, [r7, #28]
 8029d84:	fa22 f303 	lsr.w	r3, r2, r3
 8029d88:	2b00      	cmp	r3, #0
 8029d8a:	f47f ae63 	bne.w	8029a54 <HAL_GPIO_Init+0x14>
  }
}
 8029d8e:	bf00      	nop
 8029d90:	bf00      	nop
 8029d92:	3724      	adds	r7, #36	; 0x24
 8029d94:	46bd      	mov	sp, r7
 8029d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d9a:	4770      	bx	lr
 8029d9c:	58000400 	.word	0x58000400

08029da0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8029da0:	b480      	push	{r7}
 8029da2:	b087      	sub	sp, #28
 8029da4:	af00      	add	r7, sp, #0
 8029da6:	6078      	str	r0, [r7, #4]
 8029da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8029daa:	2300      	movs	r3, #0
 8029dac:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8029dae:	4b75      	ldr	r3, [pc, #468]	; (8029f84 <HAL_GPIO_DeInit+0x1e4>)
 8029db0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8029db2:	e0d9      	b.n	8029f68 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8029db4:	2201      	movs	r2, #1
 8029db6:	697b      	ldr	r3, [r7, #20]
 8029db8:	fa02 f303 	lsl.w	r3, r2, r3
 8029dbc:	683a      	ldr	r2, [r7, #0]
 8029dbe:	4013      	ands	r3, r2
 8029dc0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8029dc2:	68fb      	ldr	r3, [r7, #12]
 8029dc4:	2b00      	cmp	r3, #0
 8029dc6:	f000 80cc 	beq.w	8029f62 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8029dca:	4a6f      	ldr	r2, [pc, #444]	; (8029f88 <HAL_GPIO_DeInit+0x1e8>)
 8029dcc:	697b      	ldr	r3, [r7, #20]
 8029dce:	089b      	lsrs	r3, r3, #2
 8029dd0:	3302      	adds	r3, #2
 8029dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8029dd6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8029dd8:	697b      	ldr	r3, [r7, #20]
 8029dda:	f003 0303 	and.w	r3, r3, #3
 8029dde:	009b      	lsls	r3, r3, #2
 8029de0:	220f      	movs	r2, #15
 8029de2:	fa02 f303 	lsl.w	r3, r2, r3
 8029de6:	68ba      	ldr	r2, [r7, #8]
 8029de8:	4013      	ands	r3, r2
 8029dea:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8029dec:	687b      	ldr	r3, [r7, #4]
 8029dee:	4a67      	ldr	r2, [pc, #412]	; (8029f8c <HAL_GPIO_DeInit+0x1ec>)
 8029df0:	4293      	cmp	r3, r2
 8029df2:	d037      	beq.n	8029e64 <HAL_GPIO_DeInit+0xc4>
 8029df4:	687b      	ldr	r3, [r7, #4]
 8029df6:	4a66      	ldr	r2, [pc, #408]	; (8029f90 <HAL_GPIO_DeInit+0x1f0>)
 8029df8:	4293      	cmp	r3, r2
 8029dfa:	d031      	beq.n	8029e60 <HAL_GPIO_DeInit+0xc0>
 8029dfc:	687b      	ldr	r3, [r7, #4]
 8029dfe:	4a65      	ldr	r2, [pc, #404]	; (8029f94 <HAL_GPIO_DeInit+0x1f4>)
 8029e00:	4293      	cmp	r3, r2
 8029e02:	d02b      	beq.n	8029e5c <HAL_GPIO_DeInit+0xbc>
 8029e04:	687b      	ldr	r3, [r7, #4]
 8029e06:	4a64      	ldr	r2, [pc, #400]	; (8029f98 <HAL_GPIO_DeInit+0x1f8>)
 8029e08:	4293      	cmp	r3, r2
 8029e0a:	d025      	beq.n	8029e58 <HAL_GPIO_DeInit+0xb8>
 8029e0c:	687b      	ldr	r3, [r7, #4]
 8029e0e:	4a63      	ldr	r2, [pc, #396]	; (8029f9c <HAL_GPIO_DeInit+0x1fc>)
 8029e10:	4293      	cmp	r3, r2
 8029e12:	d01f      	beq.n	8029e54 <HAL_GPIO_DeInit+0xb4>
 8029e14:	687b      	ldr	r3, [r7, #4]
 8029e16:	4a62      	ldr	r2, [pc, #392]	; (8029fa0 <HAL_GPIO_DeInit+0x200>)
 8029e18:	4293      	cmp	r3, r2
 8029e1a:	d019      	beq.n	8029e50 <HAL_GPIO_DeInit+0xb0>
 8029e1c:	687b      	ldr	r3, [r7, #4]
 8029e1e:	4a61      	ldr	r2, [pc, #388]	; (8029fa4 <HAL_GPIO_DeInit+0x204>)
 8029e20:	4293      	cmp	r3, r2
 8029e22:	d013      	beq.n	8029e4c <HAL_GPIO_DeInit+0xac>
 8029e24:	687b      	ldr	r3, [r7, #4]
 8029e26:	4a60      	ldr	r2, [pc, #384]	; (8029fa8 <HAL_GPIO_DeInit+0x208>)
 8029e28:	4293      	cmp	r3, r2
 8029e2a:	d00d      	beq.n	8029e48 <HAL_GPIO_DeInit+0xa8>
 8029e2c:	687b      	ldr	r3, [r7, #4]
 8029e2e:	4a5f      	ldr	r2, [pc, #380]	; (8029fac <HAL_GPIO_DeInit+0x20c>)
 8029e30:	4293      	cmp	r3, r2
 8029e32:	d007      	beq.n	8029e44 <HAL_GPIO_DeInit+0xa4>
 8029e34:	687b      	ldr	r3, [r7, #4]
 8029e36:	4a5e      	ldr	r2, [pc, #376]	; (8029fb0 <HAL_GPIO_DeInit+0x210>)
 8029e38:	4293      	cmp	r3, r2
 8029e3a:	d101      	bne.n	8029e40 <HAL_GPIO_DeInit+0xa0>
 8029e3c:	2309      	movs	r3, #9
 8029e3e:	e012      	b.n	8029e66 <HAL_GPIO_DeInit+0xc6>
 8029e40:	230a      	movs	r3, #10
 8029e42:	e010      	b.n	8029e66 <HAL_GPIO_DeInit+0xc6>
 8029e44:	2308      	movs	r3, #8
 8029e46:	e00e      	b.n	8029e66 <HAL_GPIO_DeInit+0xc6>
 8029e48:	2307      	movs	r3, #7
 8029e4a:	e00c      	b.n	8029e66 <HAL_GPIO_DeInit+0xc6>
 8029e4c:	2306      	movs	r3, #6
 8029e4e:	e00a      	b.n	8029e66 <HAL_GPIO_DeInit+0xc6>
 8029e50:	2305      	movs	r3, #5
 8029e52:	e008      	b.n	8029e66 <HAL_GPIO_DeInit+0xc6>
 8029e54:	2304      	movs	r3, #4
 8029e56:	e006      	b.n	8029e66 <HAL_GPIO_DeInit+0xc6>
 8029e58:	2303      	movs	r3, #3
 8029e5a:	e004      	b.n	8029e66 <HAL_GPIO_DeInit+0xc6>
 8029e5c:	2302      	movs	r3, #2
 8029e5e:	e002      	b.n	8029e66 <HAL_GPIO_DeInit+0xc6>
 8029e60:	2301      	movs	r3, #1
 8029e62:	e000      	b.n	8029e66 <HAL_GPIO_DeInit+0xc6>
 8029e64:	2300      	movs	r3, #0
 8029e66:	697a      	ldr	r2, [r7, #20]
 8029e68:	f002 0203 	and.w	r2, r2, #3
 8029e6c:	0092      	lsls	r2, r2, #2
 8029e6e:	4093      	lsls	r3, r2
 8029e70:	68ba      	ldr	r2, [r7, #8]
 8029e72:	429a      	cmp	r2, r3
 8029e74:	d136      	bne.n	8029ee4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8029e76:	693b      	ldr	r3, [r7, #16]
 8029e78:	681a      	ldr	r2, [r3, #0]
 8029e7a:	68fb      	ldr	r3, [r7, #12]
 8029e7c:	43db      	mvns	r3, r3
 8029e7e:	401a      	ands	r2, r3
 8029e80:	693b      	ldr	r3, [r7, #16]
 8029e82:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8029e84:	693b      	ldr	r3, [r7, #16]
 8029e86:	685a      	ldr	r2, [r3, #4]
 8029e88:	68fb      	ldr	r3, [r7, #12]
 8029e8a:	43db      	mvns	r3, r3
 8029e8c:	401a      	ands	r2, r3
 8029e8e:	693b      	ldr	r3, [r7, #16]
 8029e90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8029e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8029e96:	685a      	ldr	r2, [r3, #4]
 8029e98:	68fb      	ldr	r3, [r7, #12]
 8029e9a:	43db      	mvns	r3, r3
 8029e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8029ea0:	4013      	ands	r3, r2
 8029ea2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8029ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8029ea8:	681a      	ldr	r2, [r3, #0]
 8029eaa:	68fb      	ldr	r3, [r7, #12]
 8029eac:	43db      	mvns	r3, r3
 8029eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8029eb2:	4013      	ands	r3, r2
 8029eb4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8029eb6:	697b      	ldr	r3, [r7, #20]
 8029eb8:	f003 0303 	and.w	r3, r3, #3
 8029ebc:	009b      	lsls	r3, r3, #2
 8029ebe:	220f      	movs	r2, #15
 8029ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8029ec4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8029ec6:	4a30      	ldr	r2, [pc, #192]	; (8029f88 <HAL_GPIO_DeInit+0x1e8>)
 8029ec8:	697b      	ldr	r3, [r7, #20]
 8029eca:	089b      	lsrs	r3, r3, #2
 8029ecc:	3302      	adds	r3, #2
 8029ece:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8029ed2:	68bb      	ldr	r3, [r7, #8]
 8029ed4:	43da      	mvns	r2, r3
 8029ed6:	482c      	ldr	r0, [pc, #176]	; (8029f88 <HAL_GPIO_DeInit+0x1e8>)
 8029ed8:	697b      	ldr	r3, [r7, #20]
 8029eda:	089b      	lsrs	r3, r3, #2
 8029edc:	400a      	ands	r2, r1
 8029ede:	3302      	adds	r3, #2
 8029ee0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8029ee4:	687b      	ldr	r3, [r7, #4]
 8029ee6:	681a      	ldr	r2, [r3, #0]
 8029ee8:	697b      	ldr	r3, [r7, #20]
 8029eea:	005b      	lsls	r3, r3, #1
 8029eec:	2103      	movs	r1, #3
 8029eee:	fa01 f303 	lsl.w	r3, r1, r3
 8029ef2:	431a      	orrs	r2, r3
 8029ef4:	687b      	ldr	r3, [r7, #4]
 8029ef6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8029ef8:	697b      	ldr	r3, [r7, #20]
 8029efa:	08da      	lsrs	r2, r3, #3
 8029efc:	687b      	ldr	r3, [r7, #4]
 8029efe:	3208      	adds	r2, #8
 8029f00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8029f04:	697b      	ldr	r3, [r7, #20]
 8029f06:	f003 0307 	and.w	r3, r3, #7
 8029f0a:	009b      	lsls	r3, r3, #2
 8029f0c:	220f      	movs	r2, #15
 8029f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8029f12:	43db      	mvns	r3, r3
 8029f14:	697a      	ldr	r2, [r7, #20]
 8029f16:	08d2      	lsrs	r2, r2, #3
 8029f18:	4019      	ands	r1, r3
 8029f1a:	687b      	ldr	r3, [r7, #4]
 8029f1c:	3208      	adds	r2, #8
 8029f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8029f22:	687b      	ldr	r3, [r7, #4]
 8029f24:	68da      	ldr	r2, [r3, #12]
 8029f26:	697b      	ldr	r3, [r7, #20]
 8029f28:	005b      	lsls	r3, r3, #1
 8029f2a:	2103      	movs	r1, #3
 8029f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8029f30:	43db      	mvns	r3, r3
 8029f32:	401a      	ands	r2, r3
 8029f34:	687b      	ldr	r3, [r7, #4]
 8029f36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8029f38:	687b      	ldr	r3, [r7, #4]
 8029f3a:	685a      	ldr	r2, [r3, #4]
 8029f3c:	2101      	movs	r1, #1
 8029f3e:	697b      	ldr	r3, [r7, #20]
 8029f40:	fa01 f303 	lsl.w	r3, r1, r3
 8029f44:	43db      	mvns	r3, r3
 8029f46:	401a      	ands	r2, r3
 8029f48:	687b      	ldr	r3, [r7, #4]
 8029f4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8029f4c:	687b      	ldr	r3, [r7, #4]
 8029f4e:	689a      	ldr	r2, [r3, #8]
 8029f50:	697b      	ldr	r3, [r7, #20]
 8029f52:	005b      	lsls	r3, r3, #1
 8029f54:	2103      	movs	r1, #3
 8029f56:	fa01 f303 	lsl.w	r3, r1, r3
 8029f5a:	43db      	mvns	r3, r3
 8029f5c:	401a      	ands	r2, r3
 8029f5e:	687b      	ldr	r3, [r7, #4]
 8029f60:	609a      	str	r2, [r3, #8]
    }

    position++;
 8029f62:	697b      	ldr	r3, [r7, #20]
 8029f64:	3301      	adds	r3, #1
 8029f66:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8029f68:	683a      	ldr	r2, [r7, #0]
 8029f6a:	697b      	ldr	r3, [r7, #20]
 8029f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8029f70:	2b00      	cmp	r3, #0
 8029f72:	f47f af1f 	bne.w	8029db4 <HAL_GPIO_DeInit+0x14>
  }
}
 8029f76:	bf00      	nop
 8029f78:	bf00      	nop
 8029f7a:	371c      	adds	r7, #28
 8029f7c:	46bd      	mov	sp, r7
 8029f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f82:	4770      	bx	lr
 8029f84:	58000080 	.word	0x58000080
 8029f88:	58000400 	.word	0x58000400
 8029f8c:	58020000 	.word	0x58020000
 8029f90:	58020400 	.word	0x58020400
 8029f94:	58020800 	.word	0x58020800
 8029f98:	58020c00 	.word	0x58020c00
 8029f9c:	58021000 	.word	0x58021000
 8029fa0:	58021400 	.word	0x58021400
 8029fa4:	58021800 	.word	0x58021800
 8029fa8:	58021c00 	.word	0x58021c00
 8029fac:	58022000 	.word	0x58022000
 8029fb0:	58022400 	.word	0x58022400

08029fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8029fb4:	b480      	push	{r7}
 8029fb6:	b085      	sub	sp, #20
 8029fb8:	af00      	add	r7, sp, #0
 8029fba:	6078      	str	r0, [r7, #4]
 8029fbc:	460b      	mov	r3, r1
 8029fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8029fc0:	687b      	ldr	r3, [r7, #4]
 8029fc2:	691a      	ldr	r2, [r3, #16]
 8029fc4:	887b      	ldrh	r3, [r7, #2]
 8029fc6:	4013      	ands	r3, r2
 8029fc8:	2b00      	cmp	r3, #0
 8029fca:	d002      	beq.n	8029fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8029fcc:	2301      	movs	r3, #1
 8029fce:	73fb      	strb	r3, [r7, #15]
 8029fd0:	e001      	b.n	8029fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8029fd2:	2300      	movs	r3, #0
 8029fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8029fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8029fd8:	4618      	mov	r0, r3
 8029fda:	3714      	adds	r7, #20
 8029fdc:	46bd      	mov	sp, r7
 8029fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fe2:	4770      	bx	lr

08029fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8029fe4:	b480      	push	{r7}
 8029fe6:	b083      	sub	sp, #12
 8029fe8:	af00      	add	r7, sp, #0
 8029fea:	6078      	str	r0, [r7, #4]
 8029fec:	460b      	mov	r3, r1
 8029fee:	807b      	strh	r3, [r7, #2]
 8029ff0:	4613      	mov	r3, r2
 8029ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8029ff4:	787b      	ldrb	r3, [r7, #1]
 8029ff6:	2b00      	cmp	r3, #0
 8029ff8:	d003      	beq.n	802a002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8029ffa:	887a      	ldrh	r2, [r7, #2]
 8029ffc:	687b      	ldr	r3, [r7, #4]
 8029ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 802a000:	e003      	b.n	802a00a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802a002:	887b      	ldrh	r3, [r7, #2]
 802a004:	041a      	lsls	r2, r3, #16
 802a006:	687b      	ldr	r3, [r7, #4]
 802a008:	619a      	str	r2, [r3, #24]
}
 802a00a:	bf00      	nop
 802a00c:	370c      	adds	r7, #12
 802a00e:	46bd      	mov	sp, r7
 802a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a014:	4770      	bx	lr

0802a016 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 802a016:	b480      	push	{r7}
 802a018:	b085      	sub	sp, #20
 802a01a:	af00      	add	r7, sp, #0
 802a01c:	6078      	str	r0, [r7, #4]
 802a01e:	460b      	mov	r3, r1
 802a020:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 802a022:	687b      	ldr	r3, [r7, #4]
 802a024:	695b      	ldr	r3, [r3, #20]
 802a026:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 802a028:	887a      	ldrh	r2, [r7, #2]
 802a02a:	68fb      	ldr	r3, [r7, #12]
 802a02c:	4013      	ands	r3, r2
 802a02e:	041a      	lsls	r2, r3, #16
 802a030:	68fb      	ldr	r3, [r7, #12]
 802a032:	43d9      	mvns	r1, r3
 802a034:	887b      	ldrh	r3, [r7, #2]
 802a036:	400b      	ands	r3, r1
 802a038:	431a      	orrs	r2, r3
 802a03a:	687b      	ldr	r3, [r7, #4]
 802a03c:	619a      	str	r2, [r3, #24]
}
 802a03e:	bf00      	nop
 802a040:	3714      	adds	r7, #20
 802a042:	46bd      	mov	sp, r7
 802a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a048:	4770      	bx	lr
	...

0802a04c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 802a04c:	b480      	push	{r7}
 802a04e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 802a050:	4b05      	ldr	r3, [pc, #20]	; (802a068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 802a052:	681b      	ldr	r3, [r3, #0]
 802a054:	4a04      	ldr	r2, [pc, #16]	; (802a068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 802a056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a05a:	6013      	str	r3, [r2, #0]
}
 802a05c:	bf00      	nop
 802a05e:	46bd      	mov	sp, r7
 802a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a064:	4770      	bx	lr
 802a066:	bf00      	nop
 802a068:	58024800 	.word	0x58024800

0802a06c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 802a06c:	b580      	push	{r7, lr}
 802a06e:	b084      	sub	sp, #16
 802a070:	af00      	add	r7, sp, #0
 802a072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 802a074:	4b19      	ldr	r3, [pc, #100]	; (802a0dc <HAL_PWREx_ConfigSupply+0x70>)
 802a076:	68db      	ldr	r3, [r3, #12]
 802a078:	f003 0304 	and.w	r3, r3, #4
 802a07c:	2b04      	cmp	r3, #4
 802a07e:	d00a      	beq.n	802a096 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 802a080:	4b16      	ldr	r3, [pc, #88]	; (802a0dc <HAL_PWREx_ConfigSupply+0x70>)
 802a082:	68db      	ldr	r3, [r3, #12]
 802a084:	f003 0307 	and.w	r3, r3, #7
 802a088:	687a      	ldr	r2, [r7, #4]
 802a08a:	429a      	cmp	r2, r3
 802a08c:	d001      	beq.n	802a092 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 802a08e:	2301      	movs	r3, #1
 802a090:	e01f      	b.n	802a0d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 802a092:	2300      	movs	r3, #0
 802a094:	e01d      	b.n	802a0d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 802a096:	4b11      	ldr	r3, [pc, #68]	; (802a0dc <HAL_PWREx_ConfigSupply+0x70>)
 802a098:	68db      	ldr	r3, [r3, #12]
 802a09a:	f023 0207 	bic.w	r2, r3, #7
 802a09e:	490f      	ldr	r1, [pc, #60]	; (802a0dc <HAL_PWREx_ConfigSupply+0x70>)
 802a0a0:	687b      	ldr	r3, [r7, #4]
 802a0a2:	4313      	orrs	r3, r2
 802a0a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 802a0a6:	f7ff fb03 	bl	80296b0 <HAL_GetTick>
 802a0aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 802a0ac:	e009      	b.n	802a0c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 802a0ae:	f7ff faff 	bl	80296b0 <HAL_GetTick>
 802a0b2:	4602      	mov	r2, r0
 802a0b4:	68fb      	ldr	r3, [r7, #12]
 802a0b6:	1ad3      	subs	r3, r2, r3
 802a0b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802a0bc:	d901      	bls.n	802a0c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 802a0be:	2301      	movs	r3, #1
 802a0c0:	e007      	b.n	802a0d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 802a0c2:	4b06      	ldr	r3, [pc, #24]	; (802a0dc <HAL_PWREx_ConfigSupply+0x70>)
 802a0c4:	685b      	ldr	r3, [r3, #4]
 802a0c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802a0ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802a0ce:	d1ee      	bne.n	802a0ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 802a0d0:	2300      	movs	r3, #0
}
 802a0d2:	4618      	mov	r0, r3
 802a0d4:	3710      	adds	r7, #16
 802a0d6:	46bd      	mov	sp, r7
 802a0d8:	bd80      	pop	{r7, pc}
 802a0da:	bf00      	nop
 802a0dc:	58024800 	.word	0x58024800

0802a0e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802a0e0:	b580      	push	{r7, lr}
 802a0e2:	b08c      	sub	sp, #48	; 0x30
 802a0e4:	af00      	add	r7, sp, #0
 802a0e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 802a0e8:	687b      	ldr	r3, [r7, #4]
 802a0ea:	2b00      	cmp	r3, #0
 802a0ec:	d102      	bne.n	802a0f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 802a0ee:	2301      	movs	r3, #1
 802a0f0:	f000 bc48 	b.w	802a984 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802a0f4:	687b      	ldr	r3, [r7, #4]
 802a0f6:	681b      	ldr	r3, [r3, #0]
 802a0f8:	f003 0301 	and.w	r3, r3, #1
 802a0fc:	2b00      	cmp	r3, #0
 802a0fe:	f000 8088 	beq.w	802a212 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802a102:	4b99      	ldr	r3, [pc, #612]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a104:	691b      	ldr	r3, [r3, #16]
 802a106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a10a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802a10c:	4b96      	ldr	r3, [pc, #600]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a110:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 802a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a114:	2b10      	cmp	r3, #16
 802a116:	d007      	beq.n	802a128 <HAL_RCC_OscConfig+0x48>
 802a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a11a:	2b18      	cmp	r3, #24
 802a11c:	d111      	bne.n	802a142 <HAL_RCC_OscConfig+0x62>
 802a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a120:	f003 0303 	and.w	r3, r3, #3
 802a124:	2b02      	cmp	r3, #2
 802a126:	d10c      	bne.n	802a142 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802a128:	4b8f      	ldr	r3, [pc, #572]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a12a:	681b      	ldr	r3, [r3, #0]
 802a12c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a130:	2b00      	cmp	r3, #0
 802a132:	d06d      	beq.n	802a210 <HAL_RCC_OscConfig+0x130>
 802a134:	687b      	ldr	r3, [r7, #4]
 802a136:	685b      	ldr	r3, [r3, #4]
 802a138:	2b00      	cmp	r3, #0
 802a13a:	d169      	bne.n	802a210 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 802a13c:	2301      	movs	r3, #1
 802a13e:	f000 bc21 	b.w	802a984 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802a142:	687b      	ldr	r3, [r7, #4]
 802a144:	685b      	ldr	r3, [r3, #4]
 802a146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802a14a:	d106      	bne.n	802a15a <HAL_RCC_OscConfig+0x7a>
 802a14c:	4b86      	ldr	r3, [pc, #536]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a14e:	681b      	ldr	r3, [r3, #0]
 802a150:	4a85      	ldr	r2, [pc, #532]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a156:	6013      	str	r3, [r2, #0]
 802a158:	e02e      	b.n	802a1b8 <HAL_RCC_OscConfig+0xd8>
 802a15a:	687b      	ldr	r3, [r7, #4]
 802a15c:	685b      	ldr	r3, [r3, #4]
 802a15e:	2b00      	cmp	r3, #0
 802a160:	d10c      	bne.n	802a17c <HAL_RCC_OscConfig+0x9c>
 802a162:	4b81      	ldr	r3, [pc, #516]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a164:	681b      	ldr	r3, [r3, #0]
 802a166:	4a80      	ldr	r2, [pc, #512]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802a16c:	6013      	str	r3, [r2, #0]
 802a16e:	4b7e      	ldr	r3, [pc, #504]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a170:	681b      	ldr	r3, [r3, #0]
 802a172:	4a7d      	ldr	r2, [pc, #500]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a178:	6013      	str	r3, [r2, #0]
 802a17a:	e01d      	b.n	802a1b8 <HAL_RCC_OscConfig+0xd8>
 802a17c:	687b      	ldr	r3, [r7, #4]
 802a17e:	685b      	ldr	r3, [r3, #4]
 802a180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802a184:	d10c      	bne.n	802a1a0 <HAL_RCC_OscConfig+0xc0>
 802a186:	4b78      	ldr	r3, [pc, #480]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a188:	681b      	ldr	r3, [r3, #0]
 802a18a:	4a77      	ldr	r2, [pc, #476]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a18c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802a190:	6013      	str	r3, [r2, #0]
 802a192:	4b75      	ldr	r3, [pc, #468]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a194:	681b      	ldr	r3, [r3, #0]
 802a196:	4a74      	ldr	r2, [pc, #464]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a19c:	6013      	str	r3, [r2, #0]
 802a19e:	e00b      	b.n	802a1b8 <HAL_RCC_OscConfig+0xd8>
 802a1a0:	4b71      	ldr	r3, [pc, #452]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a1a2:	681b      	ldr	r3, [r3, #0]
 802a1a4:	4a70      	ldr	r2, [pc, #448]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a1a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802a1aa:	6013      	str	r3, [r2, #0]
 802a1ac:	4b6e      	ldr	r3, [pc, #440]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a1ae:	681b      	ldr	r3, [r3, #0]
 802a1b0:	4a6d      	ldr	r2, [pc, #436]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a1b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a1b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 802a1b8:	687b      	ldr	r3, [r7, #4]
 802a1ba:	685b      	ldr	r3, [r3, #4]
 802a1bc:	2b00      	cmp	r3, #0
 802a1be:	d013      	beq.n	802a1e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a1c0:	f7ff fa76 	bl	80296b0 <HAL_GetTick>
 802a1c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802a1c6:	e008      	b.n	802a1da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802a1c8:	f7ff fa72 	bl	80296b0 <HAL_GetTick>
 802a1cc:	4602      	mov	r2, r0
 802a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1d0:	1ad3      	subs	r3, r2, r3
 802a1d2:	2b64      	cmp	r3, #100	; 0x64
 802a1d4:	d901      	bls.n	802a1da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802a1d6:	2303      	movs	r3, #3
 802a1d8:	e3d4      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802a1da:	4b63      	ldr	r3, [pc, #396]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a1dc:	681b      	ldr	r3, [r3, #0]
 802a1de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a1e2:	2b00      	cmp	r3, #0
 802a1e4:	d0f0      	beq.n	802a1c8 <HAL_RCC_OscConfig+0xe8>
 802a1e6:	e014      	b.n	802a212 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a1e8:	f7ff fa62 	bl	80296b0 <HAL_GetTick>
 802a1ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 802a1ee:	e008      	b.n	802a202 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802a1f0:	f7ff fa5e 	bl	80296b0 <HAL_GetTick>
 802a1f4:	4602      	mov	r2, r0
 802a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1f8:	1ad3      	subs	r3, r2, r3
 802a1fa:	2b64      	cmp	r3, #100	; 0x64
 802a1fc:	d901      	bls.n	802a202 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 802a1fe:	2303      	movs	r3, #3
 802a200:	e3c0      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 802a202:	4b59      	ldr	r3, [pc, #356]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a204:	681b      	ldr	r3, [r3, #0]
 802a206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a20a:	2b00      	cmp	r3, #0
 802a20c:	d1f0      	bne.n	802a1f0 <HAL_RCC_OscConfig+0x110>
 802a20e:	e000      	b.n	802a212 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802a210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802a212:	687b      	ldr	r3, [r7, #4]
 802a214:	681b      	ldr	r3, [r3, #0]
 802a216:	f003 0302 	and.w	r3, r3, #2
 802a21a:	2b00      	cmp	r3, #0
 802a21c:	f000 80ca 	beq.w	802a3b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802a220:	4b51      	ldr	r3, [pc, #324]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a222:	691b      	ldr	r3, [r3, #16]
 802a224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a228:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802a22a:	4b4f      	ldr	r3, [pc, #316]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a22e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 802a230:	6a3b      	ldr	r3, [r7, #32]
 802a232:	2b00      	cmp	r3, #0
 802a234:	d007      	beq.n	802a246 <HAL_RCC_OscConfig+0x166>
 802a236:	6a3b      	ldr	r3, [r7, #32]
 802a238:	2b18      	cmp	r3, #24
 802a23a:	d156      	bne.n	802a2ea <HAL_RCC_OscConfig+0x20a>
 802a23c:	69fb      	ldr	r3, [r7, #28]
 802a23e:	f003 0303 	and.w	r3, r3, #3
 802a242:	2b00      	cmp	r3, #0
 802a244:	d151      	bne.n	802a2ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802a246:	4b48      	ldr	r3, [pc, #288]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a248:	681b      	ldr	r3, [r3, #0]
 802a24a:	f003 0304 	and.w	r3, r3, #4
 802a24e:	2b00      	cmp	r3, #0
 802a250:	d005      	beq.n	802a25e <HAL_RCC_OscConfig+0x17e>
 802a252:	687b      	ldr	r3, [r7, #4]
 802a254:	68db      	ldr	r3, [r3, #12]
 802a256:	2b00      	cmp	r3, #0
 802a258:	d101      	bne.n	802a25e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 802a25a:	2301      	movs	r3, #1
 802a25c:	e392      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 802a25e:	4b42      	ldr	r3, [pc, #264]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a260:	681b      	ldr	r3, [r3, #0]
 802a262:	f023 0219 	bic.w	r2, r3, #25
 802a266:	687b      	ldr	r3, [r7, #4]
 802a268:	68db      	ldr	r3, [r3, #12]
 802a26a:	493f      	ldr	r1, [pc, #252]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a26c:	4313      	orrs	r3, r2
 802a26e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a270:	f7ff fa1e 	bl	80296b0 <HAL_GetTick>
 802a274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802a276:	e008      	b.n	802a28a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802a278:	f7ff fa1a 	bl	80296b0 <HAL_GetTick>
 802a27c:	4602      	mov	r2, r0
 802a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a280:	1ad3      	subs	r3, r2, r3
 802a282:	2b02      	cmp	r3, #2
 802a284:	d901      	bls.n	802a28a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 802a286:	2303      	movs	r3, #3
 802a288:	e37c      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802a28a:	4b37      	ldr	r3, [pc, #220]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a28c:	681b      	ldr	r3, [r3, #0]
 802a28e:	f003 0304 	and.w	r3, r3, #4
 802a292:	2b00      	cmp	r3, #0
 802a294:	d0f0      	beq.n	802a278 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a296:	f7ff fa3b 	bl	8029710 <HAL_GetREVID>
 802a29a:	4603      	mov	r3, r0
 802a29c:	f241 0203 	movw	r2, #4099	; 0x1003
 802a2a0:	4293      	cmp	r3, r2
 802a2a2:	d817      	bhi.n	802a2d4 <HAL_RCC_OscConfig+0x1f4>
 802a2a4:	687b      	ldr	r3, [r7, #4]
 802a2a6:	691b      	ldr	r3, [r3, #16]
 802a2a8:	2b40      	cmp	r3, #64	; 0x40
 802a2aa:	d108      	bne.n	802a2be <HAL_RCC_OscConfig+0x1de>
 802a2ac:	4b2e      	ldr	r3, [pc, #184]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a2ae:	685b      	ldr	r3, [r3, #4]
 802a2b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 802a2b4:	4a2c      	ldr	r2, [pc, #176]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a2b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802a2ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802a2bc:	e07a      	b.n	802a3b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a2be:	4b2a      	ldr	r3, [pc, #168]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a2c0:	685b      	ldr	r3, [r3, #4]
 802a2c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802a2c6:	687b      	ldr	r3, [r7, #4]
 802a2c8:	691b      	ldr	r3, [r3, #16]
 802a2ca:	031b      	lsls	r3, r3, #12
 802a2cc:	4926      	ldr	r1, [pc, #152]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a2ce:	4313      	orrs	r3, r2
 802a2d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802a2d2:	e06f      	b.n	802a3b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a2d4:	4b24      	ldr	r3, [pc, #144]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a2d6:	685b      	ldr	r3, [r3, #4]
 802a2d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802a2dc:	687b      	ldr	r3, [r7, #4]
 802a2de:	691b      	ldr	r3, [r3, #16]
 802a2e0:	061b      	lsls	r3, r3, #24
 802a2e2:	4921      	ldr	r1, [pc, #132]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a2e4:	4313      	orrs	r3, r2
 802a2e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802a2e8:	e064      	b.n	802a3b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 802a2ea:	687b      	ldr	r3, [r7, #4]
 802a2ec:	68db      	ldr	r3, [r3, #12]
 802a2ee:	2b00      	cmp	r3, #0
 802a2f0:	d047      	beq.n	802a382 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 802a2f2:	4b1d      	ldr	r3, [pc, #116]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a2f4:	681b      	ldr	r3, [r3, #0]
 802a2f6:	f023 0219 	bic.w	r2, r3, #25
 802a2fa:	687b      	ldr	r3, [r7, #4]
 802a2fc:	68db      	ldr	r3, [r3, #12]
 802a2fe:	491a      	ldr	r1, [pc, #104]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a300:	4313      	orrs	r3, r2
 802a302:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a304:	f7ff f9d4 	bl	80296b0 <HAL_GetTick>
 802a308:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802a30a:	e008      	b.n	802a31e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802a30c:	f7ff f9d0 	bl	80296b0 <HAL_GetTick>
 802a310:	4602      	mov	r2, r0
 802a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a314:	1ad3      	subs	r3, r2, r3
 802a316:	2b02      	cmp	r3, #2
 802a318:	d901      	bls.n	802a31e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 802a31a:	2303      	movs	r3, #3
 802a31c:	e332      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802a31e:	4b12      	ldr	r3, [pc, #72]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a320:	681b      	ldr	r3, [r3, #0]
 802a322:	f003 0304 	and.w	r3, r3, #4
 802a326:	2b00      	cmp	r3, #0
 802a328:	d0f0      	beq.n	802a30c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a32a:	f7ff f9f1 	bl	8029710 <HAL_GetREVID>
 802a32e:	4603      	mov	r3, r0
 802a330:	f241 0203 	movw	r2, #4099	; 0x1003
 802a334:	4293      	cmp	r3, r2
 802a336:	d819      	bhi.n	802a36c <HAL_RCC_OscConfig+0x28c>
 802a338:	687b      	ldr	r3, [r7, #4]
 802a33a:	691b      	ldr	r3, [r3, #16]
 802a33c:	2b40      	cmp	r3, #64	; 0x40
 802a33e:	d108      	bne.n	802a352 <HAL_RCC_OscConfig+0x272>
 802a340:	4b09      	ldr	r3, [pc, #36]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a342:	685b      	ldr	r3, [r3, #4]
 802a344:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 802a348:	4a07      	ldr	r2, [pc, #28]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a34a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802a34e:	6053      	str	r3, [r2, #4]
 802a350:	e030      	b.n	802a3b4 <HAL_RCC_OscConfig+0x2d4>
 802a352:	4b05      	ldr	r3, [pc, #20]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a354:	685b      	ldr	r3, [r3, #4]
 802a356:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802a35a:	687b      	ldr	r3, [r7, #4]
 802a35c:	691b      	ldr	r3, [r3, #16]
 802a35e:	031b      	lsls	r3, r3, #12
 802a360:	4901      	ldr	r1, [pc, #4]	; (802a368 <HAL_RCC_OscConfig+0x288>)
 802a362:	4313      	orrs	r3, r2
 802a364:	604b      	str	r3, [r1, #4]
 802a366:	e025      	b.n	802a3b4 <HAL_RCC_OscConfig+0x2d4>
 802a368:	58024400 	.word	0x58024400
 802a36c:	4b9a      	ldr	r3, [pc, #616]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a36e:	685b      	ldr	r3, [r3, #4]
 802a370:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802a374:	687b      	ldr	r3, [r7, #4]
 802a376:	691b      	ldr	r3, [r3, #16]
 802a378:	061b      	lsls	r3, r3, #24
 802a37a:	4997      	ldr	r1, [pc, #604]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a37c:	4313      	orrs	r3, r2
 802a37e:	604b      	str	r3, [r1, #4]
 802a380:	e018      	b.n	802a3b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802a382:	4b95      	ldr	r3, [pc, #596]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a384:	681b      	ldr	r3, [r3, #0]
 802a386:	4a94      	ldr	r2, [pc, #592]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a388:	f023 0301 	bic.w	r3, r3, #1
 802a38c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a38e:	f7ff f98f 	bl	80296b0 <HAL_GetTick>
 802a392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 802a394:	e008      	b.n	802a3a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802a396:	f7ff f98b 	bl	80296b0 <HAL_GetTick>
 802a39a:	4602      	mov	r2, r0
 802a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a39e:	1ad3      	subs	r3, r2, r3
 802a3a0:	2b02      	cmp	r3, #2
 802a3a2:	d901      	bls.n	802a3a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 802a3a4:	2303      	movs	r3, #3
 802a3a6:	e2ed      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 802a3a8:	4b8b      	ldr	r3, [pc, #556]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a3aa:	681b      	ldr	r3, [r3, #0]
 802a3ac:	f003 0304 	and.w	r3, r3, #4
 802a3b0:	2b00      	cmp	r3, #0
 802a3b2:	d1f0      	bne.n	802a396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 802a3b4:	687b      	ldr	r3, [r7, #4]
 802a3b6:	681b      	ldr	r3, [r3, #0]
 802a3b8:	f003 0310 	and.w	r3, r3, #16
 802a3bc:	2b00      	cmp	r3, #0
 802a3be:	f000 80a9 	beq.w	802a514 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802a3c2:	4b85      	ldr	r3, [pc, #532]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a3c4:	691b      	ldr	r3, [r3, #16]
 802a3c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a3ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802a3cc:	4b82      	ldr	r3, [pc, #520]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a3d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 802a3d2:	69bb      	ldr	r3, [r7, #24]
 802a3d4:	2b08      	cmp	r3, #8
 802a3d6:	d007      	beq.n	802a3e8 <HAL_RCC_OscConfig+0x308>
 802a3d8:	69bb      	ldr	r3, [r7, #24]
 802a3da:	2b18      	cmp	r3, #24
 802a3dc:	d13a      	bne.n	802a454 <HAL_RCC_OscConfig+0x374>
 802a3de:	697b      	ldr	r3, [r7, #20]
 802a3e0:	f003 0303 	and.w	r3, r3, #3
 802a3e4:	2b01      	cmp	r3, #1
 802a3e6:	d135      	bne.n	802a454 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802a3e8:	4b7b      	ldr	r3, [pc, #492]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a3ea:	681b      	ldr	r3, [r3, #0]
 802a3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a3f0:	2b00      	cmp	r3, #0
 802a3f2:	d005      	beq.n	802a400 <HAL_RCC_OscConfig+0x320>
 802a3f4:	687b      	ldr	r3, [r7, #4]
 802a3f6:	69db      	ldr	r3, [r3, #28]
 802a3f8:	2b80      	cmp	r3, #128	; 0x80
 802a3fa:	d001      	beq.n	802a400 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 802a3fc:	2301      	movs	r3, #1
 802a3fe:	e2c1      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802a400:	f7ff f986 	bl	8029710 <HAL_GetREVID>
 802a404:	4603      	mov	r3, r0
 802a406:	f241 0203 	movw	r2, #4099	; 0x1003
 802a40a:	4293      	cmp	r3, r2
 802a40c:	d817      	bhi.n	802a43e <HAL_RCC_OscConfig+0x35e>
 802a40e:	687b      	ldr	r3, [r7, #4]
 802a410:	6a1b      	ldr	r3, [r3, #32]
 802a412:	2b20      	cmp	r3, #32
 802a414:	d108      	bne.n	802a428 <HAL_RCC_OscConfig+0x348>
 802a416:	4b70      	ldr	r3, [pc, #448]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a418:	685b      	ldr	r3, [r3, #4]
 802a41a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 802a41e:	4a6e      	ldr	r2, [pc, #440]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a420:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a424:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802a426:	e075      	b.n	802a514 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802a428:	4b6b      	ldr	r3, [pc, #428]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a42a:	685b      	ldr	r3, [r3, #4]
 802a42c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 802a430:	687b      	ldr	r3, [r7, #4]
 802a432:	6a1b      	ldr	r3, [r3, #32]
 802a434:	069b      	lsls	r3, r3, #26
 802a436:	4968      	ldr	r1, [pc, #416]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a438:	4313      	orrs	r3, r2
 802a43a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802a43c:	e06a      	b.n	802a514 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802a43e:	4b66      	ldr	r3, [pc, #408]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a440:	68db      	ldr	r3, [r3, #12]
 802a442:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 802a446:	687b      	ldr	r3, [r7, #4]
 802a448:	6a1b      	ldr	r3, [r3, #32]
 802a44a:	061b      	lsls	r3, r3, #24
 802a44c:	4962      	ldr	r1, [pc, #392]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a44e:	4313      	orrs	r3, r2
 802a450:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802a452:	e05f      	b.n	802a514 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 802a454:	687b      	ldr	r3, [r7, #4]
 802a456:	69db      	ldr	r3, [r3, #28]
 802a458:	2b00      	cmp	r3, #0
 802a45a:	d042      	beq.n	802a4e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 802a45c:	4b5e      	ldr	r3, [pc, #376]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a45e:	681b      	ldr	r3, [r3, #0]
 802a460:	4a5d      	ldr	r2, [pc, #372]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a468:	f7ff f922 	bl	80296b0 <HAL_GetTick>
 802a46c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802a46e:	e008      	b.n	802a482 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 802a470:	f7ff f91e 	bl	80296b0 <HAL_GetTick>
 802a474:	4602      	mov	r2, r0
 802a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a478:	1ad3      	subs	r3, r2, r3
 802a47a:	2b02      	cmp	r3, #2
 802a47c:	d901      	bls.n	802a482 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 802a47e:	2303      	movs	r3, #3
 802a480:	e280      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802a482:	4b55      	ldr	r3, [pc, #340]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a484:	681b      	ldr	r3, [r3, #0]
 802a486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a48a:	2b00      	cmp	r3, #0
 802a48c:	d0f0      	beq.n	802a470 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802a48e:	f7ff f93f 	bl	8029710 <HAL_GetREVID>
 802a492:	4603      	mov	r3, r0
 802a494:	f241 0203 	movw	r2, #4099	; 0x1003
 802a498:	4293      	cmp	r3, r2
 802a49a:	d817      	bhi.n	802a4cc <HAL_RCC_OscConfig+0x3ec>
 802a49c:	687b      	ldr	r3, [r7, #4]
 802a49e:	6a1b      	ldr	r3, [r3, #32]
 802a4a0:	2b20      	cmp	r3, #32
 802a4a2:	d108      	bne.n	802a4b6 <HAL_RCC_OscConfig+0x3d6>
 802a4a4:	4b4c      	ldr	r3, [pc, #304]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a4a6:	685b      	ldr	r3, [r3, #4]
 802a4a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 802a4ac:	4a4a      	ldr	r2, [pc, #296]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a4ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a4b2:	6053      	str	r3, [r2, #4]
 802a4b4:	e02e      	b.n	802a514 <HAL_RCC_OscConfig+0x434>
 802a4b6:	4b48      	ldr	r3, [pc, #288]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a4b8:	685b      	ldr	r3, [r3, #4]
 802a4ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 802a4be:	687b      	ldr	r3, [r7, #4]
 802a4c0:	6a1b      	ldr	r3, [r3, #32]
 802a4c2:	069b      	lsls	r3, r3, #26
 802a4c4:	4944      	ldr	r1, [pc, #272]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a4c6:	4313      	orrs	r3, r2
 802a4c8:	604b      	str	r3, [r1, #4]
 802a4ca:	e023      	b.n	802a514 <HAL_RCC_OscConfig+0x434>
 802a4cc:	4b42      	ldr	r3, [pc, #264]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a4ce:	68db      	ldr	r3, [r3, #12]
 802a4d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 802a4d4:	687b      	ldr	r3, [r7, #4]
 802a4d6:	6a1b      	ldr	r3, [r3, #32]
 802a4d8:	061b      	lsls	r3, r3, #24
 802a4da:	493f      	ldr	r1, [pc, #252]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a4dc:	4313      	orrs	r3, r2
 802a4de:	60cb      	str	r3, [r1, #12]
 802a4e0:	e018      	b.n	802a514 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 802a4e2:	4b3d      	ldr	r3, [pc, #244]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a4e4:	681b      	ldr	r3, [r3, #0]
 802a4e6:	4a3c      	ldr	r2, [pc, #240]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a4e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a4ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a4ee:	f7ff f8df 	bl	80296b0 <HAL_GetTick>
 802a4f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 802a4f4:	e008      	b.n	802a508 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 802a4f6:	f7ff f8db 	bl	80296b0 <HAL_GetTick>
 802a4fa:	4602      	mov	r2, r0
 802a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a4fe:	1ad3      	subs	r3, r2, r3
 802a500:	2b02      	cmp	r3, #2
 802a502:	d901      	bls.n	802a508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802a504:	2303      	movs	r3, #3
 802a506:	e23d      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 802a508:	4b33      	ldr	r3, [pc, #204]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a50a:	681b      	ldr	r3, [r3, #0]
 802a50c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a510:	2b00      	cmp	r3, #0
 802a512:	d1f0      	bne.n	802a4f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802a514:	687b      	ldr	r3, [r7, #4]
 802a516:	681b      	ldr	r3, [r3, #0]
 802a518:	f003 0308 	and.w	r3, r3, #8
 802a51c:	2b00      	cmp	r3, #0
 802a51e:	d036      	beq.n	802a58e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 802a520:	687b      	ldr	r3, [r7, #4]
 802a522:	695b      	ldr	r3, [r3, #20]
 802a524:	2b00      	cmp	r3, #0
 802a526:	d019      	beq.n	802a55c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802a528:	4b2b      	ldr	r3, [pc, #172]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a52a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a52c:	4a2a      	ldr	r2, [pc, #168]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a52e:	f043 0301 	orr.w	r3, r3, #1
 802a532:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a534:	f7ff f8bc 	bl	80296b0 <HAL_GetTick>
 802a538:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802a53a:	e008      	b.n	802a54e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802a53c:	f7ff f8b8 	bl	80296b0 <HAL_GetTick>
 802a540:	4602      	mov	r2, r0
 802a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a544:	1ad3      	subs	r3, r2, r3
 802a546:	2b02      	cmp	r3, #2
 802a548:	d901      	bls.n	802a54e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 802a54a:	2303      	movs	r3, #3
 802a54c:	e21a      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802a54e:	4b22      	ldr	r3, [pc, #136]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a552:	f003 0302 	and.w	r3, r3, #2
 802a556:	2b00      	cmp	r3, #0
 802a558:	d0f0      	beq.n	802a53c <HAL_RCC_OscConfig+0x45c>
 802a55a:	e018      	b.n	802a58e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802a55c:	4b1e      	ldr	r3, [pc, #120]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a55e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a560:	4a1d      	ldr	r2, [pc, #116]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a562:	f023 0301 	bic.w	r3, r3, #1
 802a566:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a568:	f7ff f8a2 	bl	80296b0 <HAL_GetTick>
 802a56c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 802a56e:	e008      	b.n	802a582 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802a570:	f7ff f89e 	bl	80296b0 <HAL_GetTick>
 802a574:	4602      	mov	r2, r0
 802a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a578:	1ad3      	subs	r3, r2, r3
 802a57a:	2b02      	cmp	r3, #2
 802a57c:	d901      	bls.n	802a582 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 802a57e:	2303      	movs	r3, #3
 802a580:	e200      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 802a582:	4b15      	ldr	r3, [pc, #84]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a586:	f003 0302 	and.w	r3, r3, #2
 802a58a:	2b00      	cmp	r3, #0
 802a58c:	d1f0      	bne.n	802a570 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 802a58e:	687b      	ldr	r3, [r7, #4]
 802a590:	681b      	ldr	r3, [r3, #0]
 802a592:	f003 0320 	and.w	r3, r3, #32
 802a596:	2b00      	cmp	r3, #0
 802a598:	d039      	beq.n	802a60e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 802a59a:	687b      	ldr	r3, [r7, #4]
 802a59c:	699b      	ldr	r3, [r3, #24]
 802a59e:	2b00      	cmp	r3, #0
 802a5a0:	d01c      	beq.n	802a5dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 802a5a2:	4b0d      	ldr	r3, [pc, #52]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a5a4:	681b      	ldr	r3, [r3, #0]
 802a5a6:	4a0c      	ldr	r2, [pc, #48]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a5a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802a5ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 802a5ae:	f7ff f87f 	bl	80296b0 <HAL_GetTick>
 802a5b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 802a5b4:	e008      	b.n	802a5c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802a5b6:	f7ff f87b 	bl	80296b0 <HAL_GetTick>
 802a5ba:	4602      	mov	r2, r0
 802a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a5be:	1ad3      	subs	r3, r2, r3
 802a5c0:	2b02      	cmp	r3, #2
 802a5c2:	d901      	bls.n	802a5c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 802a5c4:	2303      	movs	r3, #3
 802a5c6:	e1dd      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 802a5c8:	4b03      	ldr	r3, [pc, #12]	; (802a5d8 <HAL_RCC_OscConfig+0x4f8>)
 802a5ca:	681b      	ldr	r3, [r3, #0]
 802a5cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802a5d0:	2b00      	cmp	r3, #0
 802a5d2:	d0f0      	beq.n	802a5b6 <HAL_RCC_OscConfig+0x4d6>
 802a5d4:	e01b      	b.n	802a60e <HAL_RCC_OscConfig+0x52e>
 802a5d6:	bf00      	nop
 802a5d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 802a5dc:	4b9b      	ldr	r3, [pc, #620]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a5de:	681b      	ldr	r3, [r3, #0]
 802a5e0:	4a9a      	ldr	r2, [pc, #616]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a5e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a5e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 802a5e8:	f7ff f862 	bl	80296b0 <HAL_GetTick>
 802a5ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 802a5ee:	e008      	b.n	802a602 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802a5f0:	f7ff f85e 	bl	80296b0 <HAL_GetTick>
 802a5f4:	4602      	mov	r2, r0
 802a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a5f8:	1ad3      	subs	r3, r2, r3
 802a5fa:	2b02      	cmp	r3, #2
 802a5fc:	d901      	bls.n	802a602 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 802a5fe:	2303      	movs	r3, #3
 802a600:	e1c0      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 802a602:	4b92      	ldr	r3, [pc, #584]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a604:	681b      	ldr	r3, [r3, #0]
 802a606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802a60a:	2b00      	cmp	r3, #0
 802a60c:	d1f0      	bne.n	802a5f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802a60e:	687b      	ldr	r3, [r7, #4]
 802a610:	681b      	ldr	r3, [r3, #0]
 802a612:	f003 0304 	and.w	r3, r3, #4
 802a616:	2b00      	cmp	r3, #0
 802a618:	f000 8081 	beq.w	802a71e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 802a61c:	4b8c      	ldr	r3, [pc, #560]	; (802a850 <HAL_RCC_OscConfig+0x770>)
 802a61e:	681b      	ldr	r3, [r3, #0]
 802a620:	4a8b      	ldr	r2, [pc, #556]	; (802a850 <HAL_RCC_OscConfig+0x770>)
 802a622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a626:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802a628:	f7ff f842 	bl	80296b0 <HAL_GetTick>
 802a62c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802a62e:	e008      	b.n	802a642 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802a630:	f7ff f83e 	bl	80296b0 <HAL_GetTick>
 802a634:	4602      	mov	r2, r0
 802a636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a638:	1ad3      	subs	r3, r2, r3
 802a63a:	2b64      	cmp	r3, #100	; 0x64
 802a63c:	d901      	bls.n	802a642 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 802a63e:	2303      	movs	r3, #3
 802a640:	e1a0      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802a642:	4b83      	ldr	r3, [pc, #524]	; (802a850 <HAL_RCC_OscConfig+0x770>)
 802a644:	681b      	ldr	r3, [r3, #0]
 802a646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a64a:	2b00      	cmp	r3, #0
 802a64c:	d0f0      	beq.n	802a630 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802a64e:	687b      	ldr	r3, [r7, #4]
 802a650:	689b      	ldr	r3, [r3, #8]
 802a652:	2b01      	cmp	r3, #1
 802a654:	d106      	bne.n	802a664 <HAL_RCC_OscConfig+0x584>
 802a656:	4b7d      	ldr	r3, [pc, #500]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a65a:	4a7c      	ldr	r2, [pc, #496]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a65c:	f043 0301 	orr.w	r3, r3, #1
 802a660:	6713      	str	r3, [r2, #112]	; 0x70
 802a662:	e02d      	b.n	802a6c0 <HAL_RCC_OscConfig+0x5e0>
 802a664:	687b      	ldr	r3, [r7, #4]
 802a666:	689b      	ldr	r3, [r3, #8]
 802a668:	2b00      	cmp	r3, #0
 802a66a:	d10c      	bne.n	802a686 <HAL_RCC_OscConfig+0x5a6>
 802a66c:	4b77      	ldr	r3, [pc, #476]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a66e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a670:	4a76      	ldr	r2, [pc, #472]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a672:	f023 0301 	bic.w	r3, r3, #1
 802a676:	6713      	str	r3, [r2, #112]	; 0x70
 802a678:	4b74      	ldr	r3, [pc, #464]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a67c:	4a73      	ldr	r2, [pc, #460]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a67e:	f023 0304 	bic.w	r3, r3, #4
 802a682:	6713      	str	r3, [r2, #112]	; 0x70
 802a684:	e01c      	b.n	802a6c0 <HAL_RCC_OscConfig+0x5e0>
 802a686:	687b      	ldr	r3, [r7, #4]
 802a688:	689b      	ldr	r3, [r3, #8]
 802a68a:	2b05      	cmp	r3, #5
 802a68c:	d10c      	bne.n	802a6a8 <HAL_RCC_OscConfig+0x5c8>
 802a68e:	4b6f      	ldr	r3, [pc, #444]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a692:	4a6e      	ldr	r2, [pc, #440]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a694:	f043 0304 	orr.w	r3, r3, #4
 802a698:	6713      	str	r3, [r2, #112]	; 0x70
 802a69a:	4b6c      	ldr	r3, [pc, #432]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a69e:	4a6b      	ldr	r2, [pc, #428]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a6a0:	f043 0301 	orr.w	r3, r3, #1
 802a6a4:	6713      	str	r3, [r2, #112]	; 0x70
 802a6a6:	e00b      	b.n	802a6c0 <HAL_RCC_OscConfig+0x5e0>
 802a6a8:	4b68      	ldr	r3, [pc, #416]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a6ac:	4a67      	ldr	r2, [pc, #412]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a6ae:	f023 0301 	bic.w	r3, r3, #1
 802a6b2:	6713      	str	r3, [r2, #112]	; 0x70
 802a6b4:	4b65      	ldr	r3, [pc, #404]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a6b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a6b8:	4a64      	ldr	r2, [pc, #400]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a6ba:	f023 0304 	bic.w	r3, r3, #4
 802a6be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802a6c0:	687b      	ldr	r3, [r7, #4]
 802a6c2:	689b      	ldr	r3, [r3, #8]
 802a6c4:	2b00      	cmp	r3, #0
 802a6c6:	d015      	beq.n	802a6f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a6c8:	f7fe fff2 	bl	80296b0 <HAL_GetTick>
 802a6cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802a6ce:	e00a      	b.n	802a6e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802a6d0:	f7fe ffee 	bl	80296b0 <HAL_GetTick>
 802a6d4:	4602      	mov	r2, r0
 802a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a6d8:	1ad3      	subs	r3, r2, r3
 802a6da:	f241 3288 	movw	r2, #5000	; 0x1388
 802a6de:	4293      	cmp	r3, r2
 802a6e0:	d901      	bls.n	802a6e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 802a6e2:	2303      	movs	r3, #3
 802a6e4:	e14e      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802a6e6:	4b59      	ldr	r3, [pc, #356]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a6ea:	f003 0302 	and.w	r3, r3, #2
 802a6ee:	2b00      	cmp	r3, #0
 802a6f0:	d0ee      	beq.n	802a6d0 <HAL_RCC_OscConfig+0x5f0>
 802a6f2:	e014      	b.n	802a71e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a6f4:	f7fe ffdc 	bl	80296b0 <HAL_GetTick>
 802a6f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 802a6fa:	e00a      	b.n	802a712 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802a6fc:	f7fe ffd8 	bl	80296b0 <HAL_GetTick>
 802a700:	4602      	mov	r2, r0
 802a702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a704:	1ad3      	subs	r3, r2, r3
 802a706:	f241 3288 	movw	r2, #5000	; 0x1388
 802a70a:	4293      	cmp	r3, r2
 802a70c:	d901      	bls.n	802a712 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 802a70e:	2303      	movs	r3, #3
 802a710:	e138      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 802a712:	4b4e      	ldr	r3, [pc, #312]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a716:	f003 0302 	and.w	r3, r3, #2
 802a71a:	2b00      	cmp	r3, #0
 802a71c:	d1ee      	bne.n	802a6fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802a71e:	687b      	ldr	r3, [r7, #4]
 802a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a722:	2b00      	cmp	r3, #0
 802a724:	f000 812d 	beq.w	802a982 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 802a728:	4b48      	ldr	r3, [pc, #288]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a72a:	691b      	ldr	r3, [r3, #16]
 802a72c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802a730:	2b18      	cmp	r3, #24
 802a732:	f000 80bd 	beq.w	802a8b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802a736:	687b      	ldr	r3, [r7, #4]
 802a738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a73a:	2b02      	cmp	r3, #2
 802a73c:	f040 809e 	bne.w	802a87c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802a740:	4b42      	ldr	r3, [pc, #264]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a742:	681b      	ldr	r3, [r3, #0]
 802a744:	4a41      	ldr	r2, [pc, #260]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802a74a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a74c:	f7fe ffb0 	bl	80296b0 <HAL_GetTick>
 802a750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802a752:	e008      	b.n	802a766 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802a754:	f7fe ffac 	bl	80296b0 <HAL_GetTick>
 802a758:	4602      	mov	r2, r0
 802a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a75c:	1ad3      	subs	r3, r2, r3
 802a75e:	2b02      	cmp	r3, #2
 802a760:	d901      	bls.n	802a766 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 802a762:	2303      	movs	r3, #3
 802a764:	e10e      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802a766:	4b39      	ldr	r3, [pc, #228]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a768:	681b      	ldr	r3, [r3, #0]
 802a76a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a76e:	2b00      	cmp	r3, #0
 802a770:	d1f0      	bne.n	802a754 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 802a772:	4b36      	ldr	r3, [pc, #216]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802a776:	4b37      	ldr	r3, [pc, #220]	; (802a854 <HAL_RCC_OscConfig+0x774>)
 802a778:	4013      	ands	r3, r2
 802a77a:	687a      	ldr	r2, [r7, #4]
 802a77c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 802a77e:	687a      	ldr	r2, [r7, #4]
 802a780:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 802a782:	0112      	lsls	r2, r2, #4
 802a784:	430a      	orrs	r2, r1
 802a786:	4931      	ldr	r1, [pc, #196]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a788:	4313      	orrs	r3, r2
 802a78a:	628b      	str	r3, [r1, #40]	; 0x28
 802a78c:	687b      	ldr	r3, [r7, #4]
 802a78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a790:	3b01      	subs	r3, #1
 802a792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802a796:	687b      	ldr	r3, [r7, #4]
 802a798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a79a:	3b01      	subs	r3, #1
 802a79c:	025b      	lsls	r3, r3, #9
 802a79e:	b29b      	uxth	r3, r3
 802a7a0:	431a      	orrs	r2, r3
 802a7a2:	687b      	ldr	r3, [r7, #4]
 802a7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a7a6:	3b01      	subs	r3, #1
 802a7a8:	041b      	lsls	r3, r3, #16
 802a7aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802a7ae:	431a      	orrs	r2, r3
 802a7b0:	687b      	ldr	r3, [r7, #4]
 802a7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a7b4:	3b01      	subs	r3, #1
 802a7b6:	061b      	lsls	r3, r3, #24
 802a7b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 802a7bc:	4923      	ldr	r1, [pc, #140]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a7be:	4313      	orrs	r3, r2
 802a7c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 802a7c2:	4b22      	ldr	r3, [pc, #136]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a7c6:	4a21      	ldr	r2, [pc, #132]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a7c8:	f023 0301 	bic.w	r3, r3, #1
 802a7cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 802a7ce:	4b1f      	ldr	r3, [pc, #124]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a7d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802a7d2:	4b21      	ldr	r3, [pc, #132]	; (802a858 <HAL_RCC_OscConfig+0x778>)
 802a7d4:	4013      	ands	r3, r2
 802a7d6:	687a      	ldr	r2, [r7, #4]
 802a7d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 802a7da:	00d2      	lsls	r2, r2, #3
 802a7dc:	491b      	ldr	r1, [pc, #108]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a7de:	4313      	orrs	r3, r2
 802a7e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 802a7e2:	4b1a      	ldr	r3, [pc, #104]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a7e6:	f023 020c 	bic.w	r2, r3, #12
 802a7ea:	687b      	ldr	r3, [r7, #4]
 802a7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a7ee:	4917      	ldr	r1, [pc, #92]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a7f0:	4313      	orrs	r3, r2
 802a7f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 802a7f4:	4b15      	ldr	r3, [pc, #84]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a7f8:	f023 0202 	bic.w	r2, r3, #2
 802a7fc:	687b      	ldr	r3, [r7, #4]
 802a7fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802a800:	4912      	ldr	r1, [pc, #72]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a802:	4313      	orrs	r3, r2
 802a804:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 802a806:	4b11      	ldr	r3, [pc, #68]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a80a:	4a10      	ldr	r2, [pc, #64]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a80c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a810:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802a812:	4b0e      	ldr	r3, [pc, #56]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a816:	4a0d      	ldr	r2, [pc, #52]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802a81c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 802a81e:	4b0b      	ldr	r3, [pc, #44]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a822:	4a0a      	ldr	r2, [pc, #40]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802a828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 802a82a:	4b08      	ldr	r3, [pc, #32]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a82e:	4a07      	ldr	r2, [pc, #28]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a830:	f043 0301 	orr.w	r3, r3, #1
 802a834:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802a836:	4b05      	ldr	r3, [pc, #20]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a838:	681b      	ldr	r3, [r3, #0]
 802a83a:	4a04      	ldr	r2, [pc, #16]	; (802a84c <HAL_RCC_OscConfig+0x76c>)
 802a83c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802a840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a842:	f7fe ff35 	bl	80296b0 <HAL_GetTick>
 802a846:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802a848:	e011      	b.n	802a86e <HAL_RCC_OscConfig+0x78e>
 802a84a:	bf00      	nop
 802a84c:	58024400 	.word	0x58024400
 802a850:	58024800 	.word	0x58024800
 802a854:	fffffc0c 	.word	0xfffffc0c
 802a858:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802a85c:	f7fe ff28 	bl	80296b0 <HAL_GetTick>
 802a860:	4602      	mov	r2, r0
 802a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a864:	1ad3      	subs	r3, r2, r3
 802a866:	2b02      	cmp	r3, #2
 802a868:	d901      	bls.n	802a86e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 802a86a:	2303      	movs	r3, #3
 802a86c:	e08a      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802a86e:	4b47      	ldr	r3, [pc, #284]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a870:	681b      	ldr	r3, [r3, #0]
 802a872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a876:	2b00      	cmp	r3, #0
 802a878:	d0f0      	beq.n	802a85c <HAL_RCC_OscConfig+0x77c>
 802a87a:	e082      	b.n	802a982 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802a87c:	4b43      	ldr	r3, [pc, #268]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a87e:	681b      	ldr	r3, [r3, #0]
 802a880:	4a42      	ldr	r2, [pc, #264]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802a886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a888:	f7fe ff12 	bl	80296b0 <HAL_GetTick>
 802a88c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802a88e:	e008      	b.n	802a8a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802a890:	f7fe ff0e 	bl	80296b0 <HAL_GetTick>
 802a894:	4602      	mov	r2, r0
 802a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a898:	1ad3      	subs	r3, r2, r3
 802a89a:	2b02      	cmp	r3, #2
 802a89c:	d901      	bls.n	802a8a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 802a89e:	2303      	movs	r3, #3
 802a8a0:	e070      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802a8a2:	4b3a      	ldr	r3, [pc, #232]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a8a4:	681b      	ldr	r3, [r3, #0]
 802a8a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a8aa:	2b00      	cmp	r3, #0
 802a8ac:	d1f0      	bne.n	802a890 <HAL_RCC_OscConfig+0x7b0>
 802a8ae:	e068      	b.n	802a982 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 802a8b0:	4b36      	ldr	r3, [pc, #216]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a8b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 802a8b6:	4b35      	ldr	r3, [pc, #212]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a8ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802a8bc:	687b      	ldr	r3, [r7, #4]
 802a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a8c0:	2b01      	cmp	r3, #1
 802a8c2:	d031      	beq.n	802a928 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802a8c4:	693b      	ldr	r3, [r7, #16]
 802a8c6:	f003 0203 	and.w	r2, r3, #3
 802a8ca:	687b      	ldr	r3, [r7, #4]
 802a8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802a8ce:	429a      	cmp	r2, r3
 802a8d0:	d12a      	bne.n	802a928 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 802a8d2:	693b      	ldr	r3, [r7, #16]
 802a8d4:	091b      	lsrs	r3, r3, #4
 802a8d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802a8da:	687b      	ldr	r3, [r7, #4]
 802a8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802a8de:	429a      	cmp	r2, r3
 802a8e0:	d122      	bne.n	802a928 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 802a8e2:	68fb      	ldr	r3, [r7, #12]
 802a8e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802a8e8:	687b      	ldr	r3, [r7, #4]
 802a8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a8ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 802a8ee:	429a      	cmp	r2, r3
 802a8f0:	d11a      	bne.n	802a928 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 802a8f2:	68fb      	ldr	r3, [r7, #12]
 802a8f4:	0a5b      	lsrs	r3, r3, #9
 802a8f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802a8fa:	687b      	ldr	r3, [r7, #4]
 802a8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a8fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 802a900:	429a      	cmp	r2, r3
 802a902:	d111      	bne.n	802a928 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 802a904:	68fb      	ldr	r3, [r7, #12]
 802a906:	0c1b      	lsrs	r3, r3, #16
 802a908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802a90c:	687b      	ldr	r3, [r7, #4]
 802a90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a910:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 802a912:	429a      	cmp	r2, r3
 802a914:	d108      	bne.n	802a928 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 802a916:	68fb      	ldr	r3, [r7, #12]
 802a918:	0e1b      	lsrs	r3, r3, #24
 802a91a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802a91e:	687b      	ldr	r3, [r7, #4]
 802a920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a922:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 802a924:	429a      	cmp	r2, r3
 802a926:	d001      	beq.n	802a92c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 802a928:	2301      	movs	r3, #1
 802a92a:	e02b      	b.n	802a984 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 802a92c:	4b17      	ldr	r3, [pc, #92]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a930:	08db      	lsrs	r3, r3, #3
 802a932:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802a936:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 802a938:	687b      	ldr	r3, [r7, #4]
 802a93a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802a93c:	693a      	ldr	r2, [r7, #16]
 802a93e:	429a      	cmp	r2, r3
 802a940:	d01f      	beq.n	802a982 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 802a942:	4b12      	ldr	r3, [pc, #72]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a946:	4a11      	ldr	r2, [pc, #68]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a948:	f023 0301 	bic.w	r3, r3, #1
 802a94c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 802a94e:	f7fe feaf 	bl	80296b0 <HAL_GetTick>
 802a952:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 802a954:	bf00      	nop
 802a956:	f7fe feab 	bl	80296b0 <HAL_GetTick>
 802a95a:	4602      	mov	r2, r0
 802a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a95e:	4293      	cmp	r3, r2
 802a960:	d0f9      	beq.n	802a956 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 802a962:	4b0a      	ldr	r3, [pc, #40]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802a966:	4b0a      	ldr	r3, [pc, #40]	; (802a990 <HAL_RCC_OscConfig+0x8b0>)
 802a968:	4013      	ands	r3, r2
 802a96a:	687a      	ldr	r2, [r7, #4]
 802a96c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 802a96e:	00d2      	lsls	r2, r2, #3
 802a970:	4906      	ldr	r1, [pc, #24]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a972:	4313      	orrs	r3, r2
 802a974:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 802a976:	4b05      	ldr	r3, [pc, #20]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a97a:	4a04      	ldr	r2, [pc, #16]	; (802a98c <HAL_RCC_OscConfig+0x8ac>)
 802a97c:	f043 0301 	orr.w	r3, r3, #1
 802a980:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 802a982:	2300      	movs	r3, #0
}
 802a984:	4618      	mov	r0, r3
 802a986:	3730      	adds	r7, #48	; 0x30
 802a988:	46bd      	mov	sp, r7
 802a98a:	bd80      	pop	{r7, pc}
 802a98c:	58024400 	.word	0x58024400
 802a990:	ffff0007 	.word	0xffff0007

0802a994 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802a994:	b580      	push	{r7, lr}
 802a996:	b086      	sub	sp, #24
 802a998:	af00      	add	r7, sp, #0
 802a99a:	6078      	str	r0, [r7, #4]
 802a99c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 802a99e:	687b      	ldr	r3, [r7, #4]
 802a9a0:	2b00      	cmp	r3, #0
 802a9a2:	d101      	bne.n	802a9a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802a9a4:	2301      	movs	r3, #1
 802a9a6:	e19c      	b.n	802ace2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 802a9a8:	4b8a      	ldr	r3, [pc, #552]	; (802abd4 <HAL_RCC_ClockConfig+0x240>)
 802a9aa:	681b      	ldr	r3, [r3, #0]
 802a9ac:	f003 030f 	and.w	r3, r3, #15
 802a9b0:	683a      	ldr	r2, [r7, #0]
 802a9b2:	429a      	cmp	r2, r3
 802a9b4:	d910      	bls.n	802a9d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802a9b6:	4b87      	ldr	r3, [pc, #540]	; (802abd4 <HAL_RCC_ClockConfig+0x240>)
 802a9b8:	681b      	ldr	r3, [r3, #0]
 802a9ba:	f023 020f 	bic.w	r2, r3, #15
 802a9be:	4985      	ldr	r1, [pc, #532]	; (802abd4 <HAL_RCC_ClockConfig+0x240>)
 802a9c0:	683b      	ldr	r3, [r7, #0]
 802a9c2:	4313      	orrs	r3, r2
 802a9c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802a9c6:	4b83      	ldr	r3, [pc, #524]	; (802abd4 <HAL_RCC_ClockConfig+0x240>)
 802a9c8:	681b      	ldr	r3, [r3, #0]
 802a9ca:	f003 030f 	and.w	r3, r3, #15
 802a9ce:	683a      	ldr	r2, [r7, #0]
 802a9d0:	429a      	cmp	r2, r3
 802a9d2:	d001      	beq.n	802a9d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 802a9d4:	2301      	movs	r3, #1
 802a9d6:	e184      	b.n	802ace2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 802a9d8:	687b      	ldr	r3, [r7, #4]
 802a9da:	681b      	ldr	r3, [r3, #0]
 802a9dc:	f003 0304 	and.w	r3, r3, #4
 802a9e0:	2b00      	cmp	r3, #0
 802a9e2:	d010      	beq.n	802aa06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 802a9e4:	687b      	ldr	r3, [r7, #4]
 802a9e6:	691a      	ldr	r2, [r3, #16]
 802a9e8:	4b7b      	ldr	r3, [pc, #492]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802a9ea:	699b      	ldr	r3, [r3, #24]
 802a9ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802a9f0:	429a      	cmp	r2, r3
 802a9f2:	d908      	bls.n	802aa06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 802a9f4:	4b78      	ldr	r3, [pc, #480]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802a9f6:	699b      	ldr	r3, [r3, #24]
 802a9f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802a9fc:	687b      	ldr	r3, [r7, #4]
 802a9fe:	691b      	ldr	r3, [r3, #16]
 802aa00:	4975      	ldr	r1, [pc, #468]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aa02:	4313      	orrs	r3, r2
 802aa04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802aa06:	687b      	ldr	r3, [r7, #4]
 802aa08:	681b      	ldr	r3, [r3, #0]
 802aa0a:	f003 0308 	and.w	r3, r3, #8
 802aa0e:	2b00      	cmp	r3, #0
 802aa10:	d010      	beq.n	802aa34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 802aa12:	687b      	ldr	r3, [r7, #4]
 802aa14:	695a      	ldr	r2, [r3, #20]
 802aa16:	4b70      	ldr	r3, [pc, #448]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aa18:	69db      	ldr	r3, [r3, #28]
 802aa1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802aa1e:	429a      	cmp	r2, r3
 802aa20:	d908      	bls.n	802aa34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 802aa22:	4b6d      	ldr	r3, [pc, #436]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aa24:	69db      	ldr	r3, [r3, #28]
 802aa26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802aa2a:	687b      	ldr	r3, [r7, #4]
 802aa2c:	695b      	ldr	r3, [r3, #20]
 802aa2e:	496a      	ldr	r1, [pc, #424]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aa30:	4313      	orrs	r3, r2
 802aa32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802aa34:	687b      	ldr	r3, [r7, #4]
 802aa36:	681b      	ldr	r3, [r3, #0]
 802aa38:	f003 0310 	and.w	r3, r3, #16
 802aa3c:	2b00      	cmp	r3, #0
 802aa3e:	d010      	beq.n	802aa62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 802aa40:	687b      	ldr	r3, [r7, #4]
 802aa42:	699a      	ldr	r2, [r3, #24]
 802aa44:	4b64      	ldr	r3, [pc, #400]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aa46:	69db      	ldr	r3, [r3, #28]
 802aa48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802aa4c:	429a      	cmp	r2, r3
 802aa4e:	d908      	bls.n	802aa62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 802aa50:	4b61      	ldr	r3, [pc, #388]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aa52:	69db      	ldr	r3, [r3, #28]
 802aa54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 802aa58:	687b      	ldr	r3, [r7, #4]
 802aa5a:	699b      	ldr	r3, [r3, #24]
 802aa5c:	495e      	ldr	r1, [pc, #376]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aa5e:	4313      	orrs	r3, r2
 802aa60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 802aa62:	687b      	ldr	r3, [r7, #4]
 802aa64:	681b      	ldr	r3, [r3, #0]
 802aa66:	f003 0320 	and.w	r3, r3, #32
 802aa6a:	2b00      	cmp	r3, #0
 802aa6c:	d010      	beq.n	802aa90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 802aa6e:	687b      	ldr	r3, [r7, #4]
 802aa70:	69da      	ldr	r2, [r3, #28]
 802aa72:	4b59      	ldr	r3, [pc, #356]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aa74:	6a1b      	ldr	r3, [r3, #32]
 802aa76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802aa7a:	429a      	cmp	r2, r3
 802aa7c:	d908      	bls.n	802aa90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 802aa7e:	4b56      	ldr	r3, [pc, #344]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aa80:	6a1b      	ldr	r3, [r3, #32]
 802aa82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802aa86:	687b      	ldr	r3, [r7, #4]
 802aa88:	69db      	ldr	r3, [r3, #28]
 802aa8a:	4953      	ldr	r1, [pc, #332]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aa8c:	4313      	orrs	r3, r2
 802aa8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802aa90:	687b      	ldr	r3, [r7, #4]
 802aa92:	681b      	ldr	r3, [r3, #0]
 802aa94:	f003 0302 	and.w	r3, r3, #2
 802aa98:	2b00      	cmp	r3, #0
 802aa9a:	d010      	beq.n	802aabe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 802aa9c:	687b      	ldr	r3, [r7, #4]
 802aa9e:	68da      	ldr	r2, [r3, #12]
 802aaa0:	4b4d      	ldr	r3, [pc, #308]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aaa2:	699b      	ldr	r3, [r3, #24]
 802aaa4:	f003 030f 	and.w	r3, r3, #15
 802aaa8:	429a      	cmp	r2, r3
 802aaaa:	d908      	bls.n	802aabe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802aaac:	4b4a      	ldr	r3, [pc, #296]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aaae:	699b      	ldr	r3, [r3, #24]
 802aab0:	f023 020f 	bic.w	r2, r3, #15
 802aab4:	687b      	ldr	r3, [r7, #4]
 802aab6:	68db      	ldr	r3, [r3, #12]
 802aab8:	4947      	ldr	r1, [pc, #284]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aaba:	4313      	orrs	r3, r2
 802aabc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802aabe:	687b      	ldr	r3, [r7, #4]
 802aac0:	681b      	ldr	r3, [r3, #0]
 802aac2:	f003 0301 	and.w	r3, r3, #1
 802aac6:	2b00      	cmp	r3, #0
 802aac8:	d055      	beq.n	802ab76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 802aaca:	4b43      	ldr	r3, [pc, #268]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aacc:	699b      	ldr	r3, [r3, #24]
 802aace:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 802aad2:	687b      	ldr	r3, [r7, #4]
 802aad4:	689b      	ldr	r3, [r3, #8]
 802aad6:	4940      	ldr	r1, [pc, #256]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aad8:	4313      	orrs	r3, r2
 802aada:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802aadc:	687b      	ldr	r3, [r7, #4]
 802aade:	685b      	ldr	r3, [r3, #4]
 802aae0:	2b02      	cmp	r3, #2
 802aae2:	d107      	bne.n	802aaf4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802aae4:	4b3c      	ldr	r3, [pc, #240]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aae6:	681b      	ldr	r3, [r3, #0]
 802aae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802aaec:	2b00      	cmp	r3, #0
 802aaee:	d121      	bne.n	802ab34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802aaf0:	2301      	movs	r3, #1
 802aaf2:	e0f6      	b.n	802ace2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802aaf4:	687b      	ldr	r3, [r7, #4]
 802aaf6:	685b      	ldr	r3, [r3, #4]
 802aaf8:	2b03      	cmp	r3, #3
 802aafa:	d107      	bne.n	802ab0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802aafc:	4b36      	ldr	r3, [pc, #216]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aafe:	681b      	ldr	r3, [r3, #0]
 802ab00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802ab04:	2b00      	cmp	r3, #0
 802ab06:	d115      	bne.n	802ab34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802ab08:	2301      	movs	r3, #1
 802ab0a:	e0ea      	b.n	802ace2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 802ab0c:	687b      	ldr	r3, [r7, #4]
 802ab0e:	685b      	ldr	r3, [r3, #4]
 802ab10:	2b01      	cmp	r3, #1
 802ab12:	d107      	bne.n	802ab24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802ab14:	4b30      	ldr	r3, [pc, #192]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802ab16:	681b      	ldr	r3, [r3, #0]
 802ab18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802ab1c:	2b00      	cmp	r3, #0
 802ab1e:	d109      	bne.n	802ab34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802ab20:	2301      	movs	r3, #1
 802ab22:	e0de      	b.n	802ace2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802ab24:	4b2c      	ldr	r3, [pc, #176]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802ab26:	681b      	ldr	r3, [r3, #0]
 802ab28:	f003 0304 	and.w	r3, r3, #4
 802ab2c:	2b00      	cmp	r3, #0
 802ab2e:	d101      	bne.n	802ab34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802ab30:	2301      	movs	r3, #1
 802ab32:	e0d6      	b.n	802ace2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 802ab34:	4b28      	ldr	r3, [pc, #160]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802ab36:	691b      	ldr	r3, [r3, #16]
 802ab38:	f023 0207 	bic.w	r2, r3, #7
 802ab3c:	687b      	ldr	r3, [r7, #4]
 802ab3e:	685b      	ldr	r3, [r3, #4]
 802ab40:	4925      	ldr	r1, [pc, #148]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802ab42:	4313      	orrs	r3, r2
 802ab44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802ab46:	f7fe fdb3 	bl	80296b0 <HAL_GetTick>
 802ab4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802ab4c:	e00a      	b.n	802ab64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802ab4e:	f7fe fdaf 	bl	80296b0 <HAL_GetTick>
 802ab52:	4602      	mov	r2, r0
 802ab54:	697b      	ldr	r3, [r7, #20]
 802ab56:	1ad3      	subs	r3, r2, r3
 802ab58:	f241 3288 	movw	r2, #5000	; 0x1388
 802ab5c:	4293      	cmp	r3, r2
 802ab5e:	d901      	bls.n	802ab64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 802ab60:	2303      	movs	r3, #3
 802ab62:	e0be      	b.n	802ace2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802ab64:	4b1c      	ldr	r3, [pc, #112]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802ab66:	691b      	ldr	r3, [r3, #16]
 802ab68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 802ab6c:	687b      	ldr	r3, [r7, #4]
 802ab6e:	685b      	ldr	r3, [r3, #4]
 802ab70:	00db      	lsls	r3, r3, #3
 802ab72:	429a      	cmp	r2, r3
 802ab74:	d1eb      	bne.n	802ab4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802ab76:	687b      	ldr	r3, [r7, #4]
 802ab78:	681b      	ldr	r3, [r3, #0]
 802ab7a:	f003 0302 	and.w	r3, r3, #2
 802ab7e:	2b00      	cmp	r3, #0
 802ab80:	d010      	beq.n	802aba4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 802ab82:	687b      	ldr	r3, [r7, #4]
 802ab84:	68da      	ldr	r2, [r3, #12]
 802ab86:	4b14      	ldr	r3, [pc, #80]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802ab88:	699b      	ldr	r3, [r3, #24]
 802ab8a:	f003 030f 	and.w	r3, r3, #15
 802ab8e:	429a      	cmp	r2, r3
 802ab90:	d208      	bcs.n	802aba4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802ab92:	4b11      	ldr	r3, [pc, #68]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802ab94:	699b      	ldr	r3, [r3, #24]
 802ab96:	f023 020f 	bic.w	r2, r3, #15
 802ab9a:	687b      	ldr	r3, [r7, #4]
 802ab9c:	68db      	ldr	r3, [r3, #12]
 802ab9e:	490e      	ldr	r1, [pc, #56]	; (802abd8 <HAL_RCC_ClockConfig+0x244>)
 802aba0:	4313      	orrs	r3, r2
 802aba2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 802aba4:	4b0b      	ldr	r3, [pc, #44]	; (802abd4 <HAL_RCC_ClockConfig+0x240>)
 802aba6:	681b      	ldr	r3, [r3, #0]
 802aba8:	f003 030f 	and.w	r3, r3, #15
 802abac:	683a      	ldr	r2, [r7, #0]
 802abae:	429a      	cmp	r2, r3
 802abb0:	d214      	bcs.n	802abdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802abb2:	4b08      	ldr	r3, [pc, #32]	; (802abd4 <HAL_RCC_ClockConfig+0x240>)
 802abb4:	681b      	ldr	r3, [r3, #0]
 802abb6:	f023 020f 	bic.w	r2, r3, #15
 802abba:	4906      	ldr	r1, [pc, #24]	; (802abd4 <HAL_RCC_ClockConfig+0x240>)
 802abbc:	683b      	ldr	r3, [r7, #0]
 802abbe:	4313      	orrs	r3, r2
 802abc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802abc2:	4b04      	ldr	r3, [pc, #16]	; (802abd4 <HAL_RCC_ClockConfig+0x240>)
 802abc4:	681b      	ldr	r3, [r3, #0]
 802abc6:	f003 030f 	and.w	r3, r3, #15
 802abca:	683a      	ldr	r2, [r7, #0]
 802abcc:	429a      	cmp	r2, r3
 802abce:	d005      	beq.n	802abdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 802abd0:	2301      	movs	r3, #1
 802abd2:	e086      	b.n	802ace2 <HAL_RCC_ClockConfig+0x34e>
 802abd4:	52002000 	.word	0x52002000
 802abd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 802abdc:	687b      	ldr	r3, [r7, #4]
 802abde:	681b      	ldr	r3, [r3, #0]
 802abe0:	f003 0304 	and.w	r3, r3, #4
 802abe4:	2b00      	cmp	r3, #0
 802abe6:	d010      	beq.n	802ac0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 802abe8:	687b      	ldr	r3, [r7, #4]
 802abea:	691a      	ldr	r2, [r3, #16]
 802abec:	4b3f      	ldr	r3, [pc, #252]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802abee:	699b      	ldr	r3, [r3, #24]
 802abf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802abf4:	429a      	cmp	r2, r3
 802abf6:	d208      	bcs.n	802ac0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 802abf8:	4b3c      	ldr	r3, [pc, #240]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802abfa:	699b      	ldr	r3, [r3, #24]
 802abfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802ac00:	687b      	ldr	r3, [r7, #4]
 802ac02:	691b      	ldr	r3, [r3, #16]
 802ac04:	4939      	ldr	r1, [pc, #228]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802ac06:	4313      	orrs	r3, r2
 802ac08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802ac0a:	687b      	ldr	r3, [r7, #4]
 802ac0c:	681b      	ldr	r3, [r3, #0]
 802ac0e:	f003 0308 	and.w	r3, r3, #8
 802ac12:	2b00      	cmp	r3, #0
 802ac14:	d010      	beq.n	802ac38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 802ac16:	687b      	ldr	r3, [r7, #4]
 802ac18:	695a      	ldr	r2, [r3, #20]
 802ac1a:	4b34      	ldr	r3, [pc, #208]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802ac1c:	69db      	ldr	r3, [r3, #28]
 802ac1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802ac22:	429a      	cmp	r2, r3
 802ac24:	d208      	bcs.n	802ac38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 802ac26:	4b31      	ldr	r3, [pc, #196]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802ac28:	69db      	ldr	r3, [r3, #28]
 802ac2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802ac2e:	687b      	ldr	r3, [r7, #4]
 802ac30:	695b      	ldr	r3, [r3, #20]
 802ac32:	492e      	ldr	r1, [pc, #184]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802ac34:	4313      	orrs	r3, r2
 802ac36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802ac38:	687b      	ldr	r3, [r7, #4]
 802ac3a:	681b      	ldr	r3, [r3, #0]
 802ac3c:	f003 0310 	and.w	r3, r3, #16
 802ac40:	2b00      	cmp	r3, #0
 802ac42:	d010      	beq.n	802ac66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 802ac44:	687b      	ldr	r3, [r7, #4]
 802ac46:	699a      	ldr	r2, [r3, #24]
 802ac48:	4b28      	ldr	r3, [pc, #160]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802ac4a:	69db      	ldr	r3, [r3, #28]
 802ac4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802ac50:	429a      	cmp	r2, r3
 802ac52:	d208      	bcs.n	802ac66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 802ac54:	4b25      	ldr	r3, [pc, #148]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802ac56:	69db      	ldr	r3, [r3, #28]
 802ac58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 802ac5c:	687b      	ldr	r3, [r7, #4]
 802ac5e:	699b      	ldr	r3, [r3, #24]
 802ac60:	4922      	ldr	r1, [pc, #136]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802ac62:	4313      	orrs	r3, r2
 802ac64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 802ac66:	687b      	ldr	r3, [r7, #4]
 802ac68:	681b      	ldr	r3, [r3, #0]
 802ac6a:	f003 0320 	and.w	r3, r3, #32
 802ac6e:	2b00      	cmp	r3, #0
 802ac70:	d010      	beq.n	802ac94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 802ac72:	687b      	ldr	r3, [r7, #4]
 802ac74:	69da      	ldr	r2, [r3, #28]
 802ac76:	4b1d      	ldr	r3, [pc, #116]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802ac78:	6a1b      	ldr	r3, [r3, #32]
 802ac7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802ac7e:	429a      	cmp	r2, r3
 802ac80:	d208      	bcs.n	802ac94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 802ac82:	4b1a      	ldr	r3, [pc, #104]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802ac84:	6a1b      	ldr	r3, [r3, #32]
 802ac86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802ac8a:	687b      	ldr	r3, [r7, #4]
 802ac8c:	69db      	ldr	r3, [r3, #28]
 802ac8e:	4917      	ldr	r1, [pc, #92]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802ac90:	4313      	orrs	r3, r2
 802ac92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802ac94:	f000 f834 	bl	802ad00 <HAL_RCC_GetSysClockFreq>
 802ac98:	4602      	mov	r2, r0
 802ac9a:	4b14      	ldr	r3, [pc, #80]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802ac9c:	699b      	ldr	r3, [r3, #24]
 802ac9e:	0a1b      	lsrs	r3, r3, #8
 802aca0:	f003 030f 	and.w	r3, r3, #15
 802aca4:	4912      	ldr	r1, [pc, #72]	; (802acf0 <HAL_RCC_ClockConfig+0x35c>)
 802aca6:	5ccb      	ldrb	r3, [r1, r3]
 802aca8:	f003 031f 	and.w	r3, r3, #31
 802acac:	fa22 f303 	lsr.w	r3, r2, r3
 802acb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802acb2:	4b0e      	ldr	r3, [pc, #56]	; (802acec <HAL_RCC_ClockConfig+0x358>)
 802acb4:	699b      	ldr	r3, [r3, #24]
 802acb6:	f003 030f 	and.w	r3, r3, #15
 802acba:	4a0d      	ldr	r2, [pc, #52]	; (802acf0 <HAL_RCC_ClockConfig+0x35c>)
 802acbc:	5cd3      	ldrb	r3, [r2, r3]
 802acbe:	f003 031f 	and.w	r3, r3, #31
 802acc2:	693a      	ldr	r2, [r7, #16]
 802acc4:	fa22 f303 	lsr.w	r3, r2, r3
 802acc8:	4a0a      	ldr	r2, [pc, #40]	; (802acf4 <HAL_RCC_ClockConfig+0x360>)
 802acca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802accc:	4a0a      	ldr	r2, [pc, #40]	; (802acf8 <HAL_RCC_ClockConfig+0x364>)
 802acce:	693b      	ldr	r3, [r7, #16]
 802acd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 802acd2:	4b0a      	ldr	r3, [pc, #40]	; (802acfc <HAL_RCC_ClockConfig+0x368>)
 802acd4:	681b      	ldr	r3, [r3, #0]
 802acd6:	4618      	mov	r0, r3
 802acd8:	f7fe fca0 	bl	802961c <HAL_InitTick>
 802acdc:	4603      	mov	r3, r0
 802acde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 802ace0:	7bfb      	ldrb	r3, [r7, #15]
}
 802ace2:	4618      	mov	r0, r3
 802ace4:	3718      	adds	r7, #24
 802ace6:	46bd      	mov	sp, r7
 802ace8:	bd80      	pop	{r7, pc}
 802acea:	bf00      	nop
 802acec:	58024400 	.word	0x58024400
 802acf0:	08030d18 	.word	0x08030d18
 802acf4:	24000044 	.word	0x24000044
 802acf8:	24000040 	.word	0x24000040
 802acfc:	24000048 	.word	0x24000048

0802ad00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802ad00:	b480      	push	{r7}
 802ad02:	b089      	sub	sp, #36	; 0x24
 802ad04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 802ad06:	4bb3      	ldr	r3, [pc, #716]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802ad08:	691b      	ldr	r3, [r3, #16]
 802ad0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802ad0e:	2b18      	cmp	r3, #24
 802ad10:	f200 8155 	bhi.w	802afbe <HAL_RCC_GetSysClockFreq+0x2be>
 802ad14:	a201      	add	r2, pc, #4	; (adr r2, 802ad1c <HAL_RCC_GetSysClockFreq+0x1c>)
 802ad16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ad1a:	bf00      	nop
 802ad1c:	0802ad81 	.word	0x0802ad81
 802ad20:	0802afbf 	.word	0x0802afbf
 802ad24:	0802afbf 	.word	0x0802afbf
 802ad28:	0802afbf 	.word	0x0802afbf
 802ad2c:	0802afbf 	.word	0x0802afbf
 802ad30:	0802afbf 	.word	0x0802afbf
 802ad34:	0802afbf 	.word	0x0802afbf
 802ad38:	0802afbf 	.word	0x0802afbf
 802ad3c:	0802ada7 	.word	0x0802ada7
 802ad40:	0802afbf 	.word	0x0802afbf
 802ad44:	0802afbf 	.word	0x0802afbf
 802ad48:	0802afbf 	.word	0x0802afbf
 802ad4c:	0802afbf 	.word	0x0802afbf
 802ad50:	0802afbf 	.word	0x0802afbf
 802ad54:	0802afbf 	.word	0x0802afbf
 802ad58:	0802afbf 	.word	0x0802afbf
 802ad5c:	0802adad 	.word	0x0802adad
 802ad60:	0802afbf 	.word	0x0802afbf
 802ad64:	0802afbf 	.word	0x0802afbf
 802ad68:	0802afbf 	.word	0x0802afbf
 802ad6c:	0802afbf 	.word	0x0802afbf
 802ad70:	0802afbf 	.word	0x0802afbf
 802ad74:	0802afbf 	.word	0x0802afbf
 802ad78:	0802afbf 	.word	0x0802afbf
 802ad7c:	0802adb3 	.word	0x0802adb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802ad80:	4b94      	ldr	r3, [pc, #592]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802ad82:	681b      	ldr	r3, [r3, #0]
 802ad84:	f003 0320 	and.w	r3, r3, #32
 802ad88:	2b00      	cmp	r3, #0
 802ad8a:	d009      	beq.n	802ada0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802ad8c:	4b91      	ldr	r3, [pc, #580]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802ad8e:	681b      	ldr	r3, [r3, #0]
 802ad90:	08db      	lsrs	r3, r3, #3
 802ad92:	f003 0303 	and.w	r3, r3, #3
 802ad96:	4a90      	ldr	r2, [pc, #576]	; (802afd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 802ad98:	fa22 f303 	lsr.w	r3, r2, r3
 802ad9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 802ad9e:	e111      	b.n	802afc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 802ada0:	4b8d      	ldr	r3, [pc, #564]	; (802afd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 802ada2:	61bb      	str	r3, [r7, #24]
      break;
 802ada4:	e10e      	b.n	802afc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 802ada6:	4b8d      	ldr	r3, [pc, #564]	; (802afdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 802ada8:	61bb      	str	r3, [r7, #24]
      break;
 802adaa:	e10b      	b.n	802afc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 802adac:	4b8c      	ldr	r3, [pc, #560]	; (802afe0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 802adae:	61bb      	str	r3, [r7, #24]
      break;
 802adb0:	e108      	b.n	802afc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802adb2:	4b88      	ldr	r3, [pc, #544]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802adb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802adb6:	f003 0303 	and.w	r3, r3, #3
 802adba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 802adbc:	4b85      	ldr	r3, [pc, #532]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802adbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802adc0:	091b      	lsrs	r3, r3, #4
 802adc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802adc6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 802adc8:	4b82      	ldr	r3, [pc, #520]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802adcc:	f003 0301 	and.w	r3, r3, #1
 802add0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 802add2:	4b80      	ldr	r3, [pc, #512]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802add4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802add6:	08db      	lsrs	r3, r3, #3
 802add8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802addc:	68fa      	ldr	r2, [r7, #12]
 802adde:	fb02 f303 	mul.w	r3, r2, r3
 802ade2:	ee07 3a90 	vmov	s15, r3
 802ade6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802adea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 802adee:	693b      	ldr	r3, [r7, #16]
 802adf0:	2b00      	cmp	r3, #0
 802adf2:	f000 80e1 	beq.w	802afb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 802adf6:	697b      	ldr	r3, [r7, #20]
 802adf8:	2b02      	cmp	r3, #2
 802adfa:	f000 8083 	beq.w	802af04 <HAL_RCC_GetSysClockFreq+0x204>
 802adfe:	697b      	ldr	r3, [r7, #20]
 802ae00:	2b02      	cmp	r3, #2
 802ae02:	f200 80a1 	bhi.w	802af48 <HAL_RCC_GetSysClockFreq+0x248>
 802ae06:	697b      	ldr	r3, [r7, #20]
 802ae08:	2b00      	cmp	r3, #0
 802ae0a:	d003      	beq.n	802ae14 <HAL_RCC_GetSysClockFreq+0x114>
 802ae0c:	697b      	ldr	r3, [r7, #20]
 802ae0e:	2b01      	cmp	r3, #1
 802ae10:	d056      	beq.n	802aec0 <HAL_RCC_GetSysClockFreq+0x1c0>
 802ae12:	e099      	b.n	802af48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802ae14:	4b6f      	ldr	r3, [pc, #444]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802ae16:	681b      	ldr	r3, [r3, #0]
 802ae18:	f003 0320 	and.w	r3, r3, #32
 802ae1c:	2b00      	cmp	r3, #0
 802ae1e:	d02d      	beq.n	802ae7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802ae20:	4b6c      	ldr	r3, [pc, #432]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802ae22:	681b      	ldr	r3, [r3, #0]
 802ae24:	08db      	lsrs	r3, r3, #3
 802ae26:	f003 0303 	and.w	r3, r3, #3
 802ae2a:	4a6b      	ldr	r2, [pc, #428]	; (802afd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 802ae2c:	fa22 f303 	lsr.w	r3, r2, r3
 802ae30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802ae32:	687b      	ldr	r3, [r7, #4]
 802ae34:	ee07 3a90 	vmov	s15, r3
 802ae38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802ae3c:	693b      	ldr	r3, [r7, #16]
 802ae3e:	ee07 3a90 	vmov	s15, r3
 802ae42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802ae46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802ae4a:	4b62      	ldr	r3, [pc, #392]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802ae4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ae4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802ae52:	ee07 3a90 	vmov	s15, r3
 802ae56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802ae5a:	ed97 6a02 	vldr	s12, [r7, #8]
 802ae5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 802afe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 802ae62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802ae66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802ae6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802ae6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802ae72:	ee67 7a27 	vmul.f32	s15, s14, s15
 802ae76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 802ae7a:	e087      	b.n	802af8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802ae7c:	693b      	ldr	r3, [r7, #16]
 802ae7e:	ee07 3a90 	vmov	s15, r3
 802ae82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802ae86:	eddf 6a58 	vldr	s13, [pc, #352]	; 802afe8 <HAL_RCC_GetSysClockFreq+0x2e8>
 802ae8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802ae8e:	4b51      	ldr	r3, [pc, #324]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802ae90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ae92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802ae96:	ee07 3a90 	vmov	s15, r3
 802ae9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802ae9e:	ed97 6a02 	vldr	s12, [r7, #8]
 802aea2:	eddf 5a50 	vldr	s11, [pc, #320]	; 802afe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 802aea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802aeaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802aeae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802aeb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802aeb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 802aeba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802aebe:	e065      	b.n	802af8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802aec0:	693b      	ldr	r3, [r7, #16]
 802aec2:	ee07 3a90 	vmov	s15, r3
 802aec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802aeca:	eddf 6a48 	vldr	s13, [pc, #288]	; 802afec <HAL_RCC_GetSysClockFreq+0x2ec>
 802aece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802aed2:	4b40      	ldr	r3, [pc, #256]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802aed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802aed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802aeda:	ee07 3a90 	vmov	s15, r3
 802aede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802aee2:	ed97 6a02 	vldr	s12, [r7, #8]
 802aee6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802afe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 802aeea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802aeee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802aef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802aef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802aefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 802aefe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802af02:	e043      	b.n	802af8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802af04:	693b      	ldr	r3, [r7, #16]
 802af06:	ee07 3a90 	vmov	s15, r3
 802af0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802af0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 802aff0 <HAL_RCC_GetSysClockFreq+0x2f0>
 802af12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802af16:	4b2f      	ldr	r3, [pc, #188]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802af18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802af1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802af1e:	ee07 3a90 	vmov	s15, r3
 802af22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802af26:	ed97 6a02 	vldr	s12, [r7, #8]
 802af2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 802afe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 802af2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802af32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802af36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802af3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802af3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 802af42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802af46:	e021      	b.n	802af8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802af48:	693b      	ldr	r3, [r7, #16]
 802af4a:	ee07 3a90 	vmov	s15, r3
 802af4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802af52:	eddf 6a26 	vldr	s13, [pc, #152]	; 802afec <HAL_RCC_GetSysClockFreq+0x2ec>
 802af56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802af5a:	4b1e      	ldr	r3, [pc, #120]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802af5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802af5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802af62:	ee07 3a90 	vmov	s15, r3
 802af66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802af6a:	ed97 6a02 	vldr	s12, [r7, #8]
 802af6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 802afe4 <HAL_RCC_GetSysClockFreq+0x2e4>
 802af72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802af76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802af7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802af7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802af82:	ee67 7a27 	vmul.f32	s15, s14, s15
 802af86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802af8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 802af8c:	4b11      	ldr	r3, [pc, #68]	; (802afd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802af8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802af90:	0a5b      	lsrs	r3, r3, #9
 802af92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802af96:	3301      	adds	r3, #1
 802af98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 802af9a:	683b      	ldr	r3, [r7, #0]
 802af9c:	ee07 3a90 	vmov	s15, r3
 802afa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802afa4:	edd7 6a07 	vldr	s13, [r7, #28]
 802afa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802afac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802afb0:	ee17 3a90 	vmov	r3, s15
 802afb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 802afb6:	e005      	b.n	802afc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 802afb8:	2300      	movs	r3, #0
 802afba:	61bb      	str	r3, [r7, #24]
      break;
 802afbc:	e002      	b.n	802afc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 802afbe:	4b07      	ldr	r3, [pc, #28]	; (802afdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 802afc0:	61bb      	str	r3, [r7, #24]
      break;
 802afc2:	bf00      	nop
  }

  return sysclockfreq;
 802afc4:	69bb      	ldr	r3, [r7, #24]
}
 802afc6:	4618      	mov	r0, r3
 802afc8:	3724      	adds	r7, #36	; 0x24
 802afca:	46bd      	mov	sp, r7
 802afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802afd0:	4770      	bx	lr
 802afd2:	bf00      	nop
 802afd4:	58024400 	.word	0x58024400
 802afd8:	03d09000 	.word	0x03d09000
 802afdc:	003d0900 	.word	0x003d0900
 802afe0:	017d7840 	.word	0x017d7840
 802afe4:	46000000 	.word	0x46000000
 802afe8:	4c742400 	.word	0x4c742400
 802afec:	4a742400 	.word	0x4a742400
 802aff0:	4bbebc20 	.word	0x4bbebc20

0802aff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802aff4:	b580      	push	{r7, lr}
 802aff6:	b082      	sub	sp, #8
 802aff8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 802affa:	f7ff fe81 	bl	802ad00 <HAL_RCC_GetSysClockFreq>
 802affe:	4602      	mov	r2, r0
 802b000:	4b10      	ldr	r3, [pc, #64]	; (802b044 <HAL_RCC_GetHCLKFreq+0x50>)
 802b002:	699b      	ldr	r3, [r3, #24]
 802b004:	0a1b      	lsrs	r3, r3, #8
 802b006:	f003 030f 	and.w	r3, r3, #15
 802b00a:	490f      	ldr	r1, [pc, #60]	; (802b048 <HAL_RCC_GetHCLKFreq+0x54>)
 802b00c:	5ccb      	ldrb	r3, [r1, r3]
 802b00e:	f003 031f 	and.w	r3, r3, #31
 802b012:	fa22 f303 	lsr.w	r3, r2, r3
 802b016:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802b018:	4b0a      	ldr	r3, [pc, #40]	; (802b044 <HAL_RCC_GetHCLKFreq+0x50>)
 802b01a:	699b      	ldr	r3, [r3, #24]
 802b01c:	f003 030f 	and.w	r3, r3, #15
 802b020:	4a09      	ldr	r2, [pc, #36]	; (802b048 <HAL_RCC_GetHCLKFreq+0x54>)
 802b022:	5cd3      	ldrb	r3, [r2, r3]
 802b024:	f003 031f 	and.w	r3, r3, #31
 802b028:	687a      	ldr	r2, [r7, #4]
 802b02a:	fa22 f303 	lsr.w	r3, r2, r3
 802b02e:	4a07      	ldr	r2, [pc, #28]	; (802b04c <HAL_RCC_GetHCLKFreq+0x58>)
 802b030:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802b032:	4a07      	ldr	r2, [pc, #28]	; (802b050 <HAL_RCC_GetHCLKFreq+0x5c>)
 802b034:	687b      	ldr	r3, [r7, #4]
 802b036:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 802b038:	4b04      	ldr	r3, [pc, #16]	; (802b04c <HAL_RCC_GetHCLKFreq+0x58>)
 802b03a:	681b      	ldr	r3, [r3, #0]
}
 802b03c:	4618      	mov	r0, r3
 802b03e:	3708      	adds	r7, #8
 802b040:	46bd      	mov	sp, r7
 802b042:	bd80      	pop	{r7, pc}
 802b044:	58024400 	.word	0x58024400
 802b048:	08030d18 	.word	0x08030d18
 802b04c:	24000044 	.word	0x24000044
 802b050:	24000040 	.word	0x24000040

0802b054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802b054:	b580      	push	{r7, lr}
 802b056:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 802b058:	f7ff ffcc 	bl	802aff4 <HAL_RCC_GetHCLKFreq>
 802b05c:	4602      	mov	r2, r0
 802b05e:	4b06      	ldr	r3, [pc, #24]	; (802b078 <HAL_RCC_GetPCLK1Freq+0x24>)
 802b060:	69db      	ldr	r3, [r3, #28]
 802b062:	091b      	lsrs	r3, r3, #4
 802b064:	f003 0307 	and.w	r3, r3, #7
 802b068:	4904      	ldr	r1, [pc, #16]	; (802b07c <HAL_RCC_GetPCLK1Freq+0x28>)
 802b06a:	5ccb      	ldrb	r3, [r1, r3]
 802b06c:	f003 031f 	and.w	r3, r3, #31
 802b070:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 802b074:	4618      	mov	r0, r3
 802b076:	bd80      	pop	{r7, pc}
 802b078:	58024400 	.word	0x58024400
 802b07c:	08030d18 	.word	0x08030d18

0802b080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802b080:	b580      	push	{r7, lr}
 802b082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 802b084:	f7ff ffb6 	bl	802aff4 <HAL_RCC_GetHCLKFreq>
 802b088:	4602      	mov	r2, r0
 802b08a:	4b06      	ldr	r3, [pc, #24]	; (802b0a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 802b08c:	69db      	ldr	r3, [r3, #28]
 802b08e:	0a1b      	lsrs	r3, r3, #8
 802b090:	f003 0307 	and.w	r3, r3, #7
 802b094:	4904      	ldr	r1, [pc, #16]	; (802b0a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 802b096:	5ccb      	ldrb	r3, [r1, r3]
 802b098:	f003 031f 	and.w	r3, r3, #31
 802b09c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 802b0a0:	4618      	mov	r0, r3
 802b0a2:	bd80      	pop	{r7, pc}
 802b0a4:	58024400 	.word	0x58024400
 802b0a8:	08030d18 	.word	0x08030d18

0802b0ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 802b0ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802b0b0:	b0ca      	sub	sp, #296	; 0x128
 802b0b2:	af00      	add	r7, sp, #0
 802b0b4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 802b0b8:	2300      	movs	r3, #0
 802b0ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 802b0be:	2300      	movs	r3, #0
 802b0c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 802b0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b0cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 802b0d0:	2500      	movs	r5, #0
 802b0d2:	ea54 0305 	orrs.w	r3, r4, r5
 802b0d6:	d049      	beq.n	802b16c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 802b0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b0dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802b0de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802b0e2:	d02f      	beq.n	802b144 <HAL_RCCEx_PeriphCLKConfig+0x98>
 802b0e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802b0e8:	d828      	bhi.n	802b13c <HAL_RCCEx_PeriphCLKConfig+0x90>
 802b0ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802b0ee:	d01a      	beq.n	802b126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 802b0f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802b0f4:	d822      	bhi.n	802b13c <HAL_RCCEx_PeriphCLKConfig+0x90>
 802b0f6:	2b00      	cmp	r3, #0
 802b0f8:	d003      	beq.n	802b102 <HAL_RCCEx_PeriphCLKConfig+0x56>
 802b0fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802b0fe:	d007      	beq.n	802b110 <HAL_RCCEx_PeriphCLKConfig+0x64>
 802b100:	e01c      	b.n	802b13c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802b102:	4bb8      	ldr	r3, [pc, #736]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b106:	4ab7      	ldr	r2, [pc, #732]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b10c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 802b10e:	e01a      	b.n	802b146 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802b110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b114:	3308      	adds	r3, #8
 802b116:	2102      	movs	r1, #2
 802b118:	4618      	mov	r0, r3
 802b11a:	f001 fc8f 	bl	802ca3c <RCCEx_PLL2_Config>
 802b11e:	4603      	mov	r3, r0
 802b120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 802b124:	e00f      	b.n	802b146 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802b126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b12a:	3328      	adds	r3, #40	; 0x28
 802b12c:	2102      	movs	r1, #2
 802b12e:	4618      	mov	r0, r3
 802b130:	f001 fd36 	bl	802cba0 <RCCEx_PLL3_Config>
 802b134:	4603      	mov	r3, r0
 802b136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 802b13a:	e004      	b.n	802b146 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802b13c:	2301      	movs	r3, #1
 802b13e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b142:	e000      	b.n	802b146 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 802b144:	bf00      	nop
    }

    if (ret == HAL_OK)
 802b146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b14a:	2b00      	cmp	r3, #0
 802b14c:	d10a      	bne.n	802b164 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 802b14e:	4ba5      	ldr	r3, [pc, #660]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802b152:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 802b156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b15a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802b15c:	4aa1      	ldr	r2, [pc, #644]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b15e:	430b      	orrs	r3, r1
 802b160:	6513      	str	r3, [r2, #80]	; 0x50
 802b162:	e003      	b.n	802b16c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b164:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b168:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 802b16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b174:	f402 7880 	and.w	r8, r2, #256	; 0x100
 802b178:	f04f 0900 	mov.w	r9, #0
 802b17c:	ea58 0309 	orrs.w	r3, r8, r9
 802b180:	d047      	beq.n	802b212 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 802b182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802b188:	2b04      	cmp	r3, #4
 802b18a:	d82a      	bhi.n	802b1e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 802b18c:	a201      	add	r2, pc, #4	; (adr r2, 802b194 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 802b18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b192:	bf00      	nop
 802b194:	0802b1a9 	.word	0x0802b1a9
 802b198:	0802b1b7 	.word	0x0802b1b7
 802b19c:	0802b1cd 	.word	0x0802b1cd
 802b1a0:	0802b1eb 	.word	0x0802b1eb
 802b1a4:	0802b1eb 	.word	0x0802b1eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802b1a8:	4b8e      	ldr	r3, [pc, #568]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b1ac:	4a8d      	ldr	r2, [pc, #564]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b1ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b1b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802b1b4:	e01a      	b.n	802b1ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802b1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b1ba:	3308      	adds	r3, #8
 802b1bc:	2100      	movs	r1, #0
 802b1be:	4618      	mov	r0, r3
 802b1c0:	f001 fc3c 	bl	802ca3c <RCCEx_PLL2_Config>
 802b1c4:	4603      	mov	r3, r0
 802b1c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802b1ca:	e00f      	b.n	802b1ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802b1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b1d0:	3328      	adds	r3, #40	; 0x28
 802b1d2:	2100      	movs	r1, #0
 802b1d4:	4618      	mov	r0, r3
 802b1d6:	f001 fce3 	bl	802cba0 <RCCEx_PLL3_Config>
 802b1da:	4603      	mov	r3, r0
 802b1dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802b1e0:	e004      	b.n	802b1ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802b1e2:	2301      	movs	r3, #1
 802b1e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b1e8:	e000      	b.n	802b1ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 802b1ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 802b1ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b1f0:	2b00      	cmp	r3, #0
 802b1f2:	d10a      	bne.n	802b20a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802b1f4:	4b7b      	ldr	r3, [pc, #492]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802b1f8:	f023 0107 	bic.w	r1, r3, #7
 802b1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802b202:	4a78      	ldr	r2, [pc, #480]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b204:	430b      	orrs	r3, r1
 802b206:	6513      	str	r3, [r2, #80]	; 0x50
 802b208:	e003      	b.n	802b212 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b20a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b20e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 802b212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b21a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 802b21e:	f04f 0b00 	mov.w	fp, #0
 802b222:	ea5a 030b 	orrs.w	r3, sl, fp
 802b226:	d04c      	beq.n	802b2c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 802b228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b22c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802b22e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b232:	d030      	beq.n	802b296 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 802b234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b238:	d829      	bhi.n	802b28e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 802b23a:	2bc0      	cmp	r3, #192	; 0xc0
 802b23c:	d02d      	beq.n	802b29a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 802b23e:	2bc0      	cmp	r3, #192	; 0xc0
 802b240:	d825      	bhi.n	802b28e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 802b242:	2b80      	cmp	r3, #128	; 0x80
 802b244:	d018      	beq.n	802b278 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 802b246:	2b80      	cmp	r3, #128	; 0x80
 802b248:	d821      	bhi.n	802b28e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 802b24a:	2b00      	cmp	r3, #0
 802b24c:	d002      	beq.n	802b254 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 802b24e:	2b40      	cmp	r3, #64	; 0x40
 802b250:	d007      	beq.n	802b262 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 802b252:	e01c      	b.n	802b28e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802b254:	4b63      	ldr	r3, [pc, #396]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b258:	4a62      	ldr	r2, [pc, #392]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b25a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b25e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 802b260:	e01c      	b.n	802b29c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802b262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b266:	3308      	adds	r3, #8
 802b268:	2100      	movs	r1, #0
 802b26a:	4618      	mov	r0, r3
 802b26c:	f001 fbe6 	bl	802ca3c <RCCEx_PLL2_Config>
 802b270:	4603      	mov	r3, r0
 802b272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 802b276:	e011      	b.n	802b29c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802b278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b27c:	3328      	adds	r3, #40	; 0x28
 802b27e:	2100      	movs	r1, #0
 802b280:	4618      	mov	r0, r3
 802b282:	f001 fc8d 	bl	802cba0 <RCCEx_PLL3_Config>
 802b286:	4603      	mov	r3, r0
 802b288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 802b28c:	e006      	b.n	802b29c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802b28e:	2301      	movs	r3, #1
 802b290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b294:	e002      	b.n	802b29c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 802b296:	bf00      	nop
 802b298:	e000      	b.n	802b29c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 802b29a:	bf00      	nop
    }

    if (ret == HAL_OK)
 802b29c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b2a0:	2b00      	cmp	r3, #0
 802b2a2:	d10a      	bne.n	802b2ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 802b2a4:	4b4f      	ldr	r3, [pc, #316]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802b2a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 802b2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b2b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802b2b2:	4a4c      	ldr	r2, [pc, #304]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b2b4:	430b      	orrs	r3, r1
 802b2b6:	6513      	str	r3, [r2, #80]	; 0x50
 802b2b8:	e003      	b.n	802b2c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b2be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 802b2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 802b2ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 802b2d2:	2300      	movs	r3, #0
 802b2d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 802b2d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 802b2dc:	460b      	mov	r3, r1
 802b2de:	4313      	orrs	r3, r2
 802b2e0:	d053      	beq.n	802b38a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 802b2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b2e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 802b2ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802b2ee:	d035      	beq.n	802b35c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 802b2f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802b2f4:	d82e      	bhi.n	802b354 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 802b2f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 802b2fa:	d031      	beq.n	802b360 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 802b2fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 802b300:	d828      	bhi.n	802b354 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 802b302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802b306:	d01a      	beq.n	802b33e <HAL_RCCEx_PeriphCLKConfig+0x292>
 802b308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802b30c:	d822      	bhi.n	802b354 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 802b30e:	2b00      	cmp	r3, #0
 802b310:	d003      	beq.n	802b31a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 802b312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802b316:	d007      	beq.n	802b328 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 802b318:	e01c      	b.n	802b354 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802b31a:	4b32      	ldr	r3, [pc, #200]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b31e:	4a31      	ldr	r2, [pc, #196]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b324:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802b326:	e01c      	b.n	802b362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802b328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b32c:	3308      	adds	r3, #8
 802b32e:	2100      	movs	r1, #0
 802b330:	4618      	mov	r0, r3
 802b332:	f001 fb83 	bl	802ca3c <RCCEx_PLL2_Config>
 802b336:	4603      	mov	r3, r0
 802b338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 802b33c:	e011      	b.n	802b362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802b33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b342:	3328      	adds	r3, #40	; 0x28
 802b344:	2100      	movs	r1, #0
 802b346:	4618      	mov	r0, r3
 802b348:	f001 fc2a 	bl	802cba0 <RCCEx_PLL3_Config>
 802b34c:	4603      	mov	r3, r0
 802b34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802b352:	e006      	b.n	802b362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 802b354:	2301      	movs	r3, #1
 802b356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b35a:	e002      	b.n	802b362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 802b35c:	bf00      	nop
 802b35e:	e000      	b.n	802b362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 802b360:	bf00      	nop
    }

    if (ret == HAL_OK)
 802b362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b366:	2b00      	cmp	r3, #0
 802b368:	d10b      	bne.n	802b382 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 802b36a:	4b1e      	ldr	r3, [pc, #120]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802b36e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 802b372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b376:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 802b37a:	4a1a      	ldr	r2, [pc, #104]	; (802b3e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802b37c:	430b      	orrs	r3, r1
 802b37e:	6593      	str	r3, [r2, #88]	; 0x58
 802b380:	e003      	b.n	802b38a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b386:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 802b38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b392:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 802b396:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 802b39a:	2300      	movs	r3, #0
 802b39c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 802b3a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 802b3a4:	460b      	mov	r3, r1
 802b3a6:	4313      	orrs	r3, r2
 802b3a8:	d056      	beq.n	802b458 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 802b3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b3ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802b3b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802b3b6:	d038      	beq.n	802b42a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 802b3b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802b3bc:	d831      	bhi.n	802b422 <HAL_RCCEx_PeriphCLKConfig+0x376>
 802b3be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 802b3c2:	d034      	beq.n	802b42e <HAL_RCCEx_PeriphCLKConfig+0x382>
 802b3c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 802b3c8:	d82b      	bhi.n	802b422 <HAL_RCCEx_PeriphCLKConfig+0x376>
 802b3ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802b3ce:	d01d      	beq.n	802b40c <HAL_RCCEx_PeriphCLKConfig+0x360>
 802b3d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802b3d4:	d825      	bhi.n	802b422 <HAL_RCCEx_PeriphCLKConfig+0x376>
 802b3d6:	2b00      	cmp	r3, #0
 802b3d8:	d006      	beq.n	802b3e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 802b3da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802b3de:	d00a      	beq.n	802b3f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 802b3e0:	e01f      	b.n	802b422 <HAL_RCCEx_PeriphCLKConfig+0x376>
 802b3e2:	bf00      	nop
 802b3e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802b3e8:	4ba2      	ldr	r3, [pc, #648]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b3ec:	4aa1      	ldr	r2, [pc, #644]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b3ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b3f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802b3f4:	e01c      	b.n	802b430 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802b3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b3fa:	3308      	adds	r3, #8
 802b3fc:	2100      	movs	r1, #0
 802b3fe:	4618      	mov	r0, r3
 802b400:	f001 fb1c 	bl	802ca3c <RCCEx_PLL2_Config>
 802b404:	4603      	mov	r3, r0
 802b406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 802b40a:	e011      	b.n	802b430 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802b40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b410:	3328      	adds	r3, #40	; 0x28
 802b412:	2100      	movs	r1, #0
 802b414:	4618      	mov	r0, r3
 802b416:	f001 fbc3 	bl	802cba0 <RCCEx_PLL3_Config>
 802b41a:	4603      	mov	r3, r0
 802b41c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802b420:	e006      	b.n	802b430 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 802b422:	2301      	movs	r3, #1
 802b424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b428:	e002      	b.n	802b430 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 802b42a:	bf00      	nop
 802b42c:	e000      	b.n	802b430 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 802b42e:	bf00      	nop
    }

    if (ret == HAL_OK)
 802b430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b434:	2b00      	cmp	r3, #0
 802b436:	d10b      	bne.n	802b450 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 802b438:	4b8e      	ldr	r3, [pc, #568]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b43a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802b43c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 802b440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b444:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802b448:	4a8a      	ldr	r2, [pc, #552]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b44a:	430b      	orrs	r3, r1
 802b44c:	6593      	str	r3, [r2, #88]	; 0x58
 802b44e:	e003      	b.n	802b458 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b450:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b454:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 802b458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b460:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 802b464:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 802b468:	2300      	movs	r3, #0
 802b46a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 802b46e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 802b472:	460b      	mov	r3, r1
 802b474:	4313      	orrs	r3, r2
 802b476:	d03a      	beq.n	802b4ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 802b478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b47c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b47e:	2b30      	cmp	r3, #48	; 0x30
 802b480:	d01f      	beq.n	802b4c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 802b482:	2b30      	cmp	r3, #48	; 0x30
 802b484:	d819      	bhi.n	802b4ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 802b486:	2b20      	cmp	r3, #32
 802b488:	d00c      	beq.n	802b4a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 802b48a:	2b20      	cmp	r3, #32
 802b48c:	d815      	bhi.n	802b4ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 802b48e:	2b00      	cmp	r3, #0
 802b490:	d019      	beq.n	802b4c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 802b492:	2b10      	cmp	r3, #16
 802b494:	d111      	bne.n	802b4ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802b496:	4b77      	ldr	r3, [pc, #476]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b49a:	4a76      	ldr	r2, [pc, #472]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b49c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b4a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 802b4a2:	e011      	b.n	802b4c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802b4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b4a8:	3308      	adds	r3, #8
 802b4aa:	2102      	movs	r1, #2
 802b4ac:	4618      	mov	r0, r3
 802b4ae:	f001 fac5 	bl	802ca3c <RCCEx_PLL2_Config>
 802b4b2:	4603      	mov	r3, r0
 802b4b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 802b4b8:	e006      	b.n	802b4c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 802b4ba:	2301      	movs	r3, #1
 802b4bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b4c0:	e002      	b.n	802b4c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 802b4c2:	bf00      	nop
 802b4c4:	e000      	b.n	802b4c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 802b4c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 802b4c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b4cc:	2b00      	cmp	r3, #0
 802b4ce:	d10a      	bne.n	802b4e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 802b4d0:	4b68      	ldr	r3, [pc, #416]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b4d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b4d4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 802b4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b4de:	4a65      	ldr	r2, [pc, #404]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b4e0:	430b      	orrs	r3, r1
 802b4e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 802b4e4:	e003      	b.n	802b4ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b4e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b4ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 802b4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b4f6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 802b4fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 802b4fe:	2300      	movs	r3, #0
 802b500:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 802b504:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 802b508:	460b      	mov	r3, r1
 802b50a:	4313      	orrs	r3, r2
 802b50c:	d051      	beq.n	802b5b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 802b50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802b514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802b518:	d035      	beq.n	802b586 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 802b51a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802b51e:	d82e      	bhi.n	802b57e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 802b520:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 802b524:	d031      	beq.n	802b58a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 802b526:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 802b52a:	d828      	bhi.n	802b57e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 802b52c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802b530:	d01a      	beq.n	802b568 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 802b532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802b536:	d822      	bhi.n	802b57e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 802b538:	2b00      	cmp	r3, #0
 802b53a:	d003      	beq.n	802b544 <HAL_RCCEx_PeriphCLKConfig+0x498>
 802b53c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802b540:	d007      	beq.n	802b552 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 802b542:	e01c      	b.n	802b57e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802b544:	4b4b      	ldr	r3, [pc, #300]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b548:	4a4a      	ldr	r2, [pc, #296]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b54a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b54e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 802b550:	e01c      	b.n	802b58c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802b552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b556:	3308      	adds	r3, #8
 802b558:	2100      	movs	r1, #0
 802b55a:	4618      	mov	r0, r3
 802b55c:	f001 fa6e 	bl	802ca3c <RCCEx_PLL2_Config>
 802b560:	4603      	mov	r3, r0
 802b562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 802b566:	e011      	b.n	802b58c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802b568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b56c:	3328      	adds	r3, #40	; 0x28
 802b56e:	2100      	movs	r1, #0
 802b570:	4618      	mov	r0, r3
 802b572:	f001 fb15 	bl	802cba0 <RCCEx_PLL3_Config>
 802b576:	4603      	mov	r3, r0
 802b578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 802b57c:	e006      	b.n	802b58c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802b57e:	2301      	movs	r3, #1
 802b580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b584:	e002      	b.n	802b58c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 802b586:	bf00      	nop
 802b588:	e000      	b.n	802b58c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 802b58a:	bf00      	nop
    }

    if (ret == HAL_OK)
 802b58c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b590:	2b00      	cmp	r3, #0
 802b592:	d10a      	bne.n	802b5aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 802b594:	4b37      	ldr	r3, [pc, #220]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802b598:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 802b59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b5a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802b5a2:	4a34      	ldr	r2, [pc, #208]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b5a4:	430b      	orrs	r3, r1
 802b5a6:	6513      	str	r3, [r2, #80]	; 0x50
 802b5a8:	e003      	b.n	802b5b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b5aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b5ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 802b5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b5ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 802b5be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802b5c2:	2300      	movs	r3, #0
 802b5c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 802b5c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 802b5cc:	460b      	mov	r3, r1
 802b5ce:	4313      	orrs	r3, r2
 802b5d0:	d056      	beq.n	802b680 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 802b5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b5d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b5d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802b5dc:	d033      	beq.n	802b646 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 802b5de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802b5e2:	d82c      	bhi.n	802b63e <HAL_RCCEx_PeriphCLKConfig+0x592>
 802b5e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802b5e8:	d02f      	beq.n	802b64a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 802b5ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802b5ee:	d826      	bhi.n	802b63e <HAL_RCCEx_PeriphCLKConfig+0x592>
 802b5f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 802b5f4:	d02b      	beq.n	802b64e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 802b5f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 802b5fa:	d820      	bhi.n	802b63e <HAL_RCCEx_PeriphCLKConfig+0x592>
 802b5fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802b600:	d012      	beq.n	802b628 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 802b602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802b606:	d81a      	bhi.n	802b63e <HAL_RCCEx_PeriphCLKConfig+0x592>
 802b608:	2b00      	cmp	r3, #0
 802b60a:	d022      	beq.n	802b652 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 802b60c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802b610:	d115      	bne.n	802b63e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802b612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b616:	3308      	adds	r3, #8
 802b618:	2101      	movs	r1, #1
 802b61a:	4618      	mov	r0, r3
 802b61c:	f001 fa0e 	bl	802ca3c <RCCEx_PLL2_Config>
 802b620:	4603      	mov	r3, r0
 802b622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 802b626:	e015      	b.n	802b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802b628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b62c:	3328      	adds	r3, #40	; 0x28
 802b62e:	2101      	movs	r1, #1
 802b630:	4618      	mov	r0, r3
 802b632:	f001 fab5 	bl	802cba0 <RCCEx_PLL3_Config>
 802b636:	4603      	mov	r3, r0
 802b638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 802b63c:	e00a      	b.n	802b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802b63e:	2301      	movs	r3, #1
 802b640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b644:	e006      	b.n	802b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802b646:	bf00      	nop
 802b648:	e004      	b.n	802b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802b64a:	bf00      	nop
 802b64c:	e002      	b.n	802b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802b64e:	bf00      	nop
 802b650:	e000      	b.n	802b654 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802b652:	bf00      	nop
    }

    if (ret == HAL_OK)
 802b654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b658:	2b00      	cmp	r3, #0
 802b65a:	d10d      	bne.n	802b678 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 802b65c:	4b05      	ldr	r3, [pc, #20]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802b660:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 802b664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802b66a:	4a02      	ldr	r2, [pc, #8]	; (802b674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802b66c:	430b      	orrs	r3, r1
 802b66e:	6513      	str	r3, [r2, #80]	; 0x50
 802b670:	e006      	b.n	802b680 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 802b672:	bf00      	nop
 802b674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b678:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b67c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 802b680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b688:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 802b68c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802b690:	2300      	movs	r3, #0
 802b692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802b696:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 802b69a:	460b      	mov	r3, r1
 802b69c:	4313      	orrs	r3, r2
 802b69e:	d055      	beq.n	802b74c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 802b6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b6a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 802b6a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802b6ac:	d033      	beq.n	802b716 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 802b6ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802b6b2:	d82c      	bhi.n	802b70e <HAL_RCCEx_PeriphCLKConfig+0x662>
 802b6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802b6b8:	d02f      	beq.n	802b71a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 802b6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802b6be:	d826      	bhi.n	802b70e <HAL_RCCEx_PeriphCLKConfig+0x662>
 802b6c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802b6c4:	d02b      	beq.n	802b71e <HAL_RCCEx_PeriphCLKConfig+0x672>
 802b6c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802b6ca:	d820      	bhi.n	802b70e <HAL_RCCEx_PeriphCLKConfig+0x662>
 802b6cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802b6d0:	d012      	beq.n	802b6f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 802b6d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802b6d6:	d81a      	bhi.n	802b70e <HAL_RCCEx_PeriphCLKConfig+0x662>
 802b6d8:	2b00      	cmp	r3, #0
 802b6da:	d022      	beq.n	802b722 <HAL_RCCEx_PeriphCLKConfig+0x676>
 802b6dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802b6e0:	d115      	bne.n	802b70e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802b6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b6e6:	3308      	adds	r3, #8
 802b6e8:	2101      	movs	r1, #1
 802b6ea:	4618      	mov	r0, r3
 802b6ec:	f001 f9a6 	bl	802ca3c <RCCEx_PLL2_Config>
 802b6f0:	4603      	mov	r3, r0
 802b6f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 802b6f6:	e015      	b.n	802b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802b6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b6fc:	3328      	adds	r3, #40	; 0x28
 802b6fe:	2101      	movs	r1, #1
 802b700:	4618      	mov	r0, r3
 802b702:	f001 fa4d 	bl	802cba0 <RCCEx_PLL3_Config>
 802b706:	4603      	mov	r3, r0
 802b708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 802b70c:	e00a      	b.n	802b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 802b70e:	2301      	movs	r3, #1
 802b710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b714:	e006      	b.n	802b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802b716:	bf00      	nop
 802b718:	e004      	b.n	802b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802b71a:	bf00      	nop
 802b71c:	e002      	b.n	802b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802b71e:	bf00      	nop
 802b720:	e000      	b.n	802b724 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802b722:	bf00      	nop
    }

    if (ret == HAL_OK)
 802b724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b728:	2b00      	cmp	r3, #0
 802b72a:	d10b      	bne.n	802b744 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 802b72c:	4ba3      	ldr	r3, [pc, #652]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b72e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802b730:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 802b734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b738:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 802b73c:	4a9f      	ldr	r2, [pc, #636]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b73e:	430b      	orrs	r3, r1
 802b740:	6593      	str	r3, [r2, #88]	; 0x58
 802b742:	e003      	b.n	802b74c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 802b74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b754:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 802b758:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802b75c:	2300      	movs	r3, #0
 802b75e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 802b762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802b766:	460b      	mov	r3, r1
 802b768:	4313      	orrs	r3, r2
 802b76a:	d037      	beq.n	802b7dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 802b76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802b776:	d00e      	beq.n	802b796 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 802b778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802b77c:	d816      	bhi.n	802b7ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 802b77e:	2b00      	cmp	r3, #0
 802b780:	d018      	beq.n	802b7b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 802b782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802b786:	d111      	bne.n	802b7ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802b788:	4b8c      	ldr	r3, [pc, #560]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b78c:	4a8b      	ldr	r2, [pc, #556]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b78e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 802b794:	e00f      	b.n	802b7b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802b796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b79a:	3308      	adds	r3, #8
 802b79c:	2101      	movs	r1, #1
 802b79e:	4618      	mov	r0, r3
 802b7a0:	f001 f94c 	bl	802ca3c <RCCEx_PLL2_Config>
 802b7a4:	4603      	mov	r3, r0
 802b7a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 802b7aa:	e004      	b.n	802b7b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802b7ac:	2301      	movs	r3, #1
 802b7ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b7b2:	e000      	b.n	802b7b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 802b7b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 802b7b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b7ba:	2b00      	cmp	r3, #0
 802b7bc:	d10a      	bne.n	802b7d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 802b7be:	4b7f      	ldr	r3, [pc, #508]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802b7c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 802b7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b7cc:	4a7b      	ldr	r2, [pc, #492]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b7ce:	430b      	orrs	r3, r1
 802b7d0:	6513      	str	r3, [r2, #80]	; 0x50
 802b7d2:	e003      	b.n	802b7dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b7d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b7d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 802b7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b7e4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 802b7e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802b7ec:	2300      	movs	r3, #0
 802b7ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 802b7f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 802b7f6:	460b      	mov	r3, r1
 802b7f8:	4313      	orrs	r3, r2
 802b7fa:	d039      	beq.n	802b870 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 802b7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b802:	2b03      	cmp	r3, #3
 802b804:	d81c      	bhi.n	802b840 <HAL_RCCEx_PeriphCLKConfig+0x794>
 802b806:	a201      	add	r2, pc, #4	; (adr r2, 802b80c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 802b808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b80c:	0802b849 	.word	0x0802b849
 802b810:	0802b81d 	.word	0x0802b81d
 802b814:	0802b82b 	.word	0x0802b82b
 802b818:	0802b849 	.word	0x0802b849
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802b81c:	4b67      	ldr	r3, [pc, #412]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b820:	4a66      	ldr	r2, [pc, #408]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 802b828:	e00f      	b.n	802b84a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802b82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b82e:	3308      	adds	r3, #8
 802b830:	2102      	movs	r1, #2
 802b832:	4618      	mov	r0, r3
 802b834:	f001 f902 	bl	802ca3c <RCCEx_PLL2_Config>
 802b838:	4603      	mov	r3, r0
 802b83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 802b83e:	e004      	b.n	802b84a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 802b840:	2301      	movs	r3, #1
 802b842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b846:	e000      	b.n	802b84a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 802b848:	bf00      	nop
    }

    if (ret == HAL_OK)
 802b84a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b84e:	2b00      	cmp	r3, #0
 802b850:	d10a      	bne.n	802b868 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 802b852:	4b5a      	ldr	r3, [pc, #360]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b856:	f023 0103 	bic.w	r1, r3, #3
 802b85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b85e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b860:	4a56      	ldr	r2, [pc, #344]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b862:	430b      	orrs	r3, r1
 802b864:	64d3      	str	r3, [r2, #76]	; 0x4c
 802b866:	e003      	b.n	802b870 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b868:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b86c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 802b870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b878:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 802b87c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802b880:	2300      	movs	r3, #0
 802b882:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802b886:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 802b88a:	460b      	mov	r3, r1
 802b88c:	4313      	orrs	r3, r2
 802b88e:	f000 809f 	beq.w	802b9d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802b892:	4b4b      	ldr	r3, [pc, #300]	; (802b9c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802b894:	681b      	ldr	r3, [r3, #0]
 802b896:	4a4a      	ldr	r2, [pc, #296]	; (802b9c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802b898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b89c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802b89e:	f7fd ff07 	bl	80296b0 <HAL_GetTick>
 802b8a2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802b8a6:	e00b      	b.n	802b8c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802b8a8:	f7fd ff02 	bl	80296b0 <HAL_GetTick>
 802b8ac:	4602      	mov	r2, r0
 802b8ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802b8b2:	1ad3      	subs	r3, r2, r3
 802b8b4:	2b64      	cmp	r3, #100	; 0x64
 802b8b6:	d903      	bls.n	802b8c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 802b8b8:	2303      	movs	r3, #3
 802b8ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802b8be:	e005      	b.n	802b8cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802b8c0:	4b3f      	ldr	r3, [pc, #252]	; (802b9c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802b8c2:	681b      	ldr	r3, [r3, #0]
 802b8c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b8c8:	2b00      	cmp	r3, #0
 802b8ca:	d0ed      	beq.n	802b8a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 802b8cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b8d0:	2b00      	cmp	r3, #0
 802b8d2:	d179      	bne.n	802b9c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 802b8d4:	4b39      	ldr	r3, [pc, #228]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b8d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802b8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b8dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802b8e0:	4053      	eors	r3, r2
 802b8e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802b8e6:	2b00      	cmp	r3, #0
 802b8e8:	d015      	beq.n	802b916 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802b8ea:	4b34      	ldr	r3, [pc, #208]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b8ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802b8f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 802b8f6:	4b31      	ldr	r3, [pc, #196]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b8fa:	4a30      	ldr	r2, [pc, #192]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b8fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802b900:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 802b902:	4b2e      	ldr	r3, [pc, #184]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b906:	4a2d      	ldr	r2, [pc, #180]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802b90c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 802b90e:	4a2b      	ldr	r2, [pc, #172]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b910:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802b914:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 802b916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b91a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802b91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b922:	d118      	bne.n	802b956 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b924:	f7fd fec4 	bl	80296b0 <HAL_GetTick>
 802b928:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802b92c:	e00d      	b.n	802b94a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802b92e:	f7fd febf 	bl	80296b0 <HAL_GetTick>
 802b932:	4602      	mov	r2, r0
 802b934:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802b938:	1ad2      	subs	r2, r2, r3
 802b93a:	f241 3388 	movw	r3, #5000	; 0x1388
 802b93e:	429a      	cmp	r2, r3
 802b940:	d903      	bls.n	802b94a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 802b942:	2303      	movs	r3, #3
 802b944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 802b948:	e005      	b.n	802b956 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802b94a:	4b1c      	ldr	r3, [pc, #112]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b94e:	f003 0302 	and.w	r3, r3, #2
 802b952:	2b00      	cmp	r3, #0
 802b954:	d0eb      	beq.n	802b92e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 802b956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b95a:	2b00      	cmp	r3, #0
 802b95c:	d129      	bne.n	802b9b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802b95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b962:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802b966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802b96a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802b96e:	d10e      	bne.n	802b98e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 802b970:	4b12      	ldr	r3, [pc, #72]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b972:	691b      	ldr	r3, [r3, #16]
 802b974:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 802b978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b97c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802b980:	091a      	lsrs	r2, r3, #4
 802b982:	4b10      	ldr	r3, [pc, #64]	; (802b9c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 802b984:	4013      	ands	r3, r2
 802b986:	4a0d      	ldr	r2, [pc, #52]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b988:	430b      	orrs	r3, r1
 802b98a:	6113      	str	r3, [r2, #16]
 802b98c:	e005      	b.n	802b99a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 802b98e:	4b0b      	ldr	r3, [pc, #44]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b990:	691b      	ldr	r3, [r3, #16]
 802b992:	4a0a      	ldr	r2, [pc, #40]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b994:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802b998:	6113      	str	r3, [r2, #16]
 802b99a:	4b08      	ldr	r3, [pc, #32]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b99c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 802b99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b9a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802b9a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b9aa:	4a04      	ldr	r2, [pc, #16]	; (802b9bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802b9ac:	430b      	orrs	r3, r1
 802b9ae:	6713      	str	r3, [r2, #112]	; 0x70
 802b9b0:	e00e      	b.n	802b9d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 802b9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b9b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 802b9ba:	e009      	b.n	802b9d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 802b9bc:	58024400 	.word	0x58024400
 802b9c0:	58024800 	.word	0x58024800
 802b9c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 802b9c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802b9cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 802b9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b9d8:	f002 0301 	and.w	r3, r2, #1
 802b9dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802b9e0:	2300      	movs	r3, #0
 802b9e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802b9e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802b9ea:	460b      	mov	r3, r1
 802b9ec:	4313      	orrs	r3, r2
 802b9ee:	f000 8089 	beq.w	802bb04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 802b9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802b9f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802b9f8:	2b28      	cmp	r3, #40	; 0x28
 802b9fa:	d86b      	bhi.n	802bad4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 802b9fc:	a201      	add	r2, pc, #4	; (adr r2, 802ba04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 802b9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ba02:	bf00      	nop
 802ba04:	0802badd 	.word	0x0802badd
 802ba08:	0802bad5 	.word	0x0802bad5
 802ba0c:	0802bad5 	.word	0x0802bad5
 802ba10:	0802bad5 	.word	0x0802bad5
 802ba14:	0802bad5 	.word	0x0802bad5
 802ba18:	0802bad5 	.word	0x0802bad5
 802ba1c:	0802bad5 	.word	0x0802bad5
 802ba20:	0802bad5 	.word	0x0802bad5
 802ba24:	0802baa9 	.word	0x0802baa9
 802ba28:	0802bad5 	.word	0x0802bad5
 802ba2c:	0802bad5 	.word	0x0802bad5
 802ba30:	0802bad5 	.word	0x0802bad5
 802ba34:	0802bad5 	.word	0x0802bad5
 802ba38:	0802bad5 	.word	0x0802bad5
 802ba3c:	0802bad5 	.word	0x0802bad5
 802ba40:	0802bad5 	.word	0x0802bad5
 802ba44:	0802babf 	.word	0x0802babf
 802ba48:	0802bad5 	.word	0x0802bad5
 802ba4c:	0802bad5 	.word	0x0802bad5
 802ba50:	0802bad5 	.word	0x0802bad5
 802ba54:	0802bad5 	.word	0x0802bad5
 802ba58:	0802bad5 	.word	0x0802bad5
 802ba5c:	0802bad5 	.word	0x0802bad5
 802ba60:	0802bad5 	.word	0x0802bad5
 802ba64:	0802badd 	.word	0x0802badd
 802ba68:	0802bad5 	.word	0x0802bad5
 802ba6c:	0802bad5 	.word	0x0802bad5
 802ba70:	0802bad5 	.word	0x0802bad5
 802ba74:	0802bad5 	.word	0x0802bad5
 802ba78:	0802bad5 	.word	0x0802bad5
 802ba7c:	0802bad5 	.word	0x0802bad5
 802ba80:	0802bad5 	.word	0x0802bad5
 802ba84:	0802badd 	.word	0x0802badd
 802ba88:	0802bad5 	.word	0x0802bad5
 802ba8c:	0802bad5 	.word	0x0802bad5
 802ba90:	0802bad5 	.word	0x0802bad5
 802ba94:	0802bad5 	.word	0x0802bad5
 802ba98:	0802bad5 	.word	0x0802bad5
 802ba9c:	0802bad5 	.word	0x0802bad5
 802baa0:	0802bad5 	.word	0x0802bad5
 802baa4:	0802badd 	.word	0x0802badd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802baa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802baac:	3308      	adds	r3, #8
 802baae:	2101      	movs	r1, #1
 802bab0:	4618      	mov	r0, r3
 802bab2:	f000 ffc3 	bl	802ca3c <RCCEx_PLL2_Config>
 802bab6:	4603      	mov	r3, r0
 802bab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 802babc:	e00f      	b.n	802bade <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802babe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bac2:	3328      	adds	r3, #40	; 0x28
 802bac4:	2101      	movs	r1, #1
 802bac6:	4618      	mov	r0, r3
 802bac8:	f001 f86a 	bl	802cba0 <RCCEx_PLL3_Config>
 802bacc:	4603      	mov	r3, r0
 802bace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 802bad2:	e004      	b.n	802bade <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802bad4:	2301      	movs	r3, #1
 802bad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802bada:	e000      	b.n	802bade <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 802badc:	bf00      	nop
    }

    if (ret == HAL_OK)
 802bade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802bae2:	2b00      	cmp	r3, #0
 802bae4:	d10a      	bne.n	802bafc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 802bae6:	4bbf      	ldr	r3, [pc, #764]	; (802bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802bae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802baea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 802baee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802baf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802baf4:	4abb      	ldr	r2, [pc, #748]	; (802bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802baf6:	430b      	orrs	r3, r1
 802baf8:	6553      	str	r3, [r2, #84]	; 0x54
 802bafa:	e003      	b.n	802bb04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802bafc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802bb00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 802bb04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bb0c:	f002 0302 	and.w	r3, r2, #2
 802bb10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802bb14:	2300      	movs	r3, #0
 802bb16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802bb1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 802bb1e:	460b      	mov	r3, r1
 802bb20:	4313      	orrs	r3, r2
 802bb22:	d041      	beq.n	802bba8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 802bb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bb28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802bb2a:	2b05      	cmp	r3, #5
 802bb2c:	d824      	bhi.n	802bb78 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 802bb2e:	a201      	add	r2, pc, #4	; (adr r2, 802bb34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 802bb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802bb34:	0802bb81 	.word	0x0802bb81
 802bb38:	0802bb4d 	.word	0x0802bb4d
 802bb3c:	0802bb63 	.word	0x0802bb63
 802bb40:	0802bb81 	.word	0x0802bb81
 802bb44:	0802bb81 	.word	0x0802bb81
 802bb48:	0802bb81 	.word	0x0802bb81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802bb4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bb50:	3308      	adds	r3, #8
 802bb52:	2101      	movs	r1, #1
 802bb54:	4618      	mov	r0, r3
 802bb56:	f000 ff71 	bl	802ca3c <RCCEx_PLL2_Config>
 802bb5a:	4603      	mov	r3, r0
 802bb5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 802bb60:	e00f      	b.n	802bb82 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802bb62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bb66:	3328      	adds	r3, #40	; 0x28
 802bb68:	2101      	movs	r1, #1
 802bb6a:	4618      	mov	r0, r3
 802bb6c:	f001 f818 	bl	802cba0 <RCCEx_PLL3_Config>
 802bb70:	4603      	mov	r3, r0
 802bb72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 802bb76:	e004      	b.n	802bb82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802bb78:	2301      	movs	r3, #1
 802bb7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802bb7e:	e000      	b.n	802bb82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 802bb80:	bf00      	nop
    }

    if (ret == HAL_OK)
 802bb82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802bb86:	2b00      	cmp	r3, #0
 802bb88:	d10a      	bne.n	802bba0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 802bb8a:	4b96      	ldr	r3, [pc, #600]	; (802bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802bb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bb8e:	f023 0107 	bic.w	r1, r3, #7
 802bb92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bb96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802bb98:	4a92      	ldr	r2, [pc, #584]	; (802bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802bb9a:	430b      	orrs	r3, r1
 802bb9c:	6553      	str	r3, [r2, #84]	; 0x54
 802bb9e:	e003      	b.n	802bba8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802bba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802bba4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 802bba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bbb0:	f002 0304 	and.w	r3, r2, #4
 802bbb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802bbb8:	2300      	movs	r3, #0
 802bbba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802bbbe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 802bbc2:	460b      	mov	r3, r1
 802bbc4:	4313      	orrs	r3, r2
 802bbc6:	d044      	beq.n	802bc52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 802bbc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bbcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802bbd0:	2b05      	cmp	r3, #5
 802bbd2:	d825      	bhi.n	802bc20 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 802bbd4:	a201      	add	r2, pc, #4	; (adr r2, 802bbdc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 802bbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802bbda:	bf00      	nop
 802bbdc:	0802bc29 	.word	0x0802bc29
 802bbe0:	0802bbf5 	.word	0x0802bbf5
 802bbe4:	0802bc0b 	.word	0x0802bc0b
 802bbe8:	0802bc29 	.word	0x0802bc29
 802bbec:	0802bc29 	.word	0x0802bc29
 802bbf0:	0802bc29 	.word	0x0802bc29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802bbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bbf8:	3308      	adds	r3, #8
 802bbfa:	2101      	movs	r1, #1
 802bbfc:	4618      	mov	r0, r3
 802bbfe:	f000 ff1d 	bl	802ca3c <RCCEx_PLL2_Config>
 802bc02:	4603      	mov	r3, r0
 802bc04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 802bc08:	e00f      	b.n	802bc2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802bc0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bc0e:	3328      	adds	r3, #40	; 0x28
 802bc10:	2101      	movs	r1, #1
 802bc12:	4618      	mov	r0, r3
 802bc14:	f000 ffc4 	bl	802cba0 <RCCEx_PLL3_Config>
 802bc18:	4603      	mov	r3, r0
 802bc1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 802bc1e:	e004      	b.n	802bc2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802bc20:	2301      	movs	r3, #1
 802bc22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802bc26:	e000      	b.n	802bc2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 802bc28:	bf00      	nop
    }

    if (ret == HAL_OK)
 802bc2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802bc2e:	2b00      	cmp	r3, #0
 802bc30:	d10b      	bne.n	802bc4a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 802bc32:	4b6c      	ldr	r3, [pc, #432]	; (802bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802bc34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802bc36:	f023 0107 	bic.w	r1, r3, #7
 802bc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bc3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802bc42:	4a68      	ldr	r2, [pc, #416]	; (802bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802bc44:	430b      	orrs	r3, r1
 802bc46:	6593      	str	r3, [r2, #88]	; 0x58
 802bc48:	e003      	b.n	802bc52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802bc4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802bc4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 802bc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bc5a:	f002 0320 	and.w	r3, r2, #32
 802bc5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802bc62:	2300      	movs	r3, #0
 802bc64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802bc68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802bc6c:	460b      	mov	r3, r1
 802bc6e:	4313      	orrs	r3, r2
 802bc70:	d055      	beq.n	802bd1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 802bc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bc76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802bc7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802bc7e:	d033      	beq.n	802bce8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 802bc80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802bc84:	d82c      	bhi.n	802bce0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802bc86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802bc8a:	d02f      	beq.n	802bcec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 802bc8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802bc90:	d826      	bhi.n	802bce0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802bc92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802bc96:	d02b      	beq.n	802bcf0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 802bc98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802bc9c:	d820      	bhi.n	802bce0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802bc9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802bca2:	d012      	beq.n	802bcca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 802bca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802bca8:	d81a      	bhi.n	802bce0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802bcaa:	2b00      	cmp	r3, #0
 802bcac:	d022      	beq.n	802bcf4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 802bcae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802bcb2:	d115      	bne.n	802bce0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802bcb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bcb8:	3308      	adds	r3, #8
 802bcba:	2100      	movs	r1, #0
 802bcbc:	4618      	mov	r0, r3
 802bcbe:	f000 febd 	bl	802ca3c <RCCEx_PLL2_Config>
 802bcc2:	4603      	mov	r3, r0
 802bcc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 802bcc8:	e015      	b.n	802bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802bcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bcce:	3328      	adds	r3, #40	; 0x28
 802bcd0:	2102      	movs	r1, #2
 802bcd2:	4618      	mov	r0, r3
 802bcd4:	f000 ff64 	bl	802cba0 <RCCEx_PLL3_Config>
 802bcd8:	4603      	mov	r3, r0
 802bcda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 802bcde:	e00a      	b.n	802bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802bce0:	2301      	movs	r3, #1
 802bce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802bce6:	e006      	b.n	802bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802bce8:	bf00      	nop
 802bcea:	e004      	b.n	802bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802bcec:	bf00      	nop
 802bcee:	e002      	b.n	802bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802bcf0:	bf00      	nop
 802bcf2:	e000      	b.n	802bcf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802bcf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 802bcf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802bcfa:	2b00      	cmp	r3, #0
 802bcfc:	d10b      	bne.n	802bd16 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 802bcfe:	4b39      	ldr	r3, [pc, #228]	; (802bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802bd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bd02:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 802bd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bd0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802bd0e:	4a35      	ldr	r2, [pc, #212]	; (802bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802bd10:	430b      	orrs	r3, r1
 802bd12:	6553      	str	r3, [r2, #84]	; 0x54
 802bd14:	e003      	b.n	802bd1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802bd16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802bd1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 802bd1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bd26:	f002 0340 	and.w	r3, r2, #64	; 0x40
 802bd2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802bd2e:	2300      	movs	r3, #0
 802bd30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802bd34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 802bd38:	460b      	mov	r3, r1
 802bd3a:	4313      	orrs	r3, r2
 802bd3c:	d058      	beq.n	802bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 802bd3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bd42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802bd46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 802bd4a:	d033      	beq.n	802bdb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 802bd4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 802bd50:	d82c      	bhi.n	802bdac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802bd52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802bd56:	d02f      	beq.n	802bdb8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 802bd58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802bd5c:	d826      	bhi.n	802bdac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802bd5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802bd62:	d02b      	beq.n	802bdbc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 802bd64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802bd68:	d820      	bhi.n	802bdac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802bd6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802bd6e:	d012      	beq.n	802bd96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 802bd70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802bd74:	d81a      	bhi.n	802bdac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802bd76:	2b00      	cmp	r3, #0
 802bd78:	d022      	beq.n	802bdc0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 802bd7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802bd7e:	d115      	bne.n	802bdac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802bd80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bd84:	3308      	adds	r3, #8
 802bd86:	2100      	movs	r1, #0
 802bd88:	4618      	mov	r0, r3
 802bd8a:	f000 fe57 	bl	802ca3c <RCCEx_PLL2_Config>
 802bd8e:	4603      	mov	r3, r0
 802bd90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 802bd94:	e015      	b.n	802bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802bd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bd9a:	3328      	adds	r3, #40	; 0x28
 802bd9c:	2102      	movs	r1, #2
 802bd9e:	4618      	mov	r0, r3
 802bda0:	f000 fefe 	bl	802cba0 <RCCEx_PLL3_Config>
 802bda4:	4603      	mov	r3, r0
 802bda6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 802bdaa:	e00a      	b.n	802bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802bdac:	2301      	movs	r3, #1
 802bdae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802bdb2:	e006      	b.n	802bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802bdb4:	bf00      	nop
 802bdb6:	e004      	b.n	802bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802bdb8:	bf00      	nop
 802bdba:	e002      	b.n	802bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802bdbc:	bf00      	nop
 802bdbe:	e000      	b.n	802bdc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802bdc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 802bdc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802bdc6:	2b00      	cmp	r3, #0
 802bdc8:	d10e      	bne.n	802bde8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 802bdca:	4b06      	ldr	r3, [pc, #24]	; (802bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802bdcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802bdce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 802bdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bdd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802bdda:	4a02      	ldr	r2, [pc, #8]	; (802bde4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802bddc:	430b      	orrs	r3, r1
 802bdde:	6593      	str	r3, [r2, #88]	; 0x58
 802bde0:	e006      	b.n	802bdf0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 802bde2:	bf00      	nop
 802bde4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 802bde8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802bdec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 802bdf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bdf8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 802bdfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802be00:	2300      	movs	r3, #0
 802be02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802be06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 802be0a:	460b      	mov	r3, r1
 802be0c:	4313      	orrs	r3, r2
 802be0e:	d055      	beq.n	802bebc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 802be10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802be14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 802be18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 802be1c:	d033      	beq.n	802be86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 802be1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 802be22:	d82c      	bhi.n	802be7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802be24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802be28:	d02f      	beq.n	802be8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 802be2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802be2e:	d826      	bhi.n	802be7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802be30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 802be34:	d02b      	beq.n	802be8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 802be36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 802be3a:	d820      	bhi.n	802be7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802be3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802be40:	d012      	beq.n	802be68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 802be42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802be46:	d81a      	bhi.n	802be7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802be48:	2b00      	cmp	r3, #0
 802be4a:	d022      	beq.n	802be92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 802be4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802be50:	d115      	bne.n	802be7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802be52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802be56:	3308      	adds	r3, #8
 802be58:	2100      	movs	r1, #0
 802be5a:	4618      	mov	r0, r3
 802be5c:	f000 fdee 	bl	802ca3c <RCCEx_PLL2_Config>
 802be60:	4603      	mov	r3, r0
 802be62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 802be66:	e015      	b.n	802be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802be68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802be6c:	3328      	adds	r3, #40	; 0x28
 802be6e:	2102      	movs	r1, #2
 802be70:	4618      	mov	r0, r3
 802be72:	f000 fe95 	bl	802cba0 <RCCEx_PLL3_Config>
 802be76:	4603      	mov	r3, r0
 802be78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 802be7c:	e00a      	b.n	802be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802be7e:	2301      	movs	r3, #1
 802be80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802be84:	e006      	b.n	802be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802be86:	bf00      	nop
 802be88:	e004      	b.n	802be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802be8a:	bf00      	nop
 802be8c:	e002      	b.n	802be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802be8e:	bf00      	nop
 802be90:	e000      	b.n	802be94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802be92:	bf00      	nop
    }

    if (ret == HAL_OK)
 802be94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802be98:	2b00      	cmp	r3, #0
 802be9a:	d10b      	bne.n	802beb4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 802be9c:	4ba1      	ldr	r3, [pc, #644]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802be9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802bea0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 802bea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bea8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 802beac:	4a9d      	ldr	r2, [pc, #628]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802beae:	430b      	orrs	r3, r1
 802beb0:	6593      	str	r3, [r2, #88]	; 0x58
 802beb2:	e003      	b.n	802bebc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802beb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802beb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 802bebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bec4:	f002 0308 	and.w	r3, r2, #8
 802bec8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802becc:	2300      	movs	r3, #0
 802bece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802bed2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 802bed6:	460b      	mov	r3, r1
 802bed8:	4313      	orrs	r3, r2
 802beda:	d01e      	beq.n	802bf1a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 802bedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802bee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802bee8:	d10c      	bne.n	802bf04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 802beea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802beee:	3328      	adds	r3, #40	; 0x28
 802bef0:	2102      	movs	r1, #2
 802bef2:	4618      	mov	r0, r3
 802bef4:	f000 fe54 	bl	802cba0 <RCCEx_PLL3_Config>
 802bef8:	4603      	mov	r3, r0
 802befa:	2b00      	cmp	r3, #0
 802befc:	d002      	beq.n	802bf04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 802befe:	2301      	movs	r3, #1
 802bf00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 802bf04:	4b87      	ldr	r3, [pc, #540]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802bf06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bf08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802bf0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bf10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802bf14:	4a83      	ldr	r2, [pc, #524]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802bf16:	430b      	orrs	r3, r1
 802bf18:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 802bf1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bf22:	f002 0310 	and.w	r3, r2, #16
 802bf26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802bf2a:	2300      	movs	r3, #0
 802bf2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802bf30:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 802bf34:	460b      	mov	r3, r1
 802bf36:	4313      	orrs	r3, r2
 802bf38:	d01e      	beq.n	802bf78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 802bf3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bf3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802bf42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802bf46:	d10c      	bne.n	802bf62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 802bf48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bf4c:	3328      	adds	r3, #40	; 0x28
 802bf4e:	2102      	movs	r1, #2
 802bf50:	4618      	mov	r0, r3
 802bf52:	f000 fe25 	bl	802cba0 <RCCEx_PLL3_Config>
 802bf56:	4603      	mov	r3, r0
 802bf58:	2b00      	cmp	r3, #0
 802bf5a:	d002      	beq.n	802bf62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 802bf5c:	2301      	movs	r3, #1
 802bf5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 802bf62:	4b70      	ldr	r3, [pc, #448]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802bf64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802bf66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 802bf6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bf6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802bf72:	4a6c      	ldr	r2, [pc, #432]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802bf74:	430b      	orrs	r3, r1
 802bf76:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 802bf78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bf80:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 802bf84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802bf88:	2300      	movs	r3, #0
 802bf8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802bf8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 802bf92:	460b      	mov	r3, r1
 802bf94:	4313      	orrs	r3, r2
 802bf96:	d03e      	beq.n	802c016 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 802bf98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bf9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 802bfa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802bfa4:	d022      	beq.n	802bfec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 802bfa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802bfaa:	d81b      	bhi.n	802bfe4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 802bfac:	2b00      	cmp	r3, #0
 802bfae:	d003      	beq.n	802bfb8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 802bfb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802bfb4:	d00b      	beq.n	802bfce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 802bfb6:	e015      	b.n	802bfe4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802bfb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bfbc:	3308      	adds	r3, #8
 802bfbe:	2100      	movs	r1, #0
 802bfc0:	4618      	mov	r0, r3
 802bfc2:	f000 fd3b 	bl	802ca3c <RCCEx_PLL2_Config>
 802bfc6:	4603      	mov	r3, r0
 802bfc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 802bfcc:	e00f      	b.n	802bfee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802bfce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bfd2:	3328      	adds	r3, #40	; 0x28
 802bfd4:	2102      	movs	r1, #2
 802bfd6:	4618      	mov	r0, r3
 802bfd8:	f000 fde2 	bl	802cba0 <RCCEx_PLL3_Config>
 802bfdc:	4603      	mov	r3, r0
 802bfde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 802bfe2:	e004      	b.n	802bfee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802bfe4:	2301      	movs	r3, #1
 802bfe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802bfea:	e000      	b.n	802bfee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 802bfec:	bf00      	nop
    }

    if (ret == HAL_OK)
 802bfee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802bff2:	2b00      	cmp	r3, #0
 802bff4:	d10b      	bne.n	802c00e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 802bff6:	4b4b      	ldr	r3, [pc, #300]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802bff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802bffa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 802bffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c002:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 802c006:	4a47      	ldr	r2, [pc, #284]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802c008:	430b      	orrs	r3, r1
 802c00a:	6593      	str	r3, [r2, #88]	; 0x58
 802c00c:	e003      	b.n	802c016 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c00e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c012:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 802c016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c01e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 802c022:	67bb      	str	r3, [r7, #120]	; 0x78
 802c024:	2300      	movs	r3, #0
 802c026:	67fb      	str	r3, [r7, #124]	; 0x7c
 802c028:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 802c02c:	460b      	mov	r3, r1
 802c02e:	4313      	orrs	r3, r2
 802c030:	d03b      	beq.n	802c0aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 802c032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802c03a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802c03e:	d01f      	beq.n	802c080 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 802c040:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802c044:	d818      	bhi.n	802c078 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 802c046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802c04a:	d003      	beq.n	802c054 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 802c04c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802c050:	d007      	beq.n	802c062 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 802c052:	e011      	b.n	802c078 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c054:	4b33      	ldr	r3, [pc, #204]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802c056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c058:	4a32      	ldr	r2, [pc, #200]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802c05a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c05e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 802c060:	e00f      	b.n	802c082 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802c062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c066:	3328      	adds	r3, #40	; 0x28
 802c068:	2101      	movs	r1, #1
 802c06a:	4618      	mov	r0, r3
 802c06c:	f000 fd98 	bl	802cba0 <RCCEx_PLL3_Config>
 802c070:	4603      	mov	r3, r0
 802c072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 802c076:	e004      	b.n	802c082 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c078:	2301      	movs	r3, #1
 802c07a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c07e:	e000      	b.n	802c082 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 802c080:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c086:	2b00      	cmp	r3, #0
 802c088:	d10b      	bne.n	802c0a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 802c08a:	4b26      	ldr	r3, [pc, #152]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802c08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802c08e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 802c092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802c09a:	4a22      	ldr	r2, [pc, #136]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802c09c:	430b      	orrs	r3, r1
 802c09e:	6553      	str	r3, [r2, #84]	; 0x54
 802c0a0:	e003      	b.n	802c0aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c0a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c0a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 802c0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c0b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 802c0b6:	673b      	str	r3, [r7, #112]	; 0x70
 802c0b8:	2300      	movs	r3, #0
 802c0ba:	677b      	str	r3, [r7, #116]	; 0x74
 802c0bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 802c0c0:	460b      	mov	r3, r1
 802c0c2:	4313      	orrs	r3, r2
 802c0c4:	d034      	beq.n	802c130 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 802c0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c0cc:	2b00      	cmp	r3, #0
 802c0ce:	d003      	beq.n	802c0d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 802c0d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802c0d4:	d007      	beq.n	802c0e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 802c0d6:	e011      	b.n	802c0fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c0d8:	4b12      	ldr	r3, [pc, #72]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802c0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c0dc:	4a11      	ldr	r2, [pc, #68]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802c0de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c0e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 802c0e4:	e00e      	b.n	802c104 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802c0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c0ea:	3308      	adds	r3, #8
 802c0ec:	2102      	movs	r1, #2
 802c0ee:	4618      	mov	r0, r3
 802c0f0:	f000 fca4 	bl	802ca3c <RCCEx_PLL2_Config>
 802c0f4:	4603      	mov	r3, r0
 802c0f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 802c0fa:	e003      	b.n	802c104 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 802c0fc:	2301      	movs	r3, #1
 802c0fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c102:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c108:	2b00      	cmp	r3, #0
 802c10a:	d10d      	bne.n	802c128 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 802c10c:	4b05      	ldr	r3, [pc, #20]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802c10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c110:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 802c114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c11a:	4a02      	ldr	r2, [pc, #8]	; (802c124 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802c11c:	430b      	orrs	r3, r1
 802c11e:	64d3      	str	r3, [r2, #76]	; 0x4c
 802c120:	e006      	b.n	802c130 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 802c122:	bf00      	nop
 802c124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c12c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 802c130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c138:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 802c13c:	66bb      	str	r3, [r7, #104]	; 0x68
 802c13e:	2300      	movs	r3, #0
 802c140:	66fb      	str	r3, [r7, #108]	; 0x6c
 802c142:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 802c146:	460b      	mov	r3, r1
 802c148:	4313      	orrs	r3, r2
 802c14a:	d00c      	beq.n	802c166 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 802c14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c150:	3328      	adds	r3, #40	; 0x28
 802c152:	2102      	movs	r1, #2
 802c154:	4618      	mov	r0, r3
 802c156:	f000 fd23 	bl	802cba0 <RCCEx_PLL3_Config>
 802c15a:	4603      	mov	r3, r0
 802c15c:	2b00      	cmp	r3, #0
 802c15e:	d002      	beq.n	802c166 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 802c160:	2301      	movs	r3, #1
 802c162:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 802c166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c16e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 802c172:	663b      	str	r3, [r7, #96]	; 0x60
 802c174:	2300      	movs	r3, #0
 802c176:	667b      	str	r3, [r7, #100]	; 0x64
 802c178:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 802c17c:	460b      	mov	r3, r1
 802c17e:	4313      	orrs	r3, r2
 802c180:	d038      	beq.n	802c1f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 802c182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802c18a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802c18e:	d018      	beq.n	802c1c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 802c190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802c194:	d811      	bhi.n	802c1ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 802c196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c19a:	d014      	beq.n	802c1c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 802c19c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c1a0:	d80b      	bhi.n	802c1ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 802c1a2:	2b00      	cmp	r3, #0
 802c1a4:	d011      	beq.n	802c1ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 802c1a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c1aa:	d106      	bne.n	802c1ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c1ac:	4bc3      	ldr	r3, [pc, #780]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c1b0:	4ac2      	ldr	r2, [pc, #776]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c1b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c1b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 802c1b8:	e008      	b.n	802c1cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c1ba:	2301      	movs	r3, #1
 802c1bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c1c0:	e004      	b.n	802c1cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 802c1c2:	bf00      	nop
 802c1c4:	e002      	b.n	802c1cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 802c1c6:	bf00      	nop
 802c1c8:	e000      	b.n	802c1cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 802c1ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c1d0:	2b00      	cmp	r3, #0
 802c1d2:	d10b      	bne.n	802c1ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 802c1d4:	4bb9      	ldr	r3, [pc, #740]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c1d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802c1d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 802c1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c1e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802c1e4:	4ab5      	ldr	r2, [pc, #724]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c1e6:	430b      	orrs	r3, r1
 802c1e8:	6553      	str	r3, [r2, #84]	; 0x54
 802c1ea:	e003      	b.n	802c1f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c1ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c1f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 802c1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c1fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 802c200:	65bb      	str	r3, [r7, #88]	; 0x58
 802c202:	2300      	movs	r3, #0
 802c204:	65fb      	str	r3, [r7, #92]	; 0x5c
 802c206:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 802c20a:	460b      	mov	r3, r1
 802c20c:	4313      	orrs	r3, r2
 802c20e:	d009      	beq.n	802c224 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 802c210:	4baa      	ldr	r3, [pc, #680]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c214:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802c218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802c21e:	4aa7      	ldr	r2, [pc, #668]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c220:	430b      	orrs	r3, r1
 802c222:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 802c224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c22c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 802c230:	653b      	str	r3, [r7, #80]	; 0x50
 802c232:	2300      	movs	r3, #0
 802c234:	657b      	str	r3, [r7, #84]	; 0x54
 802c236:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 802c23a:	460b      	mov	r3, r1
 802c23c:	4313      	orrs	r3, r2
 802c23e:	d00a      	beq.n	802c256 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 802c240:	4b9e      	ldr	r3, [pc, #632]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c242:	691b      	ldr	r3, [r3, #16]
 802c244:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 802c248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c24c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 802c250:	4a9a      	ldr	r2, [pc, #616]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c252:	430b      	orrs	r3, r1
 802c254:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 802c256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c25e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 802c262:	64bb      	str	r3, [r7, #72]	; 0x48
 802c264:	2300      	movs	r3, #0
 802c266:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c268:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 802c26c:	460b      	mov	r3, r1
 802c26e:	4313      	orrs	r3, r2
 802c270:	d009      	beq.n	802c286 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 802c272:	4b92      	ldr	r3, [pc, #584]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c276:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 802c27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c280:	4a8e      	ldr	r2, [pc, #568]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c282:	430b      	orrs	r3, r1
 802c284:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 802c286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c28e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 802c292:	643b      	str	r3, [r7, #64]	; 0x40
 802c294:	2300      	movs	r3, #0
 802c296:	647b      	str	r3, [r7, #68]	; 0x44
 802c298:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 802c29c:	460b      	mov	r3, r1
 802c29e:	4313      	orrs	r3, r2
 802c2a0:	d00e      	beq.n	802c2c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 802c2a2:	4b86      	ldr	r3, [pc, #536]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c2a4:	691b      	ldr	r3, [r3, #16]
 802c2a6:	4a85      	ldr	r2, [pc, #532]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c2a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802c2ac:	6113      	str	r3, [r2, #16]
 802c2ae:	4b83      	ldr	r3, [pc, #524]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c2b0:	6919      	ldr	r1, [r3, #16]
 802c2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c2b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 802c2ba:	4a80      	ldr	r2, [pc, #512]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c2bc:	430b      	orrs	r3, r1
 802c2be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 802c2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c2c8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 802c2cc:	63bb      	str	r3, [r7, #56]	; 0x38
 802c2ce:	2300      	movs	r3, #0
 802c2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 802c2d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 802c2d6:	460b      	mov	r3, r1
 802c2d8:	4313      	orrs	r3, r2
 802c2da:	d009      	beq.n	802c2f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 802c2dc:	4b77      	ldr	r3, [pc, #476]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c2de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c2e0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 802c2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802c2ea:	4a74      	ldr	r2, [pc, #464]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c2ec:	430b      	orrs	r3, r1
 802c2ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 802c2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c2f8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 802c2fc:	633b      	str	r3, [r7, #48]	; 0x30
 802c2fe:	2300      	movs	r3, #0
 802c300:	637b      	str	r3, [r7, #52]	; 0x34
 802c302:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 802c306:	460b      	mov	r3, r1
 802c308:	4313      	orrs	r3, r2
 802c30a:	d00a      	beq.n	802c322 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 802c30c:	4b6b      	ldr	r3, [pc, #428]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c30e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802c310:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 802c314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802c31c:	4a67      	ldr	r2, [pc, #412]	; (802c4bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802c31e:	430b      	orrs	r3, r1
 802c320:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 802c322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c32a:	2100      	movs	r1, #0
 802c32c:	62b9      	str	r1, [r7, #40]	; 0x28
 802c32e:	f003 0301 	and.w	r3, r3, #1
 802c332:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c334:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 802c338:	460b      	mov	r3, r1
 802c33a:	4313      	orrs	r3, r2
 802c33c:	d011      	beq.n	802c362 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802c33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c342:	3308      	adds	r3, #8
 802c344:	2100      	movs	r1, #0
 802c346:	4618      	mov	r0, r3
 802c348:	f000 fb78 	bl	802ca3c <RCCEx_PLL2_Config>
 802c34c:	4603      	mov	r3, r0
 802c34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802c352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c356:	2b00      	cmp	r3, #0
 802c358:	d003      	beq.n	802c362 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c35a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c35e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 802c362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c36a:	2100      	movs	r1, #0
 802c36c:	6239      	str	r1, [r7, #32]
 802c36e:	f003 0302 	and.w	r3, r3, #2
 802c372:	627b      	str	r3, [r7, #36]	; 0x24
 802c374:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 802c378:	460b      	mov	r3, r1
 802c37a:	4313      	orrs	r3, r2
 802c37c:	d011      	beq.n	802c3a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802c37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c382:	3308      	adds	r3, #8
 802c384:	2101      	movs	r1, #1
 802c386:	4618      	mov	r0, r3
 802c388:	f000 fb58 	bl	802ca3c <RCCEx_PLL2_Config>
 802c38c:	4603      	mov	r3, r0
 802c38e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802c392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c396:	2b00      	cmp	r3, #0
 802c398:	d003      	beq.n	802c3a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c39a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c39e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 802c3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3aa:	2100      	movs	r1, #0
 802c3ac:	61b9      	str	r1, [r7, #24]
 802c3ae:	f003 0304 	and.w	r3, r3, #4
 802c3b2:	61fb      	str	r3, [r7, #28]
 802c3b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802c3b8:	460b      	mov	r3, r1
 802c3ba:	4313      	orrs	r3, r2
 802c3bc:	d011      	beq.n	802c3e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802c3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c3c2:	3308      	adds	r3, #8
 802c3c4:	2102      	movs	r1, #2
 802c3c6:	4618      	mov	r0, r3
 802c3c8:	f000 fb38 	bl	802ca3c <RCCEx_PLL2_Config>
 802c3cc:	4603      	mov	r3, r0
 802c3ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802c3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c3d6:	2b00      	cmp	r3, #0
 802c3d8:	d003      	beq.n	802c3e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c3da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c3de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 802c3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3ea:	2100      	movs	r1, #0
 802c3ec:	6139      	str	r1, [r7, #16]
 802c3ee:	f003 0308 	and.w	r3, r3, #8
 802c3f2:	617b      	str	r3, [r7, #20]
 802c3f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 802c3f8:	460b      	mov	r3, r1
 802c3fa:	4313      	orrs	r3, r2
 802c3fc:	d011      	beq.n	802c422 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802c3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c402:	3328      	adds	r3, #40	; 0x28
 802c404:	2100      	movs	r1, #0
 802c406:	4618      	mov	r0, r3
 802c408:	f000 fbca 	bl	802cba0 <RCCEx_PLL3_Config>
 802c40c:	4603      	mov	r3, r0
 802c40e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 802c412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c416:	2b00      	cmp	r3, #0
 802c418:	d003      	beq.n	802c422 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c41a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c41e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 802c422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c42a:	2100      	movs	r1, #0
 802c42c:	60b9      	str	r1, [r7, #8]
 802c42e:	f003 0310 	and.w	r3, r3, #16
 802c432:	60fb      	str	r3, [r7, #12]
 802c434:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 802c438:	460b      	mov	r3, r1
 802c43a:	4313      	orrs	r3, r2
 802c43c:	d011      	beq.n	802c462 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802c43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c442:	3328      	adds	r3, #40	; 0x28
 802c444:	2101      	movs	r1, #1
 802c446:	4618      	mov	r0, r3
 802c448:	f000 fbaa 	bl	802cba0 <RCCEx_PLL3_Config>
 802c44c:	4603      	mov	r3, r0
 802c44e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802c452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c456:	2b00      	cmp	r3, #0
 802c458:	d003      	beq.n	802c462 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c45a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c45e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 802c462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c46a:	2100      	movs	r1, #0
 802c46c:	6039      	str	r1, [r7, #0]
 802c46e:	f003 0320 	and.w	r3, r3, #32
 802c472:	607b      	str	r3, [r7, #4]
 802c474:	e9d7 1200 	ldrd	r1, r2, [r7]
 802c478:	460b      	mov	r3, r1
 802c47a:	4313      	orrs	r3, r2
 802c47c:	d011      	beq.n	802c4a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802c47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c482:	3328      	adds	r3, #40	; 0x28
 802c484:	2102      	movs	r1, #2
 802c486:	4618      	mov	r0, r3
 802c488:	f000 fb8a 	bl	802cba0 <RCCEx_PLL3_Config>
 802c48c:	4603      	mov	r3, r0
 802c48e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802c492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c496:	2b00      	cmp	r3, #0
 802c498:	d003      	beq.n	802c4a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c49a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c49e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 802c4a2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 802c4a6:	2b00      	cmp	r3, #0
 802c4a8:	d101      	bne.n	802c4ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 802c4aa:	2300      	movs	r3, #0
 802c4ac:	e000      	b.n	802c4b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 802c4ae:	2301      	movs	r3, #1
}
 802c4b0:	4618      	mov	r0, r3
 802c4b2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 802c4b6:	46bd      	mov	sp, r7
 802c4b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802c4bc:	58024400 	.word	0x58024400

0802c4c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 802c4c0:	b580      	push	{r7, lr}
 802c4c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 802c4c4:	f7fe fd96 	bl	802aff4 <HAL_RCC_GetHCLKFreq>
 802c4c8:	4602      	mov	r2, r0
 802c4ca:	4b06      	ldr	r3, [pc, #24]	; (802c4e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 802c4cc:	6a1b      	ldr	r3, [r3, #32]
 802c4ce:	091b      	lsrs	r3, r3, #4
 802c4d0:	f003 0307 	and.w	r3, r3, #7
 802c4d4:	4904      	ldr	r1, [pc, #16]	; (802c4e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 802c4d6:	5ccb      	ldrb	r3, [r1, r3]
 802c4d8:	f003 031f 	and.w	r3, r3, #31
 802c4dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 802c4e0:	4618      	mov	r0, r3
 802c4e2:	bd80      	pop	{r7, pc}
 802c4e4:	58024400 	.word	0x58024400
 802c4e8:	08030d18 	.word	0x08030d18

0802c4ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 802c4ec:	b480      	push	{r7}
 802c4ee:	b089      	sub	sp, #36	; 0x24
 802c4f0:	af00      	add	r7, sp, #0
 802c4f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802c4f4:	4ba1      	ldr	r3, [pc, #644]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c4f8:	f003 0303 	and.w	r3, r3, #3
 802c4fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 802c4fe:	4b9f      	ldr	r3, [pc, #636]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c502:	0b1b      	lsrs	r3, r3, #12
 802c504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c508:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 802c50a:	4b9c      	ldr	r3, [pc, #624]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c50e:	091b      	lsrs	r3, r3, #4
 802c510:	f003 0301 	and.w	r3, r3, #1
 802c514:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 802c516:	4b99      	ldr	r3, [pc, #612]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802c51a:	08db      	lsrs	r3, r3, #3
 802c51c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802c520:	693a      	ldr	r2, [r7, #16]
 802c522:	fb02 f303 	mul.w	r3, r2, r3
 802c526:	ee07 3a90 	vmov	s15, r3
 802c52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c52e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 802c532:	697b      	ldr	r3, [r7, #20]
 802c534:	2b00      	cmp	r3, #0
 802c536:	f000 8111 	beq.w	802c75c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 802c53a:	69bb      	ldr	r3, [r7, #24]
 802c53c:	2b02      	cmp	r3, #2
 802c53e:	f000 8083 	beq.w	802c648 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 802c542:	69bb      	ldr	r3, [r7, #24]
 802c544:	2b02      	cmp	r3, #2
 802c546:	f200 80a1 	bhi.w	802c68c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 802c54a:	69bb      	ldr	r3, [r7, #24]
 802c54c:	2b00      	cmp	r3, #0
 802c54e:	d003      	beq.n	802c558 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 802c550:	69bb      	ldr	r3, [r7, #24]
 802c552:	2b01      	cmp	r3, #1
 802c554:	d056      	beq.n	802c604 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 802c556:	e099      	b.n	802c68c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802c558:	4b88      	ldr	r3, [pc, #544]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c55a:	681b      	ldr	r3, [r3, #0]
 802c55c:	f003 0320 	and.w	r3, r3, #32
 802c560:	2b00      	cmp	r3, #0
 802c562:	d02d      	beq.n	802c5c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802c564:	4b85      	ldr	r3, [pc, #532]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c566:	681b      	ldr	r3, [r3, #0]
 802c568:	08db      	lsrs	r3, r3, #3
 802c56a:	f003 0303 	and.w	r3, r3, #3
 802c56e:	4a84      	ldr	r2, [pc, #528]	; (802c780 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 802c570:	fa22 f303 	lsr.w	r3, r2, r3
 802c574:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802c576:	68bb      	ldr	r3, [r7, #8]
 802c578:	ee07 3a90 	vmov	s15, r3
 802c57c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c580:	697b      	ldr	r3, [r7, #20]
 802c582:	ee07 3a90 	vmov	s15, r3
 802c586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c58a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c58e:	4b7b      	ldr	r3, [pc, #492]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c596:	ee07 3a90 	vmov	s15, r3
 802c59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c59e:	ed97 6a03 	vldr	s12, [r7, #12]
 802c5a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 802c784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802c5a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c5aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c5ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c5ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 802c5be:	e087      	b.n	802c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802c5c0:	697b      	ldr	r3, [r7, #20]
 802c5c2:	ee07 3a90 	vmov	s15, r3
 802c5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c5ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 802c788 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 802c5ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c5d2:	4b6a      	ldr	r3, [pc, #424]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c5da:	ee07 3a90 	vmov	s15, r3
 802c5de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c5e2:	ed97 6a03 	vldr	s12, [r7, #12]
 802c5e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 802c784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802c5ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c5ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c5f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c5f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c5fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802c602:	e065      	b.n	802c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802c604:	697b      	ldr	r3, [r7, #20]
 802c606:	ee07 3a90 	vmov	s15, r3
 802c60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c60e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 802c78c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 802c612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c616:	4b59      	ldr	r3, [pc, #356]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c61e:	ee07 3a90 	vmov	s15, r3
 802c622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c626:	ed97 6a03 	vldr	s12, [r7, #12]
 802c62a:	eddf 5a56 	vldr	s11, [pc, #344]	; 802c784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802c62e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c63a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802c646:	e043      	b.n	802c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802c648:	697b      	ldr	r3, [r7, #20]
 802c64a:	ee07 3a90 	vmov	s15, r3
 802c64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c652:	eddf 6a4f 	vldr	s13, [pc, #316]	; 802c790 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 802c656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c65a:	4b48      	ldr	r3, [pc, #288]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c662:	ee07 3a90 	vmov	s15, r3
 802c666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c66a:	ed97 6a03 	vldr	s12, [r7, #12]
 802c66e:	eddf 5a45 	vldr	s11, [pc, #276]	; 802c784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802c672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c67a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c67e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c682:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802c68a:	e021      	b.n	802c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802c68c:	697b      	ldr	r3, [r7, #20]
 802c68e:	ee07 3a90 	vmov	s15, r3
 802c692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c696:	eddf 6a3d 	vldr	s13, [pc, #244]	; 802c78c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 802c69a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c69e:	4b37      	ldr	r3, [pc, #220]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c6a6:	ee07 3a90 	vmov	s15, r3
 802c6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c6ae:	ed97 6a03 	vldr	s12, [r7, #12]
 802c6b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 802c784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802c6b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c6ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c6be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c6c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c6c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c6ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802c6ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 802c6d0:	4b2a      	ldr	r3, [pc, #168]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c6d4:	0a5b      	lsrs	r3, r3, #9
 802c6d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c6da:	ee07 3a90 	vmov	s15, r3
 802c6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c6e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802c6e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 802c6ea:	edd7 6a07 	vldr	s13, [r7, #28]
 802c6ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802c6f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802c6f6:	ee17 2a90 	vmov	r2, s15
 802c6fa:	687b      	ldr	r3, [r7, #4]
 802c6fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 802c6fe:	4b1f      	ldr	r3, [pc, #124]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c702:	0c1b      	lsrs	r3, r3, #16
 802c704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c708:	ee07 3a90 	vmov	s15, r3
 802c70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802c714:	ee37 7a87 	vadd.f32	s14, s15, s14
 802c718:	edd7 6a07 	vldr	s13, [r7, #28]
 802c71c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802c720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802c724:	ee17 2a90 	vmov	r2, s15
 802c728:	687b      	ldr	r3, [r7, #4]
 802c72a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 802c72c:	4b13      	ldr	r3, [pc, #76]	; (802c77c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802c72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c730:	0e1b      	lsrs	r3, r3, #24
 802c732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c736:	ee07 3a90 	vmov	s15, r3
 802c73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c73e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802c742:	ee37 7a87 	vadd.f32	s14, s15, s14
 802c746:	edd7 6a07 	vldr	s13, [r7, #28]
 802c74a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802c74e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802c752:	ee17 2a90 	vmov	r2, s15
 802c756:	687b      	ldr	r3, [r7, #4]
 802c758:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 802c75a:	e008      	b.n	802c76e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 802c75c:	687b      	ldr	r3, [r7, #4]
 802c75e:	2200      	movs	r2, #0
 802c760:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 802c762:	687b      	ldr	r3, [r7, #4]
 802c764:	2200      	movs	r2, #0
 802c766:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 802c768:	687b      	ldr	r3, [r7, #4]
 802c76a:	2200      	movs	r2, #0
 802c76c:	609a      	str	r2, [r3, #8]
}
 802c76e:	bf00      	nop
 802c770:	3724      	adds	r7, #36	; 0x24
 802c772:	46bd      	mov	sp, r7
 802c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c778:	4770      	bx	lr
 802c77a:	bf00      	nop
 802c77c:	58024400 	.word	0x58024400
 802c780:	03d09000 	.word	0x03d09000
 802c784:	46000000 	.word	0x46000000
 802c788:	4c742400 	.word	0x4c742400
 802c78c:	4a742400 	.word	0x4a742400
 802c790:	4bbebc20 	.word	0x4bbebc20

0802c794 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 802c794:	b480      	push	{r7}
 802c796:	b089      	sub	sp, #36	; 0x24
 802c798:	af00      	add	r7, sp, #0
 802c79a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802c79c:	4ba1      	ldr	r3, [pc, #644]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c7a0:	f003 0303 	and.w	r3, r3, #3
 802c7a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 802c7a6:	4b9f      	ldr	r3, [pc, #636]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c7aa:	0d1b      	lsrs	r3, r3, #20
 802c7ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c7b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 802c7b2:	4b9c      	ldr	r3, [pc, #624]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c7b6:	0a1b      	lsrs	r3, r3, #8
 802c7b8:	f003 0301 	and.w	r3, r3, #1
 802c7bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 802c7be:	4b99      	ldr	r3, [pc, #612]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802c7c2:	08db      	lsrs	r3, r3, #3
 802c7c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802c7c8:	693a      	ldr	r2, [r7, #16]
 802c7ca:	fb02 f303 	mul.w	r3, r2, r3
 802c7ce:	ee07 3a90 	vmov	s15, r3
 802c7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c7d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 802c7da:	697b      	ldr	r3, [r7, #20]
 802c7dc:	2b00      	cmp	r3, #0
 802c7de:	f000 8111 	beq.w	802ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 802c7e2:	69bb      	ldr	r3, [r7, #24]
 802c7e4:	2b02      	cmp	r3, #2
 802c7e6:	f000 8083 	beq.w	802c8f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 802c7ea:	69bb      	ldr	r3, [r7, #24]
 802c7ec:	2b02      	cmp	r3, #2
 802c7ee:	f200 80a1 	bhi.w	802c934 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 802c7f2:	69bb      	ldr	r3, [r7, #24]
 802c7f4:	2b00      	cmp	r3, #0
 802c7f6:	d003      	beq.n	802c800 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 802c7f8:	69bb      	ldr	r3, [r7, #24]
 802c7fa:	2b01      	cmp	r3, #1
 802c7fc:	d056      	beq.n	802c8ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 802c7fe:	e099      	b.n	802c934 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802c800:	4b88      	ldr	r3, [pc, #544]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c802:	681b      	ldr	r3, [r3, #0]
 802c804:	f003 0320 	and.w	r3, r3, #32
 802c808:	2b00      	cmp	r3, #0
 802c80a:	d02d      	beq.n	802c868 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802c80c:	4b85      	ldr	r3, [pc, #532]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c80e:	681b      	ldr	r3, [r3, #0]
 802c810:	08db      	lsrs	r3, r3, #3
 802c812:	f003 0303 	and.w	r3, r3, #3
 802c816:	4a84      	ldr	r2, [pc, #528]	; (802ca28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 802c818:	fa22 f303 	lsr.w	r3, r2, r3
 802c81c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802c81e:	68bb      	ldr	r3, [r7, #8]
 802c820:	ee07 3a90 	vmov	s15, r3
 802c824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c828:	697b      	ldr	r3, [r7, #20]
 802c82a:	ee07 3a90 	vmov	s15, r3
 802c82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c836:	4b7b      	ldr	r3, [pc, #492]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c83a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c83e:	ee07 3a90 	vmov	s15, r3
 802c842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c846:	ed97 6a03 	vldr	s12, [r7, #12]
 802c84a:	eddf 5a78 	vldr	s11, [pc, #480]	; 802ca2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802c84e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c85a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c85e:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c862:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 802c866:	e087      	b.n	802c978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802c868:	697b      	ldr	r3, [r7, #20]
 802c86a:	ee07 3a90 	vmov	s15, r3
 802c86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c872:	eddf 6a6f 	vldr	s13, [pc, #444]	; 802ca30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 802c876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c87a:	4b6a      	ldr	r3, [pc, #424]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c87e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c882:	ee07 3a90 	vmov	s15, r3
 802c886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c88a:	ed97 6a03 	vldr	s12, [r7, #12]
 802c88e:	eddf 5a67 	vldr	s11, [pc, #412]	; 802ca2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802c892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c89a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c89e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c8a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c8a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802c8aa:	e065      	b.n	802c978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802c8ac:	697b      	ldr	r3, [r7, #20]
 802c8ae:	ee07 3a90 	vmov	s15, r3
 802c8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c8b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 802ca34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 802c8ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c8be:	4b59      	ldr	r3, [pc, #356]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c8c6:	ee07 3a90 	vmov	s15, r3
 802c8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c8ce:	ed97 6a03 	vldr	s12, [r7, #12]
 802c8d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 802ca2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802c8d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c8de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c8ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802c8ee:	e043      	b.n	802c978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802c8f0:	697b      	ldr	r3, [r7, #20]
 802c8f2:	ee07 3a90 	vmov	s15, r3
 802c8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c8fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 802ca38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 802c8fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c902:	4b48      	ldr	r3, [pc, #288]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c90a:	ee07 3a90 	vmov	s15, r3
 802c90e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c912:	ed97 6a03 	vldr	s12, [r7, #12]
 802c916:	eddf 5a45 	vldr	s11, [pc, #276]	; 802ca2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802c91a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c91e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c92a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c92e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802c932:	e021      	b.n	802c978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802c934:	697b      	ldr	r3, [r7, #20]
 802c936:	ee07 3a90 	vmov	s15, r3
 802c93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c93e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 802ca34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 802c942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c946:	4b37      	ldr	r3, [pc, #220]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c94e:	ee07 3a90 	vmov	s15, r3
 802c952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c956:	ed97 6a03 	vldr	s12, [r7, #12]
 802c95a:	eddf 5a34 	vldr	s11, [pc, #208]	; 802ca2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802c95e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802c976:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 802c978:	4b2a      	ldr	r3, [pc, #168]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c97c:	0a5b      	lsrs	r3, r3, #9
 802c97e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c982:	ee07 3a90 	vmov	s15, r3
 802c986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c98a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802c98e:	ee37 7a87 	vadd.f32	s14, s15, s14
 802c992:	edd7 6a07 	vldr	s13, [r7, #28]
 802c996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802c99a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802c99e:	ee17 2a90 	vmov	r2, s15
 802c9a2:	687b      	ldr	r3, [r7, #4]
 802c9a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 802c9a6:	4b1f      	ldr	r3, [pc, #124]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c9aa:	0c1b      	lsrs	r3, r3, #16
 802c9ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c9b0:	ee07 3a90 	vmov	s15, r3
 802c9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c9b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802c9bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 802c9c0:	edd7 6a07 	vldr	s13, [r7, #28]
 802c9c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802c9c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802c9cc:	ee17 2a90 	vmov	r2, s15
 802c9d0:	687b      	ldr	r3, [r7, #4]
 802c9d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 802c9d4:	4b13      	ldr	r3, [pc, #76]	; (802ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802c9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c9d8:	0e1b      	lsrs	r3, r3, #24
 802c9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c9de:	ee07 3a90 	vmov	s15, r3
 802c9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c9e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802c9ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 802c9ee:	edd7 6a07 	vldr	s13, [r7, #28]
 802c9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802c9f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802c9fa:	ee17 2a90 	vmov	r2, s15
 802c9fe:	687b      	ldr	r3, [r7, #4]
 802ca00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 802ca02:	e008      	b.n	802ca16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 802ca04:	687b      	ldr	r3, [r7, #4]
 802ca06:	2200      	movs	r2, #0
 802ca08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 802ca0a:	687b      	ldr	r3, [r7, #4]
 802ca0c:	2200      	movs	r2, #0
 802ca0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 802ca10:	687b      	ldr	r3, [r7, #4]
 802ca12:	2200      	movs	r2, #0
 802ca14:	609a      	str	r2, [r3, #8]
}
 802ca16:	bf00      	nop
 802ca18:	3724      	adds	r7, #36	; 0x24
 802ca1a:	46bd      	mov	sp, r7
 802ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ca20:	4770      	bx	lr
 802ca22:	bf00      	nop
 802ca24:	58024400 	.word	0x58024400
 802ca28:	03d09000 	.word	0x03d09000
 802ca2c:	46000000 	.word	0x46000000
 802ca30:	4c742400 	.word	0x4c742400
 802ca34:	4a742400 	.word	0x4a742400
 802ca38:	4bbebc20 	.word	0x4bbebc20

0802ca3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 802ca3c:	b580      	push	{r7, lr}
 802ca3e:	b084      	sub	sp, #16
 802ca40:	af00      	add	r7, sp, #0
 802ca42:	6078      	str	r0, [r7, #4]
 802ca44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802ca46:	2300      	movs	r3, #0
 802ca48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802ca4a:	4b53      	ldr	r3, [pc, #332]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802ca4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ca4e:	f003 0303 	and.w	r3, r3, #3
 802ca52:	2b03      	cmp	r3, #3
 802ca54:	d101      	bne.n	802ca5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 802ca56:	2301      	movs	r3, #1
 802ca58:	e099      	b.n	802cb8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 802ca5a:	4b4f      	ldr	r3, [pc, #316]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802ca5c:	681b      	ldr	r3, [r3, #0]
 802ca5e:	4a4e      	ldr	r2, [pc, #312]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802ca60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 802ca64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802ca66:	f7fc fe23 	bl	80296b0 <HAL_GetTick>
 802ca6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 802ca6c:	e008      	b.n	802ca80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 802ca6e:	f7fc fe1f 	bl	80296b0 <HAL_GetTick>
 802ca72:	4602      	mov	r2, r0
 802ca74:	68bb      	ldr	r3, [r7, #8]
 802ca76:	1ad3      	subs	r3, r2, r3
 802ca78:	2b02      	cmp	r3, #2
 802ca7a:	d901      	bls.n	802ca80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 802ca7c:	2303      	movs	r3, #3
 802ca7e:	e086      	b.n	802cb8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 802ca80:	4b45      	ldr	r3, [pc, #276]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802ca82:	681b      	ldr	r3, [r3, #0]
 802ca84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802ca88:	2b00      	cmp	r3, #0
 802ca8a:	d1f0      	bne.n	802ca6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 802ca8c:	4b42      	ldr	r3, [pc, #264]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802ca8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ca90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802ca94:	687b      	ldr	r3, [r7, #4]
 802ca96:	681b      	ldr	r3, [r3, #0]
 802ca98:	031b      	lsls	r3, r3, #12
 802ca9a:	493f      	ldr	r1, [pc, #252]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802ca9c:	4313      	orrs	r3, r2
 802ca9e:	628b      	str	r3, [r1, #40]	; 0x28
 802caa0:	687b      	ldr	r3, [r7, #4]
 802caa2:	685b      	ldr	r3, [r3, #4]
 802caa4:	3b01      	subs	r3, #1
 802caa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802caaa:	687b      	ldr	r3, [r7, #4]
 802caac:	689b      	ldr	r3, [r3, #8]
 802caae:	3b01      	subs	r3, #1
 802cab0:	025b      	lsls	r3, r3, #9
 802cab2:	b29b      	uxth	r3, r3
 802cab4:	431a      	orrs	r2, r3
 802cab6:	687b      	ldr	r3, [r7, #4]
 802cab8:	68db      	ldr	r3, [r3, #12]
 802caba:	3b01      	subs	r3, #1
 802cabc:	041b      	lsls	r3, r3, #16
 802cabe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802cac2:	431a      	orrs	r2, r3
 802cac4:	687b      	ldr	r3, [r7, #4]
 802cac6:	691b      	ldr	r3, [r3, #16]
 802cac8:	3b01      	subs	r3, #1
 802caca:	061b      	lsls	r3, r3, #24
 802cacc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 802cad0:	4931      	ldr	r1, [pc, #196]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cad2:	4313      	orrs	r3, r2
 802cad4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 802cad6:	4b30      	ldr	r3, [pc, #192]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cada:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 802cade:	687b      	ldr	r3, [r7, #4]
 802cae0:	695b      	ldr	r3, [r3, #20]
 802cae2:	492d      	ldr	r1, [pc, #180]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cae4:	4313      	orrs	r3, r2
 802cae6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 802cae8:	4b2b      	ldr	r3, [pc, #172]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802caea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802caec:	f023 0220 	bic.w	r2, r3, #32
 802caf0:	687b      	ldr	r3, [r7, #4]
 802caf2:	699b      	ldr	r3, [r3, #24]
 802caf4:	4928      	ldr	r1, [pc, #160]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802caf6:	4313      	orrs	r3, r2
 802caf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 802cafa:	4b27      	ldr	r3, [pc, #156]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cafe:	4a26      	ldr	r2, [pc, #152]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb00:	f023 0310 	bic.w	r3, r3, #16
 802cb04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 802cb06:	4b24      	ldr	r3, [pc, #144]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802cb0a:	4b24      	ldr	r3, [pc, #144]	; (802cb9c <RCCEx_PLL2_Config+0x160>)
 802cb0c:	4013      	ands	r3, r2
 802cb0e:	687a      	ldr	r2, [r7, #4]
 802cb10:	69d2      	ldr	r2, [r2, #28]
 802cb12:	00d2      	lsls	r2, r2, #3
 802cb14:	4920      	ldr	r1, [pc, #128]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb16:	4313      	orrs	r3, r2
 802cb18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 802cb1a:	4b1f      	ldr	r3, [pc, #124]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cb1e:	4a1e      	ldr	r2, [pc, #120]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb20:	f043 0310 	orr.w	r3, r3, #16
 802cb24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 802cb26:	683b      	ldr	r3, [r7, #0]
 802cb28:	2b00      	cmp	r3, #0
 802cb2a:	d106      	bne.n	802cb3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 802cb2c:	4b1a      	ldr	r3, [pc, #104]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cb30:	4a19      	ldr	r2, [pc, #100]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802cb36:	62d3      	str	r3, [r2, #44]	; 0x2c
 802cb38:	e00f      	b.n	802cb5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 802cb3a:	683b      	ldr	r3, [r7, #0]
 802cb3c:	2b01      	cmp	r3, #1
 802cb3e:	d106      	bne.n	802cb4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 802cb40:	4b15      	ldr	r3, [pc, #84]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cb44:	4a14      	ldr	r2, [pc, #80]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802cb4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 802cb4c:	e005      	b.n	802cb5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 802cb4e:	4b12      	ldr	r3, [pc, #72]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cb52:	4a11      	ldr	r2, [pc, #68]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802cb58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 802cb5a:	4b0f      	ldr	r3, [pc, #60]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb5c:	681b      	ldr	r3, [r3, #0]
 802cb5e:	4a0e      	ldr	r2, [pc, #56]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802cb64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802cb66:	f7fc fda3 	bl	80296b0 <HAL_GetTick>
 802cb6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 802cb6c:	e008      	b.n	802cb80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 802cb6e:	f7fc fd9f 	bl	80296b0 <HAL_GetTick>
 802cb72:	4602      	mov	r2, r0
 802cb74:	68bb      	ldr	r3, [r7, #8]
 802cb76:	1ad3      	subs	r3, r2, r3
 802cb78:	2b02      	cmp	r3, #2
 802cb7a:	d901      	bls.n	802cb80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 802cb7c:	2303      	movs	r3, #3
 802cb7e:	e006      	b.n	802cb8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 802cb80:	4b05      	ldr	r3, [pc, #20]	; (802cb98 <RCCEx_PLL2_Config+0x15c>)
 802cb82:	681b      	ldr	r3, [r3, #0]
 802cb84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802cb88:	2b00      	cmp	r3, #0
 802cb8a:	d0f0      	beq.n	802cb6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 802cb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 802cb8e:	4618      	mov	r0, r3
 802cb90:	3710      	adds	r7, #16
 802cb92:	46bd      	mov	sp, r7
 802cb94:	bd80      	pop	{r7, pc}
 802cb96:	bf00      	nop
 802cb98:	58024400 	.word	0x58024400
 802cb9c:	ffff0007 	.word	0xffff0007

0802cba0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 802cba0:	b580      	push	{r7, lr}
 802cba2:	b084      	sub	sp, #16
 802cba4:	af00      	add	r7, sp, #0
 802cba6:	6078      	str	r0, [r7, #4]
 802cba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802cbaa:	2300      	movs	r3, #0
 802cbac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802cbae:	4b53      	ldr	r3, [pc, #332]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802cbb2:	f003 0303 	and.w	r3, r3, #3
 802cbb6:	2b03      	cmp	r3, #3
 802cbb8:	d101      	bne.n	802cbbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 802cbba:	2301      	movs	r3, #1
 802cbbc:	e099      	b.n	802ccf2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 802cbbe:	4b4f      	ldr	r3, [pc, #316]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cbc0:	681b      	ldr	r3, [r3, #0]
 802cbc2:	4a4e      	ldr	r2, [pc, #312]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cbc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802cbc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802cbca:	f7fc fd71 	bl	80296b0 <HAL_GetTick>
 802cbce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 802cbd0:	e008      	b.n	802cbe4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802cbd2:	f7fc fd6d 	bl	80296b0 <HAL_GetTick>
 802cbd6:	4602      	mov	r2, r0
 802cbd8:	68bb      	ldr	r3, [r7, #8]
 802cbda:	1ad3      	subs	r3, r2, r3
 802cbdc:	2b02      	cmp	r3, #2
 802cbde:	d901      	bls.n	802cbe4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 802cbe0:	2303      	movs	r3, #3
 802cbe2:	e086      	b.n	802ccf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 802cbe4:	4b45      	ldr	r3, [pc, #276]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cbe6:	681b      	ldr	r3, [r3, #0]
 802cbe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802cbec:	2b00      	cmp	r3, #0
 802cbee:	d1f0      	bne.n	802cbd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 802cbf0:	4b42      	ldr	r3, [pc, #264]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802cbf4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 802cbf8:	687b      	ldr	r3, [r7, #4]
 802cbfa:	681b      	ldr	r3, [r3, #0]
 802cbfc:	051b      	lsls	r3, r3, #20
 802cbfe:	493f      	ldr	r1, [pc, #252]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc00:	4313      	orrs	r3, r2
 802cc02:	628b      	str	r3, [r1, #40]	; 0x28
 802cc04:	687b      	ldr	r3, [r7, #4]
 802cc06:	685b      	ldr	r3, [r3, #4]
 802cc08:	3b01      	subs	r3, #1
 802cc0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802cc0e:	687b      	ldr	r3, [r7, #4]
 802cc10:	689b      	ldr	r3, [r3, #8]
 802cc12:	3b01      	subs	r3, #1
 802cc14:	025b      	lsls	r3, r3, #9
 802cc16:	b29b      	uxth	r3, r3
 802cc18:	431a      	orrs	r2, r3
 802cc1a:	687b      	ldr	r3, [r7, #4]
 802cc1c:	68db      	ldr	r3, [r3, #12]
 802cc1e:	3b01      	subs	r3, #1
 802cc20:	041b      	lsls	r3, r3, #16
 802cc22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802cc26:	431a      	orrs	r2, r3
 802cc28:	687b      	ldr	r3, [r7, #4]
 802cc2a:	691b      	ldr	r3, [r3, #16]
 802cc2c:	3b01      	subs	r3, #1
 802cc2e:	061b      	lsls	r3, r3, #24
 802cc30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 802cc34:	4931      	ldr	r1, [pc, #196]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc36:	4313      	orrs	r3, r2
 802cc38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 802cc3a:	4b30      	ldr	r3, [pc, #192]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cc3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 802cc42:	687b      	ldr	r3, [r7, #4]
 802cc44:	695b      	ldr	r3, [r3, #20]
 802cc46:	492d      	ldr	r1, [pc, #180]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc48:	4313      	orrs	r3, r2
 802cc4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 802cc4c:	4b2b      	ldr	r3, [pc, #172]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cc50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 802cc54:	687b      	ldr	r3, [r7, #4]
 802cc56:	699b      	ldr	r3, [r3, #24]
 802cc58:	4928      	ldr	r1, [pc, #160]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc5a:	4313      	orrs	r3, r2
 802cc5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 802cc5e:	4b27      	ldr	r3, [pc, #156]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cc62:	4a26      	ldr	r2, [pc, #152]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802cc68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 802cc6a:	4b24      	ldr	r3, [pc, #144]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802cc6e:	4b24      	ldr	r3, [pc, #144]	; (802cd00 <RCCEx_PLL3_Config+0x160>)
 802cc70:	4013      	ands	r3, r2
 802cc72:	687a      	ldr	r2, [r7, #4]
 802cc74:	69d2      	ldr	r2, [r2, #28]
 802cc76:	00d2      	lsls	r2, r2, #3
 802cc78:	4920      	ldr	r1, [pc, #128]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc7a:	4313      	orrs	r3, r2
 802cc7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 802cc7e:	4b1f      	ldr	r3, [pc, #124]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cc82:	4a1e      	ldr	r2, [pc, #120]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802cc88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 802cc8a:	683b      	ldr	r3, [r7, #0]
 802cc8c:	2b00      	cmp	r3, #0
 802cc8e:	d106      	bne.n	802cc9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 802cc90:	4b1a      	ldr	r3, [pc, #104]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cc94:	4a19      	ldr	r2, [pc, #100]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cc96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802cc9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 802cc9c:	e00f      	b.n	802ccbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 802cc9e:	683b      	ldr	r3, [r7, #0]
 802cca0:	2b01      	cmp	r3, #1
 802cca2:	d106      	bne.n	802ccb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 802cca4:	4b15      	ldr	r3, [pc, #84]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cca8:	4a14      	ldr	r2, [pc, #80]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802ccaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802ccae:	62d3      	str	r3, [r2, #44]	; 0x2c
 802ccb0:	e005      	b.n	802ccbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 802ccb2:	4b12      	ldr	r3, [pc, #72]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802ccb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ccb6:	4a11      	ldr	r2, [pc, #68]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802ccb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802ccbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 802ccbe:	4b0f      	ldr	r3, [pc, #60]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802ccc0:	681b      	ldr	r3, [r3, #0]
 802ccc2:	4a0e      	ldr	r2, [pc, #56]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802ccc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802ccc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802ccca:	f7fc fcf1 	bl	80296b0 <HAL_GetTick>
 802ccce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 802ccd0:	e008      	b.n	802cce4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802ccd2:	f7fc fced 	bl	80296b0 <HAL_GetTick>
 802ccd6:	4602      	mov	r2, r0
 802ccd8:	68bb      	ldr	r3, [r7, #8]
 802ccda:	1ad3      	subs	r3, r2, r3
 802ccdc:	2b02      	cmp	r3, #2
 802ccde:	d901      	bls.n	802cce4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 802cce0:	2303      	movs	r3, #3
 802cce2:	e006      	b.n	802ccf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 802cce4:	4b05      	ldr	r3, [pc, #20]	; (802ccfc <RCCEx_PLL3_Config+0x15c>)
 802cce6:	681b      	ldr	r3, [r3, #0]
 802cce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802ccec:	2b00      	cmp	r3, #0
 802ccee:	d0f0      	beq.n	802ccd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 802ccf0:	7bfb      	ldrb	r3, [r7, #15]
}
 802ccf2:	4618      	mov	r0, r3
 802ccf4:	3710      	adds	r7, #16
 802ccf6:	46bd      	mov	sp, r7
 802ccf8:	bd80      	pop	{r7, pc}
 802ccfa:	bf00      	nop
 802ccfc:	58024400 	.word	0x58024400
 802cd00:	ffff0007 	.word	0xffff0007

0802cd04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802cd04:	b580      	push	{r7, lr}
 802cd06:	b084      	sub	sp, #16
 802cd08:	af00      	add	r7, sp, #0
 802cd0a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802cd0c:	687b      	ldr	r3, [r7, #4]
 802cd0e:	2b00      	cmp	r3, #0
 802cd10:	d101      	bne.n	802cd16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802cd12:	2301      	movs	r3, #1
 802cd14:	e10f      	b.n	802cf36 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802cd16:	687b      	ldr	r3, [r7, #4]
 802cd18:	2200      	movs	r2, #0
 802cd1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 802cd1c:	687b      	ldr	r3, [r7, #4]
 802cd1e:	681b      	ldr	r3, [r3, #0]
 802cd20:	4a87      	ldr	r2, [pc, #540]	; (802cf40 <HAL_SPI_Init+0x23c>)
 802cd22:	4293      	cmp	r3, r2
 802cd24:	d00f      	beq.n	802cd46 <HAL_SPI_Init+0x42>
 802cd26:	687b      	ldr	r3, [r7, #4]
 802cd28:	681b      	ldr	r3, [r3, #0]
 802cd2a:	4a86      	ldr	r2, [pc, #536]	; (802cf44 <HAL_SPI_Init+0x240>)
 802cd2c:	4293      	cmp	r3, r2
 802cd2e:	d00a      	beq.n	802cd46 <HAL_SPI_Init+0x42>
 802cd30:	687b      	ldr	r3, [r7, #4]
 802cd32:	681b      	ldr	r3, [r3, #0]
 802cd34:	4a84      	ldr	r2, [pc, #528]	; (802cf48 <HAL_SPI_Init+0x244>)
 802cd36:	4293      	cmp	r3, r2
 802cd38:	d005      	beq.n	802cd46 <HAL_SPI_Init+0x42>
 802cd3a:	687b      	ldr	r3, [r7, #4]
 802cd3c:	68db      	ldr	r3, [r3, #12]
 802cd3e:	2b0f      	cmp	r3, #15
 802cd40:	d901      	bls.n	802cd46 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 802cd42:	2301      	movs	r3, #1
 802cd44:	e0f7      	b.n	802cf36 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 802cd46:	6878      	ldr	r0, [r7, #4]
 802cd48:	f000 f900 	bl	802cf4c <SPI_GetPacketSize>
 802cd4c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 802cd4e:	687b      	ldr	r3, [r7, #4]
 802cd50:	681b      	ldr	r3, [r3, #0]
 802cd52:	4a7b      	ldr	r2, [pc, #492]	; (802cf40 <HAL_SPI_Init+0x23c>)
 802cd54:	4293      	cmp	r3, r2
 802cd56:	d00c      	beq.n	802cd72 <HAL_SPI_Init+0x6e>
 802cd58:	687b      	ldr	r3, [r7, #4]
 802cd5a:	681b      	ldr	r3, [r3, #0]
 802cd5c:	4a79      	ldr	r2, [pc, #484]	; (802cf44 <HAL_SPI_Init+0x240>)
 802cd5e:	4293      	cmp	r3, r2
 802cd60:	d007      	beq.n	802cd72 <HAL_SPI_Init+0x6e>
 802cd62:	687b      	ldr	r3, [r7, #4]
 802cd64:	681b      	ldr	r3, [r3, #0]
 802cd66:	4a78      	ldr	r2, [pc, #480]	; (802cf48 <HAL_SPI_Init+0x244>)
 802cd68:	4293      	cmp	r3, r2
 802cd6a:	d002      	beq.n	802cd72 <HAL_SPI_Init+0x6e>
 802cd6c:	68fb      	ldr	r3, [r7, #12]
 802cd6e:	2b08      	cmp	r3, #8
 802cd70:	d811      	bhi.n	802cd96 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 802cd72:	687b      	ldr	r3, [r7, #4]
 802cd74:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 802cd76:	4a72      	ldr	r2, [pc, #456]	; (802cf40 <HAL_SPI_Init+0x23c>)
 802cd78:	4293      	cmp	r3, r2
 802cd7a:	d009      	beq.n	802cd90 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 802cd7c:	687b      	ldr	r3, [r7, #4]
 802cd7e:	681b      	ldr	r3, [r3, #0]
 802cd80:	4a70      	ldr	r2, [pc, #448]	; (802cf44 <HAL_SPI_Init+0x240>)
 802cd82:	4293      	cmp	r3, r2
 802cd84:	d004      	beq.n	802cd90 <HAL_SPI_Init+0x8c>
 802cd86:	687b      	ldr	r3, [r7, #4]
 802cd88:	681b      	ldr	r3, [r3, #0]
 802cd8a:	4a6f      	ldr	r2, [pc, #444]	; (802cf48 <HAL_SPI_Init+0x244>)
 802cd8c:	4293      	cmp	r3, r2
 802cd8e:	d104      	bne.n	802cd9a <HAL_SPI_Init+0x96>
 802cd90:	68fb      	ldr	r3, [r7, #12]
 802cd92:	2b10      	cmp	r3, #16
 802cd94:	d901      	bls.n	802cd9a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 802cd96:	2301      	movs	r3, #1
 802cd98:	e0cd      	b.n	802cf36 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802cd9a:	687b      	ldr	r3, [r7, #4]
 802cd9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802cda0:	b2db      	uxtb	r3, r3
 802cda2:	2b00      	cmp	r3, #0
 802cda4:	d106      	bne.n	802cdb4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802cda6:	687b      	ldr	r3, [r7, #4]
 802cda8:	2200      	movs	r2, #0
 802cdaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802cdae:	6878      	ldr	r0, [r7, #4]
 802cdb0:	f7fb fe8a 	bl	8028ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802cdb4:	687b      	ldr	r3, [r7, #4]
 802cdb6:	2202      	movs	r2, #2
 802cdb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802cdbc:	687b      	ldr	r3, [r7, #4]
 802cdbe:	681b      	ldr	r3, [r3, #0]
 802cdc0:	681a      	ldr	r2, [r3, #0]
 802cdc2:	687b      	ldr	r3, [r7, #4]
 802cdc4:	681b      	ldr	r3, [r3, #0]
 802cdc6:	f022 0201 	bic.w	r2, r2, #1
 802cdca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 802cdcc:	687b      	ldr	r3, [r7, #4]
 802cdce:	681b      	ldr	r3, [r3, #0]
 802cdd0:	689b      	ldr	r3, [r3, #8]
 802cdd2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 802cdd6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 802cdd8:	687b      	ldr	r3, [r7, #4]
 802cdda:	699b      	ldr	r3, [r3, #24]
 802cddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802cde0:	d119      	bne.n	802ce16 <HAL_SPI_Init+0x112>
 802cde2:	687b      	ldr	r3, [r7, #4]
 802cde4:	685b      	ldr	r3, [r3, #4]
 802cde6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802cdea:	d103      	bne.n	802cdf4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 802cdec:	687b      	ldr	r3, [r7, #4]
 802cdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 802cdf0:	2b00      	cmp	r3, #0
 802cdf2:	d008      	beq.n	802ce06 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 802cdf4:	687b      	ldr	r3, [r7, #4]
 802cdf6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 802cdf8:	2b00      	cmp	r3, #0
 802cdfa:	d10c      	bne.n	802ce16 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 802cdfc:	687b      	ldr	r3, [r7, #4]
 802cdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 802ce00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802ce04:	d107      	bne.n	802ce16 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 802ce06:	687b      	ldr	r3, [r7, #4]
 802ce08:	681b      	ldr	r3, [r3, #0]
 802ce0a:	681a      	ldr	r2, [r3, #0]
 802ce0c:	687b      	ldr	r3, [r7, #4]
 802ce0e:	681b      	ldr	r3, [r3, #0]
 802ce10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802ce14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 802ce16:	687b      	ldr	r3, [r7, #4]
 802ce18:	685b      	ldr	r3, [r3, #4]
 802ce1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802ce1e:	2b00      	cmp	r3, #0
 802ce20:	d00f      	beq.n	802ce42 <HAL_SPI_Init+0x13e>
 802ce22:	687b      	ldr	r3, [r7, #4]
 802ce24:	68db      	ldr	r3, [r3, #12]
 802ce26:	2b06      	cmp	r3, #6
 802ce28:	d90b      	bls.n	802ce42 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 802ce2a:	687b      	ldr	r3, [r7, #4]
 802ce2c:	681b      	ldr	r3, [r3, #0]
 802ce2e:	681b      	ldr	r3, [r3, #0]
 802ce30:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 802ce34:	687b      	ldr	r3, [r7, #4]
 802ce36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802ce38:	687b      	ldr	r3, [r7, #4]
 802ce3a:	681b      	ldr	r3, [r3, #0]
 802ce3c:	430a      	orrs	r2, r1
 802ce3e:	601a      	str	r2, [r3, #0]
 802ce40:	e007      	b.n	802ce52 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 802ce42:	687b      	ldr	r3, [r7, #4]
 802ce44:	681b      	ldr	r3, [r3, #0]
 802ce46:	681a      	ldr	r2, [r3, #0]
 802ce48:	687b      	ldr	r3, [r7, #4]
 802ce4a:	681b      	ldr	r3, [r3, #0]
 802ce4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802ce50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 802ce52:	687b      	ldr	r3, [r7, #4]
 802ce54:	69da      	ldr	r2, [r3, #28]
 802ce56:	687b      	ldr	r3, [r7, #4]
 802ce58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ce5a:	431a      	orrs	r2, r3
 802ce5c:	68bb      	ldr	r3, [r7, #8]
 802ce5e:	431a      	orrs	r2, r3
 802ce60:	687b      	ldr	r3, [r7, #4]
 802ce62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ce64:	ea42 0103 	orr.w	r1, r2, r3
 802ce68:	687b      	ldr	r3, [r7, #4]
 802ce6a:	68da      	ldr	r2, [r3, #12]
 802ce6c:	687b      	ldr	r3, [r7, #4]
 802ce6e:	681b      	ldr	r3, [r3, #0]
 802ce70:	430a      	orrs	r2, r1
 802ce72:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 802ce74:	687b      	ldr	r3, [r7, #4]
 802ce76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802ce78:	687b      	ldr	r3, [r7, #4]
 802ce7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ce7c:	431a      	orrs	r2, r3
 802ce7e:	687b      	ldr	r3, [r7, #4]
 802ce80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ce82:	431a      	orrs	r2, r3
 802ce84:	687b      	ldr	r3, [r7, #4]
 802ce86:	699b      	ldr	r3, [r3, #24]
 802ce88:	431a      	orrs	r2, r3
 802ce8a:	687b      	ldr	r3, [r7, #4]
 802ce8c:	691b      	ldr	r3, [r3, #16]
 802ce8e:	431a      	orrs	r2, r3
 802ce90:	687b      	ldr	r3, [r7, #4]
 802ce92:	695b      	ldr	r3, [r3, #20]
 802ce94:	431a      	orrs	r2, r3
 802ce96:	687b      	ldr	r3, [r7, #4]
 802ce98:	6a1b      	ldr	r3, [r3, #32]
 802ce9a:	431a      	orrs	r2, r3
 802ce9c:	687b      	ldr	r3, [r7, #4]
 802ce9e:	685b      	ldr	r3, [r3, #4]
 802cea0:	431a      	orrs	r2, r3
 802cea2:	687b      	ldr	r3, [r7, #4]
 802cea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802cea6:	431a      	orrs	r2, r3
 802cea8:	687b      	ldr	r3, [r7, #4]
 802ceaa:	689b      	ldr	r3, [r3, #8]
 802ceac:	431a      	orrs	r2, r3
 802ceae:	687b      	ldr	r3, [r7, #4]
 802ceb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802ceb2:	ea42 0103 	orr.w	r1, r2, r3
 802ceb6:	687b      	ldr	r3, [r7, #4]
 802ceb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802ceba:	687b      	ldr	r3, [r7, #4]
 802cebc:	681b      	ldr	r3, [r3, #0]
 802cebe:	430a      	orrs	r2, r1
 802cec0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 802cec2:	687b      	ldr	r3, [r7, #4]
 802cec4:	685b      	ldr	r3, [r3, #4]
 802cec6:	2b00      	cmp	r3, #0
 802cec8:	d113      	bne.n	802cef2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 802ceca:	687b      	ldr	r3, [r7, #4]
 802cecc:	681b      	ldr	r3, [r3, #0]
 802cece:	689b      	ldr	r3, [r3, #8]
 802ced0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 802ced4:	687b      	ldr	r3, [r7, #4]
 802ced6:	681b      	ldr	r3, [r3, #0]
 802ced8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802cedc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 802cede:	687b      	ldr	r3, [r7, #4]
 802cee0:	681b      	ldr	r3, [r3, #0]
 802cee2:	689b      	ldr	r3, [r3, #8]
 802cee4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 802cee8:	687b      	ldr	r3, [r7, #4]
 802ceea:	681b      	ldr	r3, [r3, #0]
 802ceec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802cef0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802cef2:	687b      	ldr	r3, [r7, #4]
 802cef4:	681b      	ldr	r3, [r3, #0]
 802cef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802cef8:	687b      	ldr	r3, [r7, #4]
 802cefa:	681b      	ldr	r3, [r3, #0]
 802cefc:	f022 0201 	bic.w	r2, r2, #1
 802cf00:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 802cf02:	687b      	ldr	r3, [r7, #4]
 802cf04:	685b      	ldr	r3, [r3, #4]
 802cf06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802cf0a:	2b00      	cmp	r3, #0
 802cf0c:	d00a      	beq.n	802cf24 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 802cf0e:	687b      	ldr	r3, [r7, #4]
 802cf10:	681b      	ldr	r3, [r3, #0]
 802cf12:	68db      	ldr	r3, [r3, #12]
 802cf14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802cf18:	687b      	ldr	r3, [r7, #4]
 802cf1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802cf1c:	687b      	ldr	r3, [r7, #4]
 802cf1e:	681b      	ldr	r3, [r3, #0]
 802cf20:	430a      	orrs	r2, r1
 802cf22:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802cf24:	687b      	ldr	r3, [r7, #4]
 802cf26:	2200      	movs	r2, #0
 802cf28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 802cf2c:	687b      	ldr	r3, [r7, #4]
 802cf2e:	2201      	movs	r2, #1
 802cf30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 802cf34:	2300      	movs	r3, #0
}
 802cf36:	4618      	mov	r0, r3
 802cf38:	3710      	adds	r7, #16
 802cf3a:	46bd      	mov	sp, r7
 802cf3c:	bd80      	pop	{r7, pc}
 802cf3e:	bf00      	nop
 802cf40:	40013000 	.word	0x40013000
 802cf44:	40003800 	.word	0x40003800
 802cf48:	40003c00 	.word	0x40003c00

0802cf4c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 802cf4c:	b480      	push	{r7}
 802cf4e:	b085      	sub	sp, #20
 802cf50:	af00      	add	r7, sp, #0
 802cf52:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 802cf54:	687b      	ldr	r3, [r7, #4]
 802cf56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802cf58:	095b      	lsrs	r3, r3, #5
 802cf5a:	3301      	adds	r3, #1
 802cf5c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 802cf5e:	687b      	ldr	r3, [r7, #4]
 802cf60:	68db      	ldr	r3, [r3, #12]
 802cf62:	3301      	adds	r3, #1
 802cf64:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 802cf66:	68bb      	ldr	r3, [r7, #8]
 802cf68:	3307      	adds	r3, #7
 802cf6a:	08db      	lsrs	r3, r3, #3
 802cf6c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 802cf6e:	68bb      	ldr	r3, [r7, #8]
 802cf70:	68fa      	ldr	r2, [r7, #12]
 802cf72:	fb02 f303 	mul.w	r3, r2, r3
}
 802cf76:	4618      	mov	r0, r3
 802cf78:	3714      	adds	r7, #20
 802cf7a:	46bd      	mov	sp, r7
 802cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cf80:	4770      	bx	lr
	...

0802cf84 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 802cf84:	b580      	push	{r7, lr}
 802cf86:	b084      	sub	sp, #16
 802cf88:	af00      	add	r7, sp, #0
 802cf8a:	60f8      	str	r0, [r7, #12]
 802cf8c:	60b9      	str	r1, [r7, #8]
 802cf8e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 802cf90:	68fb      	ldr	r3, [r7, #12]
 802cf92:	2b00      	cmp	r3, #0
 802cf94:	d101      	bne.n	802cf9a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 802cf96:	2301      	movs	r3, #1
 802cf98:	e03e      	b.n	802d018 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 802cf9a:	68fb      	ldr	r3, [r7, #12]
 802cf9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802cfa0:	b2db      	uxtb	r3, r3
 802cfa2:	2b00      	cmp	r3, #0
 802cfa4:	d106      	bne.n	802cfb4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 802cfa6:	68fb      	ldr	r3, [r7, #12]
 802cfa8:	2200      	movs	r2, #0
 802cfaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 802cfae:	68f8      	ldr	r0, [r7, #12]
 802cfb0:	f7fc f920 	bl	80291f4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 802cfb4:	68fb      	ldr	r3, [r7, #12]
 802cfb6:	681a      	ldr	r2, [r3, #0]
 802cfb8:	68fb      	ldr	r3, [r7, #12]
 802cfba:	3308      	adds	r3, #8
 802cfbc:	4619      	mov	r1, r3
 802cfbe:	4610      	mov	r0, r2
 802cfc0:	f001 fca4 	bl	802e90c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 802cfc4:	68fb      	ldr	r3, [r7, #12]
 802cfc6:	6818      	ldr	r0, [r3, #0]
 802cfc8:	68fb      	ldr	r3, [r7, #12]
 802cfca:	689b      	ldr	r3, [r3, #8]
 802cfcc:	461a      	mov	r2, r3
 802cfce:	68b9      	ldr	r1, [r7, #8]
 802cfd0:	f001 fd2c 	bl	802ea2c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 802cfd4:	68fb      	ldr	r3, [r7, #12]
 802cfd6:	6858      	ldr	r0, [r3, #4]
 802cfd8:	68fb      	ldr	r3, [r7, #12]
 802cfda:	689a      	ldr	r2, [r3, #8]
 802cfdc:	68fb      	ldr	r3, [r7, #12]
 802cfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cfe0:	6879      	ldr	r1, [r7, #4]
 802cfe2:	f001 fd73 	bl	802eacc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 802cfe6:	68fb      	ldr	r3, [r7, #12]
 802cfe8:	681b      	ldr	r3, [r3, #0]
 802cfea:	68fa      	ldr	r2, [r7, #12]
 802cfec:	6892      	ldr	r2, [r2, #8]
 802cfee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802cff2:	68fb      	ldr	r3, [r7, #12]
 802cff4:	681b      	ldr	r3, [r3, #0]
 802cff6:	68fa      	ldr	r2, [r7, #12]
 802cff8:	6892      	ldr	r2, [r2, #8]
 802cffa:	f041 0101 	orr.w	r1, r1, #1
 802cffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 802d002:	4b07      	ldr	r3, [pc, #28]	; (802d020 <HAL_SRAM_Init+0x9c>)
 802d004:	681b      	ldr	r3, [r3, #0]
 802d006:	4a06      	ldr	r2, [pc, #24]	; (802d020 <HAL_SRAM_Init+0x9c>)
 802d008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802d00c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 802d00e:	68fb      	ldr	r3, [r7, #12]
 802d010:	2201      	movs	r2, #1
 802d012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 802d016:	2300      	movs	r3, #0
}
 802d018:	4618      	mov	r0, r3
 802d01a:	3710      	adds	r7, #16
 802d01c:	46bd      	mov	sp, r7
 802d01e:	bd80      	pop	{r7, pc}
 802d020:	52004000 	.word	0x52004000

0802d024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802d024:	b580      	push	{r7, lr}
 802d026:	b082      	sub	sp, #8
 802d028:	af00      	add	r7, sp, #0
 802d02a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802d02c:	687b      	ldr	r3, [r7, #4]
 802d02e:	2b00      	cmp	r3, #0
 802d030:	d101      	bne.n	802d036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802d032:	2301      	movs	r3, #1
 802d034:	e049      	b.n	802d0ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802d036:	687b      	ldr	r3, [r7, #4]
 802d038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802d03c:	b2db      	uxtb	r3, r3
 802d03e:	2b00      	cmp	r3, #0
 802d040:	d106      	bne.n	802d050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802d042:	687b      	ldr	r3, [r7, #4]
 802d044:	2200      	movs	r2, #0
 802d046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802d04a:	6878      	ldr	r0, [r7, #4]
 802d04c:	f7fb fdb4 	bl	8028bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802d050:	687b      	ldr	r3, [r7, #4]
 802d052:	2202      	movs	r2, #2
 802d054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802d058:	687b      	ldr	r3, [r7, #4]
 802d05a:	681a      	ldr	r2, [r3, #0]
 802d05c:	687b      	ldr	r3, [r7, #4]
 802d05e:	3304      	adds	r3, #4
 802d060:	4619      	mov	r1, r3
 802d062:	4610      	mov	r0, r2
 802d064:	f000 f9f6 	bl	802d454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802d068:	687b      	ldr	r3, [r7, #4]
 802d06a:	2201      	movs	r2, #1
 802d06c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802d070:	687b      	ldr	r3, [r7, #4]
 802d072:	2201      	movs	r2, #1
 802d074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802d078:	687b      	ldr	r3, [r7, #4]
 802d07a:	2201      	movs	r2, #1
 802d07c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 802d080:	687b      	ldr	r3, [r7, #4]
 802d082:	2201      	movs	r2, #1
 802d084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802d088:	687b      	ldr	r3, [r7, #4]
 802d08a:	2201      	movs	r2, #1
 802d08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802d090:	687b      	ldr	r3, [r7, #4]
 802d092:	2201      	movs	r2, #1
 802d094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802d098:	687b      	ldr	r3, [r7, #4]
 802d09a:	2201      	movs	r2, #1
 802d09c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802d0a0:	687b      	ldr	r3, [r7, #4]
 802d0a2:	2201      	movs	r2, #1
 802d0a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802d0a8:	687b      	ldr	r3, [r7, #4]
 802d0aa:	2201      	movs	r2, #1
 802d0ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802d0b0:	687b      	ldr	r3, [r7, #4]
 802d0b2:	2201      	movs	r2, #1
 802d0b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 802d0b8:	687b      	ldr	r3, [r7, #4]
 802d0ba:	2201      	movs	r2, #1
 802d0bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802d0c0:	687b      	ldr	r3, [r7, #4]
 802d0c2:	2201      	movs	r2, #1
 802d0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802d0c8:	2300      	movs	r3, #0
}
 802d0ca:	4618      	mov	r0, r3
 802d0cc:	3708      	adds	r7, #8
 802d0ce:	46bd      	mov	sp, r7
 802d0d0:	bd80      	pop	{r7, pc}
	...

0802d0d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 802d0d4:	b480      	push	{r7}
 802d0d6:	b085      	sub	sp, #20
 802d0d8:	af00      	add	r7, sp, #0
 802d0da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 802d0dc:	687b      	ldr	r3, [r7, #4]
 802d0de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802d0e2:	b2db      	uxtb	r3, r3
 802d0e4:	2b01      	cmp	r3, #1
 802d0e6:	d001      	beq.n	802d0ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802d0e8:	2301      	movs	r3, #1
 802d0ea:	e054      	b.n	802d196 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802d0ec:	687b      	ldr	r3, [r7, #4]
 802d0ee:	2202      	movs	r2, #2
 802d0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802d0f4:	687b      	ldr	r3, [r7, #4]
 802d0f6:	681b      	ldr	r3, [r3, #0]
 802d0f8:	68da      	ldr	r2, [r3, #12]
 802d0fa:	687b      	ldr	r3, [r7, #4]
 802d0fc:	681b      	ldr	r3, [r3, #0]
 802d0fe:	f042 0201 	orr.w	r2, r2, #1
 802d102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802d104:	687b      	ldr	r3, [r7, #4]
 802d106:	681b      	ldr	r3, [r3, #0]
 802d108:	4a26      	ldr	r2, [pc, #152]	; (802d1a4 <HAL_TIM_Base_Start_IT+0xd0>)
 802d10a:	4293      	cmp	r3, r2
 802d10c:	d022      	beq.n	802d154 <HAL_TIM_Base_Start_IT+0x80>
 802d10e:	687b      	ldr	r3, [r7, #4]
 802d110:	681b      	ldr	r3, [r3, #0]
 802d112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802d116:	d01d      	beq.n	802d154 <HAL_TIM_Base_Start_IT+0x80>
 802d118:	687b      	ldr	r3, [r7, #4]
 802d11a:	681b      	ldr	r3, [r3, #0]
 802d11c:	4a22      	ldr	r2, [pc, #136]	; (802d1a8 <HAL_TIM_Base_Start_IT+0xd4>)
 802d11e:	4293      	cmp	r3, r2
 802d120:	d018      	beq.n	802d154 <HAL_TIM_Base_Start_IT+0x80>
 802d122:	687b      	ldr	r3, [r7, #4]
 802d124:	681b      	ldr	r3, [r3, #0]
 802d126:	4a21      	ldr	r2, [pc, #132]	; (802d1ac <HAL_TIM_Base_Start_IT+0xd8>)
 802d128:	4293      	cmp	r3, r2
 802d12a:	d013      	beq.n	802d154 <HAL_TIM_Base_Start_IT+0x80>
 802d12c:	687b      	ldr	r3, [r7, #4]
 802d12e:	681b      	ldr	r3, [r3, #0]
 802d130:	4a1f      	ldr	r2, [pc, #124]	; (802d1b0 <HAL_TIM_Base_Start_IT+0xdc>)
 802d132:	4293      	cmp	r3, r2
 802d134:	d00e      	beq.n	802d154 <HAL_TIM_Base_Start_IT+0x80>
 802d136:	687b      	ldr	r3, [r7, #4]
 802d138:	681b      	ldr	r3, [r3, #0]
 802d13a:	4a1e      	ldr	r2, [pc, #120]	; (802d1b4 <HAL_TIM_Base_Start_IT+0xe0>)
 802d13c:	4293      	cmp	r3, r2
 802d13e:	d009      	beq.n	802d154 <HAL_TIM_Base_Start_IT+0x80>
 802d140:	687b      	ldr	r3, [r7, #4]
 802d142:	681b      	ldr	r3, [r3, #0]
 802d144:	4a1c      	ldr	r2, [pc, #112]	; (802d1b8 <HAL_TIM_Base_Start_IT+0xe4>)
 802d146:	4293      	cmp	r3, r2
 802d148:	d004      	beq.n	802d154 <HAL_TIM_Base_Start_IT+0x80>
 802d14a:	687b      	ldr	r3, [r7, #4]
 802d14c:	681b      	ldr	r3, [r3, #0]
 802d14e:	4a1b      	ldr	r2, [pc, #108]	; (802d1bc <HAL_TIM_Base_Start_IT+0xe8>)
 802d150:	4293      	cmp	r3, r2
 802d152:	d115      	bne.n	802d180 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802d154:	687b      	ldr	r3, [r7, #4]
 802d156:	681b      	ldr	r3, [r3, #0]
 802d158:	689a      	ldr	r2, [r3, #8]
 802d15a:	4b19      	ldr	r3, [pc, #100]	; (802d1c0 <HAL_TIM_Base_Start_IT+0xec>)
 802d15c:	4013      	ands	r3, r2
 802d15e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802d160:	68fb      	ldr	r3, [r7, #12]
 802d162:	2b06      	cmp	r3, #6
 802d164:	d015      	beq.n	802d192 <HAL_TIM_Base_Start_IT+0xbe>
 802d166:	68fb      	ldr	r3, [r7, #12]
 802d168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802d16c:	d011      	beq.n	802d192 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 802d16e:	687b      	ldr	r3, [r7, #4]
 802d170:	681b      	ldr	r3, [r3, #0]
 802d172:	681a      	ldr	r2, [r3, #0]
 802d174:	687b      	ldr	r3, [r7, #4]
 802d176:	681b      	ldr	r3, [r3, #0]
 802d178:	f042 0201 	orr.w	r2, r2, #1
 802d17c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802d17e:	e008      	b.n	802d192 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802d180:	687b      	ldr	r3, [r7, #4]
 802d182:	681b      	ldr	r3, [r3, #0]
 802d184:	681a      	ldr	r2, [r3, #0]
 802d186:	687b      	ldr	r3, [r7, #4]
 802d188:	681b      	ldr	r3, [r3, #0]
 802d18a:	f042 0201 	orr.w	r2, r2, #1
 802d18e:	601a      	str	r2, [r3, #0]
 802d190:	e000      	b.n	802d194 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802d192:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 802d194:	2300      	movs	r3, #0
}
 802d196:	4618      	mov	r0, r3
 802d198:	3714      	adds	r7, #20
 802d19a:	46bd      	mov	sp, r7
 802d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d1a0:	4770      	bx	lr
 802d1a2:	bf00      	nop
 802d1a4:	40010000 	.word	0x40010000
 802d1a8:	40000400 	.word	0x40000400
 802d1ac:	40000800 	.word	0x40000800
 802d1b0:	40000c00 	.word	0x40000c00
 802d1b4:	40010400 	.word	0x40010400
 802d1b8:	40001800 	.word	0x40001800
 802d1bc:	40014000 	.word	0x40014000
 802d1c0:	00010007 	.word	0x00010007

0802d1c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802d1c4:	b580      	push	{r7, lr}
 802d1c6:	b082      	sub	sp, #8
 802d1c8:	af00      	add	r7, sp, #0
 802d1ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802d1cc:	687b      	ldr	r3, [r7, #4]
 802d1ce:	681b      	ldr	r3, [r3, #0]
 802d1d0:	691b      	ldr	r3, [r3, #16]
 802d1d2:	f003 0302 	and.w	r3, r3, #2
 802d1d6:	2b02      	cmp	r3, #2
 802d1d8:	d122      	bne.n	802d220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802d1da:	687b      	ldr	r3, [r7, #4]
 802d1dc:	681b      	ldr	r3, [r3, #0]
 802d1de:	68db      	ldr	r3, [r3, #12]
 802d1e0:	f003 0302 	and.w	r3, r3, #2
 802d1e4:	2b02      	cmp	r3, #2
 802d1e6:	d11b      	bne.n	802d220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802d1e8:	687b      	ldr	r3, [r7, #4]
 802d1ea:	681b      	ldr	r3, [r3, #0]
 802d1ec:	f06f 0202 	mvn.w	r2, #2
 802d1f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802d1f2:	687b      	ldr	r3, [r7, #4]
 802d1f4:	2201      	movs	r2, #1
 802d1f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802d1f8:	687b      	ldr	r3, [r7, #4]
 802d1fa:	681b      	ldr	r3, [r3, #0]
 802d1fc:	699b      	ldr	r3, [r3, #24]
 802d1fe:	f003 0303 	and.w	r3, r3, #3
 802d202:	2b00      	cmp	r3, #0
 802d204:	d003      	beq.n	802d20e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802d206:	6878      	ldr	r0, [r7, #4]
 802d208:	f000 f905 	bl	802d416 <HAL_TIM_IC_CaptureCallback>
 802d20c:	e005      	b.n	802d21a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802d20e:	6878      	ldr	r0, [r7, #4]
 802d210:	f000 f8f7 	bl	802d402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802d214:	6878      	ldr	r0, [r7, #4]
 802d216:	f000 f908 	bl	802d42a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802d21a:	687b      	ldr	r3, [r7, #4]
 802d21c:	2200      	movs	r2, #0
 802d21e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802d220:	687b      	ldr	r3, [r7, #4]
 802d222:	681b      	ldr	r3, [r3, #0]
 802d224:	691b      	ldr	r3, [r3, #16]
 802d226:	f003 0304 	and.w	r3, r3, #4
 802d22a:	2b04      	cmp	r3, #4
 802d22c:	d122      	bne.n	802d274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802d22e:	687b      	ldr	r3, [r7, #4]
 802d230:	681b      	ldr	r3, [r3, #0]
 802d232:	68db      	ldr	r3, [r3, #12]
 802d234:	f003 0304 	and.w	r3, r3, #4
 802d238:	2b04      	cmp	r3, #4
 802d23a:	d11b      	bne.n	802d274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802d23c:	687b      	ldr	r3, [r7, #4]
 802d23e:	681b      	ldr	r3, [r3, #0]
 802d240:	f06f 0204 	mvn.w	r2, #4
 802d244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802d246:	687b      	ldr	r3, [r7, #4]
 802d248:	2202      	movs	r2, #2
 802d24a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802d24c:	687b      	ldr	r3, [r7, #4]
 802d24e:	681b      	ldr	r3, [r3, #0]
 802d250:	699b      	ldr	r3, [r3, #24]
 802d252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802d256:	2b00      	cmp	r3, #0
 802d258:	d003      	beq.n	802d262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802d25a:	6878      	ldr	r0, [r7, #4]
 802d25c:	f000 f8db 	bl	802d416 <HAL_TIM_IC_CaptureCallback>
 802d260:	e005      	b.n	802d26e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802d262:	6878      	ldr	r0, [r7, #4]
 802d264:	f000 f8cd 	bl	802d402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802d268:	6878      	ldr	r0, [r7, #4]
 802d26a:	f000 f8de 	bl	802d42a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802d26e:	687b      	ldr	r3, [r7, #4]
 802d270:	2200      	movs	r2, #0
 802d272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802d274:	687b      	ldr	r3, [r7, #4]
 802d276:	681b      	ldr	r3, [r3, #0]
 802d278:	691b      	ldr	r3, [r3, #16]
 802d27a:	f003 0308 	and.w	r3, r3, #8
 802d27e:	2b08      	cmp	r3, #8
 802d280:	d122      	bne.n	802d2c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802d282:	687b      	ldr	r3, [r7, #4]
 802d284:	681b      	ldr	r3, [r3, #0]
 802d286:	68db      	ldr	r3, [r3, #12]
 802d288:	f003 0308 	and.w	r3, r3, #8
 802d28c:	2b08      	cmp	r3, #8
 802d28e:	d11b      	bne.n	802d2c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802d290:	687b      	ldr	r3, [r7, #4]
 802d292:	681b      	ldr	r3, [r3, #0]
 802d294:	f06f 0208 	mvn.w	r2, #8
 802d298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802d29a:	687b      	ldr	r3, [r7, #4]
 802d29c:	2204      	movs	r2, #4
 802d29e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802d2a0:	687b      	ldr	r3, [r7, #4]
 802d2a2:	681b      	ldr	r3, [r3, #0]
 802d2a4:	69db      	ldr	r3, [r3, #28]
 802d2a6:	f003 0303 	and.w	r3, r3, #3
 802d2aa:	2b00      	cmp	r3, #0
 802d2ac:	d003      	beq.n	802d2b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802d2ae:	6878      	ldr	r0, [r7, #4]
 802d2b0:	f000 f8b1 	bl	802d416 <HAL_TIM_IC_CaptureCallback>
 802d2b4:	e005      	b.n	802d2c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802d2b6:	6878      	ldr	r0, [r7, #4]
 802d2b8:	f000 f8a3 	bl	802d402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802d2bc:	6878      	ldr	r0, [r7, #4]
 802d2be:	f000 f8b4 	bl	802d42a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802d2c2:	687b      	ldr	r3, [r7, #4]
 802d2c4:	2200      	movs	r2, #0
 802d2c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802d2c8:	687b      	ldr	r3, [r7, #4]
 802d2ca:	681b      	ldr	r3, [r3, #0]
 802d2cc:	691b      	ldr	r3, [r3, #16]
 802d2ce:	f003 0310 	and.w	r3, r3, #16
 802d2d2:	2b10      	cmp	r3, #16
 802d2d4:	d122      	bne.n	802d31c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802d2d6:	687b      	ldr	r3, [r7, #4]
 802d2d8:	681b      	ldr	r3, [r3, #0]
 802d2da:	68db      	ldr	r3, [r3, #12]
 802d2dc:	f003 0310 	and.w	r3, r3, #16
 802d2e0:	2b10      	cmp	r3, #16
 802d2e2:	d11b      	bne.n	802d31c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802d2e4:	687b      	ldr	r3, [r7, #4]
 802d2e6:	681b      	ldr	r3, [r3, #0]
 802d2e8:	f06f 0210 	mvn.w	r2, #16
 802d2ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802d2ee:	687b      	ldr	r3, [r7, #4]
 802d2f0:	2208      	movs	r2, #8
 802d2f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802d2f4:	687b      	ldr	r3, [r7, #4]
 802d2f6:	681b      	ldr	r3, [r3, #0]
 802d2f8:	69db      	ldr	r3, [r3, #28]
 802d2fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802d2fe:	2b00      	cmp	r3, #0
 802d300:	d003      	beq.n	802d30a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802d302:	6878      	ldr	r0, [r7, #4]
 802d304:	f000 f887 	bl	802d416 <HAL_TIM_IC_CaptureCallback>
 802d308:	e005      	b.n	802d316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802d30a:	6878      	ldr	r0, [r7, #4]
 802d30c:	f000 f879 	bl	802d402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802d310:	6878      	ldr	r0, [r7, #4]
 802d312:	f000 f88a 	bl	802d42a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802d316:	687b      	ldr	r3, [r7, #4]
 802d318:	2200      	movs	r2, #0
 802d31a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802d31c:	687b      	ldr	r3, [r7, #4]
 802d31e:	681b      	ldr	r3, [r3, #0]
 802d320:	691b      	ldr	r3, [r3, #16]
 802d322:	f003 0301 	and.w	r3, r3, #1
 802d326:	2b01      	cmp	r3, #1
 802d328:	d10e      	bne.n	802d348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802d32a:	687b      	ldr	r3, [r7, #4]
 802d32c:	681b      	ldr	r3, [r3, #0]
 802d32e:	68db      	ldr	r3, [r3, #12]
 802d330:	f003 0301 	and.w	r3, r3, #1
 802d334:	2b01      	cmp	r3, #1
 802d336:	d107      	bne.n	802d348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802d338:	687b      	ldr	r3, [r7, #4]
 802d33a:	681b      	ldr	r3, [r3, #0]
 802d33c:	f06f 0201 	mvn.w	r2, #1
 802d340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802d342:	6878      	ldr	r0, [r7, #4]
 802d344:	f7f9 f904 	bl	8026550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802d348:	687b      	ldr	r3, [r7, #4]
 802d34a:	681b      	ldr	r3, [r3, #0]
 802d34c:	691b      	ldr	r3, [r3, #16]
 802d34e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802d352:	2b80      	cmp	r3, #128	; 0x80
 802d354:	d10e      	bne.n	802d374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802d356:	687b      	ldr	r3, [r7, #4]
 802d358:	681b      	ldr	r3, [r3, #0]
 802d35a:	68db      	ldr	r3, [r3, #12]
 802d35c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802d360:	2b80      	cmp	r3, #128	; 0x80
 802d362:	d107      	bne.n	802d374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802d364:	687b      	ldr	r3, [r7, #4]
 802d366:	681b      	ldr	r3, [r3, #0]
 802d368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802d36c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802d36e:	6878      	ldr	r0, [r7, #4]
 802d370:	f000 f9a2 	bl	802d6b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 802d374:	687b      	ldr	r3, [r7, #4]
 802d376:	681b      	ldr	r3, [r3, #0]
 802d378:	691b      	ldr	r3, [r3, #16]
 802d37a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d37e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802d382:	d10e      	bne.n	802d3a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802d384:	687b      	ldr	r3, [r7, #4]
 802d386:	681b      	ldr	r3, [r3, #0]
 802d388:	68db      	ldr	r3, [r3, #12]
 802d38a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802d38e:	2b80      	cmp	r3, #128	; 0x80
 802d390:	d107      	bne.n	802d3a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 802d392:	687b      	ldr	r3, [r7, #4]
 802d394:	681b      	ldr	r3, [r3, #0]
 802d396:	f46f 7280 	mvn.w	r2, #256	; 0x100
 802d39a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 802d39c:	6878      	ldr	r0, [r7, #4]
 802d39e:	f000 f995 	bl	802d6cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802d3a2:	687b      	ldr	r3, [r7, #4]
 802d3a4:	681b      	ldr	r3, [r3, #0]
 802d3a6:	691b      	ldr	r3, [r3, #16]
 802d3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802d3ac:	2b40      	cmp	r3, #64	; 0x40
 802d3ae:	d10e      	bne.n	802d3ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802d3b0:	687b      	ldr	r3, [r7, #4]
 802d3b2:	681b      	ldr	r3, [r3, #0]
 802d3b4:	68db      	ldr	r3, [r3, #12]
 802d3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802d3ba:	2b40      	cmp	r3, #64	; 0x40
 802d3bc:	d107      	bne.n	802d3ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802d3be:	687b      	ldr	r3, [r7, #4]
 802d3c0:	681b      	ldr	r3, [r3, #0]
 802d3c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802d3c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802d3c8:	6878      	ldr	r0, [r7, #4]
 802d3ca:	f000 f838 	bl	802d43e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802d3ce:	687b      	ldr	r3, [r7, #4]
 802d3d0:	681b      	ldr	r3, [r3, #0]
 802d3d2:	691b      	ldr	r3, [r3, #16]
 802d3d4:	f003 0320 	and.w	r3, r3, #32
 802d3d8:	2b20      	cmp	r3, #32
 802d3da:	d10e      	bne.n	802d3fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802d3dc:	687b      	ldr	r3, [r7, #4]
 802d3de:	681b      	ldr	r3, [r3, #0]
 802d3e0:	68db      	ldr	r3, [r3, #12]
 802d3e2:	f003 0320 	and.w	r3, r3, #32
 802d3e6:	2b20      	cmp	r3, #32
 802d3e8:	d107      	bne.n	802d3fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802d3ea:	687b      	ldr	r3, [r7, #4]
 802d3ec:	681b      	ldr	r3, [r3, #0]
 802d3ee:	f06f 0220 	mvn.w	r2, #32
 802d3f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802d3f4:	6878      	ldr	r0, [r7, #4]
 802d3f6:	f000 f955 	bl	802d6a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802d3fa:	bf00      	nop
 802d3fc:	3708      	adds	r7, #8
 802d3fe:	46bd      	mov	sp, r7
 802d400:	bd80      	pop	{r7, pc}

0802d402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802d402:	b480      	push	{r7}
 802d404:	b083      	sub	sp, #12
 802d406:	af00      	add	r7, sp, #0
 802d408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802d40a:	bf00      	nop
 802d40c:	370c      	adds	r7, #12
 802d40e:	46bd      	mov	sp, r7
 802d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d414:	4770      	bx	lr

0802d416 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802d416:	b480      	push	{r7}
 802d418:	b083      	sub	sp, #12
 802d41a:	af00      	add	r7, sp, #0
 802d41c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802d41e:	bf00      	nop
 802d420:	370c      	adds	r7, #12
 802d422:	46bd      	mov	sp, r7
 802d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d428:	4770      	bx	lr

0802d42a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802d42a:	b480      	push	{r7}
 802d42c:	b083      	sub	sp, #12
 802d42e:	af00      	add	r7, sp, #0
 802d430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802d432:	bf00      	nop
 802d434:	370c      	adds	r7, #12
 802d436:	46bd      	mov	sp, r7
 802d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d43c:	4770      	bx	lr

0802d43e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802d43e:	b480      	push	{r7}
 802d440:	b083      	sub	sp, #12
 802d442:	af00      	add	r7, sp, #0
 802d444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802d446:	bf00      	nop
 802d448:	370c      	adds	r7, #12
 802d44a:	46bd      	mov	sp, r7
 802d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d450:	4770      	bx	lr
	...

0802d454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 802d454:	b480      	push	{r7}
 802d456:	b085      	sub	sp, #20
 802d458:	af00      	add	r7, sp, #0
 802d45a:	6078      	str	r0, [r7, #4]
 802d45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802d45e:	687b      	ldr	r3, [r7, #4]
 802d460:	681b      	ldr	r3, [r3, #0]
 802d462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802d464:	687b      	ldr	r3, [r7, #4]
 802d466:	4a40      	ldr	r2, [pc, #256]	; (802d568 <TIM_Base_SetConfig+0x114>)
 802d468:	4293      	cmp	r3, r2
 802d46a:	d013      	beq.n	802d494 <TIM_Base_SetConfig+0x40>
 802d46c:	687b      	ldr	r3, [r7, #4]
 802d46e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802d472:	d00f      	beq.n	802d494 <TIM_Base_SetConfig+0x40>
 802d474:	687b      	ldr	r3, [r7, #4]
 802d476:	4a3d      	ldr	r2, [pc, #244]	; (802d56c <TIM_Base_SetConfig+0x118>)
 802d478:	4293      	cmp	r3, r2
 802d47a:	d00b      	beq.n	802d494 <TIM_Base_SetConfig+0x40>
 802d47c:	687b      	ldr	r3, [r7, #4]
 802d47e:	4a3c      	ldr	r2, [pc, #240]	; (802d570 <TIM_Base_SetConfig+0x11c>)
 802d480:	4293      	cmp	r3, r2
 802d482:	d007      	beq.n	802d494 <TIM_Base_SetConfig+0x40>
 802d484:	687b      	ldr	r3, [r7, #4]
 802d486:	4a3b      	ldr	r2, [pc, #236]	; (802d574 <TIM_Base_SetConfig+0x120>)
 802d488:	4293      	cmp	r3, r2
 802d48a:	d003      	beq.n	802d494 <TIM_Base_SetConfig+0x40>
 802d48c:	687b      	ldr	r3, [r7, #4]
 802d48e:	4a3a      	ldr	r2, [pc, #232]	; (802d578 <TIM_Base_SetConfig+0x124>)
 802d490:	4293      	cmp	r3, r2
 802d492:	d108      	bne.n	802d4a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802d494:	68fb      	ldr	r3, [r7, #12]
 802d496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802d49a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802d49c:	683b      	ldr	r3, [r7, #0]
 802d49e:	685b      	ldr	r3, [r3, #4]
 802d4a0:	68fa      	ldr	r2, [r7, #12]
 802d4a2:	4313      	orrs	r3, r2
 802d4a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802d4a6:	687b      	ldr	r3, [r7, #4]
 802d4a8:	4a2f      	ldr	r2, [pc, #188]	; (802d568 <TIM_Base_SetConfig+0x114>)
 802d4aa:	4293      	cmp	r3, r2
 802d4ac:	d01f      	beq.n	802d4ee <TIM_Base_SetConfig+0x9a>
 802d4ae:	687b      	ldr	r3, [r7, #4]
 802d4b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802d4b4:	d01b      	beq.n	802d4ee <TIM_Base_SetConfig+0x9a>
 802d4b6:	687b      	ldr	r3, [r7, #4]
 802d4b8:	4a2c      	ldr	r2, [pc, #176]	; (802d56c <TIM_Base_SetConfig+0x118>)
 802d4ba:	4293      	cmp	r3, r2
 802d4bc:	d017      	beq.n	802d4ee <TIM_Base_SetConfig+0x9a>
 802d4be:	687b      	ldr	r3, [r7, #4]
 802d4c0:	4a2b      	ldr	r2, [pc, #172]	; (802d570 <TIM_Base_SetConfig+0x11c>)
 802d4c2:	4293      	cmp	r3, r2
 802d4c4:	d013      	beq.n	802d4ee <TIM_Base_SetConfig+0x9a>
 802d4c6:	687b      	ldr	r3, [r7, #4]
 802d4c8:	4a2a      	ldr	r2, [pc, #168]	; (802d574 <TIM_Base_SetConfig+0x120>)
 802d4ca:	4293      	cmp	r3, r2
 802d4cc:	d00f      	beq.n	802d4ee <TIM_Base_SetConfig+0x9a>
 802d4ce:	687b      	ldr	r3, [r7, #4]
 802d4d0:	4a29      	ldr	r2, [pc, #164]	; (802d578 <TIM_Base_SetConfig+0x124>)
 802d4d2:	4293      	cmp	r3, r2
 802d4d4:	d00b      	beq.n	802d4ee <TIM_Base_SetConfig+0x9a>
 802d4d6:	687b      	ldr	r3, [r7, #4]
 802d4d8:	4a28      	ldr	r2, [pc, #160]	; (802d57c <TIM_Base_SetConfig+0x128>)
 802d4da:	4293      	cmp	r3, r2
 802d4dc:	d007      	beq.n	802d4ee <TIM_Base_SetConfig+0x9a>
 802d4de:	687b      	ldr	r3, [r7, #4]
 802d4e0:	4a27      	ldr	r2, [pc, #156]	; (802d580 <TIM_Base_SetConfig+0x12c>)
 802d4e2:	4293      	cmp	r3, r2
 802d4e4:	d003      	beq.n	802d4ee <TIM_Base_SetConfig+0x9a>
 802d4e6:	687b      	ldr	r3, [r7, #4]
 802d4e8:	4a26      	ldr	r2, [pc, #152]	; (802d584 <TIM_Base_SetConfig+0x130>)
 802d4ea:	4293      	cmp	r3, r2
 802d4ec:	d108      	bne.n	802d500 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802d4ee:	68fb      	ldr	r3, [r7, #12]
 802d4f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802d4f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802d4f6:	683b      	ldr	r3, [r7, #0]
 802d4f8:	68db      	ldr	r3, [r3, #12]
 802d4fa:	68fa      	ldr	r2, [r7, #12]
 802d4fc:	4313      	orrs	r3, r2
 802d4fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802d500:	68fb      	ldr	r3, [r7, #12]
 802d502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802d506:	683b      	ldr	r3, [r7, #0]
 802d508:	695b      	ldr	r3, [r3, #20]
 802d50a:	4313      	orrs	r3, r2
 802d50c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802d50e:	687b      	ldr	r3, [r7, #4]
 802d510:	68fa      	ldr	r2, [r7, #12]
 802d512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802d514:	683b      	ldr	r3, [r7, #0]
 802d516:	689a      	ldr	r2, [r3, #8]
 802d518:	687b      	ldr	r3, [r7, #4]
 802d51a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802d51c:	683b      	ldr	r3, [r7, #0]
 802d51e:	681a      	ldr	r2, [r3, #0]
 802d520:	687b      	ldr	r3, [r7, #4]
 802d522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802d524:	687b      	ldr	r3, [r7, #4]
 802d526:	4a10      	ldr	r2, [pc, #64]	; (802d568 <TIM_Base_SetConfig+0x114>)
 802d528:	4293      	cmp	r3, r2
 802d52a:	d00f      	beq.n	802d54c <TIM_Base_SetConfig+0xf8>
 802d52c:	687b      	ldr	r3, [r7, #4]
 802d52e:	4a12      	ldr	r2, [pc, #72]	; (802d578 <TIM_Base_SetConfig+0x124>)
 802d530:	4293      	cmp	r3, r2
 802d532:	d00b      	beq.n	802d54c <TIM_Base_SetConfig+0xf8>
 802d534:	687b      	ldr	r3, [r7, #4]
 802d536:	4a11      	ldr	r2, [pc, #68]	; (802d57c <TIM_Base_SetConfig+0x128>)
 802d538:	4293      	cmp	r3, r2
 802d53a:	d007      	beq.n	802d54c <TIM_Base_SetConfig+0xf8>
 802d53c:	687b      	ldr	r3, [r7, #4]
 802d53e:	4a10      	ldr	r2, [pc, #64]	; (802d580 <TIM_Base_SetConfig+0x12c>)
 802d540:	4293      	cmp	r3, r2
 802d542:	d003      	beq.n	802d54c <TIM_Base_SetConfig+0xf8>
 802d544:	687b      	ldr	r3, [r7, #4]
 802d546:	4a0f      	ldr	r2, [pc, #60]	; (802d584 <TIM_Base_SetConfig+0x130>)
 802d548:	4293      	cmp	r3, r2
 802d54a:	d103      	bne.n	802d554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802d54c:	683b      	ldr	r3, [r7, #0]
 802d54e:	691a      	ldr	r2, [r3, #16]
 802d550:	687b      	ldr	r3, [r7, #4]
 802d552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802d554:	687b      	ldr	r3, [r7, #4]
 802d556:	2201      	movs	r2, #1
 802d558:	615a      	str	r2, [r3, #20]
}
 802d55a:	bf00      	nop
 802d55c:	3714      	adds	r7, #20
 802d55e:	46bd      	mov	sp, r7
 802d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d564:	4770      	bx	lr
 802d566:	bf00      	nop
 802d568:	40010000 	.word	0x40010000
 802d56c:	40000400 	.word	0x40000400
 802d570:	40000800 	.word	0x40000800
 802d574:	40000c00 	.word	0x40000c00
 802d578:	40010400 	.word	0x40010400
 802d57c:	40014000 	.word	0x40014000
 802d580:	40014400 	.word	0x40014400
 802d584:	40014800 	.word	0x40014800

0802d588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 802d588:	b480      	push	{r7}
 802d58a:	b085      	sub	sp, #20
 802d58c:	af00      	add	r7, sp, #0
 802d58e:	6078      	str	r0, [r7, #4]
 802d590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802d592:	687b      	ldr	r3, [r7, #4]
 802d594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802d598:	2b01      	cmp	r3, #1
 802d59a:	d101      	bne.n	802d5a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802d59c:	2302      	movs	r3, #2
 802d59e:	e06d      	b.n	802d67c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 802d5a0:	687b      	ldr	r3, [r7, #4]
 802d5a2:	2201      	movs	r2, #1
 802d5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802d5a8:	687b      	ldr	r3, [r7, #4]
 802d5aa:	2202      	movs	r2, #2
 802d5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802d5b0:	687b      	ldr	r3, [r7, #4]
 802d5b2:	681b      	ldr	r3, [r3, #0]
 802d5b4:	685b      	ldr	r3, [r3, #4]
 802d5b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802d5b8:	687b      	ldr	r3, [r7, #4]
 802d5ba:	681b      	ldr	r3, [r3, #0]
 802d5bc:	689b      	ldr	r3, [r3, #8]
 802d5be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 802d5c0:	687b      	ldr	r3, [r7, #4]
 802d5c2:	681b      	ldr	r3, [r3, #0]
 802d5c4:	4a30      	ldr	r2, [pc, #192]	; (802d688 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802d5c6:	4293      	cmp	r3, r2
 802d5c8:	d004      	beq.n	802d5d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802d5ca:	687b      	ldr	r3, [r7, #4]
 802d5cc:	681b      	ldr	r3, [r3, #0]
 802d5ce:	4a2f      	ldr	r2, [pc, #188]	; (802d68c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802d5d0:	4293      	cmp	r3, r2
 802d5d2:	d108      	bne.n	802d5e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 802d5d4:	68fb      	ldr	r3, [r7, #12]
 802d5d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802d5da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 802d5dc:	683b      	ldr	r3, [r7, #0]
 802d5de:	685b      	ldr	r3, [r3, #4]
 802d5e0:	68fa      	ldr	r2, [r7, #12]
 802d5e2:	4313      	orrs	r3, r2
 802d5e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802d5e6:	68fb      	ldr	r3, [r7, #12]
 802d5e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802d5ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802d5ee:	683b      	ldr	r3, [r7, #0]
 802d5f0:	681b      	ldr	r3, [r3, #0]
 802d5f2:	68fa      	ldr	r2, [r7, #12]
 802d5f4:	4313      	orrs	r3, r2
 802d5f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802d5f8:	687b      	ldr	r3, [r7, #4]
 802d5fa:	681b      	ldr	r3, [r3, #0]
 802d5fc:	68fa      	ldr	r2, [r7, #12]
 802d5fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802d600:	687b      	ldr	r3, [r7, #4]
 802d602:	681b      	ldr	r3, [r3, #0]
 802d604:	4a20      	ldr	r2, [pc, #128]	; (802d688 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802d606:	4293      	cmp	r3, r2
 802d608:	d022      	beq.n	802d650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802d60a:	687b      	ldr	r3, [r7, #4]
 802d60c:	681b      	ldr	r3, [r3, #0]
 802d60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802d612:	d01d      	beq.n	802d650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802d614:	687b      	ldr	r3, [r7, #4]
 802d616:	681b      	ldr	r3, [r3, #0]
 802d618:	4a1d      	ldr	r2, [pc, #116]	; (802d690 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802d61a:	4293      	cmp	r3, r2
 802d61c:	d018      	beq.n	802d650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802d61e:	687b      	ldr	r3, [r7, #4]
 802d620:	681b      	ldr	r3, [r3, #0]
 802d622:	4a1c      	ldr	r2, [pc, #112]	; (802d694 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 802d624:	4293      	cmp	r3, r2
 802d626:	d013      	beq.n	802d650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802d628:	687b      	ldr	r3, [r7, #4]
 802d62a:	681b      	ldr	r3, [r3, #0]
 802d62c:	4a1a      	ldr	r2, [pc, #104]	; (802d698 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 802d62e:	4293      	cmp	r3, r2
 802d630:	d00e      	beq.n	802d650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802d632:	687b      	ldr	r3, [r7, #4]
 802d634:	681b      	ldr	r3, [r3, #0]
 802d636:	4a15      	ldr	r2, [pc, #84]	; (802d68c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802d638:	4293      	cmp	r3, r2
 802d63a:	d009      	beq.n	802d650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802d63c:	687b      	ldr	r3, [r7, #4]
 802d63e:	681b      	ldr	r3, [r3, #0]
 802d640:	4a16      	ldr	r2, [pc, #88]	; (802d69c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 802d642:	4293      	cmp	r3, r2
 802d644:	d004      	beq.n	802d650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802d646:	687b      	ldr	r3, [r7, #4]
 802d648:	681b      	ldr	r3, [r3, #0]
 802d64a:	4a15      	ldr	r2, [pc, #84]	; (802d6a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 802d64c:	4293      	cmp	r3, r2
 802d64e:	d10c      	bne.n	802d66a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802d650:	68bb      	ldr	r3, [r7, #8]
 802d652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802d656:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802d658:	683b      	ldr	r3, [r7, #0]
 802d65a:	689b      	ldr	r3, [r3, #8]
 802d65c:	68ba      	ldr	r2, [r7, #8]
 802d65e:	4313      	orrs	r3, r2
 802d660:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802d662:	687b      	ldr	r3, [r7, #4]
 802d664:	681b      	ldr	r3, [r3, #0]
 802d666:	68ba      	ldr	r2, [r7, #8]
 802d668:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802d66a:	687b      	ldr	r3, [r7, #4]
 802d66c:	2201      	movs	r2, #1
 802d66e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802d672:	687b      	ldr	r3, [r7, #4]
 802d674:	2200      	movs	r2, #0
 802d676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802d67a:	2300      	movs	r3, #0
}
 802d67c:	4618      	mov	r0, r3
 802d67e:	3714      	adds	r7, #20
 802d680:	46bd      	mov	sp, r7
 802d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d686:	4770      	bx	lr
 802d688:	40010000 	.word	0x40010000
 802d68c:	40010400 	.word	0x40010400
 802d690:	40000400 	.word	0x40000400
 802d694:	40000800 	.word	0x40000800
 802d698:	40000c00 	.word	0x40000c00
 802d69c:	40001800 	.word	0x40001800
 802d6a0:	40014000 	.word	0x40014000

0802d6a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802d6a4:	b480      	push	{r7}
 802d6a6:	b083      	sub	sp, #12
 802d6a8:	af00      	add	r7, sp, #0
 802d6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802d6ac:	bf00      	nop
 802d6ae:	370c      	adds	r7, #12
 802d6b0:	46bd      	mov	sp, r7
 802d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6b6:	4770      	bx	lr

0802d6b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802d6b8:	b480      	push	{r7}
 802d6ba:	b083      	sub	sp, #12
 802d6bc:	af00      	add	r7, sp, #0
 802d6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802d6c0:	bf00      	nop
 802d6c2:	370c      	adds	r7, #12
 802d6c4:	46bd      	mov	sp, r7
 802d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6ca:	4770      	bx	lr

0802d6cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 802d6cc:	b480      	push	{r7}
 802d6ce:	b083      	sub	sp, #12
 802d6d0:	af00      	add	r7, sp, #0
 802d6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 802d6d4:	bf00      	nop
 802d6d6:	370c      	adds	r7, #12
 802d6d8:	46bd      	mov	sp, r7
 802d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6de:	4770      	bx	lr

0802d6e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802d6e0:	b580      	push	{r7, lr}
 802d6e2:	b082      	sub	sp, #8
 802d6e4:	af00      	add	r7, sp, #0
 802d6e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802d6e8:	687b      	ldr	r3, [r7, #4]
 802d6ea:	2b00      	cmp	r3, #0
 802d6ec:	d101      	bne.n	802d6f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802d6ee:	2301      	movs	r3, #1
 802d6f0:	e042      	b.n	802d778 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802d6f2:	687b      	ldr	r3, [r7, #4]
 802d6f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802d6f8:	2b00      	cmp	r3, #0
 802d6fa:	d106      	bne.n	802d70a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802d6fc:	687b      	ldr	r3, [r7, #4]
 802d6fe:	2200      	movs	r2, #0
 802d700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802d704:	6878      	ldr	r0, [r7, #4]
 802d706:	f7fb fa7f 	bl	8028c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802d70a:	687b      	ldr	r3, [r7, #4]
 802d70c:	2224      	movs	r2, #36	; 0x24
 802d70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 802d712:	687b      	ldr	r3, [r7, #4]
 802d714:	681b      	ldr	r3, [r3, #0]
 802d716:	681a      	ldr	r2, [r3, #0]
 802d718:	687b      	ldr	r3, [r7, #4]
 802d71a:	681b      	ldr	r3, [r3, #0]
 802d71c:	f022 0201 	bic.w	r2, r2, #1
 802d720:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 802d722:	6878      	ldr	r0, [r7, #4]
 802d724:	f000 f86c 	bl	802d800 <UART_SetConfig>
 802d728:	4603      	mov	r3, r0
 802d72a:	2b01      	cmp	r3, #1
 802d72c:	d101      	bne.n	802d732 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 802d72e:	2301      	movs	r3, #1
 802d730:	e022      	b.n	802d778 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802d732:	687b      	ldr	r3, [r7, #4]
 802d734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d736:	2b00      	cmp	r3, #0
 802d738:	d002      	beq.n	802d740 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 802d73a:	6878      	ldr	r0, [r7, #4]
 802d73c:	f000 fdc8 	bl	802e2d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802d740:	687b      	ldr	r3, [r7, #4]
 802d742:	681b      	ldr	r3, [r3, #0]
 802d744:	685a      	ldr	r2, [r3, #4]
 802d746:	687b      	ldr	r3, [r7, #4]
 802d748:	681b      	ldr	r3, [r3, #0]
 802d74a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802d74e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802d750:	687b      	ldr	r3, [r7, #4]
 802d752:	681b      	ldr	r3, [r3, #0]
 802d754:	689a      	ldr	r2, [r3, #8]
 802d756:	687b      	ldr	r3, [r7, #4]
 802d758:	681b      	ldr	r3, [r3, #0]
 802d75a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802d75e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 802d760:	687b      	ldr	r3, [r7, #4]
 802d762:	681b      	ldr	r3, [r3, #0]
 802d764:	681a      	ldr	r2, [r3, #0]
 802d766:	687b      	ldr	r3, [r7, #4]
 802d768:	681b      	ldr	r3, [r3, #0]
 802d76a:	f042 0201 	orr.w	r2, r2, #1
 802d76e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 802d770:	6878      	ldr	r0, [r7, #4]
 802d772:	f000 fe4f 	bl	802e414 <UART_CheckIdleState>
 802d776:	4603      	mov	r3, r0
}
 802d778:	4618      	mov	r0, r3
 802d77a:	3708      	adds	r7, #8
 802d77c:	46bd      	mov	sp, r7
 802d77e:	bd80      	pop	{r7, pc}

0802d780 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 802d780:	b580      	push	{r7, lr}
 802d782:	b082      	sub	sp, #8
 802d784:	af00      	add	r7, sp, #0
 802d786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802d788:	687b      	ldr	r3, [r7, #4]
 802d78a:	2b00      	cmp	r3, #0
 802d78c:	d101      	bne.n	802d792 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 802d78e:	2301      	movs	r3, #1
 802d790:	e031      	b.n	802d7f6 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 802d792:	687b      	ldr	r3, [r7, #4]
 802d794:	2224      	movs	r2, #36	; 0x24
 802d796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 802d79a:	687b      	ldr	r3, [r7, #4]
 802d79c:	681b      	ldr	r3, [r3, #0]
 802d79e:	681a      	ldr	r2, [r3, #0]
 802d7a0:	687b      	ldr	r3, [r7, #4]
 802d7a2:	681b      	ldr	r3, [r3, #0]
 802d7a4:	f022 0201 	bic.w	r2, r2, #1
 802d7a8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 802d7aa:	687b      	ldr	r3, [r7, #4]
 802d7ac:	681b      	ldr	r3, [r3, #0]
 802d7ae:	2200      	movs	r2, #0
 802d7b0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 802d7b2:	687b      	ldr	r3, [r7, #4]
 802d7b4:	681b      	ldr	r3, [r3, #0]
 802d7b6:	2200      	movs	r2, #0
 802d7b8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 802d7ba:	687b      	ldr	r3, [r7, #4]
 802d7bc:	681b      	ldr	r3, [r3, #0]
 802d7be:	2200      	movs	r2, #0
 802d7c0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 802d7c2:	6878      	ldr	r0, [r7, #4]
 802d7c4:	f7fb fbe6 	bl	8028f94 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802d7c8:	687b      	ldr	r3, [r7, #4]
 802d7ca:	2200      	movs	r2, #0
 802d7cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 802d7d0:	687b      	ldr	r3, [r7, #4]
 802d7d2:	2200      	movs	r2, #0
 802d7d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 802d7d8:	687b      	ldr	r3, [r7, #4]
 802d7da:	2200      	movs	r2, #0
 802d7dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802d7e0:	687b      	ldr	r3, [r7, #4]
 802d7e2:	2200      	movs	r2, #0
 802d7e4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802d7e6:	687b      	ldr	r3, [r7, #4]
 802d7e8:	2200      	movs	r2, #0
 802d7ea:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 802d7ec:	687b      	ldr	r3, [r7, #4]
 802d7ee:	2200      	movs	r2, #0
 802d7f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802d7f4:	2300      	movs	r3, #0
}
 802d7f6:	4618      	mov	r0, r3
 802d7f8:	3708      	adds	r7, #8
 802d7fa:	46bd      	mov	sp, r7
 802d7fc:	bd80      	pop	{r7, pc}
	...

0802d800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 802d800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802d804:	b092      	sub	sp, #72	; 0x48
 802d806:	af00      	add	r7, sp, #0
 802d808:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 802d80a:	2300      	movs	r3, #0
 802d80c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802d810:	697b      	ldr	r3, [r7, #20]
 802d812:	689a      	ldr	r2, [r3, #8]
 802d814:	697b      	ldr	r3, [r7, #20]
 802d816:	691b      	ldr	r3, [r3, #16]
 802d818:	431a      	orrs	r2, r3
 802d81a:	697b      	ldr	r3, [r7, #20]
 802d81c:	695b      	ldr	r3, [r3, #20]
 802d81e:	431a      	orrs	r2, r3
 802d820:	697b      	ldr	r3, [r7, #20]
 802d822:	69db      	ldr	r3, [r3, #28]
 802d824:	4313      	orrs	r3, r2
 802d826:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802d828:	697b      	ldr	r3, [r7, #20]
 802d82a:	681b      	ldr	r3, [r3, #0]
 802d82c:	681a      	ldr	r2, [r3, #0]
 802d82e:	4bbe      	ldr	r3, [pc, #760]	; (802db28 <UART_SetConfig+0x328>)
 802d830:	4013      	ands	r3, r2
 802d832:	697a      	ldr	r2, [r7, #20]
 802d834:	6812      	ldr	r2, [r2, #0]
 802d836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802d838:	430b      	orrs	r3, r1
 802d83a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802d83c:	697b      	ldr	r3, [r7, #20]
 802d83e:	681b      	ldr	r3, [r3, #0]
 802d840:	685b      	ldr	r3, [r3, #4]
 802d842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802d846:	697b      	ldr	r3, [r7, #20]
 802d848:	68da      	ldr	r2, [r3, #12]
 802d84a:	697b      	ldr	r3, [r7, #20]
 802d84c:	681b      	ldr	r3, [r3, #0]
 802d84e:	430a      	orrs	r2, r1
 802d850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802d852:	697b      	ldr	r3, [r7, #20]
 802d854:	699b      	ldr	r3, [r3, #24]
 802d856:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802d858:	697b      	ldr	r3, [r7, #20]
 802d85a:	681b      	ldr	r3, [r3, #0]
 802d85c:	4ab3      	ldr	r2, [pc, #716]	; (802db2c <UART_SetConfig+0x32c>)
 802d85e:	4293      	cmp	r3, r2
 802d860:	d004      	beq.n	802d86c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802d862:	697b      	ldr	r3, [r7, #20]
 802d864:	6a1b      	ldr	r3, [r3, #32]
 802d866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802d868:	4313      	orrs	r3, r2
 802d86a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802d86c:	697b      	ldr	r3, [r7, #20]
 802d86e:	681b      	ldr	r3, [r3, #0]
 802d870:	689a      	ldr	r2, [r3, #8]
 802d872:	4baf      	ldr	r3, [pc, #700]	; (802db30 <UART_SetConfig+0x330>)
 802d874:	4013      	ands	r3, r2
 802d876:	697a      	ldr	r2, [r7, #20]
 802d878:	6812      	ldr	r2, [r2, #0]
 802d87a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802d87c:	430b      	orrs	r3, r1
 802d87e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 802d880:	697b      	ldr	r3, [r7, #20]
 802d882:	681b      	ldr	r3, [r3, #0]
 802d884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d886:	f023 010f 	bic.w	r1, r3, #15
 802d88a:	697b      	ldr	r3, [r7, #20]
 802d88c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802d88e:	697b      	ldr	r3, [r7, #20]
 802d890:	681b      	ldr	r3, [r3, #0]
 802d892:	430a      	orrs	r2, r1
 802d894:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802d896:	697b      	ldr	r3, [r7, #20]
 802d898:	681b      	ldr	r3, [r3, #0]
 802d89a:	4aa6      	ldr	r2, [pc, #664]	; (802db34 <UART_SetConfig+0x334>)
 802d89c:	4293      	cmp	r3, r2
 802d89e:	d177      	bne.n	802d990 <UART_SetConfig+0x190>
 802d8a0:	4ba5      	ldr	r3, [pc, #660]	; (802db38 <UART_SetConfig+0x338>)
 802d8a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d8a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802d8a8:	2b28      	cmp	r3, #40	; 0x28
 802d8aa:	d86d      	bhi.n	802d988 <UART_SetConfig+0x188>
 802d8ac:	a201      	add	r2, pc, #4	; (adr r2, 802d8b4 <UART_SetConfig+0xb4>)
 802d8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d8b2:	bf00      	nop
 802d8b4:	0802d959 	.word	0x0802d959
 802d8b8:	0802d989 	.word	0x0802d989
 802d8bc:	0802d989 	.word	0x0802d989
 802d8c0:	0802d989 	.word	0x0802d989
 802d8c4:	0802d989 	.word	0x0802d989
 802d8c8:	0802d989 	.word	0x0802d989
 802d8cc:	0802d989 	.word	0x0802d989
 802d8d0:	0802d989 	.word	0x0802d989
 802d8d4:	0802d961 	.word	0x0802d961
 802d8d8:	0802d989 	.word	0x0802d989
 802d8dc:	0802d989 	.word	0x0802d989
 802d8e0:	0802d989 	.word	0x0802d989
 802d8e4:	0802d989 	.word	0x0802d989
 802d8e8:	0802d989 	.word	0x0802d989
 802d8ec:	0802d989 	.word	0x0802d989
 802d8f0:	0802d989 	.word	0x0802d989
 802d8f4:	0802d969 	.word	0x0802d969
 802d8f8:	0802d989 	.word	0x0802d989
 802d8fc:	0802d989 	.word	0x0802d989
 802d900:	0802d989 	.word	0x0802d989
 802d904:	0802d989 	.word	0x0802d989
 802d908:	0802d989 	.word	0x0802d989
 802d90c:	0802d989 	.word	0x0802d989
 802d910:	0802d989 	.word	0x0802d989
 802d914:	0802d971 	.word	0x0802d971
 802d918:	0802d989 	.word	0x0802d989
 802d91c:	0802d989 	.word	0x0802d989
 802d920:	0802d989 	.word	0x0802d989
 802d924:	0802d989 	.word	0x0802d989
 802d928:	0802d989 	.word	0x0802d989
 802d92c:	0802d989 	.word	0x0802d989
 802d930:	0802d989 	.word	0x0802d989
 802d934:	0802d979 	.word	0x0802d979
 802d938:	0802d989 	.word	0x0802d989
 802d93c:	0802d989 	.word	0x0802d989
 802d940:	0802d989 	.word	0x0802d989
 802d944:	0802d989 	.word	0x0802d989
 802d948:	0802d989 	.word	0x0802d989
 802d94c:	0802d989 	.word	0x0802d989
 802d950:	0802d989 	.word	0x0802d989
 802d954:	0802d981 	.word	0x0802d981
 802d958:	2301      	movs	r3, #1
 802d95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d95e:	e222      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d960:	2304      	movs	r3, #4
 802d962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d966:	e21e      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d968:	2308      	movs	r3, #8
 802d96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d96e:	e21a      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d970:	2310      	movs	r3, #16
 802d972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d976:	e216      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d978:	2320      	movs	r3, #32
 802d97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d97e:	e212      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d980:	2340      	movs	r3, #64	; 0x40
 802d982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d986:	e20e      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d988:	2380      	movs	r3, #128	; 0x80
 802d98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d98e:	e20a      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d990:	697b      	ldr	r3, [r7, #20]
 802d992:	681b      	ldr	r3, [r3, #0]
 802d994:	4a69      	ldr	r2, [pc, #420]	; (802db3c <UART_SetConfig+0x33c>)
 802d996:	4293      	cmp	r3, r2
 802d998:	d130      	bne.n	802d9fc <UART_SetConfig+0x1fc>
 802d99a:	4b67      	ldr	r3, [pc, #412]	; (802db38 <UART_SetConfig+0x338>)
 802d99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d99e:	f003 0307 	and.w	r3, r3, #7
 802d9a2:	2b05      	cmp	r3, #5
 802d9a4:	d826      	bhi.n	802d9f4 <UART_SetConfig+0x1f4>
 802d9a6:	a201      	add	r2, pc, #4	; (adr r2, 802d9ac <UART_SetConfig+0x1ac>)
 802d9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d9ac:	0802d9c5 	.word	0x0802d9c5
 802d9b0:	0802d9cd 	.word	0x0802d9cd
 802d9b4:	0802d9d5 	.word	0x0802d9d5
 802d9b8:	0802d9dd 	.word	0x0802d9dd
 802d9bc:	0802d9e5 	.word	0x0802d9e5
 802d9c0:	0802d9ed 	.word	0x0802d9ed
 802d9c4:	2300      	movs	r3, #0
 802d9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d9ca:	e1ec      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d9cc:	2304      	movs	r3, #4
 802d9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d9d2:	e1e8      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d9d4:	2308      	movs	r3, #8
 802d9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d9da:	e1e4      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d9dc:	2310      	movs	r3, #16
 802d9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d9e2:	e1e0      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d9e4:	2320      	movs	r3, #32
 802d9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d9ea:	e1dc      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d9ec:	2340      	movs	r3, #64	; 0x40
 802d9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d9f2:	e1d8      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d9f4:	2380      	movs	r3, #128	; 0x80
 802d9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802d9fa:	e1d4      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802d9fc:	697b      	ldr	r3, [r7, #20]
 802d9fe:	681b      	ldr	r3, [r3, #0]
 802da00:	4a4f      	ldr	r2, [pc, #316]	; (802db40 <UART_SetConfig+0x340>)
 802da02:	4293      	cmp	r3, r2
 802da04:	d130      	bne.n	802da68 <UART_SetConfig+0x268>
 802da06:	4b4c      	ldr	r3, [pc, #304]	; (802db38 <UART_SetConfig+0x338>)
 802da08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802da0a:	f003 0307 	and.w	r3, r3, #7
 802da0e:	2b05      	cmp	r3, #5
 802da10:	d826      	bhi.n	802da60 <UART_SetConfig+0x260>
 802da12:	a201      	add	r2, pc, #4	; (adr r2, 802da18 <UART_SetConfig+0x218>)
 802da14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802da18:	0802da31 	.word	0x0802da31
 802da1c:	0802da39 	.word	0x0802da39
 802da20:	0802da41 	.word	0x0802da41
 802da24:	0802da49 	.word	0x0802da49
 802da28:	0802da51 	.word	0x0802da51
 802da2c:	0802da59 	.word	0x0802da59
 802da30:	2300      	movs	r3, #0
 802da32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802da36:	e1b6      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802da38:	2304      	movs	r3, #4
 802da3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802da3e:	e1b2      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802da40:	2308      	movs	r3, #8
 802da42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802da46:	e1ae      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802da48:	2310      	movs	r3, #16
 802da4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802da4e:	e1aa      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802da50:	2320      	movs	r3, #32
 802da52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802da56:	e1a6      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802da58:	2340      	movs	r3, #64	; 0x40
 802da5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802da5e:	e1a2      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802da60:	2380      	movs	r3, #128	; 0x80
 802da62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802da66:	e19e      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802da68:	697b      	ldr	r3, [r7, #20]
 802da6a:	681b      	ldr	r3, [r3, #0]
 802da6c:	4a35      	ldr	r2, [pc, #212]	; (802db44 <UART_SetConfig+0x344>)
 802da6e:	4293      	cmp	r3, r2
 802da70:	d130      	bne.n	802dad4 <UART_SetConfig+0x2d4>
 802da72:	4b31      	ldr	r3, [pc, #196]	; (802db38 <UART_SetConfig+0x338>)
 802da74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802da76:	f003 0307 	and.w	r3, r3, #7
 802da7a:	2b05      	cmp	r3, #5
 802da7c:	d826      	bhi.n	802dacc <UART_SetConfig+0x2cc>
 802da7e:	a201      	add	r2, pc, #4	; (adr r2, 802da84 <UART_SetConfig+0x284>)
 802da80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802da84:	0802da9d 	.word	0x0802da9d
 802da88:	0802daa5 	.word	0x0802daa5
 802da8c:	0802daad 	.word	0x0802daad
 802da90:	0802dab5 	.word	0x0802dab5
 802da94:	0802dabd 	.word	0x0802dabd
 802da98:	0802dac5 	.word	0x0802dac5
 802da9c:	2300      	movs	r3, #0
 802da9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802daa2:	e180      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802daa4:	2304      	movs	r3, #4
 802daa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802daaa:	e17c      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802daac:	2308      	movs	r3, #8
 802daae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dab2:	e178      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dab4:	2310      	movs	r3, #16
 802dab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802daba:	e174      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dabc:	2320      	movs	r3, #32
 802dabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dac2:	e170      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dac4:	2340      	movs	r3, #64	; 0x40
 802dac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802daca:	e16c      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dacc:	2380      	movs	r3, #128	; 0x80
 802dace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dad2:	e168      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dad4:	697b      	ldr	r3, [r7, #20]
 802dad6:	681b      	ldr	r3, [r3, #0]
 802dad8:	4a1b      	ldr	r2, [pc, #108]	; (802db48 <UART_SetConfig+0x348>)
 802dada:	4293      	cmp	r3, r2
 802dadc:	d142      	bne.n	802db64 <UART_SetConfig+0x364>
 802dade:	4b16      	ldr	r3, [pc, #88]	; (802db38 <UART_SetConfig+0x338>)
 802dae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802dae2:	f003 0307 	and.w	r3, r3, #7
 802dae6:	2b05      	cmp	r3, #5
 802dae8:	d838      	bhi.n	802db5c <UART_SetConfig+0x35c>
 802daea:	a201      	add	r2, pc, #4	; (adr r2, 802daf0 <UART_SetConfig+0x2f0>)
 802daec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802daf0:	0802db09 	.word	0x0802db09
 802daf4:	0802db11 	.word	0x0802db11
 802daf8:	0802db19 	.word	0x0802db19
 802dafc:	0802db21 	.word	0x0802db21
 802db00:	0802db4d 	.word	0x0802db4d
 802db04:	0802db55 	.word	0x0802db55
 802db08:	2300      	movs	r3, #0
 802db0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802db0e:	e14a      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802db10:	2304      	movs	r3, #4
 802db12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802db16:	e146      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802db18:	2308      	movs	r3, #8
 802db1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802db1e:	e142      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802db20:	2310      	movs	r3, #16
 802db22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802db26:	e13e      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802db28:	cfff69f3 	.word	0xcfff69f3
 802db2c:	58000c00 	.word	0x58000c00
 802db30:	11fff4ff 	.word	0x11fff4ff
 802db34:	40011000 	.word	0x40011000
 802db38:	58024400 	.word	0x58024400
 802db3c:	40004400 	.word	0x40004400
 802db40:	40004800 	.word	0x40004800
 802db44:	40004c00 	.word	0x40004c00
 802db48:	40005000 	.word	0x40005000
 802db4c:	2320      	movs	r3, #32
 802db4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802db52:	e128      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802db54:	2340      	movs	r3, #64	; 0x40
 802db56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802db5a:	e124      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802db5c:	2380      	movs	r3, #128	; 0x80
 802db5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802db62:	e120      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802db64:	697b      	ldr	r3, [r7, #20]
 802db66:	681b      	ldr	r3, [r3, #0]
 802db68:	4acb      	ldr	r2, [pc, #812]	; (802de98 <UART_SetConfig+0x698>)
 802db6a:	4293      	cmp	r3, r2
 802db6c:	d176      	bne.n	802dc5c <UART_SetConfig+0x45c>
 802db6e:	4bcb      	ldr	r3, [pc, #812]	; (802de9c <UART_SetConfig+0x69c>)
 802db70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802db72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802db76:	2b28      	cmp	r3, #40	; 0x28
 802db78:	d86c      	bhi.n	802dc54 <UART_SetConfig+0x454>
 802db7a:	a201      	add	r2, pc, #4	; (adr r2, 802db80 <UART_SetConfig+0x380>)
 802db7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802db80:	0802dc25 	.word	0x0802dc25
 802db84:	0802dc55 	.word	0x0802dc55
 802db88:	0802dc55 	.word	0x0802dc55
 802db8c:	0802dc55 	.word	0x0802dc55
 802db90:	0802dc55 	.word	0x0802dc55
 802db94:	0802dc55 	.word	0x0802dc55
 802db98:	0802dc55 	.word	0x0802dc55
 802db9c:	0802dc55 	.word	0x0802dc55
 802dba0:	0802dc2d 	.word	0x0802dc2d
 802dba4:	0802dc55 	.word	0x0802dc55
 802dba8:	0802dc55 	.word	0x0802dc55
 802dbac:	0802dc55 	.word	0x0802dc55
 802dbb0:	0802dc55 	.word	0x0802dc55
 802dbb4:	0802dc55 	.word	0x0802dc55
 802dbb8:	0802dc55 	.word	0x0802dc55
 802dbbc:	0802dc55 	.word	0x0802dc55
 802dbc0:	0802dc35 	.word	0x0802dc35
 802dbc4:	0802dc55 	.word	0x0802dc55
 802dbc8:	0802dc55 	.word	0x0802dc55
 802dbcc:	0802dc55 	.word	0x0802dc55
 802dbd0:	0802dc55 	.word	0x0802dc55
 802dbd4:	0802dc55 	.word	0x0802dc55
 802dbd8:	0802dc55 	.word	0x0802dc55
 802dbdc:	0802dc55 	.word	0x0802dc55
 802dbe0:	0802dc3d 	.word	0x0802dc3d
 802dbe4:	0802dc55 	.word	0x0802dc55
 802dbe8:	0802dc55 	.word	0x0802dc55
 802dbec:	0802dc55 	.word	0x0802dc55
 802dbf0:	0802dc55 	.word	0x0802dc55
 802dbf4:	0802dc55 	.word	0x0802dc55
 802dbf8:	0802dc55 	.word	0x0802dc55
 802dbfc:	0802dc55 	.word	0x0802dc55
 802dc00:	0802dc45 	.word	0x0802dc45
 802dc04:	0802dc55 	.word	0x0802dc55
 802dc08:	0802dc55 	.word	0x0802dc55
 802dc0c:	0802dc55 	.word	0x0802dc55
 802dc10:	0802dc55 	.word	0x0802dc55
 802dc14:	0802dc55 	.word	0x0802dc55
 802dc18:	0802dc55 	.word	0x0802dc55
 802dc1c:	0802dc55 	.word	0x0802dc55
 802dc20:	0802dc4d 	.word	0x0802dc4d
 802dc24:	2301      	movs	r3, #1
 802dc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dc2a:	e0bc      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dc2c:	2304      	movs	r3, #4
 802dc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dc32:	e0b8      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dc34:	2308      	movs	r3, #8
 802dc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dc3a:	e0b4      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dc3c:	2310      	movs	r3, #16
 802dc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dc42:	e0b0      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dc44:	2320      	movs	r3, #32
 802dc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dc4a:	e0ac      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dc4c:	2340      	movs	r3, #64	; 0x40
 802dc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dc52:	e0a8      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dc54:	2380      	movs	r3, #128	; 0x80
 802dc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dc5a:	e0a4      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dc5c:	697b      	ldr	r3, [r7, #20]
 802dc5e:	681b      	ldr	r3, [r3, #0]
 802dc60:	4a8f      	ldr	r2, [pc, #572]	; (802dea0 <UART_SetConfig+0x6a0>)
 802dc62:	4293      	cmp	r3, r2
 802dc64:	d130      	bne.n	802dcc8 <UART_SetConfig+0x4c8>
 802dc66:	4b8d      	ldr	r3, [pc, #564]	; (802de9c <UART_SetConfig+0x69c>)
 802dc68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802dc6a:	f003 0307 	and.w	r3, r3, #7
 802dc6e:	2b05      	cmp	r3, #5
 802dc70:	d826      	bhi.n	802dcc0 <UART_SetConfig+0x4c0>
 802dc72:	a201      	add	r2, pc, #4	; (adr r2, 802dc78 <UART_SetConfig+0x478>)
 802dc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dc78:	0802dc91 	.word	0x0802dc91
 802dc7c:	0802dc99 	.word	0x0802dc99
 802dc80:	0802dca1 	.word	0x0802dca1
 802dc84:	0802dca9 	.word	0x0802dca9
 802dc88:	0802dcb1 	.word	0x0802dcb1
 802dc8c:	0802dcb9 	.word	0x0802dcb9
 802dc90:	2300      	movs	r3, #0
 802dc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dc96:	e086      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dc98:	2304      	movs	r3, #4
 802dc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dc9e:	e082      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dca0:	2308      	movs	r3, #8
 802dca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dca6:	e07e      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dca8:	2310      	movs	r3, #16
 802dcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dcae:	e07a      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dcb0:	2320      	movs	r3, #32
 802dcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dcb6:	e076      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dcb8:	2340      	movs	r3, #64	; 0x40
 802dcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dcbe:	e072      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dcc0:	2380      	movs	r3, #128	; 0x80
 802dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dcc6:	e06e      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dcc8:	697b      	ldr	r3, [r7, #20]
 802dcca:	681b      	ldr	r3, [r3, #0]
 802dccc:	4a75      	ldr	r2, [pc, #468]	; (802dea4 <UART_SetConfig+0x6a4>)
 802dcce:	4293      	cmp	r3, r2
 802dcd0:	d130      	bne.n	802dd34 <UART_SetConfig+0x534>
 802dcd2:	4b72      	ldr	r3, [pc, #456]	; (802de9c <UART_SetConfig+0x69c>)
 802dcd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802dcd6:	f003 0307 	and.w	r3, r3, #7
 802dcda:	2b05      	cmp	r3, #5
 802dcdc:	d826      	bhi.n	802dd2c <UART_SetConfig+0x52c>
 802dcde:	a201      	add	r2, pc, #4	; (adr r2, 802dce4 <UART_SetConfig+0x4e4>)
 802dce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dce4:	0802dcfd 	.word	0x0802dcfd
 802dce8:	0802dd05 	.word	0x0802dd05
 802dcec:	0802dd0d 	.word	0x0802dd0d
 802dcf0:	0802dd15 	.word	0x0802dd15
 802dcf4:	0802dd1d 	.word	0x0802dd1d
 802dcf8:	0802dd25 	.word	0x0802dd25
 802dcfc:	2300      	movs	r3, #0
 802dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd02:	e050      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd04:	2304      	movs	r3, #4
 802dd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd0a:	e04c      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd0c:	2308      	movs	r3, #8
 802dd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd12:	e048      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd14:	2310      	movs	r3, #16
 802dd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd1a:	e044      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd1c:	2320      	movs	r3, #32
 802dd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd22:	e040      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd24:	2340      	movs	r3, #64	; 0x40
 802dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd2a:	e03c      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd2c:	2380      	movs	r3, #128	; 0x80
 802dd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd32:	e038      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd34:	697b      	ldr	r3, [r7, #20]
 802dd36:	681b      	ldr	r3, [r3, #0]
 802dd38:	4a5b      	ldr	r2, [pc, #364]	; (802dea8 <UART_SetConfig+0x6a8>)
 802dd3a:	4293      	cmp	r3, r2
 802dd3c:	d130      	bne.n	802dda0 <UART_SetConfig+0x5a0>
 802dd3e:	4b57      	ldr	r3, [pc, #348]	; (802de9c <UART_SetConfig+0x69c>)
 802dd40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802dd42:	f003 0307 	and.w	r3, r3, #7
 802dd46:	2b05      	cmp	r3, #5
 802dd48:	d826      	bhi.n	802dd98 <UART_SetConfig+0x598>
 802dd4a:	a201      	add	r2, pc, #4	; (adr r2, 802dd50 <UART_SetConfig+0x550>)
 802dd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dd50:	0802dd69 	.word	0x0802dd69
 802dd54:	0802dd71 	.word	0x0802dd71
 802dd58:	0802dd79 	.word	0x0802dd79
 802dd5c:	0802dd81 	.word	0x0802dd81
 802dd60:	0802dd89 	.word	0x0802dd89
 802dd64:	0802dd91 	.word	0x0802dd91
 802dd68:	2302      	movs	r3, #2
 802dd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd6e:	e01a      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd70:	2304      	movs	r3, #4
 802dd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd76:	e016      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd78:	2308      	movs	r3, #8
 802dd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd7e:	e012      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd80:	2310      	movs	r3, #16
 802dd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd86:	e00e      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd88:	2320      	movs	r3, #32
 802dd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd8e:	e00a      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd90:	2340      	movs	r3, #64	; 0x40
 802dd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd96:	e006      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dd98:	2380      	movs	r3, #128	; 0x80
 802dd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802dd9e:	e002      	b.n	802dda6 <UART_SetConfig+0x5a6>
 802dda0:	2380      	movs	r3, #128	; 0x80
 802dda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802dda6:	697b      	ldr	r3, [r7, #20]
 802dda8:	681b      	ldr	r3, [r3, #0]
 802ddaa:	4a3f      	ldr	r2, [pc, #252]	; (802dea8 <UART_SetConfig+0x6a8>)
 802ddac:	4293      	cmp	r3, r2
 802ddae:	f040 80f8 	bne.w	802dfa2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802ddb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802ddb6:	2b20      	cmp	r3, #32
 802ddb8:	dc46      	bgt.n	802de48 <UART_SetConfig+0x648>
 802ddba:	2b02      	cmp	r3, #2
 802ddbc:	f2c0 8082 	blt.w	802dec4 <UART_SetConfig+0x6c4>
 802ddc0:	3b02      	subs	r3, #2
 802ddc2:	2b1e      	cmp	r3, #30
 802ddc4:	d87e      	bhi.n	802dec4 <UART_SetConfig+0x6c4>
 802ddc6:	a201      	add	r2, pc, #4	; (adr r2, 802ddcc <UART_SetConfig+0x5cc>)
 802ddc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ddcc:	0802de4f 	.word	0x0802de4f
 802ddd0:	0802dec5 	.word	0x0802dec5
 802ddd4:	0802de57 	.word	0x0802de57
 802ddd8:	0802dec5 	.word	0x0802dec5
 802dddc:	0802dec5 	.word	0x0802dec5
 802dde0:	0802dec5 	.word	0x0802dec5
 802dde4:	0802de67 	.word	0x0802de67
 802dde8:	0802dec5 	.word	0x0802dec5
 802ddec:	0802dec5 	.word	0x0802dec5
 802ddf0:	0802dec5 	.word	0x0802dec5
 802ddf4:	0802dec5 	.word	0x0802dec5
 802ddf8:	0802dec5 	.word	0x0802dec5
 802ddfc:	0802dec5 	.word	0x0802dec5
 802de00:	0802dec5 	.word	0x0802dec5
 802de04:	0802de77 	.word	0x0802de77
 802de08:	0802dec5 	.word	0x0802dec5
 802de0c:	0802dec5 	.word	0x0802dec5
 802de10:	0802dec5 	.word	0x0802dec5
 802de14:	0802dec5 	.word	0x0802dec5
 802de18:	0802dec5 	.word	0x0802dec5
 802de1c:	0802dec5 	.word	0x0802dec5
 802de20:	0802dec5 	.word	0x0802dec5
 802de24:	0802dec5 	.word	0x0802dec5
 802de28:	0802dec5 	.word	0x0802dec5
 802de2c:	0802dec5 	.word	0x0802dec5
 802de30:	0802dec5 	.word	0x0802dec5
 802de34:	0802dec5 	.word	0x0802dec5
 802de38:	0802dec5 	.word	0x0802dec5
 802de3c:	0802dec5 	.word	0x0802dec5
 802de40:	0802dec5 	.word	0x0802dec5
 802de44:	0802deb7 	.word	0x0802deb7
 802de48:	2b40      	cmp	r3, #64	; 0x40
 802de4a:	d037      	beq.n	802debc <UART_SetConfig+0x6bc>
 802de4c:	e03a      	b.n	802dec4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 802de4e:	f7fe fb37 	bl	802c4c0 <HAL_RCCEx_GetD3PCLK1Freq>
 802de52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802de54:	e03c      	b.n	802ded0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802de56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802de5a:	4618      	mov	r0, r3
 802de5c:	f7fe fb46 	bl	802c4ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802de60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802de62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802de64:	e034      	b.n	802ded0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802de66:	f107 0318 	add.w	r3, r7, #24
 802de6a:	4618      	mov	r0, r3
 802de6c:	f7fe fc92 	bl	802c794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802de70:	69fb      	ldr	r3, [r7, #28]
 802de72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802de74:	e02c      	b.n	802ded0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802de76:	4b09      	ldr	r3, [pc, #36]	; (802de9c <UART_SetConfig+0x69c>)
 802de78:	681b      	ldr	r3, [r3, #0]
 802de7a:	f003 0320 	and.w	r3, r3, #32
 802de7e:	2b00      	cmp	r3, #0
 802de80:	d016      	beq.n	802deb0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802de82:	4b06      	ldr	r3, [pc, #24]	; (802de9c <UART_SetConfig+0x69c>)
 802de84:	681b      	ldr	r3, [r3, #0]
 802de86:	08db      	lsrs	r3, r3, #3
 802de88:	f003 0303 	and.w	r3, r3, #3
 802de8c:	4a07      	ldr	r2, [pc, #28]	; (802deac <UART_SetConfig+0x6ac>)
 802de8e:	fa22 f303 	lsr.w	r3, r2, r3
 802de92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802de94:	e01c      	b.n	802ded0 <UART_SetConfig+0x6d0>
 802de96:	bf00      	nop
 802de98:	40011400 	.word	0x40011400
 802de9c:	58024400 	.word	0x58024400
 802dea0:	40007800 	.word	0x40007800
 802dea4:	40007c00 	.word	0x40007c00
 802dea8:	58000c00 	.word	0x58000c00
 802deac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 802deb0:	4b9d      	ldr	r3, [pc, #628]	; (802e128 <UART_SetConfig+0x928>)
 802deb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802deb4:	e00c      	b.n	802ded0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802deb6:	4b9d      	ldr	r3, [pc, #628]	; (802e12c <UART_SetConfig+0x92c>)
 802deb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802deba:	e009      	b.n	802ded0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802debc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802dec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802dec2:	e005      	b.n	802ded0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 802dec4:	2300      	movs	r3, #0
 802dec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802dec8:	2301      	movs	r3, #1
 802deca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802dece:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 802ded0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ded2:	2b00      	cmp	r3, #0
 802ded4:	f000 81de 	beq.w	802e294 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 802ded8:	697b      	ldr	r3, [r7, #20]
 802deda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dedc:	4a94      	ldr	r2, [pc, #592]	; (802e130 <UART_SetConfig+0x930>)
 802dede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802dee2:	461a      	mov	r2, r3
 802dee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802dee6:	fbb3 f3f2 	udiv	r3, r3, r2
 802deea:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802deec:	697b      	ldr	r3, [r7, #20]
 802deee:	685a      	ldr	r2, [r3, #4]
 802def0:	4613      	mov	r3, r2
 802def2:	005b      	lsls	r3, r3, #1
 802def4:	4413      	add	r3, r2
 802def6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802def8:	429a      	cmp	r2, r3
 802defa:	d305      	bcc.n	802df08 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 802defc:	697b      	ldr	r3, [r7, #20]
 802defe:	685b      	ldr	r3, [r3, #4]
 802df00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802df02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802df04:	429a      	cmp	r2, r3
 802df06:	d903      	bls.n	802df10 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 802df08:	2301      	movs	r3, #1
 802df0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802df0e:	e1c1      	b.n	802e294 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802df10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802df12:	2200      	movs	r2, #0
 802df14:	60bb      	str	r3, [r7, #8]
 802df16:	60fa      	str	r2, [r7, #12]
 802df18:	697b      	ldr	r3, [r7, #20]
 802df1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802df1c:	4a84      	ldr	r2, [pc, #528]	; (802e130 <UART_SetConfig+0x930>)
 802df1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802df22:	b29b      	uxth	r3, r3
 802df24:	2200      	movs	r2, #0
 802df26:	603b      	str	r3, [r7, #0]
 802df28:	607a      	str	r2, [r7, #4]
 802df2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802df2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802df32:	f7f2 fa25 	bl	8020380 <__aeabi_uldivmod>
 802df36:	4602      	mov	r2, r0
 802df38:	460b      	mov	r3, r1
 802df3a:	4610      	mov	r0, r2
 802df3c:	4619      	mov	r1, r3
 802df3e:	f04f 0200 	mov.w	r2, #0
 802df42:	f04f 0300 	mov.w	r3, #0
 802df46:	020b      	lsls	r3, r1, #8
 802df48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802df4c:	0202      	lsls	r2, r0, #8
 802df4e:	6979      	ldr	r1, [r7, #20]
 802df50:	6849      	ldr	r1, [r1, #4]
 802df52:	0849      	lsrs	r1, r1, #1
 802df54:	2000      	movs	r0, #0
 802df56:	460c      	mov	r4, r1
 802df58:	4605      	mov	r5, r0
 802df5a:	eb12 0804 	adds.w	r8, r2, r4
 802df5e:	eb43 0905 	adc.w	r9, r3, r5
 802df62:	697b      	ldr	r3, [r7, #20]
 802df64:	685b      	ldr	r3, [r3, #4]
 802df66:	2200      	movs	r2, #0
 802df68:	469a      	mov	sl, r3
 802df6a:	4693      	mov	fp, r2
 802df6c:	4652      	mov	r2, sl
 802df6e:	465b      	mov	r3, fp
 802df70:	4640      	mov	r0, r8
 802df72:	4649      	mov	r1, r9
 802df74:	f7f2 fa04 	bl	8020380 <__aeabi_uldivmod>
 802df78:	4602      	mov	r2, r0
 802df7a:	460b      	mov	r3, r1
 802df7c:	4613      	mov	r3, r2
 802df7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 802df80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802df82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802df86:	d308      	bcc.n	802df9a <UART_SetConfig+0x79a>
 802df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802df8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802df8e:	d204      	bcs.n	802df9a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 802df90:	697b      	ldr	r3, [r7, #20]
 802df92:	681b      	ldr	r3, [r3, #0]
 802df94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802df96:	60da      	str	r2, [r3, #12]
 802df98:	e17c      	b.n	802e294 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 802df9a:	2301      	movs	r3, #1
 802df9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802dfa0:	e178      	b.n	802e294 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802dfa2:	697b      	ldr	r3, [r7, #20]
 802dfa4:	69db      	ldr	r3, [r3, #28]
 802dfa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802dfaa:	f040 80c5 	bne.w	802e138 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 802dfae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802dfb2:	2b20      	cmp	r3, #32
 802dfb4:	dc48      	bgt.n	802e048 <UART_SetConfig+0x848>
 802dfb6:	2b00      	cmp	r3, #0
 802dfb8:	db7b      	blt.n	802e0b2 <UART_SetConfig+0x8b2>
 802dfba:	2b20      	cmp	r3, #32
 802dfbc:	d879      	bhi.n	802e0b2 <UART_SetConfig+0x8b2>
 802dfbe:	a201      	add	r2, pc, #4	; (adr r2, 802dfc4 <UART_SetConfig+0x7c4>)
 802dfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dfc4:	0802e04f 	.word	0x0802e04f
 802dfc8:	0802e057 	.word	0x0802e057
 802dfcc:	0802e0b3 	.word	0x0802e0b3
 802dfd0:	0802e0b3 	.word	0x0802e0b3
 802dfd4:	0802e05f 	.word	0x0802e05f
 802dfd8:	0802e0b3 	.word	0x0802e0b3
 802dfdc:	0802e0b3 	.word	0x0802e0b3
 802dfe0:	0802e0b3 	.word	0x0802e0b3
 802dfe4:	0802e06f 	.word	0x0802e06f
 802dfe8:	0802e0b3 	.word	0x0802e0b3
 802dfec:	0802e0b3 	.word	0x0802e0b3
 802dff0:	0802e0b3 	.word	0x0802e0b3
 802dff4:	0802e0b3 	.word	0x0802e0b3
 802dff8:	0802e0b3 	.word	0x0802e0b3
 802dffc:	0802e0b3 	.word	0x0802e0b3
 802e000:	0802e0b3 	.word	0x0802e0b3
 802e004:	0802e07f 	.word	0x0802e07f
 802e008:	0802e0b3 	.word	0x0802e0b3
 802e00c:	0802e0b3 	.word	0x0802e0b3
 802e010:	0802e0b3 	.word	0x0802e0b3
 802e014:	0802e0b3 	.word	0x0802e0b3
 802e018:	0802e0b3 	.word	0x0802e0b3
 802e01c:	0802e0b3 	.word	0x0802e0b3
 802e020:	0802e0b3 	.word	0x0802e0b3
 802e024:	0802e0b3 	.word	0x0802e0b3
 802e028:	0802e0b3 	.word	0x0802e0b3
 802e02c:	0802e0b3 	.word	0x0802e0b3
 802e030:	0802e0b3 	.word	0x0802e0b3
 802e034:	0802e0b3 	.word	0x0802e0b3
 802e038:	0802e0b3 	.word	0x0802e0b3
 802e03c:	0802e0b3 	.word	0x0802e0b3
 802e040:	0802e0b3 	.word	0x0802e0b3
 802e044:	0802e0a5 	.word	0x0802e0a5
 802e048:	2b40      	cmp	r3, #64	; 0x40
 802e04a:	d02e      	beq.n	802e0aa <UART_SetConfig+0x8aa>
 802e04c:	e031      	b.n	802e0b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802e04e:	f7fd f801 	bl	802b054 <HAL_RCC_GetPCLK1Freq>
 802e052:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802e054:	e033      	b.n	802e0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802e056:	f7fd f813 	bl	802b080 <HAL_RCC_GetPCLK2Freq>
 802e05a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802e05c:	e02f      	b.n	802e0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802e05e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802e062:	4618      	mov	r0, r3
 802e064:	f7fe fa42 	bl	802c4ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802e068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802e06c:	e027      	b.n	802e0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802e06e:	f107 0318 	add.w	r3, r7, #24
 802e072:	4618      	mov	r0, r3
 802e074:	f7fe fb8e 	bl	802c794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802e078:	69fb      	ldr	r3, [r7, #28]
 802e07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802e07c:	e01f      	b.n	802e0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802e07e:	4b2d      	ldr	r3, [pc, #180]	; (802e134 <UART_SetConfig+0x934>)
 802e080:	681b      	ldr	r3, [r3, #0]
 802e082:	f003 0320 	and.w	r3, r3, #32
 802e086:	2b00      	cmp	r3, #0
 802e088:	d009      	beq.n	802e09e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802e08a:	4b2a      	ldr	r3, [pc, #168]	; (802e134 <UART_SetConfig+0x934>)
 802e08c:	681b      	ldr	r3, [r3, #0]
 802e08e:	08db      	lsrs	r3, r3, #3
 802e090:	f003 0303 	and.w	r3, r3, #3
 802e094:	4a24      	ldr	r2, [pc, #144]	; (802e128 <UART_SetConfig+0x928>)
 802e096:	fa22 f303 	lsr.w	r3, r2, r3
 802e09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802e09c:	e00f      	b.n	802e0be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 802e09e:	4b22      	ldr	r3, [pc, #136]	; (802e128 <UART_SetConfig+0x928>)
 802e0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802e0a2:	e00c      	b.n	802e0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802e0a4:	4b21      	ldr	r3, [pc, #132]	; (802e12c <UART_SetConfig+0x92c>)
 802e0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802e0a8:	e009      	b.n	802e0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802e0aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802e0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802e0b0:	e005      	b.n	802e0be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802e0b2:	2300      	movs	r3, #0
 802e0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802e0b6:	2301      	movs	r3, #1
 802e0b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802e0bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 802e0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802e0c0:	2b00      	cmp	r3, #0
 802e0c2:	f000 80e7 	beq.w	802e294 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802e0c6:	697b      	ldr	r3, [r7, #20]
 802e0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e0ca:	4a19      	ldr	r2, [pc, #100]	; (802e130 <UART_SetConfig+0x930>)
 802e0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802e0d0:	461a      	mov	r2, r3
 802e0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802e0d4:	fbb3 f3f2 	udiv	r3, r3, r2
 802e0d8:	005a      	lsls	r2, r3, #1
 802e0da:	697b      	ldr	r3, [r7, #20]
 802e0dc:	685b      	ldr	r3, [r3, #4]
 802e0de:	085b      	lsrs	r3, r3, #1
 802e0e0:	441a      	add	r2, r3
 802e0e2:	697b      	ldr	r3, [r7, #20]
 802e0e4:	685b      	ldr	r3, [r3, #4]
 802e0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 802e0ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802e0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e0ee:	2b0f      	cmp	r3, #15
 802e0f0:	d916      	bls.n	802e120 <UART_SetConfig+0x920>
 802e0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e0f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802e0f8:	d212      	bcs.n	802e120 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e0fc:	b29b      	uxth	r3, r3
 802e0fe:	f023 030f 	bic.w	r3, r3, #15
 802e102:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e106:	085b      	lsrs	r3, r3, #1
 802e108:	b29b      	uxth	r3, r3
 802e10a:	f003 0307 	and.w	r3, r3, #7
 802e10e:	b29a      	uxth	r2, r3
 802e110:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802e112:	4313      	orrs	r3, r2
 802e114:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 802e116:	697b      	ldr	r3, [r7, #20]
 802e118:	681b      	ldr	r3, [r3, #0]
 802e11a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802e11c:	60da      	str	r2, [r3, #12]
 802e11e:	e0b9      	b.n	802e294 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 802e120:	2301      	movs	r3, #1
 802e122:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802e126:	e0b5      	b.n	802e294 <UART_SetConfig+0xa94>
 802e128:	03d09000 	.word	0x03d09000
 802e12c:	003d0900 	.word	0x003d0900
 802e130:	08030d28 	.word	0x08030d28
 802e134:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 802e138:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802e13c:	2b20      	cmp	r3, #32
 802e13e:	dc49      	bgt.n	802e1d4 <UART_SetConfig+0x9d4>
 802e140:	2b00      	cmp	r3, #0
 802e142:	db7c      	blt.n	802e23e <UART_SetConfig+0xa3e>
 802e144:	2b20      	cmp	r3, #32
 802e146:	d87a      	bhi.n	802e23e <UART_SetConfig+0xa3e>
 802e148:	a201      	add	r2, pc, #4	; (adr r2, 802e150 <UART_SetConfig+0x950>)
 802e14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e14e:	bf00      	nop
 802e150:	0802e1db 	.word	0x0802e1db
 802e154:	0802e1e3 	.word	0x0802e1e3
 802e158:	0802e23f 	.word	0x0802e23f
 802e15c:	0802e23f 	.word	0x0802e23f
 802e160:	0802e1eb 	.word	0x0802e1eb
 802e164:	0802e23f 	.word	0x0802e23f
 802e168:	0802e23f 	.word	0x0802e23f
 802e16c:	0802e23f 	.word	0x0802e23f
 802e170:	0802e1fb 	.word	0x0802e1fb
 802e174:	0802e23f 	.word	0x0802e23f
 802e178:	0802e23f 	.word	0x0802e23f
 802e17c:	0802e23f 	.word	0x0802e23f
 802e180:	0802e23f 	.word	0x0802e23f
 802e184:	0802e23f 	.word	0x0802e23f
 802e188:	0802e23f 	.word	0x0802e23f
 802e18c:	0802e23f 	.word	0x0802e23f
 802e190:	0802e20b 	.word	0x0802e20b
 802e194:	0802e23f 	.word	0x0802e23f
 802e198:	0802e23f 	.word	0x0802e23f
 802e19c:	0802e23f 	.word	0x0802e23f
 802e1a0:	0802e23f 	.word	0x0802e23f
 802e1a4:	0802e23f 	.word	0x0802e23f
 802e1a8:	0802e23f 	.word	0x0802e23f
 802e1ac:	0802e23f 	.word	0x0802e23f
 802e1b0:	0802e23f 	.word	0x0802e23f
 802e1b4:	0802e23f 	.word	0x0802e23f
 802e1b8:	0802e23f 	.word	0x0802e23f
 802e1bc:	0802e23f 	.word	0x0802e23f
 802e1c0:	0802e23f 	.word	0x0802e23f
 802e1c4:	0802e23f 	.word	0x0802e23f
 802e1c8:	0802e23f 	.word	0x0802e23f
 802e1cc:	0802e23f 	.word	0x0802e23f
 802e1d0:	0802e231 	.word	0x0802e231
 802e1d4:	2b40      	cmp	r3, #64	; 0x40
 802e1d6:	d02e      	beq.n	802e236 <UART_SetConfig+0xa36>
 802e1d8:	e031      	b.n	802e23e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802e1da:	f7fc ff3b 	bl	802b054 <HAL_RCC_GetPCLK1Freq>
 802e1de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802e1e0:	e033      	b.n	802e24a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802e1e2:	f7fc ff4d 	bl	802b080 <HAL_RCC_GetPCLK2Freq>
 802e1e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802e1e8:	e02f      	b.n	802e24a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802e1ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802e1ee:	4618      	mov	r0, r3
 802e1f0:	f7fe f97c 	bl	802c4ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802e1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802e1f8:	e027      	b.n	802e24a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802e1fa:	f107 0318 	add.w	r3, r7, #24
 802e1fe:	4618      	mov	r0, r3
 802e200:	f7fe fac8 	bl	802c794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802e204:	69fb      	ldr	r3, [r7, #28]
 802e206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802e208:	e01f      	b.n	802e24a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802e20a:	4b2d      	ldr	r3, [pc, #180]	; (802e2c0 <UART_SetConfig+0xac0>)
 802e20c:	681b      	ldr	r3, [r3, #0]
 802e20e:	f003 0320 	and.w	r3, r3, #32
 802e212:	2b00      	cmp	r3, #0
 802e214:	d009      	beq.n	802e22a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802e216:	4b2a      	ldr	r3, [pc, #168]	; (802e2c0 <UART_SetConfig+0xac0>)
 802e218:	681b      	ldr	r3, [r3, #0]
 802e21a:	08db      	lsrs	r3, r3, #3
 802e21c:	f003 0303 	and.w	r3, r3, #3
 802e220:	4a28      	ldr	r2, [pc, #160]	; (802e2c4 <UART_SetConfig+0xac4>)
 802e222:	fa22 f303 	lsr.w	r3, r2, r3
 802e226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802e228:	e00f      	b.n	802e24a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 802e22a:	4b26      	ldr	r3, [pc, #152]	; (802e2c4 <UART_SetConfig+0xac4>)
 802e22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802e22e:	e00c      	b.n	802e24a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802e230:	4b25      	ldr	r3, [pc, #148]	; (802e2c8 <UART_SetConfig+0xac8>)
 802e232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802e234:	e009      	b.n	802e24a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802e236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802e23c:	e005      	b.n	802e24a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 802e23e:	2300      	movs	r3, #0
 802e240:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802e242:	2301      	movs	r3, #1
 802e244:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802e248:	bf00      	nop
    }

    if (pclk != 0U)
 802e24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802e24c:	2b00      	cmp	r3, #0
 802e24e:	d021      	beq.n	802e294 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802e250:	697b      	ldr	r3, [r7, #20]
 802e252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e254:	4a1d      	ldr	r2, [pc, #116]	; (802e2cc <UART_SetConfig+0xacc>)
 802e256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802e25a:	461a      	mov	r2, r3
 802e25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802e25e:	fbb3 f2f2 	udiv	r2, r3, r2
 802e262:	697b      	ldr	r3, [r7, #20]
 802e264:	685b      	ldr	r3, [r3, #4]
 802e266:	085b      	lsrs	r3, r3, #1
 802e268:	441a      	add	r2, r3
 802e26a:	697b      	ldr	r3, [r7, #20]
 802e26c:	685b      	ldr	r3, [r3, #4]
 802e26e:	fbb2 f3f3 	udiv	r3, r2, r3
 802e272:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802e274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e276:	2b0f      	cmp	r3, #15
 802e278:	d909      	bls.n	802e28e <UART_SetConfig+0xa8e>
 802e27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e27c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802e280:	d205      	bcs.n	802e28e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802e282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e284:	b29a      	uxth	r2, r3
 802e286:	697b      	ldr	r3, [r7, #20]
 802e288:	681b      	ldr	r3, [r3, #0]
 802e28a:	60da      	str	r2, [r3, #12]
 802e28c:	e002      	b.n	802e294 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 802e28e:	2301      	movs	r3, #1
 802e290:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802e294:	697b      	ldr	r3, [r7, #20]
 802e296:	2201      	movs	r2, #1
 802e298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 802e29c:	697b      	ldr	r3, [r7, #20]
 802e29e:	2201      	movs	r2, #1
 802e2a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802e2a4:	697b      	ldr	r3, [r7, #20]
 802e2a6:	2200      	movs	r2, #0
 802e2a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 802e2aa:	697b      	ldr	r3, [r7, #20]
 802e2ac:	2200      	movs	r2, #0
 802e2ae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 802e2b0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 802e2b4:	4618      	mov	r0, r3
 802e2b6:	3748      	adds	r7, #72	; 0x48
 802e2b8:	46bd      	mov	sp, r7
 802e2ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802e2be:	bf00      	nop
 802e2c0:	58024400 	.word	0x58024400
 802e2c4:	03d09000 	.word	0x03d09000
 802e2c8:	003d0900 	.word	0x003d0900
 802e2cc:	08030d28 	.word	0x08030d28

0802e2d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 802e2d0:	b480      	push	{r7}
 802e2d2:	b083      	sub	sp, #12
 802e2d4:	af00      	add	r7, sp, #0
 802e2d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 802e2d8:	687b      	ldr	r3, [r7, #4]
 802e2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e2dc:	f003 0301 	and.w	r3, r3, #1
 802e2e0:	2b00      	cmp	r3, #0
 802e2e2:	d00a      	beq.n	802e2fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802e2e4:	687b      	ldr	r3, [r7, #4]
 802e2e6:	681b      	ldr	r3, [r3, #0]
 802e2e8:	685b      	ldr	r3, [r3, #4]
 802e2ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 802e2ee:	687b      	ldr	r3, [r7, #4]
 802e2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802e2f2:	687b      	ldr	r3, [r7, #4]
 802e2f4:	681b      	ldr	r3, [r3, #0]
 802e2f6:	430a      	orrs	r2, r1
 802e2f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 802e2fa:	687b      	ldr	r3, [r7, #4]
 802e2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e2fe:	f003 0302 	and.w	r3, r3, #2
 802e302:	2b00      	cmp	r3, #0
 802e304:	d00a      	beq.n	802e31c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 802e306:	687b      	ldr	r3, [r7, #4]
 802e308:	681b      	ldr	r3, [r3, #0]
 802e30a:	685b      	ldr	r3, [r3, #4]
 802e30c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 802e310:	687b      	ldr	r3, [r7, #4]
 802e312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e314:	687b      	ldr	r3, [r7, #4]
 802e316:	681b      	ldr	r3, [r3, #0]
 802e318:	430a      	orrs	r2, r1
 802e31a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 802e31c:	687b      	ldr	r3, [r7, #4]
 802e31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e320:	f003 0304 	and.w	r3, r3, #4
 802e324:	2b00      	cmp	r3, #0
 802e326:	d00a      	beq.n	802e33e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802e328:	687b      	ldr	r3, [r7, #4]
 802e32a:	681b      	ldr	r3, [r3, #0]
 802e32c:	685b      	ldr	r3, [r3, #4]
 802e32e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 802e332:	687b      	ldr	r3, [r7, #4]
 802e334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802e336:	687b      	ldr	r3, [r7, #4]
 802e338:	681b      	ldr	r3, [r3, #0]
 802e33a:	430a      	orrs	r2, r1
 802e33c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 802e33e:	687b      	ldr	r3, [r7, #4]
 802e340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e342:	f003 0308 	and.w	r3, r3, #8
 802e346:	2b00      	cmp	r3, #0
 802e348:	d00a      	beq.n	802e360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802e34a:	687b      	ldr	r3, [r7, #4]
 802e34c:	681b      	ldr	r3, [r3, #0]
 802e34e:	685b      	ldr	r3, [r3, #4]
 802e350:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 802e354:	687b      	ldr	r3, [r7, #4]
 802e356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802e358:	687b      	ldr	r3, [r7, #4]
 802e35a:	681b      	ldr	r3, [r3, #0]
 802e35c:	430a      	orrs	r2, r1
 802e35e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 802e360:	687b      	ldr	r3, [r7, #4]
 802e362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e364:	f003 0310 	and.w	r3, r3, #16
 802e368:	2b00      	cmp	r3, #0
 802e36a:	d00a      	beq.n	802e382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 802e36c:	687b      	ldr	r3, [r7, #4]
 802e36e:	681b      	ldr	r3, [r3, #0]
 802e370:	689b      	ldr	r3, [r3, #8]
 802e372:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 802e376:	687b      	ldr	r3, [r7, #4]
 802e378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802e37a:	687b      	ldr	r3, [r7, #4]
 802e37c:	681b      	ldr	r3, [r3, #0]
 802e37e:	430a      	orrs	r2, r1
 802e380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802e382:	687b      	ldr	r3, [r7, #4]
 802e384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e386:	f003 0320 	and.w	r3, r3, #32
 802e38a:	2b00      	cmp	r3, #0
 802e38c:	d00a      	beq.n	802e3a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802e38e:	687b      	ldr	r3, [r7, #4]
 802e390:	681b      	ldr	r3, [r3, #0]
 802e392:	689b      	ldr	r3, [r3, #8]
 802e394:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 802e398:	687b      	ldr	r3, [r7, #4]
 802e39a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802e39c:	687b      	ldr	r3, [r7, #4]
 802e39e:	681b      	ldr	r3, [r3, #0]
 802e3a0:	430a      	orrs	r2, r1
 802e3a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802e3a4:	687b      	ldr	r3, [r7, #4]
 802e3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e3ac:	2b00      	cmp	r3, #0
 802e3ae:	d01a      	beq.n	802e3e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 802e3b0:	687b      	ldr	r3, [r7, #4]
 802e3b2:	681b      	ldr	r3, [r3, #0]
 802e3b4:	685b      	ldr	r3, [r3, #4]
 802e3b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 802e3ba:	687b      	ldr	r3, [r7, #4]
 802e3bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802e3be:	687b      	ldr	r3, [r7, #4]
 802e3c0:	681b      	ldr	r3, [r3, #0]
 802e3c2:	430a      	orrs	r2, r1
 802e3c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802e3c6:	687b      	ldr	r3, [r7, #4]
 802e3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e3ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802e3ce:	d10a      	bne.n	802e3e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 802e3d0:	687b      	ldr	r3, [r7, #4]
 802e3d2:	681b      	ldr	r3, [r3, #0]
 802e3d4:	685b      	ldr	r3, [r3, #4]
 802e3d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 802e3da:	687b      	ldr	r3, [r7, #4]
 802e3dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802e3de:	687b      	ldr	r3, [r7, #4]
 802e3e0:	681b      	ldr	r3, [r3, #0]
 802e3e2:	430a      	orrs	r2, r1
 802e3e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802e3e6:	687b      	ldr	r3, [r7, #4]
 802e3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e3ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802e3ee:	2b00      	cmp	r3, #0
 802e3f0:	d00a      	beq.n	802e408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802e3f2:	687b      	ldr	r3, [r7, #4]
 802e3f4:	681b      	ldr	r3, [r3, #0]
 802e3f6:	685b      	ldr	r3, [r3, #4]
 802e3f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 802e3fc:	687b      	ldr	r3, [r7, #4]
 802e3fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802e400:	687b      	ldr	r3, [r7, #4]
 802e402:	681b      	ldr	r3, [r3, #0]
 802e404:	430a      	orrs	r2, r1
 802e406:	605a      	str	r2, [r3, #4]
  }
}
 802e408:	bf00      	nop
 802e40a:	370c      	adds	r7, #12
 802e40c:	46bd      	mov	sp, r7
 802e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e412:	4770      	bx	lr

0802e414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802e414:	b580      	push	{r7, lr}
 802e416:	b098      	sub	sp, #96	; 0x60
 802e418:	af02      	add	r7, sp, #8
 802e41a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802e41c:	687b      	ldr	r3, [r7, #4]
 802e41e:	2200      	movs	r2, #0
 802e420:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802e424:	f7fb f944 	bl	80296b0 <HAL_GetTick>
 802e428:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802e42a:	687b      	ldr	r3, [r7, #4]
 802e42c:	681b      	ldr	r3, [r3, #0]
 802e42e:	681b      	ldr	r3, [r3, #0]
 802e430:	f003 0308 	and.w	r3, r3, #8
 802e434:	2b08      	cmp	r3, #8
 802e436:	d12f      	bne.n	802e498 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802e438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802e43c:	9300      	str	r3, [sp, #0]
 802e43e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802e440:	2200      	movs	r2, #0
 802e442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802e446:	6878      	ldr	r0, [r7, #4]
 802e448:	f000 f88e 	bl	802e568 <UART_WaitOnFlagUntilTimeout>
 802e44c:	4603      	mov	r3, r0
 802e44e:	2b00      	cmp	r3, #0
 802e450:	d022      	beq.n	802e498 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 802e452:	687b      	ldr	r3, [r7, #4]
 802e454:	681b      	ldr	r3, [r3, #0]
 802e456:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e45a:	e853 3f00 	ldrex	r3, [r3]
 802e45e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802e460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802e466:	653b      	str	r3, [r7, #80]	; 0x50
 802e468:	687b      	ldr	r3, [r7, #4]
 802e46a:	681b      	ldr	r3, [r3, #0]
 802e46c:	461a      	mov	r2, r3
 802e46e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802e470:	647b      	str	r3, [r7, #68]	; 0x44
 802e472:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e474:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802e476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e478:	e841 2300 	strex	r3, r2, [r1]
 802e47c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802e47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802e480:	2b00      	cmp	r3, #0
 802e482:	d1e6      	bne.n	802e452 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 802e484:	687b      	ldr	r3, [r7, #4]
 802e486:	2220      	movs	r2, #32
 802e488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 802e48c:	687b      	ldr	r3, [r7, #4]
 802e48e:	2200      	movs	r2, #0
 802e490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802e494:	2303      	movs	r3, #3
 802e496:	e063      	b.n	802e560 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802e498:	687b      	ldr	r3, [r7, #4]
 802e49a:	681b      	ldr	r3, [r3, #0]
 802e49c:	681b      	ldr	r3, [r3, #0]
 802e49e:	f003 0304 	and.w	r3, r3, #4
 802e4a2:	2b04      	cmp	r3, #4
 802e4a4:	d149      	bne.n	802e53a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802e4a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802e4aa:	9300      	str	r3, [sp, #0]
 802e4ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802e4ae:	2200      	movs	r2, #0
 802e4b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 802e4b4:	6878      	ldr	r0, [r7, #4]
 802e4b6:	f000 f857 	bl	802e568 <UART_WaitOnFlagUntilTimeout>
 802e4ba:	4603      	mov	r3, r0
 802e4bc:	2b00      	cmp	r3, #0
 802e4be:	d03c      	beq.n	802e53a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802e4c0:	687b      	ldr	r3, [r7, #4]
 802e4c2:	681b      	ldr	r3, [r3, #0]
 802e4c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e4c8:	e853 3f00 	ldrex	r3, [r3]
 802e4cc:	623b      	str	r3, [r7, #32]
   return(result);
 802e4ce:	6a3b      	ldr	r3, [r7, #32]
 802e4d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802e4d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802e4d6:	687b      	ldr	r3, [r7, #4]
 802e4d8:	681b      	ldr	r3, [r3, #0]
 802e4da:	461a      	mov	r2, r3
 802e4dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e4de:	633b      	str	r3, [r7, #48]	; 0x30
 802e4e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e4e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802e4e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802e4e6:	e841 2300 	strex	r3, r2, [r1]
 802e4ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802e4ee:	2b00      	cmp	r3, #0
 802e4f0:	d1e6      	bne.n	802e4c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802e4f2:	687b      	ldr	r3, [r7, #4]
 802e4f4:	681b      	ldr	r3, [r3, #0]
 802e4f6:	3308      	adds	r3, #8
 802e4f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e4fa:	693b      	ldr	r3, [r7, #16]
 802e4fc:	e853 3f00 	ldrex	r3, [r3]
 802e500:	60fb      	str	r3, [r7, #12]
   return(result);
 802e502:	68fb      	ldr	r3, [r7, #12]
 802e504:	f023 0301 	bic.w	r3, r3, #1
 802e508:	64bb      	str	r3, [r7, #72]	; 0x48
 802e50a:	687b      	ldr	r3, [r7, #4]
 802e50c:	681b      	ldr	r3, [r3, #0]
 802e50e:	3308      	adds	r3, #8
 802e510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802e512:	61fa      	str	r2, [r7, #28]
 802e514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e516:	69b9      	ldr	r1, [r7, #24]
 802e518:	69fa      	ldr	r2, [r7, #28]
 802e51a:	e841 2300 	strex	r3, r2, [r1]
 802e51e:	617b      	str	r3, [r7, #20]
   return(result);
 802e520:	697b      	ldr	r3, [r7, #20]
 802e522:	2b00      	cmp	r3, #0
 802e524:	d1e5      	bne.n	802e4f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802e526:	687b      	ldr	r3, [r7, #4]
 802e528:	2220      	movs	r2, #32
 802e52a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 802e52e:	687b      	ldr	r3, [r7, #4]
 802e530:	2200      	movs	r2, #0
 802e532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802e536:	2303      	movs	r3, #3
 802e538:	e012      	b.n	802e560 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802e53a:	687b      	ldr	r3, [r7, #4]
 802e53c:	2220      	movs	r2, #32
 802e53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 802e542:	687b      	ldr	r3, [r7, #4]
 802e544:	2220      	movs	r2, #32
 802e546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802e54a:	687b      	ldr	r3, [r7, #4]
 802e54c:	2200      	movs	r2, #0
 802e54e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802e550:	687b      	ldr	r3, [r7, #4]
 802e552:	2200      	movs	r2, #0
 802e554:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 802e556:	687b      	ldr	r3, [r7, #4]
 802e558:	2200      	movs	r2, #0
 802e55a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802e55e:	2300      	movs	r3, #0
}
 802e560:	4618      	mov	r0, r3
 802e562:	3758      	adds	r7, #88	; 0x58
 802e564:	46bd      	mov	sp, r7
 802e566:	bd80      	pop	{r7, pc}

0802e568 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802e568:	b580      	push	{r7, lr}
 802e56a:	b084      	sub	sp, #16
 802e56c:	af00      	add	r7, sp, #0
 802e56e:	60f8      	str	r0, [r7, #12]
 802e570:	60b9      	str	r1, [r7, #8]
 802e572:	603b      	str	r3, [r7, #0]
 802e574:	4613      	mov	r3, r2
 802e576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802e578:	e049      	b.n	802e60e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802e57a:	69bb      	ldr	r3, [r7, #24]
 802e57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802e580:	d045      	beq.n	802e60e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802e582:	f7fb f895 	bl	80296b0 <HAL_GetTick>
 802e586:	4602      	mov	r2, r0
 802e588:	683b      	ldr	r3, [r7, #0]
 802e58a:	1ad3      	subs	r3, r2, r3
 802e58c:	69ba      	ldr	r2, [r7, #24]
 802e58e:	429a      	cmp	r2, r3
 802e590:	d302      	bcc.n	802e598 <UART_WaitOnFlagUntilTimeout+0x30>
 802e592:	69bb      	ldr	r3, [r7, #24]
 802e594:	2b00      	cmp	r3, #0
 802e596:	d101      	bne.n	802e59c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 802e598:	2303      	movs	r3, #3
 802e59a:	e048      	b.n	802e62e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 802e59c:	68fb      	ldr	r3, [r7, #12]
 802e59e:	681b      	ldr	r3, [r3, #0]
 802e5a0:	681b      	ldr	r3, [r3, #0]
 802e5a2:	f003 0304 	and.w	r3, r3, #4
 802e5a6:	2b00      	cmp	r3, #0
 802e5a8:	d031      	beq.n	802e60e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802e5aa:	68fb      	ldr	r3, [r7, #12]
 802e5ac:	681b      	ldr	r3, [r3, #0]
 802e5ae:	69db      	ldr	r3, [r3, #28]
 802e5b0:	f003 0308 	and.w	r3, r3, #8
 802e5b4:	2b08      	cmp	r3, #8
 802e5b6:	d110      	bne.n	802e5da <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 802e5b8:	68fb      	ldr	r3, [r7, #12]
 802e5ba:	681b      	ldr	r3, [r3, #0]
 802e5bc:	2208      	movs	r2, #8
 802e5be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 802e5c0:	68f8      	ldr	r0, [r7, #12]
 802e5c2:	f000 f839 	bl	802e638 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 802e5c6:	68fb      	ldr	r3, [r7, #12]
 802e5c8:	2208      	movs	r2, #8
 802e5ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 802e5ce:	68fb      	ldr	r3, [r7, #12]
 802e5d0:	2200      	movs	r2, #0
 802e5d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 802e5d6:	2301      	movs	r3, #1
 802e5d8:	e029      	b.n	802e62e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802e5da:	68fb      	ldr	r3, [r7, #12]
 802e5dc:	681b      	ldr	r3, [r3, #0]
 802e5de:	69db      	ldr	r3, [r3, #28]
 802e5e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802e5e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802e5e8:	d111      	bne.n	802e60e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802e5ea:	68fb      	ldr	r3, [r7, #12]
 802e5ec:	681b      	ldr	r3, [r3, #0]
 802e5ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802e5f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 802e5f4:	68f8      	ldr	r0, [r7, #12]
 802e5f6:	f000 f81f 	bl	802e638 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802e5fa:	68fb      	ldr	r3, [r7, #12]
 802e5fc:	2220      	movs	r2, #32
 802e5fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802e602:	68fb      	ldr	r3, [r7, #12]
 802e604:	2200      	movs	r2, #0
 802e606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 802e60a:	2303      	movs	r3, #3
 802e60c:	e00f      	b.n	802e62e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802e60e:	68fb      	ldr	r3, [r7, #12]
 802e610:	681b      	ldr	r3, [r3, #0]
 802e612:	69da      	ldr	r2, [r3, #28]
 802e614:	68bb      	ldr	r3, [r7, #8]
 802e616:	4013      	ands	r3, r2
 802e618:	68ba      	ldr	r2, [r7, #8]
 802e61a:	429a      	cmp	r2, r3
 802e61c:	bf0c      	ite	eq
 802e61e:	2301      	moveq	r3, #1
 802e620:	2300      	movne	r3, #0
 802e622:	b2db      	uxtb	r3, r3
 802e624:	461a      	mov	r2, r3
 802e626:	79fb      	ldrb	r3, [r7, #7]
 802e628:	429a      	cmp	r2, r3
 802e62a:	d0a6      	beq.n	802e57a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802e62c:	2300      	movs	r3, #0
}
 802e62e:	4618      	mov	r0, r3
 802e630:	3710      	adds	r7, #16
 802e632:	46bd      	mov	sp, r7
 802e634:	bd80      	pop	{r7, pc}
	...

0802e638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802e638:	b480      	push	{r7}
 802e63a:	b095      	sub	sp, #84	; 0x54
 802e63c:	af00      	add	r7, sp, #0
 802e63e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802e640:	687b      	ldr	r3, [r7, #4]
 802e642:	681b      	ldr	r3, [r3, #0]
 802e644:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e648:	e853 3f00 	ldrex	r3, [r3]
 802e64c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802e64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802e654:	64fb      	str	r3, [r7, #76]	; 0x4c
 802e656:	687b      	ldr	r3, [r7, #4]
 802e658:	681b      	ldr	r3, [r3, #0]
 802e65a:	461a      	mov	r2, r3
 802e65c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e65e:	643b      	str	r3, [r7, #64]	; 0x40
 802e660:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802e664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802e666:	e841 2300 	strex	r3, r2, [r1]
 802e66a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802e66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802e66e:	2b00      	cmp	r3, #0
 802e670:	d1e6      	bne.n	802e640 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802e672:	687b      	ldr	r3, [r7, #4]
 802e674:	681b      	ldr	r3, [r3, #0]
 802e676:	3308      	adds	r3, #8
 802e678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e67a:	6a3b      	ldr	r3, [r7, #32]
 802e67c:	e853 3f00 	ldrex	r3, [r3]
 802e680:	61fb      	str	r3, [r7, #28]
   return(result);
 802e682:	69fa      	ldr	r2, [r7, #28]
 802e684:	4b1e      	ldr	r3, [pc, #120]	; (802e700 <UART_EndRxTransfer+0xc8>)
 802e686:	4013      	ands	r3, r2
 802e688:	64bb      	str	r3, [r7, #72]	; 0x48
 802e68a:	687b      	ldr	r3, [r7, #4]
 802e68c:	681b      	ldr	r3, [r3, #0]
 802e68e:	3308      	adds	r3, #8
 802e690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802e692:	62fa      	str	r2, [r7, #44]	; 0x2c
 802e694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802e698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802e69a:	e841 2300 	strex	r3, r2, [r1]
 802e69e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e6a2:	2b00      	cmp	r3, #0
 802e6a4:	d1e5      	bne.n	802e672 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802e6a6:	687b      	ldr	r3, [r7, #4]
 802e6a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e6aa:	2b01      	cmp	r3, #1
 802e6ac:	d118      	bne.n	802e6e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802e6ae:	687b      	ldr	r3, [r7, #4]
 802e6b0:	681b      	ldr	r3, [r3, #0]
 802e6b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802e6b4:	68fb      	ldr	r3, [r7, #12]
 802e6b6:	e853 3f00 	ldrex	r3, [r3]
 802e6ba:	60bb      	str	r3, [r7, #8]
   return(result);
 802e6bc:	68bb      	ldr	r3, [r7, #8]
 802e6be:	f023 0310 	bic.w	r3, r3, #16
 802e6c2:	647b      	str	r3, [r7, #68]	; 0x44
 802e6c4:	687b      	ldr	r3, [r7, #4]
 802e6c6:	681b      	ldr	r3, [r3, #0]
 802e6c8:	461a      	mov	r2, r3
 802e6ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e6cc:	61bb      	str	r3, [r7, #24]
 802e6ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802e6d0:	6979      	ldr	r1, [r7, #20]
 802e6d2:	69ba      	ldr	r2, [r7, #24]
 802e6d4:	e841 2300 	strex	r3, r2, [r1]
 802e6d8:	613b      	str	r3, [r7, #16]
   return(result);
 802e6da:	693b      	ldr	r3, [r7, #16]
 802e6dc:	2b00      	cmp	r3, #0
 802e6de:	d1e6      	bne.n	802e6ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802e6e0:	687b      	ldr	r3, [r7, #4]
 802e6e2:	2220      	movs	r2, #32
 802e6e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802e6e8:	687b      	ldr	r3, [r7, #4]
 802e6ea:	2200      	movs	r2, #0
 802e6ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 802e6ee:	687b      	ldr	r3, [r7, #4]
 802e6f0:	2200      	movs	r2, #0
 802e6f2:	675a      	str	r2, [r3, #116]	; 0x74
}
 802e6f4:	bf00      	nop
 802e6f6:	3754      	adds	r7, #84	; 0x54
 802e6f8:	46bd      	mov	sp, r7
 802e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6fe:	4770      	bx	lr
 802e700:	effffffe 	.word	0xeffffffe

0802e704 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802e704:	b480      	push	{r7}
 802e706:	b085      	sub	sp, #20
 802e708:	af00      	add	r7, sp, #0
 802e70a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802e70c:	687b      	ldr	r3, [r7, #4]
 802e70e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802e712:	2b01      	cmp	r3, #1
 802e714:	d101      	bne.n	802e71a <HAL_UARTEx_DisableFifoMode+0x16>
 802e716:	2302      	movs	r3, #2
 802e718:	e027      	b.n	802e76a <HAL_UARTEx_DisableFifoMode+0x66>
 802e71a:	687b      	ldr	r3, [r7, #4]
 802e71c:	2201      	movs	r2, #1
 802e71e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802e722:	687b      	ldr	r3, [r7, #4]
 802e724:	2224      	movs	r2, #36	; 0x24
 802e726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802e72a:	687b      	ldr	r3, [r7, #4]
 802e72c:	681b      	ldr	r3, [r3, #0]
 802e72e:	681b      	ldr	r3, [r3, #0]
 802e730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802e732:	687b      	ldr	r3, [r7, #4]
 802e734:	681b      	ldr	r3, [r3, #0]
 802e736:	681a      	ldr	r2, [r3, #0]
 802e738:	687b      	ldr	r3, [r7, #4]
 802e73a:	681b      	ldr	r3, [r3, #0]
 802e73c:	f022 0201 	bic.w	r2, r2, #1
 802e740:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802e742:	68fb      	ldr	r3, [r7, #12]
 802e744:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802e748:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802e74a:	687b      	ldr	r3, [r7, #4]
 802e74c:	2200      	movs	r2, #0
 802e74e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802e750:	687b      	ldr	r3, [r7, #4]
 802e752:	681b      	ldr	r3, [r3, #0]
 802e754:	68fa      	ldr	r2, [r7, #12]
 802e756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802e758:	687b      	ldr	r3, [r7, #4]
 802e75a:	2220      	movs	r2, #32
 802e75c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802e760:	687b      	ldr	r3, [r7, #4]
 802e762:	2200      	movs	r2, #0
 802e764:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802e768:	2300      	movs	r3, #0
}
 802e76a:	4618      	mov	r0, r3
 802e76c:	3714      	adds	r7, #20
 802e76e:	46bd      	mov	sp, r7
 802e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e774:	4770      	bx	lr

0802e776 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802e776:	b580      	push	{r7, lr}
 802e778:	b084      	sub	sp, #16
 802e77a:	af00      	add	r7, sp, #0
 802e77c:	6078      	str	r0, [r7, #4]
 802e77e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802e780:	687b      	ldr	r3, [r7, #4]
 802e782:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802e786:	2b01      	cmp	r3, #1
 802e788:	d101      	bne.n	802e78e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802e78a:	2302      	movs	r3, #2
 802e78c:	e02d      	b.n	802e7ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802e78e:	687b      	ldr	r3, [r7, #4]
 802e790:	2201      	movs	r2, #1
 802e792:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802e796:	687b      	ldr	r3, [r7, #4]
 802e798:	2224      	movs	r2, #36	; 0x24
 802e79a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802e79e:	687b      	ldr	r3, [r7, #4]
 802e7a0:	681b      	ldr	r3, [r3, #0]
 802e7a2:	681b      	ldr	r3, [r3, #0]
 802e7a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802e7a6:	687b      	ldr	r3, [r7, #4]
 802e7a8:	681b      	ldr	r3, [r3, #0]
 802e7aa:	681a      	ldr	r2, [r3, #0]
 802e7ac:	687b      	ldr	r3, [r7, #4]
 802e7ae:	681b      	ldr	r3, [r3, #0]
 802e7b0:	f022 0201 	bic.w	r2, r2, #1
 802e7b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802e7b6:	687b      	ldr	r3, [r7, #4]
 802e7b8:	681b      	ldr	r3, [r3, #0]
 802e7ba:	689b      	ldr	r3, [r3, #8]
 802e7bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 802e7c0:	687b      	ldr	r3, [r7, #4]
 802e7c2:	681b      	ldr	r3, [r3, #0]
 802e7c4:	683a      	ldr	r2, [r7, #0]
 802e7c6:	430a      	orrs	r2, r1
 802e7c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802e7ca:	6878      	ldr	r0, [r7, #4]
 802e7cc:	f000 f850 	bl	802e870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802e7d0:	687b      	ldr	r3, [r7, #4]
 802e7d2:	681b      	ldr	r3, [r3, #0]
 802e7d4:	68fa      	ldr	r2, [r7, #12]
 802e7d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802e7d8:	687b      	ldr	r3, [r7, #4]
 802e7da:	2220      	movs	r2, #32
 802e7dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802e7e0:	687b      	ldr	r3, [r7, #4]
 802e7e2:	2200      	movs	r2, #0
 802e7e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802e7e8:	2300      	movs	r3, #0
}
 802e7ea:	4618      	mov	r0, r3
 802e7ec:	3710      	adds	r7, #16
 802e7ee:	46bd      	mov	sp, r7
 802e7f0:	bd80      	pop	{r7, pc}

0802e7f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802e7f2:	b580      	push	{r7, lr}
 802e7f4:	b084      	sub	sp, #16
 802e7f6:	af00      	add	r7, sp, #0
 802e7f8:	6078      	str	r0, [r7, #4]
 802e7fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802e7fc:	687b      	ldr	r3, [r7, #4]
 802e7fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802e802:	2b01      	cmp	r3, #1
 802e804:	d101      	bne.n	802e80a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802e806:	2302      	movs	r3, #2
 802e808:	e02d      	b.n	802e866 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802e80a:	687b      	ldr	r3, [r7, #4]
 802e80c:	2201      	movs	r2, #1
 802e80e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802e812:	687b      	ldr	r3, [r7, #4]
 802e814:	2224      	movs	r2, #36	; 0x24
 802e816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802e81a:	687b      	ldr	r3, [r7, #4]
 802e81c:	681b      	ldr	r3, [r3, #0]
 802e81e:	681b      	ldr	r3, [r3, #0]
 802e820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802e822:	687b      	ldr	r3, [r7, #4]
 802e824:	681b      	ldr	r3, [r3, #0]
 802e826:	681a      	ldr	r2, [r3, #0]
 802e828:	687b      	ldr	r3, [r7, #4]
 802e82a:	681b      	ldr	r3, [r3, #0]
 802e82c:	f022 0201 	bic.w	r2, r2, #1
 802e830:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802e832:	687b      	ldr	r3, [r7, #4]
 802e834:	681b      	ldr	r3, [r3, #0]
 802e836:	689b      	ldr	r3, [r3, #8]
 802e838:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 802e83c:	687b      	ldr	r3, [r7, #4]
 802e83e:	681b      	ldr	r3, [r3, #0]
 802e840:	683a      	ldr	r2, [r7, #0]
 802e842:	430a      	orrs	r2, r1
 802e844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802e846:	6878      	ldr	r0, [r7, #4]
 802e848:	f000 f812 	bl	802e870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802e84c:	687b      	ldr	r3, [r7, #4]
 802e84e:	681b      	ldr	r3, [r3, #0]
 802e850:	68fa      	ldr	r2, [r7, #12]
 802e852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802e854:	687b      	ldr	r3, [r7, #4]
 802e856:	2220      	movs	r2, #32
 802e858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802e85c:	687b      	ldr	r3, [r7, #4]
 802e85e:	2200      	movs	r2, #0
 802e860:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802e864:	2300      	movs	r3, #0
}
 802e866:	4618      	mov	r0, r3
 802e868:	3710      	adds	r7, #16
 802e86a:	46bd      	mov	sp, r7
 802e86c:	bd80      	pop	{r7, pc}
	...

0802e870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 802e870:	b480      	push	{r7}
 802e872:	b085      	sub	sp, #20
 802e874:	af00      	add	r7, sp, #0
 802e876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 802e878:	687b      	ldr	r3, [r7, #4]
 802e87a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e87c:	2b00      	cmp	r3, #0
 802e87e:	d108      	bne.n	802e892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 802e880:	687b      	ldr	r3, [r7, #4]
 802e882:	2201      	movs	r2, #1
 802e884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 802e888:	687b      	ldr	r3, [r7, #4]
 802e88a:	2201      	movs	r2, #1
 802e88c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 802e890:	e031      	b.n	802e8f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 802e892:	2310      	movs	r3, #16
 802e894:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802e896:	2310      	movs	r3, #16
 802e898:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802e89a:	687b      	ldr	r3, [r7, #4]
 802e89c:	681b      	ldr	r3, [r3, #0]
 802e89e:	689b      	ldr	r3, [r3, #8]
 802e8a0:	0e5b      	lsrs	r3, r3, #25
 802e8a2:	b2db      	uxtb	r3, r3
 802e8a4:	f003 0307 	and.w	r3, r3, #7
 802e8a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802e8aa:	687b      	ldr	r3, [r7, #4]
 802e8ac:	681b      	ldr	r3, [r3, #0]
 802e8ae:	689b      	ldr	r3, [r3, #8]
 802e8b0:	0f5b      	lsrs	r3, r3, #29
 802e8b2:	b2db      	uxtb	r3, r3
 802e8b4:	f003 0307 	and.w	r3, r3, #7
 802e8b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802e8ba:	7bbb      	ldrb	r3, [r7, #14]
 802e8bc:	7b3a      	ldrb	r2, [r7, #12]
 802e8be:	4911      	ldr	r1, [pc, #68]	; (802e904 <UARTEx_SetNbDataToProcess+0x94>)
 802e8c0:	5c8a      	ldrb	r2, [r1, r2]
 802e8c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802e8c6:	7b3a      	ldrb	r2, [r7, #12]
 802e8c8:	490f      	ldr	r1, [pc, #60]	; (802e908 <UARTEx_SetNbDataToProcess+0x98>)
 802e8ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802e8cc:	fb93 f3f2 	sdiv	r3, r3, r2
 802e8d0:	b29a      	uxth	r2, r3
 802e8d2:	687b      	ldr	r3, [r7, #4]
 802e8d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802e8d8:	7bfb      	ldrb	r3, [r7, #15]
 802e8da:	7b7a      	ldrb	r2, [r7, #13]
 802e8dc:	4909      	ldr	r1, [pc, #36]	; (802e904 <UARTEx_SetNbDataToProcess+0x94>)
 802e8de:	5c8a      	ldrb	r2, [r1, r2]
 802e8e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 802e8e4:	7b7a      	ldrb	r2, [r7, #13]
 802e8e6:	4908      	ldr	r1, [pc, #32]	; (802e908 <UARTEx_SetNbDataToProcess+0x98>)
 802e8e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802e8ea:	fb93 f3f2 	sdiv	r3, r3, r2
 802e8ee:	b29a      	uxth	r2, r3
 802e8f0:	687b      	ldr	r3, [r7, #4]
 802e8f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 802e8f6:	bf00      	nop
 802e8f8:	3714      	adds	r7, #20
 802e8fa:	46bd      	mov	sp, r7
 802e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e900:	4770      	bx	lr
 802e902:	bf00      	nop
 802e904:	08030d40 	.word	0x08030d40
 802e908:	08030d48 	.word	0x08030d48

0802e90c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 802e90c:	b480      	push	{r7}
 802e90e:	b087      	sub	sp, #28
 802e910:	af00      	add	r7, sp, #0
 802e912:	6078      	str	r0, [r7, #4]
 802e914:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 802e916:	683b      	ldr	r3, [r7, #0]
 802e918:	681a      	ldr	r2, [r3, #0]
 802e91a:	687b      	ldr	r3, [r7, #4]
 802e91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e920:	683a      	ldr	r2, [r7, #0]
 802e922:	6812      	ldr	r2, [r2, #0]
 802e924:	f023 0101 	bic.w	r1, r3, #1
 802e928:	687b      	ldr	r3, [r7, #4]
 802e92a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 802e92e:	683b      	ldr	r3, [r7, #0]
 802e930:	689b      	ldr	r3, [r3, #8]
 802e932:	2b08      	cmp	r3, #8
 802e934:	d102      	bne.n	802e93c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 802e936:	2340      	movs	r3, #64	; 0x40
 802e938:	617b      	str	r3, [r7, #20]
 802e93a:	e001      	b.n	802e940 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 802e93c:	2300      	movs	r3, #0
 802e93e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 802e940:	683b      	ldr	r3, [r7, #0]
 802e942:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 802e944:	697b      	ldr	r3, [r7, #20]
 802e946:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 802e948:	683b      	ldr	r3, [r7, #0]
 802e94a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 802e94c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 802e94e:	683b      	ldr	r3, [r7, #0]
 802e950:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 802e952:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 802e954:	683b      	ldr	r3, [r7, #0]
 802e956:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 802e958:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 802e95a:	683b      	ldr	r3, [r7, #0]
 802e95c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 802e95e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 802e960:	683b      	ldr	r3, [r7, #0]
 802e962:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 802e964:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 802e966:	683b      	ldr	r3, [r7, #0]
 802e968:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 802e96a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 802e96c:	683b      	ldr	r3, [r7, #0]
 802e96e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 802e970:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 802e972:	683b      	ldr	r3, [r7, #0]
 802e974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 802e976:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 802e978:	683b      	ldr	r3, [r7, #0]
 802e97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 802e97c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 802e97e:	683b      	ldr	r3, [r7, #0]
 802e980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 802e982:	4313      	orrs	r3, r2
 802e984:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 802e986:	683b      	ldr	r3, [r7, #0]
 802e988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e98a:	693a      	ldr	r2, [r7, #16]
 802e98c:	4313      	orrs	r3, r2
 802e98e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 802e990:	683b      	ldr	r3, [r7, #0]
 802e992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e994:	693a      	ldr	r2, [r7, #16]
 802e996:	4313      	orrs	r3, r2
 802e998:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 802e99a:	683b      	ldr	r3, [r7, #0]
 802e99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e99e:	693a      	ldr	r2, [r7, #16]
 802e9a0:	4313      	orrs	r3, r2
 802e9a2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 802e9a4:	4b20      	ldr	r3, [pc, #128]	; (802ea28 <FMC_NORSRAM_Init+0x11c>)
 802e9a6:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 802e9a8:	68fb      	ldr	r3, [r7, #12]
 802e9aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802e9ae:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 802e9b0:	68fb      	ldr	r3, [r7, #12]
 802e9b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802e9b6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 802e9b8:	68fb      	ldr	r3, [r7, #12]
 802e9ba:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 802e9be:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 802e9c0:	683b      	ldr	r3, [r7, #0]
 802e9c2:	681a      	ldr	r2, [r3, #0]
 802e9c4:	687b      	ldr	r3, [r7, #4]
 802e9c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802e9ca:	68fb      	ldr	r3, [r7, #12]
 802e9cc:	43db      	mvns	r3, r3
 802e9ce:	ea02 0103 	and.w	r1, r2, r3
 802e9d2:	683b      	ldr	r3, [r7, #0]
 802e9d4:	681a      	ldr	r2, [r3, #0]
 802e9d6:	693b      	ldr	r3, [r7, #16]
 802e9d8:	4319      	orrs	r1, r3
 802e9da:	687b      	ldr	r3, [r7, #4]
 802e9dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 802e9e0:	683b      	ldr	r3, [r7, #0]
 802e9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e9e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802e9e8:	d10c      	bne.n	802ea04 <FMC_NORSRAM_Init+0xf8>
 802e9ea:	683b      	ldr	r3, [r7, #0]
 802e9ec:	681b      	ldr	r3, [r3, #0]
 802e9ee:	2b00      	cmp	r3, #0
 802e9f0:	d008      	beq.n	802ea04 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 802e9f2:	687b      	ldr	r3, [r7, #4]
 802e9f4:	681b      	ldr	r3, [r3, #0]
 802e9f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 802e9fa:	683b      	ldr	r3, [r7, #0]
 802e9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e9fe:	431a      	orrs	r2, r3
 802ea00:	687b      	ldr	r3, [r7, #4]
 802ea02:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 802ea04:	683b      	ldr	r3, [r7, #0]
 802ea06:	681b      	ldr	r3, [r3, #0]
 802ea08:	2b00      	cmp	r3, #0
 802ea0a:	d006      	beq.n	802ea1a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 802ea0c:	687b      	ldr	r3, [r7, #4]
 802ea0e:	681a      	ldr	r2, [r3, #0]
 802ea10:	683b      	ldr	r3, [r7, #0]
 802ea12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802ea14:	431a      	orrs	r2, r3
 802ea16:	687b      	ldr	r3, [r7, #4]
 802ea18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 802ea1a:	2300      	movs	r3, #0
}
 802ea1c:	4618      	mov	r0, r3
 802ea1e:	371c      	adds	r7, #28
 802ea20:	46bd      	mov	sp, r7
 802ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ea26:	4770      	bx	lr
 802ea28:	0008fb7f 	.word	0x0008fb7f

0802ea2c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 802ea2c:	b480      	push	{r7}
 802ea2e:	b087      	sub	sp, #28
 802ea30:	af00      	add	r7, sp, #0
 802ea32:	60f8      	str	r0, [r7, #12]
 802ea34:	60b9      	str	r1, [r7, #8]
 802ea36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 802ea38:	687b      	ldr	r3, [r7, #4]
 802ea3a:	1c5a      	adds	r2, r3, #1
 802ea3c:	68fb      	ldr	r3, [r7, #12]
 802ea3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ea42:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 802ea46:	68bb      	ldr	r3, [r7, #8]
 802ea48:	681a      	ldr	r2, [r3, #0]
 802ea4a:	68bb      	ldr	r3, [r7, #8]
 802ea4c:	685b      	ldr	r3, [r3, #4]
 802ea4e:	011b      	lsls	r3, r3, #4
 802ea50:	431a      	orrs	r2, r3
 802ea52:	68bb      	ldr	r3, [r7, #8]
 802ea54:	689b      	ldr	r3, [r3, #8]
 802ea56:	021b      	lsls	r3, r3, #8
 802ea58:	431a      	orrs	r2, r3
 802ea5a:	68bb      	ldr	r3, [r7, #8]
 802ea5c:	68db      	ldr	r3, [r3, #12]
 802ea5e:	041b      	lsls	r3, r3, #16
 802ea60:	431a      	orrs	r2, r3
 802ea62:	68bb      	ldr	r3, [r7, #8]
 802ea64:	691b      	ldr	r3, [r3, #16]
 802ea66:	3b01      	subs	r3, #1
 802ea68:	051b      	lsls	r3, r3, #20
 802ea6a:	431a      	orrs	r2, r3
 802ea6c:	68bb      	ldr	r3, [r7, #8]
 802ea6e:	695b      	ldr	r3, [r3, #20]
 802ea70:	3b02      	subs	r3, #2
 802ea72:	061b      	lsls	r3, r3, #24
 802ea74:	431a      	orrs	r2, r3
 802ea76:	68bb      	ldr	r3, [r7, #8]
 802ea78:	699b      	ldr	r3, [r3, #24]
 802ea7a:	4313      	orrs	r3, r2
 802ea7c:	687a      	ldr	r2, [r7, #4]
 802ea7e:	3201      	adds	r2, #1
 802ea80:	4319      	orrs	r1, r3
 802ea82:	68fb      	ldr	r3, [r7, #12]
 802ea84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 802ea88:	68fb      	ldr	r3, [r7, #12]
 802ea8a:	681b      	ldr	r3, [r3, #0]
 802ea8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802ea90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802ea94:	d113      	bne.n	802eabe <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 802ea96:	68fb      	ldr	r3, [r7, #12]
 802ea98:	685b      	ldr	r3, [r3, #4]
 802ea9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802ea9e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 802eaa0:	68bb      	ldr	r3, [r7, #8]
 802eaa2:	691b      	ldr	r3, [r3, #16]
 802eaa4:	3b01      	subs	r3, #1
 802eaa6:	051b      	lsls	r3, r3, #20
 802eaa8:	697a      	ldr	r2, [r7, #20]
 802eaaa:	4313      	orrs	r3, r2
 802eaac:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 802eaae:	68fb      	ldr	r3, [r7, #12]
 802eab0:	685b      	ldr	r3, [r3, #4]
 802eab2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 802eab6:	697b      	ldr	r3, [r7, #20]
 802eab8:	431a      	orrs	r2, r3
 802eaba:	68fb      	ldr	r3, [r7, #12]
 802eabc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 802eabe:	2300      	movs	r3, #0
}
 802eac0:	4618      	mov	r0, r3
 802eac2:	371c      	adds	r7, #28
 802eac4:	46bd      	mov	sp, r7
 802eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eaca:	4770      	bx	lr

0802eacc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 802eacc:	b480      	push	{r7}
 802eace:	b085      	sub	sp, #20
 802ead0:	af00      	add	r7, sp, #0
 802ead2:	60f8      	str	r0, [r7, #12]
 802ead4:	60b9      	str	r1, [r7, #8]
 802ead6:	607a      	str	r2, [r7, #4]
 802ead8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 802eada:	683b      	ldr	r3, [r7, #0]
 802eadc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802eae0:	d11d      	bne.n	802eb1e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 802eae2:	68fb      	ldr	r3, [r7, #12]
 802eae4:	687a      	ldr	r2, [r7, #4]
 802eae6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802eaea:	4b13      	ldr	r3, [pc, #76]	; (802eb38 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 802eaec:	4013      	ands	r3, r2
 802eaee:	68ba      	ldr	r2, [r7, #8]
 802eaf0:	6811      	ldr	r1, [r2, #0]
 802eaf2:	68ba      	ldr	r2, [r7, #8]
 802eaf4:	6852      	ldr	r2, [r2, #4]
 802eaf6:	0112      	lsls	r2, r2, #4
 802eaf8:	4311      	orrs	r1, r2
 802eafa:	68ba      	ldr	r2, [r7, #8]
 802eafc:	6892      	ldr	r2, [r2, #8]
 802eafe:	0212      	lsls	r2, r2, #8
 802eb00:	4311      	orrs	r1, r2
 802eb02:	68ba      	ldr	r2, [r7, #8]
 802eb04:	6992      	ldr	r2, [r2, #24]
 802eb06:	4311      	orrs	r1, r2
 802eb08:	68ba      	ldr	r2, [r7, #8]
 802eb0a:	68d2      	ldr	r2, [r2, #12]
 802eb0c:	0412      	lsls	r2, r2, #16
 802eb0e:	430a      	orrs	r2, r1
 802eb10:	ea43 0102 	orr.w	r1, r3, r2
 802eb14:	68fb      	ldr	r3, [r7, #12]
 802eb16:	687a      	ldr	r2, [r7, #4]
 802eb18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802eb1c:	e005      	b.n	802eb2a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 802eb1e:	68fb      	ldr	r3, [r7, #12]
 802eb20:	687a      	ldr	r2, [r7, #4]
 802eb22:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 802eb26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 802eb2a:	2300      	movs	r3, #0
}
 802eb2c:	4618      	mov	r0, r3
 802eb2e:	3714      	adds	r7, #20
 802eb30:	46bd      	mov	sp, r7
 802eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eb36:	4770      	bx	lr
 802eb38:	cff00000 	.word	0xcff00000

0802eb3c <Print2Hex>:
*           nLen - data length
* Return:   None
* comments: print title and hex data with 16 characters a line
*******************************************************************************/
void Print2Hex(char* szTitle, void* pBuff, int nLen)
{
 802eb3c:	b580      	push	{r7, lr}
 802eb3e:	b086      	sub	sp, #24
 802eb40:	af00      	add	r7, sp, #0
 802eb42:	60f8      	str	r0, [r7, #12]
 802eb44:	60b9      	str	r1, [r7, #8]
 802eb46:	607a      	str	r2, [r7, #4]
	int i;
	char *pcBuff = (char*)pBuff;
 802eb48:	68bb      	ldr	r3, [r7, #8]
 802eb4a:	613b      	str	r3, [r7, #16]

	//PRINT("Recv: %s", szTitle);
	printf("Recv: %s", szTitle);
 802eb4c:	68f9      	ldr	r1, [r7, #12]
 802eb4e:	4812      	ldr	r0, [pc, #72]	; (802eb98 <Print2Hex+0x5c>)
 802eb50:	f7f9 ff84 	bl	8028a5c <printf_>
	for (i=0; i<nLen; i++)
 802eb54:	2300      	movs	r3, #0
 802eb56:	617b      	str	r3, [r7, #20]
 802eb58:	e012      	b.n	802eb80 <Print2Hex+0x44>
	{
		//if (!(i%16)) PRINT("\r\n");
		if (!(i%16)) printf("\r\n");
 802eb5a:	697b      	ldr	r3, [r7, #20]
 802eb5c:	f003 030f 	and.w	r3, r3, #15
 802eb60:	2b00      	cmp	r3, #0
 802eb62:	d102      	bne.n	802eb6a <Print2Hex+0x2e>
 802eb64:	480d      	ldr	r0, [pc, #52]	; (802eb9c <Print2Hex+0x60>)
 802eb66:	f7f9 ff79 	bl	8028a5c <printf_>

		//PRINT("%x ", *pcBuff++);
		printf("%x ", *pcBuff++);
 802eb6a:	693b      	ldr	r3, [r7, #16]
 802eb6c:	1c5a      	adds	r2, r3, #1
 802eb6e:	613a      	str	r2, [r7, #16]
 802eb70:	781b      	ldrb	r3, [r3, #0]
 802eb72:	4619      	mov	r1, r3
 802eb74:	480a      	ldr	r0, [pc, #40]	; (802eba0 <Print2Hex+0x64>)
 802eb76:	f7f9 ff71 	bl	8028a5c <printf_>
	for (i=0; i<nLen; i++)
 802eb7a:	697b      	ldr	r3, [r7, #20]
 802eb7c:	3301      	adds	r3, #1
 802eb7e:	617b      	str	r3, [r7, #20]
 802eb80:	697a      	ldr	r2, [r7, #20]
 802eb82:	687b      	ldr	r3, [r7, #4]
 802eb84:	429a      	cmp	r2, r3
 802eb86:	dbe8      	blt.n	802eb5a <Print2Hex+0x1e>
	}
	//PRINT("\r\n");
	printf("\r\n");
 802eb88:	4804      	ldr	r0, [pc, #16]	; (802eb9c <Print2Hex+0x60>)
 802eb8a:	f7f9 ff67 	bl	8028a5c <printf_>
}
 802eb8e:	bf00      	nop
 802eb90:	3718      	adds	r7, #24
 802eb92:	46bd      	mov	sp, r7
 802eb94:	bd80      	pop	{r7, pc}
 802eb96:	bf00      	nop
 802eb98:	08030cac 	.word	0x08030cac
 802eb9c:	08030ca8 	.word	0x08030ca8
 802eba0:	08030cb8 	.word	0x08030cb8

0802eba4 <SetTimer>:

	TIM_CounterConfig(DELAY_TIM, TIM_STOP);	// Stop Timer
}
#endif
void SetTimer(TTIMER *pTimer)
{
 802eba4:	b480      	push	{r7}
 802eba6:	b083      	sub	sp, #12
 802eba8:	af00      	add	r7, sp, #0
 802ebaa:	6078      	str	r0, [r7, #4]
	pTimer->fStart = TRUE;
 802ebac:	687b      	ldr	r3, [r7, #4]
 802ebae:	2201      	movs	r2, #1
 802ebb0:	701a      	strb	r2, [r3, #0]
	pTimer->dwStartTick = gdwTick;
 802ebb2:	4b05      	ldr	r3, [pc, #20]	; (802ebc8 <SetTimer+0x24>)
 802ebb4:	681a      	ldr	r2, [r3, #0]
 802ebb6:	687b      	ldr	r3, [r7, #4]
 802ebb8:	605a      	str	r2, [r3, #4]
}
 802ebba:	bf00      	nop
 802ebbc:	370c      	adds	r7, #12
 802ebbe:	46bd      	mov	sp, r7
 802ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ebc4:	4770      	bx	lr
 802ebc6:	bf00      	nop
 802ebc8:	24001e58 	.word	0x24001e58

0802ebcc <ResetTimer>:

void ResetTimer(TTIMER *pTimer)
{
 802ebcc:	b480      	push	{r7}
 802ebce:	b083      	sub	sp, #12
 802ebd0:	af00      	add	r7, sp, #0
 802ebd2:	6078      	str	r0, [r7, #4]
	pTimer->fStart = FALSE;
 802ebd4:	687b      	ldr	r3, [r7, #4]
 802ebd6:	2200      	movs	r2, #0
 802ebd8:	701a      	strb	r2, [r3, #0]
}
 802ebda:	bf00      	nop
 802ebdc:	370c      	adds	r7, #12
 802ebde:	46bd      	mov	sp, r7
 802ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ebe4:	4770      	bx	lr
	...

0802ebe8 <IsTimeout>:
* Out:      None
* Return:   void
* comments: Timeout range is between 0 and (0xFFFFFFFF * 10ms)
*******************************************************************************/
bool IsTimeout(TTIMER *pTimer, DWORD dwTimeout)
{
 802ebe8:	b480      	push	{r7}
 802ebea:	b085      	sub	sp, #20
 802ebec:	af00      	add	r7, sp, #0
 802ebee:	6078      	str	r0, [r7, #4]
 802ebf0:	6039      	str	r1, [r7, #0]
	bool	fTimeout = FALSE;
 802ebf2:	2300      	movs	r3, #0
 802ebf4:	73fb      	strb	r3, [r7, #15]
	DWORD	dwCurrentTick;

	if (pTimer->fStart)
 802ebf6:	687b      	ldr	r3, [r7, #4]
 802ebf8:	781b      	ldrb	r3, [r3, #0]
 802ebfa:	2b00      	cmp	r3, #0
 802ebfc:	d01b      	beq.n	802ec36 <IsTimeout+0x4e>
	{
		dwCurrentTick = gdwTick;
 802ebfe:	4b11      	ldr	r3, [pc, #68]	; (802ec44 <IsTimeout+0x5c>)
 802ec00:	681b      	ldr	r3, [r3, #0]
 802ec02:	60bb      	str	r3, [r7, #8]

		if (dwCurrentTick >= pTimer->dwStartTick )
 802ec04:	687b      	ldr	r3, [r7, #4]
 802ec06:	685b      	ldr	r3, [r3, #4]
 802ec08:	68ba      	ldr	r2, [r7, #8]
 802ec0a:	429a      	cmp	r2, r3
 802ec0c:	d309      	bcc.n	802ec22 <IsTimeout+0x3a>
		{
			if ( (dwCurrentTick - pTimer->dwStartTick) >= dwTimeout )
 802ec0e:	687b      	ldr	r3, [r7, #4]
 802ec10:	685b      	ldr	r3, [r3, #4]
 802ec12:	68ba      	ldr	r2, [r7, #8]
 802ec14:	1ad3      	subs	r3, r2, r3
 802ec16:	683a      	ldr	r2, [r7, #0]
 802ec18:	429a      	cmp	r2, r3
 802ec1a:	d80c      	bhi.n	802ec36 <IsTimeout+0x4e>
				fTimeout = TRUE;
 802ec1c:	2301      	movs	r3, #1
 802ec1e:	73fb      	strb	r3, [r7, #15]
 802ec20:	e009      	b.n	802ec36 <IsTimeout+0x4e>
		}
		else // in case of (dwCurrentTick < pTimer->dwStartTick)
		{
			if ( (0xFFFFFFFF - pTimer->dwStartTick + dwCurrentTick) >= dwTimeout )
 802ec22:	687b      	ldr	r3, [r7, #4]
 802ec24:	685b      	ldr	r3, [r3, #4]
 802ec26:	68ba      	ldr	r2, [r7, #8]
 802ec28:	1ad3      	subs	r3, r2, r3
 802ec2a:	3b01      	subs	r3, #1
 802ec2c:	683a      	ldr	r2, [r7, #0]
 802ec2e:	429a      	cmp	r2, r3
 802ec30:	d801      	bhi.n	802ec36 <IsTimeout+0x4e>
				fTimeout = TRUE;
 802ec32:	2301      	movs	r3, #1
 802ec34:	73fb      	strb	r3, [r7, #15]
		}
	}

	return fTimeout;
 802ec36:	7bfb      	ldrb	r3, [r7, #15]
}
 802ec38:	4618      	mov	r0, r3
 802ec3a:	3714      	adds	r7, #20
 802ec3c:	46bd      	mov	sp, r7
 802ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ec42:	4770      	bx	lr
 802ec44:	24001e58 	.word	0x24001e58

0802ec48 <__errno>:
 802ec48:	4b01      	ldr	r3, [pc, #4]	; (802ec50 <__errno+0x8>)
 802ec4a:	6818      	ldr	r0, [r3, #0]
 802ec4c:	4770      	bx	lr
 802ec4e:	bf00      	nop
 802ec50:	24000050 	.word	0x24000050

0802ec54 <__libc_init_array>:
 802ec54:	b570      	push	{r4, r5, r6, lr}
 802ec56:	4d0d      	ldr	r5, [pc, #52]	; (802ec8c <__libc_init_array+0x38>)
 802ec58:	4c0d      	ldr	r4, [pc, #52]	; (802ec90 <__libc_init_array+0x3c>)
 802ec5a:	1b64      	subs	r4, r4, r5
 802ec5c:	10a4      	asrs	r4, r4, #2
 802ec5e:	2600      	movs	r6, #0
 802ec60:	42a6      	cmp	r6, r4
 802ec62:	d109      	bne.n	802ec78 <__libc_init_array+0x24>
 802ec64:	4d0b      	ldr	r5, [pc, #44]	; (802ec94 <__libc_init_array+0x40>)
 802ec66:	4c0c      	ldr	r4, [pc, #48]	; (802ec98 <__libc_init_array+0x44>)
 802ec68:	f001 f99a 	bl	802ffa0 <_init>
 802ec6c:	1b64      	subs	r4, r4, r5
 802ec6e:	10a4      	asrs	r4, r4, #2
 802ec70:	2600      	movs	r6, #0
 802ec72:	42a6      	cmp	r6, r4
 802ec74:	d105      	bne.n	802ec82 <__libc_init_array+0x2e>
 802ec76:	bd70      	pop	{r4, r5, r6, pc}
 802ec78:	f855 3b04 	ldr.w	r3, [r5], #4
 802ec7c:	4798      	blx	r3
 802ec7e:	3601      	adds	r6, #1
 802ec80:	e7ee      	b.n	802ec60 <__libc_init_array+0xc>
 802ec82:	f855 3b04 	ldr.w	r3, [r5], #4
 802ec86:	4798      	blx	r3
 802ec88:	3601      	adds	r6, #1
 802ec8a:	e7f2      	b.n	802ec72 <__libc_init_array+0x1e>
 802ec8c:	08030df0 	.word	0x08030df0
 802ec90:	08030df0 	.word	0x08030df0
 802ec94:	08030df0 	.word	0x08030df0
 802ec98:	08030df4 	.word	0x08030df4

0802ec9c <memcmp>:
 802ec9c:	b510      	push	{r4, lr}
 802ec9e:	3901      	subs	r1, #1
 802eca0:	4402      	add	r2, r0
 802eca2:	4290      	cmp	r0, r2
 802eca4:	d101      	bne.n	802ecaa <memcmp+0xe>
 802eca6:	2000      	movs	r0, #0
 802eca8:	e005      	b.n	802ecb6 <memcmp+0x1a>
 802ecaa:	7803      	ldrb	r3, [r0, #0]
 802ecac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802ecb0:	42a3      	cmp	r3, r4
 802ecb2:	d001      	beq.n	802ecb8 <memcmp+0x1c>
 802ecb4:	1b18      	subs	r0, r3, r4
 802ecb6:	bd10      	pop	{r4, pc}
 802ecb8:	3001      	adds	r0, #1
 802ecba:	e7f2      	b.n	802eca2 <memcmp+0x6>

0802ecbc <memcpy>:
 802ecbc:	440a      	add	r2, r1
 802ecbe:	4291      	cmp	r1, r2
 802ecc0:	f100 33ff 	add.w	r3, r0, #4294967295
 802ecc4:	d100      	bne.n	802ecc8 <memcpy+0xc>
 802ecc6:	4770      	bx	lr
 802ecc8:	b510      	push	{r4, lr}
 802ecca:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ecce:	f803 4f01 	strb.w	r4, [r3, #1]!
 802ecd2:	4291      	cmp	r1, r2
 802ecd4:	d1f9      	bne.n	802ecca <memcpy+0xe>
 802ecd6:	bd10      	pop	{r4, pc}

0802ecd8 <memset>:
 802ecd8:	4402      	add	r2, r0
 802ecda:	4603      	mov	r3, r0
 802ecdc:	4293      	cmp	r3, r2
 802ecde:	d100      	bne.n	802ece2 <memset+0xa>
 802ece0:	4770      	bx	lr
 802ece2:	f803 1b01 	strb.w	r1, [r3], #1
 802ece6:	e7f9      	b.n	802ecdc <memset+0x4>

0802ece8 <_free_r>:
 802ece8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ecea:	2900      	cmp	r1, #0
 802ecec:	d044      	beq.n	802ed78 <_free_r+0x90>
 802ecee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ecf2:	9001      	str	r0, [sp, #4]
 802ecf4:	2b00      	cmp	r3, #0
 802ecf6:	f1a1 0404 	sub.w	r4, r1, #4
 802ecfa:	bfb8      	it	lt
 802ecfc:	18e4      	addlt	r4, r4, r3
 802ecfe:	f000 fbfb 	bl	802f4f8 <__malloc_lock>
 802ed02:	4a1e      	ldr	r2, [pc, #120]	; (802ed7c <_free_r+0x94>)
 802ed04:	9801      	ldr	r0, [sp, #4]
 802ed06:	6813      	ldr	r3, [r2, #0]
 802ed08:	b933      	cbnz	r3, 802ed18 <_free_r+0x30>
 802ed0a:	6063      	str	r3, [r4, #4]
 802ed0c:	6014      	str	r4, [r2, #0]
 802ed0e:	b003      	add	sp, #12
 802ed10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ed14:	f000 bbf6 	b.w	802f504 <__malloc_unlock>
 802ed18:	42a3      	cmp	r3, r4
 802ed1a:	d908      	bls.n	802ed2e <_free_r+0x46>
 802ed1c:	6825      	ldr	r5, [r4, #0]
 802ed1e:	1961      	adds	r1, r4, r5
 802ed20:	428b      	cmp	r3, r1
 802ed22:	bf01      	itttt	eq
 802ed24:	6819      	ldreq	r1, [r3, #0]
 802ed26:	685b      	ldreq	r3, [r3, #4]
 802ed28:	1949      	addeq	r1, r1, r5
 802ed2a:	6021      	streq	r1, [r4, #0]
 802ed2c:	e7ed      	b.n	802ed0a <_free_r+0x22>
 802ed2e:	461a      	mov	r2, r3
 802ed30:	685b      	ldr	r3, [r3, #4]
 802ed32:	b10b      	cbz	r3, 802ed38 <_free_r+0x50>
 802ed34:	42a3      	cmp	r3, r4
 802ed36:	d9fa      	bls.n	802ed2e <_free_r+0x46>
 802ed38:	6811      	ldr	r1, [r2, #0]
 802ed3a:	1855      	adds	r5, r2, r1
 802ed3c:	42a5      	cmp	r5, r4
 802ed3e:	d10b      	bne.n	802ed58 <_free_r+0x70>
 802ed40:	6824      	ldr	r4, [r4, #0]
 802ed42:	4421      	add	r1, r4
 802ed44:	1854      	adds	r4, r2, r1
 802ed46:	42a3      	cmp	r3, r4
 802ed48:	6011      	str	r1, [r2, #0]
 802ed4a:	d1e0      	bne.n	802ed0e <_free_r+0x26>
 802ed4c:	681c      	ldr	r4, [r3, #0]
 802ed4e:	685b      	ldr	r3, [r3, #4]
 802ed50:	6053      	str	r3, [r2, #4]
 802ed52:	4421      	add	r1, r4
 802ed54:	6011      	str	r1, [r2, #0]
 802ed56:	e7da      	b.n	802ed0e <_free_r+0x26>
 802ed58:	d902      	bls.n	802ed60 <_free_r+0x78>
 802ed5a:	230c      	movs	r3, #12
 802ed5c:	6003      	str	r3, [r0, #0]
 802ed5e:	e7d6      	b.n	802ed0e <_free_r+0x26>
 802ed60:	6825      	ldr	r5, [r4, #0]
 802ed62:	1961      	adds	r1, r4, r5
 802ed64:	428b      	cmp	r3, r1
 802ed66:	bf04      	itt	eq
 802ed68:	6819      	ldreq	r1, [r3, #0]
 802ed6a:	685b      	ldreq	r3, [r3, #4]
 802ed6c:	6063      	str	r3, [r4, #4]
 802ed6e:	bf04      	itt	eq
 802ed70:	1949      	addeq	r1, r1, r5
 802ed72:	6021      	streq	r1, [r4, #0]
 802ed74:	6054      	str	r4, [r2, #4]
 802ed76:	e7ca      	b.n	802ed0e <_free_r+0x26>
 802ed78:	b003      	add	sp, #12
 802ed7a:	bd30      	pop	{r4, r5, pc}
 802ed7c:	24001e5c 	.word	0x24001e5c

0802ed80 <sbrk_aligned>:
 802ed80:	b570      	push	{r4, r5, r6, lr}
 802ed82:	4e0e      	ldr	r6, [pc, #56]	; (802edbc <sbrk_aligned+0x3c>)
 802ed84:	460c      	mov	r4, r1
 802ed86:	6831      	ldr	r1, [r6, #0]
 802ed88:	4605      	mov	r5, r0
 802ed8a:	b911      	cbnz	r1, 802ed92 <sbrk_aligned+0x12>
 802ed8c:	f000 f8a4 	bl	802eed8 <_sbrk_r>
 802ed90:	6030      	str	r0, [r6, #0]
 802ed92:	4621      	mov	r1, r4
 802ed94:	4628      	mov	r0, r5
 802ed96:	f000 f89f 	bl	802eed8 <_sbrk_r>
 802ed9a:	1c43      	adds	r3, r0, #1
 802ed9c:	d00a      	beq.n	802edb4 <sbrk_aligned+0x34>
 802ed9e:	1cc4      	adds	r4, r0, #3
 802eda0:	f024 0403 	bic.w	r4, r4, #3
 802eda4:	42a0      	cmp	r0, r4
 802eda6:	d007      	beq.n	802edb8 <sbrk_aligned+0x38>
 802eda8:	1a21      	subs	r1, r4, r0
 802edaa:	4628      	mov	r0, r5
 802edac:	f000 f894 	bl	802eed8 <_sbrk_r>
 802edb0:	3001      	adds	r0, #1
 802edb2:	d101      	bne.n	802edb8 <sbrk_aligned+0x38>
 802edb4:	f04f 34ff 	mov.w	r4, #4294967295
 802edb8:	4620      	mov	r0, r4
 802edba:	bd70      	pop	{r4, r5, r6, pc}
 802edbc:	24001e60 	.word	0x24001e60

0802edc0 <_malloc_r>:
 802edc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802edc4:	1ccd      	adds	r5, r1, #3
 802edc6:	f025 0503 	bic.w	r5, r5, #3
 802edca:	3508      	adds	r5, #8
 802edcc:	2d0c      	cmp	r5, #12
 802edce:	bf38      	it	cc
 802edd0:	250c      	movcc	r5, #12
 802edd2:	2d00      	cmp	r5, #0
 802edd4:	4607      	mov	r7, r0
 802edd6:	db01      	blt.n	802eddc <_malloc_r+0x1c>
 802edd8:	42a9      	cmp	r1, r5
 802edda:	d905      	bls.n	802ede8 <_malloc_r+0x28>
 802eddc:	230c      	movs	r3, #12
 802edde:	603b      	str	r3, [r7, #0]
 802ede0:	2600      	movs	r6, #0
 802ede2:	4630      	mov	r0, r6
 802ede4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ede8:	4e2e      	ldr	r6, [pc, #184]	; (802eea4 <_malloc_r+0xe4>)
 802edea:	f000 fb85 	bl	802f4f8 <__malloc_lock>
 802edee:	6833      	ldr	r3, [r6, #0]
 802edf0:	461c      	mov	r4, r3
 802edf2:	bb34      	cbnz	r4, 802ee42 <_malloc_r+0x82>
 802edf4:	4629      	mov	r1, r5
 802edf6:	4638      	mov	r0, r7
 802edf8:	f7ff ffc2 	bl	802ed80 <sbrk_aligned>
 802edfc:	1c43      	adds	r3, r0, #1
 802edfe:	4604      	mov	r4, r0
 802ee00:	d14d      	bne.n	802ee9e <_malloc_r+0xde>
 802ee02:	6834      	ldr	r4, [r6, #0]
 802ee04:	4626      	mov	r6, r4
 802ee06:	2e00      	cmp	r6, #0
 802ee08:	d140      	bne.n	802ee8c <_malloc_r+0xcc>
 802ee0a:	6823      	ldr	r3, [r4, #0]
 802ee0c:	4631      	mov	r1, r6
 802ee0e:	4638      	mov	r0, r7
 802ee10:	eb04 0803 	add.w	r8, r4, r3
 802ee14:	f000 f860 	bl	802eed8 <_sbrk_r>
 802ee18:	4580      	cmp	r8, r0
 802ee1a:	d13a      	bne.n	802ee92 <_malloc_r+0xd2>
 802ee1c:	6821      	ldr	r1, [r4, #0]
 802ee1e:	3503      	adds	r5, #3
 802ee20:	1a6d      	subs	r5, r5, r1
 802ee22:	f025 0503 	bic.w	r5, r5, #3
 802ee26:	3508      	adds	r5, #8
 802ee28:	2d0c      	cmp	r5, #12
 802ee2a:	bf38      	it	cc
 802ee2c:	250c      	movcc	r5, #12
 802ee2e:	4629      	mov	r1, r5
 802ee30:	4638      	mov	r0, r7
 802ee32:	f7ff ffa5 	bl	802ed80 <sbrk_aligned>
 802ee36:	3001      	adds	r0, #1
 802ee38:	d02b      	beq.n	802ee92 <_malloc_r+0xd2>
 802ee3a:	6823      	ldr	r3, [r4, #0]
 802ee3c:	442b      	add	r3, r5
 802ee3e:	6023      	str	r3, [r4, #0]
 802ee40:	e00e      	b.n	802ee60 <_malloc_r+0xa0>
 802ee42:	6822      	ldr	r2, [r4, #0]
 802ee44:	1b52      	subs	r2, r2, r5
 802ee46:	d41e      	bmi.n	802ee86 <_malloc_r+0xc6>
 802ee48:	2a0b      	cmp	r2, #11
 802ee4a:	d916      	bls.n	802ee7a <_malloc_r+0xba>
 802ee4c:	1961      	adds	r1, r4, r5
 802ee4e:	42a3      	cmp	r3, r4
 802ee50:	6025      	str	r5, [r4, #0]
 802ee52:	bf18      	it	ne
 802ee54:	6059      	strne	r1, [r3, #4]
 802ee56:	6863      	ldr	r3, [r4, #4]
 802ee58:	bf08      	it	eq
 802ee5a:	6031      	streq	r1, [r6, #0]
 802ee5c:	5162      	str	r2, [r4, r5]
 802ee5e:	604b      	str	r3, [r1, #4]
 802ee60:	4638      	mov	r0, r7
 802ee62:	f104 060b 	add.w	r6, r4, #11
 802ee66:	f000 fb4d 	bl	802f504 <__malloc_unlock>
 802ee6a:	f026 0607 	bic.w	r6, r6, #7
 802ee6e:	1d23      	adds	r3, r4, #4
 802ee70:	1af2      	subs	r2, r6, r3
 802ee72:	d0b6      	beq.n	802ede2 <_malloc_r+0x22>
 802ee74:	1b9b      	subs	r3, r3, r6
 802ee76:	50a3      	str	r3, [r4, r2]
 802ee78:	e7b3      	b.n	802ede2 <_malloc_r+0x22>
 802ee7a:	6862      	ldr	r2, [r4, #4]
 802ee7c:	42a3      	cmp	r3, r4
 802ee7e:	bf0c      	ite	eq
 802ee80:	6032      	streq	r2, [r6, #0]
 802ee82:	605a      	strne	r2, [r3, #4]
 802ee84:	e7ec      	b.n	802ee60 <_malloc_r+0xa0>
 802ee86:	4623      	mov	r3, r4
 802ee88:	6864      	ldr	r4, [r4, #4]
 802ee8a:	e7b2      	b.n	802edf2 <_malloc_r+0x32>
 802ee8c:	4634      	mov	r4, r6
 802ee8e:	6876      	ldr	r6, [r6, #4]
 802ee90:	e7b9      	b.n	802ee06 <_malloc_r+0x46>
 802ee92:	230c      	movs	r3, #12
 802ee94:	603b      	str	r3, [r7, #0]
 802ee96:	4638      	mov	r0, r7
 802ee98:	f000 fb34 	bl	802f504 <__malloc_unlock>
 802ee9c:	e7a1      	b.n	802ede2 <_malloc_r+0x22>
 802ee9e:	6025      	str	r5, [r4, #0]
 802eea0:	e7de      	b.n	802ee60 <_malloc_r+0xa0>
 802eea2:	bf00      	nop
 802eea4:	24001e5c 	.word	0x24001e5c

0802eea8 <iprintf>:
 802eea8:	b40f      	push	{r0, r1, r2, r3}
 802eeaa:	4b0a      	ldr	r3, [pc, #40]	; (802eed4 <iprintf+0x2c>)
 802eeac:	b513      	push	{r0, r1, r4, lr}
 802eeae:	681c      	ldr	r4, [r3, #0]
 802eeb0:	b124      	cbz	r4, 802eebc <iprintf+0x14>
 802eeb2:	69a3      	ldr	r3, [r4, #24]
 802eeb4:	b913      	cbnz	r3, 802eebc <iprintf+0x14>
 802eeb6:	4620      	mov	r0, r4
 802eeb8:	f000 fa18 	bl	802f2ec <__sinit>
 802eebc:	ab05      	add	r3, sp, #20
 802eebe:	9a04      	ldr	r2, [sp, #16]
 802eec0:	68a1      	ldr	r1, [r4, #8]
 802eec2:	9301      	str	r3, [sp, #4]
 802eec4:	4620      	mov	r0, r4
 802eec6:	f000 fca9 	bl	802f81c <_vfiprintf_r>
 802eeca:	b002      	add	sp, #8
 802eecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802eed0:	b004      	add	sp, #16
 802eed2:	4770      	bx	lr
 802eed4:	24000050 	.word	0x24000050

0802eed8 <_sbrk_r>:
 802eed8:	b538      	push	{r3, r4, r5, lr}
 802eeda:	4d06      	ldr	r5, [pc, #24]	; (802eef4 <_sbrk_r+0x1c>)
 802eedc:	2300      	movs	r3, #0
 802eede:	4604      	mov	r4, r0
 802eee0:	4608      	mov	r0, r1
 802eee2:	602b      	str	r3, [r5, #0]
 802eee4:	f7fa fa70 	bl	80293c8 <_sbrk>
 802eee8:	1c43      	adds	r3, r0, #1
 802eeea:	d102      	bne.n	802eef2 <_sbrk_r+0x1a>
 802eeec:	682b      	ldr	r3, [r5, #0]
 802eeee:	b103      	cbz	r3, 802eef2 <_sbrk_r+0x1a>
 802eef0:	6023      	str	r3, [r4, #0]
 802eef2:	bd38      	pop	{r3, r4, r5, pc}
 802eef4:	24001e68 	.word	0x24001e68

0802eef8 <siprintf>:
 802eef8:	b40e      	push	{r1, r2, r3}
 802eefa:	b500      	push	{lr}
 802eefc:	b09c      	sub	sp, #112	; 0x70
 802eefe:	ab1d      	add	r3, sp, #116	; 0x74
 802ef00:	9002      	str	r0, [sp, #8]
 802ef02:	9006      	str	r0, [sp, #24]
 802ef04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802ef08:	4809      	ldr	r0, [pc, #36]	; (802ef30 <siprintf+0x38>)
 802ef0a:	9107      	str	r1, [sp, #28]
 802ef0c:	9104      	str	r1, [sp, #16]
 802ef0e:	4909      	ldr	r1, [pc, #36]	; (802ef34 <siprintf+0x3c>)
 802ef10:	f853 2b04 	ldr.w	r2, [r3], #4
 802ef14:	9105      	str	r1, [sp, #20]
 802ef16:	6800      	ldr	r0, [r0, #0]
 802ef18:	9301      	str	r3, [sp, #4]
 802ef1a:	a902      	add	r1, sp, #8
 802ef1c:	f000 fb54 	bl	802f5c8 <_svfiprintf_r>
 802ef20:	9b02      	ldr	r3, [sp, #8]
 802ef22:	2200      	movs	r2, #0
 802ef24:	701a      	strb	r2, [r3, #0]
 802ef26:	b01c      	add	sp, #112	; 0x70
 802ef28:	f85d eb04 	ldr.w	lr, [sp], #4
 802ef2c:	b003      	add	sp, #12
 802ef2e:	4770      	bx	lr
 802ef30:	24000050 	.word	0x24000050
 802ef34:	ffff0208 	.word	0xffff0208

0802ef38 <__swbuf_r>:
 802ef38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ef3a:	460e      	mov	r6, r1
 802ef3c:	4614      	mov	r4, r2
 802ef3e:	4605      	mov	r5, r0
 802ef40:	b118      	cbz	r0, 802ef4a <__swbuf_r+0x12>
 802ef42:	6983      	ldr	r3, [r0, #24]
 802ef44:	b90b      	cbnz	r3, 802ef4a <__swbuf_r+0x12>
 802ef46:	f000 f9d1 	bl	802f2ec <__sinit>
 802ef4a:	4b21      	ldr	r3, [pc, #132]	; (802efd0 <__swbuf_r+0x98>)
 802ef4c:	429c      	cmp	r4, r3
 802ef4e:	d12b      	bne.n	802efa8 <__swbuf_r+0x70>
 802ef50:	686c      	ldr	r4, [r5, #4]
 802ef52:	69a3      	ldr	r3, [r4, #24]
 802ef54:	60a3      	str	r3, [r4, #8]
 802ef56:	89a3      	ldrh	r3, [r4, #12]
 802ef58:	071a      	lsls	r2, r3, #28
 802ef5a:	d52f      	bpl.n	802efbc <__swbuf_r+0x84>
 802ef5c:	6923      	ldr	r3, [r4, #16]
 802ef5e:	b36b      	cbz	r3, 802efbc <__swbuf_r+0x84>
 802ef60:	6923      	ldr	r3, [r4, #16]
 802ef62:	6820      	ldr	r0, [r4, #0]
 802ef64:	1ac0      	subs	r0, r0, r3
 802ef66:	6963      	ldr	r3, [r4, #20]
 802ef68:	b2f6      	uxtb	r6, r6
 802ef6a:	4283      	cmp	r3, r0
 802ef6c:	4637      	mov	r7, r6
 802ef6e:	dc04      	bgt.n	802ef7a <__swbuf_r+0x42>
 802ef70:	4621      	mov	r1, r4
 802ef72:	4628      	mov	r0, r5
 802ef74:	f000 f926 	bl	802f1c4 <_fflush_r>
 802ef78:	bb30      	cbnz	r0, 802efc8 <__swbuf_r+0x90>
 802ef7a:	68a3      	ldr	r3, [r4, #8]
 802ef7c:	3b01      	subs	r3, #1
 802ef7e:	60a3      	str	r3, [r4, #8]
 802ef80:	6823      	ldr	r3, [r4, #0]
 802ef82:	1c5a      	adds	r2, r3, #1
 802ef84:	6022      	str	r2, [r4, #0]
 802ef86:	701e      	strb	r6, [r3, #0]
 802ef88:	6963      	ldr	r3, [r4, #20]
 802ef8a:	3001      	adds	r0, #1
 802ef8c:	4283      	cmp	r3, r0
 802ef8e:	d004      	beq.n	802ef9a <__swbuf_r+0x62>
 802ef90:	89a3      	ldrh	r3, [r4, #12]
 802ef92:	07db      	lsls	r3, r3, #31
 802ef94:	d506      	bpl.n	802efa4 <__swbuf_r+0x6c>
 802ef96:	2e0a      	cmp	r6, #10
 802ef98:	d104      	bne.n	802efa4 <__swbuf_r+0x6c>
 802ef9a:	4621      	mov	r1, r4
 802ef9c:	4628      	mov	r0, r5
 802ef9e:	f000 f911 	bl	802f1c4 <_fflush_r>
 802efa2:	b988      	cbnz	r0, 802efc8 <__swbuf_r+0x90>
 802efa4:	4638      	mov	r0, r7
 802efa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802efa8:	4b0a      	ldr	r3, [pc, #40]	; (802efd4 <__swbuf_r+0x9c>)
 802efaa:	429c      	cmp	r4, r3
 802efac:	d101      	bne.n	802efb2 <__swbuf_r+0x7a>
 802efae:	68ac      	ldr	r4, [r5, #8]
 802efb0:	e7cf      	b.n	802ef52 <__swbuf_r+0x1a>
 802efb2:	4b09      	ldr	r3, [pc, #36]	; (802efd8 <__swbuf_r+0xa0>)
 802efb4:	429c      	cmp	r4, r3
 802efb6:	bf08      	it	eq
 802efb8:	68ec      	ldreq	r4, [r5, #12]
 802efba:	e7ca      	b.n	802ef52 <__swbuf_r+0x1a>
 802efbc:	4621      	mov	r1, r4
 802efbe:	4628      	mov	r0, r5
 802efc0:	f000 f80c 	bl	802efdc <__swsetup_r>
 802efc4:	2800      	cmp	r0, #0
 802efc6:	d0cb      	beq.n	802ef60 <__swbuf_r+0x28>
 802efc8:	f04f 37ff 	mov.w	r7, #4294967295
 802efcc:	e7ea      	b.n	802efa4 <__swbuf_r+0x6c>
 802efce:	bf00      	nop
 802efd0:	08030d74 	.word	0x08030d74
 802efd4:	08030d94 	.word	0x08030d94
 802efd8:	08030d54 	.word	0x08030d54

0802efdc <__swsetup_r>:
 802efdc:	4b32      	ldr	r3, [pc, #200]	; (802f0a8 <__swsetup_r+0xcc>)
 802efde:	b570      	push	{r4, r5, r6, lr}
 802efe0:	681d      	ldr	r5, [r3, #0]
 802efe2:	4606      	mov	r6, r0
 802efe4:	460c      	mov	r4, r1
 802efe6:	b125      	cbz	r5, 802eff2 <__swsetup_r+0x16>
 802efe8:	69ab      	ldr	r3, [r5, #24]
 802efea:	b913      	cbnz	r3, 802eff2 <__swsetup_r+0x16>
 802efec:	4628      	mov	r0, r5
 802efee:	f000 f97d 	bl	802f2ec <__sinit>
 802eff2:	4b2e      	ldr	r3, [pc, #184]	; (802f0ac <__swsetup_r+0xd0>)
 802eff4:	429c      	cmp	r4, r3
 802eff6:	d10f      	bne.n	802f018 <__swsetup_r+0x3c>
 802eff8:	686c      	ldr	r4, [r5, #4]
 802effa:	89a3      	ldrh	r3, [r4, #12]
 802effc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802f000:	0719      	lsls	r1, r3, #28
 802f002:	d42c      	bmi.n	802f05e <__swsetup_r+0x82>
 802f004:	06dd      	lsls	r5, r3, #27
 802f006:	d411      	bmi.n	802f02c <__swsetup_r+0x50>
 802f008:	2309      	movs	r3, #9
 802f00a:	6033      	str	r3, [r6, #0]
 802f00c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802f010:	81a3      	strh	r3, [r4, #12]
 802f012:	f04f 30ff 	mov.w	r0, #4294967295
 802f016:	e03e      	b.n	802f096 <__swsetup_r+0xba>
 802f018:	4b25      	ldr	r3, [pc, #148]	; (802f0b0 <__swsetup_r+0xd4>)
 802f01a:	429c      	cmp	r4, r3
 802f01c:	d101      	bne.n	802f022 <__swsetup_r+0x46>
 802f01e:	68ac      	ldr	r4, [r5, #8]
 802f020:	e7eb      	b.n	802effa <__swsetup_r+0x1e>
 802f022:	4b24      	ldr	r3, [pc, #144]	; (802f0b4 <__swsetup_r+0xd8>)
 802f024:	429c      	cmp	r4, r3
 802f026:	bf08      	it	eq
 802f028:	68ec      	ldreq	r4, [r5, #12]
 802f02a:	e7e6      	b.n	802effa <__swsetup_r+0x1e>
 802f02c:	0758      	lsls	r0, r3, #29
 802f02e:	d512      	bpl.n	802f056 <__swsetup_r+0x7a>
 802f030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802f032:	b141      	cbz	r1, 802f046 <__swsetup_r+0x6a>
 802f034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802f038:	4299      	cmp	r1, r3
 802f03a:	d002      	beq.n	802f042 <__swsetup_r+0x66>
 802f03c:	4630      	mov	r0, r6
 802f03e:	f7ff fe53 	bl	802ece8 <_free_r>
 802f042:	2300      	movs	r3, #0
 802f044:	6363      	str	r3, [r4, #52]	; 0x34
 802f046:	89a3      	ldrh	r3, [r4, #12]
 802f048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802f04c:	81a3      	strh	r3, [r4, #12]
 802f04e:	2300      	movs	r3, #0
 802f050:	6063      	str	r3, [r4, #4]
 802f052:	6923      	ldr	r3, [r4, #16]
 802f054:	6023      	str	r3, [r4, #0]
 802f056:	89a3      	ldrh	r3, [r4, #12]
 802f058:	f043 0308 	orr.w	r3, r3, #8
 802f05c:	81a3      	strh	r3, [r4, #12]
 802f05e:	6923      	ldr	r3, [r4, #16]
 802f060:	b94b      	cbnz	r3, 802f076 <__swsetup_r+0x9a>
 802f062:	89a3      	ldrh	r3, [r4, #12]
 802f064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802f068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802f06c:	d003      	beq.n	802f076 <__swsetup_r+0x9a>
 802f06e:	4621      	mov	r1, r4
 802f070:	4630      	mov	r0, r6
 802f072:	f000 fa01 	bl	802f478 <__smakebuf_r>
 802f076:	89a0      	ldrh	r0, [r4, #12]
 802f078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802f07c:	f010 0301 	ands.w	r3, r0, #1
 802f080:	d00a      	beq.n	802f098 <__swsetup_r+0xbc>
 802f082:	2300      	movs	r3, #0
 802f084:	60a3      	str	r3, [r4, #8]
 802f086:	6963      	ldr	r3, [r4, #20]
 802f088:	425b      	negs	r3, r3
 802f08a:	61a3      	str	r3, [r4, #24]
 802f08c:	6923      	ldr	r3, [r4, #16]
 802f08e:	b943      	cbnz	r3, 802f0a2 <__swsetup_r+0xc6>
 802f090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802f094:	d1ba      	bne.n	802f00c <__swsetup_r+0x30>
 802f096:	bd70      	pop	{r4, r5, r6, pc}
 802f098:	0781      	lsls	r1, r0, #30
 802f09a:	bf58      	it	pl
 802f09c:	6963      	ldrpl	r3, [r4, #20]
 802f09e:	60a3      	str	r3, [r4, #8]
 802f0a0:	e7f4      	b.n	802f08c <__swsetup_r+0xb0>
 802f0a2:	2000      	movs	r0, #0
 802f0a4:	e7f7      	b.n	802f096 <__swsetup_r+0xba>
 802f0a6:	bf00      	nop
 802f0a8:	24000050 	.word	0x24000050
 802f0ac:	08030d74 	.word	0x08030d74
 802f0b0:	08030d94 	.word	0x08030d94
 802f0b4:	08030d54 	.word	0x08030d54

0802f0b8 <__sflush_r>:
 802f0b8:	898a      	ldrh	r2, [r1, #12]
 802f0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f0be:	4605      	mov	r5, r0
 802f0c0:	0710      	lsls	r0, r2, #28
 802f0c2:	460c      	mov	r4, r1
 802f0c4:	d458      	bmi.n	802f178 <__sflush_r+0xc0>
 802f0c6:	684b      	ldr	r3, [r1, #4]
 802f0c8:	2b00      	cmp	r3, #0
 802f0ca:	dc05      	bgt.n	802f0d8 <__sflush_r+0x20>
 802f0cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802f0ce:	2b00      	cmp	r3, #0
 802f0d0:	dc02      	bgt.n	802f0d8 <__sflush_r+0x20>
 802f0d2:	2000      	movs	r0, #0
 802f0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f0d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802f0da:	2e00      	cmp	r6, #0
 802f0dc:	d0f9      	beq.n	802f0d2 <__sflush_r+0x1a>
 802f0de:	2300      	movs	r3, #0
 802f0e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802f0e4:	682f      	ldr	r7, [r5, #0]
 802f0e6:	602b      	str	r3, [r5, #0]
 802f0e8:	d032      	beq.n	802f150 <__sflush_r+0x98>
 802f0ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802f0ec:	89a3      	ldrh	r3, [r4, #12]
 802f0ee:	075a      	lsls	r2, r3, #29
 802f0f0:	d505      	bpl.n	802f0fe <__sflush_r+0x46>
 802f0f2:	6863      	ldr	r3, [r4, #4]
 802f0f4:	1ac0      	subs	r0, r0, r3
 802f0f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802f0f8:	b10b      	cbz	r3, 802f0fe <__sflush_r+0x46>
 802f0fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802f0fc:	1ac0      	subs	r0, r0, r3
 802f0fe:	2300      	movs	r3, #0
 802f100:	4602      	mov	r2, r0
 802f102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802f104:	6a21      	ldr	r1, [r4, #32]
 802f106:	4628      	mov	r0, r5
 802f108:	47b0      	blx	r6
 802f10a:	1c43      	adds	r3, r0, #1
 802f10c:	89a3      	ldrh	r3, [r4, #12]
 802f10e:	d106      	bne.n	802f11e <__sflush_r+0x66>
 802f110:	6829      	ldr	r1, [r5, #0]
 802f112:	291d      	cmp	r1, #29
 802f114:	d82c      	bhi.n	802f170 <__sflush_r+0xb8>
 802f116:	4a2a      	ldr	r2, [pc, #168]	; (802f1c0 <__sflush_r+0x108>)
 802f118:	40ca      	lsrs	r2, r1
 802f11a:	07d6      	lsls	r6, r2, #31
 802f11c:	d528      	bpl.n	802f170 <__sflush_r+0xb8>
 802f11e:	2200      	movs	r2, #0
 802f120:	6062      	str	r2, [r4, #4]
 802f122:	04d9      	lsls	r1, r3, #19
 802f124:	6922      	ldr	r2, [r4, #16]
 802f126:	6022      	str	r2, [r4, #0]
 802f128:	d504      	bpl.n	802f134 <__sflush_r+0x7c>
 802f12a:	1c42      	adds	r2, r0, #1
 802f12c:	d101      	bne.n	802f132 <__sflush_r+0x7a>
 802f12e:	682b      	ldr	r3, [r5, #0]
 802f130:	b903      	cbnz	r3, 802f134 <__sflush_r+0x7c>
 802f132:	6560      	str	r0, [r4, #84]	; 0x54
 802f134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802f136:	602f      	str	r7, [r5, #0]
 802f138:	2900      	cmp	r1, #0
 802f13a:	d0ca      	beq.n	802f0d2 <__sflush_r+0x1a>
 802f13c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802f140:	4299      	cmp	r1, r3
 802f142:	d002      	beq.n	802f14a <__sflush_r+0x92>
 802f144:	4628      	mov	r0, r5
 802f146:	f7ff fdcf 	bl	802ece8 <_free_r>
 802f14a:	2000      	movs	r0, #0
 802f14c:	6360      	str	r0, [r4, #52]	; 0x34
 802f14e:	e7c1      	b.n	802f0d4 <__sflush_r+0x1c>
 802f150:	6a21      	ldr	r1, [r4, #32]
 802f152:	2301      	movs	r3, #1
 802f154:	4628      	mov	r0, r5
 802f156:	47b0      	blx	r6
 802f158:	1c41      	adds	r1, r0, #1
 802f15a:	d1c7      	bne.n	802f0ec <__sflush_r+0x34>
 802f15c:	682b      	ldr	r3, [r5, #0]
 802f15e:	2b00      	cmp	r3, #0
 802f160:	d0c4      	beq.n	802f0ec <__sflush_r+0x34>
 802f162:	2b1d      	cmp	r3, #29
 802f164:	d001      	beq.n	802f16a <__sflush_r+0xb2>
 802f166:	2b16      	cmp	r3, #22
 802f168:	d101      	bne.n	802f16e <__sflush_r+0xb6>
 802f16a:	602f      	str	r7, [r5, #0]
 802f16c:	e7b1      	b.n	802f0d2 <__sflush_r+0x1a>
 802f16e:	89a3      	ldrh	r3, [r4, #12]
 802f170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f174:	81a3      	strh	r3, [r4, #12]
 802f176:	e7ad      	b.n	802f0d4 <__sflush_r+0x1c>
 802f178:	690f      	ldr	r7, [r1, #16]
 802f17a:	2f00      	cmp	r7, #0
 802f17c:	d0a9      	beq.n	802f0d2 <__sflush_r+0x1a>
 802f17e:	0793      	lsls	r3, r2, #30
 802f180:	680e      	ldr	r6, [r1, #0]
 802f182:	bf08      	it	eq
 802f184:	694b      	ldreq	r3, [r1, #20]
 802f186:	600f      	str	r7, [r1, #0]
 802f188:	bf18      	it	ne
 802f18a:	2300      	movne	r3, #0
 802f18c:	eba6 0807 	sub.w	r8, r6, r7
 802f190:	608b      	str	r3, [r1, #8]
 802f192:	f1b8 0f00 	cmp.w	r8, #0
 802f196:	dd9c      	ble.n	802f0d2 <__sflush_r+0x1a>
 802f198:	6a21      	ldr	r1, [r4, #32]
 802f19a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802f19c:	4643      	mov	r3, r8
 802f19e:	463a      	mov	r2, r7
 802f1a0:	4628      	mov	r0, r5
 802f1a2:	47b0      	blx	r6
 802f1a4:	2800      	cmp	r0, #0
 802f1a6:	dc06      	bgt.n	802f1b6 <__sflush_r+0xfe>
 802f1a8:	89a3      	ldrh	r3, [r4, #12]
 802f1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f1ae:	81a3      	strh	r3, [r4, #12]
 802f1b0:	f04f 30ff 	mov.w	r0, #4294967295
 802f1b4:	e78e      	b.n	802f0d4 <__sflush_r+0x1c>
 802f1b6:	4407      	add	r7, r0
 802f1b8:	eba8 0800 	sub.w	r8, r8, r0
 802f1bc:	e7e9      	b.n	802f192 <__sflush_r+0xda>
 802f1be:	bf00      	nop
 802f1c0:	20400001 	.word	0x20400001

0802f1c4 <_fflush_r>:
 802f1c4:	b538      	push	{r3, r4, r5, lr}
 802f1c6:	690b      	ldr	r3, [r1, #16]
 802f1c8:	4605      	mov	r5, r0
 802f1ca:	460c      	mov	r4, r1
 802f1cc:	b913      	cbnz	r3, 802f1d4 <_fflush_r+0x10>
 802f1ce:	2500      	movs	r5, #0
 802f1d0:	4628      	mov	r0, r5
 802f1d2:	bd38      	pop	{r3, r4, r5, pc}
 802f1d4:	b118      	cbz	r0, 802f1de <_fflush_r+0x1a>
 802f1d6:	6983      	ldr	r3, [r0, #24]
 802f1d8:	b90b      	cbnz	r3, 802f1de <_fflush_r+0x1a>
 802f1da:	f000 f887 	bl	802f2ec <__sinit>
 802f1de:	4b14      	ldr	r3, [pc, #80]	; (802f230 <_fflush_r+0x6c>)
 802f1e0:	429c      	cmp	r4, r3
 802f1e2:	d11b      	bne.n	802f21c <_fflush_r+0x58>
 802f1e4:	686c      	ldr	r4, [r5, #4]
 802f1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f1ea:	2b00      	cmp	r3, #0
 802f1ec:	d0ef      	beq.n	802f1ce <_fflush_r+0xa>
 802f1ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802f1f0:	07d0      	lsls	r0, r2, #31
 802f1f2:	d404      	bmi.n	802f1fe <_fflush_r+0x3a>
 802f1f4:	0599      	lsls	r1, r3, #22
 802f1f6:	d402      	bmi.n	802f1fe <_fflush_r+0x3a>
 802f1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802f1fa:	f000 f915 	bl	802f428 <__retarget_lock_acquire_recursive>
 802f1fe:	4628      	mov	r0, r5
 802f200:	4621      	mov	r1, r4
 802f202:	f7ff ff59 	bl	802f0b8 <__sflush_r>
 802f206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802f208:	07da      	lsls	r2, r3, #31
 802f20a:	4605      	mov	r5, r0
 802f20c:	d4e0      	bmi.n	802f1d0 <_fflush_r+0xc>
 802f20e:	89a3      	ldrh	r3, [r4, #12]
 802f210:	059b      	lsls	r3, r3, #22
 802f212:	d4dd      	bmi.n	802f1d0 <_fflush_r+0xc>
 802f214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802f216:	f000 f908 	bl	802f42a <__retarget_lock_release_recursive>
 802f21a:	e7d9      	b.n	802f1d0 <_fflush_r+0xc>
 802f21c:	4b05      	ldr	r3, [pc, #20]	; (802f234 <_fflush_r+0x70>)
 802f21e:	429c      	cmp	r4, r3
 802f220:	d101      	bne.n	802f226 <_fflush_r+0x62>
 802f222:	68ac      	ldr	r4, [r5, #8]
 802f224:	e7df      	b.n	802f1e6 <_fflush_r+0x22>
 802f226:	4b04      	ldr	r3, [pc, #16]	; (802f238 <_fflush_r+0x74>)
 802f228:	429c      	cmp	r4, r3
 802f22a:	bf08      	it	eq
 802f22c:	68ec      	ldreq	r4, [r5, #12]
 802f22e:	e7da      	b.n	802f1e6 <_fflush_r+0x22>
 802f230:	08030d74 	.word	0x08030d74
 802f234:	08030d94 	.word	0x08030d94
 802f238:	08030d54 	.word	0x08030d54

0802f23c <std>:
 802f23c:	2300      	movs	r3, #0
 802f23e:	b510      	push	{r4, lr}
 802f240:	4604      	mov	r4, r0
 802f242:	e9c0 3300 	strd	r3, r3, [r0]
 802f246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802f24a:	6083      	str	r3, [r0, #8]
 802f24c:	8181      	strh	r1, [r0, #12]
 802f24e:	6643      	str	r3, [r0, #100]	; 0x64
 802f250:	81c2      	strh	r2, [r0, #14]
 802f252:	6183      	str	r3, [r0, #24]
 802f254:	4619      	mov	r1, r3
 802f256:	2208      	movs	r2, #8
 802f258:	305c      	adds	r0, #92	; 0x5c
 802f25a:	f7ff fd3d 	bl	802ecd8 <memset>
 802f25e:	4b05      	ldr	r3, [pc, #20]	; (802f274 <std+0x38>)
 802f260:	6263      	str	r3, [r4, #36]	; 0x24
 802f262:	4b05      	ldr	r3, [pc, #20]	; (802f278 <std+0x3c>)
 802f264:	62a3      	str	r3, [r4, #40]	; 0x28
 802f266:	4b05      	ldr	r3, [pc, #20]	; (802f27c <std+0x40>)
 802f268:	62e3      	str	r3, [r4, #44]	; 0x2c
 802f26a:	4b05      	ldr	r3, [pc, #20]	; (802f280 <std+0x44>)
 802f26c:	6224      	str	r4, [r4, #32]
 802f26e:	6323      	str	r3, [r4, #48]	; 0x30
 802f270:	bd10      	pop	{r4, pc}
 802f272:	bf00      	nop
 802f274:	0802fda5 	.word	0x0802fda5
 802f278:	0802fdc7 	.word	0x0802fdc7
 802f27c:	0802fdff 	.word	0x0802fdff
 802f280:	0802fe23 	.word	0x0802fe23

0802f284 <_cleanup_r>:
 802f284:	4901      	ldr	r1, [pc, #4]	; (802f28c <_cleanup_r+0x8>)
 802f286:	f000 b8af 	b.w	802f3e8 <_fwalk_reent>
 802f28a:	bf00      	nop
 802f28c:	0802f1c5 	.word	0x0802f1c5

0802f290 <__sfmoreglue>:
 802f290:	b570      	push	{r4, r5, r6, lr}
 802f292:	2268      	movs	r2, #104	; 0x68
 802f294:	1e4d      	subs	r5, r1, #1
 802f296:	4355      	muls	r5, r2
 802f298:	460e      	mov	r6, r1
 802f29a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802f29e:	f7ff fd8f 	bl	802edc0 <_malloc_r>
 802f2a2:	4604      	mov	r4, r0
 802f2a4:	b140      	cbz	r0, 802f2b8 <__sfmoreglue+0x28>
 802f2a6:	2100      	movs	r1, #0
 802f2a8:	e9c0 1600 	strd	r1, r6, [r0]
 802f2ac:	300c      	adds	r0, #12
 802f2ae:	60a0      	str	r0, [r4, #8]
 802f2b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802f2b4:	f7ff fd10 	bl	802ecd8 <memset>
 802f2b8:	4620      	mov	r0, r4
 802f2ba:	bd70      	pop	{r4, r5, r6, pc}

0802f2bc <__sfp_lock_acquire>:
 802f2bc:	4801      	ldr	r0, [pc, #4]	; (802f2c4 <__sfp_lock_acquire+0x8>)
 802f2be:	f000 b8b3 	b.w	802f428 <__retarget_lock_acquire_recursive>
 802f2c2:	bf00      	nop
 802f2c4:	24001e65 	.word	0x24001e65

0802f2c8 <__sfp_lock_release>:
 802f2c8:	4801      	ldr	r0, [pc, #4]	; (802f2d0 <__sfp_lock_release+0x8>)
 802f2ca:	f000 b8ae 	b.w	802f42a <__retarget_lock_release_recursive>
 802f2ce:	bf00      	nop
 802f2d0:	24001e65 	.word	0x24001e65

0802f2d4 <__sinit_lock_acquire>:
 802f2d4:	4801      	ldr	r0, [pc, #4]	; (802f2dc <__sinit_lock_acquire+0x8>)
 802f2d6:	f000 b8a7 	b.w	802f428 <__retarget_lock_acquire_recursive>
 802f2da:	bf00      	nop
 802f2dc:	24001e66 	.word	0x24001e66

0802f2e0 <__sinit_lock_release>:
 802f2e0:	4801      	ldr	r0, [pc, #4]	; (802f2e8 <__sinit_lock_release+0x8>)
 802f2e2:	f000 b8a2 	b.w	802f42a <__retarget_lock_release_recursive>
 802f2e6:	bf00      	nop
 802f2e8:	24001e66 	.word	0x24001e66

0802f2ec <__sinit>:
 802f2ec:	b510      	push	{r4, lr}
 802f2ee:	4604      	mov	r4, r0
 802f2f0:	f7ff fff0 	bl	802f2d4 <__sinit_lock_acquire>
 802f2f4:	69a3      	ldr	r3, [r4, #24]
 802f2f6:	b11b      	cbz	r3, 802f300 <__sinit+0x14>
 802f2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802f2fc:	f7ff bff0 	b.w	802f2e0 <__sinit_lock_release>
 802f300:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802f304:	6523      	str	r3, [r4, #80]	; 0x50
 802f306:	4b13      	ldr	r3, [pc, #76]	; (802f354 <__sinit+0x68>)
 802f308:	4a13      	ldr	r2, [pc, #76]	; (802f358 <__sinit+0x6c>)
 802f30a:	681b      	ldr	r3, [r3, #0]
 802f30c:	62a2      	str	r2, [r4, #40]	; 0x28
 802f30e:	42a3      	cmp	r3, r4
 802f310:	bf04      	itt	eq
 802f312:	2301      	moveq	r3, #1
 802f314:	61a3      	streq	r3, [r4, #24]
 802f316:	4620      	mov	r0, r4
 802f318:	f000 f820 	bl	802f35c <__sfp>
 802f31c:	6060      	str	r0, [r4, #4]
 802f31e:	4620      	mov	r0, r4
 802f320:	f000 f81c 	bl	802f35c <__sfp>
 802f324:	60a0      	str	r0, [r4, #8]
 802f326:	4620      	mov	r0, r4
 802f328:	f000 f818 	bl	802f35c <__sfp>
 802f32c:	2200      	movs	r2, #0
 802f32e:	60e0      	str	r0, [r4, #12]
 802f330:	2104      	movs	r1, #4
 802f332:	6860      	ldr	r0, [r4, #4]
 802f334:	f7ff ff82 	bl	802f23c <std>
 802f338:	68a0      	ldr	r0, [r4, #8]
 802f33a:	2201      	movs	r2, #1
 802f33c:	2109      	movs	r1, #9
 802f33e:	f7ff ff7d 	bl	802f23c <std>
 802f342:	68e0      	ldr	r0, [r4, #12]
 802f344:	2202      	movs	r2, #2
 802f346:	2112      	movs	r1, #18
 802f348:	f7ff ff78 	bl	802f23c <std>
 802f34c:	2301      	movs	r3, #1
 802f34e:	61a3      	str	r3, [r4, #24]
 802f350:	e7d2      	b.n	802f2f8 <__sinit+0xc>
 802f352:	bf00      	nop
 802f354:	08030d50 	.word	0x08030d50
 802f358:	0802f285 	.word	0x0802f285

0802f35c <__sfp>:
 802f35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f35e:	4607      	mov	r7, r0
 802f360:	f7ff ffac 	bl	802f2bc <__sfp_lock_acquire>
 802f364:	4b1e      	ldr	r3, [pc, #120]	; (802f3e0 <__sfp+0x84>)
 802f366:	681e      	ldr	r6, [r3, #0]
 802f368:	69b3      	ldr	r3, [r6, #24]
 802f36a:	b913      	cbnz	r3, 802f372 <__sfp+0x16>
 802f36c:	4630      	mov	r0, r6
 802f36e:	f7ff ffbd 	bl	802f2ec <__sinit>
 802f372:	3648      	adds	r6, #72	; 0x48
 802f374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802f378:	3b01      	subs	r3, #1
 802f37a:	d503      	bpl.n	802f384 <__sfp+0x28>
 802f37c:	6833      	ldr	r3, [r6, #0]
 802f37e:	b30b      	cbz	r3, 802f3c4 <__sfp+0x68>
 802f380:	6836      	ldr	r6, [r6, #0]
 802f382:	e7f7      	b.n	802f374 <__sfp+0x18>
 802f384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802f388:	b9d5      	cbnz	r5, 802f3c0 <__sfp+0x64>
 802f38a:	4b16      	ldr	r3, [pc, #88]	; (802f3e4 <__sfp+0x88>)
 802f38c:	60e3      	str	r3, [r4, #12]
 802f38e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802f392:	6665      	str	r5, [r4, #100]	; 0x64
 802f394:	f000 f847 	bl	802f426 <__retarget_lock_init_recursive>
 802f398:	f7ff ff96 	bl	802f2c8 <__sfp_lock_release>
 802f39c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802f3a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802f3a4:	6025      	str	r5, [r4, #0]
 802f3a6:	61a5      	str	r5, [r4, #24]
 802f3a8:	2208      	movs	r2, #8
 802f3aa:	4629      	mov	r1, r5
 802f3ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802f3b0:	f7ff fc92 	bl	802ecd8 <memset>
 802f3b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802f3b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802f3bc:	4620      	mov	r0, r4
 802f3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f3c0:	3468      	adds	r4, #104	; 0x68
 802f3c2:	e7d9      	b.n	802f378 <__sfp+0x1c>
 802f3c4:	2104      	movs	r1, #4
 802f3c6:	4638      	mov	r0, r7
 802f3c8:	f7ff ff62 	bl	802f290 <__sfmoreglue>
 802f3cc:	4604      	mov	r4, r0
 802f3ce:	6030      	str	r0, [r6, #0]
 802f3d0:	2800      	cmp	r0, #0
 802f3d2:	d1d5      	bne.n	802f380 <__sfp+0x24>
 802f3d4:	f7ff ff78 	bl	802f2c8 <__sfp_lock_release>
 802f3d8:	230c      	movs	r3, #12
 802f3da:	603b      	str	r3, [r7, #0]
 802f3dc:	e7ee      	b.n	802f3bc <__sfp+0x60>
 802f3de:	bf00      	nop
 802f3e0:	08030d50 	.word	0x08030d50
 802f3e4:	ffff0001 	.word	0xffff0001

0802f3e8 <_fwalk_reent>:
 802f3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f3ec:	4606      	mov	r6, r0
 802f3ee:	4688      	mov	r8, r1
 802f3f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802f3f4:	2700      	movs	r7, #0
 802f3f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802f3fa:	f1b9 0901 	subs.w	r9, r9, #1
 802f3fe:	d505      	bpl.n	802f40c <_fwalk_reent+0x24>
 802f400:	6824      	ldr	r4, [r4, #0]
 802f402:	2c00      	cmp	r4, #0
 802f404:	d1f7      	bne.n	802f3f6 <_fwalk_reent+0xe>
 802f406:	4638      	mov	r0, r7
 802f408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f40c:	89ab      	ldrh	r3, [r5, #12]
 802f40e:	2b01      	cmp	r3, #1
 802f410:	d907      	bls.n	802f422 <_fwalk_reent+0x3a>
 802f412:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802f416:	3301      	adds	r3, #1
 802f418:	d003      	beq.n	802f422 <_fwalk_reent+0x3a>
 802f41a:	4629      	mov	r1, r5
 802f41c:	4630      	mov	r0, r6
 802f41e:	47c0      	blx	r8
 802f420:	4307      	orrs	r7, r0
 802f422:	3568      	adds	r5, #104	; 0x68
 802f424:	e7e9      	b.n	802f3fa <_fwalk_reent+0x12>

0802f426 <__retarget_lock_init_recursive>:
 802f426:	4770      	bx	lr

0802f428 <__retarget_lock_acquire_recursive>:
 802f428:	4770      	bx	lr

0802f42a <__retarget_lock_release_recursive>:
 802f42a:	4770      	bx	lr

0802f42c <__swhatbuf_r>:
 802f42c:	b570      	push	{r4, r5, r6, lr}
 802f42e:	460e      	mov	r6, r1
 802f430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f434:	2900      	cmp	r1, #0
 802f436:	b096      	sub	sp, #88	; 0x58
 802f438:	4614      	mov	r4, r2
 802f43a:	461d      	mov	r5, r3
 802f43c:	da08      	bge.n	802f450 <__swhatbuf_r+0x24>
 802f43e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802f442:	2200      	movs	r2, #0
 802f444:	602a      	str	r2, [r5, #0]
 802f446:	061a      	lsls	r2, r3, #24
 802f448:	d410      	bmi.n	802f46c <__swhatbuf_r+0x40>
 802f44a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802f44e:	e00e      	b.n	802f46e <__swhatbuf_r+0x42>
 802f450:	466a      	mov	r2, sp
 802f452:	f000 fd0d 	bl	802fe70 <_fstat_r>
 802f456:	2800      	cmp	r0, #0
 802f458:	dbf1      	blt.n	802f43e <__swhatbuf_r+0x12>
 802f45a:	9a01      	ldr	r2, [sp, #4]
 802f45c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802f460:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802f464:	425a      	negs	r2, r3
 802f466:	415a      	adcs	r2, r3
 802f468:	602a      	str	r2, [r5, #0]
 802f46a:	e7ee      	b.n	802f44a <__swhatbuf_r+0x1e>
 802f46c:	2340      	movs	r3, #64	; 0x40
 802f46e:	2000      	movs	r0, #0
 802f470:	6023      	str	r3, [r4, #0]
 802f472:	b016      	add	sp, #88	; 0x58
 802f474:	bd70      	pop	{r4, r5, r6, pc}
	...

0802f478 <__smakebuf_r>:
 802f478:	898b      	ldrh	r3, [r1, #12]
 802f47a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802f47c:	079d      	lsls	r5, r3, #30
 802f47e:	4606      	mov	r6, r0
 802f480:	460c      	mov	r4, r1
 802f482:	d507      	bpl.n	802f494 <__smakebuf_r+0x1c>
 802f484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802f488:	6023      	str	r3, [r4, #0]
 802f48a:	6123      	str	r3, [r4, #16]
 802f48c:	2301      	movs	r3, #1
 802f48e:	6163      	str	r3, [r4, #20]
 802f490:	b002      	add	sp, #8
 802f492:	bd70      	pop	{r4, r5, r6, pc}
 802f494:	ab01      	add	r3, sp, #4
 802f496:	466a      	mov	r2, sp
 802f498:	f7ff ffc8 	bl	802f42c <__swhatbuf_r>
 802f49c:	9900      	ldr	r1, [sp, #0]
 802f49e:	4605      	mov	r5, r0
 802f4a0:	4630      	mov	r0, r6
 802f4a2:	f7ff fc8d 	bl	802edc0 <_malloc_r>
 802f4a6:	b948      	cbnz	r0, 802f4bc <__smakebuf_r+0x44>
 802f4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f4ac:	059a      	lsls	r2, r3, #22
 802f4ae:	d4ef      	bmi.n	802f490 <__smakebuf_r+0x18>
 802f4b0:	f023 0303 	bic.w	r3, r3, #3
 802f4b4:	f043 0302 	orr.w	r3, r3, #2
 802f4b8:	81a3      	strh	r3, [r4, #12]
 802f4ba:	e7e3      	b.n	802f484 <__smakebuf_r+0xc>
 802f4bc:	4b0d      	ldr	r3, [pc, #52]	; (802f4f4 <__smakebuf_r+0x7c>)
 802f4be:	62b3      	str	r3, [r6, #40]	; 0x28
 802f4c0:	89a3      	ldrh	r3, [r4, #12]
 802f4c2:	6020      	str	r0, [r4, #0]
 802f4c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802f4c8:	81a3      	strh	r3, [r4, #12]
 802f4ca:	9b00      	ldr	r3, [sp, #0]
 802f4cc:	6163      	str	r3, [r4, #20]
 802f4ce:	9b01      	ldr	r3, [sp, #4]
 802f4d0:	6120      	str	r0, [r4, #16]
 802f4d2:	b15b      	cbz	r3, 802f4ec <__smakebuf_r+0x74>
 802f4d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f4d8:	4630      	mov	r0, r6
 802f4da:	f000 fcdb 	bl	802fe94 <_isatty_r>
 802f4de:	b128      	cbz	r0, 802f4ec <__smakebuf_r+0x74>
 802f4e0:	89a3      	ldrh	r3, [r4, #12]
 802f4e2:	f023 0303 	bic.w	r3, r3, #3
 802f4e6:	f043 0301 	orr.w	r3, r3, #1
 802f4ea:	81a3      	strh	r3, [r4, #12]
 802f4ec:	89a0      	ldrh	r0, [r4, #12]
 802f4ee:	4305      	orrs	r5, r0
 802f4f0:	81a5      	strh	r5, [r4, #12]
 802f4f2:	e7cd      	b.n	802f490 <__smakebuf_r+0x18>
 802f4f4:	0802f285 	.word	0x0802f285

0802f4f8 <__malloc_lock>:
 802f4f8:	4801      	ldr	r0, [pc, #4]	; (802f500 <__malloc_lock+0x8>)
 802f4fa:	f7ff bf95 	b.w	802f428 <__retarget_lock_acquire_recursive>
 802f4fe:	bf00      	nop
 802f500:	24001e64 	.word	0x24001e64

0802f504 <__malloc_unlock>:
 802f504:	4801      	ldr	r0, [pc, #4]	; (802f50c <__malloc_unlock+0x8>)
 802f506:	f7ff bf90 	b.w	802f42a <__retarget_lock_release_recursive>
 802f50a:	bf00      	nop
 802f50c:	24001e64 	.word	0x24001e64

0802f510 <__ssputs_r>:
 802f510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802f514:	688e      	ldr	r6, [r1, #8]
 802f516:	429e      	cmp	r6, r3
 802f518:	4682      	mov	sl, r0
 802f51a:	460c      	mov	r4, r1
 802f51c:	4690      	mov	r8, r2
 802f51e:	461f      	mov	r7, r3
 802f520:	d838      	bhi.n	802f594 <__ssputs_r+0x84>
 802f522:	898a      	ldrh	r2, [r1, #12]
 802f524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802f528:	d032      	beq.n	802f590 <__ssputs_r+0x80>
 802f52a:	6825      	ldr	r5, [r4, #0]
 802f52c:	6909      	ldr	r1, [r1, #16]
 802f52e:	eba5 0901 	sub.w	r9, r5, r1
 802f532:	6965      	ldr	r5, [r4, #20]
 802f534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802f538:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802f53c:	3301      	adds	r3, #1
 802f53e:	444b      	add	r3, r9
 802f540:	106d      	asrs	r5, r5, #1
 802f542:	429d      	cmp	r5, r3
 802f544:	bf38      	it	cc
 802f546:	461d      	movcc	r5, r3
 802f548:	0553      	lsls	r3, r2, #21
 802f54a:	d531      	bpl.n	802f5b0 <__ssputs_r+0xa0>
 802f54c:	4629      	mov	r1, r5
 802f54e:	f7ff fc37 	bl	802edc0 <_malloc_r>
 802f552:	4606      	mov	r6, r0
 802f554:	b950      	cbnz	r0, 802f56c <__ssputs_r+0x5c>
 802f556:	230c      	movs	r3, #12
 802f558:	f8ca 3000 	str.w	r3, [sl]
 802f55c:	89a3      	ldrh	r3, [r4, #12]
 802f55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f562:	81a3      	strh	r3, [r4, #12]
 802f564:	f04f 30ff 	mov.w	r0, #4294967295
 802f568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f56c:	6921      	ldr	r1, [r4, #16]
 802f56e:	464a      	mov	r2, r9
 802f570:	f7ff fba4 	bl	802ecbc <memcpy>
 802f574:	89a3      	ldrh	r3, [r4, #12]
 802f576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802f57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802f57e:	81a3      	strh	r3, [r4, #12]
 802f580:	6126      	str	r6, [r4, #16]
 802f582:	6165      	str	r5, [r4, #20]
 802f584:	444e      	add	r6, r9
 802f586:	eba5 0509 	sub.w	r5, r5, r9
 802f58a:	6026      	str	r6, [r4, #0]
 802f58c:	60a5      	str	r5, [r4, #8]
 802f58e:	463e      	mov	r6, r7
 802f590:	42be      	cmp	r6, r7
 802f592:	d900      	bls.n	802f596 <__ssputs_r+0x86>
 802f594:	463e      	mov	r6, r7
 802f596:	6820      	ldr	r0, [r4, #0]
 802f598:	4632      	mov	r2, r6
 802f59a:	4641      	mov	r1, r8
 802f59c:	f000 fc9c 	bl	802fed8 <memmove>
 802f5a0:	68a3      	ldr	r3, [r4, #8]
 802f5a2:	1b9b      	subs	r3, r3, r6
 802f5a4:	60a3      	str	r3, [r4, #8]
 802f5a6:	6823      	ldr	r3, [r4, #0]
 802f5a8:	4433      	add	r3, r6
 802f5aa:	6023      	str	r3, [r4, #0]
 802f5ac:	2000      	movs	r0, #0
 802f5ae:	e7db      	b.n	802f568 <__ssputs_r+0x58>
 802f5b0:	462a      	mov	r2, r5
 802f5b2:	f000 fcab 	bl	802ff0c <_realloc_r>
 802f5b6:	4606      	mov	r6, r0
 802f5b8:	2800      	cmp	r0, #0
 802f5ba:	d1e1      	bne.n	802f580 <__ssputs_r+0x70>
 802f5bc:	6921      	ldr	r1, [r4, #16]
 802f5be:	4650      	mov	r0, sl
 802f5c0:	f7ff fb92 	bl	802ece8 <_free_r>
 802f5c4:	e7c7      	b.n	802f556 <__ssputs_r+0x46>
	...

0802f5c8 <_svfiprintf_r>:
 802f5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f5cc:	4698      	mov	r8, r3
 802f5ce:	898b      	ldrh	r3, [r1, #12]
 802f5d0:	061b      	lsls	r3, r3, #24
 802f5d2:	b09d      	sub	sp, #116	; 0x74
 802f5d4:	4607      	mov	r7, r0
 802f5d6:	460d      	mov	r5, r1
 802f5d8:	4614      	mov	r4, r2
 802f5da:	d50e      	bpl.n	802f5fa <_svfiprintf_r+0x32>
 802f5dc:	690b      	ldr	r3, [r1, #16]
 802f5de:	b963      	cbnz	r3, 802f5fa <_svfiprintf_r+0x32>
 802f5e0:	2140      	movs	r1, #64	; 0x40
 802f5e2:	f7ff fbed 	bl	802edc0 <_malloc_r>
 802f5e6:	6028      	str	r0, [r5, #0]
 802f5e8:	6128      	str	r0, [r5, #16]
 802f5ea:	b920      	cbnz	r0, 802f5f6 <_svfiprintf_r+0x2e>
 802f5ec:	230c      	movs	r3, #12
 802f5ee:	603b      	str	r3, [r7, #0]
 802f5f0:	f04f 30ff 	mov.w	r0, #4294967295
 802f5f4:	e0d1      	b.n	802f79a <_svfiprintf_r+0x1d2>
 802f5f6:	2340      	movs	r3, #64	; 0x40
 802f5f8:	616b      	str	r3, [r5, #20]
 802f5fa:	2300      	movs	r3, #0
 802f5fc:	9309      	str	r3, [sp, #36]	; 0x24
 802f5fe:	2320      	movs	r3, #32
 802f600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802f604:	f8cd 800c 	str.w	r8, [sp, #12]
 802f608:	2330      	movs	r3, #48	; 0x30
 802f60a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802f7b4 <_svfiprintf_r+0x1ec>
 802f60e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802f612:	f04f 0901 	mov.w	r9, #1
 802f616:	4623      	mov	r3, r4
 802f618:	469a      	mov	sl, r3
 802f61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f61e:	b10a      	cbz	r2, 802f624 <_svfiprintf_r+0x5c>
 802f620:	2a25      	cmp	r2, #37	; 0x25
 802f622:	d1f9      	bne.n	802f618 <_svfiprintf_r+0x50>
 802f624:	ebba 0b04 	subs.w	fp, sl, r4
 802f628:	d00b      	beq.n	802f642 <_svfiprintf_r+0x7a>
 802f62a:	465b      	mov	r3, fp
 802f62c:	4622      	mov	r2, r4
 802f62e:	4629      	mov	r1, r5
 802f630:	4638      	mov	r0, r7
 802f632:	f7ff ff6d 	bl	802f510 <__ssputs_r>
 802f636:	3001      	adds	r0, #1
 802f638:	f000 80aa 	beq.w	802f790 <_svfiprintf_r+0x1c8>
 802f63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802f63e:	445a      	add	r2, fp
 802f640:	9209      	str	r2, [sp, #36]	; 0x24
 802f642:	f89a 3000 	ldrb.w	r3, [sl]
 802f646:	2b00      	cmp	r3, #0
 802f648:	f000 80a2 	beq.w	802f790 <_svfiprintf_r+0x1c8>
 802f64c:	2300      	movs	r3, #0
 802f64e:	f04f 32ff 	mov.w	r2, #4294967295
 802f652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802f656:	f10a 0a01 	add.w	sl, sl, #1
 802f65a:	9304      	str	r3, [sp, #16]
 802f65c:	9307      	str	r3, [sp, #28]
 802f65e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802f662:	931a      	str	r3, [sp, #104]	; 0x68
 802f664:	4654      	mov	r4, sl
 802f666:	2205      	movs	r2, #5
 802f668:	f814 1b01 	ldrb.w	r1, [r4], #1
 802f66c:	4851      	ldr	r0, [pc, #324]	; (802f7b4 <_svfiprintf_r+0x1ec>)
 802f66e:	f7f0 fe37 	bl	80202e0 <memchr>
 802f672:	9a04      	ldr	r2, [sp, #16]
 802f674:	b9d8      	cbnz	r0, 802f6ae <_svfiprintf_r+0xe6>
 802f676:	06d0      	lsls	r0, r2, #27
 802f678:	bf44      	itt	mi
 802f67a:	2320      	movmi	r3, #32
 802f67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802f680:	0711      	lsls	r1, r2, #28
 802f682:	bf44      	itt	mi
 802f684:	232b      	movmi	r3, #43	; 0x2b
 802f686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802f68a:	f89a 3000 	ldrb.w	r3, [sl]
 802f68e:	2b2a      	cmp	r3, #42	; 0x2a
 802f690:	d015      	beq.n	802f6be <_svfiprintf_r+0xf6>
 802f692:	9a07      	ldr	r2, [sp, #28]
 802f694:	4654      	mov	r4, sl
 802f696:	2000      	movs	r0, #0
 802f698:	f04f 0c0a 	mov.w	ip, #10
 802f69c:	4621      	mov	r1, r4
 802f69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 802f6a2:	3b30      	subs	r3, #48	; 0x30
 802f6a4:	2b09      	cmp	r3, #9
 802f6a6:	d94e      	bls.n	802f746 <_svfiprintf_r+0x17e>
 802f6a8:	b1b0      	cbz	r0, 802f6d8 <_svfiprintf_r+0x110>
 802f6aa:	9207      	str	r2, [sp, #28]
 802f6ac:	e014      	b.n	802f6d8 <_svfiprintf_r+0x110>
 802f6ae:	eba0 0308 	sub.w	r3, r0, r8
 802f6b2:	fa09 f303 	lsl.w	r3, r9, r3
 802f6b6:	4313      	orrs	r3, r2
 802f6b8:	9304      	str	r3, [sp, #16]
 802f6ba:	46a2      	mov	sl, r4
 802f6bc:	e7d2      	b.n	802f664 <_svfiprintf_r+0x9c>
 802f6be:	9b03      	ldr	r3, [sp, #12]
 802f6c0:	1d19      	adds	r1, r3, #4
 802f6c2:	681b      	ldr	r3, [r3, #0]
 802f6c4:	9103      	str	r1, [sp, #12]
 802f6c6:	2b00      	cmp	r3, #0
 802f6c8:	bfbb      	ittet	lt
 802f6ca:	425b      	neglt	r3, r3
 802f6cc:	f042 0202 	orrlt.w	r2, r2, #2
 802f6d0:	9307      	strge	r3, [sp, #28]
 802f6d2:	9307      	strlt	r3, [sp, #28]
 802f6d4:	bfb8      	it	lt
 802f6d6:	9204      	strlt	r2, [sp, #16]
 802f6d8:	7823      	ldrb	r3, [r4, #0]
 802f6da:	2b2e      	cmp	r3, #46	; 0x2e
 802f6dc:	d10c      	bne.n	802f6f8 <_svfiprintf_r+0x130>
 802f6de:	7863      	ldrb	r3, [r4, #1]
 802f6e0:	2b2a      	cmp	r3, #42	; 0x2a
 802f6e2:	d135      	bne.n	802f750 <_svfiprintf_r+0x188>
 802f6e4:	9b03      	ldr	r3, [sp, #12]
 802f6e6:	1d1a      	adds	r2, r3, #4
 802f6e8:	681b      	ldr	r3, [r3, #0]
 802f6ea:	9203      	str	r2, [sp, #12]
 802f6ec:	2b00      	cmp	r3, #0
 802f6ee:	bfb8      	it	lt
 802f6f0:	f04f 33ff 	movlt.w	r3, #4294967295
 802f6f4:	3402      	adds	r4, #2
 802f6f6:	9305      	str	r3, [sp, #20]
 802f6f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802f7c4 <_svfiprintf_r+0x1fc>
 802f6fc:	7821      	ldrb	r1, [r4, #0]
 802f6fe:	2203      	movs	r2, #3
 802f700:	4650      	mov	r0, sl
 802f702:	f7f0 fded 	bl	80202e0 <memchr>
 802f706:	b140      	cbz	r0, 802f71a <_svfiprintf_r+0x152>
 802f708:	2340      	movs	r3, #64	; 0x40
 802f70a:	eba0 000a 	sub.w	r0, r0, sl
 802f70e:	fa03 f000 	lsl.w	r0, r3, r0
 802f712:	9b04      	ldr	r3, [sp, #16]
 802f714:	4303      	orrs	r3, r0
 802f716:	3401      	adds	r4, #1
 802f718:	9304      	str	r3, [sp, #16]
 802f71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802f71e:	4826      	ldr	r0, [pc, #152]	; (802f7b8 <_svfiprintf_r+0x1f0>)
 802f720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802f724:	2206      	movs	r2, #6
 802f726:	f7f0 fddb 	bl	80202e0 <memchr>
 802f72a:	2800      	cmp	r0, #0
 802f72c:	d038      	beq.n	802f7a0 <_svfiprintf_r+0x1d8>
 802f72e:	4b23      	ldr	r3, [pc, #140]	; (802f7bc <_svfiprintf_r+0x1f4>)
 802f730:	bb1b      	cbnz	r3, 802f77a <_svfiprintf_r+0x1b2>
 802f732:	9b03      	ldr	r3, [sp, #12]
 802f734:	3307      	adds	r3, #7
 802f736:	f023 0307 	bic.w	r3, r3, #7
 802f73a:	3308      	adds	r3, #8
 802f73c:	9303      	str	r3, [sp, #12]
 802f73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f740:	4433      	add	r3, r6
 802f742:	9309      	str	r3, [sp, #36]	; 0x24
 802f744:	e767      	b.n	802f616 <_svfiprintf_r+0x4e>
 802f746:	fb0c 3202 	mla	r2, ip, r2, r3
 802f74a:	460c      	mov	r4, r1
 802f74c:	2001      	movs	r0, #1
 802f74e:	e7a5      	b.n	802f69c <_svfiprintf_r+0xd4>
 802f750:	2300      	movs	r3, #0
 802f752:	3401      	adds	r4, #1
 802f754:	9305      	str	r3, [sp, #20]
 802f756:	4619      	mov	r1, r3
 802f758:	f04f 0c0a 	mov.w	ip, #10
 802f75c:	4620      	mov	r0, r4
 802f75e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802f762:	3a30      	subs	r2, #48	; 0x30
 802f764:	2a09      	cmp	r2, #9
 802f766:	d903      	bls.n	802f770 <_svfiprintf_r+0x1a8>
 802f768:	2b00      	cmp	r3, #0
 802f76a:	d0c5      	beq.n	802f6f8 <_svfiprintf_r+0x130>
 802f76c:	9105      	str	r1, [sp, #20]
 802f76e:	e7c3      	b.n	802f6f8 <_svfiprintf_r+0x130>
 802f770:	fb0c 2101 	mla	r1, ip, r1, r2
 802f774:	4604      	mov	r4, r0
 802f776:	2301      	movs	r3, #1
 802f778:	e7f0      	b.n	802f75c <_svfiprintf_r+0x194>
 802f77a:	ab03      	add	r3, sp, #12
 802f77c:	9300      	str	r3, [sp, #0]
 802f77e:	462a      	mov	r2, r5
 802f780:	4b0f      	ldr	r3, [pc, #60]	; (802f7c0 <_svfiprintf_r+0x1f8>)
 802f782:	a904      	add	r1, sp, #16
 802f784:	4638      	mov	r0, r7
 802f786:	f3af 8000 	nop.w
 802f78a:	1c42      	adds	r2, r0, #1
 802f78c:	4606      	mov	r6, r0
 802f78e:	d1d6      	bne.n	802f73e <_svfiprintf_r+0x176>
 802f790:	89ab      	ldrh	r3, [r5, #12]
 802f792:	065b      	lsls	r3, r3, #25
 802f794:	f53f af2c 	bmi.w	802f5f0 <_svfiprintf_r+0x28>
 802f798:	9809      	ldr	r0, [sp, #36]	; 0x24
 802f79a:	b01d      	add	sp, #116	; 0x74
 802f79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f7a0:	ab03      	add	r3, sp, #12
 802f7a2:	9300      	str	r3, [sp, #0]
 802f7a4:	462a      	mov	r2, r5
 802f7a6:	4b06      	ldr	r3, [pc, #24]	; (802f7c0 <_svfiprintf_r+0x1f8>)
 802f7a8:	a904      	add	r1, sp, #16
 802f7aa:	4638      	mov	r0, r7
 802f7ac:	f000 f9d4 	bl	802fb58 <_printf_i>
 802f7b0:	e7eb      	b.n	802f78a <_svfiprintf_r+0x1c2>
 802f7b2:	bf00      	nop
 802f7b4:	08030db4 	.word	0x08030db4
 802f7b8:	08030dbe 	.word	0x08030dbe
 802f7bc:	00000000 	.word	0x00000000
 802f7c0:	0802f511 	.word	0x0802f511
 802f7c4:	08030dba 	.word	0x08030dba

0802f7c8 <__sfputc_r>:
 802f7c8:	6893      	ldr	r3, [r2, #8]
 802f7ca:	3b01      	subs	r3, #1
 802f7cc:	2b00      	cmp	r3, #0
 802f7ce:	b410      	push	{r4}
 802f7d0:	6093      	str	r3, [r2, #8]
 802f7d2:	da08      	bge.n	802f7e6 <__sfputc_r+0x1e>
 802f7d4:	6994      	ldr	r4, [r2, #24]
 802f7d6:	42a3      	cmp	r3, r4
 802f7d8:	db01      	blt.n	802f7de <__sfputc_r+0x16>
 802f7da:	290a      	cmp	r1, #10
 802f7dc:	d103      	bne.n	802f7e6 <__sfputc_r+0x1e>
 802f7de:	f85d 4b04 	ldr.w	r4, [sp], #4
 802f7e2:	f7ff bba9 	b.w	802ef38 <__swbuf_r>
 802f7e6:	6813      	ldr	r3, [r2, #0]
 802f7e8:	1c58      	adds	r0, r3, #1
 802f7ea:	6010      	str	r0, [r2, #0]
 802f7ec:	7019      	strb	r1, [r3, #0]
 802f7ee:	4608      	mov	r0, r1
 802f7f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 802f7f4:	4770      	bx	lr

0802f7f6 <__sfputs_r>:
 802f7f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f7f8:	4606      	mov	r6, r0
 802f7fa:	460f      	mov	r7, r1
 802f7fc:	4614      	mov	r4, r2
 802f7fe:	18d5      	adds	r5, r2, r3
 802f800:	42ac      	cmp	r4, r5
 802f802:	d101      	bne.n	802f808 <__sfputs_r+0x12>
 802f804:	2000      	movs	r0, #0
 802f806:	e007      	b.n	802f818 <__sfputs_r+0x22>
 802f808:	f814 1b01 	ldrb.w	r1, [r4], #1
 802f80c:	463a      	mov	r2, r7
 802f80e:	4630      	mov	r0, r6
 802f810:	f7ff ffda 	bl	802f7c8 <__sfputc_r>
 802f814:	1c43      	adds	r3, r0, #1
 802f816:	d1f3      	bne.n	802f800 <__sfputs_r+0xa>
 802f818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802f81c <_vfiprintf_r>:
 802f81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f820:	460d      	mov	r5, r1
 802f822:	b09d      	sub	sp, #116	; 0x74
 802f824:	4614      	mov	r4, r2
 802f826:	4698      	mov	r8, r3
 802f828:	4606      	mov	r6, r0
 802f82a:	b118      	cbz	r0, 802f834 <_vfiprintf_r+0x18>
 802f82c:	6983      	ldr	r3, [r0, #24]
 802f82e:	b90b      	cbnz	r3, 802f834 <_vfiprintf_r+0x18>
 802f830:	f7ff fd5c 	bl	802f2ec <__sinit>
 802f834:	4b89      	ldr	r3, [pc, #548]	; (802fa5c <_vfiprintf_r+0x240>)
 802f836:	429d      	cmp	r5, r3
 802f838:	d11b      	bne.n	802f872 <_vfiprintf_r+0x56>
 802f83a:	6875      	ldr	r5, [r6, #4]
 802f83c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802f83e:	07d9      	lsls	r1, r3, #31
 802f840:	d405      	bmi.n	802f84e <_vfiprintf_r+0x32>
 802f842:	89ab      	ldrh	r3, [r5, #12]
 802f844:	059a      	lsls	r2, r3, #22
 802f846:	d402      	bmi.n	802f84e <_vfiprintf_r+0x32>
 802f848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802f84a:	f7ff fded 	bl	802f428 <__retarget_lock_acquire_recursive>
 802f84e:	89ab      	ldrh	r3, [r5, #12]
 802f850:	071b      	lsls	r3, r3, #28
 802f852:	d501      	bpl.n	802f858 <_vfiprintf_r+0x3c>
 802f854:	692b      	ldr	r3, [r5, #16]
 802f856:	b9eb      	cbnz	r3, 802f894 <_vfiprintf_r+0x78>
 802f858:	4629      	mov	r1, r5
 802f85a:	4630      	mov	r0, r6
 802f85c:	f7ff fbbe 	bl	802efdc <__swsetup_r>
 802f860:	b1c0      	cbz	r0, 802f894 <_vfiprintf_r+0x78>
 802f862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802f864:	07dc      	lsls	r4, r3, #31
 802f866:	d50e      	bpl.n	802f886 <_vfiprintf_r+0x6a>
 802f868:	f04f 30ff 	mov.w	r0, #4294967295
 802f86c:	b01d      	add	sp, #116	; 0x74
 802f86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f872:	4b7b      	ldr	r3, [pc, #492]	; (802fa60 <_vfiprintf_r+0x244>)
 802f874:	429d      	cmp	r5, r3
 802f876:	d101      	bne.n	802f87c <_vfiprintf_r+0x60>
 802f878:	68b5      	ldr	r5, [r6, #8]
 802f87a:	e7df      	b.n	802f83c <_vfiprintf_r+0x20>
 802f87c:	4b79      	ldr	r3, [pc, #484]	; (802fa64 <_vfiprintf_r+0x248>)
 802f87e:	429d      	cmp	r5, r3
 802f880:	bf08      	it	eq
 802f882:	68f5      	ldreq	r5, [r6, #12]
 802f884:	e7da      	b.n	802f83c <_vfiprintf_r+0x20>
 802f886:	89ab      	ldrh	r3, [r5, #12]
 802f888:	0598      	lsls	r0, r3, #22
 802f88a:	d4ed      	bmi.n	802f868 <_vfiprintf_r+0x4c>
 802f88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802f88e:	f7ff fdcc 	bl	802f42a <__retarget_lock_release_recursive>
 802f892:	e7e9      	b.n	802f868 <_vfiprintf_r+0x4c>
 802f894:	2300      	movs	r3, #0
 802f896:	9309      	str	r3, [sp, #36]	; 0x24
 802f898:	2320      	movs	r3, #32
 802f89a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802f89e:	f8cd 800c 	str.w	r8, [sp, #12]
 802f8a2:	2330      	movs	r3, #48	; 0x30
 802f8a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802fa68 <_vfiprintf_r+0x24c>
 802f8a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802f8ac:	f04f 0901 	mov.w	r9, #1
 802f8b0:	4623      	mov	r3, r4
 802f8b2:	469a      	mov	sl, r3
 802f8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802f8b8:	b10a      	cbz	r2, 802f8be <_vfiprintf_r+0xa2>
 802f8ba:	2a25      	cmp	r2, #37	; 0x25
 802f8bc:	d1f9      	bne.n	802f8b2 <_vfiprintf_r+0x96>
 802f8be:	ebba 0b04 	subs.w	fp, sl, r4
 802f8c2:	d00b      	beq.n	802f8dc <_vfiprintf_r+0xc0>
 802f8c4:	465b      	mov	r3, fp
 802f8c6:	4622      	mov	r2, r4
 802f8c8:	4629      	mov	r1, r5
 802f8ca:	4630      	mov	r0, r6
 802f8cc:	f7ff ff93 	bl	802f7f6 <__sfputs_r>
 802f8d0:	3001      	adds	r0, #1
 802f8d2:	f000 80aa 	beq.w	802fa2a <_vfiprintf_r+0x20e>
 802f8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802f8d8:	445a      	add	r2, fp
 802f8da:	9209      	str	r2, [sp, #36]	; 0x24
 802f8dc:	f89a 3000 	ldrb.w	r3, [sl]
 802f8e0:	2b00      	cmp	r3, #0
 802f8e2:	f000 80a2 	beq.w	802fa2a <_vfiprintf_r+0x20e>
 802f8e6:	2300      	movs	r3, #0
 802f8e8:	f04f 32ff 	mov.w	r2, #4294967295
 802f8ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802f8f0:	f10a 0a01 	add.w	sl, sl, #1
 802f8f4:	9304      	str	r3, [sp, #16]
 802f8f6:	9307      	str	r3, [sp, #28]
 802f8f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802f8fc:	931a      	str	r3, [sp, #104]	; 0x68
 802f8fe:	4654      	mov	r4, sl
 802f900:	2205      	movs	r2, #5
 802f902:	f814 1b01 	ldrb.w	r1, [r4], #1
 802f906:	4858      	ldr	r0, [pc, #352]	; (802fa68 <_vfiprintf_r+0x24c>)
 802f908:	f7f0 fcea 	bl	80202e0 <memchr>
 802f90c:	9a04      	ldr	r2, [sp, #16]
 802f90e:	b9d8      	cbnz	r0, 802f948 <_vfiprintf_r+0x12c>
 802f910:	06d1      	lsls	r1, r2, #27
 802f912:	bf44      	itt	mi
 802f914:	2320      	movmi	r3, #32
 802f916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802f91a:	0713      	lsls	r3, r2, #28
 802f91c:	bf44      	itt	mi
 802f91e:	232b      	movmi	r3, #43	; 0x2b
 802f920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802f924:	f89a 3000 	ldrb.w	r3, [sl]
 802f928:	2b2a      	cmp	r3, #42	; 0x2a
 802f92a:	d015      	beq.n	802f958 <_vfiprintf_r+0x13c>
 802f92c:	9a07      	ldr	r2, [sp, #28]
 802f92e:	4654      	mov	r4, sl
 802f930:	2000      	movs	r0, #0
 802f932:	f04f 0c0a 	mov.w	ip, #10
 802f936:	4621      	mov	r1, r4
 802f938:	f811 3b01 	ldrb.w	r3, [r1], #1
 802f93c:	3b30      	subs	r3, #48	; 0x30
 802f93e:	2b09      	cmp	r3, #9
 802f940:	d94e      	bls.n	802f9e0 <_vfiprintf_r+0x1c4>
 802f942:	b1b0      	cbz	r0, 802f972 <_vfiprintf_r+0x156>
 802f944:	9207      	str	r2, [sp, #28]
 802f946:	e014      	b.n	802f972 <_vfiprintf_r+0x156>
 802f948:	eba0 0308 	sub.w	r3, r0, r8
 802f94c:	fa09 f303 	lsl.w	r3, r9, r3
 802f950:	4313      	orrs	r3, r2
 802f952:	9304      	str	r3, [sp, #16]
 802f954:	46a2      	mov	sl, r4
 802f956:	e7d2      	b.n	802f8fe <_vfiprintf_r+0xe2>
 802f958:	9b03      	ldr	r3, [sp, #12]
 802f95a:	1d19      	adds	r1, r3, #4
 802f95c:	681b      	ldr	r3, [r3, #0]
 802f95e:	9103      	str	r1, [sp, #12]
 802f960:	2b00      	cmp	r3, #0
 802f962:	bfbb      	ittet	lt
 802f964:	425b      	neglt	r3, r3
 802f966:	f042 0202 	orrlt.w	r2, r2, #2
 802f96a:	9307      	strge	r3, [sp, #28]
 802f96c:	9307      	strlt	r3, [sp, #28]
 802f96e:	bfb8      	it	lt
 802f970:	9204      	strlt	r2, [sp, #16]
 802f972:	7823      	ldrb	r3, [r4, #0]
 802f974:	2b2e      	cmp	r3, #46	; 0x2e
 802f976:	d10c      	bne.n	802f992 <_vfiprintf_r+0x176>
 802f978:	7863      	ldrb	r3, [r4, #1]
 802f97a:	2b2a      	cmp	r3, #42	; 0x2a
 802f97c:	d135      	bne.n	802f9ea <_vfiprintf_r+0x1ce>
 802f97e:	9b03      	ldr	r3, [sp, #12]
 802f980:	1d1a      	adds	r2, r3, #4
 802f982:	681b      	ldr	r3, [r3, #0]
 802f984:	9203      	str	r2, [sp, #12]
 802f986:	2b00      	cmp	r3, #0
 802f988:	bfb8      	it	lt
 802f98a:	f04f 33ff 	movlt.w	r3, #4294967295
 802f98e:	3402      	adds	r4, #2
 802f990:	9305      	str	r3, [sp, #20]
 802f992:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802fa78 <_vfiprintf_r+0x25c>
 802f996:	7821      	ldrb	r1, [r4, #0]
 802f998:	2203      	movs	r2, #3
 802f99a:	4650      	mov	r0, sl
 802f99c:	f7f0 fca0 	bl	80202e0 <memchr>
 802f9a0:	b140      	cbz	r0, 802f9b4 <_vfiprintf_r+0x198>
 802f9a2:	2340      	movs	r3, #64	; 0x40
 802f9a4:	eba0 000a 	sub.w	r0, r0, sl
 802f9a8:	fa03 f000 	lsl.w	r0, r3, r0
 802f9ac:	9b04      	ldr	r3, [sp, #16]
 802f9ae:	4303      	orrs	r3, r0
 802f9b0:	3401      	adds	r4, #1
 802f9b2:	9304      	str	r3, [sp, #16]
 802f9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802f9b8:	482c      	ldr	r0, [pc, #176]	; (802fa6c <_vfiprintf_r+0x250>)
 802f9ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802f9be:	2206      	movs	r2, #6
 802f9c0:	f7f0 fc8e 	bl	80202e0 <memchr>
 802f9c4:	2800      	cmp	r0, #0
 802f9c6:	d03f      	beq.n	802fa48 <_vfiprintf_r+0x22c>
 802f9c8:	4b29      	ldr	r3, [pc, #164]	; (802fa70 <_vfiprintf_r+0x254>)
 802f9ca:	bb1b      	cbnz	r3, 802fa14 <_vfiprintf_r+0x1f8>
 802f9cc:	9b03      	ldr	r3, [sp, #12]
 802f9ce:	3307      	adds	r3, #7
 802f9d0:	f023 0307 	bic.w	r3, r3, #7
 802f9d4:	3308      	adds	r3, #8
 802f9d6:	9303      	str	r3, [sp, #12]
 802f9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f9da:	443b      	add	r3, r7
 802f9dc:	9309      	str	r3, [sp, #36]	; 0x24
 802f9de:	e767      	b.n	802f8b0 <_vfiprintf_r+0x94>
 802f9e0:	fb0c 3202 	mla	r2, ip, r2, r3
 802f9e4:	460c      	mov	r4, r1
 802f9e6:	2001      	movs	r0, #1
 802f9e8:	e7a5      	b.n	802f936 <_vfiprintf_r+0x11a>
 802f9ea:	2300      	movs	r3, #0
 802f9ec:	3401      	adds	r4, #1
 802f9ee:	9305      	str	r3, [sp, #20]
 802f9f0:	4619      	mov	r1, r3
 802f9f2:	f04f 0c0a 	mov.w	ip, #10
 802f9f6:	4620      	mov	r0, r4
 802f9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 802f9fc:	3a30      	subs	r2, #48	; 0x30
 802f9fe:	2a09      	cmp	r2, #9
 802fa00:	d903      	bls.n	802fa0a <_vfiprintf_r+0x1ee>
 802fa02:	2b00      	cmp	r3, #0
 802fa04:	d0c5      	beq.n	802f992 <_vfiprintf_r+0x176>
 802fa06:	9105      	str	r1, [sp, #20]
 802fa08:	e7c3      	b.n	802f992 <_vfiprintf_r+0x176>
 802fa0a:	fb0c 2101 	mla	r1, ip, r1, r2
 802fa0e:	4604      	mov	r4, r0
 802fa10:	2301      	movs	r3, #1
 802fa12:	e7f0      	b.n	802f9f6 <_vfiprintf_r+0x1da>
 802fa14:	ab03      	add	r3, sp, #12
 802fa16:	9300      	str	r3, [sp, #0]
 802fa18:	462a      	mov	r2, r5
 802fa1a:	4b16      	ldr	r3, [pc, #88]	; (802fa74 <_vfiprintf_r+0x258>)
 802fa1c:	a904      	add	r1, sp, #16
 802fa1e:	4630      	mov	r0, r6
 802fa20:	f3af 8000 	nop.w
 802fa24:	4607      	mov	r7, r0
 802fa26:	1c78      	adds	r0, r7, #1
 802fa28:	d1d6      	bne.n	802f9d8 <_vfiprintf_r+0x1bc>
 802fa2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802fa2c:	07d9      	lsls	r1, r3, #31
 802fa2e:	d405      	bmi.n	802fa3c <_vfiprintf_r+0x220>
 802fa30:	89ab      	ldrh	r3, [r5, #12]
 802fa32:	059a      	lsls	r2, r3, #22
 802fa34:	d402      	bmi.n	802fa3c <_vfiprintf_r+0x220>
 802fa36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802fa38:	f7ff fcf7 	bl	802f42a <__retarget_lock_release_recursive>
 802fa3c:	89ab      	ldrh	r3, [r5, #12]
 802fa3e:	065b      	lsls	r3, r3, #25
 802fa40:	f53f af12 	bmi.w	802f868 <_vfiprintf_r+0x4c>
 802fa44:	9809      	ldr	r0, [sp, #36]	; 0x24
 802fa46:	e711      	b.n	802f86c <_vfiprintf_r+0x50>
 802fa48:	ab03      	add	r3, sp, #12
 802fa4a:	9300      	str	r3, [sp, #0]
 802fa4c:	462a      	mov	r2, r5
 802fa4e:	4b09      	ldr	r3, [pc, #36]	; (802fa74 <_vfiprintf_r+0x258>)
 802fa50:	a904      	add	r1, sp, #16
 802fa52:	4630      	mov	r0, r6
 802fa54:	f000 f880 	bl	802fb58 <_printf_i>
 802fa58:	e7e4      	b.n	802fa24 <_vfiprintf_r+0x208>
 802fa5a:	bf00      	nop
 802fa5c:	08030d74 	.word	0x08030d74
 802fa60:	08030d94 	.word	0x08030d94
 802fa64:	08030d54 	.word	0x08030d54
 802fa68:	08030db4 	.word	0x08030db4
 802fa6c:	08030dbe 	.word	0x08030dbe
 802fa70:	00000000 	.word	0x00000000
 802fa74:	0802f7f7 	.word	0x0802f7f7
 802fa78:	08030dba 	.word	0x08030dba

0802fa7c <_printf_common>:
 802fa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fa80:	4616      	mov	r6, r2
 802fa82:	4699      	mov	r9, r3
 802fa84:	688a      	ldr	r2, [r1, #8]
 802fa86:	690b      	ldr	r3, [r1, #16]
 802fa88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802fa8c:	4293      	cmp	r3, r2
 802fa8e:	bfb8      	it	lt
 802fa90:	4613      	movlt	r3, r2
 802fa92:	6033      	str	r3, [r6, #0]
 802fa94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802fa98:	4607      	mov	r7, r0
 802fa9a:	460c      	mov	r4, r1
 802fa9c:	b10a      	cbz	r2, 802faa2 <_printf_common+0x26>
 802fa9e:	3301      	adds	r3, #1
 802faa0:	6033      	str	r3, [r6, #0]
 802faa2:	6823      	ldr	r3, [r4, #0]
 802faa4:	0699      	lsls	r1, r3, #26
 802faa6:	bf42      	ittt	mi
 802faa8:	6833      	ldrmi	r3, [r6, #0]
 802faaa:	3302      	addmi	r3, #2
 802faac:	6033      	strmi	r3, [r6, #0]
 802faae:	6825      	ldr	r5, [r4, #0]
 802fab0:	f015 0506 	ands.w	r5, r5, #6
 802fab4:	d106      	bne.n	802fac4 <_printf_common+0x48>
 802fab6:	f104 0a19 	add.w	sl, r4, #25
 802faba:	68e3      	ldr	r3, [r4, #12]
 802fabc:	6832      	ldr	r2, [r6, #0]
 802fabe:	1a9b      	subs	r3, r3, r2
 802fac0:	42ab      	cmp	r3, r5
 802fac2:	dc26      	bgt.n	802fb12 <_printf_common+0x96>
 802fac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802fac8:	1e13      	subs	r3, r2, #0
 802faca:	6822      	ldr	r2, [r4, #0]
 802facc:	bf18      	it	ne
 802face:	2301      	movne	r3, #1
 802fad0:	0692      	lsls	r2, r2, #26
 802fad2:	d42b      	bmi.n	802fb2c <_printf_common+0xb0>
 802fad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802fad8:	4649      	mov	r1, r9
 802fada:	4638      	mov	r0, r7
 802fadc:	47c0      	blx	r8
 802fade:	3001      	adds	r0, #1
 802fae0:	d01e      	beq.n	802fb20 <_printf_common+0xa4>
 802fae2:	6823      	ldr	r3, [r4, #0]
 802fae4:	68e5      	ldr	r5, [r4, #12]
 802fae6:	6832      	ldr	r2, [r6, #0]
 802fae8:	f003 0306 	and.w	r3, r3, #6
 802faec:	2b04      	cmp	r3, #4
 802faee:	bf08      	it	eq
 802faf0:	1aad      	subeq	r5, r5, r2
 802faf2:	68a3      	ldr	r3, [r4, #8]
 802faf4:	6922      	ldr	r2, [r4, #16]
 802faf6:	bf0c      	ite	eq
 802faf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802fafc:	2500      	movne	r5, #0
 802fafe:	4293      	cmp	r3, r2
 802fb00:	bfc4      	itt	gt
 802fb02:	1a9b      	subgt	r3, r3, r2
 802fb04:	18ed      	addgt	r5, r5, r3
 802fb06:	2600      	movs	r6, #0
 802fb08:	341a      	adds	r4, #26
 802fb0a:	42b5      	cmp	r5, r6
 802fb0c:	d11a      	bne.n	802fb44 <_printf_common+0xc8>
 802fb0e:	2000      	movs	r0, #0
 802fb10:	e008      	b.n	802fb24 <_printf_common+0xa8>
 802fb12:	2301      	movs	r3, #1
 802fb14:	4652      	mov	r2, sl
 802fb16:	4649      	mov	r1, r9
 802fb18:	4638      	mov	r0, r7
 802fb1a:	47c0      	blx	r8
 802fb1c:	3001      	adds	r0, #1
 802fb1e:	d103      	bne.n	802fb28 <_printf_common+0xac>
 802fb20:	f04f 30ff 	mov.w	r0, #4294967295
 802fb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802fb28:	3501      	adds	r5, #1
 802fb2a:	e7c6      	b.n	802faba <_printf_common+0x3e>
 802fb2c:	18e1      	adds	r1, r4, r3
 802fb2e:	1c5a      	adds	r2, r3, #1
 802fb30:	2030      	movs	r0, #48	; 0x30
 802fb32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802fb36:	4422      	add	r2, r4
 802fb38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802fb3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802fb40:	3302      	adds	r3, #2
 802fb42:	e7c7      	b.n	802fad4 <_printf_common+0x58>
 802fb44:	2301      	movs	r3, #1
 802fb46:	4622      	mov	r2, r4
 802fb48:	4649      	mov	r1, r9
 802fb4a:	4638      	mov	r0, r7
 802fb4c:	47c0      	blx	r8
 802fb4e:	3001      	adds	r0, #1
 802fb50:	d0e6      	beq.n	802fb20 <_printf_common+0xa4>
 802fb52:	3601      	adds	r6, #1
 802fb54:	e7d9      	b.n	802fb0a <_printf_common+0x8e>
	...

0802fb58 <_printf_i>:
 802fb58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802fb5c:	7e0f      	ldrb	r7, [r1, #24]
 802fb5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802fb60:	2f78      	cmp	r7, #120	; 0x78
 802fb62:	4691      	mov	r9, r2
 802fb64:	4680      	mov	r8, r0
 802fb66:	460c      	mov	r4, r1
 802fb68:	469a      	mov	sl, r3
 802fb6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802fb6e:	d807      	bhi.n	802fb80 <_printf_i+0x28>
 802fb70:	2f62      	cmp	r7, #98	; 0x62
 802fb72:	d80a      	bhi.n	802fb8a <_printf_i+0x32>
 802fb74:	2f00      	cmp	r7, #0
 802fb76:	f000 80d8 	beq.w	802fd2a <_printf_i+0x1d2>
 802fb7a:	2f58      	cmp	r7, #88	; 0x58
 802fb7c:	f000 80a3 	beq.w	802fcc6 <_printf_i+0x16e>
 802fb80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802fb84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802fb88:	e03a      	b.n	802fc00 <_printf_i+0xa8>
 802fb8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802fb8e:	2b15      	cmp	r3, #21
 802fb90:	d8f6      	bhi.n	802fb80 <_printf_i+0x28>
 802fb92:	a101      	add	r1, pc, #4	; (adr r1, 802fb98 <_printf_i+0x40>)
 802fb94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802fb98:	0802fbf1 	.word	0x0802fbf1
 802fb9c:	0802fc05 	.word	0x0802fc05
 802fba0:	0802fb81 	.word	0x0802fb81
 802fba4:	0802fb81 	.word	0x0802fb81
 802fba8:	0802fb81 	.word	0x0802fb81
 802fbac:	0802fb81 	.word	0x0802fb81
 802fbb0:	0802fc05 	.word	0x0802fc05
 802fbb4:	0802fb81 	.word	0x0802fb81
 802fbb8:	0802fb81 	.word	0x0802fb81
 802fbbc:	0802fb81 	.word	0x0802fb81
 802fbc0:	0802fb81 	.word	0x0802fb81
 802fbc4:	0802fd11 	.word	0x0802fd11
 802fbc8:	0802fc35 	.word	0x0802fc35
 802fbcc:	0802fcf3 	.word	0x0802fcf3
 802fbd0:	0802fb81 	.word	0x0802fb81
 802fbd4:	0802fb81 	.word	0x0802fb81
 802fbd8:	0802fd33 	.word	0x0802fd33
 802fbdc:	0802fb81 	.word	0x0802fb81
 802fbe0:	0802fc35 	.word	0x0802fc35
 802fbe4:	0802fb81 	.word	0x0802fb81
 802fbe8:	0802fb81 	.word	0x0802fb81
 802fbec:	0802fcfb 	.word	0x0802fcfb
 802fbf0:	682b      	ldr	r3, [r5, #0]
 802fbf2:	1d1a      	adds	r2, r3, #4
 802fbf4:	681b      	ldr	r3, [r3, #0]
 802fbf6:	602a      	str	r2, [r5, #0]
 802fbf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802fbfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802fc00:	2301      	movs	r3, #1
 802fc02:	e0a3      	b.n	802fd4c <_printf_i+0x1f4>
 802fc04:	6820      	ldr	r0, [r4, #0]
 802fc06:	6829      	ldr	r1, [r5, #0]
 802fc08:	0606      	lsls	r6, r0, #24
 802fc0a:	f101 0304 	add.w	r3, r1, #4
 802fc0e:	d50a      	bpl.n	802fc26 <_printf_i+0xce>
 802fc10:	680e      	ldr	r6, [r1, #0]
 802fc12:	602b      	str	r3, [r5, #0]
 802fc14:	2e00      	cmp	r6, #0
 802fc16:	da03      	bge.n	802fc20 <_printf_i+0xc8>
 802fc18:	232d      	movs	r3, #45	; 0x2d
 802fc1a:	4276      	negs	r6, r6
 802fc1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802fc20:	485e      	ldr	r0, [pc, #376]	; (802fd9c <_printf_i+0x244>)
 802fc22:	230a      	movs	r3, #10
 802fc24:	e019      	b.n	802fc5a <_printf_i+0x102>
 802fc26:	680e      	ldr	r6, [r1, #0]
 802fc28:	602b      	str	r3, [r5, #0]
 802fc2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802fc2e:	bf18      	it	ne
 802fc30:	b236      	sxthne	r6, r6
 802fc32:	e7ef      	b.n	802fc14 <_printf_i+0xbc>
 802fc34:	682b      	ldr	r3, [r5, #0]
 802fc36:	6820      	ldr	r0, [r4, #0]
 802fc38:	1d19      	adds	r1, r3, #4
 802fc3a:	6029      	str	r1, [r5, #0]
 802fc3c:	0601      	lsls	r1, r0, #24
 802fc3e:	d501      	bpl.n	802fc44 <_printf_i+0xec>
 802fc40:	681e      	ldr	r6, [r3, #0]
 802fc42:	e002      	b.n	802fc4a <_printf_i+0xf2>
 802fc44:	0646      	lsls	r6, r0, #25
 802fc46:	d5fb      	bpl.n	802fc40 <_printf_i+0xe8>
 802fc48:	881e      	ldrh	r6, [r3, #0]
 802fc4a:	4854      	ldr	r0, [pc, #336]	; (802fd9c <_printf_i+0x244>)
 802fc4c:	2f6f      	cmp	r7, #111	; 0x6f
 802fc4e:	bf0c      	ite	eq
 802fc50:	2308      	moveq	r3, #8
 802fc52:	230a      	movne	r3, #10
 802fc54:	2100      	movs	r1, #0
 802fc56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802fc5a:	6865      	ldr	r5, [r4, #4]
 802fc5c:	60a5      	str	r5, [r4, #8]
 802fc5e:	2d00      	cmp	r5, #0
 802fc60:	bfa2      	ittt	ge
 802fc62:	6821      	ldrge	r1, [r4, #0]
 802fc64:	f021 0104 	bicge.w	r1, r1, #4
 802fc68:	6021      	strge	r1, [r4, #0]
 802fc6a:	b90e      	cbnz	r6, 802fc70 <_printf_i+0x118>
 802fc6c:	2d00      	cmp	r5, #0
 802fc6e:	d04d      	beq.n	802fd0c <_printf_i+0x1b4>
 802fc70:	4615      	mov	r5, r2
 802fc72:	fbb6 f1f3 	udiv	r1, r6, r3
 802fc76:	fb03 6711 	mls	r7, r3, r1, r6
 802fc7a:	5dc7      	ldrb	r7, [r0, r7]
 802fc7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802fc80:	4637      	mov	r7, r6
 802fc82:	42bb      	cmp	r3, r7
 802fc84:	460e      	mov	r6, r1
 802fc86:	d9f4      	bls.n	802fc72 <_printf_i+0x11a>
 802fc88:	2b08      	cmp	r3, #8
 802fc8a:	d10b      	bne.n	802fca4 <_printf_i+0x14c>
 802fc8c:	6823      	ldr	r3, [r4, #0]
 802fc8e:	07de      	lsls	r6, r3, #31
 802fc90:	d508      	bpl.n	802fca4 <_printf_i+0x14c>
 802fc92:	6923      	ldr	r3, [r4, #16]
 802fc94:	6861      	ldr	r1, [r4, #4]
 802fc96:	4299      	cmp	r1, r3
 802fc98:	bfde      	ittt	le
 802fc9a:	2330      	movle	r3, #48	; 0x30
 802fc9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 802fca0:	f105 35ff 	addle.w	r5, r5, #4294967295
 802fca4:	1b52      	subs	r2, r2, r5
 802fca6:	6122      	str	r2, [r4, #16]
 802fca8:	f8cd a000 	str.w	sl, [sp]
 802fcac:	464b      	mov	r3, r9
 802fcae:	aa03      	add	r2, sp, #12
 802fcb0:	4621      	mov	r1, r4
 802fcb2:	4640      	mov	r0, r8
 802fcb4:	f7ff fee2 	bl	802fa7c <_printf_common>
 802fcb8:	3001      	adds	r0, #1
 802fcba:	d14c      	bne.n	802fd56 <_printf_i+0x1fe>
 802fcbc:	f04f 30ff 	mov.w	r0, #4294967295
 802fcc0:	b004      	add	sp, #16
 802fcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802fcc6:	4835      	ldr	r0, [pc, #212]	; (802fd9c <_printf_i+0x244>)
 802fcc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802fccc:	6829      	ldr	r1, [r5, #0]
 802fcce:	6823      	ldr	r3, [r4, #0]
 802fcd0:	f851 6b04 	ldr.w	r6, [r1], #4
 802fcd4:	6029      	str	r1, [r5, #0]
 802fcd6:	061d      	lsls	r5, r3, #24
 802fcd8:	d514      	bpl.n	802fd04 <_printf_i+0x1ac>
 802fcda:	07df      	lsls	r7, r3, #31
 802fcdc:	bf44      	itt	mi
 802fcde:	f043 0320 	orrmi.w	r3, r3, #32
 802fce2:	6023      	strmi	r3, [r4, #0]
 802fce4:	b91e      	cbnz	r6, 802fcee <_printf_i+0x196>
 802fce6:	6823      	ldr	r3, [r4, #0]
 802fce8:	f023 0320 	bic.w	r3, r3, #32
 802fcec:	6023      	str	r3, [r4, #0]
 802fcee:	2310      	movs	r3, #16
 802fcf0:	e7b0      	b.n	802fc54 <_printf_i+0xfc>
 802fcf2:	6823      	ldr	r3, [r4, #0]
 802fcf4:	f043 0320 	orr.w	r3, r3, #32
 802fcf8:	6023      	str	r3, [r4, #0]
 802fcfa:	2378      	movs	r3, #120	; 0x78
 802fcfc:	4828      	ldr	r0, [pc, #160]	; (802fda0 <_printf_i+0x248>)
 802fcfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802fd02:	e7e3      	b.n	802fccc <_printf_i+0x174>
 802fd04:	0659      	lsls	r1, r3, #25
 802fd06:	bf48      	it	mi
 802fd08:	b2b6      	uxthmi	r6, r6
 802fd0a:	e7e6      	b.n	802fcda <_printf_i+0x182>
 802fd0c:	4615      	mov	r5, r2
 802fd0e:	e7bb      	b.n	802fc88 <_printf_i+0x130>
 802fd10:	682b      	ldr	r3, [r5, #0]
 802fd12:	6826      	ldr	r6, [r4, #0]
 802fd14:	6961      	ldr	r1, [r4, #20]
 802fd16:	1d18      	adds	r0, r3, #4
 802fd18:	6028      	str	r0, [r5, #0]
 802fd1a:	0635      	lsls	r5, r6, #24
 802fd1c:	681b      	ldr	r3, [r3, #0]
 802fd1e:	d501      	bpl.n	802fd24 <_printf_i+0x1cc>
 802fd20:	6019      	str	r1, [r3, #0]
 802fd22:	e002      	b.n	802fd2a <_printf_i+0x1d2>
 802fd24:	0670      	lsls	r0, r6, #25
 802fd26:	d5fb      	bpl.n	802fd20 <_printf_i+0x1c8>
 802fd28:	8019      	strh	r1, [r3, #0]
 802fd2a:	2300      	movs	r3, #0
 802fd2c:	6123      	str	r3, [r4, #16]
 802fd2e:	4615      	mov	r5, r2
 802fd30:	e7ba      	b.n	802fca8 <_printf_i+0x150>
 802fd32:	682b      	ldr	r3, [r5, #0]
 802fd34:	1d1a      	adds	r2, r3, #4
 802fd36:	602a      	str	r2, [r5, #0]
 802fd38:	681d      	ldr	r5, [r3, #0]
 802fd3a:	6862      	ldr	r2, [r4, #4]
 802fd3c:	2100      	movs	r1, #0
 802fd3e:	4628      	mov	r0, r5
 802fd40:	f7f0 face 	bl	80202e0 <memchr>
 802fd44:	b108      	cbz	r0, 802fd4a <_printf_i+0x1f2>
 802fd46:	1b40      	subs	r0, r0, r5
 802fd48:	6060      	str	r0, [r4, #4]
 802fd4a:	6863      	ldr	r3, [r4, #4]
 802fd4c:	6123      	str	r3, [r4, #16]
 802fd4e:	2300      	movs	r3, #0
 802fd50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802fd54:	e7a8      	b.n	802fca8 <_printf_i+0x150>
 802fd56:	6923      	ldr	r3, [r4, #16]
 802fd58:	462a      	mov	r2, r5
 802fd5a:	4649      	mov	r1, r9
 802fd5c:	4640      	mov	r0, r8
 802fd5e:	47d0      	blx	sl
 802fd60:	3001      	adds	r0, #1
 802fd62:	d0ab      	beq.n	802fcbc <_printf_i+0x164>
 802fd64:	6823      	ldr	r3, [r4, #0]
 802fd66:	079b      	lsls	r3, r3, #30
 802fd68:	d413      	bmi.n	802fd92 <_printf_i+0x23a>
 802fd6a:	68e0      	ldr	r0, [r4, #12]
 802fd6c:	9b03      	ldr	r3, [sp, #12]
 802fd6e:	4298      	cmp	r0, r3
 802fd70:	bfb8      	it	lt
 802fd72:	4618      	movlt	r0, r3
 802fd74:	e7a4      	b.n	802fcc0 <_printf_i+0x168>
 802fd76:	2301      	movs	r3, #1
 802fd78:	4632      	mov	r2, r6
 802fd7a:	4649      	mov	r1, r9
 802fd7c:	4640      	mov	r0, r8
 802fd7e:	47d0      	blx	sl
 802fd80:	3001      	adds	r0, #1
 802fd82:	d09b      	beq.n	802fcbc <_printf_i+0x164>
 802fd84:	3501      	adds	r5, #1
 802fd86:	68e3      	ldr	r3, [r4, #12]
 802fd88:	9903      	ldr	r1, [sp, #12]
 802fd8a:	1a5b      	subs	r3, r3, r1
 802fd8c:	42ab      	cmp	r3, r5
 802fd8e:	dcf2      	bgt.n	802fd76 <_printf_i+0x21e>
 802fd90:	e7eb      	b.n	802fd6a <_printf_i+0x212>
 802fd92:	2500      	movs	r5, #0
 802fd94:	f104 0619 	add.w	r6, r4, #25
 802fd98:	e7f5      	b.n	802fd86 <_printf_i+0x22e>
 802fd9a:	bf00      	nop
 802fd9c:	08030dc5 	.word	0x08030dc5
 802fda0:	08030dd6 	.word	0x08030dd6

0802fda4 <__sread>:
 802fda4:	b510      	push	{r4, lr}
 802fda6:	460c      	mov	r4, r1
 802fda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802fdac:	f000 f8de 	bl	802ff6c <_read_r>
 802fdb0:	2800      	cmp	r0, #0
 802fdb2:	bfab      	itete	ge
 802fdb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802fdb6:	89a3      	ldrhlt	r3, [r4, #12]
 802fdb8:	181b      	addge	r3, r3, r0
 802fdba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802fdbe:	bfac      	ite	ge
 802fdc0:	6563      	strge	r3, [r4, #84]	; 0x54
 802fdc2:	81a3      	strhlt	r3, [r4, #12]
 802fdc4:	bd10      	pop	{r4, pc}

0802fdc6 <__swrite>:
 802fdc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802fdca:	461f      	mov	r7, r3
 802fdcc:	898b      	ldrh	r3, [r1, #12]
 802fdce:	05db      	lsls	r3, r3, #23
 802fdd0:	4605      	mov	r5, r0
 802fdd2:	460c      	mov	r4, r1
 802fdd4:	4616      	mov	r6, r2
 802fdd6:	d505      	bpl.n	802fde4 <__swrite+0x1e>
 802fdd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802fddc:	2302      	movs	r3, #2
 802fdde:	2200      	movs	r2, #0
 802fde0:	f000 f868 	bl	802feb4 <_lseek_r>
 802fde4:	89a3      	ldrh	r3, [r4, #12]
 802fde6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802fdea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802fdee:	81a3      	strh	r3, [r4, #12]
 802fdf0:	4632      	mov	r2, r6
 802fdf2:	463b      	mov	r3, r7
 802fdf4:	4628      	mov	r0, r5
 802fdf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802fdfa:	f000 b817 	b.w	802fe2c <_write_r>

0802fdfe <__sseek>:
 802fdfe:	b510      	push	{r4, lr}
 802fe00:	460c      	mov	r4, r1
 802fe02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802fe06:	f000 f855 	bl	802feb4 <_lseek_r>
 802fe0a:	1c43      	adds	r3, r0, #1
 802fe0c:	89a3      	ldrh	r3, [r4, #12]
 802fe0e:	bf15      	itete	ne
 802fe10:	6560      	strne	r0, [r4, #84]	; 0x54
 802fe12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802fe16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802fe1a:	81a3      	strheq	r3, [r4, #12]
 802fe1c:	bf18      	it	ne
 802fe1e:	81a3      	strhne	r3, [r4, #12]
 802fe20:	bd10      	pop	{r4, pc}

0802fe22 <__sclose>:
 802fe22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802fe26:	f000 b813 	b.w	802fe50 <_close_r>
	...

0802fe2c <_write_r>:
 802fe2c:	b538      	push	{r3, r4, r5, lr}
 802fe2e:	4d07      	ldr	r5, [pc, #28]	; (802fe4c <_write_r+0x20>)
 802fe30:	4604      	mov	r4, r0
 802fe32:	4608      	mov	r0, r1
 802fe34:	4611      	mov	r1, r2
 802fe36:	2200      	movs	r2, #0
 802fe38:	602a      	str	r2, [r5, #0]
 802fe3a:	461a      	mov	r2, r3
 802fe3c:	f7f9 fa73 	bl	8029326 <_write>
 802fe40:	1c43      	adds	r3, r0, #1
 802fe42:	d102      	bne.n	802fe4a <_write_r+0x1e>
 802fe44:	682b      	ldr	r3, [r5, #0]
 802fe46:	b103      	cbz	r3, 802fe4a <_write_r+0x1e>
 802fe48:	6023      	str	r3, [r4, #0]
 802fe4a:	bd38      	pop	{r3, r4, r5, pc}
 802fe4c:	24001e68 	.word	0x24001e68

0802fe50 <_close_r>:
 802fe50:	b538      	push	{r3, r4, r5, lr}
 802fe52:	4d06      	ldr	r5, [pc, #24]	; (802fe6c <_close_r+0x1c>)
 802fe54:	2300      	movs	r3, #0
 802fe56:	4604      	mov	r4, r0
 802fe58:	4608      	mov	r0, r1
 802fe5a:	602b      	str	r3, [r5, #0]
 802fe5c:	f7f9 fa7f 	bl	802935e <_close>
 802fe60:	1c43      	adds	r3, r0, #1
 802fe62:	d102      	bne.n	802fe6a <_close_r+0x1a>
 802fe64:	682b      	ldr	r3, [r5, #0]
 802fe66:	b103      	cbz	r3, 802fe6a <_close_r+0x1a>
 802fe68:	6023      	str	r3, [r4, #0]
 802fe6a:	bd38      	pop	{r3, r4, r5, pc}
 802fe6c:	24001e68 	.word	0x24001e68

0802fe70 <_fstat_r>:
 802fe70:	b538      	push	{r3, r4, r5, lr}
 802fe72:	4d07      	ldr	r5, [pc, #28]	; (802fe90 <_fstat_r+0x20>)
 802fe74:	2300      	movs	r3, #0
 802fe76:	4604      	mov	r4, r0
 802fe78:	4608      	mov	r0, r1
 802fe7a:	4611      	mov	r1, r2
 802fe7c:	602b      	str	r3, [r5, #0]
 802fe7e:	f7f9 fa7a 	bl	8029376 <_fstat>
 802fe82:	1c43      	adds	r3, r0, #1
 802fe84:	d102      	bne.n	802fe8c <_fstat_r+0x1c>
 802fe86:	682b      	ldr	r3, [r5, #0]
 802fe88:	b103      	cbz	r3, 802fe8c <_fstat_r+0x1c>
 802fe8a:	6023      	str	r3, [r4, #0]
 802fe8c:	bd38      	pop	{r3, r4, r5, pc}
 802fe8e:	bf00      	nop
 802fe90:	24001e68 	.word	0x24001e68

0802fe94 <_isatty_r>:
 802fe94:	b538      	push	{r3, r4, r5, lr}
 802fe96:	4d06      	ldr	r5, [pc, #24]	; (802feb0 <_isatty_r+0x1c>)
 802fe98:	2300      	movs	r3, #0
 802fe9a:	4604      	mov	r4, r0
 802fe9c:	4608      	mov	r0, r1
 802fe9e:	602b      	str	r3, [r5, #0]
 802fea0:	f7f9 fa79 	bl	8029396 <_isatty>
 802fea4:	1c43      	adds	r3, r0, #1
 802fea6:	d102      	bne.n	802feae <_isatty_r+0x1a>
 802fea8:	682b      	ldr	r3, [r5, #0]
 802feaa:	b103      	cbz	r3, 802feae <_isatty_r+0x1a>
 802feac:	6023      	str	r3, [r4, #0]
 802feae:	bd38      	pop	{r3, r4, r5, pc}
 802feb0:	24001e68 	.word	0x24001e68

0802feb4 <_lseek_r>:
 802feb4:	b538      	push	{r3, r4, r5, lr}
 802feb6:	4d07      	ldr	r5, [pc, #28]	; (802fed4 <_lseek_r+0x20>)
 802feb8:	4604      	mov	r4, r0
 802feba:	4608      	mov	r0, r1
 802febc:	4611      	mov	r1, r2
 802febe:	2200      	movs	r2, #0
 802fec0:	602a      	str	r2, [r5, #0]
 802fec2:	461a      	mov	r2, r3
 802fec4:	f7f9 fa72 	bl	80293ac <_lseek>
 802fec8:	1c43      	adds	r3, r0, #1
 802feca:	d102      	bne.n	802fed2 <_lseek_r+0x1e>
 802fecc:	682b      	ldr	r3, [r5, #0]
 802fece:	b103      	cbz	r3, 802fed2 <_lseek_r+0x1e>
 802fed0:	6023      	str	r3, [r4, #0]
 802fed2:	bd38      	pop	{r3, r4, r5, pc}
 802fed4:	24001e68 	.word	0x24001e68

0802fed8 <memmove>:
 802fed8:	4288      	cmp	r0, r1
 802feda:	b510      	push	{r4, lr}
 802fedc:	eb01 0402 	add.w	r4, r1, r2
 802fee0:	d902      	bls.n	802fee8 <memmove+0x10>
 802fee2:	4284      	cmp	r4, r0
 802fee4:	4623      	mov	r3, r4
 802fee6:	d807      	bhi.n	802fef8 <memmove+0x20>
 802fee8:	1e43      	subs	r3, r0, #1
 802feea:	42a1      	cmp	r1, r4
 802feec:	d008      	beq.n	802ff00 <memmove+0x28>
 802feee:	f811 2b01 	ldrb.w	r2, [r1], #1
 802fef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 802fef6:	e7f8      	b.n	802feea <memmove+0x12>
 802fef8:	4402      	add	r2, r0
 802fefa:	4601      	mov	r1, r0
 802fefc:	428a      	cmp	r2, r1
 802fefe:	d100      	bne.n	802ff02 <memmove+0x2a>
 802ff00:	bd10      	pop	{r4, pc}
 802ff02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802ff06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802ff0a:	e7f7      	b.n	802fefc <memmove+0x24>

0802ff0c <_realloc_r>:
 802ff0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ff10:	4680      	mov	r8, r0
 802ff12:	4614      	mov	r4, r2
 802ff14:	460e      	mov	r6, r1
 802ff16:	b921      	cbnz	r1, 802ff22 <_realloc_r+0x16>
 802ff18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ff1c:	4611      	mov	r1, r2
 802ff1e:	f7fe bf4f 	b.w	802edc0 <_malloc_r>
 802ff22:	b92a      	cbnz	r2, 802ff30 <_realloc_r+0x24>
 802ff24:	f7fe fee0 	bl	802ece8 <_free_r>
 802ff28:	4625      	mov	r5, r4
 802ff2a:	4628      	mov	r0, r5
 802ff2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ff30:	f000 f82e 	bl	802ff90 <_malloc_usable_size_r>
 802ff34:	4284      	cmp	r4, r0
 802ff36:	4607      	mov	r7, r0
 802ff38:	d802      	bhi.n	802ff40 <_realloc_r+0x34>
 802ff3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802ff3e:	d812      	bhi.n	802ff66 <_realloc_r+0x5a>
 802ff40:	4621      	mov	r1, r4
 802ff42:	4640      	mov	r0, r8
 802ff44:	f7fe ff3c 	bl	802edc0 <_malloc_r>
 802ff48:	4605      	mov	r5, r0
 802ff4a:	2800      	cmp	r0, #0
 802ff4c:	d0ed      	beq.n	802ff2a <_realloc_r+0x1e>
 802ff4e:	42bc      	cmp	r4, r7
 802ff50:	4622      	mov	r2, r4
 802ff52:	4631      	mov	r1, r6
 802ff54:	bf28      	it	cs
 802ff56:	463a      	movcs	r2, r7
 802ff58:	f7fe feb0 	bl	802ecbc <memcpy>
 802ff5c:	4631      	mov	r1, r6
 802ff5e:	4640      	mov	r0, r8
 802ff60:	f7fe fec2 	bl	802ece8 <_free_r>
 802ff64:	e7e1      	b.n	802ff2a <_realloc_r+0x1e>
 802ff66:	4635      	mov	r5, r6
 802ff68:	e7df      	b.n	802ff2a <_realloc_r+0x1e>
	...

0802ff6c <_read_r>:
 802ff6c:	b538      	push	{r3, r4, r5, lr}
 802ff6e:	4d07      	ldr	r5, [pc, #28]	; (802ff8c <_read_r+0x20>)
 802ff70:	4604      	mov	r4, r0
 802ff72:	4608      	mov	r0, r1
 802ff74:	4611      	mov	r1, r2
 802ff76:	2200      	movs	r2, #0
 802ff78:	602a      	str	r2, [r5, #0]
 802ff7a:	461a      	mov	r2, r3
 802ff7c:	f7f9 f9b6 	bl	80292ec <_read>
 802ff80:	1c43      	adds	r3, r0, #1
 802ff82:	d102      	bne.n	802ff8a <_read_r+0x1e>
 802ff84:	682b      	ldr	r3, [r5, #0]
 802ff86:	b103      	cbz	r3, 802ff8a <_read_r+0x1e>
 802ff88:	6023      	str	r3, [r4, #0]
 802ff8a:	bd38      	pop	{r3, r4, r5, pc}
 802ff8c:	24001e68 	.word	0x24001e68

0802ff90 <_malloc_usable_size_r>:
 802ff90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ff94:	1f18      	subs	r0, r3, #4
 802ff96:	2b00      	cmp	r3, #0
 802ff98:	bfbc      	itt	lt
 802ff9a:	580b      	ldrlt	r3, [r1, r0]
 802ff9c:	18c0      	addlt	r0, r0, r3
 802ff9e:	4770      	bx	lr

0802ffa0 <_init>:
 802ffa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ffa2:	bf00      	nop
 802ffa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ffa6:	bc08      	pop	{r3}
 802ffa8:	469e      	mov	lr, r3
 802ffaa:	4770      	bx	lr

0802ffac <_fini>:
 802ffac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ffae:	bf00      	nop
 802ffb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ffb2:	bc08      	pop	{r3}
 802ffb4:	469e      	mov	lr, r3
 802ffb6:	4770      	bx	lr
