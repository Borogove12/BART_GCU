
BART_GCU_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d50  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014e4  08031ff0  08031ff0  00021ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080334d4  080334d4  000234d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080334dc  080334dc  000234dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080334e0  080334e0  000234e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000128  24000000  080334e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f00  24000128  0803360c  00030128  2**3
                  ALLOC
  8 ._user_heap_stack 00000c00  24002028  0803360c  00032028  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002effd  00000000  00000000  00030156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006303  00000000  00000000  0005f153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002340  00000000  00000000  00065458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000020e0  00000000  00000000  00067798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042cde  00000000  00000000  00069878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000318fc  00000000  00000000  000ac556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017e1cb  00000000  00000000  000dde52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0025c01d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009c90  00000000  00000000  0025c070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000128 	.word	0x24000128
 80202bc:	00000000 	.word	0x00000000
 80202c0:	08031fd8 	.word	0x08031fd8

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400012c 	.word	0x2400012c
 80202dc:	08031fd8 	.word	0x08031fd8

080202e0 <strlen>:
 80202e0:	4603      	mov	r3, r0
 80202e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80202e6:	2a00      	cmp	r2, #0
 80202e8:	d1fb      	bne.n	80202e2 <strlen+0x2>
 80202ea:	1a18      	subs	r0, r3, r0
 80202ec:	3801      	subs	r0, #1
 80202ee:	4770      	bx	lr

080202f0 <memchr>:
 80202f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202f4:	2a10      	cmp	r2, #16
 80202f6:	db2b      	blt.n	8020350 <memchr+0x60>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	d008      	beq.n	8020310 <memchr+0x20>
 80202fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020302:	3a01      	subs	r2, #1
 8020304:	428b      	cmp	r3, r1
 8020306:	d02d      	beq.n	8020364 <memchr+0x74>
 8020308:	f010 0f07 	tst.w	r0, #7
 802030c:	b342      	cbz	r2, 8020360 <memchr+0x70>
 802030e:	d1f6      	bne.n	80202fe <memchr+0xe>
 8020310:	b4f0      	push	{r4, r5, r6, r7}
 8020312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802031a:	f022 0407 	bic.w	r4, r2, #7
 802031e:	f07f 0700 	mvns.w	r7, #0
 8020322:	2300      	movs	r3, #0
 8020324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020328:	3c08      	subs	r4, #8
 802032a:	ea85 0501 	eor.w	r5, r5, r1
 802032e:	ea86 0601 	eor.w	r6, r6, r1
 8020332:	fa85 f547 	uadd8	r5, r5, r7
 8020336:	faa3 f587 	sel	r5, r3, r7
 802033a:	fa86 f647 	uadd8	r6, r6, r7
 802033e:	faa5 f687 	sel	r6, r5, r7
 8020342:	b98e      	cbnz	r6, 8020368 <memchr+0x78>
 8020344:	d1ee      	bne.n	8020324 <memchr+0x34>
 8020346:	bcf0      	pop	{r4, r5, r6, r7}
 8020348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802034c:	f002 0207 	and.w	r2, r2, #7
 8020350:	b132      	cbz	r2, 8020360 <memchr+0x70>
 8020352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020356:	3a01      	subs	r2, #1
 8020358:	ea83 0301 	eor.w	r3, r3, r1
 802035c:	b113      	cbz	r3, 8020364 <memchr+0x74>
 802035e:	d1f8      	bne.n	8020352 <memchr+0x62>
 8020360:	2000      	movs	r0, #0
 8020362:	4770      	bx	lr
 8020364:	3801      	subs	r0, #1
 8020366:	4770      	bx	lr
 8020368:	2d00      	cmp	r5, #0
 802036a:	bf06      	itte	eq
 802036c:	4635      	moveq	r5, r6
 802036e:	3803      	subeq	r0, #3
 8020370:	3807      	subne	r0, #7
 8020372:	f015 0f01 	tst.w	r5, #1
 8020376:	d107      	bne.n	8020388 <memchr+0x98>
 8020378:	3001      	adds	r0, #1
 802037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802037e:	bf02      	ittt	eq
 8020380:	3001      	addeq	r0, #1
 8020382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020386:	3001      	addeq	r0, #1
 8020388:	bcf0      	pop	{r4, r5, r6, r7}
 802038a:	3801      	subs	r0, #1
 802038c:	4770      	bx	lr
 802038e:	bf00      	nop

08020390 <__aeabi_uldivmod>:
 8020390:	b953      	cbnz	r3, 80203a8 <__aeabi_uldivmod+0x18>
 8020392:	b94a      	cbnz	r2, 80203a8 <__aeabi_uldivmod+0x18>
 8020394:	2900      	cmp	r1, #0
 8020396:	bf08      	it	eq
 8020398:	2800      	cmpeq	r0, #0
 802039a:	bf1c      	itt	ne
 802039c:	f04f 31ff 	movne.w	r1, #4294967295
 80203a0:	f04f 30ff 	movne.w	r0, #4294967295
 80203a4:	f000 b974 	b.w	8020690 <__aeabi_idiv0>
 80203a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80203ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203b0:	f000 f806 	bl	80203c0 <__udivmoddi4>
 80203b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203bc:	b004      	add	sp, #16
 80203be:	4770      	bx	lr

080203c0 <__udivmoddi4>:
 80203c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203c4:	9d08      	ldr	r5, [sp, #32]
 80203c6:	4604      	mov	r4, r0
 80203c8:	468e      	mov	lr, r1
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	d14d      	bne.n	802046a <__udivmoddi4+0xaa>
 80203ce:	428a      	cmp	r2, r1
 80203d0:	4694      	mov	ip, r2
 80203d2:	d969      	bls.n	80204a8 <__udivmoddi4+0xe8>
 80203d4:	fab2 f282 	clz	r2, r2
 80203d8:	b152      	cbz	r2, 80203f0 <__udivmoddi4+0x30>
 80203da:	fa01 f302 	lsl.w	r3, r1, r2
 80203de:	f1c2 0120 	rsb	r1, r2, #32
 80203e2:	fa20 f101 	lsr.w	r1, r0, r1
 80203e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203ea:	ea41 0e03 	orr.w	lr, r1, r3
 80203ee:	4094      	lsls	r4, r2
 80203f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203f4:	0c21      	lsrs	r1, r4, #16
 80203f6:	fbbe f6f8 	udiv	r6, lr, r8
 80203fa:	fa1f f78c 	uxth.w	r7, ip
 80203fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020406:	fb06 f107 	mul.w	r1, r6, r7
 802040a:	4299      	cmp	r1, r3
 802040c:	d90a      	bls.n	8020424 <__udivmoddi4+0x64>
 802040e:	eb1c 0303 	adds.w	r3, ip, r3
 8020412:	f106 30ff 	add.w	r0, r6, #4294967295
 8020416:	f080 811f 	bcs.w	8020658 <__udivmoddi4+0x298>
 802041a:	4299      	cmp	r1, r3
 802041c:	f240 811c 	bls.w	8020658 <__udivmoddi4+0x298>
 8020420:	3e02      	subs	r6, #2
 8020422:	4463      	add	r3, ip
 8020424:	1a5b      	subs	r3, r3, r1
 8020426:	b2a4      	uxth	r4, r4
 8020428:	fbb3 f0f8 	udiv	r0, r3, r8
 802042c:	fb08 3310 	mls	r3, r8, r0, r3
 8020430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020434:	fb00 f707 	mul.w	r7, r0, r7
 8020438:	42a7      	cmp	r7, r4
 802043a:	d90a      	bls.n	8020452 <__udivmoddi4+0x92>
 802043c:	eb1c 0404 	adds.w	r4, ip, r4
 8020440:	f100 33ff 	add.w	r3, r0, #4294967295
 8020444:	f080 810a 	bcs.w	802065c <__udivmoddi4+0x29c>
 8020448:	42a7      	cmp	r7, r4
 802044a:	f240 8107 	bls.w	802065c <__udivmoddi4+0x29c>
 802044e:	4464      	add	r4, ip
 8020450:	3802      	subs	r0, #2
 8020452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020456:	1be4      	subs	r4, r4, r7
 8020458:	2600      	movs	r6, #0
 802045a:	b11d      	cbz	r5, 8020464 <__udivmoddi4+0xa4>
 802045c:	40d4      	lsrs	r4, r2
 802045e:	2300      	movs	r3, #0
 8020460:	e9c5 4300 	strd	r4, r3, [r5]
 8020464:	4631      	mov	r1, r6
 8020466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802046a:	428b      	cmp	r3, r1
 802046c:	d909      	bls.n	8020482 <__udivmoddi4+0xc2>
 802046e:	2d00      	cmp	r5, #0
 8020470:	f000 80ef 	beq.w	8020652 <__udivmoddi4+0x292>
 8020474:	2600      	movs	r6, #0
 8020476:	e9c5 0100 	strd	r0, r1, [r5]
 802047a:	4630      	mov	r0, r6
 802047c:	4631      	mov	r1, r6
 802047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020482:	fab3 f683 	clz	r6, r3
 8020486:	2e00      	cmp	r6, #0
 8020488:	d14a      	bne.n	8020520 <__udivmoddi4+0x160>
 802048a:	428b      	cmp	r3, r1
 802048c:	d302      	bcc.n	8020494 <__udivmoddi4+0xd4>
 802048e:	4282      	cmp	r2, r0
 8020490:	f200 80f9 	bhi.w	8020686 <__udivmoddi4+0x2c6>
 8020494:	1a84      	subs	r4, r0, r2
 8020496:	eb61 0303 	sbc.w	r3, r1, r3
 802049a:	2001      	movs	r0, #1
 802049c:	469e      	mov	lr, r3
 802049e:	2d00      	cmp	r5, #0
 80204a0:	d0e0      	beq.n	8020464 <__udivmoddi4+0xa4>
 80204a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80204a6:	e7dd      	b.n	8020464 <__udivmoddi4+0xa4>
 80204a8:	b902      	cbnz	r2, 80204ac <__udivmoddi4+0xec>
 80204aa:	deff      	udf	#255	; 0xff
 80204ac:	fab2 f282 	clz	r2, r2
 80204b0:	2a00      	cmp	r2, #0
 80204b2:	f040 8092 	bne.w	80205da <__udivmoddi4+0x21a>
 80204b6:	eba1 010c 	sub.w	r1, r1, ip
 80204ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204be:	fa1f fe8c 	uxth.w	lr, ip
 80204c2:	2601      	movs	r6, #1
 80204c4:	0c20      	lsrs	r0, r4, #16
 80204c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ca:	fb07 1113 	mls	r1, r7, r3, r1
 80204ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204d2:	fb0e f003 	mul.w	r0, lr, r3
 80204d6:	4288      	cmp	r0, r1
 80204d8:	d908      	bls.n	80204ec <__udivmoddi4+0x12c>
 80204da:	eb1c 0101 	adds.w	r1, ip, r1
 80204de:	f103 38ff 	add.w	r8, r3, #4294967295
 80204e2:	d202      	bcs.n	80204ea <__udivmoddi4+0x12a>
 80204e4:	4288      	cmp	r0, r1
 80204e6:	f200 80cb 	bhi.w	8020680 <__udivmoddi4+0x2c0>
 80204ea:	4643      	mov	r3, r8
 80204ec:	1a09      	subs	r1, r1, r0
 80204ee:	b2a4      	uxth	r4, r4
 80204f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204f4:	fb07 1110 	mls	r1, r7, r0, r1
 80204f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020500:	45a6      	cmp	lr, r4
 8020502:	d908      	bls.n	8020516 <__udivmoddi4+0x156>
 8020504:	eb1c 0404 	adds.w	r4, ip, r4
 8020508:	f100 31ff 	add.w	r1, r0, #4294967295
 802050c:	d202      	bcs.n	8020514 <__udivmoddi4+0x154>
 802050e:	45a6      	cmp	lr, r4
 8020510:	f200 80bb 	bhi.w	802068a <__udivmoddi4+0x2ca>
 8020514:	4608      	mov	r0, r1
 8020516:	eba4 040e 	sub.w	r4, r4, lr
 802051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802051e:	e79c      	b.n	802045a <__udivmoddi4+0x9a>
 8020520:	f1c6 0720 	rsb	r7, r6, #32
 8020524:	40b3      	lsls	r3, r6
 8020526:	fa22 fc07 	lsr.w	ip, r2, r7
 802052a:	ea4c 0c03 	orr.w	ip, ip, r3
 802052e:	fa20 f407 	lsr.w	r4, r0, r7
 8020532:	fa01 f306 	lsl.w	r3, r1, r6
 8020536:	431c      	orrs	r4, r3
 8020538:	40f9      	lsrs	r1, r7
 802053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802053e:	fa00 f306 	lsl.w	r3, r0, r6
 8020542:	fbb1 f8f9 	udiv	r8, r1, r9
 8020546:	0c20      	lsrs	r0, r4, #16
 8020548:	fa1f fe8c 	uxth.w	lr, ip
 802054c:	fb09 1118 	mls	r1, r9, r8, r1
 8020550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020554:	fb08 f00e 	mul.w	r0, r8, lr
 8020558:	4288      	cmp	r0, r1
 802055a:	fa02 f206 	lsl.w	r2, r2, r6
 802055e:	d90b      	bls.n	8020578 <__udivmoddi4+0x1b8>
 8020560:	eb1c 0101 	adds.w	r1, ip, r1
 8020564:	f108 3aff 	add.w	sl, r8, #4294967295
 8020568:	f080 8088 	bcs.w	802067c <__udivmoddi4+0x2bc>
 802056c:	4288      	cmp	r0, r1
 802056e:	f240 8085 	bls.w	802067c <__udivmoddi4+0x2bc>
 8020572:	f1a8 0802 	sub.w	r8, r8, #2
 8020576:	4461      	add	r1, ip
 8020578:	1a09      	subs	r1, r1, r0
 802057a:	b2a4      	uxth	r4, r4
 802057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020580:	fb09 1110 	mls	r1, r9, r0, r1
 8020584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020588:	fb00 fe0e 	mul.w	lr, r0, lr
 802058c:	458e      	cmp	lr, r1
 802058e:	d908      	bls.n	80205a2 <__udivmoddi4+0x1e2>
 8020590:	eb1c 0101 	adds.w	r1, ip, r1
 8020594:	f100 34ff 	add.w	r4, r0, #4294967295
 8020598:	d26c      	bcs.n	8020674 <__udivmoddi4+0x2b4>
 802059a:	458e      	cmp	lr, r1
 802059c:	d96a      	bls.n	8020674 <__udivmoddi4+0x2b4>
 802059e:	3802      	subs	r0, #2
 80205a0:	4461      	add	r1, ip
 80205a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80205a6:	fba0 9402 	umull	r9, r4, r0, r2
 80205aa:	eba1 010e 	sub.w	r1, r1, lr
 80205ae:	42a1      	cmp	r1, r4
 80205b0:	46c8      	mov	r8, r9
 80205b2:	46a6      	mov	lr, r4
 80205b4:	d356      	bcc.n	8020664 <__udivmoddi4+0x2a4>
 80205b6:	d053      	beq.n	8020660 <__udivmoddi4+0x2a0>
 80205b8:	b15d      	cbz	r5, 80205d2 <__udivmoddi4+0x212>
 80205ba:	ebb3 0208 	subs.w	r2, r3, r8
 80205be:	eb61 010e 	sbc.w	r1, r1, lr
 80205c2:	fa01 f707 	lsl.w	r7, r1, r7
 80205c6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ca:	40f1      	lsrs	r1, r6
 80205cc:	431f      	orrs	r7, r3
 80205ce:	e9c5 7100 	strd	r7, r1, [r5]
 80205d2:	2600      	movs	r6, #0
 80205d4:	4631      	mov	r1, r6
 80205d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205da:	f1c2 0320 	rsb	r3, r2, #32
 80205de:	40d8      	lsrs	r0, r3
 80205e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205e4:	fa21 f303 	lsr.w	r3, r1, r3
 80205e8:	4091      	lsls	r1, r2
 80205ea:	4301      	orrs	r1, r0
 80205ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205f0:	fa1f fe8c 	uxth.w	lr, ip
 80205f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205f8:	fb07 3610 	mls	r6, r7, r0, r3
 80205fc:	0c0b      	lsrs	r3, r1, #16
 80205fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020602:	fb00 f60e 	mul.w	r6, r0, lr
 8020606:	429e      	cmp	r6, r3
 8020608:	fa04 f402 	lsl.w	r4, r4, r2
 802060c:	d908      	bls.n	8020620 <__udivmoddi4+0x260>
 802060e:	eb1c 0303 	adds.w	r3, ip, r3
 8020612:	f100 38ff 	add.w	r8, r0, #4294967295
 8020616:	d22f      	bcs.n	8020678 <__udivmoddi4+0x2b8>
 8020618:	429e      	cmp	r6, r3
 802061a:	d92d      	bls.n	8020678 <__udivmoddi4+0x2b8>
 802061c:	3802      	subs	r0, #2
 802061e:	4463      	add	r3, ip
 8020620:	1b9b      	subs	r3, r3, r6
 8020622:	b289      	uxth	r1, r1
 8020624:	fbb3 f6f7 	udiv	r6, r3, r7
 8020628:	fb07 3316 	mls	r3, r7, r6, r3
 802062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020630:	fb06 f30e 	mul.w	r3, r6, lr
 8020634:	428b      	cmp	r3, r1
 8020636:	d908      	bls.n	802064a <__udivmoddi4+0x28a>
 8020638:	eb1c 0101 	adds.w	r1, ip, r1
 802063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020640:	d216      	bcs.n	8020670 <__udivmoddi4+0x2b0>
 8020642:	428b      	cmp	r3, r1
 8020644:	d914      	bls.n	8020670 <__udivmoddi4+0x2b0>
 8020646:	3e02      	subs	r6, #2
 8020648:	4461      	add	r1, ip
 802064a:	1ac9      	subs	r1, r1, r3
 802064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020650:	e738      	b.n	80204c4 <__udivmoddi4+0x104>
 8020652:	462e      	mov	r6, r5
 8020654:	4628      	mov	r0, r5
 8020656:	e705      	b.n	8020464 <__udivmoddi4+0xa4>
 8020658:	4606      	mov	r6, r0
 802065a:	e6e3      	b.n	8020424 <__udivmoddi4+0x64>
 802065c:	4618      	mov	r0, r3
 802065e:	e6f8      	b.n	8020452 <__udivmoddi4+0x92>
 8020660:	454b      	cmp	r3, r9
 8020662:	d2a9      	bcs.n	80205b8 <__udivmoddi4+0x1f8>
 8020664:	ebb9 0802 	subs.w	r8, r9, r2
 8020668:	eb64 0e0c 	sbc.w	lr, r4, ip
 802066c:	3801      	subs	r0, #1
 802066e:	e7a3      	b.n	80205b8 <__udivmoddi4+0x1f8>
 8020670:	4646      	mov	r6, r8
 8020672:	e7ea      	b.n	802064a <__udivmoddi4+0x28a>
 8020674:	4620      	mov	r0, r4
 8020676:	e794      	b.n	80205a2 <__udivmoddi4+0x1e2>
 8020678:	4640      	mov	r0, r8
 802067a:	e7d1      	b.n	8020620 <__udivmoddi4+0x260>
 802067c:	46d0      	mov	r8, sl
 802067e:	e77b      	b.n	8020578 <__udivmoddi4+0x1b8>
 8020680:	3b02      	subs	r3, #2
 8020682:	4461      	add	r1, ip
 8020684:	e732      	b.n	80204ec <__udivmoddi4+0x12c>
 8020686:	4630      	mov	r0, r6
 8020688:	e709      	b.n	802049e <__udivmoddi4+0xde>
 802068a:	4464      	add	r4, ip
 802068c:	3802      	subs	r0, #2
 802068e:	e742      	b.n	8020516 <__udivmoddi4+0x156>

08020690 <__aeabi_idiv0>:
 8020690:	4770      	bx	lr
 8020692:	bf00      	nop

08020694 <Brr_SetEmergency>:
 * In:       bool isActive: indicator for the active/deactive
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_SetEmergency(bool isActive)
{
 8020694:	b580      	push	{r7, lr}
 8020696:	b084      	sub	sp, #16
 8020698:	af00      	add	r7, sp, #0
 802069a:	4603      	mov	r3, r0
 802069c:	71fb      	strb	r3, [r7, #7]
	static	clock_t	ms;
	BYTE cmd = isActive ? CMD_SET_EMEREGENCY : CMD_RESET_EMEREGENCY;
 802069e:	79fb      	ldrb	r3, [r7, #7]
 80206a0:	2b00      	cmp	r3, #0
 80206a2:	d001      	beq.n	80206a8 <Brr_SetEmergency+0x14>
 80206a4:	2378      	movs	r3, #120	; 0x78
 80206a6:	e000      	b.n	80206aa <Brr_SetEmergency+0x16>
 80206a8:	2379      	movs	r3, #121	; 0x79
 80206aa:	73fb      	strb	r3, [r7, #15]
	#if BART_IO
	Brr_SetEmergency_P(isActive);
 80206ac:	79fb      	ldrb	r3, [r7, #7]
 80206ae:	4618      	mov	r0, r3
 80206b0:	f005 f856 	bl	8025760 <Brr_SetEmergency_P>
	Brr_SetEmergency_S(isActive);
 80206b4:	79fb      	ldrb	r3, [r7, #7]
 80206b6:	4618      	mov	r0, r3
 80206b8:	f005 f87c 	bl	80257b4 <Brr_SetEmergency_S>
	//printf("[%d] command\n",cmd);

	// 100ms 단위로 printf 발생   //너무 많은 접근으로 버퍼가 터지는 문제가 있음 해당 구문이 문제 없다면 다른 printf에도 적용 예정
	if (!mstimeout(&ms, 100))
 80206bc:	2164      	movs	r1, #100	; 0x64
 80206be:	4809      	ldr	r0, [pc, #36]	; (80206e4 <Brr_SetEmergency+0x50>)
 80206c0:	f009 ff12 	bl	802a4e8 <mstimeout>
 80206c4:	4603      	mov	r3, r0
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	d008      	beq.n	80206dc <Brr_SetEmergency+0x48>
		return;

   // printf("[%d] command \n", cmd);
	//printf("[%d]CMD\n", cmd);		//1ms로 printf 발생 시 문제가 안생기는 length의 길이
    printf("%s [%d] command \n",strmtime(), cmd); //시간 체크
 80206ca:	f009 feb1 	bl	802a430 <strmtime>
 80206ce:	4601      	mov	r1, r0
 80206d0:	7bfb      	ldrb	r3, [r7, #15]
 80206d2:	461a      	mov	r2, r3
 80206d4:	4804      	ldr	r0, [pc, #16]	; (80206e8 <Brr_SetEmergency+0x54>)
 80206d6:	f009 f8bd 	bl	8029854 <printf_>
 80206da:	e000      	b.n	80206de <Brr_SetEmergency+0x4a>
		return;
 80206dc:	bf00      	nop

		MakeRequest(cmd, NULL, 0);
		PRINTL("[%d] command", cmd);

	#endif
}
 80206de:	3710      	adds	r7, #16
 80206e0:	46bd      	mov	sp, r7
 80206e2:	bd80      	pop	{r7, pc}
 80206e4:	24000180 	.word	0x24000180
 80206e8:	08031ff0 	.word	0x08031ff0

080206ec <Brr_SetSerialComm>:
 * In:       bool isEnabled: indicator for the enabled/disabled
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_SetSerialComm(bool isEnabled)			//	not used pms
{
 80206ec:	b580      	push	{r7, lr}
 80206ee:	b084      	sub	sp, #16
 80206f0:	af00      	add	r7, sp, #0
 80206f2:	4603      	mov	r3, r0
 80206f4:	71fb      	strb	r3, [r7, #7]
	BYTE cmd = isEnabled ? CMD_SET_SERIAL_COMM : CMD_RESET_SERIAL_COMM;
 80206f6:	79fb      	ldrb	r3, [r7, #7]
 80206f8:	2b00      	cmp	r3, #0
 80206fa:	d001      	beq.n	8020700 <Brr_SetSerialComm+0x14>
 80206fc:	237a      	movs	r3, #122	; 0x7a
 80206fe:	e000      	b.n	8020702 <Brr_SetSerialComm+0x16>
 8020700:	237b      	movs	r3, #123	; 0x7b
 8020702:	73fb      	strb	r3, [r7, #15]
	MakeRequest(cmd, NULL, 0);
 8020704:	7bfb      	ldrb	r3, [r7, #15]
 8020706:	2200      	movs	r2, #0
 8020708:	2100      	movs	r1, #0
 802070a:	4618      	mov	r0, r3
 802070c:	f000 f92e 	bl	802096c <MakeRequest>
	//PRINTL("[%d] command", cmd);
	printf("[%d]CMD\n", cmd);
 8020710:	7bfb      	ldrb	r3, [r7, #15]
 8020712:	4619      	mov	r1, r3
 8020714:	4803      	ldr	r0, [pc, #12]	; (8020724 <Brr_SetSerialComm+0x38>)
 8020716:	f009 f89d 	bl	8029854 <printf_>
}
 802071a:	bf00      	nop
 802071c:	3710      	adds	r7, #16
 802071e:	46bd      	mov	sp, r7
 8020720:	bd80      	pop	{r7, pc}
 8020722:	bf00      	nop
 8020724:	08032004 	.word	0x08032004

08020728 <Brr_OpenBarrier>:
 * In:       BYTE direction: 1-Entry / 2-Exit
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_OpenBarrier(BYTE direction)
{
 8020728:	b580      	push	{r7, lr}
 802072a:	b082      	sub	sp, #8
 802072c:	af00      	add	r7, sp, #0
 802072e:	4603      	mov	r3, r0
 8020730:	71fb      	strb	r3, [r7, #7]
	#if BART_IO
		switch(direction)
 8020732:	79fb      	ldrb	r3, [r7, #7]
 8020734:	2b01      	cmp	r3, #1
 8020736:	d002      	beq.n	802073e <Brr_OpenBarrier+0x16>
 8020738:	2b02      	cmp	r3, #2
 802073a:	d007      	beq.n	802074c <Brr_OpenBarrier+0x24>
 802073c:	e00d      	b.n	802075a <Brr_OpenBarrier+0x32>
		{
		case BARRIER_OPEN_FOR_EX:
			Brr_ControlBarrier_P(ENTRY_OPEN);
 802073e:	2000      	movs	r0, #0
 8020740:	f005 f8b6 	bl	80258b0 <Brr_ControlBarrier_P>
			Brr_ControlBarrier_S(ENTRY_OPEN);
 8020744:	2000      	movs	r0, #0
 8020746:	f005 f901 	bl	802594c <Brr_ControlBarrier_S>
			break;
 802074a:	e006      	b.n	802075a <Brr_OpenBarrier+0x32>

		case BARRIER_OPEN_FOR_EN:
			Brr_ControlBarrier_P(EXIT_OPEN);
 802074c:	2002      	movs	r0, #2
 802074e:	f005 f8af 	bl	80258b0 <Brr_ControlBarrier_P>
			Brr_ControlBarrier_S(EXIT_OPEN);
 8020752:	2002      	movs	r0, #2
 8020754:	f005 f8fa 	bl	802594c <Brr_ControlBarrier_S>
			break;
 8020758:	bf00      	nop
		}

		printf("[%d]CMD\n", CMD_OPEN_BARRIER);
 802075a:	217c      	movs	r1, #124	; 0x7c
 802075c:	4803      	ldr	r0, [pc, #12]	; (802076c <Brr_OpenBarrier+0x44>)
 802075e:	f009 f879 	bl	8029854 <printf_>
	#else
		MakeRequest(CMD_OPEN_BARRIER, &direction, 1);
		PRINTL("[%d] command", CMD_OPEN_BARRIER);
	#endif
}
 8020762:	bf00      	nop
 8020764:	3708      	adds	r7, #8
 8020766:	46bd      	mov	sp, r7
 8020768:	bd80      	pop	{r7, pc}
 802076a:	bf00      	nop
 802076c:	08032004 	.word	0x08032004

08020770 <Brr_CloseBarrier>:
 * In:       None
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_CloseBarrier(void)
{
 8020770:	b580      	push	{r7, lr}
 8020772:	af00      	add	r7, sp, #0
	#if BART_IO
		Brr_ControlBarrier_P(CLOSE);
 8020774:	2001      	movs	r0, #1
 8020776:	f005 f89b 	bl	80258b0 <Brr_ControlBarrier_P>
		Brr_ControlBarrier_S(CLOSE);
 802077a:	2001      	movs	r0, #1
 802077c:	f005 f8e6 	bl	802594c <Brr_ControlBarrier_S>
		printf("[%d]CMD\n", CMD_CLOSE_BARRIER);
 8020780:	217d      	movs	r1, #125	; 0x7d
 8020782:	4802      	ldr	r0, [pc, #8]	; (802078c <Brr_CloseBarrier+0x1c>)
 8020784:	f009 f866 	bl	8029854 <printf_>
		{
			MakeRequest(CMD_CLOSE_BARRIER, NULL, 0);
			PRINTL("[%d] command", CMD_CLOSE_BARRIER);
		}
	#endif
}
 8020788:	bf00      	nop
 802078a:	bd80      	pop	{r7, pc}
 802078c:	08032004 	.word	0x08032004

08020790 <Brr_StopBarrier>:
 * In:       bool isStop: indicator for the stop/release
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_StopBarrier(bool isStop)
{
 8020790:	b580      	push	{r7, lr}
 8020792:	b084      	sub	sp, #16
 8020794:	af00      	add	r7, sp, #0
 8020796:	4603      	mov	r3, r0
 8020798:	71fb      	strb	r3, [r7, #7]
	BYTE cmd = isStop ? CMD_SET_STOP_BARRIER : CMD_RESET_STOP_BARRIER;
 802079a:	79fb      	ldrb	r3, [r7, #7]
 802079c:	2b00      	cmp	r3, #0
 802079e:	d001      	beq.n	80207a4 <Brr_StopBarrier+0x14>
 80207a0:	237e      	movs	r3, #126	; 0x7e
 80207a2:	e000      	b.n	80207a6 <Brr_StopBarrier+0x16>
 80207a4:	237f      	movs	r3, #127	; 0x7f
 80207a6:	73fb      	strb	r3, [r7, #15]
	#if BART_IO
		Brr_SetBreak_P(isStop);
 80207a8:	79fb      	ldrb	r3, [r7, #7]
 80207aa:	4618      	mov	r0, r3
 80207ac:	f005 f82c 	bl	8025808 <Brr_SetBreak_P>
		Brr_SetBreak_S(isStop);
 80207b0:	79fb      	ldrb	r3, [r7, #7]
 80207b2:	4618      	mov	r0, r3
 80207b4:	f005 f852 	bl	802585c <Brr_SetBreak_S>
		printf("[%d]CMD\n", cmd);
 80207b8:	7bfb      	ldrb	r3, [r7, #15]
 80207ba:	4619      	mov	r1, r3
 80207bc:	4803      	ldr	r0, [pc, #12]	; (80207cc <Brr_StopBarrier+0x3c>)
 80207be:	f009 f849 	bl	8029854 <printf_>
	#else
		BYTE cmd = isStop ? CMD_SET_STOP_BARRIER : CMD_RESET_STOP_BARRIER;
		MakeRequest(cmd, NULL, 0);
		PRINTL("[%d] command", cmd);
	#endif
}
 80207c2:	bf00      	nop
 80207c4:	3710      	adds	r7, #16
 80207c6:	46bd      	mov	sp, r7
 80207c8:	bd80      	pop	{r7, pc}
 80207ca:	bf00      	nop
 80207cc:	08032004 	.word	0x08032004

080207d0 <Brr_Inq_Status>:
 * In:       None
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_Inq_Status(void)			// 현재 barrier 에서는 IO input 만 받는 상태이므로 해당 통신은 하지 않음
{									// FAULT, ANOMALY, BRAKED, GSTATUS를 input으로 받는데 FAULT ANOMALY의 신호가 정확하
 80207d0:	b580      	push	{r7, lr}
 80207d2:	af00      	add	r7, sp, #0
	MakeRequest(CMD_GET_STATUS_MAIN, NULL, 0);
 80207d4:	2200      	movs	r2, #0
 80207d6:	2100      	movs	r1, #0
 80207d8:	2092      	movs	r0, #146	; 0x92
 80207da:	f000 f8c7 	bl	802096c <MakeRequest>
	// PRINTL("[%d] command", CMD_GET_STATUS_MAIN);
	printf("[%d]CMD\n", CMD_GET_STATUS_MAIN);
 80207de:	2192      	movs	r1, #146	; 0x92
 80207e0:	4802      	ldr	r0, [pc, #8]	; (80207ec <Brr_Inq_Status+0x1c>)
 80207e2:	f009 f837 	bl	8029854 <printf_>
}
 80207e6:	bf00      	nop
 80207e8:	bd80      	pop	{r7, pc}
 80207ea:	bf00      	nop
 80207ec:	08032004 	.word	0x08032004

080207f0 <Brr_Res_Status>:
 * In:       bool isMain
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_Res_Status(bool isMain)			//isMain : TRUE - UART1 / FALSE - UART3
{
 80207f0:	b580      	push	{r7, lr}
 80207f2:	b082      	sub	sp, #8
 80207f4:	af00      	add	r7, sp, #0
 80207f6:	4603      	mov	r3, r0
 80207f8:	71fb      	strb	r3, [r7, #7]
    if (isMain) 		//UART4
 80207fa:	79fb      	ldrb	r3, [r7, #7]
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	d010      	beq.n	8020822 <Brr_Res_Status+0x32>
    {
        memcpy(&gMainBarrierStatus, (B_BARRIER_STATUS *)rsp_U4.d.data, sizeof(B_BARRIER_STATUS));
 8020800:	2208      	movs	r2, #8
 8020802:	4912      	ldr	r1, [pc, #72]	; (802084c <Brr_Res_Status+0x5c>)
 8020804:	4812      	ldr	r0, [pc, #72]	; (8020850 <Brr_Res_Status+0x60>)
 8020806:	f010 f9a1 	bl	8030b4c <memcpy>
        // PRINTL(" Receive Main Status %d/%d/%d", gMainBarrierStatus.B.status0, gMainBarrierStatus.B.status3, gMainBarrierStatus.B.status4);
        printf(" Receive Main Status %d/%d/%d  \n", gMainBarrierStatus.B.status0, gMainBarrierStatus.B.status3, gMainBarrierStatus.B.status4);
 802080a:	4b11      	ldr	r3, [pc, #68]	; (8020850 <Brr_Res_Status+0x60>)
 802080c:	781b      	ldrb	r3, [r3, #0]
 802080e:	4619      	mov	r1, r3
 8020810:	4b0f      	ldr	r3, [pc, #60]	; (8020850 <Brr_Res_Status+0x60>)
 8020812:	78db      	ldrb	r3, [r3, #3]
 8020814:	461a      	mov	r2, r3
 8020816:	4b0e      	ldr	r3, [pc, #56]	; (8020850 <Brr_Res_Status+0x60>)
 8020818:	791b      	ldrb	r3, [r3, #4]
 802081a:	480e      	ldr	r0, [pc, #56]	; (8020854 <Brr_Res_Status+0x64>)
 802081c:	f009 f81a 	bl	8029854 <printf_>
        memcpy(&gSubBarrierStatus, (B_BARRIER_STATUS *)rsp_U5.d.data, sizeof(B_BARRIER_STATUS));
        // PRINTL(" Receive Sub Status %d/%d/%d", gSubBarrierStatus.B.status0, gSubBarrierStatus.B.status3, gSubBarrierStatus.B.status4);

        printf(" Receive Sub Status %d/%d/%d  \n", gSubBarrierStatus.B.status0, gSubBarrierStatus.B.status3, gSubBarrierStatus.B.status4);
    }
}
 8020820:	e00f      	b.n	8020842 <Brr_Res_Status+0x52>
        memcpy(&gSubBarrierStatus, (B_BARRIER_STATUS *)rsp_U5.d.data, sizeof(B_BARRIER_STATUS));
 8020822:	2208      	movs	r2, #8
 8020824:	490c      	ldr	r1, [pc, #48]	; (8020858 <Brr_Res_Status+0x68>)
 8020826:	480d      	ldr	r0, [pc, #52]	; (802085c <Brr_Res_Status+0x6c>)
 8020828:	f010 f990 	bl	8030b4c <memcpy>
        printf(" Receive Sub Status %d/%d/%d  \n", gSubBarrierStatus.B.status0, gSubBarrierStatus.B.status3, gSubBarrierStatus.B.status4);
 802082c:	4b0b      	ldr	r3, [pc, #44]	; (802085c <Brr_Res_Status+0x6c>)
 802082e:	781b      	ldrb	r3, [r3, #0]
 8020830:	4619      	mov	r1, r3
 8020832:	4b0a      	ldr	r3, [pc, #40]	; (802085c <Brr_Res_Status+0x6c>)
 8020834:	78db      	ldrb	r3, [r3, #3]
 8020836:	461a      	mov	r2, r3
 8020838:	4b08      	ldr	r3, [pc, #32]	; (802085c <Brr_Res_Status+0x6c>)
 802083a:	791b      	ldrb	r3, [r3, #4]
 802083c:	4808      	ldr	r0, [pc, #32]	; (8020860 <Brr_Res_Status+0x70>)
 802083e:	f009 f809 	bl	8029854 <printf_>
}
 8020842:	bf00      	nop
 8020844:	3708      	adds	r7, #8
 8020846:	46bd      	mov	sp, r7
 8020848:	bd80      	pop	{r7, pc}
 802084a:	bf00      	nop
 802084c:	24000147 	.word	0x24000147
 8020850:	24000550 	.word	0x24000550
 8020854:	08032010 	.word	0x08032010
 8020858:	2400015b 	.word	0x2400015b
 802085c:	24000558 	.word	0x24000558
 8020860:	08032034 	.word	0x08032034

08020864 <WaitTX>:

}
#endif

void WaitTX(void)
{
 8020864:	b580      	push	{r7, lr}
 8020866:	af00      	add	r7, sp, #0
    if (gfSubBarrierRunning == TRUE)
 8020868:	4b06      	ldr	r3, [pc, #24]	; (8020884 <WaitTX+0x20>)
 802086a:	781b      	ldrb	r3, [r3, #0]
 802086c:	2b00      	cmp	r3, #0
 802086e:	d001      	beq.n	8020874 <WaitTX+0x10>
    {
        U5_TxWait();
 8020870:	f000 faba 	bl	8020de8 <U5_TxWait>
    }

    if (gfMainBarrierRunning == TRUE)
 8020874:	4b04      	ldr	r3, [pc, #16]	; (8020888 <WaitTX+0x24>)
 8020876:	781b      	ldrb	r3, [r3, #0]
 8020878:	2b00      	cmp	r3, #0
 802087a:	d001      	beq.n	8020880 <WaitTX+0x1c>
    {
        U4_TxWait();
 802087c:	f000 faa0 	bl	8020dc0 <U4_TxWait>
    }
}
 8020880:	bf00      	nop
 8020882:	bd80      	pop	{r7, pc}
 8020884:	24000561 	.word	0x24000561
 8020888:	24000560 	.word	0x24000560

0802088c <SendSTX>:

void SendSTX(void)
{
 802088c:	b580      	push	{r7, lr}
 802088e:	af00      	add	r7, sp, #0
    WaitTX();
 8020890:	f7ff ffe8 	bl	8020864 <WaitTX>

    if (gfSubBarrierRunning == TRUE)
 8020894:	4b07      	ldr	r3, [pc, #28]	; (80208b4 <SendSTX+0x28>)
 8020896:	781b      	ldrb	r3, [r3, #0]
 8020898:	2b00      	cmp	r3, #0
 802089a:	d002      	beq.n	80208a2 <SendSTX+0x16>
    {
        U5_Putch(0xAA);
 802089c:	20aa      	movs	r0, #170	; 0xaa
 802089e:	f000 fac5 	bl	8020e2c <U5_Putch>
    }

    if (gfMainBarrierRunning == TRUE)
 80208a2:	4b05      	ldr	r3, [pc, #20]	; (80208b8 <SendSTX+0x2c>)
 80208a4:	781b      	ldrb	r3, [r3, #0]
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d002      	beq.n	80208b0 <SendSTX+0x24>
    {
        U4_Putch(0xAA);
 80208aa:	20aa      	movs	r0, #170	; 0xaa
 80208ac:	f000 fab0 	bl	8020e10 <U4_Putch>
    }
}
 80208b0:	bf00      	nop
 80208b2:	bd80      	pop	{r7, pc}
 80208b4:	24000561 	.word	0x24000561
 80208b8:	24000560 	.word	0x24000560

080208bc <SendBCC>:

void SendBCC(BYTE bBCC)
{
 80208bc:	b580      	push	{r7, lr}
 80208be:	b082      	sub	sp, #8
 80208c0:	af00      	add	r7, sp, #0
 80208c2:	4603      	mov	r3, r0
 80208c4:	71fb      	strb	r3, [r7, #7]
    WaitTX();
 80208c6:	f7ff ffcd 	bl	8020864 <WaitTX>

    if (gfSubBarrierRunning == TRUE)
 80208ca:	4b0a      	ldr	r3, [pc, #40]	; (80208f4 <SendBCC+0x38>)
 80208cc:	781b      	ldrb	r3, [r3, #0]
 80208ce:	2b00      	cmp	r3, #0
 80208d0:	d003      	beq.n	80208da <SendBCC+0x1e>
    {
        U5_Putch(bBCC);
 80208d2:	79fb      	ldrb	r3, [r7, #7]
 80208d4:	4618      	mov	r0, r3
 80208d6:	f000 faa9 	bl	8020e2c <U5_Putch>
    }

    if (gfMainBarrierRunning == TRUE)
 80208da:	4b07      	ldr	r3, [pc, #28]	; (80208f8 <SendBCC+0x3c>)
 80208dc:	781b      	ldrb	r3, [r3, #0]
 80208de:	2b00      	cmp	r3, #0
 80208e0:	d003      	beq.n	80208ea <SendBCC+0x2e>
    {
        U4_Putch(bBCC);
 80208e2:	79fb      	ldrb	r3, [r7, #7]
 80208e4:	4618      	mov	r0, r3
 80208e6:	f000 fa93 	bl	8020e10 <U4_Putch>
    }
}
 80208ea:	bf00      	nop
 80208ec:	3708      	adds	r7, #8
 80208ee:	46bd      	mov	sp, r7
 80208f0:	bd80      	pop	{r7, pc}
 80208f2:	bf00      	nop
 80208f4:	24000561 	.word	0x24000561
 80208f8:	24000560 	.word	0x24000560

080208fc <SendData>:

BYTE SendData(void)
{
 80208fc:	b580      	push	{r7, lr}
 80208fe:	b084      	sub	sp, #16
 8020900:	af00      	add	r7, sp, #0
    BYTE bBCC;
    BYTE *pbReqBuff;
    int nReqLen;

    bBCC = 0;
 8020902:	2300      	movs	r3, #0
 8020904:	73fb      	strb	r3, [r7, #15]
    pbReqBuff = req.Buff;
 8020906:	4b16      	ldr	r3, [pc, #88]	; (8020960 <SendData+0x64>)
 8020908:	60bb      	str	r3, [r7, #8]
    nReqLen = req.d.dataLen + FRAME_HEADER_LEN;
 802090a:	4b15      	ldr	r3, [pc, #84]	; (8020960 <SendData+0x64>)
 802090c:	789b      	ldrb	r3, [r3, #2]
 802090e:	3303      	adds	r3, #3
 8020910:	607b      	str	r3, [r7, #4]

    while (nReqLen--)
 8020912:	e01b      	b.n	802094c <SendData+0x50>
    {
        WaitTX();
 8020914:	f7ff ffa6 	bl	8020864 <WaitTX>
        if (gfSubBarrierRunning == TRUE)
 8020918:	4b12      	ldr	r3, [pc, #72]	; (8020964 <SendData+0x68>)
 802091a:	781b      	ldrb	r3, [r3, #0]
 802091c:	2b00      	cmp	r3, #0
 802091e:	d004      	beq.n	802092a <SendData+0x2e>
        {
            U5_Putch(*pbReqBuff);
 8020920:	68bb      	ldr	r3, [r7, #8]
 8020922:	781b      	ldrb	r3, [r3, #0]
 8020924:	4618      	mov	r0, r3
 8020926:	f000 fa81 	bl	8020e2c <U5_Putch>
        }

        if (gfMainBarrierRunning == TRUE)
 802092a:	4b0f      	ldr	r3, [pc, #60]	; (8020968 <SendData+0x6c>)
 802092c:	781b      	ldrb	r3, [r3, #0]
 802092e:	2b00      	cmp	r3, #0
 8020930:	d004      	beq.n	802093c <SendData+0x40>
        {
            U4_Putch(*pbReqBuff);
 8020932:	68bb      	ldr	r3, [r7, #8]
 8020934:	781b      	ldrb	r3, [r3, #0]
 8020936:	4618      	mov	r0, r3
 8020938:	f000 fa6a 	bl	8020e10 <U4_Putch>
        }

        bBCC ^= *pbReqBuff; // BCC calculation
 802093c:	68bb      	ldr	r3, [r7, #8]
 802093e:	781a      	ldrb	r2, [r3, #0]
 8020940:	7bfb      	ldrb	r3, [r7, #15]
 8020942:	4053      	eors	r3, r2
 8020944:	73fb      	strb	r3, [r7, #15]
        pbReqBuff++;
 8020946:	68bb      	ldr	r3, [r7, #8]
 8020948:	3301      	adds	r3, #1
 802094a:	60bb      	str	r3, [r7, #8]
    while (nReqLen--)
 802094c:	687b      	ldr	r3, [r7, #4]
 802094e:	1e5a      	subs	r2, r3, #1
 8020950:	607a      	str	r2, [r7, #4]
 8020952:	2b00      	cmp	r3, #0
 8020954:	d1de      	bne.n	8020914 <SendData+0x18>
    }

    return bBCC;
 8020956:	7bfb      	ldrb	r3, [r7, #15]
}
 8020958:	4618      	mov	r0, r3
 802095a:	3710      	adds	r7, #16
 802095c:	46bd      	mov	sp, r7
 802095e:	bd80      	pop	{r7, pc}
 8020960:	2400016c 	.word	0x2400016c
 8020964:	24000561 	.word	0x24000561
 8020968:	24000560 	.word	0x24000560

0802096c <MakeRequest>:
 * Out:      None
 * Return:   void
 * comments:
 *******************************************************************************/
void MakeRequest(BYTE command, BYTE *data, int nOptionLen)
{
 802096c:	b580      	push	{r7, lr}
 802096e:	b086      	sub	sp, #24
 8020970:	af00      	add	r7, sp, #0
 8020972:	4603      	mov	r3, r0
 8020974:	60b9      	str	r1, [r7, #8]
 8020976:	607a      	str	r2, [r7, #4]
 8020978:	73fb      	strb	r3, [r7, #15]
    BYTE bBCC;

    if (req.d.moduleSeq == MAX_SEQUENCE)
 802097a:	4b17      	ldr	r3, [pc, #92]	; (80209d8 <MakeRequest+0x6c>)
 802097c:	785b      	ldrb	r3, [r3, #1]
 802097e:	2bff      	cmp	r3, #255	; 0xff
 8020980:	d103      	bne.n	802098a <MakeRequest+0x1e>
        req.d.moduleSeq = 0;
 8020982:	4b15      	ldr	r3, [pc, #84]	; (80209d8 <MakeRequest+0x6c>)
 8020984:	2200      	movs	r2, #0
 8020986:	705a      	strb	r2, [r3, #1]
 8020988:	e007      	b.n	802099a <MakeRequest+0x2e>
    else
        req.d.moduleSeq = gbLastMainSeq_Swing++;
 802098a:	4b14      	ldr	r3, [pc, #80]	; (80209dc <MakeRequest+0x70>)
 802098c:	781b      	ldrb	r3, [r3, #0]
 802098e:	1c5a      	adds	r2, r3, #1
 8020990:	b2d1      	uxtb	r1, r2
 8020992:	4a12      	ldr	r2, [pc, #72]	; (80209dc <MakeRequest+0x70>)
 8020994:	7011      	strb	r1, [r2, #0]
 8020996:	4a10      	ldr	r2, [pc, #64]	; (80209d8 <MakeRequest+0x6c>)
 8020998:	7053      	strb	r3, [r2, #1]

    req.d.command = command;
 802099a:	4a0f      	ldr	r2, [pc, #60]	; (80209d8 <MakeRequest+0x6c>)
 802099c:	7bfb      	ldrb	r3, [r7, #15]
 802099e:	7013      	strb	r3, [r2, #0]
    req.d.dataLen = nOptionLen;
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	b2da      	uxtb	r2, r3
 80209a4:	4b0c      	ldr	r3, [pc, #48]	; (80209d8 <MakeRequest+0x6c>)
 80209a6:	709a      	strb	r2, [r3, #2]

    if (nOptionLen)
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	d005      	beq.n	80209ba <MakeRequest+0x4e>
        memcpy(req.d.data, data, nOptionLen);
 80209ae:	687b      	ldr	r3, [r7, #4]
 80209b0:	461a      	mov	r2, r3
 80209b2:	68b9      	ldr	r1, [r7, #8]
 80209b4:	480a      	ldr	r0, [pc, #40]	; (80209e0 <MakeRequest+0x74>)
 80209b6:	f010 f8c9 	bl	8030b4c <memcpy>


    SendSTX();
 80209ba:	f7ff ff67 	bl	802088c <SendSTX>
    bBCC = SendData();
 80209be:	f7ff ff9d 	bl	80208fc <SendData>
 80209c2:	4603      	mov	r3, r0
 80209c4:	75fb      	strb	r3, [r7, #23]
    SendBCC(bBCC);
 80209c6:	7dfb      	ldrb	r3, [r7, #23]
 80209c8:	4618      	mov	r0, r3
 80209ca:	f7ff ff77 	bl	80208bc <SendBCC>
}
 80209ce:	bf00      	nop
 80209d0:	3718      	adds	r7, #24
 80209d2:	46bd      	mov	sp, r7
 80209d4:	bd80      	pop	{r7, pc}
 80209d6:	bf00      	nop
 80209d8:	2400016c 	.word	0x2400016c
 80209dc:	2400017f 	.word	0x2400017f
 80209e0:	2400016f 	.word	0x2400016f

080209e4 <CheckProtocol_UART4>:
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/

int CheckProtocol_UART4(void)
{
 80209e4:	b580      	push	{r7, lr}
 80209e6:	b082      	sub	sp, #8
 80209e8:	af00      	add	r7, sp, #0
    BYTE rcvData;



  //  while (U1_Getch(&rcvData))			//스타트는 [AA] 다음 [len]이 들어오고 다음[Data]
	 while (IUart_RecvByte_check(COM4,&rcvData))
 80209ea:	e08a      	b.n	8020b02 <CheckProtocol_UART4+0x11e>
    {
        if (rcvData == 0xAA)
 80209ec:	79fb      	ldrb	r3, [r7, #7]
 80209ee:	2baa      	cmp	r3, #170	; 0xaa
 80209f0:	d10c      	bne.n	8020a0c <CheckProtocol_UART4+0x28>
        {
        	packetLen_U4 = 0;
 80209f2:	4b4b      	ldr	r3, [pc, #300]	; (8020b20 <CheckProtocol_UART4+0x13c>)
 80209f4:	2200      	movs	r2, #0
 80209f6:	601a      	str	r2, [r3, #0]
        	len_U4 = 0;
 80209f8:	4b4a      	ldr	r3, [pc, #296]	; (8020b24 <CheckProtocol_UART4+0x140>)
 80209fa:	2200      	movs	r2, #0
 80209fc:	601a      	str	r2, [r3, #0]
            BCC_U4 = 0;
 80209fe:	4b4a      	ldr	r3, [pc, #296]	; (8020b28 <CheckProtocol_UART4+0x144>)
 8020a00:	2200      	movs	r2, #0
 8020a02:	701a      	strb	r2, [r3, #0]
            rcvState_U4 = STATE_DATA_HEAD;
 8020a04:	4b49      	ldr	r3, [pc, #292]	; (8020b2c <CheckProtocol_UART4+0x148>)
 8020a06:	2205      	movs	r2, #5
 8020a08:	701a      	strb	r2, [r3, #0]
 8020a0a:	e07a      	b.n	8020b02 <CheckProtocol_UART4+0x11e>
        }
        else 
        {
            switch (rcvState_U4)
 8020a0c:	4b47      	ldr	r3, [pc, #284]	; (8020b2c <CheckProtocol_UART4+0x148>)
 8020a0e:	781b      	ldrb	r3, [r3, #0]
 8020a10:	2b06      	cmp	r3, #6
 8020a12:	d028      	beq.n	8020a66 <CheckProtocol_UART4+0x82>
 8020a14:	2b06      	cmp	r3, #6
 8020a16:	dc74      	bgt.n	8020b02 <CheckProtocol_UART4+0x11e>
 8020a18:	2b02      	cmp	r3, #2
 8020a1a:	d040      	beq.n	8020a9e <CheckProtocol_UART4+0xba>
 8020a1c:	2b05      	cmp	r3, #5
 8020a1e:	d170      	bne.n	8020b02 <CheckProtocol_UART4+0x11e>
            {
            case STATE_DATA_HEAD:
                rsp_U4.Buff[packetLen_U4++] = rcvData;
 8020a20:	4b3f      	ldr	r3, [pc, #252]	; (8020b20 <CheckProtocol_UART4+0x13c>)
 8020a22:	681b      	ldr	r3, [r3, #0]
 8020a24:	1c5a      	adds	r2, r3, #1
 8020a26:	493e      	ldr	r1, [pc, #248]	; (8020b20 <CheckProtocol_UART4+0x13c>)
 8020a28:	600a      	str	r2, [r1, #0]
 8020a2a:	79f9      	ldrb	r1, [r7, #7]
 8020a2c:	4a40      	ldr	r2, [pc, #256]	; (8020b30 <CheckProtocol_UART4+0x14c>)
 8020a2e:	54d1      	strb	r1, [r2, r3]
                BCC_U4 ^= rcvData;
 8020a30:	4b3d      	ldr	r3, [pc, #244]	; (8020b28 <CheckProtocol_UART4+0x144>)
 8020a32:	781a      	ldrb	r2, [r3, #0]
 8020a34:	79fb      	ldrb	r3, [r7, #7]
 8020a36:	4053      	eors	r3, r2
 8020a38:	b2da      	uxtb	r2, r3
 8020a3a:	4b3b      	ldr	r3, [pc, #236]	; (8020b28 <CheckProtocol_UART4+0x144>)
 8020a3c:	701a      	strb	r2, [r3, #0]
                if (packetLen_U4 == 3)
 8020a3e:	4b38      	ldr	r3, [pc, #224]	; (8020b20 <CheckProtocol_UART4+0x13c>)
 8020a40:	681b      	ldr	r3, [r3, #0]
 8020a42:	2b03      	cmp	r3, #3
 8020a44:	d15d      	bne.n	8020b02 <CheckProtocol_UART4+0x11e>
                {
                	len_U4 = rcvData;
 8020a46:	79fb      	ldrb	r3, [r7, #7]
 8020a48:	461a      	mov	r2, r3
 8020a4a:	4b36      	ldr	r3, [pc, #216]	; (8020b24 <CheckProtocol_UART4+0x140>)
 8020a4c:	601a      	str	r2, [r3, #0]
                    if (len_U4 == 0)
 8020a4e:	4b35      	ldr	r3, [pc, #212]	; (8020b24 <CheckProtocol_UART4+0x140>)
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	d103      	bne.n	8020a5e <CheckProtocol_UART4+0x7a>
                    {
                    	rcvState_U4 = STATE_DATA_BCC;
 8020a56:	4b35      	ldr	r3, [pc, #212]	; (8020b2c <CheckProtocol_UART4+0x148>)
 8020a58:	2202      	movs	r2, #2
 8020a5a:	701a      	strb	r2, [r3, #0]
 8020a5c:	e051      	b.n	8020b02 <CheckProtocol_UART4+0x11e>
                    }
                    else
                    {
                    	rcvState_U4 = STATE_DATA_BODY;
 8020a5e:	4b33      	ldr	r3, [pc, #204]	; (8020b2c <CheckProtocol_UART4+0x148>)
 8020a60:	2206      	movs	r2, #6
 8020a62:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 8020a64:	e04d      	b.n	8020b02 <CheckProtocol_UART4+0x11e>
            case STATE_DATA_BODY:
            	rsp_U4.Buff[packetLen_U4++] = rcvData;
 8020a66:	4b2e      	ldr	r3, [pc, #184]	; (8020b20 <CheckProtocol_UART4+0x13c>)
 8020a68:	681b      	ldr	r3, [r3, #0]
 8020a6a:	1c5a      	adds	r2, r3, #1
 8020a6c:	492c      	ldr	r1, [pc, #176]	; (8020b20 <CheckProtocol_UART4+0x13c>)
 8020a6e:	600a      	str	r2, [r1, #0]
 8020a70:	79f9      	ldrb	r1, [r7, #7]
 8020a72:	4a2f      	ldr	r2, [pc, #188]	; (8020b30 <CheckProtocol_UART4+0x14c>)
 8020a74:	54d1      	strb	r1, [r2, r3]
            	BCC_U4 ^= rcvData;
 8020a76:	4b2c      	ldr	r3, [pc, #176]	; (8020b28 <CheckProtocol_UART4+0x144>)
 8020a78:	781a      	ldrb	r2, [r3, #0]
 8020a7a:	79fb      	ldrb	r3, [r7, #7]
 8020a7c:	4053      	eors	r3, r2
 8020a7e:	b2da      	uxtb	r2, r3
 8020a80:	4b29      	ldr	r3, [pc, #164]	; (8020b28 <CheckProtocol_UART4+0x144>)
 8020a82:	701a      	strb	r2, [r3, #0]
            	len_U4--;
 8020a84:	4b27      	ldr	r3, [pc, #156]	; (8020b24 <CheckProtocol_UART4+0x140>)
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	3b01      	subs	r3, #1
 8020a8a:	4a26      	ldr	r2, [pc, #152]	; (8020b24 <CheckProtocol_UART4+0x140>)
 8020a8c:	6013      	str	r3, [r2, #0]

                if (len_U4 == 0)
 8020a8e:	4b25      	ldr	r3, [pc, #148]	; (8020b24 <CheckProtocol_UART4+0x140>)
 8020a90:	681b      	ldr	r3, [r3, #0]
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	d135      	bne.n	8020b02 <CheckProtocol_UART4+0x11e>
                {
                	rcvState_U4 = STATE_DATA_BCC;
 8020a96:	4b25      	ldr	r3, [pc, #148]	; (8020b2c <CheckProtocol_UART4+0x148>)
 8020a98:	2202      	movs	r2, #2
 8020a9a:	701a      	strb	r2, [r3, #0]
                }
                break;
 8020a9c:	e031      	b.n	8020b02 <CheckProtocol_UART4+0x11e>
            case STATE_DATA_BCC:
            	rcvState_U4 = STATE_STX_WAIT;
 8020a9e:	4b23      	ldr	r3, [pc, #140]	; (8020b2c <CheckProtocol_UART4+0x148>)
 8020aa0:	2200      	movs	r2, #0
 8020aa2:	701a      	strb	r2, [r3, #0]
                if (BCC_U4 == rcvData)
 8020aa4:	4b20      	ldr	r3, [pc, #128]	; (8020b28 <CheckProtocol_UART4+0x144>)
 8020aa6:	781a      	ldrb	r2, [r3, #0]
 8020aa8:	79fb      	ldrb	r3, [r7, #7]
 8020aaa:	429a      	cmp	r2, r3
 8020aac:	d116      	bne.n	8020adc <CheckProtocol_UART4+0xf8>
                {
                    if (rsp_U4.d.dataLen != (BYTE)(packetLen_U4 - FRAME_HEADER_LEN))
 8020aae:	4b20      	ldr	r3, [pc, #128]	; (8020b30 <CheckProtocol_UART4+0x14c>)
 8020ab0:	789a      	ldrb	r2, [r3, #2]
 8020ab2:	4b1b      	ldr	r3, [pc, #108]	; (8020b20 <CheckProtocol_UART4+0x13c>)
 8020ab4:	681b      	ldr	r3, [r3, #0]
 8020ab6:	b2db      	uxtb	r3, r3
 8020ab8:	3b03      	subs	r3, #3
 8020aba:	b2db      	uxtb	r3, r3
 8020abc:	429a      	cmp	r2, r3
 8020abe:	d00b      	beq.n	8020ad8 <CheckProtocol_UART4+0xf4>
                    {
                       // PRINTL("U4 LENGTH ERR: %d - %d", rsp_U4.d.dataLen, (packetLen_U4 - FRAME_HEADER_LEN));
                    	 printf("U4 LENGTH ERR: %d - %d  \n", rsp_U4.d.dataLen, (packetLen_U4 - FRAME_HEADER_LEN));
 8020ac0:	4b1b      	ldr	r3, [pc, #108]	; (8020b30 <CheckProtocol_UART4+0x14c>)
 8020ac2:	789b      	ldrb	r3, [r3, #2]
 8020ac4:	4619      	mov	r1, r3
 8020ac6:	4b16      	ldr	r3, [pc, #88]	; (8020b20 <CheckProtocol_UART4+0x13c>)
 8020ac8:	681b      	ldr	r3, [r3, #0]
 8020aca:	3b03      	subs	r3, #3
 8020acc:	461a      	mov	r2, r3
 8020ace:	4819      	ldr	r0, [pc, #100]	; (8020b34 <CheckProtocol_UART4+0x150>)
 8020ad0:	f008 fec0 	bl	8029854 <printf_>
                        return ERR_WRONG_CMD_LEN;
 8020ad4:	230a      	movs	r3, #10
 8020ad6:	e01f      	b.n	8020b18 <CheckProtocol_UART4+0x134>
                    }
                    else
                    {
                        return SUCCESS;
 8020ad8:	2300      	movs	r3, #0
 8020ada:	e01d      	b.n	8020b18 <CheckProtocol_UART4+0x134>
                    }
                }
                else
                {
                    //PRINTL("U1 BCC ERR. len: %d, BCC: %d, rcv: %d", rsp_U4.d.dataLen, BCC_U4, rcvData);
                	 printf("U4 BCC ERR. len: %d, BCC: %d, rcv: %d  \n", rsp_U4.d.dataLen, BCC_U4, rcvData);
 8020adc:	4b14      	ldr	r3, [pc, #80]	; (8020b30 <CheckProtocol_UART4+0x14c>)
 8020ade:	789b      	ldrb	r3, [r3, #2]
 8020ae0:	4619      	mov	r1, r3
 8020ae2:	4b11      	ldr	r3, [pc, #68]	; (8020b28 <CheckProtocol_UART4+0x144>)
 8020ae4:	781b      	ldrb	r3, [r3, #0]
 8020ae6:	461a      	mov	r2, r3
 8020ae8:	79fb      	ldrb	r3, [r7, #7]
 8020aea:	4813      	ldr	r0, [pc, #76]	; (8020b38 <CheckProtocol_UART4+0x154>)
 8020aec:	f008 feb2 	bl	8029854 <printf_>
                    Print2Hex("", rsp_U4.Buff, packetLen_U4);
 8020af0:	4b0b      	ldr	r3, [pc, #44]	; (8020b20 <CheckProtocol_UART4+0x13c>)
 8020af2:	681b      	ldr	r3, [r3, #0]
 8020af4:	461a      	mov	r2, r3
 8020af6:	490e      	ldr	r1, [pc, #56]	; (8020b30 <CheckProtocol_UART4+0x14c>)
 8020af8:	4810      	ldr	r0, [pc, #64]	; (8020b3c <CheckProtocol_UART4+0x158>)
 8020afa:	f00f ff67 	bl	80309cc <Print2Hex>
                    return ERR_BCC;
 8020afe:	2305      	movs	r3, #5
 8020b00:	e00a      	b.n	8020b18 <CheckProtocol_UART4+0x134>
	 while (IUart_RecvByte_check(COM4,&rcvData))
 8020b02:	1dfb      	adds	r3, r7, #7
 8020b04:	4619      	mov	r1, r3
 8020b06:	2003      	movs	r0, #3
 8020b08:	f005 f9fe 	bl	8025f08 <IUart_RecvByte_check>
 8020b0c:	4603      	mov	r3, r0
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	f47f af6c 	bne.w	80209ec <CheckProtocol_UART4+0x8>
            }
        }
        
    }

    return FAIL;
 8020b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020b18:	4618      	mov	r0, r3
 8020b1a:	3708      	adds	r7, #8
 8020b1c:	46bd      	mov	sp, r7
 8020b1e:	bd80      	pop	{r7, pc}
 8020b20:	24000184 	.word	0x24000184
 8020b24:	24000188 	.word	0x24000188
 8020b28:	2400018c 	.word	0x2400018c
 8020b2c:	2400018d 	.word	0x2400018d
 8020b30:	24000144 	.word	0x24000144
 8020b34:	08032054 	.word	0x08032054
 8020b38:	08032070 	.word	0x08032070
 8020b3c:	0803209c 	.word	0x0803209c

08020b40 <CheckProtocol_UART5>:
 *			    - else        : no command is received
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/
int CheckProtocol_UART5(void)
{
 8020b40:	b580      	push	{r7, lr}
 8020b42:	b082      	sub	sp, #8
 8020b44:	af00      	add	r7, sp, #0
    static int packetLen_U5 = 0;
    BYTE rcvData;

   // while (U3_Getch(&rcvData))

	while (IUart_RecvByte_check(COM5,&rcvData))
 8020b46:	e08a      	b.n	8020c5e <CheckProtocol_UART5+0x11e>
    {
        if (rcvData == 0xAA)
 8020b48:	79fb      	ldrb	r3, [r7, #7]
 8020b4a:	2baa      	cmp	r3, #170	; 0xaa
 8020b4c:	d10c      	bne.n	8020b68 <CheckProtocol_UART5+0x28>
        {
        	packetLen_U5 = 0;
 8020b4e:	4b4b      	ldr	r3, [pc, #300]	; (8020c7c <CheckProtocol_UART5+0x13c>)
 8020b50:	2200      	movs	r2, #0
 8020b52:	601a      	str	r2, [r3, #0]
            len_U5 = 0;
 8020b54:	4b4a      	ldr	r3, [pc, #296]	; (8020c80 <CheckProtocol_UART5+0x140>)
 8020b56:	2200      	movs	r2, #0
 8020b58:	601a      	str	r2, [r3, #0]
            BCC_U5 = 0;
 8020b5a:	4b4a      	ldr	r3, [pc, #296]	; (8020c84 <CheckProtocol_UART5+0x144>)
 8020b5c:	2200      	movs	r2, #0
 8020b5e:	701a      	strb	r2, [r3, #0]
            rcvState_U5 = STATE_DATA_HEAD;
 8020b60:	4b49      	ldr	r3, [pc, #292]	; (8020c88 <CheckProtocol_UART5+0x148>)
 8020b62:	2205      	movs	r2, #5
 8020b64:	701a      	strb	r2, [r3, #0]
 8020b66:	e07a      	b.n	8020c5e <CheckProtocol_UART5+0x11e>
        }
        else
        {
            switch (rcvState_U5)
 8020b68:	4b47      	ldr	r3, [pc, #284]	; (8020c88 <CheckProtocol_UART5+0x148>)
 8020b6a:	781b      	ldrb	r3, [r3, #0]
 8020b6c:	2b06      	cmp	r3, #6
 8020b6e:	d028      	beq.n	8020bc2 <CheckProtocol_UART5+0x82>
 8020b70:	2b06      	cmp	r3, #6
 8020b72:	dc74      	bgt.n	8020c5e <CheckProtocol_UART5+0x11e>
 8020b74:	2b02      	cmp	r3, #2
 8020b76:	d040      	beq.n	8020bfa <CheckProtocol_UART5+0xba>
 8020b78:	2b05      	cmp	r3, #5
 8020b7a:	d170      	bne.n	8020c5e <CheckProtocol_UART5+0x11e>
            {
            case STATE_DATA_HEAD:
                rsp_U5.Buff[packetLen_U5++] = rcvData;
 8020b7c:	4b3f      	ldr	r3, [pc, #252]	; (8020c7c <CheckProtocol_UART5+0x13c>)
 8020b7e:	681b      	ldr	r3, [r3, #0]
 8020b80:	1c5a      	adds	r2, r3, #1
 8020b82:	493e      	ldr	r1, [pc, #248]	; (8020c7c <CheckProtocol_UART5+0x13c>)
 8020b84:	600a      	str	r2, [r1, #0]
 8020b86:	79f9      	ldrb	r1, [r7, #7]
 8020b88:	4a40      	ldr	r2, [pc, #256]	; (8020c8c <CheckProtocol_UART5+0x14c>)
 8020b8a:	54d1      	strb	r1, [r2, r3]
                BCC_U5 ^= rcvData;
 8020b8c:	4b3d      	ldr	r3, [pc, #244]	; (8020c84 <CheckProtocol_UART5+0x144>)
 8020b8e:	781a      	ldrb	r2, [r3, #0]
 8020b90:	79fb      	ldrb	r3, [r7, #7]
 8020b92:	4053      	eors	r3, r2
 8020b94:	b2da      	uxtb	r2, r3
 8020b96:	4b3b      	ldr	r3, [pc, #236]	; (8020c84 <CheckProtocol_UART5+0x144>)
 8020b98:	701a      	strb	r2, [r3, #0]
                if (packetLen_U5 == 3)
 8020b9a:	4b38      	ldr	r3, [pc, #224]	; (8020c7c <CheckProtocol_UART5+0x13c>)
 8020b9c:	681b      	ldr	r3, [r3, #0]
 8020b9e:	2b03      	cmp	r3, #3
 8020ba0:	d15d      	bne.n	8020c5e <CheckProtocol_UART5+0x11e>
                {
                	len_U5 = rcvData;
 8020ba2:	79fb      	ldrb	r3, [r7, #7]
 8020ba4:	461a      	mov	r2, r3
 8020ba6:	4b36      	ldr	r3, [pc, #216]	; (8020c80 <CheckProtocol_UART5+0x140>)
 8020ba8:	601a      	str	r2, [r3, #0]
                    if (len_U5 == 0)
 8020baa:	4b35      	ldr	r3, [pc, #212]	; (8020c80 <CheckProtocol_UART5+0x140>)
 8020bac:	681b      	ldr	r3, [r3, #0]
 8020bae:	2b00      	cmp	r3, #0
 8020bb0:	d103      	bne.n	8020bba <CheckProtocol_UART5+0x7a>
                    {
                    	rcvState_U5 = STATE_DATA_BCC;
 8020bb2:	4b35      	ldr	r3, [pc, #212]	; (8020c88 <CheckProtocol_UART5+0x148>)
 8020bb4:	2202      	movs	r2, #2
 8020bb6:	701a      	strb	r2, [r3, #0]
 8020bb8:	e051      	b.n	8020c5e <CheckProtocol_UART5+0x11e>
                    }
                    else
                    {
                    	rcvState_U5 = STATE_DATA_BODY;
 8020bba:	4b33      	ldr	r3, [pc, #204]	; (8020c88 <CheckProtocol_UART5+0x148>)
 8020bbc:	2206      	movs	r2, #6
 8020bbe:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 8020bc0:	e04d      	b.n	8020c5e <CheckProtocol_UART5+0x11e>
            case STATE_DATA_BODY:
            	rsp_U5.Buff[packetLen_U5++] = rcvData;
 8020bc2:	4b2e      	ldr	r3, [pc, #184]	; (8020c7c <CheckProtocol_UART5+0x13c>)
 8020bc4:	681b      	ldr	r3, [r3, #0]
 8020bc6:	1c5a      	adds	r2, r3, #1
 8020bc8:	492c      	ldr	r1, [pc, #176]	; (8020c7c <CheckProtocol_UART5+0x13c>)
 8020bca:	600a      	str	r2, [r1, #0]
 8020bcc:	79f9      	ldrb	r1, [r7, #7]
 8020bce:	4a2f      	ldr	r2, [pc, #188]	; (8020c8c <CheckProtocol_UART5+0x14c>)
 8020bd0:	54d1      	strb	r1, [r2, r3]
                BCC_U5 ^= rcvData;
 8020bd2:	4b2c      	ldr	r3, [pc, #176]	; (8020c84 <CheckProtocol_UART5+0x144>)
 8020bd4:	781a      	ldrb	r2, [r3, #0]
 8020bd6:	79fb      	ldrb	r3, [r7, #7]
 8020bd8:	4053      	eors	r3, r2
 8020bda:	b2da      	uxtb	r2, r3
 8020bdc:	4b29      	ldr	r3, [pc, #164]	; (8020c84 <CheckProtocol_UART5+0x144>)
 8020bde:	701a      	strb	r2, [r3, #0]
                len_U5--;
 8020be0:	4b27      	ldr	r3, [pc, #156]	; (8020c80 <CheckProtocol_UART5+0x140>)
 8020be2:	681b      	ldr	r3, [r3, #0]
 8020be4:	3b01      	subs	r3, #1
 8020be6:	4a26      	ldr	r2, [pc, #152]	; (8020c80 <CheckProtocol_UART5+0x140>)
 8020be8:	6013      	str	r3, [r2, #0]

                if (len_U5 == 0)
 8020bea:	4b25      	ldr	r3, [pc, #148]	; (8020c80 <CheckProtocol_UART5+0x140>)
 8020bec:	681b      	ldr	r3, [r3, #0]
 8020bee:	2b00      	cmp	r3, #0
 8020bf0:	d135      	bne.n	8020c5e <CheckProtocol_UART5+0x11e>
                {
                	rcvState_U5 = STATE_DATA_BCC;
 8020bf2:	4b25      	ldr	r3, [pc, #148]	; (8020c88 <CheckProtocol_UART5+0x148>)
 8020bf4:	2202      	movs	r2, #2
 8020bf6:	701a      	strb	r2, [r3, #0]
                }
                break;
 8020bf8:	e031      	b.n	8020c5e <CheckProtocol_UART5+0x11e>
            case STATE_DATA_BCC:
            	rcvState_U5 = STATE_STX_WAIT;
 8020bfa:	4b23      	ldr	r3, [pc, #140]	; (8020c88 <CheckProtocol_UART5+0x148>)
 8020bfc:	2200      	movs	r2, #0
 8020bfe:	701a      	strb	r2, [r3, #0]
                if (BCC_U5 == rcvData)
 8020c00:	4b20      	ldr	r3, [pc, #128]	; (8020c84 <CheckProtocol_UART5+0x144>)
 8020c02:	781a      	ldrb	r2, [r3, #0]
 8020c04:	79fb      	ldrb	r3, [r7, #7]
 8020c06:	429a      	cmp	r2, r3
 8020c08:	d116      	bne.n	8020c38 <CheckProtocol_UART5+0xf8>
                {
                    if (rsp_U5.d.dataLen != (BYTE)(packetLen_U5 - FRAME_HEADER_LEN))
 8020c0a:	4b20      	ldr	r3, [pc, #128]	; (8020c8c <CheckProtocol_UART5+0x14c>)
 8020c0c:	789a      	ldrb	r2, [r3, #2]
 8020c0e:	4b1b      	ldr	r3, [pc, #108]	; (8020c7c <CheckProtocol_UART5+0x13c>)
 8020c10:	681b      	ldr	r3, [r3, #0]
 8020c12:	b2db      	uxtb	r3, r3
 8020c14:	3b03      	subs	r3, #3
 8020c16:	b2db      	uxtb	r3, r3
 8020c18:	429a      	cmp	r2, r3
 8020c1a:	d00b      	beq.n	8020c34 <CheckProtocol_UART5+0xf4>
                    {
                        //PRINTL("U3 LENGTH ERR: %d - %d", rsp_U5.d.dataLen, (packetLen_U5 - FRAME_HEADER_LEN));
                    	 printf("U5 LENGTH ERR: %d - %d  \n", rsp_U5.d.dataLen, (packetLen_U5 - FRAME_HEADER_LEN));
 8020c1c:	4b1b      	ldr	r3, [pc, #108]	; (8020c8c <CheckProtocol_UART5+0x14c>)
 8020c1e:	789b      	ldrb	r3, [r3, #2]
 8020c20:	4619      	mov	r1, r3
 8020c22:	4b16      	ldr	r3, [pc, #88]	; (8020c7c <CheckProtocol_UART5+0x13c>)
 8020c24:	681b      	ldr	r3, [r3, #0]
 8020c26:	3b03      	subs	r3, #3
 8020c28:	461a      	mov	r2, r3
 8020c2a:	4819      	ldr	r0, [pc, #100]	; (8020c90 <CheckProtocol_UART5+0x150>)
 8020c2c:	f008 fe12 	bl	8029854 <printf_>
                        return ERR_WRONG_CMD_LEN;
 8020c30:	230a      	movs	r3, #10
 8020c32:	e01f      	b.n	8020c74 <CheckProtocol_UART5+0x134>
                    }
                    else
                    {
                        return SUCCESS;
 8020c34:	2300      	movs	r3, #0
 8020c36:	e01d      	b.n	8020c74 <CheckProtocol_UART5+0x134>
                    }
                }
                else
                {
                   // PRINTL("U3 BCC ERR. len: %d, BCC: %d, rcv: %d", rsp_U5.d.dataLen, BCC_U5, rcvData);
                	 printf("U5 BCC ERR. len: %d, BCC: %d, rcv: %d  \n", rsp_U5.d.dataLen, BCC_U5, rcvData);
 8020c38:	4b14      	ldr	r3, [pc, #80]	; (8020c8c <CheckProtocol_UART5+0x14c>)
 8020c3a:	789b      	ldrb	r3, [r3, #2]
 8020c3c:	4619      	mov	r1, r3
 8020c3e:	4b11      	ldr	r3, [pc, #68]	; (8020c84 <CheckProtocol_UART5+0x144>)
 8020c40:	781b      	ldrb	r3, [r3, #0]
 8020c42:	461a      	mov	r2, r3
 8020c44:	79fb      	ldrb	r3, [r7, #7]
 8020c46:	4813      	ldr	r0, [pc, #76]	; (8020c94 <CheckProtocol_UART5+0x154>)
 8020c48:	f008 fe04 	bl	8029854 <printf_>
                    Print2Hex("", rsp_U5.Buff, packetLen_U5);
 8020c4c:	4b0b      	ldr	r3, [pc, #44]	; (8020c7c <CheckProtocol_UART5+0x13c>)
 8020c4e:	681b      	ldr	r3, [r3, #0]
 8020c50:	461a      	mov	r2, r3
 8020c52:	490e      	ldr	r1, [pc, #56]	; (8020c8c <CheckProtocol_UART5+0x14c>)
 8020c54:	4810      	ldr	r0, [pc, #64]	; (8020c98 <CheckProtocol_UART5+0x158>)
 8020c56:	f00f feb9 	bl	80309cc <Print2Hex>
                    return ERR_BCC;
 8020c5a:	2305      	movs	r3, #5
 8020c5c:	e00a      	b.n	8020c74 <CheckProtocol_UART5+0x134>
	while (IUart_RecvByte_check(COM5,&rcvData))
 8020c5e:	1dfb      	adds	r3, r7, #7
 8020c60:	4619      	mov	r1, r3
 8020c62:	2004      	movs	r0, #4
 8020c64:	f005 f950 	bl	8025f08 <IUart_RecvByte_check>
 8020c68:	4603      	mov	r3, r0
 8020c6a:	2b00      	cmp	r3, #0
 8020c6c:	f47f af6c 	bne.w	8020b48 <CheckProtocol_UART5+0x8>
                }
            }
        }
    }

    return FAIL;
 8020c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020c74:	4618      	mov	r0, r3
 8020c76:	3708      	adds	r7, #8
 8020c78:	46bd      	mov	sp, r7
 8020c7a:	bd80      	pop	{r7, pc}
 8020c7c:	24000190 	.word	0x24000190
 8020c80:	24000194 	.word	0x24000194
 8020c84:	24000198 	.word	0x24000198
 8020c88:	24000199 	.word	0x24000199
 8020c8c:	24000158 	.word	0x24000158
 8020c90:	080320a0 	.word	0x080320a0
 8020c94:	080320bc 	.word	0x080320bc
 8020c98:	0803209c 	.word	0x0803209c

08020c9c <ProcessCommand_Barrier>:
 *			- ERR_ILLEGAL_CMD  : command code is not defined
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/
int ProcessCommand_Barrier(bool isMain)
{
 8020c9c:	b580      	push	{r7, lr}
 8020c9e:	b084      	sub	sp, #16
 8020ca0:	af00      	add	r7, sp, #0
 8020ca2:	4603      	mov	r3, r0
 8020ca4:	71fb      	strb	r3, [r7, #7]
    BYTE cmd;
    if (isMain == TRUE)
 8020ca6:	79fb      	ldrb	r3, [r7, #7]
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	d003      	beq.n	8020cb4 <ProcessCommand_Barrier+0x18>
    {
        cmd = rsp_U4.d.command;
 8020cac:	4b2d      	ldr	r3, [pc, #180]	; (8020d64 <ProcessCommand_Barrier+0xc8>)
 8020cae:	781b      	ldrb	r3, [r3, #0]
 8020cb0:	73fb      	strb	r3, [r7, #15]
 8020cb2:	e002      	b.n	8020cba <ProcessCommand_Barrier+0x1e>
    }
    else
    {
        cmd = rsp_U5.d.command;
 8020cb4:	4b2c      	ldr	r3, [pc, #176]	; (8020d68 <ProcessCommand_Barrier+0xcc>)
 8020cb6:	781b      	ldrb	r3, [r3, #0]
 8020cb8:	73fb      	strb	r3, [r7, #15]
    }
    switch (cmd) // command
 8020cba:	7bfb      	ldrb	r3, [r7, #15]
 8020cbc:	2b04      	cmp	r3, #4
 8020cbe:	dc37      	bgt.n	8020d30 <ProcessCommand_Barrier+0x94>
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	dc27      	bgt.n	8020d14 <ProcessCommand_Barrier+0x78>
 8020cc4:	e046      	b.n	8020d54 <ProcessCommand_Barrier+0xb8>
 8020cc6:	3b90      	subs	r3, #144	; 0x90
 8020cc8:	2b0f      	cmp	r3, #15
 8020cca:	d843      	bhi.n	8020d54 <ProcessCommand_Barrier+0xb8>
 8020ccc:	a201      	add	r2, pc, #4	; (adr r2, 8020cd4 <ProcessCommand_Barrier+0x38>)
 8020cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020cd2:	bf00      	nop
 8020cd4:	08020d59 	.word	0x08020d59
 8020cd8:	08020d59 	.word	0x08020d59
 8020cdc:	08020d3b 	.word	0x08020d3b
 8020ce0:	08020d59 	.word	0x08020d59
 8020ce4:	08020d59 	.word	0x08020d59
 8020ce8:	08020d59 	.word	0x08020d59
 8020cec:	08020d55 	.word	0x08020d55
 8020cf0:	08020d55 	.word	0x08020d55
 8020cf4:	08020d55 	.word	0x08020d55
 8020cf8:	08020d55 	.word	0x08020d55
 8020cfc:	08020d55 	.word	0x08020d55
 8020d00:	08020d55 	.word	0x08020d55
 8020d04:	08020d59 	.word	0x08020d59
 8020d08:	08020d59 	.word	0x08020d59
 8020d0c:	08020d59 	.word	0x08020d59
 8020d10:	08020d59 	.word	0x08020d59
 8020d14:	3b01      	subs	r3, #1
 8020d16:	2b03      	cmp	r3, #3
 8020d18:	d81c      	bhi.n	8020d54 <ProcessCommand_Barrier+0xb8>
 8020d1a:	a201      	add	r2, pc, #4	; (adr r2, 8020d20 <ProcessCommand_Barrier+0x84>)
 8020d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020d20:	08020d45 	.word	0x08020d45
 8020d24:	08020d49 	.word	0x08020d49
 8020d28:	08020d4d 	.word	0x08020d4d
 8020d2c:	08020d51 	.word	0x08020d51
 8020d30:	2b9f      	cmp	r3, #159	; 0x9f
 8020d32:	dc0f      	bgt.n	8020d54 <ProcessCommand_Barrier+0xb8>
 8020d34:	2b90      	cmp	r3, #144	; 0x90
 8020d36:	dac6      	bge.n	8020cc6 <ProcessCommand_Barrier+0x2a>
 8020d38:	e00c      	b.n	8020d54 <ProcessCommand_Barrier+0xb8>
        break;
    case CMD_GET_PARAM_SUB:
        // CMDGetGCUOpMode();
        break;
    case CMD_GET_STATUS_MAIN:
        Brr_Res_Status(isMain);
 8020d3a:	79fb      	ldrb	r3, [r7, #7]
 8020d3c:	4618      	mov	r0, r3
 8020d3e:	f7ff fd57 	bl	80207f0 <Brr_Res_Status>
        break;
 8020d42:	e00a      	b.n	8020d5a <ProcessCommand_Barrier+0xbe>
        break;
    case CMD_GET_IAP_VERSION_SUB:
        // CMDGetGCUOpMode();
        break;
    case CMD_ACK:
        return SUCCESS;
 8020d44:	2300      	movs	r3, #0
 8020d46:	e009      	b.n	8020d5c <ProcessCommand_Barrier+0xc0>
    case CMD_NAK:
        return SUCCESS;
 8020d48:	2300      	movs	r3, #0
 8020d4a:	e007      	b.n	8020d5c <ProcessCommand_Barrier+0xc0>
    case CMD_MSG_ERR:
        return SUCCESS;
 8020d4c:	2300      	movs	r3, #0
 8020d4e:	e005      	b.n	8020d5c <ProcessCommand_Barrier+0xc0>
    case CMD_MSG_DUP:
        return SUCCESS;
 8020d50:	2300      	movs	r3, #0
 8020d52:	e003      	b.n	8020d5c <ProcessCommand_Barrier+0xc0>
    default:
        return SUCCESS;
 8020d54:	2300      	movs	r3, #0
 8020d56:	e001      	b.n	8020d5c <ProcessCommand_Barrier+0xc0>
        break;
 8020d58:	bf00      	nop
    }

    return SUCCESS;
 8020d5a:	2300      	movs	r3, #0
}
 8020d5c:	4618      	mov	r0, r3
 8020d5e:	3710      	adds	r7, #16
 8020d60:	46bd      	mov	sp, r7
 8020d62:	bd80      	pop	{r7, pc}
 8020d64:	24000144 	.word	0x24000144
 8020d68:	24000158 	.word	0x24000158

08020d6c <ProcessComm_Barrier>:
 * comments: it checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it makes action refer to the command
 *           from Host.
 *******************************************************************************/
void ProcessComm_Barrier(void)
{
 8020d6c:	b580      	push	{r7, lr}
 8020d6e:	b082      	sub	sp, #8
 8020d70:	af00      	add	r7, sp, #0
    // Changed an order. Slave barrier first.
    int nError = CheckProtocol_UART5();
 8020d72:	f7ff fee5 	bl	8020b40 <CheckProtocol_UART5>
 8020d76:	6078      	str	r0, [r7, #4]
    if (nError == SUCCESS)
 8020d78:	687b      	ldr	r3, [r7, #4]
 8020d7a:	2b00      	cmp	r3, #0
 8020d7c:	d108      	bne.n	8020d90 <ProcessComm_Barrier+0x24>
    {
        if (ProcessCommand_Barrier(FALSE) != SUCCESS)
 8020d7e:	2000      	movs	r0, #0
 8020d80:	f7ff ff8c 	bl	8020c9c <ProcessCommand_Barrier>
 8020d84:	4603      	mov	r3, r0
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d002      	beq.n	8020d90 <ProcessComm_Barrier+0x24>
        {
            //PRINTL("UART3 ERR");
        	printf("UART5 ERR  \n");
 8020d8a:	480b      	ldr	r0, [pc, #44]	; (8020db8 <ProcessComm_Barrier+0x4c>)
 8020d8c:	f008 fd62 	bl	8029854 <printf_>
        }        
    }

    nError = CheckProtocol_UART4();
 8020d90:	f7ff fe28 	bl	80209e4 <CheckProtocol_UART4>
 8020d94:	6078      	str	r0, [r7, #4]
    if (nError == SUCCESS)
 8020d96:	687b      	ldr	r3, [r7, #4]
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	d108      	bne.n	8020dae <ProcessComm_Barrier+0x42>
    {
        if (ProcessCommand_Barrier(TRUE) != SUCCESS)
 8020d9c:	2001      	movs	r0, #1
 8020d9e:	f7ff ff7d 	bl	8020c9c <ProcessCommand_Barrier>
 8020da2:	4603      	mov	r3, r0
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d002      	beq.n	8020dae <ProcessComm_Barrier+0x42>
        {
            // TODO: Do we need the retry logic?
        	printf("UART4 ERR  \n");
 8020da8:	4804      	ldr	r0, [pc, #16]	; (8020dbc <ProcessComm_Barrier+0x50>)
 8020daa:	f008 fd53 	bl	8029854 <printf_>
        }
    }
}
 8020dae:	bf00      	nop
 8020db0:	3708      	adds	r7, #8
 8020db2:	46bd      	mov	sp, r7
 8020db4:	bd80      	pop	{r7, pc}
 8020db6:	bf00      	nop
 8020db8:	080320e8 	.word	0x080320e8
 8020dbc:	080320f8 	.word	0x080320f8

08020dc0 <U4_TxWait>:
}
*/


void U4_TxWait(void)
{
 8020dc0:	b480      	push	{r7}
 8020dc2:	af00      	add	r7, sp, #0
	while ((iUartTable[COM4].hUart->Instance->ISR & UART_FLAG_TXE) == RESET)
 8020dc4:	bf00      	nop
 8020dc6:	4b07      	ldr	r3, [pc, #28]	; (8020de4 <U4_TxWait+0x24>)
 8020dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020dca:	681b      	ldr	r3, [r3, #0]
 8020dcc:	69db      	ldr	r3, [r3, #28]
 8020dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	d0f7      	beq.n	8020dc6 <U4_TxWait+0x6>
		;
}
 8020dd6:	bf00      	nop
 8020dd8:	bf00      	nop
 8020dda:	46bd      	mov	sp, r7
 8020ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020de0:	4770      	bx	lr
 8020de2:	bf00      	nop
 8020de4:	240019d8 	.word	0x240019d8

08020de8 <U5_TxWait>:


void U5_TxWait(void)
{
 8020de8:	b480      	push	{r7}
 8020dea:	af00      	add	r7, sp, #0
	while ((iUartTable[COM5].hUart->Instance->ISR & UART_FLAG_TXE) == RESET)
 8020dec:	bf00      	nop
 8020dee:	4b07      	ldr	r3, [pc, #28]	; (8020e0c <U5_TxWait+0x24>)
 8020df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020df2:	681b      	ldr	r3, [r3, #0]
 8020df4:	69db      	ldr	r3, [r3, #28]
 8020df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	d0f7      	beq.n	8020dee <U5_TxWait+0x6>
		;
}
 8020dfe:	bf00      	nop
 8020e00:	bf00      	nop
 8020e02:	46bd      	mov	sp, r7
 8020e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e08:	4770      	bx	lr
 8020e0a:	bf00      	nop
 8020e0c:	240019d8 	.word	0x240019d8

08020e10 <U4_Putch>:

void U4_Putch(BYTE c)
{
 8020e10:	b580      	push	{r7, lr}
 8020e12:	b082      	sub	sp, #8
 8020e14:	af00      	add	r7, sp, #0
 8020e16:	4603      	mov	r3, r0
 8020e18:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM4, (uint8_t)c);
 8020e1a:	79fb      	ldrb	r3, [r7, #7]
 8020e1c:	4619      	mov	r1, r3
 8020e1e:	2003      	movs	r0, #3
 8020e20:	f004 ffe0 	bl	8025de4 <IUart_SendByte>
}
 8020e24:	bf00      	nop
 8020e26:	3708      	adds	r7, #8
 8020e28:	46bd      	mov	sp, r7
 8020e2a:	bd80      	pop	{r7, pc}

08020e2c <U5_Putch>:

void U5_Putch(BYTE c)
{
 8020e2c:	b580      	push	{r7, lr}
 8020e2e:	b082      	sub	sp, #8
 8020e30:	af00      	add	r7, sp, #0
 8020e32:	4603      	mov	r3, r0
 8020e34:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM5, (uint8_t)c);
 8020e36:	79fb      	ldrb	r3, [r7, #7]
 8020e38:	4619      	mov	r1, r3
 8020e3a:	2004      	movs	r0, #4
 8020e3c:	f004 ffd2 	bl	8025de4 <IUart_SendByte>
}
 8020e40:	bf00      	nop
 8020e42:	3708      	adds	r7, #8
 8020e44:	46bd      	mov	sp, r7
 8020e46:	bd80      	pop	{r7, pc}

08020e48 <SetDefaultOpMode>:
int nBuzzerCount[BUZZER_COUNT];

extern T_PASS_SEN_SWING psenNew;				// T_PASS_SEN structure does not exist		pms
/* Setting Functions ------------------------------------------------------*/
void SetDefaultOpMode(void)
{
 8020e48:	b480      	push	{r7}
 8020e4a:	af00      	add	r7, sp, #0
    gCurGCUOpMode.bServiceMode_EN = NO_SERVICE;
 8020e4c:	4b0a      	ldr	r3, [pc, #40]	; (8020e78 <SetDefaultOpMode+0x30>)
 8020e4e:	2200      	movs	r2, #0
 8020e50:	701a      	strb	r2, [r3, #0]
    gCurGCUOpMode.bServiceMode_EX = NO_SERVICE;
 8020e52:	4b09      	ldr	r3, [pc, #36]	; (8020e78 <SetDefaultOpMode+0x30>)
 8020e54:	2200      	movs	r2, #0
 8020e56:	705a      	strb	r2, [r3, #1]
    gCurGCUOpMode.bEmergencyMaint = MODE_NONE;
 8020e58:	4b07      	ldr	r3, [pc, #28]	; (8020e78 <SetDefaultOpMode+0x30>)
 8020e5a:	2200      	movs	r2, #0
 8020e5c:	709a      	strb	r2, [r3, #2]
    gCurGCUOpMode.bFlapDoorMode = FD_MODE_OPEN;
 8020e5e:	4b06      	ldr	r3, [pc, #24]	; (8020e78 <SetDefaultOpMode+0x30>)
 8020e60:	2201      	movs	r2, #1
 8020e62:	70da      	strb	r2, [r3, #3]
 8020e64:	4b04      	ldr	r3, [pc, #16]	; (8020e78 <SetDefaultOpMode+0x30>)
 8020e66:	681b      	ldr	r3, [r3, #0]
 8020e68:	461a      	mov	r2, r3

    memcpy(&gNewGCUOpMode, &gCurGCUOpMode, sizeof(T_GCU_OP_MODE));
 8020e6a:	4b04      	ldr	r3, [pc, #16]	; (8020e7c <SetDefaultOpMode+0x34>)
 8020e6c:	601a      	str	r2, [r3, #0]
}
 8020e6e:	bf00      	nop
 8020e70:	46bd      	mov	sp, r7
 8020e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e76:	4770      	bx	lr
 8020e78:	24000548 	.word	0x24000548
 8020e7c:	2400054c 	.word	0x2400054c

08020e80 <SetDefaultParameter>:

void SetDefaultParameter(void)
{
 8020e80:	b480      	push	{r7}
 8020e82:	af00      	add	r7, sp, #0
    gGCUParameter.bPassageType = PASSAGE_TYPE_S;
 8020e84:	4b1a      	ldr	r3, [pc, #104]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020e86:	2253      	movs	r2, #83	; 0x53
 8020e88:	701a      	strb	r2, [r3, #0]
    gGCUParameter.bPassageMode = PASS_MODE_EASY;
 8020e8a:	4b19      	ldr	r3, [pc, #100]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020e8c:	2201      	movs	r2, #1
 8020e8e:	705a      	strb	r2, [r3, #1]
    gGCUParameter.bAlarmMode = ALARM_MODE_POLL;
 8020e90:	4b17      	ldr	r3, [pc, #92]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020e92:	2200      	movs	r2, #0
 8020e94:	709a      	strb	r2, [r3, #2]
    gGCUParameter.bAuthType = AUTH_TYPE_TTL;
 8020e96:	4b16      	ldr	r3, [pc, #88]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020e98:	2201      	movs	r2, #1
 8020e9a:	70da      	strb	r2, [r3, #3]
    gGCUParameter.bAuthTimeOut = DEFAULT_AUTH_TIMEOUT;
 8020e9c:	4b14      	ldr	r3, [pc, #80]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020e9e:	2214      	movs	r2, #20
 8020ea0:	711a      	strb	r2, [r3, #4]
    gGCUParameter.bCriticalZone = ALARM_ZONE_NONE;
 8020ea2:	4b13      	ldr	r3, [pc, #76]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020ea4:	2200      	movs	r2, #0
 8020ea6:	715a      	strb	r2, [r3, #5]
    gGCUParameter.bCounterZone = ALARM_ZONE_NONE;
 8020ea8:	4b11      	ldr	r3, [pc, #68]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020eaa:	2200      	movs	r2, #0
 8020eac:	719a      	strb	r2, [r3, #6]
    gGCUParameter.bEMGTimeout = DEFAULT_EMG_TIMEOUT;
 8020eae:	4b10      	ldr	r3, [pc, #64]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020eb0:	222d      	movs	r2, #45	; 0x2d
 8020eb2:	71da      	strb	r2, [r3, #7]
    gGCUParameter.bSensorBlockTimeout = DEFAULT_SENSOR_BLOCK_TIMEOUT;
 8020eb4:	4b0e      	ldr	r3, [pc, #56]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020eb6:	22b4      	movs	r2, #180	; 0xb4
 8020eb8:	721a      	strb	r2, [r3, #8]
    gGCUParameter.bBarrierOpenTimeout = DEFAULT_BARRIER_OPEN_TIMEOUT;
 8020eba:	4b0d      	ldr	r3, [pc, #52]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020ebc:	2203      	movs	r2, #3
 8020ebe:	725a      	strb	r2, [r3, #9]
    gGCUParameter.bAutoEmergency = ON;
 8020ec0:	4b0b      	ldr	r3, [pc, #44]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020ec2:	2201      	movs	r2, #1
 8020ec4:	731a      	strb	r2, [r3, #12]
    gGCUParameter.bCheckChild = ON;
 8020ec6:	4b0a      	ldr	r3, [pc, #40]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020ec8:	2201      	movs	r2, #1
 8020eca:	735a      	strb	r2, [r3, #13]
    gGCUParameter.bAlarmTimeout = DEFAULT_ALARM_TIMEOUT;
 8020ecc:	4b08      	ldr	r3, [pc, #32]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020ece:	2205      	movs	r2, #5
 8020ed0:	729a      	strb	r2, [r3, #10]
    gGCUParameter.bGateType = STANDARD;
 8020ed2:	4b07      	ldr	r3, [pc, #28]	; (8020ef0 <SetDefaultParameter+0x70>)
 8020ed4:	2200      	movs	r2, #0
 8020ed6:	739a      	strb	r2, [r3, #14]

    gdwTimeoutSafety = SAFETY_TIMEOUT_STD;
 8020ed8:	4b06      	ldr	r3, [pc, #24]	; (8020ef4 <SetDefaultParameter+0x74>)
 8020eda:	220a      	movs	r2, #10
 8020edc:	601a      	str	r2, [r3, #0]
    gdwTimeoutLuggage = LUGGAGE_LIMIT_STD;
 8020ede:	4b06      	ldr	r3, [pc, #24]	; (8020ef8 <SetDefaultParameter+0x78>)
 8020ee0:	2296      	movs	r2, #150	; 0x96
 8020ee2:	601a      	str	r2, [r3, #0]
}
 8020ee4:	bf00      	nop
 8020ee6:	46bd      	mov	sp, r7
 8020ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eec:	4770      	bx	lr
 8020eee:	bf00      	nop
 8020ef0:	24000514 	.word	0x24000514
 8020ef4:	240001bc 	.word	0x240001bc
 8020ef8:	240001c0 	.word	0x240001c0

08020efc <SetDefaultStatus>:

void SetDefaultStatus(void)
{
 8020efc:	b480      	push	{r7}
 8020efe:	af00      	add	r7, sp, #0
    gGCUStatus.bAuthCount_EN = 0;
 8020f00:	4b0f      	ldr	r3, [pc, #60]	; (8020f40 <SetDefaultStatus+0x44>)
 8020f02:	2200      	movs	r2, #0
 8020f04:	711a      	strb	r2, [r3, #4]
    gGCUStatus.bAuthCount_EX = 0;
 8020f06:	4b0e      	ldr	r3, [pc, #56]	; (8020f40 <SetDefaultStatus+0x44>)
 8020f08:	2200      	movs	r2, #0
 8020f0a:	715a      	strb	r2, [r3, #5]
    gGCUStatus.PassageAlarm.bAlarm = 0;
 8020f0c:	4b0c      	ldr	r3, [pc, #48]	; (8020f40 <SetDefaultStatus+0x44>)
 8020f0e:	2200      	movs	r2, #0
 8020f10:	721a      	strb	r2, [r3, #8]
    gGCUStatus.ModuleAlarm.bAlarm = 0;
 8020f12:	4b0b      	ldr	r3, [pc, #44]	; (8020f40 <SetDefaultStatus+0x44>)
 8020f14:	2200      	movs	r2, #0
 8020f16:	731a      	strb	r2, [r3, #12]
#if BART_IO
    gGCUStatus.bMaintenanceDoorSw = (RD_SWITCH & MASK_SDOOR);		//door mask 0xff
 8020f18:	4b0a      	ldr	r3, [pc, #40]	; (8020f44 <SetDefaultStatus+0x48>)
 8020f1a:	781b      	ldrb	r3, [r3, #0]
 8020f1c:	b2da      	uxtb	r2, r3
 8020f1e:	4b08      	ldr	r3, [pc, #32]	; (8020f40 <SetDefaultStatus+0x44>)
 8020f20:	745a      	strb	r2, [r3, #17]
#else
    gGCUStatus.bMaintenanceDoorSw = (RD_SWITCH1 & MASK_SDOOR1) | ((RD_SWITCH2 & MASK_SDOOR2) << 4);
#endif
    gGCUStatus.bUPSStatus = 0x06;
 8020f22:	4b07      	ldr	r3, [pc, #28]	; (8020f40 <SetDefaultStatus+0x44>)
 8020f24:	2206      	movs	r2, #6
 8020f26:	749a      	strb	r2, [r3, #18]
    gGCUStatus.bDoorForcedOpen = OFF;
 8020f28:	4b05      	ldr	r3, [pc, #20]	; (8020f40 <SetDefaultStatus+0x44>)
 8020f2a:	2200      	movs	r2, #0
 8020f2c:	755a      	strb	r2, [r3, #21]
    gbDoorForecedOpen = OFF;
 8020f2e:	4b06      	ldr	r3, [pc, #24]	; (8020f48 <SetDefaultStatus+0x4c>)
 8020f30:	2200      	movs	r2, #0
 8020f32:	701a      	strb	r2, [r3, #0]
}
 8020f34:	bf00      	nop
 8020f36:	46bd      	mov	sp, r7
 8020f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f3c:	4770      	bx	lr
 8020f3e:	bf00      	nop
 8020f40:	24000524 	.word	0x24000524
 8020f44:	60000300 	.word	0x60000300
 8020f48:	240004ad 	.word	0x240004ad

08020f4c <ApplyStatusMode>:

void ApplyStatusMode(void)
{
 8020f4c:	b480      	push	{r7}
 8020f4e:	af00      	add	r7, sp, #0
    gGCUStatus.ModeStatus.b.nServiceMode_EN = gCurGCUOpMode.bServiceMode_EN;
 8020f50:	4b1a      	ldr	r3, [pc, #104]	; (8020fbc <ApplyStatusMode+0x70>)
 8020f52:	781b      	ldrb	r3, [r3, #0]
 8020f54:	019b      	lsls	r3, r3, #6
 8020f56:	b25b      	sxtb	r3, r3
 8020f58:	119b      	asrs	r3, r3, #6
 8020f5a:	b259      	sxtb	r1, r3
 8020f5c:	4a18      	ldr	r2, [pc, #96]	; (8020fc0 <ApplyStatusMode+0x74>)
 8020f5e:	7813      	ldrb	r3, [r2, #0]
 8020f60:	f361 0301 	bfi	r3, r1, #0, #2
 8020f64:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nServiceMode_EX = gCurGCUOpMode.bServiceMode_EX;
 8020f66:	4b15      	ldr	r3, [pc, #84]	; (8020fbc <ApplyStatusMode+0x70>)
 8020f68:	785b      	ldrb	r3, [r3, #1]
 8020f6a:	019b      	lsls	r3, r3, #6
 8020f6c:	b25b      	sxtb	r3, r3
 8020f6e:	119b      	asrs	r3, r3, #6
 8020f70:	b259      	sxtb	r1, r3
 8020f72:	4a13      	ldr	r2, [pc, #76]	; (8020fc0 <ApplyStatusMode+0x74>)
 8020f74:	7813      	ldrb	r3, [r2, #0]
 8020f76:	f361 0383 	bfi	r3, r1, #2, #2
 8020f7a:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nEmergencyMode = (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY);
 8020f7c:	4b0f      	ldr	r3, [pc, #60]	; (8020fbc <ApplyStatusMode+0x70>)
 8020f7e:	789b      	ldrb	r3, [r3, #2]
 8020f80:	019b      	lsls	r3, r3, #6
 8020f82:	b25b      	sxtb	r3, r3
 8020f84:	119b      	asrs	r3, r3, #6
 8020f86:	b259      	sxtb	r1, r3
 8020f88:	4a0d      	ldr	r2, [pc, #52]	; (8020fc0 <ApplyStatusMode+0x74>)
 8020f8a:	7813      	ldrb	r3, [r2, #0]
 8020f8c:	f361 1305 	bfi	r3, r1, #4, #2
 8020f90:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nMaintenanceMode = (gCurGCUOpMode.bEmergencyMaint << 7) & 1;
 8020f92:	4a0b      	ldr	r2, [pc, #44]	; (8020fc0 <ApplyStatusMode+0x74>)
 8020f94:	7813      	ldrb	r3, [r2, #0]
 8020f96:	f36f 1386 	bfc	r3, #6, #1
 8020f9a:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nFlapDoorMode = gCurGCUOpMode.bFlapDoorMode;
 8020f9c:	4b07      	ldr	r3, [pc, #28]	; (8020fbc <ApplyStatusMode+0x70>)
 8020f9e:	78db      	ldrb	r3, [r3, #3]
 8020fa0:	01db      	lsls	r3, r3, #7
 8020fa2:	b25b      	sxtb	r3, r3
 8020fa4:	11db      	asrs	r3, r3, #7
 8020fa6:	b259      	sxtb	r1, r3
 8020fa8:	4a05      	ldr	r2, [pc, #20]	; (8020fc0 <ApplyStatusMode+0x74>)
 8020faa:	7813      	ldrb	r3, [r2, #0]
 8020fac:	f361 13c7 	bfi	r3, r1, #7, #1
 8020fb0:	7013      	strb	r3, [r2, #0]
}
 8020fb2:	bf00      	nop
 8020fb4:	46bd      	mov	sp, r7
 8020fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fba:	4770      	bx	lr
 8020fbc:	24000548 	.word	0x24000548
 8020fc0:	24000524 	.word	0x24000524

08020fc4 <SetNewOpMode>:

void SetNewOpMode(T_GCU_OP_MODE *pNewMode)
{
 8020fc4:	b580      	push	{r7, lr}
 8020fc6:	b082      	sub	sp, #8
 8020fc8:	af00      	add	r7, sp, #0
 8020fca:	6078      	str	r0, [r7, #4]
    if (pNewMode->bServiceMode_EN > FREE_SERVICE)
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	781b      	ldrb	r3, [r3, #0]
 8020fd0:	2b02      	cmp	r3, #2
 8020fd2:	d903      	bls.n	8020fdc <SetNewOpMode+0x18>
        pNewMode->bServiceMode_EN = gCurGCUOpMode.bServiceMode_EN;
 8020fd4:	4b18      	ldr	r3, [pc, #96]	; (8021038 <SetNewOpMode+0x74>)
 8020fd6:	781a      	ldrb	r2, [r3, #0]
 8020fd8:	687b      	ldr	r3, [r7, #4]
 8020fda:	701a      	strb	r2, [r3, #0]

    if (pNewMode->bServiceMode_EX > FREE_SERVICE)
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	785b      	ldrb	r3, [r3, #1]
 8020fe0:	2b02      	cmp	r3, #2
 8020fe2:	d903      	bls.n	8020fec <SetNewOpMode+0x28>
        pNewMode->bServiceMode_EX = gCurGCUOpMode.bServiceMode_EX;
 8020fe4:	4b14      	ldr	r3, [pc, #80]	; (8021038 <SetNewOpMode+0x74>)
 8020fe6:	785a      	ldrb	r2, [r3, #1]
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	705a      	strb	r2, [r3, #1]

    if (pNewMode->bFlapDoorMode > FD_MODE_OPEN)
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	78db      	ldrb	r3, [r3, #3]
 8020ff0:	2b01      	cmp	r3, #1
 8020ff2:	d903      	bls.n	8020ffc <SetNewOpMode+0x38>
        pNewMode->bFlapDoorMode = gCurGCUOpMode.bFlapDoorMode;
 8020ff4:	4b10      	ldr	r3, [pc, #64]	; (8021038 <SetNewOpMode+0x74>)
 8020ff6:	78da      	ldrb	r2, [r3, #3]
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	70da      	strb	r2, [r3, #3]
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	681b      	ldr	r3, [r3, #0]
 8021000:	461a      	mov	r2, r3

    memcpy(&gNewGCUOpMode, pNewMode, sizeof(T_GCU_OP_MODE));
 8021002:	4b0e      	ldr	r3, [pc, #56]	; (802103c <SetNewOpMode+0x78>)
 8021004:	601a      	str	r2, [r3, #0]

    if (gNewGCUOpMode.bEmergencyMaint)
 8021006:	4b0d      	ldr	r3, [pc, #52]	; (802103c <SetNewOpMode+0x78>)
 8021008:	789b      	ldrb	r3, [r3, #2]
 802100a:	2b00      	cmp	r3, #0
 802100c:	d00c      	beq.n	8021028 <SetNewOpMode+0x64>
 802100e:	4b0b      	ldr	r3, [pc, #44]	; (802103c <SetNewOpMode+0x78>)
 8021010:	681b      	ldr	r3, [r3, #0]
 8021012:	461a      	mov	r2, r3
    {
        // If emergency or maint mode, apply new mode immediately.
        memcpy(&gCurGCUOpMode, &gNewGCUOpMode, sizeof(T_GCU_OP_MODE));
 8021014:	4b08      	ldr	r3, [pc, #32]	; (8021038 <SetNewOpMode+0x74>)
 8021016:	601a      	str	r2, [r3, #0]
        ApplyStatusMode();
 8021018:	f7ff ff98 	bl	8020f4c <ApplyStatusMode>
        InitPassageMode();
 802101c:	f001 f970 	bl	8022300 <InitPassageMode>
        gfModeChanged = FALSE;
 8021020:	4b07      	ldr	r3, [pc, #28]	; (8021040 <SetNewOpMode+0x7c>)
 8021022:	2200      	movs	r2, #0
 8021024:	701a      	strb	r2, [r3, #0]
    else
    {
        // If in service mode, decide to apply new mode by passenger check logic (refer to CheckModeChange()).
        gfModeChanged = TRUE;
    }
}
 8021026:	e002      	b.n	802102e <SetNewOpMode+0x6a>
        gfModeChanged = TRUE;
 8021028:	4b05      	ldr	r3, [pc, #20]	; (8021040 <SetNewOpMode+0x7c>)
 802102a:	2201      	movs	r2, #1
 802102c:	701a      	strb	r2, [r3, #0]
}
 802102e:	bf00      	nop
 8021030:	3708      	adds	r7, #8
 8021032:	46bd      	mov	sp, r7
 8021034:	bd80      	pop	{r7, pc}
 8021036:	bf00      	nop
 8021038:	24000548 	.word	0x24000548
 802103c:	2400054c 	.word	0x2400054c
 8021040:	240001a7 	.word	0x240001a7

08021044 <CheckModeChange>:

void CheckModeChange(void)
{
 8021044:	b580      	push	{r7, lr}
 8021046:	af00      	add	r7, sp, #0
    if (gfModeChanged == TRUE && (gGCUStatus.bAuthCount_EN == 0) && (gGCUStatus.bAuthCount_EX == 0))
 8021048:	4b16      	ldr	r3, [pc, #88]	; (80210a4 <CheckModeChange+0x60>)
 802104a:	781b      	ldrb	r3, [r3, #0]
 802104c:	2b00      	cmp	r3, #0
 802104e:	d027      	beq.n	80210a0 <CheckModeChange+0x5c>
 8021050:	4b15      	ldr	r3, [pc, #84]	; (80210a8 <CheckModeChange+0x64>)
 8021052:	791b      	ldrb	r3, [r3, #4]
 8021054:	b2db      	uxtb	r3, r3
 8021056:	2b00      	cmp	r3, #0
 8021058:	d122      	bne.n	80210a0 <CheckModeChange+0x5c>
 802105a:	4b13      	ldr	r3, [pc, #76]	; (80210a8 <CheckModeChange+0x64>)
 802105c:	795b      	ldrb	r3, [r3, #5]
 802105e:	b2db      	uxtb	r3, r3
 8021060:	2b00      	cmp	r3, #0
 8021062:	d11d      	bne.n	80210a0 <CheckModeChange+0x5c>
    {
        //PRINTL(" [CheckModeChange] Old mode EX:%d/EN:%d", gCurGCUOpMode.bServiceMode_EX, gCurGCUOpMode.bServiceMode_EN);
        //PRINTL(" [CheckModeChange] New mode EX:%d/EN:%d", gNewGCUOpMode.bServiceMode_EX, gNewGCUOpMode.bServiceMode_EN);

        printf(" [CheckModeChange] Old mode EX:%d/EN:%d  \n", gCurGCUOpMode.bServiceMode_EX, gCurGCUOpMode.bServiceMode_EN);
 8021064:	4b11      	ldr	r3, [pc, #68]	; (80210ac <CheckModeChange+0x68>)
 8021066:	785b      	ldrb	r3, [r3, #1]
 8021068:	4619      	mov	r1, r3
 802106a:	4b10      	ldr	r3, [pc, #64]	; (80210ac <CheckModeChange+0x68>)
 802106c:	781b      	ldrb	r3, [r3, #0]
 802106e:	461a      	mov	r2, r3
 8021070:	480f      	ldr	r0, [pc, #60]	; (80210b0 <CheckModeChange+0x6c>)
 8021072:	f008 fbef 	bl	8029854 <printf_>
        printf(" [CheckModeChange] New mode EX:%d/EN:%d  \n", gNewGCUOpMode.bServiceMode_EX, gNewGCUOpMode.bServiceMode_EN);
 8021076:	4b0f      	ldr	r3, [pc, #60]	; (80210b4 <CheckModeChange+0x70>)
 8021078:	785b      	ldrb	r3, [r3, #1]
 802107a:	4619      	mov	r1, r3
 802107c:	4b0d      	ldr	r3, [pc, #52]	; (80210b4 <CheckModeChange+0x70>)
 802107e:	781b      	ldrb	r3, [r3, #0]
 8021080:	461a      	mov	r2, r3
 8021082:	480d      	ldr	r0, [pc, #52]	; (80210b8 <CheckModeChange+0x74>)
 8021084:	f008 fbe6 	bl	8029854 <printf_>
    	gfModeChanged = FALSE;
 8021088:	4b06      	ldr	r3, [pc, #24]	; (80210a4 <CheckModeChange+0x60>)
 802108a:	2200      	movs	r2, #0
 802108c:	701a      	strb	r2, [r3, #0]
 802108e:	4b09      	ldr	r3, [pc, #36]	; (80210b4 <CheckModeChange+0x70>)
 8021090:	681b      	ldr	r3, [r3, #0]
 8021092:	461a      	mov	r2, r3
        memcpy(&gCurGCUOpMode, &gNewGCUOpMode, sizeof(T_GCU_OP_MODE));
 8021094:	4b05      	ldr	r3, [pc, #20]	; (80210ac <CheckModeChange+0x68>)
 8021096:	601a      	str	r2, [r3, #0]
        ApplyStatusMode();
 8021098:	f7ff ff58 	bl	8020f4c <ApplyStatusMode>
        InitPassageMode();
 802109c:	f001 f930 	bl	8022300 <InitPassageMode>
    }
}
 80210a0:	bf00      	nop
 80210a2:	bd80      	pop	{r7, pc}
 80210a4:	240001a7 	.word	0x240001a7
 80210a8:	24000524 	.word	0x24000524
 80210ac:	24000548 	.word	0x24000548
 80210b0:	08032108 	.word	0x08032108
 80210b4:	2400054c 	.word	0x2400054c
 80210b8:	08032134 	.word	0x08032134

080210bc <GetCurrentOpMode>:

void GetCurrentOpMode(T_GCU_OP_MODE *pCurMode)
{
 80210bc:	b480      	push	{r7}
 80210be:	b083      	sub	sp, #12
 80210c0:	af00      	add	r7, sp, #0
 80210c2:	6078      	str	r0, [r7, #4]
 80210c4:	4b05      	ldr	r3, [pc, #20]	; (80210dc <GetCurrentOpMode+0x20>)
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	461a      	mov	r2, r3
    memcpy(pCurMode, &gCurGCUOpMode, sizeof(T_GCU_OP_MODE));
 80210ca:	687b      	ldr	r3, [r7, #4]
 80210cc:	601a      	str	r2, [r3, #0]
}
 80210ce:	bf00      	nop
 80210d0:	370c      	adds	r7, #12
 80210d2:	46bd      	mov	sp, r7
 80210d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210d8:	4770      	bx	lr
 80210da:	bf00      	nop
 80210dc:	24000548 	.word	0x24000548

080210e0 <SetGCUParameter>:

void SetGCUParameter(T_GCU_PARAMETER *pNewParameter, int nLen)
{
 80210e0:	b490      	push	{r4, r7}
 80210e2:	b082      	sub	sp, #8
 80210e4:	af00      	add	r7, sp, #0
 80210e6:	6078      	str	r0, [r7, #4]
 80210e8:	6039      	str	r1, [r7, #0]
    pNewParameter->bPassageType = PASSAGE_TYPE_S;
 80210ea:	687b      	ldr	r3, [r7, #4]
 80210ec:	2253      	movs	r2, #83	; 0x53
 80210ee:	701a      	strb	r2, [r3, #0]

    if (pNewParameter->bPassageMode > PASS_MODE_EASY)
 80210f0:	687b      	ldr	r3, [r7, #4]
 80210f2:	785b      	ldrb	r3, [r3, #1]
 80210f4:	2b01      	cmp	r3, #1
 80210f6:	d903      	bls.n	8021100 <SetGCUParameter+0x20>
        pNewParameter->bPassageMode = gGCUParameter.bPassageMode;
 80210f8:	4b1d      	ldr	r3, [pc, #116]	; (8021170 <SetGCUParameter+0x90>)
 80210fa:	785a      	ldrb	r2, [r3, #1]
 80210fc:	687b      	ldr	r3, [r7, #4]
 80210fe:	705a      	strb	r2, [r3, #1]

    if (pNewParameter->bAlarmMode > ALARM_MODE_ACTIVE)
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	789b      	ldrb	r3, [r3, #2]
 8021104:	2b01      	cmp	r3, #1
 8021106:	d903      	bls.n	8021110 <SetGCUParameter+0x30>
        pNewParameter->bAlarmMode = gGCUParameter.bAlarmMode;
 8021108:	4b19      	ldr	r3, [pc, #100]	; (8021170 <SetGCUParameter+0x90>)
 802110a:	789a      	ldrb	r2, [r3, #2]
 802110c:	687b      	ldr	r3, [r7, #4]
 802110e:	709a      	strb	r2, [r3, #2]

    if (pNewParameter->bAuthType > AUTH_TYPE_TTL)
 8021110:	687b      	ldr	r3, [r7, #4]
 8021112:	78db      	ldrb	r3, [r3, #3]
 8021114:	2b01      	cmp	r3, #1
 8021116:	d903      	bls.n	8021120 <SetGCUParameter+0x40>
        pNewParameter->bAuthType = gGCUParameter.bAuthType;
 8021118:	4b15      	ldr	r3, [pc, #84]	; (8021170 <SetGCUParameter+0x90>)
 802111a:	78da      	ldrb	r2, [r3, #3]
 802111c:	687b      	ldr	r3, [r7, #4]
 802111e:	70da      	strb	r2, [r3, #3]

    if (pNewParameter->bCriticalZone > ALARM_ZONE3)
 8021120:	687b      	ldr	r3, [r7, #4]
 8021122:	795b      	ldrb	r3, [r3, #5]
 8021124:	2b03      	cmp	r3, #3
 8021126:	d903      	bls.n	8021130 <SetGCUParameter+0x50>
        pNewParameter->bCriticalZone = gGCUParameter.bCriticalZone;
 8021128:	4b11      	ldr	r3, [pc, #68]	; (8021170 <SetGCUParameter+0x90>)
 802112a:	795a      	ldrb	r2, [r3, #5]
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	715a      	strb	r2, [r3, #5]

    if (pNewParameter->bCounterZone > ALARM_ZONE3)
 8021130:	687b      	ldr	r3, [r7, #4]
 8021132:	799b      	ldrb	r3, [r3, #6]
 8021134:	2b03      	cmp	r3, #3
 8021136:	d903      	bls.n	8021140 <SetGCUParameter+0x60>
        pNewParameter->bCounterZone = gGCUParameter.bCounterZone;
 8021138:	4b0d      	ldr	r3, [pc, #52]	; (8021170 <SetGCUParameter+0x90>)
 802113a:	799a      	ldrb	r2, [r3, #6]
 802113c:	687b      	ldr	r3, [r7, #4]
 802113e:	719a      	strb	r2, [r3, #6]

    gdwTimeoutSafety = SAFETY_TIMEOUT_STD;
 8021140:	4b0c      	ldr	r3, [pc, #48]	; (8021174 <SetGCUParameter+0x94>)
 8021142:	220a      	movs	r2, #10
 8021144:	601a      	str	r2, [r3, #0]
    gdwTimeoutLuggage = LUGGAGE_LIMIT_STD;
 8021146:	4b0c      	ldr	r3, [pc, #48]	; (8021178 <SetGCUParameter+0x98>)
 8021148:	2296      	movs	r2, #150	; 0x96
 802114a:	601a      	str	r2, [r3, #0]

    memcpy(&gGCUParameter, pNewParameter, sizeof(T_GCU_PARAMETER));
 802114c:	4b08      	ldr	r3, [pc, #32]	; (8021170 <SetGCUParameter+0x90>)
 802114e:	687a      	ldr	r2, [r7, #4]
 8021150:	6814      	ldr	r4, [r2, #0]
 8021152:	6850      	ldr	r0, [r2, #4]
 8021154:	6891      	ldr	r1, [r2, #8]
 8021156:	601c      	str	r4, [r3, #0]
 8021158:	6058      	str	r0, [r3, #4]
 802115a:	6099      	str	r1, [r3, #8]
 802115c:	8991      	ldrh	r1, [r2, #12]
 802115e:	7b92      	ldrb	r2, [r2, #14]
 8021160:	8199      	strh	r1, [r3, #12]
 8021162:	739a      	strb	r2, [r3, #14]
}
 8021164:	bf00      	nop
 8021166:	3708      	adds	r7, #8
 8021168:	46bd      	mov	sp, r7
 802116a:	bc90      	pop	{r4, r7}
 802116c:	4770      	bx	lr
 802116e:	bf00      	nop
 8021170:	24000514 	.word	0x24000514
 8021174:	240001bc 	.word	0x240001bc
 8021178:	240001c0 	.word	0x240001c0

0802117c <GetGCUParameter>:

void GetGCUParameter(T_GCU_PARAMETER *pCurParameter)
{
 802117c:	b490      	push	{r4, r7}
 802117e:	b082      	sub	sp, #8
 8021180:	af00      	add	r7, sp, #0
 8021182:	6078      	str	r0, [r7, #4]
    memcpy(pCurParameter, &gGCUParameter, sizeof(T_GCU_PARAMETER));
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	4a08      	ldr	r2, [pc, #32]	; (80211a8 <GetGCUParameter+0x2c>)
 8021188:	6814      	ldr	r4, [r2, #0]
 802118a:	6850      	ldr	r0, [r2, #4]
 802118c:	6891      	ldr	r1, [r2, #8]
 802118e:	601c      	str	r4, [r3, #0]
 8021190:	6058      	str	r0, [r3, #4]
 8021192:	6099      	str	r1, [r3, #8]
 8021194:	8991      	ldrh	r1, [r2, #12]
 8021196:	7b92      	ldrb	r2, [r2, #14]
 8021198:	8199      	strh	r1, [r3, #12]
 802119a:	739a      	strb	r2, [r3, #14]
}
 802119c:	bf00      	nop
 802119e:	3708      	adds	r7, #8
 80211a0:	46bd      	mov	sp, r7
 80211a2:	bc90      	pop	{r4, r7}
 80211a4:	4770      	bx	lr
 80211a6:	bf00      	nop
 80211a8:	24000514 	.word	0x24000514

080211ac <GetGCUStatus>:

void GetGCUStatus(T_GCU_STATUS_RES *pCurStatus)
{
 80211ac:	b580      	push	{r7, lr}
 80211ae:	b084      	sub	sp, #16
 80211b0:	af00      	add	r7, sp, #0
 80211b2:	6078      	str	r0, [r7, #4]
    T_MODE_STATUS ModeStatus;
	DWORD	dwSpareSenserValue  = 0;
 80211b4:	2300      	movs	r3, #0
 80211b6:	60fb      	str	r3, [r7, #12]

    // mode status
    ModeStatus.b.nServiceMode_EN = (int)gCurGCUOpMode.bServiceMode_EN;
 80211b8:	4b54      	ldr	r3, [pc, #336]	; (802130c <GetGCUStatus+0x160>)
 80211ba:	781b      	ldrb	r3, [r3, #0]
 80211bc:	019b      	lsls	r3, r3, #6
 80211be:	b25b      	sxtb	r3, r3
 80211c0:	119b      	asrs	r3, r3, #6
 80211c2:	b25a      	sxtb	r2, r3
 80211c4:	7a3b      	ldrb	r3, [r7, #8]
 80211c6:	f362 0301 	bfi	r3, r2, #0, #2
 80211ca:	723b      	strb	r3, [r7, #8]
    ModeStatus.b.nServiceMode_EX = (int)gCurGCUOpMode.bServiceMode_EX;
 80211cc:	4b4f      	ldr	r3, [pc, #316]	; (802130c <GetGCUStatus+0x160>)
 80211ce:	785b      	ldrb	r3, [r3, #1]
 80211d0:	019b      	lsls	r3, r3, #6
 80211d2:	b25b      	sxtb	r3, r3
 80211d4:	119b      	asrs	r3, r3, #6
 80211d6:	b25a      	sxtb	r2, r3
 80211d8:	7a3b      	ldrb	r3, [r7, #8]
 80211da:	f362 0383 	bfi	r3, r2, #2, #2
 80211de:	723b      	strb	r3, [r7, #8]
    ModeStatus.b.nEmergencyMode = (int)(gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY);
 80211e0:	4b4a      	ldr	r3, [pc, #296]	; (802130c <GetGCUStatus+0x160>)
 80211e2:	789b      	ldrb	r3, [r3, #2]
 80211e4:	019b      	lsls	r3, r3, #6
 80211e6:	b25b      	sxtb	r3, r3
 80211e8:	119b      	asrs	r3, r3, #6
 80211ea:	b25a      	sxtb	r2, r3
 80211ec:	7a3b      	ldrb	r3, [r7, #8]
 80211ee:	f362 1305 	bfi	r3, r2, #4, #2
 80211f2:	723b      	strb	r3, [r7, #8]

    if (gCurGCUOpMode.bEmergencyMaint & MAINTENANCE_MODE)
 80211f4:	4b45      	ldr	r3, [pc, #276]	; (802130c <GetGCUStatus+0x160>)
 80211f6:	789b      	ldrb	r3, [r3, #2]
 80211f8:	f003 0310 	and.w	r3, r3, #16
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d004      	beq.n	802120a <GetGCUStatus+0x5e>
        ModeStatus.b.nMaintenanceMode = ON;
 8021200:	7a3b      	ldrb	r3, [r7, #8]
 8021202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021206:	723b      	strb	r3, [r7, #8]
 8021208:	e003      	b.n	8021212 <GetGCUStatus+0x66>
    else
        ModeStatus.b.nMaintenanceMode = OFF;
 802120a:	7a3b      	ldrb	r3, [r7, #8]
 802120c:	f36f 1386 	bfc	r3, #6, #1
 8021210:	723b      	strb	r3, [r7, #8]

    ModeStatus.b.nFlapDoorMode = (int)gCurGCUOpMode.bFlapDoorMode;
 8021212:	4b3e      	ldr	r3, [pc, #248]	; (802130c <GetGCUStatus+0x160>)
 8021214:	78db      	ldrb	r3, [r3, #3]
 8021216:	01db      	lsls	r3, r3, #7
 8021218:	b25b      	sxtb	r3, r3
 802121a:	11db      	asrs	r3, r3, #7
 802121c:	b25a      	sxtb	r2, r3
 802121e:	7a3b      	ldrb	r3, [r7, #8]
 8021220:	f362 13c7 	bfi	r3, r2, #7, #1
 8021224:	723b      	strb	r3, [r7, #8]

    // passage alarm
    pCurStatus->bModeStatus = ModeStatus.bMode;
 8021226:	7a3a      	ldrb	r2, [r7, #8]
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	701a      	strb	r2, [r3, #0]
    pCurStatus->bAuthCount_EN = gGCUStatus.bAuthCount_EN;
 802122c:	4b38      	ldr	r3, [pc, #224]	; (8021310 <GetGCUStatus+0x164>)
 802122e:	791b      	ldrb	r3, [r3, #4]
 8021230:	b2da      	uxtb	r2, r3
 8021232:	687b      	ldr	r3, [r7, #4]
 8021234:	705a      	strb	r2, [r3, #1]
    pCurStatus->bAuthCount_EX = gGCUStatus.bAuthCount_EX;
 8021236:	4b36      	ldr	r3, [pc, #216]	; (8021310 <GetGCUStatus+0x164>)
 8021238:	795b      	ldrb	r3, [r3, #5]
 802123a:	b2da      	uxtb	r2, r3
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	709a      	strb	r2, [r3, #2]
    pCurStatus->bPassageAlarm = gGCUStatus.PassageAlarm.bAlarm;
 8021240:	4b33      	ldr	r3, [pc, #204]	; (8021310 <GetGCUStatus+0x164>)
 8021242:	7a1a      	ldrb	r2, [r3, #8]
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	70da      	strb	r2, [r3, #3]
    pCurStatus->bModuleAlarm = gGCUStatus.ModuleAlarm.bAlarm;
 8021248:	4b31      	ldr	r3, [pc, #196]	; (8021310 <GetGCUStatus+0x164>)
 802124a:	7b1a      	ldrb	r2, [r3, #12]
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	711a      	strb	r2, [r3, #4]
    pCurStatus->bBarrierSw = gGCUStatus.bBarrierSw;
 8021250:	4b2f      	ldr	r3, [pc, #188]	; (8021310 <GetGCUStatus+0x164>)
 8021252:	7c1b      	ldrb	r3, [r3, #16]
 8021254:	b2da      	uxtb	r2, r3
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	715a      	strb	r2, [r3, #5]

#if BART_IO
    pCurStatus->bMaintenanceDoorSw = (RD_SWITCH & MASK_SDOOR);
 802125a:	4b2e      	ldr	r3, [pc, #184]	; (8021314 <GetGCUStatus+0x168>)
 802125c:	781b      	ldrb	r3, [r3, #0]
 802125e:	b2da      	uxtb	r2, r3
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	719a      	strb	r2, [r3, #6]
#else
    pCurStatus->bMaintenanceDoorSw = (RD_SWITCH1 & MASK_SDOOR1) | ((RD_SWITCH2 & MASK_SDOOR2) << 4);
#endif
    pCurStatus->bUPSStatus = gGCUStatus.bUPSStatus;
 8021264:	4b2a      	ldr	r3, [pc, #168]	; (8021310 <GetGCUStatus+0x164>)
 8021266:	7c9b      	ldrb	r3, [r3, #18]
 8021268:	b2da      	uxtb	r2, r3
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	71da      	strb	r2, [r3, #7]
    pCurStatus->bSafetySen = gGCUStatus.bSafetyDetection;
 802126e:	4b28      	ldr	r3, [pc, #160]	; (8021310 <GetGCUStatus+0x164>)
 8021270:	7cdb      	ldrb	r3, [r3, #19]
 8021272:	b2da      	uxtb	r2, r3
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	721a      	strb	r2, [r3, #8]
    pCurStatus->bSCADA = gGCUStatus.bSCADA;
 8021278:	4b25      	ldr	r3, [pc, #148]	; (8021310 <GetGCUStatus+0x164>)
 802127a:	7d1b      	ldrb	r3, [r3, #20]
 802127c:	b2da      	uxtb	r2, r3
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	725a      	strb	r2, [r3, #9]
    pCurStatus->bDoorForcedOpen = gGCUStatus.bDoorForcedOpen;
 8021282:	4b23      	ldr	r3, [pc, #140]	; (8021310 <GetGCUStatus+0x164>)
 8021284:	7d5b      	ldrb	r3, [r3, #21]
 8021286:	b2da      	uxtb	r2, r3
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	729a      	strb	r2, [r3, #10]


#if BART_IO

	dwSpareSenserValue = (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN1_Pin))? 0x01: 0x00;  // Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기)
 802128c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021290:	4821      	ldr	r0, [pc, #132]	; (8021318 <GetGCUStatus+0x16c>)
 8021292:	f00a f8d3 	bl	802b43c <HAL_GPIO_ReadPin>
 8021296:	4603      	mov	r3, r0
 8021298:	2b00      	cmp	r3, #0
 802129a:	bf14      	ite	ne
 802129c:	2301      	movne	r3, #1
 802129e:	2300      	moveq	r3, #0
 80212a0:	b2db      	uxtb	r3, r3
 80212a2:	60fb      	str	r3, [r7, #12]
	dwSpareSenserValue |= (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN2_Pin))? 0x02: 0x00;
 80212a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80212a8:	481b      	ldr	r0, [pc, #108]	; (8021318 <GetGCUStatus+0x16c>)
 80212aa:	f00a f8c7 	bl	802b43c <HAL_GPIO_ReadPin>
 80212ae:	4603      	mov	r3, r0
 80212b0:	2b00      	cmp	r3, #0
 80212b2:	d001      	beq.n	80212b8 <GetGCUStatus+0x10c>
 80212b4:	2302      	movs	r3, #2
 80212b6:	e000      	b.n	80212ba <GetGCUStatus+0x10e>
 80212b8:	2300      	movs	r3, #0
 80212ba:	461a      	mov	r2, r3
 80212bc:	68fb      	ldr	r3, [r7, #12]
 80212be:	4313      	orrs	r3, r2
 80212c0:	60fb      	str	r3, [r7, #12]



    pCurStatus->bPassengerSensor1 = RD_PASSSEN1;
 80212c2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80212c6:	781b      	ldrb	r3, [r3, #0]
 80212c8:	b2da      	uxtb	r2, r3
 80212ca:	687b      	ldr	r3, [r7, #4]
 80212cc:	72da      	strb	r2, [r3, #11]
    pCurStatus->bPassengerSensor2 = RD_PASSSEN2;
 80212ce:	4b13      	ldr	r3, [pc, #76]	; (802131c <GetGCUStatus+0x170>)
 80212d0:	781b      	ldrb	r3, [r3, #0]
 80212d2:	b2da      	uxtb	r2, r3
 80212d4:	687b      	ldr	r3, [r7, #4]
 80212d6:	731a      	strb	r2, [r3, #12]
    pCurStatus->bPassengerSensor3 = dwSpareSenserValue;
 80212d8:	68fb      	ldr	r3, [r7, #12]
 80212da:	b2da      	uxtb	r2, r3
 80212dc:	687b      	ldr	r3, [r7, #4]
 80212de:	735a      	strb	r2, [r3, #13]
#else
    pCurStatus->bPassengerSensor1 = RD_PASSSEN1;
    pCurStatus->bPassengerSensor2 = RD_PASSSEN2;
    pCurStatus->bPassengerSensor3 = RD_PASSSEN3;
#endif
    pCurStatus->bIllegalPass = gGCUStatus.IllegalPass.bIllegalPass;
 80212e0:	4b0b      	ldr	r3, [pc, #44]	; (8021310 <GetGCUStatus+0x164>)
 80212e2:	7f1a      	ldrb	r2, [r3, #28]
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	739a      	strb	r2, [r3, #14]
    pCurStatus->bDipSwitchValue = ReadDipSwitch();
 80212e8:	4b0d      	ldr	r3, [pc, #52]	; (8021320 <GetGCUStatus+0x174>)
 80212ea:	691b      	ldr	r3, [r3, #16]
 80212ec:	b2db      	uxtb	r3, r3
 80212ee:	43db      	mvns	r3, r3
 80212f0:	b2da      	uxtb	r2, r3
 80212f2:	687b      	ldr	r3, [r7, #4]
 80212f4:	73da      	strb	r2, [r3, #15]
    pCurStatus->bPeopleCount = gGCUStatus.bPeopleCount;
 80212f6:	4b06      	ldr	r3, [pc, #24]	; (8021310 <GetGCUStatus+0x164>)
 80212f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80212fc:	b2da      	uxtb	r2, r3
 80212fe:	687b      	ldr	r3, [r7, #4]
 8021300:	745a      	strb	r2, [r3, #17]
}
 8021302:	bf00      	nop
 8021304:	3710      	adds	r7, #16
 8021306:	46bd      	mov	sp, r7
 8021308:	bd80      	pop	{r7, pc}
 802130a:	bf00      	nop
 802130c:	24000548 	.word	0x24000548
 8021310:	24000524 	.word	0x24000524
 8021314:	60000300 	.word	0x60000300
 8021318:	58020000 	.word	0x58020000
 802131c:	60000100 	.word	0x60000100
 8021320:	58020400 	.word	0x58020400

08021324 <GetAuthCount>:

/* Auth Functions ------------------------------------------------------*/
void GetAuthCount(T_GCU_AUTH_COUNT *pAuthCount)
{
 8021324:	b480      	push	{r7}
 8021326:	b083      	sub	sp, #12
 8021328:	af00      	add	r7, sp, #0
 802132a:	6078      	str	r0, [r7, #4]
    pAuthCount->bAuthCount_EN = gGCUStatus.bAuthCount_EN;
 802132c:	4b07      	ldr	r3, [pc, #28]	; (802134c <GetAuthCount+0x28>)
 802132e:	791b      	ldrb	r3, [r3, #4]
 8021330:	b2da      	uxtb	r2, r3
 8021332:	687b      	ldr	r3, [r7, #4]
 8021334:	701a      	strb	r2, [r3, #0]
    pAuthCount->bAuthCount_EX = gGCUStatus.bAuthCount_EX;
 8021336:	4b05      	ldr	r3, [pc, #20]	; (802134c <GetAuthCount+0x28>)
 8021338:	795b      	ldrb	r3, [r3, #5]
 802133a:	b2da      	uxtb	r2, r3
 802133c:	687b      	ldr	r3, [r7, #4]
 802133e:	705a      	strb	r2, [r3, #1]
}
 8021340:	bf00      	nop
 8021342:	370c      	adds	r7, #12
 8021344:	46bd      	mov	sp, r7
 8021346:	f85d 7b04 	ldr.w	r7, [sp], #4
 802134a:	4770      	bx	lr
 802134c:	24000524 	.word	0x24000524

08021350 <IncreaseAuthCount>:

void IncreaseAuthCount(BYTE bDir)
{
 8021350:	b580      	push	{r7, lr}
 8021352:	b082      	sub	sp, #8
 8021354:	af00      	add	r7, sp, #0
 8021356:	4603      	mov	r3, r0
 8021358:	71fb      	strb	r3, [r7, #7]
    //PRINTL(" [IncreaseAuthCount] Dir:%d", bDir);

    printf(" [IncreaseAuthCount] Dir:%d \n", bDir);
 802135a:	79fb      	ldrb	r3, [r7, #7]
 802135c:	4619      	mov	r1, r3
 802135e:	482d      	ldr	r0, [pc, #180]	; (8021414 <IncreaseAuthCount+0xc4>)
 8021360:	f008 fa78 	bl	8029854 <printf_>

    if (bDir == FROM_ENTRY)
 8021364:	79fb      	ldrb	r3, [r7, #7]
 8021366:	2b01      	cmp	r3, #1
 8021368:	d113      	bne.n	8021392 <IncreaseAuthCount+0x42>
    {
        gGCUStatus.bAuthCount_EN = (gGCUStatus.bAuthCount_EN < AUTHORIZE_MAX_COUNT) ? gGCUStatus.bAuthCount_EN + 1 : AUTHORIZE_MAX_COUNT;
 802136a:	4b2b      	ldr	r3, [pc, #172]	; (8021418 <IncreaseAuthCount+0xc8>)
 802136c:	791b      	ldrb	r3, [r3, #4]
 802136e:	b2db      	uxtb	r3, r3
 8021370:	2bff      	cmp	r3, #255	; 0xff
 8021372:	d005      	beq.n	8021380 <IncreaseAuthCount+0x30>
 8021374:	4b28      	ldr	r3, [pc, #160]	; (8021418 <IncreaseAuthCount+0xc8>)
 8021376:	791b      	ldrb	r3, [r3, #4]
 8021378:	b2db      	uxtb	r3, r3
 802137a:	3301      	adds	r3, #1
 802137c:	b2db      	uxtb	r3, r3
 802137e:	e000      	b.n	8021382 <IncreaseAuthCount+0x32>
 8021380:	23ff      	movs	r3, #255	; 0xff
 8021382:	4a25      	ldr	r2, [pc, #148]	; (8021418 <IncreaseAuthCount+0xc8>)
 8021384:	7113      	strb	r3, [r2, #4]
        gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
 8021386:	4a24      	ldr	r2, [pc, #144]	; (8021418 <IncreaseAuthCount+0xc8>)
 8021388:	7f13      	ldrb	r3, [r2, #28]
 802138a:	f36f 0382 	bfc	r3, #2, #1
 802138e:	7713      	strb	r3, [r2, #28]
 8021390:	e015      	b.n	80213be <IncreaseAuthCount+0x6e>
    }
    else if (bDir == FROM_EXIT)
 8021392:	79fb      	ldrb	r3, [r7, #7]
 8021394:	2b02      	cmp	r3, #2
 8021396:	d112      	bne.n	80213be <IncreaseAuthCount+0x6e>
    {
        gGCUStatus.bAuthCount_EX = (gGCUStatus.bAuthCount_EX < AUTHORIZE_MAX_COUNT) ? gGCUStatus.bAuthCount_EX + 1 : AUTHORIZE_MAX_COUNT;
 8021398:	4b1f      	ldr	r3, [pc, #124]	; (8021418 <IncreaseAuthCount+0xc8>)
 802139a:	795b      	ldrb	r3, [r3, #5]
 802139c:	b2db      	uxtb	r3, r3
 802139e:	2bff      	cmp	r3, #255	; 0xff
 80213a0:	d005      	beq.n	80213ae <IncreaseAuthCount+0x5e>
 80213a2:	4b1d      	ldr	r3, [pc, #116]	; (8021418 <IncreaseAuthCount+0xc8>)
 80213a4:	795b      	ldrb	r3, [r3, #5]
 80213a6:	b2db      	uxtb	r3, r3
 80213a8:	3301      	adds	r3, #1
 80213aa:	b2db      	uxtb	r3, r3
 80213ac:	e000      	b.n	80213b0 <IncreaseAuthCount+0x60>
 80213ae:	23ff      	movs	r3, #255	; 0xff
 80213b0:	4a19      	ldr	r2, [pc, #100]	; (8021418 <IncreaseAuthCount+0xc8>)
 80213b2:	7153      	strb	r3, [r2, #5]
        gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
 80213b4:	4a18      	ldr	r2, [pc, #96]	; (8021418 <IncreaseAuthCount+0xc8>)
 80213b6:	7f13      	ldrb	r3, [r2, #28]
 80213b8:	f36f 1386 	bfc	r3, #6, #1
 80213bc:	7713      	strb	r3, [r2, #28]
    }

    if (gbPrevDir != bDir)
 80213be:	4b17      	ldr	r3, [pc, #92]	; (802141c <IncreaseAuthCount+0xcc>)
 80213c0:	781b      	ldrb	r3, [r3, #0]
 80213c2:	79fa      	ldrb	r2, [r7, #7]
 80213c4:	429a      	cmp	r2, r3
 80213c6:	d004      	beq.n	80213d2 <IncreaseAuthCount+0x82>
    {
        ClearPassageAlarm();				//used?
 80213c8:	f000 fd16 	bl	8021df8 <ClearPassageAlarm>
        gbPrevDir = bDir;
 80213cc:	4a13      	ldr	r2, [pc, #76]	; (802141c <IncreaseAuthCount+0xcc>)
 80213ce:	79fb      	ldrb	r3, [r7, #7]
 80213d0:	7013      	strb	r3, [r2, #0]
    }

    ControlBarrier(bDir);
 80213d2:	79fb      	ldrb	r3, [r7, #7]
 80213d4:	4618      	mov	r0, r3
 80213d6:	f000 f855 	bl	8021484 <ControlBarrier>
    ResetTimer(&timerLuggageWait);
 80213da:	4811      	ldr	r0, [pc, #68]	; (8021420 <IncreaseAuthCount+0xd0>)
 80213dc:	f00f fb3e 	bl	8030a5c <ResetTimer>
    ResetTimer(&timerSafety);
 80213e0:	4810      	ldr	r0, [pc, #64]	; (8021424 <IncreaseAuthCount+0xd4>)
 80213e2:	f00f fb3b 	bl	8030a5c <ResetTimer>
    ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 80213e6:	2200      	movs	r2, #0
 80213e8:	2100      	movs	r1, #0
 80213ea:	2000      	movs	r0, #0
 80213ec:	f000 f882 	bl	80214f4 <ControlBuzzer>
    SetAuthTimer();
 80213f0:	f000 ff5a 	bl	80222a8 <SetAuthTimer>

    //PRINTL(" [IncreaseAuthCount] auth cnt EN:%d, EX:%d", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
    printf(" [IncreaseAuthCount] auth cnt EN:%d, EX:%d  \n", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
 80213f4:	4b08      	ldr	r3, [pc, #32]	; (8021418 <IncreaseAuthCount+0xc8>)
 80213f6:	791b      	ldrb	r3, [r3, #4]
 80213f8:	b2db      	uxtb	r3, r3
 80213fa:	4619      	mov	r1, r3
 80213fc:	4b06      	ldr	r3, [pc, #24]	; (8021418 <IncreaseAuthCount+0xc8>)
 80213fe:	795b      	ldrb	r3, [r3, #5]
 8021400:	b2db      	uxtb	r3, r3
 8021402:	461a      	mov	r2, r3
 8021404:	4808      	ldr	r0, [pc, #32]	; (8021428 <IncreaseAuthCount+0xd8>)
 8021406:	f008 fa25 	bl	8029854 <printf_>
}
 802140a:	bf00      	nop
 802140c:	3708      	adds	r7, #8
 802140e:	46bd      	mov	sp, r7
 8021410:	bd80      	pop	{r7, pc}
 8021412:	bf00      	nop
 8021414:	08032160 	.word	0x08032160
 8021418:	24000524 	.word	0x24000524
 802141c:	240004ac 	.word	0x240004ac
 8021420:	2400024c 	.word	0x2400024c
 8021424:	24000258 	.word	0x24000258
 8021428:	08032180 	.word	0x08032180

0802142c <ClearAuthCount>:

void ClearAuthCount(void)
{
 802142c:	b580      	push	{r7, lr}
 802142e:	af00      	add	r7, sp, #0
    gGCUStatus.bAuthCount_EN = 0;
 8021430:	4b12      	ldr	r3, [pc, #72]	; (802147c <ClearAuthCount+0x50>)
 8021432:	2200      	movs	r2, #0
 8021434:	711a      	strb	r2, [r3, #4]
    gGCUStatus.bAuthCount_EX = 0;
 8021436:	4b11      	ldr	r3, [pc, #68]	; (802147c <ClearAuthCount+0x50>)
 8021438:	2200      	movs	r2, #0
 802143a:	715a      	strb	r2, [r3, #5]
    gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 802143c:	4a0f      	ldr	r2, [pc, #60]	; (802147c <ClearAuthCount+0x50>)
 802143e:	7a13      	ldrb	r3, [r2, #8]
 8021440:	f36f 03c3 	bfc	r3, #3, #1
 8021444:	7213      	strb	r3, [r2, #8]
    gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8021446:	4a0d      	ldr	r2, [pc, #52]	; (802147c <ClearAuthCount+0x50>)
 8021448:	7a13      	ldrb	r3, [r2, #8]
 802144a:	f36f 13c7 	bfc	r3, #7, #1
 802144e:	7213      	strb	r3, [r2, #8]
    ResetTimer(&timerAuthorize);
 8021450:	480b      	ldr	r0, [pc, #44]	; (8021480 <ClearAuthCount+0x54>)
 8021452:	f00f fb03 	bl	8030a5c <ResetTimer>

    if (!gGCUStatus.PassageAlarm.b.nFromEN && !gGCUStatus.PassageAlarm.b.nFromEX)
 8021456:	4b09      	ldr	r3, [pc, #36]	; (802147c <ClearAuthCount+0x50>)
 8021458:	7a1b      	ldrb	r3, [r3, #8]
 802145a:	f003 0307 	and.w	r3, r3, #7
 802145e:	b2db      	uxtb	r3, r3
 8021460:	2b00      	cmp	r3, #0
 8021462:	d108      	bne.n	8021476 <ClearAuthCount+0x4a>
 8021464:	4b05      	ldr	r3, [pc, #20]	; (802147c <ClearAuthCount+0x50>)
 8021466:	7a1b      	ldrb	r3, [r3, #8]
 8021468:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802146c:	b2db      	uxtb	r3, r3
 802146e:	2b00      	cmp	r3, #0
 8021470:	d101      	bne.n	8021476 <ClearAuthCount+0x4a>
        InitPassageMode();
 8021472:	f000 ff45 	bl	8022300 <InitPassageMode>
}
 8021476:	bf00      	nop
 8021478:	bd80      	pop	{r7, pc}
 802147a:	bf00      	nop
 802147c:	24000524 	.word	0x24000524
 8021480:	240001d4 	.word	0x240001d4

08021484 <ControlBarrier>:

/* Module Control Functions ------------------------------------------------------*/
void ControlBarrier(BYTE bFDoorControl)
{
 8021484:	b580      	push	{r7, lr}
 8021486:	b082      	sub	sp, #8
 8021488:	af00      	add	r7, sp, #0
 802148a:	4603      	mov	r3, r0
 802148c:	71fb      	strb	r3, [r7, #7]
    //PRINTL(" [ControlBarrier] cmd:%d", bFDoorControl);
    printf(" [ControlBarrier] cmd:%d \n", bFDoorControl);
 802148e:	79fb      	ldrb	r3, [r7, #7]
 8021490:	4619      	mov	r1, r3
 8021492:	4815      	ldr	r0, [pc, #84]	; (80214e8 <ControlBarrier+0x64>)
 8021494:	f008 f9de 	bl	8029854 <printf_>
    gbBarrierCmd = bFDoorControl;
 8021498:	4a14      	ldr	r2, [pc, #80]	; (80214ec <ControlBarrier+0x68>)
 802149a:	79fb      	ldrb	r3, [r7, #7]
 802149c:	7013      	strb	r3, [r2, #0]

    if (gbBarrierCmd == BARRIER_OPEN_FOR_EN)
 802149e:	4b13      	ldr	r3, [pc, #76]	; (80214ec <ControlBarrier+0x68>)
 80214a0:	781b      	ldrb	r3, [r3, #0]
 80214a2:	2b02      	cmp	r3, #2
 80214a4:	d108      	bne.n	80214b8 <ControlBarrier+0x34>
    {
        ResetTimer(&timerSafety);
 80214a6:	4812      	ldr	r0, [pc, #72]	; (80214f0 <ControlBarrier+0x6c>)
 80214a8:	f00f fad8 	bl	8030a5c <ResetTimer>
        //OpenBarrierForSwing(gbBarrierCmd);			pms
        Brr_OpenBarrier(gbBarrierCmd);
 80214ac:	4b0f      	ldr	r3, [pc, #60]	; (80214ec <ControlBarrier+0x68>)
 80214ae:	781b      	ldrb	r3, [r3, #0]
 80214b0:	4618      	mov	r0, r3
 80214b2:	f7ff f939 	bl	8020728 <Brr_OpenBarrier>
    }
    else if (gbBarrierCmd == BARRIER_CLOSE_S)
    {
        SetTimer(&timerSafety);
    }
}
 80214b6:	e013      	b.n	80214e0 <ControlBarrier+0x5c>
    else if (gbBarrierCmd == BARRIER_OPEN_FOR_EX)
 80214b8:	4b0c      	ldr	r3, [pc, #48]	; (80214ec <ControlBarrier+0x68>)
 80214ba:	781b      	ldrb	r3, [r3, #0]
 80214bc:	2b01      	cmp	r3, #1
 80214be:	d108      	bne.n	80214d2 <ControlBarrier+0x4e>
        ResetTimer(&timerSafety);
 80214c0:	480b      	ldr	r0, [pc, #44]	; (80214f0 <ControlBarrier+0x6c>)
 80214c2:	f00f facb 	bl	8030a5c <ResetTimer>
        Brr_OpenBarrier(gbBarrierCmd);
 80214c6:	4b09      	ldr	r3, [pc, #36]	; (80214ec <ControlBarrier+0x68>)
 80214c8:	781b      	ldrb	r3, [r3, #0]
 80214ca:	4618      	mov	r0, r3
 80214cc:	f7ff f92c 	bl	8020728 <Brr_OpenBarrier>
}
 80214d0:	e006      	b.n	80214e0 <ControlBarrier+0x5c>
    else if (gbBarrierCmd == BARRIER_CLOSE_S)
 80214d2:	4b06      	ldr	r3, [pc, #24]	; (80214ec <ControlBarrier+0x68>)
 80214d4:	781b      	ldrb	r3, [r3, #0]
 80214d6:	2b03      	cmp	r3, #3
 80214d8:	d102      	bne.n	80214e0 <ControlBarrier+0x5c>
        SetTimer(&timerSafety);
 80214da:	4805      	ldr	r0, [pc, #20]	; (80214f0 <ControlBarrier+0x6c>)
 80214dc:	f00f faaa 	bl	8030a34 <SetTimer>
}
 80214e0:	bf00      	nop
 80214e2:	3708      	adds	r7, #8
 80214e4:	46bd      	mov	sp, r7
 80214e6:	bd80      	pop	{r7, pc}
 80214e8:	080321b0 	.word	0x080321b0
 80214ec:	24000028 	.word	0x24000028
 80214f0:	24000258 	.word	0x24000258

080214f4 <ControlBuzzer>:

void ControlBuzzer(BYTE bBuzzerNo, BYTE bBuzzerControl, BYTE bDuration)	//main 부저 외에 다른 부저가 없기 때문에 다른 것으로 동작 변경이 필요 pms
{
 80214f4:	b580      	push	{r7, lr}
 80214f6:	b082      	sub	sp, #8
 80214f8:	af00      	add	r7, sp, #0
 80214fa:	4603      	mov	r3, r0
 80214fc:	71fb      	strb	r3, [r7, #7]
 80214fe:	460b      	mov	r3, r1
 8021500:	71bb      	strb	r3, [r7, #6]
 8021502:	4613      	mov	r3, r2
 8021504:	717b      	strb	r3, [r7, #5]
    ResetTimer(&timerBuzzer[bBuzzerNo]);
 8021506:	79fa      	ldrb	r2, [r7, #7]
 8021508:	4613      	mov	r3, r2
 802150a:	005b      	lsls	r3, r3, #1
 802150c:	4413      	add	r3, r2
 802150e:	009b      	lsls	r3, r3, #2
 8021510:	4a21      	ldr	r2, [pc, #132]	; (8021598 <ControlBuzzer+0xa4>)
 8021512:	4413      	add	r3, r2
 8021514:	4618      	mov	r0, r3
 8021516:	f00f faa1 	bl	8030a5c <ResetTimer>
    gbBuzzerCMD[bBuzzerNo] = bBuzzerControl & MASK_BUZZER_CMD;
 802151a:	79fb      	ldrb	r3, [r7, #7]
 802151c:	79ba      	ldrb	r2, [r7, #6]
 802151e:	f002 0203 	and.w	r2, r2, #3
 8021522:	b2d1      	uxtb	r1, r2
 8021524:	4a1d      	ldr	r2, [pc, #116]	; (802159c <ControlBuzzer+0xa8>)
 8021526:	54d1      	strb	r1, [r2, r3]

    if (bBuzzerControl == BUZZER_OFF || bDuration == 0)
 8021528:	79bb      	ldrb	r3, [r7, #6]
 802152a:	2b00      	cmp	r3, #0
 802152c:	d002      	beq.n	8021534 <ControlBuzzer+0x40>
 802152e:	797b      	ldrb	r3, [r7, #5]
 8021530:	2b00      	cmp	r3, #0
 8021532:	d102      	bne.n	802153a <ControlBuzzer+0x46>
    {
       // BuzzerOffEx(bBuzzerNo);      		//pms
    	BuzzerOff();						//temp pms
 8021534:	f003 ffec 	bl	8025510 <BuzzerOff>

            gdwBuzzerTimeout[bBuzzerNo] = bDuration * TICK_COUNT_1SEC;
            SetTimer(&timerBuzzer[bBuzzerNo]);
        }
    }
}
 8021538:	e029      	b.n	802158e <ControlBuzzer+0x9a>
        if (gbBuzzerCMD[bBuzzerNo] == BUZZER_PERIODIC)
 802153a:	79fb      	ldrb	r3, [r7, #7]
 802153c:	4a17      	ldr	r2, [pc, #92]	; (802159c <ControlBuzzer+0xa8>)
 802153e:	5cd3      	ldrb	r3, [r2, r3]
 8021540:	2b02      	cmp	r3, #2
 8021542:	d105      	bne.n	8021550 <ControlBuzzer+0x5c>
            nBuzzerCount[bBuzzerNo] = 1;
 8021544:	79fb      	ldrb	r3, [r7, #7]
 8021546:	4a16      	ldr	r2, [pc, #88]	; (80215a0 <ControlBuzzer+0xac>)
 8021548:	2101      	movs	r1, #1
 802154a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 802154e:	e004      	b.n	802155a <ControlBuzzer+0x66>
            nBuzzerCount[bBuzzerNo] = 0;
 8021550:	79fb      	ldrb	r3, [r7, #7]
 8021552:	4a13      	ldr	r2, [pc, #76]	; (80215a0 <ControlBuzzer+0xac>)
 8021554:	2100      	movs	r1, #0
 8021556:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (gbBuzzerCMD[bBuzzerNo])
 802155a:	79fb      	ldrb	r3, [r7, #7]
 802155c:	4a0f      	ldr	r2, [pc, #60]	; (802159c <ControlBuzzer+0xa8>)
 802155e:	5cd3      	ldrb	r3, [r2, r3]
 8021560:	2b00      	cmp	r3, #0
 8021562:	d014      	beq.n	802158e <ControlBuzzer+0x9a>
        	BuzzerOn();					//temp pms
 8021564:	f003 ffc8 	bl	80254f8 <BuzzerOn>
            gdwBuzzerTimeout[bBuzzerNo] = bDuration * TICK_COUNT_1SEC;
 8021568:	797b      	ldrb	r3, [r7, #5]
 802156a:	2264      	movs	r2, #100	; 0x64
 802156c:	fb03 f202 	mul.w	r2, r3, r2
 8021570:	79fb      	ldrb	r3, [r7, #7]
 8021572:	4611      	mov	r1, r2
 8021574:	4a0b      	ldr	r2, [pc, #44]	; (80215a4 <ControlBuzzer+0xb0>)
 8021576:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            SetTimer(&timerBuzzer[bBuzzerNo]);
 802157a:	79fa      	ldrb	r2, [r7, #7]
 802157c:	4613      	mov	r3, r2
 802157e:	005b      	lsls	r3, r3, #1
 8021580:	4413      	add	r3, r2
 8021582:	009b      	lsls	r3, r3, #2
 8021584:	4a04      	ldr	r2, [pc, #16]	; (8021598 <ControlBuzzer+0xa4>)
 8021586:	4413      	add	r3, r2
 8021588:	4618      	mov	r0, r3
 802158a:	f00f fa53 	bl	8030a34 <SetTimer>
}
 802158e:	bf00      	nop
 8021590:	3708      	adds	r7, #8
 8021592:	46bd      	mov	sp, r7
 8021594:	bd80      	pop	{r7, pc}
 8021596:	bf00      	nop
 8021598:	240002c4 	.word	0x240002c4
 802159c:	240001a4 	.word	0x240001a4
 80215a0:	240002e8 	.word	0x240002e8
 80215a4:	240001ac 	.word	0x240001ac

080215a8 <ControlDirectionLED>:

void ControlDirectionLED(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 80215a8:	b580      	push	{r7, lr}
 80215aa:	b082      	sub	sp, #8
 80215ac:	af00      	add	r7, sp, #0
 80215ae:	4603      	mov	r3, r0
 80215b0:	460a      	mov	r2, r1
 80215b2:	71fb      	strb	r3, [r7, #7]
 80215b4:	4613      	mov	r3, r2
 80215b6:	71bb      	strb	r3, [r7, #6]
    if (gbLampCMD_EN != bLEDControl_EN)
 80215b8:	4b13      	ldr	r3, [pc, #76]	; (8021608 <ControlDirectionLED+0x60>)
 80215ba:	781b      	ldrb	r3, [r3, #0]
 80215bc:	79fa      	ldrb	r2, [r7, #7]
 80215be:	429a      	cmp	r2, r3
 80215c0:	d002      	beq.n	80215c8 <ControlDirectionLED+0x20>
        gbLampCMD_EN = bLEDControl_EN;
 80215c2:	4a11      	ldr	r2, [pc, #68]	; (8021608 <ControlDirectionLED+0x60>)
 80215c4:	79fb      	ldrb	r3, [r7, #7]
 80215c6:	7013      	strb	r3, [r2, #0]
    if (gbLampCMD_EX != bLEDControl_EX)
 80215c8:	4b10      	ldr	r3, [pc, #64]	; (802160c <ControlDirectionLED+0x64>)
 80215ca:	781b      	ldrb	r3, [r3, #0]
 80215cc:	79ba      	ldrb	r2, [r7, #6]
 80215ce:	429a      	cmp	r2, r3
 80215d0:	d002      	beq.n	80215d8 <ControlDirectionLED+0x30>
        gbLampCMD_EX = bLEDControl_EX;
 80215d2:	4a0e      	ldr	r2, [pc, #56]	; (802160c <ControlDirectionLED+0x64>)
 80215d4:	79bb      	ldrb	r3, [r7, #6]
 80215d6:	7013      	strb	r3, [r2, #0]

    ControlStatusLED_En(gbLampCMD_EN);
 80215d8:	4b0b      	ldr	r3, [pc, #44]	; (8021608 <ControlDirectionLED+0x60>)
 80215da:	781b      	ldrb	r3, [r3, #0]
 80215dc:	4618      	mov	r0, r3
 80215de:	f003 ffa3 	bl	8025528 <ControlStatusLED_En>
    ControlStatusLED_Ex(gbLampCMD_EX);    
 80215e2:	4b0a      	ldr	r3, [pc, #40]	; (802160c <ControlDirectionLED+0x64>)
 80215e4:	781b      	ldrb	r3, [r3, #0]
 80215e6:	4618      	mov	r0, r3
 80215e8:	f003 ffce 	bl	8025588 <ControlStatusLED_Ex>
    ControlOverHeadDisplay_En(gbLampCMD_EN);
 80215ec:	4b06      	ldr	r3, [pc, #24]	; (8021608 <ControlDirectionLED+0x60>)
 80215ee:	781b      	ldrb	r3, [r3, #0]
 80215f0:	4618      	mov	r0, r3
 80215f2:	f003 fff9 	bl	80255e8 <ControlOverHeadDisplay_En>
    ControlOverHeadDisplay_Ex(gbLampCMD_EX);
 80215f6:	4b05      	ldr	r3, [pc, #20]	; (802160c <ControlDirectionLED+0x64>)
 80215f8:	781b      	ldrb	r3, [r3, #0]
 80215fa:	4618      	mov	r0, r3
 80215fc:	f004 f826 	bl	802564c <ControlOverHeadDisplay_Ex>
}
 8021600:	bf00      	nop
 8021602:	3708      	adds	r7, #8
 8021604:	46bd      	mov	sp, r7
 8021606:	bd80      	pop	{r7, pc}
 8021608:	2400019d 	.word	0x2400019d
 802160c:	2400019e 	.word	0x2400019e

08021610 <ControlStatusLED>:

void ControlStatusLED(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8021610:	b580      	push	{r7, lr}
 8021612:	b082      	sub	sp, #8
 8021614:	af00      	add	r7, sp, #0
 8021616:	4603      	mov	r3, r0
 8021618:	460a      	mov	r2, r1
 802161a:	71fb      	strb	r3, [r7, #7]
 802161c:	4613      	mov	r3, r2
 802161e:	71bb      	strb	r3, [r7, #6]
    ControlStatusLED_En(bLEDControl_EN);
 8021620:	79fb      	ldrb	r3, [r7, #7]
 8021622:	4618      	mov	r0, r3
 8021624:	f003 ff80 	bl	8025528 <ControlStatusLED_En>
    ControlStatusLED_Ex(bLEDControl_EX);
 8021628:	79bb      	ldrb	r3, [r7, #6]
 802162a:	4618      	mov	r0, r3
 802162c:	f003 ffac 	bl	8025588 <ControlStatusLED_Ex>
}
 8021630:	bf00      	nop
 8021632:	3708      	adds	r7, #8
 8021634:	46bd      	mov	sp, r7
 8021636:	bd80      	pop	{r7, pc}

08021638 <ControlOverheadDisplay>:

void ControlOverheadDisplay(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8021638:	b580      	push	{r7, lr}
 802163a:	b082      	sub	sp, #8
 802163c:	af00      	add	r7, sp, #0
 802163e:	4603      	mov	r3, r0
 8021640:	460a      	mov	r2, r1
 8021642:	71fb      	strb	r3, [r7, #7]
 8021644:	4613      	mov	r3, r2
 8021646:	71bb      	strb	r3, [r7, #6]
    ControlOverHeadDisplay_En(bLEDControl_EN);
 8021648:	79fb      	ldrb	r3, [r7, #7]
 802164a:	4618      	mov	r0, r3
 802164c:	f003 ffcc 	bl	80255e8 <ControlOverHeadDisplay_En>
    ControlOverHeadDisplay_Ex(bLEDControl_EX);
 8021650:	79bb      	ldrb	r3, [r7, #6]
 8021652:	4618      	mov	r0, r3
 8021654:	f003 fffa 	bl	802564c <ControlOverHeadDisplay_Ex>
}
 8021658:	bf00      	nop
 802165a:	3708      	adds	r7, #8
 802165c:	46bd      	mov	sp, r7
 802165e:	bd80      	pop	{r7, pc}

08021660 <ControlIndicator>:

void ControlIndicator(BYTE bLEDControl_EN, BYTE bLEDControl_EX, BYTE bDuration, bool isOneTime)
{
 8021660:	b590      	push	{r4, r7, lr}
 8021662:	b083      	sub	sp, #12
 8021664:	af00      	add	r7, sp, #0
 8021666:	4604      	mov	r4, r0
 8021668:	4608      	mov	r0, r1
 802166a:	4611      	mov	r1, r2
 802166c:	461a      	mov	r2, r3
 802166e:	4623      	mov	r3, r4
 8021670:	71fb      	strb	r3, [r7, #7]
 8021672:	4603      	mov	r3, r0
 8021674:	71bb      	strb	r3, [r7, #6]
 8021676:	460b      	mov	r3, r1
 8021678:	717b      	strb	r3, [r7, #5]
 802167a:	4613      	mov	r3, r2
 802167c:	713b      	strb	r3, [r7, #4]
    if (isOneTime == FALSE)
 802167e:	793b      	ldrb	r3, [r7, #4]
 8021680:	f083 0301 	eor.w	r3, r3, #1
 8021684:	b2db      	uxtb	r3, r3
 8021686:	2b00      	cmp	r3, #0
 8021688:	d00f      	beq.n	80216aa <ControlIndicator+0x4a>
    {
        if (gbIndicatorCMD_EN != bLEDControl_EN)
 802168a:	4b2a      	ldr	r3, [pc, #168]	; (8021734 <ControlIndicator+0xd4>)
 802168c:	781b      	ldrb	r3, [r3, #0]
 802168e:	79fa      	ldrb	r2, [r7, #7]
 8021690:	429a      	cmp	r2, r3
 8021692:	d002      	beq.n	802169a <ControlIndicator+0x3a>
            gbIndicatorCMD_EN = bLEDControl_EN;
 8021694:	4a27      	ldr	r2, [pc, #156]	; (8021734 <ControlIndicator+0xd4>)
 8021696:	79fb      	ldrb	r3, [r7, #7]
 8021698:	7013      	strb	r3, [r2, #0]
        if (gbIndicatorCMD_EX != bLEDControl_EX)
 802169a:	4b27      	ldr	r3, [pc, #156]	; (8021738 <ControlIndicator+0xd8>)
 802169c:	781b      	ldrb	r3, [r3, #0]
 802169e:	79ba      	ldrb	r2, [r7, #6]
 80216a0:	429a      	cmp	r2, r3
 80216a2:	d002      	beq.n	80216aa <ControlIndicator+0x4a>
            gbIndicatorCMD_EX = bLEDControl_EX;
 80216a4:	4a24      	ldr	r2, [pc, #144]	; (8021738 <ControlIndicator+0xd8>)
 80216a6:	79bb      	ldrb	r3, [r7, #6]
 80216a8:	7013      	strb	r3, [r2, #0]
    }

    if (gCurGCUOpMode.bServiceMode_EN != NO_SERVICE || gCurGCUOpMode.bEmergencyMaint == EMERGENCY_MODE || gCurGCUOpMode.bEmergencyMaint == FREE_MODE)
 80216aa:	4b24      	ldr	r3, [pc, #144]	; (802173c <ControlIndicator+0xdc>)
 80216ac:	781b      	ldrb	r3, [r3, #0]
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d107      	bne.n	80216c2 <ControlIndicator+0x62>
 80216b2:	4b22      	ldr	r3, [pc, #136]	; (802173c <ControlIndicator+0xdc>)
 80216b4:	789b      	ldrb	r3, [r3, #2]
 80216b6:	2b01      	cmp	r3, #1
 80216b8:	d003      	beq.n	80216c2 <ControlIndicator+0x62>
 80216ba:	4b20      	ldr	r3, [pc, #128]	; (802173c <ControlIndicator+0xdc>)
 80216bc:	789b      	ldrb	r3, [r3, #2]
 80216be:	2b20      	cmp	r3, #32
 80216c0:	d104      	bne.n	80216cc <ControlIndicator+0x6c>
    {
        ControlIndicatorLight_En(bLEDControl_EN);
 80216c2:	79fb      	ldrb	r3, [r7, #7]
 80216c4:	4618      	mov	r0, r3
 80216c6:	f003 ffef 	bl	80256a8 <ControlIndicatorLight_En>
 80216ca:	e002      	b.n	80216d2 <ControlIndicator+0x72>
    }
    else
    {
        ControlIndicatorLight_En(LAMP_RED_ON);
 80216cc:	2001      	movs	r0, #1
 80216ce:	f003 ffeb 	bl	80256a8 <ControlIndicatorLight_En>
    }

    if (gCurGCUOpMode.bServiceMode_EX != NO_SERVICE || gCurGCUOpMode.bEmergencyMaint == EMERGENCY_MODE || gCurGCUOpMode.bEmergencyMaint == FREE_MODE)
 80216d2:	4b1a      	ldr	r3, [pc, #104]	; (802173c <ControlIndicator+0xdc>)
 80216d4:	785b      	ldrb	r3, [r3, #1]
 80216d6:	2b00      	cmp	r3, #0
 80216d8:	d107      	bne.n	80216ea <ControlIndicator+0x8a>
 80216da:	4b18      	ldr	r3, [pc, #96]	; (802173c <ControlIndicator+0xdc>)
 80216dc:	789b      	ldrb	r3, [r3, #2]
 80216de:	2b01      	cmp	r3, #1
 80216e0:	d003      	beq.n	80216ea <ControlIndicator+0x8a>
 80216e2:	4b16      	ldr	r3, [pc, #88]	; (802173c <ControlIndicator+0xdc>)
 80216e4:	789b      	ldrb	r3, [r3, #2]
 80216e6:	2b20      	cmp	r3, #32
 80216e8:	d104      	bne.n	80216f4 <ControlIndicator+0x94>
    {
        ControlIndicatorLight_Ex(bLEDControl_EX);
 80216ea:	79bb      	ldrb	r3, [r7, #6]
 80216ec:	4618      	mov	r0, r3
 80216ee:	f004 f809 	bl	8025704 <ControlIndicatorLight_Ex>
 80216f2:	e002      	b.n	80216fa <ControlIndicator+0x9a>
    }
    else
    {
        ControlIndicatorLight_Ex(LAMP_RED_ON);
 80216f4:	2001      	movs	r0, #1
 80216f6:	f004 f805 	bl	8025704 <ControlIndicatorLight_Ex>
    }

    if (bDuration && (bLEDControl_EN || bLEDControl_EX))
 80216fa:	797b      	ldrb	r3, [r7, #5]
 80216fc:	2b00      	cmp	r3, #0
 80216fe:	d010      	beq.n	8021722 <ControlIndicator+0xc2>
 8021700:	79fb      	ldrb	r3, [r7, #7]
 8021702:	2b00      	cmp	r3, #0
 8021704:	d102      	bne.n	802170c <ControlIndicator+0xac>
 8021706:	79bb      	ldrb	r3, [r7, #6]
 8021708:	2b00      	cmp	r3, #0
 802170a:	d00a      	beq.n	8021722 <ControlIndicator+0xc2>
    {
        gdwTimeoutIndicator = bDuration * TICK_COUNT_1SEC;
 802170c:	797b      	ldrb	r3, [r7, #5]
 802170e:	2264      	movs	r2, #100	; 0x64
 8021710:	fb02 f303 	mul.w	r3, r2, r3
 8021714:	461a      	mov	r2, r3
 8021716:	4b0a      	ldr	r3, [pc, #40]	; (8021740 <ControlIndicator+0xe0>)
 8021718:	601a      	str	r2, [r3, #0]
        SetTimer(&timerIndicator);
 802171a:	480a      	ldr	r0, [pc, #40]	; (8021744 <ControlIndicator+0xe4>)
 802171c:	f00f f98a 	bl	8030a34 <SetTimer>
 8021720:	e003      	b.n	802172a <ControlIndicator+0xca>
    }
    else
        ResetTimer(&timerIndicator);
 8021722:	4808      	ldr	r0, [pc, #32]	; (8021744 <ControlIndicator+0xe4>)
 8021724:	f00f f99a 	bl	8030a5c <ResetTimer>
}
 8021728:	bf00      	nop
 802172a:	bf00      	nop
 802172c:	370c      	adds	r7, #12
 802172e:	46bd      	mov	sp, r7
 8021730:	bd90      	pop	{r4, r7, pc}
 8021732:	bf00      	nop
 8021734:	2400019b 	.word	0x2400019b
 8021738:	2400019c 	.word	0x2400019c
 802173c:	24000548 	.word	0x24000548
 8021740:	240001b8 	.word	0x240001b8
 8021744:	24000240 	.word	0x24000240

08021748 <ControlIndicator4Test>:

void ControlIndicator4Test(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8021748:	b580      	push	{r7, lr}
 802174a:	b082      	sub	sp, #8
 802174c:	af00      	add	r7, sp, #0
 802174e:	4603      	mov	r3, r0
 8021750:	460a      	mov	r2, r1
 8021752:	71fb      	strb	r3, [r7, #7]
 8021754:	4613      	mov	r3, r2
 8021756:	71bb      	strb	r3, [r7, #6]
    ControlIndicatorLight_En(bLEDControl_EN);
 8021758:	79fb      	ldrb	r3, [r7, #7]
 802175a:	4618      	mov	r0, r3
 802175c:	f003 ffa4 	bl	80256a8 <ControlIndicatorLight_En>
    ControlIndicatorLight_Ex(bLEDControl_EN);
 8021760:	79fb      	ldrb	r3, [r7, #7]
 8021762:	4618      	mov	r0, r3
 8021764:	f003 ffce 	bl	8025704 <ControlIndicatorLight_Ex>
}
 8021768:	bf00      	nop
 802176a:	3708      	adds	r7, #8
 802176c:	46bd      	mov	sp, r7
 802176e:	bd80      	pop	{r7, pc}

08021770 <ControlIndicatorBlink>:

void ControlIndicatorBlink(BYTE isSet)
{
 8021770:	b580      	push	{r7, lr}
 8021772:	b082      	sub	sp, #8
 8021774:	af00      	add	r7, sp, #0
 8021776:	4603      	mov	r3, r0
 8021778:	71fb      	strb	r3, [r7, #7]
    if (FLG_SET == isSet)
 802177a:	79fb      	ldrb	r3, [r7, #7]
 802177c:	2b01      	cmp	r3, #1
 802177e:	d10c      	bne.n	802179a <ControlIndicatorBlink+0x2a>
    {
        gbIndicatorBlink = FLG_SET;
 8021780:	4b0f      	ldr	r3, [pc, #60]	; (80217c0 <ControlIndicatorBlink+0x50>)
 8021782:	2201      	movs	r2, #1
 8021784:	701a      	strb	r2, [r3, #0]
        gbIndicatorFlag = FLG_OFF;
 8021786:	4b0f      	ldr	r3, [pc, #60]	; (80217c4 <ControlIndicatorBlink+0x54>)
 8021788:	2200      	movs	r2, #0
 802178a:	701a      	strb	r2, [r3, #0]
        gdwTimeoutBlink = 5 * TICK_COUNT_100MS;
 802178c:	4b0e      	ldr	r3, [pc, #56]	; (80217c8 <ControlIndicatorBlink+0x58>)
 802178e:	2232      	movs	r2, #50	; 0x32
 8021790:	601a      	str	r2, [r3, #0]
        SetTimer(&timerBlink);
 8021792:	480e      	ldr	r0, [pc, #56]	; (80217cc <ControlIndicatorBlink+0x5c>)
 8021794:	f00f f94e 	bl	8030a34 <SetTimer>
        ResetTimer(&timerBlink);

        gbIndicatorFlag = FLG_OFF;
        ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
    }
}
 8021798:	e00e      	b.n	80217b8 <ControlIndicatorBlink+0x48>
        gbIndicatorBlink = FLG_OFF;
 802179a:	4b09      	ldr	r3, [pc, #36]	; (80217c0 <ControlIndicatorBlink+0x50>)
 802179c:	2200      	movs	r2, #0
 802179e:	701a      	strb	r2, [r3, #0]
        ResetTimer(&timerBlink);
 80217a0:	480a      	ldr	r0, [pc, #40]	; (80217cc <ControlIndicatorBlink+0x5c>)
 80217a2:	f00f f95b 	bl	8030a5c <ResetTimer>
        gbIndicatorFlag = FLG_OFF;
 80217a6:	4b07      	ldr	r3, [pc, #28]	; (80217c4 <ControlIndicatorBlink+0x54>)
 80217a8:	2200      	movs	r2, #0
 80217aa:	701a      	strb	r2, [r3, #0]
        ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 80217ac:	2300      	movs	r3, #0
 80217ae:	2200      	movs	r2, #0
 80217b0:	2100      	movs	r1, #0
 80217b2:	2000      	movs	r0, #0
 80217b4:	f7ff ff54 	bl	8021660 <ControlIndicator>
}
 80217b8:	bf00      	nop
 80217ba:	3708      	adds	r7, #8
 80217bc:	46bd      	mov	sp, r7
 80217be:	bd80      	pop	{r7, pc}
 80217c0:	2400019a 	.word	0x2400019a
 80217c4:	240001a0 	.word	0x240001a0
 80217c8:	240001c4 	.word	0x240001c4
 80217cc:	24000228 	.word	0x24000228

080217d0 <CheckUPSStatus>:

void CheckUPSStatus(void)
{
 80217d0:	b580      	push	{r7, lr}
 80217d2:	b082      	sub	sp, #8
 80217d4:	af00      	add	r7, sp, #0
    BYTE bUPSStatus = RD_UPSSTAT & MASK_POWER_CHK;
 80217d6:	2300      	movs	r3, #0
 80217d8:	71fb      	strb	r3, [r7, #7]

    switch (bUPSStatus)
 80217da:	79fb      	ldrb	r3, [r7, #7]
 80217dc:	2b06      	cmp	r3, #6
 80217de:	f200 80aa 	bhi.w	8021936 <CheckUPSStatus+0x166>
 80217e2:	a201      	add	r2, pc, #4	; (adr r2, 80217e8 <CheckUPSStatus+0x18>)
 80217e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80217e8:	08021813 	.word	0x08021813
 80217ec:	08021805 	.word	0x08021805
 80217f0:	08021937 	.word	0x08021937
 80217f4:	08021937 	.word	0x08021937
 80217f8:	08021813 	.word	0x08021813
 80217fc:	08021937 	.word	0x08021937
 8021800:	08021879 	.word	0x08021879
    {
    case 0x01:
        gGCUStatus.bUPSStatus = bUPSStatus;
 8021804:	4a4e      	ldr	r2, [pc, #312]	; (8021940 <CheckUPSStatus+0x170>)
 8021806:	79fb      	ldrb	r3, [r7, #7]
 8021808:	7493      	strb	r3, [r2, #18]
        // PRINTL(" [CheckUPSStatus] UPS Comm failure");
        printf(" [CheckUPSStatus] UPS Comm failure  \n");
 802180a:	484e      	ldr	r0, [pc, #312]	; (8021944 <CheckUPSStatus+0x174>)
 802180c:	f008 f822 	bl	8029854 <printf_>
        break;
 8021810:	e091      	b.n	8021936 <CheckUPSStatus+0x166>
    case 0x00:
    case 0x04:
        if (gbPowerFailFlag == FLG_OFF)
 8021812:	4b4d      	ldr	r3, [pc, #308]	; (8021948 <CheckUPSStatus+0x178>)
 8021814:	781b      	ldrb	r3, [r3, #0]
 8021816:	2b00      	cmp	r3, #0
 8021818:	d126      	bne.n	8021868 <CheckUPSStatus+0x98>
        {
            if (timerPowerFailureCheck.fStart)
 802181a:	4b4c      	ldr	r3, [pc, #304]	; (802194c <CheckUPSStatus+0x17c>)
 802181c:	781b      	ldrb	r3, [r3, #0]
 802181e:	2b00      	cmp	r3, #0
 8021820:	d01b      	beq.n	802185a <CheckUPSStatus+0x8a>
            {
                if (IsTimeout(&timerPowerFailureCheck, DEFAULT_POWER_FAIL_TIMEOUT * TICK_COUNT_1SEC))
 8021822:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8021826:	4849      	ldr	r0, [pc, #292]	; (802194c <CheckUPSStatus+0x17c>)
 8021828:	f00f f926 	bl	8030a78 <IsTimeout>
 802182c:	4603      	mov	r3, r0
 802182e:	2b00      	cmp	r3, #0
 8021830:	d07e      	beq.n	8021930 <CheckUPSStatus+0x160>
                {
                    ResetTimer(&timerPowerFailureCheck);
 8021832:	4846      	ldr	r0, [pc, #280]	; (802194c <CheckUPSStatus+0x17c>)
 8021834:	f00f f912 	bl	8030a5c <ResetTimer>
                    gbPowerFailFlag = FLG_SET;
 8021838:	4b43      	ldr	r3, [pc, #268]	; (8021948 <CheckUPSStatus+0x178>)
 802183a:	2201      	movs	r2, #1
 802183c:	701a      	strb	r2, [r3, #0]
                    ControlBarrier(BARRIER_OPEN_FOR_EX);                
 802183e:	2001      	movs	r0, #1
 8021840:	f7ff fe20 	bl	8021484 <ControlBarrier>
                    gGCUStatus.bUPSStatus = bUPSStatus;
 8021844:	4a3e      	ldr	r2, [pc, #248]	; (8021940 <CheckUPSStatus+0x170>)
 8021846:	79fb      	ldrb	r3, [r7, #7]
 8021848:	7493      	strb	r3, [r2, #18]
                    ControlDirectionLED(DIR_RED, DIR_RED);
 802184a:	2102      	movs	r1, #2
 802184c:	2002      	movs	r0, #2
 802184e:	f7ff feab 	bl	80215a8 <ControlDirectionLED>
                   // PRINTL(" [CheckUPSStatus] Power failure");
                    printf(" [CheckUPSStatus] Power failure  \n");
 8021852:	483f      	ldr	r0, [pc, #252]	; (8021950 <CheckUPSStatus+0x180>)
 8021854:	f007 fffe 	bl	8029854 <printf_>
            if (timerPowerRecoveryCheck.fStart)
            {
                ResetTimer(&timerPowerRecoveryCheck);
            }
        }
        break;
 8021858:	e06a      	b.n	8021930 <CheckUPSStatus+0x160>
                SetTimer(&timerPowerFailureCheck);
 802185a:	483c      	ldr	r0, [pc, #240]	; (802194c <CheckUPSStatus+0x17c>)
 802185c:	f00f f8ea 	bl	8030a34 <SetTimer>
                ResetTimer(&timerPowerRecoveryCheck);
 8021860:	483c      	ldr	r0, [pc, #240]	; (8021954 <CheckUPSStatus+0x184>)
 8021862:	f00f f8fb 	bl	8030a5c <ResetTimer>
        break;
 8021866:	e063      	b.n	8021930 <CheckUPSStatus+0x160>
            if (timerPowerRecoveryCheck.fStart)
 8021868:	4b3a      	ldr	r3, [pc, #232]	; (8021954 <CheckUPSStatus+0x184>)
 802186a:	781b      	ldrb	r3, [r3, #0]
 802186c:	2b00      	cmp	r3, #0
 802186e:	d05f      	beq.n	8021930 <CheckUPSStatus+0x160>
                ResetTimer(&timerPowerRecoveryCheck);
 8021870:	4838      	ldr	r0, [pc, #224]	; (8021954 <CheckUPSStatus+0x184>)
 8021872:	f00f f8f3 	bl	8030a5c <ResetTimer>
        break;
 8021876:	e05b      	b.n	8021930 <CheckUPSStatus+0x160>
    case 0x06:
        if (gbPowerFailFlag == FLG_SET)
 8021878:	4b33      	ldr	r3, [pc, #204]	; (8021948 <CheckUPSStatus+0x178>)
 802187a:	781b      	ldrb	r3, [r3, #0]
 802187c:	2b01      	cmp	r3, #1
 802187e:	d14c      	bne.n	802191a <CheckUPSStatus+0x14a>
        {
            if (timerPowerRecoveryCheck.fStart)
 8021880:	4b34      	ldr	r3, [pc, #208]	; (8021954 <CheckUPSStatus+0x184>)
 8021882:	781b      	ldrb	r3, [r3, #0]
 8021884:	2b00      	cmp	r3, #0
 8021886:	d041      	beq.n	802190c <CheckUPSStatus+0x13c>
            {
                if (IsTimeout(&timerPowerRecoveryCheck, DEFAULT_POWER_FAIL_TIMEOUT * TICK_COUNT_1SEC))
 8021888:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 802188c:	4831      	ldr	r0, [pc, #196]	; (8021954 <CheckUPSStatus+0x184>)
 802188e:	f00f f8f3 	bl	8030a78 <IsTimeout>
 8021892:	4603      	mov	r3, r0
 8021894:	2b00      	cmp	r3, #0
 8021896:	d04d      	beq.n	8021934 <CheckUPSStatus+0x164>
                {
                    if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 8021898:	4b2f      	ldr	r3, [pc, #188]	; (8021958 <CheckUPSStatus+0x188>)
 802189a:	781b      	ldrb	r3, [r3, #0]
 802189c:	2b00      	cmp	r3, #0
 802189e:	d008      	beq.n	80218b2 <CheckUPSStatus+0xe2>
                        (gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 80218a0:	4b27      	ldr	r3, [pc, #156]	; (8021940 <CheckUPSStatus+0x170>)
 80218a2:	795b      	ldrb	r3, [r3, #5]
 80218a4:	b2db      	uxtb	r3, r3
                    if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 80218a6:	2b00      	cmp	r3, #0
 80218a8:	d007      	beq.n	80218ba <CheckUPSStatus+0xea>
                        (gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 80218aa:	4b2b      	ldr	r3, [pc, #172]	; (8021958 <CheckUPSStatus+0x188>)
 80218ac:	781b      	ldrb	r3, [r3, #0]
 80218ae:	2b01      	cmp	r3, #1
 80218b0:	d103      	bne.n	80218ba <CheckUPSStatus+0xea>
                        gbLampCMD_EN = DIR_RED;
 80218b2:	4b2a      	ldr	r3, [pc, #168]	; (802195c <CheckUPSStatus+0x18c>)
 80218b4:	2202      	movs	r2, #2
 80218b6:	701a      	strb	r2, [r3, #0]
 80218b8:	e002      	b.n	80218c0 <CheckUPSStatus+0xf0>
                    else
                        gbLampCMD_EN = DIR_GREEN;
 80218ba:	4b28      	ldr	r3, [pc, #160]	; (802195c <CheckUPSStatus+0x18c>)
 80218bc:	2201      	movs	r2, #1
 80218be:	701a      	strb	r2, [r3, #0]

                    if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 80218c0:	4b25      	ldr	r3, [pc, #148]	; (8021958 <CheckUPSStatus+0x188>)
 80218c2:	785b      	ldrb	r3, [r3, #1]
 80218c4:	2b00      	cmp	r3, #0
 80218c6:	d008      	beq.n	80218da <CheckUPSStatus+0x10a>
                        (gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80218c8:	4b1d      	ldr	r3, [pc, #116]	; (8021940 <CheckUPSStatus+0x170>)
 80218ca:	791b      	ldrb	r3, [r3, #4]
 80218cc:	b2db      	uxtb	r3, r3
                    if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	d007      	beq.n	80218e2 <CheckUPSStatus+0x112>
                        (gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80218d2:	4b21      	ldr	r3, [pc, #132]	; (8021958 <CheckUPSStatus+0x188>)
 80218d4:	785b      	ldrb	r3, [r3, #1]
 80218d6:	2b01      	cmp	r3, #1
 80218d8:	d103      	bne.n	80218e2 <CheckUPSStatus+0x112>
                        gbLampCMD_EX = DIR_RED;
 80218da:	4b21      	ldr	r3, [pc, #132]	; (8021960 <CheckUPSStatus+0x190>)
 80218dc:	2202      	movs	r2, #2
 80218de:	701a      	strb	r2, [r3, #0]
 80218e0:	e002      	b.n	80218e8 <CheckUPSStatus+0x118>
                    else
                        gbLampCMD_EX = DIR_GREEN;
 80218e2:	4b1f      	ldr	r3, [pc, #124]	; (8021960 <CheckUPSStatus+0x190>)
 80218e4:	2201      	movs	r2, #1
 80218e6:	701a      	strb	r2, [r3, #0]

                    gbPowerFailFlag = FLG_OFF;
 80218e8:	4b17      	ldr	r3, [pc, #92]	; (8021948 <CheckUPSStatus+0x178>)
 80218ea:	2200      	movs	r2, #0
 80218ec:	701a      	strb	r2, [r3, #0]
                    gGCUStatus.bUPSStatus = bUPSStatus;
 80218ee:	4a14      	ldr	r2, [pc, #80]	; (8021940 <CheckUPSStatus+0x170>)
 80218f0:	79fb      	ldrb	r3, [r7, #7]
 80218f2:	7493      	strb	r3, [r2, #18]
                    ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 80218f4:	4b19      	ldr	r3, [pc, #100]	; (802195c <CheckUPSStatus+0x18c>)
 80218f6:	781b      	ldrb	r3, [r3, #0]
 80218f8:	4a19      	ldr	r2, [pc, #100]	; (8021960 <CheckUPSStatus+0x190>)
 80218fa:	7812      	ldrb	r2, [r2, #0]
 80218fc:	4611      	mov	r1, r2
 80218fe:	4618      	mov	r0, r3
 8021900:	f7ff fe52 	bl	80215a8 <ControlDirectionLED>
                    //PRINTL(" [CheckUPSStatus] Power recovered");
                    printf(" [CheckUPSStatus] Power recovered  \n");
 8021904:	4817      	ldr	r0, [pc, #92]	; (8021964 <CheckUPSStatus+0x194>)
 8021906:	f007 ffa5 	bl	8029854 <printf_>
            {
                ResetTimer(&timerPowerFailureCheck);
            }
        }

        break;
 802190a:	e013      	b.n	8021934 <CheckUPSStatus+0x164>
                SetTimer(&timerPowerRecoveryCheck);
 802190c:	4811      	ldr	r0, [pc, #68]	; (8021954 <CheckUPSStatus+0x184>)
 802190e:	f00f f891 	bl	8030a34 <SetTimer>
                ResetTimer(&timerPowerFailureCheck);
 8021912:	480e      	ldr	r0, [pc, #56]	; (802194c <CheckUPSStatus+0x17c>)
 8021914:	f00f f8a2 	bl	8030a5c <ResetTimer>
        break;
 8021918:	e00c      	b.n	8021934 <CheckUPSStatus+0x164>
            gGCUStatus.bUPSStatus = bUPSStatus;
 802191a:	4a09      	ldr	r2, [pc, #36]	; (8021940 <CheckUPSStatus+0x170>)
 802191c:	79fb      	ldrb	r3, [r7, #7]
 802191e:	7493      	strb	r3, [r2, #18]
            if (timerPowerFailureCheck.fStart)
 8021920:	4b0a      	ldr	r3, [pc, #40]	; (802194c <CheckUPSStatus+0x17c>)
 8021922:	781b      	ldrb	r3, [r3, #0]
 8021924:	2b00      	cmp	r3, #0
 8021926:	d005      	beq.n	8021934 <CheckUPSStatus+0x164>
                ResetTimer(&timerPowerFailureCheck);
 8021928:	4808      	ldr	r0, [pc, #32]	; (802194c <CheckUPSStatus+0x17c>)
 802192a:	f00f f897 	bl	8030a5c <ResetTimer>
        break;
 802192e:	e001      	b.n	8021934 <CheckUPSStatus+0x164>
        break;
 8021930:	bf00      	nop
 8021932:	e000      	b.n	8021936 <CheckUPSStatus+0x166>
        break;
 8021934:	bf00      	nop
    }
}
 8021936:	bf00      	nop
 8021938:	3708      	adds	r7, #8
 802193a:	46bd      	mov	sp, r7
 802193c:	bd80      	pop	{r7, pc}
 802193e:	bf00      	nop
 8021940:	24000524 	.word	0x24000524
 8021944:	080321cc 	.word	0x080321cc
 8021948:	2400019f 	.word	0x2400019f
 802194c:	240001f8 	.word	0x240001f8
 8021950:	080321f4 	.word	0x080321f4
 8021954:	24000204 	.word	0x24000204
 8021958:	24000548 	.word	0x24000548
 802195c:	2400019d 	.word	0x2400019d
 8021960:	2400019e 	.word	0x2400019e
 8021964:	08032218 	.word	0x08032218

08021968 <CheckEmergencySignal>:

void CheckEmergencySignal(void)
{
 8021968:	b580      	push	{r7, lr}
 802196a:	b084      	sub	sp, #16
 802196c:	af00      	add	r7, sp, #0
    BYTE bNewEmergencySignal = OFF;
 802196e:	2300      	movs	r3, #0
 8021970:	73fb      	strb	r3, [r7, #15]
    BYTE bDipSwitch4 = ReadDipSwitch() & MASK_EMG_SIGNAL;
 8021972:	4b39      	ldr	r3, [pc, #228]	; (8021a58 <CheckEmergencySignal+0xf0>)
 8021974:	691b      	ldr	r3, [r3, #16]
 8021976:	b2db      	uxtb	r3, r3
 8021978:	43db      	mvns	r3, r3
 802197a:	b2db      	uxtb	r3, r3
 802197c:	f003 0308 	and.w	r3, r3, #8
 8021980:	71fb      	strb	r3, [r7, #7]
    T_GCU_OP_MODE newMode;
    int nTriggerCount;

    if (bDipSwitch4)
 8021982:	79fb      	ldrb	r3, [r7, #7]
 8021984:	2b00      	cmp	r3, #0
 8021986:	d002      	beq.n	802198e <CheckEmergencySignal+0x26>
        bNewEmergencySignal = OFF;
 8021988:	2300      	movs	r3, #0
 802198a:	73fb      	strb	r3, [r7, #15]
 802198c:	e006      	b.n	802199c <CheckEmergencySignal+0x34>
    else
        bNewEmergencySignal = (BYTE)IsEMGSignalOn();
 802198e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8021992:	4831      	ldr	r0, [pc, #196]	; (8021a58 <CheckEmergencySignal+0xf0>)
 8021994:	f009 fd52 	bl	802b43c <HAL_GPIO_ReadPin>
 8021998:	4603      	mov	r3, r0
 802199a:	73fb      	strb	r3, [r7, #15]

    
    if (bNewEmergencySignal) // TODO: EMG signal must be checked in BART Fare Gate by Joseph 20231002
 802199c:	7bfb      	ldrb	r3, [r7, #15]
 802199e:	2b00      	cmp	r3, #0
 80219a0:	d006      	beq.n	80219b0 <CheckEmergencySignal+0x48>
        gGCUStatus.ModeStatus.b.nEmergencyMode = ON;
 80219a2:	4a2e      	ldr	r2, [pc, #184]	; (8021a5c <CheckEmergencySignal+0xf4>)
 80219a4:	7813      	ldrb	r3, [r2, #0]
 80219a6:	2101      	movs	r1, #1
 80219a8:	f361 1305 	bfi	r3, r1, #4, #2
 80219ac:	7013      	strb	r3, [r2, #0]
 80219ae:	e005      	b.n	80219bc <CheckEmergencySignal+0x54>
    else
        gGCUStatus.ModeStatus.b.nEmergencyMode = ON;
 80219b0:	4a2a      	ldr	r2, [pc, #168]	; (8021a5c <CheckEmergencySignal+0xf4>)
 80219b2:	7813      	ldrb	r3, [r2, #0]
 80219b4:	2101      	movs	r1, #1
 80219b6:	f361 1305 	bfi	r3, r1, #4, #2
 80219ba:	7013      	strb	r3, [r2, #0]

     
    if (gbPrevEmgSignal != bNewEmergencySignal)
 80219bc:	4b28      	ldr	r3, [pc, #160]	; (8021a60 <CheckEmergencySignal+0xf8>)
 80219be:	781b      	ldrb	r3, [r3, #0]
 80219c0:	7bfa      	ldrb	r2, [r7, #15]
 80219c2:	429a      	cmp	r2, r3
 80219c4:	d006      	beq.n	80219d4 <CheckEmergencySignal+0x6c>
    {
        gnSignalCount = 1;
 80219c6:	4b27      	ldr	r3, [pc, #156]	; (8021a64 <CheckEmergencySignal+0xfc>)
 80219c8:	2201      	movs	r2, #1
 80219ca:	601a      	str	r2, [r3, #0]
        gbPrevEmgSignal = bNewEmergencySignal;
 80219cc:	4a24      	ldr	r2, [pc, #144]	; (8021a60 <CheckEmergencySignal+0xf8>)
 80219ce:	7bfb      	ldrb	r3, [r7, #15]
 80219d0:	7013      	strb	r3, [r2, #0]
                    }
                }
            }
        }
    }
}
 80219d2:	e03c      	b.n	8021a4e <CheckEmergencySignal+0xe6>
        if (gnSignalCount)
 80219d4:	4b23      	ldr	r3, [pc, #140]	; (8021a64 <CheckEmergencySignal+0xfc>)
 80219d6:	681b      	ldr	r3, [r3, #0]
 80219d8:	2b00      	cmp	r3, #0
 80219da:	d038      	beq.n	8021a4e <CheckEmergencySignal+0xe6>
            nTriggerCount = gGCUParameter.bEMGTimeout * TICK_COUNT_1SEC;
 80219dc:	4b22      	ldr	r3, [pc, #136]	; (8021a68 <CheckEmergencySignal+0x100>)
 80219de:	79db      	ldrb	r3, [r3, #7]
 80219e0:	461a      	mov	r2, r3
 80219e2:	2364      	movs	r3, #100	; 0x64
 80219e4:	fb02 f303 	mul.w	r3, r2, r3
 80219e8:	60bb      	str	r3, [r7, #8]
            if (!nTriggerCount)
 80219ea:	68bb      	ldr	r3, [r7, #8]
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	d101      	bne.n	80219f4 <CheckEmergencySignal+0x8c>
                nTriggerCount = 1;
 80219f0:	2301      	movs	r3, #1
 80219f2:	60bb      	str	r3, [r7, #8]
            if (gnSignalCount++ == nTriggerCount)
 80219f4:	4b1b      	ldr	r3, [pc, #108]	; (8021a64 <CheckEmergencySignal+0xfc>)
 80219f6:	681b      	ldr	r3, [r3, #0]
 80219f8:	1c5a      	adds	r2, r3, #1
 80219fa:	491a      	ldr	r1, [pc, #104]	; (8021a64 <CheckEmergencySignal+0xfc>)
 80219fc:	600a      	str	r2, [r1, #0]
 80219fe:	68ba      	ldr	r2, [r7, #8]
 8021a00:	429a      	cmp	r2, r3
 8021a02:	d124      	bne.n	8021a4e <CheckEmergencySignal+0xe6>
                gnSignalCount = 0;
 8021a04:	4b17      	ldr	r3, [pc, #92]	; (8021a64 <CheckEmergencySignal+0xfc>)
 8021a06:	2200      	movs	r2, #0
 8021a08:	601a      	str	r2, [r3, #0]
                if (bNewEmergencySignal)
 8021a0a:	7bfb      	ldrb	r3, [r7, #15]
 8021a0c:	2b00      	cmp	r3, #0
 8021a0e:	d01e      	beq.n	8021a4e <CheckEmergencySignal+0xe6>
                    if (gGCUStatus.ModuleAlarm.b.nEMGSignal == OFF)
 8021a10:	4b12      	ldr	r3, [pc, #72]	; (8021a5c <CheckEmergencySignal+0xf4>)
 8021a12:	7b1b      	ldrb	r3, [r3, #12]
 8021a14:	f003 0310 	and.w	r3, r3, #16
 8021a18:	b2db      	uxtb	r3, r3
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	d117      	bne.n	8021a4e <CheckEmergencySignal+0xe6>
                    	 printf(" [CheckEmergencySignal] EMG on!  \n");
 8021a1e:	4813      	ldr	r0, [pc, #76]	; (8021a6c <CheckEmergencySignal+0x104>)
 8021a20:	f007 ff18 	bl	8029854 <printf_>
                        gGCUStatus.ModuleAlarm.b.nEMGSignal = ON;
 8021a24:	4a0d      	ldr	r2, [pc, #52]	; (8021a5c <CheckEmergencySignal+0xf4>)
 8021a26:	7b13      	ldrb	r3, [r2, #12]
 8021a28:	f043 0310 	orr.w	r3, r3, #16
 8021a2c:	7313      	strb	r3, [r2, #12]
                        newMode.bServiceMode_EN = NO_SERVICE;
 8021a2e:	2300      	movs	r3, #0
 8021a30:	703b      	strb	r3, [r7, #0]
                        newMode.bServiceMode_EX = NO_SERVICE;
 8021a32:	2300      	movs	r3, #0
 8021a34:	707b      	strb	r3, [r7, #1]
                        newMode.bEmergencyMaint = gCurGCUOpMode.bEmergencyMaint | EMERGENCY_MODE;
 8021a36:	4b0e      	ldr	r3, [pc, #56]	; (8021a70 <CheckEmergencySignal+0x108>)
 8021a38:	789b      	ldrb	r3, [r3, #2]
 8021a3a:	f043 0301 	orr.w	r3, r3, #1
 8021a3e:	b2db      	uxtb	r3, r3
 8021a40:	70bb      	strb	r3, [r7, #2]
                        newMode.bFlapDoorMode = FD_MODE_OPEN;
 8021a42:	2301      	movs	r3, #1
 8021a44:	70fb      	strb	r3, [r7, #3]
                        SetNewOpMode(&newMode);
 8021a46:	463b      	mov	r3, r7
 8021a48:	4618      	mov	r0, r3
 8021a4a:	f7ff fabb 	bl	8020fc4 <SetNewOpMode>
}
 8021a4e:	bf00      	nop
 8021a50:	3710      	adds	r7, #16
 8021a52:	46bd      	mov	sp, r7
 8021a54:	bd80      	pop	{r7, pc}
 8021a56:	bf00      	nop
 8021a58:	58020400 	.word	0x58020400
 8021a5c:	24000524 	.word	0x24000524
 8021a60:	240001a3 	.word	0x240001a3
 8021a64:	240004b8 	.word	0x240004b8
 8021a68:	24000514 	.word	0x24000514
 8021a6c:	08032240 	.word	0x08032240
 8021a70:	24000548 	.word	0x24000548

08021a74 <CheckBuzzerTimer>:

void CheckBuzzerTimer(void)
{
 8021a74:	b580      	push	{r7, lr}
 8021a76:	b082      	sub	sp, #8
 8021a78:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < BUZZER_COUNT; i++) // BUZZER_NO_MAIN, BUZZER_NO_DIRB, BUZZER_NO_DIRA
 8021a7a:	2300      	movs	r3, #0
 8021a7c:	607b      	str	r3, [r7, #4]
 8021a7e:	e054      	b.n	8021b2a <CheckBuzzerTimer+0xb6>
    {
        if (timerBuzzer[i].fStart)
 8021a80:	492e      	ldr	r1, [pc, #184]	; (8021b3c <CheckBuzzerTimer+0xc8>)
 8021a82:	687a      	ldr	r2, [r7, #4]
 8021a84:	4613      	mov	r3, r2
 8021a86:	005b      	lsls	r3, r3, #1
 8021a88:	4413      	add	r3, r2
 8021a8a:	009b      	lsls	r3, r3, #2
 8021a8c:	440b      	add	r3, r1
 8021a8e:	781b      	ldrb	r3, [r3, #0]
 8021a90:	2b00      	cmp	r3, #0
 8021a92:	d022      	beq.n	8021ada <CheckBuzzerTimer+0x66>
        {
            if (IsTimeout(&timerBuzzer[i], gdwBuzzerTimeout[i]))
 8021a94:	687a      	ldr	r2, [r7, #4]
 8021a96:	4613      	mov	r3, r2
 8021a98:	005b      	lsls	r3, r3, #1
 8021a9a:	4413      	add	r3, r2
 8021a9c:	009b      	lsls	r3, r3, #2
 8021a9e:	4a27      	ldr	r2, [pc, #156]	; (8021b3c <CheckBuzzerTimer+0xc8>)
 8021aa0:	441a      	add	r2, r3
 8021aa2:	4927      	ldr	r1, [pc, #156]	; (8021b40 <CheckBuzzerTimer+0xcc>)
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021aaa:	4619      	mov	r1, r3
 8021aac:	4610      	mov	r0, r2
 8021aae:	f00e ffe3 	bl	8030a78 <IsTimeout>
 8021ab2:	4603      	mov	r3, r0
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	d010      	beq.n	8021ada <CheckBuzzerTimer+0x66>
            {
                nBuzzerCount[i] = 0;
 8021ab8:	4a22      	ldr	r2, [pc, #136]	; (8021b44 <CheckBuzzerTimer+0xd0>)
 8021aba:	687b      	ldr	r3, [r7, #4]
 8021abc:	2100      	movs	r1, #0
 8021abe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                ResetTimer(&timerBuzzer[i]);
 8021ac2:	687a      	ldr	r2, [r7, #4]
 8021ac4:	4613      	mov	r3, r2
 8021ac6:	005b      	lsls	r3, r3, #1
 8021ac8:	4413      	add	r3, r2
 8021aca:	009b      	lsls	r3, r3, #2
 8021acc:	4a1b      	ldr	r2, [pc, #108]	; (8021b3c <CheckBuzzerTimer+0xc8>)
 8021ace:	4413      	add	r3, r2
 8021ad0:	4618      	mov	r0, r3
 8021ad2:	f00e ffc3 	bl	8030a5c <ResetTimer>
               // BuzzerOffEx(i);					//부저 한종류 밖에 없음 pms
                BuzzerOff();						//temp pms
 8021ad6:	f003 fd1b 	bl	8025510 <BuzzerOff>
            }
        }

        if (nBuzzerCount[i])
 8021ada:	4a1a      	ldr	r2, [pc, #104]	; (8021b44 <CheckBuzzerTimer+0xd0>)
 8021adc:	687b      	ldr	r3, [r7, #4]
 8021ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021ae2:	2b00      	cmp	r3, #0
 8021ae4:	d01e      	beq.n	8021b24 <CheckBuzzerTimer+0xb0>
        {
            nBuzzerCount[i]++;
 8021ae6:	4a17      	ldr	r2, [pc, #92]	; (8021b44 <CheckBuzzerTimer+0xd0>)
 8021ae8:	687b      	ldr	r3, [r7, #4]
 8021aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021aee:	1c5a      	adds	r2, r3, #1
 8021af0:	4914      	ldr	r1, [pc, #80]	; (8021b44 <CheckBuzzerTimer+0xd0>)
 8021af2:	687b      	ldr	r3, [r7, #4]
 8021af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if (nBuzzerCount[i] == 10)
 8021af8:	4a12      	ldr	r2, [pc, #72]	; (8021b44 <CheckBuzzerTimer+0xd0>)
 8021afa:	687b      	ldr	r3, [r7, #4]
 8021afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021b00:	2b0a      	cmp	r3, #10
 8021b02:	d102      	bne.n	8021b0a <CheckBuzzerTimer+0x96>
            {
               // BuzzerOffEx(i);					//부저 한종류 밖에 없음 pms
            	 BuzzerOff();
 8021b04:	f003 fd04 	bl	8025510 <BuzzerOff>
 8021b08:	e00c      	b.n	8021b24 <CheckBuzzerTimer+0xb0>
            }
            else if (nBuzzerCount[i] == 20)
 8021b0a:	4a0e      	ldr	r2, [pc, #56]	; (8021b44 <CheckBuzzerTimer+0xd0>)
 8021b0c:	687b      	ldr	r3, [r7, #4]
 8021b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021b12:	2b14      	cmp	r3, #20
 8021b14:	d106      	bne.n	8021b24 <CheckBuzzerTimer+0xb0>
            {
                nBuzzerCount[i] = 1;
 8021b16:	4a0b      	ldr	r2, [pc, #44]	; (8021b44 <CheckBuzzerTimer+0xd0>)
 8021b18:	687b      	ldr	r3, [r7, #4]
 8021b1a:	2101      	movs	r1, #1
 8021b1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                //BuzzerOnEx(i);					//부저 한종류 밖에 없음 pms
                BuzzerOn();
 8021b20:	f003 fcea 	bl	80254f8 <BuzzerOn>
    for (i = 0; i < BUZZER_COUNT; i++) // BUZZER_NO_MAIN, BUZZER_NO_DIRB, BUZZER_NO_DIRA
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	3301      	adds	r3, #1
 8021b28:	607b      	str	r3, [r7, #4]
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	2b02      	cmp	r3, #2
 8021b2e:	dda7      	ble.n	8021a80 <CheckBuzzerTimer+0xc>
            }
        }
    }
}
 8021b30:	bf00      	nop
 8021b32:	bf00      	nop
 8021b34:	3708      	adds	r7, #8
 8021b36:	46bd      	mov	sp, r7
 8021b38:	bd80      	pop	{r7, pc}
 8021b3a:	bf00      	nop
 8021b3c:	240002c4 	.word	0x240002c4
 8021b40:	240001ac 	.word	0x240001ac
 8021b44:	240002e8 	.word	0x240002e8

08021b48 <CheckIndicatorTimer>:

void CheckIndicatorTimer(void)
{
 8021b48:	b580      	push	{r7, lr}
 8021b4a:	af00      	add	r7, sp, #0
    if (timerIndicator.fStart)
 8021b4c:	4b0b      	ldr	r3, [pc, #44]	; (8021b7c <CheckIndicatorTimer+0x34>)
 8021b4e:	781b      	ldrb	r3, [r3, #0]
 8021b50:	2b00      	cmp	r3, #0
 8021b52:	d011      	beq.n	8021b78 <CheckIndicatorTimer+0x30>
    {
        if (IsTimeout(&timerIndicator, gdwTimeoutIndicator))
 8021b54:	4b0a      	ldr	r3, [pc, #40]	; (8021b80 <CheckIndicatorTimer+0x38>)
 8021b56:	681b      	ldr	r3, [r3, #0]
 8021b58:	4619      	mov	r1, r3
 8021b5a:	4808      	ldr	r0, [pc, #32]	; (8021b7c <CheckIndicatorTimer+0x34>)
 8021b5c:	f00e ff8c 	bl	8030a78 <IsTimeout>
 8021b60:	4603      	mov	r3, r0
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	d008      	beq.n	8021b78 <CheckIndicatorTimer+0x30>
        {
            ResetTimer(&timerIndicator);
 8021b66:	4805      	ldr	r0, [pc, #20]	; (8021b7c <CheckIndicatorTimer+0x34>)
 8021b68:	f00e ff78 	bl	8030a5c <ResetTimer>
            ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 8021b6c:	2300      	movs	r3, #0
 8021b6e:	2200      	movs	r2, #0
 8021b70:	2100      	movs	r1, #0
 8021b72:	2000      	movs	r0, #0
 8021b74:	f7ff fd74 	bl	8021660 <ControlIndicator>
        }
    }
}
 8021b78:	bf00      	nop
 8021b7a:	bd80      	pop	{r7, pc}
 8021b7c:	24000240 	.word	0x24000240
 8021b80:	240001b8 	.word	0x240001b8

08021b84 <CheckPassSenError>:
        }
    }
}

void CheckPassSenError(bool isSwing)
{
 8021b84:	b580      	push	{r7, lr}
 8021b86:	b084      	sub	sp, #16
 8021b88:	af00      	add	r7, sp, #0
 8021b8a:	4603      	mov	r3, r0
 8021b8c:	71fb      	strb	r3, [r7, #7]
    int i;
    BYTE bSensorData = RD_PASSSEN1;
 8021b8e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8021b92:	781b      	ldrb	r3, [r3, #0]
 8021b94:	73fb      	strb	r3, [r7, #15]

    for (i = 0; i < 16; i++)
 8021b96:	2300      	movs	r3, #0
 8021b98:	60bb      	str	r3, [r7, #8]
 8021b9a:	e0de      	b.n	8021d5a <CheckPassSenError+0x1d6>
    {
        if (i == 8)
 8021b9c:	68bb      	ldr	r3, [r7, #8]
 8021b9e:	2b08      	cmp	r3, #8
 8021ba0:	d102      	bne.n	8021ba8 <CheckPassSenError+0x24>
            bSensorData = RD_PASSSEN2;
 8021ba2:	4b72      	ldr	r3, [pc, #456]	; (8021d6c <CheckPassSenError+0x1e8>)
 8021ba4:	781b      	ldrb	r3, [r3, #0]
 8021ba6:	73fb      	strb	r3, [r7, #15]

        if (bSensorData & (1 << (i % 8)))
 8021ba8:	7bfa      	ldrb	r2, [r7, #15]
 8021baa:	68bb      	ldr	r3, [r7, #8]
 8021bac:	4259      	negs	r1, r3
 8021bae:	f003 0307 	and.w	r3, r3, #7
 8021bb2:	f001 0107 	and.w	r1, r1, #7
 8021bb6:	bf58      	it	pl
 8021bb8:	424b      	negpl	r3, r1
 8021bba:	fa42 f303 	asr.w	r3, r2, r3
 8021bbe:	f003 0301 	and.w	r3, r3, #1
 8021bc2:	2b00      	cmp	r3, #0
 8021bc4:	f000 808a 	beq.w	8021cdc <CheckPassSenError+0x158>
        {
            if (mdwTickPSensorBlock[i] == (gGCUParameter.bSensorBlockTimeout * TICK_COUNT_1SEC * 10))
 8021bc8:	4a69      	ldr	r2, [pc, #420]	; (8021d70 <CheckPassSenError+0x1ec>)
 8021bca:	68bb      	ldr	r3, [r7, #8]
 8021bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021bd0:	4a68      	ldr	r2, [pc, #416]	; (8021d74 <CheckPassSenError+0x1f0>)
 8021bd2:	7a12      	ldrb	r2, [r2, #8]
 8021bd4:	4611      	mov	r1, r2
 8021bd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8021bda:	fb01 f202 	mul.w	r2, r1, r2
 8021bde:	4293      	cmp	r3, r2
 8021be0:	d165      	bne.n	8021cae <CheckPassSenError+0x12a>
            {
                gdwPSensorError |= (1 << i);
 8021be2:	2201      	movs	r2, #1
 8021be4:	68bb      	ldr	r3, [r7, #8]
 8021be6:	fa02 f303 	lsl.w	r3, r2, r3
 8021bea:	461a      	mov	r2, r3
 8021bec:	4b62      	ldr	r3, [pc, #392]	; (8021d78 <CheckPassSenError+0x1f4>)
 8021bee:	681b      	ldr	r3, [r3, #0]
 8021bf0:	4313      	orrs	r3, r2
 8021bf2:	4a61      	ldr	r2, [pc, #388]	; (8021d78 <CheckPassSenError+0x1f4>)
 8021bf4:	6013      	str	r3, [r2, #0]

                if (gGCUStatus.ModuleAlarm.b.nPSensor == OFF)
 8021bf6:	4b61      	ldr	r3, [pc, #388]	; (8021d7c <CheckPassSenError+0x1f8>)
 8021bf8:	7b1b      	ldrb	r3, [r3, #12]
 8021bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021bfe:	b2db      	uxtb	r3, r3
 8021c00:	2b00      	cmp	r3, #0
 8021c02:	d10b      	bne.n	8021c1c <CheckPassSenError+0x98>
                {
                    if (gCurGCUOpMode.bEmergencyMaint == MODE_NONE)
 8021c04:	4b5e      	ldr	r3, [pc, #376]	; (8021d80 <CheckPassSenError+0x1fc>)
 8021c06:	789b      	ldrb	r3, [r3, #2]
 8021c08:	2b00      	cmp	r3, #0
 8021c0a:	d104      	bne.n	8021c16 <CheckPassSenError+0x92>
                        gGCUStatus.ModuleAlarm.b.nPSensor = ON;
 8021c0c:	4a5b      	ldr	r2, [pc, #364]	; (8021d7c <CheckPassSenError+0x1f8>)
 8021c0e:	7b13      	ldrb	r3, [r2, #12]
 8021c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021c14:	7313      	strb	r3, [r2, #12]

                    printf(" [CheckPassSenError] Sensor Error Detected!!  \n");
 8021c16:	485b      	ldr	r0, [pc, #364]	; (8021d84 <CheckPassSenError+0x200>)
 8021c18:	f007 fe1c 	bl	8029854 <printf_>
                }

                if (i >= 0 && i < 8)
 8021c1c:	68bb      	ldr	r3, [r7, #8]
 8021c1e:	2b00      	cmp	r3, #0
 8021c20:	db10      	blt.n	8021c44 <CheckPassSenError+0xc0>
 8021c22:	68bb      	ldr	r3, [r7, #8]
 8021c24:	2b07      	cmp	r3, #7
 8021c26:	dc0d      	bgt.n	8021c44 <CheckPassSenError+0xc0>
                    psenError.B.bSen1 |= (1 << i);
 8021c28:	4b57      	ldr	r3, [pc, #348]	; (8021d88 <CheckPassSenError+0x204>)
 8021c2a:	781b      	ldrb	r3, [r3, #0]
 8021c2c:	b25a      	sxtb	r2, r3
 8021c2e:	2101      	movs	r1, #1
 8021c30:	68bb      	ldr	r3, [r7, #8]
 8021c32:	fa01 f303 	lsl.w	r3, r1, r3
 8021c36:	b25b      	sxtb	r3, r3
 8021c38:	4313      	orrs	r3, r2
 8021c3a:	b25b      	sxtb	r3, r3
 8021c3c:	b2da      	uxtb	r2, r3
 8021c3e:	4b52      	ldr	r3, [pc, #328]	; (8021d88 <CheckPassSenError+0x204>)
 8021c40:	701a      	strb	r2, [r3, #0]
 8021c42:	e013      	b.n	8021c6c <CheckPassSenError+0xe8>
                else if (i >= 8 && i < 16)
 8021c44:	68bb      	ldr	r3, [r7, #8]
 8021c46:	2b07      	cmp	r3, #7
 8021c48:	dd10      	ble.n	8021c6c <CheckPassSenError+0xe8>
 8021c4a:	68bb      	ldr	r3, [r7, #8]
 8021c4c:	2b0f      	cmp	r3, #15
 8021c4e:	dc0d      	bgt.n	8021c6c <CheckPassSenError+0xe8>
                    psenError.B.bSen2 |= (1 << (i - 8));
 8021c50:	4b4d      	ldr	r3, [pc, #308]	; (8021d88 <CheckPassSenError+0x204>)
 8021c52:	785b      	ldrb	r3, [r3, #1]
 8021c54:	b25a      	sxtb	r2, r3
 8021c56:	68bb      	ldr	r3, [r7, #8]
 8021c58:	3b08      	subs	r3, #8
 8021c5a:	2101      	movs	r1, #1
 8021c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8021c60:	b25b      	sxtb	r3, r3
 8021c62:	4313      	orrs	r3, r2
 8021c64:	b25b      	sxtb	r3, r3
 8021c66:	b2da      	uxtb	r2, r3
 8021c68:	4b47      	ldr	r3, [pc, #284]	; (8021d88 <CheckPassSenError+0x204>)
 8021c6a:	705a      	strb	r2, [r3, #1]

                if (gCurGCUOpMode.bEmergencyMaint == MODE_NONE)
 8021c6c:	4b44      	ldr	r3, [pc, #272]	; (8021d80 <CheckPassSenError+0x1fc>)
 8021c6e:	789b      	ldrb	r3, [r3, #2]
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d112      	bne.n	8021c9a <CheckPassSenError+0x116>
                {
                    if (psenError.swing.safety_EN || psenError.swing.safety_EX)
 8021c74:	4b44      	ldr	r3, [pc, #272]	; (8021d88 <CheckPassSenError+0x204>)
 8021c76:	781b      	ldrb	r3, [r3, #0]
 8021c78:	f023 030f 	bic.w	r3, r3, #15
 8021c7c:	b2db      	uxtb	r3, r3
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	d106      	bne.n	8021c90 <CheckPassSenError+0x10c>
 8021c82:	4b41      	ldr	r3, [pc, #260]	; (8021d88 <CheckPassSenError+0x204>)
 8021c84:	785b      	ldrb	r3, [r3, #1]
 8021c86:	f023 030f 	bic.w	r3, r3, #15
 8021c8a:	b2db      	uxtb	r3, r3
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d004      	beq.n	8021c9a <CheckPassSenError+0x116>
                        gGCUStatus.ModuleAlarm.b.nSafetyErr = ON;
 8021c90:	4a3a      	ldr	r2, [pc, #232]	; (8021d7c <CheckPassSenError+0x1f8>)
 8021c92:	7b13      	ldrb	r3, [r2, #12]
 8021c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021c98:	7313      	strb	r3, [r2, #12]
                }

                mdwTickPSensorBlock[i]++;
 8021c9a:	4a35      	ldr	r2, [pc, #212]	; (8021d70 <CheckPassSenError+0x1ec>)
 8021c9c:	68bb      	ldr	r3, [r7, #8]
 8021c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021ca2:	1c5a      	adds	r2, r3, #1
 8021ca4:	4932      	ldr	r1, [pc, #200]	; (8021d70 <CheckPassSenError+0x1ec>)
 8021ca6:	68bb      	ldr	r3, [r7, #8]
 8021ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021cac:	e052      	b.n	8021d54 <CheckPassSenError+0x1d0>
            }
            else if (mdwTickPSensorBlock[i] < (gGCUParameter.bSensorBlockTimeout * TICK_COUNT_1SEC * 10))
 8021cae:	4a30      	ldr	r2, [pc, #192]	; (8021d70 <CheckPassSenError+0x1ec>)
 8021cb0:	68bb      	ldr	r3, [r7, #8]
 8021cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021cb6:	4a2f      	ldr	r2, [pc, #188]	; (8021d74 <CheckPassSenError+0x1f0>)
 8021cb8:	7a12      	ldrb	r2, [r2, #8]
 8021cba:	4611      	mov	r1, r2
 8021cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8021cc0:	fb01 f202 	mul.w	r2, r1, r2
 8021cc4:	4293      	cmp	r3, r2
 8021cc6:	d245      	bcs.n	8021d54 <CheckPassSenError+0x1d0>
            {
                mdwTickPSensorBlock[i]++;
 8021cc8:	4a29      	ldr	r2, [pc, #164]	; (8021d70 <CheckPassSenError+0x1ec>)
 8021cca:	68bb      	ldr	r3, [r7, #8]
 8021ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021cd0:	1c5a      	adds	r2, r3, #1
 8021cd2:	4927      	ldr	r1, [pc, #156]	; (8021d70 <CheckPassSenError+0x1ec>)
 8021cd4:	68bb      	ldr	r3, [r7, #8]
 8021cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021cda:	e03b      	b.n	8021d54 <CheckPassSenError+0x1d0>
            }
        }
        else
        {
            mdwTickPSensorBlock[i] = 0;
 8021cdc:	4a24      	ldr	r2, [pc, #144]	; (8021d70 <CheckPassSenError+0x1ec>)
 8021cde:	68bb      	ldr	r3, [r7, #8]
 8021ce0:	2100      	movs	r1, #0
 8021ce2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            gdwPSensorError &= ~(1 << i);
 8021ce6:	2201      	movs	r2, #1
 8021ce8:	68bb      	ldr	r3, [r7, #8]
 8021cea:	fa02 f303 	lsl.w	r3, r2, r3
 8021cee:	43db      	mvns	r3, r3
 8021cf0:	461a      	mov	r2, r3
 8021cf2:	4b21      	ldr	r3, [pc, #132]	; (8021d78 <CheckPassSenError+0x1f4>)
 8021cf4:	681b      	ldr	r3, [r3, #0]
 8021cf6:	4013      	ands	r3, r2
 8021cf8:	4a1f      	ldr	r2, [pc, #124]	; (8021d78 <CheckPassSenError+0x1f4>)
 8021cfa:	6013      	str	r3, [r2, #0]

            if (i >= 0 && i < 8)
 8021cfc:	68bb      	ldr	r3, [r7, #8]
 8021cfe:	2b00      	cmp	r3, #0
 8021d00:	db12      	blt.n	8021d28 <CheckPassSenError+0x1a4>
 8021d02:	68bb      	ldr	r3, [r7, #8]
 8021d04:	2b07      	cmp	r3, #7
 8021d06:	dc0f      	bgt.n	8021d28 <CheckPassSenError+0x1a4>
                psenError.B.bSen1 &= ~(1 << i);
 8021d08:	4b1f      	ldr	r3, [pc, #124]	; (8021d88 <CheckPassSenError+0x204>)
 8021d0a:	781b      	ldrb	r3, [r3, #0]
 8021d0c:	b25a      	sxtb	r2, r3
 8021d0e:	2101      	movs	r1, #1
 8021d10:	68bb      	ldr	r3, [r7, #8]
 8021d12:	fa01 f303 	lsl.w	r3, r1, r3
 8021d16:	b25b      	sxtb	r3, r3
 8021d18:	43db      	mvns	r3, r3
 8021d1a:	b25b      	sxtb	r3, r3
 8021d1c:	4013      	ands	r3, r2
 8021d1e:	b25b      	sxtb	r3, r3
 8021d20:	b2da      	uxtb	r2, r3
 8021d22:	4b19      	ldr	r3, [pc, #100]	; (8021d88 <CheckPassSenError+0x204>)
 8021d24:	701a      	strb	r2, [r3, #0]
 8021d26:	e015      	b.n	8021d54 <CheckPassSenError+0x1d0>
            else if (i >= 8 && i < 16)
 8021d28:	68bb      	ldr	r3, [r7, #8]
 8021d2a:	2b07      	cmp	r3, #7
 8021d2c:	dd12      	ble.n	8021d54 <CheckPassSenError+0x1d0>
 8021d2e:	68bb      	ldr	r3, [r7, #8]
 8021d30:	2b0f      	cmp	r3, #15
 8021d32:	dc0f      	bgt.n	8021d54 <CheckPassSenError+0x1d0>
                psenError.B.bSen2 &= ~(1 << (i - 8));
 8021d34:	4b14      	ldr	r3, [pc, #80]	; (8021d88 <CheckPassSenError+0x204>)
 8021d36:	785b      	ldrb	r3, [r3, #1]
 8021d38:	b25a      	sxtb	r2, r3
 8021d3a:	68bb      	ldr	r3, [r7, #8]
 8021d3c:	3b08      	subs	r3, #8
 8021d3e:	2101      	movs	r1, #1
 8021d40:	fa01 f303 	lsl.w	r3, r1, r3
 8021d44:	b25b      	sxtb	r3, r3
 8021d46:	43db      	mvns	r3, r3
 8021d48:	b25b      	sxtb	r3, r3
 8021d4a:	4013      	ands	r3, r2
 8021d4c:	b25b      	sxtb	r3, r3
 8021d4e:	b2da      	uxtb	r2, r3
 8021d50:	4b0d      	ldr	r3, [pc, #52]	; (8021d88 <CheckPassSenError+0x204>)
 8021d52:	705a      	strb	r2, [r3, #1]
    for (i = 0; i < 16; i++)
 8021d54:	68bb      	ldr	r3, [r7, #8]
 8021d56:	3301      	adds	r3, #1
 8021d58:	60bb      	str	r3, [r7, #8]
 8021d5a:	68bb      	ldr	r3, [r7, #8]
 8021d5c:	2b0f      	cmp	r3, #15
 8021d5e:	f77f af1d 	ble.w	8021b9c <CheckPassSenError+0x18>
        {
            if (!psenError.swing.safety_EN && !psenError.swing.safety_EX)
                gGCUStatus.ModuleAlarm.b.nSafetyErr = OFF;
        }
    }
}
 8021d62:	bf00      	nop
 8021d64:	3710      	adds	r7, #16
 8021d66:	46bd      	mov	sp, r7
 8021d68:	bd80      	pop	{r7, pc}
 8021d6a:	bf00      	nop
 8021d6c:	60000100 	.word	0x60000100
 8021d70:	240004c0 	.word	0x240004c0
 8021d74:	24000514 	.word	0x24000514
 8021d78:	240004bc 	.word	0x240004bc
 8021d7c:	24000524 	.word	0x24000524
 8021d80:	24000548 	.word	0x24000548
 8021d84:	08032264 	.word	0x08032264
 8021d88:	24000510 	.word	0x24000510

08021d8c <InhibitPass>:
void InhibitPass(int nDir)
{
 8021d8c:	b580      	push	{r7, lr}
 8021d8e:	b082      	sub	sp, #8
 8021d90:	af00      	add	r7, sp, #0
 8021d92:	6078      	str	r0, [r7, #4]
	printf(" [InhibitPass] Dir:%d  \n", nDir);
 8021d94:	6879      	ldr	r1, [r7, #4]
 8021d96:	4814      	ldr	r0, [pc, #80]	; (8021de8 <InhibitPass+0x5c>)
 8021d98:	f007 fd5c 	bl	8029854 <printf_>
    ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8021d9c:	4b13      	ldr	r3, [pc, #76]	; (8021dec <InhibitPass+0x60>)
 8021d9e:	7a9b      	ldrb	r3, [r3, #10]
 8021da0:	461a      	mov	r2, r3
 8021da2:	2101      	movs	r1, #1
 8021da4:	2000      	movs	r0, #0
 8021da6:	f7ff fba5 	bl	80214f4 <ControlBuzzer>
    ControlDirectionLED(DIR_RED, DIR_RED);
 8021daa:	2102      	movs	r1, #2
 8021dac:	2002      	movs	r0, #2
 8021dae:	f7ff fbfb 	bl	80215a8 <ControlDirectionLED>

    if (nDir == FROM_ENTRY)
 8021db2:	687b      	ldr	r3, [r7, #4]
 8021db4:	2b01      	cmp	r3, #1
 8021db6:	d108      	bne.n	8021dca <InhibitPass+0x3e>
    {
        ControlIndicator(LAMP_RED_ON, gbIndicatorCMD_EX, gGCUParameter.bAlarmTimeout, TRUE);
 8021db8:	4b0d      	ldr	r3, [pc, #52]	; (8021df0 <InhibitPass+0x64>)
 8021dba:	7819      	ldrb	r1, [r3, #0]
 8021dbc:	4b0b      	ldr	r3, [pc, #44]	; (8021dec <InhibitPass+0x60>)
 8021dbe:	7a9a      	ldrb	r2, [r3, #10]
 8021dc0:	2301      	movs	r3, #1
 8021dc2:	2001      	movs	r0, #1
 8021dc4:	f7ff fc4c 	bl	8021660 <ControlIndicator>
    }
    else if (nDir == FROM_EXIT)
    {
        ControlIndicator(gbIndicatorCMD_EN, LAMP_RED_ON, gGCUParameter.bAlarmTimeout, TRUE);
    }
}
 8021dc8:	e00a      	b.n	8021de0 <InhibitPass+0x54>
    else if (nDir == FROM_EXIT)
 8021dca:	687b      	ldr	r3, [r7, #4]
 8021dcc:	2b02      	cmp	r3, #2
 8021dce:	d107      	bne.n	8021de0 <InhibitPass+0x54>
        ControlIndicator(gbIndicatorCMD_EN, LAMP_RED_ON, gGCUParameter.bAlarmTimeout, TRUE);
 8021dd0:	4b08      	ldr	r3, [pc, #32]	; (8021df4 <InhibitPass+0x68>)
 8021dd2:	7818      	ldrb	r0, [r3, #0]
 8021dd4:	4b05      	ldr	r3, [pc, #20]	; (8021dec <InhibitPass+0x60>)
 8021dd6:	7a9a      	ldrb	r2, [r3, #10]
 8021dd8:	2301      	movs	r3, #1
 8021dda:	2101      	movs	r1, #1
 8021ddc:	f7ff fc40 	bl	8021660 <ControlIndicator>
}
 8021de0:	bf00      	nop
 8021de2:	3708      	adds	r7, #8
 8021de4:	46bd      	mov	sp, r7
 8021de6:	bd80      	pop	{r7, pc}
 8021de8:	08032294 	.word	0x08032294
 8021dec:	24000514 	.word	0x24000514
 8021df0:	2400019c 	.word	0x2400019c
 8021df4:	2400019b 	.word	0x2400019b

08021df8 <ClearPassageAlarm>:

void ClearPassageAlarm()
{
 8021df8:	b580      	push	{r7, lr}
 8021dfa:	af00      	add	r7, sp, #0
    ResetTimer(&timerIllegalEnterEN);
 8021dfc:	482c      	ldr	r0, [pc, #176]	; (8021eb0 <ClearPassageAlarm+0xb8>)
 8021dfe:	f00e fe2d 	bl	8030a5c <ResetTimer>
    ResetTimer(&timerIllegalEnterEX);
 8021e02:	482c      	ldr	r0, [pc, #176]	; (8021eb4 <ClearPassageAlarm+0xbc>)
 8021e04:	f00e fe2a 	bl	8030a5c <ResetTimer>
    ResetTimer(&timerLuggageWait);
 8021e08:	482b      	ldr	r0, [pc, #172]	; (8021eb8 <ClearPassageAlarm+0xc0>)
 8021e0a:	f00e fe27 	bl	8030a5c <ResetTimer>

    // Passage clear timeout is reached, clear passage
    if (gGCUStatus.PassageAlarm.b.nFromEN)
 8021e0e:	4b2b      	ldr	r3, [pc, #172]	; (8021ebc <ClearPassageAlarm+0xc4>)
 8021e10:	7a1b      	ldrb	r3, [r3, #8]
 8021e12:	f003 0307 	and.w	r3, r3, #7
 8021e16:	b2db      	uxtb	r3, r3
 8021e18:	2b00      	cmp	r3, #0
 8021e1a:	d004      	beq.n	8021e26 <ClearPassageAlarm+0x2e>
        gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8021e1c:	4a27      	ldr	r2, [pc, #156]	; (8021ebc <ClearPassageAlarm+0xc4>)
 8021e1e:	7a13      	ldrb	r3, [r2, #8]
 8021e20:	f36f 0302 	bfc	r3, #0, #3
 8021e24:	7213      	strb	r3, [r2, #8]

    if (gGCUStatus.PassageAlarm.b.nFromEX)
 8021e26:	4b25      	ldr	r3, [pc, #148]	; (8021ebc <ClearPassageAlarm+0xc4>)
 8021e28:	7a1b      	ldrb	r3, [r3, #8]
 8021e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8021e2e:	b2db      	uxtb	r3, r3
 8021e30:	2b00      	cmp	r3, #0
 8021e32:	d004      	beq.n	8021e3e <ClearPassageAlarm+0x46>
        gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8021e34:	4a21      	ldr	r2, [pc, #132]	; (8021ebc <ClearPassageAlarm+0xc4>)
 8021e36:	7a13      	ldrb	r3, [r2, #8]
 8021e38:	f36f 1306 	bfc	r3, #4, #3
 8021e3c:	7213      	strb	r3, [r2, #8]

    if (gGCUStatus.PassageAlarm.b.nPassOverFromEN || gGCUStatus.PassageAlarm.b.nPassOverFromEX)
 8021e3e:	4b1f      	ldr	r3, [pc, #124]	; (8021ebc <ClearPassageAlarm+0xc4>)
 8021e40:	7a1b      	ldrb	r3, [r3, #8]
 8021e42:	f003 0308 	and.w	r3, r3, #8
 8021e46:	b2db      	uxtb	r3, r3
 8021e48:	2b00      	cmp	r3, #0
 8021e4a:	d106      	bne.n	8021e5a <ClearPassageAlarm+0x62>
 8021e4c:	4b1b      	ldr	r3, [pc, #108]	; (8021ebc <ClearPassageAlarm+0xc4>)
 8021e4e:	7a1b      	ldrb	r3, [r3, #8]
 8021e50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021e54:	b2db      	uxtb	r3, r3
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d009      	beq.n	8021e6e <ClearPassageAlarm+0x76>
    {
        gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8021e5a:	4a18      	ldr	r2, [pc, #96]	; (8021ebc <ClearPassageAlarm+0xc4>)
 8021e5c:	7a13      	ldrb	r3, [r2, #8]
 8021e5e:	f36f 03c3 	bfc	r3, #3, #1
 8021e62:	7213      	strb	r3, [r2, #8]
        gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8021e64:	4a15      	ldr	r2, [pc, #84]	; (8021ebc <ClearPassageAlarm+0xc4>)
 8021e66:	7a13      	ldrb	r3, [r2, #8]
 8021e68:	f36f 13c7 	bfc	r3, #7, #1
 8021e6c:	7213      	strb	r3, [r2, #8]
    }

    if (!psenNew.side.entry && (0 == gGCUStatus.bAuthCount_EN))
 8021e6e:	4b14      	ldr	r3, [pc, #80]	; (8021ec0 <ClearPassageAlarm+0xc8>)
 8021e70:	f993 3000 	ldrsb.w	r3, [r3]
 8021e74:	2b00      	cmp	r3, #0
 8021e76:	d107      	bne.n	8021e88 <ClearPassageAlarm+0x90>
 8021e78:	4b10      	ldr	r3, [pc, #64]	; (8021ebc <ClearPassageAlarm+0xc4>)
 8021e7a:	791b      	ldrb	r3, [r3, #4]
 8021e7c:	b2db      	uxtb	r3, r3
 8021e7e:	2b00      	cmp	r3, #0
 8021e80:	d102      	bne.n	8021e88 <ClearPassageAlarm+0x90>
    {
        gisEntryPassenger = FALSE;
 8021e82:	4b10      	ldr	r3, [pc, #64]	; (8021ec4 <ClearPassageAlarm+0xcc>)
 8021e84:	2200      	movs	r2, #0
 8021e86:	701a      	strb	r2, [r3, #0]
    }

    if (!psenNew.side.exit && (0 == gGCUStatus.bAuthCount_EX))
 8021e88:	4b0d      	ldr	r3, [pc, #52]	; (8021ec0 <ClearPassageAlarm+0xc8>)
 8021e8a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	d107      	bne.n	8021ea2 <ClearPassageAlarm+0xaa>
 8021e92:	4b0a      	ldr	r3, [pc, #40]	; (8021ebc <ClearPassageAlarm+0xc4>)
 8021e94:	795b      	ldrb	r3, [r3, #5]
 8021e96:	b2db      	uxtb	r3, r3
 8021e98:	2b00      	cmp	r3, #0
 8021e9a:	d102      	bne.n	8021ea2 <ClearPassageAlarm+0xaa>
    {
        gisExitPassenger = FALSE;
 8021e9c:	4b0a      	ldr	r3, [pc, #40]	; (8021ec8 <ClearPassageAlarm+0xd0>)
 8021e9e:	2200      	movs	r2, #0
 8021ea0:	701a      	strb	r2, [r3, #0]
    }

    gGCUStatus.IllegalPass.bIllegalPass = FLG_OFF;
 8021ea2:	4b06      	ldr	r3, [pc, #24]	; (8021ebc <ClearPassageAlarm+0xc4>)
 8021ea4:	2200      	movs	r2, #0
 8021ea6:	771a      	strb	r2, [r3, #28]

    ClearIllegalPass();
 8021ea8:	f000 f810 	bl	8021ecc <ClearIllegalPass>
}
 8021eac:	bf00      	nop
 8021eae:	bd80      	pop	{r7, pc}
 8021eb0:	24000210 	.word	0x24000210
 8021eb4:	2400021c 	.word	0x2400021c
 8021eb8:	2400024c 	.word	0x2400024c
 8021ebc:	24000524 	.word	0x24000524
 8021ec0:	24000488 	.word	0x24000488
 8021ec4:	240004af 	.word	0x240004af
 8021ec8:	240004b0 	.word	0x240004b0

08021ecc <ClearIllegalPass>:

void ClearIllegalPass(void)
{
 8021ecc:	b580      	push	{r7, lr}
 8021ece:	af00      	add	r7, sp, #0
    if (gGCUStatus.PassageAlarm.b.nFromEN)
 8021ed0:	4b2a      	ldr	r3, [pc, #168]	; (8021f7c <ClearIllegalPass+0xb0>)
 8021ed2:	7a1b      	ldrb	r3, [r3, #8]
 8021ed4:	f003 0307 	and.w	r3, r3, #7
 8021ed8:	b2db      	uxtb	r3, r3
 8021eda:	2b00      	cmp	r3, #0
 8021edc:	d022      	beq.n	8021f24 <ClearIllegalPass+0x58>
    {
        if (!psenNew.side.entry)
 8021ede:	4b28      	ldr	r3, [pc, #160]	; (8021f80 <ClearIllegalPass+0xb4>)
 8021ee0:	f993 3000 	ldrsb.w	r3, [r3]
 8021ee4:	2b00      	cmp	r3, #0
 8021ee6:	d11d      	bne.n	8021f24 <ClearIllegalPass+0x58>
        {
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8021ee8:	4a24      	ldr	r2, [pc, #144]	; (8021f7c <ClearIllegalPass+0xb0>)
 8021eea:	7a13      	ldrb	r3, [r2, #8]
 8021eec:	f36f 0302 	bfc	r3, #0, #3
 8021ef0:	7213      	strb	r3, [r2, #8]
            gisEntryPassenger = FALSE;
 8021ef2:	4b24      	ldr	r3, [pc, #144]	; (8021f84 <ClearIllegalPass+0xb8>)
 8021ef4:	2200      	movs	r2, #0
 8021ef6:	701a      	strb	r2, [r3, #0]
            {
                gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
                //PRINTL(" [EN] Clear Illegal Enter");
                printf(" [EN] Clear Illegal Enter  \n");
            }
            ResetTimer(&timerIllegalEnterEN);
 8021ef8:	4823      	ldr	r0, [pc, #140]	; (8021f88 <ClearIllegalPass+0xbc>)
 8021efa:	f00e fdaf 	bl	8030a5c <ResetTimer>

            if (timerJumping.fStart == FALSE && timerTailgating.fStart == FALSE)
 8021efe:	4b23      	ldr	r3, [pc, #140]	; (8021f8c <ClearIllegalPass+0xc0>)
 8021f00:	781b      	ldrb	r3, [r3, #0]
 8021f02:	f083 0301 	eor.w	r3, r3, #1
 8021f06:	b2db      	uxtb	r3, r3
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	d00b      	beq.n	8021f24 <ClearIllegalPass+0x58>
 8021f0c:	4b20      	ldr	r3, [pc, #128]	; (8021f90 <ClearIllegalPass+0xc4>)
 8021f0e:	781b      	ldrb	r3, [r3, #0]
 8021f10:	f083 0301 	eor.w	r3, r3, #1
 8021f14:	b2db      	uxtb	r3, r3
 8021f16:	2b00      	cmp	r3, #0
 8021f18:	d004      	beq.n	8021f24 <ClearIllegalPass+0x58>
            {
                InitPassageMode();
 8021f1a:	f000 f9f1 	bl	8022300 <InitPassageMode>
                //PRINTL(" [EN] ClearIllegalPass - InitPassageMode");
                printf(" [EN] ClearIllegalPass - InitPassageMode  \n");
 8021f1e:	481d      	ldr	r0, [pc, #116]	; (8021f94 <ClearIllegalPass+0xc8>)
 8021f20:	f007 fc98 	bl	8029854 <printf_>
            }
        }
    }

    if (gGCUStatus.PassageAlarm.b.nFromEX)
 8021f24:	4b15      	ldr	r3, [pc, #84]	; (8021f7c <ClearIllegalPass+0xb0>)
 8021f26:	7a1b      	ldrb	r3, [r3, #8]
 8021f28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8021f2c:	b2db      	uxtb	r3, r3
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d022      	beq.n	8021f78 <ClearIllegalPass+0xac>
    {
        if (!psenNew.side.exit)
 8021f32:	4b13      	ldr	r3, [pc, #76]	; (8021f80 <ClearIllegalPass+0xb4>)
 8021f34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8021f38:	2b00      	cmp	r3, #0
 8021f3a:	d11d      	bne.n	8021f78 <ClearIllegalPass+0xac>
        {
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8021f3c:	4a0f      	ldr	r2, [pc, #60]	; (8021f7c <ClearIllegalPass+0xb0>)
 8021f3e:	7a13      	ldrb	r3, [r2, #8]
 8021f40:	f36f 1306 	bfc	r3, #4, #3
 8021f44:	7213      	strb	r3, [r2, #8]
            gisExitPassenger = FALSE;
 8021f46:	4b14      	ldr	r3, [pc, #80]	; (8021f98 <ClearIllegalPass+0xcc>)
 8021f48:	2200      	movs	r2, #0
 8021f4a:	701a      	strb	r2, [r3, #0]
            {
                gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
                //PRINTL(" [EX] Clear Illegal Enter");
                printf(" [EX] Clear Illegal Enter  \n");
            }
            ResetTimer(&timerIllegalEnterEX);
 8021f4c:	4813      	ldr	r0, [pc, #76]	; (8021f9c <ClearIllegalPass+0xd0>)
 8021f4e:	f00e fd85 	bl	8030a5c <ResetTimer>

            if (timerJumping.fStart == FALSE && timerTailgating.fStart == FALSE)
 8021f52:	4b0e      	ldr	r3, [pc, #56]	; (8021f8c <ClearIllegalPass+0xc0>)
 8021f54:	781b      	ldrb	r3, [r3, #0]
 8021f56:	f083 0301 	eor.w	r3, r3, #1
 8021f5a:	b2db      	uxtb	r3, r3
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	d00b      	beq.n	8021f78 <ClearIllegalPass+0xac>
 8021f60:	4b0b      	ldr	r3, [pc, #44]	; (8021f90 <ClearIllegalPass+0xc4>)
 8021f62:	781b      	ldrb	r3, [r3, #0]
 8021f64:	f083 0301 	eor.w	r3, r3, #1
 8021f68:	b2db      	uxtb	r3, r3
 8021f6a:	2b00      	cmp	r3, #0
 8021f6c:	d004      	beq.n	8021f78 <ClearIllegalPass+0xac>
            {
                InitPassageMode();
 8021f6e:	f000 f9c7 	bl	8022300 <InitPassageMode>
               // PRINTL(" [EX] ClearIllegalPass - InitPassageMode");

                printf(" [EX] ClearIllegalPass - InitPassageMode  \n");
 8021f72:	480b      	ldr	r0, [pc, #44]	; (8021fa0 <ClearIllegalPass+0xd4>)
 8021f74:	f007 fc6e 	bl	8029854 <printf_>
            }
        }
    }
}
 8021f78:	bf00      	nop
 8021f7a:	bd80      	pop	{r7, pc}
 8021f7c:	24000524 	.word	0x24000524
 8021f80:	24000488 	.word	0x24000488
 8021f84:	240004af 	.word	0x240004af
 8021f88:	24000210 	.word	0x24000210
 8021f8c:	24000264 	.word	0x24000264
 8021f90:	24000270 	.word	0x24000270
 8021f94:	080322b0 	.word	0x080322b0
 8021f98:	240004b0 	.word	0x240004b0
 8021f9c:	2400021c 	.word	0x2400021c
 8021fa0:	080322dc 	.word	0x080322dc

08021fa4 <CheckAuthTimeout>:

void CheckAuthTimeout(void)
{
 8021fa4:	b580      	push	{r7, lr}
 8021fa6:	af00      	add	r7, sp, #0
    if (timerAuthorize.fStart)
 8021fa8:	4b1a      	ldr	r3, [pc, #104]	; (8022014 <CheckAuthTimeout+0x70>)
 8021faa:	781b      	ldrb	r3, [r3, #0]
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	d02e      	beq.n	802200e <CheckAuthTimeout+0x6a>
    {
        if (IsTimeout(&timerAuthorize, (gdwTimeoutAuthorize * TICK_COUNT_1SEC)))
 8021fb0:	4b19      	ldr	r3, [pc, #100]	; (8022018 <CheckAuthTimeout+0x74>)
 8021fb2:	681b      	ldr	r3, [r3, #0]
 8021fb4:	2264      	movs	r2, #100	; 0x64
 8021fb6:	fb02 f303 	mul.w	r3, r2, r3
 8021fba:	4619      	mov	r1, r3
 8021fbc:	4815      	ldr	r0, [pc, #84]	; (8022014 <CheckAuthTimeout+0x70>)
 8021fbe:	f00e fd5b 	bl	8030a78 <IsTimeout>
 8021fc2:	4603      	mov	r3, r0
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d022      	beq.n	802200e <CheckAuthTimeout+0x6a>
        {
           // PRINTL(" [CheckAuthTimeout] ElapsedTime:%d", gdwTimeoutAuthorize);
        	printf(" [CheckAuthTimeout] ElapsedTime:%d  \n", gdwTimeoutAuthorize);
 8021fc8:	4b13      	ldr	r3, [pc, #76]	; (8022018 <CheckAuthTimeout+0x74>)
 8021fca:	681b      	ldr	r3, [r3, #0]
 8021fcc:	4619      	mov	r1, r3
 8021fce:	4813      	ldr	r0, [pc, #76]	; (802201c <CheckAuthTimeout+0x78>)
 8021fd0:	f007 fc40 	bl	8029854 <printf_>
            ResetTimer(&timerAuthorize);            
 8021fd4:	480f      	ldr	r0, [pc, #60]	; (8022014 <CheckAuthTimeout+0x70>)
 8021fd6:	f00e fd41 	bl	8030a5c <ResetTimer>
            gGCUStatus.bAuthCount_EN = 0;
 8021fda:	4b11      	ldr	r3, [pc, #68]	; (8022020 <CheckAuthTimeout+0x7c>)
 8021fdc:	2200      	movs	r2, #0
 8021fde:	711a      	strb	r2, [r3, #4]
            gGCUStatus.bAuthCount_EX = 0;
 8021fe0:	4b0f      	ldr	r3, [pc, #60]	; (8022020 <CheckAuthTimeout+0x7c>)
 8021fe2:	2200      	movs	r2, #0
 8021fe4:	715a      	strb	r2, [r3, #5]
            gfisAuthTimeout = TRUE;
 8021fe6:	4b0f      	ldr	r3, [pc, #60]	; (8022024 <CheckAuthTimeout+0x80>)
 8021fe8:	2201      	movs	r2, #1
 8021fea:	701a      	strb	r2, [r3, #0]
            ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 8021fec:	2300      	movs	r3, #0
 8021fee:	2200      	movs	r2, #0
 8021ff0:	2100      	movs	r1, #0
 8021ff2:	2000      	movs	r0, #0
 8021ff4:	f7ff fb34 	bl	8021660 <ControlIndicator>
            if (gGCUStatus.PassageAlarm.bAlarm != 0)
 8021ff8:	4b09      	ldr	r3, [pc, #36]	; (8022020 <CheckAuthTimeout+0x7c>)
 8021ffa:	7a1b      	ldrb	r3, [r3, #8]
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	d004      	beq.n	802200a <CheckAuthTimeout+0x66>
            {
                ClearIllegalPass();
 8022000:	f7ff ff64 	bl	8021ecc <ClearIllegalPass>
                gGCUStatus.PassageAlarm.bAlarm = 0;
 8022004:	4b06      	ldr	r3, [pc, #24]	; (8022020 <CheckAuthTimeout+0x7c>)
 8022006:	2200      	movs	r2, #0
 8022008:	721a      	strb	r2, [r3, #8]
            }

            InitPassageMode();
 802200a:	f000 f979 	bl	8022300 <InitPassageMode>
        }
    }
}
 802200e:	bf00      	nop
 8022010:	bd80      	pop	{r7, pc}
 8022012:	bf00      	nop
 8022014:	240001d4 	.word	0x240001d4
 8022018:	240001c8 	.word	0x240001c8
 802201c:	08032308 	.word	0x08032308
 8022020:	24000524 	.word	0x24000524
 8022024:	240001a8 	.word	0x240001a8

08022028 <CheckIllegalAlarmTimer>:

void CheckIllegalAlarmTimer(void)
{
 8022028:	b580      	push	{r7, lr}
 802202a:	af00      	add	r7, sp, #0
    if (timerJumping.fStart)
 802202c:	4b33      	ldr	r3, [pc, #204]	; (80220fc <CheckIllegalAlarmTimer+0xd4>)
 802202e:	781b      	ldrb	r3, [r3, #0]
 8022030:	2b00      	cmp	r3, #0
 8022032:	d02f      	beq.n	8022094 <CheckIllegalAlarmTimer+0x6c>
    {
        if (IsTimeout(&timerJumping, gdwTimeoutJumping))
 8022034:	4b32      	ldr	r3, [pc, #200]	; (8022100 <CheckIllegalAlarmTimer+0xd8>)
 8022036:	681b      	ldr	r3, [r3, #0]
 8022038:	4619      	mov	r1, r3
 802203a:	4830      	ldr	r0, [pc, #192]	; (80220fc <CheckIllegalAlarmTimer+0xd4>)
 802203c:	f00e fd1c 	bl	8030a78 <IsTimeout>
 8022040:	4603      	mov	r3, r0
 8022042:	2b00      	cmp	r3, #0
 8022044:	d026      	beq.n	8022094 <CheckIllegalAlarmTimer+0x6c>
        {
            gGCUStatus.IllegalPass.b.nJumping_EN = FLG_OFF;
 8022046:	4a2f      	ldr	r2, [pc, #188]	; (8022104 <CheckIllegalAlarmTimer+0xdc>)
 8022048:	7f13      	ldrb	r3, [r2, #28]
 802204a:	f36f 0341 	bfc	r3, #1, #1
 802204e:	7713      	strb	r3, [r2, #28]
            gGCUStatus.IllegalPass.b.nJumping_EX = FLG_OFF;
 8022050:	4a2c      	ldr	r2, [pc, #176]	; (8022104 <CheckIllegalAlarmTimer+0xdc>)
 8022052:	7f13      	ldrb	r3, [r2, #28]
 8022054:	f36f 1345 	bfc	r3, #5, #1
 8022058:	7713      	strb	r3, [r2, #28]
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 802205a:	4a2a      	ldr	r2, [pc, #168]	; (8022104 <CheckIllegalAlarmTimer+0xdc>)
 802205c:	7a13      	ldrb	r3, [r2, #8]
 802205e:	f36f 0302 	bfc	r3, #0, #3
 8022062:	7213      	strb	r3, [r2, #8]
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8022064:	4a27      	ldr	r2, [pc, #156]	; (8022104 <CheckIllegalAlarmTimer+0xdc>)
 8022066:	7a13      	ldrb	r3, [r2, #8]
 8022068:	f36f 1306 	bfc	r3, #4, #3
 802206c:	7213      	strb	r3, [r2, #8]
            ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 802206e:	4b26      	ldr	r3, [pc, #152]	; (8022108 <CheckIllegalAlarmTimer+0xe0>)
 8022070:	781b      	ldrb	r3, [r3, #0]
 8022072:	4a26      	ldr	r2, [pc, #152]	; (802210c <CheckIllegalAlarmTimer+0xe4>)
 8022074:	7812      	ldrb	r2, [r2, #0]
 8022076:	4611      	mov	r1, r2
 8022078:	4618      	mov	r0, r3
 802207a:	f7ff fa95 	bl	80215a8 <ControlDirectionLED>
            ControlIndicatorBlink(FLG_OFF);
 802207e:	2000      	movs	r0, #0
 8022080:	f7ff fb76 	bl	8021770 <ControlIndicatorBlink>
            ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 8022084:	2200      	movs	r2, #0
 8022086:	2100      	movs	r1, #0
 8022088:	2000      	movs	r0, #0
 802208a:	f7ff fa33 	bl	80214f4 <ControlBuzzer>
            ResetTimer(&timerJumping);
 802208e:	481b      	ldr	r0, [pc, #108]	; (80220fc <CheckIllegalAlarmTimer+0xd4>)
 8022090:	f00e fce4 	bl	8030a5c <ResetTimer>
        }
    }

    if (timerTailgating.fStart)
 8022094:	4b1e      	ldr	r3, [pc, #120]	; (8022110 <CheckIllegalAlarmTimer+0xe8>)
 8022096:	781b      	ldrb	r3, [r3, #0]
 8022098:	2b00      	cmp	r3, #0
 802209a:	d02d      	beq.n	80220f8 <CheckIllegalAlarmTimer+0xd0>
    {
        if (IsTimeout(&timerTailgating, DEFAULT_TAILGATING_TIMEOUT * TICK_COUNT_1SEC))
 802209c:	21c8      	movs	r1, #200	; 0xc8
 802209e:	481c      	ldr	r0, [pc, #112]	; (8022110 <CheckIllegalAlarmTimer+0xe8>)
 80220a0:	f00e fcea 	bl	8030a78 <IsTimeout>
 80220a4:	4603      	mov	r3, r0
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	d026      	beq.n	80220f8 <CheckIllegalAlarmTimer+0xd0>
        {
            gGCUStatus.IllegalPass.b.nTailgating_EN = FLG_OFF;
 80220aa:	4a16      	ldr	r2, [pc, #88]	; (8022104 <CheckIllegalAlarmTimer+0xdc>)
 80220ac:	7f13      	ldrb	r3, [r2, #28]
 80220ae:	f36f 0300 	bfc	r3, #0, #1
 80220b2:	7713      	strb	r3, [r2, #28]
            gGCUStatus.IllegalPass.b.nTailgating_EX = FLG_OFF;
 80220b4:	4a13      	ldr	r2, [pc, #76]	; (8022104 <CheckIllegalAlarmTimer+0xdc>)
 80220b6:	7f13      	ldrb	r3, [r2, #28]
 80220b8:	f36f 1304 	bfc	r3, #4, #1
 80220bc:	7713      	strb	r3, [r2, #28]
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 80220be:	4a11      	ldr	r2, [pc, #68]	; (8022104 <CheckIllegalAlarmTimer+0xdc>)
 80220c0:	7a13      	ldrb	r3, [r2, #8]
 80220c2:	f36f 0302 	bfc	r3, #0, #3
 80220c6:	7213      	strb	r3, [r2, #8]
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 80220c8:	4a0e      	ldr	r2, [pc, #56]	; (8022104 <CheckIllegalAlarmTimer+0xdc>)
 80220ca:	7a13      	ldrb	r3, [r2, #8]
 80220cc:	f36f 1306 	bfc	r3, #4, #3
 80220d0:	7213      	strb	r3, [r2, #8]
            ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 80220d2:	4b0d      	ldr	r3, [pc, #52]	; (8022108 <CheckIllegalAlarmTimer+0xe0>)
 80220d4:	781b      	ldrb	r3, [r3, #0]
 80220d6:	4a0d      	ldr	r2, [pc, #52]	; (802210c <CheckIllegalAlarmTimer+0xe4>)
 80220d8:	7812      	ldrb	r2, [r2, #0]
 80220da:	4611      	mov	r1, r2
 80220dc:	4618      	mov	r0, r3
 80220de:	f7ff fa63 	bl	80215a8 <ControlDirectionLED>
            ControlIndicatorBlink(FLG_OFF);
 80220e2:	2000      	movs	r0, #0
 80220e4:	f7ff fb44 	bl	8021770 <ControlIndicatorBlink>
            ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 80220e8:	2200      	movs	r2, #0
 80220ea:	2100      	movs	r1, #0
 80220ec:	2000      	movs	r0, #0
 80220ee:	f7ff fa01 	bl	80214f4 <ControlBuzzer>
            ResetTimer(&timerTailgating);
 80220f2:	4807      	ldr	r0, [pc, #28]	; (8022110 <CheckIllegalAlarmTimer+0xe8>)
 80220f4:	f00e fcb2 	bl	8030a5c <ResetTimer>
        }
    }
}
 80220f8:	bf00      	nop
 80220fa:	bd80      	pop	{r7, pc}
 80220fc:	24000264 	.word	0x24000264
 8022100:	240001cc 	.word	0x240001cc
 8022104:	24000524 	.word	0x24000524
 8022108:	2400019d 	.word	0x2400019d
 802210c:	2400019e 	.word	0x2400019e
 8022110:	24000270 	.word	0x24000270

08022114 <CheckBlinkTimer>:

void CheckBlinkTimer(void)
{
 8022114:	b580      	push	{r7, lr}
 8022116:	af00      	add	r7, sp, #0
    if (timerBlink.fStart)
 8022118:	4b17      	ldr	r3, [pc, #92]	; (8022178 <CheckBlinkTimer+0x64>)
 802211a:	781b      	ldrb	r3, [r3, #0]
 802211c:	2b00      	cmp	r3, #0
 802211e:	d029      	beq.n	8022174 <CheckBlinkTimer+0x60>
    {
        if (IsTimeout(&timerBlink, gdwTimeoutBlink))
 8022120:	4b16      	ldr	r3, [pc, #88]	; (802217c <CheckBlinkTimer+0x68>)
 8022122:	681b      	ldr	r3, [r3, #0]
 8022124:	4619      	mov	r1, r3
 8022126:	4814      	ldr	r0, [pc, #80]	; (8022178 <CheckBlinkTimer+0x64>)
 8022128:	f00e fca6 	bl	8030a78 <IsTimeout>
 802212c:	4603      	mov	r3, r0
 802212e:	2b00      	cmp	r3, #0
 8022130:	d020      	beq.n	8022174 <CheckBlinkTimer+0x60>
        {
            if (FLG_SET == gbIndicatorBlink)
 8022132:	4b13      	ldr	r3, [pc, #76]	; (8022180 <CheckBlinkTimer+0x6c>)
 8022134:	781b      	ldrb	r3, [r3, #0]
 8022136:	2b01      	cmp	r3, #1
 8022138:	d116      	bne.n	8022168 <CheckBlinkTimer+0x54>
            {
                if (gbIndicatorFlag)
 802213a:	4b12      	ldr	r3, [pc, #72]	; (8022184 <CheckBlinkTimer+0x70>)
 802213c:	781b      	ldrb	r3, [r3, #0]
 802213e:	2b00      	cmp	r3, #0
 8022140:	d009      	beq.n	8022156 <CheckBlinkTimer+0x42>
                {
                    gbIndicatorFlag = FLG_OFF;
 8022142:	4b10      	ldr	r3, [pc, #64]	; (8022184 <CheckBlinkTimer+0x70>)
 8022144:	2200      	movs	r2, #0
 8022146:	701a      	strb	r2, [r3, #0]
                    ControlIndicator(LAMP_OFF, LAMP_OFF, 0, TRUE);
 8022148:	2301      	movs	r3, #1
 802214a:	2200      	movs	r2, #0
 802214c:	2100      	movs	r1, #0
 802214e:	2000      	movs	r0, #0
 8022150:	f7ff fa86 	bl	8021660 <ControlIndicator>
 8022154:	e008      	b.n	8022168 <CheckBlinkTimer+0x54>
                }
                else
                {
                    gbIndicatorFlag = FLG_SET;
 8022156:	4b0b      	ldr	r3, [pc, #44]	; (8022184 <CheckBlinkTimer+0x70>)
 8022158:	2201      	movs	r2, #1
 802215a:	701a      	strb	r2, [r3, #0]
                    ControlIndicator(LAMP_RED_ON, LAMP_RED_ON, 0, TRUE);
 802215c:	2301      	movs	r3, #1
 802215e:	2200      	movs	r2, #0
 8022160:	2101      	movs	r1, #1
 8022162:	2001      	movs	r0, #1
 8022164:	f7ff fa7c 	bl	8021660 <ControlIndicator>
                }
            }
            ResetTimer(&timerBlink);
 8022168:	4803      	ldr	r0, [pc, #12]	; (8022178 <CheckBlinkTimer+0x64>)
 802216a:	f00e fc77 	bl	8030a5c <ResetTimer>
            SetTimer(&timerBlink);
 802216e:	4802      	ldr	r0, [pc, #8]	; (8022178 <CheckBlinkTimer+0x64>)
 8022170:	f00e fc60 	bl	8030a34 <SetTimer>
        }
    }
}
 8022174:	bf00      	nop
 8022176:	bd80      	pop	{r7, pc}
 8022178:	24000228 	.word	0x24000228
 802217c:	240001c4 	.word	0x240001c4
 8022180:	2400019a 	.word	0x2400019a
 8022184:	240001a0 	.word	0x240001a0

08022188 <CheckIllegalEnterTimer>:

void CheckIllegalEnterTimer(BYTE dir)
{
 8022188:	b580      	push	{r7, lr}
 802218a:	b082      	sub	sp, #8
 802218c:	af00      	add	r7, sp, #0
 802218e:	4603      	mov	r3, r0
 8022190:	71fb      	strb	r3, [r7, #7]
    if (FROM_ENTRY == dir)
 8022192:	79fb      	ldrb	r3, [r7, #7]
 8022194:	2b01      	cmp	r3, #1
 8022196:	d139      	bne.n	802220c <CheckIllegalEnterTimer+0x84>
    {
        if (timerIllegalEnterEN.fStart)
 8022198:	4b3c      	ldr	r3, [pc, #240]	; (802228c <CheckIllegalEnterTimer+0x104>)
 802219a:	781b      	ldrb	r3, [r3, #0]
 802219c:	2b00      	cmp	r3, #0
 802219e:	d01d      	beq.n	80221dc <CheckIllegalEnterTimer+0x54>
        {
            if (IsTimeout(&timerIllegalEnterEN, gdwTimeoutUnauthorize))
 80221a0:	4b3b      	ldr	r3, [pc, #236]	; (8022290 <CheckIllegalEnterTimer+0x108>)
 80221a2:	681b      	ldr	r3, [r3, #0]
 80221a4:	4619      	mov	r1, r3
 80221a6:	4839      	ldr	r0, [pc, #228]	; (802228c <CheckIllegalEnterTimer+0x104>)
 80221a8:	f00e fc66 	bl	8030a78 <IsTimeout>
 80221ac:	4603      	mov	r3, r0
 80221ae:	2b00      	cmp	r3, #0
 80221b0:	d068      	beq.n	8022284 <CheckIllegalEnterTimer+0xfc>
            {
                ResetTimer(&timerIllegalEnterEN);
 80221b2:	4836      	ldr	r0, [pc, #216]	; (802228c <CheckIllegalEnterTimer+0x104>)
 80221b4:	f00e fc52 	bl	8030a5c <ResetTimer>
                gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_SET;
 80221b8:	4a36      	ldr	r2, [pc, #216]	; (8022294 <CheckIllegalEnterTimer+0x10c>)
 80221ba:	7f13      	ldrb	r3, [r2, #28]
 80221bc:	f043 0304 	orr.w	r3, r3, #4
 80221c0:	7713      	strb	r3, [r2, #28]
                gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_ILLEGAL_ENTER;
 80221c2:	4a34      	ldr	r2, [pc, #208]	; (8022294 <CheckIllegalEnterTimer+0x10c>)
 80221c4:	7a13      	ldrb	r3, [r2, #8]
 80221c6:	2101      	movs	r1, #1
 80221c8:	f361 0302 	bfi	r3, r1, #0, #3
 80221cc:	7213      	strb	r3, [r2, #8]
                InhibitPass(FROM_ENTRY);
 80221ce:	2001      	movs	r0, #1
 80221d0:	f7ff fddc 	bl	8021d8c <InhibitPass>
               // PRINTL(" [EN] Inhibit Pass - Illegal Enter");
                printf(" [EN] Inhibit Pass - Illegal Enter  \n");
 80221d4:	4830      	ldr	r0, [pc, #192]	; (8022298 <CheckIllegalEnterTimer+0x110>)
 80221d6:	f007 fb3d 	bl	8029854 <printf_>
                    SetTimer(&timerIllegalEnterEX);
                }
            }
        }
    }
}
 80221da:	e053      	b.n	8022284 <CheckIllegalEnterTimer+0xfc>
            if (gGCUStatus.IllegalPass.b.nIllegal_EN == FLG_OFF)
 80221dc:	4b2d      	ldr	r3, [pc, #180]	; (8022294 <CheckIllegalEnterTimer+0x10c>)
 80221de:	7f1b      	ldrb	r3, [r3, #28]
 80221e0:	f003 0304 	and.w	r3, r3, #4
 80221e4:	b2db      	uxtb	r3, r3
 80221e6:	2b00      	cmp	r3, #0
 80221e8:	d14c      	bne.n	8022284 <CheckIllegalEnterTimer+0xfc>
                if (gGCUParameter.bIllegalEntryTimeout)
 80221ea:	4b2c      	ldr	r3, [pc, #176]	; (802229c <CheckIllegalEnterTimer+0x114>)
 80221ec:	7adb      	ldrb	r3, [r3, #11]
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	d048      	beq.n	8022284 <CheckIllegalEnterTimer+0xfc>
                    gdwTimeoutUnauthorize = gGCUParameter.bIllegalEntryTimeout * TICK_COUNT_1SEC;
 80221f2:	4b2a      	ldr	r3, [pc, #168]	; (802229c <CheckIllegalEnterTimer+0x114>)
 80221f4:	7adb      	ldrb	r3, [r3, #11]
 80221f6:	461a      	mov	r2, r3
 80221f8:	2364      	movs	r3, #100	; 0x64
 80221fa:	fb02 f303 	mul.w	r3, r2, r3
 80221fe:	461a      	mov	r2, r3
 8022200:	4b23      	ldr	r3, [pc, #140]	; (8022290 <CheckIllegalEnterTimer+0x108>)
 8022202:	601a      	str	r2, [r3, #0]
                    SetTimer(&timerIllegalEnterEN);
 8022204:	4821      	ldr	r0, [pc, #132]	; (802228c <CheckIllegalEnterTimer+0x104>)
 8022206:	f00e fc15 	bl	8030a34 <SetTimer>
}
 802220a:	e03b      	b.n	8022284 <CheckIllegalEnterTimer+0xfc>
    else if (FROM_EXIT == dir)
 802220c:	79fb      	ldrb	r3, [r7, #7]
 802220e:	2b02      	cmp	r3, #2
 8022210:	d138      	bne.n	8022284 <CheckIllegalEnterTimer+0xfc>
        if (timerIllegalEnterEX.fStart)
 8022212:	4b23      	ldr	r3, [pc, #140]	; (80222a0 <CheckIllegalEnterTimer+0x118>)
 8022214:	781b      	ldrb	r3, [r3, #0]
 8022216:	2b00      	cmp	r3, #0
 8022218:	d01d      	beq.n	8022256 <CheckIllegalEnterTimer+0xce>
            if (IsTimeout(&timerIllegalEnterEX, gdwTimeoutUnauthorize))
 802221a:	4b1d      	ldr	r3, [pc, #116]	; (8022290 <CheckIllegalEnterTimer+0x108>)
 802221c:	681b      	ldr	r3, [r3, #0]
 802221e:	4619      	mov	r1, r3
 8022220:	481f      	ldr	r0, [pc, #124]	; (80222a0 <CheckIllegalEnterTimer+0x118>)
 8022222:	f00e fc29 	bl	8030a78 <IsTimeout>
 8022226:	4603      	mov	r3, r0
 8022228:	2b00      	cmp	r3, #0
 802222a:	d02b      	beq.n	8022284 <CheckIllegalEnterTimer+0xfc>
                ResetTimer(&timerIllegalEnterEX);
 802222c:	481c      	ldr	r0, [pc, #112]	; (80222a0 <CheckIllegalEnterTimer+0x118>)
 802222e:	f00e fc15 	bl	8030a5c <ResetTimer>
                gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_SET;
 8022232:	4a18      	ldr	r2, [pc, #96]	; (8022294 <CheckIllegalEnterTimer+0x10c>)
 8022234:	7f13      	ldrb	r3, [r2, #28]
 8022236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802223a:	7713      	strb	r3, [r2, #28]
                gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_ILLEGAL_ENTER;
 802223c:	4a15      	ldr	r2, [pc, #84]	; (8022294 <CheckIllegalEnterTimer+0x10c>)
 802223e:	7a13      	ldrb	r3, [r2, #8]
 8022240:	2101      	movs	r1, #1
 8022242:	f361 1306 	bfi	r3, r1, #4, #3
 8022246:	7213      	strb	r3, [r2, #8]
                InhibitPass(FROM_EXIT);
 8022248:	2002      	movs	r0, #2
 802224a:	f7ff fd9f 	bl	8021d8c <InhibitPass>
                printf(" [EX] Inhibit Pass - Illegal Enter  \n");
 802224e:	4815      	ldr	r0, [pc, #84]	; (80222a4 <CheckIllegalEnterTimer+0x11c>)
 8022250:	f007 fb00 	bl	8029854 <printf_>
}
 8022254:	e016      	b.n	8022284 <CheckIllegalEnterTimer+0xfc>
            if (gGCUStatus.IllegalPass.b.nIllegal_EX == FLG_OFF)
 8022256:	4b0f      	ldr	r3, [pc, #60]	; (8022294 <CheckIllegalEnterTimer+0x10c>)
 8022258:	7f1b      	ldrb	r3, [r3, #28]
 802225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802225e:	b2db      	uxtb	r3, r3
 8022260:	2b00      	cmp	r3, #0
 8022262:	d10f      	bne.n	8022284 <CheckIllegalEnterTimer+0xfc>
                if (gGCUParameter.bIllegalEntryTimeout)
 8022264:	4b0d      	ldr	r3, [pc, #52]	; (802229c <CheckIllegalEnterTimer+0x114>)
 8022266:	7adb      	ldrb	r3, [r3, #11]
 8022268:	2b00      	cmp	r3, #0
 802226a:	d00b      	beq.n	8022284 <CheckIllegalEnterTimer+0xfc>
                    gdwTimeoutUnauthorize = gGCUParameter.bIllegalEntryTimeout * TICK_COUNT_1SEC;
 802226c:	4b0b      	ldr	r3, [pc, #44]	; (802229c <CheckIllegalEnterTimer+0x114>)
 802226e:	7adb      	ldrb	r3, [r3, #11]
 8022270:	461a      	mov	r2, r3
 8022272:	2364      	movs	r3, #100	; 0x64
 8022274:	fb02 f303 	mul.w	r3, r2, r3
 8022278:	461a      	mov	r2, r3
 802227a:	4b05      	ldr	r3, [pc, #20]	; (8022290 <CheckIllegalEnterTimer+0x108>)
 802227c:	601a      	str	r2, [r3, #0]
                    SetTimer(&timerIllegalEnterEX);
 802227e:	4808      	ldr	r0, [pc, #32]	; (80222a0 <CheckIllegalEnterTimer+0x118>)
 8022280:	f00e fbd8 	bl	8030a34 <SetTimer>
}
 8022284:	bf00      	nop
 8022286:	3708      	adds	r7, #8
 8022288:	46bd      	mov	sp, r7
 802228a:	bd80      	pop	{r7, pc}
 802228c:	24000210 	.word	0x24000210
 8022290:	240001d0 	.word	0x240001d0
 8022294:	24000524 	.word	0x24000524
 8022298:	08032330 	.word	0x08032330
 802229c:	24000514 	.word	0x24000514
 80222a0:	2400021c 	.word	0x2400021c
 80222a4:	08032358 	.word	0x08032358

080222a8 <SetAuthTimer>:

void SetAuthTimer(void)
{
 80222a8:	b580      	push	{r7, lr}
 80222aa:	af00      	add	r7, sp, #0
    gdwTimeoutAuthorize = gGCUParameter.bAuthTimeOut;
 80222ac:	4b09      	ldr	r3, [pc, #36]	; (80222d4 <SetAuthTimer+0x2c>)
 80222ae:	791b      	ldrb	r3, [r3, #4]
 80222b0:	461a      	mov	r2, r3
 80222b2:	4b09      	ldr	r3, [pc, #36]	; (80222d8 <SetAuthTimer+0x30>)
 80222b4:	601a      	str	r2, [r3, #0]
    gfisAuthTimeout = FALSE;
 80222b6:	4b09      	ldr	r3, [pc, #36]	; (80222dc <SetAuthTimer+0x34>)
 80222b8:	2200      	movs	r2, #0
 80222ba:	701a      	strb	r2, [r3, #0]
    if (gdwTimeoutAuthorize > MAX_AUTH_TIMEOUT)
 80222bc:	4b06      	ldr	r3, [pc, #24]	; (80222d8 <SetAuthTimer+0x30>)
 80222be:	681b      	ldr	r3, [r3, #0]
 80222c0:	2b3c      	cmp	r3, #60	; 0x3c
 80222c2:	d902      	bls.n	80222ca <SetAuthTimer+0x22>
        gdwTimeoutAuthorize = MAX_AUTH_TIMEOUT;
 80222c4:	4b04      	ldr	r3, [pc, #16]	; (80222d8 <SetAuthTimer+0x30>)
 80222c6:	223c      	movs	r2, #60	; 0x3c
 80222c8:	601a      	str	r2, [r3, #0]

    SetTimer(&timerAuthorize);
 80222ca:	4805      	ldr	r0, [pc, #20]	; (80222e0 <SetAuthTimer+0x38>)
 80222cc:	f00e fbb2 	bl	8030a34 <SetTimer>
}
 80222d0:	bf00      	nop
 80222d2:	bd80      	pop	{r7, pc}
 80222d4:	24000514 	.word	0x24000514
 80222d8:	240001c8 	.word	0x240001c8
 80222dc:	240001a8 	.word	0x240001a8
 80222e0:	240001d4 	.word	0x240001d4

080222e4 <SetTailgatingTimer>:

void SetTailgatingTimer(void)
{
 80222e4:	b580      	push	{r7, lr}
 80222e6:	af00      	add	r7, sp, #0
    SetTimer(&timerTailgatingDetection);
 80222e8:	4803      	ldr	r0, [pc, #12]	; (80222f8 <SetTailgatingTimer+0x14>)
 80222ea:	f00e fba3 	bl	8030a34 <SetTimer>
    SetTimer(&timerTailgating);
 80222ee:	4803      	ldr	r0, [pc, #12]	; (80222fc <SetTailgatingTimer+0x18>)
 80222f0:	f00e fba0 	bl	8030a34 <SetTimer>
}
 80222f4:	bf00      	nop
 80222f6:	bd80      	pop	{r7, pc}
 80222f8:	240001ec 	.word	0x240001ec
 80222fc:	24000270 	.word	0x24000270

08022300 <InitPassageMode>:

void InitPassageMode(void)
{
 8022300:	b580      	push	{r7, lr}
 8022302:	af00      	add	r7, sp, #0
    InitPassageModeForSwing();
 8022304:	f001 f97c 	bl	8023600 <InitPassageModeForSwing>
}
 8022308:	bf00      	nop
 802230a:	bd80      	pop	{r7, pc}

0802230c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 802230c:	b480      	push	{r7}
 802230e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8022310:	f3bf 8f4f 	dsb	sy
}
 8022314:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8022316:	4b06      	ldr	r3, [pc, #24]	; (8022330 <__NVIC_SystemReset+0x24>)
 8022318:	68db      	ldr	r3, [r3, #12]
 802231a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802231e:	4904      	ldr	r1, [pc, #16]	; (8022330 <__NVIC_SystemReset+0x24>)
 8022320:	4b04      	ldr	r3, [pc, #16]	; (8022334 <__NVIC_SystemReset+0x28>)
 8022322:	4313      	orrs	r3, r2
 8022324:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8022326:	f3bf 8f4f 	dsb	sy
}
 802232a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 802232c:	bf00      	nop
 802232e:	e7fd      	b.n	802232c <__NVIC_SystemReset+0x20>
 8022330:	e000ed00 	.word	0xe000ed00
 8022334:	05fa0004 	.word	0x05fa0004

08022338 <SetDoorControl>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SetDoorControl(BYTE bCMDOption)
{
 8022338:	b580      	push	{r7, lr}
 802233a:	b082      	sub	sp, #8
 802233c:	af00      	add	r7, sp, #0
 802233e:	4603      	mov	r3, r0
 8022340:	71fb      	strb	r3, [r7, #7]
	if (bCMDOption == 0)
 8022342:	79fb      	ldrb	r3, [r7, #7]
 8022344:	2b00      	cmp	r3, #0
 8022346:	d118      	bne.n	802237a <SetDoorControl+0x42>
	{
		if (gfTestMode == TRUE && isNeedToSetSerial == TRUE)
 8022348:	4b24      	ldr	r3, [pc, #144]	; (80223dc <SetDoorControl+0xa4>)
 802234a:	781b      	ldrb	r3, [r3, #0]
 802234c:	2b00      	cmp	r3, #0
 802234e:	d00d      	beq.n	802236c <SetDoorControl+0x34>
 8022350:	4b23      	ldr	r3, [pc, #140]	; (80223e0 <SetDoorControl+0xa8>)
 8022352:	781b      	ldrb	r3, [r3, #0]
 8022354:	2b00      	cmp	r3, #0
 8022356:	d009      	beq.n	802236c <SetDoorControl+0x34>
		{
			gfFreeMode = TRUE;
 8022358:	4b22      	ldr	r3, [pc, #136]	; (80223e4 <SetDoorControl+0xac>)
 802235a:	2201      	movs	r2, #1
 802235c:	701a      	strb	r2, [r3, #0]
			isNeedToSetSerial = FALSE;
 802235e:	4b20      	ldr	r3, [pc, #128]	; (80223e0 <SetDoorControl+0xa8>)
 8022360:	2200      	movs	r2, #0
 8022362:	701a      	strb	r2, [r3, #0]
			Brr_SetSerialComm(TRUE);
 8022364:	2001      	movs	r0, #1
 8022366:	f7fe f9c1 	bl	80206ec <Brr_SetSerialComm>
 802236a:	e002      	b.n	8022372 <SetDoorControl+0x3a>
		}
		else
		{
			gfFreeMode = FALSE;
 802236c:	4b1d      	ldr	r3, [pc, #116]	; (80223e4 <SetDoorControl+0xac>)
 802236e:	2200      	movs	r2, #0
 8022370:	701a      	strb	r2, [r3, #0]
		}
		ControlBarrier(BARRIER_CLOSE_S);
 8022372:	2003      	movs	r0, #3
 8022374:	f7ff f886 	bl	8021484 <ControlBarrier>
	{
		gfTestMode = FALSE;
		gfFreeMode = FALSE;
		Brr_SetEmergency(TRUE);
	}
}
 8022378:	e02c      	b.n	80223d4 <SetDoorControl+0x9c>
	else if (bCMDOption == 1)
 802237a:	79fb      	ldrb	r3, [r7, #7]
 802237c:	2b01      	cmp	r3, #1
 802237e:	d106      	bne.n	802238e <SetDoorControl+0x56>
		gfFreeMode = TRUE;
 8022380:	4b18      	ldr	r3, [pc, #96]	; (80223e4 <SetDoorControl+0xac>)
 8022382:	2201      	movs	r2, #1
 8022384:	701a      	strb	r2, [r3, #0]
		ControlBarrier(BARRIER_OPEN_FOR_EX);	
 8022386:	2001      	movs	r0, #1
 8022388:	f7ff f87c 	bl	8021484 <ControlBarrier>
}
 802238c:	e022      	b.n	80223d4 <SetDoorControl+0x9c>
	else if (bCMDOption == 2)
 802238e:	79fb      	ldrb	r3, [r7, #7]
 8022390:	2b02      	cmp	r3, #2
 8022392:	d106      	bne.n	80223a2 <SetDoorControl+0x6a>
		gfFreeMode = TRUE;
 8022394:	4b13      	ldr	r3, [pc, #76]	; (80223e4 <SetDoorControl+0xac>)
 8022396:	2201      	movs	r2, #1
 8022398:	701a      	strb	r2, [r3, #0]
		ControlBarrier(BARRIER_OPEN_FOR_EN);
 802239a:	2002      	movs	r0, #2
 802239c:	f7ff f872 	bl	8021484 <ControlBarrier>
}
 80223a0:	e018      	b.n	80223d4 <SetDoorControl+0x9c>
	else if (bCMDOption == 3)
 80223a2:	79fb      	ldrb	r3, [r7, #7]
 80223a4:	2b03      	cmp	r3, #3
 80223a6:	d109      	bne.n	80223bc <SetDoorControl+0x84>
		gfTestMode = TRUE;
 80223a8:	4b0c      	ldr	r3, [pc, #48]	; (80223dc <SetDoorControl+0xa4>)
 80223aa:	2201      	movs	r2, #1
 80223ac:	701a      	strb	r2, [r3, #0]
		isNeedToSetSerial = TRUE;
 80223ae:	4b0c      	ldr	r3, [pc, #48]	; (80223e0 <SetDoorControl+0xa8>)
 80223b0:	2201      	movs	r2, #1
 80223b2:	701a      	strb	r2, [r3, #0]
		Brr_SetEmergency(FALSE);
 80223b4:	2000      	movs	r0, #0
 80223b6:	f7fe f96d 	bl	8020694 <Brr_SetEmergency>
}
 80223ba:	e00b      	b.n	80223d4 <SetDoorControl+0x9c>
	else if (bCMDOption == 4)
 80223bc:	79fb      	ldrb	r3, [r7, #7]
 80223be:	2b04      	cmp	r3, #4
 80223c0:	d108      	bne.n	80223d4 <SetDoorControl+0x9c>
		gfTestMode = FALSE;
 80223c2:	4b06      	ldr	r3, [pc, #24]	; (80223dc <SetDoorControl+0xa4>)
 80223c4:	2200      	movs	r2, #0
 80223c6:	701a      	strb	r2, [r3, #0]
		gfFreeMode = FALSE;
 80223c8:	4b06      	ldr	r3, [pc, #24]	; (80223e4 <SetDoorControl+0xac>)
 80223ca:	2200      	movs	r2, #0
 80223cc:	701a      	strb	r2, [r3, #0]
		Brr_SetEmergency(TRUE);
 80223ce:	2001      	movs	r0, #1
 80223d0:	f7fe f960 	bl	8020694 <Brr_SetEmergency>
}
 80223d4:	bf00      	nop
 80223d6:	3708      	adds	r7, #8
 80223d8:	46bd      	mov	sp, r7
 80223da:	bd80      	pop	{r7, pc}
 80223dc:	240004b2 	.word	0x240004b2
 80223e0:	2400047a 	.word	0x2400047a
 80223e4:	240004b1 	.word	0x240004b1

080223e8 <SendACK>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendACK(void)
{
 80223e8:	b580      	push	{r7, lr}
 80223ea:	af00      	add	r7, sp, #0
	U3_Putch(ACK);
 80223ec:	2006      	movs	r0, #6
 80223ee:	f004 fcdc 	bl	8026daa <U3_Putch>
}
 80223f2:	bf00      	nop
 80223f4:	bd80      	pop	{r7, pc}

080223f6 <SendNAK>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendNAK(void)
{
 80223f6:	b580      	push	{r7, lr}
 80223f8:	af00      	add	r7, sp, #0
	U3_Putch(NAK);
 80223fa:	2015      	movs	r0, #21
 80223fc:	f004 fcd5 	bl	8026daa <U3_Putch>
}
 8022400:	bf00      	nop
 8022402:	bd80      	pop	{r7, pc}

08022404 <IsCommandNeedResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
bool IsCommandNeedResponse(BYTE bCMDCode)
{
 8022404:	b480      	push	{r7}
 8022406:	b087      	sub	sp, #28
 8022408:	af00      	add	r7, sp, #0
 802240a:	4603      	mov	r3, r0
 802240c:	71fb      	strb	r3, [r7, #7]
	int i;
	BYTE no_response_code[] = {
 802240e:	4a10      	ldr	r2, [pc, #64]	; (8022450 <IsCommandNeedResponse+0x4c>)
 8022410:	f107 0308 	add.w	r3, r7, #8
 8022414:	ca07      	ldmia	r2, {r0, r1, r2}
 8022416:	c303      	stmia	r3!, {r0, r1}
 8022418:	701a      	strb	r2, [r3, #0]
		CMD_CONTROL_BUZZER,
		CMD_SAFETY_STOP,
		CMD_WRITE_REGISTER,
		CMD_SET_UPS_COMMAND};

	for (i = 0; i < sizeof(no_response_code); i++)
 802241a:	2300      	movs	r3, #0
 802241c:	617b      	str	r3, [r7, #20]
 802241e:	e00c      	b.n	802243a <IsCommandNeedResponse+0x36>
	{
		if (no_response_code[i] == bCMDCode)
 8022420:	f107 0208 	add.w	r2, r7, #8
 8022424:	697b      	ldr	r3, [r7, #20]
 8022426:	4413      	add	r3, r2
 8022428:	781b      	ldrb	r3, [r3, #0]
 802242a:	79fa      	ldrb	r2, [r7, #7]
 802242c:	429a      	cmp	r2, r3
 802242e:	d101      	bne.n	8022434 <IsCommandNeedResponse+0x30>
		{
			return FALSE;
 8022430:	2300      	movs	r3, #0
 8022432:	e006      	b.n	8022442 <IsCommandNeedResponse+0x3e>
	for (i = 0; i < sizeof(no_response_code); i++)
 8022434:	697b      	ldr	r3, [r7, #20]
 8022436:	3301      	adds	r3, #1
 8022438:	617b      	str	r3, [r7, #20]
 802243a:	697b      	ldr	r3, [r7, #20]
 802243c:	2b08      	cmp	r3, #8
 802243e:	d9ef      	bls.n	8022420 <IsCommandNeedResponse+0x1c>
		}
	}

	return TRUE;
 8022440:	2301      	movs	r3, #1
}
 8022442:	4618      	mov	r0, r3
 8022444:	371c      	adds	r7, #28
 8022446:	46bd      	mov	sp, r7
 8022448:	f85d 7b04 	ldr.w	r7, [sp], #4
 802244c:	4770      	bx	lr
 802244e:	bf00      	nop
 8022450:	08032380 	.word	0x08032380

08022454 <MakeResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void MakeResponse(BYTE *pbResOption, int nOptionLen)
{
 8022454:	b580      	push	{r7, lr}
 8022456:	b082      	sub	sp, #8
 8022458:	af00      	add	r7, sp, #0
 802245a:	6078      	str	r0, [r7, #4]
 802245c:	6039      	str	r1, [r7, #0]
	GCUResponse.d.bMainSeq = GCUCommand.d.bMainSeq;
 802245e:	4b14      	ldr	r3, [pc, #80]	; (80224b0 <MakeResponse+0x5c>)
 8022460:	781a      	ldrb	r2, [r3, #0]
 8022462:	4b14      	ldr	r3, [pc, #80]	; (80224b4 <MakeResponse+0x60>)
 8022464:	701a      	strb	r2, [r3, #0]

	if (GCUCommand.d.bMouleSeq == MAX_SEQUENCE)
 8022466:	4b12      	ldr	r3, [pc, #72]	; (80224b0 <MakeResponse+0x5c>)
 8022468:	785b      	ldrb	r3, [r3, #1]
 802246a:	2bff      	cmp	r3, #255	; 0xff
 802246c:	d103      	bne.n	8022476 <MakeResponse+0x22>
		GCUResponse.d.bMouleSeq = 0;
 802246e:	4b11      	ldr	r3, [pc, #68]	; (80224b4 <MakeResponse+0x60>)
 8022470:	2200      	movs	r2, #0
 8022472:	705a      	strb	r2, [r3, #1]
 8022474:	e005      	b.n	8022482 <MakeResponse+0x2e>
	else
		GCUResponse.d.bMouleSeq = (GCUCommand.d.bMouleSeq+1);
 8022476:	4b0e      	ldr	r3, [pc, #56]	; (80224b0 <MakeResponse+0x5c>)
 8022478:	785b      	ldrb	r3, [r3, #1]
 802247a:	3301      	adds	r3, #1
 802247c:	b2da      	uxtb	r2, r3
 802247e:	4b0d      	ldr	r3, [pc, #52]	; (80224b4 <MakeResponse+0x60>)
 8022480:	705a      	strb	r2, [r3, #1]

	GCUResponse.d.bCmdCode = GCUCommand.d.bCmdCode;
 8022482:	4b0b      	ldr	r3, [pc, #44]	; (80224b0 <MakeResponse+0x5c>)
 8022484:	78da      	ldrb	r2, [r3, #3]
 8022486:	4b0b      	ldr	r3, [pc, #44]	; (80224b4 <MakeResponse+0x60>)
 8022488:	70da      	strb	r2, [r3, #3]
	GCUResponse.d.bDataLen = nOptionLen+sizeof(GCUResponse.d.bCmdCode);	// add command length
 802248a:	683b      	ldr	r3, [r7, #0]
 802248c:	b2db      	uxtb	r3, r3
 802248e:	3301      	adds	r3, #1
 8022490:	b2da      	uxtb	r2, r3
 8022492:	4b08      	ldr	r3, [pc, #32]	; (80224b4 <MakeResponse+0x60>)
 8022494:	709a      	strb	r2, [r3, #2]

	if (nOptionLen)
 8022496:	683b      	ldr	r3, [r7, #0]
 8022498:	2b00      	cmp	r3, #0
 802249a:	d005      	beq.n	80224a8 <MakeResponse+0x54>
		memcpy(GCUResponse.d.mbOptionData, pbResOption, nOptionLen);
 802249c:	683b      	ldr	r3, [r7, #0]
 802249e:	461a      	mov	r2, r3
 80224a0:	6879      	ldr	r1, [r7, #4]
 80224a2:	4805      	ldr	r0, [pc, #20]	; (80224b8 <MakeResponse+0x64>)
 80224a4:	f00e fb52 	bl	8030b4c <memcpy>
}
 80224a8:	bf00      	nop
 80224aa:	3708      	adds	r7, #8
 80224ac:	46bd      	mov	sp, r7
 80224ae:	bd80      	pop	{r7, pc}
 80224b0:	240002f4 	.word	0x240002f4
 80224b4:	24000378 	.word	0x24000378
 80224b8:	2400037c 	.word	0x2400037c

080224bc <SendResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendResponse(void)
{
 80224bc:	b580      	push	{r7, lr}
 80224be:	b084      	sub	sp, #16
 80224c0:	af00      	add	r7, sp, #0
	BYTE	bBCC;
	BYTE	*pbResBuff;
	int		nResLen;

	pbResBuff	= GCUResponse.Buff;
 80224c2:	4b2a      	ldr	r3, [pc, #168]	; (802256c <SendResponse+0xb0>)
 80224c4:	60bb      	str	r3, [r7, #8]
	nResLen		= GCUResponse.d.bDataLen+FRAME_HEADER_LEN;
 80224c6:	4b29      	ldr	r3, [pc, #164]	; (802256c <SendResponse+0xb0>)
 80224c8:	789b      	ldrb	r3, [r3, #2]
 80224ca:	3303      	adds	r3, #3
 80224cc:	607b      	str	r3, [r7, #4]

	// send STX
	U3_Putch(STX);
 80224ce:	2002      	movs	r0, #2
 80224d0:	f004 fc6b 	bl	8026daa <U3_Putch>
	bBCC = STX;				// BCC calculation
 80224d4:	2302      	movs	r3, #2
 80224d6:	73fb      	strb	r3, [r7, #15]

	// send data
	while (nResLen--)
 80224d8:	e034      	b.n	8022544 <SendResponse+0x88>
	{
		// DLE processing
		if ((*pbResBuff == STX) || (*pbResBuff == ETX) || (*pbResBuff == DLE))
 80224da:	68bb      	ldr	r3, [r7, #8]
 80224dc:	781b      	ldrb	r3, [r3, #0]
 80224de:	2b02      	cmp	r3, #2
 80224e0:	d007      	beq.n	80224f2 <SendResponse+0x36>
 80224e2:	68bb      	ldr	r3, [r7, #8]
 80224e4:	781b      	ldrb	r3, [r3, #0]
 80224e6:	2b03      	cmp	r3, #3
 80224e8:	d003      	beq.n	80224f2 <SendResponse+0x36>
 80224ea:	68bb      	ldr	r3, [r7, #8]
 80224ec:	781b      	ldrb	r3, [r3, #0]
 80224ee:	2b10      	cmp	r3, #16
 80224f0:	d11b      	bne.n	802252a <SendResponse+0x6e>
		{
			U3_Putch(DLE);
 80224f2:	2010      	movs	r0, #16
 80224f4:	f004 fc59 	bl	8026daa <U3_Putch>
			bBCC ^= DLE;				// BCC calculation
 80224f8:	7bfb      	ldrb	r3, [r7, #15]
 80224fa:	f083 0310 	eor.w	r3, r3, #16
 80224fe:	73fb      	strb	r3, [r7, #15]

			U3_Putch((*pbResBuff+DLE_OP));
 8022500:	68bb      	ldr	r3, [r7, #8]
 8022502:	781b      	ldrb	r3, [r3, #0]
 8022504:	3340      	adds	r3, #64	; 0x40
 8022506:	b2db      	uxtb	r3, r3
 8022508:	4618      	mov	r0, r3
 802250a:	f004 fc4e 	bl	8026daa <U3_Putch>
			bBCC ^= (*pbResBuff+DLE_OP);	// BCC calculation
 802250e:	68bb      	ldr	r3, [r7, #8]
 8022510:	781b      	ldrb	r3, [r3, #0]
 8022512:	3340      	adds	r3, #64	; 0x40
 8022514:	b2db      	uxtb	r3, r3
 8022516:	b25a      	sxtb	r2, r3
 8022518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802251c:	4053      	eors	r3, r2
 802251e:	b25b      	sxtb	r3, r3
 8022520:	73fb      	strb	r3, [r7, #15]
			pbResBuff++;
 8022522:	68bb      	ldr	r3, [r7, #8]
 8022524:	3301      	adds	r3, #1
 8022526:	60bb      	str	r3, [r7, #8]
 8022528:	e00c      	b.n	8022544 <SendResponse+0x88>
		}
		else
		{
			U3_Putch(*pbResBuff);
 802252a:	68bb      	ldr	r3, [r7, #8]
 802252c:	781b      	ldrb	r3, [r3, #0]
 802252e:	4618      	mov	r0, r3
 8022530:	f004 fc3b 	bl	8026daa <U3_Putch>
			bBCC ^= *pbResBuff;			// BCC calculation
 8022534:	68bb      	ldr	r3, [r7, #8]
 8022536:	781a      	ldrb	r2, [r3, #0]
 8022538:	7bfb      	ldrb	r3, [r7, #15]
 802253a:	4053      	eors	r3, r2
 802253c:	73fb      	strb	r3, [r7, #15]
			pbResBuff++;
 802253e:	68bb      	ldr	r3, [r7, #8]
 8022540:	3301      	adds	r3, #1
 8022542:	60bb      	str	r3, [r7, #8]
	while (nResLen--)
 8022544:	687b      	ldr	r3, [r7, #4]
 8022546:	1e5a      	subs	r2, r3, #1
 8022548:	607a      	str	r2, [r7, #4]
 802254a:	2b00      	cmp	r3, #0
 802254c:	d1c5      	bne.n	80224da <SendResponse+0x1e>
		}
	}

	// send ETX
	U3_Putch(ETX);
 802254e:	2003      	movs	r0, #3
 8022550:	f004 fc2b 	bl	8026daa <U3_Putch>
	bBCC ^= ETX;
 8022554:	7bfb      	ldrb	r3, [r7, #15]
 8022556:	f083 0303 	eor.w	r3, r3, #3
 802255a:	73fb      	strb	r3, [r7, #15]

	// send BCC
	U3_Putch(bBCC);
 802255c:	7bfb      	ldrb	r3, [r7, #15]
 802255e:	4618      	mov	r0, r3
 8022560:	f004 fc23 	bl	8026daa <U3_Putch>

#if _RES_DUMP_
	PRINT("\nRES %02X Data", GCUResponse.d.bCmdCode);
	Print2Hex("", GCUResponse.Buff, GCUResponse.d.bDataLen+FRAME_HEADER_LEN);
#endif
}
 8022564:	bf00      	nop
 8022566:	3710      	adds	r7, #16
 8022568:	46bd      	mov	sp, r7
 802256a:	bd80      	pop	{r7, pc}
 802256c:	24000378 	.word	0x24000378

08022570 <CMDSetGCUOpMode>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetGCUOpMode(void)
{
 8022570:	b580      	push	{r7, lr}
 8022572:	af00      	add	r7, sp, #0
	SetNewOpMode((T_GCU_OP_MODE *)GCUCommand.d.mbOptionData);
 8022574:	4804      	ldr	r0, [pc, #16]	; (8022588 <CMDSetGCUOpMode+0x18>)
 8022576:	f7fe fd25 	bl	8020fc4 <SetNewOpMode>
	// TestCaptureUnit(TCU_TEST_STOP);
	MakeResponse(GCUCommand.d.mbOptionData, sizeof(T_GCU_OP_MODE));
 802257a:	2104      	movs	r1, #4
 802257c:	4802      	ldr	r0, [pc, #8]	; (8022588 <CMDSetGCUOpMode+0x18>)
 802257e:	f7ff ff69 	bl	8022454 <MakeResponse>
}
 8022582:	bf00      	nop
 8022584:	bd80      	pop	{r7, pc}
 8022586:	bf00      	nop
 8022588:	240002f8 	.word	0x240002f8

0802258c <CMDGetGCUOpMode>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetGCUOpMode(void)
{
 802258c:	b580      	push	{r7, lr}
 802258e:	b082      	sub	sp, #8
 8022590:	af00      	add	r7, sp, #0
	T_GCU_OP_MODE CurMode;

	GetCurrentOpMode(&CurMode);
 8022592:	1d3b      	adds	r3, r7, #4
 8022594:	4618      	mov	r0, r3
 8022596:	f7fe fd91 	bl	80210bc <GetCurrentOpMode>

	MakeResponse((BYTE*)&CurMode, sizeof(T_GCU_OP_MODE));
 802259a:	1d3b      	adds	r3, r7, #4
 802259c:	2104      	movs	r1, #4
 802259e:	4618      	mov	r0, r3
 80225a0:	f7ff ff58 	bl	8022454 <MakeResponse>
}
 80225a4:	bf00      	nop
 80225a6:	3708      	adds	r7, #8
 80225a8:	46bd      	mov	sp, r7
 80225aa:	bd80      	pop	{r7, pc}

080225ac <CMDSetGCUParameter>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetGCUParameter(void)
{
 80225ac:	b580      	push	{r7, lr}
 80225ae:	af00      	add	r7, sp, #0
	gnParameterLength = GCUCommand.d.bDataLen-1;
 80225b0:	4b09      	ldr	r3, [pc, #36]	; (80225d8 <CMDSetGCUParameter+0x2c>)
 80225b2:	789b      	ldrb	r3, [r3, #2]
 80225b4:	3b01      	subs	r3, #1
 80225b6:	4a09      	ldr	r2, [pc, #36]	; (80225dc <CMDSetGCUParameter+0x30>)
 80225b8:	6013      	str	r3, [r2, #0]

	SetGCUParameter((T_GCU_PARAMETER*)GCUCommand.d.mbOptionData, gnParameterLength);
 80225ba:	4b08      	ldr	r3, [pc, #32]	; (80225dc <CMDSetGCUParameter+0x30>)
 80225bc:	681b      	ldr	r3, [r3, #0]
 80225be:	4619      	mov	r1, r3
 80225c0:	4807      	ldr	r0, [pc, #28]	; (80225e0 <CMDSetGCUParameter+0x34>)
 80225c2:	f7fe fd8d 	bl	80210e0 <SetGCUParameter>
	MakeResponse(GCUCommand.d.mbOptionData, gnParameterLength);
 80225c6:	4b05      	ldr	r3, [pc, #20]	; (80225dc <CMDSetGCUParameter+0x30>)
 80225c8:	681b      	ldr	r3, [r3, #0]
 80225ca:	4619      	mov	r1, r3
 80225cc:	4804      	ldr	r0, [pc, #16]	; (80225e0 <CMDSetGCUParameter+0x34>)
 80225ce:	f7ff ff41 	bl	8022454 <MakeResponse>
}
 80225d2:	bf00      	nop
 80225d4:	bd80      	pop	{r7, pc}
 80225d6:	bf00      	nop
 80225d8:	240002f4 	.word	0x240002f4
 80225dc:	24000004 	.word	0x24000004
 80225e0:	240002f8 	.word	0x240002f8

080225e4 <CMDGetGCUParameter>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetGCUParameter(void)
{
 80225e4:	b580      	push	{r7, lr}
 80225e6:	b084      	sub	sp, #16
 80225e8:	af00      	add	r7, sp, #0
	T_GCU_PARAMETER	GurGCUParameter;

	GetGCUParameter(&GurGCUParameter);
 80225ea:	463b      	mov	r3, r7
 80225ec:	4618      	mov	r0, r3
 80225ee:	f7fe fdc5 	bl	802117c <GetGCUParameter>

	MakeResponse((BYTE*)&GurGCUParameter, gnParameterLength);
 80225f2:	4b05      	ldr	r3, [pc, #20]	; (8022608 <CMDGetGCUParameter+0x24>)
 80225f4:	681a      	ldr	r2, [r3, #0]
 80225f6:	463b      	mov	r3, r7
 80225f8:	4611      	mov	r1, r2
 80225fa:	4618      	mov	r0, r3
 80225fc:	f7ff ff2a 	bl	8022454 <MakeResponse>
}
 8022600:	bf00      	nop
 8022602:	3710      	adds	r7, #16
 8022604:	46bd      	mov	sp, r7
 8022606:	bd80      	pop	{r7, pc}
 8022608:	24000004 	.word	0x24000004

0802260c <CMDGetVersion>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetVersion(void)
{
 802260c:	b580      	push	{r7, lr}
 802260e:	af00      	add	r7, sp, #0
	Brr_SetSerialComm(TRUE);
 8022610:	2001      	movs	r0, #1
 8022612:	f7fe f86b 	bl	80206ec <Brr_SetSerialComm>
	MakeResponse((BYTE*)GCU_FW_VERSION, sizeof(GCU_FW_VERSION));
 8022616:	2108      	movs	r1, #8
 8022618:	4802      	ldr	r0, [pc, #8]	; (8022624 <CMDGetVersion+0x18>)
 802261a:	f7ff ff1b 	bl	8022454 <MakeResponse>
}
 802261e:	bf00      	nop
 8022620:	bd80      	pop	{r7, pc}
 8022622:	bf00      	nop
 8022624:	0803238c 	.word	0x0803238c

08022628 <CMDSetBaudRate>:
* Return:   void
* comments: 
*******************************************************************************/

void CMDSetBaudRate(void)
{
 8022628:	b580      	push	{r7, lr}
 802262a:	b082      	sub	sp, #8
 802262c:	af00      	add	r7, sp, #0
	int  nBaudRate = -1;
 802262e:	f04f 33ff 	mov.w	r3, #4294967295
 8022632:	607b      	str	r3, [r7, #4]
	BYTE bBaudRate = GCUCommand.d.mbOptionData[0];
 8022634:	4b26      	ldr	r3, [pc, #152]	; (80226d0 <CMDSetBaudRate+0xa8>)
 8022636:	791b      	ldrb	r3, [r3, #4]
 8022638:	70fb      	strb	r3, [r7, #3]

	// check boundary value
	if (bBaudRate <= BAUD_MAX_PARAM)
 802263a:	78fb      	ldrb	r3, [r7, #3]
 802263c:	2b04      	cmp	r3, #4
 802263e:	d830      	bhi.n	80226a2 <CMDSetBaudRate+0x7a>
	{
		if (gbHostBaudRate != bBaudRate)
 8022640:	4b24      	ldr	r3, [pc, #144]	; (80226d4 <CMDSetBaudRate+0xac>)
 8022642:	781b      	ldrb	r3, [r3, #0]
 8022644:	78fa      	ldrb	r2, [r7, #3]
 8022646:	429a      	cmp	r2, r3
 8022648:	d02b      	beq.n	80226a2 <CMDSetBaudRate+0x7a>
		{
			switch (bBaudRate)
 802264a:	78fb      	ldrb	r3, [r7, #3]
 802264c:	2b04      	cmp	r3, #4
 802264e:	d821      	bhi.n	8022694 <CMDSetBaudRate+0x6c>
 8022650:	a201      	add	r2, pc, #4	; (adr r2, 8022658 <CMDSetBaudRate+0x30>)
 8022652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022656:	bf00      	nop
 8022658:	0802266d 	.word	0x0802266d
 802265c:	08022675 	.word	0x08022675
 8022660:	0802267d 	.word	0x0802267d
 8022664:	08022685 	.word	0x08022685
 8022668:	0802268d 	.word	0x0802268d
			{
			case BAUD_9600:		nBaudRate = 9600;	break;
 802266c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8022670:	607b      	str	r3, [r7, #4]
 8022672:	e013      	b.n	802269c <CMDSetBaudRate+0x74>
			case BAUD_19200:	nBaudRate = 19200;	break;
 8022674:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8022678:	607b      	str	r3, [r7, #4]
 802267a:	e00f      	b.n	802269c <CMDSetBaudRate+0x74>
			case BAUD_38400:	nBaudRate = 38400;	break;
 802267c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8022680:	607b      	str	r3, [r7, #4]
 8022682:	e00b      	b.n	802269c <CMDSetBaudRate+0x74>
			case BAUD_57600:	nBaudRate = 57600;	break;
 8022684:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8022688:	607b      	str	r3, [r7, #4]
 802268a:	e007      	b.n	802269c <CMDSetBaudRate+0x74>
			case BAUD_115200:	nBaudRate = 115200;	break;
 802268c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8022690:	607b      	str	r3, [r7, #4]
 8022692:	e003      	b.n	802269c <CMDSetBaudRate+0x74>
			default:			bBaudRate = gbHostBaudRate;	break;	// In case of invalid baud rate
 8022694:	4b0f      	ldr	r3, [pc, #60]	; (80226d4 <CMDSetBaudRate+0xac>)
 8022696:	781b      	ldrb	r3, [r3, #0]
 8022698:	70fb      	strb	r3, [r7, #3]
 802269a:	bf00      	nop
			}

			gbHostBaudRate = bBaudRate;
 802269c:	4a0d      	ldr	r2, [pc, #52]	; (80226d4 <CMDSetBaudRate+0xac>)
 802269e:	78fb      	ldrb	r3, [r7, #3]
 80226a0:	7013      	strb	r3, [r2, #0]
		}
	}

	MakeResponse(&gbHostBaudRate, sizeof(BYTE));
 80226a2:	2101      	movs	r1, #1
 80226a4:	480b      	ldr	r0, [pc, #44]	; (80226d4 <CMDSetBaudRate+0xac>)
 80226a6:	f7ff fed5 	bl	8022454 <MakeResponse>
	SendResponse();
 80226aa:	f7ff ff07 	bl	80224bc <SendResponse>

	HAL_Delay(100);
 80226ae:	2064      	movs	r0, #100	; 0x64
 80226b0:	f008 f808 	bl	802a6c4 <HAL_Delay>

	//delay_ms(100);
	
	if (nBaudRate != -1)	// if baud rate is changed
 80226b4:	687b      	ldr	r3, [r7, #4]
 80226b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80226ba:	d005      	beq.n	80226c8 <CMDSetBaudRate+0xa0>
	{
		//UARTxConfig(UART2, (u32)nBaudRate);
		USART3_UART_Init((u32)nBaudRate);
 80226bc:	6878      	ldr	r0, [r7, #4]
 80226be:	f003 f993 	bl	80259e8 <USART3_UART_Init>
		//delay_ms(100);
		HAL_Delay(100);
 80226c2:	2064      	movs	r0, #100	; 0x64
 80226c4:	f007 fffe 	bl	802a6c4 <HAL_Delay>
	}
}
 80226c8:	bf00      	nop
 80226ca:	3708      	adds	r7, #8
 80226cc:	46bd      	mov	sp, r7
 80226ce:	bd80      	pop	{r7, pc}
 80226d0:	240002f4 	.word	0x240002f4
 80226d4:	24000000 	.word	0x24000000

080226d8 <CMDResetGCU>:
* comments: 
*******************************************************************************/
BYTE ResetCMD = 0;

void CMDResetGCU(void)
{
 80226d8:	b580      	push	{r7, lr}
 80226da:	af00      	add	r7, sp, #0
	MakeResponse(NULL, 0);
 80226dc:	2100      	movs	r1, #0
 80226de:	2000      	movs	r0, #0
 80226e0:	f7ff feb8 	bl	8022454 <MakeResponse>
	SendResponse();
 80226e4:	f7ff feea 	bl	80224bc <SendResponse>
	ResetCMD = 0x1;
 80226e8:	4b06      	ldr	r3, [pc, #24]	; (8022704 <CMDResetGCU+0x2c>)
 80226ea:	2201      	movs	r2, #1
 80226ec:	701a      	strb	r2, [r3, #0]
	flash_write(0x4000, (byte *)&ResetCMD, 1);
 80226ee:	2201      	movs	r2, #1
 80226f0:	4904      	ldr	r1, [pc, #16]	; (8022704 <CMDResetGCU+0x2c>)
 80226f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80226f6:	f005 fb33 	bl	8027d60 <flash_write>
	HAL_Delay(50);
 80226fa:	2032      	movs	r0, #50	; 0x32
 80226fc:	f007 ffe2 	bl	802a6c4 <HAL_Delay>
	NVIC_SystemReset();
 8022700:	f7ff fe04 	bl	802230c <__NVIC_SystemReset>
 8022704:	2400047b 	.word	0x2400047b

08022708 <CMDAuthorizePass>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDAuthorizePass(void)
{
 8022708:	b580      	push	{r7, lr}
 802270a:	b082      	sub	sp, #8
 802270c:	af00      	add	r7, sp, #0
	T_CMD_AUTH_PASS *pcmdAuthPass = (T_CMD_AUTH_PASS*)GCUCommand.d.mbOptionData;
 802270e:	4b27      	ldr	r3, [pc, #156]	; (80227ac <CMDAuthorizePass+0xa4>)
 8022710:	607b      	str	r3, [r7, #4]
	T_GCU_AUTH_COUNT resAuthCount;

	if (pcmdAuthPass->bAuthCount == 0)
 8022712:	687b      	ldr	r3, [r7, #4]
 8022714:	785b      	ldrb	r3, [r3, #1]
 8022716:	2b00      	cmp	r3, #0
 8022718:	d114      	bne.n	8022744 <CMDAuthorizePass+0x3c>
	{		
		//PRINTL(" [CMDAuthorizePass] zero count! - A:%d, D:%d", pcmdAuthPass->bAuthCount, pcmdAuthPass->bDirection);
		//PRINTL(" [CMDAuthorizePass] org data. - A:%d, D:%d", GCUCommand.d.mbOptionData[1], GCUCommand.d.mbOptionData[0]);

		printf(" [CMDAuthorizePass] zero count! - A:%d, D:%d \n", pcmdAuthPass->bAuthCount, pcmdAuthPass->bDirection);
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	785b      	ldrb	r3, [r3, #1]
 802271e:	4619      	mov	r1, r3
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	781b      	ldrb	r3, [r3, #0]
 8022724:	461a      	mov	r2, r3
 8022726:	4822      	ldr	r0, [pc, #136]	; (80227b0 <CMDAuthorizePass+0xa8>)
 8022728:	f007 f894 	bl	8029854 <printf_>
		printf(" [CMDAuthorizePass] org data. - A:%d, D:%d \n", GCUCommand.d.mbOptionData[1], GCUCommand.d.mbOptionData[0]);
 802272c:	4b21      	ldr	r3, [pc, #132]	; (80227b4 <CMDAuthorizePass+0xac>)
 802272e:	795b      	ldrb	r3, [r3, #5]
 8022730:	4619      	mov	r1, r3
 8022732:	4b20      	ldr	r3, [pc, #128]	; (80227b4 <CMDAuthorizePass+0xac>)
 8022734:	791b      	ldrb	r3, [r3, #4]
 8022736:	461a      	mov	r2, r3
 8022738:	481f      	ldr	r0, [pc, #124]	; (80227b8 <CMDAuthorizePass+0xb0>)
 802273a:	f007 f88b 	bl	8029854 <printf_>
		pcmdAuthPass->bAuthCount = 1;
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	2201      	movs	r2, #1
 8022742:	705a      	strb	r2, [r3, #1]
	}

	IncreaseAuthCount(pcmdAuthPass->bDirection);
 8022744:	687b      	ldr	r3, [r7, #4]
 8022746:	781b      	ldrb	r3, [r3, #0]
 8022748:	4618      	mov	r0, r3
 802274a:	f7fe fe01 	bl	8021350 <IncreaseAuthCount>

	if (pcmdAuthPass->bDirection == FROM_ENTRY)
 802274e:	687b      	ldr	r3, [r7, #4]
 8022750:	781b      	ldrb	r3, [r3, #0]
 8022752:	2b01      	cmp	r3, #1
 8022754:	d10e      	bne.n	8022774 <CMDAuthorizePass+0x6c>
	{
		ControlIndicator(pcmdAuthPass->bLamp, LAMP_OFF, pcmdAuthPass->bDuration, FALSE);
 8022756:	687b      	ldr	r3, [r7, #4]
 8022758:	7898      	ldrb	r0, [r3, #2]
 802275a:	687b      	ldr	r3, [r7, #4]
 802275c:	791a      	ldrb	r2, [r3, #4]
 802275e:	2300      	movs	r3, #0
 8022760:	2100      	movs	r1, #0
 8022762:	f7fe ff7d 	bl	8021660 <ControlIndicator>
		ControlDirectionLED(pcmdAuthPass->bLampBar, DIR_RED);
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	78db      	ldrb	r3, [r3, #3]
 802276a:	2102      	movs	r1, #2
 802276c:	4618      	mov	r0, r3
 802276e:	f7fe ff1b 	bl	80215a8 <ControlDirectionLED>
 8022772:	e00d      	b.n	8022790 <CMDAuthorizePass+0x88>
	}
	else
	{
		ControlIndicator(LAMP_OFF, pcmdAuthPass->bLamp, pcmdAuthPass->bDuration, FALSE);
 8022774:	687b      	ldr	r3, [r7, #4]
 8022776:	7899      	ldrb	r1, [r3, #2]
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	791a      	ldrb	r2, [r3, #4]
 802277c:	2300      	movs	r3, #0
 802277e:	2000      	movs	r0, #0
 8022780:	f7fe ff6e 	bl	8021660 <ControlIndicator>
		ControlDirectionLED(DIR_RED, pcmdAuthPass->bLampBar);
 8022784:	687b      	ldr	r3, [r7, #4]
 8022786:	78db      	ldrb	r3, [r3, #3]
 8022788:	4619      	mov	r1, r3
 802278a:	2002      	movs	r0, #2
 802278c:	f7fe ff0c 	bl	80215a8 <ControlDirectionLED>
	}

	GetAuthCount(&resAuthCount);
 8022790:	463b      	mov	r3, r7
 8022792:	4618      	mov	r0, r3
 8022794:	f7fe fdc6 	bl	8021324 <GetAuthCount>
	MakeResponse((BYTE*)&resAuthCount, sizeof(T_GCU_AUTH_COUNT));
 8022798:	463b      	mov	r3, r7
 802279a:	2102      	movs	r1, #2
 802279c:	4618      	mov	r0, r3
 802279e:	f7ff fe59 	bl	8022454 <MakeResponse>
}
 80227a2:	bf00      	nop
 80227a4:	3708      	adds	r7, #8
 80227a6:	46bd      	mov	sp, r7
 80227a8:	bd80      	pop	{r7, pc}
 80227aa:	bf00      	nop
 80227ac:	240002f8 	.word	0x240002f8
 80227b0:	08032394 	.word	0x08032394
 80227b4:	240002f4 	.word	0x240002f4
 80227b8:	080323c4 	.word	0x080323c4

080227bc <CMDClearAuthorization>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDClearAuthorization(void)
{
 80227bc:	b580      	push	{r7, lr}
 80227be:	b082      	sub	sp, #8
 80227c0:	af00      	add	r7, sp, #0
	T_GCU_AUTH_COUNT resAuthCount;

	ClearAuthCount();
 80227c2:	f7fe fe33 	bl	802142c <ClearAuthCount>
	GetAuthCount(&resAuthCount);
 80227c6:	1d3b      	adds	r3, r7, #4
 80227c8:	4618      	mov	r0, r3
 80227ca:	f7fe fdab 	bl	8021324 <GetAuthCount>

	MakeResponse((BYTE*)&resAuthCount, sizeof(T_GCU_AUTH_COUNT));
 80227ce:	1d3b      	adds	r3, r7, #4
 80227d0:	2102      	movs	r1, #2
 80227d2:	4618      	mov	r0, r3
 80227d4:	f7ff fe3e 	bl	8022454 <MakeResponse>
}
 80227d8:	bf00      	nop
 80227da:	3708      	adds	r7, #8
 80227dc:	46bd      	mov	sp, r7
 80227de:	bd80      	pop	{r7, pc}

080227e0 <CMDGetStatus>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetStatus(void)
{
 80227e0:	b580      	push	{r7, lr}
 80227e2:	b086      	sub	sp, #24
 80227e4:	af00      	add	r7, sp, #0
	T_GCU_STATUS_RES GurStatus;

	GetGCUStatus(&GurStatus);
 80227e6:	1d3b      	adds	r3, r7, #4
 80227e8:	4618      	mov	r0, r3
 80227ea:	f7fe fcdf 	bl	80211ac <GetGCUStatus>

	MakeResponse((BYTE*)&GurStatus, sizeof(T_GCU_STATUS_RES));
 80227ee:	1d3b      	adds	r3, r7, #4
 80227f0:	2112      	movs	r1, #18
 80227f2:	4618      	mov	r0, r3
 80227f4:	f7ff fe2e 	bl	8022454 <MakeResponse>
}
 80227f8:	bf00      	nop
 80227fa:	3718      	adds	r7, #24
 80227fc:	46bd      	mov	sp, r7
 80227fe:	bd80      	pop	{r7, pc}

08022800 <CMDGetSensorSwitch>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetSensorSwitch(void)
{
 8022800:	b480      	push	{r7}
 8022802:	af00      	add	r7, sp, #0
	// not used
}
 8022804:	bf00      	nop
 8022806:	46bd      	mov	sp, r7
 8022808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802280c:	4770      	bx	lr
	...

08022810 <CMDControlAllLED>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlAllLED(void)
{
 8022810:	b580      	push	{r7, lr}
 8022812:	b082      	sub	sp, #8
 8022814:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_ALL_LED *pcmdControlAll = (T_CMD_CONTROL_ALL_LED *)GCUCommand.d.mbOptionData;
 8022816:	4b15      	ldr	r3, [pc, #84]	; (802286c <CMDControlAllLED+0x5c>)
 8022818:	607b      	str	r3, [r7, #4]

	if (pcmdControlAll->test_flag == SET)
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	781b      	ldrb	r3, [r3, #0]
 802281e:	2b01      	cmp	r3, #1
 8022820:	d110      	bne.n	8022844 <CMDControlAllLED+0x34>
	{
		ControlStatusLED(pcmdControlAll->bLamp_EN, pcmdControlAll->bLamp_EX);
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	785a      	ldrb	r2, [r3, #1]
 8022826:	687b      	ldr	r3, [r7, #4]
 8022828:	789b      	ldrb	r3, [r3, #2]
 802282a:	4619      	mov	r1, r3
 802282c:	4610      	mov	r0, r2
 802282e:	f7fe feef 	bl	8021610 <ControlStatusLED>
		ControlOverheadDisplay(pcmdControlAll->bOverhead_EN, pcmdControlAll->bOverhead_EX);
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	795a      	ldrb	r2, [r3, #5]
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	799b      	ldrb	r3, [r3, #6]
 802283a:	4619      	mov	r1, r3
 802283c:	4610      	mov	r0, r2
 802283e:	f7fe fefb 	bl	8021638 <ControlOverheadDisplay>
 8022842:	e007      	b.n	8022854 <CMDControlAllLED+0x44>
	}
	else
	{
		ControlDirectionLED(pcmdControlAll->bLamp_EN, pcmdControlAll->bLamp_EN);
 8022844:	687b      	ldr	r3, [r7, #4]
 8022846:	785a      	ldrb	r2, [r3, #1]
 8022848:	687b      	ldr	r3, [r7, #4]
 802284a:	785b      	ldrb	r3, [r3, #1]
 802284c:	4619      	mov	r1, r3
 802284e:	4610      	mov	r0, r2
 8022850:	f7fe feaa 	bl	80215a8 <ControlDirectionLED>
	}

	ControlIndicator(pcmdControlAll->bIndicator_EN, pcmdControlAll->bIndicator_EX, 0, FALSE);	
 8022854:	687b      	ldr	r3, [r7, #4]
 8022856:	78d8      	ldrb	r0, [r3, #3]
 8022858:	687b      	ldr	r3, [r7, #4]
 802285a:	7919      	ldrb	r1, [r3, #4]
 802285c:	2300      	movs	r3, #0
 802285e:	2200      	movs	r2, #0
 8022860:	f7fe fefe 	bl	8021660 <ControlIndicator>
}
 8022864:	bf00      	nop
 8022866:	3708      	adds	r7, #8
 8022868:	46bd      	mov	sp, r7
 802286a:	bd80      	pop	{r7, pc}
 802286c:	240002f8 	.word	0x240002f8

08022870 <CMDControlFlapDoor>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlFlapDoor(void)
{
 8022870:	b580      	push	{r7, lr}
 8022872:	af00      	add	r7, sp, #0
	SetDoorControl(GCUCommand.d.mbOptionData[0]);
 8022874:	4b03      	ldr	r3, [pc, #12]	; (8022884 <CMDControlFlapDoor+0x14>)
 8022876:	791b      	ldrb	r3, [r3, #4]
 8022878:	4618      	mov	r0, r3
 802287a:	f7ff fd5d 	bl	8022338 <SetDoorControl>
}
 802287e:	bf00      	nop
 8022880:	bd80      	pop	{r7, pc}
 8022882:	bf00      	nop
 8022884:	240002f4 	.word	0x240002f4

08022888 <CMDControlIndicator>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlIndicator(void)
{
 8022888:	b580      	push	{r7, lr}
 802288a:	b082      	sub	sp, #8
 802288c:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_INDICATOR *pcmdIndicator = (T_CMD_CONTROL_INDICATOR *)GCUCommand.d.mbOptionData;
 802288e:	4b07      	ldr	r3, [pc, #28]	; (80228ac <CMDControlIndicator+0x24>)
 8022890:	607b      	str	r3, [r7, #4]
	ControlIndicator4Test(pcmdIndicator->bIndicator_EN, pcmdIndicator->bIndicator_EX);	
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	781a      	ldrb	r2, [r3, #0]
 8022896:	687b      	ldr	r3, [r7, #4]
 8022898:	785b      	ldrb	r3, [r3, #1]
 802289a:	4619      	mov	r1, r3
 802289c:	4610      	mov	r0, r2
 802289e:	f7fe ff53 	bl	8021748 <ControlIndicator4Test>
}
 80228a2:	bf00      	nop
 80228a4:	3708      	adds	r7, #8
 80228a6:	46bd      	mov	sp, r7
 80228a8:	bd80      	pop	{r7, pc}
 80228aa:	bf00      	nop
 80228ac:	240002f8 	.word	0x240002f8

080228b0 <CMDControlLamp>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlLamp(void)
{
 80228b0:	b580      	push	{r7, lr}
 80228b2:	b082      	sub	sp, #8
 80228b4:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_LAMP *pcmdLamp = (T_CMD_CONTROL_LAMP *)GCUCommand.d.mbOptionData;
 80228b6:	4b07      	ldr	r3, [pc, #28]	; (80228d4 <CMDControlLamp+0x24>)
 80228b8:	607b      	str	r3, [r7, #4]
	ControlStatusLED(pcmdLamp->bLamp_EN, pcmdLamp->bLamp_EX);
 80228ba:	687b      	ldr	r3, [r7, #4]
 80228bc:	781a      	ldrb	r2, [r3, #0]
 80228be:	687b      	ldr	r3, [r7, #4]
 80228c0:	785b      	ldrb	r3, [r3, #1]
 80228c2:	4619      	mov	r1, r3
 80228c4:	4610      	mov	r0, r2
 80228c6:	f7fe fea3 	bl	8021610 <ControlStatusLED>
}
 80228ca:	bf00      	nop
 80228cc:	3708      	adds	r7, #8
 80228ce:	46bd      	mov	sp, r7
 80228d0:	bd80      	pop	{r7, pc}
 80228d2:	bf00      	nop
 80228d4:	240002f8 	.word	0x240002f8

080228d8 <CMDControlBuzzer>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlBuzzer(void)
{
 80228d8:	b580      	push	{r7, lr}
 80228da:	b082      	sub	sp, #8
 80228dc:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_BUZZER *pcmdBuzzer = (T_CMD_CONTROL_BUZZER *)GCUCommand.d.mbOptionData;
 80228de:	4b1e      	ldr	r3, [pc, #120]	; (8022958 <CMDControlBuzzer+0x80>)
 80228e0:	607b      	str	r3, [r7, #4]

	if (GCUCommand.d.bDataLen == (sizeof(T_CMD_CONTROL_BUZZER)+1))
 80228e2:	4b1e      	ldr	r3, [pc, #120]	; (802295c <CMDControlBuzzer+0x84>)
 80228e4:	789b      	ldrb	r3, [r3, #2]
 80228e6:	2b04      	cmp	r3, #4
 80228e8:	d12a      	bne.n	8022940 <CMDControlBuzzer+0x68>
	{
		if (pcmdBuzzer->bBuzzerNo & MASK_TEST_BUZZER_MAIN)
 80228ea:	687b      	ldr	r3, [r7, #4]
 80228ec:	789b      	ldrb	r3, [r3, #2]
 80228ee:	f003 0301 	and.w	r3, r3, #1
 80228f2:	2b00      	cmp	r3, #0
 80228f4:	d007      	beq.n	8022906 <CMDControlBuzzer+0x2e>
			ControlBuzzer(BUZZER_NO_MAIN, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 80228f6:	687b      	ldr	r3, [r7, #4]
 80228f8:	7819      	ldrb	r1, [r3, #0]
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	785b      	ldrb	r3, [r3, #1]
 80228fe:	461a      	mov	r2, r3
 8022900:	2000      	movs	r0, #0
 8022902:	f7fe fdf7 	bl	80214f4 <ControlBuzzer>

		if (pcmdBuzzer->bBuzzerNo & MASK_TEST_BUZZER_DIRA)
 8022906:	687b      	ldr	r3, [r7, #4]
 8022908:	789b      	ldrb	r3, [r3, #2]
 802290a:	f003 0302 	and.w	r3, r3, #2
 802290e:	2b00      	cmp	r3, #0
 8022910:	d007      	beq.n	8022922 <CMDControlBuzzer+0x4a>
			ControlBuzzer(BUZZER_NO_DIRA, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 8022912:	687b      	ldr	r3, [r7, #4]
 8022914:	7819      	ldrb	r1, [r3, #0]
 8022916:	687b      	ldr	r3, [r7, #4]
 8022918:	785b      	ldrb	r3, [r3, #1]
 802291a:	461a      	mov	r2, r3
 802291c:	2002      	movs	r0, #2
 802291e:	f7fe fde9 	bl	80214f4 <ControlBuzzer>

		if (pcmdBuzzer->bBuzzerNo & MASK_TEST_BUZZER_DIRB)
 8022922:	687b      	ldr	r3, [r7, #4]
 8022924:	789b      	ldrb	r3, [r3, #2]
 8022926:	f003 0304 	and.w	r3, r3, #4
 802292a:	2b00      	cmp	r3, #0
 802292c:	d010      	beq.n	8022950 <CMDControlBuzzer+0x78>
			ControlBuzzer(BUZZER_NO_DIRB, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	7819      	ldrb	r1, [r3, #0]
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	785b      	ldrb	r3, [r3, #1]
 8022936:	461a      	mov	r2, r3
 8022938:	2001      	movs	r0, #1
 802293a:	f7fe fddb 	bl	80214f4 <ControlBuzzer>
	else
	{
		ControlBuzzer(BUZZER_NO_MAIN, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
	}
	
}
 802293e:	e007      	b.n	8022950 <CMDControlBuzzer+0x78>
		ControlBuzzer(BUZZER_NO_MAIN, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 8022940:	687b      	ldr	r3, [r7, #4]
 8022942:	7819      	ldrb	r1, [r3, #0]
 8022944:	687b      	ldr	r3, [r7, #4]
 8022946:	785b      	ldrb	r3, [r3, #1]
 8022948:	461a      	mov	r2, r3
 802294a:	2000      	movs	r0, #0
 802294c:	f7fe fdd2 	bl	80214f4 <ControlBuzzer>
}
 8022950:	bf00      	nop
 8022952:	3708      	adds	r7, #8
 8022954:	46bd      	mov	sp, r7
 8022956:	bd80      	pop	{r7, pc}
 8022958:	240002f8 	.word	0x240002f8
 802295c:	240002f4 	.word	0x240002f4

08022960 <CMDSafetyStop>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSafetyStop(void)
{
 8022960:	b480      	push	{r7}
 8022962:	b083      	sub	sp, #12
 8022964:	af00      	add	r7, sp, #0
	T_CMD_SAFETY_STOP *pcmdSafetyStop = (T_CMD_SAFETY_STOP *)GCUCommand.d.mbOptionData;
 8022966:	4b08      	ldr	r3, [pc, #32]	; (8022988 <CMDSafetyStop+0x28>)
 8022968:	607b      	str	r3, [r7, #4]
	gfAISafetyOn = pcmdSafetyStop->bSafety;
 802296a:	687b      	ldr	r3, [r7, #4]
 802296c:	781b      	ldrb	r3, [r3, #0]
 802296e:	2b00      	cmp	r3, #0
 8022970:	bf14      	ite	ne
 8022972:	2301      	movne	r3, #1
 8022974:	2300      	moveq	r3, #0
 8022976:	b2da      	uxtb	r2, r3
 8022978:	4b04      	ldr	r3, [pc, #16]	; (802298c <CMDSafetyStop+0x2c>)
 802297a:	701a      	strb	r2, [r3, #0]
}
 802297c:	bf00      	nop
 802297e:	370c      	adds	r7, #12
 8022980:	46bd      	mov	sp, r7
 8022982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022986:	4770      	bx	lr
 8022988:	240002f8 	.word	0x240002f8
 802298c:	240004b3 	.word	0x240004b3

08022990 <CMDWriteRegister>:
* Return:   void
* comments: 
*******************************************************************************/

void CMDWriteRegister(void)
{
 8022990:	b580      	push	{r7, lr}
 8022992:	b084      	sub	sp, #16
 8022994:	af00      	add	r7, sp, #0
	BYTE	*pbControl = (BYTE *)GCUCommand.d.mbOptionData;
 8022996:	4bb6      	ldr	r3, [pc, #728]	; (8022c70 <CMDWriteRegister+0x2e0>)
 8022998:	60fb      	str	r3, [r7, #12]
	BYTE	dwPrimaryLEDValue 		= 0;
 802299a:	2300      	movs	r3, #0
 802299c:	72fb      	strb	r3, [r7, #11]
	BYTE	dwSecondaryLEDValue 	= 0;
 802299e:	2300      	movs	r3, #0
 80229a0:	72bb      	strb	r3, [r7, #10]
	BYTE	dwBarrierValue 			= 0;
 80229a2:	2300      	movs	r3, #0
 80229a4:	727b      	strb	r3, [r7, #9]
	BYTE	dwScadaValue 			= 0;
 80229a6:	2300      	movs	r3, #0
 80229a8:	723b      	strb	r3, [r7, #8]
	BYTE	dwUPSCHKValue 			= 0;
 80229aa:	2300      	movs	r3, #0
 80229ac:	71fb      	strb	r3, [r7, #7]
	BYTE	dwUPSSHDNKValue 		= 0;
 80229ae:	2300      	movs	r3, #0
 80229b0:	71bb      	strb	r3, [r7, #6]

	printf("pbControl[0] = [%d] \n",pbControl[0]);        //Barrier, S_EMG = [0x80], S_DIR = [0x40], S_BRAKE = [0x20], S_OPEN = [0x10], P_EMG = [0x08], P_DIR = [0x04], P_BRAKE = [0x02], P_OPEN = [0x01]
 80229b2:	68fb      	ldr	r3, [r7, #12]
 80229b4:	781b      	ldrb	r3, [r3, #0]
 80229b6:	4619      	mov	r1, r3
 80229b8:	48ae      	ldr	r0, [pc, #696]	; (8022c74 <CMDWriteRegister+0x2e4>)
 80229ba:	f006 ff4b 	bl	8029854 <printf_>
	printf("pbControl[1] = [%d] \n",pbControl[1]);		//SCADA OUT, NXO = [0x8], TDO = [0x4], EBO = [0x2], OOS = [0x1]
 80229be:	68fb      	ldr	r3, [r7, #12]
 80229c0:	3301      	adds	r3, #1
 80229c2:	781b      	ldrb	r3, [r3, #0]
 80229c4:	4619      	mov	r1, r3
 80229c6:	48ac      	ldr	r0, [pc, #688]	; (8022c78 <CMDWriteRegister+0x2e8>)
 80229c8:	f006 ff44 	bl	8029854 <printf_>
	printf("pbControl[2] = [%d] \n",pbControl[2]);
 80229cc:	68fb      	ldr	r3, [r7, #12]
 80229ce:	3302      	adds	r3, #2
 80229d0:	781b      	ldrb	r3, [r3, #0]
 80229d2:	4619      	mov	r1, r3
 80229d4:	48a9      	ldr	r0, [pc, #676]	; (8022c7c <CMDWriteRegister+0x2ec>)
 80229d6:	f006 ff3d 	bl	8029854 <printf_>
	printf("pbControl[3] = [%d] \n",pbControl[3]);		//jig master dir green = [0x4], red = [0x2], yellow = [0x1]
 80229da:	68fb      	ldr	r3, [r7, #12]
 80229dc:	3303      	adds	r3, #3
 80229de:	781b      	ldrb	r3, [r3, #0]
 80229e0:	4619      	mov	r1, r3
 80229e2:	48a7      	ldr	r0, [pc, #668]	; (8022c80 <CMDWriteRegister+0x2f0>)
 80229e4:	f006 ff36 	bl	8029854 <printf_>
	printf("pbControl[4] = [%d] \n",pbControl[4]);		//jig slave dir green = [0x4], red = [0x2], yellow = [0x1]
 80229e8:	68fb      	ldr	r3, [r7, #12]
 80229ea:	3304      	adds	r3, #4
 80229ec:	781b      	ldrb	r3, [r3, #0]
 80229ee:	4619      	mov	r1, r3
 80229f0:	48a4      	ldr	r0, [pc, #656]	; (8022c84 <CMDWriteRegister+0x2f4>)
 80229f2:	f006 ff2f 	bl	8029854 <printf_>
	printf("pbControl[5] = [%d] \n",pbControl[5]);
 80229f6:	68fb      	ldr	r3, [r7, #12]
 80229f8:	3305      	adds	r3, #5
 80229fa:	781b      	ldrb	r3, [r3, #0]
 80229fc:	4619      	mov	r1, r3
 80229fe:	48a2      	ldr	r0, [pc, #648]	; (8022c88 <CMDWriteRegister+0x2f8>)
 8022a00:	f006 ff28 	bl	8029854 <printf_>
	printf("pbControl[6] = [%d] \n",pbControl[6]);		//jig master alm green = [0x4], blue = [0x2], red = [0x1]
 8022a04:	68fb      	ldr	r3, [r7, #12]
 8022a06:	3306      	adds	r3, #6
 8022a08:	781b      	ldrb	r3, [r3, #0]
 8022a0a:	4619      	mov	r1, r3
 8022a0c:	489f      	ldr	r0, [pc, #636]	; (8022c8c <CMDWriteRegister+0x2fc>)
 8022a0e:	f006 ff21 	bl	8029854 <printf_>
	printf("pbControl[7] = [%d] \n",pbControl[7]);		//jig slave alm green = [0x4], blue = [0x2], red = [0x1]
 8022a12:	68fb      	ldr	r3, [r7, #12]
 8022a14:	3307      	adds	r3, #7
 8022a16:	781b      	ldrb	r3, [r3, #0]
 8022a18:	4619      	mov	r1, r3
 8022a1a:	489d      	ldr	r0, [pc, #628]	; (8022c90 <CMDWriteRegister+0x300>)
 8022a1c:	f006 ff1a 	bl	8029854 <printf_>
	printf("pbControl[8] = [%d] \n",pbControl[8]);		//default 0x33 SHDN button 0x01 CHK 0x02 reverse
 8022a20:	68fb      	ldr	r3, [r7, #12]
 8022a22:	3308      	adds	r3, #8
 8022a24:	781b      	ldrb	r3, [r3, #0]
 8022a26:	4619      	mov	r1, r3
 8022a28:	489a      	ldr	r0, [pc, #616]	; (8022c94 <CMDWriteRegister+0x304>)
 8022a2a:	f006 ff13 	bl	8029854 <printf_>

	// Barrier - Primary
	dwBarrierValue =  (pbControl[0] & 0x01)? 0x01: 0x00;			// output Primary Barrier - Open/Close
 8022a2e:	68fb      	ldr	r3, [r7, #12]
 8022a30:	781b      	ldrb	r3, [r3, #0]
 8022a32:	f003 0301 	and.w	r3, r3, #1
 8022a36:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x02)? 0x02: 0x00;			// output Primary Barrier - Emg(Free)
 8022a38:	68fb      	ldr	r3, [r7, #12]
 8022a3a:	781b      	ldrb	r3, [r3, #0]
 8022a3c:	b25b      	sxtb	r3, r3
 8022a3e:	f003 0302 	and.w	r3, r3, #2
 8022a42:	b25a      	sxtb	r2, r3
 8022a44:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a48:	4313      	orrs	r3, r2
 8022a4a:	b25b      	sxtb	r3, r3
 8022a4c:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x04)? 0x04: 0x00;			// output Primary Barrier - Direction
 8022a4e:	68fb      	ldr	r3, [r7, #12]
 8022a50:	781b      	ldrb	r3, [r3, #0]
 8022a52:	b25b      	sxtb	r3, r3
 8022a54:	f003 0304 	and.w	r3, r3, #4
 8022a58:	b25a      	sxtb	r2, r3
 8022a5a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a5e:	4313      	orrs	r3, r2
 8022a60:	b25b      	sxtb	r3, r3
 8022a62:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x08)? 0x08: 0x00;			// output Primary Barrier - Brake(Stop)
 8022a64:	68fb      	ldr	r3, [r7, #12]
 8022a66:	781b      	ldrb	r3, [r3, #0]
 8022a68:	b25b      	sxtb	r3, r3
 8022a6a:	f003 0308 	and.w	r3, r3, #8
 8022a6e:	b25a      	sxtb	r2, r3
 8022a70:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a74:	4313      	orrs	r3, r2
 8022a76:	b25b      	sxtb	r3, r3
 8022a78:	727b      	strb	r3, [r7, #9]

	// Barrier - Secondary
	dwBarrierValue |= (pbControl[0] & 0x10)? 0x10: 0x00;			// output Secondary Barrier - Open/Close
 8022a7a:	68fb      	ldr	r3, [r7, #12]
 8022a7c:	781b      	ldrb	r3, [r3, #0]
 8022a7e:	b25b      	sxtb	r3, r3
 8022a80:	f003 0310 	and.w	r3, r3, #16
 8022a84:	b25a      	sxtb	r2, r3
 8022a86:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a8a:	4313      	orrs	r3, r2
 8022a8c:	b25b      	sxtb	r3, r3
 8022a8e:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x20)? 0x20: 0x00;			// output Secondary Barrier - Emg(Free)
 8022a90:	68fb      	ldr	r3, [r7, #12]
 8022a92:	781b      	ldrb	r3, [r3, #0]
 8022a94:	b25b      	sxtb	r3, r3
 8022a96:	f003 0320 	and.w	r3, r3, #32
 8022a9a:	b25a      	sxtb	r2, r3
 8022a9c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022aa0:	4313      	orrs	r3, r2
 8022aa2:	b25b      	sxtb	r3, r3
 8022aa4:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x40)? 0x40: 0x00;			// output Secondary Barrier - Direction
 8022aa6:	68fb      	ldr	r3, [r7, #12]
 8022aa8:	781b      	ldrb	r3, [r3, #0]
 8022aaa:	b25b      	sxtb	r3, r3
 8022aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022ab0:	b25a      	sxtb	r2, r3
 8022ab2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022ab6:	4313      	orrs	r3, r2
 8022ab8:	b25b      	sxtb	r3, r3
 8022aba:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x80)? 0x80: 0x00;			// output Secondary Barrier - Brake(Stop)
 8022abc:	68fb      	ldr	r3, [r7, #12]
 8022abe:	781b      	ldrb	r3, [r3, #0]
 8022ac0:	b25b      	sxtb	r3, r3
 8022ac2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8022ac6:	b25a      	sxtb	r2, r3
 8022ac8:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022acc:	4313      	orrs	r3, r2
 8022ace:	b25b      	sxtb	r3, r3
 8022ad0:	727b      	strb	r3, [r7, #9]
	
	outb(WRITE02_ADR, dwBarrierValue);
 8022ad2:	4a71      	ldr	r2, [pc, #452]	; (8022c98 <CMDWriteRegister+0x308>)
 8022ad4:	7a7b      	ldrb	r3, [r7, #9]
 8022ad6:	7013      	strb	r3, [r2, #0]

	// SCADA
	dwScadaValue =  (pbControl[1] & 0x01)? 0x01: 0x00;				// output SCADA - OOS
 8022ad8:	68fb      	ldr	r3, [r7, #12]
 8022ada:	3301      	adds	r3, #1
 8022adc:	781b      	ldrb	r3, [r3, #0]
 8022ade:	f003 0301 	and.w	r3, r3, #1
 8022ae2:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x02)? 0x02: 0x00;				// output SCADA - EBO
 8022ae4:	68fb      	ldr	r3, [r7, #12]
 8022ae6:	3301      	adds	r3, #1
 8022ae8:	781b      	ldrb	r3, [r3, #0]
 8022aea:	b25b      	sxtb	r3, r3
 8022aec:	f003 0302 	and.w	r3, r3, #2
 8022af0:	b25a      	sxtb	r2, r3
 8022af2:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8022af6:	4313      	orrs	r3, r2
 8022af8:	b25b      	sxtb	r3, r3
 8022afa:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x04)? 0x04: 0x00;				// output SCADA - TDO
 8022afc:	68fb      	ldr	r3, [r7, #12]
 8022afe:	3301      	adds	r3, #1
 8022b00:	781b      	ldrb	r3, [r3, #0]
 8022b02:	b25b      	sxtb	r3, r3
 8022b04:	f003 0304 	and.w	r3, r3, #4
 8022b08:	b25a      	sxtb	r2, r3
 8022b0a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8022b0e:	4313      	orrs	r3, r2
 8022b10:	b25b      	sxtb	r3, r3
 8022b12:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x08)? 0x08: 0x00;				// output SCADA - NXO
 8022b14:	68fb      	ldr	r3, [r7, #12]
 8022b16:	3301      	adds	r3, #1
 8022b18:	781b      	ldrb	r3, [r3, #0]
 8022b1a:	b25b      	sxtb	r3, r3
 8022b1c:	f003 0308 	and.w	r3, r3, #8
 8022b20:	b25a      	sxtb	r2, r3
 8022b22:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8022b26:	4313      	orrs	r3, r2
 8022b28:	b25b      	sxtb	r3, r3
 8022b2a:	723b      	strb	r3, [r7, #8]

	outb(WRITE03_ADR, dwScadaValue);
 8022b2c:	4a5b      	ldr	r2, [pc, #364]	; (8022c9c <CMDWriteRegister+0x30c>)
 8022b2e:	7a3b      	ldrb	r3, [r7, #8]
 8022b30:	7013      	strb	r3, [r2, #0]

	// Status Display - Primary
	dwPrimaryLEDValue =  (pbControl[3] & 0x01)? 0x01: 0x00;			//Status display - green
 8022b32:	68fb      	ldr	r3, [r7, #12]
 8022b34:	3303      	adds	r3, #3
 8022b36:	781b      	ldrb	r3, [r3, #0]
 8022b38:	f003 0301 	and.w	r3, r3, #1
 8022b3c:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[3] & 0x02)? 0x02: 0x00;			//Status display - red
 8022b3e:	68fb      	ldr	r3, [r7, #12]
 8022b40:	3303      	adds	r3, #3
 8022b42:	781b      	ldrb	r3, [r3, #0]
 8022b44:	b25b      	sxtb	r3, r3
 8022b46:	f003 0302 	and.w	r3, r3, #2
 8022b4a:	b25a      	sxtb	r2, r3
 8022b4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b50:	4313      	orrs	r3, r2
 8022b52:	b25b      	sxtb	r3, r3
 8022b54:	72fb      	strb	r3, [r7, #11]

	// Overhead Display - Primary
	dwPrimaryLEDValue |= (pbControl[3] & 0x04)? 0x04: 0x00;			//Overhead display - green
 8022b56:	68fb      	ldr	r3, [r7, #12]
 8022b58:	3303      	adds	r3, #3
 8022b5a:	781b      	ldrb	r3, [r3, #0]
 8022b5c:	b25b      	sxtb	r3, r3
 8022b5e:	f003 0304 	and.w	r3, r3, #4
 8022b62:	b25a      	sxtb	r2, r3
 8022b64:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b68:	4313      	orrs	r3, r2
 8022b6a:	b25b      	sxtb	r3, r3
 8022b6c:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[3] & 0x08)? 0x08: 0x00;			//Overhead display - red
 8022b6e:	68fb      	ldr	r3, [r7, #12]
 8022b70:	3303      	adds	r3, #3
 8022b72:	781b      	ldrb	r3, [r3, #0]
 8022b74:	b25b      	sxtb	r3, r3
 8022b76:	f003 0308 	and.w	r3, r3, #8
 8022b7a:	b25a      	sxtb	r2, r3
 8022b7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b80:	4313      	orrs	r3, r2
 8022b82:	b25b      	sxtb	r3, r3
 8022b84:	72fb      	strb	r3, [r7, #11]

	// Status Display - Secondary
	dwPrimaryLEDValue |= (pbControl[4] & 0x01)? 0x10: 0x00;		//Status display - green
 8022b86:	68fb      	ldr	r3, [r7, #12]
 8022b88:	3304      	adds	r3, #4
 8022b8a:	781b      	ldrb	r3, [r3, #0]
 8022b8c:	011b      	lsls	r3, r3, #4
 8022b8e:	b25b      	sxtb	r3, r3
 8022b90:	f003 0310 	and.w	r3, r3, #16
 8022b94:	b25a      	sxtb	r2, r3
 8022b96:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b9a:	4313      	orrs	r3, r2
 8022b9c:	b25b      	sxtb	r3, r3
 8022b9e:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[4] & 0x02)? 0x20: 0x00;		//Status display - red
 8022ba0:	68fb      	ldr	r3, [r7, #12]
 8022ba2:	3304      	adds	r3, #4
 8022ba4:	781b      	ldrb	r3, [r3, #0]
 8022ba6:	011b      	lsls	r3, r3, #4
 8022ba8:	b25b      	sxtb	r3, r3
 8022baa:	f003 0320 	and.w	r3, r3, #32
 8022bae:	b25a      	sxtb	r2, r3
 8022bb0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022bb4:	4313      	orrs	r3, r2
 8022bb6:	b25b      	sxtb	r3, r3
 8022bb8:	72fb      	strb	r3, [r7, #11]

	// Overhead Display - Secondary
	dwPrimaryLEDValue |= (pbControl[4] & 0x04)? 0x40: 0x00;		//Overhead display - green
 8022bba:	68fb      	ldr	r3, [r7, #12]
 8022bbc:	3304      	adds	r3, #4
 8022bbe:	781b      	ldrb	r3, [r3, #0]
 8022bc0:	011b      	lsls	r3, r3, #4
 8022bc2:	b25b      	sxtb	r3, r3
 8022bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022bc8:	b25a      	sxtb	r2, r3
 8022bca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022bce:	4313      	orrs	r3, r2
 8022bd0:	b25b      	sxtb	r3, r3
 8022bd2:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[4] & 0x08)? 0x80: 0x00;		//Overhead display - red
 8022bd4:	68fb      	ldr	r3, [r7, #12]
 8022bd6:	3304      	adds	r3, #4
 8022bd8:	781b      	ldrb	r3, [r3, #0]
 8022bda:	011b      	lsls	r3, r3, #4
 8022bdc:	b25b      	sxtb	r3, r3
 8022bde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8022be2:	b25a      	sxtb	r2, r3
 8022be4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022be8:	4313      	orrs	r3, r2
 8022bea:	b25b      	sxtb	r3, r3
 8022bec:	72fb      	strb	r3, [r7, #11]

	outb(WRITE00_ADR, dwPrimaryLEDValue);
 8022bee:	f04f 42c8 	mov.w	r2, #1677721600	; 0x64000000
 8022bf2:	7afb      	ldrb	r3, [r7, #11]
 8022bf4:	7013      	strb	r3, [r2, #0]


	// Indicator Light - Primary
	dwSecondaryLEDValue  = (pbControl[6] & 0x01)? 0x01: 0x00;			//red
 8022bf6:	68fb      	ldr	r3, [r7, #12]
 8022bf8:	3306      	adds	r3, #6
 8022bfa:	781b      	ldrb	r3, [r3, #0]
 8022bfc:	f003 0301 	and.w	r3, r3, #1
 8022c00:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[6] & 0x04)? 0x02: 0x00;			//green
 8022c02:	68fb      	ldr	r3, [r7, #12]
 8022c04:	3306      	adds	r3, #6
 8022c06:	781b      	ldrb	r3, [r3, #0]
 8022c08:	105b      	asrs	r3, r3, #1
 8022c0a:	b25b      	sxtb	r3, r3
 8022c0c:	f003 0302 	and.w	r3, r3, #2
 8022c10:	b25a      	sxtb	r2, r3
 8022c12:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022c16:	4313      	orrs	r3, r2
 8022c18:	b25b      	sxtb	r3, r3
 8022c1a:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[6] & 0x02)? 0x04: 0x00;			//blue
 8022c1c:	68fb      	ldr	r3, [r7, #12]
 8022c1e:	3306      	adds	r3, #6
 8022c20:	781b      	ldrb	r3, [r3, #0]
 8022c22:	005b      	lsls	r3, r3, #1
 8022c24:	b25b      	sxtb	r3, r3
 8022c26:	f003 0304 	and.w	r3, r3, #4
 8022c2a:	b25a      	sxtb	r2, r3
 8022c2c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022c30:	4313      	orrs	r3, r2
 8022c32:	b25b      	sxtb	r3, r3
 8022c34:	72bb      	strb	r3, [r7, #10]

	// Indicator Light - Secondary
	dwSecondaryLEDValue |= (pbControl[7] & 0x01)? 0x10: 0x00;		//red
 8022c36:	68fb      	ldr	r3, [r7, #12]
 8022c38:	3307      	adds	r3, #7
 8022c3a:	781b      	ldrb	r3, [r3, #0]
 8022c3c:	011b      	lsls	r3, r3, #4
 8022c3e:	b25b      	sxtb	r3, r3
 8022c40:	f003 0310 	and.w	r3, r3, #16
 8022c44:	b25a      	sxtb	r2, r3
 8022c46:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022c4a:	4313      	orrs	r3, r2
 8022c4c:	b25b      	sxtb	r3, r3
 8022c4e:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[7] & 0x04)? 0x20: 0x00;		//green
 8022c50:	68fb      	ldr	r3, [r7, #12]
 8022c52:	3307      	adds	r3, #7
 8022c54:	781b      	ldrb	r3, [r3, #0]
 8022c56:	00db      	lsls	r3, r3, #3
 8022c58:	b25b      	sxtb	r3, r3
 8022c5a:	f003 0320 	and.w	r3, r3, #32
 8022c5e:	b25a      	sxtb	r2, r3
 8022c60:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022c64:	4313      	orrs	r3, r2
 8022c66:	b25b      	sxtb	r3, r3
 8022c68:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[7] & 0x02)? 0x40: 0x00;		//blue
 8022c6a:	68fb      	ldr	r3, [r7, #12]
 8022c6c:	e018      	b.n	8022ca0 <CMDWriteRegister+0x310>
 8022c6e:	bf00      	nop
 8022c70:	240002f8 	.word	0x240002f8
 8022c74:	080323f4 	.word	0x080323f4
 8022c78:	0803240c 	.word	0x0803240c
 8022c7c:	08032424 	.word	0x08032424
 8022c80:	0803243c 	.word	0x0803243c
 8022c84:	08032454 	.word	0x08032454
 8022c88:	0803246c 	.word	0x0803246c
 8022c8c:	08032484 	.word	0x08032484
 8022c90:	0803249c 	.word	0x0803249c
 8022c94:	080324b4 	.word	0x080324b4
 8022c98:	64000200 	.word	0x64000200
 8022c9c:	64000400 	.word	0x64000400
 8022ca0:	3307      	adds	r3, #7
 8022ca2:	781b      	ldrb	r3, [r3, #0]
 8022ca4:	015b      	lsls	r3, r3, #5
 8022ca6:	b25b      	sxtb	r3, r3
 8022ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022cac:	b25a      	sxtb	r2, r3
 8022cae:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022cb2:	4313      	orrs	r3, r2
 8022cb4:	b25b      	sxtb	r3, r3
 8022cb6:	72bb      	strb	r3, [r7, #10]


	// Write Register

	outb(WRITE01_ADR, dwSecondaryLEDValue);	
 8022cb8:	4a1d      	ldr	r2, [pc, #116]	; (8022d30 <CMDWriteRegister+0x3a0>)
 8022cba:	7abb      	ldrb	r3, [r7, #10]
 8022cbc:	7013      	strb	r3, [r2, #0]

	if (pbControl[8] == 0x33)
 8022cbe:	68fb      	ldr	r3, [r7, #12]
 8022cc0:	3308      	adds	r3, #8
 8022cc2:	781b      	ldrb	r3, [r3, #0]
 8022cc4:	2b33      	cmp	r3, #51	; 0x33
 8022cc6:	d10a      	bne.n	8022cde <CMDWriteRegister+0x34e>
	{
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_CHK_Pin, GPIO_PIN_RESET);			//Default Low / Active High	 New Board
 8022cc8:	2200      	movs	r2, #0
 8022cca:	2140      	movs	r1, #64	; 0x40
 8022ccc:	4819      	ldr	r0, [pc, #100]	; (8022d34 <CMDWriteRegister+0x3a4>)
 8022cce:	f008 fbcd 	bl	802b46c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_SHDN_Pin, GPIO_PIN_RESET);		//Default High / Active Low	 New Board
 8022cd2:	2200      	movs	r2, #0
 8022cd4:	2180      	movs	r1, #128	; 0x80
 8022cd6:	4817      	ldr	r0, [pc, #92]	; (8022d34 <CMDWriteRegister+0x3a4>)
 8022cd8:	f008 fbc8 	bl	802b46c <HAL_GPIO_WritePin>
 8022cdc:	e019      	b.n	8022d12 <CMDWriteRegister+0x382>
	}
	else
	{
		dwUPSCHKValue  = (pbControl[8] & 0x02)? 0x01: 0x00;						//CHK	High / Low
 8022cde:	68fb      	ldr	r3, [r7, #12]
 8022ce0:	3308      	adds	r3, #8
 8022ce2:	781b      	ldrb	r3, [r3, #0]
 8022ce4:	105b      	asrs	r3, r3, #1
 8022ce6:	b2db      	uxtb	r3, r3
 8022ce8:	f003 0301 	and.w	r3, r3, #1
 8022cec:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_CHK_Pin, dwUPSCHKValue);
 8022cee:	79fb      	ldrb	r3, [r7, #7]
 8022cf0:	461a      	mov	r2, r3
 8022cf2:	2140      	movs	r1, #64	; 0x40
 8022cf4:	480f      	ldr	r0, [pc, #60]	; (8022d34 <CMDWriteRegister+0x3a4>)
 8022cf6:	f008 fbb9 	bl	802b46c <HAL_GPIO_WritePin>

		dwUPSSHDNKValue = (pbControl[8] & 0x01)? 0x01: 0x00;					//SHDN	Low / High
 8022cfa:	68fb      	ldr	r3, [r7, #12]
 8022cfc:	3308      	adds	r3, #8
 8022cfe:	781b      	ldrb	r3, [r3, #0]
 8022d00:	f003 0301 	and.w	r3, r3, #1
 8022d04:	71bb      	strb	r3, [r7, #6]
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_SHDN_Pin, dwUPSSHDNKValue);
 8022d06:	79bb      	ldrb	r3, [r7, #6]
 8022d08:	461a      	mov	r2, r3
 8022d0a:	2180      	movs	r1, #128	; 0x80
 8022d0c:	4809      	ldr	r0, [pc, #36]	; (8022d34 <CMDWriteRegister+0x3a4>)
 8022d0e:	f008 fbad 	bl	802b46c <HAL_GPIO_WritePin>

	//pbControl[5] =  0;						// Control dummy direction display (WMATA not used)
	//pbControl[8] => UPS Shuddown On [0x00], UPS Shuddown Off [0x01] / UPS Check On [0x02], UPS Check Off [0x00] 
	//pbControl[8] =  0;						// UPS Command - BART도 UPS I/F 사용 (Out: 2EA) - 현재 SHDN 1EA만 구현되어 있으나 CHK신호 추가예정 -> Jig Program 에서는 UPS Write 시그널 줌. 20231002 by Joseph

	if (pbControl[10])	
 8022d12:	68fb      	ldr	r3, [r7, #12]
 8022d14:	330a      	adds	r3, #10
 8022d16:	781b      	ldrb	r3, [r3, #0]
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	d002      	beq.n	8022d22 <CMDWriteRegister+0x392>
		BuzzerOn();			//buzzer 한개만 사용
 8022d1c:	f002 fbec 	bl	80254f8 <BuzzerOn>
	else										
		BuzzerOff();
}
 8022d20:	e001      	b.n	8022d26 <CMDWriteRegister+0x396>
		BuzzerOff();
 8022d22:	f002 fbf5 	bl	8025510 <BuzzerOff>
}
 8022d26:	bf00      	nop
 8022d28:	3710      	adds	r7, #16
 8022d2a:	46bd      	mov	sp, r7
 8022d2c:	bd80      	pop	{r7, pc}
 8022d2e:	bf00      	nop
 8022d30:	64000100 	.word	0x64000100
 8022d34:	58021400 	.word	0x58021400

08022d38 <CMDReadRegister>:
* Out:      Values of current register
* Return:   void
* comments: 
*******************************************************************************/
void CMDReadRegister(void)			//pms		이 함수 모두 확인 필요
{
 8022d38:	b580      	push	{r7, lr}
 8022d3a:	b086      	sub	sp, #24
 8022d3c:	af00      	add	r7, sp, #0
	BYTE	mbReadData[MAX_READ_REG];			//0 ~ 10 = Total 11 0x6400000B 까지 read
	DWORD	dwSpareSenserValue  = 0;
 8022d3e:	2300      	movs	r3, #0
 8022d40:	617b      	str	r3, [r7, #20]
	DWORD	dwUPSValue = 0;
 8022d42:	2300      	movs	r3, #0
 8022d44:	613b      	str	r3, [r7, #16]

	dwUPSValue = (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_CONN_Pin))? 0x01: 0x00;			// Connection Failure, High active //stm32L496 적용 보드에서는 conn이 없었음
 8022d46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022d4a:	483d      	ldr	r0, [pc, #244]	; (8022e40 <CMDReadRegister+0x108>)
 8022d4c:	f008 fb76 	bl	802b43c <HAL_GPIO_ReadPin>
 8022d50:	4603      	mov	r3, r0
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	bf14      	ite	ne
 8022d56:	2301      	movne	r3, #1
 8022d58:	2300      	moveq	r3, #0
 8022d5a:	b2db      	uxtb	r3, r3
 8022d5c:	613b      	str	r3, [r7, #16]
	dwUPSValue |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_LINE_FAIL_Pin))? 0x02: 0x00;			// Power Failure, Low active
 8022d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022d62:	4837      	ldr	r0, [pc, #220]	; (8022e40 <CMDReadRegister+0x108>)
 8022d64:	f008 fb6a 	bl	802b43c <HAL_GPIO_ReadPin>
 8022d68:	4603      	mov	r3, r0
 8022d6a:	2b00      	cmp	r3, #0
 8022d6c:	d001      	beq.n	8022d72 <CMDReadRegister+0x3a>
 8022d6e:	2302      	movs	r3, #2
 8022d70:	e000      	b.n	8022d74 <CMDReadRegister+0x3c>
 8022d72:	2300      	movs	r3, #0
 8022d74:	461a      	mov	r2, r3
 8022d76:	693b      	ldr	r3, [r7, #16]
 8022d78:	4313      	orrs	r3, r2
 8022d7a:	613b      	str	r3, [r7, #16]
	dwUPSValue |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_LOW_BAT_Pin))? 0x04: 0x00;		// Low battery, Low active
 8022d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8022d80:	482f      	ldr	r0, [pc, #188]	; (8022e40 <CMDReadRegister+0x108>)
 8022d82:	f008 fb5b 	bl	802b43c <HAL_GPIO_ReadPin>
 8022d86:	4603      	mov	r3, r0
 8022d88:	2b00      	cmp	r3, #0
 8022d8a:	d001      	beq.n	8022d90 <CMDReadRegister+0x58>
 8022d8c:	2304      	movs	r3, #4
 8022d8e:	e000      	b.n	8022d92 <CMDReadRegister+0x5a>
 8022d90:	2300      	movs	r3, #0
 8022d92:	461a      	mov	r2, r3
 8022d94:	693b      	ldr	r3, [r7, #16]
 8022d96:	4313      	orrs	r3, r2
 8022d98:	613b      	str	r3, [r7, #16]

	// BART 에서는 Passenger sensor 01 ~ 16(2 bytes) 만 사용
	dwSpareSenserValue = (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN1_Pin))? 0x01: 0x00;  	// Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기)
 8022d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022d9e:	4829      	ldr	r0, [pc, #164]	; (8022e44 <CMDReadRegister+0x10c>)
 8022da0:	f008 fb4c 	bl	802b43c <HAL_GPIO_ReadPin>
 8022da4:	4603      	mov	r3, r0
 8022da6:	2b00      	cmp	r3, #0
 8022da8:	bf14      	ite	ne
 8022daa:	2301      	movne	r3, #1
 8022dac:	2300      	moveq	r3, #0
 8022dae:	b2db      	uxtb	r3, r3
 8022db0:	617b      	str	r3, [r7, #20]
	dwSpareSenserValue |= (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN2_Pin))? 0x02: 0x00;
 8022db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8022db6:	4823      	ldr	r0, [pc, #140]	; (8022e44 <CMDReadRegister+0x10c>)
 8022db8:	f008 fb40 	bl	802b43c <HAL_GPIO_ReadPin>
 8022dbc:	4603      	mov	r3, r0
 8022dbe:	2b00      	cmp	r3, #0
 8022dc0:	d001      	beq.n	8022dc6 <CMDReadRegister+0x8e>
 8022dc2:	2302      	movs	r3, #2
 8022dc4:	e000      	b.n	8022dc8 <CMDReadRegister+0x90>
 8022dc6:	2300      	movs	r3, #0
 8022dc8:	461a      	mov	r2, r3
 8022dca:	697b      	ldr	r3, [r7, #20]
 8022dcc:	4313      	orrs	r3, r2
 8022dce:	617b      	str	r3, [r7, #20]

	mbReadData[0] =  RD_SWITCH & 0x0F;			// Door/Module switch 1 - BART는 Door Switch 1~4만 사용, High - detected, Low - not detected
 8022dd0:	4b1d      	ldr	r3, [pc, #116]	; (8022e48 <CMDReadRegister+0x110>)
 8022dd2:	781b      	ldrb	r3, [r3, #0]
 8022dd4:	b2db      	uxtb	r3, r3
 8022dd6:	f003 030f 	and.w	r3, r3, #15
 8022dda:	b2db      	uxtb	r3, r3
 8022ddc:	713b      	strb	r3, [r7, #4]
	mbReadData[1] =  (RD_SWITCH >> 4) & 0x0F;	// Door/Module switch 2 - BART는 Door Switch 5~8만 사용, High - detected, Low - not detected
 8022dde:	4b1a      	ldr	r3, [pc, #104]	; (8022e48 <CMDReadRegister+0x110>)
 8022de0:	781b      	ldrb	r3, [r3, #0]
 8022de2:	b2db      	uxtb	r3, r3
 8022de4:	091b      	lsrs	r3, r3, #4
 8022de6:	b2db      	uxtb	r3, r3
 8022de8:	f003 030f 	and.w	r3, r3, #15
 8022dec:	b2db      	uxtb	r3, r3
 8022dee:	717b      	strb	r3, [r7, #5]
	mbReadData[2] =  0;							// Token capture unit sensor - Token box 없음
 8022df0:	2300      	movs	r3, #0
 8022df2:	71bb      	strb	r3, [r7, #6]
	mbReadData[3] =  (*(BYTE*)READ00_ADR);		// Passenger sensor 1 - BART는 Passenger sensor 1~8사용, High - detected, Low - not detected
 8022df4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8022df8:	781b      	ldrb	r3, [r3, #0]
 8022dfa:	71fb      	strb	r3, [r7, #7]
	mbReadData[4] =  (*(BYTE*)READ01_ADR);		// Passenger sensor 2 - BART는 Passenger sensor 9~16사용(회로상엔 11~18로 표기) -> 회로상에도 9~16으로 표기 바랍니다 20230927 by Joseph, High - detected, Low - not detected
 8022dfc:	4b13      	ldr	r3, [pc, #76]	; (8022e4c <CMDReadRegister+0x114>)
 8022dfe:	781b      	ldrb	r3, [r3, #0]
 8022e00:	723b      	strb	r3, [r7, #8]
	mbReadData[5] =  dwSpareSenserValue;		// Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기) -> 회로상에도 스페어는 17,18 로 표기 바랍니다 20230927 by Joseph
 8022e02:	697b      	ldr	r3, [r7, #20]
 8022e04:	b2db      	uxtb	r3, r3
 8022e06:	727b      	strb	r3, [r7, #9]
												// add - jig test에서는 17 18 할당 -> JIG 에서는 17,18 sensor 체크는 뺄 예정입니다. 20230927 by Joseph
	mbReadData[6] =  0;							// Spare sensor (WMATA not used) -> JIG 에서는 Spare sensor 체크는 뺄 예정입니다. 20230927 by Joseph
 8022e08:	2300      	movs	r3, #0
 8022e0a:	72bb      	strb	r3, [r7, #10]
	mbReadData[7] =  (*(BYTE*)READ04_ADR);		// Barrier status, High active
 8022e0c:	4b10      	ldr	r3, [pc, #64]	; (8022e50 <CMDReadRegister+0x118>)
 8022e0e:	781b      	ldrb	r3, [r3, #0]
 8022e10:	72fb      	strb	r3, [r7, #11]
	mbReadData[8] =  (*(BYTE*)READ03_ADR);		// SCADA, High active
 8022e12:	4b10      	ldr	r3, [pc, #64]	; (8022e54 <CMDReadRegister+0x11c>)
 8022e14:	781b      	ldrb	r3, [r3, #0]
 8022e16:	733b      	strb	r3, [r7, #12]
	mbReadData[9] =  IsEMGSignalOn();			// External IRQ source  - 인터럽트 신호 BART에서 사용여부는 첨부 GCU_IO Specification 참조 -> EBO (Emergency) Signal 값으로 변경. 20231002 by Joseph
 8022e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8022e1c:	480e      	ldr	r0, [pc, #56]	; (8022e58 <CMDReadRegister+0x120>)
 8022e1e:	f008 fb0d 	bl	802b43c <HAL_GPIO_ReadPin>
 8022e22:	4603      	mov	r3, r0
 8022e24:	737b      	strb	r3, [r7, #13]
	mbReadData[10] =  dwUPSValue;				// UPS Status - BART도 UPS I/F 사용 (In: 3EA) 
 8022e26:	693b      	ldr	r3, [r7, #16]
 8022e28:	b2db      	uxtb	r3, r3
 8022e2a:	73bb      	strb	r3, [r7, #14]

	MakeResponse(mbReadData, sizeof(mbReadData));
 8022e2c:	1d3b      	adds	r3, r7, #4
 8022e2e:	210b      	movs	r1, #11
 8022e30:	4618      	mov	r0, r3
 8022e32:	f7ff fb0f 	bl	8022454 <MakeResponse>
}
 8022e36:	bf00      	nop
 8022e38:	3718      	adds	r7, #24
 8022e3a:	46bd      	mov	sp, r7
 8022e3c:	bd80      	pop	{r7, pc}
 8022e3e:	bf00      	nop
 8022e40:	58021400 	.word	0x58021400
 8022e44:	58020000 	.word	0x58020000
 8022e48:	60000300 	.word	0x60000300
 8022e4c:	60000100 	.word	0x60000100
 8022e50:	60000600 	.word	0x60000600
 8022e54:	60000500 	.word	0x60000500
 8022e58:	58020400 	.word	0x58020400

08022e5c <CMDGetCPLDVersion>:
* Out:      Current CPLD version
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetCPLDVersion(void)
{
 8022e5c:	b580      	push	{r7, lr}
 8022e5e:	b082      	sub	sp, #8
 8022e60:	af00      	add	r7, sp, #0
	BYTE	bCPLDVersion = RD_CPLDVER;
 8022e62:	2300      	movs	r3, #0
 8022e64:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&bCPLDVersion, sizeof(bCPLDVersion));
 8022e66:	1dfb      	adds	r3, r7, #7
 8022e68:	2101      	movs	r1, #1
 8022e6a:	4618      	mov	r0, r3
 8022e6c:	f7ff faf2 	bl	8022454 <MakeResponse>
}
 8022e70:	bf00      	nop
 8022e72:	3708      	adds	r7, #8
 8022e74:	46bd      	mov	sp, r7
 8022e76:	bd80      	pop	{r7, pc}

08022e78 <CMDGetDipSwitch>:
* Out:      Value of current dip switch 
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetDipSwitch(void)
{
 8022e78:	b580      	push	{r7, lr}
 8022e7a:	b082      	sub	sp, #8
 8022e7c:	af00      	add	r7, sp, #0
	BYTE dipSwitch = ReadDipSwitch();
 8022e7e:	4b07      	ldr	r3, [pc, #28]	; (8022e9c <CMDGetDipSwitch+0x24>)
 8022e80:	691b      	ldr	r3, [r3, #16]
 8022e82:	b2db      	uxtb	r3, r3
 8022e84:	43db      	mvns	r3, r3
 8022e86:	b2db      	uxtb	r3, r3
 8022e88:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&dipSwitch, sizeof(dipSwitch));
 8022e8a:	1dfb      	adds	r3, r7, #7
 8022e8c:	2101      	movs	r1, #1
 8022e8e:	4618      	mov	r0, r3
 8022e90:	f7ff fae0 	bl	8022454 <MakeResponse>
}
 8022e94:	bf00      	nop
 8022e96:	3708      	adds	r7, #8
 8022e98:	46bd      	mov	sp, r7
 8022e9a:	bd80      	pop	{r7, pc}
 8022e9c:	58020400 	.word	0x58020400

08022ea0 <CMDSetUPSCommand>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetUPSCommand(void)
{
 8022ea0:	b580      	push	{r7, lr}
 8022ea2:	b082      	sub	sp, #8
 8022ea4:	af00      	add	r7, sp, #0
	// Set UPS command
	BYTE bUPSCommand = GCUCommand.d.mbOptionData[0];
 8022ea6:	4b13      	ldr	r3, [pc, #76]	; (8022ef4 <CMDSetUPSCommand+0x54>)
 8022ea8:	791b      	ldrb	r3, [r3, #4]
 8022eaa:	71fb      	strb	r3, [r7, #7]


	printf("Send Command \n");
 8022eac:	4812      	ldr	r0, [pc, #72]	; (8022ef8 <CMDSetUPSCommand+0x58>)
 8022eae:	f006 fcd1 	bl	8029854 <printf_>
	printf("%x \n", GCUCommand.d.mbOptionData[0]);
 8022eb2:	4b10      	ldr	r3, [pc, #64]	; (8022ef4 <CMDSetUPSCommand+0x54>)
 8022eb4:	791b      	ldrb	r3, [r3, #4]
 8022eb6:	4619      	mov	r1, r3
 8022eb8:	4810      	ldr	r0, [pc, #64]	; (8022efc <CMDSetUPSCommand+0x5c>)
 8022eba:	f006 fccb 	bl	8029854 <printf_>

	//PRINTL("Send Command\n");
	//PRINTL("%x", GCUCommand.d.mbOptionData[0]);
	//PRINTL("\n");

	if(bUPSCommand == UPS_CMD_PWR_DN)			//check temp code	20231026
 8022ebe:	79fb      	ldrb	r3, [r7, #7]
 8022ec0:	2b02      	cmp	r3, #2
 8022ec2:	d109      	bne.n	8022ed8 <CMDSetUPSCommand+0x38>
		ReverseControlUPS(bUPSCommand);			//chk active low
 8022ec4:	79fb      	ldrb	r3, [r7, #7]
 8022ec6:	b29b      	uxth	r3, r3
 8022ec8:	019b      	lsls	r3, r3, #6
 8022eca:	b29b      	uxth	r3, r3
 8022ecc:	2200      	movs	r2, #0
 8022ece:	4619      	mov	r1, r3
 8022ed0:	480b      	ldr	r0, [pc, #44]	; (8022f00 <CMDSetUPSCommand+0x60>)
 8022ed2:	f008 facb 	bl	802b46c <HAL_GPIO_WritePin>
	else
		ControlUPS(bUPSCommand);				//chk active high
}
 8022ed6:	e008      	b.n	8022eea <CMDSetUPSCommand+0x4a>
		ControlUPS(bUPSCommand);				//chk active high
 8022ed8:	79fb      	ldrb	r3, [r7, #7]
 8022eda:	b29b      	uxth	r3, r3
 8022edc:	019b      	lsls	r3, r3, #6
 8022ede:	b29b      	uxth	r3, r3
 8022ee0:	2201      	movs	r2, #1
 8022ee2:	4619      	mov	r1, r3
 8022ee4:	4806      	ldr	r0, [pc, #24]	; (8022f00 <CMDSetUPSCommand+0x60>)
 8022ee6:	f008 fac1 	bl	802b46c <HAL_GPIO_WritePin>
}
 8022eea:	bf00      	nop
 8022eec:	3708      	adds	r7, #8
 8022eee:	46bd      	mov	sp, r7
 8022ef0:	bd80      	pop	{r7, pc}
 8022ef2:	bf00      	nop
 8022ef4:	240002f4 	.word	0x240002f4
 8022ef8:	080324cc 	.word	0x080324cc
 8022efc:	080324dc 	.word	0x080324dc
 8022f00:	58021400 	.word	0x58021400

08022f04 <CMDGetUPSStatus>:
* Out:      Current UPS Status
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetUPSStatus(void)
{
 8022f04:	b580      	push	{r7, lr}
 8022f06:	b082      	sub	sp, #8
 8022f08:	af00      	add	r7, sp, #0
	BYTE bUPSStatus = 0x00;
 8022f0a:	2300      	movs	r3, #0
 8022f0c:	71fb      	strb	r3, [r7, #7]

	// Get UPS status
	bUPSStatus = RD_UPSSTAT;
 8022f0e:	2300      	movs	r3, #0
 8022f10:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&bUPSStatus, sizeof(bUPSStatus));
 8022f12:	1dfb      	adds	r3, r7, #7
 8022f14:	2101      	movs	r1, #1
 8022f16:	4618      	mov	r0, r3
 8022f18:	f7ff fa9c 	bl	8022454 <MakeResponse>
}
 8022f1c:	bf00      	nop
 8022f1e:	3708      	adds	r7, #8
 8022f20:	46bd      	mov	sp, r7
 8022f22:	bd80      	pop	{r7, pc}

08022f24 <CheckProtocol_UART3>:
* comments: It checks serial data from Host and protocol format of data received.
*           If the protocol format is correct, it returns SUCCESS result.
*******************************************************************************/

int CheckProtocol_UART3(void)
{
 8022f24:	b580      	push	{r7, lr}
 8022f26:	af00      	add	r7, sp, #0
	static BYTE bRcvState = STATE_STX_WAIT;
	static BYTE bBCC;
	static BYTE bRcvData;

	while (IUart_RecvByte_check(COM3, &bRcvData))
 8022f28:	e0d5      	b.n	80230d6 <CheckProtocol_UART3+0x1b2>
	{
		// printf("RecvByte CheckProtocol_UART3 : %d[%02X]\n", bRcvData, bRcvData);
		if (bRcvState == STATE_DATA_BCC)
 8022f2a:	4b70      	ldr	r3, [pc, #448]	; (80230ec <CheckProtocol_UART3+0x1c8>)
 8022f2c:	781b      	ldrb	r3, [r3, #0]
 8022f2e:	2b02      	cmp	r3, #2
 8022f30:	d138      	bne.n	8022fa4 <CheckProtocol_UART3+0x80>
		{
			bRcvState = STATE_STX_WAIT;
 8022f32:	4b6e      	ldr	r3, [pc, #440]	; (80230ec <CheckProtocol_UART3+0x1c8>)
 8022f34:	2200      	movs	r2, #0
 8022f36:	701a      	strb	r2, [r3, #0]

			if (bBCC == bRcvData)
 8022f38:	4b6d      	ldr	r3, [pc, #436]	; (80230f0 <CheckProtocol_UART3+0x1cc>)
 8022f3a:	781a      	ldrb	r2, [r3, #0]
 8022f3c:	4b6d      	ldr	r3, [pc, #436]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 8022f3e:	781b      	ldrb	r3, [r3, #0]
 8022f40:	429a      	cmp	r2, r3
 8022f42:	d119      	bne.n	8022f78 <CheckProtocol_UART3+0x54>
			{
				if (GCUCommand.d.bDataLen != (BYTE)(gnFrameLen - FRAME_HEADER_LEN))
 8022f44:	4b6c      	ldr	r3, [pc, #432]	; (80230f8 <CheckProtocol_UART3+0x1d4>)
 8022f46:	789a      	ldrb	r2, [r3, #2]
 8022f48:	4b6c      	ldr	r3, [pc, #432]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 8022f4a:	681b      	ldr	r3, [r3, #0]
 8022f4c:	b2db      	uxtb	r3, r3
 8022f4e:	3b03      	subs	r3, #3
 8022f50:	b2db      	uxtb	r3, r3
 8022f52:	429a      	cmp	r2, r3
 8022f54:	d00e      	beq.n	8022f74 <CheckProtocol_UART3+0x50>
				{
					//PRINTL("LENGTH ERR: %d - %d", GCUCommand.d.bDataLen, (gnFrameLen - FRAME_HEADER_LEN));
					printf("LENGTH ERR: %d - %d \n", GCUCommand.d.bDataLen, (gnFrameLen - FRAME_HEADER_LEN));
 8022f56:	4b68      	ldr	r3, [pc, #416]	; (80230f8 <CheckProtocol_UART3+0x1d4>)
 8022f58:	789b      	ldrb	r3, [r3, #2]
 8022f5a:	4619      	mov	r1, r3
 8022f5c:	4b67      	ldr	r3, [pc, #412]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 8022f5e:	681b      	ldr	r3, [r3, #0]
 8022f60:	3b03      	subs	r3, #3
 8022f62:	461a      	mov	r2, r3
 8022f64:	4866      	ldr	r0, [pc, #408]	; (8023100 <CheckProtocol_UART3+0x1dc>)
 8022f66:	f006 fc75 	bl	8029854 <printf_>
					gnFrameLen = 0;
 8022f6a:	4b64      	ldr	r3, [pc, #400]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 8022f6c:	2200      	movs	r2, #0
 8022f6e:	601a      	str	r2, [r3, #0]
					return ERR_WRONG_CMD_LEN;
 8022f70:	230a      	movs	r3, #10
 8022f72:	e0b9      	b.n	80230e8 <CheckProtocol_UART3+0x1c4>
				}
				else
					return SUCCESS;
 8022f74:	2300      	movs	r3, #0
 8022f76:	e0b7      	b.n	80230e8 <CheckProtocol_UART3+0x1c4>
			}
			else
			{
				//PRINT("len: %d, BCC: %d, rcv: %d", gnFrameLen, bBCC, bRcvData);

				printf("len: %d, BCC: %d, rcv: %d \n", gnFrameLen, bBCC, bRcvData);
 8022f78:	4b60      	ldr	r3, [pc, #384]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 8022f7a:	6819      	ldr	r1, [r3, #0]
 8022f7c:	4b5c      	ldr	r3, [pc, #368]	; (80230f0 <CheckProtocol_UART3+0x1cc>)
 8022f7e:	781b      	ldrb	r3, [r3, #0]
 8022f80:	461a      	mov	r2, r3
 8022f82:	4b5c      	ldr	r3, [pc, #368]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 8022f84:	781b      	ldrb	r3, [r3, #0]
 8022f86:	485f      	ldr	r0, [pc, #380]	; (8023104 <CheckProtocol_UART3+0x1e0>)
 8022f88:	f006 fc64 	bl	8029854 <printf_>
				Print2Hex("", GCUCommand.Buff, gnFrameLen);
 8022f8c:	4b5b      	ldr	r3, [pc, #364]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 8022f8e:	681b      	ldr	r3, [r3, #0]
 8022f90:	461a      	mov	r2, r3
 8022f92:	4959      	ldr	r1, [pc, #356]	; (80230f8 <CheckProtocol_UART3+0x1d4>)
 8022f94:	485c      	ldr	r0, [pc, #368]	; (8023108 <CheckProtocol_UART3+0x1e4>)
 8022f96:	f00d fd19 	bl	80309cc <Print2Hex>
				gnFrameLen = 0;
 8022f9a:	4b58      	ldr	r3, [pc, #352]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 8022f9c:	2200      	movs	r2, #0
 8022f9e:	601a      	str	r2, [r3, #0]
				return ERR_BCC;
 8022fa0:	2305      	movs	r3, #5
 8022fa2:	e0a1      	b.n	80230e8 <CheckProtocol_UART3+0x1c4>
			}
		}
		else
		{
			switch (bRcvData)
 8022fa4:	4b53      	ldr	r3, [pc, #332]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 8022fa6:	781b      	ldrb	r3, [r3, #0]
 8022fa8:	2b10      	cmp	r3, #16
 8022faa:	d01d      	beq.n	8022fe8 <CheckProtocol_UART3+0xc4>
 8022fac:	2b10      	cmp	r3, #16
 8022fae:	dc2b      	bgt.n	8023008 <CheckProtocol_UART3+0xe4>
 8022fb0:	2b02      	cmp	r3, #2
 8022fb2:	d002      	beq.n	8022fba <CheckProtocol_UART3+0x96>
 8022fb4:	2b03      	cmp	r3, #3
 8022fb6:	d00b      	beq.n	8022fd0 <CheckProtocol_UART3+0xac>
 8022fb8:	e026      	b.n	8023008 <CheckProtocol_UART3+0xe4>
			{
			case STX:
				bRcvState = STATE_DATA_RCV;
 8022fba:	4b4c      	ldr	r3, [pc, #304]	; (80230ec <CheckProtocol_UART3+0x1c8>)
 8022fbc:	2201      	movs	r2, #1
 8022fbe:	701a      	strb	r2, [r3, #0]
				bBCC = bRcvData;
 8022fc0:	4b4c      	ldr	r3, [pc, #304]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 8022fc2:	781a      	ldrb	r2, [r3, #0]
 8022fc4:	4b4a      	ldr	r3, [pc, #296]	; (80230f0 <CheckProtocol_UART3+0x1cc>)
 8022fc6:	701a      	strb	r2, [r3, #0]
				gnFrameLen = 0;
 8022fc8:	4b4c      	ldr	r3, [pc, #304]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 8022fca:	2200      	movs	r2, #0
 8022fcc:	601a      	str	r2, [r3, #0]
				break;
 8022fce:	e073      	b.n	80230b8 <CheckProtocol_UART3+0x194>
			case ETX:
				bRcvState = STATE_DATA_BCC;
 8022fd0:	4b46      	ldr	r3, [pc, #280]	; (80230ec <CheckProtocol_UART3+0x1c8>)
 8022fd2:	2202      	movs	r2, #2
 8022fd4:	701a      	strb	r2, [r3, #0]
				bBCC ^= bRcvData;
 8022fd6:	4b46      	ldr	r3, [pc, #280]	; (80230f0 <CheckProtocol_UART3+0x1cc>)
 8022fd8:	781a      	ldrb	r2, [r3, #0]
 8022fda:	4b46      	ldr	r3, [pc, #280]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 8022fdc:	781b      	ldrb	r3, [r3, #0]
 8022fde:	4053      	eors	r3, r2
 8022fe0:	b2da      	uxtb	r2, r3
 8022fe2:	4b43      	ldr	r3, [pc, #268]	; (80230f0 <CheckProtocol_UART3+0x1cc>)
 8022fe4:	701a      	strb	r2, [r3, #0]
				break;
 8022fe6:	e067      	b.n	80230b8 <CheckProtocol_UART3+0x194>
			case DLE:
				if (bRcvState == STATE_DATA_RCV)
 8022fe8:	4b40      	ldr	r3, [pc, #256]	; (80230ec <CheckProtocol_UART3+0x1c8>)
 8022fea:	781b      	ldrb	r3, [r3, #0]
 8022fec:	2b01      	cmp	r3, #1
 8022fee:	d160      	bne.n	80230b2 <CheckProtocol_UART3+0x18e>
				{
					bRcvState = STATE_DATA_DLE;
 8022ff0:	4b3e      	ldr	r3, [pc, #248]	; (80230ec <CheckProtocol_UART3+0x1c8>)
 8022ff2:	2203      	movs	r2, #3
 8022ff4:	701a      	strb	r2, [r3, #0]
					bBCC ^= bRcvData;
 8022ff6:	4b3e      	ldr	r3, [pc, #248]	; (80230f0 <CheckProtocol_UART3+0x1cc>)
 8022ff8:	781a      	ldrb	r2, [r3, #0]
 8022ffa:	4b3e      	ldr	r3, [pc, #248]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 8022ffc:	781b      	ldrb	r3, [r3, #0]
 8022ffe:	4053      	eors	r3, r2
 8023000:	b2da      	uxtb	r2, r3
 8023002:	4b3b      	ldr	r3, [pc, #236]	; (80230f0 <CheckProtocol_UART3+0x1cc>)
 8023004:	701a      	strb	r2, [r3, #0]
				}
				break;
 8023006:	e054      	b.n	80230b2 <CheckProtocol_UART3+0x18e>
			default:
				if (bRcvState == STATE_DATA_RCV)
 8023008:	4b38      	ldr	r3, [pc, #224]	; (80230ec <CheckProtocol_UART3+0x1c8>)
 802300a:	781b      	ldrb	r3, [r3, #0]
 802300c:	2b01      	cmp	r3, #1
 802300e:	d111      	bne.n	8023034 <CheckProtocol_UART3+0x110>
				{
					GCUCommand.Buff[gnFrameLen++] = bRcvData;
 8023010:	4b3a      	ldr	r3, [pc, #232]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 8023012:	681b      	ldr	r3, [r3, #0]
 8023014:	1c5a      	adds	r2, r3, #1
 8023016:	4939      	ldr	r1, [pc, #228]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 8023018:	600a      	str	r2, [r1, #0]
 802301a:	4a36      	ldr	r2, [pc, #216]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 802301c:	7811      	ldrb	r1, [r2, #0]
 802301e:	4a36      	ldr	r2, [pc, #216]	; (80230f8 <CheckProtocol_UART3+0x1d4>)
 8023020:	54d1      	strb	r1, [r2, r3]
					bBCC ^= bRcvData;
 8023022:	4b33      	ldr	r3, [pc, #204]	; (80230f0 <CheckProtocol_UART3+0x1cc>)
 8023024:	781a      	ldrb	r2, [r3, #0]
 8023026:	4b33      	ldr	r3, [pc, #204]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 8023028:	781b      	ldrb	r3, [r3, #0]
 802302a:	4053      	eors	r3, r2
 802302c:	b2da      	uxtb	r2, r3
 802302e:	4b30      	ldr	r3, [pc, #192]	; (80230f0 <CheckProtocol_UART3+0x1cc>)
 8023030:	701a      	strb	r2, [r3, #0]
					if (bRcvData == ACK)
						return ACK_RECEIVED;
					else if (bRcvData == NAK)
						return NAK_RECEIVED;
				}
				break;
 8023032:	e040      	b.n	80230b6 <CheckProtocol_UART3+0x192>
				else if (bRcvState == STATE_DATA_DLE)
 8023034:	4b2d      	ldr	r3, [pc, #180]	; (80230ec <CheckProtocol_UART3+0x1c8>)
 8023036:	781b      	ldrb	r3, [r3, #0]
 8023038:	2b03      	cmp	r3, #3
 802303a:	d12e      	bne.n	802309a <CheckProtocol_UART3+0x176>
					if ((bRcvData == DLE_STX) || (bRcvData == DLE_ETX) || (bRcvData == DLE_DLE))
 802303c:	4b2d      	ldr	r3, [pc, #180]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 802303e:	781b      	ldrb	r3, [r3, #0]
 8023040:	2b42      	cmp	r3, #66	; 0x42
 8023042:	d007      	beq.n	8023054 <CheckProtocol_UART3+0x130>
 8023044:	4b2b      	ldr	r3, [pc, #172]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 8023046:	781b      	ldrb	r3, [r3, #0]
 8023048:	2b43      	cmp	r3, #67	; 0x43
 802304a:	d003      	beq.n	8023054 <CheckProtocol_UART3+0x130>
 802304c:	4b29      	ldr	r3, [pc, #164]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 802304e:	781b      	ldrb	r3, [r3, #0]
 8023050:	2b50      	cmp	r3, #80	; 0x50
 8023052:	d117      	bne.n	8023084 <CheckProtocol_UART3+0x160>
						bRcvState = STATE_DATA_RCV;
 8023054:	4b25      	ldr	r3, [pc, #148]	; (80230ec <CheckProtocol_UART3+0x1c8>)
 8023056:	2201      	movs	r2, #1
 8023058:	701a      	strb	r2, [r3, #0]
						GCUCommand.Buff[gnFrameLen++] = (bRcvData ^ DLE_OP);
 802305a:	4b26      	ldr	r3, [pc, #152]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 802305c:	781a      	ldrb	r2, [r3, #0]
 802305e:	4b27      	ldr	r3, [pc, #156]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 8023060:	681b      	ldr	r3, [r3, #0]
 8023062:	1c59      	adds	r1, r3, #1
 8023064:	4825      	ldr	r0, [pc, #148]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 8023066:	6001      	str	r1, [r0, #0]
 8023068:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 802306c:	b2d1      	uxtb	r1, r2
 802306e:	4a22      	ldr	r2, [pc, #136]	; (80230f8 <CheckProtocol_UART3+0x1d4>)
 8023070:	54d1      	strb	r1, [r2, r3]
						bBCC ^= bRcvData;
 8023072:	4b1f      	ldr	r3, [pc, #124]	; (80230f0 <CheckProtocol_UART3+0x1cc>)
 8023074:	781a      	ldrb	r2, [r3, #0]
 8023076:	4b1f      	ldr	r3, [pc, #124]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 8023078:	781b      	ldrb	r3, [r3, #0]
 802307a:	4053      	eors	r3, r2
 802307c:	b2da      	uxtb	r2, r3
 802307e:	4b1c      	ldr	r3, [pc, #112]	; (80230f0 <CheckProtocol_UART3+0x1cc>)
 8023080:	701a      	strb	r2, [r3, #0]
				break;
 8023082:	e018      	b.n	80230b6 <CheckProtocol_UART3+0x192>
						bRcvState = STATE_STX_WAIT;
 8023084:	4b19      	ldr	r3, [pc, #100]	; (80230ec <CheckProtocol_UART3+0x1c8>)
 8023086:	2200      	movs	r2, #0
 8023088:	701a      	strb	r2, [r3, #0]
						gnFrameLen = 0;
 802308a:	4b1c      	ldr	r3, [pc, #112]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 802308c:	2200      	movs	r2, #0
 802308e:	601a      	str	r2, [r3, #0]
						printf("ERR_DLE_PROCESS \n");
 8023090:	481e      	ldr	r0, [pc, #120]	; (802310c <CheckProtocol_UART3+0x1e8>)
 8023092:	f006 fbdf 	bl	8029854 <printf_>
						return ERR_DLE_PROCESS;
 8023096:	230d      	movs	r3, #13
 8023098:	e026      	b.n	80230e8 <CheckProtocol_UART3+0x1c4>
					if (bRcvData == ACK)
 802309a:	4b16      	ldr	r3, [pc, #88]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 802309c:	781b      	ldrb	r3, [r3, #0]
 802309e:	2b06      	cmp	r3, #6
 80230a0:	d101      	bne.n	80230a6 <CheckProtocol_UART3+0x182>
						return ACK_RECEIVED;
 80230a2:	2306      	movs	r3, #6
 80230a4:	e020      	b.n	80230e8 <CheckProtocol_UART3+0x1c4>
					else if (bRcvData == NAK)
 80230a6:	4b13      	ldr	r3, [pc, #76]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 80230a8:	781b      	ldrb	r3, [r3, #0]
 80230aa:	2b15      	cmp	r3, #21
 80230ac:	d103      	bne.n	80230b6 <CheckProtocol_UART3+0x192>
						return NAK_RECEIVED;
 80230ae:	2307      	movs	r3, #7
 80230b0:	e01a      	b.n	80230e8 <CheckProtocol_UART3+0x1c4>
				break;
 80230b2:	bf00      	nop
 80230b4:	e000      	b.n	80230b8 <CheckProtocol_UART3+0x194>
				break;
 80230b6:	bf00      	nop
			}
		}

		if (gnFrameLen >= FRAME_LEN_RET)
 80230b8:	4b10      	ldr	r3, [pc, #64]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 80230ba:	681b      	ldr	r3, [r3, #0]
 80230bc:	2b7f      	cmp	r3, #127	; 0x7f
 80230be:	dd0a      	ble.n	80230d6 <CheckProtocol_UART3+0x1b2>
		{
			bRcvState = STATE_STX_WAIT;
 80230c0:	4b0a      	ldr	r3, [pc, #40]	; (80230ec <CheckProtocol_UART3+0x1c8>)
 80230c2:	2200      	movs	r2, #0
 80230c4:	701a      	strb	r2, [r3, #0]
			gnFrameLen = 0;
 80230c6:	4b0d      	ldr	r3, [pc, #52]	; (80230fc <CheckProtocol_UART3+0x1d8>)
 80230c8:	2200      	movs	r2, #0
 80230ca:	601a      	str	r2, [r3, #0]
			//PRINTL("ERR_FRAME_LENGTH");
			printf("ERR_FRAME_LENGTH \n");
 80230cc:	4810      	ldr	r0, [pc, #64]	; (8023110 <CheckProtocol_UART3+0x1ec>)
 80230ce:	f006 fbc1 	bl	8029854 <printf_>
			return ERR_FRAME_LENGTH;
 80230d2:	230c      	movs	r3, #12
 80230d4:	e008      	b.n	80230e8 <CheckProtocol_UART3+0x1c4>
	while (IUart_RecvByte_check(COM3, &bRcvData))
 80230d6:	4907      	ldr	r1, [pc, #28]	; (80230f4 <CheckProtocol_UART3+0x1d0>)
 80230d8:	2002      	movs	r0, #2
 80230da:	f002 ff15 	bl	8025f08 <IUart_RecvByte_check>
 80230de:	4603      	mov	r3, r0
 80230e0:	2b00      	cmp	r3, #0
 80230e2:	f47f af22 	bne.w	8022f2a <CheckProtocol_UART3+0x6>
		}
	}

	return ERR_NO_DATA;
 80230e6:	23ff      	movs	r3, #255	; 0xff
}
 80230e8:	4618      	mov	r0, r3
 80230ea:	bd80      	pop	{r7, pc}
 80230ec:	2400047c 	.word	0x2400047c
 80230f0:	2400047d 	.word	0x2400047d
 80230f4:	2400047e 	.word	0x2400047e
 80230f8:	240002f4 	.word	0x240002f4
 80230fc:	24000374 	.word	0x24000374
 8023100:	080324e4 	.word	0x080324e4
 8023104:	080324fc 	.word	0x080324fc
 8023108:	08032518 	.word	0x08032518
 802310c:	0803251c 	.word	0x0803251c
 8023110:	08032530 	.word	0x08032530

08023114 <ProcessCommand>:
*			- ERR_ILLEGAL_CMD  : command code is not defined
* comments: It checks serial data from Host and protocol format of data received.
*           If the protocol format is correct, it returns SUCCESS result.
*******************************************************************************/
int ProcessCommand(void)
{
 8023114:	b580      	push	{r7, lr}
 8023116:	af00      	add	r7, sp, #0
#if _CMD_DUMP_
	PRINT("\nCMD %02X PROC", GCUCommand.d.bCmdCode);
	Print2Hex("", GCUCommand.Buff, GCUCommand.d.bDataLen+FRAME_HEADER_LEN);
#endif	//DBG_PRINT

	if (GCUCommand.d.bMainSeq == gbLastMainSeq)	// Same main sequence
 8023118:	4baa      	ldr	r3, [pc, #680]	; (80233c4 <ProcessCommand+0x2b0>)
 802311a:	781a      	ldrb	r2, [r3, #0]
 802311c:	4baa      	ldr	r3, [pc, #680]	; (80233c8 <ProcessCommand+0x2b4>)
 802311e:	781b      	ldrb	r3, [r3, #0]
 8023120:	429a      	cmp	r2, r3
 8023122:	d12a      	bne.n	802317a <ProcessCommand+0x66>
	{
		if (GCUCommand.d.bCmdCode == GCUResponse.d.bCmdCode)	// command code is same with that of the last response
 8023124:	4ba7      	ldr	r3, [pc, #668]	; (80233c4 <ProcessCommand+0x2b0>)
 8023126:	78da      	ldrb	r2, [r3, #3]
 8023128:	4ba8      	ldr	r3, [pc, #672]	; (80233cc <ProcessCommand+0x2b8>)
 802312a:	78db      	ldrb	r3, [r3, #3]
 802312c:	429a      	cmp	r2, r3
 802312e:	d101      	bne.n	8023134 <ProcessCommand+0x20>
			return ERR_OLD_SEQUENCE;
 8023130:	2308      	movs	r3, #8
 8023132:	e145      	b.n	80233c0 <ProcessCommand+0x2ac>
		else if (GCUCommand.d.bCmdCode == gbLastHostCMD)		// command code is same with last host command code
 8023134:	4ba3      	ldr	r3, [pc, #652]	; (80233c4 <ProcessCommand+0x2b0>)
 8023136:	78da      	ldrb	r2, [r3, #3]
 8023138:	4ba5      	ldr	r3, [pc, #660]	; (80233d0 <ProcessCommand+0x2bc>)
 802313a:	781b      	ldrb	r3, [r3, #0]
 802313c:	429a      	cmp	r2, r3
 802313e:	d11c      	bne.n	802317a <ProcessCommand+0x66>
		{
			if (!IsCommandNeedResponse(GCUCommand.d.bCmdCode))
 8023140:	4ba0      	ldr	r3, [pc, #640]	; (80233c4 <ProcessCommand+0x2b0>)
 8023142:	78db      	ldrb	r3, [r3, #3]
 8023144:	4618      	mov	r0, r3
 8023146:	f7ff f95d 	bl	8022404 <IsCommandNeedResponse>
 802314a:	4603      	mov	r3, r0
 802314c:	f083 0301 	eor.w	r3, r3, #1
 8023150:	b2db      	uxtb	r3, r3
 8023152:	2b00      	cmp	r3, #0
 8023154:	d001      	beq.n	802315a <ProcessCommand+0x46>
			{
				return ERR_OLD_SEQ_NO_RESPONSE;
 8023156:	2309      	movs	r3, #9
 8023158:	e132      	b.n	80233c0 <ProcessCommand+0x2ac>
			}
			else if (GCUCommand.d.bCmdCode == LastHostCMDResponse.d.bCmdCode)
 802315a:	4b9a      	ldr	r3, [pc, #616]	; (80233c4 <ProcessCommand+0x2b0>)
 802315c:	78da      	ldrb	r2, [r3, #3]
 802315e:	4b9d      	ldr	r3, [pc, #628]	; (80233d4 <ProcessCommand+0x2c0>)
 8023160:	78db      	ldrb	r3, [r3, #3]
 8023162:	429a      	cmp	r2, r3
 8023164:	d109      	bne.n	802317a <ProcessCommand+0x66>
			{// command code is same with that of the stored response for the last host command.
				memcpy(&GCUResponse, &LastHostCMDResponse, (LastHostCMDResponse.d.bDataLen+FRAME_HEADER_LEN));
 8023166:	4b9b      	ldr	r3, [pc, #620]	; (80233d4 <ProcessCommand+0x2c0>)
 8023168:	789b      	ldrb	r3, [r3, #2]
 802316a:	3303      	adds	r3, #3
 802316c:	461a      	mov	r2, r3
 802316e:	4999      	ldr	r1, [pc, #612]	; (80233d4 <ProcessCommand+0x2c0>)
 8023170:	4896      	ldr	r0, [pc, #600]	; (80233cc <ProcessCommand+0x2b8>)
 8023172:	f00d fceb 	bl	8030b4c <memcpy>
				return ERR_OLD_SEQUENCE;
 8023176:	2308      	movs	r3, #8
 8023178:	e122      	b.n	80233c0 <ProcessCommand+0x2ac>
			}
		}
		// except above case, process the command from Host 
	}
	
	SendACK();
 802317a:	f7ff f935 	bl	80223e8 <SendACK>

	gbLastHostCMD = GCUCommand.d.bCmdCode;
 802317e:	4b91      	ldr	r3, [pc, #580]	; (80233c4 <ProcessCommand+0x2b0>)
 8023180:	78da      	ldrb	r2, [r3, #3]
 8023182:	4b93      	ldr	r3, [pc, #588]	; (80233d0 <ProcessCommand+0x2bc>)
 8023184:	701a      	strb	r2, [r3, #0]

	switch (GCUCommand.d.bCmdCode)	// command
 8023186:	4b8f      	ldr	r3, [pc, #572]	; (80233c4 <ProcessCommand+0x2b0>)
 8023188:	78db      	ldrb	r3, [r3, #3]
 802318a:	3b30      	subs	r3, #48	; 0x30
 802318c:	2b65      	cmp	r3, #101	; 0x65
 802318e:	f200 8114 	bhi.w	80233ba <ProcessCommand+0x2a6>
 8023192:	a201      	add	r2, pc, #4	; (adr r2, 8023198 <ProcessCommand+0x84>)
 8023194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023198:	08023331 	.word	0x08023331
 802319c:	08023337 	.word	0x08023337
 80231a0:	0802333d 	.word	0x0802333d
 80231a4:	08023343 	.word	0x08023343
 80231a8:	08023349 	.word	0x08023349
 80231ac:	0802334f 	.word	0x0802334f
 80231b0:	080233bb 	.word	0x080233bb
 80231b4:	080233bb 	.word	0x080233bb
 80231b8:	08023355 	.word	0x08023355
 80231bc:	080233bb 	.word	0x080233bb
 80231c0:	080233bb 	.word	0x080233bb
 80231c4:	080233bb 	.word	0x080233bb
 80231c8:	080233bb 	.word	0x080233bb
 80231cc:	080233bb 	.word	0x080233bb
 80231d0:	080233bb 	.word	0x080233bb
 80231d4:	080233bb 	.word	0x080233bb
 80231d8:	0802335b 	.word	0x0802335b
 80231dc:	08023361 	.word	0x08023361
 80231e0:	08023367 	.word	0x08023367
 80231e4:	080233bb 	.word	0x080233bb
 80231e8:	080233bb 	.word	0x080233bb
 80231ec:	080233bb 	.word	0x080233bb
 80231f0:	080233bb 	.word	0x080233bb
 80231f4:	080233bb 	.word	0x080233bb
 80231f8:	0802336d 	.word	0x0802336d
 80231fc:	080233bb 	.word	0x080233bb
 8023200:	080233bb 	.word	0x080233bb
 8023204:	080233bb 	.word	0x080233bb
 8023208:	080233bb 	.word	0x080233bb
 802320c:	080233bb 	.word	0x080233bb
 8023210:	080233bb 	.word	0x080233bb
 8023214:	080233bb 	.word	0x080233bb
 8023218:	080233bb 	.word	0x080233bb
 802321c:	080233bb 	.word	0x080233bb
 8023220:	080233bb 	.word	0x080233bb
 8023224:	080233bb 	.word	0x080233bb
 8023228:	080233bb 	.word	0x080233bb
 802322c:	080233bb 	.word	0x080233bb
 8023230:	080233bb 	.word	0x080233bb
 8023234:	080233bb 	.word	0x080233bb
 8023238:	080233bb 	.word	0x080233bb
 802323c:	080233bb 	.word	0x080233bb
 8023240:	080233bb 	.word	0x080233bb
 8023244:	080233bb 	.word	0x080233bb
 8023248:	080233bb 	.word	0x080233bb
 802324c:	080233bb 	.word	0x080233bb
 8023250:	080233bb 	.word	0x080233bb
 8023254:	080233bb 	.word	0x080233bb
 8023258:	08023373 	.word	0x08023373
 802325c:	08023379 	.word	0x08023379
 8023260:	0802337f 	.word	0x0802337f
 8023264:	08023385 	.word	0x08023385
 8023268:	0802338b 	.word	0x0802338b
 802326c:	08023391 	.word	0x08023391
 8023270:	080233bb 	.word	0x080233bb
 8023274:	080233bb 	.word	0x080233bb
 8023278:	080233bb 	.word	0x080233bb
 802327c:	080233bb 	.word	0x080233bb
 8023280:	080233bb 	.word	0x080233bb
 8023284:	080233bb 	.word	0x080233bb
 8023288:	080233bb 	.word	0x080233bb
 802328c:	080233bb 	.word	0x080233bb
 8023290:	080233bb 	.word	0x080233bb
 8023294:	080233bb 	.word	0x080233bb
 8023298:	080233bb 	.word	0x080233bb
 802329c:	080233bb 	.word	0x080233bb
 80232a0:	080233bb 	.word	0x080233bb
 80232a4:	080233bb 	.word	0x080233bb
 80232a8:	080233bb 	.word	0x080233bb
 80232ac:	080233bb 	.word	0x080233bb
 80232b0:	080233bb 	.word	0x080233bb
 80232b4:	080233bb 	.word	0x080233bb
 80232b8:	080233bb 	.word	0x080233bb
 80232bc:	080233bb 	.word	0x080233bb
 80232c0:	080233bb 	.word	0x080233bb
 80232c4:	080233bb 	.word	0x080233bb
 80232c8:	080233bb 	.word	0x080233bb
 80232cc:	080233bb 	.word	0x080233bb
 80232d0:	080233bb 	.word	0x080233bb
 80232d4:	080233bb 	.word	0x080233bb
 80232d8:	080233bb 	.word	0x080233bb
 80232dc:	080233bb 	.word	0x080233bb
 80232e0:	080233bb 	.word	0x080233bb
 80232e4:	080233bb 	.word	0x080233bb
 80232e8:	080233bb 	.word	0x080233bb
 80232ec:	080233bb 	.word	0x080233bb
 80232f0:	080233bb 	.word	0x080233bb
 80232f4:	080233bb 	.word	0x080233bb
 80232f8:	080233bb 	.word	0x080233bb
 80232fc:	080233bb 	.word	0x080233bb
 8023300:	080233bb 	.word	0x080233bb
 8023304:	080233bb 	.word	0x080233bb
 8023308:	080233bb 	.word	0x080233bb
 802330c:	080233bb 	.word	0x080233bb
 8023310:	080233bb 	.word	0x080233bb
 8023314:	080233bb 	.word	0x080233bb
 8023318:	08023397 	.word	0x08023397
 802331c:	0802339d 	.word	0x0802339d
 8023320:	080233a3 	.word	0x080233a3
 8023324:	080233a9 	.word	0x080233a9
 8023328:	080233af 	.word	0x080233af
 802332c:	080233b5 	.word	0x080233b5
	{
	case CMD_SET_MODE:			CMDSetGCUOpMode();		break;
 8023330:	f7ff f91e 	bl	8022570 <CMDSetGCUOpMode>
 8023334:	e043      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_GET_MODE:			CMDGetGCUOpMode();		break;
 8023336:	f7ff f929 	bl	802258c <CMDGetGCUOpMode>
 802333a:	e040      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_SET_PARAMETER:		CMDSetGCUParameter();	break;
 802333c:	f7ff f936 	bl	80225ac <CMDSetGCUParameter>
 8023340:	e03d      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_GET_PARAMETER:		CMDGetGCUParameter();	break;
 8023342:	f7ff f94f 	bl	80225e4 <CMDGetGCUParameter>
 8023346:	e03a      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_GET_VERSION:		CMDGetVersion();		break;
 8023348:	f7ff f960 	bl	802260c <CMDGetVersion>
 802334c:	e037      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_SET_BAUD:			CMDSetBaudRate();		break;
 802334e:	f7ff f96b 	bl	8022628 <CMDSetBaudRate>
 8023352:	e034      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_SW_RESET:			CMDResetGCU();			break;
 8023354:	f7ff f9c0 	bl	80226d8 <CMDResetGCU>
 8023358:	e031      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_AUTHORIZE:			CMDAuthorizePass();		break;
 802335a:	f7ff f9d5 	bl	8022708 <CMDAuthorizePass>
 802335e:	e02e      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_CLEAR_AUTH:		CMDClearAuthorization();break;
 8023360:	f7ff fa2c 	bl	80227bc <CMDClearAuthorization>
 8023364:	e02b      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_GET_STATUS:		CMDGetStatus();			break;
 8023366:	f7ff fa3b 	bl	80227e0 <CMDGetStatus>
 802336a:	e028      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_GET_SENSOR_SWITCH:	CMDGetSensorSwitch();	break;
 802336c:	f7ff fa48 	bl	8022800 <CMDGetSensorSwitch>
 8023370:	e025      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_CONTROL_ALL:		CMDControlAllLED();		break;
 8023372:	f7ff fa4d 	bl	8022810 <CMDControlAllLED>
 8023376:	e022      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_CONTROL_DOOR:		CMDControlFlapDoor();	break;
 8023378:	f7ff fa7a 	bl	8022870 <CMDControlFlapDoor>
 802337c:	e01f      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_CONTROL_LAMP:		CMDControlLamp();		break;
 802337e:	f7ff fa97 	bl	80228b0 <CMDControlLamp>
 8023382:	e01c      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_CONTROL_INDICATOR:	CMDControlIndicator();	break;
 8023384:	f7ff fa80 	bl	8022888 <CMDControlIndicator>
 8023388:	e019      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_CONTROL_BUZZER:	CMDControlBuzzer();		break;
 802338a:	f7ff faa5 	bl	80228d8 <CMDControlBuzzer>
 802338e:	e016      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_SAFETY_STOP:		CMDSafetyStop();		break;
 8023390:	f7ff fae6 	bl	8022960 <CMDSafetyStop>
 8023394:	e013      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_WRITE_REGISTER:	CMDWriteRegister();		break;
 8023396:	f7ff fafb 	bl	8022990 <CMDWriteRegister>
 802339a:	e010      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_READ_REGISTER:		CMDReadRegister();		break;
 802339c:	f7ff fccc 	bl	8022d38 <CMDReadRegister>
 80233a0:	e00d      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_GET_CPLD_VERSION:	CMDGetCPLDVersion();	break;
 80233a2:	f7ff fd5b 	bl	8022e5c <CMDGetCPLDVersion>
 80233a6:	e00a      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_GET_DIP_SWITCH:	CMDGetDipSwitch();		break;
 80233a8:	f7ff fd66 	bl	8022e78 <CMDGetDipSwitch>
 80233ac:	e007      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_SET_UPS_COMMAND:	CMDSetUPSCommand();		break;
 80233ae:	f7ff fd77 	bl	8022ea0 <CMDSetUPSCommand>
 80233b2:	e004      	b.n	80233be <ProcessCommand+0x2aa>
	case CMD_GET_UPS_STATUS:	CMDGetUPSStatus();		break;
 80233b4:	f7ff fda6 	bl	8022f04 <CMDGetUPSStatus>
 80233b8:	e001      	b.n	80233be <ProcessCommand+0x2aa>
	default:
		return ERR_ILLEGAL_CMD;
 80233ba:	230b      	movs	r3, #11
 80233bc:	e000      	b.n	80233c0 <ProcessCommand+0x2ac>
	}

	return SUCCESS;
 80233be:	2300      	movs	r3, #0
}
 80233c0:	4618      	mov	r0, r3
 80233c2:	bd80      	pop	{r7, pc}
 80233c4:	240002f4 	.word	0x240002f4
 80233c8:	24000478 	.word	0x24000478
 80233cc:	24000378 	.word	0x24000378
 80233d0:	24000479 	.word	0x24000479
 80233d4:	240003f8 	.word	0x240003f8

080233d8 <ProcessComm_ECU>:
 * comments: it checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it makes action refer to the command
 *           from Host.
 *******************************************************************************/
void ProcessComm_ECU(void)
{
 80233d8:	b580      	push	{r7, lr}
 80233da:	b082      	sub	sp, #8
 80233dc:	af00      	add	r7, sp, #0
	int nError = CheckProtocol_UART3();
 80233de:	f7ff fda1 	bl	8022f24 <CheckProtocol_UART3>
 80233e2:	6078      	str	r0, [r7, #4]
	if (nError == SUCCESS)
 80233e4:	687b      	ldr	r3, [r7, #4]
 80233e6:	2b00      	cmp	r3, #0
 80233e8:	d124      	bne.n	8023434 <ProcessComm_ECU+0x5c>
	{
		nError = ProcessCommand();
 80233ea:	f7ff fe93 	bl	8023114 <ProcessCommand>
 80233ee:	6078      	str	r0, [r7, #4]
		if (nError == SUCCESS)
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	d112      	bne.n	802341c <ProcessComm_ECU+0x44>
		{
			// if (GCUCommand.d.bCmdCode != CMD_SET_BAUD)
			if (IsCommandNeedResponse(GCUCommand.d.bCmdCode))
 80233f6:	4b1a      	ldr	r3, [pc, #104]	; (8023460 <ProcessComm_ECU+0x88>)
 80233f8:	78db      	ldrb	r3, [r3, #3]
 80233fa:	4618      	mov	r0, r3
 80233fc:	f7ff f802 	bl	8022404 <IsCommandNeedResponse>
 8023400:	4603      	mov	r3, r0
 8023402:	2b00      	cmp	r3, #0
 8023404:	d027      	beq.n	8023456 <ProcessComm_ECU+0x7e>
			{
				SendResponse();
 8023406:	f7ff f859 	bl	80224bc <SendResponse>
				memcpy(&LastHostCMDResponse, &GCUResponse, (GCUResponse.d.bDataLen + FRAME_HEADER_LEN));
 802340a:	4b16      	ldr	r3, [pc, #88]	; (8023464 <ProcessComm_ECU+0x8c>)
 802340c:	789b      	ldrb	r3, [r3, #2]
 802340e:	3303      	adds	r3, #3
 8023410:	461a      	mov	r2, r3
 8023412:	4914      	ldr	r1, [pc, #80]	; (8023464 <ProcessComm_ECU+0x8c>)
 8023414:	4814      	ldr	r0, [pc, #80]	; (8023468 <ProcessComm_ECU+0x90>)
 8023416:	f00d fb99 	bl	8030b4c <memcpy>
		if ((nError == ERR_BCC) || (nError == ERR_WRONG_CMD_LEN) || (nError == ERR_DLE_PROCESS))
			SendNAK();
		else if (nError == NAK_RECEIVED)
			SendResponse();
	}
}
 802341a:	e01c      	b.n	8023456 <ProcessComm_ECU+0x7e>
		else if (nError == ERR_OLD_SEQUENCE)
 802341c:	687b      	ldr	r3, [r7, #4]
 802341e:	2b08      	cmp	r3, #8
 8023420:	d102      	bne.n	8023428 <ProcessComm_ECU+0x50>
			SendResponse();
 8023422:	f7ff f84b 	bl	80224bc <SendResponse>
}
 8023426:	e016      	b.n	8023456 <ProcessComm_ECU+0x7e>
		else if (nError == ERR_ILLEGAL_CMD)
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	2b0b      	cmp	r3, #11
 802342c:	d113      	bne.n	8023456 <ProcessComm_ECU+0x7e>
			SendNAK();
 802342e:	f7fe ffe2 	bl	80223f6 <SendNAK>
}
 8023432:	e010      	b.n	8023456 <ProcessComm_ECU+0x7e>
		if ((nError == ERR_BCC) || (nError == ERR_WRONG_CMD_LEN) || (nError == ERR_DLE_PROCESS))
 8023434:	687b      	ldr	r3, [r7, #4]
 8023436:	2b05      	cmp	r3, #5
 8023438:	d005      	beq.n	8023446 <ProcessComm_ECU+0x6e>
 802343a:	687b      	ldr	r3, [r7, #4]
 802343c:	2b0a      	cmp	r3, #10
 802343e:	d002      	beq.n	8023446 <ProcessComm_ECU+0x6e>
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	2b0d      	cmp	r3, #13
 8023444:	d102      	bne.n	802344c <ProcessComm_ECU+0x74>
			SendNAK();
 8023446:	f7fe ffd6 	bl	80223f6 <SendNAK>
}
 802344a:	e004      	b.n	8023456 <ProcessComm_ECU+0x7e>
		else if (nError == NAK_RECEIVED)
 802344c:	687b      	ldr	r3, [r7, #4]
 802344e:	2b07      	cmp	r3, #7
 8023450:	d101      	bne.n	8023456 <ProcessComm_ECU+0x7e>
			SendResponse();
 8023452:	f7ff f833 	bl	80224bc <SendResponse>
}
 8023456:	bf00      	nop
 8023458:	3708      	adds	r7, #8
 802345a:	46bd      	mov	sp, r7
 802345c:	bd80      	pop	{r7, pc}
 802345e:	bf00      	nop
 8023460:	240002f4 	.word	0x240002f4
 8023464:	24000378 	.word	0x24000378
 8023468:	240003f8 	.word	0x240003f8

0802346c <CheckBarrierClosedStatus>:

/*******************************************************************************
 * Passenger Service Functions
 *******************************************************************************/
bool CheckBarrierClosedStatus()
{
 802346c:	b480      	push	{r7}
 802346e:	af00      	add	r7, sp, #0
	if (gbPowerFailFlag == FLG_OFF && gbEmergencyFlag == FLG_OFF && gfFreeMode == FALSE)
 8023470:	4b0b      	ldr	r3, [pc, #44]	; (80234a0 <CheckBarrierClosedStatus+0x34>)
 8023472:	781b      	ldrb	r3, [r3, #0]
 8023474:	2b00      	cmp	r3, #0
 8023476:	d10c      	bne.n	8023492 <CheckBarrierClosedStatus+0x26>
 8023478:	4b0a      	ldr	r3, [pc, #40]	; (80234a4 <CheckBarrierClosedStatus+0x38>)
 802347a:	781b      	ldrb	r3, [r3, #0]
 802347c:	2b00      	cmp	r3, #0
 802347e:	d108      	bne.n	8023492 <CheckBarrierClosedStatus+0x26>
 8023480:	4b09      	ldr	r3, [pc, #36]	; (80234a8 <CheckBarrierClosedStatus+0x3c>)
 8023482:	781b      	ldrb	r3, [r3, #0]
 8023484:	f083 0301 	eor.w	r3, r3, #1
 8023488:	b2db      	uxtb	r3, r3
 802348a:	2b00      	cmp	r3, #0
 802348c:	d001      	beq.n	8023492 <CheckBarrierClosedStatus+0x26>
	{
		return TRUE;
 802348e:	2301      	movs	r3, #1
 8023490:	e000      	b.n	8023494 <CheckBarrierClosedStatus+0x28>
	}
	else
	{
		return FALSE;
 8023492:	2300      	movs	r3, #0
	}
}
 8023494:	4618      	mov	r0, r3
 8023496:	46bd      	mov	sp, r7
 8023498:	f85d 7b04 	ldr.w	r7, [sp], #4
 802349c:	4770      	bx	lr
 802349e:	bf00      	nop
 80234a0:	2400019f 	.word	0x2400019f
 80234a4:	240001a1 	.word	0x240001a1
 80234a8:	240004b1 	.word	0x240004b1

080234ac <CheckZeroAuthCount>:

bool CheckZeroAuthCount()
{
 80234ac:	b480      	push	{r7}
 80234ae:	af00      	add	r7, sp, #0
	if (gGCUStatus.bAuthCount_EN == 0 && gGCUStatus.bAuthCount_EX == 0)
 80234b0:	4b08      	ldr	r3, [pc, #32]	; (80234d4 <CheckZeroAuthCount+0x28>)
 80234b2:	791b      	ldrb	r3, [r3, #4]
 80234b4:	b2db      	uxtb	r3, r3
 80234b6:	2b00      	cmp	r3, #0
 80234b8:	d106      	bne.n	80234c8 <CheckZeroAuthCount+0x1c>
 80234ba:	4b06      	ldr	r3, [pc, #24]	; (80234d4 <CheckZeroAuthCount+0x28>)
 80234bc:	795b      	ldrb	r3, [r3, #5]
 80234be:	b2db      	uxtb	r3, r3
 80234c0:	2b00      	cmp	r3, #0
 80234c2:	d101      	bne.n	80234c8 <CheckZeroAuthCount+0x1c>
	{
		return TRUE;
 80234c4:	2301      	movs	r3, #1
 80234c6:	e000      	b.n	80234ca <CheckZeroAuthCount+0x1e>
	}
	else
	{
		return FALSE;
 80234c8:	2300      	movs	r3, #0
	}
}
 80234ca:	4618      	mov	r0, r3
 80234cc:	46bd      	mov	sp, r7
 80234ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234d2:	4770      	bx	lr
 80234d4:	24000524 	.word	0x24000524

080234d8 <CheckCritical>:

bool CheckCritical()
{
 80234d8:	b480      	push	{r7}
 80234da:	af00      	add	r7, sp, #0
	if (gisEntryPassenger)
 80234dc:	4b26      	ldr	r3, [pc, #152]	; (8023578 <CheckCritical+0xa0>)
 80234de:	781b      	ldrb	r3, [r3, #0]
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d01f      	beq.n	8023524 <CheckCritical+0x4c>
	{
		if (gGCUParameter.bCriticalZone == ALARM_ZONE1)
 80234e4:	4b25      	ldr	r3, [pc, #148]	; (802357c <CheckCritical+0xa4>)
 80234e6:	795b      	ldrb	r3, [r3, #5]
 80234e8:	2b01      	cmp	r3, #1
 80234ea:	d101      	bne.n	80234f0 <CheckCritical+0x18>
			return TRUE;
 80234ec:	2301      	movs	r3, #1
 80234ee:	e03e      	b.n	802356e <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE2 && psenNewSwing.dirEntry.passage)
 80234f0:	4b22      	ldr	r3, [pc, #136]	; (802357c <CheckCritical+0xa4>)
 80234f2:	795b      	ldrb	r3, [r3, #5]
 80234f4:	2b02      	cmp	r3, #2
 80234f6:	d108      	bne.n	802350a <CheckCritical+0x32>
 80234f8:	4b21      	ldr	r3, [pc, #132]	; (8023580 <CheckCritical+0xa8>)
 80234fa:	781b      	ldrb	r3, [r3, #0]
 80234fc:	f023 0303 	bic.w	r3, r3, #3
 8023500:	b2db      	uxtb	r3, r3
 8023502:	2b00      	cmp	r3, #0
 8023504:	d001      	beq.n	802350a <CheckCritical+0x32>
			return TRUE;
 8023506:	2301      	movs	r3, #1
 8023508:	e031      	b.n	802356e <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE3 && (psenNewSwing.b.s03))
 802350a:	4b1c      	ldr	r3, [pc, #112]	; (802357c <CheckCritical+0xa4>)
 802350c:	795b      	ldrb	r3, [r3, #5]
 802350e:	2b03      	cmp	r3, #3
 8023510:	d12c      	bne.n	802356c <CheckCritical+0x94>
 8023512:	4b1b      	ldr	r3, [pc, #108]	; (8023580 <CheckCritical+0xa8>)
 8023514:	781b      	ldrb	r3, [r3, #0]
 8023516:	f003 0304 	and.w	r3, r3, #4
 802351a:	b2db      	uxtb	r3, r3
 802351c:	2b00      	cmp	r3, #0
 802351e:	d025      	beq.n	802356c <CheckCritical+0x94>
			return TRUE;
 8023520:	2301      	movs	r3, #1
 8023522:	e024      	b.n	802356e <CheckCritical+0x96>
	}
	else if (gisExitPassenger)
 8023524:	4b17      	ldr	r3, [pc, #92]	; (8023584 <CheckCritical+0xac>)
 8023526:	781b      	ldrb	r3, [r3, #0]
 8023528:	2b00      	cmp	r3, #0
 802352a:	d01f      	beq.n	802356c <CheckCritical+0x94>
	{
		if (gGCUParameter.bCriticalZone == ALARM_ZONE1)
 802352c:	4b13      	ldr	r3, [pc, #76]	; (802357c <CheckCritical+0xa4>)
 802352e:	795b      	ldrb	r3, [r3, #5]
 8023530:	2b01      	cmp	r3, #1
 8023532:	d101      	bne.n	8023538 <CheckCritical+0x60>
			return TRUE;
 8023534:	2301      	movs	r3, #1
 8023536:	e01a      	b.n	802356e <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE2 && psenNewSwing.dirExit.passage)
 8023538:	4b10      	ldr	r3, [pc, #64]	; (802357c <CheckCritical+0xa4>)
 802353a:	795b      	ldrb	r3, [r3, #5]
 802353c:	2b02      	cmp	r3, #2
 802353e:	d108      	bne.n	8023552 <CheckCritical+0x7a>
 8023540:	4b0f      	ldr	r3, [pc, #60]	; (8023580 <CheckCritical+0xa8>)
 8023542:	785b      	ldrb	r3, [r3, #1]
 8023544:	f023 0303 	bic.w	r3, r3, #3
 8023548:	b2db      	uxtb	r3, r3
 802354a:	2b00      	cmp	r3, #0
 802354c:	d001      	beq.n	8023552 <CheckCritical+0x7a>
			return TRUE;
 802354e:	2301      	movs	r3, #1
 8023550:	e00d      	b.n	802356e <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE3 && (psenNewSwing.b.s11))
 8023552:	4b0a      	ldr	r3, [pc, #40]	; (802357c <CheckCritical+0xa4>)
 8023554:	795b      	ldrb	r3, [r3, #5]
 8023556:	2b03      	cmp	r3, #3
 8023558:	d108      	bne.n	802356c <CheckCritical+0x94>
 802355a:	4b09      	ldr	r3, [pc, #36]	; (8023580 <CheckCritical+0xa8>)
 802355c:	785b      	ldrb	r3, [r3, #1]
 802355e:	f003 0304 	and.w	r3, r3, #4
 8023562:	b2db      	uxtb	r3, r3
 8023564:	2b00      	cmp	r3, #0
 8023566:	d001      	beq.n	802356c <CheckCritical+0x94>
			return TRUE;
 8023568:	2301      	movs	r3, #1
 802356a:	e000      	b.n	802356e <CheckCritical+0x96>
	}

	return FALSE;
 802356c:	2300      	movs	r3, #0
}
 802356e:	4618      	mov	r0, r3
 8023570:	46bd      	mov	sp, r7
 8023572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023576:	4770      	bx	lr
 8023578:	240004af 	.word	0x240004af
 802357c:	24000514 	.word	0x24000514
 8023580:	24000480 	.word	0x24000480
 8023584:	240004b0 	.word	0x240004b0

08023588 <UpdateSensorData>:

void UpdateSensorData()
{
 8023588:	b480      	push	{r7}
 802358a:	af00      	add	r7, sp, #0
	psenNew.B.bSen1 = RD_PASSSEN1 & (~psenError.B.bSen1);
 802358c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8023590:	781b      	ldrb	r3, [r3, #0]
 8023592:	b2db      	uxtb	r3, r3
 8023594:	b25a      	sxtb	r2, r3
 8023596:	4b0e      	ldr	r3, [pc, #56]	; (80235d0 <UpdateSensorData+0x48>)
 8023598:	781b      	ldrb	r3, [r3, #0]
 802359a:	b25b      	sxtb	r3, r3
 802359c:	43db      	mvns	r3, r3
 802359e:	b25b      	sxtb	r3, r3
 80235a0:	4013      	ands	r3, r2
 80235a2:	b25b      	sxtb	r3, r3
 80235a4:	b2da      	uxtb	r2, r3
 80235a6:	4b0b      	ldr	r3, [pc, #44]	; (80235d4 <UpdateSensorData+0x4c>)
 80235a8:	701a      	strb	r2, [r3, #0]
	psenNew.B.bSen2 = RD_PASSSEN2 & (~psenError.B.bSen2);
 80235aa:	4b0b      	ldr	r3, [pc, #44]	; (80235d8 <UpdateSensorData+0x50>)
 80235ac:	781b      	ldrb	r3, [r3, #0]
 80235ae:	b2db      	uxtb	r3, r3
 80235b0:	b25a      	sxtb	r2, r3
 80235b2:	4b07      	ldr	r3, [pc, #28]	; (80235d0 <UpdateSensorData+0x48>)
 80235b4:	785b      	ldrb	r3, [r3, #1]
 80235b6:	b25b      	sxtb	r3, r3
 80235b8:	43db      	mvns	r3, r3
 80235ba:	b25b      	sxtb	r3, r3
 80235bc:	4013      	ands	r3, r2
 80235be:	b25b      	sxtb	r3, r3
 80235c0:	b2da      	uxtb	r2, r3
 80235c2:	4b04      	ldr	r3, [pc, #16]	; (80235d4 <UpdateSensorData+0x4c>)
 80235c4:	705a      	strb	r2, [r3, #1]
}
 80235c6:	bf00      	nop
 80235c8:	46bd      	mov	sp, r7
 80235ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235ce:	4770      	bx	lr
 80235d0:	24000510 	.word	0x24000510
 80235d4:	24000488 	.word	0x24000488
 80235d8:	60000100 	.word	0x60000100

080235dc <StopBarrierForSwing>:

void StopBarrierForSwing(bool isStop)
{
 80235dc:	b580      	push	{r7, lr}
 80235de:	b082      	sub	sp, #8
 80235e0:	af00      	add	r7, sp, #0
 80235e2:	4603      	mov	r3, r0
 80235e4:	71fb      	strb	r3, [r7, #7]
	isBarrierStop = isStop;
 80235e6:	4a05      	ldr	r2, [pc, #20]	; (80235fc <StopBarrierForSwing+0x20>)
 80235e8:	79fb      	ldrb	r3, [r7, #7]
 80235ea:	7013      	strb	r3, [r2, #0]
	Brr_StopBarrier(isStop);
 80235ec:	79fb      	ldrb	r3, [r7, #7]
 80235ee:	4618      	mov	r0, r3
 80235f0:	f7fd f8ce 	bl	8020790 <Brr_StopBarrier>
}
 80235f4:	bf00      	nop
 80235f6:	3708      	adds	r7, #8
 80235f8:	46bd      	mov	sp, r7
 80235fa:	bd80      	pop	{r7, pc}
 80235fc:	24000498 	.word	0x24000498

08023600 <InitPassageModeForSwing>:

void InitPassageModeForSwing(void)
{
 8023600:	b580      	push	{r7, lr}
 8023602:	af00      	add	r7, sp, #0
	if (isBarrierStop == TRUE)
 8023604:	4b95      	ldr	r3, [pc, #596]	; (802385c <InitPassageModeForSwing+0x25c>)
 8023606:	781b      	ldrb	r3, [r3, #0]
 8023608:	2b00      	cmp	r3, #0
 802360a:	d005      	beq.n	8023618 <InitPassageModeForSwing+0x18>
	{
		//PRINTL(" [InitPassageMode] Release the barrier stop");
		printf(" [InitPassageMode] Release the barrier stop \n");
 802360c:	4894      	ldr	r0, [pc, #592]	; (8023860 <InitPassageModeForSwing+0x260>)
 802360e:	f006 f921 	bl	8029854 <printf_>
		StopBarrierForSwing(FALSE);
 8023612:	2000      	movs	r0, #0
 8023614:	f7ff ffe2 	bl	80235dc <StopBarrierForSwing>
	}

	if (gCurGCUOpMode.bEmergencyMaint && gfTestMode == FALSE)
 8023618:	4b92      	ldr	r3, [pc, #584]	; (8023864 <InitPassageModeForSwing+0x264>)
 802361a:	789b      	ldrb	r3, [r3, #2]
 802361c:	2b00      	cmp	r3, #0
 802361e:	d067      	beq.n	80236f0 <InitPassageModeForSwing+0xf0>
 8023620:	4b91      	ldr	r3, [pc, #580]	; (8023868 <InitPassageModeForSwing+0x268>)
 8023622:	781b      	ldrb	r3, [r3, #0]
 8023624:	f083 0301 	eor.w	r3, r3, #1
 8023628:	b2db      	uxtb	r3, r3
 802362a:	2b00      	cmp	r3, #0
 802362c:	d060      	beq.n	80236f0 <InitPassageModeForSwing+0xf0>
	{
		ResetTimer(&timerReset);
 802362e:	488f      	ldr	r0, [pc, #572]	; (802386c <InitPassageModeForSwing+0x26c>)
 8023630:	f00d fa14 	bl	8030a5c <ResetTimer>
		gbEmergencyFlag = FLG_SET;
 8023634:	4b8e      	ldr	r3, [pc, #568]	; (8023870 <InitPassageModeForSwing+0x270>)
 8023636:	2201      	movs	r2, #1
 8023638:	701a      	strb	r2, [r3, #0]
		gGCUStatus.bAuthCount_EN = 0;
 802363a:	4b8e      	ldr	r3, [pc, #568]	; (8023874 <InitPassageModeForSwing+0x274>)
 802363c:	2200      	movs	r2, #0
 802363e:	711a      	strb	r2, [r3, #4]
		gGCUStatus.bAuthCount_EX = 0;
 8023640:	4b8c      	ldr	r3, [pc, #560]	; (8023874 <InitPassageModeForSwing+0x274>)
 8023642:	2200      	movs	r2, #0
 8023644:	715a      	strb	r2, [r3, #5]
		gbAuthDirection = FROM_NONE;
 8023646:	4b8c      	ldr	r3, [pc, #560]	; (8023878 <InitPassageModeForSwing+0x278>)
 8023648:	2200      	movs	r2, #0
 802364a:	701a      	strb	r2, [r3, #0]
		gisEntryPassenger = FALSE;
 802364c:	4b8b      	ldr	r3, [pc, #556]	; (802387c <InitPassageModeForSwing+0x27c>)
 802364e:	2200      	movs	r2, #0
 8023650:	701a      	strb	r2, [r3, #0]
		gisExitPassenger = FALSE;
 8023652:	4b8b      	ldr	r3, [pc, #556]	; (8023880 <InitPassageModeForSwing+0x280>)
 8023654:	2200      	movs	r2, #0
 8023656:	701a      	strb	r2, [r3, #0]
		gnPassPattern = PASS_PATN_NONE;
 8023658:	4b8a      	ldr	r3, [pc, #552]	; (8023884 <InitPassageModeForSwing+0x284>)
 802365a:	2200      	movs	r2, #0
 802365c:	601a      	str	r2, [r3, #0]
		isPassOver_EN = FALSE;
 802365e:	4b8a      	ldr	r3, [pc, #552]	; (8023888 <InitPassageModeForSwing+0x288>)
 8023660:	2200      	movs	r2, #0
 8023662:	701a      	strb	r2, [r3, #0]
		isPassOver_EX = FALSE;
 8023664:	4b89      	ldr	r3, [pc, #548]	; (802388c <InitPassageModeForSwing+0x28c>)
 8023666:	2200      	movs	r2, #0
 8023668:	701a      	strb	r2, [r3, #0]
		timerAuthorize.fStart = FALSE;
 802366a:	4b89      	ldr	r3, [pc, #548]	; (8023890 <InitPassageModeForSwing+0x290>)
 802366c:	2200      	movs	r2, #0
 802366e:	701a      	strb	r2, [r3, #0]
		timerPassageClear.fStart = FALSE;
 8023670:	4b88      	ldr	r3, [pc, #544]	; (8023894 <InitPassageModeForSwing+0x294>)
 8023672:	2200      	movs	r2, #0
 8023674:	701a      	strb	r2, [r3, #0]
		timerSafety.fStart = FALSE;
 8023676:	4b88      	ldr	r3, [pc, #544]	; (8023898 <InitPassageModeForSwing+0x298>)
 8023678:	2200      	movs	r2, #0
 802367a:	701a      	strb	r2, [r3, #0]
		bPassPattern_EN = PASS_PATN_NONE;
 802367c:	4b87      	ldr	r3, [pc, #540]	; (802389c <InitPassageModeForSwing+0x29c>)
 802367e:	2200      	movs	r2, #0
 8023680:	701a      	strb	r2, [r3, #0]
		bPassPattern_EX = PASS_PATN_NONE;
 8023682:	4b87      	ldr	r3, [pc, #540]	; (80238a0 <InitPassageModeForSwing+0x2a0>)
 8023684:	2200      	movs	r2, #0
 8023686:	701a      	strb	r2, [r3, #0]

		//PRINTL(" [InitPassageMode] bEmergencyMaint: %d", gCurGCUOpMode.bEmergencyMaint);.
		printf(" [InitPassageMode] bEmergencyMaint: %d \n", gCurGCUOpMode.bEmergencyMaint);
 8023688:	4b76      	ldr	r3, [pc, #472]	; (8023864 <InitPassageModeForSwing+0x264>)
 802368a:	789b      	ldrb	r3, [r3, #2]
 802368c:	4619      	mov	r1, r3
 802368e:	4885      	ldr	r0, [pc, #532]	; (80238a4 <InitPassageModeForSwing+0x2a4>)
 8023690:	f006 f8e0 	bl	8029854 <printf_>

		Brr_SetEmergency(TRUE);
 8023694:	2001      	movs	r0, #1
 8023696:	f7fc fffd 	bl	8020694 <Brr_SetEmergency>

		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 802369a:	4b72      	ldr	r3, [pc, #456]	; (8023864 <InitPassageModeForSwing+0x264>)
 802369c:	789b      	ldrb	r3, [r3, #2]
 802369e:	f003 0303 	and.w	r3, r3, #3
 80236a2:	2b00      	cmp	r3, #0
 80236a4:	d007      	beq.n	80236b6 <InitPassageModeForSwing+0xb6>
		{
			ControlDirectionLED(DIR_RED, DIR_GREEN);
 80236a6:	2101      	movs	r1, #1
 80236a8:	2002      	movs	r0, #2
 80236aa:	f7fd ff7d 	bl	80215a8 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_SET);
 80236ae:	2001      	movs	r0, #1
 80236b0:	f7fe f85e 	bl	8021770 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 80236b4:	e0ce      	b.n	8023854 <InitPassageModeForSwing+0x254>
		}
		else if (gCurGCUOpMode.bEmergencyMaint & MAINTENANCE_MODE)
 80236b6:	4b6b      	ldr	r3, [pc, #428]	; (8023864 <InitPassageModeForSwing+0x264>)
 80236b8:	789b      	ldrb	r3, [r3, #2]
 80236ba:	f003 0310 	and.w	r3, r3, #16
 80236be:	2b00      	cmp	r3, #0
 80236c0:	d007      	beq.n	80236d2 <InitPassageModeForSwing+0xd2>
		{
			ControlDirectionLED(DIR_RED, DIR_RED);
 80236c2:	2102      	movs	r1, #2
 80236c4:	2002      	movs	r0, #2
 80236c6:	f7fd ff6f 	bl	80215a8 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_OFF);
 80236ca:	2000      	movs	r0, #0
 80236cc:	f7fe f850 	bl	8021770 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 80236d0:	e0c0      	b.n	8023854 <InitPassageModeForSwing+0x254>
		}
		else if (gCurGCUOpMode.bEmergencyMaint & FREE_MODE)
 80236d2:	4b64      	ldr	r3, [pc, #400]	; (8023864 <InitPassageModeForSwing+0x264>)
 80236d4:	789b      	ldrb	r3, [r3, #2]
 80236d6:	f003 0320 	and.w	r3, r3, #32
 80236da:	2b00      	cmp	r3, #0
 80236dc:	f000 80ba 	beq.w	8023854 <InitPassageModeForSwing+0x254>
		{
			ControlDirectionLED(DIR_GREEN, DIR_GREEN);
 80236e0:	2101      	movs	r1, #1
 80236e2:	2001      	movs	r0, #1
 80236e4:	f7fd ff60 	bl	80215a8 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_OFF);
 80236e8:	2000      	movs	r0, #0
 80236ea:	f7fe f841 	bl	8021770 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 80236ee:	e0b1      	b.n	8023854 <InitPassageModeForSwing+0x254>
		}
	}
	else
	{
		bPassPattern_EN = PASS_PATN_NONE;
 80236f0:	4b6a      	ldr	r3, [pc, #424]	; (802389c <InitPassageModeForSwing+0x29c>)
 80236f2:	2200      	movs	r2, #0
 80236f4:	701a      	strb	r2, [r3, #0]
		bPassPattern_EX = PASS_PATN_NONE;
 80236f6:	4b6a      	ldr	r3, [pc, #424]	; (80238a0 <InitPassageModeForSwing+0x2a0>)
 80236f8:	2200      	movs	r2, #0
 80236fa:	701a      	strb	r2, [r3, #0]

		if (FLG_SET == gbEmergencyFlag && gfTestMode == FALSE)
 80236fc:	4b5c      	ldr	r3, [pc, #368]	; (8023870 <InitPassageModeForSwing+0x270>)
 80236fe:	781b      	ldrb	r3, [r3, #0]
 8023700:	2b01      	cmp	r3, #1
 8023702:	d115      	bne.n	8023730 <InitPassageModeForSwing+0x130>
 8023704:	4b58      	ldr	r3, [pc, #352]	; (8023868 <InitPassageModeForSwing+0x268>)
 8023706:	781b      	ldrb	r3, [r3, #0]
 8023708:	f083 0301 	eor.w	r3, r3, #1
 802370c:	b2db      	uxtb	r3, r3
 802370e:	2b00      	cmp	r3, #0
 8023710:	d00e      	beq.n	8023730 <InitPassageModeForSwing+0x130>
		{
			//PRINTL(" [InitPassageMode] Safety Check for mode change!!");
			printf(" [InitPassageMode] Safety Check for mode change!! \n");
 8023712:	4865      	ldr	r0, [pc, #404]	; (80238a8 <InitPassageModeForSwing+0x2a8>)
 8023714:	f006 f89e 	bl	8029854 <printf_>
			ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, 2);
 8023718:	2202      	movs	r2, #2
 802371a:	2101      	movs	r1, #1
 802371c:	2000      	movs	r0, #0
 802371e:	f7fd fee9 	bl	80214f4 <ControlBuzzer>
			dwResetTime = 30;
 8023722:	4b62      	ldr	r3, [pc, #392]	; (80238ac <InitPassageModeForSwing+0x2ac>)
 8023724:	221e      	movs	r2, #30
 8023726:	601a      	str	r2, [r3, #0]
			SetTimer(&timerReset);
 8023728:	4850      	ldr	r0, [pc, #320]	; (802386c <InitPassageModeForSwing+0x26c>)
 802372a:	f00d f983 	bl	8030a34 <SetTimer>
 802372e:	e092      	b.n	8023856 <InitPassageModeForSwing+0x256>
		}
		else
		{
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 8023730:	4b4c      	ldr	r3, [pc, #304]	; (8023864 <InitPassageModeForSwing+0x264>)
 8023732:	781b      	ldrb	r3, [r3, #0]
 8023734:	2b00      	cmp	r3, #0
 8023736:	d008      	beq.n	802374a <InitPassageModeForSwing+0x14a>
				((gCurGCUOpMode.bServiceMode_EN == FREE_SERVICE) && !psenNewSwing.side.entry))
 8023738:	4b4a      	ldr	r3, [pc, #296]	; (8023864 <InitPassageModeForSwing+0x264>)
 802373a:	781b      	ldrb	r3, [r3, #0]
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 802373c:	2b02      	cmp	r3, #2
 802373e:	d107      	bne.n	8023750 <InitPassageModeForSwing+0x150>
				((gCurGCUOpMode.bServiceMode_EN == FREE_SERVICE) && !psenNewSwing.side.entry))
 8023740:	4b5b      	ldr	r3, [pc, #364]	; (80238b0 <InitPassageModeForSwing+0x2b0>)
 8023742:	f993 3000 	ldrsb.w	r3, [r3]
 8023746:	2b00      	cmp	r3, #0
 8023748:	d102      	bne.n	8023750 <InitPassageModeForSwing+0x150>
				gGCUStatus.bAuthCount_EN = 0;
 802374a:	4b4a      	ldr	r3, [pc, #296]	; (8023874 <InitPassageModeForSwing+0x274>)
 802374c:	2200      	movs	r2, #0
 802374e:	711a      	strb	r2, [r3, #4]

			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 8023750:	4b44      	ldr	r3, [pc, #272]	; (8023864 <InitPassageModeForSwing+0x264>)
 8023752:	785b      	ldrb	r3, [r3, #1]
 8023754:	2b00      	cmp	r3, #0
 8023756:	d008      	beq.n	802376a <InitPassageModeForSwing+0x16a>
				((gCurGCUOpMode.bServiceMode_EX == FREE_SERVICE) && !psenNewSwing.side.exit))
 8023758:	4b42      	ldr	r3, [pc, #264]	; (8023864 <InitPassageModeForSwing+0x264>)
 802375a:	785b      	ldrb	r3, [r3, #1]
			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 802375c:	2b02      	cmp	r3, #2
 802375e:	d107      	bne.n	8023770 <InitPassageModeForSwing+0x170>
				((gCurGCUOpMode.bServiceMode_EX == FREE_SERVICE) && !psenNewSwing.side.exit))
 8023760:	4b53      	ldr	r3, [pc, #332]	; (80238b0 <InitPassageModeForSwing+0x2b0>)
 8023762:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8023766:	2b00      	cmp	r3, #0
 8023768:	d102      	bne.n	8023770 <InitPassageModeForSwing+0x170>
				gGCUStatus.bAuthCount_EX = 0;
 802376a:	4b42      	ldr	r3, [pc, #264]	; (8023874 <InitPassageModeForSwing+0x274>)
 802376c:	2200      	movs	r2, #0
 802376e:	715a      	strb	r2, [r3, #5]

			if (gGCUStatus.bAuthCount_EN || gGCUStatus.bAuthCount_EX)
 8023770:	4b40      	ldr	r3, [pc, #256]	; (8023874 <InitPassageModeForSwing+0x274>)
 8023772:	791b      	ldrb	r3, [r3, #4]
 8023774:	b2db      	uxtb	r3, r3
 8023776:	2b00      	cmp	r3, #0
 8023778:	d104      	bne.n	8023784 <InitPassageModeForSwing+0x184>
 802377a:	4b3e      	ldr	r3, [pc, #248]	; (8023874 <InitPassageModeForSwing+0x274>)
 802377c:	795b      	ldrb	r3, [r3, #5]
 802377e:	b2db      	uxtb	r3, r3
 8023780:	2b00      	cmp	r3, #0
 8023782:	d011      	beq.n	80237a8 <InitPassageModeForSwing+0x1a8>
			{
				if (gGCUStatus.bAuthCount_EN)
 8023784:	4b3b      	ldr	r3, [pc, #236]	; (8023874 <InitPassageModeForSwing+0x274>)
 8023786:	791b      	ldrb	r3, [r3, #4]
 8023788:	b2db      	uxtb	r3, r3
 802378a:	2b00      	cmp	r3, #0
 802378c:	d003      	beq.n	8023796 <InitPassageModeForSwing+0x196>
					ControlBarrier(BARRIER_OPEN_FOR_EN);
 802378e:	2002      	movs	r0, #2
 8023790:	f7fd fe78 	bl	8021484 <ControlBarrier>
				if (gGCUStatus.bAuthCount_EN)
 8023794:	e014      	b.n	80237c0 <InitPassageModeForSwing+0x1c0>
				else if (gGCUStatus.bAuthCount_EX)
 8023796:	4b37      	ldr	r3, [pc, #220]	; (8023874 <InitPassageModeForSwing+0x274>)
 8023798:	795b      	ldrb	r3, [r3, #5]
 802379a:	b2db      	uxtb	r3, r3
 802379c:	2b00      	cmp	r3, #0
 802379e:	d00f      	beq.n	80237c0 <InitPassageModeForSwing+0x1c0>
					ControlBarrier(BARRIER_OPEN_FOR_EX);
 80237a0:	2001      	movs	r0, #1
 80237a2:	f7fd fe6f 	bl	8021484 <ControlBarrier>
				if (gGCUStatus.bAuthCount_EN)
 80237a6:	e00b      	b.n	80237c0 <InitPassageModeForSwing+0x1c0>
			}
			else
			{
				if (gbPowerFailFlag == FLG_SET)
 80237a8:	4b42      	ldr	r3, [pc, #264]	; (80238b4 <InitPassageModeForSwing+0x2b4>)
 80237aa:	781b      	ldrb	r3, [r3, #0]
 80237ac:	2b01      	cmp	r3, #1
 80237ae:	d103      	bne.n	80237b8 <InitPassageModeForSwing+0x1b8>
					ControlBarrier(BARRIER_OPEN_FOR_EX);
 80237b0:	2001      	movs	r0, #1
 80237b2:	f7fd fe67 	bl	8021484 <ControlBarrier>
 80237b6:	e004      	b.n	80237c2 <InitPassageModeForSwing+0x1c2>
				else //  if (gCurGCUOpMode.bEmergencyMaint == MAINTENANCE_MODE)
					ControlBarrier(BARRIER_CLOSE_S);
 80237b8:	2003      	movs	r0, #3
 80237ba:	f7fd fe63 	bl	8021484 <ControlBarrier>
 80237be:	e000      	b.n	80237c2 <InitPassageModeForSwing+0x1c2>
				if (gGCUStatus.bAuthCount_EN)
 80237c0:	bf00      	nop
			}

			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 80237c2:	4b28      	ldr	r3, [pc, #160]	; (8023864 <InitPassageModeForSwing+0x264>)
 80237c4:	781b      	ldrb	r3, [r3, #0]
 80237c6:	2b00      	cmp	r3, #0
 80237c8:	d008      	beq.n	80237dc <InitPassageModeForSwing+0x1dc>
				(gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 80237ca:	4b2a      	ldr	r3, [pc, #168]	; (8023874 <InitPassageModeForSwing+0x274>)
 80237cc:	795b      	ldrb	r3, [r3, #5]
 80237ce:	b2db      	uxtb	r3, r3
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 80237d0:	2b00      	cmp	r3, #0
 80237d2:	d007      	beq.n	80237e4 <InitPassageModeForSwing+0x1e4>
				(gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 80237d4:	4b23      	ldr	r3, [pc, #140]	; (8023864 <InitPassageModeForSwing+0x264>)
 80237d6:	781b      	ldrb	r3, [r3, #0]
 80237d8:	2b01      	cmp	r3, #1
 80237da:	d103      	bne.n	80237e4 <InitPassageModeForSwing+0x1e4>
				gbLampCMD_EN = DIR_RED;
 80237dc:	4b36      	ldr	r3, [pc, #216]	; (80238b8 <InitPassageModeForSwing+0x2b8>)
 80237de:	2202      	movs	r2, #2
 80237e0:	701a      	strb	r2, [r3, #0]
 80237e2:	e002      	b.n	80237ea <InitPassageModeForSwing+0x1ea>
			else
				gbLampCMD_EN = DIR_GREEN;
 80237e4:	4b34      	ldr	r3, [pc, #208]	; (80238b8 <InitPassageModeForSwing+0x2b8>)
 80237e6:	2201      	movs	r2, #1
 80237e8:	701a      	strb	r2, [r3, #0]

			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 80237ea:	4b1e      	ldr	r3, [pc, #120]	; (8023864 <InitPassageModeForSwing+0x264>)
 80237ec:	785b      	ldrb	r3, [r3, #1]
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d008      	beq.n	8023804 <InitPassageModeForSwing+0x204>
				(gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80237f2:	4b20      	ldr	r3, [pc, #128]	; (8023874 <InitPassageModeForSwing+0x274>)
 80237f4:	791b      	ldrb	r3, [r3, #4]
 80237f6:	b2db      	uxtb	r3, r3
			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 80237f8:	2b00      	cmp	r3, #0
 80237fa:	d007      	beq.n	802380c <InitPassageModeForSwing+0x20c>
				(gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80237fc:	4b19      	ldr	r3, [pc, #100]	; (8023864 <InitPassageModeForSwing+0x264>)
 80237fe:	785b      	ldrb	r3, [r3, #1]
 8023800:	2b01      	cmp	r3, #1
 8023802:	d103      	bne.n	802380c <InitPassageModeForSwing+0x20c>
				gbLampCMD_EX = DIR_RED;
 8023804:	4b2d      	ldr	r3, [pc, #180]	; (80238bc <InitPassageModeForSwing+0x2bc>)
 8023806:	2202      	movs	r2, #2
 8023808:	701a      	strb	r2, [r3, #0]
 802380a:	e002      	b.n	8023812 <InitPassageModeForSwing+0x212>
			else
				gbLampCMD_EX = DIR_GREEN;
 802380c:	4b2b      	ldr	r3, [pc, #172]	; (80238bc <InitPassageModeForSwing+0x2bc>)
 802380e:	2201      	movs	r2, #1
 8023810:	701a      	strb	r2, [r3, #0]

			ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 8023812:	2200      	movs	r2, #0
 8023814:	2100      	movs	r1, #0
 8023816:	2000      	movs	r0, #0
 8023818:	f7fd fe6c 	bl	80214f4 <ControlBuzzer>
			ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 802381c:	4b26      	ldr	r3, [pc, #152]	; (80238b8 <InitPassageModeForSwing+0x2b8>)
 802381e:	781b      	ldrb	r3, [r3, #0]
 8023820:	4a26      	ldr	r2, [pc, #152]	; (80238bc <InitPassageModeForSwing+0x2bc>)
 8023822:	7812      	ldrb	r2, [r2, #0]
 8023824:	4611      	mov	r1, r2
 8023826:	4618      	mov	r0, r3
 8023828:	f7fd febe 	bl	80215a8 <ControlDirectionLED>
			ControlIndicator(gbIndicatorCMD_EN, gbIndicatorCMD_EX, 0, FALSE);
 802382c:	4b24      	ldr	r3, [pc, #144]	; (80238c0 <InitPassageModeForSwing+0x2c0>)
 802382e:	7818      	ldrb	r0, [r3, #0]
 8023830:	4b24      	ldr	r3, [pc, #144]	; (80238c4 <InitPassageModeForSwing+0x2c4>)
 8023832:	7819      	ldrb	r1, [r3, #0]
 8023834:	2300      	movs	r3, #0
 8023836:	2200      	movs	r2, #0
 8023838:	f7fd ff12 	bl	8021660 <ControlIndicator>

			if (CheckZeroAuthCount())
 802383c:	f7ff fe36 	bl	80234ac <CheckZeroAuthCount>
 8023840:	4603      	mov	r3, r0
 8023842:	2b00      	cmp	r3, #0
 8023844:	d007      	beq.n	8023856 <InitPassageModeForSwing+0x256>
			{
				//PRINTL(" [InitPassageMode] ResetAuthTimer!!");
				printf(" [InitPassageMode] ResetAuthTimer!! \n");
 8023846:	4820      	ldr	r0, [pc, #128]	; (80238c8 <InitPassageModeForSwing+0x2c8>)
 8023848:	f006 f804 	bl	8029854 <printf_>
				ResetTimer(&timerAuthorize);
 802384c:	4810      	ldr	r0, [pc, #64]	; (8023890 <InitPassageModeForSwing+0x290>)
 802384e:	f00d f905 	bl	8030a5c <ResetTimer>
			}
		}
	}
}
 8023852:	e000      	b.n	8023856 <InitPassageModeForSwing+0x256>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 8023854:	bf00      	nop
}
 8023856:	bf00      	nop
 8023858:	bd80      	pop	{r7, pc}
 802385a:	bf00      	nop
 802385c:	24000498 	.word	0x24000498
 8023860:	08032544 	.word	0x08032544
 8023864:	24000548 	.word	0x24000548
 8023868:	240004b2 	.word	0x240004b2
 802386c:	240002a0 	.word	0x240002a0
 8023870:	240001a1 	.word	0x240001a1
 8023874:	24000524 	.word	0x24000524
 8023878:	240001a2 	.word	0x240001a2
 802387c:	240004af 	.word	0x240004af
 8023880:	240004b0 	.word	0x240004b0
 8023884:	240004b4 	.word	0x240004b4
 8023888:	24000492 	.word	0x24000492
 802388c:	24000493 	.word	0x24000493
 8023890:	240001d4 	.word	0x240001d4
 8023894:	240001e0 	.word	0x240001e0
 8023898:	24000258 	.word	0x24000258
 802389c:	2400048e 	.word	0x2400048e
 80238a0:	2400048f 	.word	0x2400048f
 80238a4:	08032574 	.word	0x08032574
 80238a8:	080325a0 	.word	0x080325a0
 80238ac:	2400000c 	.word	0x2400000c
 80238b0:	24000480 	.word	0x24000480
 80238b4:	2400019f 	.word	0x2400019f
 80238b8:	2400019d 	.word	0x2400019d
 80238bc:	2400019e 	.word	0x2400019e
 80238c0:	2400019b 	.word	0x2400019b
 80238c4:	2400019c 	.word	0x2400019c
 80238c8:	080325d4 	.word	0x080325d4

080238cc <CloseBarrierForSwing>:

void CloseBarrierForSwing(void)
{
 80238cc:	b580      	push	{r7, lr}
 80238ce:	af00      	add	r7, sp, #0
	if (gfTestMode == TRUE || CheckBarrierClosedStatus())
 80238d0:	4b0b      	ldr	r3, [pc, #44]	; (8023900 <CloseBarrierForSwing+0x34>)
 80238d2:	781b      	ldrb	r3, [r3, #0]
 80238d4:	2b00      	cmp	r3, #0
 80238d6:	d104      	bne.n	80238e2 <CloseBarrierForSwing+0x16>
 80238d8:	f7ff fdc8 	bl	802346c <CheckBarrierClosedStatus>
 80238dc:	4603      	mov	r3, r0
 80238de:	2b00      	cmp	r3, #0
 80238e0:	d00b      	beq.n	80238fa <CloseBarrierForSwing+0x2e>
	{
		if (isBarrierStop == TRUE)
 80238e2:	4b08      	ldr	r3, [pc, #32]	; (8023904 <CloseBarrierForSwing+0x38>)
 80238e4:	781b      	ldrb	r3, [r3, #0]
 80238e6:	2b00      	cmp	r3, #0
 80238e8:	d002      	beq.n	80238f0 <CloseBarrierForSwing+0x24>
		{
			StopBarrierForSwing(FALSE);
 80238ea:	2000      	movs	r0, #0
 80238ec:	f7ff fe76 	bl	80235dc <StopBarrierForSwing>
		}

		isForceOpen = FALSE;
 80238f0:	4b05      	ldr	r3, [pc, #20]	; (8023908 <CloseBarrierForSwing+0x3c>)
 80238f2:	2200      	movs	r2, #0
 80238f4:	701a      	strb	r2, [r3, #0]
		Brr_CloseBarrier();
 80238f6:	f7fc ff3b 	bl	8020770 <Brr_CloseBarrier>
	}
}
 80238fa:	bf00      	nop
 80238fc:	bd80      	pop	{r7, pc}
 80238fe:	bf00      	nop
 8023900:	240004b2 	.word	0x240004b2
 8023904:	24000498 	.word	0x24000498
 8023908:	24000499 	.word	0x24000499

0802390c <CheckBarrierOperation>:

void CheckBarrierOperation(void)
{
 802390c:	b580      	push	{r7, lr}
 802390e:	af00      	add	r7, sp, #0
	if (gfTestMode == FALSE && timerBarrierCheck.fStart)
 8023910:	4b9a      	ldr	r3, [pc, #616]	; (8023b7c <CheckBarrierOperation+0x270>)
 8023912:	781b      	ldrb	r3, [r3, #0]
 8023914:	f083 0301 	eor.w	r3, r3, #1
 8023918:	b2db      	uxtb	r3, r3
 802391a:	2b00      	cmp	r3, #0
 802391c:	f000 81d0 	beq.w	8023cc0 <CheckBarrierOperation+0x3b4>
 8023920:	4b97      	ldr	r3, [pc, #604]	; (8023b80 <CheckBarrierOperation+0x274>)
 8023922:	781b      	ldrb	r3, [r3, #0]
 8023924:	2b00      	cmp	r3, #0
 8023926:	f000 81cb 	beq.w	8023cc0 <CheckBarrierOperation+0x3b4>
	{
		if (IsTimeout(&timerBarrierCheck, dwBarrierCheckTime * TICK_COUNT_100MS))
 802392a:	4b96      	ldr	r3, [pc, #600]	; (8023b84 <CheckBarrierOperation+0x278>)
 802392c:	681a      	ldr	r2, [r3, #0]
 802392e:	4613      	mov	r3, r2
 8023930:	009b      	lsls	r3, r3, #2
 8023932:	4413      	add	r3, r2
 8023934:	005b      	lsls	r3, r3, #1
 8023936:	4619      	mov	r1, r3
 8023938:	4891      	ldr	r0, [pc, #580]	; (8023b80 <CheckBarrierOperation+0x274>)
 802393a:	f00d f89d 	bl	8030a78 <IsTimeout>
 802393e:	4603      	mov	r3, r0
 8023940:	2b00      	cmp	r3, #0
 8023942:	f000 81c1 	beq.w	8023cc8 <CheckBarrierOperation+0x3bc>
		{
			ResetTimer(&timerBarrierCheck);
 8023946:	488e      	ldr	r0, [pc, #568]	; (8023b80 <CheckBarrierOperation+0x274>)
 8023948:	f00d f888 	bl	8030a5c <ResetTimer>

			// PRINTL(" =[%d]= ", gbBarrierCmd);
			if (gGCUStatus.ModuleAlarm.b.nFDoor1 != FDOOR_ALARM_NONE || gGCUStatus.ModuleAlarm.b.nFDoor2 != FDOOR_ALARM_NONE)
 802394c:	4b8e      	ldr	r3, [pc, #568]	; (8023b88 <CheckBarrierOperation+0x27c>)
 802394e:	7b1b      	ldrb	r3, [r3, #12]
 8023950:	f003 0303 	and.w	r3, r3, #3
 8023954:	b2db      	uxtb	r3, r3
 8023956:	2b00      	cmp	r3, #0
 8023958:	d106      	bne.n	8023968 <CheckBarrierOperation+0x5c>
 802395a:	4b8b      	ldr	r3, [pc, #556]	; (8023b88 <CheckBarrierOperation+0x27c>)
 802395c:	7b1b      	ldrb	r3, [r3, #12]
 802395e:	f003 030c 	and.w	r3, r3, #12
 8023962:	b2db      	uxtb	r3, r3
 8023964:	2b00      	cmp	r3, #0
 8023966:	d00e      	beq.n	8023986 <CheckBarrierOperation+0x7a>
			{
				//PRINTL(" [BarrierStatus] BNC:%d/%d", gGCUStatus.ModuleAlarm.b.nFDoor1, gGCUStatus.ModuleAlarm.b.nFDoor2);
				printf(" [BarrierStatus] BNC:%d/%d \n", gGCUStatus.ModuleAlarm.b.nFDoor1, gGCUStatus.ModuleAlarm.b.nFDoor2);
 8023968:	4b87      	ldr	r3, [pc, #540]	; (8023b88 <CheckBarrierOperation+0x27c>)
 802396a:	7b1b      	ldrb	r3, [r3, #12]
 802396c:	f343 0301 	sbfx	r3, r3, #0, #2
 8023970:	b25b      	sxtb	r3, r3
 8023972:	4619      	mov	r1, r3
 8023974:	4b84      	ldr	r3, [pc, #528]	; (8023b88 <CheckBarrierOperation+0x27c>)
 8023976:	7b1b      	ldrb	r3, [r3, #12]
 8023978:	f343 0381 	sbfx	r3, r3, #2, #2
 802397c:	b25b      	sxtb	r3, r3
 802397e:	461a      	mov	r2, r3
 8023980:	4882      	ldr	r0, [pc, #520]	; (8023b8c <CheckBarrierOperation+0x280>)
 8023982:	f005 ff67 	bl	8029854 <printf_>
			}

			// PRINTL(" [BarrierStatus] act:%d/%d", gMainBarrierStatus.param.actStatus, gSubBarrierStatus.param.actStatus);
			// PRINTL(" [BarrierStatus] Running:%d/%d", gfMainBarrierRunning, gfSubBarrierRunning);

			if ((gfMainBarrierRunning == FALSE || gMainBarrierStatus.param.actStatus == 0) &&
 8023986:	4b82      	ldr	r3, [pc, #520]	; (8023b90 <CheckBarrierOperation+0x284>)
 8023988:	781b      	ldrb	r3, [r3, #0]
 802398a:	f083 0301 	eor.w	r3, r3, #1
 802398e:	b2db      	uxtb	r3, r3
 8023990:	2b00      	cmp	r3, #0
 8023992:	d107      	bne.n	80239a4 <CheckBarrierOperation+0x98>
 8023994:	4b7f      	ldr	r3, [pc, #508]	; (8023b94 <CheckBarrierOperation+0x288>)
 8023996:	791b      	ldrb	r3, [r3, #4]
 8023998:	f003 0308 	and.w	r3, r3, #8
 802399c:	b2db      	uxtb	r3, r3
 802399e:	2b00      	cmp	r3, #0
 80239a0:	f040 814f 	bne.w	8023c42 <CheckBarrierOperation+0x336>
				(gfSubBarrierRunning == FALSE || gSubBarrierStatus.param.actStatus == 0))
 80239a4:	4b7c      	ldr	r3, [pc, #496]	; (8023b98 <CheckBarrierOperation+0x28c>)
 80239a6:	781b      	ldrb	r3, [r3, #0]
 80239a8:	f083 0301 	eor.w	r3, r3, #1
 80239ac:	b2db      	uxtb	r3, r3
			if ((gfMainBarrierRunning == FALSE || gMainBarrierStatus.param.actStatus == 0) &&
 80239ae:	2b00      	cmp	r3, #0
 80239b0:	d107      	bne.n	80239c2 <CheckBarrierOperation+0xb6>
				(gfSubBarrierRunning == FALSE || gSubBarrierStatus.param.actStatus == 0))
 80239b2:	4b7a      	ldr	r3, [pc, #488]	; (8023b9c <CheckBarrierOperation+0x290>)
 80239b4:	791b      	ldrb	r3, [r3, #4]
 80239b6:	f003 0308 	and.w	r3, r3, #8
 80239ba:	b2db      	uxtb	r3, r3
 80239bc:	2b00      	cmp	r3, #0
 80239be:	f040 8140 	bne.w	8023c42 <CheckBarrierOperation+0x336>
			{
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 80239c2:	4b77      	ldr	r3, [pc, #476]	; (8023ba0 <CheckBarrierOperation+0x294>)
 80239c4:	781b      	ldrb	r3, [r3, #0]
 80239c6:	2b02      	cmp	r3, #2
 80239c8:	d007      	beq.n	80239da <CheckBarrierOperation+0xce>
 80239ca:	4b75      	ldr	r3, [pc, #468]	; (8023ba0 <CheckBarrierOperation+0x294>)
 80239cc:	781b      	ldrb	r3, [r3, #0]
 80239ce:	2b01      	cmp	r3, #1
 80239d0:	d003      	beq.n	80239da <CheckBarrierOperation+0xce>
 80239d2:	4b74      	ldr	r3, [pc, #464]	; (8023ba4 <CheckBarrierOperation+0x298>)
 80239d4:	781b      	ldrb	r3, [r3, #0]
 80239d6:	2b01      	cmp	r3, #1
 80239d8:	d140      	bne.n	8023a5c <CheckBarrierOperation+0x150>
				{
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 80239da:	4b6d      	ldr	r3, [pc, #436]	; (8023b90 <CheckBarrierOperation+0x284>)
 80239dc:	781b      	ldrb	r3, [r3, #0]
 80239de:	2b00      	cmp	r3, #0
 80239e0:	d103      	bne.n	80239ea <CheckBarrierOperation+0xde>
						(gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_OPEN))
 80239e2:	4b6d      	ldr	r3, [pc, #436]	; (8023b98 <CheckBarrierOperation+0x28c>)
 80239e4:	781b      	ldrb	r3, [r3, #0]
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 80239e6:	2b00      	cmp	r3, #0
 80239e8:	d00c      	beq.n	8023a04 <CheckBarrierOperation+0xf8>
					{
						if (isCounterEnter == FALSE)
 80239ea:	4b6f      	ldr	r3, [pc, #444]	; (8023ba8 <CheckBarrierOperation+0x29c>)
 80239ec:	781b      	ldrb	r3, [r3, #0]
 80239ee:	f083 0301 	eor.w	r3, r3, #1
 80239f2:	b2db      	uxtb	r3, r3
 80239f4:	2b00      	cmp	r3, #0
 80239f6:	d030      	beq.n	8023a5a <CheckBarrierOperation+0x14e>
						{
							ControlBarrier(gbBarrierCmd);
 80239f8:	4b69      	ldr	r3, [pc, #420]	; (8023ba0 <CheckBarrierOperation+0x294>)
 80239fa:	781b      	ldrb	r3, [r3, #0]
 80239fc:	4618      	mov	r0, r3
 80239fe:	f7fd fd41 	bl	8021484 <ControlBarrier>
						if (isCounterEnter == FALSE)
 8023a02:	e02a      	b.n	8023a5a <CheckBarrierOperation+0x14e>
						}
					}
					else if (isSafetyOn4Init == FALSE)
 8023a04:	4b69      	ldr	r3, [pc, #420]	; (8023bac <CheckBarrierOperation+0x2a0>)
 8023a06:	781b      	ldrb	r3, [r3, #0]
 8023a08:	f083 0301 	eor.w	r3, r3, #1
 8023a0c:	b2db      	uxtb	r3, r3
 8023a0e:	2b00      	cmp	r3, #0
 8023a10:	f000 8113 	beq.w	8023c3a <CheckBarrierOperation+0x32e>
					{
						nBarrierErrorCnt = 0;
 8023a14:	4b66      	ldr	r3, [pc, #408]	; (8023bb0 <CheckBarrierOperation+0x2a4>)
 8023a16:	2200      	movs	r2, #0
 8023a18:	601a      	str	r2, [r3, #0]
						gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_NONE;
 8023a1a:	4a5b      	ldr	r2, [pc, #364]	; (8023b88 <CheckBarrierOperation+0x27c>)
 8023a1c:	7b13      	ldrb	r3, [r2, #12]
 8023a1e:	f36f 0301 	bfc	r3, #0, #2
 8023a22:	7313      	strb	r3, [r2, #12]
						gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_NONE;
 8023a24:	4a58      	ldr	r2, [pc, #352]	; (8023b88 <CheckBarrierOperation+0x27c>)
 8023a26:	7b13      	ldrb	r3, [r2, #12]
 8023a28:	f36f 0383 	bfc	r3, #2, #2
 8023a2c:	7313      	strb	r3, [r2, #12]
						gGCUStatus.bBarrierSw = 0x11;
 8023a2e:	4b56      	ldr	r3, [pc, #344]	; (8023b88 <CheckBarrierOperation+0x27c>)
 8023a30:	2211      	movs	r2, #17
 8023a32:	741a      	strb	r2, [r3, #16]

						if (CheckBarrierClosedStatus() && CheckZeroAuthCount())
 8023a34:	f7ff fd1a 	bl	802346c <CheckBarrierClosedStatus>
 8023a38:	4603      	mov	r3, r0
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	f000 80fd 	beq.w	8023c3a <CheckBarrierOperation+0x32e>
 8023a40:	f7ff fd34 	bl	80234ac <CheckZeroAuthCount>
 8023a44:	4603      	mov	r3, r0
 8023a46:	2b00      	cmp	r3, #0
 8023a48:	f000 80f7 	beq.w	8023c3a <CheckBarrierOperation+0x32e>
						{
							//PRINTL(" [CheckBarrier] Current Status is open");
							printf(" [CheckBarrier] Current Status is open \n");
 8023a4c:	4859      	ldr	r0, [pc, #356]	; (8023bb4 <CheckBarrierOperation+0x2a8>)
 8023a4e:	f005 ff01 	bl	8029854 <printf_>
							ControlBarrier(BARRIER_CLOSE_S);
 8023a52:	2003      	movs	r0, #3
 8023a54:	f7fd fd16 	bl	8021484 <ControlBarrier>
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 8023a58:	e0ef      	b.n	8023c3a <CheckBarrierOperation+0x32e>
 8023a5a:	e0ee      	b.n	8023c3a <CheckBarrierOperation+0x32e>
						}
					}
				}
				else if (gbBarrierCmd == BARRIER_CLOSE_S)
 8023a5c:	4b50      	ldr	r3, [pc, #320]	; (8023ba0 <CheckBarrierOperation+0x294>)
 8023a5e:	781b      	ldrb	r3, [r3, #0]
 8023a60:	2b03      	cmp	r3, #3
 8023a62:	f040 8127 	bne.w	8023cb4 <CheckBarrierOperation+0x3a8>
				{
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_CLOSE) ||
 8023a66:	4b4a      	ldr	r3, [pc, #296]	; (8023b90 <CheckBarrierOperation+0x284>)
 8023a68:	781b      	ldrb	r3, [r3, #0]
 8023a6a:	2b00      	cmp	r3, #0
 8023a6c:	d006      	beq.n	8023a7c <CheckBarrierOperation+0x170>
 8023a6e:	4b49      	ldr	r3, [pc, #292]	; (8023b94 <CheckBarrierOperation+0x288>)
 8023a70:	791b      	ldrb	r3, [r3, #4]
 8023a72:	f003 0307 	and.w	r3, r3, #7
 8023a76:	b2db      	uxtb	r3, r3
 8023a78:	2b02      	cmp	r3, #2
 8023a7a:	d10c      	bne.n	8023a96 <CheckBarrierOperation+0x18a>
						(gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_CLOSE))
 8023a7c:	4b46      	ldr	r3, [pc, #280]	; (8023b98 <CheckBarrierOperation+0x28c>)
 8023a7e:	781b      	ldrb	r3, [r3, #0]
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_CLOSE) ||
 8023a80:	2b00      	cmp	r3, #0
 8023a82:	f000 80a3 	beq.w	8023bcc <CheckBarrierOperation+0x2c0>
						(gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_CLOSE))
 8023a86:	4b45      	ldr	r3, [pc, #276]	; (8023b9c <CheckBarrierOperation+0x290>)
 8023a88:	791b      	ldrb	r3, [r3, #4]
 8023a8a:	f003 0307 	and.w	r3, r3, #7
 8023a8e:	b2db      	uxtb	r3, r3
 8023a90:	2b02      	cmp	r3, #2
 8023a92:	f000 809b 	beq.w	8023bcc <CheckBarrierOperation+0x2c0>
					{
						if (CheckBarrierClosedStatus())
 8023a96:	f7ff fce9 	bl	802346c <CheckBarrierClosedStatus>
 8023a9a:	4603      	mov	r3, r0
 8023a9c:	2b00      	cmp	r3, #0
 8023a9e:	f000 80ce 	beq.w	8023c3e <CheckBarrierOperation+0x332>
						{
							//PRINTL(" [CheckBarrier] pos:%d/%d", gMainBarrierStatus.param.posStatus, gSubBarrierStatus.param.posStatus);
							printf(" [CheckBarrier] pos:%d/%d \n", gMainBarrierStatus.param.posStatus, gSubBarrierStatus.param.posStatus);
 8023aa2:	4b3c      	ldr	r3, [pc, #240]	; (8023b94 <CheckBarrierOperation+0x288>)
 8023aa4:	791b      	ldrb	r3, [r3, #4]
 8023aa6:	f343 0302 	sbfx	r3, r3, #0, #3
 8023aaa:	b25b      	sxtb	r3, r3
 8023aac:	4619      	mov	r1, r3
 8023aae:	4b3b      	ldr	r3, [pc, #236]	; (8023b9c <CheckBarrierOperation+0x290>)
 8023ab0:	791b      	ldrb	r3, [r3, #4]
 8023ab2:	f343 0302 	sbfx	r3, r3, #0, #3
 8023ab6:	b25b      	sxtb	r3, r3
 8023ab8:	461a      	mov	r2, r3
 8023aba:	483f      	ldr	r0, [pc, #252]	; (8023bb8 <CheckBarrierOperation+0x2ac>)
 8023abc:	f005 feca 	bl	8029854 <printf_>

							if (isCalibrationStart == FALSE && (isSafetyOn == FALSE || gfisAuthTimeout == TRUE))
 8023ac0:	4b3e      	ldr	r3, [pc, #248]	; (8023bbc <CheckBarrierOperation+0x2b0>)
 8023ac2:	781b      	ldrb	r3, [r3, #0]
 8023ac4:	f083 0301 	eor.w	r3, r3, #1
 8023ac8:	b2db      	uxtb	r3, r3
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	f000 80b7 	beq.w	8023c3e <CheckBarrierOperation+0x332>
 8023ad0:	4b3b      	ldr	r3, [pc, #236]	; (8023bc0 <CheckBarrierOperation+0x2b4>)
 8023ad2:	781b      	ldrb	r3, [r3, #0]
 8023ad4:	f083 0301 	eor.w	r3, r3, #1
 8023ad8:	b2db      	uxtb	r3, r3
 8023ada:	2b00      	cmp	r3, #0
 8023adc:	d104      	bne.n	8023ae8 <CheckBarrierOperation+0x1dc>
 8023ade:	4b39      	ldr	r3, [pc, #228]	; (8023bc4 <CheckBarrierOperation+0x2b8>)
 8023ae0:	781b      	ldrb	r3, [r3, #0]
 8023ae2:	2b00      	cmp	r3, #0
 8023ae4:	f000 80ab 	beq.w	8023c3e <CheckBarrierOperation+0x332>
							{
								nBarrierErrorCnt++;
 8023ae8:	4b31      	ldr	r3, [pc, #196]	; (8023bb0 <CheckBarrierOperation+0x2a4>)
 8023aea:	681b      	ldr	r3, [r3, #0]
 8023aec:	3301      	adds	r3, #1
 8023aee:	4a30      	ldr	r2, [pc, #192]	; (8023bb0 <CheckBarrierOperation+0x2a4>)
 8023af0:	6013      	str	r3, [r2, #0]

								if (nBarrierErrorCnt == 20) // After 4 sec, Barrier fault is generated.
 8023af2:	4b2f      	ldr	r3, [pc, #188]	; (8023bb0 <CheckBarrierOperation+0x2a4>)
 8023af4:	681b      	ldr	r3, [r3, #0]
 8023af6:	2b14      	cmp	r3, #20
 8023af8:	f040 80a1 	bne.w	8023c3e <CheckBarrierOperation+0x332>
								{
									if (gGCUStatus.ModuleAlarm.b.nFDoor1 == FDOOR_ALARM_NONE && gGCUStatus.ModuleAlarm.b.nFDoor2 == FDOOR_ALARM_NONE)
 8023afc:	4b22      	ldr	r3, [pc, #136]	; (8023b88 <CheckBarrierOperation+0x27c>)
 8023afe:	7b1b      	ldrb	r3, [r3, #12]
 8023b00:	f003 0303 	and.w	r3, r3, #3
 8023b04:	b2db      	uxtb	r3, r3
 8023b06:	2b00      	cmp	r3, #0
 8023b08:	d10d      	bne.n	8023b26 <CheckBarrierOperation+0x21a>
 8023b0a:	4b1f      	ldr	r3, [pc, #124]	; (8023b88 <CheckBarrierOperation+0x27c>)
 8023b0c:	7b1b      	ldrb	r3, [r3, #12]
 8023b0e:	f003 030c 	and.w	r3, r3, #12
 8023b12:	b2db      	uxtb	r3, r3
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	d106      	bne.n	8023b26 <CheckBarrierOperation+0x21a>
									{
										ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8023b18:	4b2b      	ldr	r3, [pc, #172]	; (8023bc8 <CheckBarrierOperation+0x2bc>)
 8023b1a:	7a9b      	ldrb	r3, [r3, #10]
 8023b1c:	461a      	mov	r2, r3
 8023b1e:	2101      	movs	r1, #1
 8023b20:	2000      	movs	r0, #0
 8023b22:	f7fd fce7 	bl	80214f4 <ControlBuzzer>
									}

									if (gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_CLOSE)
 8023b26:	4b1a      	ldr	r3, [pc, #104]	; (8023b90 <CheckBarrierOperation+0x284>)
 8023b28:	781b      	ldrb	r3, [r3, #0]
 8023b2a:	2b00      	cmp	r3, #0
 8023b2c:	d00d      	beq.n	8023b4a <CheckBarrierOperation+0x23e>
 8023b2e:	4b19      	ldr	r3, [pc, #100]	; (8023b94 <CheckBarrierOperation+0x288>)
 8023b30:	791b      	ldrb	r3, [r3, #4]
 8023b32:	f003 0307 	and.w	r3, r3, #7
 8023b36:	b2db      	uxtb	r3, r3
 8023b38:	2b02      	cmp	r3, #2
 8023b3a:	d006      	beq.n	8023b4a <CheckBarrierOperation+0x23e>
										gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_CLOSE_FAULT;
 8023b3c:	4a12      	ldr	r2, [pc, #72]	; (8023b88 <CheckBarrierOperation+0x27c>)
 8023b3e:	7b13      	ldrb	r3, [r2, #12]
 8023b40:	f06f 0101 	mvn.w	r1, #1
 8023b44:	f361 0301 	bfi	r3, r1, #0, #2
 8023b48:	7313      	strb	r3, [r2, #12]
									if (gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_CLOSE)
 8023b4a:	4b13      	ldr	r3, [pc, #76]	; (8023b98 <CheckBarrierOperation+0x28c>)
 8023b4c:	781b      	ldrb	r3, [r3, #0]
 8023b4e:	2b00      	cmp	r3, #0
 8023b50:	d00d      	beq.n	8023b6e <CheckBarrierOperation+0x262>
 8023b52:	4b12      	ldr	r3, [pc, #72]	; (8023b9c <CheckBarrierOperation+0x290>)
 8023b54:	791b      	ldrb	r3, [r3, #4]
 8023b56:	f003 0307 	and.w	r3, r3, #7
 8023b5a:	b2db      	uxtb	r3, r3
 8023b5c:	2b02      	cmp	r3, #2
 8023b5e:	d006      	beq.n	8023b6e <CheckBarrierOperation+0x262>
										gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_CLOSE_FAULT;
 8023b60:	4a09      	ldr	r2, [pc, #36]	; (8023b88 <CheckBarrierOperation+0x27c>)
 8023b62:	7b13      	ldrb	r3, [r2, #12]
 8023b64:	f06f 0101 	mvn.w	r1, #1
 8023b68:	f361 0383 	bfi	r3, r1, #2, #2
 8023b6c:	7313      	strb	r3, [r2, #12]

									nBarrierErrorCnt = 0;
 8023b6e:	4b10      	ldr	r3, [pc, #64]	; (8023bb0 <CheckBarrierOperation+0x2a4>)
 8023b70:	2200      	movs	r2, #0
 8023b72:	601a      	str	r2, [r3, #0]
									ControlBarrier(BARRIER_CLOSE_S);
 8023b74:	2003      	movs	r0, #3
 8023b76:	f7fd fc85 	bl	8021484 <ControlBarrier>
						if (CheckBarrierClosedStatus())
 8023b7a:	e060      	b.n	8023c3e <CheckBarrierOperation+0x332>
 8023b7c:	240004b2 	.word	0x240004b2
 8023b80:	24000234 	.word	0x24000234
 8023b84:	2400001c 	.word	0x2400001c
 8023b88:	24000524 	.word	0x24000524
 8023b8c:	080325fc 	.word	0x080325fc
 8023b90:	24000560 	.word	0x24000560
 8023b94:	24000550 	.word	0x24000550
 8023b98:	24000561 	.word	0x24000561
 8023b9c:	24000558 	.word	0x24000558
 8023ba0:	24000028 	.word	0x24000028
 8023ba4:	240001a1 	.word	0x240001a1
 8023ba8:	2400049b 	.word	0x2400049b
 8023bac:	2400049c 	.word	0x2400049c
 8023bb0:	240004a4 	.word	0x240004a4
 8023bb4:	0803261c 	.word	0x0803261c
 8023bb8:	08032648 	.word	0x08032648
 8023bbc:	2400049e 	.word	0x2400049e
 8023bc0:	2400049a 	.word	0x2400049a
 8023bc4:	240001a8 	.word	0x240001a8
 8023bc8:	24000514 	.word	0x24000514
								}
							}
						}
					}
					else if (isSafetyOn4Init == FALSE)
 8023bcc:	4b3f      	ldr	r3, [pc, #252]	; (8023ccc <CheckBarrierOperation+0x3c0>)
 8023bce:	781b      	ldrb	r3, [r3, #0]
 8023bd0:	f083 0301 	eor.w	r3, r3, #1
 8023bd4:	b2db      	uxtb	r3, r3
 8023bd6:	2b00      	cmp	r3, #0
 8023bd8:	d06c      	beq.n	8023cb4 <CheckBarrierOperation+0x3a8>
					{
						nForceOpenCnt = 0;
 8023bda:	4b3d      	ldr	r3, [pc, #244]	; (8023cd0 <CheckBarrierOperation+0x3c4>)
 8023bdc:	2200      	movs	r2, #0
 8023bde:	601a      	str	r2, [r3, #0]
						nBarrierErrorCnt = 0;
 8023be0:	4b3c      	ldr	r3, [pc, #240]	; (8023cd4 <CheckBarrierOperation+0x3c8>)
 8023be2:	2200      	movs	r2, #0
 8023be4:	601a      	str	r2, [r3, #0]
						gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_NONE;
 8023be6:	4a3c      	ldr	r2, [pc, #240]	; (8023cd8 <CheckBarrierOperation+0x3cc>)
 8023be8:	7b13      	ldrb	r3, [r2, #12]
 8023bea:	f36f 0301 	bfc	r3, #0, #2
 8023bee:	7313      	strb	r3, [r2, #12]
						gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_NONE;
 8023bf0:	4a39      	ldr	r2, [pc, #228]	; (8023cd8 <CheckBarrierOperation+0x3cc>)
 8023bf2:	7b13      	ldrb	r3, [r2, #12]
 8023bf4:	f36f 0383 	bfc	r3, #2, #2
 8023bf8:	7313      	strb	r3, [r2, #12]
						gGCUStatus.bBarrierSw = 0x22;
 8023bfa:	4b37      	ldr	r3, [pc, #220]	; (8023cd8 <CheckBarrierOperation+0x3cc>)
 8023bfc:	2222      	movs	r2, #34	; 0x22
 8023bfe:	741a      	strb	r2, [r3, #16]
						isForceOpen = FALSE;
 8023c00:	4b36      	ldr	r3, [pc, #216]	; (8023cdc <CheckBarrierOperation+0x3d0>)
 8023c02:	2200      	movs	r2, #0
 8023c04:	701a      	strb	r2, [r3, #0]

						if (gGCUStatus.bAuthCount_EN)
 8023c06:	4b34      	ldr	r3, [pc, #208]	; (8023cd8 <CheckBarrierOperation+0x3cc>)
 8023c08:	791b      	ldrb	r3, [r3, #4]
 8023c0a:	b2db      	uxtb	r3, r3
 8023c0c:	2b00      	cmp	r3, #0
 8023c0e:	d003      	beq.n	8023c18 <CheckBarrierOperation+0x30c>
						{
							ControlBarrier(BARRIER_OPEN_FOR_EN);
 8023c10:	2002      	movs	r0, #2
 8023c12:	f7fd fc37 	bl	8021484 <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023c16:	e04d      	b.n	8023cb4 <CheckBarrierOperation+0x3a8>
						}
						else if (gGCUStatus.bAuthCount_EX)
 8023c18:	4b2f      	ldr	r3, [pc, #188]	; (8023cd8 <CheckBarrierOperation+0x3cc>)
 8023c1a:	795b      	ldrb	r3, [r3, #5]
 8023c1c:	b2db      	uxtb	r3, r3
 8023c1e:	2b00      	cmp	r3, #0
 8023c20:	d003      	beq.n	8023c2a <CheckBarrierOperation+0x31e>
						{
							ControlBarrier(BARRIER_OPEN_FOR_EX);
 8023c22:	2001      	movs	r0, #1
 8023c24:	f7fd fc2e 	bl	8021484 <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023c28:	e044      	b.n	8023cb4 <CheckBarrierOperation+0x3a8>
						}
						else if (gbPowerFailFlag == FLG_SET)
 8023c2a:	4b2d      	ldr	r3, [pc, #180]	; (8023ce0 <CheckBarrierOperation+0x3d4>)
 8023c2c:	781b      	ldrb	r3, [r3, #0]
 8023c2e:	2b01      	cmp	r3, #1
 8023c30:	d140      	bne.n	8023cb4 <CheckBarrierOperation+0x3a8>
						{
							ControlBarrier(BARRIER_OPEN_FOR_EX);
 8023c32:	2001      	movs	r0, #1
 8023c34:	f7fd fc26 	bl	8021484 <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023c38:	e03c      	b.n	8023cb4 <CheckBarrierOperation+0x3a8>
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 8023c3a:	bf00      	nop
 8023c3c:	e03a      	b.n	8023cb4 <CheckBarrierOperation+0x3a8>
						if (CheckBarrierClosedStatus())
 8023c3e:	bf00      	nop
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023c40:	e038      	b.n	8023cb4 <CheckBarrierOperation+0x3a8>
					}
				}
			}
			else
			{
				if (!timerTailgating.fStart && gGCUStatus.bAuthCount_EN == 0 && gGCUStatus.bAuthCount_EX == 0 && CheckBarrierClosedStatus())
 8023c42:	4b28      	ldr	r3, [pc, #160]	; (8023ce4 <CheckBarrierOperation+0x3d8>)
 8023c44:	781b      	ldrb	r3, [r3, #0]
 8023c46:	f083 0301 	eor.w	r3, r3, #1
 8023c4a:	b2db      	uxtb	r3, r3
 8023c4c:	2b00      	cmp	r3, #0
 8023c4e:	d02d      	beq.n	8023cac <CheckBarrierOperation+0x3a0>
 8023c50:	4b21      	ldr	r3, [pc, #132]	; (8023cd8 <CheckBarrierOperation+0x3cc>)
 8023c52:	791b      	ldrb	r3, [r3, #4]
 8023c54:	b2db      	uxtb	r3, r3
 8023c56:	2b00      	cmp	r3, #0
 8023c58:	d128      	bne.n	8023cac <CheckBarrierOperation+0x3a0>
 8023c5a:	4b1f      	ldr	r3, [pc, #124]	; (8023cd8 <CheckBarrierOperation+0x3cc>)
 8023c5c:	795b      	ldrb	r3, [r3, #5]
 8023c5e:	b2db      	uxtb	r3, r3
 8023c60:	2b00      	cmp	r3, #0
 8023c62:	d123      	bne.n	8023cac <CheckBarrierOperation+0x3a0>
 8023c64:	f7ff fc02 	bl	802346c <CheckBarrierClosedStatus>
 8023c68:	4603      	mov	r3, r0
 8023c6a:	2b00      	cmp	r3, #0
 8023c6c:	d01e      	beq.n	8023cac <CheckBarrierOperation+0x3a0>
				{
					if (isCalibrationStart == FALSE)
 8023c6e:	4b1e      	ldr	r3, [pc, #120]	; (8023ce8 <CheckBarrierOperation+0x3dc>)
 8023c70:	781b      	ldrb	r3, [r3, #0]
 8023c72:	f083 0301 	eor.w	r3, r3, #1
 8023c76:	b2db      	uxtb	r3, r3
 8023c78:	2b00      	cmp	r3, #0
 8023c7a:	d01d      	beq.n	8023cb8 <CheckBarrierOperation+0x3ac>
					{
						if (isForceOpenReady_EN == TRUE || isForceOpenReady_EX == TRUE)
 8023c7c:	4b1b      	ldr	r3, [pc, #108]	; (8023cec <CheckBarrierOperation+0x3e0>)
 8023c7e:	781b      	ldrb	r3, [r3, #0]
 8023c80:	2b00      	cmp	r3, #0
 8023c82:	d103      	bne.n	8023c8c <CheckBarrierOperation+0x380>
 8023c84:	4b1a      	ldr	r3, [pc, #104]	; (8023cf0 <CheckBarrierOperation+0x3e4>)
 8023c86:	781b      	ldrb	r3, [r3, #0]
 8023c88:	2b00      	cmp	r3, #0
 8023c8a:	d015      	beq.n	8023cb8 <CheckBarrierOperation+0x3ac>
						{
							nForceOpenCnt++;
 8023c8c:	4b10      	ldr	r3, [pc, #64]	; (8023cd0 <CheckBarrierOperation+0x3c4>)
 8023c8e:	681b      	ldr	r3, [r3, #0]
 8023c90:	3301      	adds	r3, #1
 8023c92:	4a0f      	ldr	r2, [pc, #60]	; (8023cd0 <CheckBarrierOperation+0x3c4>)
 8023c94:	6013      	str	r3, [r2, #0]

							if (nForceOpenCnt >= 2)
 8023c96:	4b0e      	ldr	r3, [pc, #56]	; (8023cd0 <CheckBarrierOperation+0x3c4>)
 8023c98:	681b      	ldr	r3, [r3, #0]
 8023c9a:	2b01      	cmp	r3, #1
 8023c9c:	dd0c      	ble.n	8023cb8 <CheckBarrierOperation+0x3ac>
							{
								//PRINTL(" [CheckBarrier] Force Open Detected!!");
								printf(" [CheckBarrier] Force Open Detected!!\n");
 8023c9e:	4815      	ldr	r0, [pc, #84]	; (8023cf4 <CheckBarrierOperation+0x3e8>)
 8023ca0:	f005 fdd8 	bl	8029854 <printf_>
								isForceOpen = TRUE;
 8023ca4:	4b0d      	ldr	r3, [pc, #52]	; (8023cdc <CheckBarrierOperation+0x3d0>)
 8023ca6:	2201      	movs	r2, #1
 8023ca8:	701a      	strb	r2, [r3, #0]
					if (isCalibrationStart == FALSE)
 8023caa:	e005      	b.n	8023cb8 <CheckBarrierOperation+0x3ac>
						}
					}
				}
				else
				{
					nBarrierErrorCnt = 0;
 8023cac:	4b09      	ldr	r3, [pc, #36]	; (8023cd4 <CheckBarrierOperation+0x3c8>)
 8023cae:	2200      	movs	r2, #0
 8023cb0:	601a      	str	r2, [r3, #0]
 8023cb2:	e002      	b.n	8023cba <CheckBarrierOperation+0x3ae>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023cb4:	bf00      	nop
 8023cb6:	e000      	b.n	8023cba <CheckBarrierOperation+0x3ae>
					if (isCalibrationStart == FALSE)
 8023cb8:	bf00      	nop
				}
			}

			Brr_Inq_Status();			//확인 필요 pms
 8023cba:	f7fc fd89 	bl	80207d0 <Brr_Inq_Status>
		if (IsTimeout(&timerBarrierCheck, dwBarrierCheckTime * TICK_COUNT_100MS))
 8023cbe:	e003      	b.n	8023cc8 <CheckBarrierOperation+0x3bc>
		}
	}
	else
	{
		SetTimer(&timerBarrierCheck);
 8023cc0:	480d      	ldr	r0, [pc, #52]	; (8023cf8 <CheckBarrierOperation+0x3ec>)
 8023cc2:	f00c feb7 	bl	8030a34 <SetTimer>
	}
}
 8023cc6:	bf00      	nop
 8023cc8:	bf00      	nop
 8023cca:	bd80      	pop	{r7, pc}
 8023ccc:	2400049c 	.word	0x2400049c
 8023cd0:	240004a8 	.word	0x240004a8
 8023cd4:	240004a4 	.word	0x240004a4
 8023cd8:	24000524 	.word	0x24000524
 8023cdc:	24000499 	.word	0x24000499
 8023ce0:	2400019f 	.word	0x2400019f
 8023ce4:	24000270 	.word	0x24000270
 8023ce8:	2400049e 	.word	0x2400049e
 8023cec:	24000496 	.word	0x24000496
 8023cf0:	24000497 	.word	0x24000497
 8023cf4:	08032664 	.word	0x08032664
 8023cf8:	24000234 	.word	0x24000234

08023cfc <ClearPassHistory>:

void ClearPassHistory(void)
{
 8023cfc:	b580      	push	{r7, lr}
 8023cfe:	af00      	add	r7, sp, #0
	if (gGCUStatus.PassageAlarm.b.nFromEN)
 8023d00:	4b3e      	ldr	r3, [pc, #248]	; (8023dfc <ClearPassHistory+0x100>)
 8023d02:	7a1b      	ldrb	r3, [r3, #8]
 8023d04:	f003 0307 	and.w	r3, r3, #7
 8023d08:	b2db      	uxtb	r3, r3
 8023d0a:	2b00      	cmp	r3, #0
 8023d0c:	d00f      	beq.n	8023d2e <ClearPassHistory+0x32>
	{
		if (!psenNewSwing.side.entry)
 8023d0e:	4b3c      	ldr	r3, [pc, #240]	; (8023e00 <ClearPassHistory+0x104>)
 8023d10:	f993 3000 	ldrsb.w	r3, [r3]
 8023d14:	2b00      	cmp	r3, #0
 8023d16:	d10a      	bne.n	8023d2e <ClearPassHistory+0x32>
		{
			gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8023d18:	4a38      	ldr	r2, [pc, #224]	; (8023dfc <ClearPassHistory+0x100>)
 8023d1a:	7a13      	ldrb	r3, [r2, #8]
 8023d1c:	f36f 0302 	bfc	r3, #0, #3
 8023d20:	7213      	strb	r3, [r2, #8]
			gisEntryPassenger = FALSE;
 8023d22:	4b38      	ldr	r3, [pc, #224]	; (8023e04 <ClearPassHistory+0x108>)
 8023d24:	2200      	movs	r2, #0
 8023d26:	701a      	strb	r2, [r3, #0]
			{
				gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
				//PRINTL(" [EN] Clear Illegal Enter");
				printf(" [EN] Clear Illegal Enter \n");
			}
			ResetTimer(&timerIllegalEnterEN);
 8023d28:	4837      	ldr	r0, [pc, #220]	; (8023e08 <ClearPassHistory+0x10c>)
 8023d2a:	f00c fe97 	bl	8030a5c <ResetTimer>
		}
	}

	if (gGCUStatus.PassageAlarm.b.nFromEX)
 8023d2e:	4b33      	ldr	r3, [pc, #204]	; (8023dfc <ClearPassHistory+0x100>)
 8023d30:	7a1b      	ldrb	r3, [r3, #8]
 8023d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8023d36:	b2db      	uxtb	r3, r3
 8023d38:	2b00      	cmp	r3, #0
 8023d3a:	d00f      	beq.n	8023d5c <ClearPassHistory+0x60>
	{
		if (!psenNewSwing.side.exit)
 8023d3c:	4b30      	ldr	r3, [pc, #192]	; (8023e00 <ClearPassHistory+0x104>)
 8023d3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8023d42:	2b00      	cmp	r3, #0
 8023d44:	d10a      	bne.n	8023d5c <ClearPassHistory+0x60>
		{
			gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8023d46:	4a2d      	ldr	r2, [pc, #180]	; (8023dfc <ClearPassHistory+0x100>)
 8023d48:	7a13      	ldrb	r3, [r2, #8]
 8023d4a:	f36f 1306 	bfc	r3, #4, #3
 8023d4e:	7213      	strb	r3, [r2, #8]
			gisExitPassenger = FALSE;
 8023d50:	4b2e      	ldr	r3, [pc, #184]	; (8023e0c <ClearPassHistory+0x110>)
 8023d52:	2200      	movs	r2, #0
 8023d54:	701a      	strb	r2, [r3, #0]
			{
				gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
				//PRINTL(" [EX] Clear Illegal Enter");
				printf(" [EX] Clear Illegal Enter \n");
			}
			ResetTimer(&timerIllegalEnterEN);
 8023d56:	482c      	ldr	r0, [pc, #176]	; (8023e08 <ClearPassHistory+0x10c>)
 8023d58:	f00c fe80 	bl	8030a5c <ResetTimer>
		}
	}

	if (FLG_OFF == gbEmergencyFlag)
 8023d5c:	4b2c      	ldr	r3, [pc, #176]	; (8023e10 <ClearPassHistory+0x114>)
 8023d5e:	781b      	ldrb	r3, [r3, #0]
 8023d60:	2b00      	cmp	r3, #0
 8023d62:	d148      	bne.n	8023df6 <ClearPassHistory+0xfa>
	{
		if (gCurGCUOpMode.bServiceMode_EN == NO_SERVICE || (gGCUStatus.bAuthCount_EX && gCurGCUOpMode.bServiceMode_EN == IN_SERVICE))
 8023d64:	4b2b      	ldr	r3, [pc, #172]	; (8023e14 <ClearPassHistory+0x118>)
 8023d66:	781b      	ldrb	r3, [r3, #0]
 8023d68:	2b00      	cmp	r3, #0
 8023d6a:	d008      	beq.n	8023d7e <ClearPassHistory+0x82>
 8023d6c:	4b23      	ldr	r3, [pc, #140]	; (8023dfc <ClearPassHistory+0x100>)
 8023d6e:	795b      	ldrb	r3, [r3, #5]
 8023d70:	b2db      	uxtb	r3, r3
 8023d72:	2b00      	cmp	r3, #0
 8023d74:	d00a      	beq.n	8023d8c <ClearPassHistory+0x90>
 8023d76:	4b27      	ldr	r3, [pc, #156]	; (8023e14 <ClearPassHistory+0x118>)
 8023d78:	781b      	ldrb	r3, [r3, #0]
 8023d7a:	2b01      	cmp	r3, #1
 8023d7c:	d106      	bne.n	8023d8c <ClearPassHistory+0x90>
		{
			gbLampCMD_EN = DIR_RED;
 8023d7e:	4b26      	ldr	r3, [pc, #152]	; (8023e18 <ClearPassHistory+0x11c>)
 8023d80:	2202      	movs	r2, #2
 8023d82:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EN = LAMP_OFF;
 8023d84:	4b25      	ldr	r3, [pc, #148]	; (8023e1c <ClearPassHistory+0x120>)
 8023d86:	2200      	movs	r2, #0
 8023d88:	701a      	strb	r2, [r3, #0]
 8023d8a:	e005      	b.n	8023d98 <ClearPassHistory+0x9c>
		}
		else
		{
			gbLampCMD_EN = DIR_GREEN;
 8023d8c:	4b22      	ldr	r3, [pc, #136]	; (8023e18 <ClearPassHistory+0x11c>)
 8023d8e:	2201      	movs	r2, #1
 8023d90:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EX = LAMP_OFF;
 8023d92:	4b23      	ldr	r3, [pc, #140]	; (8023e20 <ClearPassHistory+0x124>)
 8023d94:	2200      	movs	r2, #0
 8023d96:	701a      	strb	r2, [r3, #0]
		}

		if (gCurGCUOpMode.bServiceMode_EX == NO_SERVICE || (gGCUStatus.bAuthCount_EN && gCurGCUOpMode.bServiceMode_EX == IN_SERVICE))
 8023d98:	4b1e      	ldr	r3, [pc, #120]	; (8023e14 <ClearPassHistory+0x118>)
 8023d9a:	785b      	ldrb	r3, [r3, #1]
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	d008      	beq.n	8023db2 <ClearPassHistory+0xb6>
 8023da0:	4b16      	ldr	r3, [pc, #88]	; (8023dfc <ClearPassHistory+0x100>)
 8023da2:	791b      	ldrb	r3, [r3, #4]
 8023da4:	b2db      	uxtb	r3, r3
 8023da6:	2b00      	cmp	r3, #0
 8023da8:	d00a      	beq.n	8023dc0 <ClearPassHistory+0xc4>
 8023daa:	4b1a      	ldr	r3, [pc, #104]	; (8023e14 <ClearPassHistory+0x118>)
 8023dac:	785b      	ldrb	r3, [r3, #1]
 8023dae:	2b01      	cmp	r3, #1
 8023db0:	d106      	bne.n	8023dc0 <ClearPassHistory+0xc4>
		{
			gbLampCMD_EX = DIR_RED;
 8023db2:	4b1c      	ldr	r3, [pc, #112]	; (8023e24 <ClearPassHistory+0x128>)
 8023db4:	2202      	movs	r2, #2
 8023db6:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EX = LAMP_OFF;
 8023db8:	4b19      	ldr	r3, [pc, #100]	; (8023e20 <ClearPassHistory+0x124>)
 8023dba:	2200      	movs	r2, #0
 8023dbc:	701a      	strb	r2, [r3, #0]
 8023dbe:	e005      	b.n	8023dcc <ClearPassHistory+0xd0>
		}
		else
		{
			gbLampCMD_EX = DIR_GREEN;
 8023dc0:	4b18      	ldr	r3, [pc, #96]	; (8023e24 <ClearPassHistory+0x128>)
 8023dc2:	2201      	movs	r2, #1
 8023dc4:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EN = LAMP_OFF;
 8023dc6:	4b15      	ldr	r3, [pc, #84]	; (8023e1c <ClearPassHistory+0x120>)
 8023dc8:	2200      	movs	r2, #0
 8023dca:	701a      	strb	r2, [r3, #0]
		}

		ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 8023dcc:	2200      	movs	r2, #0
 8023dce:	2100      	movs	r1, #0
 8023dd0:	2000      	movs	r0, #0
 8023dd2:	f7fd fb8f 	bl	80214f4 <ControlBuzzer>
		ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 8023dd6:	4b10      	ldr	r3, [pc, #64]	; (8023e18 <ClearPassHistory+0x11c>)
 8023dd8:	781b      	ldrb	r3, [r3, #0]
 8023dda:	4a12      	ldr	r2, [pc, #72]	; (8023e24 <ClearPassHistory+0x128>)
 8023ddc:	7812      	ldrb	r2, [r2, #0]
 8023dde:	4611      	mov	r1, r2
 8023de0:	4618      	mov	r0, r3
 8023de2:	f7fd fbe1 	bl	80215a8 <ControlDirectionLED>
		ControlIndicator(gbIndicatorCMD_EN, gbIndicatorCMD_EX, 0, FALSE);
 8023de6:	4b0d      	ldr	r3, [pc, #52]	; (8023e1c <ClearPassHistory+0x120>)
 8023de8:	7818      	ldrb	r0, [r3, #0]
 8023dea:	4b0d      	ldr	r3, [pc, #52]	; (8023e20 <ClearPassHistory+0x124>)
 8023dec:	7819      	ldrb	r1, [r3, #0]
 8023dee:	2300      	movs	r3, #0
 8023df0:	2200      	movs	r2, #0
 8023df2:	f7fd fc35 	bl	8021660 <ControlIndicator>
	}
}
 8023df6:	bf00      	nop
 8023df8:	bd80      	pop	{r7, pc}
 8023dfa:	bf00      	nop
 8023dfc:	24000524 	.word	0x24000524
 8023e00:	24000480 	.word	0x24000480
 8023e04:	240004af 	.word	0x240004af
 8023e08:	24000210 	.word	0x24000210
 8023e0c:	240004b0 	.word	0x240004b0
 8023e10:	240001a1 	.word	0x240001a1
 8023e14:	24000548 	.word	0x24000548
 8023e18:	2400019d 	.word	0x2400019d
 8023e1c:	2400019b 	.word	0x2400019b
 8023e20:	2400019c 	.word	0x2400019c
 8023e24:	2400019e 	.word	0x2400019e

08023e28 <CheckEntranceSwing>:

void CheckEntranceSwing(void)
{
 8023e28:	b580      	push	{r7, lr}
 8023e2a:	af00      	add	r7, sp, #0
	if (gisEntryPassenger)
 8023e2c:	4b80      	ldr	r3, [pc, #512]	; (8024030 <CheckEntranceSwing+0x208>)
 8023e2e:	781b      	ldrb	r3, [r3, #0]
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	d059      	beq.n	8023ee8 <CheckEntranceSwing+0xc0>
	{
		if (gGCUStatus.bAuthCount_EN)
 8023e34:	4b7f      	ldr	r3, [pc, #508]	; (8024034 <CheckEntranceSwing+0x20c>)
 8023e36:	791b      	ldrb	r3, [r3, #4]
 8023e38:	b2db      	uxtb	r3, r3
 8023e3a:	2b00      	cmp	r3, #0
 8023e3c:	d021      	beq.n	8023e82 <CheckEntranceSwing+0x5a>
		{
			if (!psenNewSwing.side.entry)
 8023e3e:	4b7e      	ldr	r3, [pc, #504]	; (8024038 <CheckEntranceSwing+0x210>)
 8023e40:	f993 3000 	ldrsb.w	r3, [r3]
 8023e44:	2b00      	cmp	r3, #0
 8023e46:	d171      	bne.n	8023f2c <CheckEntranceSwing+0x104>
			{
				ResetTimer(&timerIllegalEnterEN);
 8023e48:	487c      	ldr	r0, [pc, #496]	; (802403c <CheckEntranceSwing+0x214>)
 8023e4a:	f00c fe07 	bl	8030a5c <ResetTimer>
				gisEntryPassenger = FALSE;
 8023e4e:	4b78      	ldr	r3, [pc, #480]	; (8024030 <CheckEntranceSwing+0x208>)
 8023e50:	2200      	movs	r2, #0
 8023e52:	701a      	strb	r2, [r3, #0]
				isPassReady_EN = FALSE;
 8023e54:	4b7a      	ldr	r3, [pc, #488]	; (8024040 <CheckEntranceSwing+0x218>)
 8023e56:	2200      	movs	r2, #0
 8023e58:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EN = PASS_PATN_NONE;
 8023e5a:	4b7a      	ldr	r3, [pc, #488]	; (8024044 <CheckEntranceSwing+0x21c>)
 8023e5c:	2200      	movs	r2, #0
 8023e5e:	701a      	strb	r2, [r3, #0]
				bPassPattern_EN = PASS_PATN_NONE;
 8023e60:	4b79      	ldr	r3, [pc, #484]	; (8024048 <CheckEntranceSwing+0x220>)
 8023e62:	2200      	movs	r2, #0
 8023e64:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8023e66:	4a73      	ldr	r2, [pc, #460]	; (8024034 <CheckEntranceSwing+0x20c>)
 8023e68:	7a13      	ldrb	r3, [r2, #8]
 8023e6a:	f36f 13c7 	bfc	r3, #7, #1
 8023e6e:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023e70:	4b76      	ldr	r3, [pc, #472]	; (802404c <CheckEntranceSwing+0x224>)
 8023e72:	2200      	movs	r2, #0
 8023e74:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023e76:	f7ff ff41 	bl	8023cfc <ClearPassHistory>
				//PRINTL(" [EN] Enter Clear 1");
				printf(" [EN] Enter Clear 1\n");
 8023e7a:	4875      	ldr	r0, [pc, #468]	; (8024050 <CheckEntranceSwing+0x228>)
 8023e7c:	f005 fcea 	bl	8029854 <printf_>
 8023e80:	e054      	b.n	8023f2c <CheckEntranceSwing+0x104>
			}
		}
		else
		{
			if (!psenNewSwing.section.enter_EN && !psenNewSwing.section.lower_EN)
 8023e82:	4b6d      	ldr	r3, [pc, #436]	; (8024038 <CheckEntranceSwing+0x210>)
 8023e84:	781b      	ldrb	r3, [r3, #0]
 8023e86:	f003 0303 	and.w	r3, r3, #3
 8023e8a:	b2db      	uxtb	r3, r3
 8023e8c:	2b00      	cmp	r3, #0
 8023e8e:	d14d      	bne.n	8023f2c <CheckEntranceSwing+0x104>
 8023e90:	4b69      	ldr	r3, [pc, #420]	; (8024038 <CheckEntranceSwing+0x210>)
 8023e92:	781b      	ldrb	r3, [r3, #0]
 8023e94:	f023 030f 	bic.w	r3, r3, #15
 8023e98:	b2db      	uxtb	r3, r3
 8023e9a:	2b00      	cmp	r3, #0
 8023e9c:	d146      	bne.n	8023f2c <CheckEntranceSwing+0x104>
			{
				ResetTimer(&timerIllegalEnterEN);
 8023e9e:	4867      	ldr	r0, [pc, #412]	; (802403c <CheckEntranceSwing+0x214>)
 8023ea0:	f00c fddc 	bl	8030a5c <ResetTimer>
				gisEntryPassenger = FALSE;
 8023ea4:	4b62      	ldr	r3, [pc, #392]	; (8024030 <CheckEntranceSwing+0x208>)
 8023ea6:	2200      	movs	r2, #0
 8023ea8:	701a      	strb	r2, [r3, #0]
				isPassReady_EN = FALSE;
 8023eaa:	4b65      	ldr	r3, [pc, #404]	; (8024040 <CheckEntranceSwing+0x218>)
 8023eac:	2200      	movs	r2, #0
 8023eae:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EN = PASS_PATN_NONE;
 8023eb0:	4b64      	ldr	r3, [pc, #400]	; (8024044 <CheckEntranceSwing+0x21c>)
 8023eb2:	2200      	movs	r2, #0
 8023eb4:	701a      	strb	r2, [r3, #0]
				bPassPattern_EN = PASS_PATN_NONE;
 8023eb6:	4b64      	ldr	r3, [pc, #400]	; (8024048 <CheckEntranceSwing+0x220>)
 8023eb8:	2200      	movs	r2, #0
 8023eba:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8023ebc:	4a5d      	ldr	r2, [pc, #372]	; (8024034 <CheckEntranceSwing+0x20c>)
 8023ebe:	7a13      	ldrb	r3, [r2, #8]
 8023ec0:	f36f 13c7 	bfc	r3, #7, #1
 8023ec4:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023ec6:	4b61      	ldr	r3, [pc, #388]	; (802404c <CheckEntranceSwing+0x224>)
 8023ec8:	2200      	movs	r2, #0
 8023eca:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023ecc:	f7ff ff16 	bl	8023cfc <ClearPassHistory>
				if (gGCUStatus.bAuthCount_EX)
 8023ed0:	4b58      	ldr	r3, [pc, #352]	; (8024034 <CheckEntranceSwing+0x20c>)
 8023ed2:	795b      	ldrb	r3, [r3, #5]
 8023ed4:	b2db      	uxtb	r3, r3
 8023ed6:	2b00      	cmp	r3, #0
 8023ed8:	d002      	beq.n	8023ee0 <CheckEntranceSwing+0xb8>
				{
					ControlBarrier(BARRIER_OPEN_FOR_EX);
 8023eda:	2001      	movs	r0, #1
 8023edc:	f7fd fad2 	bl	8021484 <ControlBarrier>
				}
				//PRINTL(" [EN] Enter Clear 2");
				printf(" [EN] Enter Clear 2\n");
 8023ee0:	485c      	ldr	r0, [pc, #368]	; (8024054 <CheckEntranceSwing+0x22c>)
 8023ee2:	f005 fcb7 	bl	8029854 <printf_>
 8023ee6:	e021      	b.n	8023f2c <CheckEntranceSwing+0x104>
	else
	{
		// TODO: Check needs of this alarm
		if (gGCUStatus.PassageAlarm.b.nPassOverFromEX != ON)
		{
			if (psenNewSwing.dirEntry.enter)
 8023ee8:	4b53      	ldr	r3, [pc, #332]	; (8024038 <CheckEntranceSwing+0x210>)
 8023eea:	781b      	ldrb	r3, [r3, #0]
 8023eec:	f003 0303 	and.w	r3, r3, #3
 8023ef0:	b2db      	uxtb	r3, r3
 8023ef2:	2b00      	cmp	r3, #0
 8023ef4:	d01a      	beq.n	8023f2c <CheckEntranceSwing+0x104>
			{
				bEnterPattern_EN |= psenNewSwing.dirEntry.enter;
 8023ef6:	4b50      	ldr	r3, [pc, #320]	; (8024038 <CheckEntranceSwing+0x210>)
 8023ef8:	781b      	ldrb	r3, [r3, #0]
 8023efa:	f343 0301 	sbfx	r3, r3, #0, #2
 8023efe:	b25b      	sxtb	r3, r3
 8023f00:	461a      	mov	r2, r3
 8023f02:	4b50      	ldr	r3, [pc, #320]	; (8024044 <CheckEntranceSwing+0x21c>)
 8023f04:	781b      	ldrb	r3, [r3, #0]
 8023f06:	b25b      	sxtb	r3, r3
 8023f08:	4313      	orrs	r3, r2
 8023f0a:	b25b      	sxtb	r3, r3
 8023f0c:	b2da      	uxtb	r2, r3
 8023f0e:	4b4d      	ldr	r3, [pc, #308]	; (8024044 <CheckEntranceSwing+0x21c>)
 8023f10:	701a      	strb	r2, [r3, #0]

				if (bEnterPattern_EN >= PASS_PATN_ENTER)
 8023f12:	4b4c      	ldr	r3, [pc, #304]	; (8024044 <CheckEntranceSwing+0x21c>)
 8023f14:	781b      	ldrb	r3, [r3, #0]
 8023f16:	2b02      	cmp	r3, #2
 8023f18:	d908      	bls.n	8023f2c <CheckEntranceSwing+0x104>
				{
					gisEntryPassenger = TRUE;
 8023f1a:	4b45      	ldr	r3, [pc, #276]	; (8024030 <CheckEntranceSwing+0x208>)
 8023f1c:	2201      	movs	r2, #1
 8023f1e:	701a      	strb	r2, [r3, #0]

					//PRINTL(" [EN] Enter - [%d]", bEnterPattern_EN);
					printf(" [EN] Enter - [%d]\n", bEnterPattern_EN);
 8023f20:	4b48      	ldr	r3, [pc, #288]	; (8024044 <CheckEntranceSwing+0x21c>)
 8023f22:	781b      	ldrb	r3, [r3, #0]
 8023f24:	4619      	mov	r1, r3
 8023f26:	484c      	ldr	r0, [pc, #304]	; (8024058 <CheckEntranceSwing+0x230>)
 8023f28:	f005 fc94 	bl	8029854 <printf_>
				}
			}
		}
	}

	if (gisExitPassenger)
 8023f2c:	4b4b      	ldr	r3, [pc, #300]	; (802405c <CheckEntranceSwing+0x234>)
 8023f2e:	781b      	ldrb	r3, [r3, #0]
 8023f30:	2b00      	cmp	r3, #0
 8023f32:	d059      	beq.n	8023fe8 <CheckEntranceSwing+0x1c0>
	{
		if (gGCUStatus.bAuthCount_EX)
 8023f34:	4b3f      	ldr	r3, [pc, #252]	; (8024034 <CheckEntranceSwing+0x20c>)
 8023f36:	795b      	ldrb	r3, [r3, #5]
 8023f38:	b2db      	uxtb	r3, r3
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	d021      	beq.n	8023f82 <CheckEntranceSwing+0x15a>
		{
			if (!psenNewSwing.side.exit)
 8023f3e:	4b3e      	ldr	r3, [pc, #248]	; (8024038 <CheckEntranceSwing+0x210>)
 8023f40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8023f44:	2b00      	cmp	r3, #0
 8023f46:	d171      	bne.n	802402c <CheckEntranceSwing+0x204>
			{
				ResetTimer(&timerIllegalEnterEX);
 8023f48:	4845      	ldr	r0, [pc, #276]	; (8024060 <CheckEntranceSwing+0x238>)
 8023f4a:	f00c fd87 	bl	8030a5c <ResetTimer>
				gisExitPassenger = FALSE;
 8023f4e:	4b43      	ldr	r3, [pc, #268]	; (802405c <CheckEntranceSwing+0x234>)
 8023f50:	2200      	movs	r2, #0
 8023f52:	701a      	strb	r2, [r3, #0]
				isPassReady_EX = FALSE;
 8023f54:	4b43      	ldr	r3, [pc, #268]	; (8024064 <CheckEntranceSwing+0x23c>)
 8023f56:	2200      	movs	r2, #0
 8023f58:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EX = PASS_PATN_NONE;
 8023f5a:	4b43      	ldr	r3, [pc, #268]	; (8024068 <CheckEntranceSwing+0x240>)
 8023f5c:	2200      	movs	r2, #0
 8023f5e:	701a      	strb	r2, [r3, #0]
				bPassPattern_EX = PASS_PATN_NONE;
 8023f60:	4b42      	ldr	r3, [pc, #264]	; (802406c <CheckEntranceSwing+0x244>)
 8023f62:	2200      	movs	r2, #0
 8023f64:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8023f66:	4a33      	ldr	r2, [pc, #204]	; (8024034 <CheckEntranceSwing+0x20c>)
 8023f68:	7a13      	ldrb	r3, [r2, #8]
 8023f6a:	f36f 03c3 	bfc	r3, #3, #1
 8023f6e:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023f70:	4b36      	ldr	r3, [pc, #216]	; (802404c <CheckEntranceSwing+0x224>)
 8023f72:	2200      	movs	r2, #0
 8023f74:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023f76:	f7ff fec1 	bl	8023cfc <ClearPassHistory>
				//PRINTL(" [EX] Enter Clear 1");
				printf(" [EX] Enter Clear 1\n");
 8023f7a:	483d      	ldr	r0, [pc, #244]	; (8024070 <CheckEntranceSwing+0x248>)
 8023f7c:	f005 fc6a 	bl	8029854 <printf_>
					printf(" [EX] Enter - [%d]\n", bEnterPattern_EX);
				}
			}
		}
	}
}
 8023f80:	e054      	b.n	802402c <CheckEntranceSwing+0x204>
			if (!psenNewSwing.section.enter_EX && !psenNewSwing.section.lower_EX)
 8023f82:	4b2d      	ldr	r3, [pc, #180]	; (8024038 <CheckEntranceSwing+0x210>)
 8023f84:	785b      	ldrb	r3, [r3, #1]
 8023f86:	f003 0303 	and.w	r3, r3, #3
 8023f8a:	b2db      	uxtb	r3, r3
 8023f8c:	2b00      	cmp	r3, #0
 8023f8e:	d14d      	bne.n	802402c <CheckEntranceSwing+0x204>
 8023f90:	4b29      	ldr	r3, [pc, #164]	; (8024038 <CheckEntranceSwing+0x210>)
 8023f92:	785b      	ldrb	r3, [r3, #1]
 8023f94:	f023 030f 	bic.w	r3, r3, #15
 8023f98:	b2db      	uxtb	r3, r3
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	d146      	bne.n	802402c <CheckEntranceSwing+0x204>
				ResetTimer(&timerIllegalEnterEX);
 8023f9e:	4830      	ldr	r0, [pc, #192]	; (8024060 <CheckEntranceSwing+0x238>)
 8023fa0:	f00c fd5c 	bl	8030a5c <ResetTimer>
				gisExitPassenger = FALSE;
 8023fa4:	4b2d      	ldr	r3, [pc, #180]	; (802405c <CheckEntranceSwing+0x234>)
 8023fa6:	2200      	movs	r2, #0
 8023fa8:	701a      	strb	r2, [r3, #0]
				isPassReady_EX = FALSE;
 8023faa:	4b2e      	ldr	r3, [pc, #184]	; (8024064 <CheckEntranceSwing+0x23c>)
 8023fac:	2200      	movs	r2, #0
 8023fae:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EX = PASS_PATN_NONE;
 8023fb0:	4b2d      	ldr	r3, [pc, #180]	; (8024068 <CheckEntranceSwing+0x240>)
 8023fb2:	2200      	movs	r2, #0
 8023fb4:	701a      	strb	r2, [r3, #0]
				bPassPattern_EX = PASS_PATN_NONE;
 8023fb6:	4b2d      	ldr	r3, [pc, #180]	; (802406c <CheckEntranceSwing+0x244>)
 8023fb8:	2200      	movs	r2, #0
 8023fba:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8023fbc:	4a1d      	ldr	r2, [pc, #116]	; (8024034 <CheckEntranceSwing+0x20c>)
 8023fbe:	7a13      	ldrb	r3, [r2, #8]
 8023fc0:	f36f 03c3 	bfc	r3, #3, #1
 8023fc4:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023fc6:	4b21      	ldr	r3, [pc, #132]	; (802404c <CheckEntranceSwing+0x224>)
 8023fc8:	2200      	movs	r2, #0
 8023fca:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023fcc:	f7ff fe96 	bl	8023cfc <ClearPassHistory>
				if (gGCUStatus.bAuthCount_EN)
 8023fd0:	4b18      	ldr	r3, [pc, #96]	; (8024034 <CheckEntranceSwing+0x20c>)
 8023fd2:	791b      	ldrb	r3, [r3, #4]
 8023fd4:	b2db      	uxtb	r3, r3
 8023fd6:	2b00      	cmp	r3, #0
 8023fd8:	d002      	beq.n	8023fe0 <CheckEntranceSwing+0x1b8>
					ControlBarrier(BARRIER_OPEN_FOR_EN);
 8023fda:	2002      	movs	r0, #2
 8023fdc:	f7fd fa52 	bl	8021484 <ControlBarrier>
				printf(" [EX] Enter Clear 2\n");
 8023fe0:	4824      	ldr	r0, [pc, #144]	; (8024074 <CheckEntranceSwing+0x24c>)
 8023fe2:	f005 fc37 	bl	8029854 <printf_>
}
 8023fe6:	e021      	b.n	802402c <CheckEntranceSwing+0x204>
			if (psenNewSwing.dirExit.enter)
 8023fe8:	4b13      	ldr	r3, [pc, #76]	; (8024038 <CheckEntranceSwing+0x210>)
 8023fea:	785b      	ldrb	r3, [r3, #1]
 8023fec:	f003 0303 	and.w	r3, r3, #3
 8023ff0:	b2db      	uxtb	r3, r3
 8023ff2:	2b00      	cmp	r3, #0
 8023ff4:	d01a      	beq.n	802402c <CheckEntranceSwing+0x204>
				bEnterPattern_EX |= psenNewSwing.dirExit.enter;
 8023ff6:	4b10      	ldr	r3, [pc, #64]	; (8024038 <CheckEntranceSwing+0x210>)
 8023ff8:	785b      	ldrb	r3, [r3, #1]
 8023ffa:	f343 0301 	sbfx	r3, r3, #0, #2
 8023ffe:	b25b      	sxtb	r3, r3
 8024000:	461a      	mov	r2, r3
 8024002:	4b19      	ldr	r3, [pc, #100]	; (8024068 <CheckEntranceSwing+0x240>)
 8024004:	781b      	ldrb	r3, [r3, #0]
 8024006:	b25b      	sxtb	r3, r3
 8024008:	4313      	orrs	r3, r2
 802400a:	b25b      	sxtb	r3, r3
 802400c:	b2da      	uxtb	r2, r3
 802400e:	4b16      	ldr	r3, [pc, #88]	; (8024068 <CheckEntranceSwing+0x240>)
 8024010:	701a      	strb	r2, [r3, #0]
				if (bEnterPattern_EX >= PASS_PATN_ENTER)
 8024012:	4b15      	ldr	r3, [pc, #84]	; (8024068 <CheckEntranceSwing+0x240>)
 8024014:	781b      	ldrb	r3, [r3, #0]
 8024016:	2b02      	cmp	r3, #2
 8024018:	d908      	bls.n	802402c <CheckEntranceSwing+0x204>
					gisExitPassenger = TRUE;
 802401a:	4b10      	ldr	r3, [pc, #64]	; (802405c <CheckEntranceSwing+0x234>)
 802401c:	2201      	movs	r2, #1
 802401e:	701a      	strb	r2, [r3, #0]
					printf(" [EX] Enter - [%d]\n", bEnterPattern_EX);
 8024020:	4b11      	ldr	r3, [pc, #68]	; (8024068 <CheckEntranceSwing+0x240>)
 8024022:	781b      	ldrb	r3, [r3, #0]
 8024024:	4619      	mov	r1, r3
 8024026:	4814      	ldr	r0, [pc, #80]	; (8024078 <CheckEntranceSwing+0x250>)
 8024028:	f005 fc14 	bl	8029854 <printf_>
}
 802402c:	bf00      	nop
 802402e:	bd80      	pop	{r7, pc}
 8024030:	240004af 	.word	0x240004af
 8024034:	24000524 	.word	0x24000524
 8024038:	24000480 	.word	0x24000480
 802403c:	24000210 	.word	0x24000210
 8024040:	24000490 	.word	0x24000490
 8024044:	2400048c 	.word	0x2400048c
 8024048:	2400048e 	.word	0x2400048e
 802404c:	2400049b 	.word	0x2400049b
 8024050:	0803268c 	.word	0x0803268c
 8024054:	080326a4 	.word	0x080326a4
 8024058:	080326bc 	.word	0x080326bc
 802405c:	240004b0 	.word	0x240004b0
 8024060:	2400021c 	.word	0x2400021c
 8024064:	24000491 	.word	0x24000491
 8024068:	2400048d 	.word	0x2400048d
 802406c:	2400048f 	.word	0x2400048f
 8024070:	080326d0 	.word	0x080326d0
 8024074:	080326e8 	.word	0x080326e8
 8024078:	08032700 	.word	0x08032700

0802407c <CheckPassReadySwing>:

void CheckPassReadySwing(void)
{
 802407c:	b580      	push	{r7, lr}
 802407e:	af00      	add	r7, sp, #0
	if (gisExitPassenger == TRUE)
 8024080:	4b76      	ldr	r3, [pc, #472]	; (802425c <CheckPassReadySwing+0x1e0>)
 8024082:	781b      	ldrb	r3, [r3, #0]
 8024084:	2b00      	cmp	r3, #0
 8024086:	d073      	beq.n	8024170 <CheckPassReadySwing+0xf4>
	{
		if (isPassReady_EN == FALSE)
 8024088:	4b75      	ldr	r3, [pc, #468]	; (8024260 <CheckPassReadySwing+0x1e4>)
 802408a:	781b      	ldrb	r3, [r3, #0]
 802408c:	f083 0301 	eor.w	r3, r3, #1
 8024090:	b2db      	uxtb	r3, r3
 8024092:	2b00      	cmp	r3, #0
 8024094:	d040      	beq.n	8024118 <CheckPassReadySwing+0x9c>
		{
			bPassPattern_EX |= psenNewSwing.dirExit.passage;
 8024096:	4b73      	ldr	r3, [pc, #460]	; (8024264 <CheckPassReadySwing+0x1e8>)
 8024098:	785b      	ldrb	r3, [r3, #1]
 802409a:	f343 0385 	sbfx	r3, r3, #2, #6
 802409e:	b25b      	sxtb	r3, r3
 80240a0:	461a      	mov	r2, r3
 80240a2:	4b71      	ldr	r3, [pc, #452]	; (8024268 <CheckPassReadySwing+0x1ec>)
 80240a4:	781b      	ldrb	r3, [r3, #0]
 80240a6:	b25b      	sxtb	r3, r3
 80240a8:	4313      	orrs	r3, r2
 80240aa:	b25b      	sxtb	r3, r3
 80240ac:	b2da      	uxtb	r2, r3
 80240ae:	4b6e      	ldr	r3, [pc, #440]	; (8024268 <CheckPassReadySwing+0x1ec>)
 80240b0:	701a      	strb	r2, [r3, #0]

			if (bPassPattern_EX >= PASS_PATN_PASS_READY)
 80240b2:	4b6d      	ldr	r3, [pc, #436]	; (8024268 <CheckPassReadySwing+0x1ec>)
 80240b4:	781b      	ldrb	r3, [r3, #0]
 80240b6:	2b03      	cmp	r3, #3
 80240b8:	d92e      	bls.n	8024118 <CheckPassReadySwing+0x9c>
			{
				//PRINTL(" [EX] Pass Ready");
				printf(" [EX] Pass Ready \n");
 80240ba:	486c      	ldr	r0, [pc, #432]	; (802426c <CheckPassReadySwing+0x1f0>)
 80240bc:	f005 fbca 	bl	8029854 <printf_>
				isPassReady_EX = TRUE;
 80240c0:	4b6b      	ldr	r3, [pc, #428]	; (8024270 <CheckPassReadySwing+0x1f4>)
 80240c2:	2201      	movs	r2, #1
 80240c4:	701a      	strb	r2, [r3, #0]

				if (gGCUStatus.bAuthCount_EX)
 80240c6:	4b6b      	ldr	r3, [pc, #428]	; (8024274 <CheckPassReadySwing+0x1f8>)
 80240c8:	795b      	ldrb	r3, [r3, #5]
 80240ca:	b2db      	uxtb	r3, r3
 80240cc:	2b00      	cmp	r3, #0
 80240ce:	d003      	beq.n	80240d8 <CheckPassReadySwing+0x5c>
				{
					gisExitPassenger = FALSE;
 80240d0:	4b62      	ldr	r3, [pc, #392]	; (802425c <CheckPassReadySwing+0x1e0>)
 80240d2:	2200      	movs	r2, #0
 80240d4:	701a      	strb	r2, [r3, #0]
 80240d6:	e01f      	b.n	8024118 <CheckPassReadySwing+0x9c>
				}
				else if (CheckZeroAuthCount() && gGCUStatus.IllegalPass.b.nTailgating_EX == FLG_OFF && gGCUStatus.PassageAlarm.b.nPassOverFromEX == OFF)
 80240d8:	f7ff f9e8 	bl	80234ac <CheckZeroAuthCount>
 80240dc:	4603      	mov	r3, r0
 80240de:	2b00      	cmp	r3, #0
 80240e0:	d01a      	beq.n	8024118 <CheckPassReadySwing+0x9c>
 80240e2:	4b64      	ldr	r3, [pc, #400]	; (8024274 <CheckPassReadySwing+0x1f8>)
 80240e4:	7f1b      	ldrb	r3, [r3, #28]
 80240e6:	f003 0310 	and.w	r3, r3, #16
 80240ea:	b2db      	uxtb	r3, r3
 80240ec:	2b00      	cmp	r3, #0
 80240ee:	d113      	bne.n	8024118 <CheckPassReadySwing+0x9c>
 80240f0:	4b60      	ldr	r3, [pc, #384]	; (8024274 <CheckPassReadySwing+0x1f8>)
 80240f2:	7a1b      	ldrb	r3, [r3, #8]
 80240f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80240f8:	b2db      	uxtb	r3, r3
 80240fa:	2b00      	cmp	r3, #0
 80240fc:	d10c      	bne.n	8024118 <CheckPassReadySwing+0x9c>
				{
					// if nobody is in the opposite side
					if (!psenNewSwing.section.lower_EN)
 80240fe:	4b59      	ldr	r3, [pc, #356]	; (8024264 <CheckPassReadySwing+0x1e8>)
 8024100:	781b      	ldrb	r3, [r3, #0]
 8024102:	f023 030f 	bic.w	r3, r3, #15
 8024106:	b2db      	uxtb	r3, r3
 8024108:	2b00      	cmp	r3, #0
 802410a:	d105      	bne.n	8024118 <CheckPassReadySwing+0x9c>
					{
						isForceOpenReady_EX = TRUE;
 802410c:	4b5a      	ldr	r3, [pc, #360]	; (8024278 <CheckPassReadySwing+0x1fc>)
 802410e:	2201      	movs	r2, #1
 8024110:	701a      	strb	r2, [r3, #0]
						//PRINTL(" [EX] Force Open Ready");
						printf(" [EX] Force Open Ready\n");
 8024112:	485a      	ldr	r0, [pc, #360]	; (802427c <CheckPassReadySwing+0x200>)
 8024114:	f005 fb9e 	bl	8029854 <printf_>
				}
			}
		}

		// Luggage check (Stroller, Bicycle, Luggage)
		if (gGCUStatus.bAuthCount_EX && psenNewSwing.dirExit.enter && psenNewSwing.b.s13 && psenNewSwing.b.s14 && !psenNewSwing.b.s11)
 8024118:	4b56      	ldr	r3, [pc, #344]	; (8024274 <CheckPassReadySwing+0x1f8>)
 802411a:	795b      	ldrb	r3, [r3, #5]
 802411c:	b2db      	uxtb	r3, r3
 802411e:	2b00      	cmp	r3, #0
 8024120:	f000 8099 	beq.w	8024256 <CheckPassReadySwing+0x1da>
 8024124:	4b4f      	ldr	r3, [pc, #316]	; (8024264 <CheckPassReadySwing+0x1e8>)
 8024126:	785b      	ldrb	r3, [r3, #1]
 8024128:	f003 0303 	and.w	r3, r3, #3
 802412c:	b2db      	uxtb	r3, r3
 802412e:	2b00      	cmp	r3, #0
 8024130:	f000 8091 	beq.w	8024256 <CheckPassReadySwing+0x1da>
 8024134:	4b4b      	ldr	r3, [pc, #300]	; (8024264 <CheckPassReadySwing+0x1e8>)
 8024136:	785b      	ldrb	r3, [r3, #1]
 8024138:	f003 0310 	and.w	r3, r3, #16
 802413c:	b2db      	uxtb	r3, r3
 802413e:	2b00      	cmp	r3, #0
 8024140:	f000 8089 	beq.w	8024256 <CheckPassReadySwing+0x1da>
 8024144:	4b47      	ldr	r3, [pc, #284]	; (8024264 <CheckPassReadySwing+0x1e8>)
 8024146:	785b      	ldrb	r3, [r3, #1]
 8024148:	f003 0320 	and.w	r3, r3, #32
 802414c:	b2db      	uxtb	r3, r3
 802414e:	2b00      	cmp	r3, #0
 8024150:	f000 8081 	beq.w	8024256 <CheckPassReadySwing+0x1da>
 8024154:	4b43      	ldr	r3, [pc, #268]	; (8024264 <CheckPassReadySwing+0x1e8>)
 8024156:	785b      	ldrb	r3, [r3, #1]
 8024158:	f003 0304 	and.w	r3, r3, #4
 802415c:	b2db      	uxtb	r3, r3
 802415e:	2b00      	cmp	r3, #0
 8024160:	d179      	bne.n	8024256 <CheckPassReadySwing+0x1da>
		{
			isLuggageSet_EX = TRUE;
 8024162:	4b47      	ldr	r3, [pc, #284]	; (8024280 <CheckPassReadySwing+0x204>)
 8024164:	2201      	movs	r2, #1
 8024166:	701a      	strb	r2, [r3, #0]
			//PRINTL(" [EX] Set Luggage Flag");
			printf(" [EX] Set Luggage Flag\n");
 8024168:	4846      	ldr	r0, [pc, #280]	; (8024284 <CheckPassReadySwing+0x208>)
 802416a:	f005 fb73 	bl	8029854 <printf_>
			isLuggageSet_EN = TRUE;
			//PRINTL(" [EN] Set Luggage Flag");
			printf(" [EN] Set Luggage Flag  \n");
		}
	}
}
 802416e:	e072      	b.n	8024256 <CheckPassReadySwing+0x1da>
	else if (gisEntryPassenger == TRUE)
 8024170:	4b45      	ldr	r3, [pc, #276]	; (8024288 <CheckPassReadySwing+0x20c>)
 8024172:	781b      	ldrb	r3, [r3, #0]
 8024174:	2b00      	cmp	r3, #0
 8024176:	d06e      	beq.n	8024256 <CheckPassReadySwing+0x1da>
		if (isPassReady_EX == FALSE)
 8024178:	4b3d      	ldr	r3, [pc, #244]	; (8024270 <CheckPassReadySwing+0x1f4>)
 802417a:	781b      	ldrb	r3, [r3, #0]
 802417c:	f083 0301 	eor.w	r3, r3, #1
 8024180:	b2db      	uxtb	r3, r3
 8024182:	2b00      	cmp	r3, #0
 8024184:	d040      	beq.n	8024208 <CheckPassReadySwing+0x18c>
			bPassPattern_EN |= psenNewSwing.dirEntry.passage;
 8024186:	4b37      	ldr	r3, [pc, #220]	; (8024264 <CheckPassReadySwing+0x1e8>)
 8024188:	781b      	ldrb	r3, [r3, #0]
 802418a:	f343 0385 	sbfx	r3, r3, #2, #6
 802418e:	b25b      	sxtb	r3, r3
 8024190:	461a      	mov	r2, r3
 8024192:	4b3e      	ldr	r3, [pc, #248]	; (802428c <CheckPassReadySwing+0x210>)
 8024194:	781b      	ldrb	r3, [r3, #0]
 8024196:	b25b      	sxtb	r3, r3
 8024198:	4313      	orrs	r3, r2
 802419a:	b25b      	sxtb	r3, r3
 802419c:	b2da      	uxtb	r2, r3
 802419e:	4b3b      	ldr	r3, [pc, #236]	; (802428c <CheckPassReadySwing+0x210>)
 80241a0:	701a      	strb	r2, [r3, #0]
			if (bPassPattern_EN >= PASS_PATN_PASS_READY)
 80241a2:	4b3a      	ldr	r3, [pc, #232]	; (802428c <CheckPassReadySwing+0x210>)
 80241a4:	781b      	ldrb	r3, [r3, #0]
 80241a6:	2b03      	cmp	r3, #3
 80241a8:	d92e      	bls.n	8024208 <CheckPassReadySwing+0x18c>
				printf(" [EN] Pass Ready \n");
 80241aa:	4839      	ldr	r0, [pc, #228]	; (8024290 <CheckPassReadySwing+0x214>)
 80241ac:	f005 fb52 	bl	8029854 <printf_>
				isPassReady_EN = TRUE;
 80241b0:	4b2b      	ldr	r3, [pc, #172]	; (8024260 <CheckPassReadySwing+0x1e4>)
 80241b2:	2201      	movs	r2, #1
 80241b4:	701a      	strb	r2, [r3, #0]
				if (gGCUStatus.bAuthCount_EN)
 80241b6:	4b2f      	ldr	r3, [pc, #188]	; (8024274 <CheckPassReadySwing+0x1f8>)
 80241b8:	791b      	ldrb	r3, [r3, #4]
 80241ba:	b2db      	uxtb	r3, r3
 80241bc:	2b00      	cmp	r3, #0
 80241be:	d003      	beq.n	80241c8 <CheckPassReadySwing+0x14c>
					gisEntryPassenger = FALSE;
 80241c0:	4b31      	ldr	r3, [pc, #196]	; (8024288 <CheckPassReadySwing+0x20c>)
 80241c2:	2200      	movs	r2, #0
 80241c4:	701a      	strb	r2, [r3, #0]
 80241c6:	e01f      	b.n	8024208 <CheckPassReadySwing+0x18c>
				else if (CheckZeroAuthCount() && gGCUStatus.IllegalPass.b.nTailgating_EN == FLG_OFF && gGCUStatus.PassageAlarm.b.nPassOverFromEN == OFF)
 80241c8:	f7ff f970 	bl	80234ac <CheckZeroAuthCount>
 80241cc:	4603      	mov	r3, r0
 80241ce:	2b00      	cmp	r3, #0
 80241d0:	d01a      	beq.n	8024208 <CheckPassReadySwing+0x18c>
 80241d2:	4b28      	ldr	r3, [pc, #160]	; (8024274 <CheckPassReadySwing+0x1f8>)
 80241d4:	7f1b      	ldrb	r3, [r3, #28]
 80241d6:	f003 0301 	and.w	r3, r3, #1
 80241da:	b2db      	uxtb	r3, r3
 80241dc:	2b00      	cmp	r3, #0
 80241de:	d113      	bne.n	8024208 <CheckPassReadySwing+0x18c>
 80241e0:	4b24      	ldr	r3, [pc, #144]	; (8024274 <CheckPassReadySwing+0x1f8>)
 80241e2:	7a1b      	ldrb	r3, [r3, #8]
 80241e4:	f003 0308 	and.w	r3, r3, #8
 80241e8:	b2db      	uxtb	r3, r3
 80241ea:	2b00      	cmp	r3, #0
 80241ec:	d10c      	bne.n	8024208 <CheckPassReadySwing+0x18c>
					if (!psenNewSwing.section.lower_EX)
 80241ee:	4b1d      	ldr	r3, [pc, #116]	; (8024264 <CheckPassReadySwing+0x1e8>)
 80241f0:	785b      	ldrb	r3, [r3, #1]
 80241f2:	f023 030f 	bic.w	r3, r3, #15
 80241f6:	b2db      	uxtb	r3, r3
 80241f8:	2b00      	cmp	r3, #0
 80241fa:	d105      	bne.n	8024208 <CheckPassReadySwing+0x18c>
						isForceOpenReady_EN = TRUE;
 80241fc:	4b25      	ldr	r3, [pc, #148]	; (8024294 <CheckPassReadySwing+0x218>)
 80241fe:	2201      	movs	r2, #1
 8024200:	701a      	strb	r2, [r3, #0]
						printf(" [EN]  Force Open Ready \n");
 8024202:	4825      	ldr	r0, [pc, #148]	; (8024298 <CheckPassReadySwing+0x21c>)
 8024204:	f005 fb26 	bl	8029854 <printf_>
		if (gGCUStatus.bAuthCount_EN && psenNewSwing.dirEntry.enter && psenNewSwing.b.s03 && psenNewSwing.b.s04 && !psenNewSwing.b.s01)
 8024208:	4b1a      	ldr	r3, [pc, #104]	; (8024274 <CheckPassReadySwing+0x1f8>)
 802420a:	791b      	ldrb	r3, [r3, #4]
 802420c:	b2db      	uxtb	r3, r3
 802420e:	2b00      	cmp	r3, #0
 8024210:	d021      	beq.n	8024256 <CheckPassReadySwing+0x1da>
 8024212:	4b14      	ldr	r3, [pc, #80]	; (8024264 <CheckPassReadySwing+0x1e8>)
 8024214:	781b      	ldrb	r3, [r3, #0]
 8024216:	f003 0303 	and.w	r3, r3, #3
 802421a:	b2db      	uxtb	r3, r3
 802421c:	2b00      	cmp	r3, #0
 802421e:	d01a      	beq.n	8024256 <CheckPassReadySwing+0x1da>
 8024220:	4b10      	ldr	r3, [pc, #64]	; (8024264 <CheckPassReadySwing+0x1e8>)
 8024222:	781b      	ldrb	r3, [r3, #0]
 8024224:	f003 0304 	and.w	r3, r3, #4
 8024228:	b2db      	uxtb	r3, r3
 802422a:	2b00      	cmp	r3, #0
 802422c:	d013      	beq.n	8024256 <CheckPassReadySwing+0x1da>
 802422e:	4b0d      	ldr	r3, [pc, #52]	; (8024264 <CheckPassReadySwing+0x1e8>)
 8024230:	781b      	ldrb	r3, [r3, #0]
 8024232:	f003 0308 	and.w	r3, r3, #8
 8024236:	b2db      	uxtb	r3, r3
 8024238:	2b00      	cmp	r3, #0
 802423a:	d00c      	beq.n	8024256 <CheckPassReadySwing+0x1da>
 802423c:	4b09      	ldr	r3, [pc, #36]	; (8024264 <CheckPassReadySwing+0x1e8>)
 802423e:	781b      	ldrb	r3, [r3, #0]
 8024240:	f003 0301 	and.w	r3, r3, #1
 8024244:	b2db      	uxtb	r3, r3
 8024246:	2b00      	cmp	r3, #0
 8024248:	d105      	bne.n	8024256 <CheckPassReadySwing+0x1da>
			isLuggageSet_EN = TRUE;
 802424a:	4b14      	ldr	r3, [pc, #80]	; (802429c <CheckPassReadySwing+0x220>)
 802424c:	2201      	movs	r2, #1
 802424e:	701a      	strb	r2, [r3, #0]
			printf(" [EN] Set Luggage Flag  \n");
 8024250:	4813      	ldr	r0, [pc, #76]	; (80242a0 <CheckPassReadySwing+0x224>)
 8024252:	f005 faff 	bl	8029854 <printf_>
}
 8024256:	bf00      	nop
 8024258:	bd80      	pop	{r7, pc}
 802425a:	bf00      	nop
 802425c:	240004b0 	.word	0x240004b0
 8024260:	24000490 	.word	0x24000490
 8024264:	24000480 	.word	0x24000480
 8024268:	2400048f 	.word	0x2400048f
 802426c:	08032714 	.word	0x08032714
 8024270:	24000491 	.word	0x24000491
 8024274:	24000524 	.word	0x24000524
 8024278:	24000497 	.word	0x24000497
 802427c:	08032728 	.word	0x08032728
 8024280:	24000495 	.word	0x24000495
 8024284:	08032740 	.word	0x08032740
 8024288:	240004af 	.word	0x240004af
 802428c:	2400048e 	.word	0x2400048e
 8024290:	08032758 	.word	0x08032758
 8024294:	24000496 	.word	0x24000496
 8024298:	0803276c 	.word	0x0803276c
 802429c:	24000494 	.word	0x24000494
 80242a0:	08032788 	.word	0x08032788

080242a4 <CheckPassingSwing>:

// JOB DONE
void CheckPassingSwing(void)
{
 80242a4:	b580      	push	{r7, lr}
 80242a6:	af00      	add	r7, sp, #0
	// To prevent the counter-enter, I utilize two boolean variable "isPassReady" and "isPassOver"
	if (isPassReady_EN)
 80242a8:	4b8f      	ldr	r3, [pc, #572]	; (80244e8 <CheckPassingSwing+0x244>)
 80242aa:	781b      	ldrb	r3, [r3, #0]
 80242ac:	2b00      	cmp	r3, #0
 80242ae:	f000 808a 	beq.w	80243c6 <CheckPassingSwing+0x122>
	{
		if (isPassOver_EN)
 80242b2:	4b8e      	ldr	r3, [pc, #568]	; (80244ec <CheckPassingSwing+0x248>)
 80242b4:	781b      	ldrb	r3, [r3, #0]
 80242b6:	2b00      	cmp	r3, #0
 80242b8:	d06b      	beq.n	8024392 <CheckPassingSwing+0xee>
		{
			if (psenNewSwing.dirEntry.end)
 80242ba:	4b8d      	ldr	r3, [pc, #564]	; (80244f0 <CheckPassingSwing+0x24c>)
 80242bc:	785b      	ldrb	r3, [r3, #1]
 80242be:	f003 0303 	and.w	r3, r3, #3
 80242c2:	b2db      	uxtb	r3, r3
 80242c4:	2b00      	cmp	r3, #0
 80242c6:	d07e      	beq.n	80243c6 <CheckPassingSwing+0x122>
			{
				//PRINTL(" [EN] Pass over");
				printf(" [EN] Pass over  \n");
 80242c8:	488a      	ldr	r0, [pc, #552]	; (80244f4 <CheckPassingSwing+0x250>)
 80242ca:	f005 fac3 	bl	8029854 <printf_>
				isPassReady_EN = FALSE;
 80242ce:	4b86      	ldr	r3, [pc, #536]	; (80244e8 <CheckPassingSwing+0x244>)
 80242d0:	2200      	movs	r2, #0
 80242d2:	701a      	strb	r2, [r3, #0]
				isPassOver_EN = FALSE;
 80242d4:	4b85      	ldr	r3, [pc, #532]	; (80244ec <CheckPassingSwing+0x248>)
 80242d6:	2200      	movs	r2, #0
 80242d8:	701a      	strb	r2, [r3, #0]
				bPassPattern_EN = PASS_PATN_NONE;
 80242da:	4b87      	ldr	r3, [pc, #540]	; (80244f8 <CheckPassingSwing+0x254>)
 80242dc:	2200      	movs	r2, #0
 80242de:	701a      	strb	r2, [r3, #0]

				if (gGCUStatus.bAuthCount_EN == 1)
 80242e0:	4b86      	ldr	r3, [pc, #536]	; (80244fc <CheckPassingSwing+0x258>)
 80242e2:	791b      	ldrb	r3, [r3, #4]
 80242e4:	b2db      	uxtb	r3, r3
 80242e6:	2b01      	cmp	r3, #1
 80242e8:	d144      	bne.n	8024374 <CheckPassingSwing+0xd0>
				{
					if (psenNewSwing.section.upper_EN)
 80242ea:	4b81      	ldr	r3, [pc, #516]	; (80244f0 <CheckPassingSwing+0x24c>)
 80242ec:	781b      	ldrb	r3, [r3, #0]
 80242ee:	f003 030c 	and.w	r3, r3, #12
 80242f2:	b2db      	uxtb	r3, r3
 80242f4:	2b00      	cmp	r3, #0
 80242f6:	d02c      	beq.n	8024352 <CheckPassingSwing+0xae>
					{
						isPassReady_EN = TRUE;
 80242f8:	4b7b      	ldr	r3, [pc, #492]	; (80244e8 <CheckPassingSwing+0x244>)
 80242fa:	2201      	movs	r2, #1
 80242fc:	701a      	strb	r2, [r3, #0]
						isPassOver_EN = TRUE;
 80242fe:	4b7b      	ldr	r3, [pc, #492]	; (80244ec <CheckPassingSwing+0x248>)
 8024300:	2201      	movs	r2, #1
 8024302:	701a      	strb	r2, [r3, #0]

						if (!psenNewSwing.b.s13 && !psenNewSwing.b.s14 && !psenNewSwing.b.s15)
 8024304:	4b7a      	ldr	r3, [pc, #488]	; (80244f0 <CheckPassingSwing+0x24c>)
 8024306:	785b      	ldrb	r3, [r3, #1]
 8024308:	f003 0310 	and.w	r3, r3, #16
 802430c:	b2db      	uxtb	r3, r3
 802430e:	2b00      	cmp	r3, #0
 8024310:	d159      	bne.n	80243c6 <CheckPassingSwing+0x122>
 8024312:	4b77      	ldr	r3, [pc, #476]	; (80244f0 <CheckPassingSwing+0x24c>)
 8024314:	785b      	ldrb	r3, [r3, #1]
 8024316:	f003 0320 	and.w	r3, r3, #32
 802431a:	b2db      	uxtb	r3, r3
 802431c:	2b00      	cmp	r3, #0
 802431e:	d152      	bne.n	80243c6 <CheckPassingSwing+0x122>
 8024320:	4b73      	ldr	r3, [pc, #460]	; (80244f0 <CheckPassingSwing+0x24c>)
 8024322:	785b      	ldrb	r3, [r3, #1]
 8024324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024328:	b2db      	uxtb	r3, r3
 802432a:	2b00      	cmp	r3, #0
 802432c:	d14b      	bne.n	80243c6 <CheckPassingSwing+0x122>
						{
							if (gGCUStatus.IllegalPass.b.nTailgating_EN == FLG_OFF && timerTgFilter.fStart == FALSE)
 802432e:	4b73      	ldr	r3, [pc, #460]	; (80244fc <CheckPassingSwing+0x258>)
 8024330:	7f1b      	ldrb	r3, [r3, #28]
 8024332:	f003 0301 	and.w	r3, r3, #1
 8024336:	b2db      	uxtb	r3, r3
 8024338:	2b00      	cmp	r3, #0
 802433a:	d144      	bne.n	80243c6 <CheckPassingSwing+0x122>
 802433c:	4b70      	ldr	r3, [pc, #448]	; (8024500 <CheckPassingSwing+0x25c>)
 802433e:	781b      	ldrb	r3, [r3, #0]
 8024340:	f083 0301 	eor.w	r3, r3, #1
 8024344:	b2db      	uxtb	r3, r3
 8024346:	2b00      	cmp	r3, #0
 8024348:	d03d      	beq.n	80243c6 <CheckPassingSwing+0x122>
							{
								SetTimer(&timerTgFilter);
 802434a:	486d      	ldr	r0, [pc, #436]	; (8024500 <CheckPassingSwing+0x25c>)
 802434c:	f00c fb72 	bl	8030a34 <SetTimer>
 8024350:	e039      	b.n	80243c6 <CheckPassingSwing+0x122>
							}
						}
					}
					else
					{
						gGCUStatus.bAuthCount_EN--;
 8024352:	4b6a      	ldr	r3, [pc, #424]	; (80244fc <CheckPassingSwing+0x258>)
 8024354:	791b      	ldrb	r3, [r3, #4]
 8024356:	b2db      	uxtb	r3, r3
 8024358:	3b01      	subs	r3, #1
 802435a:	b2da      	uxtb	r2, r3
 802435c:	4b67      	ldr	r3, [pc, #412]	; (80244fc <CheckPassingSwing+0x258>)
 802435e:	711a      	strb	r2, [r3, #4]
						SetTimer(&timerCloseWait);
 8024360:	4868      	ldr	r0, [pc, #416]	; (8024504 <CheckPassingSwing+0x260>)
 8024362:	f00c fb67 	bl	8030a34 <SetTimer>
						ResetTimer(&timerAuthorize);
 8024366:	4868      	ldr	r0, [pc, #416]	; (8024508 <CheckPassingSwing+0x264>)
 8024368:	f00c fb78 	bl	8030a5c <ResetTimer>
						//PRINTL(" [EN] Barrier close");
						printf(" [EN] Barrier close \n");
 802436c:	4867      	ldr	r0, [pc, #412]	; (802450c <CheckPassingSwing+0x268>)
 802436e:	f005 fa71 	bl	8029854 <printf_>
 8024372:	e028      	b.n	80243c6 <CheckPassingSwing+0x122>
					}
				}
				else if (gGCUStatus.bAuthCount_EN > 1)
 8024374:	4b61      	ldr	r3, [pc, #388]	; (80244fc <CheckPassingSwing+0x258>)
 8024376:	791b      	ldrb	r3, [r3, #4]
 8024378:	b2db      	uxtb	r3, r3
 802437a:	2b01      	cmp	r3, #1
 802437c:	d923      	bls.n	80243c6 <CheckPassingSwing+0x122>
				{
					gGCUStatus.bAuthCount_EN--;
 802437e:	4b5f      	ldr	r3, [pc, #380]	; (80244fc <CheckPassingSwing+0x258>)
 8024380:	791b      	ldrb	r3, [r3, #4]
 8024382:	b2db      	uxtb	r3, r3
 8024384:	3b01      	subs	r3, #1
 8024386:	b2da      	uxtb	r2, r3
 8024388:	4b5c      	ldr	r3, [pc, #368]	; (80244fc <CheckPassingSwing+0x258>)
 802438a:	711a      	strb	r2, [r3, #4]
					SetAuthTimer();
 802438c:	f7fd ff8c 	bl	80222a8 <SetAuthTimer>
 8024390:	e019      	b.n	80243c6 <CheckPassingSwing+0x122>
				}
			}
		}
		else
		{
			if (psenNewSwing.dirEntry.lower)
 8024392:	4b57      	ldr	r3, [pc, #348]	; (80244f0 <CheckPassingSwing+0x24c>)
 8024394:	785b      	ldrb	r3, [r3, #1]
 8024396:	f023 030f 	bic.w	r3, r3, #15
 802439a:	b2db      	uxtb	r3, r3
 802439c:	2b00      	cmp	r3, #0
 802439e:	d012      	beq.n	80243c6 <CheckPassingSwing+0x122>
			{
				//PRINTL(" [EN] passing before");
				printf(" [EN] passing before \n");
 80243a0:	485b      	ldr	r0, [pc, #364]	; (8024510 <CheckPassingSwing+0x26c>)
 80243a2:	f005 fa57 	bl	8029854 <printf_>

				if (gGCUStatus.bAuthCount_EN || gGCUStatus.IllegalPass.b.nTailgating_EN == FLG_SET)
 80243a6:	4b55      	ldr	r3, [pc, #340]	; (80244fc <CheckPassingSwing+0x258>)
 80243a8:	791b      	ldrb	r3, [r3, #4]
 80243aa:	b2db      	uxtb	r3, r3
 80243ac:	2b00      	cmp	r3, #0
 80243ae:	d00a      	beq.n	80243c6 <CheckPassingSwing+0x122>
				{
					isPassOver_EN = TRUE;
 80243b0:	4b4e      	ldr	r3, [pc, #312]	; (80244ec <CheckPassingSwing+0x248>)
 80243b2:	2201      	movs	r2, #1
 80243b4:	701a      	strb	r2, [r3, #0]
					gGCUStatus.PassageAlarm.b.nPassOverFromEN = ON;
 80243b6:	4a51      	ldr	r2, [pc, #324]	; (80244fc <CheckPassingSwing+0x258>)
 80243b8:	7a13      	ldrb	r3, [r2, #8]
 80243ba:	f043 0308 	orr.w	r3, r3, #8
 80243be:	7213      	strb	r3, [r2, #8]
					//PRINTL(" [EN] passing");
					printf(" [EN] passing \n");
 80243c0:	4854      	ldr	r0, [pc, #336]	; (8024514 <CheckPassingSwing+0x270>)
 80243c2:	f005 fa47 	bl	8029854 <printf_>
				}
			}
		}
	}

	if (isPassReady_EX)
 80243c6:	4b54      	ldr	r3, [pc, #336]	; (8024518 <CheckPassingSwing+0x274>)
 80243c8:	781b      	ldrb	r3, [r3, #0]
 80243ca:	2b00      	cmp	r3, #0
 80243cc:	f000 808a 	beq.w	80244e4 <CheckPassingSwing+0x240>
	{
		if (isPassOver_EX)
 80243d0:	4b52      	ldr	r3, [pc, #328]	; (802451c <CheckPassingSwing+0x278>)
 80243d2:	781b      	ldrb	r3, [r3, #0]
 80243d4:	2b00      	cmp	r3, #0
 80243d6:	d06b      	beq.n	80244b0 <CheckPassingSwing+0x20c>
		{
			if (psenNewSwing.dirExit.end)
 80243d8:	4b45      	ldr	r3, [pc, #276]	; (80244f0 <CheckPassingSwing+0x24c>)
 80243da:	781b      	ldrb	r3, [r3, #0]
 80243dc:	f003 0303 	and.w	r3, r3, #3
 80243e0:	b2db      	uxtb	r3, r3
 80243e2:	2b00      	cmp	r3, #0
 80243e4:	d07e      	beq.n	80244e4 <CheckPassingSwing+0x240>
			{
				//PRINTL(" [EX] Pass over");
				printf(" [EX] Pass over \n");
 80243e6:	484e      	ldr	r0, [pc, #312]	; (8024520 <CheckPassingSwing+0x27c>)
 80243e8:	f005 fa34 	bl	8029854 <printf_>
				isPassReady_EX = FALSE;
 80243ec:	4b4a      	ldr	r3, [pc, #296]	; (8024518 <CheckPassingSwing+0x274>)
 80243ee:	2200      	movs	r2, #0
 80243f0:	701a      	strb	r2, [r3, #0]
				isPassOver_EX = FALSE;
 80243f2:	4b4a      	ldr	r3, [pc, #296]	; (802451c <CheckPassingSwing+0x278>)
 80243f4:	2200      	movs	r2, #0
 80243f6:	701a      	strb	r2, [r3, #0]
				bPassPattern_EX = PASS_PATN_NONE;
 80243f8:	4b4a      	ldr	r3, [pc, #296]	; (8024524 <CheckPassingSwing+0x280>)
 80243fa:	2200      	movs	r2, #0
 80243fc:	701a      	strb	r2, [r3, #0]

				if (gGCUStatus.bAuthCount_EX == 1)
 80243fe:	4b3f      	ldr	r3, [pc, #252]	; (80244fc <CheckPassingSwing+0x258>)
 8024400:	795b      	ldrb	r3, [r3, #5]
 8024402:	b2db      	uxtb	r3, r3
 8024404:	2b01      	cmp	r3, #1
 8024406:	d144      	bne.n	8024492 <CheckPassingSwing+0x1ee>
				{
					if (psenNewSwing.section.upper_EX)
 8024408:	4b39      	ldr	r3, [pc, #228]	; (80244f0 <CheckPassingSwing+0x24c>)
 802440a:	785b      	ldrb	r3, [r3, #1]
 802440c:	f003 030c 	and.w	r3, r3, #12
 8024410:	b2db      	uxtb	r3, r3
 8024412:	2b00      	cmp	r3, #0
 8024414:	d02c      	beq.n	8024470 <CheckPassingSwing+0x1cc>
					{
						isPassReady_EX = TRUE;
 8024416:	4b40      	ldr	r3, [pc, #256]	; (8024518 <CheckPassingSwing+0x274>)
 8024418:	2201      	movs	r2, #1
 802441a:	701a      	strb	r2, [r3, #0]
						isPassOver_EX = TRUE;
 802441c:	4b3f      	ldr	r3, [pc, #252]	; (802451c <CheckPassingSwing+0x278>)
 802441e:	2201      	movs	r2, #1
 8024420:	701a      	strb	r2, [r3, #0]

						if (!psenNewSwing.b.s05 && !psenNewSwing.b.s06 && !psenNewSwing.b.s07)
 8024422:	4b33      	ldr	r3, [pc, #204]	; (80244f0 <CheckPassingSwing+0x24c>)
 8024424:	781b      	ldrb	r3, [r3, #0]
 8024426:	f003 0310 	and.w	r3, r3, #16
 802442a:	b2db      	uxtb	r3, r3
 802442c:	2b00      	cmp	r3, #0
 802442e:	d159      	bne.n	80244e4 <CheckPassingSwing+0x240>
 8024430:	4b2f      	ldr	r3, [pc, #188]	; (80244f0 <CheckPassingSwing+0x24c>)
 8024432:	781b      	ldrb	r3, [r3, #0]
 8024434:	f003 0320 	and.w	r3, r3, #32
 8024438:	b2db      	uxtb	r3, r3
 802443a:	2b00      	cmp	r3, #0
 802443c:	d152      	bne.n	80244e4 <CheckPassingSwing+0x240>
 802443e:	4b2c      	ldr	r3, [pc, #176]	; (80244f0 <CheckPassingSwing+0x24c>)
 8024440:	781b      	ldrb	r3, [r3, #0]
 8024442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024446:	b2db      	uxtb	r3, r3
 8024448:	2b00      	cmp	r3, #0
 802444a:	d14b      	bne.n	80244e4 <CheckPassingSwing+0x240>
						{ // If not detected on the upper sensors, no tailgating
							if (gGCUStatus.IllegalPass.b.nTailgating_EX == FLG_OFF && timerTgFilter.fStart == FALSE)
 802444c:	4b2b      	ldr	r3, [pc, #172]	; (80244fc <CheckPassingSwing+0x258>)
 802444e:	7f1b      	ldrb	r3, [r3, #28]
 8024450:	f003 0310 	and.w	r3, r3, #16
 8024454:	b2db      	uxtb	r3, r3
 8024456:	2b00      	cmp	r3, #0
 8024458:	d144      	bne.n	80244e4 <CheckPassingSwing+0x240>
 802445a:	4b29      	ldr	r3, [pc, #164]	; (8024500 <CheckPassingSwing+0x25c>)
 802445c:	781b      	ldrb	r3, [r3, #0]
 802445e:	f083 0301 	eor.w	r3, r3, #1
 8024462:	b2db      	uxtb	r3, r3
 8024464:	2b00      	cmp	r3, #0
 8024466:	d03d      	beq.n	80244e4 <CheckPassingSwing+0x240>
							{
								SetTimer(&timerTgFilter);
 8024468:	4825      	ldr	r0, [pc, #148]	; (8024500 <CheckPassingSwing+0x25c>)
 802446a:	f00c fae3 	bl	8030a34 <SetTimer>
					printf(" [EX] passing\n");
				}
			}
		}
	}
}
 802446e:	e039      	b.n	80244e4 <CheckPassingSwing+0x240>
						gGCUStatus.bAuthCount_EX--;
 8024470:	4b22      	ldr	r3, [pc, #136]	; (80244fc <CheckPassingSwing+0x258>)
 8024472:	795b      	ldrb	r3, [r3, #5]
 8024474:	b2db      	uxtb	r3, r3
 8024476:	3b01      	subs	r3, #1
 8024478:	b2da      	uxtb	r2, r3
 802447a:	4b20      	ldr	r3, [pc, #128]	; (80244fc <CheckPassingSwing+0x258>)
 802447c:	715a      	strb	r2, [r3, #5]
						SetTimer(&timerCloseWait);
 802447e:	4821      	ldr	r0, [pc, #132]	; (8024504 <CheckPassingSwing+0x260>)
 8024480:	f00c fad8 	bl	8030a34 <SetTimer>
						ResetTimer(&timerAuthorize);
 8024484:	4820      	ldr	r0, [pc, #128]	; (8024508 <CheckPassingSwing+0x264>)
 8024486:	f00c fae9 	bl	8030a5c <ResetTimer>
						printf(" [EX] Barrier close \n");
 802448a:	4827      	ldr	r0, [pc, #156]	; (8024528 <CheckPassingSwing+0x284>)
 802448c:	f005 f9e2 	bl	8029854 <printf_>
}
 8024490:	e028      	b.n	80244e4 <CheckPassingSwing+0x240>
				else if (gGCUStatus.bAuthCount_EX > 1)
 8024492:	4b1a      	ldr	r3, [pc, #104]	; (80244fc <CheckPassingSwing+0x258>)
 8024494:	795b      	ldrb	r3, [r3, #5]
 8024496:	b2db      	uxtb	r3, r3
 8024498:	2b01      	cmp	r3, #1
 802449a:	d923      	bls.n	80244e4 <CheckPassingSwing+0x240>
					gGCUStatus.bAuthCount_EX--;
 802449c:	4b17      	ldr	r3, [pc, #92]	; (80244fc <CheckPassingSwing+0x258>)
 802449e:	795b      	ldrb	r3, [r3, #5]
 80244a0:	b2db      	uxtb	r3, r3
 80244a2:	3b01      	subs	r3, #1
 80244a4:	b2da      	uxtb	r2, r3
 80244a6:	4b15      	ldr	r3, [pc, #84]	; (80244fc <CheckPassingSwing+0x258>)
 80244a8:	715a      	strb	r2, [r3, #5]
					SetAuthTimer();
 80244aa:	f7fd fefd 	bl	80222a8 <SetAuthTimer>
}
 80244ae:	e019      	b.n	80244e4 <CheckPassingSwing+0x240>
			if (psenNewSwing.dirExit.lower)
 80244b0:	4b0f      	ldr	r3, [pc, #60]	; (80244f0 <CheckPassingSwing+0x24c>)
 80244b2:	781b      	ldrb	r3, [r3, #0]
 80244b4:	f023 030f 	bic.w	r3, r3, #15
 80244b8:	b2db      	uxtb	r3, r3
 80244ba:	2b00      	cmp	r3, #0
 80244bc:	d012      	beq.n	80244e4 <CheckPassingSwing+0x240>
				printf(" [EX] passing before \n");
 80244be:	481b      	ldr	r0, [pc, #108]	; (802452c <CheckPassingSwing+0x288>)
 80244c0:	f005 f9c8 	bl	8029854 <printf_>
				if (gGCUStatus.bAuthCount_EX || gGCUStatus.IllegalPass.b.nTailgating_EX == FLG_SET)
 80244c4:	4b0d      	ldr	r3, [pc, #52]	; (80244fc <CheckPassingSwing+0x258>)
 80244c6:	795b      	ldrb	r3, [r3, #5]
 80244c8:	b2db      	uxtb	r3, r3
 80244ca:	2b00      	cmp	r3, #0
 80244cc:	d00a      	beq.n	80244e4 <CheckPassingSwing+0x240>
					isPassOver_EX = TRUE;
 80244ce:	4b13      	ldr	r3, [pc, #76]	; (802451c <CheckPassingSwing+0x278>)
 80244d0:	2201      	movs	r2, #1
 80244d2:	701a      	strb	r2, [r3, #0]
					gGCUStatus.PassageAlarm.b.nPassOverFromEX = ON;
 80244d4:	4a09      	ldr	r2, [pc, #36]	; (80244fc <CheckPassingSwing+0x258>)
 80244d6:	7a13      	ldrb	r3, [r2, #8]
 80244d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80244dc:	7213      	strb	r3, [r2, #8]
					printf(" [EX] passing\n");
 80244de:	4814      	ldr	r0, [pc, #80]	; (8024530 <CheckPassingSwing+0x28c>)
 80244e0:	f005 f9b8 	bl	8029854 <printf_>
}
 80244e4:	bf00      	nop
 80244e6:	bd80      	pop	{r7, pc}
 80244e8:	24000490 	.word	0x24000490
 80244ec:	24000492 	.word	0x24000492
 80244f0:	24000480 	.word	0x24000480
 80244f4:	080327a4 	.word	0x080327a4
 80244f8:	2400048e 	.word	0x2400048e
 80244fc:	24000524 	.word	0x24000524
 8024500:	240002b8 	.word	0x240002b8
 8024504:	240002ac 	.word	0x240002ac
 8024508:	240001d4 	.word	0x240001d4
 802450c:	080327b8 	.word	0x080327b8
 8024510:	080327d0 	.word	0x080327d0
 8024514:	080327e8 	.word	0x080327e8
 8024518:	24000491 	.word	0x24000491
 802451c:	24000493 	.word	0x24000493
 8024520:	080327f8 	.word	0x080327f8
 8024524:	2400048f 	.word	0x2400048f
 8024528:	0803280c 	.word	0x0803280c
 802452c:	08032824 	.word	0x08032824
 8024530:	0803283c 	.word	0x0803283c

08024534 <CheckCounterEnterTimer>:

void CheckCounterEnterTimer(void)
{
 8024534:	b580      	push	{r7, lr}
 8024536:	af00      	add	r7, sp, #0
	if (timerInverseEnter.fStart)
 8024538:	4b0a      	ldr	r3, [pc, #40]	; (8024564 <CheckCounterEnterTimer+0x30>)
 802453a:	781b      	ldrb	r3, [r3, #0]
 802453c:	2b00      	cmp	r3, #0
 802453e:	d00f      	beq.n	8024560 <CheckCounterEnterTimer+0x2c>
	{
		if (IsTimeout(&timerInverseEnter, dwInverseCloseTime * TICK_COUNT_100MS))
 8024540:	4b09      	ldr	r3, [pc, #36]	; (8024568 <CheckCounterEnterTimer+0x34>)
 8024542:	681a      	ldr	r2, [r3, #0]
 8024544:	4613      	mov	r3, r2
 8024546:	009b      	lsls	r3, r3, #2
 8024548:	4413      	add	r3, r2
 802454a:	005b      	lsls	r3, r3, #1
 802454c:	4619      	mov	r1, r3
 802454e:	4805      	ldr	r0, [pc, #20]	; (8024564 <CheckCounterEnterTimer+0x30>)
 8024550:	f00c fa92 	bl	8030a78 <IsTimeout>
 8024554:	4603      	mov	r3, r0
 8024556:	2b00      	cmp	r3, #0
 8024558:	d002      	beq.n	8024560 <CheckCounterEnterTimer+0x2c>
		{
			ResetTimer(&timerInverseEnter);
 802455a:	4802      	ldr	r0, [pc, #8]	; (8024564 <CheckCounterEnterTimer+0x30>)
 802455c:	f00c fa7e 	bl	8030a5c <ResetTimer>
					isCounterEnter = FALSE;
				}
			}
		}
	}
}
 8024560:	bf00      	nop
 8024562:	bd80      	pop	{r7, pc}
 8024564:	24000294 	.word	0x24000294
 8024568:	24000018 	.word	0x24000018

0802456c <CheckIllegalEnterSwing>:

void CheckIllegalEnterSwing(void)
{
 802456c:	b580      	push	{r7, lr}
 802456e:	af00      	add	r7, sp, #0
	if (gisEntryPassenger && gGCUStatus.PassageAlarm.b.nPassOverFromEX != ON)
 8024570:	4b50      	ldr	r3, [pc, #320]	; (80246b4 <CheckIllegalEnterSwing+0x148>)
 8024572:	781b      	ldrb	r3, [r3, #0]
 8024574:	2b00      	cmp	r3, #0
 8024576:	d04b      	beq.n	8024610 <CheckIllegalEnterSwing+0xa4>
	{
		if (gGCUStatus.bAuthCount_EX)
 8024578:	4b4f      	ldr	r3, [pc, #316]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 802457a:	795b      	ldrb	r3, [r3, #5]
 802457c:	b2db      	uxtb	r3, r3
 802457e:	2b00      	cmp	r3, #0
 8024580:	d039      	beq.n	80245f6 <CheckIllegalEnterSwing+0x8a>
		{
			if (gGCUStatus.IllegalPass.b.nCounter_EX == FLG_OFF && isPassReady_EX == FALSE && psenNewSwing.b.s02)
 8024582:	4b4d      	ldr	r3, [pc, #308]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 8024584:	7f1b      	ldrb	r3, [r3, #28]
 8024586:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802458a:	b2db      	uxtb	r3, r3
 802458c:	2b00      	cmp	r3, #0
 802458e:	d13f      	bne.n	8024610 <CheckIllegalEnterSwing+0xa4>
 8024590:	4b4a      	ldr	r3, [pc, #296]	; (80246bc <CheckIllegalEnterSwing+0x150>)
 8024592:	781b      	ldrb	r3, [r3, #0]
 8024594:	f083 0301 	eor.w	r3, r3, #1
 8024598:	b2db      	uxtb	r3, r3
 802459a:	2b00      	cmp	r3, #0
 802459c:	d038      	beq.n	8024610 <CheckIllegalEnterSwing+0xa4>
 802459e:	4b48      	ldr	r3, [pc, #288]	; (80246c0 <CheckIllegalEnterSwing+0x154>)
 80245a0:	781b      	ldrb	r3, [r3, #0]
 80245a2:	f003 0302 	and.w	r3, r3, #2
 80245a6:	b2db      	uxtb	r3, r3
 80245a8:	2b00      	cmp	r3, #0
 80245aa:	d031      	beq.n	8024610 <CheckIllegalEnterSwing+0xa4>
			{
				if (isCounterEnter == FALSE)
 80245ac:	4b45      	ldr	r3, [pc, #276]	; (80246c4 <CheckIllegalEnterSwing+0x158>)
 80245ae:	781b      	ldrb	r3, [r3, #0]
 80245b0:	f083 0301 	eor.w	r3, r3, #1
 80245b4:	b2db      	uxtb	r3, r3
 80245b6:	2b00      	cmp	r3, #0
 80245b8:	d02a      	beq.n	8024610 <CheckIllegalEnterSwing+0xa4>
				{
					SetTimer(&timerInverseEnter);
 80245ba:	4843      	ldr	r0, [pc, #268]	; (80246c8 <CheckIllegalEnterSwing+0x15c>)
 80245bc:	f00c fa3a 	bl	8030a34 <SetTimer>
					CloseBarrierForSwing();
 80245c0:	f7ff f984 	bl	80238cc <CloseBarrierForSwing>
					isCounterEnter = TRUE;
 80245c4:	4b3f      	ldr	r3, [pc, #252]	; (80246c4 <CheckIllegalEnterSwing+0x158>)
 80245c6:	2201      	movs	r2, #1
 80245c8:	701a      	strb	r2, [r3, #0]
					InhibitPass(FROM_ENTRY);
 80245ca:	2001      	movs	r0, #1
 80245cc:	f7fd fbde 	bl	8021d8c <InhibitPass>
					gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_COUNTER_ENTER;
 80245d0:	4a39      	ldr	r2, [pc, #228]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 80245d2:	7a13      	ldrb	r3, [r2, #8]
 80245d4:	2102      	movs	r1, #2
 80245d6:	f361 1306 	bfi	r3, r1, #4, #3
 80245da:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nCounter_EX = FLG_SET;
 80245dc:	4a36      	ldr	r2, [pc, #216]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 80245de:	7f13      	ldrb	r3, [r2, #28]
 80245e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80245e4:	7713      	strb	r3, [r2, #28]
					//PRINTL(" [EX] Inhibit Pass - Inverse Enter:%d", gGCUStatus.bAuthCount_EX);
					printf(" [EX] Inhibit Pass - Inverse Enter:%d \n", gGCUStatus.bAuthCount_EX);
 80245e6:	4b34      	ldr	r3, [pc, #208]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 80245e8:	795b      	ldrb	r3, [r3, #5]
 80245ea:	b2db      	uxtb	r3, r3
 80245ec:	4619      	mov	r1, r3
 80245ee:	4837      	ldr	r0, [pc, #220]	; (80246cc <CheckIllegalEnterSwing+0x160>)
 80245f0:	f005 f930 	bl	8029854 <printf_>
 80245f4:	e00c      	b.n	8024610 <CheckIllegalEnterSwing+0xa4>
				}
			}
		}
		else if (!gGCUStatus.bAuthCount_EN)
 80245f6:	4b30      	ldr	r3, [pc, #192]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 80245f8:	791b      	ldrb	r3, [r3, #4]
 80245fa:	b2db      	uxtb	r3, r3
 80245fc:	2b00      	cmp	r3, #0
 80245fe:	d107      	bne.n	8024610 <CheckIllegalEnterSwing+0xa4>
		{
			if (CheckCritical())
 8024600:	f7fe ff6a 	bl	80234d8 <CheckCritical>
 8024604:	4603      	mov	r3, r0
 8024606:	2b00      	cmp	r3, #0
 8024608:	d002      	beq.n	8024610 <CheckIllegalEnterSwing+0xa4>
			{
				CheckIllegalEnterTimer(FROM_ENTRY);
 802460a:	2001      	movs	r0, #1
 802460c:	f7fd fdbc 	bl	8022188 <CheckIllegalEnterTimer>
			}
		}
	}

	if (gisExitPassenger && gGCUStatus.PassageAlarm.b.nPassOverFromEN != ON)
 8024610:	4b2f      	ldr	r3, [pc, #188]	; (80246d0 <CheckIllegalEnterSwing+0x164>)
 8024612:	781b      	ldrb	r3, [r3, #0]
 8024614:	2b00      	cmp	r3, #0
 8024616:	d04b      	beq.n	80246b0 <CheckIllegalEnterSwing+0x144>
	{
		if (gGCUStatus.bAuthCount_EN)
 8024618:	4b27      	ldr	r3, [pc, #156]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 802461a:	791b      	ldrb	r3, [r3, #4]
 802461c:	b2db      	uxtb	r3, r3
 802461e:	2b00      	cmp	r3, #0
 8024620:	d039      	beq.n	8024696 <CheckIllegalEnterSwing+0x12a>
		{
			if (gGCUStatus.IllegalPass.b.nCounter_EN == FLG_OFF && isPassReady_EN == FALSE && psenNewSwing.b.s12)
 8024622:	4b25      	ldr	r3, [pc, #148]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 8024624:	7f1b      	ldrb	r3, [r3, #28]
 8024626:	f003 0308 	and.w	r3, r3, #8
 802462a:	b2db      	uxtb	r3, r3
 802462c:	2b00      	cmp	r3, #0
 802462e:	d13f      	bne.n	80246b0 <CheckIllegalEnterSwing+0x144>
 8024630:	4b28      	ldr	r3, [pc, #160]	; (80246d4 <CheckIllegalEnterSwing+0x168>)
 8024632:	781b      	ldrb	r3, [r3, #0]
 8024634:	f083 0301 	eor.w	r3, r3, #1
 8024638:	b2db      	uxtb	r3, r3
 802463a:	2b00      	cmp	r3, #0
 802463c:	d038      	beq.n	80246b0 <CheckIllegalEnterSwing+0x144>
 802463e:	4b20      	ldr	r3, [pc, #128]	; (80246c0 <CheckIllegalEnterSwing+0x154>)
 8024640:	785b      	ldrb	r3, [r3, #1]
 8024642:	f003 0308 	and.w	r3, r3, #8
 8024646:	b2db      	uxtb	r3, r3
 8024648:	2b00      	cmp	r3, #0
 802464a:	d031      	beq.n	80246b0 <CheckIllegalEnterSwing+0x144>
			{
				if (isCounterEnter == FALSE)
 802464c:	4b1d      	ldr	r3, [pc, #116]	; (80246c4 <CheckIllegalEnterSwing+0x158>)
 802464e:	781b      	ldrb	r3, [r3, #0]
 8024650:	f083 0301 	eor.w	r3, r3, #1
 8024654:	b2db      	uxtb	r3, r3
 8024656:	2b00      	cmp	r3, #0
 8024658:	d02a      	beq.n	80246b0 <CheckIllegalEnterSwing+0x144>
				{
					SetTimer(&timerInverseEnter);
 802465a:	481b      	ldr	r0, [pc, #108]	; (80246c8 <CheckIllegalEnterSwing+0x15c>)
 802465c:	f00c f9ea 	bl	8030a34 <SetTimer>
					CloseBarrierForSwing();
 8024660:	f7ff f934 	bl	80238cc <CloseBarrierForSwing>
					isCounterEnter = TRUE;
 8024664:	4b17      	ldr	r3, [pc, #92]	; (80246c4 <CheckIllegalEnterSwing+0x158>)
 8024666:	2201      	movs	r2, #1
 8024668:	701a      	strb	r2, [r3, #0]
					InhibitPass(FROM_EXIT);
 802466a:	2002      	movs	r0, #2
 802466c:	f7fd fb8e 	bl	8021d8c <InhibitPass>
					gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_COUNTER_ENTER;
 8024670:	4a11      	ldr	r2, [pc, #68]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 8024672:	7a13      	ldrb	r3, [r2, #8]
 8024674:	2102      	movs	r1, #2
 8024676:	f361 0302 	bfi	r3, r1, #0, #3
 802467a:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nCounter_EN = FLG_SET;
 802467c:	4a0e      	ldr	r2, [pc, #56]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 802467e:	7f13      	ldrb	r3, [r2, #28]
 8024680:	f043 0308 	orr.w	r3, r3, #8
 8024684:	7713      	strb	r3, [r2, #28]
					//PRINTL(" [EN] Inhibit Pass - Inverse Enter:%d", gGCUStatus.bAuthCount_EN);
					printf(" [EN] Inhibit Pass - Inverse Enter:%d \n", gGCUStatus.bAuthCount_EN);
 8024686:	4b0c      	ldr	r3, [pc, #48]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 8024688:	791b      	ldrb	r3, [r3, #4]
 802468a:	b2db      	uxtb	r3, r3
 802468c:	4619      	mov	r1, r3
 802468e:	4812      	ldr	r0, [pc, #72]	; (80246d8 <CheckIllegalEnterSwing+0x16c>)
 8024690:	f005 f8e0 	bl	8029854 <printf_>
			{
				CheckIllegalEnterTimer(FROM_EXIT);
			}
		}
	}
}
 8024694:	e00c      	b.n	80246b0 <CheckIllegalEnterSwing+0x144>
		else if (!gGCUStatus.bAuthCount_EX)
 8024696:	4b08      	ldr	r3, [pc, #32]	; (80246b8 <CheckIllegalEnterSwing+0x14c>)
 8024698:	795b      	ldrb	r3, [r3, #5]
 802469a:	b2db      	uxtb	r3, r3
 802469c:	2b00      	cmp	r3, #0
 802469e:	d107      	bne.n	80246b0 <CheckIllegalEnterSwing+0x144>
			if (CheckCritical())
 80246a0:	f7fe ff1a 	bl	80234d8 <CheckCritical>
 80246a4:	4603      	mov	r3, r0
 80246a6:	2b00      	cmp	r3, #0
 80246a8:	d002      	beq.n	80246b0 <CheckIllegalEnterSwing+0x144>
				CheckIllegalEnterTimer(FROM_EXIT);
 80246aa:	2002      	movs	r0, #2
 80246ac:	f7fd fd6c 	bl	8022188 <CheckIllegalEnterTimer>
}
 80246b0:	bf00      	nop
 80246b2:	bd80      	pop	{r7, pc}
 80246b4:	240004af 	.word	0x240004af
 80246b8:	24000524 	.word	0x24000524
 80246bc:	24000491 	.word	0x24000491
 80246c0:	24000480 	.word	0x24000480
 80246c4:	2400049b 	.word	0x2400049b
 80246c8:	24000294 	.word	0x24000294
 80246cc:	0803284c 	.word	0x0803284c
 80246d0:	240004b0 	.word	0x240004b0
 80246d4:	24000490 	.word	0x24000490
 80246d8:	08032874 	.word	0x08032874

080246dc <CheckTGTimerForSwing>:

void CheckTGTimerForSwing(void)
{
 80246dc:	b580      	push	{r7, lr}
 80246de:	af00      	add	r7, sp, #0
	if (timerTailgatingDetection.fStart)
 80246e0:	4b31      	ldr	r3, [pc, #196]	; (80247a8 <CheckTGTimerForSwing+0xcc>)
 80246e2:	781b      	ldrb	r3, [r3, #0]
 80246e4:	2b00      	cmp	r3, #0
 80246e6:	d05d      	beq.n	80247a4 <CheckTGTimerForSwing+0xc8>
	{
		if (IsTimeout(&timerTailgatingDetection, dwTgDetectionTime * TICK_COUNT_100MS)) // 1.5 s
 80246e8:	4b30      	ldr	r3, [pc, #192]	; (80247ac <CheckTGTimerForSwing+0xd0>)
 80246ea:	681a      	ldr	r2, [r3, #0]
 80246ec:	4613      	mov	r3, r2
 80246ee:	009b      	lsls	r3, r3, #2
 80246f0:	4413      	add	r3, r2
 80246f2:	005b      	lsls	r3, r3, #1
 80246f4:	4619      	mov	r1, r3
 80246f6:	482c      	ldr	r0, [pc, #176]	; (80247a8 <CheckTGTimerForSwing+0xcc>)
 80246f8:	f00c f9be 	bl	8030a78 <IsTimeout>
 80246fc:	4603      	mov	r3, r0
 80246fe:	2b00      	cmp	r3, #0
 8024700:	d050      	beq.n	80247a4 <CheckTGTimerForSwing+0xc8>
		{
			ResetTimer(&timerTailgatingDetection);
 8024702:	4829      	ldr	r0, [pc, #164]	; (80247a8 <CheckTGTimerForSwing+0xcc>)
 8024704:	f00c f9aa 	bl	8030a5c <ResetTimer>

			if (gGCUStatus.bAuthCount_EN || gGCUStatus.bAuthCount_EX)
 8024708:	4b29      	ldr	r3, [pc, #164]	; (80247b0 <CheckTGTimerForSwing+0xd4>)
 802470a:	791b      	ldrb	r3, [r3, #4]
 802470c:	b2db      	uxtb	r3, r3
 802470e:	2b00      	cmp	r3, #0
 8024710:	d104      	bne.n	802471c <CheckTGTimerForSwing+0x40>
 8024712:	4b27      	ldr	r3, [pc, #156]	; (80247b0 <CheckTGTimerForSwing+0xd4>)
 8024714:	795b      	ldrb	r3, [r3, #5]
 8024716:	b2db      	uxtb	r3, r3
 8024718:	2b00      	cmp	r3, #0
 802471a:	d043      	beq.n	80247a4 <CheckTGTimerForSwing+0xc8>
			{
				if (!psenNewSwing.section.lower_EN && !psenNewSwing.section.lower_EX)
 802471c:	4b25      	ldr	r3, [pc, #148]	; (80247b4 <CheckTGTimerForSwing+0xd8>)
 802471e:	781b      	ldrb	r3, [r3, #0]
 8024720:	f023 030f 	bic.w	r3, r3, #15
 8024724:	b2db      	uxtb	r3, r3
 8024726:	2b00      	cmp	r3, #0
 8024728:	d135      	bne.n	8024796 <CheckTGTimerForSwing+0xba>
 802472a:	4b22      	ldr	r3, [pc, #136]	; (80247b4 <CheckTGTimerForSwing+0xd8>)
 802472c:	785b      	ldrb	r3, [r3, #1]
 802472e:	f023 030f 	bic.w	r3, r3, #15
 8024732:	b2db      	uxtb	r3, r3
 8024734:	2b00      	cmp	r3, #0
 8024736:	d12e      	bne.n	8024796 <CheckTGTimerForSwing+0xba>
				{
					//PRINTL(" [CheckTGTimerForSwing] No follower [%d/%d]", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
					printf(" [CheckTGTimerForSwing] No follower [%d/%d] \n", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
 8024738:	4b1d      	ldr	r3, [pc, #116]	; (80247b0 <CheckTGTimerForSwing+0xd4>)
 802473a:	791b      	ldrb	r3, [r3, #4]
 802473c:	b2db      	uxtb	r3, r3
 802473e:	4619      	mov	r1, r3
 8024740:	4b1b      	ldr	r3, [pc, #108]	; (80247b0 <CheckTGTimerForSwing+0xd4>)
 8024742:	795b      	ldrb	r3, [r3, #5]
 8024744:	b2db      	uxtb	r3, r3
 8024746:	461a      	mov	r2, r3
 8024748:	481b      	ldr	r0, [pc, #108]	; (80247b8 <CheckTGTimerForSwing+0xdc>)
 802474a:	f005 f883 	bl	8029854 <printf_>


					if (gGCUStatus.bAuthCount_EN > 0)
 802474e:	4b18      	ldr	r3, [pc, #96]	; (80247b0 <CheckTGTimerForSwing+0xd4>)
 8024750:	791b      	ldrb	r3, [r3, #4]
 8024752:	b2db      	uxtb	r3, r3
 8024754:	2b00      	cmp	r3, #0
 8024756:	d007      	beq.n	8024768 <CheckTGTimerForSwing+0x8c>
					{
						gGCUStatus.bAuthCount_EN--;
 8024758:	4b15      	ldr	r3, [pc, #84]	; (80247b0 <CheckTGTimerForSwing+0xd4>)
 802475a:	791b      	ldrb	r3, [r3, #4]
 802475c:	b2db      	uxtb	r3, r3
 802475e:	3b01      	subs	r3, #1
 8024760:	b2da      	uxtb	r2, r3
 8024762:	4b13      	ldr	r3, [pc, #76]	; (80247b0 <CheckTGTimerForSwing+0xd4>)
 8024764:	711a      	strb	r2, [r3, #4]
 8024766:	e00b      	b.n	8024780 <CheckTGTimerForSwing+0xa4>
					}
					else if (gGCUStatus.bAuthCount_EX > 0)
 8024768:	4b11      	ldr	r3, [pc, #68]	; (80247b0 <CheckTGTimerForSwing+0xd4>)
 802476a:	795b      	ldrb	r3, [r3, #5]
 802476c:	b2db      	uxtb	r3, r3
 802476e:	2b00      	cmp	r3, #0
 8024770:	d006      	beq.n	8024780 <CheckTGTimerForSwing+0xa4>
					{
						gGCUStatus.bAuthCount_EX--;
 8024772:	4b0f      	ldr	r3, [pc, #60]	; (80247b0 <CheckTGTimerForSwing+0xd4>)
 8024774:	795b      	ldrb	r3, [r3, #5]
 8024776:	b2db      	uxtb	r3, r3
 8024778:	3b01      	subs	r3, #1
 802477a:	b2da      	uxtb	r2, r3
 802477c:	4b0c      	ldr	r3, [pc, #48]	; (80247b0 <CheckTGTimerForSwing+0xd4>)
 802477e:	715a      	strb	r2, [r3, #5]
					}

					if (CheckZeroAuthCount())
 8024780:	f7fe fe94 	bl	80234ac <CheckZeroAuthCount>
 8024784:	4603      	mov	r3, r0
 8024786:	2b00      	cmp	r3, #0
 8024788:	d00c      	beq.n	80247a4 <CheckTGTimerForSwing+0xc8>
					{
						CloseBarrierForSwing();
 802478a:	f7ff f89f 	bl	80238cc <CloseBarrierForSwing>
						//PRINTL(" [CheckTGTimerForSwing] Close barrier!");
						printf(" [CheckTGTimerForSwing] Close barrier! \n");
 802478e:	480b      	ldr	r0, [pc, #44]	; (80247bc <CheckTGTimerForSwing+0xe0>)
 8024790:	f005 f860 	bl	8029854 <printf_>
					if (CheckZeroAuthCount())
 8024794:	e006      	b.n	80247a4 <CheckTGTimerForSwing+0xc8>
					}
				}
				else
				{
					//PRINTL(" [CheckTGTimerForSwing] Something still detected.");
					printf(" [CheckTGTimerForSwing] Something still detected.\n");
 8024796:	480a      	ldr	r0, [pc, #40]	; (80247c0 <CheckTGTimerForSwing+0xe4>)
 8024798:	f005 f85c 	bl	8029854 <printf_>
					SetTimer(&timerTailgatingDetection);
 802479c:	4802      	ldr	r0, [pc, #8]	; (80247a8 <CheckTGTimerForSwing+0xcc>)
 802479e:	f00c f949 	bl	8030a34 <SetTimer>
				}
			}
		}
	}
}
 80247a2:	e7ff      	b.n	80247a4 <CheckTGTimerForSwing+0xc8>
 80247a4:	bf00      	nop
 80247a6:	bd80      	pop	{r7, pc}
 80247a8:	240001ec 	.word	0x240001ec
 80247ac:	24000014 	.word	0x24000014
 80247b0:	24000524 	.word	0x24000524
 80247b4:	24000480 	.word	0x24000480
 80247b8:	0803289c 	.word	0x0803289c
 80247bc:	080328cc 	.word	0x080328cc
 80247c0:	080328f8 	.word	0x080328f8

080247c4 <CheckForceOpen>:

void CheckForceOpen(void)
{
 80247c4:	b580      	push	{r7, lr}
 80247c6:	af00      	add	r7, sp, #0
	if (timerForceOpenClear.fStart)
 80247c8:	4b46      	ldr	r3, [pc, #280]	; (80248e4 <CheckForceOpen+0x120>)
 80247ca:	781b      	ldrb	r3, [r3, #0]
 80247cc:	2b00      	cmp	r3, #0
 80247ce:	d023      	beq.n	8024818 <CheckForceOpen+0x54>
	{
		if (IsTimeout(&timerForceOpenClear, dwForceOpenClearTime * TICK_COUNT_100MS))
 80247d0:	4b45      	ldr	r3, [pc, #276]	; (80248e8 <CheckForceOpen+0x124>)
 80247d2:	681a      	ldr	r2, [r3, #0]
 80247d4:	4613      	mov	r3, r2
 80247d6:	009b      	lsls	r3, r3, #2
 80247d8:	4413      	add	r3, r2
 80247da:	005b      	lsls	r3, r3, #1
 80247dc:	4619      	mov	r1, r3
 80247de:	4841      	ldr	r0, [pc, #260]	; (80248e4 <CheckForceOpen+0x120>)
 80247e0:	f00c f94a 	bl	8030a78 <IsTimeout>
 80247e4:	4603      	mov	r3, r0
 80247e6:	2b00      	cmp	r3, #0
 80247e8:	d07a      	beq.n	80248e0 <CheckForceOpen+0x11c>
		{
			//PRINTL(" [CheckForceOpen] Flag Clear!!!!");
			printf(" [CheckForceOpen] Flag Clear!!!! \n");
 80247ea:	4840      	ldr	r0, [pc, #256]	; (80248ec <CheckForceOpen+0x128>)
 80247ec:	f005 f832 	bl	8029854 <printf_>
			ResetTimer(&timerForceOpenClear);
 80247f0:	483c      	ldr	r0, [pc, #240]	; (80248e4 <CheckForceOpen+0x120>)
 80247f2:	f00c f933 	bl	8030a5c <ResetTimer>
			isForceOpen = FALSE;
 80247f6:	4b3e      	ldr	r3, [pc, #248]	; (80248f0 <CheckForceOpen+0x12c>)
 80247f8:	2200      	movs	r2, #0
 80247fa:	701a      	strb	r2, [r3, #0]
			gGCUStatus.IllegalPass.b.nJumping_EN = FLG_OFF;
 80247fc:	4a3d      	ldr	r2, [pc, #244]	; (80248f4 <CheckForceOpen+0x130>)
 80247fe:	7f13      	ldrb	r3, [r2, #28]
 8024800:	f36f 0341 	bfc	r3, #1, #1
 8024804:	7713      	strb	r3, [r2, #28]
			gGCUStatus.IllegalPass.b.nJumping_EX = FLG_OFF;
 8024806:	4a3b      	ldr	r2, [pc, #236]	; (80248f4 <CheckForceOpen+0x130>)
 8024808:	7f13      	ldrb	r3, [r2, #28]
 802480a:	f36f 1345 	bfc	r3, #5, #1
 802480e:	7713      	strb	r3, [r2, #28]
			gGCUStatus.bDoorForcedOpen = FROM_NONE;
 8024810:	4b38      	ldr	r3, [pc, #224]	; (80248f4 <CheckForceOpen+0x130>)
 8024812:	2200      	movs	r2, #0
 8024814:	755a      	strb	r2, [r3, #21]
				//PRINTL(" [EX] Force Open!");
				printf(" [EX] Force Open! \n");
			}
		}
	}
}
 8024816:	e063      	b.n	80248e0 <CheckForceOpen+0x11c>
		if (isForceOpen == TRUE && gGCUStatus.bAuthCount_EN == 0 && gGCUStatus.bAuthCount_EX == 0)
 8024818:	4b35      	ldr	r3, [pc, #212]	; (80248f0 <CheckForceOpen+0x12c>)
 802481a:	781b      	ldrb	r3, [r3, #0]
 802481c:	2b00      	cmp	r3, #0
 802481e:	d05f      	beq.n	80248e0 <CheckForceOpen+0x11c>
 8024820:	4b34      	ldr	r3, [pc, #208]	; (80248f4 <CheckForceOpen+0x130>)
 8024822:	791b      	ldrb	r3, [r3, #4]
 8024824:	b2db      	uxtb	r3, r3
 8024826:	2b00      	cmp	r3, #0
 8024828:	d15a      	bne.n	80248e0 <CheckForceOpen+0x11c>
 802482a:	4b32      	ldr	r3, [pc, #200]	; (80248f4 <CheckForceOpen+0x130>)
 802482c:	795b      	ldrb	r3, [r3, #5]
 802482e:	b2db      	uxtb	r3, r3
 8024830:	2b00      	cmp	r3, #0
 8024832:	d155      	bne.n	80248e0 <CheckForceOpen+0x11c>
			if (isForceOpenReady_EN == TRUE && (psenNewSwing.b.s13 || psenNewSwing.b.s14))
 8024834:	4b30      	ldr	r3, [pc, #192]	; (80248f8 <CheckForceOpen+0x134>)
 8024836:	781b      	ldrb	r3, [r3, #0]
 8024838:	2b00      	cmp	r3, #0
 802483a:	d026      	beq.n	802488a <CheckForceOpen+0xc6>
 802483c:	4b2f      	ldr	r3, [pc, #188]	; (80248fc <CheckForceOpen+0x138>)
 802483e:	785b      	ldrb	r3, [r3, #1]
 8024840:	f003 0310 	and.w	r3, r3, #16
 8024844:	b2db      	uxtb	r3, r3
 8024846:	2b00      	cmp	r3, #0
 8024848:	d106      	bne.n	8024858 <CheckForceOpen+0x94>
 802484a:	4b2c      	ldr	r3, [pc, #176]	; (80248fc <CheckForceOpen+0x138>)
 802484c:	785b      	ldrb	r3, [r3, #1]
 802484e:	f003 0320 	and.w	r3, r3, #32
 8024852:	b2db      	uxtb	r3, r3
 8024854:	2b00      	cmp	r3, #0
 8024856:	d018      	beq.n	802488a <CheckForceOpen+0xc6>
				isForceOpenReady_EN = FALSE;
 8024858:	4b27      	ldr	r3, [pc, #156]	; (80248f8 <CheckForceOpen+0x134>)
 802485a:	2200      	movs	r2, #0
 802485c:	701a      	strb	r2, [r3, #0]
				gGCUStatus.bDoorForcedOpen = FROM_ENTRY;
 802485e:	4b25      	ldr	r3, [pc, #148]	; (80248f4 <CheckForceOpen+0x130>)
 8024860:	2201      	movs	r2, #1
 8024862:	755a      	strb	r2, [r3, #21]
				ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8024864:	4b26      	ldr	r3, [pc, #152]	; (8024900 <CheckForceOpen+0x13c>)
 8024866:	7a9b      	ldrb	r3, [r3, #10]
 8024868:	461a      	mov	r2, r3
 802486a:	2101      	movs	r1, #1
 802486c:	2000      	movs	r0, #0
 802486e:	f7fc fe41 	bl	80214f4 <ControlBuzzer>
				InhibitPass(FROM_EXIT);
 8024872:	2002      	movs	r0, #2
 8024874:	f7fd fa8a 	bl	8021d8c <InhibitPass>
				SetTimer(&timerForceOpenClear);
 8024878:	481a      	ldr	r0, [pc, #104]	; (80248e4 <CheckForceOpen+0x120>)
 802487a:	f00c f8db 	bl	8030a34 <SetTimer>
				isForceOpen = FALSE;
 802487e:	4b1c      	ldr	r3, [pc, #112]	; (80248f0 <CheckForceOpen+0x12c>)
 8024880:	2200      	movs	r2, #0
 8024882:	701a      	strb	r2, [r3, #0]
				printf(" [EN] Force Open! \n");
 8024884:	481f      	ldr	r0, [pc, #124]	; (8024904 <CheckForceOpen+0x140>)
 8024886:	f004 ffe5 	bl	8029854 <printf_>
			if (isForceOpenReady_EX == TRUE && (psenNewSwing.b.s05 || psenNewSwing.b.s06))
 802488a:	4b1f      	ldr	r3, [pc, #124]	; (8024908 <CheckForceOpen+0x144>)
 802488c:	781b      	ldrb	r3, [r3, #0]
 802488e:	2b00      	cmp	r3, #0
 8024890:	d026      	beq.n	80248e0 <CheckForceOpen+0x11c>
 8024892:	4b1a      	ldr	r3, [pc, #104]	; (80248fc <CheckForceOpen+0x138>)
 8024894:	781b      	ldrb	r3, [r3, #0]
 8024896:	f003 0310 	and.w	r3, r3, #16
 802489a:	b2db      	uxtb	r3, r3
 802489c:	2b00      	cmp	r3, #0
 802489e:	d106      	bne.n	80248ae <CheckForceOpen+0xea>
 80248a0:	4b16      	ldr	r3, [pc, #88]	; (80248fc <CheckForceOpen+0x138>)
 80248a2:	781b      	ldrb	r3, [r3, #0]
 80248a4:	f003 0320 	and.w	r3, r3, #32
 80248a8:	b2db      	uxtb	r3, r3
 80248aa:	2b00      	cmp	r3, #0
 80248ac:	d018      	beq.n	80248e0 <CheckForceOpen+0x11c>
				isForceOpenReady_EX = FALSE;
 80248ae:	4b16      	ldr	r3, [pc, #88]	; (8024908 <CheckForceOpen+0x144>)
 80248b0:	2200      	movs	r2, #0
 80248b2:	701a      	strb	r2, [r3, #0]
				gGCUStatus.bDoorForcedOpen = FROM_EXIT;
 80248b4:	4b0f      	ldr	r3, [pc, #60]	; (80248f4 <CheckForceOpen+0x130>)
 80248b6:	2202      	movs	r2, #2
 80248b8:	755a      	strb	r2, [r3, #21]
				ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 80248ba:	4b11      	ldr	r3, [pc, #68]	; (8024900 <CheckForceOpen+0x13c>)
 80248bc:	7a9b      	ldrb	r3, [r3, #10]
 80248be:	461a      	mov	r2, r3
 80248c0:	2101      	movs	r1, #1
 80248c2:	2000      	movs	r0, #0
 80248c4:	f7fc fe16 	bl	80214f4 <ControlBuzzer>
				InhibitPass(FROM_ENTRY);
 80248c8:	2001      	movs	r0, #1
 80248ca:	f7fd fa5f 	bl	8021d8c <InhibitPass>
				SetTimer(&timerForceOpenClear);
 80248ce:	4805      	ldr	r0, [pc, #20]	; (80248e4 <CheckForceOpen+0x120>)
 80248d0:	f00c f8b0 	bl	8030a34 <SetTimer>
				isForceOpen = FALSE;
 80248d4:	4b06      	ldr	r3, [pc, #24]	; (80248f0 <CheckForceOpen+0x12c>)
 80248d6:	2200      	movs	r2, #0
 80248d8:	701a      	strb	r2, [r3, #0]
				printf(" [EX] Force Open! \n");
 80248da:	480c      	ldr	r0, [pc, #48]	; (802490c <CheckForceOpen+0x148>)
 80248dc:	f004 ffba 	bl	8029854 <printf_>
}
 80248e0:	bf00      	nop
 80248e2:	bd80      	pop	{r7, pc}
 80248e4:	24000288 	.word	0x24000288
 80248e8:	24000024 	.word	0x24000024
 80248ec:	0803292c 	.word	0x0803292c
 80248f0:	24000499 	.word	0x24000499
 80248f4:	24000524 	.word	0x24000524
 80248f8:	24000496 	.word	0x24000496
 80248fc:	24000480 	.word	0x24000480
 8024900:	24000514 	.word	0x24000514
 8024904:	08032950 	.word	0x08032950
 8024908:	24000497 	.word	0x24000497
 802490c:	08032964 	.word	0x08032964

08024910 <CheckBarrierStop>:

void CheckBarrierStop(void)
{
 8024910:	b580      	push	{r7, lr}
 8024912:	af00      	add	r7, sp, #0
	if (timerBarrierStop.fStart)
 8024914:	4b0f      	ldr	r3, [pc, #60]	; (8024954 <CheckBarrierStop+0x44>)
 8024916:	781b      	ldrb	r3, [r3, #0]
 8024918:	2b00      	cmp	r3, #0
 802491a:	d018      	beq.n	802494e <CheckBarrierStop+0x3e>
	{
		if (IsTimeout(&timerBarrierStop, dwBarrierStopTime * TICK_COUNT_100MS))
 802491c:	4b0e      	ldr	r3, [pc, #56]	; (8024958 <CheckBarrierStop+0x48>)
 802491e:	681a      	ldr	r2, [r3, #0]
 8024920:	4613      	mov	r3, r2
 8024922:	009b      	lsls	r3, r3, #2
 8024924:	4413      	add	r3, r2
 8024926:	005b      	lsls	r3, r3, #1
 8024928:	4619      	mov	r1, r3
 802492a:	480a      	ldr	r0, [pc, #40]	; (8024954 <CheckBarrierStop+0x44>)
 802492c:	f00c f8a4 	bl	8030a78 <IsTimeout>
 8024930:	4603      	mov	r3, r0
 8024932:	2b00      	cmp	r3, #0
 8024934:	d00b      	beq.n	802494e <CheckBarrierStop+0x3e>
		{
			//PRINTL(" [CheckBarrierStop] Safety Stop Expired");
			printf(" [CheckBarrierStop] Safety Stop Expired \n");
 8024936:	4809      	ldr	r0, [pc, #36]	; (802495c <CheckBarrierStop+0x4c>)
 8024938:	f004 ff8c 	bl	8029854 <printf_>
			StopBarrierForSwing(FALSE);
 802493c:	2000      	movs	r0, #0
 802493e:	f7fe fe4d 	bl	80235dc <StopBarrierForSwing>
			ResetTimer(&timerBarrierStop);
 8024942:	4804      	ldr	r0, [pc, #16]	; (8024954 <CheckBarrierStop+0x44>)
 8024944:	f00c f88a 	bl	8030a5c <ResetTimer>
			SetTimer(&timerSafety);
 8024948:	4805      	ldr	r0, [pc, #20]	; (8024960 <CheckBarrierStop+0x50>)
 802494a:	f00c f873 	bl	8030a34 <SetTimer>
		}
	}
}
 802494e:	bf00      	nop
 8024950:	bd80      	pop	{r7, pc}
 8024952:	bf00      	nop
 8024954:	2400027c 	.word	0x2400027c
 8024958:	24000020 	.word	0x24000020
 802495c:	08032978 	.word	0x08032978
 8024960:	24000258 	.word	0x24000258

08024964 <CheckSafetyTimerForSwing>:

void CheckSafetyTimerForSwing(void)
{
 8024964:	b580      	push	{r7, lr}
 8024966:	af00      	add	r7, sp, #0
	if (timerSafety.fStart)
 8024968:	4b95      	ldr	r3, [pc, #596]	; (8024bc0 <CheckSafetyTimerForSwing+0x25c>)
 802496a:	781b      	ldrb	r3, [r3, #0]
 802496c:	2b00      	cmp	r3, #0
 802496e:	f000 8124 	beq.w	8024bba <CheckSafetyTimerForSwing+0x256>
	{
		if (IsTimeout(&timerSafety, gdwTimeoutSafety * TICK_COUNT_100MS))
 8024972:	4b94      	ldr	r3, [pc, #592]	; (8024bc4 <CheckSafetyTimerForSwing+0x260>)
 8024974:	681a      	ldr	r2, [r3, #0]
 8024976:	4613      	mov	r3, r2
 8024978:	009b      	lsls	r3, r3, #2
 802497a:	4413      	add	r3, r2
 802497c:	005b      	lsls	r3, r3, #1
 802497e:	4619      	mov	r1, r3
 8024980:	488f      	ldr	r0, [pc, #572]	; (8024bc0 <CheckSafetyTimerForSwing+0x25c>)
 8024982:	f00c f879 	bl	8030a78 <IsTimeout>
 8024986:	4603      	mov	r3, r0
 8024988:	2b00      	cmp	r3, #0
 802498a:	d00f      	beq.n	80249ac <CheckSafetyTimerForSwing+0x48>
		{
			//PRINTL(" [CheckSafetyTimerForSwing] Safety Time Out!");
			printf(" [CheckSafetyTimerForSwing] Safety Time Out! \n");
 802498c:	488e      	ldr	r0, [pc, #568]	; (8024bc8 <CheckSafetyTimerForSwing+0x264>)
 802498e:	f004 ff61 	bl	8029854 <printf_>
			ResetTimer(&timerSafety);
 8024992:	488b      	ldr	r0, [pc, #556]	; (8024bc0 <CheckSafetyTimerForSwing+0x25c>)
 8024994:	f00c f862 	bl	8030a5c <ResetTimer>
			gbAuthDirection = FROM_NONE;
 8024998:	4b8c      	ldr	r3, [pc, #560]	; (8024bcc <CheckSafetyTimerForSwing+0x268>)
 802499a:	2200      	movs	r2, #0
 802499c:	701a      	strb	r2, [r3, #0]
			isSafetyOn = FALSE;
 802499e:	4b8c      	ldr	r3, [pc, #560]	; (8024bd0 <CheckSafetyTimerForSwing+0x26c>)
 80249a0:	2200      	movs	r2, #0
 80249a2:	701a      	strb	r2, [r3, #0]
			isSentClose = FALSE;
 80249a4:	4b8b      	ldr	r3, [pc, #556]	; (8024bd4 <CheckSafetyTimerForSwing+0x270>)
 80249a6:	2200      	movs	r2, #0
 80249a8:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 80249aa:	e106      	b.n	8024bba <CheckSafetyTimerForSwing+0x256>
			if (gbEmergencyFlag == FLG_OFF || gfTestMode == TRUE)
 80249ac:	4b8a      	ldr	r3, [pc, #552]	; (8024bd8 <CheckSafetyTimerForSwing+0x274>)
 80249ae:	781b      	ldrb	r3, [r3, #0]
 80249b0:	2b00      	cmp	r3, #0
 80249b2:	d004      	beq.n	80249be <CheckSafetyTimerForSwing+0x5a>
 80249b4:	4b89      	ldr	r3, [pc, #548]	; (8024bdc <CheckSafetyTimerForSwing+0x278>)
 80249b6:	781b      	ldrb	r3, [r3, #0]
 80249b8:	2b00      	cmp	r3, #0
 80249ba:	f000 80fe 	beq.w	8024bba <CheckSafetyTimerForSwing+0x256>
				if (gbAuthDirection == FROM_ENTRY)
 80249be:	4b83      	ldr	r3, [pc, #524]	; (8024bcc <CheckSafetyTimerForSwing+0x268>)
 80249c0:	781b      	ldrb	r3, [r3, #0]
 80249c2:	2b01      	cmp	r3, #1
 80249c4:	d158      	bne.n	8024a78 <CheckSafetyTimerForSwing+0x114>
					gGCUStatus.bSafetyDetection = FLG_SET;
 80249c6:	4b86      	ldr	r3, [pc, #536]	; (8024be0 <CheckSafetyTimerForSwing+0x27c>)
 80249c8:	2201      	movs	r2, #1
 80249ca:	74da      	strb	r2, [r3, #19]
					if (psenNewSwing.section.lower_EX || psenNewSwing.b.s04 || psenNewSwing.b.s08 || gfAISafetyOn == TRUE)
 80249cc:	4b85      	ldr	r3, [pc, #532]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 80249ce:	785b      	ldrb	r3, [r3, #1]
 80249d0:	f023 030f 	bic.w	r3, r3, #15
 80249d4:	b2db      	uxtb	r3, r3
 80249d6:	2b00      	cmp	r3, #0
 80249d8:	d111      	bne.n	80249fe <CheckSafetyTimerForSwing+0x9a>
 80249da:	4b82      	ldr	r3, [pc, #520]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 80249dc:	781b      	ldrb	r3, [r3, #0]
 80249de:	f003 0308 	and.w	r3, r3, #8
 80249e2:	b2db      	uxtb	r3, r3
 80249e4:	2b00      	cmp	r3, #0
 80249e6:	d10a      	bne.n	80249fe <CheckSafetyTimerForSwing+0x9a>
 80249e8:	4b7e      	ldr	r3, [pc, #504]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 80249ea:	781b      	ldrb	r3, [r3, #0]
 80249ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80249f0:	b2db      	uxtb	r3, r3
 80249f2:	2b00      	cmp	r3, #0
 80249f4:	d103      	bne.n	80249fe <CheckSafetyTimerForSwing+0x9a>
 80249f6:	4b7c      	ldr	r3, [pc, #496]	; (8024be8 <CheckSafetyTimerForSwing+0x284>)
 80249f8:	781b      	ldrb	r3, [r3, #0]
 80249fa:	2b00      	cmp	r3, #0
 80249fc:	d023      	beq.n	8024a46 <CheckSafetyTimerForSwing+0xe2>
						printf(" [EN] Safety Activation [%d/%d/%d] \n", psenNewSwing.section.lower_EX, psenNewSwing.b.s04, psenNewSwing.b.s08);
 80249fe:	4b79      	ldr	r3, [pc, #484]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024a00:	785b      	ldrb	r3, [r3, #1]
 8024a02:	f343 1303 	sbfx	r3, r3, #4, #4
 8024a06:	b25b      	sxtb	r3, r3
 8024a08:	4619      	mov	r1, r3
 8024a0a:	4b76      	ldr	r3, [pc, #472]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024a0c:	781b      	ldrb	r3, [r3, #0]
 8024a0e:	f343 03c0 	sbfx	r3, r3, #3, #1
 8024a12:	b25b      	sxtb	r3, r3
 8024a14:	461a      	mov	r2, r3
 8024a16:	4b73      	ldr	r3, [pc, #460]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024a18:	781b      	ldrb	r3, [r3, #0]
 8024a1a:	f343 13c0 	sbfx	r3, r3, #7, #1
 8024a1e:	b25b      	sxtb	r3, r3
 8024a20:	4872      	ldr	r0, [pc, #456]	; (8024bec <CheckSafetyTimerForSwing+0x288>)
 8024a22:	f004 ff17 	bl	8029854 <printf_>
						StopBarrierForSwing(TRUE);
 8024a26:	2001      	movs	r0, #1
 8024a28:	f7fe fdd8 	bl	80235dc <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 8024a2c:	4864      	ldr	r0, [pc, #400]	; (8024bc0 <CheckSafetyTimerForSwing+0x25c>)
 8024a2e:	f00c f815 	bl	8030a5c <ResetTimer>
						SetTimer(&timerBarrierStop);
 8024a32:	486f      	ldr	r0, [pc, #444]	; (8024bf0 <CheckSafetyTimerForSwing+0x28c>)
 8024a34:	f00b fffe 	bl	8030a34 <SetTimer>
						isSafetyOn = TRUE;
 8024a38:	4b65      	ldr	r3, [pc, #404]	; (8024bd0 <CheckSafetyTimerForSwing+0x26c>)
 8024a3a:	2201      	movs	r2, #1
 8024a3c:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 8024a3e:	4b65      	ldr	r3, [pc, #404]	; (8024bd4 <CheckSafetyTimerForSwing+0x270>)
 8024a40:	2200      	movs	r2, #0
 8024a42:	701a      	strb	r2, [r3, #0]
 8024a44:	e0b9      	b.n	8024bba <CheckSafetyTimerForSwing+0x256>
						if (!psenNewSwing.b.s08 && isSentClose == FALSE)
 8024a46:	4b67      	ldr	r3, [pc, #412]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024a48:	781b      	ldrb	r3, [r3, #0]
 8024a4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8024a4e:	b2db      	uxtb	r3, r3
 8024a50:	2b00      	cmp	r3, #0
 8024a52:	f040 80b2 	bne.w	8024bba <CheckSafetyTimerForSwing+0x256>
 8024a56:	4b5f      	ldr	r3, [pc, #380]	; (8024bd4 <CheckSafetyTimerForSwing+0x270>)
 8024a58:	781b      	ldrb	r3, [r3, #0]
 8024a5a:	f083 0301 	eor.w	r3, r3, #1
 8024a5e:	b2db      	uxtb	r3, r3
 8024a60:	2b00      	cmp	r3, #0
 8024a62:	f000 80aa 	beq.w	8024bba <CheckSafetyTimerForSwing+0x256>
							gGCUStatus.bSafetyDetection = FLG_OFF;
 8024a66:	4b5e      	ldr	r3, [pc, #376]	; (8024be0 <CheckSafetyTimerForSwing+0x27c>)
 8024a68:	2200      	movs	r2, #0
 8024a6a:	74da      	strb	r2, [r3, #19]
							isSentClose = TRUE;
 8024a6c:	4b59      	ldr	r3, [pc, #356]	; (8024bd4 <CheckSafetyTimerForSwing+0x270>)
 8024a6e:	2201      	movs	r2, #1
 8024a70:	701a      	strb	r2, [r3, #0]
							CloseBarrierForSwing();
 8024a72:	f7fe ff2b 	bl	80238cc <CloseBarrierForSwing>
}
 8024a76:	e0a0      	b.n	8024bba <CheckSafetyTimerForSwing+0x256>
				else if (gbAuthDirection == FROM_EXIT)
 8024a78:	4b54      	ldr	r3, [pc, #336]	; (8024bcc <CheckSafetyTimerForSwing+0x268>)
 8024a7a:	781b      	ldrb	r3, [r3, #0]
 8024a7c:	2b02      	cmp	r3, #2
 8024a7e:	d156      	bne.n	8024b2e <CheckSafetyTimerForSwing+0x1ca>
					gGCUStatus.bSafetyDetection = FLG_SET;
 8024a80:	4b57      	ldr	r3, [pc, #348]	; (8024be0 <CheckSafetyTimerForSwing+0x27c>)
 8024a82:	2201      	movs	r2, #1
 8024a84:	74da      	strb	r2, [r3, #19]
					if (psenNewSwing.section.lower_EN || psenNewSwing.b.s12 || psenNewSwing.b.s16 || gfAISafetyOn == TRUE)
 8024a86:	4b57      	ldr	r3, [pc, #348]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024a88:	781b      	ldrb	r3, [r3, #0]
 8024a8a:	f023 030f 	bic.w	r3, r3, #15
 8024a8e:	b2db      	uxtb	r3, r3
 8024a90:	2b00      	cmp	r3, #0
 8024a92:	d111      	bne.n	8024ab8 <CheckSafetyTimerForSwing+0x154>
 8024a94:	4b53      	ldr	r3, [pc, #332]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024a96:	785b      	ldrb	r3, [r3, #1]
 8024a98:	f003 0308 	and.w	r3, r3, #8
 8024a9c:	b2db      	uxtb	r3, r3
 8024a9e:	2b00      	cmp	r3, #0
 8024aa0:	d10a      	bne.n	8024ab8 <CheckSafetyTimerForSwing+0x154>
 8024aa2:	4b50      	ldr	r3, [pc, #320]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024aa4:	785b      	ldrb	r3, [r3, #1]
 8024aa6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8024aaa:	b2db      	uxtb	r3, r3
 8024aac:	2b00      	cmp	r3, #0
 8024aae:	d103      	bne.n	8024ab8 <CheckSafetyTimerForSwing+0x154>
 8024ab0:	4b4d      	ldr	r3, [pc, #308]	; (8024be8 <CheckSafetyTimerForSwing+0x284>)
 8024ab2:	781b      	ldrb	r3, [r3, #0]
 8024ab4:	2b00      	cmp	r3, #0
 8024ab6:	d023      	beq.n	8024b00 <CheckSafetyTimerForSwing+0x19c>
						printf(" [EX] Safety Activation [%d/%d/%d] \n", psenNewSwing.section.lower_EN, psenNewSwing.b.s12, psenNewSwing.b.s16);
 8024ab8:	4b4a      	ldr	r3, [pc, #296]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024aba:	781b      	ldrb	r3, [r3, #0]
 8024abc:	f343 1303 	sbfx	r3, r3, #4, #4
 8024ac0:	b25b      	sxtb	r3, r3
 8024ac2:	4619      	mov	r1, r3
 8024ac4:	4b47      	ldr	r3, [pc, #284]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024ac6:	785b      	ldrb	r3, [r3, #1]
 8024ac8:	f343 03c0 	sbfx	r3, r3, #3, #1
 8024acc:	b25b      	sxtb	r3, r3
 8024ace:	461a      	mov	r2, r3
 8024ad0:	4b44      	ldr	r3, [pc, #272]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024ad2:	785b      	ldrb	r3, [r3, #1]
 8024ad4:	f343 13c0 	sbfx	r3, r3, #7, #1
 8024ad8:	b25b      	sxtb	r3, r3
 8024ada:	4846      	ldr	r0, [pc, #280]	; (8024bf4 <CheckSafetyTimerForSwing+0x290>)
 8024adc:	f004 feba 	bl	8029854 <printf_>
						StopBarrierForSwing(TRUE);
 8024ae0:	2001      	movs	r0, #1
 8024ae2:	f7fe fd7b 	bl	80235dc <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 8024ae6:	4836      	ldr	r0, [pc, #216]	; (8024bc0 <CheckSafetyTimerForSwing+0x25c>)
 8024ae8:	f00b ffb8 	bl	8030a5c <ResetTimer>
						SetTimer(&timerBarrierStop);
 8024aec:	4840      	ldr	r0, [pc, #256]	; (8024bf0 <CheckSafetyTimerForSwing+0x28c>)
 8024aee:	f00b ffa1 	bl	8030a34 <SetTimer>
						isSafetyOn = TRUE;
 8024af2:	4b37      	ldr	r3, [pc, #220]	; (8024bd0 <CheckSafetyTimerForSwing+0x26c>)
 8024af4:	2201      	movs	r2, #1
 8024af6:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 8024af8:	4b36      	ldr	r3, [pc, #216]	; (8024bd4 <CheckSafetyTimerForSwing+0x270>)
 8024afa:	2200      	movs	r2, #0
 8024afc:	701a      	strb	r2, [r3, #0]
 8024afe:	e05c      	b.n	8024bba <CheckSafetyTimerForSwing+0x256>
						if (!psenNewSwing.b.s16 && isSentClose == FALSE)
 8024b00:	4b38      	ldr	r3, [pc, #224]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024b02:	785b      	ldrb	r3, [r3, #1]
 8024b04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8024b08:	b2db      	uxtb	r3, r3
 8024b0a:	2b00      	cmp	r3, #0
 8024b0c:	d155      	bne.n	8024bba <CheckSafetyTimerForSwing+0x256>
 8024b0e:	4b31      	ldr	r3, [pc, #196]	; (8024bd4 <CheckSafetyTimerForSwing+0x270>)
 8024b10:	781b      	ldrb	r3, [r3, #0]
 8024b12:	f083 0301 	eor.w	r3, r3, #1
 8024b16:	b2db      	uxtb	r3, r3
 8024b18:	2b00      	cmp	r3, #0
 8024b1a:	d04e      	beq.n	8024bba <CheckSafetyTimerForSwing+0x256>
							gGCUStatus.bSafetyDetection = FLG_OFF;
 8024b1c:	4b30      	ldr	r3, [pc, #192]	; (8024be0 <CheckSafetyTimerForSwing+0x27c>)
 8024b1e:	2200      	movs	r2, #0
 8024b20:	74da      	strb	r2, [r3, #19]
							isSentClose = TRUE;
 8024b22:	4b2c      	ldr	r3, [pc, #176]	; (8024bd4 <CheckSafetyTimerForSwing+0x270>)
 8024b24:	2201      	movs	r2, #1
 8024b26:	701a      	strb	r2, [r3, #0]
							CloseBarrierForSwing();
 8024b28:	f7fe fed0 	bl	80238cc <CloseBarrierForSwing>
}
 8024b2c:	e045      	b.n	8024bba <CheckSafetyTimerForSwing+0x256>
					if (psenNewSwing.section.lower_EN || psenNewSwing.section.lower_EN || psenNewSwing.b.s02 || psenNewSwing.b.s10 || gfAISafetyOn == TRUE)
 8024b2e:	4b2d      	ldr	r3, [pc, #180]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024b30:	781b      	ldrb	r3, [r3, #0]
 8024b32:	f023 030f 	bic.w	r3, r3, #15
 8024b36:	b2db      	uxtb	r3, r3
 8024b38:	2b00      	cmp	r3, #0
 8024b3a:	d118      	bne.n	8024b6e <CheckSafetyTimerForSwing+0x20a>
 8024b3c:	4b29      	ldr	r3, [pc, #164]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024b3e:	781b      	ldrb	r3, [r3, #0]
 8024b40:	f023 030f 	bic.w	r3, r3, #15
 8024b44:	b2db      	uxtb	r3, r3
 8024b46:	2b00      	cmp	r3, #0
 8024b48:	d111      	bne.n	8024b6e <CheckSafetyTimerForSwing+0x20a>
 8024b4a:	4b26      	ldr	r3, [pc, #152]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024b4c:	781b      	ldrb	r3, [r3, #0]
 8024b4e:	f003 0302 	and.w	r3, r3, #2
 8024b52:	b2db      	uxtb	r3, r3
 8024b54:	2b00      	cmp	r3, #0
 8024b56:	d10a      	bne.n	8024b6e <CheckSafetyTimerForSwing+0x20a>
 8024b58:	4b22      	ldr	r3, [pc, #136]	; (8024be4 <CheckSafetyTimerForSwing+0x280>)
 8024b5a:	785b      	ldrb	r3, [r3, #1]
 8024b5c:	f003 0302 	and.w	r3, r3, #2
 8024b60:	b2db      	uxtb	r3, r3
 8024b62:	2b00      	cmp	r3, #0
 8024b64:	d103      	bne.n	8024b6e <CheckSafetyTimerForSwing+0x20a>
 8024b66:	4b20      	ldr	r3, [pc, #128]	; (8024be8 <CheckSafetyTimerForSwing+0x284>)
 8024b68:	781b      	ldrb	r3, [r3, #0]
 8024b6a:	2b00      	cmp	r3, #0
 8024b6c:	d015      	beq.n	8024b9a <CheckSafetyTimerForSwing+0x236>
						printf(" [EN/EX] Safety Activation \n");
 8024b6e:	4822      	ldr	r0, [pc, #136]	; (8024bf8 <CheckSafetyTimerForSwing+0x294>)
 8024b70:	f004 fe70 	bl	8029854 <printf_>
						gGCUStatus.bSafetyDetection = FLG_SET;
 8024b74:	4b1a      	ldr	r3, [pc, #104]	; (8024be0 <CheckSafetyTimerForSwing+0x27c>)
 8024b76:	2201      	movs	r2, #1
 8024b78:	74da      	strb	r2, [r3, #19]
						StopBarrierForSwing(TRUE);
 8024b7a:	2001      	movs	r0, #1
 8024b7c:	f7fe fd2e 	bl	80235dc <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 8024b80:	480f      	ldr	r0, [pc, #60]	; (8024bc0 <CheckSafetyTimerForSwing+0x25c>)
 8024b82:	f00b ff6b 	bl	8030a5c <ResetTimer>
						SetTimer(&timerBarrierStop);
 8024b86:	481a      	ldr	r0, [pc, #104]	; (8024bf0 <CheckSafetyTimerForSwing+0x28c>)
 8024b88:	f00b ff54 	bl	8030a34 <SetTimer>
						isSafetyOn = TRUE;
 8024b8c:	4b10      	ldr	r3, [pc, #64]	; (8024bd0 <CheckSafetyTimerForSwing+0x26c>)
 8024b8e:	2201      	movs	r2, #1
 8024b90:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 8024b92:	4b10      	ldr	r3, [pc, #64]	; (8024bd4 <CheckSafetyTimerForSwing+0x270>)
 8024b94:	2200      	movs	r2, #0
 8024b96:	701a      	strb	r2, [r3, #0]
 8024b98:	e00f      	b.n	8024bba <CheckSafetyTimerForSwing+0x256>
					else if (isSentClose == FALSE)
 8024b9a:	4b0e      	ldr	r3, [pc, #56]	; (8024bd4 <CheckSafetyTimerForSwing+0x270>)
 8024b9c:	781b      	ldrb	r3, [r3, #0]
 8024b9e:	f083 0301 	eor.w	r3, r3, #1
 8024ba2:	b2db      	uxtb	r3, r3
 8024ba4:	2b00      	cmp	r3, #0
 8024ba6:	d008      	beq.n	8024bba <CheckSafetyTimerForSwing+0x256>
						gGCUStatus.bSafetyDetection = FLG_OFF;
 8024ba8:	4b0d      	ldr	r3, [pc, #52]	; (8024be0 <CheckSafetyTimerForSwing+0x27c>)
 8024baa:	2200      	movs	r2, #0
 8024bac:	74da      	strb	r2, [r3, #19]
						isSentClose = TRUE;
 8024bae:	4b09      	ldr	r3, [pc, #36]	; (8024bd4 <CheckSafetyTimerForSwing+0x270>)
 8024bb0:	2201      	movs	r2, #1
 8024bb2:	701a      	strb	r2, [r3, #0]
						CloseBarrierForSwing();
 8024bb4:	f7fe fe8a 	bl	80238cc <CloseBarrierForSwing>
}
 8024bb8:	e7ff      	b.n	8024bba <CheckSafetyTimerForSwing+0x256>
 8024bba:	bf00      	nop
 8024bbc:	bd80      	pop	{r7, pc}
 8024bbe:	bf00      	nop
 8024bc0:	24000258 	.word	0x24000258
 8024bc4:	240001bc 	.word	0x240001bc
 8024bc8:	080329a4 	.word	0x080329a4
 8024bcc:	240001a2 	.word	0x240001a2
 8024bd0:	2400049a 	.word	0x2400049a
 8024bd4:	2400049f 	.word	0x2400049f
 8024bd8:	240001a1 	.word	0x240001a1
 8024bdc:	240004b2 	.word	0x240004b2
 8024be0:	24000524 	.word	0x24000524
 8024be4:	24000480 	.word	0x24000480
 8024be8:	240004b3 	.word	0x240004b3
 8024bec:	080329d4 	.word	0x080329d4
 8024bf0:	2400027c 	.word	0x2400027c
 8024bf4:	080329fc 	.word	0x080329fc
 8024bf8:	08032a24 	.word	0x08032a24

08024bfc <CheckResetTimer>:

void CheckResetTimer(void)
{
 8024bfc:	b580      	push	{r7, lr}
 8024bfe:	af00      	add	r7, sp, #0
	if (timerReset.fStart)
 8024c00:	4b47      	ldr	r3, [pc, #284]	; (8024d20 <CheckResetTimer+0x124>)
 8024c02:	781b      	ldrb	r3, [r3, #0]
 8024c04:	2b00      	cmp	r3, #0
 8024c06:	d05d      	beq.n	8024cc4 <CheckResetTimer+0xc8>
	{
		if (IsTimeout(&timerReset, dwResetTime * TICK_COUNT_100MS))
 8024c08:	4b46      	ldr	r3, [pc, #280]	; (8024d24 <CheckResetTimer+0x128>)
 8024c0a:	681a      	ldr	r2, [r3, #0]
 8024c0c:	4613      	mov	r3, r2
 8024c0e:	009b      	lsls	r3, r3, #2
 8024c10:	4413      	add	r3, r2
 8024c12:	005b      	lsls	r3, r3, #1
 8024c14:	4619      	mov	r1, r3
 8024c16:	4842      	ldr	r0, [pc, #264]	; (8024d20 <CheckResetTimer+0x124>)
 8024c18:	f00b ff2e 	bl	8030a78 <IsTimeout>
 8024c1c:	4603      	mov	r3, r0
 8024c1e:	2b00      	cmp	r3, #0
 8024c20:	d07b      	beq.n	8024d1a <CheckResetTimer+0x11e>
		{
			ResetTimer(&timerReset);
 8024c22:	483f      	ldr	r0, [pc, #252]	; (8024d20 <CheckResetTimer+0x124>)
 8024c24:	f00b ff1a 	bl	8030a5c <ResetTimer>

			if (gbEmergencyFlag == FLG_SET)
 8024c28:	4b3f      	ldr	r3, [pc, #252]	; (8024d28 <CheckResetTimer+0x12c>)
 8024c2a:	781b      	ldrb	r3, [r3, #0]
 8024c2c:	2b01      	cmp	r3, #1
 8024c2e:	d13f      	bne.n	8024cb0 <CheckResetTimer+0xb4>
			{
				if (!psenNewSwing.dirEntry.enter && !psenNewSwing.section.lower_EN && !psenNewSwing.side.exit)
 8024c30:	4b3e      	ldr	r3, [pc, #248]	; (8024d2c <CheckResetTimer+0x130>)
 8024c32:	781b      	ldrb	r3, [r3, #0]
 8024c34:	f003 0303 	and.w	r3, r3, #3
 8024c38:	b2db      	uxtb	r3, r3
 8024c3a:	2b00      	cmp	r3, #0
 8024c3c:	d124      	bne.n	8024c88 <CheckResetTimer+0x8c>
 8024c3e:	4b3b      	ldr	r3, [pc, #236]	; (8024d2c <CheckResetTimer+0x130>)
 8024c40:	781b      	ldrb	r3, [r3, #0]
 8024c42:	f023 030f 	bic.w	r3, r3, #15
 8024c46:	b2db      	uxtb	r3, r3
 8024c48:	2b00      	cmp	r3, #0
 8024c4a:	d11d      	bne.n	8024c88 <CheckResetTimer+0x8c>
 8024c4c:	4b37      	ldr	r3, [pc, #220]	; (8024d2c <CheckResetTimer+0x130>)
 8024c4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8024c52:	2b00      	cmp	r3, #0
 8024c54:	d118      	bne.n	8024c88 <CheckResetTimer+0x8c>
				{
					isCalibrationStart = TRUE;
 8024c56:	4b36      	ldr	r3, [pc, #216]	; (8024d30 <CheckResetTimer+0x134>)
 8024c58:	2201      	movs	r2, #1
 8024c5a:	701a      	strb	r2, [r3, #0]
					isSafetyOn4Init = FALSE;
 8024c5c:	4b35      	ldr	r3, [pc, #212]	; (8024d34 <CheckResetTimer+0x138>)
 8024c5e:	2200      	movs	r2, #0
 8024c60:	701a      	strb	r2, [r3, #0]
					Brr_SetEmergency(FALSE);
 8024c62:	2000      	movs	r0, #0
 8024c64:	f7fb fd16 	bl	8020694 <Brr_SetEmergency>
					gbEmergencyFlag = FLG_OFF;
 8024c68:	4b2f      	ldr	r3, [pc, #188]	; (8024d28 <CheckResetTimer+0x12c>)
 8024c6a:	2200      	movs	r2, #0
 8024c6c:	701a      	strb	r2, [r3, #0]
					ControlIndicatorBlink(FLG_OFF);
 8024c6e:	2000      	movs	r0, #0
 8024c70:	f7fc fd7e 	bl	8021770 <ControlIndicatorBlink>
					gbBarrierCmd = BARRIER_CLOSE_S;
 8024c74:	4b30      	ldr	r3, [pc, #192]	; (8024d38 <CheckResetTimer+0x13c>)
 8024c76:	2203      	movs	r2, #3
 8024c78:	701a      	strb	r2, [r3, #0]
					dwResetTime = 90;
 8024c7a:	4b2a      	ldr	r3, [pc, #168]	; (8024d24 <CheckResetTimer+0x128>)
 8024c7c:	225a      	movs	r2, #90	; 0x5a
 8024c7e:	601a      	str	r2, [r3, #0]
					SetTimer(&timerReset);
 8024c80:	4827      	ldr	r0, [pc, #156]	; (8024d20 <CheckResetTimer+0x124>)
 8024c82:	f00b fed7 	bl	8030a34 <SetTimer>
				isCalibrationStart = FALSE;
				InitPassageModeForSwing();
			}
		}
	}
}
 8024c86:	e048      	b.n	8024d1a <CheckResetTimer+0x11e>
					isSafetyOn4Init = TRUE;
 8024c88:	4b2a      	ldr	r3, [pc, #168]	; (8024d34 <CheckResetTimer+0x138>)
 8024c8a:	2201      	movs	r2, #1
 8024c8c:	701a      	strb	r2, [r3, #0]
					gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_CLOSE_FAULT;
 8024c8e:	4a2b      	ldr	r2, [pc, #172]	; (8024d3c <CheckResetTimer+0x140>)
 8024c90:	7b13      	ldrb	r3, [r2, #12]
 8024c92:	f06f 0101 	mvn.w	r1, #1
 8024c96:	f361 0301 	bfi	r3, r1, #0, #2
 8024c9a:	7313      	strb	r3, [r2, #12]
					gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_CLOSE_FAULT;
 8024c9c:	4a27      	ldr	r2, [pc, #156]	; (8024d3c <CheckResetTimer+0x140>)
 8024c9e:	7b13      	ldrb	r3, [r2, #12]
 8024ca0:	f06f 0101 	mvn.w	r1, #1
 8024ca4:	f361 0383 	bfi	r3, r1, #2, #2
 8024ca8:	7313      	strb	r3, [r2, #12]
					InitPassageModeForSwing();
 8024caa:	f7fe fca9 	bl	8023600 <InitPassageModeForSwing>
}
 8024cae:	e034      	b.n	8024d1a <CheckResetTimer+0x11e>
				Brr_SetSerialComm(TRUE);
 8024cb0:	2001      	movs	r0, #1
 8024cb2:	f7fb fd1b 	bl	80206ec <Brr_SetSerialComm>
				isCalibration = TRUE;
 8024cb6:	4b22      	ldr	r3, [pc, #136]	; (8024d40 <CheckResetTimer+0x144>)
 8024cb8:	2201      	movs	r2, #1
 8024cba:	701a      	strb	r2, [r3, #0]
				nCalibrationCnt = 0;
 8024cbc:	4b21      	ldr	r3, [pc, #132]	; (8024d44 <CheckResetTimer+0x148>)
 8024cbe:	2200      	movs	r2, #0
 8024cc0:	601a      	str	r2, [r3, #0]
}
 8024cc2:	e02a      	b.n	8024d1a <CheckResetTimer+0x11e>
		if (isCalibration == TRUE)
 8024cc4:	4b1e      	ldr	r3, [pc, #120]	; (8024d40 <CheckResetTimer+0x144>)
 8024cc6:	781b      	ldrb	r3, [r3, #0]
 8024cc8:	2b00      	cmp	r3, #0
 8024cca:	d026      	beq.n	8024d1a <CheckResetTimer+0x11e>
			if (nCalibrationCnt <= 300)
 8024ccc:	4b1d      	ldr	r3, [pc, #116]	; (8024d44 <CheckResetTimer+0x148>)
 8024cce:	681b      	ldr	r3, [r3, #0]
 8024cd0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8024cd4:	dc16      	bgt.n	8024d04 <CheckResetTimer+0x108>
				if (nCalibrationCnt % 20 == 0)
 8024cd6:	4b1b      	ldr	r3, [pc, #108]	; (8024d44 <CheckResetTimer+0x148>)
 8024cd8:	6819      	ldr	r1, [r3, #0]
 8024cda:	4b1b      	ldr	r3, [pc, #108]	; (8024d48 <CheckResetTimer+0x14c>)
 8024cdc:	fb83 2301 	smull	r2, r3, r3, r1
 8024ce0:	10da      	asrs	r2, r3, #3
 8024ce2:	17cb      	asrs	r3, r1, #31
 8024ce4:	1ad2      	subs	r2, r2, r3
 8024ce6:	4613      	mov	r3, r2
 8024ce8:	009b      	lsls	r3, r3, #2
 8024cea:	4413      	add	r3, r2
 8024cec:	009b      	lsls	r3, r3, #2
 8024cee:	1aca      	subs	r2, r1, r3
 8024cf0:	2a00      	cmp	r2, #0
 8024cf2:	d101      	bne.n	8024cf8 <CheckResetTimer+0xfc>
					Brr_CloseBarrier();
 8024cf4:	f7fb fd3c 	bl	8020770 <Brr_CloseBarrier>
				nCalibrationCnt++;
 8024cf8:	4b12      	ldr	r3, [pc, #72]	; (8024d44 <CheckResetTimer+0x148>)
 8024cfa:	681b      	ldr	r3, [r3, #0]
 8024cfc:	3301      	adds	r3, #1
 8024cfe:	4a11      	ldr	r2, [pc, #68]	; (8024d44 <CheckResetTimer+0x148>)
 8024d00:	6013      	str	r3, [r2, #0]
}
 8024d02:	e00a      	b.n	8024d1a <CheckResetTimer+0x11e>
				nCalibrationCnt = 0;
 8024d04:	4b0f      	ldr	r3, [pc, #60]	; (8024d44 <CheckResetTimer+0x148>)
 8024d06:	2200      	movs	r2, #0
 8024d08:	601a      	str	r2, [r3, #0]
				isCalibration = FALSE;
 8024d0a:	4b0d      	ldr	r3, [pc, #52]	; (8024d40 <CheckResetTimer+0x144>)
 8024d0c:	2200      	movs	r2, #0
 8024d0e:	701a      	strb	r2, [r3, #0]
				isCalibrationStart = FALSE;
 8024d10:	4b07      	ldr	r3, [pc, #28]	; (8024d30 <CheckResetTimer+0x134>)
 8024d12:	2200      	movs	r2, #0
 8024d14:	701a      	strb	r2, [r3, #0]
				InitPassageModeForSwing();
 8024d16:	f7fe fc73 	bl	8023600 <InitPassageModeForSwing>
}
 8024d1a:	bf00      	nop
 8024d1c:	bd80      	pop	{r7, pc}
 8024d1e:	bf00      	nop
 8024d20:	240002a0 	.word	0x240002a0
 8024d24:	2400000c 	.word	0x2400000c
 8024d28:	240001a1 	.word	0x240001a1
 8024d2c:	24000480 	.word	0x24000480
 8024d30:	2400049e 	.word	0x2400049e
 8024d34:	2400049c 	.word	0x2400049c
 8024d38:	24000028 	.word	0x24000028
 8024d3c:	24000524 	.word	0x24000524
 8024d40:	2400049d 	.word	0x2400049d
 8024d44:	240004a0 	.word	0x240004a0
 8024d48:	66666667 	.word	0x66666667

08024d4c <CheckTailgateFilterTimer>:
		}
	}
}

void CheckTailgateFilterTimer(void)
{
 8024d4c:	b580      	push	{r7, lr}
 8024d4e:	af00      	add	r7, sp, #0
	if (timerTgFilter.fStart)
 8024d50:	4b41      	ldr	r3, [pc, #260]	; (8024e58 <CheckTailgateFilterTimer+0x10c>)
 8024d52:	781b      	ldrb	r3, [r3, #0]
 8024d54:	2b00      	cmp	r3, #0
 8024d56:	d07c      	beq.n	8024e52 <CheckTailgateFilterTimer+0x106>
	{
		if (IsTimeout(&timerTgFilter, dwTgFilterTime * TICK_COUNT_100MS))
 8024d58:	4b40      	ldr	r3, [pc, #256]	; (8024e5c <CheckTailgateFilterTimer+0x110>)
 8024d5a:	681a      	ldr	r2, [r3, #0]
 8024d5c:	4613      	mov	r3, r2
 8024d5e:	009b      	lsls	r3, r3, #2
 8024d60:	4413      	add	r3, r2
 8024d62:	005b      	lsls	r3, r3, #1
 8024d64:	4619      	mov	r1, r3
 8024d66:	483c      	ldr	r0, [pc, #240]	; (8024e58 <CheckTailgateFilterTimer+0x10c>)
 8024d68:	f00b fe86 	bl	8030a78 <IsTimeout>
 8024d6c:	4603      	mov	r3, r0
 8024d6e:	2b00      	cmp	r3, #0
 8024d70:	d04a      	beq.n	8024e08 <CheckTailgateFilterTimer+0xbc>
		{
			ResetTimer(&timerTgFilter);
 8024d72:	4839      	ldr	r0, [pc, #228]	; (8024e58 <CheckTailgateFilterTimer+0x10c>)
 8024d74:	f00b fe72 	bl	8030a5c <ResetTimer>

			if (isLuggageSet_EN == TRUE)
 8024d78:	4b39      	ldr	r3, [pc, #228]	; (8024e60 <CheckTailgateFilterTimer+0x114>)
 8024d7a:	781b      	ldrb	r3, [r3, #0]
 8024d7c:	2b00      	cmp	r3, #0
 8024d7e:	d003      	beq.n	8024d88 <CheckTailgateFilterTimer+0x3c>
			{
				//PRINTL(" [CheckTailgateFilterTimer] Luggage sensors detected. No EN TG!!");
				printf(" [CheckTailgateFilterTimer] Luggage sensors detected. No EN TG!! \n");
 8024d80:	4838      	ldr	r0, [pc, #224]	; (8024e64 <CheckTailgateFilterTimer+0x118>)
 8024d82:	f004 fd67 	bl	8029854 <printf_>
				printf(" [CheckTailgateFilterTimer] Something detected. No EX TG!! \n");
				ResetTimer(&timerTgFilter);
			}
		}
	}
}
 8024d86:	e064      	b.n	8024e52 <CheckTailgateFilterTimer+0x106>
			else if (isLuggageSet_EX == TRUE)
 8024d88:	4b37      	ldr	r3, [pc, #220]	; (8024e68 <CheckTailgateFilterTimer+0x11c>)
 8024d8a:	781b      	ldrb	r3, [r3, #0]
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	d003      	beq.n	8024d98 <CheckTailgateFilterTimer+0x4c>
				printf(" [CheckTailgateFilterTimer] Luggage sensors detected. No EX TG!! \n");
 8024d90:	4836      	ldr	r0, [pc, #216]	; (8024e6c <CheckTailgateFilterTimer+0x120>)
 8024d92:	f004 fd5f 	bl	8029854 <printf_>
}
 8024d96:	e05c      	b.n	8024e52 <CheckTailgateFilterTimer+0x106>
				ControlDirectionLED(DIR_RED, DIR_RED);
 8024d98:	2102      	movs	r1, #2
 8024d9a:	2002      	movs	r0, #2
 8024d9c:	f7fc fc04 	bl	80215a8 <ControlDirectionLED>
				ControlIndicatorBlink(FLG_SET);
 8024da0:	2001      	movs	r0, #1
 8024da2:	f7fc fce5 	bl	8021770 <ControlIndicatorBlink>
				ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8024da6:	4b32      	ldr	r3, [pc, #200]	; (8024e70 <CheckTailgateFilterTimer+0x124>)
 8024da8:	7a9b      	ldrb	r3, [r3, #10]
 8024daa:	461a      	mov	r2, r3
 8024dac:	2101      	movs	r1, #1
 8024dae:	2000      	movs	r0, #0
 8024db0:	f7fc fba0 	bl	80214f4 <ControlBuzzer>
				SetTailgatingTimer();
 8024db4:	f7fd fa96 	bl	80222e4 <SetTailgatingTimer>
				if (gGCUStatus.bAuthCount_EN)
 8024db8:	4b2e      	ldr	r3, [pc, #184]	; (8024e74 <CheckTailgateFilterTimer+0x128>)
 8024dba:	791b      	ldrb	r3, [r3, #4]
 8024dbc:	b2db      	uxtb	r3, r3
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	d00e      	beq.n	8024de0 <CheckTailgateFilterTimer+0x94>
					gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_TAILGATING;
 8024dc2:	4a2c      	ldr	r2, [pc, #176]	; (8024e74 <CheckTailgateFilterTimer+0x128>)
 8024dc4:	7a13      	ldrb	r3, [r2, #8]
 8024dc6:	2103      	movs	r1, #3
 8024dc8:	f361 0302 	bfi	r3, r1, #0, #3
 8024dcc:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nTailgating_EN = FLG_SET;
 8024dce:	4a29      	ldr	r2, [pc, #164]	; (8024e74 <CheckTailgateFilterTimer+0x128>)
 8024dd0:	7f13      	ldrb	r3, [r2, #28]
 8024dd2:	f043 0301 	orr.w	r3, r3, #1
 8024dd6:	7713      	strb	r3, [r2, #28]
					printf(" [EN] Tailgating detected! \n");
 8024dd8:	4827      	ldr	r0, [pc, #156]	; (8024e78 <CheckTailgateFilterTimer+0x12c>)
 8024dda:	f004 fd3b 	bl	8029854 <printf_>
}
 8024dde:	e038      	b.n	8024e52 <CheckTailgateFilterTimer+0x106>
				else if (gGCUStatus.bAuthCount_EX)
 8024de0:	4b24      	ldr	r3, [pc, #144]	; (8024e74 <CheckTailgateFilterTimer+0x128>)
 8024de2:	795b      	ldrb	r3, [r3, #5]
 8024de4:	b2db      	uxtb	r3, r3
 8024de6:	2b00      	cmp	r3, #0
 8024de8:	d033      	beq.n	8024e52 <CheckTailgateFilterTimer+0x106>
					gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_TAILGATING;
 8024dea:	4a22      	ldr	r2, [pc, #136]	; (8024e74 <CheckTailgateFilterTimer+0x128>)
 8024dec:	7a13      	ldrb	r3, [r2, #8]
 8024dee:	2103      	movs	r1, #3
 8024df0:	f361 1306 	bfi	r3, r1, #4, #3
 8024df4:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nTailgating_EX = FLG_SET;
 8024df6:	4a1f      	ldr	r2, [pc, #124]	; (8024e74 <CheckTailgateFilterTimer+0x128>)
 8024df8:	7f13      	ldrb	r3, [r2, #28]
 8024dfa:	f043 0310 	orr.w	r3, r3, #16
 8024dfe:	7713      	strb	r3, [r2, #28]
					printf(" [EX] Tailgating detected! \n");
 8024e00:	481e      	ldr	r0, [pc, #120]	; (8024e7c <CheckTailgateFilterTimer+0x130>)
 8024e02:	f004 fd27 	bl	8029854 <printf_>
}
 8024e06:	e024      	b.n	8024e52 <CheckTailgateFilterTimer+0x106>
			if (gGCUStatus.bAuthCount_EN && psenNewSwing.b.s13)
 8024e08:	4b1a      	ldr	r3, [pc, #104]	; (8024e74 <CheckTailgateFilterTimer+0x128>)
 8024e0a:	791b      	ldrb	r3, [r3, #4]
 8024e0c:	b2db      	uxtb	r3, r3
 8024e0e:	2b00      	cmp	r3, #0
 8024e10:	d00d      	beq.n	8024e2e <CheckTailgateFilterTimer+0xe2>
 8024e12:	4b1b      	ldr	r3, [pc, #108]	; (8024e80 <CheckTailgateFilterTimer+0x134>)
 8024e14:	785b      	ldrb	r3, [r3, #1]
 8024e16:	f003 0310 	and.w	r3, r3, #16
 8024e1a:	b2db      	uxtb	r3, r3
 8024e1c:	2b00      	cmp	r3, #0
 8024e1e:	d006      	beq.n	8024e2e <CheckTailgateFilterTimer+0xe2>
				printf(" [CheckTailgateFilterTimer] Something detected. No EN TG!!\n");
 8024e20:	4818      	ldr	r0, [pc, #96]	; (8024e84 <CheckTailgateFilterTimer+0x138>)
 8024e22:	f004 fd17 	bl	8029854 <printf_>
				ResetTimer(&timerTgFilter);
 8024e26:	480c      	ldr	r0, [pc, #48]	; (8024e58 <CheckTailgateFilterTimer+0x10c>)
 8024e28:	f00b fe18 	bl	8030a5c <ResetTimer>
}
 8024e2c:	e011      	b.n	8024e52 <CheckTailgateFilterTimer+0x106>
			else if (gGCUStatus.bAuthCount_EX && psenNewSwing.b.s05)
 8024e2e:	4b11      	ldr	r3, [pc, #68]	; (8024e74 <CheckTailgateFilterTimer+0x128>)
 8024e30:	795b      	ldrb	r3, [r3, #5]
 8024e32:	b2db      	uxtb	r3, r3
 8024e34:	2b00      	cmp	r3, #0
 8024e36:	d00c      	beq.n	8024e52 <CheckTailgateFilterTimer+0x106>
 8024e38:	4b11      	ldr	r3, [pc, #68]	; (8024e80 <CheckTailgateFilterTimer+0x134>)
 8024e3a:	781b      	ldrb	r3, [r3, #0]
 8024e3c:	f003 0310 	and.w	r3, r3, #16
 8024e40:	b2db      	uxtb	r3, r3
 8024e42:	2b00      	cmp	r3, #0
 8024e44:	d005      	beq.n	8024e52 <CheckTailgateFilterTimer+0x106>
				printf(" [CheckTailgateFilterTimer] Something detected. No EX TG!! \n");
 8024e46:	4810      	ldr	r0, [pc, #64]	; (8024e88 <CheckTailgateFilterTimer+0x13c>)
 8024e48:	f004 fd04 	bl	8029854 <printf_>
				ResetTimer(&timerTgFilter);
 8024e4c:	4802      	ldr	r0, [pc, #8]	; (8024e58 <CheckTailgateFilterTimer+0x10c>)
 8024e4e:	f00b fe05 	bl	8030a5c <ResetTimer>
}
 8024e52:	bf00      	nop
 8024e54:	bd80      	pop	{r7, pc}
 8024e56:	bf00      	nop
 8024e58:	240002b8 	.word	0x240002b8
 8024e5c:	24000010 	.word	0x24000010
 8024e60:	24000494 	.word	0x24000494
 8024e64:	08032acc 	.word	0x08032acc
 8024e68:	24000495 	.word	0x24000495
 8024e6c:	08032b10 	.word	0x08032b10
 8024e70:	24000514 	.word	0x24000514
 8024e74:	24000524 	.word	0x24000524
 8024e78:	08032b54 	.word	0x08032b54
 8024e7c:	08032b74 	.word	0x08032b74
 8024e80:	24000480 	.word	0x24000480
 8024e84:	08032b94 	.word	0x08032b94
 8024e88:	08032bd0 	.word	0x08032bd0

08024e8c <CheckCloseWaitTimer>:

void CheckCloseWaitTimer(void)
{
 8024e8c:	b580      	push	{r7, lr}
 8024e8e:	af00      	add	r7, sp, #0
	if (IsTimeout(&timerCloseWait, dwCloseWaitTime * TICK_COUNT_100MS))
 8024e90:	4b0a      	ldr	r3, [pc, #40]	; (8024ebc <CheckCloseWaitTimer+0x30>)
 8024e92:	681a      	ldr	r2, [r3, #0]
 8024e94:	4613      	mov	r3, r2
 8024e96:	009b      	lsls	r3, r3, #2
 8024e98:	4413      	add	r3, r2
 8024e9a:	005b      	lsls	r3, r3, #1
 8024e9c:	4619      	mov	r1, r3
 8024e9e:	4808      	ldr	r0, [pc, #32]	; (8024ec0 <CheckCloseWaitTimer+0x34>)
 8024ea0:	f00b fdea 	bl	8030a78 <IsTimeout>
 8024ea4:	4603      	mov	r3, r0
 8024ea6:	2b00      	cmp	r3, #0
 8024ea8:	d005      	beq.n	8024eb6 <CheckCloseWaitTimer+0x2a>
	{
		ResetTimer(&timerCloseWait);
 8024eaa:	4805      	ldr	r0, [pc, #20]	; (8024ec0 <CheckCloseWaitTimer+0x34>)
 8024eac:	f00b fdd6 	bl	8030a5c <ResetTimer>
		ControlBarrier(BARRIER_CLOSE_S);
 8024eb0:	2003      	movs	r0, #3
 8024eb2:	f7fc fae7 	bl	8021484 <ControlBarrier>
	}
}
 8024eb6:	bf00      	nop
 8024eb8:	bd80      	pop	{r7, pc}
 8024eba:	bf00      	nop
 8024ebc:	24000008 	.word	0x24000008
 8024ec0:	240002ac 	.word	0x240002ac

08024ec4 <PassageProcessForSwing>:
/*******************************************************************************
 * Main Passage Process for swing gate
 *******************************************************************************/

void PassageProcessForSwing()				//used barrierTest from WMATA		pms
{
 8024ec4:	b580      	push	{r7, lr}
 8024ec6:	af00      	add	r7, sp, #0
	UpdateSensorData();
 8024ec8:	f7fe fb5e 	bl	8023588 <UpdateSensorData>

	// SCADA data
	gGCUStatus.bSCADA = (*(BYTE*)READ03_ADR);				//차후 보고 pms
 8024ecc:	4b51      	ldr	r3, [pc, #324]	; (8025014 <PassageProcessForSwing+0x150>)
 8024ece:	781a      	ldrb	r2, [r3, #0]
 8024ed0:	4b51      	ldr	r3, [pc, #324]	; (8025018 <PassageProcessForSwing+0x154>)
 8024ed2:	751a      	strb	r2, [r3, #20]

	if ((RD_SWITCH & MASK_PUSH) == MASK_PUSH)			//RD_SWITCH1 -> RD_SWITCH
 8024ed4:	4b51      	ldr	r3, [pc, #324]	; (802501c <PassageProcessForSwing+0x158>)
 8024ed6:	781b      	ldrb	r3, [r3, #0]
 8024ed8:	b2db      	uxtb	r3, r3
 8024eda:	f003 0310 	and.w	r3, r3, #16
 8024ede:	2b10      	cmp	r3, #16
 8024ee0:	d102      	bne.n	8024ee8 <PassageProcessForSwing+0x24>
	{
		Brr_SetEmergency(TRUE);
 8024ee2:	2001      	movs	r0, #1
 8024ee4:	f7fb fbd6 	bl	8020694 <Brr_SetEmergency>
	}

	CheckBarrierOperation();
 8024ee8:	f7fe fd10 	bl	802390c <CheckBarrierOperation>
	CheckBarrierStop();
 8024eec:	f7ff fd10 	bl	8024910 <CheckBarrierStop>
	CheckSafetyTimerForSwing();
 8024ef0:	f7ff fd38 	bl	8024964 <CheckSafetyTimerForSwing>
	CheckIndicatorTimer();
 8024ef4:	f7fc fe28 	bl	8021b48 <CheckIndicatorTimer>
	CheckBlinkTimer();					//function does not exist
 8024ef8:	f7fd f90c 	bl	8022114 <CheckBlinkTimer>
	CheckBuzzerTimer();
 8024efc:	f7fc fdba 	bl	8021a74 <CheckBuzzerTimer>
	CheckEmergencySignal();
 8024f00:	f7fc fd32 	bl	8021968 <CheckEmergencySignal>
	CheckUPSStatus();
 8024f04:	f7fc fc64 	bl	80217d0 <CheckUPSStatus>
	CheckForceOpen();
 8024f08:	f7ff fc5c 	bl	80247c4 <CheckForceOpen>
	CheckResetTimer();
 8024f0c:	f7ff fe76 	bl	8024bfc <CheckResetTimer>
	CheckCloseWaitTimer();
 8024f10:	f7ff ffbc 	bl	8024e8c <CheckCloseWaitTimer>

	if (memcmp(&psenNewSwing, &psenOldSwing, sizeof(T_PASS_SEN_SWING)))
 8024f14:	2204      	movs	r2, #4
 8024f16:	4942      	ldr	r1, [pc, #264]	; (8025020 <PassageProcessForSwing+0x15c>)
 8024f18:	4842      	ldr	r0, [pc, #264]	; (8025024 <PassageProcessForSwing+0x160>)
 8024f1a:	f00b fe07 	bl	8030b2c <memcmp>
 8024f1e:	4603      	mov	r3, r0
 8024f20:	2b00      	cmp	r3, #0
 8024f22:	d01c      	beq.n	8024f5e <PassageProcessForSwing+0x9a>
	{
		// check timers
		ResetTimer(&timerPassageClear);
 8024f24:	4840      	ldr	r0, [pc, #256]	; (8025028 <PassageProcessForSwing+0x164>)
 8024f26:	f00b fd99 	bl	8030a5c <ResetTimer>

		if (!gCurGCUOpMode.bEmergencyMaint && gfFreeMode == FALSE)
 8024f2a:	4b40      	ldr	r3, [pc, #256]	; (802502c <PassageProcessForSwing+0x168>)
 8024f2c:	789b      	ldrb	r3, [r3, #2]
 8024f2e:	2b00      	cmp	r3, #0
 8024f30:	d159      	bne.n	8024fe6 <PassageProcessForSwing+0x122>
 8024f32:	4b3f      	ldr	r3, [pc, #252]	; (8025030 <PassageProcessForSwing+0x16c>)
 8024f34:	781b      	ldrb	r3, [r3, #0]
 8024f36:	f083 0301 	eor.w	r3, r3, #1
 8024f3a:	b2db      	uxtb	r3, r3
 8024f3c:	2b00      	cmp	r3, #0
 8024f3e:	d052      	beq.n	8024fe6 <PassageProcessForSwing+0x122>
		{
			if ((gCurGCUOpMode.bServiceMode_EN != NO_SERVICE) || (gCurGCUOpMode.bServiceMode_EX != NO_SERVICE))
 8024f40:	4b3a      	ldr	r3, [pc, #232]	; (802502c <PassageProcessForSwing+0x168>)
 8024f42:	781b      	ldrb	r3, [r3, #0]
 8024f44:	2b00      	cmp	r3, #0
 8024f46:	d103      	bne.n	8024f50 <PassageProcessForSwing+0x8c>
 8024f48:	4b38      	ldr	r3, [pc, #224]	; (802502c <PassageProcessForSwing+0x168>)
 8024f4a:	785b      	ldrb	r3, [r3, #1]
 8024f4c:	2b00      	cmp	r3, #0
 8024f4e:	d04a      	beq.n	8024fe6 <PassageProcessForSwing+0x122>
			{
				CheckEntranceSwing();
 8024f50:	f7fe ff6a 	bl	8023e28 <CheckEntranceSwing>
				CheckPassReadySwing();
 8024f54:	f7ff f892 	bl	802407c <CheckPassReadySwing>
				CheckPassingSwing();
 8024f58:	f7ff f9a4 	bl	80242a4 <CheckPassingSwing>
 8024f5c:	e043      	b.n	8024fe6 <PassageProcessForSwing+0x122>
		}
	}
	else
	{
		// if (psenNewSwing.B.bSen1 || psenNewSwing.B.bSen2 || psenNewSwing.B.bSen3)
		if (psenNewSwing.dirEntry.enter || psenNewSwing.section.lower_EN || psenNewSwing.side.exit)
 8024f5e:	4b31      	ldr	r3, [pc, #196]	; (8025024 <PassageProcessForSwing+0x160>)
 8024f60:	781b      	ldrb	r3, [r3, #0]
 8024f62:	f003 0303 	and.w	r3, r3, #3
 8024f66:	b2db      	uxtb	r3, r3
 8024f68:	2b00      	cmp	r3, #0
 8024f6a:	d10b      	bne.n	8024f84 <PassageProcessForSwing+0xc0>
 8024f6c:	4b2d      	ldr	r3, [pc, #180]	; (8025024 <PassageProcessForSwing+0x160>)
 8024f6e:	781b      	ldrb	r3, [r3, #0]
 8024f70:	f023 030f 	bic.w	r3, r3, #15
 8024f74:	b2db      	uxtb	r3, r3
 8024f76:	2b00      	cmp	r3, #0
 8024f78:	d104      	bne.n	8024f84 <PassageProcessForSwing+0xc0>
 8024f7a:	4b2a      	ldr	r3, [pc, #168]	; (8025024 <PassageProcessForSwing+0x160>)
 8024f7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8024f80:	2b00      	cmp	r3, #0
 8024f82:	d003      	beq.n	8024f8c <PassageProcessForSwing+0xc8>
		{
			// Update Timer
			ResetTimer(&timerPassageClear);
 8024f84:	4828      	ldr	r0, [pc, #160]	; (8025028 <PassageProcessForSwing+0x164>)
 8024f86:	f00b fd69 	bl	8030a5c <ResetTimer>
 8024f8a:	e028      	b.n	8024fde <PassageProcessForSwing+0x11a>
		}
		else
		{
			if (timerPassageClear.fStart)
 8024f8c:	4b26      	ldr	r3, [pc, #152]	; (8025028 <PassageProcessForSwing+0x164>)
 8024f8e:	781b      	ldrb	r3, [r3, #0]
 8024f90:	2b00      	cmp	r3, #0
 8024f92:	d021      	beq.n	8024fd8 <PassageProcessForSwing+0x114>
			{
				if (IsTimeout(&timerPassageClear, (DEFAULT_PASSAGE_CLEAR_TIMEOUT * TICK_COUNT_1SEC)))
 8024f94:	21c8      	movs	r1, #200	; 0xc8
 8024f96:	4824      	ldr	r0, [pc, #144]	; (8025028 <PassageProcessForSwing+0x164>)
 8024f98:	f00b fd6e 	bl	8030a78 <IsTimeout>
 8024f9c:	4603      	mov	r3, r0
 8024f9e:	2b00      	cmp	r3, #0
 8024fa0:	d01d      	beq.n	8024fde <PassageProcessForSwing+0x11a>
				{
					isForceOpenReady_EN = FALSE;
 8024fa2:	4b24      	ldr	r3, [pc, #144]	; (8025034 <PassageProcessForSwing+0x170>)
 8024fa4:	2200      	movs	r2, #0
 8024fa6:	701a      	strb	r2, [r3, #0]
					isForceOpenReady_EX = FALSE;
 8024fa8:	4b23      	ldr	r3, [pc, #140]	; (8025038 <PassageProcessForSwing+0x174>)
 8024faa:	2200      	movs	r2, #0
 8024fac:	701a      	strb	r2, [r3, #0]
					isPassReady_EN = FALSE;
 8024fae:	4b23      	ldr	r3, [pc, #140]	; (802503c <PassageProcessForSwing+0x178>)
 8024fb0:	2200      	movs	r2, #0
 8024fb2:	701a      	strb	r2, [r3, #0]
					isPassReady_EX = FALSE;
 8024fb4:	4b22      	ldr	r3, [pc, #136]	; (8025040 <PassageProcessForSwing+0x17c>)
 8024fb6:	2200      	movs	r2, #0
 8024fb8:	701a      	strb	r2, [r3, #0]
					isLuggageSet_EN = FALSE;
 8024fba:	4b22      	ldr	r3, [pc, #136]	; (8025044 <PassageProcessForSwing+0x180>)
 8024fbc:	2200      	movs	r2, #0
 8024fbe:	701a      	strb	r2, [r3, #0]
					isLuggageSet_EX = FALSE;
 8024fc0:	4b21      	ldr	r3, [pc, #132]	; (8025048 <PassageProcessForSwing+0x184>)
 8024fc2:	2200      	movs	r2, #0
 8024fc4:	701a      	strb	r2, [r3, #0]
					isForceOpen = FALSE;
 8024fc6:	4b21      	ldr	r3, [pc, #132]	; (802504c <PassageProcessForSwing+0x188>)
 8024fc8:	2200      	movs	r2, #0
 8024fca:	701a      	strb	r2, [r3, #0]
					ClearPassageAlarm();
 8024fcc:	f7fc ff14 	bl	8021df8 <ClearPassageAlarm>
					ResetTimer(&timerPassageClear);
 8024fd0:	4815      	ldr	r0, [pc, #84]	; (8025028 <PassageProcessForSwing+0x164>)
 8024fd2:	f00b fd43 	bl	8030a5c <ResetTimer>
 8024fd6:	e002      	b.n	8024fde <PassageProcessForSwing+0x11a>
			}
			else
			{
				// Last update 20230107
				// if (gGCUStatus.PassageAlarm.b.nFromEN || gGCUStatus.PassageAlarm.b.nFromEX )
				SetTimer(&timerPassageClear);
 8024fd8:	4813      	ldr	r0, [pc, #76]	; (8025028 <PassageProcessForSwing+0x164>)
 8024fda:	f00b fd2b 	bl	8030a34 <SetTimer>
			}
		}

		CheckAuthTimeout();
 8024fde:	f7fc ffe1 	bl	8021fa4 <CheckAuthTimeout>
		CheckModeChange();
 8024fe2:	f7fc f82f 	bl	8021044 <CheckModeChange>
	}

	if (!gCurGCUOpMode.bEmergencyMaint)
 8024fe6:	4b11      	ldr	r3, [pc, #68]	; (802502c <PassageProcessForSwing+0x168>)
 8024fe8:	789b      	ldrb	r3, [r3, #2]
 8024fea:	2b00      	cmp	r3, #0
 8024fec:	d109      	bne.n	8025002 <PassageProcessForSwing+0x13e>
	{
		CheckTailgateFilterTimer();
 8024fee:	f7ff fead 	bl	8024d4c <CheckTailgateFilterTimer>
		CheckCounterEnterTimer();
 8024ff2:	f7ff fa9f 	bl	8024534 <CheckCounterEnterTimer>
		CheckIllegalEnterSwing();
 8024ff6:	f7ff fab9 	bl	802456c <CheckIllegalEnterSwing>
		CheckTGTimerForSwing();
 8024ffa:	f7ff fb6f 	bl	80246dc <CheckTGTimerForSwing>
		CheckIllegalAlarmTimer();
 8024ffe:	f7fd f813 	bl	8022028 <CheckIllegalAlarmTimer>
 8025002:	4b08      	ldr	r3, [pc, #32]	; (8025024 <PassageProcessForSwing+0x160>)
 8025004:	681b      	ldr	r3, [r3, #0]
	}

	// update sensor state
	memcpy(&psenOldSwing, &psenNewSwing, sizeof(T_PASS_SEN_SWING));
 8025006:	4a06      	ldr	r2, [pc, #24]	; (8025020 <PassageProcessForSwing+0x15c>)
 8025008:	6013      	str	r3, [r2, #0]

	CheckPassSenError(TRUE);
 802500a:	2001      	movs	r0, #1
 802500c:	f7fc fdba 	bl	8021b84 <CheckPassSenError>
}
 8025010:	bf00      	nop
 8025012:	bd80      	pop	{r7, pc}
 8025014:	60000500 	.word	0x60000500
 8025018:	24000524 	.word	0x24000524
 802501c:	60000300 	.word	0x60000300
 8025020:	24000484 	.word	0x24000484
 8025024:	24000480 	.word	0x24000480
 8025028:	240001e0 	.word	0x240001e0
 802502c:	24000548 	.word	0x24000548
 8025030:	240004b1 	.word	0x240004b1
 8025034:	24000496 	.word	0x24000496
 8025038:	24000497 	.word	0x24000497
 802503c:	24000490 	.word	0x24000490
 8025040:	24000491 	.word	0x24000491
 8025044:	24000494 	.word	0x24000494
 8025048:	24000495 	.word	0x24000495
 802504c:	24000499 	.word	0x24000499

08025050 <TestDirection>:
	if (U0_Getch(&testData))
		U0_Putch(testData);
}

void TestDirection(void)
{
 8025050:	b580      	push	{r7, lr}
 8025052:	b082      	sub	sp, #8
 8025054:	af00      	add	r7, sp, #0
	BYTE bColor = DIR_OFF;
 8025056:	2300      	movs	r3, #0
 8025058:	71fb      	strb	r3, [r7, #7]

	if (nDirOpSeq)
 802505a:	4b24      	ldr	r3, [pc, #144]	; (80250ec <TestDirection+0x9c>)
 802505c:	681b      	ldr	r3, [r3, #0]
 802505e:	2b00      	cmp	r3, #0
 8025060:	d036      	beq.n	80250d0 <TestDirection+0x80>
	{
		if (!TestOption.b.fTestDir )
 8025062:	4b23      	ldr	r3, [pc, #140]	; (80250f0 <TestDirection+0xa0>)
 8025064:	681b      	ldr	r3, [r3, #0]
 8025066:	f343 0340 	sbfx	r3, r3, #1, #1
 802506a:	b25b      	sxtb	r3, r3
 802506c:	2b00      	cmp	r3, #0
 802506e:	d105      	bne.n	802507c <TestDirection+0x2c>
		{
			nDirOpSeq = 0;
 8025070:	4b1e      	ldr	r3, [pc, #120]	; (80250ec <TestDirection+0x9c>)
 8025072:	2200      	movs	r2, #0
 8025074:	601a      	str	r2, [r3, #0]
			bColor = DIR_OFF;
 8025076:	2300      	movs	r3, #0
 8025078:	71fb      	strb	r3, [r7, #7]
 802507a:	e020      	b.n	80250be <TestDirection+0x6e>
		}
		else
		{
			switch (nDirOpSeq)
 802507c:	4b1b      	ldr	r3, [pc, #108]	; (80250ec <TestDirection+0x9c>)
 802507e:	681b      	ldr	r3, [r3, #0]
 8025080:	2b03      	cmp	r3, #3
 8025082:	d016      	beq.n	80250b2 <TestDirection+0x62>
 8025084:	2b03      	cmp	r3, #3
 8025086:	dc1a      	bgt.n	80250be <TestDirection+0x6e>
 8025088:	2b01      	cmp	r3, #1
 802508a:	d002      	beq.n	8025092 <TestDirection+0x42>
 802508c:	2b02      	cmp	r3, #2
 802508e:	d008      	beq.n	80250a2 <TestDirection+0x52>
 8025090:	e015      	b.n	80250be <TestDirection+0x6e>
			{
			case 1:
				bColor = STATE_ALLOW;
 8025092:	2301      	movs	r3, #1
 8025094:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq++;
 8025096:	4b15      	ldr	r3, [pc, #84]	; (80250ec <TestDirection+0x9c>)
 8025098:	681b      	ldr	r3, [r3, #0]
 802509a:	3301      	adds	r3, #1
 802509c:	4a13      	ldr	r2, [pc, #76]	; (80250ec <TestDirection+0x9c>)
 802509e:	6013      	str	r3, [r2, #0]
				break;
 80250a0:	e00d      	b.n	80250be <TestDirection+0x6e>
			case 2:
				bColor = STATE_STOP;
 80250a2:	2302      	movs	r3, #2
 80250a4:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq++;
 80250a6:	4b11      	ldr	r3, [pc, #68]	; (80250ec <TestDirection+0x9c>)
 80250a8:	681b      	ldr	r3, [r3, #0]
 80250aa:	3301      	adds	r3, #1
 80250ac:	4a0f      	ldr	r2, [pc, #60]	; (80250ec <TestDirection+0x9c>)
 80250ae:	6013      	str	r3, [r2, #0]
				break;
 80250b0:	e005      	b.n	80250be <TestDirection+0x6e>
			case 3:
				bColor = DIR_OFF;
 80250b2:	2300      	movs	r3, #0
 80250b4:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq = 1;
 80250b6:	4b0d      	ldr	r3, [pc, #52]	; (80250ec <TestDirection+0x9c>)
 80250b8:	2201      	movs	r2, #1
 80250ba:	601a      	str	r2, [r3, #0]
				break;
 80250bc:	bf00      	nop
			}
		}
		ControlStatusLED_Ex(bColor);
 80250be:	79fb      	ldrb	r3, [r7, #7]
 80250c0:	4618      	mov	r0, r3
 80250c2:	f000 fa61 	bl	8025588 <ControlStatusLED_Ex>
		ControlStatusLED_En(bColor);
 80250c6:	79fb      	ldrb	r3, [r7, #7]
 80250c8:	4618      	mov	r0, r3
 80250ca:	f000 fa2d 	bl	8025528 <ControlStatusLED_En>
	}
	else if (TestOption.b.fTestDir)
	{
		nDirOpSeq = 1;
	}
}
 80250ce:	e009      	b.n	80250e4 <TestDirection+0x94>
	else if (TestOption.b.fTestDir)
 80250d0:	4b07      	ldr	r3, [pc, #28]	; (80250f0 <TestDirection+0xa0>)
 80250d2:	681b      	ldr	r3, [r3, #0]
 80250d4:	f343 0340 	sbfx	r3, r3, #1, #1
 80250d8:	b25b      	sxtb	r3, r3
 80250da:	2b00      	cmp	r3, #0
 80250dc:	d002      	beq.n	80250e4 <TestDirection+0x94>
		nDirOpSeq = 1;
 80250de:	4b03      	ldr	r3, [pc, #12]	; (80250ec <TestDirection+0x9c>)
 80250e0:	2201      	movs	r2, #1
 80250e2:	601a      	str	r2, [r3, #0]
}
 80250e4:	bf00      	nop
 80250e6:	3708      	adds	r7, #8
 80250e8:	46bd      	mov	sp, r7
 80250ea:	bd80      	pop	{r7, pc}
 80250ec:	24000578 	.word	0x24000578
 80250f0:	24000564 	.word	0x24000564

080250f4 <TestOverHeadDirection>:


void TestOverHeadDirection(void)
{
 80250f4:	b580      	push	{r7, lr}
 80250f6:	b082      	sub	sp, #8
 80250f8:	af00      	add	r7, sp, #0
	BYTE bColor = DIR_OFF;
 80250fa:	2300      	movs	r3, #0
 80250fc:	71fb      	strb	r3, [r7, #7]

	if (nOverOpSeq)
 80250fe:	4b24      	ldr	r3, [pc, #144]	; (8025190 <TestOverHeadDirection+0x9c>)
 8025100:	681b      	ldr	r3, [r3, #0]
 8025102:	2b00      	cmp	r3, #0
 8025104:	d036      	beq.n	8025174 <TestOverHeadDirection+0x80>
	{
		if (!TestOption.b.fTestOverHeadLamp )
 8025106:	4b23      	ldr	r3, [pc, #140]	; (8025194 <TestOverHeadDirection+0xa0>)
 8025108:	681b      	ldr	r3, [r3, #0]
 802510a:	f343 1300 	sbfx	r3, r3, #4, #1
 802510e:	b25b      	sxtb	r3, r3
 8025110:	2b00      	cmp	r3, #0
 8025112:	d105      	bne.n	8025120 <TestOverHeadDirection+0x2c>
		{
			nOverOpSeq = 0;
 8025114:	4b1e      	ldr	r3, [pc, #120]	; (8025190 <TestOverHeadDirection+0x9c>)
 8025116:	2200      	movs	r2, #0
 8025118:	601a      	str	r2, [r3, #0]
			bColor = DIR_OFF;
 802511a:	2300      	movs	r3, #0
 802511c:	71fb      	strb	r3, [r7, #7]
 802511e:	e020      	b.n	8025162 <TestOverHeadDirection+0x6e>
		}
		else
		{
			switch (nOverOpSeq)
 8025120:	4b1b      	ldr	r3, [pc, #108]	; (8025190 <TestOverHeadDirection+0x9c>)
 8025122:	681b      	ldr	r3, [r3, #0]
 8025124:	2b03      	cmp	r3, #3
 8025126:	d016      	beq.n	8025156 <TestOverHeadDirection+0x62>
 8025128:	2b03      	cmp	r3, #3
 802512a:	dc1a      	bgt.n	8025162 <TestOverHeadDirection+0x6e>
 802512c:	2b01      	cmp	r3, #1
 802512e:	d002      	beq.n	8025136 <TestOverHeadDirection+0x42>
 8025130:	2b02      	cmp	r3, #2
 8025132:	d008      	beq.n	8025146 <TestOverHeadDirection+0x52>
 8025134:	e015      	b.n	8025162 <TestOverHeadDirection+0x6e>
			{
			case 1:
				bColor = STATE_ALLOW;
 8025136:	2301      	movs	r3, #1
 8025138:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq++;
 802513a:	4b15      	ldr	r3, [pc, #84]	; (8025190 <TestOverHeadDirection+0x9c>)
 802513c:	681b      	ldr	r3, [r3, #0]
 802513e:	3301      	adds	r3, #1
 8025140:	4a13      	ldr	r2, [pc, #76]	; (8025190 <TestOverHeadDirection+0x9c>)
 8025142:	6013      	str	r3, [r2, #0]
				break;
 8025144:	e00d      	b.n	8025162 <TestOverHeadDirection+0x6e>
			case 2:
				bColor = STATE_STOP;
 8025146:	2302      	movs	r3, #2
 8025148:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq++;
 802514a:	4b11      	ldr	r3, [pc, #68]	; (8025190 <TestOverHeadDirection+0x9c>)
 802514c:	681b      	ldr	r3, [r3, #0]
 802514e:	3301      	adds	r3, #1
 8025150:	4a0f      	ldr	r2, [pc, #60]	; (8025190 <TestOverHeadDirection+0x9c>)
 8025152:	6013      	str	r3, [r2, #0]
				break;
 8025154:	e005      	b.n	8025162 <TestOverHeadDirection+0x6e>
			case 3:
				bColor = DIR_OFF;
 8025156:	2300      	movs	r3, #0
 8025158:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq = 1;
 802515a:	4b0d      	ldr	r3, [pc, #52]	; (8025190 <TestOverHeadDirection+0x9c>)
 802515c:	2201      	movs	r2, #1
 802515e:	601a      	str	r2, [r3, #0]
				break;
 8025160:	bf00      	nop
			}
		}
		ControlOverHeadDisplay_Ex(bColor);
 8025162:	79fb      	ldrb	r3, [r7, #7]
 8025164:	4618      	mov	r0, r3
 8025166:	f000 fa71 	bl	802564c <ControlOverHeadDisplay_Ex>
		ControlOverHeadDisplay_En(bColor);
 802516a:	79fb      	ldrb	r3, [r7, #7]
 802516c:	4618      	mov	r0, r3
 802516e:	f000 fa3b 	bl	80255e8 <ControlOverHeadDisplay_En>
	}
	else if (TestOption.b.fTestOverHeadLamp)
	{
		nOverOpSeq = 1;
	}
}
 8025172:	e009      	b.n	8025188 <TestOverHeadDirection+0x94>
	else if (TestOption.b.fTestOverHeadLamp)
 8025174:	4b07      	ldr	r3, [pc, #28]	; (8025194 <TestOverHeadDirection+0xa0>)
 8025176:	681b      	ldr	r3, [r3, #0]
 8025178:	f343 1300 	sbfx	r3, r3, #4, #1
 802517c:	b25b      	sxtb	r3, r3
 802517e:	2b00      	cmp	r3, #0
 8025180:	d002      	beq.n	8025188 <TestOverHeadDirection+0x94>
		nOverOpSeq = 1;
 8025182:	4b03      	ldr	r3, [pc, #12]	; (8025190 <TestOverHeadDirection+0x9c>)
 8025184:	2201      	movs	r2, #1
 8025186:	601a      	str	r2, [r3, #0]
}
 8025188:	bf00      	nop
 802518a:	3708      	adds	r7, #8
 802518c:	46bd      	mov	sp, r7
 802518e:	bd80      	pop	{r7, pc}
 8025190:	2400057c 	.word	0x2400057c
 8025194:	24000564 	.word	0x24000564

08025198 <TestLamp>:

void TestLamp(void)
{
 8025198:	b580      	push	{r7, lr}
 802519a:	b082      	sub	sp, #8
 802519c:	af00      	add	r7, sp, #0

	BYTE bColor = LAMP_OFF;
 802519e:	2300      	movs	r3, #0
 80251a0:	71fb      	strb	r3, [r7, #7]
	if (nLampOpSeq)
 80251a2:	4b3a      	ldr	r3, [pc, #232]	; (802528c <TestLamp+0xf4>)
 80251a4:	681b      	ldr	r3, [r3, #0]
 80251a6:	2b00      	cmp	r3, #0
 80251a8:	d061      	beq.n	802526e <TestLamp+0xd6>
	{
		if (!TestOption.b.fTestLamp)
 80251aa:	4b39      	ldr	r3, [pc, #228]	; (8025290 <TestLamp+0xf8>)
 80251ac:	681b      	ldr	r3, [r3, #0]
 80251ae:	f343 0380 	sbfx	r3, r3, #2, #1
 80251b2:	b25b      	sxtb	r3, r3
 80251b4:	2b00      	cmp	r3, #0
 80251b6:	d105      	bne.n	80251c4 <TestLamp+0x2c>
		{
			nLampOpSeq = 0;
 80251b8:	4b34      	ldr	r3, [pc, #208]	; (802528c <TestLamp+0xf4>)
 80251ba:	2200      	movs	r2, #0
 80251bc:	601a      	str	r2, [r3, #0]
			bColor = LAMP_OFF;
 80251be:	2300      	movs	r3, #0
 80251c0:	71fb      	strb	r3, [r7, #7]
 80251c2:	e04b      	b.n	802525c <TestLamp+0xc4>
		}
		else
		{
			switch (nLampOpSeq)
 80251c4:	4b31      	ldr	r3, [pc, #196]	; (802528c <TestLamp+0xf4>)
 80251c6:	681b      	ldr	r3, [r3, #0]
 80251c8:	3b01      	subs	r3, #1
 80251ca:	2b06      	cmp	r3, #6
 80251cc:	d846      	bhi.n	802525c <TestLamp+0xc4>
 80251ce:	a201      	add	r2, pc, #4	; (adr r2, 80251d4 <TestLamp+0x3c>)
 80251d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80251d4:	080251f1 	.word	0x080251f1
 80251d8:	08025201 	.word	0x08025201
 80251dc:	08025211 	.word	0x08025211
 80251e0:	08025221 	.word	0x08025221
 80251e4:	08025231 	.word	0x08025231
 80251e8:	08025241 	.word	0x08025241
 80251ec:	08025251 	.word	0x08025251
			{
			case 1:				
				bColor = LAMP_RED_ON;
 80251f0:	2301      	movs	r3, #1
 80251f2:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80251f4:	4b25      	ldr	r3, [pc, #148]	; (802528c <TestLamp+0xf4>)
 80251f6:	681b      	ldr	r3, [r3, #0]
 80251f8:	3301      	adds	r3, #1
 80251fa:	4a24      	ldr	r2, [pc, #144]	; (802528c <TestLamp+0xf4>)
 80251fc:	6013      	str	r3, [r2, #0]
				break;
 80251fe:	e02d      	b.n	802525c <TestLamp+0xc4>
			case 2:
				bColor = LAMP_GREEN_ON;
 8025200:	2302      	movs	r3, #2
 8025202:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 8025204:	4b21      	ldr	r3, [pc, #132]	; (802528c <TestLamp+0xf4>)
 8025206:	681b      	ldr	r3, [r3, #0]
 8025208:	3301      	adds	r3, #1
 802520a:	4a20      	ldr	r2, [pc, #128]	; (802528c <TestLamp+0xf4>)
 802520c:	6013      	str	r3, [r2, #0]
				break;
 802520e:	e025      	b.n	802525c <TestLamp+0xc4>
			case 3:
				bColor = LAMP_BLUE_ON;
 8025210:	2304      	movs	r3, #4
 8025212:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 8025214:	4b1d      	ldr	r3, [pc, #116]	; (802528c <TestLamp+0xf4>)
 8025216:	681b      	ldr	r3, [r3, #0]
 8025218:	3301      	adds	r3, #1
 802521a:	4a1c      	ldr	r2, [pc, #112]	; (802528c <TestLamp+0xf4>)
 802521c:	6013      	str	r3, [r2, #0]
				break;
 802521e:	e01d      	b.n	802525c <TestLamp+0xc4>
			case 4:				
				bColor = LAMP_RED_ON + LAMP_GREEN_ON;
 8025220:	2303      	movs	r3, #3
 8025222:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 8025224:	4b19      	ldr	r3, [pc, #100]	; (802528c <TestLamp+0xf4>)
 8025226:	681b      	ldr	r3, [r3, #0]
 8025228:	3301      	adds	r3, #1
 802522a:	4a18      	ldr	r2, [pc, #96]	; (802528c <TestLamp+0xf4>)
 802522c:	6013      	str	r3, [r2, #0]
				break;
 802522e:	e015      	b.n	802525c <TestLamp+0xc4>
			case 5:
				bColor = LAMP_RED_ON + LAMP_BLUE_ON;
 8025230:	2305      	movs	r3, #5
 8025232:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 8025234:	4b15      	ldr	r3, [pc, #84]	; (802528c <TestLamp+0xf4>)
 8025236:	681b      	ldr	r3, [r3, #0]
 8025238:	3301      	adds	r3, #1
 802523a:	4a14      	ldr	r2, [pc, #80]	; (802528c <TestLamp+0xf4>)
 802523c:	6013      	str	r3, [r2, #0]
				break;
 802523e:	e00d      	b.n	802525c <TestLamp+0xc4>
			case 6:
				bColor = LAMP_BLUE_ON + LAMP_GREEN_ON;
 8025240:	2306      	movs	r3, #6
 8025242:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 8025244:	4b11      	ldr	r3, [pc, #68]	; (802528c <TestLamp+0xf4>)
 8025246:	681b      	ldr	r3, [r3, #0]
 8025248:	3301      	adds	r3, #1
 802524a:	4a10      	ldr	r2, [pc, #64]	; (802528c <TestLamp+0xf4>)
 802524c:	6013      	str	r3, [r2, #0]
				break;
 802524e:	e005      	b.n	802525c <TestLamp+0xc4>
			case 7:
				bColor = LAMP_RED_ON + LAMP_BLUE_ON + LAMP_GREEN_ON;
 8025250:	2307      	movs	r3, #7
 8025252:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq = 1;
 8025254:	4b0d      	ldr	r3, [pc, #52]	; (802528c <TestLamp+0xf4>)
 8025256:	2201      	movs	r2, #1
 8025258:	601a      	str	r2, [r3, #0]
				break;
 802525a:	bf00      	nop
			}
		}
		ControlIndicatorLight_En(bColor);
 802525c:	79fb      	ldrb	r3, [r7, #7]
 802525e:	4618      	mov	r0, r3
 8025260:	f000 fa22 	bl	80256a8 <ControlIndicatorLight_En>
		ControlIndicatorLight_Ex(bColor);
 8025264:	79fb      	ldrb	r3, [r7, #7]
 8025266:	4618      	mov	r0, r3
 8025268:	f000 fa4c 	bl	8025704 <ControlIndicatorLight_Ex>
	}
	else if (TestOption.b.fTestLamp)
	{
		nLampOpSeq = 1;
	}
}
 802526c:	e009      	b.n	8025282 <TestLamp+0xea>
	else if (TestOption.b.fTestLamp)
 802526e:	4b08      	ldr	r3, [pc, #32]	; (8025290 <TestLamp+0xf8>)
 8025270:	681b      	ldr	r3, [r3, #0]
 8025272:	f343 0380 	sbfx	r3, r3, #2, #1
 8025276:	b25b      	sxtb	r3, r3
 8025278:	2b00      	cmp	r3, #0
 802527a:	d002      	beq.n	8025282 <TestLamp+0xea>
		nLampOpSeq = 1;
 802527c:	4b03      	ldr	r3, [pc, #12]	; (802528c <TestLamp+0xf4>)
 802527e:	2201      	movs	r2, #1
 8025280:	601a      	str	r2, [r3, #0]
}
 8025282:	bf00      	nop
 8025284:	3708      	adds	r7, #8
 8025286:	46bd      	mov	sp, r7
 8025288:	bd80      	pop	{r7, pc}
 802528a:	bf00      	nop
 802528c:	24000574 	.word	0x24000574
 8025290:	24000564 	.word	0x24000564

08025294 <TestDoor_P>:

void TestDoor_P(void)
{
 8025294:	b580      	push	{r7, lr}
 8025296:	b082      	sub	sp, #8
 8025298:	af00      	add	r7, sp, #0
	BYTE bDir = ENTRY_OPEN;
 802529a:	2300      	movs	r3, #0
 802529c:	71fb      	strb	r3, [r7, #7]

	if (nPDoorOpSeq)
 802529e:	4b2c      	ldr	r3, [pc, #176]	; (8025350 <TestDoor_P+0xbc>)
 80252a0:	681b      	ldr	r3, [r3, #0]
 80252a2:	2b00      	cmp	r3, #0
 80252a4:	d043      	beq.n	802532e <TestDoor_P+0x9a>
	{
		if (!TestOption.b.fTestBarrier)
 80252a6:	4b2b      	ldr	r3, [pc, #172]	; (8025354 <TestDoor_P+0xc0>)
 80252a8:	681b      	ldr	r3, [r3, #0]
 80252aa:	f343 1340 	sbfx	r3, r3, #5, #1
 80252ae:	b25b      	sxtb	r3, r3
 80252b0:	2b00      	cmp	r3, #0
 80252b2:	d108      	bne.n	80252c6 <TestDoor_P+0x32>
		{
			nPDoorOpSeq = 0;
 80252b4:	4b26      	ldr	r3, [pc, #152]	; (8025350 <TestDoor_P+0xbc>)
 80252b6:	2200      	movs	r2, #0
 80252b8:	601a      	str	r2, [r3, #0]
			Brr_SetEmergency_P(TRUE);
 80252ba:	2001      	movs	r0, #1
 80252bc:	f000 fa50 	bl	8025760 <Brr_SetEmergency_P>
			bDir = ENTRY_OPEN;
 80252c0:	2300      	movs	r3, #0
 80252c2:	71fb      	strb	r3, [r7, #7]
 80252c4:	e02e      	b.n	8025324 <TestDoor_P+0x90>
		}
		else
		{
			switch (nPDoorOpSeq)
 80252c6:	4b22      	ldr	r3, [pc, #136]	; (8025350 <TestDoor_P+0xbc>)
 80252c8:	681b      	ldr	r3, [r3, #0]
 80252ca:	3b01      	subs	r3, #1
 80252cc:	2b03      	cmp	r3, #3
 80252ce:	d829      	bhi.n	8025324 <TestDoor_P+0x90>
 80252d0:	a201      	add	r2, pc, #4	; (adr r2, 80252d8 <TestDoor_P+0x44>)
 80252d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80252d6:	bf00      	nop
 80252d8:	080252e9 	.word	0x080252e9
 80252dc:	080252f9 	.word	0x080252f9
 80252e0:	08025309 	.word	0x08025309
 80252e4:	08025319 	.word	0x08025319
			{
			case 1:
				bDir = ENTRY_OPEN;
 80252e8:	2300      	movs	r3, #0
 80252ea:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 80252ec:	4b18      	ldr	r3, [pc, #96]	; (8025350 <TestDoor_P+0xbc>)
 80252ee:	681b      	ldr	r3, [r3, #0]
 80252f0:	3301      	adds	r3, #1
 80252f2:	4a17      	ldr	r2, [pc, #92]	; (8025350 <TestDoor_P+0xbc>)
 80252f4:	6013      	str	r3, [r2, #0]
				break;
 80252f6:	e015      	b.n	8025324 <TestDoor_P+0x90>
			case 2:
				bDir = CLOSE;
 80252f8:	2301      	movs	r3, #1
 80252fa:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 80252fc:	4b14      	ldr	r3, [pc, #80]	; (8025350 <TestDoor_P+0xbc>)
 80252fe:	681b      	ldr	r3, [r3, #0]
 8025300:	3301      	adds	r3, #1
 8025302:	4a13      	ldr	r2, [pc, #76]	; (8025350 <TestDoor_P+0xbc>)
 8025304:	6013      	str	r3, [r2, #0]
				break;
 8025306:	e00d      	b.n	8025324 <TestDoor_P+0x90>
			case 3:
				bDir = EXIT_OPEN;
 8025308:	2302      	movs	r3, #2
 802530a:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 802530c:	4b10      	ldr	r3, [pc, #64]	; (8025350 <TestDoor_P+0xbc>)
 802530e:	681b      	ldr	r3, [r3, #0]
 8025310:	3301      	adds	r3, #1
 8025312:	4a0f      	ldr	r2, [pc, #60]	; (8025350 <TestDoor_P+0xbc>)
 8025314:	6013      	str	r3, [r2, #0]
				break;
 8025316:	e005      	b.n	8025324 <TestDoor_P+0x90>
			case 4:
				bDir = CLOSE;
 8025318:	2301      	movs	r3, #1
 802531a:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq = 1;
 802531c:	4b0c      	ldr	r3, [pc, #48]	; (8025350 <TestDoor_P+0xbc>)
 802531e:	2201      	movs	r2, #1
 8025320:	601a      	str	r2, [r3, #0]
				break;
 8025322:	bf00      	nop
			}
		}
		Brr_ControlBarrier_P(bDir);
 8025324:	79fb      	ldrb	r3, [r7, #7]
 8025326:	4618      	mov	r0, r3
 8025328:	f000 fac2 	bl	80258b0 <Brr_ControlBarrier_P>
	else if (TestOption.b.fTestBarrier)
	{
		nPDoorOpSeq = 1;
		Brr_SetEmergency_P(FALSE);
	}
}
 802532c:	e00c      	b.n	8025348 <TestDoor_P+0xb4>
	else if (TestOption.b.fTestBarrier)
 802532e:	4b09      	ldr	r3, [pc, #36]	; (8025354 <TestDoor_P+0xc0>)
 8025330:	681b      	ldr	r3, [r3, #0]
 8025332:	f343 1340 	sbfx	r3, r3, #5, #1
 8025336:	b25b      	sxtb	r3, r3
 8025338:	2b00      	cmp	r3, #0
 802533a:	d005      	beq.n	8025348 <TestDoor_P+0xb4>
		nPDoorOpSeq = 1;
 802533c:	4b04      	ldr	r3, [pc, #16]	; (8025350 <TestDoor_P+0xbc>)
 802533e:	2201      	movs	r2, #1
 8025340:	601a      	str	r2, [r3, #0]
		Brr_SetEmergency_P(FALSE);
 8025342:	2000      	movs	r0, #0
 8025344:	f000 fa0c 	bl	8025760 <Brr_SetEmergency_P>
}
 8025348:	bf00      	nop
 802534a:	3708      	adds	r7, #8
 802534c:	46bd      	mov	sp, r7
 802534e:	bd80      	pop	{r7, pc}
 8025350:	24000570 	.word	0x24000570
 8025354:	24000564 	.word	0x24000564

08025358 <TestDoor_S>:

void TestDoor_S(void)
{
 8025358:	b580      	push	{r7, lr}
 802535a:	b082      	sub	sp, #8
 802535c:	af00      	add	r7, sp, #0
	BYTE bDir = ENTRY_OPEN;
 802535e:	2300      	movs	r3, #0
 8025360:	71fb      	strb	r3, [r7, #7]

	if (nSDoorOpSeq)
 8025362:	4b2c      	ldr	r3, [pc, #176]	; (8025414 <TestDoor_S+0xbc>)
 8025364:	681b      	ldr	r3, [r3, #0]
 8025366:	2b00      	cmp	r3, #0
 8025368:	d043      	beq.n	80253f2 <TestDoor_S+0x9a>
	{
		if (!TestOption.b.fTestBarrier)
 802536a:	4b2b      	ldr	r3, [pc, #172]	; (8025418 <TestDoor_S+0xc0>)
 802536c:	681b      	ldr	r3, [r3, #0]
 802536e:	f343 1340 	sbfx	r3, r3, #5, #1
 8025372:	b25b      	sxtb	r3, r3
 8025374:	2b00      	cmp	r3, #0
 8025376:	d108      	bne.n	802538a <TestDoor_S+0x32>
		{
			nSDoorOpSeq = 0;
 8025378:	4b26      	ldr	r3, [pc, #152]	; (8025414 <TestDoor_S+0xbc>)
 802537a:	2200      	movs	r2, #0
 802537c:	601a      	str	r2, [r3, #0]
			Brr_SetEmergency_S(TRUE);
 802537e:	2001      	movs	r0, #1
 8025380:	f000 fa18 	bl	80257b4 <Brr_SetEmergency_S>
			bDir = ENTRY_OPEN;
 8025384:	2300      	movs	r3, #0
 8025386:	71fb      	strb	r3, [r7, #7]
 8025388:	e02e      	b.n	80253e8 <TestDoor_S+0x90>
		}
		else
		{
			switch (nSDoorOpSeq)
 802538a:	4b22      	ldr	r3, [pc, #136]	; (8025414 <TestDoor_S+0xbc>)
 802538c:	681b      	ldr	r3, [r3, #0]
 802538e:	3b01      	subs	r3, #1
 8025390:	2b03      	cmp	r3, #3
 8025392:	d829      	bhi.n	80253e8 <TestDoor_S+0x90>
 8025394:	a201      	add	r2, pc, #4	; (adr r2, 802539c <TestDoor_S+0x44>)
 8025396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802539a:	bf00      	nop
 802539c:	080253ad 	.word	0x080253ad
 80253a0:	080253bd 	.word	0x080253bd
 80253a4:	080253cd 	.word	0x080253cd
 80253a8:	080253dd 	.word	0x080253dd
			{
			case 1:
				bDir = ENTRY_OPEN;
 80253ac:	2300      	movs	r3, #0
 80253ae:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 80253b0:	4b18      	ldr	r3, [pc, #96]	; (8025414 <TestDoor_S+0xbc>)
 80253b2:	681b      	ldr	r3, [r3, #0]
 80253b4:	3301      	adds	r3, #1
 80253b6:	4a17      	ldr	r2, [pc, #92]	; (8025414 <TestDoor_S+0xbc>)
 80253b8:	6013      	str	r3, [r2, #0]
				break;
 80253ba:	e015      	b.n	80253e8 <TestDoor_S+0x90>
			case 2:
				bDir = CLOSE;
 80253bc:	2301      	movs	r3, #1
 80253be:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 80253c0:	4b14      	ldr	r3, [pc, #80]	; (8025414 <TestDoor_S+0xbc>)
 80253c2:	681b      	ldr	r3, [r3, #0]
 80253c4:	3301      	adds	r3, #1
 80253c6:	4a13      	ldr	r2, [pc, #76]	; (8025414 <TestDoor_S+0xbc>)
 80253c8:	6013      	str	r3, [r2, #0]
				break;
 80253ca:	e00d      	b.n	80253e8 <TestDoor_S+0x90>
			case 3:
				bDir = EXIT_OPEN;
 80253cc:	2302      	movs	r3, #2
 80253ce:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 80253d0:	4b10      	ldr	r3, [pc, #64]	; (8025414 <TestDoor_S+0xbc>)
 80253d2:	681b      	ldr	r3, [r3, #0]
 80253d4:	3301      	adds	r3, #1
 80253d6:	4a0f      	ldr	r2, [pc, #60]	; (8025414 <TestDoor_S+0xbc>)
 80253d8:	6013      	str	r3, [r2, #0]
				break;
 80253da:	e005      	b.n	80253e8 <TestDoor_S+0x90>
			case 4:
				bDir = CLOSE;
 80253dc:	2301      	movs	r3, #1
 80253de:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq = 1;
 80253e0:	4b0c      	ldr	r3, [pc, #48]	; (8025414 <TestDoor_S+0xbc>)
 80253e2:	2201      	movs	r2, #1
 80253e4:	601a      	str	r2, [r3, #0]
				break;
 80253e6:	bf00      	nop
			}
		}
		Brr_ControlBarrier_S(bDir);
 80253e8:	79fb      	ldrb	r3, [r7, #7]
 80253ea:	4618      	mov	r0, r3
 80253ec:	f000 faae 	bl	802594c <Brr_ControlBarrier_S>
	else if (TestOption.b.fTestBarrier)
	{
		nSDoorOpSeq = 1;
		Brr_SetEmergency_S(FALSE);
	}
}
 80253f0:	e00c      	b.n	802540c <TestDoor_S+0xb4>
	else if (TestOption.b.fTestBarrier)
 80253f2:	4b09      	ldr	r3, [pc, #36]	; (8025418 <TestDoor_S+0xc0>)
 80253f4:	681b      	ldr	r3, [r3, #0]
 80253f6:	f343 1340 	sbfx	r3, r3, #5, #1
 80253fa:	b25b      	sxtb	r3, r3
 80253fc:	2b00      	cmp	r3, #0
 80253fe:	d005      	beq.n	802540c <TestDoor_S+0xb4>
		nSDoorOpSeq = 1;
 8025400:	4b04      	ldr	r3, [pc, #16]	; (8025414 <TestDoor_S+0xbc>)
 8025402:	2201      	movs	r2, #1
 8025404:	601a      	str	r2, [r3, #0]
		Brr_SetEmergency_S(FALSE);
 8025406:	2000      	movs	r0, #0
 8025408:	f000 f9d4 	bl	80257b4 <Brr_SetEmergency_S>
}
 802540c:	bf00      	nop
 802540e:	3708      	adds	r7, #8
 8025410:	46bd      	mov	sp, r7
 8025412:	bd80      	pop	{r7, pc}
 8025414:	2400056c 	.word	0x2400056c
 8025418:	24000564 	.word	0x24000564

0802541c <TestBuzzer>:

void TestBuzzer(void)
{
 802541c:	b580      	push	{r7, lr}
 802541e:	af00      	add	r7, sp, #0


	if (nBuzzOpSeq)
 8025420:	4b1b      	ldr	r3, [pc, #108]	; (8025490 <TestBuzzer+0x74>)
 8025422:	681b      	ldr	r3, [r3, #0]
 8025424:	2b00      	cmp	r3, #0
 8025426:	d027      	beq.n	8025478 <TestBuzzer+0x5c>
	{
		if (!TestOption.b.fTestBuzzer)
 8025428:	4b1a      	ldr	r3, [pc, #104]	; (8025494 <TestBuzzer+0x78>)
 802542a:	681b      	ldr	r3, [r3, #0]
 802542c:	f343 1380 	sbfx	r3, r3, #6, #1
 8025430:	b25b      	sxtb	r3, r3
 8025432:	2b00      	cmp	r3, #0
 8025434:	d103      	bne.n	802543e <TestBuzzer+0x22>
		{
			nBuzzOpSeq = 0;
 8025436:	4b16      	ldr	r3, [pc, #88]	; (8025490 <TestBuzzer+0x74>)
 8025438:	2200      	movs	r2, #0
 802543a:	601a      	str	r2, [r3, #0]
 802543c:	e012      	b.n	8025464 <TestBuzzer+0x48>
		}
		else
		{
			switch (nBuzzOpSeq)
 802543e:	4b14      	ldr	r3, [pc, #80]	; (8025490 <TestBuzzer+0x74>)
 8025440:	681b      	ldr	r3, [r3, #0]
 8025442:	2b01      	cmp	r3, #1
 8025444:	d002      	beq.n	802544c <TestBuzzer+0x30>
 8025446:	2b02      	cmp	r3, #2
 8025448:	d006      	beq.n	8025458 <TestBuzzer+0x3c>
 802544a:	e00b      	b.n	8025464 <TestBuzzer+0x48>
			{
			case 1:
				nBuzzOpSeq++;
 802544c:	4b10      	ldr	r3, [pc, #64]	; (8025490 <TestBuzzer+0x74>)
 802544e:	681b      	ldr	r3, [r3, #0]
 8025450:	3301      	adds	r3, #1
 8025452:	4a0f      	ldr	r2, [pc, #60]	; (8025490 <TestBuzzer+0x74>)
 8025454:	6013      	str	r3, [r2, #0]
				break;
 8025456:	e005      	b.n	8025464 <TestBuzzer+0x48>
			case 2:
				nBuzzOpSeq--;
 8025458:	4b0d      	ldr	r3, [pc, #52]	; (8025490 <TestBuzzer+0x74>)
 802545a:	681b      	ldr	r3, [r3, #0]
 802545c:	3b01      	subs	r3, #1
 802545e:	4a0c      	ldr	r2, [pc, #48]	; (8025490 <TestBuzzer+0x74>)
 8025460:	6013      	str	r3, [r2, #0]
				break;
 8025462:	bf00      	nop
			}
		}

		if (nBuzzOpSeq == 1)
 8025464:	4b0a      	ldr	r3, [pc, #40]	; (8025490 <TestBuzzer+0x74>)
 8025466:	681b      	ldr	r3, [r3, #0]
 8025468:	2b01      	cmp	r3, #1
 802546a:	d102      	bne.n	8025472 <TestBuzzer+0x56>
		{
			BuzzerOn();
 802546c:	f000 f844 	bl	80254f8 <BuzzerOn>
	}
	else if (TestOption.b.fTestBuzzer)
	{
		nBuzzOpSeq = 1;
	}
}
 8025470:	e00c      	b.n	802548c <TestBuzzer+0x70>
			BuzzerOff();
 8025472:	f000 f84d 	bl	8025510 <BuzzerOff>
}
 8025476:	e009      	b.n	802548c <TestBuzzer+0x70>
	else if (TestOption.b.fTestBuzzer)
 8025478:	4b06      	ldr	r3, [pc, #24]	; (8025494 <TestBuzzer+0x78>)
 802547a:	681b      	ldr	r3, [r3, #0]
 802547c:	f343 1380 	sbfx	r3, r3, #6, #1
 8025480:	b25b      	sxtb	r3, r3
 8025482:	2b00      	cmp	r3, #0
 8025484:	d002      	beq.n	802548c <TestBuzzer+0x70>
		nBuzzOpSeq = 1;
 8025486:	4b02      	ldr	r3, [pc, #8]	; (8025490 <TestBuzzer+0x74>)
 8025488:	2201      	movs	r2, #1
 802548a:	601a      	str	r2, [r3, #0]
}
 802548c:	bf00      	nop
 802548e:	bd80      	pop	{r7, pc}
 8025490:	24000568 	.word	0x24000568
 8025494:	24000564 	.word	0x24000564

08025498 <TestAging>:
	nOverOpSeq 	= 0;
}


void TestAging(void)
{
 8025498:	b580      	push	{r7, lr}
 802549a:	af00      	add	r7, sp, #0
	static DWORD loop = 0;	// 1 loop = 10ms

	// Every 2 seconds, the test function will run.
	if (!loop)
 802549c:	4b13      	ldr	r3, [pc, #76]	; (80254ec <TestAging+0x54>)
 802549e:	681b      	ldr	r3, [r3, #0]
 80254a0:	2b00      	cmp	r3, #0
 80254a2:	d112      	bne.n	80254ca <TestAging+0x32>
	{
		TestOption.bVal = ReadDipSwitch();
 80254a4:	4b12      	ldr	r3, [pc, #72]	; (80254f0 <TestAging+0x58>)
 80254a6:	691b      	ldr	r3, [r3, #16]
 80254a8:	b2db      	uxtb	r3, r3
 80254aa:	43db      	mvns	r3, r3
 80254ac:	b2da      	uxtb	r2, r3
 80254ae:	4b11      	ldr	r3, [pc, #68]	; (80254f4 <TestAging+0x5c>)
 80254b0:	701a      	strb	r2, [r3, #0]
		TestDirection();
 80254b2:	f7ff fdcd 	bl	8025050 <TestDirection>
		TestOverHeadDirection();
 80254b6:	f7ff fe1d 	bl	80250f4 <TestOverHeadDirection>
		TestLamp();
 80254ba:	f7ff fe6d 	bl	8025198 <TestLamp>
		TestDoor_P();
 80254be:	f7ff fee9 	bl	8025294 <TestDoor_P>
		TestDoor_S();
 80254c2:	f7ff ff49 	bl	8025358 <TestDoor_S>
		TestBuzzer();
 80254c6:	f7ff ffa9 	bl	802541c <TestBuzzer>
	}
	
	loop++;
 80254ca:	4b08      	ldr	r3, [pc, #32]	; (80254ec <TestAging+0x54>)
 80254cc:	681b      	ldr	r3, [r3, #0]
 80254ce:	3301      	adds	r3, #1
 80254d0:	4a06      	ldr	r2, [pc, #24]	; (80254ec <TestAging+0x54>)
 80254d2:	6013      	str	r3, [r2, #0]
	if (loop >= 3000)
 80254d4:	4b05      	ldr	r3, [pc, #20]	; (80254ec <TestAging+0x54>)
 80254d6:	681b      	ldr	r3, [r3, #0]
 80254d8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80254dc:	4293      	cmp	r3, r2
 80254de:	d902      	bls.n	80254e6 <TestAging+0x4e>
		loop = 0;
 80254e0:	4b02      	ldr	r3, [pc, #8]	; (80254ec <TestAging+0x54>)
 80254e2:	2200      	movs	r2, #0
 80254e4:	601a      	str	r2, [r3, #0]
}
 80254e6:	bf00      	nop
 80254e8:	bd80      	pop	{r7, pc}
 80254ea:	bf00      	nop
 80254ec:	24000580 	.word	0x24000580
 80254f0:	58020400 	.word	0x58020400
 80254f4:	24000564 	.word	0x24000564

080254f8 <BuzzerOn>:
uint8_t Add_100_Value = 0;
uint8_t Add_200_Value = 0;
uint8_t Add_400_Value = 0;

void BuzzerOn(void)
{
 80254f8:	b580      	push	{r7, lr}
 80254fa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(BUZZ_CON_GPIO_Port,BUZZ_CON_Pin,GPIO_PIN_SET);
 80254fc:	2201      	movs	r2, #1
 80254fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8025502:	4802      	ldr	r0, [pc, #8]	; (802550c <BuzzerOn+0x14>)
 8025504:	f005 ffb2 	bl	802b46c <HAL_GPIO_WritePin>
}
 8025508:	bf00      	nop
 802550a:	bd80      	pop	{r7, pc}
 802550c:	58020000 	.word	0x58020000

08025510 <BuzzerOff>:


void BuzzerOff(void)
{
 8025510:	b580      	push	{r7, lr}
 8025512:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZ_CON_GPIO_Port,BUZZ_CON_Pin,GPIO_PIN_RESET);
 8025514:	2200      	movs	r2, #0
 8025516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802551a:	4802      	ldr	r0, [pc, #8]	; (8025524 <BuzzerOff+0x14>)
 802551c:	f005 ffa6 	bl	802b46c <HAL_GPIO_WritePin>
}
 8025520:	bf00      	nop
 8025522:	bd80      	pop	{r7, pc}
 8025524:	58020000 	.word	0x58020000

08025528 <ControlStatusLED_En>:


void ControlStatusLED_En(UINT8 nValue)
{
 8025528:	b480      	push	{r7}
 802552a:	b083      	sub	sp, #12
 802552c:	af00      	add	r7, sp, #0
 802552e:	4603      	mov	r3, r0
 8025530:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0xFC;			//1111 1100
 8025532:	4b14      	ldr	r3, [pc, #80]	; (8025584 <ControlStatusLED_En+0x5c>)
 8025534:	781b      	ldrb	r3, [r3, #0]
 8025536:	f023 0303 	bic.w	r3, r3, #3
 802553a:	b2da      	uxtb	r2, r3
 802553c:	4b11      	ldr	r3, [pc, #68]	; (8025584 <ControlStatusLED_En+0x5c>)
 802553e:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8025540:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025544:	4a0f      	ldr	r2, [pc, #60]	; (8025584 <ControlStatusLED_En+0x5c>)
 8025546:	7812      	ldrb	r2, [r2, #0]
 8025548:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= (UINT8)(nValue & 0x03);
 802554a:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 802554e:	781b      	ldrb	r3, [r3, #0]
 8025550:	b2db      	uxtb	r3, r3
 8025552:	b25a      	sxtb	r2, r3
 8025554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025558:	f003 0303 	and.w	r3, r3, #3
 802555c:	b25b      	sxtb	r3, r3
 802555e:	4313      	orrs	r3, r2
 8025560:	b25a      	sxtb	r2, r3
 8025562:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025566:	b2d2      	uxtb	r2, r2
 8025568:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 802556a:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 802556e:	781b      	ldrb	r3, [r3, #0]
 8025570:	b2da      	uxtb	r2, r3
 8025572:	4b04      	ldr	r3, [pc, #16]	; (8025584 <ControlStatusLED_En+0x5c>)
 8025574:	701a      	strb	r2, [r3, #0]

}
 8025576:	bf00      	nop
 8025578:	370c      	adds	r7, #12
 802557a:	46bd      	mov	sp, r7
 802557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025580:	4770      	bx	lr
 8025582:	bf00      	nop
 8025584:	24000584 	.word	0x24000584

08025588 <ControlStatusLED_Ex>:

void ControlStatusLED_Ex(UINT8 nValue)
{
 8025588:	b480      	push	{r7}
 802558a:	b083      	sub	sp, #12
 802558c:	af00      	add	r7, sp, #0
 802558e:	4603      	mov	r3, r0
 8025590:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0xCF;				//1100 1111
 8025592:	4b14      	ldr	r3, [pc, #80]	; (80255e4 <ControlStatusLED_Ex+0x5c>)
 8025594:	781b      	ldrb	r3, [r3, #0]
 8025596:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 802559a:	b2da      	uxtb	r2, r3
 802559c:	4b11      	ldr	r3, [pc, #68]	; (80255e4 <ControlStatusLED_Ex+0x5c>)
 802559e:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 80255a0:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80255a4:	4a0f      	ldr	r2, [pc, #60]	; (80255e4 <ControlStatusLED_Ex+0x5c>)
 80255a6:	7812      	ldrb	r2, [r2, #0]
 80255a8:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= (UINT8)((nValue << 4) & 0x30);
 80255aa:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80255ae:	781b      	ldrb	r3, [r3, #0]
 80255b0:	b2db      	uxtb	r3, r3
 80255b2:	b25a      	sxtb	r2, r3
 80255b4:	79fb      	ldrb	r3, [r7, #7]
 80255b6:	011b      	lsls	r3, r3, #4
 80255b8:	b25b      	sxtb	r3, r3
 80255ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80255be:	b25b      	sxtb	r3, r3
 80255c0:	4313      	orrs	r3, r2
 80255c2:	b25a      	sxtb	r2, r3
 80255c4:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80255c8:	b2d2      	uxtb	r2, r2
 80255ca:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 80255cc:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80255d0:	781b      	ldrb	r3, [r3, #0]
 80255d2:	b2da      	uxtb	r2, r3
 80255d4:	4b03      	ldr	r3, [pc, #12]	; (80255e4 <ControlStatusLED_Ex+0x5c>)
 80255d6:	701a      	strb	r2, [r3, #0]

}
 80255d8:	bf00      	nop
 80255da:	370c      	adds	r7, #12
 80255dc:	46bd      	mov	sp, r7
 80255de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255e2:	4770      	bx	lr
 80255e4:	24000584 	.word	0x24000584

080255e8 <ControlOverHeadDisplay_En>:

void ControlOverHeadDisplay_En(UINT8 nValue)
{
 80255e8:	b480      	push	{r7}
 80255ea:	b083      	sub	sp, #12
 80255ec:	af00      	add	r7, sp, #0
 80255ee:	4603      	mov	r3, r0
 80255f0:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0xF3;	// 1001 1111
 80255f2:	4b15      	ldr	r3, [pc, #84]	; (8025648 <ControlOverHeadDisplay_En+0x60>)
 80255f4:	781b      	ldrb	r3, [r3, #0]
 80255f6:	f023 030c 	bic.w	r3, r3, #12
 80255fa:	b2da      	uxtb	r2, r3
 80255fc:	4b12      	ldr	r3, [pc, #72]	; (8025648 <ControlOverHeadDisplay_En+0x60>)
 80255fe:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8025600:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025604:	4a10      	ldr	r2, [pc, #64]	; (8025648 <ControlOverHeadDisplay_En+0x60>)
 8025606:	7812      	ldrb	r2, [r2, #0]
 8025608:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= ((UINT8) (nValue << 2) & 0x0C);
 802560a:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 802560e:	781b      	ldrb	r3, [r3, #0]
 8025610:	b2db      	uxtb	r3, r3
 8025612:	b25a      	sxtb	r2, r3
 8025614:	79fb      	ldrb	r3, [r7, #7]
 8025616:	009b      	lsls	r3, r3, #2
 8025618:	b2db      	uxtb	r3, r3
 802561a:	b25b      	sxtb	r3, r3
 802561c:	f003 030c 	and.w	r3, r3, #12
 8025620:	b25b      	sxtb	r3, r3
 8025622:	4313      	orrs	r3, r2
 8025624:	b25a      	sxtb	r2, r3
 8025626:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 802562a:	b2d2      	uxtb	r2, r2
 802562c:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 802562e:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025632:	781b      	ldrb	r3, [r3, #0]
 8025634:	b2da      	uxtb	r2, r3
 8025636:	4b04      	ldr	r3, [pc, #16]	; (8025648 <ControlOverHeadDisplay_En+0x60>)
 8025638:	701a      	strb	r2, [r3, #0]

	
	// H743 Version
	// WRITE00_ADR |= ((UINT8) nValue << 2);
}
 802563a:	bf00      	nop
 802563c:	370c      	adds	r7, #12
 802563e:	46bd      	mov	sp, r7
 8025640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025644:	4770      	bx	lr
 8025646:	bf00      	nop
 8025648:	24000584 	.word	0x24000584

0802564c <ControlOverHeadDisplay_Ex>:

void ControlOverHeadDisplay_Ex(UINT8 nValue)
{
 802564c:	b480      	push	{r7}
 802564e:	b083      	sub	sp, #12
 8025650:	af00      	add	r7, sp, #0
 8025652:	4603      	mov	r3, r0
 8025654:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0x3F;
 8025656:	4b13      	ldr	r3, [pc, #76]	; (80256a4 <ControlOverHeadDisplay_Ex+0x58>)
 8025658:	781b      	ldrb	r3, [r3, #0]
 802565a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802565e:	b2da      	uxtb	r2, r3
 8025660:	4b10      	ldr	r3, [pc, #64]	; (80256a4 <ControlOverHeadDisplay_Ex+0x58>)
 8025662:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8025664:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025668:	4a0e      	ldr	r2, [pc, #56]	; (80256a4 <ControlOverHeadDisplay_Ex+0x58>)
 802566a:	7812      	ldrb	r2, [r2, #0]
 802566c:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= ((UINT8) (nValue << 6) & 0xC0);
 802566e:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025672:	781b      	ldrb	r3, [r3, #0]
 8025674:	b2db      	uxtb	r3, r3
 8025676:	b25a      	sxtb	r2, r3
 8025678:	79fb      	ldrb	r3, [r7, #7]
 802567a:	019b      	lsls	r3, r3, #6
 802567c:	b2db      	uxtb	r3, r3
 802567e:	b25b      	sxtb	r3, r3
 8025680:	4313      	orrs	r3, r2
 8025682:	b25a      	sxtb	r2, r3
 8025684:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025688:	b2d2      	uxtb	r2, r2
 802568a:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 802568c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025690:	781b      	ldrb	r3, [r3, #0]
 8025692:	b2da      	uxtb	r2, r3
 8025694:	4b03      	ldr	r3, [pc, #12]	; (80256a4 <ControlOverHeadDisplay_Ex+0x58>)
 8025696:	701a      	strb	r2, [r3, #0]

	// H743 Version
	// WRITE00_ADR |= ((UINT8) nValue << 6);
}
 8025698:	bf00      	nop
 802569a:	370c      	adds	r7, #12
 802569c:	46bd      	mov	sp, r7
 802569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256a2:	4770      	bx	lr
 80256a4:	24000584 	.word	0x24000584

080256a8 <ControlIndicatorLight_En>:


void ControlIndicatorLight_En(UINT8 nValue)
{
 80256a8:	b480      	push	{r7}
 80256aa:	b083      	sub	sp, #12
 80256ac:	af00      	add	r7, sp, #0
 80256ae:	4603      	mov	r3, r0
 80256b0:	71fb      	strb	r3, [r7, #7]

	Add_100_Value &= 0xF8;
 80256b2:	4b12      	ldr	r3, [pc, #72]	; (80256fc <ControlIndicatorLight_En+0x54>)
 80256b4:	781b      	ldrb	r3, [r3, #0]
 80256b6:	f023 0307 	bic.w	r3, r3, #7
 80256ba:	b2da      	uxtb	r2, r3
 80256bc:	4b0f      	ldr	r3, [pc, #60]	; (80256fc <ControlIndicatorLight_En+0x54>)
 80256be:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR = Add_100_Value;
 80256c0:	4b0f      	ldr	r3, [pc, #60]	; (8025700 <ControlIndicatorLight_En+0x58>)
 80256c2:	4a0e      	ldr	r2, [pc, #56]	; (80256fc <ControlIndicatorLight_En+0x54>)
 80256c4:	7812      	ldrb	r2, [r2, #0]
 80256c6:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR |= (UINT8)(nValue & 0x07);
 80256c8:	4b0d      	ldr	r3, [pc, #52]	; (8025700 <ControlIndicatorLight_En+0x58>)
 80256ca:	781b      	ldrb	r3, [r3, #0]
 80256cc:	b2db      	uxtb	r3, r3
 80256ce:	b25a      	sxtb	r2, r3
 80256d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80256d4:	f003 0307 	and.w	r3, r3, #7
 80256d8:	b25b      	sxtb	r3, r3
 80256da:	4313      	orrs	r3, r2
 80256dc:	b25a      	sxtb	r2, r3
 80256de:	4b08      	ldr	r3, [pc, #32]	; (8025700 <ControlIndicatorLight_En+0x58>)
 80256e0:	b2d2      	uxtb	r2, r2
 80256e2:	701a      	strb	r2, [r3, #0]

	Add_100_Value = wnS_LED_CS_ADDR;
 80256e4:	4b06      	ldr	r3, [pc, #24]	; (8025700 <ControlIndicatorLight_En+0x58>)
 80256e6:	781b      	ldrb	r3, [r3, #0]
 80256e8:	b2da      	uxtb	r2, r3
 80256ea:	4b04      	ldr	r3, [pc, #16]	; (80256fc <ControlIndicatorLight_En+0x54>)
 80256ec:	701a      	strb	r2, [r3, #0]

}
 80256ee:	bf00      	nop
 80256f0:	370c      	adds	r7, #12
 80256f2:	46bd      	mov	sp, r7
 80256f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256f8:	4770      	bx	lr
 80256fa:	bf00      	nop
 80256fc:	24000585 	.word	0x24000585
 8025700:	64000100 	.word	0x64000100

08025704 <ControlIndicatorLight_Ex>:

void ControlIndicatorLight_Ex(UINT8 nValue)
{
 8025704:	b480      	push	{r7}
 8025706:	b083      	sub	sp, #12
 8025708:	af00      	add	r7, sp, #0
 802570a:	4603      	mov	r3, r0
 802570c:	71fb      	strb	r3, [r7, #7]

	Add_100_Value &= 0x8F;
 802570e:	4b12      	ldr	r3, [pc, #72]	; (8025758 <ControlIndicatorLight_Ex+0x54>)
 8025710:	781b      	ldrb	r3, [r3, #0]
 8025712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8025716:	b2da      	uxtb	r2, r3
 8025718:	4b0f      	ldr	r3, [pc, #60]	; (8025758 <ControlIndicatorLight_Ex+0x54>)
 802571a:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR = Add_100_Value;
 802571c:	4b0f      	ldr	r3, [pc, #60]	; (802575c <ControlIndicatorLight_Ex+0x58>)
 802571e:	4a0e      	ldr	r2, [pc, #56]	; (8025758 <ControlIndicatorLight_Ex+0x54>)
 8025720:	7812      	ldrb	r2, [r2, #0]
 8025722:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR |= (UINT8)((nValue<<4) & 0x70);
 8025724:	4b0d      	ldr	r3, [pc, #52]	; (802575c <ControlIndicatorLight_Ex+0x58>)
 8025726:	781b      	ldrb	r3, [r3, #0]
 8025728:	b2db      	uxtb	r3, r3
 802572a:	b25a      	sxtb	r2, r3
 802572c:	79fb      	ldrb	r3, [r7, #7]
 802572e:	011b      	lsls	r3, r3, #4
 8025730:	b25b      	sxtb	r3, r3
 8025732:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8025736:	b25b      	sxtb	r3, r3
 8025738:	4313      	orrs	r3, r2
 802573a:	b25a      	sxtb	r2, r3
 802573c:	4b07      	ldr	r3, [pc, #28]	; (802575c <ControlIndicatorLight_Ex+0x58>)
 802573e:	b2d2      	uxtb	r2, r2
 8025740:	701a      	strb	r2, [r3, #0]

	Add_100_Value = wnS_LED_CS_ADDR;
 8025742:	4b06      	ldr	r3, [pc, #24]	; (802575c <ControlIndicatorLight_Ex+0x58>)
 8025744:	781b      	ldrb	r3, [r3, #0]
 8025746:	b2da      	uxtb	r2, r3
 8025748:	4b03      	ldr	r3, [pc, #12]	; (8025758 <ControlIndicatorLight_Ex+0x54>)
 802574a:	701a      	strb	r2, [r3, #0]

}
 802574c:	bf00      	nop
 802574e:	370c      	adds	r7, #12
 8025750:	46bd      	mov	sp, r7
 8025752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025756:	4770      	bx	lr
 8025758:	24000585 	.word	0x24000585
 802575c:	64000100 	.word	0x64000100

08025760 <Brr_SetEmergency_P>:


void Brr_SetEmergency_P(bool isActive)
{
 8025760:	b480      	push	{r7}
 8025762:	b083      	sub	sp, #12
 8025764:	af00      	add	r7, sp, #0
 8025766:	4603      	mov	r3, r0
 8025768:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 802576a:	4b10      	ldr	r3, [pc, #64]	; (80257ac <Brr_SetEmergency_P+0x4c>)
 802576c:	781a      	ldrb	r2, [r3, #0]
 802576e:	4b0f      	ldr	r3, [pc, #60]	; (80257ac <Brr_SetEmergency_P+0x4c>)
 8025770:	701a      	strb	r2, [r3, #0]

	switch(isActive)
 8025772:	79fb      	ldrb	r3, [r7, #7]
 8025774:	2b01      	cmp	r3, #1
 8025776:	d107      	bne.n	8025788 <Brr_SetEmergency_P+0x28>
	{
	case TRUE:
		Add_200_Value |= ((UINT8) ON << 1);
 8025778:	4b0c      	ldr	r3, [pc, #48]	; (80257ac <Brr_SetEmergency_P+0x4c>)
 802577a:	781b      	ldrb	r3, [r3, #0]
 802577c:	f043 0302 	orr.w	r3, r3, #2
 8025780:	b2da      	uxtb	r2, r3
 8025782:	4b0a      	ldr	r3, [pc, #40]	; (80257ac <Brr_SetEmergency_P+0x4c>)
 8025784:	701a      	strb	r2, [r3, #0]
		break;
 8025786:	e007      	b.n	8025798 <Brr_SetEmergency_P+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 1) & 0xFF));
 8025788:	4b08      	ldr	r3, [pc, #32]	; (80257ac <Brr_SetEmergency_P+0x4c>)
 802578a:	781b      	ldrb	r3, [r3, #0]
 802578c:	f023 0302 	bic.w	r3, r3, #2
 8025790:	b2da      	uxtb	r2, r3
 8025792:	4b06      	ldr	r3, [pc, #24]	; (80257ac <Brr_SetEmergency_P+0x4c>)
 8025794:	701a      	strb	r2, [r3, #0]
		break;
 8025796:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8025798:	4b05      	ldr	r3, [pc, #20]	; (80257b0 <Brr_SetEmergency_P+0x50>)
 802579a:	4a04      	ldr	r2, [pc, #16]	; (80257ac <Brr_SetEmergency_P+0x4c>)
 802579c:	7812      	ldrb	r2, [r2, #0]
 802579e:	701a      	strb	r2, [r3, #0]
}
 80257a0:	bf00      	nop
 80257a2:	370c      	adds	r7, #12
 80257a4:	46bd      	mov	sp, r7
 80257a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257aa:	4770      	bx	lr
 80257ac:	24000586 	.word	0x24000586
 80257b0:	64000200 	.word	0x64000200

080257b4 <Brr_SetEmergency_S>:


void Brr_SetEmergency_S(bool isActive)
{
 80257b4:	b480      	push	{r7}
 80257b6:	b083      	sub	sp, #12
 80257b8:	af00      	add	r7, sp, #0
 80257ba:	4603      	mov	r3, r0
 80257bc:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 80257be:	4b10      	ldr	r3, [pc, #64]	; (8025800 <Brr_SetEmergency_S+0x4c>)
 80257c0:	781a      	ldrb	r2, [r3, #0]
 80257c2:	4b0f      	ldr	r3, [pc, #60]	; (8025800 <Brr_SetEmergency_S+0x4c>)
 80257c4:	701a      	strb	r2, [r3, #0]
	switch(isActive)
 80257c6:	79fb      	ldrb	r3, [r7, #7]
 80257c8:	2b01      	cmp	r3, #1
 80257ca:	d107      	bne.n	80257dc <Brr_SetEmergency_S+0x28>
	{
	case TRUE:
		Add_200_Value  |= ((UINT8) ON << 5);
 80257cc:	4b0c      	ldr	r3, [pc, #48]	; (8025800 <Brr_SetEmergency_S+0x4c>)
 80257ce:	781b      	ldrb	r3, [r3, #0]
 80257d0:	f043 0320 	orr.w	r3, r3, #32
 80257d4:	b2da      	uxtb	r2, r3
 80257d6:	4b0a      	ldr	r3, [pc, #40]	; (8025800 <Brr_SetEmergency_S+0x4c>)
 80257d8:	701a      	strb	r2, [r3, #0]
		break;
 80257da:	e007      	b.n	80257ec <Brr_SetEmergency_S+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 5) & 0xFF));
 80257dc:	4b08      	ldr	r3, [pc, #32]	; (8025800 <Brr_SetEmergency_S+0x4c>)
 80257de:	781b      	ldrb	r3, [r3, #0]
 80257e0:	f023 0320 	bic.w	r3, r3, #32
 80257e4:	b2da      	uxtb	r2, r3
 80257e6:	4b06      	ldr	r3, [pc, #24]	; (8025800 <Brr_SetEmergency_S+0x4c>)
 80257e8:	701a      	strb	r2, [r3, #0]
		break;
 80257ea:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 80257ec:	4b05      	ldr	r3, [pc, #20]	; (8025804 <Brr_SetEmergency_S+0x50>)
 80257ee:	4a04      	ldr	r2, [pc, #16]	; (8025800 <Brr_SetEmergency_S+0x4c>)
 80257f0:	7812      	ldrb	r2, [r2, #0]
 80257f2:	701a      	strb	r2, [r3, #0]
}
 80257f4:	bf00      	nop
 80257f6:	370c      	adds	r7, #12
 80257f8:	46bd      	mov	sp, r7
 80257fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257fe:	4770      	bx	lr
 8025800:	24000586 	.word	0x24000586
 8025804:	64000200 	.word	0x64000200

08025808 <Brr_SetBreak_P>:



void Brr_SetBreak_P(bool isActive)
{
 8025808:	b480      	push	{r7}
 802580a:	b083      	sub	sp, #12
 802580c:	af00      	add	r7, sp, #0
 802580e:	4603      	mov	r3, r0
 8025810:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 8025812:	4b10      	ldr	r3, [pc, #64]	; (8025854 <Brr_SetBreak_P+0x4c>)
 8025814:	781a      	ldrb	r2, [r3, #0]
 8025816:	4b0f      	ldr	r3, [pc, #60]	; (8025854 <Brr_SetBreak_P+0x4c>)
 8025818:	701a      	strb	r2, [r3, #0]

	switch(isActive)
 802581a:	79fb      	ldrb	r3, [r7, #7]
 802581c:	2b01      	cmp	r3, #1
 802581e:	d107      	bne.n	8025830 <Brr_SetBreak_P+0x28>
	{
	case TRUE:
		Add_200_Value |= ((UINT8) ON << 3);
 8025820:	4b0c      	ldr	r3, [pc, #48]	; (8025854 <Brr_SetBreak_P+0x4c>)
 8025822:	781b      	ldrb	r3, [r3, #0]
 8025824:	f043 0308 	orr.w	r3, r3, #8
 8025828:	b2da      	uxtb	r2, r3
 802582a:	4b0a      	ldr	r3, [pc, #40]	; (8025854 <Brr_SetBreak_P+0x4c>)
 802582c:	701a      	strb	r2, [r3, #0]
		break;
 802582e:	e007      	b.n	8025840 <Brr_SetBreak_P+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 3) & 0xFF));
 8025830:	4b08      	ldr	r3, [pc, #32]	; (8025854 <Brr_SetBreak_P+0x4c>)
 8025832:	781b      	ldrb	r3, [r3, #0]
 8025834:	f023 0308 	bic.w	r3, r3, #8
 8025838:	b2da      	uxtb	r2, r3
 802583a:	4b06      	ldr	r3, [pc, #24]	; (8025854 <Brr_SetBreak_P+0x4c>)
 802583c:	701a      	strb	r2, [r3, #0]
		break;
 802583e:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8025840:	4b05      	ldr	r3, [pc, #20]	; (8025858 <Brr_SetBreak_P+0x50>)
 8025842:	4a04      	ldr	r2, [pc, #16]	; (8025854 <Brr_SetBreak_P+0x4c>)
 8025844:	7812      	ldrb	r2, [r2, #0]
 8025846:	701a      	strb	r2, [r3, #0]
}
 8025848:	bf00      	nop
 802584a:	370c      	adds	r7, #12
 802584c:	46bd      	mov	sp, r7
 802584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025852:	4770      	bx	lr
 8025854:	24000586 	.word	0x24000586
 8025858:	64000200 	.word	0x64000200

0802585c <Brr_SetBreak_S>:


void Brr_SetBreak_S(bool isActive)
{
 802585c:	b480      	push	{r7}
 802585e:	b083      	sub	sp, #12
 8025860:	af00      	add	r7, sp, #0
 8025862:	4603      	mov	r3, r0
 8025864:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 8025866:	4b10      	ldr	r3, [pc, #64]	; (80258a8 <Brr_SetBreak_S+0x4c>)
 8025868:	781a      	ldrb	r2, [r3, #0]
 802586a:	4b0f      	ldr	r3, [pc, #60]	; (80258a8 <Brr_SetBreak_S+0x4c>)
 802586c:	701a      	strb	r2, [r3, #0]
	switch(isActive)
 802586e:	79fb      	ldrb	r3, [r7, #7]
 8025870:	2b01      	cmp	r3, #1
 8025872:	d107      	bne.n	8025884 <Brr_SetBreak_S+0x28>
	{
	case TRUE:
		Add_200_Value  |= ((UINT8) ON << 7);
 8025874:	4b0c      	ldr	r3, [pc, #48]	; (80258a8 <Brr_SetBreak_S+0x4c>)
 8025876:	781b      	ldrb	r3, [r3, #0]
 8025878:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802587c:	b2da      	uxtb	r2, r3
 802587e:	4b0a      	ldr	r3, [pc, #40]	; (80258a8 <Brr_SetBreak_S+0x4c>)
 8025880:	701a      	strb	r2, [r3, #0]
		break;
 8025882:	e007      	b.n	8025894 <Brr_SetBreak_S+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 7) & 0xFF));
 8025884:	4b08      	ldr	r3, [pc, #32]	; (80258a8 <Brr_SetBreak_S+0x4c>)
 8025886:	781b      	ldrb	r3, [r3, #0]
 8025888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802588c:	b2da      	uxtb	r2, r3
 802588e:	4b06      	ldr	r3, [pc, #24]	; (80258a8 <Brr_SetBreak_S+0x4c>)
 8025890:	701a      	strb	r2, [r3, #0]
		break;
 8025892:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8025894:	4b05      	ldr	r3, [pc, #20]	; (80258ac <Brr_SetBreak_S+0x50>)
 8025896:	4a04      	ldr	r2, [pc, #16]	; (80258a8 <Brr_SetBreak_S+0x4c>)
 8025898:	7812      	ldrb	r2, [r2, #0]
 802589a:	701a      	strb	r2, [r3, #0]
}
 802589c:	bf00      	nop
 802589e:	370c      	adds	r7, #12
 80258a0:	46bd      	mov	sp, r7
 80258a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258a6:	4770      	bx	lr
 80258a8:	24000586 	.word	0x24000586
 80258ac:	64000200 	.word	0x64000200

080258b0 <Brr_ControlBarrier_P>:

void Brr_ControlBarrier_P(UINT8 nValue)
{
 80258b0:	b480      	push	{r7}
 80258b2:	b083      	sub	sp, #12
 80258b4:	af00      	add	r7, sp, #0
 80258b6:	4603      	mov	r3, r0
 80258b8:	71fb      	strb	r3, [r7, #7]

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 80258ba:	4b22      	ldr	r3, [pc, #136]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 80258bc:	4a22      	ldr	r2, [pc, #136]	; (8025948 <Brr_ControlBarrier_P+0x98>)
 80258be:	7812      	ldrb	r2, [r2, #0]
 80258c0:	701a      	strb	r2, [r3, #0]

	switch(nValue)
 80258c2:	79fb      	ldrb	r3, [r7, #7]
 80258c4:	2b02      	cmp	r3, #2
 80258c6:	d020      	beq.n	802590a <Brr_ControlBarrier_P+0x5a>
 80258c8:	2b02      	cmp	r3, #2
 80258ca:	dc2f      	bgt.n	802592c <Brr_ControlBarrier_P+0x7c>
 80258cc:	2b00      	cmp	r3, #0
 80258ce:	d002      	beq.n	80258d6 <Brr_ControlBarrier_P+0x26>
 80258d0:	2b01      	cmp	r3, #1
 80258d2:	d011      	beq.n	80258f8 <Brr_ControlBarrier_P+0x48>
 80258d4:	e02a      	b.n	802592c <Brr_ControlBarrier_P+0x7c>
	{
	case ENTRY_OPEN :
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 2) & 0xFF));
 80258d6:	4b1b      	ldr	r3, [pc, #108]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 80258d8:	781b      	ldrb	r3, [r3, #0]
 80258da:	b2db      	uxtb	r3, r3
 80258dc:	4a19      	ldr	r2, [pc, #100]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 80258de:	f023 0304 	bic.w	r3, r3, #4
 80258e2:	b2db      	uxtb	r3, r3
 80258e4:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 0) & 0xFF));
 80258e6:	4b17      	ldr	r3, [pc, #92]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 80258e8:	781b      	ldrb	r3, [r3, #0]
 80258ea:	b2db      	uxtb	r3, r3
 80258ec:	4a15      	ldr	r2, [pc, #84]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 80258ee:	f023 0301 	bic.w	r3, r3, #1
 80258f2:	b2db      	uxtb	r3, r3
 80258f4:	7013      	strb	r3, [r2, #0]
		break;
 80258f6:	e019      	b.n	802592c <Brr_ControlBarrier_P+0x7c>
	case CLOSE :
		wnBRR_OUT_CS_ADDR |= (UINT8)(1 << 0);
 80258f8:	4b12      	ldr	r3, [pc, #72]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 80258fa:	781b      	ldrb	r3, [r3, #0]
 80258fc:	b2db      	uxtb	r3, r3
 80258fe:	4a11      	ldr	r2, [pc, #68]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 8025900:	f043 0301 	orr.w	r3, r3, #1
 8025904:	b2db      	uxtb	r3, r3
 8025906:	7013      	strb	r3, [r2, #0]
		break;
 8025908:	e010      	b.n	802592c <Brr_ControlBarrier_P+0x7c>
	case EXIT_OPEN :
		wnBRR_OUT_CS_ADDR |= (UINT8)(((1 << 2) & 0xFF));
 802590a:	4b0e      	ldr	r3, [pc, #56]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 802590c:	781b      	ldrb	r3, [r3, #0]
 802590e:	b2db      	uxtb	r3, r3
 8025910:	4a0c      	ldr	r2, [pc, #48]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 8025912:	f043 0304 	orr.w	r3, r3, #4
 8025916:	b2db      	uxtb	r3, r3
 8025918:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR  &= (UINT8)((~(1 << 0) & 0xFF));
 802591a:	4b0a      	ldr	r3, [pc, #40]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 802591c:	781b      	ldrb	r3, [r3, #0]
 802591e:	b2db      	uxtb	r3, r3
 8025920:	4a08      	ldr	r2, [pc, #32]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 8025922:	f023 0301 	bic.w	r3, r3, #1
 8025926:	b2db      	uxtb	r3, r3
 8025928:	7013      	strb	r3, [r2, #0]
		break;
 802592a:	bf00      	nop
	}

	Add_200_Value = wnBRR_OUT_CS_ADDR;
 802592c:	4b05      	ldr	r3, [pc, #20]	; (8025944 <Brr_ControlBarrier_P+0x94>)
 802592e:	781b      	ldrb	r3, [r3, #0]
 8025930:	b2da      	uxtb	r2, r3
 8025932:	4b05      	ldr	r3, [pc, #20]	; (8025948 <Brr_ControlBarrier_P+0x98>)
 8025934:	701a      	strb	r2, [r3, #0]
}
 8025936:	bf00      	nop
 8025938:	370c      	adds	r7, #12
 802593a:	46bd      	mov	sp, r7
 802593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025940:	4770      	bx	lr
 8025942:	bf00      	nop
 8025944:	64000200 	.word	0x64000200
 8025948:	24000586 	.word	0x24000586

0802594c <Brr_ControlBarrier_S>:


void Brr_ControlBarrier_S(UINT8 nValue)
{
 802594c:	b480      	push	{r7}
 802594e:	b083      	sub	sp, #12
 8025950:	af00      	add	r7, sp, #0
 8025952:	4603      	mov	r3, r0
 8025954:	71fb      	strb	r3, [r7, #7]

    wnBRR_OUT_CS_ADDR = Add_200_Value;
 8025956:	4b22      	ldr	r3, [pc, #136]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 8025958:	4a22      	ldr	r2, [pc, #136]	; (80259e4 <Brr_ControlBarrier_S+0x98>)
 802595a:	7812      	ldrb	r2, [r2, #0]
 802595c:	701a      	strb	r2, [r3, #0]

	switch(nValue)
 802595e:	79fb      	ldrb	r3, [r7, #7]
 8025960:	2b02      	cmp	r3, #2
 8025962:	d020      	beq.n	80259a6 <Brr_ControlBarrier_S+0x5a>
 8025964:	2b02      	cmp	r3, #2
 8025966:	dc2f      	bgt.n	80259c8 <Brr_ControlBarrier_S+0x7c>
 8025968:	2b00      	cmp	r3, #0
 802596a:	d002      	beq.n	8025972 <Brr_ControlBarrier_S+0x26>
 802596c:	2b01      	cmp	r3, #1
 802596e:	d011      	beq.n	8025994 <Brr_ControlBarrier_S+0x48>
 8025970:	e02a      	b.n	80259c8 <Brr_ControlBarrier_S+0x7c>
	{
	case ENTRY_OPEN :
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 6) & 0xFF));
 8025972:	4b1b      	ldr	r3, [pc, #108]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 8025974:	781b      	ldrb	r3, [r3, #0]
 8025976:	b2db      	uxtb	r3, r3
 8025978:	4a19      	ldr	r2, [pc, #100]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 802597a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802597e:	b2db      	uxtb	r3, r3
 8025980:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 4) & 0xFF));
 8025982:	4b17      	ldr	r3, [pc, #92]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 8025984:	781b      	ldrb	r3, [r3, #0]
 8025986:	b2db      	uxtb	r3, r3
 8025988:	4a15      	ldr	r2, [pc, #84]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 802598a:	f023 0310 	bic.w	r3, r3, #16
 802598e:	b2db      	uxtb	r3, r3
 8025990:	7013      	strb	r3, [r2, #0]
		break;
 8025992:	e019      	b.n	80259c8 <Brr_ControlBarrier_S+0x7c>
	case CLOSE :
		wnBRR_OUT_CS_ADDR |= (UINT8)(1 << 4);
 8025994:	4b12      	ldr	r3, [pc, #72]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 8025996:	781b      	ldrb	r3, [r3, #0]
 8025998:	b2db      	uxtb	r3, r3
 802599a:	4a11      	ldr	r2, [pc, #68]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 802599c:	f043 0310 	orr.w	r3, r3, #16
 80259a0:	b2db      	uxtb	r3, r3
 80259a2:	7013      	strb	r3, [r2, #0]
		break;
 80259a4:	e010      	b.n	80259c8 <Brr_ControlBarrier_S+0x7c>
	case EXIT_OPEN :
		wnBRR_OUT_CS_ADDR |= (UINT8)(((1 << 6) & 0xFF));
 80259a6:	4b0e      	ldr	r3, [pc, #56]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 80259a8:	781b      	ldrb	r3, [r3, #0]
 80259aa:	b2db      	uxtb	r3, r3
 80259ac:	4a0c      	ldr	r2, [pc, #48]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 80259ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80259b2:	b2db      	uxtb	r3, r3
 80259b4:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR  &= (UINT8)((~(1 << 4) & 0xFF));
 80259b6:	4b0a      	ldr	r3, [pc, #40]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 80259b8:	781b      	ldrb	r3, [r3, #0]
 80259ba:	b2db      	uxtb	r3, r3
 80259bc:	4a08      	ldr	r2, [pc, #32]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 80259be:	f023 0310 	bic.w	r3, r3, #16
 80259c2:	b2db      	uxtb	r3, r3
 80259c4:	7013      	strb	r3, [r2, #0]
		break;
 80259c6:	bf00      	nop
	}

	Add_200_Value = wnBRR_OUT_CS_ADDR;
 80259c8:	4b05      	ldr	r3, [pc, #20]	; (80259e0 <Brr_ControlBarrier_S+0x94>)
 80259ca:	781b      	ldrb	r3, [r3, #0]
 80259cc:	b2da      	uxtb	r2, r3
 80259ce:	4b05      	ldr	r3, [pc, #20]	; (80259e4 <Brr_ControlBarrier_S+0x98>)
 80259d0:	701a      	strb	r2, [r3, #0]
}
 80259d2:	bf00      	nop
 80259d4:	370c      	adds	r7, #12
 80259d6:	46bd      	mov	sp, r7
 80259d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259dc:	4770      	bx	lr
 80259de:	bf00      	nop
 80259e0:	64000200 	.word	0x64000200
 80259e4:	24000586 	.word	0x24000586

080259e8 <USART3_UART_Init>:

IUART_T 	iUartTable[IUART_MAXPORT];


void USART3_UART_Init(int nBaudRate)
{
 80259e8:	b580      	push	{r7, lr}
 80259ea:	b082      	sub	sp, #8
 80259ec:	af00      	add	r7, sp, #0
 80259ee:	6078      	str	r0, [r7, #4]
	HAL_UART_DeInit(&huart3);
 80259f0:	480b      	ldr	r0, [pc, #44]	; (8025a20 <USART3_UART_Init+0x38>)
 80259f2:	f009 fe0d 	bl	802f610 <HAL_UART_DeInit>
	iUartTable[2].fIsOpen = FALSE;
 80259f6:	4b0b      	ldr	r3, [pc, #44]	; (8025a24 <USART3_UART_Init+0x3c>)
 80259f8:	2200      	movs	r2, #0
 80259fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	iUartTable[2].nBaud = nBaudRate;
 80259fe:	687b      	ldr	r3, [r7, #4]
 8025a00:	4a08      	ldr	r2, [pc, #32]	; (8025a24 <USART3_UART_Init+0x3c>)
 8025a02:	62d3      	str	r3, [r2, #44]	; 0x2c
	iUartTable[2].hUart = NULL;
 8025a04:	4b07      	ldr	r3, [pc, #28]	; (8025a24 <USART3_UART_Init+0x3c>)
 8025a06:	2200      	movs	r2, #0
 8025a08:	639a      	str	r2, [r3, #56]	; 0x38
	IUart_Open(COM3, iUartTable[COM3].nBaud);
 8025a0a:	4b06      	ldr	r3, [pc, #24]	; (8025a24 <USART3_UART_Init+0x3c>)
 8025a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025a0e:	4619      	mov	r1, r3
 8025a10:	2002      	movs	r0, #2
 8025a12:	f000 f8d3 	bl	8025bbc <IUart_Open>
}
 8025a16:	bf00      	nop
 8025a18:	3708      	adds	r7, #8
 8025a1a:	46bd      	mov	sp, r7
 8025a1c:	bd80      	pop	{r7, pc}
 8025a1e:	bf00      	nop
 8025a20:	24001db0 	.word	0x24001db0
 8025a24:	240019d8 	.word	0x240019d8

08025a28 <bsp_InitIUart>:

void bsp_InitIUart()
{
 8025a28:	b580      	push	{r7, lr}
 8025a2a:	b082      	sub	sp, #8
 8025a2c:	af00      	add	r7, sp, #0
	UINT32 	i;

	HAL_UART_DeInit(&huart1);
 8025a2e:	485d      	ldr	r0, [pc, #372]	; (8025ba4 <bsp_InitIUart+0x17c>)
 8025a30:	f009 fdee 	bl	802f610 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart2);
 8025a34:	485c      	ldr	r0, [pc, #368]	; (8025ba8 <bsp_InitIUart+0x180>)
 8025a36:	f009 fdeb 	bl	802f610 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart3);
 8025a3a:	485c      	ldr	r0, [pc, #368]	; (8025bac <bsp_InitIUart+0x184>)
 8025a3c:	f009 fde8 	bl	802f610 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart4);
 8025a40:	485b      	ldr	r0, [pc, #364]	; (8025bb0 <bsp_InitIUart+0x188>)
 8025a42:	f009 fde5 	bl	802f610 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart5);
 8025a46:	485b      	ldr	r0, [pc, #364]	; (8025bb4 <bsp_InitIUart+0x18c>)
 8025a48:	f009 fde2 	bl	802f610 <HAL_UART_DeInit>

	for ( i = 0; i < IUART_MAXPORT; i++)
 8025a4c:	2300      	movs	r3, #0
 8025a4e:	607b      	str	r3, [r7, #4]
 8025a50:	e086      	b.n	8025b60 <bsp_InitIUart+0x138>
	{
		if(i == COM3)			//
 8025a52:	687b      	ldr	r3, [r7, #4]
 8025a54:	2b02      	cmp	r3, #2
 8025a56:	d11e      	bne.n	8025a96 <bsp_InitIUart+0x6e>
		{
			iUartTable[i].fIsOpen = FALSE;
 8025a58:	4957      	ldr	r1, [pc, #348]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025a5a:	687a      	ldr	r2, [r7, #4]
 8025a5c:	4613      	mov	r3, r2
 8025a5e:	009b      	lsls	r3, r3, #2
 8025a60:	4413      	add	r3, r2
 8025a62:	009b      	lsls	r3, r3, #2
 8025a64:	440b      	add	r3, r1
 8025a66:	2200      	movs	r2, #0
 8025a68:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 57600;
 8025a6a:	4953      	ldr	r1, [pc, #332]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025a6c:	687a      	ldr	r2, [r7, #4]
 8025a6e:	4613      	mov	r3, r2
 8025a70:	009b      	lsls	r3, r3, #2
 8025a72:	4413      	add	r3, r2
 8025a74:	009b      	lsls	r3, r3, #2
 8025a76:	440b      	add	r3, r1
 8025a78:	3304      	adds	r3, #4
 8025a7a:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8025a7e:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8025a80:	494d      	ldr	r1, [pc, #308]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025a82:	687a      	ldr	r2, [r7, #4]
 8025a84:	4613      	mov	r3, r2
 8025a86:	009b      	lsls	r3, r3, #2
 8025a88:	4413      	add	r3, r2
 8025a8a:	009b      	lsls	r3, r3, #2
 8025a8c:	440b      	add	r3, r1
 8025a8e:	3310      	adds	r3, #16
 8025a90:	2200      	movs	r2, #0
 8025a92:	601a      	str	r2, [r3, #0]
 8025a94:	e061      	b.n	8025b5a <bsp_InitIUart+0x132>

		}
		else if(i == COM4)
 8025a96:	687b      	ldr	r3, [r7, #4]
 8025a98:	2b03      	cmp	r3, #3
 8025a9a:	d11e      	bne.n	8025ada <bsp_InitIUart+0xb2>
		{
			iUartTable[i].fIsOpen = FALSE;
 8025a9c:	4946      	ldr	r1, [pc, #280]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025a9e:	687a      	ldr	r2, [r7, #4]
 8025aa0:	4613      	mov	r3, r2
 8025aa2:	009b      	lsls	r3, r3, #2
 8025aa4:	4413      	add	r3, r2
 8025aa6:	009b      	lsls	r3, r3, #2
 8025aa8:	440b      	add	r3, r1
 8025aaa:	2200      	movs	r2, #0
 8025aac:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 38400;
 8025aae:	4942      	ldr	r1, [pc, #264]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025ab0:	687a      	ldr	r2, [r7, #4]
 8025ab2:	4613      	mov	r3, r2
 8025ab4:	009b      	lsls	r3, r3, #2
 8025ab6:	4413      	add	r3, r2
 8025ab8:	009b      	lsls	r3, r3, #2
 8025aba:	440b      	add	r3, r1
 8025abc:	3304      	adds	r3, #4
 8025abe:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8025ac2:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8025ac4:	493c      	ldr	r1, [pc, #240]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025ac6:	687a      	ldr	r2, [r7, #4]
 8025ac8:	4613      	mov	r3, r2
 8025aca:	009b      	lsls	r3, r3, #2
 8025acc:	4413      	add	r3, r2
 8025ace:	009b      	lsls	r3, r3, #2
 8025ad0:	440b      	add	r3, r1
 8025ad2:	3310      	adds	r3, #16
 8025ad4:	2200      	movs	r2, #0
 8025ad6:	601a      	str	r2, [r3, #0]
 8025ad8:	e03f      	b.n	8025b5a <bsp_InitIUart+0x132>
		}
		else if(i == COM5)
 8025ada:	687b      	ldr	r3, [r7, #4]
 8025adc:	2b04      	cmp	r3, #4
 8025ade:	d11e      	bne.n	8025b1e <bsp_InitIUart+0xf6>
		{
			iUartTable[i].fIsOpen = FALSE;
 8025ae0:	4935      	ldr	r1, [pc, #212]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025ae2:	687a      	ldr	r2, [r7, #4]
 8025ae4:	4613      	mov	r3, r2
 8025ae6:	009b      	lsls	r3, r3, #2
 8025ae8:	4413      	add	r3, r2
 8025aea:	009b      	lsls	r3, r3, #2
 8025aec:	440b      	add	r3, r1
 8025aee:	2200      	movs	r2, #0
 8025af0:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 38400;
 8025af2:	4931      	ldr	r1, [pc, #196]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025af4:	687a      	ldr	r2, [r7, #4]
 8025af6:	4613      	mov	r3, r2
 8025af8:	009b      	lsls	r3, r3, #2
 8025afa:	4413      	add	r3, r2
 8025afc:	009b      	lsls	r3, r3, #2
 8025afe:	440b      	add	r3, r1
 8025b00:	3304      	adds	r3, #4
 8025b02:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8025b06:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8025b08:	492b      	ldr	r1, [pc, #172]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025b0a:	687a      	ldr	r2, [r7, #4]
 8025b0c:	4613      	mov	r3, r2
 8025b0e:	009b      	lsls	r3, r3, #2
 8025b10:	4413      	add	r3, r2
 8025b12:	009b      	lsls	r3, r3, #2
 8025b14:	440b      	add	r3, r1
 8025b16:	3310      	adds	r3, #16
 8025b18:	2200      	movs	r2, #0
 8025b1a:	601a      	str	r2, [r3, #0]
 8025b1c:	e01d      	b.n	8025b5a <bsp_InitIUart+0x132>
		}
		else
		{
			iUartTable[i].fIsOpen = FALSE;
 8025b1e:	4926      	ldr	r1, [pc, #152]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025b20:	687a      	ldr	r2, [r7, #4]
 8025b22:	4613      	mov	r3, r2
 8025b24:	009b      	lsls	r3, r3, #2
 8025b26:	4413      	add	r3, r2
 8025b28:	009b      	lsls	r3, r3, #2
 8025b2a:	440b      	add	r3, r1
 8025b2c:	2200      	movs	r2, #0
 8025b2e:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 115200;
 8025b30:	4921      	ldr	r1, [pc, #132]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025b32:	687a      	ldr	r2, [r7, #4]
 8025b34:	4613      	mov	r3, r2
 8025b36:	009b      	lsls	r3, r3, #2
 8025b38:	4413      	add	r3, r2
 8025b3a:	009b      	lsls	r3, r3, #2
 8025b3c:	440b      	add	r3, r1
 8025b3e:	3304      	adds	r3, #4
 8025b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8025b44:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8025b46:	491c      	ldr	r1, [pc, #112]	; (8025bb8 <bsp_InitIUart+0x190>)
 8025b48:	687a      	ldr	r2, [r7, #4]
 8025b4a:	4613      	mov	r3, r2
 8025b4c:	009b      	lsls	r3, r3, #2
 8025b4e:	4413      	add	r3, r2
 8025b50:	009b      	lsls	r3, r3, #2
 8025b52:	440b      	add	r3, r1
 8025b54:	3310      	adds	r3, #16
 8025b56:	2200      	movs	r2, #0
 8025b58:	601a      	str	r2, [r3, #0]
	for ( i = 0; i < IUART_MAXPORT; i++)
 8025b5a:	687b      	ldr	r3, [r7, #4]
 8025b5c:	3301      	adds	r3, #1
 8025b5e:	607b      	str	r3, [r7, #4]
 8025b60:	687b      	ldr	r3, [r7, #4]
 8025b62:	2b04      	cmp	r3, #4
 8025b64:	f67f af75 	bls.w	8025a52 <bsp_InitIUart+0x2a>
		}
	}

	IUart_Open(COM1, IUART1_BAUD);
 8025b68:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8025b6c:	2000      	movs	r0, #0
 8025b6e:	f000 f825 	bl	8025bbc <IUart_Open>
	IUart_Open(COM2, IUART2_BAUD);
 8025b72:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8025b76:	2001      	movs	r0, #1
 8025b78:	f000 f820 	bl	8025bbc <IUart_Open>
	IUart_Open(COM3, IUART3_BAUD);
 8025b7c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8025b80:	2002      	movs	r0, #2
 8025b82:	f000 f81b 	bl	8025bbc <IUart_Open>
	IUart_Open(COM4, IUART4_BAUD);
 8025b86:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8025b8a:	2003      	movs	r0, #3
 8025b8c:	f000 f816 	bl	8025bbc <IUart_Open>
	IUart_Open(COM5, IUART5_BAUD);
 8025b90:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8025b94:	2004      	movs	r0, #4
 8025b96:	f000 f811 	bl	8025bbc <IUart_Open>
}
 8025b9a:	bf00      	nop
 8025b9c:	3708      	adds	r7, #8
 8025b9e:	46bd      	mov	sp, r7
 8025ba0:	bd80      	pop	{r7, pc}
 8025ba2:	bf00      	nop
 8025ba4:	24001c88 	.word	0x24001c88
 8025ba8:	24001d1c 	.word	0x24001d1c
 8025bac:	24001db0 	.word	0x24001db0
 8025bb0:	24001b60 	.word	0x24001b60
 8025bb4:	24001bf4 	.word	0x24001bf4
 8025bb8:	240019d8 	.word	0x240019d8

08025bbc <IUart_Open>:


BOOL IUart_Open(int nComPort, UINT32 nBaud)
{
 8025bbc:	b580      	push	{r7, lr}
 8025bbe:	b08a      	sub	sp, #40	; 0x28
 8025bc0:	af00      	add	r7, sp, #0
 8025bc2:	6078      	str	r0, [r7, #4]
 8025bc4:	6039      	str	r1, [r7, #0]
	IUART_T* pIUart = NULL;
 8025bc6:	2300      	movs	r3, #0
 8025bc8:	623b      	str	r3, [r7, #32]
	IRQn_Type	irqNType = USART1_IRQn;
 8025bca:	2325      	movs	r3, #37	; 0x25
 8025bcc:	84fb      	strh	r3, [r7, #38]	; 0x26

	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	2b00      	cmp	r3, #0
 8025bd2:	db02      	blt.n	8025bda <IUart_Open+0x1e>
 8025bd4:	687b      	ldr	r3, [r7, #4]
 8025bd6:	2b04      	cmp	r3, #4
 8025bd8:	dd01      	ble.n	8025bde <IUart_Open+0x22>
		return FALSE;
 8025bda:	2300      	movs	r3, #0
 8025bdc:	e0dd      	b.n	8025d9a <IUart_Open+0x1de>

	pIUart = &iUartTable[nComPort];
 8025bde:	687a      	ldr	r2, [r7, #4]
 8025be0:	4613      	mov	r3, r2
 8025be2:	009b      	lsls	r3, r3, #2
 8025be4:	4413      	add	r3, r2
 8025be6:	009b      	lsls	r3, r3, #2
 8025be8:	4a6e      	ldr	r2, [pc, #440]	; (8025da4 <IUart_Open+0x1e8>)
 8025bea:	4413      	add	r3, r2
 8025bec:	623b      	str	r3, [r7, #32]

	if (nComPort == COM1)
 8025bee:	687b      	ldr	r3, [r7, #4]
 8025bf0:	2b00      	cmp	r3, #0
 8025bf2:	d110      	bne.n	8025c16 <IUart_Open+0x5a>
	{
		pIUart->hUart = &huart1;
 8025bf4:	6a3b      	ldr	r3, [r7, #32]
 8025bf6:	4a6c      	ldr	r2, [pc, #432]	; (8025da8 <IUart_Open+0x1ec>)
 8025bf8:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf1;
 8025bfa:	6a3b      	ldr	r3, [r7, #32]
 8025bfc:	4a6b      	ldr	r2, [pc, #428]	; (8025dac <IUart_Open+0x1f0>)
 8025bfe:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf1, IUART1_RX_BUF_SIZE);
 8025c00:	6a3b      	ldr	r3, [r7, #32]
 8025c02:	68db      	ldr	r3, [r3, #12]
 8025c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025c08:	4969      	ldr	r1, [pc, #420]	; (8025db0 <IUart_Open+0x1f4>)
 8025c0a:	4618      	mov	r0, r3
 8025c0c:	f000 fa9c 	bl	8026148 <RBuf_Init>
		irqNType = USART1_IRQn;
 8025c10:	2325      	movs	r3, #37	; 0x25
 8025c12:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025c14:	e051      	b.n	8025cba <IUart_Open+0xfe>
	}
	else if (nComPort == COM2)
 8025c16:	687b      	ldr	r3, [r7, #4]
 8025c18:	2b01      	cmp	r3, #1
 8025c1a:	d110      	bne.n	8025c3e <IUart_Open+0x82>
	{
		pIUart->hUart = &huart2;
 8025c1c:	6a3b      	ldr	r3, [r7, #32]
 8025c1e:	4a65      	ldr	r2, [pc, #404]	; (8025db4 <IUart_Open+0x1f8>)
 8025c20:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf2;
 8025c22:	6a3b      	ldr	r3, [r7, #32]
 8025c24:	4a64      	ldr	r2, [pc, #400]	; (8025db8 <IUart_Open+0x1fc>)
 8025c26:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf2, IUART2_RX_BUF_SIZE);
 8025c28:	6a3b      	ldr	r3, [r7, #32]
 8025c2a:	68db      	ldr	r3, [r3, #12]
 8025c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025c30:	4962      	ldr	r1, [pc, #392]	; (8025dbc <IUart_Open+0x200>)
 8025c32:	4618      	mov	r0, r3
 8025c34:	f000 fa88 	bl	8026148 <RBuf_Init>
		irqNType = USART2_IRQn;
 8025c38:	2326      	movs	r3, #38	; 0x26
 8025c3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025c3c:	e03d      	b.n	8025cba <IUart_Open+0xfe>
	}
	else if (nComPort == COM3)
 8025c3e:	687b      	ldr	r3, [r7, #4]
 8025c40:	2b02      	cmp	r3, #2
 8025c42:	d110      	bne.n	8025c66 <IUart_Open+0xaa>
	{
		pIUart->hUart = &huart3;
 8025c44:	6a3b      	ldr	r3, [r7, #32]
 8025c46:	4a5e      	ldr	r2, [pc, #376]	; (8025dc0 <IUart_Open+0x204>)
 8025c48:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf3;
 8025c4a:	6a3b      	ldr	r3, [r7, #32]
 8025c4c:	4a5d      	ldr	r2, [pc, #372]	; (8025dc4 <IUart_Open+0x208>)
 8025c4e:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf3, IUART3_RX_BUF_SIZE);
 8025c50:	6a3b      	ldr	r3, [r7, #32]
 8025c52:	68db      	ldr	r3, [r3, #12]
 8025c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025c58:	495b      	ldr	r1, [pc, #364]	; (8025dc8 <IUart_Open+0x20c>)
 8025c5a:	4618      	mov	r0, r3
 8025c5c:	f000 fa74 	bl	8026148 <RBuf_Init>
		irqNType = USART3_IRQn;
 8025c60:	2327      	movs	r3, #39	; 0x27
 8025c62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025c64:	e029      	b.n	8025cba <IUart_Open+0xfe>
	}
	else if (nComPort == COM4)
 8025c66:	687b      	ldr	r3, [r7, #4]
 8025c68:	2b03      	cmp	r3, #3
 8025c6a:	d110      	bne.n	8025c8e <IUart_Open+0xd2>
	{
		pIUart->hUart = &huart4;
 8025c6c:	6a3b      	ldr	r3, [r7, #32]
 8025c6e:	4a57      	ldr	r2, [pc, #348]	; (8025dcc <IUart_Open+0x210>)
 8025c70:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf4;
 8025c72:	6a3b      	ldr	r3, [r7, #32]
 8025c74:	4a56      	ldr	r2, [pc, #344]	; (8025dd0 <IUart_Open+0x214>)
 8025c76:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf4, IUART4_RX_BUF_SIZE);
 8025c78:	6a3b      	ldr	r3, [r7, #32]
 8025c7a:	68db      	ldr	r3, [r3, #12]
 8025c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025c80:	4954      	ldr	r1, [pc, #336]	; (8025dd4 <IUart_Open+0x218>)
 8025c82:	4618      	mov	r0, r3
 8025c84:	f000 fa60 	bl	8026148 <RBuf_Init>
		irqNType = UART4_IRQn;
 8025c88:	2334      	movs	r3, #52	; 0x34
 8025c8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025c8c:	e015      	b.n	8025cba <IUart_Open+0xfe>
	}
	else if (nComPort == COM5)
 8025c8e:	687b      	ldr	r3, [r7, #4]
 8025c90:	2b04      	cmp	r3, #4
 8025c92:	d110      	bne.n	8025cb6 <IUart_Open+0xfa>
	{
		pIUart->hUart = &huart5;
 8025c94:	6a3b      	ldr	r3, [r7, #32]
 8025c96:	4a50      	ldr	r2, [pc, #320]	; (8025dd8 <IUart_Open+0x21c>)
 8025c98:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf5;
 8025c9a:	6a3b      	ldr	r3, [r7, #32]
 8025c9c:	4a4f      	ldr	r2, [pc, #316]	; (8025ddc <IUart_Open+0x220>)
 8025c9e:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf5, IUART5_RX_BUF_SIZE);
 8025ca0:	6a3b      	ldr	r3, [r7, #32]
 8025ca2:	68db      	ldr	r3, [r3, #12]
 8025ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025ca8:	494d      	ldr	r1, [pc, #308]	; (8025de0 <IUart_Open+0x224>)
 8025caa:	4618      	mov	r0, r3
 8025cac:	f000 fa4c 	bl	8026148 <RBuf_Init>
		irqNType = UART5_IRQn;
 8025cb0:	2335      	movs	r3, #53	; 0x35
 8025cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025cb4:	e001      	b.n	8025cba <IUart_Open+0xfe>

	}
	else
	{
		return FALSE;
 8025cb6:	2300      	movs	r3, #0
 8025cb8:	e06f      	b.n	8025d9a <IUart_Open+0x1de>
	}

	pIUart->hUart->Init.BaudRate 		= nBaud;
 8025cba:	6a3b      	ldr	r3, [r7, #32]
 8025cbc:	691b      	ldr	r3, [r3, #16]
 8025cbe:	683a      	ldr	r2, [r7, #0]
 8025cc0:	605a      	str	r2, [r3, #4]
	pIUart->hUart->Init.WordLength   	= UART_WORDLENGTH_8B;
 8025cc2:	6a3b      	ldr	r3, [r7, #32]
 8025cc4:	691b      	ldr	r3, [r3, #16]
 8025cc6:	2200      	movs	r2, #0
 8025cc8:	609a      	str	r2, [r3, #8]
	pIUart->hUart->Init.StopBits     	= UART_STOPBITS_1;
 8025cca:	6a3b      	ldr	r3, [r7, #32]
 8025ccc:	691b      	ldr	r3, [r3, #16]
 8025cce:	2200      	movs	r2, #0
 8025cd0:	60da      	str	r2, [r3, #12]
	pIUart->hUart->Init.Parity       	= UART_PARITY_NONE;
 8025cd2:	6a3b      	ldr	r3, [r7, #32]
 8025cd4:	691b      	ldr	r3, [r3, #16]
 8025cd6:	2200      	movs	r2, #0
 8025cd8:	611a      	str	r2, [r3, #16]
	pIUart->hUart->Init.Mode         	= UART_MODE_TX_RX;
 8025cda:	6a3b      	ldr	r3, [r7, #32]
 8025cdc:	691b      	ldr	r3, [r3, #16]
 8025cde:	220c      	movs	r2, #12
 8025ce0:	615a      	str	r2, [r3, #20]
	pIUart->hUart->Init.HwFlowCtl    	= UART_HWCONTROL_NONE;
 8025ce2:	6a3b      	ldr	r3, [r7, #32]
 8025ce4:	691b      	ldr	r3, [r3, #16]
 8025ce6:	2200      	movs	r2, #0
 8025ce8:	619a      	str	r2, [r3, #24]
	pIUart->hUart->Init.OverSampling 	= UART_OVERSAMPLING_16;
 8025cea:	6a3b      	ldr	r3, [r7, #32]
 8025cec:	691b      	ldr	r3, [r3, #16]
 8025cee:	2200      	movs	r2, #0
 8025cf0:	61da      	str	r2, [r3, #28]
	pIUart->hUart->Init.OneBitSampling 	= UART_ONE_BIT_SAMPLE_DISABLE;
 8025cf2:	6a3b      	ldr	r3, [r7, #32]
 8025cf4:	691b      	ldr	r3, [r3, #16]
 8025cf6:	2200      	movs	r2, #0
 8025cf8:	621a      	str	r2, [r3, #32]
	pIUart->hUart->Init.ClockPrescaler 	= UART_PRESCALER_DIV1;
 8025cfa:	6a3b      	ldr	r3, [r7, #32]
 8025cfc:	691b      	ldr	r3, [r3, #16]
 8025cfe:	2200      	movs	r2, #0
 8025d00:	625a      	str	r2, [r3, #36]	; 0x24
	pIUart->hUart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8025d02:	6a3b      	ldr	r3, [r7, #32]
 8025d04:	691b      	ldr	r3, [r3, #16]
 8025d06:	2200      	movs	r2, #0
 8025d08:	629a      	str	r2, [r3, #40]	; 0x28
	pIUart->hUart->AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_DISABLE;
 8025d0a:	6a3b      	ldr	r3, [r7, #32]
 8025d0c:	691b      	ldr	r3, [r3, #16]
 8025d0e:	2200      	movs	r2, #0
 8025d10:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_UART_Init(pIUart->hUart);
 8025d12:	6a3b      	ldr	r3, [r7, #32]
 8025d14:	691b      	ldr	r3, [r3, #16]
 8025d16:	4618      	mov	r0, r3
 8025d18:	f009 fc2a 	bl	802f570 <HAL_UART_Init>

    HAL_NVIC_SetPriority(irqNType, 0, 1);
 8025d1c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8025d20:	2201      	movs	r2, #1
 8025d22:	2100      	movs	r1, #0
 8025d24:	4618      	mov	r0, r3
 8025d26:	f004 fdd8 	bl	802a8da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNType);
 8025d2a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8025d2e:	4618      	mov	r0, r3
 8025d30:	f004 fded 	bl	802a90e <HAL_NVIC_EnableIRQ>
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR3, USART_CR3_RXFTIE);
    // Enable the UART Parity Error interrupt and Data Register Not Empty interrupt
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
	*/

    SET_BIT(pIUart->hUart->Instance->ICR, USART_ICR_TCCF);   // Set Clear transfer complete flag
 8025d34:	6a3b      	ldr	r3, [r7, #32]
 8025d36:	691b      	ldr	r3, [r3, #16]
 8025d38:	681b      	ldr	r3, [r3, #0]
 8025d3a:	6a1a      	ldr	r2, [r3, #32]
 8025d3c:	6a3b      	ldr	r3, [r7, #32]
 8025d3e:	691b      	ldr	r3, [r3, #16]
 8025d40:	681b      	ldr	r3, [r3, #0]
 8025d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025d46:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->RQR, USART_RQR_RXFRQ);  // Set Receive Data flush Request
 8025d48:	6a3b      	ldr	r3, [r7, #32]
 8025d4a:	691b      	ldr	r3, [r3, #16]
 8025d4c:	681b      	ldr	r3, [r3, #0]
 8025d4e:	699a      	ldr	r2, [r3, #24]
 8025d50:	6a3b      	ldr	r3, [r7, #32]
 8025d52:	691b      	ldr	r3, [r3, #16]
 8025d54:	681b      	ldr	r3, [r3, #0]
 8025d56:	f042 0208 	orr.w	r2, r2, #8
 8025d5a:	619a      	str	r2, [r3, #24]
    // USART_CR1_PEIE | USART_CR1_RXNEIE
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR1, USART_CR1_RXNEIE); // Set RX 수신 인터럽트
 8025d5c:	6a3b      	ldr	r3, [r7, #32]
 8025d5e:	691b      	ldr	r3, [r3, #16]
 8025d60:	681b      	ldr	r3, [r3, #0]
 8025d62:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025d64:	68fb      	ldr	r3, [r7, #12]
 8025d66:	e853 3f00 	ldrex	r3, [r3]
 8025d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8025d6c:	68bb      	ldr	r3, [r7, #8]
 8025d6e:	f043 0320 	orr.w	r3, r3, #32
 8025d72:	61fb      	str	r3, [r7, #28]
 8025d74:	6a3b      	ldr	r3, [r7, #32]
 8025d76:	691b      	ldr	r3, [r3, #16]
 8025d78:	681b      	ldr	r3, [r3, #0]
 8025d7a:	461a      	mov	r2, r3
 8025d7c:	69fb      	ldr	r3, [r7, #28]
 8025d7e:	61bb      	str	r3, [r7, #24]
 8025d80:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025d82:	6979      	ldr	r1, [r7, #20]
 8025d84:	69ba      	ldr	r2, [r7, #24]
 8025d86:	e841 2300 	strex	r3, r2, [r1]
 8025d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8025d8c:	693b      	ldr	r3, [r7, #16]
 8025d8e:	2b00      	cmp	r3, #0
 8025d90:	d1e4      	bne.n	8025d5c <IUart_Open+0x1a0>

    pIUart->fIsOpen = TRUE;
 8025d92:	6a3b      	ldr	r3, [r7, #32]
 8025d94:	2201      	movs	r2, #1
 8025d96:	701a      	strb	r2, [r3, #0]


	return TRUE;
 8025d98:	2301      	movs	r3, #1
}
 8025d9a:	4618      	mov	r0, r3
 8025d9c:	3728      	adds	r7, #40	; 0x28
 8025d9e:	46bd      	mov	sp, r7
 8025da0:	bd80      	pop	{r7, pc}
 8025da2:	bf00      	nop
 8025da4:	240019d8 	.word	0x240019d8
 8025da8:	24001c88 	.word	0x24001c88
 8025dac:	24000988 	.word	0x24000988
 8025db0:	24000588 	.word	0x24000588
 8025db4:	24001d1c 	.word	0x24001d1c
 8025db8:	24000d98 	.word	0x24000d98
 8025dbc:	24000998 	.word	0x24000998
 8025dc0:	24001db0 	.word	0x24001db0
 8025dc4:	240011a8 	.word	0x240011a8
 8025dc8:	24000da8 	.word	0x24000da8
 8025dcc:	24001b60 	.word	0x24001b60
 8025dd0:	240015b8 	.word	0x240015b8
 8025dd4:	240011b8 	.word	0x240011b8
 8025dd8:	24001bf4 	.word	0x24001bf4
 8025ddc:	240019c8 	.word	0x240019c8
 8025de0:	240015c8 	.word	0x240015c8

08025de4 <IUart_SendByte>:
	}
}


int IUart_SendByte(int nComPort, BYTE bCh)
{
 8025de4:	b480      	push	{r7}
 8025de6:	b083      	sub	sp, #12
 8025de8:	af00      	add	r7, sp, #0
 8025dea:	6078      	str	r0, [r7, #4]
 8025dec:	460b      	mov	r3, r1
 8025dee:	70fb      	strb	r3, [r7, #3]
	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 8025df0:	687b      	ldr	r3, [r7, #4]
 8025df2:	2b00      	cmp	r3, #0
 8025df4:	db02      	blt.n	8025dfc <IUart_SendByte+0x18>
 8025df6:	687b      	ldr	r3, [r7, #4]
 8025df8:	2b04      	cmp	r3, #4
 8025dfa:	dd02      	ble.n	8025e02 <IUart_SendByte+0x1e>
		return -1;
 8025dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8025e00:	e01c      	b.n	8025e3c <IUart_SendByte+0x58>

	while ((iUartTable[nComPort].hUart->Instance->ISR & UART_FLAG_TXE) == RESET);
 8025e02:	bf00      	nop
 8025e04:	4910      	ldr	r1, [pc, #64]	; (8025e48 <IUart_SendByte+0x64>)
 8025e06:	687a      	ldr	r2, [r7, #4]
 8025e08:	4613      	mov	r3, r2
 8025e0a:	009b      	lsls	r3, r3, #2
 8025e0c:	4413      	add	r3, r2
 8025e0e:	009b      	lsls	r3, r3, #2
 8025e10:	440b      	add	r3, r1
 8025e12:	3310      	adds	r3, #16
 8025e14:	681b      	ldr	r3, [r3, #0]
 8025e16:	681b      	ldr	r3, [r3, #0]
 8025e18:	69db      	ldr	r3, [r3, #28]
 8025e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025e1e:	2b00      	cmp	r3, #0
 8025e20:	d0f0      	beq.n	8025e04 <IUart_SendByte+0x20>
	iUartTable[nComPort].hUart->Instance->TDR = bCh;
 8025e22:	4909      	ldr	r1, [pc, #36]	; (8025e48 <IUart_SendByte+0x64>)
 8025e24:	687a      	ldr	r2, [r7, #4]
 8025e26:	4613      	mov	r3, r2
 8025e28:	009b      	lsls	r3, r3, #2
 8025e2a:	4413      	add	r3, r2
 8025e2c:	009b      	lsls	r3, r3, #2
 8025e2e:	440b      	add	r3, r1
 8025e30:	3310      	adds	r3, #16
 8025e32:	681b      	ldr	r3, [r3, #0]
 8025e34:	681b      	ldr	r3, [r3, #0]
 8025e36:	78fa      	ldrb	r2, [r7, #3]
 8025e38:	629a      	str	r2, [r3, #40]	; 0x28

	return bCh;
 8025e3a:	78fb      	ldrb	r3, [r7, #3]
}
 8025e3c:	4618      	mov	r0, r3
 8025e3e:	370c      	adds	r7, #12
 8025e40:	46bd      	mov	sp, r7
 8025e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e46:	4770      	bx	lr
 8025e48:	240019d8 	.word	0x240019d8

08025e4c <IUart_SendBuffer>:



int IUart_SendBuffer(int nComPort, PUCHAR pBuf, UINT16 usLen)
{
 8025e4c:	b580      	push	{r7, lr}
 8025e4e:	b086      	sub	sp, #24
 8025e50:	af00      	add	r7, sp, #0
 8025e52:	60f8      	str	r0, [r7, #12]
 8025e54:	60b9      	str	r1, [r7, #8]
 8025e56:	4613      	mov	r3, r2
 8025e58:	80fb      	strh	r3, [r7, #6]
	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 8025e5a:	68fb      	ldr	r3, [r7, #12]
 8025e5c:	2b00      	cmp	r3, #0
 8025e5e:	db02      	blt.n	8025e66 <IUart_SendBuffer+0x1a>
 8025e60:	68fb      	ldr	r3, [r7, #12]
 8025e62:	2b04      	cmp	r3, #4
 8025e64:	dd02      	ble.n	8025e6c <IUart_SendBuffer+0x20>
		return -1;
 8025e66:	f04f 33ff 	mov.w	r3, #4294967295
 8025e6a:	e012      	b.n	8025e92 <IUart_SendBuffer+0x46>

	for (int i = 0; i < usLen; i++)
 8025e6c:	2300      	movs	r3, #0
 8025e6e:	617b      	str	r3, [r7, #20]
 8025e70:	e00a      	b.n	8025e88 <IUart_SendBuffer+0x3c>
		IUart_SendByte(nComPort, pBuf[i]);
 8025e72:	697b      	ldr	r3, [r7, #20]
 8025e74:	68ba      	ldr	r2, [r7, #8]
 8025e76:	4413      	add	r3, r2
 8025e78:	781b      	ldrb	r3, [r3, #0]
 8025e7a:	4619      	mov	r1, r3
 8025e7c:	68f8      	ldr	r0, [r7, #12]
 8025e7e:	f7ff ffb1 	bl	8025de4 <IUart_SendByte>
	for (int i = 0; i < usLen; i++)
 8025e82:	697b      	ldr	r3, [r7, #20]
 8025e84:	3301      	adds	r3, #1
 8025e86:	617b      	str	r3, [r7, #20]
 8025e88:	88fb      	ldrh	r3, [r7, #6]
 8025e8a:	697a      	ldr	r2, [r7, #20]
 8025e8c:	429a      	cmp	r2, r3
 8025e8e:	dbf0      	blt.n	8025e72 <IUart_SendBuffer+0x26>

	return usLen;
 8025e90:	88fb      	ldrh	r3, [r7, #6]
}
 8025e92:	4618      	mov	r0, r3
 8025e94:	3718      	adds	r7, #24
 8025e96:	46bd      	mov	sp, r7
 8025e98:	bd80      	pop	{r7, pc}
	...

08025e9c <IUart_RecvByte>:



int IUart_RecvByte(int nComPort)
{
 8025e9c:	b580      	push	{r7, lr}
 8025e9e:	b084      	sub	sp, #16
 8025ea0:	af00      	add	r7, sp, #0
 8025ea2:	6078      	str	r0, [r7, #4]
	BYTE	bRecvByte;

	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 8025ea4:	687b      	ldr	r3, [r7, #4]
 8025ea6:	2b00      	cmp	r3, #0
 8025ea8:	db02      	blt.n	8025eb0 <IUart_RecvByte+0x14>
 8025eaa:	687b      	ldr	r3, [r7, #4]
 8025eac:	2b04      	cmp	r3, #4
 8025eae:	dd02      	ble.n	8025eb6 <IUart_RecvByte+0x1a>
		return -1;
 8025eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8025eb4:	e021      	b.n	8025efa <IUart_RecvByte+0x5e>

	if (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) > 0)
 8025eb6:	4913      	ldr	r1, [pc, #76]	; (8025f04 <IUart_RecvByte+0x68>)
 8025eb8:	687a      	ldr	r2, [r7, #4]
 8025eba:	4613      	mov	r3, r2
 8025ebc:	009b      	lsls	r3, r3, #2
 8025ebe:	4413      	add	r3, r2
 8025ec0:	009b      	lsls	r3, r3, #2
 8025ec2:	440b      	add	r3, r1
 8025ec4:	330c      	adds	r3, #12
 8025ec6:	681b      	ldr	r3, [r3, #0]
 8025ec8:	4618      	mov	r0, r3
 8025eca:	f000 fa6b 	bl	80263a4 <RBuf_Get_Full>
 8025ece:	4603      	mov	r3, r0
 8025ed0:	2b00      	cmp	r3, #0
 8025ed2:	d010      	beq.n	8025ef6 <IUart_RecvByte+0x5a>
	{
		RBuf_Read(iUartTable[nComPort].pRxRingBuf, &bRecvByte, 1);
 8025ed4:	490b      	ldr	r1, [pc, #44]	; (8025f04 <IUart_RecvByte+0x68>)
 8025ed6:	687a      	ldr	r2, [r7, #4]
 8025ed8:	4613      	mov	r3, r2
 8025eda:	009b      	lsls	r3, r3, #2
 8025edc:	4413      	add	r3, r2
 8025ede:	009b      	lsls	r3, r3, #2
 8025ee0:	440b      	add	r3, r1
 8025ee2:	330c      	adds	r3, #12
 8025ee4:	681b      	ldr	r3, [r3, #0]
 8025ee6:	f107 010f 	add.w	r1, r7, #15
 8025eea:	2201      	movs	r2, #1
 8025eec:	4618      	mov	r0, r3
 8025eee:	f000 f9b7 	bl	8026260 <RBuf_Read>
	else
	{
		return -1;
	}

	return bRecvByte;
 8025ef2:	7bfb      	ldrb	r3, [r7, #15]
 8025ef4:	e001      	b.n	8025efa <IUart_RecvByte+0x5e>
		return -1;
 8025ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8025efa:	4618      	mov	r0, r3
 8025efc:	3710      	adds	r7, #16
 8025efe:	46bd      	mov	sp, r7
 8025f00:	bd80      	pop	{r7, pc}
 8025f02:	bf00      	nop
 8025f04:	240019d8 	.word	0x240019d8

08025f08 <IUart_RecvByte_check>:


int IUart_RecvByte_check(int nComPort, BYTE *pData)
{
 8025f08:	b580      	push	{r7, lr}
 8025f0a:	b084      	sub	sp, #16
 8025f0c:	af00      	add	r7, sp, #0
 8025f0e:	6078      	str	r0, [r7, #4]
 8025f10:	6039      	str	r1, [r7, #0]
    BYTE    bRecvByte;

	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 8025f12:	687b      	ldr	r3, [r7, #4]
 8025f14:	2b00      	cmp	r3, #0
 8025f16:	db02      	blt.n	8025f1e <IUart_RecvByte_check+0x16>
 8025f18:	687b      	ldr	r3, [r7, #4]
 8025f1a:	2b04      	cmp	r3, #4
 8025f1c:	dd02      	ble.n	8025f24 <IUart_RecvByte_check+0x1c>
		return -1;
 8025f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8025f22:	e023      	b.n	8025f6c <IUart_RecvByte_check+0x64>

	if (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) > 0)
 8025f24:	4913      	ldr	r1, [pc, #76]	; (8025f74 <IUart_RecvByte_check+0x6c>)
 8025f26:	687a      	ldr	r2, [r7, #4]
 8025f28:	4613      	mov	r3, r2
 8025f2a:	009b      	lsls	r3, r3, #2
 8025f2c:	4413      	add	r3, r2
 8025f2e:	009b      	lsls	r3, r3, #2
 8025f30:	440b      	add	r3, r1
 8025f32:	330c      	adds	r3, #12
 8025f34:	681b      	ldr	r3, [r3, #0]
 8025f36:	4618      	mov	r0, r3
 8025f38:	f000 fa34 	bl	80263a4 <RBuf_Get_Full>
 8025f3c:	4603      	mov	r3, r0
 8025f3e:	2b00      	cmp	r3, #0
 8025f40:	d013      	beq.n	8025f6a <IUart_RecvByte_check+0x62>
    {
    	RBuf_Read(iUartTable[nComPort].pRxRingBuf, &bRecvByte, 1);
 8025f42:	490c      	ldr	r1, [pc, #48]	; (8025f74 <IUart_RecvByte_check+0x6c>)
 8025f44:	687a      	ldr	r2, [r7, #4]
 8025f46:	4613      	mov	r3, r2
 8025f48:	009b      	lsls	r3, r3, #2
 8025f4a:	4413      	add	r3, r2
 8025f4c:	009b      	lsls	r3, r3, #2
 8025f4e:	440b      	add	r3, r1
 8025f50:	330c      	adds	r3, #12
 8025f52:	681b      	ldr	r3, [r3, #0]
 8025f54:	f107 010f 	add.w	r1, r7, #15
 8025f58:	2201      	movs	r2, #1
 8025f5a:	4618      	mov	r0, r3
 8025f5c:	f000 f980 	bl	8026260 <RBuf_Read>

        *pData = bRecvByte;
 8025f60:	7bfa      	ldrb	r2, [r7, #15]
 8025f62:	683b      	ldr	r3, [r7, #0]
 8025f64:	701a      	strb	r2, [r3, #0]
    else
    {
        return FALSE;
    }

    return TRUE;
 8025f66:	2301      	movs	r3, #1
 8025f68:	e000      	b.n	8025f6c <IUart_RecvByte_check+0x64>
        return FALSE;
 8025f6a:	2300      	movs	r3, #0
}
 8025f6c:	4618      	mov	r0, r3
 8025f6e:	3710      	adds	r7, #16
 8025f70:	46bd      	mov	sp, r7
 8025f72:	bd80      	pop	{r7, pc}
 8025f74:	240019d8 	.word	0x240019d8

08025f78 <IUart_RecvByteBlocked>:
	return nReaded;
}


int IUart_RecvByteBlocked(int nComPort)
{
 8025f78:	b580      	push	{r7, lr}
 8025f7a:	b082      	sub	sp, #8
 8025f7c:	af00      	add	r7, sp, #0
 8025f7e:	6078      	str	r0, [r7, #4]
	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 8025f80:	687b      	ldr	r3, [r7, #4]
 8025f82:	2b00      	cmp	r3, #0
 8025f84:	db02      	blt.n	8025f8c <IUart_RecvByteBlocked+0x14>
 8025f86:	687b      	ldr	r3, [r7, #4]
 8025f88:	2b04      	cmp	r3, #4
 8025f8a:	dd02      	ble.n	8025f92 <IUart_RecvByteBlocked+0x1a>
		return -1;
 8025f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8025f90:	e013      	b.n	8025fba <IUart_RecvByteBlocked+0x42>

   // while (RBuf_Available(iUartTable[nComPort].pRxRingBuf) == 0)
    while (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) == 0)
 8025f92:	bf00      	nop
 8025f94:	490b      	ldr	r1, [pc, #44]	; (8025fc4 <IUart_RecvByteBlocked+0x4c>)
 8025f96:	687a      	ldr	r2, [r7, #4]
 8025f98:	4613      	mov	r3, r2
 8025f9a:	009b      	lsls	r3, r3, #2
 8025f9c:	4413      	add	r3, r2
 8025f9e:	009b      	lsls	r3, r3, #2
 8025fa0:	440b      	add	r3, r1
 8025fa2:	330c      	adds	r3, #12
 8025fa4:	681b      	ldr	r3, [r3, #0]
 8025fa6:	4618      	mov	r0, r3
 8025fa8:	f000 f9fc 	bl	80263a4 <RBuf_Get_Full>
 8025fac:	4603      	mov	r3, r0
 8025fae:	2b00      	cmp	r3, #0
 8025fb0:	d0f0      	beq.n	8025f94 <IUart_RecvByteBlocked+0x1c>
        ;

    return IUart_RecvByte(nComPort);
 8025fb2:	6878      	ldr	r0, [r7, #4]
 8025fb4:	f7ff ff72 	bl	8025e9c <IUart_RecvByte>
 8025fb8:	4603      	mov	r3, r0
}
 8025fba:	4618      	mov	r0, r3
 8025fbc:	3708      	adds	r7, #8
 8025fbe:	46bd      	mov	sp, r7
 8025fc0:	bd80      	pop	{r7, pc}
 8025fc2:	bf00      	nop
 8025fc4:	240019d8 	.word	0x240019d8

08025fc8 <IUartISR>:
** ==========================================================================
*/

// 내부 USART/UART 인터럽트 서비스 처리 루틴
void IUartISR(IUART_T* pIUart)
{
 8025fc8:	b580      	push	{r7, lr}
 8025fca:	b084      	sub	sp, #16
 8025fcc:	af00      	add	r7, sp, #0
 8025fce:	6078      	str	r0, [r7, #4]
    uint32_t isrflags   = READ_REG(pIUart->hUart->Instance->ISR);
 8025fd0:	687b      	ldr	r3, [r7, #4]
 8025fd2:	691b      	ldr	r3, [r3, #16]
 8025fd4:	681b      	ldr	r3, [r3, #0]
 8025fd6:	69db      	ldr	r3, [r3, #28]
 8025fd8:	60fb      	str	r3, [r7, #12]

    // 수신 인터럽트 처리
    if ((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 8025fda:	68fb      	ldr	r3, [r7, #12]
 8025fdc:	f003 0320 	and.w	r3, r3, #32
 8025fe0:	2b00      	cmp	r3, #0
 8025fe2:	d00d      	beq.n	8026000 <IUartISR+0x38>
    {
        uint8_t ch;

        ch = (uint8_t)(READ_REG(pIUart->hUart->Instance->RDR) & 0x00FF);
 8025fe4:	687b      	ldr	r3, [r7, #4]
 8025fe6:	691b      	ldr	r3, [r3, #16]
 8025fe8:	681b      	ldr	r3, [r3, #0]
 8025fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025fec:	b2db      	uxtb	r3, r3
 8025fee:	72fb      	strb	r3, [r7, #11]
        RBuf_Write(pIUart->pRxRingBuf, &ch, 1);
 8025ff0:	687b      	ldr	r3, [r7, #4]
 8025ff2:	68db      	ldr	r3, [r3, #12]
 8025ff4:	f107 010b 	add.w	r1, r7, #11
 8025ff8:	2201      	movs	r2, #1
 8025ffa:	4618      	mov	r0, r3
 8025ffc:	f000 f8c5 	bl	802618a <RBuf_Write>
    }

    // Clear Interrupt Flag
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_PEF);     // Parity Error Clear Flag
 8026000:	687b      	ldr	r3, [r7, #4]
 8026002:	691b      	ldr	r3, [r3, #16]
 8026004:	681b      	ldr	r3, [r3, #0]
 8026006:	6a1a      	ldr	r2, [r3, #32]
 8026008:	687b      	ldr	r3, [r7, #4]
 802600a:	691b      	ldr	r3, [r3, #16]
 802600c:	681b      	ldr	r3, [r3, #0]
 802600e:	f042 0201 	orr.w	r2, r2, #1
 8026012:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_FEF);     // Framing Error Clear Flag
 8026014:	687b      	ldr	r3, [r7, #4]
 8026016:	691b      	ldr	r3, [r3, #16]
 8026018:	681b      	ldr	r3, [r3, #0]
 802601a:	6a1a      	ldr	r2, [r3, #32]
 802601c:	687b      	ldr	r3, [r7, #4]
 802601e:	691b      	ldr	r3, [r3, #16]
 8026020:	681b      	ldr	r3, [r3, #0]
 8026022:	f042 0202 	orr.w	r2, r2, #2
 8026026:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_NEF);     // Noise detected Clear Flag
 8026028:	687b      	ldr	r3, [r7, #4]
 802602a:	691b      	ldr	r3, [r3, #16]
 802602c:	681b      	ldr	r3, [r3, #0]
 802602e:	6a1a      	ldr	r2, [r3, #32]
 8026030:	687b      	ldr	r3, [r7, #4]
 8026032:	691b      	ldr	r3, [r3, #16]
 8026034:	681b      	ldr	r3, [r3, #0]
 8026036:	f042 0204 	orr.w	r2, r2, #4
 802603a:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_OREF);    // OverRun Error Clear Flag
 802603c:	687b      	ldr	r3, [r7, #4]
 802603e:	691b      	ldr	r3, [r3, #16]
 8026040:	681b      	ldr	r3, [r3, #0]
 8026042:	6a1a      	ldr	r2, [r3, #32]
 8026044:	687b      	ldr	r3, [r7, #4]
 8026046:	691b      	ldr	r3, [r3, #16]
 8026048:	681b      	ldr	r3, [r3, #0]
 802604a:	f042 0208 	orr.w	r2, r2, #8
 802604e:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_IDLEF);   // IDLE line detected Clear Flag
 8026050:	687b      	ldr	r3, [r7, #4]
 8026052:	691b      	ldr	r3, [r3, #16]
 8026054:	681b      	ldr	r3, [r3, #0]
 8026056:	6a1a      	ldr	r2, [r3, #32]
 8026058:	687b      	ldr	r3, [r7, #4]
 802605a:	691b      	ldr	r3, [r3, #16]
 802605c:	681b      	ldr	r3, [r3, #0]
 802605e:	f042 0210 	orr.w	r2, r2, #16
 8026062:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_TCF);     // Transmission Complete Clear Flag
 8026064:	687b      	ldr	r3, [r7, #4]
 8026066:	691b      	ldr	r3, [r3, #16]
 8026068:	681b      	ldr	r3, [r3, #0]
 802606a:	6a1a      	ldr	r2, [r3, #32]
 802606c:	687b      	ldr	r3, [r7, #4]
 802606e:	691b      	ldr	r3, [r3, #16]
 8026070:	681b      	ldr	r3, [r3, #0]
 8026072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026076:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_LBDF);    // LIN Break Detection Clear Flag
 8026078:	687b      	ldr	r3, [r7, #4]
 802607a:	691b      	ldr	r3, [r3, #16]
 802607c:	681b      	ldr	r3, [r3, #0]
 802607e:	6a1a      	ldr	r2, [r3, #32]
 8026080:	687b      	ldr	r3, [r7, #4]
 8026082:	691b      	ldr	r3, [r3, #16]
 8026084:	681b      	ldr	r3, [r3, #0]
 8026086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802608a:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_CTSF);    // CTS Interrupt Clear Flag
 802608c:	687b      	ldr	r3, [r7, #4]
 802608e:	691b      	ldr	r3, [r3, #16]
 8026090:	681b      	ldr	r3, [r3, #0]
 8026092:	6a1a      	ldr	r2, [r3, #32]
 8026094:	687b      	ldr	r3, [r7, #4]
 8026096:	691b      	ldr	r3, [r3, #16]
 8026098:	681b      	ldr	r3, [r3, #0]
 802609a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802609e:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_CMF);     // Character Match Clear Flag
 80260a0:	687b      	ldr	r3, [r7, #4]
 80260a2:	691b      	ldr	r3, [r3, #16]
 80260a4:	681b      	ldr	r3, [r3, #0]
 80260a6:	6a1a      	ldr	r2, [r3, #32]
 80260a8:	687b      	ldr	r3, [r7, #4]
 80260aa:	691b      	ldr	r3, [r3, #16]
 80260ac:	681b      	ldr	r3, [r3, #0]
 80260ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80260b2:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_WUF);     // Wake Up from stop mode Clear Flag
 80260b4:	687b      	ldr	r3, [r7, #4]
 80260b6:	691b      	ldr	r3, [r3, #16]
 80260b8:	681b      	ldr	r3, [r3, #0]
 80260ba:	6a1a      	ldr	r2, [r3, #32]
 80260bc:	687b      	ldr	r3, [r7, #4]
 80260be:	691b      	ldr	r3, [r3, #16]
 80260c0:	681b      	ldr	r3, [r3, #0]
 80260c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80260c6:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_TXFECF);  // TXFIFO empty Clear Flag
 80260c8:	687b      	ldr	r3, [r7, #4]
 80260ca:	691b      	ldr	r3, [r3, #16]
 80260cc:	681b      	ldr	r3, [r3, #0]
 80260ce:	6a1a      	ldr	r2, [r3, #32]
 80260d0:	687b      	ldr	r3, [r7, #4]
 80260d2:	691b      	ldr	r3, [r3, #16]
 80260d4:	681b      	ldr	r3, [r3, #0]
 80260d6:	f042 0220 	orr.w	r2, r2, #32
 80260da:	621a      	str	r2, [r3, #32]
}
 80260dc:	bf00      	nop
 80260de:	3710      	adds	r7, #16
 80260e0:	46bd      	mov	sp, r7
 80260e2:	bd80      	pop	{r7, pc}

080260e4 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 80260e4:	b580      	push	{r7, lr}
 80260e6:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM1]);
 80260e8:	4802      	ldr	r0, [pc, #8]	; (80260f4 <USART1_IRQHandler+0x10>)
 80260ea:	f7ff ff6d 	bl	8025fc8 <IUartISR>
}
 80260ee:	bf00      	nop
 80260f0:	bd80      	pop	{r7, pc}
 80260f2:	bf00      	nop
 80260f4:	240019d8 	.word	0x240019d8

080260f8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80260f8:	b580      	push	{r7, lr}
 80260fa:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM2]);
 80260fc:	4802      	ldr	r0, [pc, #8]	; (8026108 <USART2_IRQHandler+0x10>)
 80260fe:	f7ff ff63 	bl	8025fc8 <IUartISR>
}
 8026102:	bf00      	nop
 8026104:	bd80      	pop	{r7, pc}
 8026106:	bf00      	nop
 8026108:	240019ec 	.word	0x240019ec

0802610c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 802610c:	b580      	push	{r7, lr}
 802610e:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM3]);
 8026110:	4802      	ldr	r0, [pc, #8]	; (802611c <USART3_IRQHandler+0x10>)
 8026112:	f7ff ff59 	bl	8025fc8 <IUartISR>
}
 8026116:	bf00      	nop
 8026118:	bd80      	pop	{r7, pc}
 802611a:	bf00      	nop
 802611c:	24001a00 	.word	0x24001a00

08026120 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8026120:	b580      	push	{r7, lr}
 8026122:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM4]);
 8026124:	4802      	ldr	r0, [pc, #8]	; (8026130 <UART4_IRQHandler+0x10>)
 8026126:	f7ff ff4f 	bl	8025fc8 <IUartISR>
}
 802612a:	bf00      	nop
 802612c:	bd80      	pop	{r7, pc}
 802612e:	bf00      	nop
 8026130:	24001a14 	.word	0x24001a14

08026134 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8026134:	b580      	push	{r7, lr}
 8026136:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM5]);
 8026138:	4802      	ldr	r0, [pc, #8]	; (8026144 <UART5_IRQHandler+0x10>)
 802613a:	f7ff ff45 	bl	8025fc8 <IUartISR>
}
 802613e:	bf00      	nop
 8026140:	bd80      	pop	{r7, pc}
 8026142:	bf00      	nop
 8026144:	24001a28 	.word	0x24001a28

08026148 <RBuf_Init>:
#define BUF_MIN(x, y)                   ((x) < (y) ? (x) : (y))
#define BUF_MAX(x, y)                   ((x) > (y) ? (x) : (y))


uint8_t RBuf_Init(RBUF_T* pRBuf, void* buffer, size_t size)
{
 8026148:	b580      	push	{r7, lr}
 802614a:	b084      	sub	sp, #16
 802614c:	af00      	add	r7, sp, #0
 802614e:	60f8      	str	r0, [r7, #12]
 8026150:	60b9      	str	r1, [r7, #8]
 8026152:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || buffer == NULL || size == 0)
 8026154:	68bb      	ldr	r3, [r7, #8]
 8026156:	2b00      	cmp	r3, #0
 8026158:	d005      	beq.n	8026166 <RBuf_Init+0x1e>
 802615a:	68bb      	ldr	r3, [r7, #8]
 802615c:	2b00      	cmp	r3, #0
 802615e:	d002      	beq.n	8026166 <RBuf_Init+0x1e>
 8026160:	687b      	ldr	r3, [r7, #4]
 8026162:	2b00      	cmp	r3, #0
 8026164:	d101      	bne.n	802616a <RBuf_Init+0x22>
    {
        return 0;
 8026166:	2300      	movs	r3, #0
 8026168:	e00b      	b.n	8026182 <RBuf_Init+0x3a>
    }

    BUF_MEMSET((void*)buffer, 0x00, sizeof(*buffer));
 802616a:	2201      	movs	r2, #1
 802616c:	2100      	movs	r1, #0
 802616e:	68b8      	ldr	r0, [r7, #8]
 8026170:	f00a fcfa 	bl	8030b68 <memset>

    pRBuf->size = size;
 8026174:	68fb      	ldr	r3, [r7, #12]
 8026176:	687a      	ldr	r2, [r7, #4]
 8026178:	605a      	str	r2, [r3, #4]
    pRBuf->buff = buffer;
 802617a:	68fb      	ldr	r3, [r7, #12]
 802617c:	68ba      	ldr	r2, [r7, #8]
 802617e:	601a      	str	r2, [r3, #0]

    return 1;
 8026180:	2301      	movs	r3, #1
}
 8026182:	4618      	mov	r0, r3
 8026184:	3710      	adds	r7, #16
 8026186:	46bd      	mov	sp, r7
 8026188:	bd80      	pop	{r7, pc}

0802618a <RBuf_Write>:
 *  btw : 기록할 데이터 크기(Bytes of write)
 *
 *  return : 기록한 데이터 크기, btw 보다 작으면 링버퍼에 공간이 없음을 의미
 */
size_t RBuf_Write(RBUF_T* pRBuf, const void* data, size_t btw)
{
 802618a:	b580      	push	{r7, lr}
 802618c:	b088      	sub	sp, #32
 802618e:	af00      	add	r7, sp, #0
 8026190:	60f8      	str	r0, [r7, #12]
 8026192:	60b9      	str	r1, [r7, #8]
 8026194:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    volatile size_t buff_w_ptr;
    const uint8_t* d = data;
 8026196:	68bb      	ldr	r3, [r7, #8]
 8026198:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(pRBuf) || data == NULL || btw == 0)
 802619a:	68fb      	ldr	r3, [r7, #12]
 802619c:	2b00      	cmp	r3, #0
 802619e:	d00d      	beq.n	80261bc <RBuf_Write+0x32>
 80261a0:	68fb      	ldr	r3, [r7, #12]
 80261a2:	681b      	ldr	r3, [r3, #0]
 80261a4:	2b00      	cmp	r3, #0
 80261a6:	d009      	beq.n	80261bc <RBuf_Write+0x32>
 80261a8:	68fb      	ldr	r3, [r7, #12]
 80261aa:	685b      	ldr	r3, [r3, #4]
 80261ac:	2b00      	cmp	r3, #0
 80261ae:	d005      	beq.n	80261bc <RBuf_Write+0x32>
 80261b0:	68bb      	ldr	r3, [r7, #8]
 80261b2:	2b00      	cmp	r3, #0
 80261b4:	d002      	beq.n	80261bc <RBuf_Write+0x32>
 80261b6:	687b      	ldr	r3, [r7, #4]
 80261b8:	2b00      	cmp	r3, #0
 80261ba:	d101      	bne.n	80261c0 <RBuf_Write+0x36>
    {
        return 0;
 80261bc:	2300      	movs	r3, #0
 80261be:	e04b      	b.n	8026258 <RBuf_Write+0xce>
    }

    /* Calculate maximum number of bytes available to write */
    free = RBuf_Get_Free(pRBuf);
 80261c0:	68f8      	ldr	r0, [r7, #12]
 80261c2:	f000 f8b8 	bl	8026336 <RBuf_Get_Free>
 80261c6:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 80261c8:	687a      	ldr	r2, [r7, #4]
 80261ca:	69bb      	ldr	r3, [r7, #24]
 80261cc:	4293      	cmp	r3, r2
 80261ce:	bf28      	it	cs
 80261d0:	4613      	movcs	r3, r2
 80261d2:	607b      	str	r3, [r7, #4]
    if (btw == 0)
 80261d4:	687b      	ldr	r3, [r7, #4]
 80261d6:	2b00      	cmp	r3, #0
 80261d8:	d101      	bne.n	80261de <RBuf_Write+0x54>
    {
        return 0;
 80261da:	2300      	movs	r3, #0
 80261dc:	e03c      	b.n	8026258 <RBuf_Write+0xce>
    }

    /* Step 1: Write data to linear part of buffer */
    buff_w_ptr = pRBuf->w;
 80261de:	68fb      	ldr	r3, [r7, #12]
 80261e0:	68db      	ldr	r3, [r3, #12]
 80261e2:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(pRBuf->size - buff_w_ptr, btw);
 80261e4:	68fb      	ldr	r3, [r7, #12]
 80261e6:	685a      	ldr	r2, [r3, #4]
 80261e8:	693b      	ldr	r3, [r7, #16]
 80261ea:	1ad3      	subs	r3, r2, r3
 80261ec:	687a      	ldr	r2, [r7, #4]
 80261ee:	429a      	cmp	r2, r3
 80261f0:	d904      	bls.n	80261fc <RBuf_Write+0x72>
 80261f2:	68fb      	ldr	r3, [r7, #12]
 80261f4:	685a      	ldr	r2, [r3, #4]
 80261f6:	693b      	ldr	r3, [r7, #16]
 80261f8:	1ad3      	subs	r3, r2, r3
 80261fa:	e000      	b.n	80261fe <RBuf_Write+0x74>
 80261fc:	687b      	ldr	r3, [r7, #4]
 80261fe:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&pRBuf->buff[buff_w_ptr], d, tocopy);
 8026200:	68fb      	ldr	r3, [r7, #12]
 8026202:	681a      	ldr	r2, [r3, #0]
 8026204:	693b      	ldr	r3, [r7, #16]
 8026206:	4413      	add	r3, r2
 8026208:	697a      	ldr	r2, [r7, #20]
 802620a:	69f9      	ldr	r1, [r7, #28]
 802620c:	4618      	mov	r0, r3
 802620e:	f00a fc9d 	bl	8030b4c <memcpy>
    buff_w_ptr += tocopy;
 8026212:	693a      	ldr	r2, [r7, #16]
 8026214:	697b      	ldr	r3, [r7, #20]
 8026216:	4413      	add	r3, r2
 8026218:	613b      	str	r3, [r7, #16]
    btw -= tocopy;
 802621a:	687a      	ldr	r2, [r7, #4]
 802621c:	697b      	ldr	r3, [r7, #20]
 802621e:	1ad3      	subs	r3, r2, r3
 8026220:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0)
 8026222:	687b      	ldr	r3, [r7, #4]
 8026224:	2b00      	cmp	r3, #0
 8026226:	d00a      	beq.n	802623e <RBuf_Write+0xb4>
    {
        BUF_MEMCPY(pRBuf->buff, &d[tocopy], btw);
 8026228:	68fb      	ldr	r3, [r7, #12]
 802622a:	6818      	ldr	r0, [r3, #0]
 802622c:	69fa      	ldr	r2, [r7, #28]
 802622e:	697b      	ldr	r3, [r7, #20]
 8026230:	4413      	add	r3, r2
 8026232:	687a      	ldr	r2, [r7, #4]
 8026234:	4619      	mov	r1, r3
 8026236:	f00a fc89 	bl	8030b4c <memcpy>
        buff_w_ptr = btw;
 802623a:	687b      	ldr	r3, [r7, #4]
 802623c:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= pRBuf->size)
 802623e:	68fb      	ldr	r3, [r7, #12]
 8026240:	685a      	ldr	r2, [r3, #4]
 8026242:	693b      	ldr	r3, [r7, #16]
 8026244:	429a      	cmp	r2, r3
 8026246:	d801      	bhi.n	802624c <RBuf_Write+0xc2>
    {
        buff_w_ptr = 0;
 8026248:	2300      	movs	r3, #0
 802624a:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    pRBuf->w = buff_w_ptr;
 802624c:	693a      	ldr	r2, [r7, #16]
 802624e:	68fb      	ldr	r3, [r7, #12]
 8026250:	60da      	str	r2, [r3, #12]

    return tocopy + btw;
 8026252:	697a      	ldr	r2, [r7, #20]
 8026254:	687b      	ldr	r3, [r7, #4]
 8026256:	4413      	add	r3, r2
}
 8026258:	4618      	mov	r0, r3
 802625a:	3720      	adds	r7, #32
 802625c:	46bd      	mov	sp, r7
 802625e:	bd80      	pop	{r7, pc}

08026260 <RBuf_Read>:
 *  btr	 : 읽을 데이터 크기(Bytes of read)
 *
 *  return : 실제 읽어온 데이터 크기
 */
size_t RBuf_Read(RBUF_T* pRBuf, void* data, size_t btr)
{
 8026260:	b580      	push	{r7, lr}
 8026262:	b088      	sub	sp, #32
 8026264:	af00      	add	r7, sp, #0
 8026266:	60f8      	str	r0, [r7, #12]
 8026268:	60b9      	str	r1, [r7, #8]
 802626a:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    volatile size_t buff_r_ptr;
    uint8_t* d = data;
 802626c:	68bb      	ldr	r3, [r7, #8]
 802626e:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(pRBuf) || data == NULL || btr == 0)
 8026270:	68fb      	ldr	r3, [r7, #12]
 8026272:	2b00      	cmp	r3, #0
 8026274:	d00d      	beq.n	8026292 <RBuf_Read+0x32>
 8026276:	68fb      	ldr	r3, [r7, #12]
 8026278:	681b      	ldr	r3, [r3, #0]
 802627a:	2b00      	cmp	r3, #0
 802627c:	d009      	beq.n	8026292 <RBuf_Read+0x32>
 802627e:	68fb      	ldr	r3, [r7, #12]
 8026280:	685b      	ldr	r3, [r3, #4]
 8026282:	2b00      	cmp	r3, #0
 8026284:	d005      	beq.n	8026292 <RBuf_Read+0x32>
 8026286:	68bb      	ldr	r3, [r7, #8]
 8026288:	2b00      	cmp	r3, #0
 802628a:	d002      	beq.n	8026292 <RBuf_Read+0x32>
 802628c:	687b      	ldr	r3, [r7, #4]
 802628e:	2b00      	cmp	r3, #0
 8026290:	d101      	bne.n	8026296 <RBuf_Read+0x36>
    {
        return 0;
 8026292:	2300      	movs	r3, #0
 8026294:	e04b      	b.n	802632e <RBuf_Read+0xce>
    }

    /* Calculate maximum number of bytes available to read */
    full = RBuf_Get_Full(pRBuf);
 8026296:	68f8      	ldr	r0, [r7, #12]
 8026298:	f000 f884 	bl	80263a4 <RBuf_Get_Full>
 802629c:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 802629e:	687a      	ldr	r2, [r7, #4]
 80262a0:	69bb      	ldr	r3, [r7, #24]
 80262a2:	4293      	cmp	r3, r2
 80262a4:	bf28      	it	cs
 80262a6:	4613      	movcs	r3, r2
 80262a8:	607b      	str	r3, [r7, #4]
    if (btr == 0)
 80262aa:	687b      	ldr	r3, [r7, #4]
 80262ac:	2b00      	cmp	r3, #0
 80262ae:	d101      	bne.n	80262b4 <RBuf_Read+0x54>
    {
        return 0;
 80262b0:	2300      	movs	r3, #0
 80262b2:	e03c      	b.n	802632e <RBuf_Read+0xce>
    }

    /* Step 1: Read data from linear part of buffer */
    buff_r_ptr = pRBuf->r;
 80262b4:	68fb      	ldr	r3, [r7, #12]
 80262b6:	689b      	ldr	r3, [r3, #8]
 80262b8:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(pRBuf->size - buff_r_ptr, btr);
 80262ba:	68fb      	ldr	r3, [r7, #12]
 80262bc:	685a      	ldr	r2, [r3, #4]
 80262be:	693b      	ldr	r3, [r7, #16]
 80262c0:	1ad3      	subs	r3, r2, r3
 80262c2:	687a      	ldr	r2, [r7, #4]
 80262c4:	429a      	cmp	r2, r3
 80262c6:	d904      	bls.n	80262d2 <RBuf_Read+0x72>
 80262c8:	68fb      	ldr	r3, [r7, #12]
 80262ca:	685a      	ldr	r2, [r3, #4]
 80262cc:	693b      	ldr	r3, [r7, #16]
 80262ce:	1ad3      	subs	r3, r2, r3
 80262d0:	e000      	b.n	80262d4 <RBuf_Read+0x74>
 80262d2:	687b      	ldr	r3, [r7, #4]
 80262d4:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &pRBuf->buff[buff_r_ptr], tocopy);
 80262d6:	68fb      	ldr	r3, [r7, #12]
 80262d8:	681a      	ldr	r2, [r3, #0]
 80262da:	693b      	ldr	r3, [r7, #16]
 80262dc:	4413      	add	r3, r2
 80262de:	697a      	ldr	r2, [r7, #20]
 80262e0:	4619      	mov	r1, r3
 80262e2:	69f8      	ldr	r0, [r7, #28]
 80262e4:	f00a fc32 	bl	8030b4c <memcpy>
    buff_r_ptr += tocopy;
 80262e8:	693a      	ldr	r2, [r7, #16]
 80262ea:	697b      	ldr	r3, [r7, #20]
 80262ec:	4413      	add	r3, r2
 80262ee:	613b      	str	r3, [r7, #16]
    btr -= tocopy;
 80262f0:	687a      	ldr	r2, [r7, #4]
 80262f2:	697b      	ldr	r3, [r7, #20]
 80262f4:	1ad3      	subs	r3, r2, r3
 80262f6:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0)
 80262f8:	687b      	ldr	r3, [r7, #4]
 80262fa:	2b00      	cmp	r3, #0
 80262fc:	d00a      	beq.n	8026314 <RBuf_Read+0xb4>
    {
        BUF_MEMCPY(&d[tocopy], pRBuf->buff, btr);
 80262fe:	69fa      	ldr	r2, [r7, #28]
 8026300:	697b      	ldr	r3, [r7, #20]
 8026302:	18d0      	adds	r0, r2, r3
 8026304:	68fb      	ldr	r3, [r7, #12]
 8026306:	681b      	ldr	r3, [r3, #0]
 8026308:	687a      	ldr	r2, [r7, #4]
 802630a:	4619      	mov	r1, r3
 802630c:	f00a fc1e 	bl	8030b4c <memcpy>
        buff_r_ptr = btr;
 8026310:	687b      	ldr	r3, [r7, #4]
 8026312:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= pRBuf->size)
 8026314:	68fb      	ldr	r3, [r7, #12]
 8026316:	685a      	ldr	r2, [r3, #4]
 8026318:	693b      	ldr	r3, [r7, #16]
 802631a:	429a      	cmp	r2, r3
 802631c:	d801      	bhi.n	8026322 <RBuf_Read+0xc2>
    {
        buff_r_ptr = 0;
 802631e:	2300      	movs	r3, #0
 8026320:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    pRBuf->r = buff_r_ptr;
 8026322:	693a      	ldr	r2, [r7, #16]
 8026324:	68fb      	ldr	r3, [r7, #12]
 8026326:	609a      	str	r2, [r3, #8]

    return tocopy + btr;
 8026328:	697a      	ldr	r2, [r7, #20]
 802632a:	687b      	ldr	r3, [r7, #4]
 802632c:	4413      	add	r3, r2
}
 802632e:	4618      	mov	r0, r3
 8026330:	3720      	adds	r7, #32
 8026332:	46bd      	mov	sp, r7
 8026334:	bd80      	pop	{r7, pc}

08026336 <RBuf_Get_Free>:

/**
 * 	링버퍼의 기록 가용 크기를 리턴한다.
 */
size_t RBuf_Get_Free(RBUF_T* pRBuf)
{
 8026336:	b480      	push	{r7}
 8026338:	b087      	sub	sp, #28
 802633a:	af00      	add	r7, sp, #0
 802633c:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(pRBuf))
 802633e:	687b      	ldr	r3, [r7, #4]
 8026340:	2b00      	cmp	r3, #0
 8026342:	d007      	beq.n	8026354 <RBuf_Get_Free+0x1e>
 8026344:	687b      	ldr	r3, [r7, #4]
 8026346:	681b      	ldr	r3, [r3, #0]
 8026348:	2b00      	cmp	r3, #0
 802634a:	d003      	beq.n	8026354 <RBuf_Get_Free+0x1e>
 802634c:	687b      	ldr	r3, [r7, #4]
 802634e:	685b      	ldr	r3, [r3, #4]
 8026350:	2b00      	cmp	r3, #0
 8026352:	d101      	bne.n	8026358 <RBuf_Get_Free+0x22>
    {
        return 0;
 8026354:	2300      	movs	r3, #0
 8026356:	e01f      	b.n	8026398 <RBuf_Get_Free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = pRBuf->w;
 8026358:	687b      	ldr	r3, [r7, #4]
 802635a:	68db      	ldr	r3, [r3, #12]
 802635c:	613b      	str	r3, [r7, #16]
    r = pRBuf->r;
 802635e:	687b      	ldr	r3, [r7, #4]
 8026360:	689b      	ldr	r3, [r3, #8]
 8026362:	60fb      	str	r3, [r7, #12]
    if (w == r)		// empty
 8026364:	693a      	ldr	r2, [r7, #16]
 8026366:	68fb      	ldr	r3, [r7, #12]
 8026368:	429a      	cmp	r2, r3
 802636a:	d103      	bne.n	8026374 <RBuf_Get_Free+0x3e>
    {
        size = pRBuf->size;
 802636c:	687b      	ldr	r3, [r7, #4]
 802636e:	685b      	ldr	r3, [r3, #4]
 8026370:	617b      	str	r3, [r7, #20]
 8026372:	e00f      	b.n	8026394 <RBuf_Get_Free+0x5e>
    }
    else if (r > w)
 8026374:	68fa      	ldr	r2, [r7, #12]
 8026376:	693b      	ldr	r3, [r7, #16]
 8026378:	429a      	cmp	r2, r3
 802637a:	d904      	bls.n	8026386 <RBuf_Get_Free+0x50>
    {
        size = r - w;
 802637c:	68fa      	ldr	r2, [r7, #12]
 802637e:	693b      	ldr	r3, [r7, #16]
 8026380:	1ad3      	subs	r3, r2, r3
 8026382:	617b      	str	r3, [r7, #20]
 8026384:	e006      	b.n	8026394 <RBuf_Get_Free+0x5e>
    }
    else
    {
        size = pRBuf->size - (w - r);
 8026386:	687b      	ldr	r3, [r7, #4]
 8026388:	685a      	ldr	r2, [r3, #4]
 802638a:	68f9      	ldr	r1, [r7, #12]
 802638c:	693b      	ldr	r3, [r7, #16]
 802638e:	1acb      	subs	r3, r1, r3
 8026390:	4413      	add	r3, r2
 8026392:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8026394:	697b      	ldr	r3, [r7, #20]
 8026396:	3b01      	subs	r3, #1
}
 8026398:	4618      	mov	r0, r3
 802639a:	371c      	adds	r7, #28
 802639c:	46bd      	mov	sp, r7
 802639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263a2:	4770      	bx	lr

080263a4 <RBuf_Get_Full>:

/**
 * 	링버퍼에 저장되어 있는 데이터 크기를 리턴(읽기용)
 */
size_t RBuf_Get_Full(RBUF_T* pRBuf)
{
 80263a4:	b480      	push	{r7}
 80263a6:	b087      	sub	sp, #28
 80263a8:	af00      	add	r7, sp, #0
 80263aa:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(pRBuf))
 80263ac:	687b      	ldr	r3, [r7, #4]
 80263ae:	2b00      	cmp	r3, #0
 80263b0:	d007      	beq.n	80263c2 <RBuf_Get_Full+0x1e>
 80263b2:	687b      	ldr	r3, [r7, #4]
 80263b4:	681b      	ldr	r3, [r3, #0]
 80263b6:	2b00      	cmp	r3, #0
 80263b8:	d003      	beq.n	80263c2 <RBuf_Get_Full+0x1e>
 80263ba:	687b      	ldr	r3, [r7, #4]
 80263bc:	685b      	ldr	r3, [r3, #4]
 80263be:	2b00      	cmp	r3, #0
 80263c0:	d101      	bne.n	80263c6 <RBuf_Get_Full+0x22>
    {
        return 0;
 80263c2:	2300      	movs	r3, #0
 80263c4:	e01d      	b.n	8026402 <RBuf_Get_Full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = pRBuf->w;
 80263c6:	687b      	ldr	r3, [r7, #4]
 80263c8:	68db      	ldr	r3, [r3, #12]
 80263ca:	613b      	str	r3, [r7, #16]
    r = pRBuf->r;
 80263cc:	687b      	ldr	r3, [r7, #4]
 80263ce:	689b      	ldr	r3, [r3, #8]
 80263d0:	60fb      	str	r3, [r7, #12]
    if (w == r)		// buffer is empty
 80263d2:	693a      	ldr	r2, [r7, #16]
 80263d4:	68fb      	ldr	r3, [r7, #12]
 80263d6:	429a      	cmp	r2, r3
 80263d8:	d102      	bne.n	80263e0 <RBuf_Get_Full+0x3c>
    {
        size = 0;
 80263da:	2300      	movs	r3, #0
 80263dc:	617b      	str	r3, [r7, #20]
 80263de:	e00f      	b.n	8026400 <RBuf_Get_Full+0x5c>
    }
    else if (w > r)
 80263e0:	693a      	ldr	r2, [r7, #16]
 80263e2:	68fb      	ldr	r3, [r7, #12]
 80263e4:	429a      	cmp	r2, r3
 80263e6:	d904      	bls.n	80263f2 <RBuf_Get_Full+0x4e>
    {
        size = w - r;
 80263e8:	693a      	ldr	r2, [r7, #16]
 80263ea:	68fb      	ldr	r3, [r7, #12]
 80263ec:	1ad3      	subs	r3, r2, r3
 80263ee:	617b      	str	r3, [r7, #20]
 80263f0:	e006      	b.n	8026400 <RBuf_Get_Full+0x5c>
    }
    else
    {
        size = pRBuf->size - (r - w);
 80263f2:	687b      	ldr	r3, [r7, #4]
 80263f4:	685a      	ldr	r2, [r3, #4]
 80263f6:	6939      	ldr	r1, [r7, #16]
 80263f8:	68fb      	ldr	r3, [r7, #12]
 80263fa:	1acb      	subs	r3, r1, r3
 80263fc:	4413      	add	r3, r2
 80263fe:	617b      	str	r3, [r7, #20]
    }
    return size;
 8026400:	697b      	ldr	r3, [r7, #20]
}
 8026402:	4618      	mov	r0, r3
 8026404:	371c      	adds	r7, #28
 8026406:	46bd      	mov	sp, r7
 8026408:	f85d 7b04 	ldr.w	r7, [sp], #4
 802640c:	4770      	bx	lr
	...

08026410 <GmTime_r>:

static struct tm tmb;


struct tm *GmTime_r(const time_t *timer, struct tm *tmbuf)
{
 8026410:	b480      	push	{r7}
 8026412:	b089      	sub	sp, #36	; 0x24
 8026414:	af00      	add	r7, sp, #0
 8026416:	6078      	str	r0, [r7, #4]
 8026418:	6039      	str	r1, [r7, #0]
	time_t 	time = *timer;
 802641a:	687b      	ldr	r3, [r7, #4]
 802641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026420:	e9c7 2304 	strd	r2, r3, [r7, #16]
	unsigned long dayclock, dayno;
	int year = EPOCH_YR;
 8026424:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8026428:	61bb      	str	r3, [r7, #24]

	dayclock = (unsigned long) time % SECS_DAY;
 802642a:	693b      	ldr	r3, [r7, #16]
 802642c:	4a8c      	ldr	r2, [pc, #560]	; (8026660 <GmTime_r+0x250>)
 802642e:	fba2 1203 	umull	r1, r2, r2, r3
 8026432:	0c12      	lsrs	r2, r2, #16
 8026434:	498b      	ldr	r1, [pc, #556]	; (8026664 <GmTime_r+0x254>)
 8026436:	fb01 f202 	mul.w	r2, r1, r2
 802643a:	1a9b      	subs	r3, r3, r2
 802643c:	60fb      	str	r3, [r7, #12]
	dayno = (unsigned long) time / SECS_DAY;
 802643e:	693b      	ldr	r3, [r7, #16]
 8026440:	4a87      	ldr	r2, [pc, #540]	; (8026660 <GmTime_r+0x250>)
 8026442:	fba2 2303 	umull	r2, r3, r2, r3
 8026446:	0c1b      	lsrs	r3, r3, #16
 8026448:	61fb      	str	r3, [r7, #28]

	tmbuf->tm_sec = dayclock % 60;
 802644a:	68f9      	ldr	r1, [r7, #12]
 802644c:	4b86      	ldr	r3, [pc, #536]	; (8026668 <GmTime_r+0x258>)
 802644e:	fba3 2301 	umull	r2, r3, r3, r1
 8026452:	095a      	lsrs	r2, r3, #5
 8026454:	4613      	mov	r3, r2
 8026456:	011b      	lsls	r3, r3, #4
 8026458:	1a9b      	subs	r3, r3, r2
 802645a:	009b      	lsls	r3, r3, #2
 802645c:	1aca      	subs	r2, r1, r3
 802645e:	683b      	ldr	r3, [r7, #0]
 8026460:	601a      	str	r2, [r3, #0]
	tmbuf->tm_min = (dayclock % 3600) / 60;
 8026462:	68fa      	ldr	r2, [r7, #12]
 8026464:	4b81      	ldr	r3, [pc, #516]	; (802666c <GmTime_r+0x25c>)
 8026466:	fba3 1302 	umull	r1, r3, r3, r2
 802646a:	0adb      	lsrs	r3, r3, #11
 802646c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8026470:	fb01 f303 	mul.w	r3, r1, r3
 8026474:	1ad3      	subs	r3, r2, r3
 8026476:	4a7c      	ldr	r2, [pc, #496]	; (8026668 <GmTime_r+0x258>)
 8026478:	fba2 2303 	umull	r2, r3, r2, r3
 802647c:	095b      	lsrs	r3, r3, #5
 802647e:	461a      	mov	r2, r3
 8026480:	683b      	ldr	r3, [r7, #0]
 8026482:	605a      	str	r2, [r3, #4]
	tmbuf->tm_hour = dayclock / 3600;
 8026484:	68fb      	ldr	r3, [r7, #12]
 8026486:	4a79      	ldr	r2, [pc, #484]	; (802666c <GmTime_r+0x25c>)
 8026488:	fba2 2303 	umull	r2, r3, r2, r3
 802648c:	0adb      	lsrs	r3, r3, #11
 802648e:	461a      	mov	r2, r3
 8026490:	683b      	ldr	r3, [r7, #0]
 8026492:	609a      	str	r2, [r3, #8]
	tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
 8026494:	69fb      	ldr	r3, [r7, #28]
 8026496:	1d1a      	adds	r2, r3, #4
 8026498:	4b75      	ldr	r3, [pc, #468]	; (8026670 <GmTime_r+0x260>)
 802649a:	fba3 1302 	umull	r1, r3, r3, r2
 802649e:	1ad1      	subs	r1, r2, r3
 80264a0:	0849      	lsrs	r1, r1, #1
 80264a2:	440b      	add	r3, r1
 80264a4:	0899      	lsrs	r1, r3, #2
 80264a6:	460b      	mov	r3, r1
 80264a8:	00db      	lsls	r3, r3, #3
 80264aa:	1a5b      	subs	r3, r3, r1
 80264ac:	1ad1      	subs	r1, r2, r3
 80264ae:	460a      	mov	r2, r1
 80264b0:	683b      	ldr	r3, [r7, #0]
 80264b2:	619a      	str	r2, [r3, #24]
	while (dayno >= (unsigned long) YEARSIZE(year))
 80264b4:	e02a      	b.n	802650c <GmTime_r+0xfc>
	{
		dayno -= YEARSIZE(year);
 80264b6:	69bb      	ldr	r3, [r7, #24]
 80264b8:	f003 0303 	and.w	r3, r3, #3
 80264bc:	2b00      	cmp	r3, #0
 80264be:	d11d      	bne.n	80264fc <GmTime_r+0xec>
 80264c0:	69ba      	ldr	r2, [r7, #24]
 80264c2:	4b6c      	ldr	r3, [pc, #432]	; (8026674 <GmTime_r+0x264>)
 80264c4:	fb83 1302 	smull	r1, r3, r3, r2
 80264c8:	1159      	asrs	r1, r3, #5
 80264ca:	17d3      	asrs	r3, r2, #31
 80264cc:	1acb      	subs	r3, r1, r3
 80264ce:	2164      	movs	r1, #100	; 0x64
 80264d0:	fb01 f303 	mul.w	r3, r1, r3
 80264d4:	1ad3      	subs	r3, r2, r3
 80264d6:	2b00      	cmp	r3, #0
 80264d8:	d10d      	bne.n	80264f6 <GmTime_r+0xe6>
 80264da:	69ba      	ldr	r2, [r7, #24]
 80264dc:	4b65      	ldr	r3, [pc, #404]	; (8026674 <GmTime_r+0x264>)
 80264de:	fb83 1302 	smull	r1, r3, r3, r2
 80264e2:	11d9      	asrs	r1, r3, #7
 80264e4:	17d3      	asrs	r3, r2, #31
 80264e6:	1acb      	subs	r3, r1, r3
 80264e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80264ec:	fb01 f303 	mul.w	r3, r1, r3
 80264f0:	1ad3      	subs	r3, r2, r3
 80264f2:	2b00      	cmp	r3, #0
 80264f4:	d102      	bne.n	80264fc <GmTime_r+0xec>
 80264f6:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80264fa:	e001      	b.n	8026500 <GmTime_r+0xf0>
 80264fc:	f240 136d 	movw	r3, #365	; 0x16d
 8026500:	69fa      	ldr	r2, [r7, #28]
 8026502:	1ad3      	subs	r3, r2, r3
 8026504:	61fb      	str	r3, [r7, #28]
		year++;
 8026506:	69bb      	ldr	r3, [r7, #24]
 8026508:	3301      	adds	r3, #1
 802650a:	61bb      	str	r3, [r7, #24]
	while (dayno >= (unsigned long) YEARSIZE(year))
 802650c:	69bb      	ldr	r3, [r7, #24]
 802650e:	f003 0303 	and.w	r3, r3, #3
 8026512:	2b00      	cmp	r3, #0
 8026514:	d11d      	bne.n	8026552 <GmTime_r+0x142>
 8026516:	69ba      	ldr	r2, [r7, #24]
 8026518:	4b56      	ldr	r3, [pc, #344]	; (8026674 <GmTime_r+0x264>)
 802651a:	fb83 1302 	smull	r1, r3, r3, r2
 802651e:	1159      	asrs	r1, r3, #5
 8026520:	17d3      	asrs	r3, r2, #31
 8026522:	1acb      	subs	r3, r1, r3
 8026524:	2164      	movs	r1, #100	; 0x64
 8026526:	fb01 f303 	mul.w	r3, r1, r3
 802652a:	1ad3      	subs	r3, r2, r3
 802652c:	2b00      	cmp	r3, #0
 802652e:	d10d      	bne.n	802654c <GmTime_r+0x13c>
 8026530:	69ba      	ldr	r2, [r7, #24]
 8026532:	4b50      	ldr	r3, [pc, #320]	; (8026674 <GmTime_r+0x264>)
 8026534:	fb83 1302 	smull	r1, r3, r3, r2
 8026538:	11d9      	asrs	r1, r3, #7
 802653a:	17d3      	asrs	r3, r2, #31
 802653c:	1acb      	subs	r3, r1, r3
 802653e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8026542:	fb01 f303 	mul.w	r3, r1, r3
 8026546:	1ad3      	subs	r3, r2, r3
 8026548:	2b00      	cmp	r3, #0
 802654a:	d102      	bne.n	8026552 <GmTime_r+0x142>
 802654c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8026550:	e001      	b.n	8026556 <GmTime_r+0x146>
 8026552:	f240 126d 	movw	r2, #365	; 0x16d
 8026556:	69fb      	ldr	r3, [r7, #28]
 8026558:	429a      	cmp	r2, r3
 802655a:	d9ac      	bls.n	80264b6 <GmTime_r+0xa6>
	}
	tmbuf->tm_year = year - YEAR0;
 802655c:	69bb      	ldr	r3, [r7, #24]
 802655e:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 8026562:	683b      	ldr	r3, [r7, #0]
 8026564:	615a      	str	r2, [r3, #20]
	tmbuf->tm_yday = dayno;
 8026566:	69fa      	ldr	r2, [r7, #28]
 8026568:	683b      	ldr	r3, [r7, #0]
 802656a:	61da      	str	r2, [r3, #28]
	tmbuf->tm_mon = 0;
 802656c:	683b      	ldr	r3, [r7, #0]
 802656e:	2200      	movs	r2, #0
 8026570:	611a      	str	r2, [r3, #16]
	while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon])
 8026572:	e035      	b.n	80265e0 <GmTime_r+0x1d0>
	{
		dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
 8026574:	69bb      	ldr	r3, [r7, #24]
 8026576:	f003 0303 	and.w	r3, r3, #3
 802657a:	2b00      	cmp	r3, #0
 802657c:	d11c      	bne.n	80265b8 <GmTime_r+0x1a8>
 802657e:	69ba      	ldr	r2, [r7, #24]
 8026580:	4b3c      	ldr	r3, [pc, #240]	; (8026674 <GmTime_r+0x264>)
 8026582:	fb83 1302 	smull	r1, r3, r3, r2
 8026586:	1159      	asrs	r1, r3, #5
 8026588:	17d3      	asrs	r3, r2, #31
 802658a:	1acb      	subs	r3, r1, r3
 802658c:	2164      	movs	r1, #100	; 0x64
 802658e:	fb01 f303 	mul.w	r3, r1, r3
 8026592:	1ad3      	subs	r3, r2, r3
 8026594:	2b00      	cmp	r3, #0
 8026596:	d10d      	bne.n	80265b4 <GmTime_r+0x1a4>
 8026598:	69ba      	ldr	r2, [r7, #24]
 802659a:	4b36      	ldr	r3, [pc, #216]	; (8026674 <GmTime_r+0x264>)
 802659c:	fb83 1302 	smull	r1, r3, r3, r2
 80265a0:	11d9      	asrs	r1, r3, #7
 80265a2:	17d3      	asrs	r3, r2, #31
 80265a4:	1acb      	subs	r3, r1, r3
 80265a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80265aa:	fb01 f303 	mul.w	r3, r1, r3
 80265ae:	1ad3      	subs	r3, r2, r3
 80265b0:	2b00      	cmp	r3, #0
 80265b2:	d101      	bne.n	80265b8 <GmTime_r+0x1a8>
 80265b4:	2201      	movs	r2, #1
 80265b6:	e000      	b.n	80265ba <GmTime_r+0x1aa>
 80265b8:	2200      	movs	r2, #0
 80265ba:	683b      	ldr	r3, [r7, #0]
 80265bc:	6919      	ldr	r1, [r3, #16]
 80265be:	482e      	ldr	r0, [pc, #184]	; (8026678 <GmTime_r+0x268>)
 80265c0:	4613      	mov	r3, r2
 80265c2:	005b      	lsls	r3, r3, #1
 80265c4:	4413      	add	r3, r2
 80265c6:	009b      	lsls	r3, r3, #2
 80265c8:	440b      	add	r3, r1
 80265ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80265ce:	461a      	mov	r2, r3
 80265d0:	69fb      	ldr	r3, [r7, #28]
 80265d2:	1a9b      	subs	r3, r3, r2
 80265d4:	61fb      	str	r3, [r7, #28]
		tmbuf->tm_mon++;
 80265d6:	683b      	ldr	r3, [r7, #0]
 80265d8:	691b      	ldr	r3, [r3, #16]
 80265da:	1c5a      	adds	r2, r3, #1
 80265dc:	683b      	ldr	r3, [r7, #0]
 80265de:	611a      	str	r2, [r3, #16]
	while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon])
 80265e0:	69bb      	ldr	r3, [r7, #24]
 80265e2:	f003 0303 	and.w	r3, r3, #3
 80265e6:	2b00      	cmp	r3, #0
 80265e8:	d11c      	bne.n	8026624 <GmTime_r+0x214>
 80265ea:	69ba      	ldr	r2, [r7, #24]
 80265ec:	4b21      	ldr	r3, [pc, #132]	; (8026674 <GmTime_r+0x264>)
 80265ee:	fb83 1302 	smull	r1, r3, r3, r2
 80265f2:	1159      	asrs	r1, r3, #5
 80265f4:	17d3      	asrs	r3, r2, #31
 80265f6:	1acb      	subs	r3, r1, r3
 80265f8:	2164      	movs	r1, #100	; 0x64
 80265fa:	fb01 f303 	mul.w	r3, r1, r3
 80265fe:	1ad3      	subs	r3, r2, r3
 8026600:	2b00      	cmp	r3, #0
 8026602:	d10d      	bne.n	8026620 <GmTime_r+0x210>
 8026604:	69ba      	ldr	r2, [r7, #24]
 8026606:	4b1b      	ldr	r3, [pc, #108]	; (8026674 <GmTime_r+0x264>)
 8026608:	fb83 1302 	smull	r1, r3, r3, r2
 802660c:	11d9      	asrs	r1, r3, #7
 802660e:	17d3      	asrs	r3, r2, #31
 8026610:	1acb      	subs	r3, r1, r3
 8026612:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8026616:	fb01 f303 	mul.w	r3, r1, r3
 802661a:	1ad3      	subs	r3, r2, r3
 802661c:	2b00      	cmp	r3, #0
 802661e:	d101      	bne.n	8026624 <GmTime_r+0x214>
 8026620:	2201      	movs	r2, #1
 8026622:	e000      	b.n	8026626 <GmTime_r+0x216>
 8026624:	2200      	movs	r2, #0
 8026626:	683b      	ldr	r3, [r7, #0]
 8026628:	6919      	ldr	r1, [r3, #16]
 802662a:	4813      	ldr	r0, [pc, #76]	; (8026678 <GmTime_r+0x268>)
 802662c:	4613      	mov	r3, r2
 802662e:	005b      	lsls	r3, r3, #1
 8026630:	4413      	add	r3, r2
 8026632:	009b      	lsls	r3, r3, #2
 8026634:	440b      	add	r3, r1
 8026636:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 802663a:	461a      	mov	r2, r3
 802663c:	69fb      	ldr	r3, [r7, #28]
 802663e:	4293      	cmp	r3, r2
 8026640:	d298      	bcs.n	8026574 <GmTime_r+0x164>
	}
	tmbuf->tm_mday = dayno + 1;
 8026642:	69fb      	ldr	r3, [r7, #28]
 8026644:	3301      	adds	r3, #1
 8026646:	461a      	mov	r2, r3
 8026648:	683b      	ldr	r3, [r7, #0]
 802664a:	60da      	str	r2, [r3, #12]
	tmbuf->tm_isdst = 0;
 802664c:	683b      	ldr	r3, [r7, #0]
 802664e:	2200      	movs	r2, #0
 8026650:	621a      	str	r2, [r3, #32]

	return tmbuf;
 8026652:	683b      	ldr	r3, [r7, #0]
}
 8026654:	4618      	mov	r0, r3
 8026656:	3724      	adds	r7, #36	; 0x24
 8026658:	46bd      	mov	sp, r7
 802665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802665e:	4770      	bx	lr
 8026660:	c22e4507 	.word	0xc22e4507
 8026664:	00015180 	.word	0x00015180
 8026668:	88888889 	.word	0x88888889
 802666c:	91a2b3c5 	.word	0x91a2b3c5
 8026670:	24924925 	.word	0x24924925
 8026674:	51eb851f 	.word	0x51eb851f
 8026678:	2400002c 	.word	0x2400002c

0802667c <GmTime>:

struct tm *GmTime(const time_t *timer)
{
 802667c:	b580      	push	{r7, lr}
 802667e:	b082      	sub	sp, #8
 8026680:	af00      	add	r7, sp, #0
 8026682:	6078      	str	r0, [r7, #4]
	return GmTime_r(timer, &tmb);
 8026684:	4904      	ldr	r1, [pc, #16]	; (8026698 <GmTime+0x1c>)
 8026686:	6878      	ldr	r0, [r7, #4]
 8026688:	f7ff fec2 	bl	8026410 <GmTime_r>
 802668c:	4603      	mov	r3, r0
}
 802668e:	4618      	mov	r0, r3
 8026690:	3708      	adds	r7, #8
 8026692:	46bd      	mov	sp, r7
 8026694:	bd80      	pop	{r7, pc}
 8026696:	bf00      	nop
 8026698:	24001a3c 	.word	0x24001a3c

0802669c <SF_RW_Byte>:
BOOL g_fDumpSF = TRUE;



uint8_t SF_RW_Byte(BYTE data)
{
 802669c:	b580      	push	{r7, lr}
 802669e:	b086      	sub	sp, #24
 80266a0:	af02      	add	r7, sp, #8
 80266a2:	4603      	mov	r3, r0
 80266a4:	71fb      	strb	r3, [r7, #7]
    BYTE read;
    HAL_SPI_TransmitReceive(SF_HANDLE, &data, &read, 1, 100);
 80266a6:	f107 020f 	add.w	r2, r7, #15
 80266aa:	1df9      	adds	r1, r7, #7
 80266ac:	2364      	movs	r3, #100	; 0x64
 80266ae:	9300      	str	r3, [sp, #0]
 80266b0:	2301      	movs	r3, #1
 80266b2:	4804      	ldr	r0, [pc, #16]	; (80266c4 <SF_RW_Byte+0x28>)
 80266b4:	f007 fe8e 	bl	802e3d4 <HAL_SPI_TransmitReceive>
    return read;
 80266b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80266ba:	4618      	mov	r0, r3
 80266bc:	3710      	adds	r7, #16
 80266be:	46bd      	mov	sp, r7
 80266c0:	bd80      	pop	{r7, pc}
 80266c2:	bf00      	nop
 80266c4:	24001a8c 	.word	0x24001a8c

080266c8 <SF_CommandAndReadN>:


void SF_CommandAndReadN(BYTE cmd, BYTE* buffer, int n)
{
 80266c8:	b590      	push	{r4, r7, lr}
 80266ca:	b087      	sub	sp, #28
 80266cc:	af00      	add	r7, sp, #0
 80266ce:	4603      	mov	r3, r0
 80266d0:	60b9      	str	r1, [r7, #8]
 80266d2:	607a      	str	r2, [r7, #4]
 80266d4:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    SF_ENABLE();
 80266d6:	2200      	movs	r2, #0
 80266d8:	2110      	movs	r1, #16
 80266da:	4811      	ldr	r0, [pc, #68]	; (8026720 <SF_CommandAndReadN+0x58>)
 80266dc:	f004 fec6 	bl	802b46c <HAL_GPIO_WritePin>

    SF_RW_Byte(cmd);
 80266e0:	7bfb      	ldrb	r3, [r7, #15]
 80266e2:	4618      	mov	r0, r3
 80266e4:	f7ff ffda 	bl	802669c <SF_RW_Byte>
    for (i = 0; i < n; i++)
 80266e8:	2300      	movs	r3, #0
 80266ea:	75fb      	strb	r3, [r7, #23]
 80266ec:	e00a      	b.n	8026704 <SF_CommandAndReadN+0x3c>
        buffer[i] = SF_RW_Byte(AT25DF_DUMMY_BYTE);
 80266ee:	7dfb      	ldrb	r3, [r7, #23]
 80266f0:	68ba      	ldr	r2, [r7, #8]
 80266f2:	18d4      	adds	r4, r2, r3
 80266f4:	2000      	movs	r0, #0
 80266f6:	f7ff ffd1 	bl	802669c <SF_RW_Byte>
 80266fa:	4603      	mov	r3, r0
 80266fc:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < n; i++)
 80266fe:	7dfb      	ldrb	r3, [r7, #23]
 8026700:	3301      	adds	r3, #1
 8026702:	75fb      	strb	r3, [r7, #23]
 8026704:	7dfb      	ldrb	r3, [r7, #23]
 8026706:	687a      	ldr	r2, [r7, #4]
 8026708:	429a      	cmp	r2, r3
 802670a:	dcf0      	bgt.n	80266ee <SF_CommandAndReadN+0x26>

    SF_DISABLE();
 802670c:	2201      	movs	r2, #1
 802670e:	2110      	movs	r1, #16
 8026710:	4803      	ldr	r0, [pc, #12]	; (8026720 <SF_CommandAndReadN+0x58>)
 8026712:	f004 feab 	bl	802b46c <HAL_GPIO_WritePin>
}
 8026716:	bf00      	nop
 8026718:	371c      	adds	r7, #28
 802671a:	46bd      	mov	sp, r7
 802671c:	bd90      	pop	{r4, r7, pc}
 802671e:	bf00      	nop
 8026720:	58020000 	.word	0x58020000

08026724 <SpiFlash_WriteEnable>:
    SF_DISABLE();
}


void SpiFlash_WriteEnable(void)
{
 8026724:	b580      	push	{r7, lr}
 8026726:	af00      	add	r7, sp, #0
    SF_ENABLE();
 8026728:	2200      	movs	r2, #0
 802672a:	2110      	movs	r1, #16
 802672c:	4806      	ldr	r0, [pc, #24]	; (8026748 <SpiFlash_WriteEnable+0x24>)
 802672e:	f004 fe9d 	bl	802b46c <HAL_GPIO_WritePin>
    SF_RW_Byte(AT25DF_WRITE_ENABLE);
 8026732:	2006      	movs	r0, #6
 8026734:	f7ff ffb2 	bl	802669c <SF_RW_Byte>
    SF_DISABLE();
 8026738:	2201      	movs	r2, #1
 802673a:	2110      	movs	r1, #16
 802673c:	4802      	ldr	r0, [pc, #8]	; (8026748 <SpiFlash_WriteEnable+0x24>)
 802673e:	f004 fe95 	bl	802b46c <HAL_GPIO_WritePin>
}
 8026742:	bf00      	nop
 8026744:	bd80      	pop	{r7, pc}
 8026746:	bf00      	nop
 8026748:	58020000 	.word	0x58020000

0802674c <SpiFlash_GlobalUnprotectSector>:
    SF_DISABLE();
}


void SpiFlash_GlobalUnprotectSector(void)
{
 802674c:	b580      	push	{r7, lr}
 802674e:	af00      	add	r7, sp, #0
    SF_ENABLE();
 8026750:	2200      	movs	r2, #0
 8026752:	2110      	movs	r1, #16
 8026754:	4807      	ldr	r0, [pc, #28]	; (8026774 <SpiFlash_GlobalUnprotectSector+0x28>)
 8026756:	f004 fe89 	bl	802b46c <HAL_GPIO_WritePin>

    SF_RW_Byte(AT25DF_WRITE_STATUS_BYTE1);
 802675a:	2001      	movs	r0, #1
 802675c:	f7ff ff9e 	bl	802669c <SF_RW_Byte>
    SF_RW_Byte(0x00);
 8026760:	2000      	movs	r0, #0
 8026762:	f7ff ff9b 	bl	802669c <SF_RW_Byte>

    SF_DISABLE();
 8026766:	2201      	movs	r2, #1
 8026768:	2110      	movs	r1, #16
 802676a:	4802      	ldr	r0, [pc, #8]	; (8026774 <SpiFlash_GlobalUnprotectSector+0x28>)
 802676c:	f004 fe7e 	bl	802b46c <HAL_GPIO_WritePin>
}
 8026770:	bf00      	nop
 8026772:	bd80      	pop	{r7, pc}
 8026774:	58020000 	.word	0x58020000

08026778 <SpiFlash_Ready>:
    return ((status2 << 8) | status1);
}


BOOL SpiFlash_Ready(DWORD dwTimeout)
{
 8026778:	b580      	push	{r7, lr}
 802677a:	b086      	sub	sp, #24
 802677c:	af00      	add	r7, sp, #0
 802677e:	6078      	str	r0, [r7, #4]
    BOOL  fTimeout = TRUE;
 8026780:	2301      	movs	r3, #1
 8026782:	617b      	str	r3, [r7, #20]
    DWORD   dwCurTick = bsp_GetTickCount();
 8026784:	f000 f8e2 	bl	802694c <bsp_GetTickCount>
 8026788:	4603      	mov	r3, r0
 802678a:	60fb      	str	r3, [r7, #12]
    BYTE    status;

    SF_ENABLE();
 802678c:	2200      	movs	r2, #0
 802678e:	2110      	movs	r1, #16
 8026790:	4815      	ldr	r0, [pc, #84]	; (80267e8 <SpiFlash_Ready+0x70>)
 8026792:	f004 fe6b 	bl	802b46c <HAL_GPIO_WritePin>
    SF_RW_Byte(AT25DF_READ_STATUS);
 8026796:	2005      	movs	r0, #5
 8026798:	f7ff ff80 	bl	802669c <SF_RW_Byte>
    do
    {
        status = SF_RW_Byte(0xFF);
 802679c:	20ff      	movs	r0, #255	; 0xff
 802679e:	f7ff ff7d 	bl	802669c <SF_RW_Byte>
 80267a2:	4603      	mov	r3, r0
 80267a4:	74fb      	strb	r3, [r7, #19]
        if (!(status & 0x01))   // device is ready
 80267a6:	7cfb      	ldrb	r3, [r7, #19]
 80267a8:	f003 0301 	and.w	r3, r3, #1
 80267ac:	2b00      	cmp	r3, #0
 80267ae:	d102      	bne.n	80267b6 <SpiFlash_Ready+0x3e>
        {
            // printf("SPI Flash : Status[%02X]\n", status);
            fTimeout = FALSE;
 80267b0:	2300      	movs	r3, #0
 80267b2:	617b      	str	r3, [r7, #20]
            break;
 80267b4:	e008      	b.n	80267c8 <SpiFlash_Ready+0x50>
        }

    } while (!IsTimeoutMs(&dwCurTick, dwTimeout));
 80267b6:	f107 030c 	add.w	r3, r7, #12
 80267ba:	6879      	ldr	r1, [r7, #4]
 80267bc:	4618      	mov	r0, r3
 80267be:	f000 f9bd 	bl	8026b3c <IsTimeoutMs>
 80267c2:	4603      	mov	r3, r0
 80267c4:	2b00      	cmp	r3, #0
 80267c6:	d0e9      	beq.n	802679c <SpiFlash_Ready+0x24>
    SF_DISABLE();
 80267c8:	2201      	movs	r2, #1
 80267ca:	2110      	movs	r1, #16
 80267cc:	4806      	ldr	r0, [pc, #24]	; (80267e8 <SpiFlash_Ready+0x70>)
 80267ce:	f004 fe4d 	bl	802b46c <HAL_GPIO_WritePin>

    return (fTimeout == FALSE);
 80267d2:	697b      	ldr	r3, [r7, #20]
 80267d4:	2b00      	cmp	r3, #0
 80267d6:	bf0c      	ite	eq
 80267d8:	2301      	moveq	r3, #1
 80267da:	2300      	movne	r3, #0
 80267dc:	b2db      	uxtb	r3, r3
}
 80267de:	4618      	mov	r0, r3
 80267e0:	3718      	adds	r7, #24
 80267e2:	46bd      	mov	sp, r7
 80267e4:	bd80      	pop	{r7, pc}
 80267e6:	bf00      	nop
 80267e8:	58020000 	.word	0x58020000

080267ec <SpiFlash_ReadInfo>:
}



DWORD SpiFlash_ReadInfo(void)
{
 80267ec:	b580      	push	{r7, lr}
 80267ee:	b082      	sub	sp, #8
 80267f0:	af00      	add	r7, sp, #0
    BYTE    bInfo[4];
    DWORD   retInfo;

    SF_CommandAndReadN(AT25DF_READ_INFO, bInfo, 3);
 80267f2:	463b      	mov	r3, r7
 80267f4:	2203      	movs	r2, #3
 80267f6:	4619      	mov	r1, r3
 80267f8:	209f      	movs	r0, #159	; 0x9f
 80267fa:	f7ff ff65 	bl	80266c8 <SF_CommandAndReadN>

    retInfo = ((bInfo[0] << 16) | (bInfo[1] << 8) | bInfo[2]);
 80267fe:	783b      	ldrb	r3, [r7, #0]
 8026800:	041a      	lsls	r2, r3, #16
 8026802:	787b      	ldrb	r3, [r7, #1]
 8026804:	021b      	lsls	r3, r3, #8
 8026806:	4313      	orrs	r3, r2
 8026808:	78ba      	ldrb	r2, [r7, #2]
 802680a:	4313      	orrs	r3, r2
 802680c:	607b      	str	r3, [r7, #4]

    printf("SpiFlash Info %#lx\n", retInfo);
 802680e:	6879      	ldr	r1, [r7, #4]
 8026810:	4805      	ldr	r0, [pc, #20]	; (8026828 <SpiFlash_ReadInfo+0x3c>)
 8026812:	f00a fa91 	bl	8030d38 <iprintf>

    g_FlashId = retInfo;
 8026816:	4a05      	ldr	r2, [pc, #20]	; (802682c <SpiFlash_ReadInfo+0x40>)
 8026818:	687b      	ldr	r3, [r7, #4]
 802681a:	6013      	str	r3, [r2, #0]

    return (retInfo);
 802681c:	687b      	ldr	r3, [r7, #4]
}
 802681e:	4618      	mov	r0, r3
 8026820:	3708      	adds	r7, #8
 8026822:	46bd      	mov	sp, r7
 8026824:	bd80      	pop	{r7, pc}
 8026826:	bf00      	nop
 8026828:	08032c10 	.word	0x08032c10
 802682c:	24001a60 	.word	0x24001a60

08026830 <SpiFlash_Init>:


BOOL SpiFlash_Init(void)
{
 8026830:	b580      	push	{r7, lr}
 8026832:	b082      	sub	sp, #8
 8026834:	af00      	add	r7, sp, #0
    DWORD info;

    // SpiFlash_ResetAndResume();
    SpiFlash_WriteEnable();
 8026836:	f7ff ff75 	bl	8026724 <SpiFlash_WriteEnable>
    SpiFlash_GlobalUnprotectSector();
 802683a:	f7ff ff87 	bl	802674c <SpiFlash_GlobalUnprotectSector>
    SpiFlash_Ready(5);
 802683e:	2005      	movs	r0, #5
 8026840:	f7ff ff9a 	bl	8026778 <SpiFlash_Ready>

    info = SpiFlash_ReadInfo();
 8026844:	f7ff ffd2 	bl	80267ec <SpiFlash_ReadInfo>
 8026848:	6078      	str	r0, [r7, #4]
    if (info == ID_AT25DF641)
 802684a:	687b      	ldr	r3, [r7, #4]
 802684c:	4a07      	ldr	r2, [pc, #28]	; (802686c <SpiFlash_Init+0x3c>)
 802684e:	4293      	cmp	r3, r2
 8026850:	d104      	bne.n	802685c <SpiFlash_Init+0x2c>
    {
        printf("SPI Flash is normal\n");
 8026852:	4807      	ldr	r0, [pc, #28]	; (8026870 <SpiFlash_Init+0x40>)
 8026854:	f00a fb0c 	bl	8030e70 <puts>
        return (TRUE);
 8026858:	2301      	movs	r3, #1
 802685a:	e003      	b.n	8026864 <SpiFlash_Init+0x34>
    }
    else
    {
        printf("SPI Flash is Abnormal\n");
 802685c:	4805      	ldr	r0, [pc, #20]	; (8026874 <SpiFlash_Init+0x44>)
 802685e:	f00a fb07 	bl	8030e70 <puts>
        return (FALSE);
 8026862:	2300      	movs	r3, #0
    }
}
 8026864:	4618      	mov	r0, r3
 8026866:	3708      	adds	r7, #8
 8026868:	46bd      	mov	sp, r7
 802686a:	bd80      	pop	{r7, pc}
 802686c:	001f4800 	.word	0x001f4800
 8026870:	08032c24 	.word	0x08032c24
 8026874:	08032c38 	.word	0x08032c38

08026878 <bsp_InitSpiFlash>:
    return (0);
}


BOOL bsp_InitSpiFlash(void)
{
 8026878:	b580      	push	{r7, lr}
 802687a:	af00      	add	r7, sp, #0
    SF_DISABLE();
 802687c:	2201      	movs	r2, #1
 802687e:	2110      	movs	r1, #16
 8026880:	482a      	ldr	r0, [pc, #168]	; (802692c <bsp_InitSpiFlash+0xb4>)
 8026882:	f004 fdf3 	bl	802b46c <HAL_GPIO_WritePin>

    hspi1.Instance = SPI1;
 8026886:	4b2a      	ldr	r3, [pc, #168]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 8026888:	4a2a      	ldr	r2, [pc, #168]	; (8026934 <bsp_InitSpiFlash+0xbc>)
 802688a:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 802688c:	4b28      	ldr	r3, [pc, #160]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 802688e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8026892:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8026894:	4b26      	ldr	r3, [pc, #152]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 8026896:	2200      	movs	r2, #0
 8026898:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 802689a:	4b25      	ldr	r3, [pc, #148]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 802689c:	2207      	movs	r2, #7
 802689e:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80268a0:	4b23      	ldr	r3, [pc, #140]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268a2:	2200      	movs	r2, #0
 80268a4:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80268a6:	4b22      	ldr	r3, [pc, #136]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268a8:	2200      	movs	r2, #0
 80268aa:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80268ac:	4b20      	ldr	r3, [pc, #128]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80268b2:	619a      	str	r2, [r3, #24]
    // hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;     // 60Mhz
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80268b4:	4b1e      	ldr	r3, [pc, #120]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80268ba:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80268bc:	4b1c      	ldr	r3, [pc, #112]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268be:	2200      	movs	r2, #0
 80268c0:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80268c2:	4b1b      	ldr	r3, [pc, #108]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268c4:	2200      	movs	r2, #0
 80268c6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80268c8:	4b19      	ldr	r3, [pc, #100]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268ca:	2200      	movs	r2, #0
 80268cc:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 0x0;
 80268ce:	4b18      	ldr	r3, [pc, #96]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268d0:	2200      	movs	r2, #0
 80268d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80268d4:	4b16      	ldr	r3, [pc, #88]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268d6:	2200      	movs	r2, #0
 80268d8:	635a      	str	r2, [r3, #52]	; 0x34
    hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80268da:	4b15      	ldr	r3, [pc, #84]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268dc:	2200      	movs	r2, #0
 80268de:	639a      	str	r2, [r3, #56]	; 0x38
    hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80268e0:	4b13      	ldr	r3, [pc, #76]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268e2:	2200      	movs	r2, #0
 80268e4:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80268e6:	4b12      	ldr	r3, [pc, #72]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268e8:	2200      	movs	r2, #0
 80268ea:	641a      	str	r2, [r3, #64]	; 0x40
    hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80268ec:	4b10      	ldr	r3, [pc, #64]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268ee:	2200      	movs	r2, #0
 80268f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_02CYCLE;
 80268f2:	4b0f      	ldr	r3, [pc, #60]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268f4:	2202      	movs	r2, #2
 80268f6:	649a      	str	r2, [r3, #72]	; 0x48
    hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 80268f8:	4b0d      	ldr	r3, [pc, #52]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 80268fa:	2220      	movs	r2, #32
 80268fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_ENABLE;
 80268fe:	4b0c      	ldr	r3, [pc, #48]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 8026900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8026904:	651a      	str	r2, [r3, #80]	; 0x50
    hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8026906:	4b0a      	ldr	r3, [pc, #40]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 8026908:	2200      	movs	r2, #0
 802690a:	655a      	str	r2, [r3, #84]	; 0x54
    hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 802690c:	4b08      	ldr	r3, [pc, #32]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 802690e:	2200      	movs	r2, #0
 8026910:	659a      	str	r2, [r3, #88]	; 0x58
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8026912:	4807      	ldr	r0, [pc, #28]	; (8026930 <bsp_InitSpiFlash+0xb8>)
 8026914:	f007 fc3a 	bl	802e18c <HAL_SPI_Init>
 8026918:	4603      	mov	r3, r0
 802691a:	2b00      	cmp	r3, #0
 802691c:	d001      	beq.n	8026922 <bsp_InitSpiFlash+0xaa>
    {
        return FALSE;
 802691e:	2300      	movs	r3, #0
 8026920:	e002      	b.n	8026928 <bsp_InitSpiFlash+0xb0>
    }

    return (SpiFlash_Init());
 8026922:	f7ff ff85 	bl	8026830 <SpiFlash_Init>
 8026926:	4603      	mov	r3, r0
}
 8026928:	4618      	mov	r0, r3
 802692a:	bd80      	pop	{r7, pc}
 802692c:	58020000 	.word	0x58020000
 8026930:	24001a8c 	.word	0x24001a8c
 8026934:	40013000 	.word	0x40013000

08026938 <bsp_InitTimer>:
extern bool bDip_SW_Flag;

extern dword exiAddr[5];

void bsp_InitTimer(void)
{
 8026938:	b580      	push	{r7, lr}
 802693a:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim7);
 802693c:	4802      	ldr	r0, [pc, #8]	; (8026948 <bsp_InitTimer+0x10>)
 802693e:	f008 fb11 	bl	802ef64 <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start_IT(&htim1);
}
 8026942:	bf00      	nop
 8026944:	bd80      	pop	{r7, pc}
 8026946:	bf00      	nop
 8026948:	24001b14 	.word	0x24001b14

0802694c <bsp_GetTickCount>:

DWORD bsp_GetTickCount(void)
{
 802694c:	b480      	push	{r7}
 802694e:	af00      	add	r7, sp, #0
    return g_TickCount;
 8026950:	4b03      	ldr	r3, [pc, #12]	; (8026960 <bsp_GetTickCount+0x14>)
 8026952:	681b      	ldr	r3, [r3, #0]
}
 8026954:	4618      	mov	r0, r3
 8026956:	46bd      	mov	sp, r7
 8026958:	f85d 7b04 	ldr.w	r7, [sp], #4
 802695c:	4770      	bx	lr
 802695e:	bf00      	nop
 8026960:	24001a64 	.word	0x24001a64

08026964 <bsp_GetTime>:


time_t bsp_GetTime(void)
{
 8026964:	b480      	push	{r7}
 8026966:	af00      	add	r7, sp, #0
    return g_Epoch;
 8026968:	4b04      	ldr	r3, [pc, #16]	; (802697c <bsp_GetTime+0x18>)
 802696a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 802696e:	4610      	mov	r0, r2
 8026970:	4619      	mov	r1, r3
 8026972:	46bd      	mov	sp, r7
 8026974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026978:	4770      	bx	lr
 802697a:	bf00      	nop
 802697c:	24001a68 	.word	0x24001a68

08026980 <bsp_GetTimeEx>:


UINT64 bsp_GetTimeEx(void)
{
 8026980:	b480      	push	{r7}
 8026982:	af00      	add	r7, sp, #0
    return g_exTimeTick;
 8026984:	4b04      	ldr	r3, [pc, #16]	; (8026998 <bsp_GetTimeEx+0x18>)
 8026986:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 802698a:	4610      	mov	r0, r2
 802698c:	4619      	mov	r1, r3
 802698e:	46bd      	mov	sp, r7
 8026990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026994:	4770      	bx	lr
 8026996:	bf00      	nop
 8026998:	24001a70 	.word	0x24001a70

0802699c <bsp_TimCallback>:
**
*/
//BYTE gbDipSW, gbOldDipSW;

void bsp_TimCallback(void)
{
 802699c:	b5b0      	push	{r4, r5, r7, lr}
 802699e:	b082      	sub	sp, #8
 80269a0:	af02      	add	r7, sp, #8
    static UINT16   sCount = 0;
    static UINT32   s5Count = 0;

    g_TickCount++;
 80269a2:	4b4f      	ldr	r3, [pc, #316]	; (8026ae0 <bsp_TimCallback+0x144>)
 80269a4:	681b      	ldr	r3, [r3, #0]
 80269a6:	3301      	adds	r3, #1
 80269a8:	4a4d      	ldr	r2, [pc, #308]	; (8026ae0 <bsp_TimCallback+0x144>)
 80269aa:	6013      	str	r3, [r2, #0]
    g_exTimeTick++;
 80269ac:	4b4d      	ldr	r3, [pc, #308]	; (8026ae4 <bsp_TimCallback+0x148>)
 80269ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269b2:	1c50      	adds	r0, r2, #1
 80269b4:	f143 0100 	adc.w	r1, r3, #0
 80269b8:	4b4a      	ldr	r3, [pc, #296]	; (8026ae4 <bsp_TimCallback+0x148>)
 80269ba:	e9c3 0100 	strd	r0, r1, [r3]
    if (s_Per1msCallBack != NULL)
 80269be:	4b4a      	ldr	r3, [pc, #296]	; (8026ae8 <bsp_TimCallback+0x14c>)
 80269c0:	681b      	ldr	r3, [r3, #0]
 80269c2:	2b00      	cmp	r3, #0
 80269c4:	d002      	beq.n	80269cc <bsp_TimCallback+0x30>
        s_Per1msCallBack();
 80269c6:	4b48      	ldr	r3, [pc, #288]	; (8026ae8 <bsp_TimCallback+0x14c>)
 80269c8:	681b      	ldr	r3, [r3, #0]
 80269ca:	4798      	blx	r3

    sCount++;
 80269cc:	4b47      	ldr	r3, [pc, #284]	; (8026aec <bsp_TimCallback+0x150>)
 80269ce:	881b      	ldrh	r3, [r3, #0]
 80269d0:	3301      	adds	r3, #1
 80269d2:	b29a      	uxth	r2, r3
 80269d4:	4b45      	ldr	r3, [pc, #276]	; (8026aec <bsp_TimCallback+0x150>)
 80269d6:	801a      	strh	r2, [r3, #0]
    s5Count++;
 80269d8:	4b45      	ldr	r3, [pc, #276]	; (8026af0 <bsp_TimCallback+0x154>)
 80269da:	681b      	ldr	r3, [r3, #0]
 80269dc:	3301      	adds	r3, #1
 80269de:	4a44      	ldr	r2, [pc, #272]	; (8026af0 <bsp_TimCallback+0x154>)
 80269e0:	6013      	str	r3, [r2, #0]

    if (sCount % 10 == 0)   // per 10ms
 80269e2:	4b42      	ldr	r3, [pc, #264]	; (8026aec <bsp_TimCallback+0x150>)
 80269e4:	881a      	ldrh	r2, [r3, #0]
 80269e6:	4b43      	ldr	r3, [pc, #268]	; (8026af4 <bsp_TimCallback+0x158>)
 80269e8:	fba3 1302 	umull	r1, r3, r3, r2
 80269ec:	08d9      	lsrs	r1, r3, #3
 80269ee:	460b      	mov	r3, r1
 80269f0:	009b      	lsls	r3, r3, #2
 80269f2:	440b      	add	r3, r1
 80269f4:	005b      	lsls	r3, r3, #1
 80269f6:	1ad3      	subs	r3, r2, r3
 80269f8:	b29b      	uxth	r3, r3
 80269fa:	2b00      	cmp	r3, #0
 80269fc:	d106      	bne.n	8026a0c <bsp_TimCallback+0x70>
    {
        if (s_Per10msCallBack != NULL)
 80269fe:	4b3e      	ldr	r3, [pc, #248]	; (8026af8 <bsp_TimCallback+0x15c>)
 8026a00:	681b      	ldr	r3, [r3, #0]
 8026a02:	2b00      	cmp	r3, #0
 8026a04:	d002      	beq.n	8026a0c <bsp_TimCallback+0x70>
            s_Per10msCallBack();
 8026a06:	4b3c      	ldr	r3, [pc, #240]	; (8026af8 <bsp_TimCallback+0x15c>)
 8026a08:	681b      	ldr	r3, [r3, #0]
 8026a0a:	4798      	blx	r3
    }
    if (sCount % 100 == 0)   // per 100ms
    {
    }
    if (sCount % 500 == 0)  // per 0.5 sec : WDT & STS Led toggle
 8026a0c:	4b37      	ldr	r3, [pc, #220]	; (8026aec <bsp_TimCallback+0x150>)
 8026a0e:	881b      	ldrh	r3, [r3, #0]
 8026a10:	4a3a      	ldr	r2, [pc, #232]	; (8026afc <bsp_TimCallback+0x160>)
 8026a12:	fba2 1203 	umull	r1, r2, r2, r3
 8026a16:	0952      	lsrs	r2, r2, #5
 8026a18:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8026a1c:	fb01 f202 	mul.w	r2, r1, r2
 8026a20:	1a9b      	subs	r3, r3, r2
 8026a22:	b29b      	uxth	r3, r3
 8026a24:	2b00      	cmp	r3, #0
 8026a26:	d107      	bne.n	8026a38 <bsp_TimCallback+0x9c>
    {
 		HAL_GPIO_TogglePin(WDT_GPIO_Port, WDT_Pin);
 8026a28:	2104      	movs	r1, #4
 8026a2a:	4835      	ldr	r0, [pc, #212]	; (8026b00 <bsp_TimCallback+0x164>)
 8026a2c:	f004 fd37 	bl	802b49e <HAL_GPIO_TogglePin>
 		HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED1_Pin);
 8026a30:	2110      	movs	r1, #16
 8026a32:	4834      	ldr	r0, [pc, #208]	; (8026b04 <bsp_TimCallback+0x168>)
 8026a34:	f004 fd33 	bl	802b49e <HAL_GPIO_TogglePin>
    }
    if (sCount >= 1000)     // per 1sec
 8026a38:	4b2c      	ldr	r3, [pc, #176]	; (8026aec <bsp_TimCallback+0x150>)
 8026a3a:	881b      	ldrh	r3, [r3, #0]
 8026a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8026a40:	d342      	bcc.n	8026ac8 <bsp_TimCallback+0x12c>
    {
        sCount = 0;
 8026a42:	4b2a      	ldr	r3, [pc, #168]	; (8026aec <bsp_TimCallback+0x150>)
 8026a44:	2200      	movs	r2, #0
 8026a46:	801a      	strh	r2, [r3, #0]
        g_Epoch++;
 8026a48:	4b2f      	ldr	r3, [pc, #188]	; (8026b08 <bsp_TimCallback+0x16c>)
 8026a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a4e:	1c54      	adds	r4, r2, #1
 8026a50:	f143 0500 	adc.w	r5, r3, #0
 8026a54:	4b2c      	ldr	r3, [pc, #176]	; (8026b08 <bsp_TimCallback+0x16c>)
 8026a56:	e9c3 4500 	strd	r4, r5, [r3]
        //printf("%s\n",strmtime());
      //  printf("in [0x%x]\n",inb(exiAddr[0]));
       printf("in [0x%x][0x%x][0x%x][0x%x][0x%x]\n",inb(exiAddr[0]),inb(exiAddr[1]),inb(exiAddr[2]),inb(exiAddr[3]),inb(exiAddr[4]));
 8026a5a:	4b2c      	ldr	r3, [pc, #176]	; (8026b0c <bsp_TimCallback+0x170>)
 8026a5c:	681b      	ldr	r3, [r3, #0]
 8026a5e:	781b      	ldrb	r3, [r3, #0]
 8026a60:	b2db      	uxtb	r3, r3
 8026a62:	4619      	mov	r1, r3
 8026a64:	4b29      	ldr	r3, [pc, #164]	; (8026b0c <bsp_TimCallback+0x170>)
 8026a66:	685b      	ldr	r3, [r3, #4]
 8026a68:	781b      	ldrb	r3, [r3, #0]
 8026a6a:	b2db      	uxtb	r3, r3
 8026a6c:	4618      	mov	r0, r3
 8026a6e:	4b27      	ldr	r3, [pc, #156]	; (8026b0c <bsp_TimCallback+0x170>)
 8026a70:	689b      	ldr	r3, [r3, #8]
 8026a72:	781b      	ldrb	r3, [r3, #0]
 8026a74:	b2db      	uxtb	r3, r3
 8026a76:	461c      	mov	r4, r3
 8026a78:	4b24      	ldr	r3, [pc, #144]	; (8026b0c <bsp_TimCallback+0x170>)
 8026a7a:	68db      	ldr	r3, [r3, #12]
 8026a7c:	781b      	ldrb	r3, [r3, #0]
 8026a7e:	b2db      	uxtb	r3, r3
 8026a80:	461a      	mov	r2, r3
 8026a82:	4b22      	ldr	r3, [pc, #136]	; (8026b0c <bsp_TimCallback+0x170>)
 8026a84:	691b      	ldr	r3, [r3, #16]
 8026a86:	781b      	ldrb	r3, [r3, #0]
 8026a88:	b2db      	uxtb	r3, r3
 8026a8a:	9301      	str	r3, [sp, #4]
 8026a8c:	9200      	str	r2, [sp, #0]
 8026a8e:	4623      	mov	r3, r4
 8026a90:	4602      	mov	r2, r0
 8026a92:	481f      	ldr	r0, [pc, #124]	; (8026b10 <bsp_TimCallback+0x174>)
 8026a94:	f00a f950 	bl	8030d38 <iprintf>

       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED1_Pin);
 8026a98:	2110      	movs	r1, #16
 8026a9a:	481a      	ldr	r0, [pc, #104]	; (8026b04 <bsp_TimCallback+0x168>)
 8026a9c:	f004 fcff 	bl	802b49e <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED2_Pin);
 8026aa0:	2120      	movs	r1, #32
 8026aa2:	4818      	ldr	r0, [pc, #96]	; (8026b04 <bsp_TimCallback+0x168>)
 8026aa4:	f004 fcfb 	bl	802b49e <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED3_Pin);
 8026aa8:	2140      	movs	r1, #64	; 0x40
 8026aaa:	4816      	ldr	r0, [pc, #88]	; (8026b04 <bsp_TimCallback+0x168>)
 8026aac:	f004 fcf7 	bl	802b49e <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED4_Pin);
 8026ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8026ab4:	4813      	ldr	r0, [pc, #76]	; (8026b04 <bsp_TimCallback+0x168>)
 8026ab6:	f004 fcf2 	bl	802b49e <HAL_GPIO_TogglePin>



       //outb(WRITE00_ADR,test2);

        if (s_Per1SecCallBack != NULL)
 8026aba:	4b16      	ldr	r3, [pc, #88]	; (8026b14 <bsp_TimCallback+0x178>)
 8026abc:	681b      	ldr	r3, [r3, #0]
 8026abe:	2b00      	cmp	r3, #0
 8026ac0:	d002      	beq.n	8026ac8 <bsp_TimCallback+0x12c>
            s_Per1SecCallBack();
 8026ac2:	4b14      	ldr	r3, [pc, #80]	; (8026b14 <bsp_TimCallback+0x178>)
 8026ac4:	681b      	ldr	r3, [r3, #0]
 8026ac6:	4798      	blx	r3

    }

    if (s5Count >= 5000)     // per 5sec
 8026ac8:	4b09      	ldr	r3, [pc, #36]	; (8026af0 <bsp_TimCallback+0x154>)
 8026aca:	681b      	ldr	r3, [r3, #0]
 8026acc:	f241 3287 	movw	r2, #4999	; 0x1387
 8026ad0:	4293      	cmp	r3, r2
 8026ad2:	d902      	bls.n	8026ada <bsp_TimCallback+0x13e>
    {
    	s5Count = 0;
 8026ad4:	4b06      	ldr	r3, [pc, #24]	; (8026af0 <bsp_TimCallback+0x154>)
 8026ad6:	2200      	movs	r2, #0
 8026ad8:	601a      	str	r2, [r3, #0]

    }
}
 8026ada:	bf00      	nop
 8026adc:	46bd      	mov	sp, r7
 8026ade:	bdb0      	pop	{r4, r5, r7, pc}
 8026ae0:	24001a64 	.word	0x24001a64
 8026ae4:	24001a70 	.word	0x24001a70
 8026ae8:	24001a78 	.word	0x24001a78
 8026aec:	24001a84 	.word	0x24001a84
 8026af0:	24001a88 	.word	0x24001a88
 8026af4:	cccccccd 	.word	0xcccccccd
 8026af8:	24001a7c 	.word	0x24001a7c
 8026afc:	10624dd3 	.word	0x10624dd3
 8026b00:	58020c00 	.word	0x58020c00
 8026b04:	58020800 	.word	0x58020800
 8026b08:	24001a68 	.word	0x24001a68
 8026b0c:	240000a0 	.word	0x240000a0
 8026b10:	08032d7c 	.word	0x08032d7c
 8026b14:	24001a80 	.word	0x24001a80

08026b18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8026b18:	b580      	push	{r7, lr}
 8026b1a:	b082      	sub	sp, #8
 8026b1c:	af00      	add	r7, sp, #0
 8026b1e:	6078      	str	r0, [r7, #4]

    if (htim->Instance == htim7.Instance)
 8026b20:	687b      	ldr	r3, [r7, #4]
 8026b22:	681a      	ldr	r2, [r3, #0]
 8026b24:	4b04      	ldr	r3, [pc, #16]	; (8026b38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8026b26:	681b      	ldr	r3, [r3, #0]
 8026b28:	429a      	cmp	r2, r3
 8026b2a:	d101      	bne.n	8026b30 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        bsp_TimCallback();
 8026b2c:	f7ff ff36 	bl	802699c <bsp_TimCallback>
    }
}
 8026b30:	bf00      	nop
 8026b32:	3708      	adds	r7, #8
 8026b34:	46bd      	mov	sp, r7
 8026b36:	bd80      	pop	{r7, pc}
 8026b38:	24001b14 	.word	0x24001b14

08026b3c <IsTimeoutMs>:
    while (__HAL_TIM_GET_COUNTER(&htim1) < us);
}


BOOL IsTimeoutMs(DWORD *base, DWORD toMs)
{
 8026b3c:	b580      	push	{r7, lr}
 8026b3e:	b084      	sub	sp, #16
 8026b40:	af00      	add	r7, sp, #0
 8026b42:	6078      	str	r0, [r7, #4]
 8026b44:	6039      	str	r1, [r7, #0]
    DWORD   tim;
    DWORD   diff;

    if (toMs == TIMEOUT_INFINITE)
 8026b46:	683b      	ldr	r3, [r7, #0]
 8026b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026b4c:	d101      	bne.n	8026b52 <IsTimeoutMs+0x16>
        return (FALSE);
 8026b4e:	2300      	movs	r3, #0
 8026b50:	e027      	b.n	8026ba2 <IsTimeoutMs+0x66>

    tim = bsp_GetTickCount();
 8026b52:	f7ff fefb 	bl	802694c <bsp_GetTickCount>
 8026b56:	60b8      	str	r0, [r7, #8]
    if (toMs == 0)
 8026b58:	683b      	ldr	r3, [r7, #0]
 8026b5a:	2b00      	cmp	r3, #0
 8026b5c:	d104      	bne.n	8026b68 <IsTimeoutMs+0x2c>
    {
        *base = tim;
 8026b5e:	687b      	ldr	r3, [r7, #4]
 8026b60:	68ba      	ldr	r2, [r7, #8]
 8026b62:	601a      	str	r2, [r3, #0]
        return (TRUE);
 8026b64:	2301      	movs	r3, #1
 8026b66:	e01c      	b.n	8026ba2 <IsTimeoutMs+0x66>
    }

    if (tim >= *base)
 8026b68:	687b      	ldr	r3, [r7, #4]
 8026b6a:	681b      	ldr	r3, [r3, #0]
 8026b6c:	68ba      	ldr	r2, [r7, #8]
 8026b6e:	429a      	cmp	r2, r3
 8026b70:	d305      	bcc.n	8026b7e <IsTimeoutMs+0x42>
        diff = tim - *base;
 8026b72:	687b      	ldr	r3, [r7, #4]
 8026b74:	681b      	ldr	r3, [r3, #0]
 8026b76:	68ba      	ldr	r2, [r7, #8]
 8026b78:	1ad3      	subs	r3, r2, r3
 8026b7a:	60fb      	str	r3, [r7, #12]
 8026b7c:	e007      	b.n	8026b8e <IsTimeoutMs+0x52>
    else
    {
        diff = (0xffffffffUL - *base) + 1;
 8026b7e:	687b      	ldr	r3, [r7, #4]
 8026b80:	681b      	ldr	r3, [r3, #0]
 8026b82:	425b      	negs	r3, r3
 8026b84:	60fb      	str	r3, [r7, #12]
        diff += tim;
 8026b86:	68fa      	ldr	r2, [r7, #12]
 8026b88:	68bb      	ldr	r3, [r7, #8]
 8026b8a:	4413      	add	r3, r2
 8026b8c:	60fb      	str	r3, [r7, #12]
    }

    if(diff >= toMs)
 8026b8e:	68fa      	ldr	r2, [r7, #12]
 8026b90:	683b      	ldr	r3, [r7, #0]
 8026b92:	429a      	cmp	r2, r3
 8026b94:	d304      	bcc.n	8026ba0 <IsTimeoutMs+0x64>
    {
        *base  = tim;
 8026b96:	687b      	ldr	r3, [r7, #4]
 8026b98:	68ba      	ldr	r2, [r7, #8]
 8026b9a:	601a      	str	r2, [r3, #0]
        return (TRUE);
 8026b9c:	2301      	movs	r3, #1
 8026b9e:	e000      	b.n	8026ba2 <IsTimeoutMs+0x66>
    }

    return (FALSE);
 8026ba0:	2300      	movs	r3, #0
}
 8026ba2:	4618      	mov	r0, r3
 8026ba4:	3710      	adds	r7, #16
 8026ba6:	46bd      	mov	sp, r7
 8026ba8:	bd80      	pop	{r7, pc}

08026baa <bsp_InitUart>:
#include "bsp.h"
#include <stdio.h>
#include <stdarg.h>

void bsp_InitUart()
{
 8026baa:	b580      	push	{r7, lr}
 8026bac:	af00      	add	r7, sp, #0
	bsp_InitIUart();
 8026bae:	f7fe ff3b 	bl	8025a28 <bsp_InitIUart>
}
 8026bb2:	bf00      	nop
 8026bb4:	bd80      	pop	{r7, pc}

08026bb6 <Uart_SendByte>:
}



int Uart_SendByte(int nComPort, BYTE c)
{
 8026bb6:	b580      	push	{r7, lr}
 8026bb8:	b082      	sub	sp, #8
 8026bba:	af00      	add	r7, sp, #0
 8026bbc:	6078      	str	r0, [r7, #4]
 8026bbe:	460b      	mov	r3, r1
 8026bc0:	70fb      	strb	r3, [r7, #3]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	2b00      	cmp	r3, #0
 8026bc6:	db09      	blt.n	8026bdc <Uart_SendByte+0x26>
 8026bc8:	687b      	ldr	r3, [r7, #4]
 8026bca:	2b04      	cmp	r3, #4
 8026bcc:	dc06      	bgt.n	8026bdc <Uart_SendByte+0x26>
		return (IUart_SendByte(nComPort, c));
 8026bce:	78fb      	ldrb	r3, [r7, #3]
 8026bd0:	4619      	mov	r1, r3
 8026bd2:	6878      	ldr	r0, [r7, #4]
 8026bd4:	f7ff f906 	bl	8025de4 <IUart_SendByte>
 8026bd8:	4603      	mov	r3, r0
 8026bda:	e001      	b.n	8026be0 <Uart_SendByte+0x2a>

	return -1;
 8026bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8026be0:	4618      	mov	r0, r3
 8026be2:	3708      	adds	r7, #8
 8026be4:	46bd      	mov	sp, r7
 8026be6:	bd80      	pop	{r7, pc}

08026be8 <Uart_SendBuffer>:



int Uart_SendBuffer(int nComPort, PUCHAR pBuf, UINT16 usLen)
{
 8026be8:	b580      	push	{r7, lr}
 8026bea:	b084      	sub	sp, #16
 8026bec:	af00      	add	r7, sp, #0
 8026bee:	60f8      	str	r0, [r7, #12]
 8026bf0:	60b9      	str	r1, [r7, #8]
 8026bf2:	4613      	mov	r3, r2
 8026bf4:	80fb      	strh	r3, [r7, #6]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 8026bf6:	68fb      	ldr	r3, [r7, #12]
 8026bf8:	2b00      	cmp	r3, #0
 8026bfa:	db0a      	blt.n	8026c12 <Uart_SendBuffer+0x2a>
 8026bfc:	68fb      	ldr	r3, [r7, #12]
 8026bfe:	2b04      	cmp	r3, #4
 8026c00:	dc07      	bgt.n	8026c12 <Uart_SendBuffer+0x2a>
		return (IUart_SendBuffer(nComPort, pBuf, usLen));
 8026c02:	88fb      	ldrh	r3, [r7, #6]
 8026c04:	461a      	mov	r2, r3
 8026c06:	68b9      	ldr	r1, [r7, #8]
 8026c08:	68f8      	ldr	r0, [r7, #12]
 8026c0a:	f7ff f91f 	bl	8025e4c <IUart_SendBuffer>
 8026c0e:	4603      	mov	r3, r0
 8026c10:	e001      	b.n	8026c16 <Uart_SendBuffer+0x2e>

	return -1;
 8026c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8026c16:	4618      	mov	r0, r3
 8026c18:	3710      	adds	r7, #16
 8026c1a:	46bd      	mov	sp, r7
 8026c1c:	bd80      	pop	{r7, pc}

08026c1e <Uart_RecvByteBlocked>:
    return -1;
}


int Uart_RecvByteBlocked(int nComPort)
{
 8026c1e:	b580      	push	{r7, lr}
 8026c20:	b082      	sub	sp, #8
 8026c22:	af00      	add	r7, sp, #0
 8026c24:	6078      	str	r0, [r7, #4]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 8026c26:	687b      	ldr	r3, [r7, #4]
 8026c28:	2b00      	cmp	r3, #0
 8026c2a:	db07      	blt.n	8026c3c <Uart_RecvByteBlocked+0x1e>
 8026c2c:	687b      	ldr	r3, [r7, #4]
 8026c2e:	2b04      	cmp	r3, #4
 8026c30:	dc04      	bgt.n	8026c3c <Uart_RecvByteBlocked+0x1e>
        return (IUart_RecvByteBlocked(nComPort));
 8026c32:	6878      	ldr	r0, [r7, #4]
 8026c34:	f7ff f9a0 	bl	8025f78 <IUart_RecvByteBlocked>
 8026c38:	4603      	mov	r3, r0
 8026c3a:	e001      	b.n	8026c40 <Uart_RecvByteBlocked+0x22>

    return -1;
 8026c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8026c40:	4618      	mov	r0, r3
 8026c42:	3708      	adds	r7, #8
 8026c44:	46bd      	mov	sp, r7
 8026c46:	bd80      	pop	{r7, pc}

08026c48 <__io_putchar>:

/*
**	CubeIde 호환 함수
 */
int __io_putchar(int ch)
{
 8026c48:	b580      	push	{r7, lr}
 8026c4a:	b082      	sub	sp, #8
 8026c4c:	af00      	add	r7, sp, #0
 8026c4e:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8026c50:	687b      	ldr	r3, [r7, #4]
 8026c52:	2b0a      	cmp	r3, #10
 8026c54:	d102      	bne.n	8026c5c <__io_putchar+0x14>
		_low_level_put('\r');
 8026c56:	200d      	movs	r0, #13
 8026c58:	f000 f84a 	bl	8026cf0 <_low_level_put>
	_low_level_put((char)ch);
 8026c5c:	687b      	ldr	r3, [r7, #4]
 8026c5e:	b2db      	uxtb	r3, r3
 8026c60:	4618      	mov	r0, r3
 8026c62:	f000 f845 	bl	8026cf0 <_low_level_put>

	return ch;
 8026c66:	687b      	ldr	r3, [r7, #4]
}
 8026c68:	4618      	mov	r0, r3
 8026c6a:	3708      	adds	r7, #8
 8026c6c:	46bd      	mov	sp, r7
 8026c6e:	bd80      	pop	{r7, pc}

08026c70 <__io_getchar>:


// scanf 사용시 필요
int __io_getchar(void)
{
 8026c70:	b580      	push	{r7, lr}
 8026c72:	b082      	sub	sp, #8
 8026c74:	af00      	add	r7, sp, #0
    char data[4];
    uint8_t ch, len = 1;
 8026c76:	2301      	movs	r3, #1
 8026c78:	71fb      	strb	r3, [r7, #7]

    ch = (uint8_t)Uart_RecvByteBlocked(DEBUG_PORT);
 8026c7a:	2000      	movs	r0, #0
 8026c7c:	f7ff ffcf 	bl	8026c1e <Uart_RecvByteBlocked>
 8026c80:	4603      	mov	r3, r0
 8026c82:	71bb      	strb	r3, [r7, #6]

    memset(data, 0x00, 4);
 8026c84:	463b      	mov	r3, r7
 8026c86:	2204      	movs	r2, #4
 8026c88:	2100      	movs	r1, #0
 8026c8a:	4618      	mov	r0, r3
 8026c8c:	f009 ff6c 	bl	8030b68 <memset>
    switch(ch)
 8026c90:	79bb      	ldrb	r3, [r7, #6]
 8026c92:	2b7f      	cmp	r3, #127	; 0x7f
 8026c94:	d011      	beq.n	8026cba <__io_getchar+0x4a>
 8026c96:	2b7f      	cmp	r3, #127	; 0x7f
 8026c98:	dc17      	bgt.n	8026cca <__io_getchar+0x5a>
 8026c9a:	2b0d      	cmp	r3, #13
 8026c9c:	d005      	beq.n	8026caa <__io_getchar+0x3a>
 8026c9e:	2b0d      	cmp	r3, #13
 8026ca0:	dc13      	bgt.n	8026cca <__io_getchar+0x5a>
 8026ca2:	2b08      	cmp	r3, #8
 8026ca4:	d009      	beq.n	8026cba <__io_getchar+0x4a>
 8026ca6:	2b0a      	cmp	r3, #10
 8026ca8:	d10f      	bne.n	8026cca <__io_getchar+0x5a>
    {
        case '\r':
        case '\n':
            len = 2;
 8026caa:	2302      	movs	r3, #2
 8026cac:	71fb      	strb	r3, [r7, #7]
            sprintf(data, "\r\n");
 8026cae:	463b      	mov	r3, r7
 8026cb0:	490d      	ldr	r1, [pc, #52]	; (8026ce8 <__io_getchar+0x78>)
 8026cb2:	4618      	mov	r0, r3
 8026cb4:	f00a f8f4 	bl	8030ea0 <siprintf>
            break;
 8026cb8:	e00a      	b.n	8026cd0 <__io_getchar+0x60>

        case '\b':
        case 0x7F:
            len = 3;
 8026cba:	2303      	movs	r3, #3
 8026cbc:	71fb      	strb	r3, [r7, #7]
            sprintf(data, "\b \b");
 8026cbe:	463b      	mov	r3, r7
 8026cc0:	490a      	ldr	r1, [pc, #40]	; (8026cec <__io_getchar+0x7c>)
 8026cc2:	4618      	mov	r0, r3
 8026cc4:	f00a f8ec 	bl	8030ea0 <siprintf>
            break;
 8026cc8:	e002      	b.n	8026cd0 <__io_getchar+0x60>

        default:
            data[0] = ch;
 8026cca:	79bb      	ldrb	r3, [r7, #6]
 8026ccc:	703b      	strb	r3, [r7, #0]
            break;
 8026cce:	bf00      	nop
    }
    Uart_SendBuffer(DEBUG_PORT, (uint8_t *)data, len);
 8026cd0:	79fb      	ldrb	r3, [r7, #7]
 8026cd2:	b29a      	uxth	r2, r3
 8026cd4:	463b      	mov	r3, r7
 8026cd6:	4619      	mov	r1, r3
 8026cd8:	2000      	movs	r0, #0
 8026cda:	f7ff ff85 	bl	8026be8 <Uart_SendBuffer>

    return ch;
 8026cde:	79bb      	ldrb	r3, [r7, #6]
}
 8026ce0:	4618      	mov	r0, r3
 8026ce2:	3708      	adds	r7, #8
 8026ce4:	46bd      	mov	sp, r7
 8026ce6:	bd80      	pop	{r7, pc}
 8026ce8:	08032e04 	.word	0x08032e04
 8026cec:	08032e08 	.word	0x08032e08

08026cf0 <_low_level_put>:



void _low_level_put(char c)
{
 8026cf0:	b580      	push	{r7, lr}
 8026cf2:	b082      	sub	sp, #8
 8026cf4:	af00      	add	r7, sp, #0
 8026cf6:	4603      	mov	r3, r0
 8026cf8:	71fb      	strb	r3, [r7, #7]
    Uart_SendByte(DEBUG_PORT, c);
 8026cfa:	79fb      	ldrb	r3, [r7, #7]
 8026cfc:	4619      	mov	r1, r3
 8026cfe:	2000      	movs	r0, #0
 8026d00:	f7ff ff59 	bl	8026bb6 <Uart_SendByte>

//	USART1->TDR = c;
//
//	while((USART1->ISR & USART_ISR_TC) == 0)
//	{}
}
 8026d04:	bf00      	nop
 8026d06:	3708      	adds	r7, #8
 8026d08:	46bd      	mov	sp, r7
 8026d0a:	bd80      	pop	{r7, pc}

08026d0c <_putchar>:
}



int _putchar(int c)
{
 8026d0c:	b580      	push	{r7, lr}
 8026d0e:	b082      	sub	sp, #8
 8026d10:	af00      	add	r7, sp, #0
 8026d12:	6078      	str	r0, [r7, #4]
    if ( c == '\n' )
 8026d14:	687b      	ldr	r3, [r7, #4]
 8026d16:	2b0a      	cmp	r3, #10
 8026d18:	d102      	bne.n	8026d20 <_putchar+0x14>
        _low_level_put((char)'\r');
 8026d1a:	200d      	movs	r0, #13
 8026d1c:	f7ff ffe8 	bl	8026cf0 <_low_level_put>
    _low_level_put((char)c);
 8026d20:	687b      	ldr	r3, [r7, #4]
 8026d22:	b2db      	uxtb	r3, r3
 8026d24:	4618      	mov	r0, r3
 8026d26:	f7ff ffe3 	bl	8026cf0 <_low_level_put>

    return(c);
 8026d2a:	687b      	ldr	r3, [r7, #4]
}
 8026d2c:	4618      	mov	r0, r3
 8026d2e:	3708      	adds	r7, #8
 8026d30:	46bd      	mov	sp, r7
 8026d32:	bd80      	pop	{r7, pc}

08026d34 <putstr>:
}



void putstr(char *s)
{
 8026d34:	b580      	push	{r7, lr}
 8026d36:	b082      	sub	sp, #8
 8026d38:	af00      	add	r7, sp, #0
 8026d3a:	6078      	str	r0, [r7, #4]
    while (*s != '\0')
 8026d3c:	e006      	b.n	8026d4c <putstr+0x18>
        _putchar(*s++);
 8026d3e:	687b      	ldr	r3, [r7, #4]
 8026d40:	1c5a      	adds	r2, r3, #1
 8026d42:	607a      	str	r2, [r7, #4]
 8026d44:	781b      	ldrb	r3, [r3, #0]
 8026d46:	4618      	mov	r0, r3
 8026d48:	f7ff ffe0 	bl	8026d0c <_putchar>
    while (*s != '\0')
 8026d4c:	687b      	ldr	r3, [r7, #4]
 8026d4e:	781b      	ldrb	r3, [r3, #0]
 8026d50:	2b00      	cmp	r3, #0
 8026d52:	d1f4      	bne.n	8026d3e <putstr+0xa>
}
 8026d54:	bf00      	nop
 8026d56:	bf00      	nop
 8026d58:	3708      	adds	r7, #8
 8026d5a:	46bd      	mov	sp, r7
 8026d5c:	bd80      	pop	{r7, pc}

08026d5e <HexPrint>:
}


/* printf("%0?x", h) */
void HexPrint(WORD h, uint8_t n)
{
 8026d5e:	b580      	push	{r7, lr}
 8026d60:	b084      	sub	sp, #16
 8026d62:	af00      	add	r7, sp, #0
 8026d64:	4603      	mov	r3, r0
 8026d66:	460a      	mov	r2, r1
 8026d68:	80fb      	strh	r3, [r7, #6]
 8026d6a:	4613      	mov	r3, r2
 8026d6c:	717b      	strb	r3, [r7, #5]
    char    s[8];

    htoa(h, s);
 8026d6e:	f107 0208 	add.w	r2, r7, #8
 8026d72:	88fb      	ldrh	r3, [r7, #6]
 8026d74:	4611      	mov	r1, r2
 8026d76:	4618      	mov	r0, r3
 8026d78:	f000 f826 	bl	8026dc8 <htoa>
    n = 4 - n;
 8026d7c:	797b      	ldrb	r3, [r7, #5]
 8026d7e:	f1c3 0304 	rsb	r3, r3, #4
 8026d82:	717b      	strb	r3, [r7, #5]
    while ( n < 4 )
 8026d84:	e009      	b.n	8026d9a <HexPrint+0x3c>
        putchar(s[n++]);
 8026d86:	797b      	ldrb	r3, [r7, #5]
 8026d88:	1c5a      	adds	r2, r3, #1
 8026d8a:	717a      	strb	r2, [r7, #5]
 8026d8c:	3310      	adds	r3, #16
 8026d8e:	443b      	add	r3, r7
 8026d90:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8026d94:	4618      	mov	r0, r3
 8026d96:	f009 ffe7 	bl	8030d68 <putchar>
    while ( n < 4 )
 8026d9a:	797b      	ldrb	r3, [r7, #5]
 8026d9c:	2b03      	cmp	r3, #3
 8026d9e:	d9f2      	bls.n	8026d86 <HexPrint+0x28>
}
 8026da0:	bf00      	nop
 8026da2:	bf00      	nop
 8026da4:	3710      	adds	r7, #16
 8026da6:	46bd      	mov	sp, r7
 8026da8:	bd80      	pop	{r7, pc}

08026daa <U3_Putch>:
    Uart_Printf(nComPort, "\r\n");
}


void U3_Putch(BYTE c)
{
 8026daa:	b580      	push	{r7, lr}
 8026dac:	b082      	sub	sp, #8
 8026dae:	af00      	add	r7, sp, #0
 8026db0:	4603      	mov	r3, r0
 8026db2:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM3, (uint8_t)c);
 8026db4:	79fb      	ldrb	r3, [r7, #7]
 8026db6:	4619      	mov	r1, r3
 8026db8:	2002      	movs	r0, #2
 8026dba:	f7ff f813 	bl	8025de4 <IUart_SendByte>
}
 8026dbe:	bf00      	nop
 8026dc0:	3708      	adds	r7, #8
 8026dc2:	46bd      	mov	sp, r7
 8026dc4:	bd80      	pop	{r7, pc}
	...

08026dc8 <htoa>:
** ============================================================================
*/

/* hexdecimal unsigned int to ascii */
void htoa(word h, char *s)
{
 8026dc8:	b480      	push	{r7}
 8026dca:	b085      	sub	sp, #20
 8026dcc:	af00      	add	r7, sp, #0
 8026dce:	4603      	mov	r3, r0
 8026dd0:	6039      	str	r1, [r7, #0]
 8026dd2:	80fb      	strh	r3, [r7, #6]
	int	cnt;

	for ( cnt = 12; cnt >= 0; cnt -= 4 )
 8026dd4:	230c      	movs	r3, #12
 8026dd6:	60fb      	str	r3, [r7, #12]
 8026dd8:	e00e      	b.n	8026df8 <htoa+0x30>
		*s++ = HexTbl[(h >> cnt) & 0x0f];
 8026dda:	88fa      	ldrh	r2, [r7, #6]
 8026ddc:	68fb      	ldr	r3, [r7, #12]
 8026dde:	fa42 f303 	asr.w	r3, r2, r3
 8026de2:	f003 020f 	and.w	r2, r3, #15
 8026de6:	683b      	ldr	r3, [r7, #0]
 8026de8:	1c59      	adds	r1, r3, #1
 8026dea:	6039      	str	r1, [r7, #0]
 8026dec:	4908      	ldr	r1, [pc, #32]	; (8026e10 <htoa+0x48>)
 8026dee:	5c8a      	ldrb	r2, [r1, r2]
 8026df0:	701a      	strb	r2, [r3, #0]
	for ( cnt = 12; cnt >= 0; cnt -= 4 )
 8026df2:	68fb      	ldr	r3, [r7, #12]
 8026df4:	3b04      	subs	r3, #4
 8026df6:	60fb      	str	r3, [r7, #12]
 8026df8:	68fb      	ldr	r3, [r7, #12]
 8026dfa:	2b00      	cmp	r3, #0
 8026dfc:	daed      	bge.n	8026dda <htoa+0x12>
	*s = '\0';
 8026dfe:	683b      	ldr	r3, [r7, #0]
 8026e00:	2200      	movs	r2, #0
 8026e02:	701a      	strb	r2, [r3, #0]
}
 8026e04:	bf00      	nop
 8026e06:	3714      	adds	r7, #20
 8026e08:	46bd      	mov	sp, r7
 8026e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e0e:	4770      	bx	lr
 8026e10:	2400008c 	.word	0x2400008c

08026e14 <dump>:
		return(atoh(&str[2]));
	return(atoi(str));
}

static	void dump(long adr, byte *m, char n)
{
 8026e14:	b580      	push	{r7, lr}
 8026e16:	b086      	sub	sp, #24
 8026e18:	af00      	add	r7, sp, #0
 8026e1a:	60f8      	str	r0, [r7, #12]
 8026e1c:	60b9      	str	r1, [r7, #8]
 8026e1e:	4613      	mov	r3, r2
 8026e20:	71fb      	strb	r3, [r7, #7]
#define isdump(c)	(isprint(c) ? (c) : ('.'))
	byte	cnt, i, j;

	printf("%06lX:", adr & 0xfffff0L);
 8026e22:	68fa      	ldr	r2, [r7, #12]
 8026e24:	4b3c      	ldr	r3, [pc, #240]	; (8026f18 <dump+0x104>)
 8026e26:	4013      	ands	r3, r2
 8026e28:	4619      	mov	r1, r3
 8026e2a:	483c      	ldr	r0, [pc, #240]	; (8026f1c <dump+0x108>)
 8026e2c:	f009 ff84 	bl	8030d38 <iprintf>
	cnt = (byte)adr & 0x0f;
 8026e30:	68fb      	ldr	r3, [r7, #12]
 8026e32:	b2db      	uxtb	r3, r3
 8026e34:	f003 030f 	and.w	r3, r3, #15
 8026e38:	757b      	strb	r3, [r7, #21]
	for ( i = 0, j = 0; i < 16; i++ ) {
 8026e3a:	2300      	movs	r3, #0
 8026e3c:	75fb      	strb	r3, [r7, #23]
 8026e3e:	2300      	movs	r3, #0
 8026e40:	75bb      	strb	r3, [r7, #22]
 8026e42:	e024      	b.n	8026e8e <dump+0x7a>
		if ( i == 8 )
 8026e44:	7dfb      	ldrb	r3, [r7, #23]
 8026e46:	2b08      	cmp	r3, #8
 8026e48:	d103      	bne.n	8026e52 <dump+0x3e>
			putchar('-');
 8026e4a:	202d      	movs	r0, #45	; 0x2d
 8026e4c:	f009 ff8c 	bl	8030d68 <putchar>
 8026e50:	e002      	b.n	8026e58 <dump+0x44>
		else
			putchar(' ');
 8026e52:	2020      	movs	r0, #32
 8026e54:	f009 ff88 	bl	8030d68 <putchar>
		if ( i < cnt || j >= n )
 8026e58:	7dfa      	ldrb	r2, [r7, #23]
 8026e5a:	7d7b      	ldrb	r3, [r7, #21]
 8026e5c:	429a      	cmp	r2, r3
 8026e5e:	d303      	bcc.n	8026e68 <dump+0x54>
 8026e60:	7dba      	ldrb	r2, [r7, #22]
 8026e62:	79fb      	ldrb	r3, [r7, #7]
 8026e64:	429a      	cmp	r2, r3
 8026e66:	d303      	bcc.n	8026e70 <dump+0x5c>
			putstr("  ");
 8026e68:	482d      	ldr	r0, [pc, #180]	; (8026f20 <dump+0x10c>)
 8026e6a:	f7ff ff63 	bl	8026d34 <putstr>
 8026e6e:	e00b      	b.n	8026e88 <dump+0x74>
		else {
			HexPrint(m[j], 2);
 8026e70:	7dbb      	ldrb	r3, [r7, #22]
 8026e72:	68ba      	ldr	r2, [r7, #8]
 8026e74:	4413      	add	r3, r2
 8026e76:	781b      	ldrb	r3, [r3, #0]
 8026e78:	b29b      	uxth	r3, r3
 8026e7a:	2102      	movs	r1, #2
 8026e7c:	4618      	mov	r0, r3
 8026e7e:	f7ff ff6e 	bl	8026d5e <HexPrint>
			j++;
 8026e82:	7dbb      	ldrb	r3, [r7, #22]
 8026e84:	3301      	adds	r3, #1
 8026e86:	75bb      	strb	r3, [r7, #22]
	for ( i = 0, j = 0; i < 16; i++ ) {
 8026e88:	7dfb      	ldrb	r3, [r7, #23]
 8026e8a:	3301      	adds	r3, #1
 8026e8c:	75fb      	strb	r3, [r7, #23]
 8026e8e:	7dfb      	ldrb	r3, [r7, #23]
 8026e90:	2b0f      	cmp	r3, #15
 8026e92:	d9d7      	bls.n	8026e44 <dump+0x30>
		}
	}
	putstr("  ");
 8026e94:	4822      	ldr	r0, [pc, #136]	; (8026f20 <dump+0x10c>)
 8026e96:	f7ff ff4d 	bl	8026d34 <putstr>
	for ( i = 0; i < cnt; i++ )
 8026e9a:	2300      	movs	r3, #0
 8026e9c:	75fb      	strb	r3, [r7, #23]
 8026e9e:	e005      	b.n	8026eac <dump+0x98>
		putchar(' ');
 8026ea0:	2020      	movs	r0, #32
 8026ea2:	f009 ff61 	bl	8030d68 <putchar>
	for ( i = 0; i < cnt; i++ )
 8026ea6:	7dfb      	ldrb	r3, [r7, #23]
 8026ea8:	3301      	adds	r3, #1
 8026eaa:	75fb      	strb	r3, [r7, #23]
 8026eac:	7dfa      	ldrb	r2, [r7, #23]
 8026eae:	7d7b      	ldrb	r3, [r7, #21]
 8026eb0:	429a      	cmp	r2, r3
 8026eb2:	d3f5      	bcc.n	8026ea0 <dump+0x8c>
	for ( i = 0; i < n; i++ )
 8026eb4:	2300      	movs	r3, #0
 8026eb6:	75fb      	strb	r3, [r7, #23]
 8026eb8:	e017      	b.n	8026eea <dump+0xd6>
		putchar(isdump(m[i]));
 8026eba:	7dfb      	ldrb	r3, [r7, #23]
 8026ebc:	68ba      	ldr	r2, [r7, #8]
 8026ebe:	4413      	add	r3, r2
 8026ec0:	781b      	ldrb	r3, [r3, #0]
 8026ec2:	3301      	adds	r3, #1
 8026ec4:	4a17      	ldr	r2, [pc, #92]	; (8026f24 <dump+0x110>)
 8026ec6:	4413      	add	r3, r2
 8026ec8:	781b      	ldrb	r3, [r3, #0]
 8026eca:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8026ece:	2b00      	cmp	r3, #0
 8026ed0:	d004      	beq.n	8026edc <dump+0xc8>
 8026ed2:	7dfb      	ldrb	r3, [r7, #23]
 8026ed4:	68ba      	ldr	r2, [r7, #8]
 8026ed6:	4413      	add	r3, r2
 8026ed8:	781b      	ldrb	r3, [r3, #0]
 8026eda:	e000      	b.n	8026ede <dump+0xca>
 8026edc:	232e      	movs	r3, #46	; 0x2e
 8026ede:	4618      	mov	r0, r3
 8026ee0:	f009 ff42 	bl	8030d68 <putchar>
	for ( i = 0; i < n; i++ )
 8026ee4:	7dfb      	ldrb	r3, [r7, #23]
 8026ee6:	3301      	adds	r3, #1
 8026ee8:	75fb      	strb	r3, [r7, #23]
 8026eea:	7dfa      	ldrb	r2, [r7, #23]
 8026eec:	79fb      	ldrb	r3, [r7, #7]
 8026eee:	429a      	cmp	r2, r3
 8026ef0:	d3e3      	bcc.n	8026eba <dump+0xa6>
	while ( (cnt + i++) < 16 )
 8026ef2:	e002      	b.n	8026efa <dump+0xe6>
		putchar(' ');
 8026ef4:	2020      	movs	r0, #32
 8026ef6:	f009 ff37 	bl	8030d68 <putchar>
	while ( (cnt + i++) < 16 )
 8026efa:	7d7a      	ldrb	r2, [r7, #21]
 8026efc:	7dfb      	ldrb	r3, [r7, #23]
 8026efe:	1c59      	adds	r1, r3, #1
 8026f00:	75f9      	strb	r1, [r7, #23]
 8026f02:	4413      	add	r3, r2
 8026f04:	2b0f      	cmp	r3, #15
 8026f06:	ddf5      	ble.n	8026ef4 <dump+0xe0>

	putchar('\n');
 8026f08:	200a      	movs	r0, #10
 8026f0a:	f009 ff2d 	bl	8030d68 <putchar>
}
 8026f0e:	bf00      	nop
 8026f10:	3718      	adds	r7, #24
 8026f12:	46bd      	mov	sp, r7
 8026f14:	bd80      	pop	{r7, pc}
 8026f16:	bf00      	nop
 8026f18:	00fffff0 	.word	0x00fffff0
 8026f1c:	08032ea0 	.word	0x08032ea0
 8026f20:	08032ea8 	.word	0x08032ea8
 8026f24:	08033338 	.word	0x08033338

08026f28 <hexdump>:

void hexdump(long adr, byte *pbuf, int siz)
{
 8026f28:	b580      	push	{r7, lr}
 8026f2a:	b088      	sub	sp, #32
 8026f2c:	af00      	add	r7, sp, #0
 8026f2e:	60f8      	str	r0, [r7, #12]
 8026f30:	60b9      	str	r1, [r7, #8]
 8026f32:	607a      	str	r2, [r7, #4]
	int 	i, n, l, d;

	if(siz == 0)
 8026f34:	687b      	ldr	r3, [r7, #4]
 8026f36:	2b00      	cmp	r3, #0
 8026f38:	d045      	beq.n	8026fc6 <hexdump+0x9e>
		return;

	for(i = 0 ; i < siz ;  ) {
 8026f3a:	2300      	movs	r3, #0
 8026f3c:	61fb      	str	r3, [r7, #28]
 8026f3e:	e03d      	b.n	8026fbc <hexdump+0x94>
		n = adr % 16;
 8026f40:	68fb      	ldr	r3, [r7, #12]
 8026f42:	425a      	negs	r2, r3
 8026f44:	f003 030f 	and.w	r3, r3, #15
 8026f48:	f002 020f 	and.w	r2, r2, #15
 8026f4c:	bf58      	it	pl
 8026f4e:	4253      	negpl	r3, r2
 8026f50:	61bb      	str	r3, [r7, #24]
		if(n == 0) {
 8026f52:	69bb      	ldr	r3, [r7, #24]
 8026f54:	2b00      	cmp	r3, #0
 8026f56:	d112      	bne.n	8026f7e <hexdump+0x56>
			d = siz - i;
 8026f58:	687a      	ldr	r2, [r7, #4]
 8026f5a:	69fb      	ldr	r3, [r7, #28]
 8026f5c:	1ad3      	subs	r3, r2, r3
 8026f5e:	613b      	str	r3, [r7, #16]
			n = min(16, d);
 8026f60:	693b      	ldr	r3, [r7, #16]
 8026f62:	2b10      	cmp	r3, #16
 8026f64:	bfa8      	it	ge
 8026f66:	2310      	movge	r3, #16
 8026f68:	61bb      	str	r3, [r7, #24]
			dump(adr, &pbuf[i], n);
 8026f6a:	69fb      	ldr	r3, [r7, #28]
 8026f6c:	68ba      	ldr	r2, [r7, #8]
 8026f6e:	4413      	add	r3, r2
 8026f70:	69ba      	ldr	r2, [r7, #24]
 8026f72:	b2d2      	uxtb	r2, r2
 8026f74:	4619      	mov	r1, r3
 8026f76:	68f8      	ldr	r0, [r7, #12]
 8026f78:	f7ff ff4c 	bl	8026e14 <dump>
 8026f7c:	e016      	b.n	8026fac <hexdump+0x84>
		}
		else {
			l = 16 - n;
 8026f7e:	69bb      	ldr	r3, [r7, #24]
 8026f80:	f1c3 0310 	rsb	r3, r3, #16
 8026f84:	617b      	str	r3, [r7, #20]
			d = siz - i;
 8026f86:	687a      	ldr	r2, [r7, #4]
 8026f88:	69fb      	ldr	r3, [r7, #28]
 8026f8a:	1ad3      	subs	r3, r2, r3
 8026f8c:	613b      	str	r3, [r7, #16]
			n = min(l, d);
 8026f8e:	697a      	ldr	r2, [r7, #20]
 8026f90:	693b      	ldr	r3, [r7, #16]
 8026f92:	4293      	cmp	r3, r2
 8026f94:	bfa8      	it	ge
 8026f96:	4613      	movge	r3, r2
 8026f98:	61bb      	str	r3, [r7, #24]
			dump(adr, &pbuf[i], n);
 8026f9a:	69fb      	ldr	r3, [r7, #28]
 8026f9c:	68ba      	ldr	r2, [r7, #8]
 8026f9e:	4413      	add	r3, r2
 8026fa0:	69ba      	ldr	r2, [r7, #24]
 8026fa2:	b2d2      	uxtb	r2, r2
 8026fa4:	4619      	mov	r1, r3
 8026fa6:	68f8      	ldr	r0, [r7, #12]
 8026fa8:	f7ff ff34 	bl	8026e14 <dump>
		}
		i += n;
 8026fac:	69fa      	ldr	r2, [r7, #28]
 8026fae:	69bb      	ldr	r3, [r7, #24]
 8026fb0:	4413      	add	r3, r2
 8026fb2:	61fb      	str	r3, [r7, #28]
		adr += n;
 8026fb4:	68fa      	ldr	r2, [r7, #12]
 8026fb6:	69bb      	ldr	r3, [r7, #24]
 8026fb8:	4413      	add	r3, r2
 8026fba:	60fb      	str	r3, [r7, #12]
	for(i = 0 ; i < siz ;  ) {
 8026fbc:	69fa      	ldr	r2, [r7, #28]
 8026fbe:	687b      	ldr	r3, [r7, #4]
 8026fc0:	429a      	cmp	r2, r3
 8026fc2:	dbbd      	blt.n	8026f40 <hexdump+0x18>
 8026fc4:	e000      	b.n	8026fc8 <hexdump+0xa0>
		return;
 8026fc6:	bf00      	nop
	}
}
 8026fc8:	3720      	adds	r7, #32
 8026fca:	46bd      	mov	sp, r7
 8026fcc:	bd80      	pop	{r7, pc}

08026fce <MPU_Config>:
CRC_HandleTypeDef hcrc;



void MPU_Config(void)
{
 8026fce:	b580      	push	{r7, lr}
 8026fd0:	b084      	sub	sp, #16
 8026fd2:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8026fd4:	463b      	mov	r3, r7
 8026fd6:	2200      	movs	r2, #0
 8026fd8:	601a      	str	r2, [r3, #0]
 8026fda:	605a      	str	r2, [r3, #4]
 8026fdc:	609a      	str	r2, [r3, #8]
 8026fde:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 8026fe0:	f003 fcb0 	bl	802a944 <HAL_MPU_Disable>

    /** 전체 메모리 영역 설정 - 기본설정[0x60000000~0xDFFFFFFF:Strongly ordered]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8026fe4:	2301      	movs	r3, #1
 8026fe6:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8026fe8:	2300      	movs	r3, #0
 8026fea:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x00;
 8026fec:	2300      	movs	r3, #0
 8026fee:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8026ff0:	231f      	movs	r3, #31
 8026ff2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x87;
 8026ff4:	2387      	movs	r3, #135	; 0x87
 8026ff6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8026ff8:	2303      	movs	r3, #3
 8026ffa:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8026ffc:	2300      	movs	r3, #0
 8026ffe:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8027000:	2301      	movs	r3, #1
 8027002:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8027004:	2301      	movs	r3, #1
 8027006:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8027008:	2300      	movs	r3, #0
 802700a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 802700c:	2300      	movs	r3, #0
 802700e:	73fb      	strb	r3, [r7, #15]


    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8027010:	463b      	mov	r3, r7
 8027012:	4618      	mov	r0, r3
 8027014:	f003 fcce 	bl	802a9b4 <HAL_MPU_ConfigRegion>

    /** FPGA[0x60000000, 1K]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8027018:	2301      	movs	r3, #1
 802701a:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 802701c:	2301      	movs	r3, #1
 802701e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x60000000;
 8027020:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8027024:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8027026:	2309      	movs	r3, #9
 8027028:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 802702a:	2300      	movs	r3, #0
 802702c:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 802702e:	2300      	movs	r3, #0
 8027030:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8027032:	2303      	movs	r3, #3
 8027034:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8027036:	2301      	movs	r3, #1
 8027038:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 802703a:	2301      	movs	r3, #1
 802703c:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 802703e:	2300      	movs	r3, #0
 8027040:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8027042:	2300      	movs	r3, #0
 8027044:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8027046:	463b      	mov	r3, r7
 8027048:	4618      	mov	r0, r3
 802704a:	f003 fcb3 	bl	802a9b4 <HAL_MPU_ConfigRegion>

    /** NAND[0x80000000, 128M]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 802704e:	2301      	movs	r3, #1
 8027050:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8027052:	2302      	movs	r3, #2
 8027054:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x80000000;
 8027056:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802705a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 802705c:	231a      	movs	r3, #26
 802705e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8027060:	2300      	movs	r3, #0
 8027062:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8027064:	2300      	movs	r3, #0
 8027066:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8027068:	2303      	movs	r3, #3
 802706a:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 802706c:	2301      	movs	r3, #1
 802706e:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8027070:	2301      	movs	r3, #1
 8027072:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8027074:	2300      	movs	r3, #0
 8027076:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8027078:	2300      	movs	r3, #0
 802707a:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 802707c:	463b      	mov	r3, r7
 802707e:	4618      	mov	r0, r3
 8027080:	f003 fc98 	bl	802a9b4 <HAL_MPU_ConfigRegion>

    /** SDRAM[0xD0000000] - IS45S16400J : 1 Mega Bits x 16 Bits x 4 Banks(64MBit)
     **  TEX:1, C:1, B:1, S:0 - MemType:Normal -> Write back, write and read allocate
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8027084:	2301      	movs	r3, #1
 8027086:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8027088:	2303      	movs	r3, #3
 802708a:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0xD0000000;
 802708c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8027090:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8027092:	2316      	movs	r3, #22
 8027094:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8027096:	2300      	movs	r3, #0
 8027098:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 802709a:	2301      	movs	r3, #1
 802709c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 802709e:	2303      	movs	r3, #3
 80270a0:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80270a2:	2301      	movs	r3, #1
 80270a4:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80270a6:	2300      	movs	r3, #0
 80270a8:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80270aa:	2301      	movs	r3, #1
 80270ac:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80270ae:	2301      	movs	r3, #1
 80270b0:	73fb      	strb	r3, [r7, #15]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80270b2:	463b      	mov	r3, r7
 80270b4:	4618      	mov	r0, r3
 80270b6:	f003 fc7d 	bl	802a9b4 <HAL_MPU_ConfigRegion>

    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80270ba:	2004      	movs	r0, #4
 80270bc:	f003 fc5a 	bl	802a974 <HAL_MPU_Enable>
}
 80270c0:	bf00      	nop
 80270c2:	3710      	adds	r7, #16
 80270c4:	46bd      	mov	sp, r7
 80270c6:	bd80      	pop	{r7, pc}

080270c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80270c8:	b580      	push	{r7, lr}
 80270ca:	b09e      	sub	sp, #120	; 0x78
 80270cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80270ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80270d2:	224c      	movs	r2, #76	; 0x4c
 80270d4:	2100      	movs	r1, #0
 80270d6:	4618      	mov	r0, r3
 80270d8:	f009 fd46 	bl	8030b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80270dc:	f107 030c 	add.w	r3, r7, #12
 80270e0:	2220      	movs	r2, #32
 80270e2:	2100      	movs	r1, #0
 80270e4:	4618      	mov	r0, r3
 80270e6:	f009 fd3f 	bl	8030b68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80270ea:	2002      	movs	r0, #2
 80270ec:	f004 fa02 	bl	802b4f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80270f0:	2300      	movs	r3, #0
 80270f2:	60bb      	str	r3, [r7, #8]
 80270f4:	4b4e      	ldr	r3, [pc, #312]	; (8027230 <SystemClock_Config+0x168>)
 80270f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80270f8:	4a4d      	ldr	r2, [pc, #308]	; (8027230 <SystemClock_Config+0x168>)
 80270fa:	f023 0301 	bic.w	r3, r3, #1
 80270fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8027100:	4b4b      	ldr	r3, [pc, #300]	; (8027230 <SystemClock_Config+0x168>)
 8027102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027104:	f003 0301 	and.w	r3, r3, #1
 8027108:	60bb      	str	r3, [r7, #8]
 802710a:	4b4a      	ldr	r3, [pc, #296]	; (8027234 <SystemClock_Config+0x16c>)
 802710c:	699b      	ldr	r3, [r3, #24]
 802710e:	4a49      	ldr	r2, [pc, #292]	; (8027234 <SystemClock_Config+0x16c>)
 8027110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8027114:	6193      	str	r3, [r2, #24]
 8027116:	4b47      	ldr	r3, [pc, #284]	; (8027234 <SystemClock_Config+0x16c>)
 8027118:	699b      	ldr	r3, [r3, #24]
 802711a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802711e:	60bb      	str	r3, [r7, #8]
 8027120:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8027122:	bf00      	nop
 8027124:	4b43      	ldr	r3, [pc, #268]	; (8027234 <SystemClock_Config+0x16c>)
 8027126:	699b      	ldr	r3, [r3, #24]
 8027128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802712c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027130:	d1f8      	bne.n	8027124 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027132:	4b41      	ldr	r3, [pc, #260]	; (8027238 <SystemClock_Config+0x170>)
 8027134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8027138:	4a3f      	ldr	r2, [pc, #252]	; (8027238 <SystemClock_Config+0x170>)
 802713a:	f043 0302 	orr.w	r3, r3, #2
 802713e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8027142:	4b3d      	ldr	r3, [pc, #244]	; (8027238 <SystemClock_Config+0x170>)
 8027144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8027148:	f003 0302 	and.w	r3, r3, #2
 802714c:	607b      	str	r3, [r7, #4]
 802714e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8027150:	2300      	movs	r3, #0
 8027152:	603b      	str	r3, [r7, #0]
 8027154:	4b37      	ldr	r3, [pc, #220]	; (8027234 <SystemClock_Config+0x16c>)
 8027156:	699b      	ldr	r3, [r3, #24]
 8027158:	4a36      	ldr	r2, [pc, #216]	; (8027234 <SystemClock_Config+0x16c>)
 802715a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802715e:	6193      	str	r3, [r2, #24]
 8027160:	4b34      	ldr	r3, [pc, #208]	; (8027234 <SystemClock_Config+0x16c>)
 8027162:	699b      	ldr	r3, [r3, #24]
 8027164:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8027168:	603b      	str	r3, [r7, #0]
 802716a:	4b31      	ldr	r3, [pc, #196]	; (8027230 <SystemClock_Config+0x168>)
 802716c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802716e:	4a30      	ldr	r2, [pc, #192]	; (8027230 <SystemClock_Config+0x168>)
 8027170:	f043 0301 	orr.w	r3, r3, #1
 8027174:	62d3      	str	r3, [r2, #44]	; 0x2c
 8027176:	4b2e      	ldr	r3, [pc, #184]	; (8027230 <SystemClock_Config+0x168>)
 8027178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802717a:	f003 0301 	and.w	r3, r3, #1
 802717e:	603b      	str	r3, [r7, #0]
 8027180:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8027182:	bf00      	nop
 8027184:	4b2b      	ldr	r3, [pc, #172]	; (8027234 <SystemClock_Config+0x16c>)
 8027186:	699b      	ldr	r3, [r3, #24]
 8027188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802718c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027190:	d1f8      	bne.n	8027184 <SystemClock_Config+0xbc>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8027192:	f004 f99f 	bl	802b4d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8027196:	f003 fab9 	bl	802a70c <HAL_GetREVID>
 802719a:	4b27      	ldr	r3, [pc, #156]	; (8027238 <SystemClock_Config+0x170>)
 802719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802719e:	4a26      	ldr	r2, [pc, #152]	; (8027238 <SystemClock_Config+0x170>)
 80271a0:	f023 0318 	bic.w	r3, r3, #24
 80271a4:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80271a6:	2305      	movs	r3, #5
 80271a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80271aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80271ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80271b0:	2301      	movs	r3, #1
 80271b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80271b4:	2302      	movs	r3, #2
 80271b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80271b8:	2302      	movs	r3, #2
 80271ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80271bc:	2305      	movs	r3, #5
 80271be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80271c0:	23c0      	movs	r3, #192	; 0xc0
 80271c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80271c4:	2302      	movs	r3, #2
 80271c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80271c8:	2301      	movs	r3, #1
 80271ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80271cc:	2302      	movs	r3, #2
 80271ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80271d0:	2308      	movs	r3, #8
 80271d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80271d4:	2300      	movs	r3, #0
 80271d6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80271d8:	2300      	movs	r3, #0
 80271da:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80271dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80271e0:	4618      	mov	r0, r3
 80271e2:	f004 f9c1 	bl	802b568 <HAL_RCC_OscConfig>
 80271e6:	4603      	mov	r3, r0
 80271e8:	2b00      	cmp	r3, #0
 80271ea:	d001      	beq.n	80271f0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80271ec:	f000 ff8d 	bl	802810a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80271f0:	233f      	movs	r3, #63	; 0x3f
 80271f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80271f4:	2303      	movs	r3, #3
 80271f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80271f8:	2300      	movs	r3, #0
 80271fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80271fc:	2308      	movs	r3, #8
 80271fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8027200:	2340      	movs	r3, #64	; 0x40
 8027202:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8027204:	2340      	movs	r3, #64	; 0x40
 8027206:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8027208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802720c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 802720e:	2340      	movs	r3, #64	; 0x40
 8027210:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8027212:	f107 030c 	add.w	r3, r7, #12
 8027216:	2104      	movs	r1, #4
 8027218:	4618      	mov	r0, r3
 802721a:	f004 fdff 	bl	802be1c <HAL_RCC_ClockConfig>
 802721e:	4603      	mov	r3, r0
 8027220:	2b00      	cmp	r3, #0
 8027222:	d001      	beq.n	8027228 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8027224:	f000 ff71 	bl	802810a <Error_Handler>
  }
}
 8027228:	bf00      	nop
 802722a:	3778      	adds	r7, #120	; 0x78
 802722c:	46bd      	mov	sp, r7
 802722e:	bd80      	pop	{r7, pc}
 8027230:	58000400 	.word	0x58000400
 8027234:	58024800 	.word	0x58024800
 8027238:	58024400 	.word	0x58024400

0802723c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 802723c:	b580      	push	{r7, lr}
 802723e:	b08e      	sub	sp, #56	; 0x38
 8027240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8027242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027246:	2200      	movs	r2, #0
 8027248:	601a      	str	r2, [r3, #0]
 802724a:	605a      	str	r2, [r3, #4]
 802724c:	609a      	str	r2, [r3, #8]
 802724e:	60da      	str	r2, [r3, #12]
 8027250:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8027252:	4b95      	ldr	r3, [pc, #596]	; (80274a8 <MX_GPIO_Init+0x26c>)
 8027254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8027258:	4a93      	ldr	r2, [pc, #588]	; (80274a8 <MX_GPIO_Init+0x26c>)
 802725a:	f043 0304 	orr.w	r3, r3, #4
 802725e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8027262:	4b91      	ldr	r3, [pc, #580]	; (80274a8 <MX_GPIO_Init+0x26c>)
 8027264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8027268:	f003 0304 	and.w	r3, r3, #4
 802726c:	623b      	str	r3, [r7, #32]
 802726e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8027270:	4b8d      	ldr	r3, [pc, #564]	; (80274a8 <MX_GPIO_Init+0x26c>)
 8027272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8027276:	4a8c      	ldr	r2, [pc, #560]	; (80274a8 <MX_GPIO_Init+0x26c>)
 8027278:	f043 0320 	orr.w	r3, r3, #32
 802727c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8027280:	4b89      	ldr	r3, [pc, #548]	; (80274a8 <MX_GPIO_Init+0x26c>)
 8027282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8027286:	f003 0320 	and.w	r3, r3, #32
 802728a:	61fb      	str	r3, [r7, #28]
 802728c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802728e:	4b86      	ldr	r3, [pc, #536]	; (80274a8 <MX_GPIO_Init+0x26c>)
 8027290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8027294:	4a84      	ldr	r2, [pc, #528]	; (80274a8 <MX_GPIO_Init+0x26c>)
 8027296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802729a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802729e:	4b82      	ldr	r3, [pc, #520]	; (80274a8 <MX_GPIO_Init+0x26c>)
 80272a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80272a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80272a8:	61bb      	str	r3, [r7, #24]
 80272aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80272ac:	4b7e      	ldr	r3, [pc, #504]	; (80274a8 <MX_GPIO_Init+0x26c>)
 80272ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80272b2:	4a7d      	ldr	r2, [pc, #500]	; (80274a8 <MX_GPIO_Init+0x26c>)
 80272b4:	f043 0301 	orr.w	r3, r3, #1
 80272b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80272bc:	4b7a      	ldr	r3, [pc, #488]	; (80274a8 <MX_GPIO_Init+0x26c>)
 80272be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80272c2:	f003 0301 	and.w	r3, r3, #1
 80272c6:	617b      	str	r3, [r7, #20]
 80272c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80272ca:	4b77      	ldr	r3, [pc, #476]	; (80274a8 <MX_GPIO_Init+0x26c>)
 80272cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80272d0:	4a75      	ldr	r2, [pc, #468]	; (80274a8 <MX_GPIO_Init+0x26c>)
 80272d2:	f043 0302 	orr.w	r3, r3, #2
 80272d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80272da:	4b73      	ldr	r3, [pc, #460]	; (80274a8 <MX_GPIO_Init+0x26c>)
 80272dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80272e0:	f003 0302 	and.w	r3, r3, #2
 80272e4:	613b      	str	r3, [r7, #16]
 80272e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80272e8:	4b6f      	ldr	r3, [pc, #444]	; (80274a8 <MX_GPIO_Init+0x26c>)
 80272ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80272ee:	4a6e      	ldr	r2, [pc, #440]	; (80274a8 <MX_GPIO_Init+0x26c>)
 80272f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80272f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80272f8:	4b6b      	ldr	r3, [pc, #428]	; (80274a8 <MX_GPIO_Init+0x26c>)
 80272fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80272fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027302:	60fb      	str	r3, [r7, #12]
 8027304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8027306:	4b68      	ldr	r3, [pc, #416]	; (80274a8 <MX_GPIO_Init+0x26c>)
 8027308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802730c:	4a66      	ldr	r2, [pc, #408]	; (80274a8 <MX_GPIO_Init+0x26c>)
 802730e:	f043 0310 	orr.w	r3, r3, #16
 8027312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8027316:	4b64      	ldr	r3, [pc, #400]	; (80274a8 <MX_GPIO_Init+0x26c>)
 8027318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802731c:	f003 0310 	and.w	r3, r3, #16
 8027320:	60bb      	str	r3, [r7, #8]
 8027322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8027324:	4b60      	ldr	r3, [pc, #384]	; (80274a8 <MX_GPIO_Init+0x26c>)
 8027326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802732a:	4a5f      	ldr	r2, [pc, #380]	; (80274a8 <MX_GPIO_Init+0x26c>)
 802732c:	f043 0308 	orr.w	r3, r3, #8
 8027330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8027334:	4b5c      	ldr	r3, [pc, #368]	; (80274a8 <MX_GPIO_Init+0x26c>)
 8027336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802733a:	f003 0308 	and.w	r3, r3, #8
 802733e:	607b      	str	r3, [r7, #4]
 8027340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, UPS_CHK_Pin, GPIO_PIN_RESET);									//Default Low / Active High	 New Board
 8027342:	2200      	movs	r2, #0
 8027344:	2140      	movs	r1, #64	; 0x40
 8027346:	4859      	ldr	r0, [pc, #356]	; (80274ac <MX_GPIO_Init+0x270>)
 8027348:	f004 f890 	bl	802b46c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOF, UPS_SHDN_Pin, GPIO_PIN_RESET);									//Default High / Active Low	 New Board
 802734c:	2200      	movs	r2, #0
 802734e:	2180      	movs	r1, #128	; 0x80
 8027350:	4856      	ldr	r0, [pc, #344]	; (80274ac <MX_GPIO_Init+0x270>)
 8027352:	f004 f88b 	bl	802b46c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(WDT_CONTROL_GPIO_Port, WDT_CONTROL_Pin, GPIO_PIN_RESET);				//WDT Enalbe   New Board
 8027356:	2200      	movs	r2, #0
 8027358:	f44f 7180 	mov.w	r1, #256	; 0x100
 802735c:	4854      	ldr	r0, [pc, #336]	; (80274b0 <MX_GPIO_Init+0x274>)
 802735e:	f004 f885 	bl	802b46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Serial_flash_CS_Pin|BUZZ_CON_Pin, GPIO_PIN_RESET);
 8027362:	2200      	movs	r2, #0
 8027364:	f241 0110 	movw	r1, #4112	; 0x1010
 8027368:	4851      	ldr	r0, [pc, #324]	; (80274b0 <MX_GPIO_Init+0x274>)
 802736a:	f004 f87f 	bl	802b46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STS_LED1_Pin|STS_LED2_Pin|STS_LED3_Pin|STS_LED4_Pin, GPIO_PIN_RESET);
 802736e:	2200      	movs	r2, #0
 8027370:	f44f 711c 	mov.w	r1, #624	; 0x270
 8027374:	484f      	ldr	r0, [pc, #316]	; (80274b4 <MX_GPIO_Init+0x278>)
 8027376:	f004 f879 	bl	802b46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EMG_GPIO_Port, EMG_Pin, GPIO_PIN_RESET);
 802737a:	2200      	movs	r2, #0
 802737c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8027380:	484d      	ldr	r0, [pc, #308]	; (80274b8 <MX_GPIO_Init+0x27c>)
 8027382:	f004 f873 	bl	802b46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WDT_GPIO_Port, WDT_Pin, GPIO_PIN_SET);
 8027386:	2201      	movs	r2, #1
 8027388:	2104      	movs	r1, #4
 802738a:	484c      	ldr	r0, [pc, #304]	; (80274bc <MX_GPIO_Init+0x280>)
 802738c:	f004 f86e 	bl	802b46c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UPS_CHK_Pin UPS_SHDN_Pin */
  GPIO_InitStruct.Pin = UPS_CHK_Pin|UPS_SHDN_Pin;
 8027390:	23c0      	movs	r3, #192	; 0xc0
 8027392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8027394:	2301      	movs	r3, #1
 8027396:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027398:	2300      	movs	r3, #0
 802739a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802739c:	2300      	movs	r3, #0
 802739e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80273a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80273a4:	4619      	mov	r1, r3
 80273a6:	4841      	ldr	r0, [pc, #260]	; (80274ac <MX_GPIO_Init+0x270>)
 80273a8:	f003 fd8e 	bl	802aec8 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = WDT_CONTROL_Pin;
 80273ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80273b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80273b2:	2301      	movs	r3, #1
 80273b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80273b6:	2300      	movs	r3, #0
 80273b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80273ba:	2300      	movs	r3, #0
 80273bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WDT_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80273be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80273c2:	4619      	mov	r1, r3
 80273c4:	483a      	ldr	r0, [pc, #232]	; (80274b0 <MX_GPIO_Init+0x274>)
 80273c6:	f003 fd7f 	bl	802aec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : nUPS_LINE_FAIL_Pin nUPS_LOW_BAT_Pin nUPS_CONN_Pin */
  GPIO_InitStruct.Pin = nUPS_LINE_FAIL_Pin|nUPS_LOW_BAT_Pin|nUPS_CONN_Pin;
 80273ca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80273ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80273d0:	2300      	movs	r3, #0
 80273d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80273d4:	2301      	movs	r3, #1
 80273d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80273d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80273dc:	4619      	mov	r1, r3
 80273de:	4833      	ldr	r0, [pc, #204]	; (80274ac <MX_GPIO_Init+0x270>)
 80273e0:	f003 fd72 	bl	802aec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SP_SW1_Pin SP_SW2_Pin */
  GPIO_InitStruct.Pin = SP_SW1_Pin|SP_SW2_Pin;
 80273e4:	2303      	movs	r3, #3
 80273e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80273e8:	2300      	movs	r3, #0
 80273ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80273ec:	2301      	movs	r3, #1
 80273ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80273f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80273f4:	4619      	mov	r1, r3
 80273f6:	482f      	ldr	r0, [pc, #188]	; (80274b4 <MX_GPIO_Init+0x278>)
 80273f8:	f003 fd66 	bl	802aec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Serial_flash_CS_Pin BUZZ_CON_Pin */
  GPIO_InitStruct.Pin = Serial_flash_CS_Pin|BUZZ_CON_Pin;
 80273fc:	f241 0310 	movw	r3, #4112	; 0x1010
 8027400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8027402:	2301      	movs	r3, #1
 8027404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027406:	2300      	movs	r3, #0
 8027408:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802740a:	2300      	movs	r3, #0
 802740c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802740e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027412:	4619      	mov	r1, r3
 8027414:	4826      	ldr	r0, [pc, #152]	; (80274b0 <MX_GPIO_Init+0x274>)
 8027416:	f003 fd57 	bl	802aec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STS_LED1_Pin STS_LED2_Pin STS_LED3_Pin STS_LED4_Pin */
  GPIO_InitStruct.Pin = STS_LED1_Pin|STS_LED2_Pin|STS_LED3_Pin|STS_LED4_Pin;
 802741a:	f44f 731c 	mov.w	r3, #624	; 0x270
 802741e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8027420:	2301      	movs	r3, #1
 8027422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027424:	2300      	movs	r3, #0
 8027426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8027428:	2300      	movs	r3, #0
 802742a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802742c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027430:	4619      	mov	r1, r3
 8027432:	4820      	ldr	r0, [pc, #128]	; (80274b4 <MX_GPIO_Init+0x278>)
 8027434:	f003 fd48 	bl	802aec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DipSW1_Pin DipSW2_Pin DipSW3_Pin DipSW4_Pin
                           DipSW5_Pin DipSW6_Pin DipSW7_Pin DipSW8_Pin */
  GPIO_InitStruct.Pin = DipSW1_Pin|DipSW2_Pin|DipSW3_Pin|DipSW4_Pin
 8027438:	23ff      	movs	r3, #255	; 0xff
 802743a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DipSW5_Pin|DipSW6_Pin|DipSW7_Pin|DipSW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802743c:	2300      	movs	r3, #0
 802743e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8027440:	2301      	movs	r3, #1
 8027442:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DipSW_GPIO_Port, &GPIO_InitStruct);
 8027444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027448:	4619      	mov	r1, r3
 802744a:	481b      	ldr	r0, [pc, #108]	; (80274b8 <MX_GPIO_Init+0x27c>)
 802744c:	f003 fd3c 	bl	802aec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SP_SEN1_Pin SP_SEN2_Pin */
  GPIO_InitStruct.Pin = SP_SEN1_Pin|SP_SEN2_Pin;
 8027450:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8027454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8027456:	2300      	movs	r3, #0
 8027458:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802745a:	2301      	movs	r3, #1
 802745c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802745e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027462:	4619      	mov	r1, r3
 8027464:	4812      	ldr	r0, [pc, #72]	; (80274b0 <MX_GPIO_Init+0x274>)
 8027466:	f003 fd2f 	bl	802aec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WDT_Pin */
  GPIO_InitStruct.Pin = WDT_Pin;
 802746a:	2304      	movs	r3, #4
 802746c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802746e:	2301      	movs	r3, #1
 8027470:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027472:	2300      	movs	r3, #0
 8027474:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8027476:	2300      	movs	r3, #0
 8027478:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WDT_GPIO_Port, &GPIO_InitStruct);
 802747a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802747e:	4619      	mov	r1, r3
 8027480:	480e      	ldr	r0, [pc, #56]	; (80274bc <MX_GPIO_Init+0x280>)
 8027482:	f003 fd21 	bl	802aec8 <HAL_GPIO_Init>


  /*Configure GPIO pin : EMG_Pin */
  GPIO_InitStruct.Pin = EMG_Pin;
 8027486:	f44f 7300 	mov.w	r3, #512	; 0x200
 802748a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802748c:	2300      	movs	r3, #0
 802748e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8027490:	2301      	movs	r3, #1
 8027492:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EMG_GPIO_Port, &GPIO_InitStruct);
 8027494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027498:	4619      	mov	r1, r3
 802749a:	4807      	ldr	r0, [pc, #28]	; (80274b8 <MX_GPIO_Init+0x27c>)
 802749c:	f003 fd14 	bl	802aec8 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80274a0:	bf00      	nop
 80274a2:	3738      	adds	r7, #56	; 0x38
 80274a4:	46bd      	mov	sp, r7
 80274a6:	bd80      	pop	{r7, pc}
 80274a8:	58024400 	.word	0x58024400
 80274ac:	58021400 	.word	0x58021400
 80274b0:	58020000 	.word	0x58020000
 80274b4:	58020800 	.word	0x58020800
 80274b8:	58020400 	.word	0x58020400
 80274bc:	58020c00 	.word	0x58020c00

080274c0 <MX_FMC_Init>:
 * @retval None
 */


static void MX_FMC_Init(void)
{
 80274c0:	b580      	push	{r7, lr}
 80274c2:	b088      	sub	sp, #32
 80274c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80274c6:	1d3b      	adds	r3, r7, #4
 80274c8:	2200      	movs	r2, #0
 80274ca:	601a      	str	r2, [r3, #0]
 80274cc:	605a      	str	r2, [r3, #4]
 80274ce:	609a      	str	r2, [r3, #8]
 80274d0:	60da      	str	r2, [r3, #12]
 80274d2:	611a      	str	r2, [r3, #16]
 80274d4:	615a      	str	r2, [r3, #20]
 80274d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80274d8:	4b4f      	ldr	r3, [pc, #316]	; (8027618 <MX_FMC_Init+0x158>)
 80274da:	4a50      	ldr	r2, [pc, #320]	; (802761c <MX_FMC_Init+0x15c>)
 80274dc:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80274de:	4b4e      	ldr	r3, [pc, #312]	; (8027618 <MX_FMC_Init+0x158>)
 80274e0:	4a4f      	ldr	r2, [pc, #316]	; (8027620 <MX_FMC_Init+0x160>)
 80274e2:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80274e4:	4b4c      	ldr	r3, [pc, #304]	; (8027618 <MX_FMC_Init+0x158>)
 80274e6:	2200      	movs	r2, #0
 80274e8:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80274ea:	4b4b      	ldr	r3, [pc, #300]	; (8027618 <MX_FMC_Init+0x158>)
 80274ec:	2200      	movs	r2, #0
 80274ee:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80274f0:	4b49      	ldr	r3, [pc, #292]	; (8027618 <MX_FMC_Init+0x158>)
 80274f2:	2200      	movs	r2, #0
 80274f4:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80274f6:	4b48      	ldr	r3, [pc, #288]	; (8027618 <MX_FMC_Init+0x158>)
 80274f8:	2200      	movs	r2, #0
 80274fa:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80274fc:	4b46      	ldr	r3, [pc, #280]	; (8027618 <MX_FMC_Init+0x158>)
 80274fe:	2200      	movs	r2, #0
 8027500:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8027502:	4b45      	ldr	r3, [pc, #276]	; (8027618 <MX_FMC_Init+0x158>)
 8027504:	2200      	movs	r2, #0
 8027506:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8027508:	4b43      	ldr	r3, [pc, #268]	; (8027618 <MX_FMC_Init+0x158>)
 802750a:	2200      	movs	r2, #0
 802750c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 802750e:	4b42      	ldr	r3, [pc, #264]	; (8027618 <MX_FMC_Init+0x158>)
 8027510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8027514:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8027516:	4b40      	ldr	r3, [pc, #256]	; (8027618 <MX_FMC_Init+0x158>)
 8027518:	2200      	movs	r2, #0
 802751a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 802751c:	4b3e      	ldr	r3, [pc, #248]	; (8027618 <MX_FMC_Init+0x158>)
 802751e:	2200      	movs	r2, #0
 8027520:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8027522:	4b3d      	ldr	r3, [pc, #244]	; (8027618 <MX_FMC_Init+0x158>)
 8027524:	2200      	movs	r2, #0
 8027526:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8027528:	4b3b      	ldr	r3, [pc, #236]	; (8027618 <MX_FMC_Init+0x158>)
 802752a:	2200      	movs	r2, #0
 802752c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 802752e:	4b3a      	ldr	r3, [pc, #232]	; (8027618 <MX_FMC_Init+0x158>)
 8027530:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8027534:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8027536:	4b38      	ldr	r3, [pc, #224]	; (8027618 <MX_FMC_Init+0x158>)
 8027538:	2200      	movs	r2, #0
 802753a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 802753c:	4b36      	ldr	r3, [pc, #216]	; (8027618 <MX_FMC_Init+0x158>)
 802753e:	2200      	movs	r2, #0
 8027540:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8027542:	230f      	movs	r3, #15
 8027544:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8027546:	230f      	movs	r3, #15
 8027548:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 802754a:	23ff      	movs	r3, #255	; 0xff
 802754c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 802754e:	230f      	movs	r3, #15
 8027550:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8027552:	2310      	movs	r3, #16
 8027554:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8027556:	2311      	movs	r3, #17
 8027558:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 802755a:	2300      	movs	r3, #0
 802755c:	61fb      	str	r3, [r7, #28]


  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 802755e:	1d3b      	adds	r3, r7, #4
 8027560:	2200      	movs	r2, #0
 8027562:	4619      	mov	r1, r3
 8027564:	482c      	ldr	r0, [pc, #176]	; (8027618 <MX_FMC_Init+0x158>)
 8027566:	f007 fc55 	bl	802ee14 <HAL_SRAM_Init>
 802756a:	4603      	mov	r3, r0
 802756c:	2b00      	cmp	r3, #0
 802756e:	d001      	beq.n	8027574 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8027570:	f000 fdcb 	bl	802810a <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8027574:	4b2b      	ldr	r3, [pc, #172]	; (8027624 <MX_FMC_Init+0x164>)
 8027576:	4a29      	ldr	r2, [pc, #164]	; (802761c <MX_FMC_Init+0x15c>)
 8027578:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 802757a:	4b2a      	ldr	r3, [pc, #168]	; (8027624 <MX_FMC_Init+0x164>)
 802757c:	4a28      	ldr	r2, [pc, #160]	; (8027620 <MX_FMC_Init+0x160>)
 802757e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK2;
 8027580:	4b28      	ldr	r3, [pc, #160]	; (8027624 <MX_FMC_Init+0x164>)
 8027582:	2202      	movs	r2, #2
 8027584:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8027586:	4b27      	ldr	r3, [pc, #156]	; (8027624 <MX_FMC_Init+0x164>)
 8027588:	2200      	movs	r2, #0
 802758a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 802758c:	4b25      	ldr	r3, [pc, #148]	; (8027624 <MX_FMC_Init+0x164>)
 802758e:	2200      	movs	r2, #0
 8027590:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8027592:	4b24      	ldr	r3, [pc, #144]	; (8027624 <MX_FMC_Init+0x164>)
 8027594:	2200      	movs	r2, #0
 8027596:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8027598:	4b22      	ldr	r3, [pc, #136]	; (8027624 <MX_FMC_Init+0x164>)
 802759a:	2200      	movs	r2, #0
 802759c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 802759e:	4b21      	ldr	r3, [pc, #132]	; (8027624 <MX_FMC_Init+0x164>)
 80275a0:	2200      	movs	r2, #0
 80275a2:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80275a4:	4b1f      	ldr	r3, [pc, #124]	; (8027624 <MX_FMC_Init+0x164>)
 80275a6:	2200      	movs	r2, #0
 80275a8:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80275aa:	4b1e      	ldr	r3, [pc, #120]	; (8027624 <MX_FMC_Init+0x164>)
 80275ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80275b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80275b2:	4b1c      	ldr	r3, [pc, #112]	; (8027624 <MX_FMC_Init+0x164>)
 80275b4:	2200      	movs	r2, #0
 80275b6:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80275b8:	4b1a      	ldr	r3, [pc, #104]	; (8027624 <MX_FMC_Init+0x164>)
 80275ba:	2200      	movs	r2, #0
 80275bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80275be:	4b19      	ldr	r3, [pc, #100]	; (8027624 <MX_FMC_Init+0x164>)
 80275c0:	2200      	movs	r2, #0
 80275c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80275c4:	4b17      	ldr	r3, [pc, #92]	; (8027624 <MX_FMC_Init+0x164>)
 80275c6:	2200      	movs	r2, #0
 80275c8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 80275ca:	4b16      	ldr	r3, [pc, #88]	; (8027624 <MX_FMC_Init+0x164>)
 80275cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80275d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80275d2:	4b14      	ldr	r3, [pc, #80]	; (8027624 <MX_FMC_Init+0x164>)
 80275d4:	2200      	movs	r2, #0
 80275d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80275d8:	4b12      	ldr	r3, [pc, #72]	; (8027624 <MX_FMC_Init+0x164>)
 80275da:	2200      	movs	r2, #0
 80275dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80275de:	230f      	movs	r3, #15
 80275e0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80275e2:	230f      	movs	r3, #15
 80275e4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80275e6:	23ff      	movs	r3, #255	; 0xff
 80275e8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80275ea:	230f      	movs	r3, #15
 80275ec:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80275ee:	2310      	movs	r3, #16
 80275f0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80275f2:	2311      	movs	r3, #17
 80275f4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80275f6:	2300      	movs	r3, #0
 80275f8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80275fa:	1d3b      	adds	r3, r7, #4
 80275fc:	2200      	movs	r2, #0
 80275fe:	4619      	mov	r1, r3
 8027600:	4808      	ldr	r0, [pc, #32]	; (8027624 <MX_FMC_Init+0x164>)
 8027602:	f007 fc07 	bl	802ee14 <HAL_SRAM_Init>
 8027606:	4603      	mov	r3, r0
 8027608:	2b00      	cmp	r3, #0
 802760a:	d001      	beq.n	8027610 <MX_FMC_Init+0x150>
  {
    Error_Handler( );
 802760c:	f000 fd7d 	bl	802810a <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8027610:	bf00      	nop
 8027612:	3720      	adds	r7, #32
 8027614:	46bd      	mov	sp, r7
 8027616:	bd80      	pop	{r7, pc}
 8027618:	24001e44 	.word	0x24001e44
 802761c:	52004000 	.word	0x52004000
 8027620:	52004104 	.word	0x52004104
 8027624:	24001e90 	.word	0x24001e90

08027628 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 8027628:	b580      	push	{r7, lr}
 802762a:	b084      	sub	sp, #16
 802762c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM7_Init 0 */

    /* USER CODE END TIM7_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 802762e:	1d3b      	adds	r3, r7, #4
 8027630:	2200      	movs	r2, #0
 8027632:	601a      	str	r2, [r3, #0]
 8027634:	605a      	str	r2, [r3, #4]
 8027636:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM7_Init 1 */

    /* USER CODE END TIM7_Init 1 */
    htim7.Instance = TIM7;
 8027638:	4b14      	ldr	r3, [pc, #80]	; (802768c <MX_TIM7_Init+0x64>)
 802763a:	4a15      	ldr	r2, [pc, #84]	; (8027690 <MX_TIM7_Init+0x68>)
 802763c:	601a      	str	r2, [r3, #0]
    htim7.Init.Prescaler = 239;
 802763e:	4b13      	ldr	r3, [pc, #76]	; (802768c <MX_TIM7_Init+0x64>)
 8027640:	22ef      	movs	r2, #239	; 0xef
 8027642:	605a      	str	r2, [r3, #4]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8027644:	4b11      	ldr	r3, [pc, #68]	; (802768c <MX_TIM7_Init+0x64>)
 8027646:	2200      	movs	r2, #0
 8027648:	609a      	str	r2, [r3, #8]
    htim7.Init.Period = 999;
 802764a:	4b10      	ldr	r3, [pc, #64]	; (802768c <MX_TIM7_Init+0x64>)
 802764c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8027650:	60da      	str	r2, [r3, #12]
    htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8027652:	4b0e      	ldr	r3, [pc, #56]	; (802768c <MX_TIM7_Init+0x64>)
 8027654:	2200      	movs	r2, #0
 8027656:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8027658:	480c      	ldr	r0, [pc, #48]	; (802768c <MX_TIM7_Init+0x64>)
 802765a:	f007 fc2b 	bl	802eeb4 <HAL_TIM_Base_Init>
 802765e:	4603      	mov	r3, r0
 8027660:	2b00      	cmp	r3, #0
 8027662:	d001      	beq.n	8027668 <MX_TIM7_Init+0x40>
    {
        Error_Handler();
 8027664:	f000 fd51 	bl	802810a <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8027668:	2300      	movs	r3, #0
 802766a:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802766c:	2300      	movs	r3, #0
 802766e:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8027670:	1d3b      	adds	r3, r7, #4
 8027672:	4619      	mov	r1, r3
 8027674:	4805      	ldr	r0, [pc, #20]	; (802768c <MX_TIM7_Init+0x64>)
 8027676:	f007 fecf 	bl	802f418 <HAL_TIMEx_MasterConfigSynchronization>
 802767a:	4603      	mov	r3, r0
 802767c:	2b00      	cmp	r3, #0
 802767e:	d001      	beq.n	8027684 <MX_TIM7_Init+0x5c>
    {
        Error_Handler();
 8027680:	f000 fd43 	bl	802810a <Error_Handler>
    }
    /* USER CODE BEGIN TIM7_Init 2 */

    /* USER CODE END TIM7_Init 2 */

}
 8027684:	bf00      	nop
 8027686:	3710      	adds	r7, #16
 8027688:	46bd      	mov	sp, r7
 802768a:	bd80      	pop	{r7, pc}
 802768c:	24001b14 	.word	0x24001b14
 8027690:	40001400 	.word	0x40001400

08027694 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8027694:	b580      	push	{r7, lr}
 8027696:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8027698:	4b22      	ldr	r3, [pc, #136]	; (8027724 <MX_USART1_UART_Init+0x90>)
 802769a:	4a23      	ldr	r2, [pc, #140]	; (8027728 <MX_USART1_UART_Init+0x94>)
 802769c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 802769e:	4b21      	ldr	r3, [pc, #132]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80276a4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80276a6:	4b1f      	ldr	r3, [pc, #124]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276a8:	2200      	movs	r2, #0
 80276aa:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80276ac:	4b1d      	ldr	r3, [pc, #116]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276ae:	2200      	movs	r2, #0
 80276b0:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80276b2:	4b1c      	ldr	r3, [pc, #112]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276b4:	2200      	movs	r2, #0
 80276b6:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80276b8:	4b1a      	ldr	r3, [pc, #104]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276ba:	220c      	movs	r2, #12
 80276bc:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80276be:	4b19      	ldr	r3, [pc, #100]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276c0:	2200      	movs	r2, #0
 80276c2:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80276c4:	4b17      	ldr	r3, [pc, #92]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276c6:	2200      	movs	r2, #0
 80276c8:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80276ca:	4b16      	ldr	r3, [pc, #88]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276cc:	2200      	movs	r2, #0
 80276ce:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80276d0:	4b14      	ldr	r3, [pc, #80]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276d2:	2200      	movs	r2, #0
 80276d4:	625a      	str	r2, [r3, #36]	; 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80276d6:	4b13      	ldr	r3, [pc, #76]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276d8:	2200      	movs	r2, #0
 80276da:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80276dc:	4811      	ldr	r0, [pc, #68]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276de:	f007 ff47 	bl	802f570 <HAL_UART_Init>
 80276e2:	4603      	mov	r3, r0
 80276e4:	2b00      	cmp	r3, #0
 80276e6:	d001      	beq.n	80276ec <MX_USART1_UART_Init+0x58>
    {
        Error_Handler();
 80276e8:	f000 fd0f 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80276ec:	2100      	movs	r1, #0
 80276ee:	480d      	ldr	r0, [pc, #52]	; (8027724 <MX_USART1_UART_Init+0x90>)
 80276f0:	f008 ff89 	bl	8030606 <HAL_UARTEx_SetTxFifoThreshold>
 80276f4:	4603      	mov	r3, r0
 80276f6:	2b00      	cmp	r3, #0
 80276f8:	d001      	beq.n	80276fe <MX_USART1_UART_Init+0x6a>
    {
        Error_Handler();
 80276fa:	f000 fd06 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80276fe:	2100      	movs	r1, #0
 8027700:	4808      	ldr	r0, [pc, #32]	; (8027724 <MX_USART1_UART_Init+0x90>)
 8027702:	f008 ffbe 	bl	8030682 <HAL_UARTEx_SetRxFifoThreshold>
 8027706:	4603      	mov	r3, r0
 8027708:	2b00      	cmp	r3, #0
 802770a:	d001      	beq.n	8027710 <MX_USART1_UART_Init+0x7c>
    {
        Error_Handler();
 802770c:	f000 fcfd 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8027710:	4804      	ldr	r0, [pc, #16]	; (8027724 <MX_USART1_UART_Init+0x90>)
 8027712:	f008 ff3f 	bl	8030594 <HAL_UARTEx_DisableFifoMode>
 8027716:	4603      	mov	r3, r0
 8027718:	2b00      	cmp	r3, #0
 802771a:	d001      	beq.n	8027720 <MX_USART1_UART_Init+0x8c>
    {
        Error_Handler();
 802771c:	f000 fcf5 	bl	802810a <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8027720:	bf00      	nop
 8027722:	bd80      	pop	{r7, pc}
 8027724:	24001c88 	.word	0x24001c88
 8027728:	40011000 	.word	0x40011000

0802772c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 802772c:	b580      	push	{r7, lr}
 802772e:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8027730:	4b22      	ldr	r3, [pc, #136]	; (80277bc <MX_USART2_UART_Init+0x90>)
 8027732:	4a23      	ldr	r2, [pc, #140]	; (80277c0 <MX_USART2_UART_Init+0x94>)
 8027734:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8027736:	4b21      	ldr	r3, [pc, #132]	; (80277bc <MX_USART2_UART_Init+0x90>)
 8027738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802773c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802773e:	4b1f      	ldr	r3, [pc, #124]	; (80277bc <MX_USART2_UART_Init+0x90>)
 8027740:	2200      	movs	r2, #0
 8027742:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8027744:	4b1d      	ldr	r3, [pc, #116]	; (80277bc <MX_USART2_UART_Init+0x90>)
 8027746:	2200      	movs	r2, #0
 8027748:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 802774a:	4b1c      	ldr	r3, [pc, #112]	; (80277bc <MX_USART2_UART_Init+0x90>)
 802774c:	2200      	movs	r2, #0
 802774e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8027750:	4b1a      	ldr	r3, [pc, #104]	; (80277bc <MX_USART2_UART_Init+0x90>)
 8027752:	220c      	movs	r2, #12
 8027754:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8027756:	4b19      	ldr	r3, [pc, #100]	; (80277bc <MX_USART2_UART_Init+0x90>)
 8027758:	2200      	movs	r2, #0
 802775a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802775c:	4b17      	ldr	r3, [pc, #92]	; (80277bc <MX_USART2_UART_Init+0x90>)
 802775e:	2200      	movs	r2, #0
 8027760:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8027762:	4b16      	ldr	r3, [pc, #88]	; (80277bc <MX_USART2_UART_Init+0x90>)
 8027764:	2200      	movs	r2, #0
 8027766:	621a      	str	r2, [r3, #32]
    huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8027768:	4b14      	ldr	r3, [pc, #80]	; (80277bc <MX_USART2_UART_Init+0x90>)
 802776a:	2200      	movs	r2, #0
 802776c:	625a      	str	r2, [r3, #36]	; 0x24
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802776e:	4b13      	ldr	r3, [pc, #76]	; (80277bc <MX_USART2_UART_Init+0x90>)
 8027770:	2200      	movs	r2, #0
 8027772:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8027774:	4811      	ldr	r0, [pc, #68]	; (80277bc <MX_USART2_UART_Init+0x90>)
 8027776:	f007 fefb 	bl	802f570 <HAL_UART_Init>
 802777a:	4603      	mov	r3, r0
 802777c:	2b00      	cmp	r3, #0
 802777e:	d001      	beq.n	8027784 <MX_USART2_UART_Init+0x58>
    {
        Error_Handler();
 8027780:	f000 fcc3 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8027784:	2100      	movs	r1, #0
 8027786:	480d      	ldr	r0, [pc, #52]	; (80277bc <MX_USART2_UART_Init+0x90>)
 8027788:	f008 ff3d 	bl	8030606 <HAL_UARTEx_SetTxFifoThreshold>
 802778c:	4603      	mov	r3, r0
 802778e:	2b00      	cmp	r3, #0
 8027790:	d001      	beq.n	8027796 <MX_USART2_UART_Init+0x6a>
    {
        Error_Handler();
 8027792:	f000 fcba 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8027796:	2100      	movs	r1, #0
 8027798:	4808      	ldr	r0, [pc, #32]	; (80277bc <MX_USART2_UART_Init+0x90>)
 802779a:	f008 ff72 	bl	8030682 <HAL_UARTEx_SetRxFifoThreshold>
 802779e:	4603      	mov	r3, r0
 80277a0:	2b00      	cmp	r3, #0
 80277a2:	d001      	beq.n	80277a8 <MX_USART2_UART_Init+0x7c>
    {
        Error_Handler();
 80277a4:	f000 fcb1 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80277a8:	4804      	ldr	r0, [pc, #16]	; (80277bc <MX_USART2_UART_Init+0x90>)
 80277aa:	f008 fef3 	bl	8030594 <HAL_UARTEx_DisableFifoMode>
 80277ae:	4603      	mov	r3, r0
 80277b0:	2b00      	cmp	r3, #0
 80277b2:	d001      	beq.n	80277b8 <MX_USART2_UART_Init+0x8c>
    {
        Error_Handler();
 80277b4:	f000 fca9 	bl	802810a <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 80277b8:	bf00      	nop
 80277ba:	bd80      	pop	{r7, pc}
 80277bc:	24001d1c 	.word	0x24001d1c
 80277c0:	40004400 	.word	0x40004400

080277c4 <MX_USART3_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80277c4:	b580      	push	{r7, lr}
 80277c6:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart3.Instance = USART3;
 80277c8:	4b22      	ldr	r3, [pc, #136]	; (8027854 <MX_USART3_UART_Init+0x90>)
 80277ca:	4a23      	ldr	r2, [pc, #140]	; (8027858 <MX_USART3_UART_Init+0x94>)
 80277cc:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 57600;
 80277ce:	4b21      	ldr	r3, [pc, #132]	; (8027854 <MX_USART3_UART_Init+0x90>)
 80277d0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80277d4:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80277d6:	4b1f      	ldr	r3, [pc, #124]	; (8027854 <MX_USART3_UART_Init+0x90>)
 80277d8:	2200      	movs	r2, #0
 80277da:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 80277dc:	4b1d      	ldr	r3, [pc, #116]	; (8027854 <MX_USART3_UART_Init+0x90>)
 80277de:	2200      	movs	r2, #0
 80277e0:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 80277e2:	4b1c      	ldr	r3, [pc, #112]	; (8027854 <MX_USART3_UART_Init+0x90>)
 80277e4:	2200      	movs	r2, #0
 80277e6:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 80277e8:	4b1a      	ldr	r3, [pc, #104]	; (8027854 <MX_USART3_UART_Init+0x90>)
 80277ea:	220c      	movs	r2, #12
 80277ec:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80277ee:	4b19      	ldr	r3, [pc, #100]	; (8027854 <MX_USART3_UART_Init+0x90>)
 80277f0:	2200      	movs	r2, #0
 80277f2:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80277f4:	4b17      	ldr	r3, [pc, #92]	; (8027854 <MX_USART3_UART_Init+0x90>)
 80277f6:	2200      	movs	r2, #0
 80277f8:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80277fa:	4b16      	ldr	r3, [pc, #88]	; (8027854 <MX_USART3_UART_Init+0x90>)
 80277fc:	2200      	movs	r2, #0
 80277fe:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8027800:	4b14      	ldr	r3, [pc, #80]	; (8027854 <MX_USART3_UART_Init+0x90>)
 8027802:	2200      	movs	r2, #0
 8027804:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8027806:	4b13      	ldr	r3, [pc, #76]	; (8027854 <MX_USART3_UART_Init+0x90>)
 8027808:	2200      	movs	r2, #0
 802780a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK)
 802780c:	4811      	ldr	r0, [pc, #68]	; (8027854 <MX_USART3_UART_Init+0x90>)
 802780e:	f007 feaf 	bl	802f570 <HAL_UART_Init>
 8027812:	4603      	mov	r3, r0
 8027814:	2b00      	cmp	r3, #0
 8027816:	d001      	beq.n	802781c <MX_USART3_UART_Init+0x58>
    {
        Error_Handler();
 8027818:	f000 fc77 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802781c:	2100      	movs	r1, #0
 802781e:	480d      	ldr	r0, [pc, #52]	; (8027854 <MX_USART3_UART_Init+0x90>)
 8027820:	f008 fef1 	bl	8030606 <HAL_UARTEx_SetTxFifoThreshold>
 8027824:	4603      	mov	r3, r0
 8027826:	2b00      	cmp	r3, #0
 8027828:	d001      	beq.n	802782e <MX_USART3_UART_Init+0x6a>
    {
        Error_Handler();
 802782a:	f000 fc6e 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802782e:	2100      	movs	r1, #0
 8027830:	4808      	ldr	r0, [pc, #32]	; (8027854 <MX_USART3_UART_Init+0x90>)
 8027832:	f008 ff26 	bl	8030682 <HAL_UARTEx_SetRxFifoThreshold>
 8027836:	4603      	mov	r3, r0
 8027838:	2b00      	cmp	r3, #0
 802783a:	d001      	beq.n	8027840 <MX_USART3_UART_Init+0x7c>
    {
        Error_Handler();
 802783c:	f000 fc65 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8027840:	4804      	ldr	r0, [pc, #16]	; (8027854 <MX_USART3_UART_Init+0x90>)
 8027842:	f008 fea7 	bl	8030594 <HAL_UARTEx_DisableFifoMode>
 8027846:	4603      	mov	r3, r0
 8027848:	2b00      	cmp	r3, #0
 802784a:	d001      	beq.n	8027850 <MX_USART3_UART_Init+0x8c>
    {
        Error_Handler();
 802784c:	f000 fc5d 	bl	802810a <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */

}
 8027850:	bf00      	nop
 8027852:	bd80      	pop	{r7, pc}
 8027854:	24001db0 	.word	0x24001db0
 8027858:	40004800 	.word	0x40004800

0802785c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 802785c:	b580      	push	{r7, lr}
 802785e:	af00      	add	r7, sp, #0
    /* USER CODE END UART4_Init 0 */

    /* USER CODE BEGIN UART4_Init 1 */

    /* USER CODE END UART4_Init 1 */
    huart4.Instance = UART4;
 8027860:	4b22      	ldr	r3, [pc, #136]	; (80278ec <MX_UART4_Init+0x90>)
 8027862:	4a23      	ldr	r2, [pc, #140]	; (80278f0 <MX_UART4_Init+0x94>)
 8027864:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 38400;
 8027866:	4b21      	ldr	r3, [pc, #132]	; (80278ec <MX_UART4_Init+0x90>)
 8027868:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 802786c:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 802786e:	4b1f      	ldr	r3, [pc, #124]	; (80278ec <MX_UART4_Init+0x90>)
 8027870:	2200      	movs	r2, #0
 8027872:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 8027874:	4b1d      	ldr	r3, [pc, #116]	; (80278ec <MX_UART4_Init+0x90>)
 8027876:	2200      	movs	r2, #0
 8027878:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 802787a:	4b1c      	ldr	r3, [pc, #112]	; (80278ec <MX_UART4_Init+0x90>)
 802787c:	2200      	movs	r2, #0
 802787e:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 8027880:	4b1a      	ldr	r3, [pc, #104]	; (80278ec <MX_UART4_Init+0x90>)
 8027882:	220c      	movs	r2, #12
 8027884:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8027886:	4b19      	ldr	r3, [pc, #100]	; (80278ec <MX_UART4_Init+0x90>)
 8027888:	2200      	movs	r2, #0
 802788a:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802788c:	4b17      	ldr	r3, [pc, #92]	; (80278ec <MX_UART4_Init+0x90>)
 802788e:	2200      	movs	r2, #0
 8027890:	61da      	str	r2, [r3, #28]
    huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8027892:	4b16      	ldr	r3, [pc, #88]	; (80278ec <MX_UART4_Init+0x90>)
 8027894:	2200      	movs	r2, #0
 8027896:	621a      	str	r2, [r3, #32]
    huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8027898:	4b14      	ldr	r3, [pc, #80]	; (80278ec <MX_UART4_Init+0x90>)
 802789a:	2200      	movs	r2, #0
 802789c:	625a      	str	r2, [r3, #36]	; 0x24
    huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802789e:	4b13      	ldr	r3, [pc, #76]	; (80278ec <MX_UART4_Init+0x90>)
 80278a0:	2200      	movs	r2, #0
 80278a2:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart4) != HAL_OK)
 80278a4:	4811      	ldr	r0, [pc, #68]	; (80278ec <MX_UART4_Init+0x90>)
 80278a6:	f007 fe63 	bl	802f570 <HAL_UART_Init>
 80278aa:	4603      	mov	r3, r0
 80278ac:	2b00      	cmp	r3, #0
 80278ae:	d001      	beq.n	80278b4 <MX_UART4_Init+0x58>
    {
        Error_Handler();
 80278b0:	f000 fc2b 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80278b4:	2100      	movs	r1, #0
 80278b6:	480d      	ldr	r0, [pc, #52]	; (80278ec <MX_UART4_Init+0x90>)
 80278b8:	f008 fea5 	bl	8030606 <HAL_UARTEx_SetTxFifoThreshold>
 80278bc:	4603      	mov	r3, r0
 80278be:	2b00      	cmp	r3, #0
 80278c0:	d001      	beq.n	80278c6 <MX_UART4_Init+0x6a>
    {
        Error_Handler();
 80278c2:	f000 fc22 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80278c6:	2100      	movs	r1, #0
 80278c8:	4808      	ldr	r0, [pc, #32]	; (80278ec <MX_UART4_Init+0x90>)
 80278ca:	f008 feda 	bl	8030682 <HAL_UARTEx_SetRxFifoThreshold>
 80278ce:	4603      	mov	r3, r0
 80278d0:	2b00      	cmp	r3, #0
 80278d2:	d001      	beq.n	80278d8 <MX_UART4_Init+0x7c>
    {
        Error_Handler();
 80278d4:	f000 fc19 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80278d8:	4804      	ldr	r0, [pc, #16]	; (80278ec <MX_UART4_Init+0x90>)
 80278da:	f008 fe5b 	bl	8030594 <HAL_UARTEx_DisableFifoMode>
 80278de:	4603      	mov	r3, r0
 80278e0:	2b00      	cmp	r3, #0
 80278e2:	d001      	beq.n	80278e8 <MX_UART4_Init+0x8c>
    {
        Error_Handler();
 80278e4:	f000 fc11 	bl	802810a <Error_Handler>
    }
    /* USER CODE BEGIN UART4_Init 2 */

    /* USER CODE END UART4_Init 2 */

}
 80278e8:	bf00      	nop
 80278ea:	bd80      	pop	{r7, pc}
 80278ec:	24001b60 	.word	0x24001b60
 80278f0:	40004c00 	.word	0x40004c00

080278f4 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80278f4:	b580      	push	{r7, lr}
 80278f6:	af00      	add	r7, sp, #0
    /* USER CODE END UART5_Init 0 */

    /* USER CODE BEGIN UART5_Init 1 */

    /* USER CODE END UART5_Init 1 */
    huart5.Instance = UART5;
 80278f8:	4b22      	ldr	r3, [pc, #136]	; (8027984 <MX_UART5_Init+0x90>)
 80278fa:	4a23      	ldr	r2, [pc, #140]	; (8027988 <MX_UART5_Init+0x94>)
 80278fc:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate = 38400;
 80278fe:	4b21      	ldr	r3, [pc, #132]	; (8027984 <MX_UART5_Init+0x90>)
 8027900:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8027904:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8027906:	4b1f      	ldr	r3, [pc, #124]	; (8027984 <MX_UART5_Init+0x90>)
 8027908:	2200      	movs	r2, #0
 802790a:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits = UART_STOPBITS_1;
 802790c:	4b1d      	ldr	r3, [pc, #116]	; (8027984 <MX_UART5_Init+0x90>)
 802790e:	2200      	movs	r2, #0
 8027910:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity = UART_PARITY_NONE;
 8027912:	4b1c      	ldr	r3, [pc, #112]	; (8027984 <MX_UART5_Init+0x90>)
 8027914:	2200      	movs	r2, #0
 8027916:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode = UART_MODE_TX_RX;
 8027918:	4b1a      	ldr	r3, [pc, #104]	; (8027984 <MX_UART5_Init+0x90>)
 802791a:	220c      	movs	r2, #12
 802791c:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802791e:	4b19      	ldr	r3, [pc, #100]	; (8027984 <MX_UART5_Init+0x90>)
 8027920:	2200      	movs	r2, #0
 8027922:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8027924:	4b17      	ldr	r3, [pc, #92]	; (8027984 <MX_UART5_Init+0x90>)
 8027926:	2200      	movs	r2, #0
 8027928:	61da      	str	r2, [r3, #28]
    huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802792a:	4b16      	ldr	r3, [pc, #88]	; (8027984 <MX_UART5_Init+0x90>)
 802792c:	2200      	movs	r2, #0
 802792e:	621a      	str	r2, [r3, #32]
    huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8027930:	4b14      	ldr	r3, [pc, #80]	; (8027984 <MX_UART5_Init+0x90>)
 8027932:	2200      	movs	r2, #0
 8027934:	625a      	str	r2, [r3, #36]	; 0x24
    huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8027936:	4b13      	ldr	r3, [pc, #76]	; (8027984 <MX_UART5_Init+0x90>)
 8027938:	2200      	movs	r2, #0
 802793a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart5) != HAL_OK)
 802793c:	4811      	ldr	r0, [pc, #68]	; (8027984 <MX_UART5_Init+0x90>)
 802793e:	f007 fe17 	bl	802f570 <HAL_UART_Init>
 8027942:	4603      	mov	r3, r0
 8027944:	2b00      	cmp	r3, #0
 8027946:	d001      	beq.n	802794c <MX_UART5_Init+0x58>
    {
        Error_Handler();
 8027948:	f000 fbdf 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802794c:	2100      	movs	r1, #0
 802794e:	480d      	ldr	r0, [pc, #52]	; (8027984 <MX_UART5_Init+0x90>)
 8027950:	f008 fe59 	bl	8030606 <HAL_UARTEx_SetTxFifoThreshold>
 8027954:	4603      	mov	r3, r0
 8027956:	2b00      	cmp	r3, #0
 8027958:	d001      	beq.n	802795e <MX_UART5_Init+0x6a>
    {
        Error_Handler();
 802795a:	f000 fbd6 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802795e:	2100      	movs	r1, #0
 8027960:	4808      	ldr	r0, [pc, #32]	; (8027984 <MX_UART5_Init+0x90>)
 8027962:	f008 fe8e 	bl	8030682 <HAL_UARTEx_SetRxFifoThreshold>
 8027966:	4603      	mov	r3, r0
 8027968:	2b00      	cmp	r3, #0
 802796a:	d001      	beq.n	8027970 <MX_UART5_Init+0x7c>
    {
        Error_Handler();
 802796c:	f000 fbcd 	bl	802810a <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8027970:	4804      	ldr	r0, [pc, #16]	; (8027984 <MX_UART5_Init+0x90>)
 8027972:	f008 fe0f 	bl	8030594 <HAL_UARTEx_DisableFifoMode>
 8027976:	4603      	mov	r3, r0
 8027978:	2b00      	cmp	r3, #0
 802797a:	d001      	beq.n	8027980 <MX_UART5_Init+0x8c>
    {
        Error_Handler();
 802797c:	f000 fbc5 	bl	802810a <Error_Handler>
    }
    /* USER CODE BEGIN UART5_Init 2 */

    /* USER CODE END UART5_Init 2 */

}
 8027980:	bf00      	nop
 8027982:	bd80      	pop	{r7, pc}
 8027984:	24001bf4 	.word	0x24001bf4
 8027988:	40005000 	.word	0x40005000

0802798c <InitPeripherals>:

}


void InitPeripherals(void)
{
 802798c:	b580      	push	{r7, lr}
 802798e:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 8027990:	f7ff fc54 	bl	802723c <MX_GPIO_Init>
    MX_FMC_Init();
 8027994:	f7ff fd94 	bl	80274c0 <MX_FMC_Init>
    MX_TIM7_Init();
 8027998:	f7ff fe46 	bl	8027628 <MX_TIM7_Init>

    //MX_RTC_Init();

    MX_USART1_UART_Init();
 802799c:	f7ff fe7a 	bl	8027694 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 80279a0:	f7ff fec4 	bl	802772c <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 80279a4:	f7ff ff0e 	bl	80277c4 <MX_USART3_UART_Init>
    MX_UART4_Init();
 80279a8:	f7ff ff58 	bl	802785c <MX_UART4_Init>
    MX_UART5_Init();
 80279ac:	f7ff ffa2 	bl	80278f4 <MX_UART5_Init>
   // MX_SPI1_Init();
    //MX_CRC_Init();

}
 80279b0:	bf00      	nop
 80279b2:	bd80      	pop	{r7, pc}

080279b4 <flash_ready>:
 * Block Erase Time 64-Kbyte : Typ(400 ms), Max(950 ms)
 * Chip Erase Time 	     : Typ(25 sec), Max(40 sec)
 * Write Status Register Time: Typ(200 ns)
 */
int flash_ready(int ms)
{
 80279b4:	b580      	push	{r7, lr}
 80279b6:	b084      	sub	sp, #16
 80279b8:	af00      	add	r7, sp, #0
 80279ba:	6078      	str	r0, [r7, #4]
	clock_t mst;
	byte    temp;

	SF_EN();
 80279bc:	2200      	movs	r2, #0
 80279be:	2110      	movs	r1, #16
 80279c0:	4819      	ldr	r0, [pc, #100]	; (8027a28 <flash_ready+0x74>)
 80279c2:	f003 fd53 	bl	802b46c <HAL_GPIO_WritePin>
	putch_SF(SF_RDSR);
 80279c6:	2005      	movs	r0, #5
 80279c8:	f000 fac8 	bl	8027f5c <SF_RW_Byte_FLASH>
	mstimeout(&mst, 0);
 80279cc:	f107 0308 	add.w	r3, r7, #8
 80279d0:	2100      	movs	r1, #0
 80279d2:	4618      	mov	r0, r3
 80279d4:	f002 fd88 	bl	802a4e8 <mstimeout>
	do {
		temp = putch_SF(0xFF);
 80279d8:	20ff      	movs	r0, #255	; 0xff
 80279da:	f000 fabf 	bl	8027f5c <SF_RW_Byte_FLASH>
 80279de:	4603      	mov	r3, r0
 80279e0:	73fb      	strb	r3, [r7, #15]
		if(!(temp & 0x01))
 80279e2:	7bfb      	ldrb	r3, [r7, #15]
 80279e4:	f003 0301 	and.w	r3, r3, #1
 80279e8:	2b00      	cmp	r3, #0
 80279ea:	d009      	beq.n	8027a00 <flash_ready+0x4c>
			break;
	}while(!mstimeout(&mst, ms));
 80279ec:	f107 0308 	add.w	r3, r7, #8
 80279f0:	6879      	ldr	r1, [r7, #4]
 80279f2:	4618      	mov	r0, r3
 80279f4:	f002 fd78 	bl	802a4e8 <mstimeout>
 80279f8:	4603      	mov	r3, r0
 80279fa:	2b00      	cmp	r3, #0
 80279fc:	d0ec      	beq.n	80279d8 <flash_ready+0x24>
 80279fe:	e000      	b.n	8027a02 <flash_ready+0x4e>
			break;
 8027a00:	bf00      	nop
	SF_DE();
 8027a02:	2201      	movs	r2, #1
 8027a04:	2110      	movs	r1, #16
 8027a06:	4808      	ldr	r0, [pc, #32]	; (8027a28 <flash_ready+0x74>)
 8027a08:	f003 fd30 	bl	802b46c <HAL_GPIO_WritePin>

	if(sfT) printf("flash ready %#x\n", temp);
 8027a0c:	4b07      	ldr	r3, [pc, #28]	; (8027a2c <flash_ready+0x78>)
 8027a0e:	781b      	ldrb	r3, [r3, #0]
 8027a10:	2b00      	cmp	r3, #0
 8027a12:	d004      	beq.n	8027a1e <flash_ready+0x6a>
 8027a14:	7bfb      	ldrb	r3, [r7, #15]
 8027a16:	4619      	mov	r1, r3
 8027a18:	4805      	ldr	r0, [pc, #20]	; (8027a30 <flash_ready+0x7c>)
 8027a1a:	f001 ff1b 	bl	8029854 <printf_>
	return(temp);
 8027a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8027a20:	4618      	mov	r0, r3
 8027a22:	3710      	adds	r7, #16
 8027a24:	46bd      	mov	sp, r7
 8027a26:	bd80      	pop	{r7, pc}
 8027a28:	58020000 	.word	0x58020000
 8027a2c:	24001fdc 	.word	0x24001fdc
 8027a30:	08032ebc 	.word	0x08032ebc

08027a34 <write_enable>:

/*This is function Definition for Enable the write operatations on the Flash Memory*/
void write_enable(void)
{
 8027a34:	b580      	push	{r7, lr}
 8027a36:	af00      	add	r7, sp, #0
	//SF_EN();
	//putch_SF(SF_WREN);    // enable write operations
	//SF_DE();
	SF_EN();
 8027a38:	2200      	movs	r2, #0
 8027a3a:	2110      	movs	r1, #16
 8027a3c:	4806      	ldr	r0, [pc, #24]	; (8027a58 <write_enable+0x24>)
 8027a3e:	f003 fd15 	bl	802b46c <HAL_GPIO_WritePin>
    putch_SF(AT25DF_WRITE_ENABLE);
 8027a42:	2006      	movs	r0, #6
 8027a44:	f000 fa8a 	bl	8027f5c <SF_RW_Byte_FLASH>
    SF_DE();
 8027a48:	2201      	movs	r2, #1
 8027a4a:	2110      	movs	r1, #16
 8027a4c:	4802      	ldr	r0, [pc, #8]	; (8027a58 <write_enable+0x24>)
 8027a4e:	f003 fd0d 	bl	802b46c <HAL_GPIO_WritePin>
}
 8027a52:	bf00      	nop
 8027a54:	bd80      	pop	{r7, pc}
 8027a56:	bf00      	nop
 8027a58:	58020000 	.word	0x58020000

08027a5c <flash_size>:
	if(sfT) printf("flash stat %#x\n", stat);
	return(stat);
}

siz_t flash_size(int force)
{
 8027a5c:	b580      	push	{r7, lr}
 8027a5e:	b084      	sub	sp, #16
 8027a60:	af00      	add	r7, sp, #0
 8027a62:	6078      	str	r0, [r7, #4]
	static 	siz_t  flsize = 0;
	siz_t 	siz;

	if (flsize == 0 || force) {
 8027a64:	4b11      	ldr	r3, [pc, #68]	; (8027aac <flash_size+0x50>)
 8027a66:	681b      	ldr	r3, [r3, #0]
 8027a68:	2b00      	cmp	r3, #0
 8027a6a:	d002      	beq.n	8027a72 <flash_size+0x16>
 8027a6c:	687b      	ldr	r3, [r7, #4]
 8027a6e:	2b00      	cmp	r3, #0
 8027a70:	d00c      	beq.n	8027a8c <flash_size+0x30>
		siz = 0L;
 8027a72:	2300      	movs	r3, #0
 8027a74:	60fb      	str	r3, [r7, #12]
		if(SpiFlash_ReadInfo())
 8027a76:	f7fe feb9 	bl	80267ec <SpiFlash_ReadInfo>
 8027a7a:	4603      	mov	r3, r0
 8027a7c:	2b00      	cmp	r3, #0
 8027a7e:	d002      	beq.n	8027a86 <flash_size+0x2a>
			siz = BANKSIZ;
 8027a80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8027a84:	60fb      	str	r3, [r7, #12]

		flsize = siz;
 8027a86:	4a09      	ldr	r2, [pc, #36]	; (8027aac <flash_size+0x50>)
 8027a88:	68fb      	ldr	r3, [r7, #12]
 8027a8a:	6013      	str	r3, [r2, #0]
	}

	if(sfT == 1) printf("flash size %#lx\n", flsize);
 8027a8c:	4b08      	ldr	r3, [pc, #32]	; (8027ab0 <flash_size+0x54>)
 8027a8e:	781b      	ldrb	r3, [r3, #0]
 8027a90:	2b01      	cmp	r3, #1
 8027a92:	d105      	bne.n	8027aa0 <flash_size+0x44>
 8027a94:	4b05      	ldr	r3, [pc, #20]	; (8027aac <flash_size+0x50>)
 8027a96:	681b      	ldr	r3, [r3, #0]
 8027a98:	4619      	mov	r1, r3
 8027a9a:	4806      	ldr	r0, [pc, #24]	; (8027ab4 <flash_size+0x58>)
 8027a9c:	f001 feda 	bl	8029854 <printf_>
	return(flsize);
 8027aa0:	4b02      	ldr	r3, [pc, #8]	; (8027aac <flash_size+0x50>)
 8027aa2:	681b      	ldr	r3, [r3, #0]
}
 8027aa4:	4618      	mov	r0, r3
 8027aa6:	3710      	adds	r7, #16
 8027aa8:	46bd      	mov	sp, r7
 8027aaa:	bd80      	pop	{r7, pc}
 8027aac:	24001fe0 	.word	0x24001fe0
 8027ab0:	24001fdc 	.word	0x24001fdc
 8027ab4:	08032f14 	.word	0x08032f14

08027ab8 <flash_read>:

/*
 *	Allow random access
 */
int flash_read(siz_t addr, byte *buf, siz_t size)
{
 8027ab8:	b590      	push	{r4, r7, lr}
 8027aba:	b08f      	sub	sp, #60	; 0x3c
 8027abc:	af02      	add	r7, sp, #8
 8027abe:	60f8      	str	r0, [r7, #12]
 8027ac0:	60b9      	str	r1, [r7, #8]
 8027ac2:	607a      	str	r2, [r7, #4]
	siz_t	ad, siz;
	int	page, i, n;
	byte 	oadr;
	byte 	*pb = buf;
 8027ac4:	68bb      	ldr	r3, [r7, #8]
 8027ac6:	62bb      	str	r3, [r7, #40]	; 0x28

	if (addr < 0 || (addr+size) > flash_size(0)) { /* check range validity */
 8027ac8:	68fb      	ldr	r3, [r7, #12]
 8027aca:	2b00      	cmp	r3, #0
 8027acc:	db08      	blt.n	8027ae0 <flash_read+0x28>
 8027ace:	68fa      	ldr	r2, [r7, #12]
 8027ad0:	687b      	ldr	r3, [r7, #4]
 8027ad2:	18d4      	adds	r4, r2, r3
 8027ad4:	2000      	movs	r0, #0
 8027ad6:	f7ff ffc1 	bl	8027a5c <flash_size>
 8027ada:	4603      	mov	r3, r0
 8027adc:	429c      	cmp	r4, r3
 8027ade:	dd0a      	ble.n	8027af6 <flash_read+0x3e>
		//syserr("flash_read(a:%#x, s:%#x, m:%#x) - invalid range\n", addr, size, flash_size(0));
		printf("flash_read(a:%#lx, s:%#lx, m:%#lx) - invalid range\n", addr, size, flash_size(0));
 8027ae0:	2000      	movs	r0, #0
 8027ae2:	f7ff ffbb 	bl	8027a5c <flash_size>
 8027ae6:	4603      	mov	r3, r0
 8027ae8:	687a      	ldr	r2, [r7, #4]
 8027aea:	68f9      	ldr	r1, [r7, #12]
 8027aec:	4842      	ldr	r0, [pc, #264]	; (8027bf8 <flash_read+0x140>)
 8027aee:	f001 feb1 	bl	8029854 <printf_>
		return(E_ADDR);
 8027af2:	2301      	movs	r3, #1
 8027af4:	e07c      	b.n	8027bf0 <flash_read+0x138>
	}

	ad = addr;	// debug backup
 8027af6:	68fb      	ldr	r3, [r7, #12]
 8027af8:	627b      	str	r3, [r7, #36]	; 0x24
	siz = size;	// debug backup
 8027afa:	687b      	ldr	r3, [r7, #4]
 8027afc:	623b      	str	r3, [r7, #32]
	while (size > 0) {
 8027afe:	e061      	b.n	8027bc4 <flash_read+0x10c>
		page = addr / PAGESIZ;			/* page addr in the bank  */
 8027b00:	68fb      	ldr	r3, [r7, #12]
 8027b02:	2b00      	cmp	r3, #0
 8027b04:	da00      	bge.n	8027b08 <flash_read+0x50>
 8027b06:	33ff      	adds	r3, #255	; 0xff
 8027b08:	121b      	asrs	r3, r3, #8
 8027b0a:	61fb      	str	r3, [r7, #28]
		oadr = addr % PAGESIZ;			/* offset addr in the bank */
 8027b0c:	68fb      	ldr	r3, [r7, #12]
 8027b0e:	425a      	negs	r2, r3
 8027b10:	b2db      	uxtb	r3, r3
 8027b12:	b2d2      	uxtb	r2, r2
 8027b14:	bf58      	it	pl
 8027b16:	4253      	negpl	r3, r2
 8027b18:	76fb      	strb	r3, [r7, #27]
		SF_EN();
 8027b1a:	2200      	movs	r2, #0
 8027b1c:	2110      	movs	r1, #16
 8027b1e:	4837      	ldr	r0, [pc, #220]	; (8027bfc <flash_read+0x144>)
 8027b20:	f003 fca4 	bl	802b46c <HAL_GPIO_WritePin>
		putch_SF(SF_READ_LOW);			// Max Frq 50MHz
 8027b24:	2003      	movs	r0, #3
 8027b26:	f000 fa19 	bl	8027f5c <SF_RW_Byte_FLASH>
		//putch_SF(SF_READ);			// Max Frq 85MHz
		putch_SF((byte)(page >> 8));		// address 23-16
 8027b2a:	69fb      	ldr	r3, [r7, #28]
 8027b2c:	121b      	asrs	r3, r3, #8
 8027b2e:	b2db      	uxtb	r3, r3
 8027b30:	4618      	mov	r0, r3
 8027b32:	f000 fa13 	bl	8027f5c <SF_RW_Byte_FLASH>
		putch_SF((byte)(page));			// address 15-8
 8027b36:	69fb      	ldr	r3, [r7, #28]
 8027b38:	b2db      	uxtb	r3, r3
 8027b3a:	4618      	mov	r0, r3
 8027b3c:	f000 fa0e 	bl	8027f5c <SF_RW_Byte_FLASH>
		putch_SF(oadr);				// address 7-0
 8027b40:	7efb      	ldrb	r3, [r7, #27]
 8027b42:	4618      	mov	r0, r3
 8027b44:	f000 fa0a 	bl	8027f5c <SF_RW_Byte_FLASH>
		//putch_SF(0xff);			// SF_READ dumy data
		n = PAGESIZ - oadr;
 8027b48:	7efb      	ldrb	r3, [r7, #27]
 8027b4a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8027b4e:	617b      	str	r3, [r7, #20]
		n = min(n, size);
 8027b50:	697a      	ldr	r2, [r7, #20]
 8027b52:	687b      	ldr	r3, [r7, #4]
 8027b54:	4293      	cmp	r3, r2
 8027b56:	bfa8      	it	ge
 8027b58:	4613      	movge	r3, r2
 8027b5a:	617b      	str	r3, [r7, #20]
		for(i = 0 ; i < n ; i++, pb++)
 8027b5c:	2300      	movs	r3, #0
 8027b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027b60:	e00c      	b.n	8027b7c <flash_read+0xc4>
			*pb = putch_SF(0xff);
 8027b62:	20ff      	movs	r0, #255	; 0xff
 8027b64:	f000 f9fa 	bl	8027f5c <SF_RW_Byte_FLASH>
 8027b68:	4603      	mov	r3, r0
 8027b6a:	461a      	mov	r2, r3
 8027b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027b6e:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < n ; i++, pb++)
 8027b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b72:	3301      	adds	r3, #1
 8027b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027b78:	3301      	adds	r3, #1
 8027b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8027b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027b7e:	697b      	ldr	r3, [r7, #20]
 8027b80:	429a      	cmp	r2, r3
 8027b82:	dbee      	blt.n	8027b62 <flash_read+0xaa>
		SF_DE();
 8027b84:	2201      	movs	r2, #1
 8027b86:	2110      	movs	r1, #16
 8027b88:	481c      	ldr	r0, [pc, #112]	; (8027bfc <flash_read+0x144>)
 8027b8a:	f003 fc6f 	bl	802b46c <HAL_GPIO_WritePin>

		if(sfT > 1) printf("flash_read a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027b8e:	4b1c      	ldr	r3, [pc, #112]	; (8027c00 <flash_read+0x148>)
 8027b90:	781b      	ldrb	r3, [r3, #0]
 8027b92:	2b01      	cmp	r3, #1
 8027b94:	d90e      	bls.n	8027bb4 <flash_read+0xfc>
				(byte)(page >> 8), (byte)(page), oadr, n);
 8027b96:	69fb      	ldr	r3, [r7, #28]
 8027b98:	121b      	asrs	r3, r3, #8
 8027b9a:	b2db      	uxtb	r3, r3
		if(sfT > 1) printf("flash_read a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027b9c:	4619      	mov	r1, r3
				(byte)(page >> 8), (byte)(page), oadr, n);
 8027b9e:	69fb      	ldr	r3, [r7, #28]
 8027ba0:	b2db      	uxtb	r3, r3
		if(sfT > 1) printf("flash_read a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027ba2:	4618      	mov	r0, r3
 8027ba4:	7efa      	ldrb	r2, [r7, #27]
 8027ba6:	697b      	ldr	r3, [r7, #20]
 8027ba8:	9300      	str	r3, [sp, #0]
 8027baa:	4613      	mov	r3, r2
 8027bac:	4602      	mov	r2, r0
 8027bae:	4815      	ldr	r0, [pc, #84]	; (8027c04 <flash_read+0x14c>)
 8027bb0:	f001 fe50 	bl	8029854 <printf_>
		addr += n;
 8027bb4:	68fa      	ldr	r2, [r7, #12]
 8027bb6:	697b      	ldr	r3, [r7, #20]
 8027bb8:	4413      	add	r3, r2
 8027bba:	60fb      	str	r3, [r7, #12]
		size -= n;
 8027bbc:	687a      	ldr	r2, [r7, #4]
 8027bbe:	697b      	ldr	r3, [r7, #20]
 8027bc0:	1ad3      	subs	r3, r2, r3
 8027bc2:	607b      	str	r3, [r7, #4]
	while (size > 0) {
 8027bc4:	687b      	ldr	r3, [r7, #4]
 8027bc6:	2b00      	cmp	r3, #0
 8027bc8:	dc9a      	bgt.n	8027b00 <flash_read+0x48>
	}
	if(sfT > 1) printf("flash_read(addr %#lx, size %#lx)\n", ad, siz);
 8027bca:	4b0d      	ldr	r3, [pc, #52]	; (8027c00 <flash_read+0x148>)
 8027bcc:	781b      	ldrb	r3, [r3, #0]
 8027bce:	2b01      	cmp	r3, #1
 8027bd0:	d904      	bls.n	8027bdc <flash_read+0x124>
 8027bd2:	6a3a      	ldr	r2, [r7, #32]
 8027bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8027bd6:	480c      	ldr	r0, [pc, #48]	; (8027c08 <flash_read+0x150>)
 8027bd8:	f001 fe3c 	bl	8029854 <printf_>
	if(sfT > 2) hexdump(ad, (byte *)buf, siz);
 8027bdc:	4b08      	ldr	r3, [pc, #32]	; (8027c00 <flash_read+0x148>)
 8027bde:	781b      	ldrb	r3, [r3, #0]
 8027be0:	2b02      	cmp	r3, #2
 8027be2:	d904      	bls.n	8027bee <flash_read+0x136>
 8027be4:	6a3a      	ldr	r2, [r7, #32]
 8027be6:	68b9      	ldr	r1, [r7, #8]
 8027be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027bea:	f7ff f99d 	bl	8026f28 <hexdump>
	return(0);
 8027bee:	2300      	movs	r3, #0
}
 8027bf0:	4618      	mov	r0, r3
 8027bf2:	3734      	adds	r7, #52	; 0x34
 8027bf4:	46bd      	mov	sp, r7
 8027bf6:	bd90      	pop	{r4, r7, pc}
 8027bf8:	08032f28 	.word	0x08032f28
 8027bfc:	58020000 	.word	0x58020000
 8027c00:	24001fdc 	.word	0x24001fdc
 8027c04:	08032f5c 	.word	0x08032f5c
 8027c08:	08032f94 	.word	0x08032f94

08027c0c <flash_erase>:
/*
 *	Erase the corresponding blocks.
 */

int flash_erase(siz_t addr, siz_t size)
{
 8027c0c:	b590      	push	{r4, r7, lr}
 8027c0e:	b089      	sub	sp, #36	; 0x24
 8027c10:	af00      	add	r7, sp, #0
 8027c12:	6078      	str	r0, [r7, #4]
 8027c14:	6039      	str	r1, [r7, #0]
	siz_t	ad, siz;
	int	page, i, err = 0;
 8027c16:	2300      	movs	r3, #0
 8027c18:	617b      	str	r3, [r7, #20]

	if(addr == 0 && size == 0) {		// full domain erase
 8027c1a:	687b      	ldr	r3, [r7, #4]
 8027c1c:	2b00      	cmp	r3, #0
 8027c1e:	d121      	bne.n	8027c64 <flash_erase+0x58>
 8027c20:	683b      	ldr	r3, [r7, #0]
 8027c22:	2b00      	cmp	r3, #0
 8027c24:	d11e      	bne.n	8027c64 <flash_erase+0x58>
		size = flash_size(0);
 8027c26:	2000      	movs	r0, #0
 8027c28:	f7ff ff18 	bl	8027a5c <flash_size>
 8027c2c:	6038      	str	r0, [r7, #0]
		write_enable();
 8027c2e:	f7ff ff01 	bl	8027a34 <write_enable>
		SF_EN();
 8027c32:	2200      	movs	r2, #0
 8027c34:	2110      	movs	r1, #16
 8027c36:	4845      	ldr	r0, [pc, #276]	; (8027d4c <flash_erase+0x140>)
 8027c38:	f003 fc18 	bl	802b46c <HAL_GPIO_WritePin>
		putch_SF(SF_CHIP_ERASE);
 8027c3c:	2060      	movs	r0, #96	; 0x60
 8027c3e:	f000 f98d 	bl	8027f5c <SF_RW_Byte_FLASH>
		SF_DE();
 8027c42:	2201      	movs	r2, #1
 8027c44:	2110      	movs	r1, #16
 8027c46:	4841      	ldr	r0, [pc, #260]	; (8027d4c <flash_erase+0x140>)
 8027c48:	f003 fc10 	bl	802b46c <HAL_GPIO_WritePin>
		printf("Waiting... Chip erase time is 36 ~ 56 sec\n");
 8027c4c:	4840      	ldr	r0, [pc, #256]	; (8027d50 <flash_erase+0x144>)
 8027c4e:	f001 fe01 	bl	8029854 <printf_>
		flash_ready(57 * CLOCKS_PER_SEC); // Chip Erase Time : Typ(36 sec), Max(56 sec)
 8027c52:	f241 6044 	movw	r0, #5700	; 0x1644
 8027c56:	f7ff fead 	bl	80279b4 <flash_ready>
		ad = addr;
 8027c5a:	687b      	ldr	r3, [r7, #4]
 8027c5c:	61fb      	str	r3, [r7, #28]
		siz = size;
 8027c5e:	683b      	ldr	r3, [r7, #0]
 8027c60:	61bb      	str	r3, [r7, #24]
		goto RESULT;
 8027c62:	e05e      	b.n	8027d22 <flash_erase+0x116>
	}

	if(addr < 0 || (addr+size) > flash_size(0)) { /* check range validity */
 8027c64:	687b      	ldr	r3, [r7, #4]
 8027c66:	2b00      	cmp	r3, #0
 8027c68:	db08      	blt.n	8027c7c <flash_erase+0x70>
 8027c6a:	687a      	ldr	r2, [r7, #4]
 8027c6c:	683b      	ldr	r3, [r7, #0]
 8027c6e:	18d4      	adds	r4, r2, r3
 8027c70:	2000      	movs	r0, #0
 8027c72:	f7ff fef3 	bl	8027a5c <flash_size>
 8027c76:	4603      	mov	r3, r0
 8027c78:	429c      	cmp	r4, r3
 8027c7a:	dd0a      	ble.n	8027c92 <flash_erase+0x86>
		//syserr("flash_erase(a:%#x, s:%#x, m:%#x) - invalid range\n", addr, size, flash_size(0));
		printf("flash_erase(a:%#lx, s:%#lx, m:%#lx) - invalid range\n", addr, size, flash_size(0));
 8027c7c:	2000      	movs	r0, #0
 8027c7e:	f7ff feed 	bl	8027a5c <flash_size>
 8027c82:	4603      	mov	r3, r0
 8027c84:	683a      	ldr	r2, [r7, #0]
 8027c86:	6879      	ldr	r1, [r7, #4]
 8027c88:	4832      	ldr	r0, [pc, #200]	; (8027d54 <flash_erase+0x148>)
 8027c8a:	f001 fde3 	bl	8029854 <printf_>
		return(E_ADDR);
 8027c8e:	2301      	movs	r3, #1
 8027c90:	e057      	b.n	8027d42 <flash_erase+0x136>
	}

	/*
	 * adjust addr to the start of block.
	 */
	i = addr % BLOCKSIZ;
 8027c92:	687b      	ldr	r3, [r7, #4]
 8027c94:	425a      	negs	r2, r3
 8027c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027c9a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8027c9e:	bf58      	it	pl
 8027ca0:	4253      	negpl	r3, r2
 8027ca2:	613b      	str	r3, [r7, #16]
	addr -= i;
 8027ca4:	687a      	ldr	r2, [r7, #4]
 8027ca6:	693b      	ldr	r3, [r7, #16]
 8027ca8:	1ad3      	subs	r3, r2, r3
 8027caa:	607b      	str	r3, [r7, #4]
	size += i;
 8027cac:	683a      	ldr	r2, [r7, #0]
 8027cae:	693b      	ldr	r3, [r7, #16]
 8027cb0:	4413      	add	r3, r2
 8027cb2:	603b      	str	r3, [r7, #0]

	ad = addr;
 8027cb4:	687b      	ldr	r3, [r7, #4]
 8027cb6:	61fb      	str	r3, [r7, #28]
	siz = size;
 8027cb8:	683b      	ldr	r3, [r7, #0]
 8027cba:	61bb      	str	r3, [r7, #24]
	while (size > 0) {
 8027cbc:	e02d      	b.n	8027d1a <flash_erase+0x10e>
		page = addr / PAGESIZ; 		/* page addr in device(0~) */
 8027cbe:	687b      	ldr	r3, [r7, #4]
 8027cc0:	2b00      	cmp	r3, #0
 8027cc2:	da00      	bge.n	8027cc6 <flash_erase+0xba>
 8027cc4:	33ff      	adds	r3, #255	; 0xff
 8027cc6:	121b      	asrs	r3, r3, #8
 8027cc8:	60fb      	str	r3, [r7, #12]
		write_enable();
 8027cca:	f7ff feb3 	bl	8027a34 <write_enable>
		SF_EN();
 8027cce:	2200      	movs	r2, #0
 8027cd0:	2110      	movs	r1, #16
 8027cd2:	481e      	ldr	r0, [pc, #120]	; (8027d4c <flash_erase+0x140>)
 8027cd4:	f003 fbca 	bl	802b46c <HAL_GPIO_WritePin>
		putch_SF(SF_BLK_ERASE_4K);	// Block Erase (4KBytes)
 8027cd8:	2020      	movs	r0, #32
 8027cda:	f000 f93f 	bl	8027f5c <SF_RW_Byte_FLASH>
		putch_SF((byte)(page >> 8));	// address 23-16
 8027cde:	68fb      	ldr	r3, [r7, #12]
 8027ce0:	121b      	asrs	r3, r3, #8
 8027ce2:	b2db      	uxtb	r3, r3
 8027ce4:	4618      	mov	r0, r3
 8027ce6:	f000 f939 	bl	8027f5c <SF_RW_Byte_FLASH>
		putch_SF((byte)(page));		// address 15-8
 8027cea:	68fb      	ldr	r3, [r7, #12]
 8027cec:	b2db      	uxtb	r3, r3
 8027cee:	4618      	mov	r0, r3
 8027cf0:	f000 f934 	bl	8027f5c <SF_RW_Byte_FLASH>
		putch_SF(0x00);			// address 7-0
 8027cf4:	2000      	movs	r0, #0
 8027cf6:	f000 f931 	bl	8027f5c <SF_RW_Byte_FLASH>
		SF_DE();
 8027cfa:	2201      	movs	r2, #1
 8027cfc:	2110      	movs	r1, #16
 8027cfe:	4813      	ldr	r0, [pc, #76]	; (8027d4c <flash_erase+0x140>)
 8027d00:	f003 fbb4 	bl	802b46c <HAL_GPIO_WritePin>
		flash_ready(210);		// Block Erase Time 4-Kbyte : Typ(50 ms) , Max(200 ms)
 8027d04:	20d2      	movs	r0, #210	; 0xd2
 8027d06:	f7ff fe55 	bl	80279b4 <flash_ready>
		addr += BLOCKSIZ;
 8027d0a:	687b      	ldr	r3, [r7, #4]
 8027d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027d10:	607b      	str	r3, [r7, #4]
		size -= BLOCKSIZ;
 8027d12:	683b      	ldr	r3, [r7, #0]
 8027d14:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8027d18:	603b      	str	r3, [r7, #0]
	while (size > 0) {
 8027d1a:	683b      	ldr	r3, [r7, #0]
 8027d1c:	2b00      	cmp	r3, #0
 8027d1e:	dcce      	bgt.n	8027cbe <flash_erase+0xb2>
	}
RESULT :
 8027d20:	bf00      	nop
	if(sfT > 1) printf("flash_erase(addr %#lx, size %#lx) - errcode %#x\n", ad, siz, err);
 8027d22:	4b0d      	ldr	r3, [pc, #52]	; (8027d58 <flash_erase+0x14c>)
 8027d24:	781b      	ldrb	r3, [r3, #0]
 8027d26:	2b01      	cmp	r3, #1
 8027d28:	d905      	bls.n	8027d36 <flash_erase+0x12a>
 8027d2a:	697b      	ldr	r3, [r7, #20]
 8027d2c:	69ba      	ldr	r2, [r7, #24]
 8027d2e:	69f9      	ldr	r1, [r7, #28]
 8027d30:	480a      	ldr	r0, [pc, #40]	; (8027d5c <flash_erase+0x150>)
 8027d32:	f001 fd8f 	bl	8029854 <printf_>
	if(err)
 8027d36:	697b      	ldr	r3, [r7, #20]
 8027d38:	2b00      	cmp	r3, #0
 8027d3a:	d001      	beq.n	8027d40 <flash_erase+0x134>
		err = E_FAIL;
 8027d3c:	2303      	movs	r3, #3
 8027d3e:	617b      	str	r3, [r7, #20]
	return(err);
 8027d40:	697b      	ldr	r3, [r7, #20]
}
 8027d42:	4618      	mov	r0, r3
 8027d44:	3724      	adds	r7, #36	; 0x24
 8027d46:	46bd      	mov	sp, r7
 8027d48:	bd90      	pop	{r4, r7, pc}
 8027d4a:	bf00      	nop
 8027d4c:	58020000 	.word	0x58020000
 8027d50:	08032fb8 	.word	0x08032fb8
 8027d54:	08032fe4 	.word	0x08032fe4
 8027d58:	24001fdc 	.word	0x24001fdc
 8027d5c:	0803301c 	.word	0x0803301c

08027d60 <flash_write>:

/*
 *	Assume sequential write.
 */
int flash_write(siz_t addr, byte *buf, siz_t size)
{
 8027d60:	b590      	push	{r4, r7, lr}
 8027d62:	b091      	sub	sp, #68	; 0x44
 8027d64:	af02      	add	r7, sp, #8
 8027d66:	60f8      	str	r0, [r7, #12]
 8027d68:	60b9      	str	r1, [r7, #8]
 8027d6a:	607a      	str	r2, [r7, #4]
	siz_t	ad, siz;
	int	page, i, n, err, nerr;
	byte 	oadr;
	byte 	*pb = buf;
 8027d6c:	68bb      	ldr	r3, [r7, #8]
 8027d6e:	62bb      	str	r3, [r7, #40]	; 0x28

	if (addr < 0 || (addr+size) > flash_size(0)) {
 8027d70:	68fb      	ldr	r3, [r7, #12]
 8027d72:	2b00      	cmp	r3, #0
 8027d74:	db08      	blt.n	8027d88 <flash_write+0x28>
 8027d76:	68fa      	ldr	r2, [r7, #12]
 8027d78:	687b      	ldr	r3, [r7, #4]
 8027d7a:	18d4      	adds	r4, r2, r3
 8027d7c:	2000      	movs	r0, #0
 8027d7e:	f7ff fe6d 	bl	8027a5c <flash_size>
 8027d82:	4603      	mov	r3, r0
 8027d84:	429c      	cmp	r4, r3
 8027d86:	dd0a      	ble.n	8027d9e <flash_write+0x3e>
		//syserr("flash_write(a:%#x, s:%#x, m:%#x) - invalid range\n", addr, size, flash_size(0));
		printf("flash_write(a:%#lx, s:%#lx, m:%#lx) - invalid range\n", addr, size, flash_size(0));
 8027d88:	2000      	movs	r0, #0
 8027d8a:	f7ff fe67 	bl	8027a5c <flash_size>
 8027d8e:	4603      	mov	r3, r0
 8027d90:	687a      	ldr	r2, [r7, #4]
 8027d92:	68f9      	ldr	r1, [r7, #12]
 8027d94:	4869      	ldr	r0, [pc, #420]	; (8027f3c <flash_write+0x1dc>)
 8027d96:	f001 fd5d 	bl	8029854 <printf_>
		return(E_ADDR);
 8027d9a:	2301      	movs	r3, #1
 8027d9c:	e0ca      	b.n	8027f34 <flash_write+0x1d4>
	}

	ad = addr;
 8027d9e:	68fb      	ldr	r3, [r7, #12]
 8027da0:	627b      	str	r3, [r7, #36]	; 0x24
	siz = size;
 8027da2:	687b      	ldr	r3, [r7, #4]
 8027da4:	623b      	str	r3, [r7, #32]
	nerr = err = 0;
 8027da6:	2300      	movs	r3, #0
 8027da8:	633b      	str	r3, [r7, #48]	; 0x30
 8027daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027dac:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(size > 0 ) {
 8027dae:	e0a9      	b.n	8027f04 <flash_write+0x1a4>
		if((addr%BLOCKSIZ) == 0) {
 8027db0:	68fb      	ldr	r3, [r7, #12]
 8027db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027db6:	2b00      	cmp	r3, #0
 8027db8:	d10b      	bne.n	8027dd2 <flash_write+0x72>
			err = flash_erase(addr, (siz_t)1);
 8027dba:	2101      	movs	r1, #1
 8027dbc:	68f8      	ldr	r0, [r7, #12]
 8027dbe:	f7ff ff25 	bl	8027c0c <flash_erase>
 8027dc2:	6338      	str	r0, [r7, #48]	; 0x30
			if(err)
 8027dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027dc6:	2b00      	cmp	r3, #0
 8027dc8:	d003      	beq.n	8027dd2 <flash_write+0x72>
				return(err|0x8);
 8027dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027dcc:	f043 0308 	orr.w	r3, r3, #8
 8027dd0:	e0b0      	b.n	8027f34 <flash_write+0x1d4>
		}
		page = addr / PAGESIZ;			/* page addr in the bank 	*/
 8027dd2:	68fb      	ldr	r3, [r7, #12]
 8027dd4:	2b00      	cmp	r3, #0
 8027dd6:	da00      	bge.n	8027dda <flash_write+0x7a>
 8027dd8:	33ff      	adds	r3, #255	; 0xff
 8027dda:	121b      	asrs	r3, r3, #8
 8027ddc:	61fb      	str	r3, [r7, #28]
		oadr = addr % PAGESIZ;			/* offset addr in the bank */
 8027dde:	68fb      	ldr	r3, [r7, #12]
 8027de0:	425a      	negs	r2, r3
 8027de2:	b2db      	uxtb	r3, r3
 8027de4:	b2d2      	uxtb	r2, r2
 8027de6:	bf58      	it	pl
 8027de8:	4253      	negpl	r3, r2
 8027dea:	76fb      	strb	r3, [r7, #27]
		write_enable();
 8027dec:	f7ff fe22 	bl	8027a34 <write_enable>
		SF_EN();
 8027df0:	2200      	movs	r2, #0
 8027df2:	2110      	movs	r1, #16
 8027df4:	4852      	ldr	r0, [pc, #328]	; (8027f40 <flash_write+0x1e0>)
 8027df6:	f003 fb39 	bl	802b46c <HAL_GPIO_WritePin>
		putch_SF(SF_PROGRAM);  		//write command
 8027dfa:	2002      	movs	r0, #2
 8027dfc:	f000 f8ae 	bl	8027f5c <SF_RW_Byte_FLASH>
		putch_SF((byte)(page >> 8));	// address 23-16
 8027e00:	69fb      	ldr	r3, [r7, #28]
 8027e02:	121b      	asrs	r3, r3, #8
 8027e04:	b2db      	uxtb	r3, r3
 8027e06:	4618      	mov	r0, r3
 8027e08:	f000 f8a8 	bl	8027f5c <SF_RW_Byte_FLASH>
		putch_SF((byte)(page));		// address 15-8
 8027e0c:	69fb      	ldr	r3, [r7, #28]
 8027e0e:	b2db      	uxtb	r3, r3
 8027e10:	4618      	mov	r0, r3
 8027e12:	f000 f8a3 	bl	8027f5c <SF_RW_Byte_FLASH>
		putch_SF(oadr);			// address 7-0
 8027e16:	7efb      	ldrb	r3, [r7, #27]
 8027e18:	4618      	mov	r0, r3
 8027e1a:	f000 f89f 	bl	8027f5c <SF_RW_Byte_FLASH>
		n = PAGESIZ - oadr;
 8027e1e:	7efb      	ldrb	r3, [r7, #27]
 8027e20:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8027e24:	617b      	str	r3, [r7, #20]
		n = min(n, size);
 8027e26:	697a      	ldr	r2, [r7, #20]
 8027e28:	687b      	ldr	r3, [r7, #4]
 8027e2a:	4293      	cmp	r3, r2
 8027e2c:	bfa8      	it	ge
 8027e2e:	4613      	movge	r3, r2
 8027e30:	617b      	str	r3, [r7, #20]
		for(i = 0 ; i < n ; i++, pb++ )
 8027e32:	2300      	movs	r3, #0
 8027e34:	637b      	str	r3, [r7, #52]	; 0x34
 8027e36:	e00a      	b.n	8027e4e <flash_write+0xee>
			putch_SF(*pb);
 8027e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027e3a:	781b      	ldrb	r3, [r3, #0]
 8027e3c:	4618      	mov	r0, r3
 8027e3e:	f000 f88d 	bl	8027f5c <SF_RW_Byte_FLASH>
		for(i = 0 ; i < n ; i++, pb++ )
 8027e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027e44:	3301      	adds	r3, #1
 8027e46:	637b      	str	r3, [r7, #52]	; 0x34
 8027e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027e4a:	3301      	adds	r3, #1
 8027e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8027e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027e50:	697b      	ldr	r3, [r7, #20]
 8027e52:	429a      	cmp	r2, r3
 8027e54:	dbf0      	blt.n	8027e38 <flash_write+0xd8>
		SF_DE();
 8027e56:	2201      	movs	r2, #1
 8027e58:	2110      	movs	r1, #16
 8027e5a:	4839      	ldr	r0, [pc, #228]	; (8027f40 <flash_write+0x1e0>)
 8027e5c:	f003 fb06 	bl	802b46c <HAL_GPIO_WritePin>
		flash_ready(7);			// Page Program Time 256byte : Typ(1.5 ms), Max(5.0 ms)
 8027e60:	2007      	movs	r0, #7
 8027e62:	f7ff fda7 	bl	80279b4 <flash_ready>
		flash_read(addr, verifBuf, (siz_t)n);
 8027e66:	697a      	ldr	r2, [r7, #20]
 8027e68:	4936      	ldr	r1, [pc, #216]	; (8027f44 <flash_write+0x1e4>)
 8027e6a:	68f8      	ldr	r0, [r7, #12]
 8027e6c:	f7ff fe24 	bl	8027ab8 <flash_read>
		if(memcmp(verifBuf, pb-n, n) == 0)
 8027e70:	697b      	ldr	r3, [r7, #20]
 8027e72:	425b      	negs	r3, r3
 8027e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027e76:	4413      	add	r3, r2
 8027e78:	697a      	ldr	r2, [r7, #20]
 8027e7a:	4619      	mov	r1, r3
 8027e7c:	4831      	ldr	r0, [pc, #196]	; (8027f44 <flash_write+0x1e4>)
 8027e7e:	f008 fe55 	bl	8030b2c <memcmp>
 8027e82:	4603      	mov	r3, r0
 8027e84:	2b00      	cmp	r3, #0
 8027e86:	d102      	bne.n	8027e8e <flash_write+0x12e>
			nerr=0;
 8027e88:	2300      	movs	r3, #0
 8027e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027e8c:	e018      	b.n	8027ec0 <flash_write+0x160>
		else {
			nerr++;
 8027e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e90:	3301      	adds	r3, #1
 8027e92:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(sfT > 1) printf("write retry count[%d]\n", nerr);
 8027e94:	4b2c      	ldr	r3, [pc, #176]	; (8027f48 <flash_write+0x1e8>)
 8027e96:	781b      	ldrb	r3, [r3, #0]
 8027e98:	2b01      	cmp	r3, #1
 8027e9a:	d903      	bls.n	8027ea4 <flash_write+0x144>
 8027e9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8027e9e:	482b      	ldr	r0, [pc, #172]	; (8027f4c <flash_write+0x1ec>)
 8027ea0:	f001 fcd8 	bl	8029854 <printf_>
			if (nerr < 3) {
 8027ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027ea6:	2b02      	cmp	r3, #2
 8027ea8:	dc08      	bgt.n	8027ebc <flash_write+0x15c>
				msleep(2);
 8027eaa:	2002      	movs	r0, #2
 8027eac:	f002 faec 	bl	802a488 <msleep>
				pb -= n;
 8027eb0:	697b      	ldr	r3, [r7, #20]
 8027eb2:	425b      	negs	r3, r3
 8027eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027eb6:	4413      	add	r3, r2
 8027eb8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8027eba:	e023      	b.n	8027f04 <flash_write+0x1a4>
			}
			err = E_VERF;
 8027ebc:	2304      	movs	r3, #4
 8027ebe:	633b      	str	r3, [r7, #48]	; 0x30
		}

		if(sfT > 1) printf("flash_write a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027ec0:	4b21      	ldr	r3, [pc, #132]	; (8027f48 <flash_write+0x1e8>)
 8027ec2:	781b      	ldrb	r3, [r3, #0]
 8027ec4:	2b01      	cmp	r3, #1
 8027ec6:	d90e      	bls.n	8027ee6 <flash_write+0x186>
				(byte)(page >> 8), (byte)(page), oadr, n);
 8027ec8:	69fb      	ldr	r3, [r7, #28]
 8027eca:	121b      	asrs	r3, r3, #8
 8027ecc:	b2db      	uxtb	r3, r3
		if(sfT > 1) printf("flash_write a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027ece:	4619      	mov	r1, r3
				(byte)(page >> 8), (byte)(page), oadr, n);
 8027ed0:	69fb      	ldr	r3, [r7, #28]
 8027ed2:	b2db      	uxtb	r3, r3
		if(sfT > 1) printf("flash_write a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027ed4:	4618      	mov	r0, r3
 8027ed6:	7efa      	ldrb	r2, [r7, #27]
 8027ed8:	697b      	ldr	r3, [r7, #20]
 8027eda:	9300      	str	r3, [sp, #0]
 8027edc:	4613      	mov	r3, r2
 8027ede:	4602      	mov	r2, r0
 8027ee0:	481b      	ldr	r0, [pc, #108]	; (8027f50 <flash_write+0x1f0>)
 8027ee2:	f001 fcb7 	bl	8029854 <printf_>

		if(err) {
 8027ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027ee8:	2b00      	cmp	r3, #0
 8027eea:	d003      	beq.n	8027ef4 <flash_write+0x194>
			printf("flash write error\n");
 8027eec:	4819      	ldr	r0, [pc, #100]	; (8027f54 <flash_write+0x1f4>)
 8027eee:	f001 fcb1 	bl	8029854 <printf_>
			break;
 8027ef2:	e00b      	b.n	8027f0c <flash_write+0x1ac>
		}

		addr += n;
 8027ef4:	68fa      	ldr	r2, [r7, #12]
 8027ef6:	697b      	ldr	r3, [r7, #20]
 8027ef8:	4413      	add	r3, r2
 8027efa:	60fb      	str	r3, [r7, #12]
		size -= n;
 8027efc:	687a      	ldr	r2, [r7, #4]
 8027efe:	697b      	ldr	r3, [r7, #20]
 8027f00:	1ad3      	subs	r3, r2, r3
 8027f02:	607b      	str	r3, [r7, #4]
	while(size > 0 ) {
 8027f04:	687b      	ldr	r3, [r7, #4]
 8027f06:	2b00      	cmp	r3, #0
 8027f08:	f73f af52 	bgt.w	8027db0 <flash_write+0x50>
	}
	if(sfT > 1) printf("flash_write(addr %#lx, size %#lx) - errcode %#x\n", ad, siz, err);
 8027f0c:	4b0e      	ldr	r3, [pc, #56]	; (8027f48 <flash_write+0x1e8>)
 8027f0e:	781b      	ldrb	r3, [r3, #0]
 8027f10:	2b01      	cmp	r3, #1
 8027f12:	d905      	bls.n	8027f20 <flash_write+0x1c0>
 8027f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f16:	6a3a      	ldr	r2, [r7, #32]
 8027f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8027f1a:	480f      	ldr	r0, [pc, #60]	; (8027f58 <flash_write+0x1f8>)
 8027f1c:	f001 fc9a 	bl	8029854 <printf_>
	if(sfT > 2) hexdump(ad, (byte *)buf, siz);
 8027f20:	4b09      	ldr	r3, [pc, #36]	; (8027f48 <flash_write+0x1e8>)
 8027f22:	781b      	ldrb	r3, [r3, #0]
 8027f24:	2b02      	cmp	r3, #2
 8027f26:	d904      	bls.n	8027f32 <flash_write+0x1d2>
 8027f28:	6a3a      	ldr	r2, [r7, #32]
 8027f2a:	68b9      	ldr	r1, [r7, #8]
 8027f2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027f2e:	f7fe fffb 	bl	8026f28 <hexdump>
	return(err);
 8027f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8027f34:	4618      	mov	r0, r3
 8027f36:	373c      	adds	r7, #60	; 0x3c
 8027f38:	46bd      	mov	sp, r7
 8027f3a:	bd90      	pop	{r4, r7, pc}
 8027f3c:	08033050 	.word	0x08033050
 8027f40:	58020000 	.word	0x58020000
 8027f44:	24001edc 	.word	0x24001edc
 8027f48:	24001fdc 	.word	0x24001fdc
 8027f4c:	08033088 	.word	0x08033088
 8027f50:	080330a0 	.word	0x080330a0
 8027f54:	080330d8 	.word	0x080330d8
 8027f58:	080330ec 	.word	0x080330ec

08027f5c <SF_RW_Byte_FLASH>:


BYTE SF_RW_Byte_FLASH(BYTE data)
{
 8027f5c:	b580      	push	{r7, lr}
 8027f5e:	b086      	sub	sp, #24
 8027f60:	af02      	add	r7, sp, #8
 8027f62:	4603      	mov	r3, r0
 8027f64:	71fb      	strb	r3, [r7, #7]
   BYTE read, test = 0;
 8027f66:	2300      	movs	r3, #0
 8027f68:	73fb      	strb	r3, [r7, #15]
   HAL_SPI_TransmitReceive(SF_HANDLE, &data, &read, 1, 100);
 8027f6a:	f107 020e 	add.w	r2, r7, #14
 8027f6e:	1df9      	adds	r1, r7, #7
 8027f70:	2364      	movs	r3, #100	; 0x64
 8027f72:	9300      	str	r3, [sp, #0]
 8027f74:	2301      	movs	r3, #1
 8027f76:	4806      	ldr	r0, [pc, #24]	; (8027f90 <SF_RW_Byte_FLASH+0x34>)
 8027f78:	f006 fa2c 	bl	802e3d4 <HAL_SPI_TransmitReceive>
   if(read != 0)
 8027f7c:	7bbb      	ldrb	r3, [r7, #14]
 8027f7e:	2b00      	cmp	r3, #0
 8027f80:	d001      	beq.n	8027f86 <SF_RW_Byte_FLASH+0x2a>
	   test = 1;
 8027f82:	2301      	movs	r3, #1
 8027f84:	73fb      	strb	r3, [r7, #15]
   return read;
 8027f86:	7bbb      	ldrb	r3, [r7, #14]



}
 8027f88:	4618      	mov	r0, r3
 8027f8a:	3710      	adds	r7, #16
 8027f8c:	46bd      	mov	sp, r7
 8027f8e:	bd80      	pop	{r7, pc}
 8027f90:	24001a8c 	.word	0x24001a8c

08027f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8027f94:	b580      	push	{r7, lr}
 8027f96:	b084      	sub	sp, #16
 8027f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  MPU_Config();
 8027f9a:	f7ff f818 	bl	8026fce <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8027f9e:	4b3b      	ldr	r3, [pc, #236]	; (802808c <main+0xf8>)
 8027fa0:	695b      	ldr	r3, [r3, #20]
 8027fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027fa6:	2b00      	cmp	r3, #0
 8027fa8:	d11b      	bne.n	8027fe2 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8027faa:	f3bf 8f4f 	dsb	sy
}
 8027fae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8027fb0:	f3bf 8f6f 	isb	sy
}
 8027fb4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8027fb6:	4b35      	ldr	r3, [pc, #212]	; (802808c <main+0xf8>)
 8027fb8:	2200      	movs	r2, #0
 8027fba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8027fbe:	f3bf 8f4f 	dsb	sy
}
 8027fc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8027fc4:	f3bf 8f6f 	isb	sy
}
 8027fc8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8027fca:	4b30      	ldr	r3, [pc, #192]	; (802808c <main+0xf8>)
 8027fcc:	695b      	ldr	r3, [r3, #20]
 8027fce:	4a2f      	ldr	r2, [pc, #188]	; (802808c <main+0xf8>)
 8027fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027fd4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8027fd6:	f3bf 8f4f 	dsb	sy
}
 8027fda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8027fdc:	f3bf 8f6f 	isb	sy
}
 8027fe0:	e000      	b.n	8027fe4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8027fe2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8027fe4:	4b29      	ldr	r3, [pc, #164]	; (802808c <main+0xf8>)
 8027fe6:	695b      	ldr	r3, [r3, #20]
 8027fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027fec:	2b00      	cmp	r3, #0
 8027fee:	d138      	bne.n	8028062 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8027ff0:	4b26      	ldr	r3, [pc, #152]	; (802808c <main+0xf8>)
 8027ff2:	2200      	movs	r2, #0
 8027ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8027ff8:	f3bf 8f4f 	dsb	sy
}
 8027ffc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8027ffe:	4b23      	ldr	r3, [pc, #140]	; (802808c <main+0xf8>)
 8028000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8028004:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8028006:	68fb      	ldr	r3, [r7, #12]
 8028008:	0b5b      	lsrs	r3, r3, #13
 802800a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 802800e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8028010:	68fb      	ldr	r3, [r7, #12]
 8028012:	08db      	lsrs	r3, r3, #3
 8028014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8028018:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 802801a:	68bb      	ldr	r3, [r7, #8]
 802801c:	015a      	lsls	r2, r3, #5
 802801e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8028022:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8028024:	687a      	ldr	r2, [r7, #4]
 8028026:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8028028:	4918      	ldr	r1, [pc, #96]	; (802808c <main+0xf8>)
 802802a:	4313      	orrs	r3, r2
 802802c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8028030:	687b      	ldr	r3, [r7, #4]
 8028032:	1e5a      	subs	r2, r3, #1
 8028034:	607a      	str	r2, [r7, #4]
 8028036:	2b00      	cmp	r3, #0
 8028038:	d1ef      	bne.n	802801a <main+0x86>
    } while(sets-- != 0U);
 802803a:	68bb      	ldr	r3, [r7, #8]
 802803c:	1e5a      	subs	r2, r3, #1
 802803e:	60ba      	str	r2, [r7, #8]
 8028040:	2b00      	cmp	r3, #0
 8028042:	d1e5      	bne.n	8028010 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8028044:	f3bf 8f4f 	dsb	sy
}
 8028048:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 802804a:	4b10      	ldr	r3, [pc, #64]	; (802808c <main+0xf8>)
 802804c:	695b      	ldr	r3, [r3, #20]
 802804e:	4a0f      	ldr	r2, [pc, #60]	; (802808c <main+0xf8>)
 8028050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028054:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8028056:	f3bf 8f4f 	dsb	sy
}
 802805a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802805c:	f3bf 8f6f 	isb	sy
}
 8028060:	e000      	b.n	8028064 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8028062:	bf00      	nop

  SCB_EnableICache();
  SCB_EnableDCache();

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8028064:	f002 fa9c 	bl	802a5a0 <HAL_Init>
  SystemClock_Config();
 8028068:	f7ff f82e 	bl	80270c8 <SystemClock_Config>

  /* USER CODE BEGIN Init */
  InitPeripherals();
 802806c:	f7ff fc8e 	bl	802798c <InitPeripherals>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_InitTimer();
 8028070:	f7fe fc62 	bl	8026938 <bsp_InitTimer>
  bsp_InitUart();
 8028074:	f7fe fd99 	bl	8026baa <bsp_InitUart>
  bsp_InitSpiFlash();
 8028078:	f7fe fbfe 	bl	8026878 <bsp_InitSpiFlash>
  bDip_SW_Flag = TRUE;
 802807c:	4b04      	ldr	r3, [pc, #16]	; (8028090 <main+0xfc>)
 802807e:	2201      	movs	r2, #1
 8028080:	701a      	strb	r2, [r3, #0]
  GCUInitialize();
 8028082:	f000 f81b 	bl	80280bc <GCUInitialize>
  SerialProcess();
 8028086:	f000 f839 	bl	80280fc <SerialProcess>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 802808a:	e7fe      	b.n	802808a <main+0xf6>
 802808c:	e000ed00 	.word	0xe000ed00
 8028090:	24001fe4 	.word	0x24001fe4

08028094 <dip_sw>:
}



word dip_sw(void)
{
 8028094:	b480      	push	{r7}
 8028096:	b083      	sub	sp, #12
 8028098:	af00      	add	r7, sp, #0
	word	idata;

	idata = (GPIOB->IDR)^0xff;
 802809a:	4b07      	ldr	r3, [pc, #28]	; (80280b8 <dip_sw+0x24>)
 802809c:	691b      	ldr	r3, [r3, #16]
 802809e:	b29b      	uxth	r3, r3
 80280a0:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80280a4:	80fb      	strh	r3, [r7, #6]

	return(idata & 0xff);
 80280a6:	88fb      	ldrh	r3, [r7, #6]
 80280a8:	b2db      	uxtb	r3, r3
 80280aa:	b29b      	uxth	r3, r3
}
 80280ac:	4618      	mov	r0, r3
 80280ae:	370c      	adds	r7, #12
 80280b0:	46bd      	mov	sp, r7
 80280b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280b6:	4770      	bx	lr
 80280b8:	58020400 	.word	0x58020400

080280bc <GCUInitialize>:
* Return:   void
* comments:
*******************************************************************************/

void GCUInitialize(void)
{
 80280bc:	b580      	push	{r7, lr}
 80280be:	af00      	add	r7, sp, #0
	//EcuEmergencyOff();
	BuzzerOff();
 80280c0:	f7fd fa26 	bl	8025510 <BuzzerOff>

	//ControlStatusLED_En(DIR_RED);
	//ControlStatusLED_Ex(DIR_RED);
	ControlIndicatorLight_En(LAMP_OFF);
 80280c4:	2000      	movs	r0, #0
 80280c6:	f7fd faef 	bl	80256a8 <ControlIndicatorLight_En>
	ControlIndicatorLight_Ex(LAMP_OFF);
 80280ca:	2000      	movs	r0, #0
 80280cc:	f7fd fb1a 	bl	8025704 <ControlIndicatorLight_Ex>
	ControlUPS(UPS_CMD_CHK);
 80280d0:	2201      	movs	r2, #1
 80280d2:	2140      	movs	r1, #64	; 0x40
 80280d4:	4808      	ldr	r0, [pc, #32]	; (80280f8 <GCUInitialize+0x3c>)
 80280d6:	f003 f9c9 	bl	802b46c <HAL_GPIO_WritePin>
	//ok ms
	SetDefaultOpMode();
 80280da:	f7f8 feb5 	bl	8020e48 <SetDefaultOpMode>
	SetDefaultParameter();
 80280de:	f7f8 fecf 	bl	8020e80 <SetDefaultParameter>
	SetDefaultStatus();
 80280e2:	f7f8 ff0b 	bl	8020efc <SetDefaultStatus>
	Brr_SetSerialComm(TRUE);
 80280e6:	2001      	movs	r0, #1
 80280e8:	f7f8 fb00 	bl	80206ec <Brr_SetSerialComm>
	Brr_OpenBarrier(BARRIER_OPEN_FOR_EX);
 80280ec:	2001      	movs	r0, #1
 80280ee:	f7f8 fb1b 	bl	8020728 <Brr_OpenBarrier>
}
 80280f2:	bf00      	nop
 80280f4:	bd80      	pop	{r7, pc}
 80280f6:	bf00      	nop
 80280f8:	58021400 	.word	0x58021400

080280fc <SerialProcess>:


inline void SerialProcess(void)
{
 80280fc:	b580      	push	{r7, lr}
 80280fe:	af00      	add	r7, sp, #0
	for (;;)
	{
		ProcessComm_Barrier();
 8028100:	f7f8 fe34 	bl	8020d6c <ProcessComm_Barrier>
		ProcessComm_ECU();
 8028104:	f7fb f968 	bl	80233d8 <ProcessComm_ECU>
		ProcessComm_Barrier();
 8028108:	e7fa      	b.n	8028100 <SerialProcess+0x4>

0802810a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802810a:	b480      	push	{r7}
 802810c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 802810e:	b672      	cpsid	i
}
 8028110:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8028112:	e7fe      	b.n	8028112 <Error_Handler+0x8>

08028114 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8028114:	b480      	push	{r7}
 8028116:	b085      	sub	sp, #20
 8028118:	af00      	add	r7, sp, #0
 802811a:	60b9      	str	r1, [r7, #8]
 802811c:	607a      	str	r2, [r7, #4]
 802811e:	603b      	str	r3, [r7, #0]
 8028120:	4603      	mov	r3, r0
 8028122:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8028124:	bf00      	nop
 8028126:	3714      	adds	r7, #20
 8028128:	46bd      	mov	sp, r7
 802812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802812e:	4770      	bx	lr

08028130 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8028130:	b580      	push	{r7, lr}
 8028132:	b084      	sub	sp, #16
 8028134:	af00      	add	r7, sp, #0
 8028136:	60b9      	str	r1, [r7, #8]
 8028138:	607a      	str	r2, [r7, #4]
 802813a:	603b      	str	r3, [r7, #0]
 802813c:	4603      	mov	r3, r0
 802813e:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8028140:	7bfb      	ldrb	r3, [r7, #15]
 8028142:	2b00      	cmp	r3, #0
 8028144:	d003      	beq.n	802814e <_out_char+0x1e>
    _putchar(character);
 8028146:	7bfb      	ldrb	r3, [r7, #15]
 8028148:	4618      	mov	r0, r3
 802814a:	f7fe fddf 	bl	8026d0c <_putchar>
  }
}
 802814e:	bf00      	nop
 8028150:	3710      	adds	r7, #16
 8028152:	46bd      	mov	sp, r7
 8028154:	bd80      	pop	{r7, pc}

08028156 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8028156:	b480      	push	{r7}
 8028158:	b085      	sub	sp, #20
 802815a:	af00      	add	r7, sp, #0
 802815c:	6078      	str	r0, [r7, #4]
 802815e:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8028160:	687b      	ldr	r3, [r7, #4]
 8028162:	60fb      	str	r3, [r7, #12]
 8028164:	e002      	b.n	802816c <_strnlen_s+0x16>
 8028166:	68fb      	ldr	r3, [r7, #12]
 8028168:	3301      	adds	r3, #1
 802816a:	60fb      	str	r3, [r7, #12]
 802816c:	68fb      	ldr	r3, [r7, #12]
 802816e:	781b      	ldrb	r3, [r3, #0]
 8028170:	2b00      	cmp	r3, #0
 8028172:	d004      	beq.n	802817e <_strnlen_s+0x28>
 8028174:	683b      	ldr	r3, [r7, #0]
 8028176:	1e5a      	subs	r2, r3, #1
 8028178:	603a      	str	r2, [r7, #0]
 802817a:	2b00      	cmp	r3, #0
 802817c:	d1f3      	bne.n	8028166 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 802817e:	68fa      	ldr	r2, [r7, #12]
 8028180:	687b      	ldr	r3, [r7, #4]
 8028182:	1ad3      	subs	r3, r2, r3
}
 8028184:	4618      	mov	r0, r3
 8028186:	3714      	adds	r7, #20
 8028188:	46bd      	mov	sp, r7
 802818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802818e:	4770      	bx	lr

08028190 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8028190:	b480      	push	{r7}
 8028192:	b083      	sub	sp, #12
 8028194:	af00      	add	r7, sp, #0
 8028196:	4603      	mov	r3, r0
 8028198:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 802819a:	79fb      	ldrb	r3, [r7, #7]
 802819c:	2b2f      	cmp	r3, #47	; 0x2f
 802819e:	d904      	bls.n	80281aa <_is_digit+0x1a>
 80281a0:	79fb      	ldrb	r3, [r7, #7]
 80281a2:	2b39      	cmp	r3, #57	; 0x39
 80281a4:	d801      	bhi.n	80281aa <_is_digit+0x1a>
 80281a6:	2301      	movs	r3, #1
 80281a8:	e000      	b.n	80281ac <_is_digit+0x1c>
 80281aa:	2300      	movs	r3, #0
 80281ac:	f003 0301 	and.w	r3, r3, #1
 80281b0:	b2db      	uxtb	r3, r3
}
 80281b2:	4618      	mov	r0, r3
 80281b4:	370c      	adds	r7, #12
 80281b6:	46bd      	mov	sp, r7
 80281b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281bc:	4770      	bx	lr

080281be <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80281be:	b580      	push	{r7, lr}
 80281c0:	b084      	sub	sp, #16
 80281c2:	af00      	add	r7, sp, #0
 80281c4:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80281c6:	2300      	movs	r3, #0
 80281c8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80281ca:	e00e      	b.n	80281ea <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80281cc:	68fa      	ldr	r2, [r7, #12]
 80281ce:	4613      	mov	r3, r2
 80281d0:	009b      	lsls	r3, r3, #2
 80281d2:	4413      	add	r3, r2
 80281d4:	005b      	lsls	r3, r3, #1
 80281d6:	4618      	mov	r0, r3
 80281d8:	687b      	ldr	r3, [r7, #4]
 80281da:	681b      	ldr	r3, [r3, #0]
 80281dc:	1c59      	adds	r1, r3, #1
 80281de:	687a      	ldr	r2, [r7, #4]
 80281e0:	6011      	str	r1, [r2, #0]
 80281e2:	781b      	ldrb	r3, [r3, #0]
 80281e4:	4403      	add	r3, r0
 80281e6:	3b30      	subs	r3, #48	; 0x30
 80281e8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80281ea:	687b      	ldr	r3, [r7, #4]
 80281ec:	681b      	ldr	r3, [r3, #0]
 80281ee:	781b      	ldrb	r3, [r3, #0]
 80281f0:	4618      	mov	r0, r3
 80281f2:	f7ff ffcd 	bl	8028190 <_is_digit>
 80281f6:	4603      	mov	r3, r0
 80281f8:	2b00      	cmp	r3, #0
 80281fa:	d1e7      	bne.n	80281cc <_atoi+0xe>
  }
  return i;
 80281fc:	68fb      	ldr	r3, [r7, #12]
}
 80281fe:	4618      	mov	r0, r3
 8028200:	3710      	adds	r7, #16
 8028202:	46bd      	mov	sp, r7
 8028204:	bd80      	pop	{r7, pc}

08028206 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8028206:	b590      	push	{r4, r7, lr}
 8028208:	b087      	sub	sp, #28
 802820a:	af00      	add	r7, sp, #0
 802820c:	60f8      	str	r0, [r7, #12]
 802820e:	60b9      	str	r1, [r7, #8]
 8028210:	607a      	str	r2, [r7, #4]
 8028212:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8028214:	687b      	ldr	r3, [r7, #4]
 8028216:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8028218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802821a:	f003 0302 	and.w	r3, r3, #2
 802821e:	2b00      	cmp	r3, #0
 8028220:	d125      	bne.n	802826e <_out_rev+0x68>
 8028222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028224:	f003 0301 	and.w	r3, r3, #1
 8028228:	2b00      	cmp	r3, #0
 802822a:	d120      	bne.n	802826e <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 802822c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802822e:	617b      	str	r3, [r7, #20]
 8028230:	e00a      	b.n	8028248 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8028232:	687a      	ldr	r2, [r7, #4]
 8028234:	1c53      	adds	r3, r2, #1
 8028236:	607b      	str	r3, [r7, #4]
 8028238:	68fc      	ldr	r4, [r7, #12]
 802823a:	683b      	ldr	r3, [r7, #0]
 802823c:	68b9      	ldr	r1, [r7, #8]
 802823e:	2020      	movs	r0, #32
 8028240:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8028242:	697b      	ldr	r3, [r7, #20]
 8028244:	3301      	adds	r3, #1
 8028246:	617b      	str	r3, [r7, #20]
 8028248:	697a      	ldr	r2, [r7, #20]
 802824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802824c:	429a      	cmp	r2, r3
 802824e:	d3f0      	bcc.n	8028232 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8028250:	e00d      	b.n	802826e <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8028252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028254:	3b01      	subs	r3, #1
 8028256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802825c:	4413      	add	r3, r2
 802825e:	7818      	ldrb	r0, [r3, #0]
 8028260:	687a      	ldr	r2, [r7, #4]
 8028262:	1c53      	adds	r3, r2, #1
 8028264:	607b      	str	r3, [r7, #4]
 8028266:	68fc      	ldr	r4, [r7, #12]
 8028268:	683b      	ldr	r3, [r7, #0]
 802826a:	68b9      	ldr	r1, [r7, #8]
 802826c:	47a0      	blx	r4
  while (len) {
 802826e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028270:	2b00      	cmp	r3, #0
 8028272:	d1ee      	bne.n	8028252 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8028274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028276:	f003 0302 	and.w	r3, r3, #2
 802827a:	2b00      	cmp	r3, #0
 802827c:	d00e      	beq.n	802829c <_out_rev+0x96>
    while (idx - start_idx < width) {
 802827e:	e007      	b.n	8028290 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8028280:	687a      	ldr	r2, [r7, #4]
 8028282:	1c53      	adds	r3, r2, #1
 8028284:	607b      	str	r3, [r7, #4]
 8028286:	68fc      	ldr	r4, [r7, #12]
 8028288:	683b      	ldr	r3, [r7, #0]
 802828a:	68b9      	ldr	r1, [r7, #8]
 802828c:	2020      	movs	r0, #32
 802828e:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8028290:	687a      	ldr	r2, [r7, #4]
 8028292:	693b      	ldr	r3, [r7, #16]
 8028294:	1ad3      	subs	r3, r2, r3
 8028296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028298:	429a      	cmp	r2, r3
 802829a:	d8f1      	bhi.n	8028280 <_out_rev+0x7a>
    }
  }

  return idx;
 802829c:	687b      	ldr	r3, [r7, #4]
}
 802829e:	4618      	mov	r0, r3
 80282a0:	371c      	adds	r7, #28
 80282a2:	46bd      	mov	sp, r7
 80282a4:	bd90      	pop	{r4, r7, pc}

080282a6 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80282a6:	b580      	push	{r7, lr}
 80282a8:	b088      	sub	sp, #32
 80282aa:	af04      	add	r7, sp, #16
 80282ac:	60f8      	str	r0, [r7, #12]
 80282ae:	60b9      	str	r1, [r7, #8]
 80282b0:	607a      	str	r2, [r7, #4]
 80282b2:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80282b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80282b6:	f003 0302 	and.w	r3, r3, #2
 80282ba:	2b00      	cmp	r3, #0
 80282bc:	d136      	bne.n	802832c <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80282be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80282c0:	2b00      	cmp	r3, #0
 80282c2:	d018      	beq.n	80282f6 <_ntoa_format+0x50>
 80282c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80282c6:	f003 0301 	and.w	r3, r3, #1
 80282ca:	2b00      	cmp	r3, #0
 80282cc:	d013      	beq.n	80282f6 <_ntoa_format+0x50>
 80282ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80282d2:	2b00      	cmp	r3, #0
 80282d4:	d104      	bne.n	80282e0 <_ntoa_format+0x3a>
 80282d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80282d8:	f003 030c 	and.w	r3, r3, #12
 80282dc:	2b00      	cmp	r3, #0
 80282de:	d00a      	beq.n	80282f6 <_ntoa_format+0x50>
      width--;
 80282e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80282e2:	3b01      	subs	r3, #1
 80282e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80282e6:	e006      	b.n	80282f6 <_ntoa_format+0x50>
      buf[len++] = '0';
 80282e8:	69fb      	ldr	r3, [r7, #28]
 80282ea:	1c5a      	adds	r2, r3, #1
 80282ec:	61fa      	str	r2, [r7, #28]
 80282ee:	69ba      	ldr	r2, [r7, #24]
 80282f0:	4413      	add	r3, r2
 80282f2:	2230      	movs	r2, #48	; 0x30
 80282f4:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80282f6:	69fa      	ldr	r2, [r7, #28]
 80282f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282fa:	429a      	cmp	r2, r3
 80282fc:	d20a      	bcs.n	8028314 <_ntoa_format+0x6e>
 80282fe:	69fb      	ldr	r3, [r7, #28]
 8028300:	2b1f      	cmp	r3, #31
 8028302:	d9f1      	bls.n	80282e8 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8028304:	e006      	b.n	8028314 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8028306:	69fb      	ldr	r3, [r7, #28]
 8028308:	1c5a      	adds	r2, r3, #1
 802830a:	61fa      	str	r2, [r7, #28]
 802830c:	69ba      	ldr	r2, [r7, #24]
 802830e:	4413      	add	r3, r2
 8028310:	2230      	movs	r2, #48	; 0x30
 8028312:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8028314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028316:	f003 0301 	and.w	r3, r3, #1
 802831a:	2b00      	cmp	r3, #0
 802831c:	d006      	beq.n	802832c <_ntoa_format+0x86>
 802831e:	69fa      	ldr	r2, [r7, #28]
 8028320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028322:	429a      	cmp	r2, r3
 8028324:	d202      	bcs.n	802832c <_ntoa_format+0x86>
 8028326:	69fb      	ldr	r3, [r7, #28]
 8028328:	2b1f      	cmp	r3, #31
 802832a:	d9ec      	bls.n	8028306 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 802832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802832e:	f003 0310 	and.w	r3, r3, #16
 8028332:	2b00      	cmp	r3, #0
 8028334:	d058      	beq.n	80283e8 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8028336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802833c:	2b00      	cmp	r3, #0
 802833e:	d116      	bne.n	802836e <_ntoa_format+0xc8>
 8028340:	69fb      	ldr	r3, [r7, #28]
 8028342:	2b00      	cmp	r3, #0
 8028344:	d013      	beq.n	802836e <_ntoa_format+0xc8>
 8028346:	69fa      	ldr	r2, [r7, #28]
 8028348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802834a:	429a      	cmp	r2, r3
 802834c:	d003      	beq.n	8028356 <_ntoa_format+0xb0>
 802834e:	69fa      	ldr	r2, [r7, #28]
 8028350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028352:	429a      	cmp	r2, r3
 8028354:	d10b      	bne.n	802836e <_ntoa_format+0xc8>
      len--;
 8028356:	69fb      	ldr	r3, [r7, #28]
 8028358:	3b01      	subs	r3, #1
 802835a:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 802835c:	69fb      	ldr	r3, [r7, #28]
 802835e:	2b00      	cmp	r3, #0
 8028360:	d005      	beq.n	802836e <_ntoa_format+0xc8>
 8028362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028364:	2b10      	cmp	r3, #16
 8028366:	d102      	bne.n	802836e <_ntoa_format+0xc8>
        len--;
 8028368:	69fb      	ldr	r3, [r7, #28]
 802836a:	3b01      	subs	r3, #1
 802836c:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 802836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028370:	2b10      	cmp	r3, #16
 8028372:	d10f      	bne.n	8028394 <_ntoa_format+0xee>
 8028374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028376:	f003 0320 	and.w	r3, r3, #32
 802837a:	2b00      	cmp	r3, #0
 802837c:	d10a      	bne.n	8028394 <_ntoa_format+0xee>
 802837e:	69fb      	ldr	r3, [r7, #28]
 8028380:	2b1f      	cmp	r3, #31
 8028382:	d807      	bhi.n	8028394 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8028384:	69fb      	ldr	r3, [r7, #28]
 8028386:	1c5a      	adds	r2, r3, #1
 8028388:	61fa      	str	r2, [r7, #28]
 802838a:	69ba      	ldr	r2, [r7, #24]
 802838c:	4413      	add	r3, r2
 802838e:	2278      	movs	r2, #120	; 0x78
 8028390:	701a      	strb	r2, [r3, #0]
 8028392:	e01f      	b.n	80283d4 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8028394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028396:	2b10      	cmp	r3, #16
 8028398:	d10f      	bne.n	80283ba <_ntoa_format+0x114>
 802839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802839c:	f003 0320 	and.w	r3, r3, #32
 80283a0:	2b00      	cmp	r3, #0
 80283a2:	d00a      	beq.n	80283ba <_ntoa_format+0x114>
 80283a4:	69fb      	ldr	r3, [r7, #28]
 80283a6:	2b1f      	cmp	r3, #31
 80283a8:	d807      	bhi.n	80283ba <_ntoa_format+0x114>
      buf[len++] = 'X';
 80283aa:	69fb      	ldr	r3, [r7, #28]
 80283ac:	1c5a      	adds	r2, r3, #1
 80283ae:	61fa      	str	r2, [r7, #28]
 80283b0:	69ba      	ldr	r2, [r7, #24]
 80283b2:	4413      	add	r3, r2
 80283b4:	2258      	movs	r2, #88	; 0x58
 80283b6:	701a      	strb	r2, [r3, #0]
 80283b8:	e00c      	b.n	80283d4 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80283ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80283bc:	2b02      	cmp	r3, #2
 80283be:	d109      	bne.n	80283d4 <_ntoa_format+0x12e>
 80283c0:	69fb      	ldr	r3, [r7, #28]
 80283c2:	2b1f      	cmp	r3, #31
 80283c4:	d806      	bhi.n	80283d4 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80283c6:	69fb      	ldr	r3, [r7, #28]
 80283c8:	1c5a      	adds	r2, r3, #1
 80283ca:	61fa      	str	r2, [r7, #28]
 80283cc:	69ba      	ldr	r2, [r7, #24]
 80283ce:	4413      	add	r3, r2
 80283d0:	2262      	movs	r2, #98	; 0x62
 80283d2:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80283d4:	69fb      	ldr	r3, [r7, #28]
 80283d6:	2b1f      	cmp	r3, #31
 80283d8:	d806      	bhi.n	80283e8 <_ntoa_format+0x142>
      buf[len++] = '0';
 80283da:	69fb      	ldr	r3, [r7, #28]
 80283dc:	1c5a      	adds	r2, r3, #1
 80283de:	61fa      	str	r2, [r7, #28]
 80283e0:	69ba      	ldr	r2, [r7, #24]
 80283e2:	4413      	add	r3, r2
 80283e4:	2230      	movs	r2, #48	; 0x30
 80283e6:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80283e8:	69fb      	ldr	r3, [r7, #28]
 80283ea:	2b1f      	cmp	r3, #31
 80283ec:	d824      	bhi.n	8028438 <_ntoa_format+0x192>
    if (negative) {
 80283ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80283f2:	2b00      	cmp	r3, #0
 80283f4:	d007      	beq.n	8028406 <_ntoa_format+0x160>
      buf[len++] = '-';
 80283f6:	69fb      	ldr	r3, [r7, #28]
 80283f8:	1c5a      	adds	r2, r3, #1
 80283fa:	61fa      	str	r2, [r7, #28]
 80283fc:	69ba      	ldr	r2, [r7, #24]
 80283fe:	4413      	add	r3, r2
 8028400:	222d      	movs	r2, #45	; 0x2d
 8028402:	701a      	strb	r2, [r3, #0]
 8028404:	e018      	b.n	8028438 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8028406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028408:	f003 0304 	and.w	r3, r3, #4
 802840c:	2b00      	cmp	r3, #0
 802840e:	d007      	beq.n	8028420 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8028410:	69fb      	ldr	r3, [r7, #28]
 8028412:	1c5a      	adds	r2, r3, #1
 8028414:	61fa      	str	r2, [r7, #28]
 8028416:	69ba      	ldr	r2, [r7, #24]
 8028418:	4413      	add	r3, r2
 802841a:	222b      	movs	r2, #43	; 0x2b
 802841c:	701a      	strb	r2, [r3, #0]
 802841e:	e00b      	b.n	8028438 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8028420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028422:	f003 0308 	and.w	r3, r3, #8
 8028426:	2b00      	cmp	r3, #0
 8028428:	d006      	beq.n	8028438 <_ntoa_format+0x192>
      buf[len++] = ' ';
 802842a:	69fb      	ldr	r3, [r7, #28]
 802842c:	1c5a      	adds	r2, r3, #1
 802842e:	61fa      	str	r2, [r7, #28]
 8028430:	69ba      	ldr	r2, [r7, #24]
 8028432:	4413      	add	r3, r2
 8028434:	2220      	movs	r2, #32
 8028436:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8028438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802843a:	9303      	str	r3, [sp, #12]
 802843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802843e:	9302      	str	r3, [sp, #8]
 8028440:	69fb      	ldr	r3, [r7, #28]
 8028442:	9301      	str	r3, [sp, #4]
 8028444:	69bb      	ldr	r3, [r7, #24]
 8028446:	9300      	str	r3, [sp, #0]
 8028448:	683b      	ldr	r3, [r7, #0]
 802844a:	687a      	ldr	r2, [r7, #4]
 802844c:	68b9      	ldr	r1, [r7, #8]
 802844e:	68f8      	ldr	r0, [r7, #12]
 8028450:	f7ff fed9 	bl	8028206 <_out_rev>
 8028454:	4603      	mov	r3, r0
}
 8028456:	4618      	mov	r0, r3
 8028458:	3710      	adds	r7, #16
 802845a:	46bd      	mov	sp, r7
 802845c:	bd80      	pop	{r7, pc}

0802845e <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 802845e:	b580      	push	{r7, lr}
 8028460:	b096      	sub	sp, #88	; 0x58
 8028462:	af08      	add	r7, sp, #32
 8028464:	60f8      	str	r0, [r7, #12]
 8028466:	60b9      	str	r1, [r7, #8]
 8028468:	607a      	str	r2, [r7, #4]
 802846a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 802846c:	2300      	movs	r3, #0
 802846e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8028470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028472:	2b00      	cmp	r3, #0
 8028474:	d103      	bne.n	802847e <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8028476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028478:	f023 0310 	bic.w	r3, r3, #16
 802847c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 802847e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028484:	2b00      	cmp	r3, #0
 8028486:	d002      	beq.n	802848e <_ntoa_long+0x30>
 8028488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802848a:	2b00      	cmp	r3, #0
 802848c:	d032      	beq.n	80284f4 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 802848e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8028492:	fbb3 f2f2 	udiv	r2, r3, r2
 8028496:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8028498:	fb01 f202 	mul.w	r2, r1, r2
 802849c:	1a9b      	subs	r3, r3, r2
 802849e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80284a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80284a6:	2b09      	cmp	r3, #9
 80284a8:	d804      	bhi.n	80284b4 <_ntoa_long+0x56>
 80284aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80284ae:	3330      	adds	r3, #48	; 0x30
 80284b0:	b2da      	uxtb	r2, r3
 80284b2:	e00d      	b.n	80284d0 <_ntoa_long+0x72>
 80284b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80284b6:	f003 0320 	and.w	r3, r3, #32
 80284ba:	2b00      	cmp	r3, #0
 80284bc:	d001      	beq.n	80284c2 <_ntoa_long+0x64>
 80284be:	2241      	movs	r2, #65	; 0x41
 80284c0:	e000      	b.n	80284c4 <_ntoa_long+0x66>
 80284c2:	2261      	movs	r2, #97	; 0x61
 80284c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80284c8:	4413      	add	r3, r2
 80284ca:	b2db      	uxtb	r3, r3
 80284cc:	3b0a      	subs	r3, #10
 80284ce:	b2da      	uxtb	r2, r3
 80284d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284d2:	1c59      	adds	r1, r3, #1
 80284d4:	6379      	str	r1, [r7, #52]	; 0x34
 80284d6:	3338      	adds	r3, #56	; 0x38
 80284d8:	443b      	add	r3, r7
 80284da:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80284de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80284e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80284e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80284e6:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80284e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80284ea:	2b00      	cmp	r3, #0
 80284ec:	d002      	beq.n	80284f4 <_ntoa_long+0x96>
 80284ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284f0:	2b1f      	cmp	r3, #31
 80284f2:	d9cc      	bls.n	802848e <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80284f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80284f6:	9306      	str	r3, [sp, #24]
 80284f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80284fa:	9305      	str	r3, [sp, #20]
 80284fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80284fe:	9304      	str	r3, [sp, #16]
 8028500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028502:	9303      	str	r3, [sp, #12]
 8028504:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8028508:	9302      	str	r3, [sp, #8]
 802850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802850c:	9301      	str	r3, [sp, #4]
 802850e:	f107 0310 	add.w	r3, r7, #16
 8028512:	9300      	str	r3, [sp, #0]
 8028514:	683b      	ldr	r3, [r7, #0]
 8028516:	687a      	ldr	r2, [r7, #4]
 8028518:	68b9      	ldr	r1, [r7, #8]
 802851a:	68f8      	ldr	r0, [r7, #12]
 802851c:	f7ff fec3 	bl	80282a6 <_ntoa_format>
 8028520:	4603      	mov	r3, r0
}
 8028522:	4618      	mov	r0, r3
 8028524:	3738      	adds	r7, #56	; 0x38
 8028526:	46bd      	mov	sp, r7
 8028528:	bd80      	pop	{r7, pc}

0802852a <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 802852a:	b580      	push	{r7, lr}
 802852c:	b096      	sub	sp, #88	; 0x58
 802852e:	af08      	add	r7, sp, #32
 8028530:	60f8      	str	r0, [r7, #12]
 8028532:	60b9      	str	r1, [r7, #8]
 8028534:	607a      	str	r2, [r7, #4]
 8028536:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8028538:	2300      	movs	r3, #0
 802853a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 802853c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8028540:	4313      	orrs	r3, r2
 8028542:	d103      	bne.n	802854c <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8028544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8028546:	f023 0310 	bic.w	r3, r3, #16
 802854a:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 802854c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802854e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028552:	2b00      	cmp	r3, #0
 8028554:	d003      	beq.n	802855e <_ntoa_long_long+0x34>
 8028556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802855a:	4313      	orrs	r3, r2
 802855c:	d037      	beq.n	80285ce <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 802855e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8028562:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8028566:	f7f7 ff13 	bl	8020390 <__aeabi_uldivmod>
 802856a:	4613      	mov	r3, r2
 802856c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8028570:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8028574:	2b09      	cmp	r3, #9
 8028576:	d804      	bhi.n	8028582 <_ntoa_long_long+0x58>
 8028578:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802857c:	3330      	adds	r3, #48	; 0x30
 802857e:	b2da      	uxtb	r2, r3
 8028580:	e00d      	b.n	802859e <_ntoa_long_long+0x74>
 8028582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8028584:	f003 0320 	and.w	r3, r3, #32
 8028588:	2b00      	cmp	r3, #0
 802858a:	d001      	beq.n	8028590 <_ntoa_long_long+0x66>
 802858c:	2241      	movs	r2, #65	; 0x41
 802858e:	e000      	b.n	8028592 <_ntoa_long_long+0x68>
 8028590:	2261      	movs	r2, #97	; 0x61
 8028592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8028596:	4413      	add	r3, r2
 8028598:	b2db      	uxtb	r3, r3
 802859a:	3b0a      	subs	r3, #10
 802859c:	b2da      	uxtb	r2, r3
 802859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80285a0:	1c59      	adds	r1, r3, #1
 80285a2:	6379      	str	r1, [r7, #52]	; 0x34
 80285a4:	3338      	adds	r3, #56	; 0x38
 80285a6:	443b      	add	r3, r7
 80285a8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80285ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80285b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80285b4:	f7f7 feec 	bl	8020390 <__aeabi_uldivmod>
 80285b8:	4602      	mov	r2, r0
 80285ba:	460b      	mov	r3, r1
 80285bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80285c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80285c4:	4313      	orrs	r3, r2
 80285c6:	d002      	beq.n	80285ce <_ntoa_long_long+0xa4>
 80285c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80285ca:	2b1f      	cmp	r3, #31
 80285cc:	d9c7      	bls.n	802855e <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80285ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80285d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80285d2:	9206      	str	r2, [sp, #24]
 80285d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80285d6:	9205      	str	r2, [sp, #20]
 80285d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80285da:	9204      	str	r2, [sp, #16]
 80285dc:	9303      	str	r3, [sp, #12]
 80285de:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80285e2:	9302      	str	r3, [sp, #8]
 80285e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80285e6:	9301      	str	r3, [sp, #4]
 80285e8:	f107 0310 	add.w	r3, r7, #16
 80285ec:	9300      	str	r3, [sp, #0]
 80285ee:	683b      	ldr	r3, [r7, #0]
 80285f0:	687a      	ldr	r2, [r7, #4]
 80285f2:	68b9      	ldr	r1, [r7, #8]
 80285f4:	68f8      	ldr	r0, [r7, #12]
 80285f6:	f7ff fe56 	bl	80282a6 <_ntoa_format>
 80285fa:	4603      	mov	r3, r0
}
 80285fc:	4618      	mov	r0, r3
 80285fe:	3738      	adds	r7, #56	; 0x38
 8028600:	46bd      	mov	sp, r7
 8028602:	bd80      	pop	{r7, pc}
 8028604:	0000      	movs	r0, r0
	...

08028608 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8028608:	b580      	push	{r7, lr}
 802860a:	b09c      	sub	sp, #112	; 0x70
 802860c:	af04      	add	r7, sp, #16
 802860e:	6178      	str	r0, [r7, #20]
 8028610:	6139      	str	r1, [r7, #16]
 8028612:	60fa      	str	r2, [r7, #12]
 8028614:	60bb      	str	r3, [r7, #8]
 8028616:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 802861a:	2300      	movs	r3, #0
 802861c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 802861e:	f04f 0200 	mov.w	r2, #0
 8028622:	f04f 0300 	mov.w	r3, #0
 8028626:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 802862a:	ed97 6b00 	vldr	d6, [r7]
 802862e:	ed97 7b00 	vldr	d7, [r7]
 8028632:	eeb4 6b47 	vcmp.f64	d6, d7
 8028636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802863a:	d00f      	beq.n	802865c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 802863c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802863e:	9303      	str	r3, [sp, #12]
 8028640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028642:	9302      	str	r3, [sp, #8]
 8028644:	2303      	movs	r3, #3
 8028646:	9301      	str	r3, [sp, #4]
 8028648:	4bb5      	ldr	r3, [pc, #724]	; (8028920 <_ftoa+0x318>)
 802864a:	9300      	str	r3, [sp, #0]
 802864c:	68bb      	ldr	r3, [r7, #8]
 802864e:	68fa      	ldr	r2, [r7, #12]
 8028650:	6939      	ldr	r1, [r7, #16]
 8028652:	6978      	ldr	r0, [r7, #20]
 8028654:	f7ff fdd7 	bl	8028206 <_out_rev>
 8028658:	4603      	mov	r3, r0
 802865a:	e215      	b.n	8028a88 <_ftoa+0x480>
  if (value < -DBL_MAX)
 802865c:	ed97 7b00 	vldr	d7, [r7]
 8028660:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 80288f8 <_ftoa+0x2f0>
 8028664:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802866c:	d50f      	bpl.n	802868e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 802866e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028670:	9303      	str	r3, [sp, #12]
 8028672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028674:	9302      	str	r3, [sp, #8]
 8028676:	2304      	movs	r3, #4
 8028678:	9301      	str	r3, [sp, #4]
 802867a:	4baa      	ldr	r3, [pc, #680]	; (8028924 <_ftoa+0x31c>)
 802867c:	9300      	str	r3, [sp, #0]
 802867e:	68bb      	ldr	r3, [r7, #8]
 8028680:	68fa      	ldr	r2, [r7, #12]
 8028682:	6939      	ldr	r1, [r7, #16]
 8028684:	6978      	ldr	r0, [r7, #20]
 8028686:	f7ff fdbe 	bl	8028206 <_out_rev>
 802868a:	4603      	mov	r3, r0
 802868c:	e1fc      	b.n	8028a88 <_ftoa+0x480>
  if (value > DBL_MAX)
 802868e:	ed97 7b00 	vldr	d7, [r7]
 8028692:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8028900 <_ftoa+0x2f8>
 8028696:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802869a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802869e:	dd1d      	ble.n	80286dc <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80286a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80286a2:	f003 0304 	and.w	r3, r3, #4
 80286a6:	2b00      	cmp	r3, #0
 80286a8:	d001      	beq.n	80286ae <_ftoa+0xa6>
 80286aa:	4b9f      	ldr	r3, [pc, #636]	; (8028928 <_ftoa+0x320>)
 80286ac:	e000      	b.n	80286b0 <_ftoa+0xa8>
 80286ae:	4b9f      	ldr	r3, [pc, #636]	; (802892c <_ftoa+0x324>)
 80286b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80286b2:	f002 0204 	and.w	r2, r2, #4
 80286b6:	2a00      	cmp	r2, #0
 80286b8:	d001      	beq.n	80286be <_ftoa+0xb6>
 80286ba:	2204      	movs	r2, #4
 80286bc:	e000      	b.n	80286c0 <_ftoa+0xb8>
 80286be:	2203      	movs	r2, #3
 80286c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80286c2:	9103      	str	r1, [sp, #12]
 80286c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80286c6:	9102      	str	r1, [sp, #8]
 80286c8:	9201      	str	r2, [sp, #4]
 80286ca:	9300      	str	r3, [sp, #0]
 80286cc:	68bb      	ldr	r3, [r7, #8]
 80286ce:	68fa      	ldr	r2, [r7, #12]
 80286d0:	6939      	ldr	r1, [r7, #16]
 80286d2:	6978      	ldr	r0, [r7, #20]
 80286d4:	f7ff fd97 	bl	8028206 <_out_rev>
 80286d8:	4603      	mov	r3, r0
 80286da:	e1d5      	b.n	8028a88 <_ftoa+0x480>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80286dc:	ed97 7b00 	vldr	d7, [r7]
 80286e0:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8028908 <_ftoa+0x300>
 80286e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80286e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286ec:	dc08      	bgt.n	8028700 <_ftoa+0xf8>
 80286ee:	ed97 7b00 	vldr	d7, [r7]
 80286f2:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8028910 <_ftoa+0x308>
 80286f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80286fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286fe:	d50f      	bpl.n	8028720 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8028700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028702:	9302      	str	r3, [sp, #8]
 8028704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028706:	9301      	str	r3, [sp, #4]
 8028708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802870a:	9300      	str	r3, [sp, #0]
 802870c:	ed97 0b00 	vldr	d0, [r7]
 8028710:	68bb      	ldr	r3, [r7, #8]
 8028712:	68fa      	ldr	r2, [r7, #12]
 8028714:	6939      	ldr	r1, [r7, #16]
 8028716:	6978      	ldr	r0, [r7, #20]
 8028718:	f000 f9be 	bl	8028a98 <_etoa>
 802871c:	4603      	mov	r3, r0
 802871e:	e1b3      	b.n	8028a88 <_ftoa+0x480>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8028720:	2300      	movs	r3, #0
 8028722:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8028726:	ed97 7b00 	vldr	d7, [r7]
 802872a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802872e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028732:	d50a      	bpl.n	802874a <_ftoa+0x142>
    negative = true;
 8028734:	2301      	movs	r3, #1
 8028736:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 802873a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8028918 <_ftoa+0x310>
 802873e:	ed97 7b00 	vldr	d7, [r7]
 8028742:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028746:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 802874a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802874c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028750:	2b00      	cmp	r3, #0
 8028752:	d10d      	bne.n	8028770 <_ftoa+0x168>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8028754:	2306      	movs	r3, #6
 8028756:	66bb      	str	r3, [r7, #104]	; 0x68
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8028758:	e00a      	b.n	8028770 <_ftoa+0x168>
    buf[len++] = '0';
 802875a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802875c:	1c5a      	adds	r2, r3, #1
 802875e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8028760:	3360      	adds	r3, #96	; 0x60
 8028762:	443b      	add	r3, r7
 8028764:	2230      	movs	r2, #48	; 0x30
 8028766:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 802876a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802876c:	3b01      	subs	r3, #1
 802876e:	66bb      	str	r3, [r7, #104]	; 0x68
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8028770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028772:	2b1f      	cmp	r3, #31
 8028774:	d802      	bhi.n	802877c <_ftoa+0x174>
 8028776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028778:	2b09      	cmp	r3, #9
 802877a:	d8ee      	bhi.n	802875a <_ftoa+0x152>
  }

  int whole = (int)value;
 802877c:	ed97 7b00 	vldr	d7, [r7]
 8028780:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8028784:	ee17 3a90 	vmov	r3, s15
 8028788:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 802878a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802878c:	ee07 3a90 	vmov	s15, r3
 8028790:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028794:	ed97 6b00 	vldr	d6, [r7]
 8028798:	ee36 6b47 	vsub.f64	d6, d6, d7
 802879c:	4a64      	ldr	r2, [pc, #400]	; (8028930 <_ftoa+0x328>)
 802879e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80287a0:	00db      	lsls	r3, r3, #3
 80287a2:	4413      	add	r3, r2
 80287a4:	ed93 7b00 	vldr	d7, [r3]
 80287a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80287ac:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80287b0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80287b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80287b8:	ee17 3a90 	vmov	r3, s15
 80287bc:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80287be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80287c0:	ee07 3a90 	vmov	s15, r3
 80287c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80287c8:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80287cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80287d0:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80287d4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80287d8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80287dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80287e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80287e4:	dd18      	ble.n	8028818 <_ftoa+0x210>
    ++frac;
 80287e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80287e8:	3301      	adds	r3, #1
 80287ea:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80287ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80287ee:	ee07 3a90 	vmov	s15, r3
 80287f2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80287f6:	4a4e      	ldr	r2, [pc, #312]	; (8028930 <_ftoa+0x328>)
 80287f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80287fa:	00db      	lsls	r3, r3, #3
 80287fc:	4413      	add	r3, r2
 80287fe:	ed93 7b00 	vldr	d7, [r3]
 8028802:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802880a:	db19      	blt.n	8028840 <_ftoa+0x238>
      frac = 0;
 802880c:	2300      	movs	r3, #0
 802880e:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8028810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028812:	3301      	adds	r3, #1
 8028814:	657b      	str	r3, [r7, #84]	; 0x54
 8028816:	e013      	b.n	8028840 <_ftoa+0x238>
    }
  }
  else if (diff < 0.5) {
 8028818:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 802881c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8028820:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028828:	d40a      	bmi.n	8028840 <_ftoa+0x238>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 802882a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802882c:	2b00      	cmp	r3, #0
 802882e:	d004      	beq.n	802883a <_ftoa+0x232>
 8028830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028832:	f003 0301 	and.w	r3, r3, #1
 8028836:	2b00      	cmp	r3, #0
 8028838:	d002      	beq.n	8028840 <_ftoa+0x238>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 802883a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802883c:	3301      	adds	r3, #1
 802883e:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8028840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028842:	2b00      	cmp	r3, #0
 8028844:	d12e      	bne.n	80288a4 <_ftoa+0x29c>
    diff = value - (double)whole;
 8028846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028848:	ee07 3a90 	vmov	s15, r3
 802884c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028850:	ed97 6b00 	vldr	d6, [r7]
 8028854:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028858:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 802885c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8028860:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8028864:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802886c:	bf4c      	ite	mi
 802886e:	2301      	movmi	r3, #1
 8028870:	2300      	movpl	r3, #0
 8028872:	b2db      	uxtb	r3, r3
 8028874:	f083 0301 	eor.w	r3, r3, #1
 8028878:	b2db      	uxtb	r3, r3
 802887a:	2b00      	cmp	r3, #0
 802887c:	d108      	bne.n	8028890 <_ftoa+0x288>
 802887e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8028882:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8028886:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802888a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802888e:	dd70      	ble.n	8028972 <_ftoa+0x36a>
 8028890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028892:	f003 0301 	and.w	r3, r3, #1
 8028896:	2b00      	cmp	r3, #0
 8028898:	f000 808d 	beq.w	80289b6 <_ftoa+0x3ae>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 802889c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802889e:	3301      	adds	r3, #1
 80288a0:	657b      	str	r3, [r7, #84]	; 0x54
 80288a2:	e088      	b.n	80289b6 <_ftoa+0x3ae>
    }
  }
  else {
    unsigned int count = prec;
 80288a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80288a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80288a8:	e01f      	b.n	80288ea <_ftoa+0x2e2>
      --count;
 80288aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80288ac:	3b01      	subs	r3, #1
 80288ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80288b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80288b2:	4b20      	ldr	r3, [pc, #128]	; (8028934 <_ftoa+0x32c>)
 80288b4:	fba3 2301 	umull	r2, r3, r3, r1
 80288b8:	08da      	lsrs	r2, r3, #3
 80288ba:	4613      	mov	r3, r2
 80288bc:	009b      	lsls	r3, r3, #2
 80288be:	4413      	add	r3, r2
 80288c0:	005b      	lsls	r3, r3, #1
 80288c2:	1aca      	subs	r2, r1, r3
 80288c4:	b2d2      	uxtb	r2, r2
 80288c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80288c8:	1c59      	adds	r1, r3, #1
 80288ca:	65f9      	str	r1, [r7, #92]	; 0x5c
 80288cc:	3230      	adds	r2, #48	; 0x30
 80288ce:	b2d2      	uxtb	r2, r2
 80288d0:	3360      	adds	r3, #96	; 0x60
 80288d2:	443b      	add	r3, r7
 80288d4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80288d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80288da:	4a16      	ldr	r2, [pc, #88]	; (8028934 <_ftoa+0x32c>)
 80288dc:	fba2 2303 	umull	r2, r3, r2, r3
 80288e0:	08db      	lsrs	r3, r3, #3
 80288e2:	653b      	str	r3, [r7, #80]	; 0x50
 80288e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80288e6:	2b00      	cmp	r3, #0
 80288e8:	d026      	beq.n	8028938 <_ftoa+0x330>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80288ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80288ec:	2b1f      	cmp	r3, #31
 80288ee:	d9dc      	bls.n	80288aa <_ftoa+0x2a2>
 80288f0:	e02c      	b.n	802894c <_ftoa+0x344>
 80288f2:	bf00      	nop
 80288f4:	f3af 8000 	nop.w
 80288f8:	ffffffff 	.word	0xffffffff
 80288fc:	ffefffff 	.word	0xffefffff
 8028900:	ffffffff 	.word	0xffffffff
 8028904:	7fefffff 	.word	0x7fefffff
 8028908:	00000000 	.word	0x00000000
 802890c:	41cdcd65 	.word	0x41cdcd65
 8028910:	00000000 	.word	0x00000000
 8028914:	c1cdcd65 	.word	0xc1cdcd65
	...
 8028920:	08033120 	.word	0x08033120
 8028924:	08033124 	.word	0x08033124
 8028928:	0803312c 	.word	0x0803312c
 802892c:	08033134 	.word	0x08033134
 8028930:	080332b0 	.word	0x080332b0
 8028934:	cccccccd 	.word	0xcccccccd
        break;
 8028938:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 802893a:	e007      	b.n	802894c <_ftoa+0x344>
      buf[len++] = '0';
 802893c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802893e:	1c5a      	adds	r2, r3, #1
 8028940:	65fa      	str	r2, [r7, #92]	; 0x5c
 8028942:	3360      	adds	r3, #96	; 0x60
 8028944:	443b      	add	r3, r7
 8028946:	2230      	movs	r2, #48	; 0x30
 8028948:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 802894c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802894e:	2b1f      	cmp	r3, #31
 8028950:	d804      	bhi.n	802895c <_ftoa+0x354>
 8028952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028954:	1e5a      	subs	r2, r3, #1
 8028956:	64fa      	str	r2, [r7, #76]	; 0x4c
 8028958:	2b00      	cmp	r3, #0
 802895a:	d1ef      	bne.n	802893c <_ftoa+0x334>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 802895c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802895e:	2b1f      	cmp	r3, #31
 8028960:	d829      	bhi.n	80289b6 <_ftoa+0x3ae>
      // add decimal
      buf[len++] = '.';
 8028962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028964:	1c5a      	adds	r2, r3, #1
 8028966:	65fa      	str	r2, [r7, #92]	; 0x5c
 8028968:	3360      	adds	r3, #96	; 0x60
 802896a:	443b      	add	r3, r7
 802896c:	222e      	movs	r2, #46	; 0x2e
 802896e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8028972:	e020      	b.n	80289b6 <_ftoa+0x3ae>
    buf[len++] = (char)(48 + (whole % 10));
 8028974:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028976:	4b46      	ldr	r3, [pc, #280]	; (8028a90 <_ftoa+0x488>)
 8028978:	fb83 1302 	smull	r1, r3, r3, r2
 802897c:	1099      	asrs	r1, r3, #2
 802897e:	17d3      	asrs	r3, r2, #31
 8028980:	1ac9      	subs	r1, r1, r3
 8028982:	460b      	mov	r3, r1
 8028984:	009b      	lsls	r3, r3, #2
 8028986:	440b      	add	r3, r1
 8028988:	005b      	lsls	r3, r3, #1
 802898a:	1ad1      	subs	r1, r2, r3
 802898c:	b2ca      	uxtb	r2, r1
 802898e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028990:	1c59      	adds	r1, r3, #1
 8028992:	65f9      	str	r1, [r7, #92]	; 0x5c
 8028994:	3230      	adds	r2, #48	; 0x30
 8028996:	b2d2      	uxtb	r2, r2
 8028998:	3360      	adds	r3, #96	; 0x60
 802899a:	443b      	add	r3, r7
 802899c:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80289a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80289a2:	4a3b      	ldr	r2, [pc, #236]	; (8028a90 <_ftoa+0x488>)
 80289a4:	fb82 1203 	smull	r1, r2, r2, r3
 80289a8:	1092      	asrs	r2, r2, #2
 80289aa:	17db      	asrs	r3, r3, #31
 80289ac:	1ad3      	subs	r3, r2, r3
 80289ae:	657b      	str	r3, [r7, #84]	; 0x54
 80289b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80289b2:	2b00      	cmp	r3, #0
 80289b4:	d003      	beq.n	80289be <_ftoa+0x3b6>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80289b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80289b8:	2b1f      	cmp	r3, #31
 80289ba:	d9db      	bls.n	8028974 <_ftoa+0x36c>
 80289bc:	e000      	b.n	80289c0 <_ftoa+0x3b8>
      break;
 80289be:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80289c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80289c2:	f003 0302 	and.w	r3, r3, #2
 80289c6:	2b00      	cmp	r3, #0
 80289c8:	d123      	bne.n	8028a12 <_ftoa+0x40a>
 80289ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80289cc:	f003 0301 	and.w	r3, r3, #1
 80289d0:	2b00      	cmp	r3, #0
 80289d2:	d01e      	beq.n	8028a12 <_ftoa+0x40a>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80289d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80289d6:	2b00      	cmp	r3, #0
 80289d8:	d014      	beq.n	8028a04 <_ftoa+0x3fc>
 80289da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80289de:	2b00      	cmp	r3, #0
 80289e0:	d104      	bne.n	80289ec <_ftoa+0x3e4>
 80289e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80289e4:	f003 030c 	and.w	r3, r3, #12
 80289e8:	2b00      	cmp	r3, #0
 80289ea:	d00b      	beq.n	8028a04 <_ftoa+0x3fc>
      width--;
 80289ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80289ee:	3b01      	subs	r3, #1
 80289f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80289f2:	e007      	b.n	8028a04 <_ftoa+0x3fc>
      buf[len++] = '0';
 80289f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80289f6:	1c5a      	adds	r2, r3, #1
 80289f8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80289fa:	3360      	adds	r3, #96	; 0x60
 80289fc:	443b      	add	r3, r7
 80289fe:	2230      	movs	r2, #48	; 0x30
 8028a00:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8028a04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8028a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028a08:	429a      	cmp	r2, r3
 8028a0a:	d202      	bcs.n	8028a12 <_ftoa+0x40a>
 8028a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028a0e:	2b1f      	cmp	r3, #31
 8028a10:	d9f0      	bls.n	80289f4 <_ftoa+0x3ec>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8028a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028a14:	2b1f      	cmp	r3, #31
 8028a16:	d827      	bhi.n	8028a68 <_ftoa+0x460>
    if (negative) {
 8028a18:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8028a1c:	2b00      	cmp	r3, #0
 8028a1e:	d008      	beq.n	8028a32 <_ftoa+0x42a>
      buf[len++] = '-';
 8028a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028a22:	1c5a      	adds	r2, r3, #1
 8028a24:	65fa      	str	r2, [r7, #92]	; 0x5c
 8028a26:	3360      	adds	r3, #96	; 0x60
 8028a28:	443b      	add	r3, r7
 8028a2a:	222d      	movs	r2, #45	; 0x2d
 8028a2c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8028a30:	e01a      	b.n	8028a68 <_ftoa+0x460>
    }
    else if (flags & FLAGS_PLUS) {
 8028a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028a34:	f003 0304 	and.w	r3, r3, #4
 8028a38:	2b00      	cmp	r3, #0
 8028a3a:	d008      	beq.n	8028a4e <_ftoa+0x446>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8028a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028a3e:	1c5a      	adds	r2, r3, #1
 8028a40:	65fa      	str	r2, [r7, #92]	; 0x5c
 8028a42:	3360      	adds	r3, #96	; 0x60
 8028a44:	443b      	add	r3, r7
 8028a46:	222b      	movs	r2, #43	; 0x2b
 8028a48:	f803 2c48 	strb.w	r2, [r3, #-72]
 8028a4c:	e00c      	b.n	8028a68 <_ftoa+0x460>
    }
    else if (flags & FLAGS_SPACE) {
 8028a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028a50:	f003 0308 	and.w	r3, r3, #8
 8028a54:	2b00      	cmp	r3, #0
 8028a56:	d007      	beq.n	8028a68 <_ftoa+0x460>
      buf[len++] = ' ';
 8028a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028a5a:	1c5a      	adds	r2, r3, #1
 8028a5c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8028a5e:	3360      	adds	r3, #96	; 0x60
 8028a60:	443b      	add	r3, r7
 8028a62:	2220      	movs	r2, #32
 8028a64:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8028a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028a6a:	9303      	str	r3, [sp, #12]
 8028a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028a6e:	9302      	str	r3, [sp, #8]
 8028a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028a72:	9301      	str	r3, [sp, #4]
 8028a74:	f107 0318 	add.w	r3, r7, #24
 8028a78:	9300      	str	r3, [sp, #0]
 8028a7a:	68bb      	ldr	r3, [r7, #8]
 8028a7c:	68fa      	ldr	r2, [r7, #12]
 8028a7e:	6939      	ldr	r1, [r7, #16]
 8028a80:	6978      	ldr	r0, [r7, #20]
 8028a82:	f7ff fbc0 	bl	8028206 <_out_rev>
 8028a86:	4603      	mov	r3, r0
}
 8028a88:	4618      	mov	r0, r3
 8028a8a:	3760      	adds	r7, #96	; 0x60
 8028a8c:	46bd      	mov	sp, r7
 8028a8e:	bd80      	pop	{r7, pc}
 8028a90:	66666667 	.word	0x66666667
 8028a94:	00000000 	.word	0x00000000

08028a98 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8028a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8028a9c:	b09a      	sub	sp, #104	; 0x68
 8028a9e:	af06      	add	r7, sp, #24
 8028aa0:	6178      	str	r0, [r7, #20]
 8028aa2:	6139      	str	r1, [r7, #16]
 8028aa4:	60fa      	str	r2, [r7, #12]
 8028aa6:	60bb      	str	r3, [r7, #8]
 8028aa8:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8028aac:	ed97 6b00 	vldr	d6, [r7]
 8028ab0:	ed97 7b00 	vldr	d7, [r7]
 8028ab4:	eeb4 6b47 	vcmp.f64	d6, d7
 8028ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028abc:	d111      	bne.n	8028ae2 <_etoa+0x4a>
 8028abe:	ed97 7b00 	vldr	d7, [r7]
 8028ac2:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8028d90 <_etoa+0x2f8>
 8028ac6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ace:	dc08      	bgt.n	8028ae2 <_etoa+0x4a>
 8028ad0:	ed97 7b00 	vldr	d7, [r7]
 8028ad4:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8028d98 <_etoa+0x300>
 8028ad8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ae0:	d50f      	bpl.n	8028b02 <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8028ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028ae4:	9302      	str	r3, [sp, #8]
 8028ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028ae8:	9301      	str	r3, [sp, #4]
 8028aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028aec:	9300      	str	r3, [sp, #0]
 8028aee:	ed97 0b00 	vldr	d0, [r7]
 8028af2:	68bb      	ldr	r3, [r7, #8]
 8028af4:	68fa      	ldr	r2, [r7, #12]
 8028af6:	6939      	ldr	r1, [r7, #16]
 8028af8:	6978      	ldr	r0, [r7, #20]
 8028afa:	f7ff fd85 	bl	8028608 <_ftoa>
 8028afe:	4603      	mov	r3, r0
 8028b00:	e1c2      	b.n	8028e88 <_etoa+0x3f0>
  }

  // determine the sign
  const bool negative = value < 0;
 8028b02:	ed97 7b00 	vldr	d7, [r7]
 8028b06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8028b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b0e:	bf4c      	ite	mi
 8028b10:	2301      	movmi	r3, #1
 8028b12:	2300      	movpl	r3, #0
 8028b14:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 8028b18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8028b1c:	2b00      	cmp	r3, #0
 8028b1e:	d005      	beq.n	8028b2c <_etoa+0x94>
    value = -value;
 8028b20:	ed97 7b00 	vldr	d7, [r7]
 8028b24:	eeb1 7b47 	vneg.f64	d7, d7
 8028b28:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8028b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028b32:	2b00      	cmp	r3, #0
 8028b34:	d101      	bne.n	8028b3a <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8028b36:	2306      	movs	r3, #6
 8028b38:	673b      	str	r3, [r7, #112]	; 0x70
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8028b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028b3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8028b42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8028b46:	f04f 0200 	mov.w	r2, #0
 8028b4a:	f04f 0300 	mov.w	r3, #0
 8028b4e:	0d0a      	lsrs	r2, r1, #20
 8028b50:	2300      	movs	r3, #0
 8028b52:	4613      	mov	r3, r2
 8028b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028b58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8028b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8028b5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8028b62:	4690      	mov	r8, r2
 8028b64:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8028b68:	4644      	mov	r4, r8
 8028b6a:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8028b6e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8028b72:	e9c7 4506 	strd	r4, r5, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8028b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028b78:	ee07 3a90 	vmov	s15, r3
 8028b7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028b80:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8028da0 <_etoa+0x308>
 8028b84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028b88:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8028da8 <_etoa+0x310>
 8028b8c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8028b90:	ed97 7b06 	vldr	d7, [r7, #24]
 8028b94:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 8028b98:	ee37 7b45 	vsub.f64	d7, d7, d5
 8028b9c:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8028db0 <_etoa+0x318>
 8028ba0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8028ba4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8028ba8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8028bac:	ee17 3a90 	vmov	r3, s15
 8028bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8028bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028bb4:	ee07 3a90 	vmov	s15, r3
 8028bb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028bbc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8028db8 <_etoa+0x320>
 8028bc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028bc4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8028bc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8028bcc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8028bd0:	ee17 3a90 	vmov	r3, s15
 8028bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8028bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028bd8:	ee07 3a90 	vmov	s15, r3
 8028bdc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028be0:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8028dc0 <_etoa+0x328>
 8028be4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8028be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028bea:	ee07 3a90 	vmov	s15, r3
 8028bee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028bf2:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8028dc8 <_etoa+0x330>
 8028bf6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8028bfa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028bfe:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 8028c02:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8028c06:	ee27 7b07 	vmul.f64	d7, d7, d7
 8028c0a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8028c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028c10:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8028c14:	17da      	asrs	r2, r3, #31
 8028c16:	469a      	mov	sl, r3
 8028c18:	4693      	mov	fp, r2
 8028c1a:	f04f 0200 	mov.w	r2, #0
 8028c1e:	f04f 0300 	mov.w	r3, #0
 8028c22:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8028c26:	2200      	movs	r2, #0
 8028c28:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8028c2c:	ed97 6b06 	vldr	d6, [r7, #24]
 8028c30:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8028c34:	ee37 4b07 	vadd.f64	d4, d7, d7
 8028c38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8028c3c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8028c40:	ee35 5b47 	vsub.f64	d5, d5, d7
 8028c44:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8028c48:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 8028c4c:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8028c50:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8028c54:	ee37 3b03 	vadd.f64	d3, d7, d3
 8028c58:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8028c5c:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8028c60:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 8028c64:	ee37 3b03 	vadd.f64	d3, d7, d3
 8028c68:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8028c6c:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8028c70:	ee35 5b07 	vadd.f64	d5, d5, d7
 8028c74:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8028c78:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8028c7c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8028c80:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028c84:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 8028c88:	ed97 7b06 	vldr	d7, [r7, #24]
 8028c8c:	ed97 6b00 	vldr	d6, [r7]
 8028c90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028c98:	d50a      	bpl.n	8028cb0 <_etoa+0x218>
    expval--;
 8028c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028c9c:	3b01      	subs	r3, #1
 8028c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 8028ca0:	ed97 6b06 	vldr	d6, [r7, #24]
 8028ca4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8028ca8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8028cac:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8028cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028cb2:	2b63      	cmp	r3, #99	; 0x63
 8028cb4:	dc05      	bgt.n	8028cc2 <_etoa+0x22a>
 8028cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028cb8:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8028cbc:	db01      	blt.n	8028cc2 <_etoa+0x22a>
 8028cbe:	2304      	movs	r3, #4
 8028cc0:	e000      	b.n	8028cc4 <_etoa+0x22c>
 8028cc2:	2305      	movs	r3, #5
 8028cc4:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8028cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028ccc:	2b00      	cmp	r3, #0
 8028cce:	d031      	beq.n	8028d34 <_etoa+0x29c>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8028cd0:	ed97 7b00 	vldr	d7, [r7]
 8028cd4:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8028dd0 <_etoa+0x338>
 8028cd8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028ce0:	db1d      	blt.n	8028d1e <_etoa+0x286>
 8028ce2:	ed97 7b00 	vldr	d7, [r7]
 8028ce6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8028dd8 <_etoa+0x340>
 8028cea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cf2:	d514      	bpl.n	8028d1e <_etoa+0x286>
      if ((int)prec > expval) {
 8028cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028cf8:	429a      	cmp	r2, r3
 8028cfa:	da05      	bge.n	8028d08 <_etoa+0x270>
        prec = (unsigned)((int)prec - expval - 1);
 8028cfc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8028cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028d00:	1ad3      	subs	r3, r2, r3
 8028d02:	3b01      	subs	r3, #1
 8028d04:	673b      	str	r3, [r7, #112]	; 0x70
 8028d06:	e001      	b.n	8028d0c <_etoa+0x274>
      }
      else {
        prec = 0;
 8028d08:	2300      	movs	r3, #0
 8028d0a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8028d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8028d12:	67bb      	str	r3, [r7, #120]	; 0x78
      // no characters in exponent
      minwidth = 0U;
 8028d14:	2300      	movs	r3, #0
 8028d16:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 8028d18:	2300      	movs	r3, #0
 8028d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8028d1c:	e00a      	b.n	8028d34 <_etoa+0x29c>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8028d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d20:	2b00      	cmp	r3, #0
 8028d22:	d007      	beq.n	8028d34 <_etoa+0x29c>
 8028d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028d2a:	2b00      	cmp	r3, #0
 8028d2c:	d002      	beq.n	8028d34 <_etoa+0x29c>
        --prec;
 8028d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d30:	3b01      	subs	r3, #1
 8028d32:	673b      	str	r3, [r7, #112]	; 0x70
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8028d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028d36:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 8028d38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8028d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028d3c:	429a      	cmp	r2, r3
 8028d3e:	d904      	bls.n	8028d4a <_etoa+0x2b2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8028d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8028d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028d44:	1ad3      	subs	r3, r2, r3
 8028d46:	647b      	str	r3, [r7, #68]	; 0x44
 8028d48:	e001      	b.n	8028d4e <_etoa+0x2b6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8028d4a:	2300      	movs	r3, #0
 8028d4c:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8028d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028d50:	f003 0302 	and.w	r3, r3, #2
 8028d54:	2b00      	cmp	r3, #0
 8028d56:	d004      	beq.n	8028d62 <_etoa+0x2ca>
 8028d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028d5a:	2b00      	cmp	r3, #0
 8028d5c:	d001      	beq.n	8028d62 <_etoa+0x2ca>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8028d5e:	2300      	movs	r3, #0
 8028d60:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 8028d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028d64:	2b00      	cmp	r3, #0
 8028d66:	d007      	beq.n	8028d78 <_etoa+0x2e0>
    value /= conv.F;
 8028d68:	ed97 6b06 	vldr	d6, [r7, #24]
 8028d6c:	ed97 5b00 	vldr	d5, [r7]
 8028d70:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8028d74:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 8028d78:	68fb      	ldr	r3, [r7, #12]
 8028d7a:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8028d7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8028d80:	2b00      	cmp	r3, #0
 8028d82:	d02d      	beq.n	8028de0 <_etoa+0x348>
 8028d84:	ed97 7b00 	vldr	d7, [r7]
 8028d88:	eeb1 7b47 	vneg.f64	d7, d7
 8028d8c:	e02a      	b.n	8028de4 <_etoa+0x34c>
 8028d8e:	bf00      	nop
 8028d90:	ffffffff 	.word	0xffffffff
 8028d94:	7fefffff 	.word	0x7fefffff
 8028d98:	ffffffff 	.word	0xffffffff
 8028d9c:	ffefffff 	.word	0xffefffff
 8028da0:	509f79fb 	.word	0x509f79fb
 8028da4:	3fd34413 	.word	0x3fd34413
 8028da8:	8b60c8b3 	.word	0x8b60c8b3
 8028dac:	3fc68a28 	.word	0x3fc68a28
 8028db0:	636f4361 	.word	0x636f4361
 8028db4:	3fd287a7 	.word	0x3fd287a7
 8028db8:	0979a371 	.word	0x0979a371
 8028dbc:	400a934f 	.word	0x400a934f
 8028dc0:	bbb55516 	.word	0xbbb55516
 8028dc4:	40026bb1 	.word	0x40026bb1
 8028dc8:	fefa39ef 	.word	0xfefa39ef
 8028dcc:	3fe62e42 	.word	0x3fe62e42
 8028dd0:	eb1c432d 	.word	0xeb1c432d
 8028dd4:	3f1a36e2 	.word	0x3f1a36e2
 8028dd8:	00000000 	.word	0x00000000
 8028ddc:	412e8480 	.word	0x412e8480
 8028de0:	ed97 7b00 	vldr	d7, [r7]
 8028de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028de6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8028dea:	9302      	str	r3, [sp, #8]
 8028dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028dee:	9301      	str	r3, [sp, #4]
 8028df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028df2:	9300      	str	r3, [sp, #0]
 8028df4:	eeb0 0b47 	vmov.f64	d0, d7
 8028df8:	68bb      	ldr	r3, [r7, #8]
 8028dfa:	68fa      	ldr	r2, [r7, #12]
 8028dfc:	6939      	ldr	r1, [r7, #16]
 8028dfe:	6978      	ldr	r0, [r7, #20]
 8028e00:	f7ff fc02 	bl	8028608 <_ftoa>
 8028e04:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 8028e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028e08:	2b00      	cmp	r3, #0
 8028e0a:	d03c      	beq.n	8028e86 <_etoa+0x3ee>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8028e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028e0e:	f003 0320 	and.w	r3, r3, #32
 8028e12:	2b00      	cmp	r3, #0
 8028e14:	d001      	beq.n	8028e1a <_etoa+0x382>
 8028e16:	2045      	movs	r0, #69	; 0x45
 8028e18:	e000      	b.n	8028e1c <_etoa+0x384>
 8028e1a:	2065      	movs	r0, #101	; 0x65
 8028e1c:	68fa      	ldr	r2, [r7, #12]
 8028e1e:	1c53      	adds	r3, r2, #1
 8028e20:	60fb      	str	r3, [r7, #12]
 8028e22:	697c      	ldr	r4, [r7, #20]
 8028e24:	68bb      	ldr	r3, [r7, #8]
 8028e26:	6939      	ldr	r1, [r7, #16]
 8028e28:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8028e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028e2c:	2b00      	cmp	r3, #0
 8028e2e:	bfb8      	it	lt
 8028e30:	425b      	neglt	r3, r3
 8028e32:	4618      	mov	r0, r3
 8028e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028e36:	0fdb      	lsrs	r3, r3, #31
 8028e38:	b2db      	uxtb	r3, r3
 8028e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8028e3c:	3a01      	subs	r2, #1
 8028e3e:	2105      	movs	r1, #5
 8028e40:	9105      	str	r1, [sp, #20]
 8028e42:	9204      	str	r2, [sp, #16]
 8028e44:	2200      	movs	r2, #0
 8028e46:	9203      	str	r2, [sp, #12]
 8028e48:	220a      	movs	r2, #10
 8028e4a:	9202      	str	r2, [sp, #8]
 8028e4c:	9301      	str	r3, [sp, #4]
 8028e4e:	9000      	str	r0, [sp, #0]
 8028e50:	68bb      	ldr	r3, [r7, #8]
 8028e52:	68fa      	ldr	r2, [r7, #12]
 8028e54:	6939      	ldr	r1, [r7, #16]
 8028e56:	6978      	ldr	r0, [r7, #20]
 8028e58:	f7ff fb01 	bl	802845e <_ntoa_long>
 8028e5c:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8028e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028e60:	f003 0302 	and.w	r3, r3, #2
 8028e64:	2b00      	cmp	r3, #0
 8028e66:	d00e      	beq.n	8028e86 <_etoa+0x3ee>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8028e68:	e007      	b.n	8028e7a <_etoa+0x3e2>
 8028e6a:	68fa      	ldr	r2, [r7, #12]
 8028e6c:	1c53      	adds	r3, r2, #1
 8028e6e:	60fb      	str	r3, [r7, #12]
 8028e70:	697c      	ldr	r4, [r7, #20]
 8028e72:	68bb      	ldr	r3, [r7, #8]
 8028e74:	6939      	ldr	r1, [r7, #16]
 8028e76:	2020      	movs	r0, #32
 8028e78:	47a0      	blx	r4
 8028e7a:	68fa      	ldr	r2, [r7, #12]
 8028e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e7e:	1ad3      	subs	r3, r2, r3
 8028e80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8028e82:	429a      	cmp	r2, r3
 8028e84:	d8f1      	bhi.n	8028e6a <_etoa+0x3d2>
    }
  }
  return idx;
 8028e86:	68fb      	ldr	r3, [r7, #12]
}
 8028e88:	4618      	mov	r0, r3
 8028e8a:	3750      	adds	r7, #80	; 0x50
 8028e8c:	46bd      	mov	sp, r7
 8028e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8028e92:	bf00      	nop

08028e94 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8028e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e98:	b0a3      	sub	sp, #140	; 0x8c
 8028e9a:	af0a      	add	r7, sp, #40	; 0x28
 8028e9c:	6178      	str	r0, [r7, #20]
 8028e9e:	6139      	str	r1, [r7, #16]
 8028ea0:	60fa      	str	r2, [r7, #12]
 8028ea2:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8028ea4:	2300      	movs	r3, #0
 8028ea6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8028ea8:	693b      	ldr	r3, [r7, #16]
 8028eaa:	2b00      	cmp	r3, #0
 8028eac:	f040 84ba 	bne.w	8029824 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8028eb0:	4ba3      	ldr	r3, [pc, #652]	; (8029140 <_vsnprintf+0x2ac>)
 8028eb2:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8028eb4:	f000 bcb6 	b.w	8029824 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8028eb8:	68bb      	ldr	r3, [r7, #8]
 8028eba:	781b      	ldrb	r3, [r3, #0]
 8028ebc:	2b25      	cmp	r3, #37	; 0x25
 8028ebe:	d00d      	beq.n	8028edc <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8028ec0:	68bb      	ldr	r3, [r7, #8]
 8028ec2:	7818      	ldrb	r0, [r3, #0]
 8028ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028ec6:	1c53      	adds	r3, r2, #1
 8028ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8028eca:	697c      	ldr	r4, [r7, #20]
 8028ecc:	68fb      	ldr	r3, [r7, #12]
 8028ece:	6939      	ldr	r1, [r7, #16]
 8028ed0:	47a0      	blx	r4
      format++;
 8028ed2:	68bb      	ldr	r3, [r7, #8]
 8028ed4:	3301      	adds	r3, #1
 8028ed6:	60bb      	str	r3, [r7, #8]
      continue;
 8028ed8:	f000 bca4 	b.w	8029824 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8028edc:	68bb      	ldr	r3, [r7, #8]
 8028ede:	3301      	adds	r3, #1
 8028ee0:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8028ee2:	2300      	movs	r3, #0
 8028ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8028ee6:	68bb      	ldr	r3, [r7, #8]
 8028ee8:	781b      	ldrb	r3, [r3, #0]
 8028eea:	3b20      	subs	r3, #32
 8028eec:	2b10      	cmp	r3, #16
 8028eee:	d857      	bhi.n	8028fa0 <_vsnprintf+0x10c>
 8028ef0:	a201      	add	r2, pc, #4	; (adr r2, 8028ef8 <_vsnprintf+0x64>)
 8028ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028ef6:	bf00      	nop
 8028ef8:	08028f79 	.word	0x08028f79
 8028efc:	08028fa1 	.word	0x08028fa1
 8028f00:	08028fa1 	.word	0x08028fa1
 8028f04:	08028f8d 	.word	0x08028f8d
 8028f08:	08028fa1 	.word	0x08028fa1
 8028f0c:	08028fa1 	.word	0x08028fa1
 8028f10:	08028fa1 	.word	0x08028fa1
 8028f14:	08028fa1 	.word	0x08028fa1
 8028f18:	08028fa1 	.word	0x08028fa1
 8028f1c:	08028fa1 	.word	0x08028fa1
 8028f20:	08028fa1 	.word	0x08028fa1
 8028f24:	08028f65 	.word	0x08028f65
 8028f28:	08028fa1 	.word	0x08028fa1
 8028f2c:	08028f51 	.word	0x08028f51
 8028f30:	08028fa1 	.word	0x08028fa1
 8028f34:	08028fa1 	.word	0x08028fa1
 8028f38:	08028f3d 	.word	0x08028f3d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8028f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028f3e:	f043 0301 	orr.w	r3, r3, #1
 8028f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028f44:	68bb      	ldr	r3, [r7, #8]
 8028f46:	3301      	adds	r3, #1
 8028f48:	60bb      	str	r3, [r7, #8]
 8028f4a:	2301      	movs	r3, #1
 8028f4c:	653b      	str	r3, [r7, #80]	; 0x50
 8028f4e:	e02a      	b.n	8028fa6 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8028f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028f52:	f043 0302 	orr.w	r3, r3, #2
 8028f56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028f58:	68bb      	ldr	r3, [r7, #8]
 8028f5a:	3301      	adds	r3, #1
 8028f5c:	60bb      	str	r3, [r7, #8]
 8028f5e:	2301      	movs	r3, #1
 8028f60:	653b      	str	r3, [r7, #80]	; 0x50
 8028f62:	e020      	b.n	8028fa6 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8028f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028f66:	f043 0304 	orr.w	r3, r3, #4
 8028f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028f6c:	68bb      	ldr	r3, [r7, #8]
 8028f6e:	3301      	adds	r3, #1
 8028f70:	60bb      	str	r3, [r7, #8]
 8028f72:	2301      	movs	r3, #1
 8028f74:	653b      	str	r3, [r7, #80]	; 0x50
 8028f76:	e016      	b.n	8028fa6 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8028f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028f7a:	f043 0308 	orr.w	r3, r3, #8
 8028f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028f80:	68bb      	ldr	r3, [r7, #8]
 8028f82:	3301      	adds	r3, #1
 8028f84:	60bb      	str	r3, [r7, #8]
 8028f86:	2301      	movs	r3, #1
 8028f88:	653b      	str	r3, [r7, #80]	; 0x50
 8028f8a:	e00c      	b.n	8028fa6 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8028f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028f8e:	f043 0310 	orr.w	r3, r3, #16
 8028f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028f94:	68bb      	ldr	r3, [r7, #8]
 8028f96:	3301      	adds	r3, #1
 8028f98:	60bb      	str	r3, [r7, #8]
 8028f9a:	2301      	movs	r3, #1
 8028f9c:	653b      	str	r3, [r7, #80]	; 0x50
 8028f9e:	e002      	b.n	8028fa6 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8028fa0:	2300      	movs	r3, #0
 8028fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8028fa4:	bf00      	nop
      }
    } while (n);
 8028fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028fa8:	2b00      	cmp	r3, #0
 8028faa:	d19c      	bne.n	8028ee6 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8028fac:	2300      	movs	r3, #0
 8028fae:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8028fb0:	68bb      	ldr	r3, [r7, #8]
 8028fb2:	781b      	ldrb	r3, [r3, #0]
 8028fb4:	4618      	mov	r0, r3
 8028fb6:	f7ff f8eb 	bl	8028190 <_is_digit>
 8028fba:	4603      	mov	r3, r0
 8028fbc:	2b00      	cmp	r3, #0
 8028fbe:	d006      	beq.n	8028fce <_vsnprintf+0x13a>
      width = _atoi(&format);
 8028fc0:	f107 0308 	add.w	r3, r7, #8
 8028fc4:	4618      	mov	r0, r3
 8028fc6:	f7ff f8fa 	bl	80281be <_atoi>
 8028fca:	65b8      	str	r0, [r7, #88]	; 0x58
 8028fcc:	e01a      	b.n	8029004 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8028fce:	68bb      	ldr	r3, [r7, #8]
 8028fd0:	781b      	ldrb	r3, [r3, #0]
 8028fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8028fd4:	d116      	bne.n	8029004 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8028fd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028fda:	1d1a      	adds	r2, r3, #4
 8028fdc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028fe0:	681b      	ldr	r3, [r3, #0]
 8028fe2:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8028fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028fe6:	2b00      	cmp	r3, #0
 8028fe8:	da07      	bge.n	8028ffa <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8028fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028fec:	f043 0302 	orr.w	r3, r3, #2
 8028ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8028ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028ff4:	425b      	negs	r3, r3
 8028ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8028ff8:	e001      	b.n	8028ffe <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8028ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028ffc:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8028ffe:	68bb      	ldr	r3, [r7, #8]
 8029000:	3301      	adds	r3, #1
 8029002:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8029004:	2300      	movs	r3, #0
 8029006:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8029008:	68bb      	ldr	r3, [r7, #8]
 802900a:	781b      	ldrb	r3, [r3, #0]
 802900c:	2b2e      	cmp	r3, #46	; 0x2e
 802900e:	d127      	bne.n	8029060 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8029010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8029016:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8029018:	68bb      	ldr	r3, [r7, #8]
 802901a:	3301      	adds	r3, #1
 802901c:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 802901e:	68bb      	ldr	r3, [r7, #8]
 8029020:	781b      	ldrb	r3, [r3, #0]
 8029022:	4618      	mov	r0, r3
 8029024:	f7ff f8b4 	bl	8028190 <_is_digit>
 8029028:	4603      	mov	r3, r0
 802902a:	2b00      	cmp	r3, #0
 802902c:	d006      	beq.n	802903c <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 802902e:	f107 0308 	add.w	r3, r7, #8
 8029032:	4618      	mov	r0, r3
 8029034:	f7ff f8c3 	bl	80281be <_atoi>
 8029038:	6578      	str	r0, [r7, #84]	; 0x54
 802903a:	e011      	b.n	8029060 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 802903c:	68bb      	ldr	r3, [r7, #8]
 802903e:	781b      	ldrb	r3, [r3, #0]
 8029040:	2b2a      	cmp	r3, #42	; 0x2a
 8029042:	d10d      	bne.n	8029060 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8029044:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029048:	1d1a      	adds	r2, r3, #4
 802904a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802904e:	681b      	ldr	r3, [r3, #0]
 8029050:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8029052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029054:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8029058:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 802905a:	68bb      	ldr	r3, [r7, #8]
 802905c:	3301      	adds	r3, #1
 802905e:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8029060:	68bb      	ldr	r3, [r7, #8]
 8029062:	781b      	ldrb	r3, [r3, #0]
 8029064:	3b68      	subs	r3, #104	; 0x68
 8029066:	2b12      	cmp	r3, #18
 8029068:	d866      	bhi.n	8029138 <_vsnprintf+0x2a4>
 802906a:	a201      	add	r2, pc, #4	; (adr r2, 8029070 <_vsnprintf+0x1dc>)
 802906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029070:	080290e3 	.word	0x080290e3
 8029074:	08029139 	.word	0x08029139
 8029078:	08029119 	.word	0x08029119
 802907c:	08029139 	.word	0x08029139
 8029080:	080290bd 	.word	0x080290bd
 8029084:	08029139 	.word	0x08029139
 8029088:	08029139 	.word	0x08029139
 802908c:	08029139 	.word	0x08029139
 8029090:	08029139 	.word	0x08029139
 8029094:	08029139 	.word	0x08029139
 8029098:	08029139 	.word	0x08029139
 802909c:	08029139 	.word	0x08029139
 80290a0:	08029109 	.word	0x08029109
 80290a4:	08029139 	.word	0x08029139
 80290a8:	08029139 	.word	0x08029139
 80290ac:	08029139 	.word	0x08029139
 80290b0:	08029139 	.word	0x08029139
 80290b4:	08029139 	.word	0x08029139
 80290b8:	08029129 	.word	0x08029129
      case 'l' :
        flags |= FLAGS_LONG;
 80290bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80290be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80290c2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80290c4:	68bb      	ldr	r3, [r7, #8]
 80290c6:	3301      	adds	r3, #1
 80290c8:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80290ca:	68bb      	ldr	r3, [r7, #8]
 80290cc:	781b      	ldrb	r3, [r3, #0]
 80290ce:	2b6c      	cmp	r3, #108	; 0x6c
 80290d0:	d134      	bne.n	802913c <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80290d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80290d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80290d8:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80290da:	68bb      	ldr	r3, [r7, #8]
 80290dc:	3301      	adds	r3, #1
 80290de:	60bb      	str	r3, [r7, #8]
        }
        break;
 80290e0:	e02c      	b.n	802913c <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80290e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80290e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80290e8:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80290ea:	68bb      	ldr	r3, [r7, #8]
 80290ec:	3301      	adds	r3, #1
 80290ee:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80290f0:	68bb      	ldr	r3, [r7, #8]
 80290f2:	781b      	ldrb	r3, [r3, #0]
 80290f4:	2b68      	cmp	r3, #104	; 0x68
 80290f6:	d125      	bne.n	8029144 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 80290f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80290fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80290fe:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8029100:	68bb      	ldr	r3, [r7, #8]
 8029102:	3301      	adds	r3, #1
 8029104:	60bb      	str	r3, [r7, #8]
        }
        break;
 8029106:	e01d      	b.n	8029144 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8029108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802910a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802910e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8029110:	68bb      	ldr	r3, [r7, #8]
 8029112:	3301      	adds	r3, #1
 8029114:	60bb      	str	r3, [r7, #8]
        break;
 8029116:	e016      	b.n	8029146 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8029118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802911a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802911e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8029120:	68bb      	ldr	r3, [r7, #8]
 8029122:	3301      	adds	r3, #1
 8029124:	60bb      	str	r3, [r7, #8]
        break;
 8029126:	e00e      	b.n	8029146 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8029128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802912a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802912e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8029130:	68bb      	ldr	r3, [r7, #8]
 8029132:	3301      	adds	r3, #1
 8029134:	60bb      	str	r3, [r7, #8]
        break;
 8029136:	e006      	b.n	8029146 <_vsnprintf+0x2b2>
      default :
        break;
 8029138:	bf00      	nop
 802913a:	e004      	b.n	8029146 <_vsnprintf+0x2b2>
        break;
 802913c:	bf00      	nop
 802913e:	e002      	b.n	8029146 <_vsnprintf+0x2b2>
 8029140:	08028115 	.word	0x08028115
        break;
 8029144:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8029146:	68bb      	ldr	r3, [r7, #8]
 8029148:	781b      	ldrb	r3, [r3, #0]
 802914a:	3b25      	subs	r3, #37	; 0x25
 802914c:	2b53      	cmp	r3, #83	; 0x53
 802914e:	f200 835c 	bhi.w	802980a <_vsnprintf+0x976>
 8029152:	a201      	add	r2, pc, #4	; (adr r2, 8029158 <_vsnprintf+0x2c4>)
 8029154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029158:	080297f3 	.word	0x080297f3
 802915c:	0802980b 	.word	0x0802980b
 8029160:	0802980b 	.word	0x0802980b
 8029164:	0802980b 	.word	0x0802980b
 8029168:	0802980b 	.word	0x0802980b
 802916c:	0802980b 	.word	0x0802980b
 8029170:	0802980b 	.word	0x0802980b
 8029174:	0802980b 	.word	0x0802980b
 8029178:	0802980b 	.word	0x0802980b
 802917c:	0802980b 	.word	0x0802980b
 8029180:	0802980b 	.word	0x0802980b
 8029184:	0802980b 	.word	0x0802980b
 8029188:	0802980b 	.word	0x0802980b
 802918c:	0802980b 	.word	0x0802980b
 8029190:	0802980b 	.word	0x0802980b
 8029194:	0802980b 	.word	0x0802980b
 8029198:	0802980b 	.word	0x0802980b
 802919c:	0802980b 	.word	0x0802980b
 80291a0:	0802980b 	.word	0x0802980b
 80291a4:	0802980b 	.word	0x0802980b
 80291a8:	0802980b 	.word	0x0802980b
 80291ac:	0802980b 	.word	0x0802980b
 80291b0:	0802980b 	.word	0x0802980b
 80291b4:	0802980b 	.word	0x0802980b
 80291b8:	0802980b 	.word	0x0802980b
 80291bc:	0802980b 	.word	0x0802980b
 80291c0:	0802980b 	.word	0x0802980b
 80291c4:	0802980b 	.word	0x0802980b
 80291c8:	0802980b 	.word	0x0802980b
 80291cc:	0802980b 	.word	0x0802980b
 80291d0:	0802980b 	.word	0x0802980b
 80291d4:	0802980b 	.word	0x0802980b
 80291d8:	080295ab 	.word	0x080295ab
 80291dc:	0802955f 	.word	0x0802955f
 80291e0:	080295ab 	.word	0x080295ab
 80291e4:	0802980b 	.word	0x0802980b
 80291e8:	0802980b 	.word	0x0802980b
 80291ec:	0802980b 	.word	0x0802980b
 80291f0:	0802980b 	.word	0x0802980b
 80291f4:	0802980b 	.word	0x0802980b
 80291f8:	0802980b 	.word	0x0802980b
 80291fc:	0802980b 	.word	0x0802980b
 8029200:	0802980b 	.word	0x0802980b
 8029204:	0802980b 	.word	0x0802980b
 8029208:	0802980b 	.word	0x0802980b
 802920c:	0802980b 	.word	0x0802980b
 8029210:	0802980b 	.word	0x0802980b
 8029214:	0802980b 	.word	0x0802980b
 8029218:	0802980b 	.word	0x0802980b
 802921c:	0802980b 	.word	0x0802980b
 8029220:	0802980b 	.word	0x0802980b
 8029224:	080292a9 	.word	0x080292a9
 8029228:	0802980b 	.word	0x0802980b
 802922c:	0802980b 	.word	0x0802980b
 8029230:	0802980b 	.word	0x0802980b
 8029234:	0802980b 	.word	0x0802980b
 8029238:	0802980b 	.word	0x0802980b
 802923c:	0802980b 	.word	0x0802980b
 8029240:	0802980b 	.word	0x0802980b
 8029244:	0802980b 	.word	0x0802980b
 8029248:	0802980b 	.word	0x0802980b
 802924c:	080292a9 	.word	0x080292a9
 8029250:	08029617 	.word	0x08029617
 8029254:	080292a9 	.word	0x080292a9
 8029258:	080295ab 	.word	0x080295ab
 802925c:	0802955f 	.word	0x0802955f
 8029260:	080295ab 	.word	0x080295ab
 8029264:	0802980b 	.word	0x0802980b
 8029268:	080292a9 	.word	0x080292a9
 802926c:	0802980b 	.word	0x0802980b
 8029270:	0802980b 	.word	0x0802980b
 8029274:	0802980b 	.word	0x0802980b
 8029278:	0802980b 	.word	0x0802980b
 802927c:	0802980b 	.word	0x0802980b
 8029280:	080292a9 	.word	0x080292a9
 8029284:	08029757 	.word	0x08029757
 8029288:	0802980b 	.word	0x0802980b
 802928c:	0802980b 	.word	0x0802980b
 8029290:	0802968f 	.word	0x0802968f
 8029294:	0802980b 	.word	0x0802980b
 8029298:	080292a9 	.word	0x080292a9
 802929c:	0802980b 	.word	0x0802980b
 80292a0:	0802980b 	.word	0x0802980b
 80292a4:	080292a9 	.word	0x080292a9
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80292a8:	68bb      	ldr	r3, [r7, #8]
 80292aa:	781b      	ldrb	r3, [r3, #0]
 80292ac:	2b78      	cmp	r3, #120	; 0x78
 80292ae:	d003      	beq.n	80292b8 <_vsnprintf+0x424>
 80292b0:	68bb      	ldr	r3, [r7, #8]
 80292b2:	781b      	ldrb	r3, [r3, #0]
 80292b4:	2b58      	cmp	r3, #88	; 0x58
 80292b6:	d102      	bne.n	80292be <_vsnprintf+0x42a>
          base = 16U;
 80292b8:	2310      	movs	r3, #16
 80292ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80292bc:	e013      	b.n	80292e6 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 80292be:	68bb      	ldr	r3, [r7, #8]
 80292c0:	781b      	ldrb	r3, [r3, #0]
 80292c2:	2b6f      	cmp	r3, #111	; 0x6f
 80292c4:	d102      	bne.n	80292cc <_vsnprintf+0x438>
          base =  8U;
 80292c6:	2308      	movs	r3, #8
 80292c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80292ca:	e00c      	b.n	80292e6 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 80292cc:	68bb      	ldr	r3, [r7, #8]
 80292ce:	781b      	ldrb	r3, [r3, #0]
 80292d0:	2b62      	cmp	r3, #98	; 0x62
 80292d2:	d102      	bne.n	80292da <_vsnprintf+0x446>
          base =  2U;
 80292d4:	2302      	movs	r3, #2
 80292d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80292d8:	e005      	b.n	80292e6 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 80292da:	230a      	movs	r3, #10
 80292dc:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80292de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80292e0:	f023 0310 	bic.w	r3, r3, #16
 80292e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80292e6:	68bb      	ldr	r3, [r7, #8]
 80292e8:	781b      	ldrb	r3, [r3, #0]
 80292ea:	2b58      	cmp	r3, #88	; 0x58
 80292ec:	d103      	bne.n	80292f6 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 80292ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80292f0:	f043 0320 	orr.w	r3, r3, #32
 80292f4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80292f6:	68bb      	ldr	r3, [r7, #8]
 80292f8:	781b      	ldrb	r3, [r3, #0]
 80292fa:	2b69      	cmp	r3, #105	; 0x69
 80292fc:	d007      	beq.n	802930e <_vsnprintf+0x47a>
 80292fe:	68bb      	ldr	r3, [r7, #8]
 8029300:	781b      	ldrb	r3, [r3, #0]
 8029302:	2b64      	cmp	r3, #100	; 0x64
 8029304:	d003      	beq.n	802930e <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8029306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029308:	f023 030c 	bic.w	r3, r3, #12
 802930c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 802930e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8029314:	2b00      	cmp	r3, #0
 8029316:	d003      	beq.n	8029320 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8029318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802931a:	f023 0301 	bic.w	r3, r3, #1
 802931e:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8029320:	68bb      	ldr	r3, [r7, #8]
 8029322:	781b      	ldrb	r3, [r3, #0]
 8029324:	2b69      	cmp	r3, #105	; 0x69
 8029326:	d004      	beq.n	8029332 <_vsnprintf+0x49e>
 8029328:	68bb      	ldr	r3, [r7, #8]
 802932a:	781b      	ldrb	r3, [r3, #0]
 802932c:	2b64      	cmp	r3, #100	; 0x64
 802932e:	f040 8098 	bne.w	8029462 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8029332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8029338:	2b00      	cmp	r3, #0
 802933a:	d031      	beq.n	80293a0 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 802933c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029340:	3307      	adds	r3, #7
 8029342:	f023 0307 	bic.w	r3, r3, #7
 8029346:	f103 0208 	add.w	r2, r3, #8
 802934a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029352:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8029356:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802935a:	2b00      	cmp	r3, #0
 802935c:	da06      	bge.n	802936c <_vsnprintf+0x4d8>
 802935e:	2100      	movs	r1, #0
 8029360:	f1d2 0800 	rsbs	r8, r2, #0
 8029364:	eb61 0903 	sbc.w	r9, r1, r3
 8029368:	4642      	mov	r2, r8
 802936a:	464b      	mov	r3, r9
 802936c:	69f9      	ldr	r1, [r7, #28]
 802936e:	0fc9      	lsrs	r1, r1, #31
 8029370:	b2c9      	uxtb	r1, r1
 8029372:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8029374:	2400      	movs	r4, #0
 8029376:	4682      	mov	sl, r0
 8029378:	46a3      	mov	fp, r4
 802937a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 802937c:	9008      	str	r0, [sp, #32]
 802937e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8029380:	9007      	str	r0, [sp, #28]
 8029382:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8029384:	9006      	str	r0, [sp, #24]
 8029386:	e9cd ab04 	strd	sl, fp, [sp, #16]
 802938a:	9102      	str	r1, [sp, #8]
 802938c:	e9cd 2300 	strd	r2, r3, [sp]
 8029390:	68fb      	ldr	r3, [r7, #12]
 8029392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029394:	6939      	ldr	r1, [r7, #16]
 8029396:	6978      	ldr	r0, [r7, #20]
 8029398:	f7ff f8c7 	bl	802852a <_ntoa_long_long>
 802939c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 802939e:	e0da      	b.n	8029556 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80293a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80293a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80293a6:	2b00      	cmp	r3, #0
 80293a8:	d020      	beq.n	80293ec <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 80293aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80293ae:	1d1a      	adds	r2, r3, #4
 80293b0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80293b4:	681b      	ldr	r3, [r3, #0]
 80293b6:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80293b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80293ba:	2b00      	cmp	r3, #0
 80293bc:	bfb8      	it	lt
 80293be:	425b      	neglt	r3, r3
 80293c0:	4619      	mov	r1, r3
 80293c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80293c4:	0fdb      	lsrs	r3, r3, #31
 80293c6:	b2db      	uxtb	r3, r3
 80293c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80293ca:	9205      	str	r2, [sp, #20]
 80293cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80293ce:	9204      	str	r2, [sp, #16]
 80293d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80293d2:	9203      	str	r2, [sp, #12]
 80293d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80293d6:	9202      	str	r2, [sp, #8]
 80293d8:	9301      	str	r3, [sp, #4]
 80293da:	9100      	str	r1, [sp, #0]
 80293dc:	68fb      	ldr	r3, [r7, #12]
 80293de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80293e0:	6939      	ldr	r1, [r7, #16]
 80293e2:	6978      	ldr	r0, [r7, #20]
 80293e4:	f7ff f83b 	bl	802845e <_ntoa_long>
 80293e8:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80293ea:	e0b4      	b.n	8029556 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80293ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80293ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80293f2:	2b00      	cmp	r3, #0
 80293f4:	d007      	beq.n	8029406 <_vsnprintf+0x572>
 80293f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80293fa:	1d1a      	adds	r2, r3, #4
 80293fc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8029400:	681b      	ldr	r3, [r3, #0]
 8029402:	b2db      	uxtb	r3, r3
 8029404:	e012      	b.n	802942c <_vsnprintf+0x598>
 8029406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802940c:	2b00      	cmp	r3, #0
 802940e:	d007      	beq.n	8029420 <_vsnprintf+0x58c>
 8029410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029414:	1d1a      	adds	r2, r3, #4
 8029416:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802941a:	681b      	ldr	r3, [r3, #0]
 802941c:	b21b      	sxth	r3, r3
 802941e:	e005      	b.n	802942c <_vsnprintf+0x598>
 8029420:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029424:	1d1a      	adds	r2, r3, #4
 8029426:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802942a:	681b      	ldr	r3, [r3, #0]
 802942c:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 802942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029430:	2b00      	cmp	r3, #0
 8029432:	bfb8      	it	lt
 8029434:	425b      	neglt	r3, r3
 8029436:	4619      	mov	r1, r3
 8029438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802943a:	0fdb      	lsrs	r3, r3, #31
 802943c:	b2db      	uxtb	r3, r3
 802943e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029440:	9205      	str	r2, [sp, #20]
 8029442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029444:	9204      	str	r2, [sp, #16]
 8029446:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8029448:	9203      	str	r2, [sp, #12]
 802944a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802944c:	9202      	str	r2, [sp, #8]
 802944e:	9301      	str	r3, [sp, #4]
 8029450:	9100      	str	r1, [sp, #0]
 8029452:	68fb      	ldr	r3, [r7, #12]
 8029454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029456:	6939      	ldr	r1, [r7, #16]
 8029458:	6978      	ldr	r0, [r7, #20]
 802945a:	f7ff f800 	bl	802845e <_ntoa_long>
 802945e:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8029460:	e079      	b.n	8029556 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8029462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8029468:	2b00      	cmp	r3, #0
 802946a:	d022      	beq.n	80294b2 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 802946c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029470:	3307      	adds	r3, #7
 8029472:	f023 0307 	bic.w	r3, r3, #7
 8029476:	f103 0208 	add.w	r2, r3, #8
 802947a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029482:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8029484:	2000      	movs	r0, #0
 8029486:	460d      	mov	r5, r1
 8029488:	4606      	mov	r6, r0
 802948a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 802948c:	9108      	str	r1, [sp, #32]
 802948e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8029490:	9107      	str	r1, [sp, #28]
 8029492:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8029494:	9106      	str	r1, [sp, #24]
 8029496:	e9cd 5604 	strd	r5, r6, [sp, #16]
 802949a:	2100      	movs	r1, #0
 802949c:	9102      	str	r1, [sp, #8]
 802949e:	e9cd 2300 	strd	r2, r3, [sp]
 80294a2:	68fb      	ldr	r3, [r7, #12]
 80294a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80294a6:	6939      	ldr	r1, [r7, #16]
 80294a8:	6978      	ldr	r0, [r7, #20]
 80294aa:	f7ff f83e 	bl	802852a <_ntoa_long_long>
 80294ae:	64f8      	str	r0, [r7, #76]	; 0x4c
 80294b0:	e051      	b.n	8029556 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80294b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80294b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80294b8:	2b00      	cmp	r3, #0
 80294ba:	d018      	beq.n	80294ee <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80294bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80294c0:	1d1a      	adds	r2, r3, #4
 80294c2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80294c6:	681b      	ldr	r3, [r3, #0]
 80294c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80294ca:	9205      	str	r2, [sp, #20]
 80294cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80294ce:	9204      	str	r2, [sp, #16]
 80294d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80294d2:	9203      	str	r2, [sp, #12]
 80294d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80294d6:	9202      	str	r2, [sp, #8]
 80294d8:	2200      	movs	r2, #0
 80294da:	9201      	str	r2, [sp, #4]
 80294dc:	9300      	str	r3, [sp, #0]
 80294de:	68fb      	ldr	r3, [r7, #12]
 80294e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80294e2:	6939      	ldr	r1, [r7, #16]
 80294e4:	6978      	ldr	r0, [r7, #20]
 80294e6:	f7fe ffba 	bl	802845e <_ntoa_long>
 80294ea:	64f8      	str	r0, [r7, #76]	; 0x4c
 80294ec:	e033      	b.n	8029556 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80294ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80294f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80294f4:	2b00      	cmp	r3, #0
 80294f6:	d007      	beq.n	8029508 <_vsnprintf+0x674>
 80294f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80294fc:	1d1a      	adds	r2, r3, #4
 80294fe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8029502:	681b      	ldr	r3, [r3, #0]
 8029504:	b2db      	uxtb	r3, r3
 8029506:	e012      	b.n	802952e <_vsnprintf+0x69a>
 8029508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802950a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802950e:	2b00      	cmp	r3, #0
 8029510:	d007      	beq.n	8029522 <_vsnprintf+0x68e>
 8029512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029516:	1d1a      	adds	r2, r3, #4
 8029518:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802951c:	681b      	ldr	r3, [r3, #0]
 802951e:	b29b      	uxth	r3, r3
 8029520:	e005      	b.n	802952e <_vsnprintf+0x69a>
 8029522:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029526:	1d1a      	adds	r2, r3, #4
 8029528:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802952c:	681b      	ldr	r3, [r3, #0]
 802952e:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8029530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029532:	9305      	str	r3, [sp, #20]
 8029534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029536:	9304      	str	r3, [sp, #16]
 8029538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802953a:	9303      	str	r3, [sp, #12]
 802953c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802953e:	9302      	str	r3, [sp, #8]
 8029540:	2300      	movs	r3, #0
 8029542:	9301      	str	r3, [sp, #4]
 8029544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029546:	9300      	str	r3, [sp, #0]
 8029548:	68fb      	ldr	r3, [r7, #12]
 802954a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802954c:	6939      	ldr	r1, [r7, #16]
 802954e:	6978      	ldr	r0, [r7, #20]
 8029550:	f7fe ff85 	bl	802845e <_ntoa_long>
 8029554:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8029556:	68bb      	ldr	r3, [r7, #8]
 8029558:	3301      	adds	r3, #1
 802955a:	60bb      	str	r3, [r7, #8]
        break;
 802955c:	e162      	b.n	8029824 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 802955e:	68bb      	ldr	r3, [r7, #8]
 8029560:	781b      	ldrb	r3, [r3, #0]
 8029562:	2b46      	cmp	r3, #70	; 0x46
 8029564:	d103      	bne.n	802956e <_vsnprintf+0x6da>
 8029566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029568:	f043 0320 	orr.w	r3, r3, #32
 802956c:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 802956e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029572:	3307      	adds	r3, #7
 8029574:	f023 0307 	bic.w	r3, r3, #7
 8029578:	f103 0208 	add.w	r2, r3, #8
 802957c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8029580:	ed93 7b00 	vldr	d7, [r3]
 8029584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029586:	9302      	str	r3, [sp, #8]
 8029588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802958a:	9301      	str	r3, [sp, #4]
 802958c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802958e:	9300      	str	r3, [sp, #0]
 8029590:	eeb0 0b47 	vmov.f64	d0, d7
 8029594:	68fb      	ldr	r3, [r7, #12]
 8029596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029598:	6939      	ldr	r1, [r7, #16]
 802959a:	6978      	ldr	r0, [r7, #20]
 802959c:	f7ff f834 	bl	8028608 <_ftoa>
 80295a0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80295a2:	68bb      	ldr	r3, [r7, #8]
 80295a4:	3301      	adds	r3, #1
 80295a6:	60bb      	str	r3, [r7, #8]
        break;
 80295a8:	e13c      	b.n	8029824 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80295aa:	68bb      	ldr	r3, [r7, #8]
 80295ac:	781b      	ldrb	r3, [r3, #0]
 80295ae:	2b67      	cmp	r3, #103	; 0x67
 80295b0:	d003      	beq.n	80295ba <_vsnprintf+0x726>
 80295b2:	68bb      	ldr	r3, [r7, #8]
 80295b4:	781b      	ldrb	r3, [r3, #0]
 80295b6:	2b47      	cmp	r3, #71	; 0x47
 80295b8:	d103      	bne.n	80295c2 <_vsnprintf+0x72e>
 80295ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80295bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80295c0:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80295c2:	68bb      	ldr	r3, [r7, #8]
 80295c4:	781b      	ldrb	r3, [r3, #0]
 80295c6:	2b45      	cmp	r3, #69	; 0x45
 80295c8:	d003      	beq.n	80295d2 <_vsnprintf+0x73e>
 80295ca:	68bb      	ldr	r3, [r7, #8]
 80295cc:	781b      	ldrb	r3, [r3, #0]
 80295ce:	2b47      	cmp	r3, #71	; 0x47
 80295d0:	d103      	bne.n	80295da <_vsnprintf+0x746>
 80295d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80295d4:	f043 0320 	orr.w	r3, r3, #32
 80295d8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80295da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80295de:	3307      	adds	r3, #7
 80295e0:	f023 0307 	bic.w	r3, r3, #7
 80295e4:	f103 0208 	add.w	r2, r3, #8
 80295e8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80295ec:	ed93 7b00 	vldr	d7, [r3]
 80295f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80295f2:	9302      	str	r3, [sp, #8]
 80295f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80295f6:	9301      	str	r3, [sp, #4]
 80295f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80295fa:	9300      	str	r3, [sp, #0]
 80295fc:	eeb0 0b47 	vmov.f64	d0, d7
 8029600:	68fb      	ldr	r3, [r7, #12]
 8029602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029604:	6939      	ldr	r1, [r7, #16]
 8029606:	6978      	ldr	r0, [r7, #20]
 8029608:	f7ff fa46 	bl	8028a98 <_etoa>
 802960c:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 802960e:	68bb      	ldr	r3, [r7, #8]
 8029610:	3301      	adds	r3, #1
 8029612:	60bb      	str	r3, [r7, #8]
        break;
 8029614:	e106      	b.n	8029824 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8029616:	2301      	movs	r3, #1
 8029618:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 802961a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802961c:	f003 0302 	and.w	r3, r3, #2
 8029620:	2b00      	cmp	r3, #0
 8029622:	d10e      	bne.n	8029642 <_vsnprintf+0x7ae>
          while (l++ < width) {
 8029624:	e007      	b.n	8029636 <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 8029626:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029628:	1c53      	adds	r3, r2, #1
 802962a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802962c:	697c      	ldr	r4, [r7, #20]
 802962e:	68fb      	ldr	r3, [r7, #12]
 8029630:	6939      	ldr	r1, [r7, #16]
 8029632:	2020      	movs	r0, #32
 8029634:	47a0      	blx	r4
          while (l++ < width) {
 8029636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029638:	1c5a      	adds	r2, r3, #1
 802963a:	647a      	str	r2, [r7, #68]	; 0x44
 802963c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802963e:	429a      	cmp	r2, r3
 8029640:	d8f1      	bhi.n	8029626 <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8029642:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029646:	1d1a      	adds	r2, r3, #4
 8029648:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802964c:	681b      	ldr	r3, [r3, #0]
 802964e:	b2d8      	uxtb	r0, r3
 8029650:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029652:	1c53      	adds	r3, r2, #1
 8029654:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029656:	697c      	ldr	r4, [r7, #20]
 8029658:	68fb      	ldr	r3, [r7, #12]
 802965a:	6939      	ldr	r1, [r7, #16]
 802965c:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 802965e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029660:	f003 0302 	and.w	r3, r3, #2
 8029664:	2b00      	cmp	r3, #0
 8029666:	d00e      	beq.n	8029686 <_vsnprintf+0x7f2>
          while (l++ < width) {
 8029668:	e007      	b.n	802967a <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 802966a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802966c:	1c53      	adds	r3, r2, #1
 802966e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029670:	697c      	ldr	r4, [r7, #20]
 8029672:	68fb      	ldr	r3, [r7, #12]
 8029674:	6939      	ldr	r1, [r7, #16]
 8029676:	2020      	movs	r0, #32
 8029678:	47a0      	blx	r4
          while (l++ < width) {
 802967a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802967c:	1c5a      	adds	r2, r3, #1
 802967e:	647a      	str	r2, [r7, #68]	; 0x44
 8029680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029682:	429a      	cmp	r2, r3
 8029684:	d8f1      	bhi.n	802966a <_vsnprintf+0x7d6>
          }
        }
        format++;
 8029686:	68bb      	ldr	r3, [r7, #8]
 8029688:	3301      	adds	r3, #1
 802968a:	60bb      	str	r3, [r7, #8]
        break;
 802968c:	e0ca      	b.n	8029824 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 802968e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029692:	1d1a      	adds	r2, r3, #4
 8029694:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8029698:	681b      	ldr	r3, [r3, #0]
 802969a:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 802969c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802969e:	2b00      	cmp	r3, #0
 80296a0:	d001      	beq.n	80296a6 <_vsnprintf+0x812>
 80296a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80296a4:	e001      	b.n	80296aa <_vsnprintf+0x816>
 80296a6:	f04f 33ff 	mov.w	r3, #4294967295
 80296aa:	4619      	mov	r1, r3
 80296ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80296ae:	f7fe fd52 	bl	8028156 <_strnlen_s>
 80296b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80296b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80296b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80296ba:	2b00      	cmp	r3, #0
 80296bc:	d005      	beq.n	80296ca <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 80296be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80296c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80296c2:	4293      	cmp	r3, r2
 80296c4:	bf28      	it	cs
 80296c6:	4613      	movcs	r3, r2
 80296c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80296ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80296cc:	f003 0302 	and.w	r3, r3, #2
 80296d0:	2b00      	cmp	r3, #0
 80296d2:	d11a      	bne.n	802970a <_vsnprintf+0x876>
          while (l++ < width) {
 80296d4:	e007      	b.n	80296e6 <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 80296d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80296d8:	1c53      	adds	r3, r2, #1
 80296da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80296dc:	697c      	ldr	r4, [r7, #20]
 80296de:	68fb      	ldr	r3, [r7, #12]
 80296e0:	6939      	ldr	r1, [r7, #16]
 80296e2:	2020      	movs	r0, #32
 80296e4:	47a0      	blx	r4
          while (l++ < width) {
 80296e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80296e8:	1c5a      	adds	r2, r3, #1
 80296ea:	63fa      	str	r2, [r7, #60]	; 0x3c
 80296ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80296ee:	429a      	cmp	r2, r3
 80296f0:	d8f1      	bhi.n	80296d6 <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80296f2:	e00a      	b.n	802970a <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 80296f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80296f6:	1c5a      	adds	r2, r3, #1
 80296f8:	643a      	str	r2, [r7, #64]	; 0x40
 80296fa:	7818      	ldrb	r0, [r3, #0]
 80296fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80296fe:	1c53      	adds	r3, r2, #1
 8029700:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029702:	697c      	ldr	r4, [r7, #20]
 8029704:	68fb      	ldr	r3, [r7, #12]
 8029706:	6939      	ldr	r1, [r7, #16]
 8029708:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 802970a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802970c:	781b      	ldrb	r3, [r3, #0]
 802970e:	2b00      	cmp	r3, #0
 8029710:	d009      	beq.n	8029726 <_vsnprintf+0x892>
 8029712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8029718:	2b00      	cmp	r3, #0
 802971a:	d0eb      	beq.n	80296f4 <_vsnprintf+0x860>
 802971c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802971e:	1e5a      	subs	r2, r3, #1
 8029720:	657a      	str	r2, [r7, #84]	; 0x54
 8029722:	2b00      	cmp	r3, #0
 8029724:	d1e6      	bne.n	80296f4 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8029726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029728:	f003 0302 	and.w	r3, r3, #2
 802972c:	2b00      	cmp	r3, #0
 802972e:	d00e      	beq.n	802974e <_vsnprintf+0x8ba>
          while (l++ < width) {
 8029730:	e007      	b.n	8029742 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 8029732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029734:	1c53      	adds	r3, r2, #1
 8029736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029738:	697c      	ldr	r4, [r7, #20]
 802973a:	68fb      	ldr	r3, [r7, #12]
 802973c:	6939      	ldr	r1, [r7, #16]
 802973e:	2020      	movs	r0, #32
 8029740:	47a0      	blx	r4
          while (l++ < width) {
 8029742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029744:	1c5a      	adds	r2, r3, #1
 8029746:	63fa      	str	r2, [r7, #60]	; 0x3c
 8029748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802974a:	429a      	cmp	r2, r3
 802974c:	d8f1      	bhi.n	8029732 <_vsnprintf+0x89e>
          }
        }
        format++;
 802974e:	68bb      	ldr	r3, [r7, #8]
 8029750:	3301      	adds	r3, #1
 8029752:	60bb      	str	r3, [r7, #8]
        break;
 8029754:	e066      	b.n	8029824 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8029756:	2308      	movs	r3, #8
 8029758:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 802975a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802975c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8029760:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8029762:	2300      	movs	r3, #0
 8029764:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8029768:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802976c:	2b00      	cmp	r3, #0
 802976e:	d023      	beq.n	80297b8 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8029770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029774:	1d1a      	adds	r2, r3, #4
 8029776:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802977a:	681b      	ldr	r3, [r3, #0]
 802977c:	461a      	mov	r2, r3
 802977e:	2300      	movs	r3, #0
 8029780:	603a      	str	r2, [r7, #0]
 8029782:	607b      	str	r3, [r7, #4]
 8029784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029786:	9308      	str	r3, [sp, #32]
 8029788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802978a:	9307      	str	r3, [sp, #28]
 802978c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802978e:	9306      	str	r3, [sp, #24]
 8029790:	f04f 0210 	mov.w	r2, #16
 8029794:	f04f 0300 	mov.w	r3, #0
 8029798:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802979c:	2300      	movs	r3, #0
 802979e:	9302      	str	r3, [sp, #8]
 80297a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80297a4:	e9cd 3400 	strd	r3, r4, [sp]
 80297a8:	68fb      	ldr	r3, [r7, #12]
 80297aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80297ac:	6939      	ldr	r1, [r7, #16]
 80297ae:	6978      	ldr	r0, [r7, #20]
 80297b0:	f7fe febb 	bl	802852a <_ntoa_long_long>
 80297b4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80297b6:	e018      	b.n	80297ea <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80297b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80297bc:	1d1a      	adds	r2, r3, #4
 80297be:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80297c2:	681b      	ldr	r3, [r3, #0]
 80297c4:	461a      	mov	r2, r3
 80297c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80297c8:	9305      	str	r3, [sp, #20]
 80297ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80297cc:	9304      	str	r3, [sp, #16]
 80297ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80297d0:	9303      	str	r3, [sp, #12]
 80297d2:	2310      	movs	r3, #16
 80297d4:	9302      	str	r3, [sp, #8]
 80297d6:	2300      	movs	r3, #0
 80297d8:	9301      	str	r3, [sp, #4]
 80297da:	9200      	str	r2, [sp, #0]
 80297dc:	68fb      	ldr	r3, [r7, #12]
 80297de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80297e0:	6939      	ldr	r1, [r7, #16]
 80297e2:	6978      	ldr	r0, [r7, #20]
 80297e4:	f7fe fe3b 	bl	802845e <_ntoa_long>
 80297e8:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80297ea:	68bb      	ldr	r3, [r7, #8]
 80297ec:	3301      	adds	r3, #1
 80297ee:	60bb      	str	r3, [r7, #8]
        break;
 80297f0:	e018      	b.n	8029824 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80297f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80297f4:	1c53      	adds	r3, r2, #1
 80297f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80297f8:	697c      	ldr	r4, [r7, #20]
 80297fa:	68fb      	ldr	r3, [r7, #12]
 80297fc:	6939      	ldr	r1, [r7, #16]
 80297fe:	2025      	movs	r0, #37	; 0x25
 8029800:	47a0      	blx	r4
        format++;
 8029802:	68bb      	ldr	r3, [r7, #8]
 8029804:	3301      	adds	r3, #1
 8029806:	60bb      	str	r3, [r7, #8]
        break;
 8029808:	e00c      	b.n	8029824 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 802980a:	68bb      	ldr	r3, [r7, #8]
 802980c:	7818      	ldrb	r0, [r3, #0]
 802980e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029810:	1c53      	adds	r3, r2, #1
 8029812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029814:	697c      	ldr	r4, [r7, #20]
 8029816:	68fb      	ldr	r3, [r7, #12]
 8029818:	6939      	ldr	r1, [r7, #16]
 802981a:	47a0      	blx	r4
        format++;
 802981c:	68bb      	ldr	r3, [r7, #8]
 802981e:	3301      	adds	r3, #1
 8029820:	60bb      	str	r3, [r7, #8]
        break;
 8029822:	bf00      	nop
  while (*format)
 8029824:	68bb      	ldr	r3, [r7, #8]
 8029826:	781b      	ldrb	r3, [r3, #0]
 8029828:	2b00      	cmp	r3, #0
 802982a:	f47f ab45 	bne.w	8028eb8 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 802982e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029830:	68fb      	ldr	r3, [r7, #12]
 8029832:	429a      	cmp	r2, r3
 8029834:	d302      	bcc.n	802983c <_vsnprintf+0x9a8>
 8029836:	68fb      	ldr	r3, [r7, #12]
 8029838:	1e5a      	subs	r2, r3, #1
 802983a:	e000      	b.n	802983e <_vsnprintf+0x9aa>
 802983c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802983e:	697c      	ldr	r4, [r7, #20]
 8029840:	68fb      	ldr	r3, [r7, #12]
 8029842:	6939      	ldr	r1, [r7, #16]
 8029844:	2000      	movs	r0, #0
 8029846:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8029848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 802984a:	4618      	mov	r0, r3
 802984c:	3764      	adds	r7, #100	; 0x64
 802984e:	46bd      	mov	sp, r7
 8029850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029854 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8029854:	b40f      	push	{r0, r1, r2, r3}
 8029856:	b580      	push	{r7, lr}
 8029858:	b086      	sub	sp, #24
 802985a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 802985c:	f107 031c 	add.w	r3, r7, #28
 8029860:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8029862:	1d39      	adds	r1, r7, #4
 8029864:	68bb      	ldr	r3, [r7, #8]
 8029866:	9300      	str	r3, [sp, #0]
 8029868:	69bb      	ldr	r3, [r7, #24]
 802986a:	f04f 32ff 	mov.w	r2, #4294967295
 802986e:	4806      	ldr	r0, [pc, #24]	; (8029888 <printf_+0x34>)
 8029870:	f7ff fb10 	bl	8028e94 <_vsnprintf>
 8029874:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8029876:	68fb      	ldr	r3, [r7, #12]
}
 8029878:	4618      	mov	r0, r3
 802987a:	3710      	adds	r7, #16
 802987c:	46bd      	mov	sp, r7
 802987e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8029882:	b004      	add	sp, #16
 8029884:	4770      	bx	lr
 8029886:	bf00      	nop
 8029888:	08028131 	.word	0x08028131

0802988c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802988c:	b480      	push	{r7}
 802988e:	b083      	sub	sp, #12
 8029890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029892:	4b0a      	ldr	r3, [pc, #40]	; (80298bc <HAL_MspInit+0x30>)
 8029894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029898:	4a08      	ldr	r2, [pc, #32]	; (80298bc <HAL_MspInit+0x30>)
 802989a:	f043 0302 	orr.w	r3, r3, #2
 802989e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80298a2:	4b06      	ldr	r3, [pc, #24]	; (80298bc <HAL_MspInit+0x30>)
 80298a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80298a8:	f003 0302 	and.w	r3, r3, #2
 80298ac:	607b      	str	r3, [r7, #4]
 80298ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80298b0:	bf00      	nop
 80298b2:	370c      	adds	r7, #12
 80298b4:	46bd      	mov	sp, r7
 80298b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298ba:	4770      	bx	lr
 80298bc:	58024400 	.word	0x58024400

080298c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80298c0:	b580      	push	{r7, lr}
 80298c2:	b0ba      	sub	sp, #232	; 0xe8
 80298c4:	af00      	add	r7, sp, #0
 80298c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80298c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80298cc:	2200      	movs	r2, #0
 80298ce:	601a      	str	r2, [r3, #0]
 80298d0:	605a      	str	r2, [r3, #4]
 80298d2:	609a      	str	r2, [r3, #8]
 80298d4:	60da      	str	r2, [r3, #12]
 80298d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80298d8:	f107 0310 	add.w	r3, r7, #16
 80298dc:	22c0      	movs	r2, #192	; 0xc0
 80298de:	2100      	movs	r1, #0
 80298e0:	4618      	mov	r0, r3
 80298e2:	f007 f941 	bl	8030b68 <memset>
  if(hspi->Instance==SPI1)
 80298e6:	687b      	ldr	r3, [r7, #4]
 80298e8:	681b      	ldr	r3, [r3, #0]
 80298ea:	4a2a      	ldr	r2, [pc, #168]	; (8029994 <HAL_SPI_MspInit+0xd4>)
 80298ec:	4293      	cmp	r3, r2
 80298ee:	d14c      	bne.n	802998a <HAL_SPI_MspInit+0xca>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80298f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80298f4:	f04f 0300 	mov.w	r3, #0
 80298f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80298fc:	2300      	movs	r3, #0
 80298fe:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029900:	f107 0310 	add.w	r3, r7, #16
 8029904:	4618      	mov	r0, r3
 8029906:	f002 fe15 	bl	802c534 <HAL_RCCEx_PeriphCLKConfig>
 802990a:	4603      	mov	r3, r0
 802990c:	2b00      	cmp	r3, #0
 802990e:	d001      	beq.n	8029914 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8029910:	f7fe fbfb 	bl	802810a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8029914:	4b20      	ldr	r3, [pc, #128]	; (8029998 <HAL_SPI_MspInit+0xd8>)
 8029916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802991a:	4a1f      	ldr	r2, [pc, #124]	; (8029998 <HAL_SPI_MspInit+0xd8>)
 802991c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8029920:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8029924:	4b1c      	ldr	r3, [pc, #112]	; (8029998 <HAL_SPI_MspInit+0xd8>)
 8029926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802992a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802992e:	60fb      	str	r3, [r7, #12]
 8029930:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8029932:	4b19      	ldr	r3, [pc, #100]	; (8029998 <HAL_SPI_MspInit+0xd8>)
 8029934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029938:	4a17      	ldr	r2, [pc, #92]	; (8029998 <HAL_SPI_MspInit+0xd8>)
 802993a:	f043 0301 	orr.w	r3, r3, #1
 802993e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029942:	4b15      	ldr	r3, [pc, #84]	; (8029998 <HAL_SPI_MspInit+0xd8>)
 8029944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029948:	f003 0301 	and.w	r3, r3, #1
 802994c:	60bb      	str	r3, [r7, #8]
 802994e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8029950:	23e0      	movs	r3, #224	; 0xe0
 8029952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029956:	2302      	movs	r3, #2
 8029958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802995c:	2300      	movs	r3, #0
 802995e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029962:	2300      	movs	r3, #0
 8029964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8029968:	2305      	movs	r3, #5
 802996a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802996e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8029972:	4619      	mov	r1, r3
 8029974:	4809      	ldr	r0, [pc, #36]	; (802999c <HAL_SPI_MspInit+0xdc>)
 8029976:	f001 faa7 	bl	802aec8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 802997a:	2200      	movs	r2, #0
 802997c:	2100      	movs	r1, #0
 802997e:	2023      	movs	r0, #35	; 0x23
 8029980:	f000 ffab 	bl	802a8da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8029984:	2023      	movs	r0, #35	; 0x23
 8029986:	f000 ffc2 	bl	802a90e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 802998a:	bf00      	nop
 802998c:	37e8      	adds	r7, #232	; 0xe8
 802998e:	46bd      	mov	sp, r7
 8029990:	bd80      	pop	{r7, pc}
 8029992:	bf00      	nop
 8029994:	40013000 	.word	0x40013000
 8029998:	58024400 	.word	0x58024400
 802999c:	58020000 	.word	0x58020000

080299a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80299a0:	b580      	push	{r7, lr}
 80299a2:	b084      	sub	sp, #16
 80299a4:	af00      	add	r7, sp, #0
 80299a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80299a8:	687b      	ldr	r3, [r7, #4]
 80299aa:	681b      	ldr	r3, [r3, #0]
 80299ac:	4a0e      	ldr	r2, [pc, #56]	; (80299e8 <HAL_TIM_Base_MspInit+0x48>)
 80299ae:	4293      	cmp	r3, r2
 80299b0:	d116      	bne.n	80299e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80299b2:	4b0e      	ldr	r3, [pc, #56]	; (80299ec <HAL_TIM_Base_MspInit+0x4c>)
 80299b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80299b8:	4a0c      	ldr	r2, [pc, #48]	; (80299ec <HAL_TIM_Base_MspInit+0x4c>)
 80299ba:	f043 0320 	orr.w	r3, r3, #32
 80299be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80299c2:	4b0a      	ldr	r3, [pc, #40]	; (80299ec <HAL_TIM_Base_MspInit+0x4c>)
 80299c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80299c8:	f003 0320 	and.w	r3, r3, #32
 80299cc:	60fb      	str	r3, [r7, #12]
 80299ce:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80299d0:	2200      	movs	r2, #0
 80299d2:	2100      	movs	r1, #0
 80299d4:	2037      	movs	r0, #55	; 0x37
 80299d6:	f000 ff80 	bl	802a8da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80299da:	2037      	movs	r0, #55	; 0x37
 80299dc:	f000 ff97 	bl	802a90e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80299e0:	bf00      	nop
 80299e2:	3710      	adds	r7, #16
 80299e4:	46bd      	mov	sp, r7
 80299e6:	bd80      	pop	{r7, pc}
 80299e8:	40001400 	.word	0x40001400
 80299ec:	58024400 	.word	0x58024400

080299f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80299f0:	b580      	push	{r7, lr}
 80299f2:	b0c2      	sub	sp, #264	; 0x108
 80299f4:	af00      	add	r7, sp, #0
 80299f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80299fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80299fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029a00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8029a04:	2200      	movs	r2, #0
 8029a06:	601a      	str	r2, [r3, #0]
 8029a08:	605a      	str	r2, [r3, #4]
 8029a0a:	609a      	str	r2, [r3, #8]
 8029a0c:	60da      	str	r2, [r3, #12]
 8029a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029a14:	22c0      	movs	r2, #192	; 0xc0
 8029a16:	2100      	movs	r1, #0
 8029a18:	4618      	mov	r0, r3
 8029a1a:	f007 f8a5 	bl	8030b68 <memset>
  if(huart->Instance==UART4)
 8029a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8029a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8029a26:	681b      	ldr	r3, [r3, #0]
 8029a28:	681b      	ldr	r3, [r3, #0]
 8029a2a:	4acc      	ldr	r2, [pc, #816]	; (8029d5c <HAL_UART_MspInit+0x36c>)
 8029a2c:	4293      	cmp	r3, r2
 8029a2e:	d146      	bne.n	8029abe <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8029a30:	f04f 0202 	mov.w	r2, #2
 8029a34:	f04f 0300 	mov.w	r3, #0
 8029a38:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8029a3c:	2300      	movs	r3, #0
 8029a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029a42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029a46:	4618      	mov	r0, r3
 8029a48:	f002 fd74 	bl	802c534 <HAL_RCCEx_PeriphCLKConfig>
 8029a4c:	4603      	mov	r3, r0
 8029a4e:	2b00      	cmp	r3, #0
 8029a50:	d001      	beq.n	8029a56 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8029a52:	f7fe fb5a 	bl	802810a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8029a56:	4bc2      	ldr	r3, [pc, #776]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029a5c:	4ac0      	ldr	r2, [pc, #768]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8029a62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8029a66:	4bbe      	ldr	r3, [pc, #760]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029a6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8029a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8029a74:	4bba      	ldr	r3, [pc, #744]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029a7a:	4ab9      	ldr	r2, [pc, #740]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029a7c:	f043 0301 	orr.w	r3, r3, #1
 8029a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029a84:	4bb6      	ldr	r3, [pc, #728]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029a8a:	f003 0301 	and.w	r3, r3, #1
 8029a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8029a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8029a92:	2303      	movs	r3, #3
 8029a94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029a98:	2302      	movs	r3, #2
 8029a9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029a9e:	2300      	movs	r3, #0
 8029aa0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029aa4:	2300      	movs	r3, #0
 8029aa6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8029aaa:	2308      	movs	r3, #8
 8029aac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8029ab0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8029ab4:	4619      	mov	r1, r3
 8029ab6:	48ab      	ldr	r0, [pc, #684]	; (8029d64 <HAL_UART_MspInit+0x374>)
 8029ab8:	f001 fa06 	bl	802aec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8029abc:	e149      	b.n	8029d52 <HAL_UART_MspInit+0x362>
  else if(huart->Instance==UART5)
 8029abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8029ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8029ac6:	681b      	ldr	r3, [r3, #0]
 8029ac8:	681b      	ldr	r3, [r3, #0]
 8029aca:	4aa7      	ldr	r2, [pc, #668]	; (8029d68 <HAL_UART_MspInit+0x378>)
 8029acc:	4293      	cmp	r3, r2
 8029ace:	d147      	bne.n	8029b60 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8029ad0:	f04f 0202 	mov.w	r2, #2
 8029ad4:	f04f 0300 	mov.w	r3, #0
 8029ad8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8029adc:	2300      	movs	r3, #0
 8029ade:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029ae2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029ae6:	4618      	mov	r0, r3
 8029ae8:	f002 fd24 	bl	802c534 <HAL_RCCEx_PeriphCLKConfig>
 8029aec:	4603      	mov	r3, r0
 8029aee:	2b00      	cmp	r3, #0
 8029af0:	d001      	beq.n	8029af6 <HAL_UART_MspInit+0x106>
      Error_Handler();
 8029af2:	f7fe fb0a 	bl	802810a <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8029af6:	4b9a      	ldr	r3, [pc, #616]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029afc:	4a98      	ldr	r2, [pc, #608]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8029b02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8029b06:	4b96      	ldr	r3, [pc, #600]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029b10:	627b      	str	r3, [r7, #36]	; 0x24
 8029b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8029b14:	4b92      	ldr	r3, [pc, #584]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029b1a:	4a91      	ldr	r2, [pc, #580]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029b1c:	f043 0302 	orr.w	r3, r3, #2
 8029b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029b24:	4b8e      	ldr	r3, [pc, #568]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029b2a:	f003 0302 	and.w	r3, r3, #2
 8029b2e:	623b      	str	r3, [r7, #32]
 8029b30:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8029b32:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8029b36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029b3a:	2302      	movs	r3, #2
 8029b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029b40:	2300      	movs	r3, #0
 8029b42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029b46:	2300      	movs	r3, #0
 8029b48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8029b4c:	230e      	movs	r3, #14
 8029b4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8029b52:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8029b56:	4619      	mov	r1, r3
 8029b58:	4884      	ldr	r0, [pc, #528]	; (8029d6c <HAL_UART_MspInit+0x37c>)
 8029b5a:	f001 f9b5 	bl	802aec8 <HAL_GPIO_Init>
}
 8029b5e:	e0f8      	b.n	8029d52 <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART1)
 8029b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8029b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8029b68:	681b      	ldr	r3, [r3, #0]
 8029b6a:	681b      	ldr	r3, [r3, #0]
 8029b6c:	4a80      	ldr	r2, [pc, #512]	; (8029d70 <HAL_UART_MspInit+0x380>)
 8029b6e:	4293      	cmp	r3, r2
 8029b70:	d147      	bne.n	8029c02 <HAL_UART_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8029b72:	f04f 0201 	mov.w	r2, #1
 8029b76:	f04f 0300 	mov.w	r3, #0
 8029b7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8029b7e:	2300      	movs	r3, #0
 8029b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029b84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029b88:	4618      	mov	r0, r3
 8029b8a:	f002 fcd3 	bl	802c534 <HAL_RCCEx_PeriphCLKConfig>
 8029b8e:	4603      	mov	r3, r0
 8029b90:	2b00      	cmp	r3, #0
 8029b92:	d001      	beq.n	8029b98 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8029b94:	f7fe fab9 	bl	802810a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8029b98:	4b71      	ldr	r3, [pc, #452]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029b9e:	4a70      	ldr	r2, [pc, #448]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029ba0:	f043 0310 	orr.w	r3, r3, #16
 8029ba4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8029ba8:	4b6d      	ldr	r3, [pc, #436]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029bae:	f003 0310 	and.w	r3, r3, #16
 8029bb2:	61fb      	str	r3, [r7, #28]
 8029bb4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8029bb6:	4b6a      	ldr	r3, [pc, #424]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029bbc:	4a68      	ldr	r2, [pc, #416]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029bbe:	f043 0302 	orr.w	r3, r3, #2
 8029bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029bc6:	4b66      	ldr	r3, [pc, #408]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029bcc:	f003 0302 	and.w	r3, r3, #2
 8029bd0:	61bb      	str	r3, [r7, #24]
 8029bd2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8029bd4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8029bd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029bdc:	2302      	movs	r3, #2
 8029bde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029be2:	2300      	movs	r3, #0
 8029be4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029be8:	2300      	movs	r3, #0
 8029bea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8029bee:	2304      	movs	r3, #4
 8029bf0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8029bf4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8029bf8:	4619      	mov	r1, r3
 8029bfa:	485c      	ldr	r0, [pc, #368]	; (8029d6c <HAL_UART_MspInit+0x37c>)
 8029bfc:	f001 f964 	bl	802aec8 <HAL_GPIO_Init>
}
 8029c00:	e0a7      	b.n	8029d52 <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART2)
 8029c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8029c06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8029c0a:	681b      	ldr	r3, [r3, #0]
 8029c0c:	681b      	ldr	r3, [r3, #0]
 8029c0e:	4a59      	ldr	r2, [pc, #356]	; (8029d74 <HAL_UART_MspInit+0x384>)
 8029c10:	4293      	cmp	r3, r2
 8029c12:	d146      	bne.n	8029ca2 <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8029c14:	f04f 0202 	mov.w	r2, #2
 8029c18:	f04f 0300 	mov.w	r3, #0
 8029c1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8029c20:	2300      	movs	r3, #0
 8029c22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029c26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029c2a:	4618      	mov	r0, r3
 8029c2c:	f002 fc82 	bl	802c534 <HAL_RCCEx_PeriphCLKConfig>
 8029c30:	4603      	mov	r3, r0
 8029c32:	2b00      	cmp	r3, #0
 8029c34:	d001      	beq.n	8029c3a <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8029c36:	f7fe fa68 	bl	802810a <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8029c3a:	4b49      	ldr	r3, [pc, #292]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029c40:	4a47      	ldr	r2, [pc, #284]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8029c46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8029c4a:	4b45      	ldr	r3, [pc, #276]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029c54:	617b      	str	r3, [r7, #20]
 8029c56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8029c58:	4b41      	ldr	r3, [pc, #260]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029c5e:	4a40      	ldr	r2, [pc, #256]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029c60:	f043 0301 	orr.w	r3, r3, #1
 8029c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029c68:	4b3d      	ldr	r3, [pc, #244]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029c6e:	f003 0301 	and.w	r3, r3, #1
 8029c72:	613b      	str	r3, [r7, #16]
 8029c74:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8029c76:	230c      	movs	r3, #12
 8029c78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029c7c:	2302      	movs	r3, #2
 8029c7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029c82:	2300      	movs	r3, #0
 8029c84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029c88:	2300      	movs	r3, #0
 8029c8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8029c8e:	2307      	movs	r3, #7
 8029c90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8029c94:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8029c98:	4619      	mov	r1, r3
 8029c9a:	4832      	ldr	r0, [pc, #200]	; (8029d64 <HAL_UART_MspInit+0x374>)
 8029c9c:	f001 f914 	bl	802aec8 <HAL_GPIO_Init>
}
 8029ca0:	e057      	b.n	8029d52 <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART3)
 8029ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8029ca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8029caa:	681b      	ldr	r3, [r3, #0]
 8029cac:	681b      	ldr	r3, [r3, #0]
 8029cae:	4a32      	ldr	r2, [pc, #200]	; (8029d78 <HAL_UART_MspInit+0x388>)
 8029cb0:	4293      	cmp	r3, r2
 8029cb2:	d14e      	bne.n	8029d52 <HAL_UART_MspInit+0x362>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8029cb4:	f04f 0202 	mov.w	r2, #2
 8029cb8:	f04f 0300 	mov.w	r3, #0
 8029cbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8029cc0:	2300      	movs	r3, #0
 8029cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029cc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029cca:	4618      	mov	r0, r3
 8029ccc:	f002 fc32 	bl	802c534 <HAL_RCCEx_PeriphCLKConfig>
 8029cd0:	4603      	mov	r3, r0
 8029cd2:	2b00      	cmp	r3, #0
 8029cd4:	d001      	beq.n	8029cda <HAL_UART_MspInit+0x2ea>
      Error_Handler();
 8029cd6:	f7fe fa18 	bl	802810a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8029cda:	4b21      	ldr	r3, [pc, #132]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029ce0:	4a1f      	ldr	r2, [pc, #124]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8029ce6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8029cea:	4b1d      	ldr	r3, [pc, #116]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8029cf4:	60fb      	str	r3, [r7, #12]
 8029cf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8029cf8:	4b19      	ldr	r3, [pc, #100]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029cfe:	4a18      	ldr	r2, [pc, #96]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029d00:	f043 0302 	orr.w	r3, r3, #2
 8029d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029d08:	4b15      	ldr	r3, [pc, #84]	; (8029d60 <HAL_UART_MspInit+0x370>)
 8029d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029d0e:	f003 0202 	and.w	r2, r3, #2
 8029d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8029d16:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8029d1a:	601a      	str	r2, [r3, #0]
 8029d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8029d20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8029d24:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8029d26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8029d2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029d2e:	2302      	movs	r3, #2
 8029d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029d34:	2300      	movs	r3, #0
 8029d36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029d3a:	2300      	movs	r3, #0
 8029d3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8029d40:	2307      	movs	r3, #7
 8029d42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8029d46:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8029d4a:	4619      	mov	r1, r3
 8029d4c:	4807      	ldr	r0, [pc, #28]	; (8029d6c <HAL_UART_MspInit+0x37c>)
 8029d4e:	f001 f8bb 	bl	802aec8 <HAL_GPIO_Init>
}
 8029d52:	bf00      	nop
 8029d54:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8029d58:	46bd      	mov	sp, r7
 8029d5a:	bd80      	pop	{r7, pc}
 8029d5c:	40004c00 	.word	0x40004c00
 8029d60:	58024400 	.word	0x58024400
 8029d64:	58020000 	.word	0x58020000
 8029d68:	40005000 	.word	0x40005000
 8029d6c:	58020400 	.word	0x58020400
 8029d70:	40011000 	.word	0x40011000
 8029d74:	40004400 	.word	0x40004400
 8029d78:	40004800 	.word	0x40004800

08029d7c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8029d7c:	b580      	push	{r7, lr}
 8029d7e:	b082      	sub	sp, #8
 8029d80:	af00      	add	r7, sp, #0
 8029d82:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8029d84:	687b      	ldr	r3, [r7, #4]
 8029d86:	681b      	ldr	r3, [r3, #0]
 8029d88:	4a2e      	ldr	r2, [pc, #184]	; (8029e44 <HAL_UART_MspDeInit+0xc8>)
 8029d8a:	4293      	cmp	r3, r2
 8029d8c:	d10c      	bne.n	8029da8 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8029d8e:	4b2e      	ldr	r3, [pc, #184]	; (8029e48 <HAL_UART_MspDeInit+0xcc>)
 8029d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029d94:	4a2c      	ldr	r2, [pc, #176]	; (8029e48 <HAL_UART_MspDeInit+0xcc>)
 8029d96:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8029d9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8029d9e:	2103      	movs	r1, #3
 8029da0:	482a      	ldr	r0, [pc, #168]	; (8029e4c <HAL_UART_MspDeInit+0xd0>)
 8029da2:	f001 fa41 	bl	802b228 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8029da6:	e049      	b.n	8029e3c <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==UART5)
 8029da8:	687b      	ldr	r3, [r7, #4]
 8029daa:	681b      	ldr	r3, [r3, #0]
 8029dac:	4a28      	ldr	r2, [pc, #160]	; (8029e50 <HAL_UART_MspDeInit+0xd4>)
 8029dae:	4293      	cmp	r3, r2
 8029db0:	d10d      	bne.n	8029dce <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_UART5_CLK_DISABLE();
 8029db2:	4b25      	ldr	r3, [pc, #148]	; (8029e48 <HAL_UART_MspDeInit+0xcc>)
 8029db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029db8:	4a23      	ldr	r2, [pc, #140]	; (8029e48 <HAL_UART_MspDeInit+0xcc>)
 8029dba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8029dbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 8029dc2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8029dc6:	4823      	ldr	r0, [pc, #140]	; (8029e54 <HAL_UART_MspDeInit+0xd8>)
 8029dc8:	f001 fa2e 	bl	802b228 <HAL_GPIO_DeInit>
}
 8029dcc:	e036      	b.n	8029e3c <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART1)
 8029dce:	687b      	ldr	r3, [r7, #4]
 8029dd0:	681b      	ldr	r3, [r3, #0]
 8029dd2:	4a21      	ldr	r2, [pc, #132]	; (8029e58 <HAL_UART_MspDeInit+0xdc>)
 8029dd4:	4293      	cmp	r3, r2
 8029dd6:	d10d      	bne.n	8029df4 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART1_CLK_DISABLE();
 8029dd8:	4b1b      	ldr	r3, [pc, #108]	; (8029e48 <HAL_UART_MspDeInit+0xcc>)
 8029dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029dde:	4a1a      	ldr	r2, [pc, #104]	; (8029e48 <HAL_UART_MspDeInit+0xcc>)
 8029de0:	f023 0310 	bic.w	r3, r3, #16
 8029de4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14|GPIO_PIN_15);
 8029de8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8029dec:	4819      	ldr	r0, [pc, #100]	; (8029e54 <HAL_UART_MspDeInit+0xd8>)
 8029dee:	f001 fa1b 	bl	802b228 <HAL_GPIO_DeInit>
}
 8029df2:	e023      	b.n	8029e3c <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART2)
 8029df4:	687b      	ldr	r3, [r7, #4]
 8029df6:	681b      	ldr	r3, [r3, #0]
 8029df8:	4a18      	ldr	r2, [pc, #96]	; (8029e5c <HAL_UART_MspDeInit+0xe0>)
 8029dfa:	4293      	cmp	r3, r2
 8029dfc:	d10c      	bne.n	8029e18 <HAL_UART_MspDeInit+0x9c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8029dfe:	4b12      	ldr	r3, [pc, #72]	; (8029e48 <HAL_UART_MspDeInit+0xcc>)
 8029e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029e04:	4a10      	ldr	r2, [pc, #64]	; (8029e48 <HAL_UART_MspDeInit+0xcc>)
 8029e06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8029e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8029e0e:	210c      	movs	r1, #12
 8029e10:	480e      	ldr	r0, [pc, #56]	; (8029e4c <HAL_UART_MspDeInit+0xd0>)
 8029e12:	f001 fa09 	bl	802b228 <HAL_GPIO_DeInit>
}
 8029e16:	e011      	b.n	8029e3c <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART3)
 8029e18:	687b      	ldr	r3, [r7, #4]
 8029e1a:	681b      	ldr	r3, [r3, #0]
 8029e1c:	4a10      	ldr	r2, [pc, #64]	; (8029e60 <HAL_UART_MspDeInit+0xe4>)
 8029e1e:	4293      	cmp	r3, r2
 8029e20:	d10c      	bne.n	8029e3c <HAL_UART_MspDeInit+0xc0>
    __HAL_RCC_USART3_CLK_DISABLE();
 8029e22:	4b09      	ldr	r3, [pc, #36]	; (8029e48 <HAL_UART_MspDeInit+0xcc>)
 8029e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029e28:	4a07      	ldr	r2, [pc, #28]	; (8029e48 <HAL_UART_MspDeInit+0xcc>)
 8029e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8029e2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8029e32:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8029e36:	4807      	ldr	r0, [pc, #28]	; (8029e54 <HAL_UART_MspDeInit+0xd8>)
 8029e38:	f001 f9f6 	bl	802b228 <HAL_GPIO_DeInit>
}
 8029e3c:	bf00      	nop
 8029e3e:	3708      	adds	r7, #8
 8029e40:	46bd      	mov	sp, r7
 8029e42:	bd80      	pop	{r7, pc}
 8029e44:	40004c00 	.word	0x40004c00
 8029e48:	58024400 	.word	0x58024400
 8029e4c:	58020000 	.word	0x58020000
 8029e50:	40005000 	.word	0x40005000
 8029e54:	58020400 	.word	0x58020400
 8029e58:	40011000 	.word	0x40011000
 8029e5c:	40004400 	.word	0x40004400
 8029e60:	40004800 	.word	0x40004800

08029e64 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8029e64:	b580      	push	{r7, lr}
 8029e66:	b0b8      	sub	sp, #224	; 0xe0
 8029e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8029e6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029e6e:	2200      	movs	r2, #0
 8029e70:	601a      	str	r2, [r3, #0]
 8029e72:	605a      	str	r2, [r3, #4]
 8029e74:	609a      	str	r2, [r3, #8]
 8029e76:	60da      	str	r2, [r3, #12]
 8029e78:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8029e7a:	4b51      	ldr	r3, [pc, #324]	; (8029fc0 <HAL_FMC_MspInit+0x15c>)
 8029e7c:	681b      	ldr	r3, [r3, #0]
 8029e7e:	2b00      	cmp	r3, #0
 8029e80:	f040 8099 	bne.w	8029fb6 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8029e84:	4b4e      	ldr	r3, [pc, #312]	; (8029fc0 <HAL_FMC_MspInit+0x15c>)
 8029e86:	2201      	movs	r2, #1
 8029e88:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029e8a:	f107 0308 	add.w	r3, r7, #8
 8029e8e:	22c0      	movs	r2, #192	; 0xc0
 8029e90:	2100      	movs	r1, #0
 8029e92:	4618      	mov	r0, r3
 8029e94:	f006 fe68 	bl	8030b68 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8029e98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8029e9c:	f04f 0300 	mov.w	r3, #0
 8029ea0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8029ea4:	2300      	movs	r3, #0
 8029ea6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029ea8:	f107 0308 	add.w	r3, r7, #8
 8029eac:	4618      	mov	r0, r3
 8029eae:	f002 fb41 	bl	802c534 <HAL_RCCEx_PeriphCLKConfig>
 8029eb2:	4603      	mov	r3, r0
 8029eb4:	2b00      	cmp	r3, #0
 8029eb6:	d001      	beq.n	8029ebc <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8029eb8:	f7fe f927 	bl	802810a <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8029ebc:	4b41      	ldr	r3, [pc, #260]	; (8029fc4 <HAL_FMC_MspInit+0x160>)
 8029ebe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8029ec2:	4a40      	ldr	r2, [pc, #256]	; (8029fc4 <HAL_FMC_MspInit+0x160>)
 8029ec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8029ec8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8029ecc:	4b3d      	ldr	r3, [pc, #244]	; (8029fc4 <HAL_FMC_MspInit+0x160>)
 8029ece:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8029ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029ed6:	607b      	str	r3, [r7, #4]
 8029ed8:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8029eda:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8029ede:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029ee2:	2302      	movs	r3, #2
 8029ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029ee8:	2300      	movs	r3, #0
 8029eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029eee:	2303      	movs	r3, #3
 8029ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8029ef4:	230c      	movs	r3, #12
 8029ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8029efa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029efe:	4619      	mov	r1, r3
 8029f00:	4831      	ldr	r0, [pc, #196]	; (8029fc8 <HAL_FMC_MspInit+0x164>)
 8029f02:	f000 ffe1 	bl	802aec8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8029f06:	2303      	movs	r3, #3
 8029f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029f0c:	2302      	movs	r3, #2
 8029f0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029f12:	2300      	movs	r3, #0
 8029f14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029f18:	2303      	movs	r3, #3
 8029f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8029f1e:	230c      	movs	r3, #12
 8029f20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8029f24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029f28:	4619      	mov	r1, r3
 8029f2a:	4828      	ldr	r0, [pc, #160]	; (8029fcc <HAL_FMC_MspInit+0x168>)
 8029f2c:	f000 ffcc 	bl	802aec8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8029f30:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8029f34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029f38:	2302      	movs	r3, #2
 8029f3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029f3e:	2300      	movs	r3, #0
 8029f40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029f44:	2303      	movs	r3, #3
 8029f46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8029f4a:	230c      	movs	r3, #12
 8029f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8029f50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029f54:	4619      	mov	r1, r3
 8029f56:	481e      	ldr	r0, [pc, #120]	; (8029fd0 <HAL_FMC_MspInit+0x16c>)
 8029f58:	f000 ffb6 	bl	802aec8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8029f5c:	f24c 0333 	movw	r3, #49203	; 0xc033
 8029f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029f64:	2302      	movs	r3, #2
 8029f66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029f6a:	2300      	movs	r3, #0
 8029f6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029f70:	2303      	movs	r3, #3
 8029f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8029f76:	230c      	movs	r3, #12
 8029f78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8029f7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029f80:	4619      	mov	r1, r3
 8029f82:	4814      	ldr	r0, [pc, #80]	; (8029fd4 <HAL_FMC_MspInit+0x170>)
 8029f84:	f000 ffa0 	bl	802aec8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8029f88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8029f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029f90:	2302      	movs	r3, #2
 8029f92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029f96:	2300      	movs	r3, #0
 8029f98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029f9c:	2303      	movs	r3, #3
 8029f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8029fa2:	2309      	movs	r3, #9
 8029fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8029fa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029fac:	4619      	mov	r1, r3
 8029fae:	480a      	ldr	r0, [pc, #40]	; (8029fd8 <HAL_FMC_MspInit+0x174>)
 8029fb0:	f000 ff8a 	bl	802aec8 <HAL_GPIO_Init>
 8029fb4:	e000      	b.n	8029fb8 <HAL_FMC_MspInit+0x154>
    return;
 8029fb6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8029fb8:	37e0      	adds	r7, #224	; 0xe0
 8029fba:	46bd      	mov	sp, r7
 8029fbc:	bd80      	pop	{r7, pc}
 8029fbe:	bf00      	nop
 8029fc0:	24001fe8 	.word	0x24001fe8
 8029fc4:	58024400 	.word	0x58024400
 8029fc8:	58021400 	.word	0x58021400
 8029fcc:	58021800 	.word	0x58021800
 8029fd0:	58021000 	.word	0x58021000
 8029fd4:	58020c00 	.word	0x58020c00
 8029fd8:	58020800 	.word	0x58020800

08029fdc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8029fdc:	b580      	push	{r7, lr}
 8029fde:	b082      	sub	sp, #8
 8029fe0:	af00      	add	r7, sp, #0
 8029fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8029fe4:	f7ff ff3e 	bl	8029e64 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8029fe8:	bf00      	nop
 8029fea:	3708      	adds	r7, #8
 8029fec:	46bd      	mov	sp, r7
 8029fee:	bd80      	pop	{r7, pc}

08029ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8029ff0:	b480      	push	{r7}
 8029ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8029ff4:	e7fe      	b.n	8029ff4 <NMI_Handler+0x4>

08029ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8029ff6:	b480      	push	{r7}
 8029ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8029ffa:	e7fe      	b.n	8029ffa <HardFault_Handler+0x4>

08029ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8029ffc:	b480      	push	{r7}
 8029ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802a000:	e7fe      	b.n	802a000 <MemManage_Handler+0x4>

0802a002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802a002:	b480      	push	{r7}
 802a004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802a006:	e7fe      	b.n	802a006 <BusFault_Handler+0x4>

0802a008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802a008:	b480      	push	{r7}
 802a00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802a00c:	e7fe      	b.n	802a00c <UsageFault_Handler+0x4>

0802a00e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802a00e:	b480      	push	{r7}
 802a010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802a012:	bf00      	nop
 802a014:	46bd      	mov	sp, r7
 802a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a01a:	4770      	bx	lr

0802a01c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802a01c:	b480      	push	{r7}
 802a01e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802a020:	bf00      	nop
 802a022:	46bd      	mov	sp, r7
 802a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a028:	4770      	bx	lr

0802a02a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802a02a:	b480      	push	{r7}
 802a02c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802a02e:	bf00      	nop
 802a030:	46bd      	mov	sp, r7
 802a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a036:	4770      	bx	lr

0802a038 <SysTick_Handler>:
  */

BYTE ch =  0;

void SysTick_Handler(void)
{
 802a038:	b580      	push	{r7, lr}
 802a03a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802a03c:	f000 fb22 	bl	802a684 <HAL_IncTick>

  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(bDip_SW_Flag == TRUE)			//The hal tick works immediately after SystemClock_Config is enabled.
 802a040:	4b18      	ldr	r3, [pc, #96]	; (802a0a4 <SysTick_Handler+0x6c>)
 802a042:	781b      	ldrb	r3, [r3, #0]
 802a044:	2b00      	cmp	r3, #0
 802a046:	d02b      	beq.n	802a0a0 <SysTick_Handler+0x68>
	{									// The dipswitch should work after the FMC initialization.		pms
		gbDipSW = dip_sw();				//(BYTE)GPIO_ByteRead(GPIO1, GPIO_LSB)^0xFF;
 802a048:	f7fe f824 	bl	8028094 <dip_sw>
 802a04c:	4603      	mov	r3, r0
 802a04e:	b2da      	uxtb	r2, r3
 802a050:	4b15      	ldr	r3, [pc, #84]	; (802a0a8 <SysTick_Handler+0x70>)
 802a052:	701a      	strb	r2, [r3, #0]


		if (gbDipSW & MASK_SELF_TEST)					//Self 테스트 모드		temp
 802a054:	4b14      	ldr	r3, [pc, #80]	; (802a0a8 <SysTick_Handler+0x70>)
 802a056:	781b      	ldrb	r3, [r3, #0]
 802a058:	f003 0376 	and.w	r3, r3, #118	; 0x76
 802a05c:	2b00      	cmp	r3, #0
 802a05e:	d004      	beq.n	802a06a <SysTick_Handler+0x32>
		{
			TestAging();
 802a060:	f7fb fa1a 	bl	8025498 <TestAging>
			bDip_SW_Init = TRUE;
 802a064:	4b11      	ldr	r3, [pc, #68]	; (802a0ac <SysTick_Handler+0x74>)
 802a066:	2201      	movs	r2, #1
 802a068:	701a      	strb	r2, [r3, #0]
			Write_IO_init();
		}

		*/

		if (!(gbDipSW & MASK_JIG_TEST) && (gbDipSW == gbOldDipSW))
 802a06a:	4b0f      	ldr	r3, [pc, #60]	; (802a0a8 <SysTick_Handler+0x70>)
 802a06c:	781b      	ldrb	r3, [r3, #0]
 802a06e:	f003 0301 	and.w	r3, r3, #1
 802a072:	2b00      	cmp	r3, #0
 802a074:	d110      	bne.n	802a098 <SysTick_Handler+0x60>
 802a076:	4b0c      	ldr	r3, [pc, #48]	; (802a0a8 <SysTick_Handler+0x70>)
 802a078:	781a      	ldrb	r2, [r3, #0]
 802a07a:	4b0d      	ldr	r3, [pc, #52]	; (802a0b0 <SysTick_Handler+0x78>)
 802a07c:	781b      	ldrb	r3, [r3, #0]
 802a07e:	429a      	cmp	r2, r3
 802a080:	d10a      	bne.n	802a098 <SysTick_Handler+0x60>
		{
			gfMainBarrierRunning = TRUE;
 802a082:	4b0c      	ldr	r3, [pc, #48]	; (802a0b4 <SysTick_Handler+0x7c>)
 802a084:	2201      	movs	r2, #1
 802a086:	701a      	strb	r2, [r3, #0]
			gfSubBarrierRunning = TRUE;
 802a088:	4b0b      	ldr	r3, [pc, #44]	; (802a0b8 <SysTick_Handler+0x80>)
 802a08a:	2201      	movs	r2, #1
 802a08c:	701a      	strb	r2, [r3, #0]
			gbBarrierType = BARRIER_SWING;
 802a08e:	4b0b      	ldr	r3, [pc, #44]	; (802a0bc <SysTick_Handler+0x84>)
 802a090:	2200      	movs	r2, #0
 802a092:	701a      	strb	r2, [r3, #0]
			PassageProcessForSwing();
 802a094:	f7fa ff16 	bl	8024ec4 <PassageProcessForSwing>
		}
		gbOldDipSW = gbDipSW;
 802a098:	4b03      	ldr	r3, [pc, #12]	; (802a0a8 <SysTick_Handler+0x70>)
 802a09a:	781a      	ldrb	r2, [r3, #0]
 802a09c:	4b04      	ldr	r3, [pc, #16]	; (802a0b0 <SysTick_Handler+0x78>)
 802a09e:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 802a0a0:	bf00      	nop
 802a0a2:	bd80      	pop	{r7, pc}
 802a0a4:	24001fe4 	.word	0x24001fe4
 802a0a8:	24001fed 	.word	0x24001fed
 802a0ac:	24001fec 	.word	0x24001fec
 802a0b0:	24001fee 	.word	0x24001fee
 802a0b4:	24000560 	.word	0x24000560
 802a0b8:	24000561 	.word	0x24000561
 802a0bc:	240004ae 	.word	0x240004ae

0802a0c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 802a0c0:	b580      	push	{r7, lr}
 802a0c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802a0c4:	4802      	ldr	r0, [pc, #8]	; (802a0d0 <SPI1_IRQHandler+0x10>)
 802a0c6:	f004 fba1 	bl	802e80c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 802a0ca:	bf00      	nop
 802a0cc:	bd80      	pop	{r7, pc}
 802a0ce:	bf00      	nop
 802a0d0:	24001a8c 	.word	0x24001a8c

0802a0d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 802a0d4:	b580      	push	{r7, lr}
 802a0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 802a0d8:	4802      	ldr	r0, [pc, #8]	; (802a0e4 <TIM7_IRQHandler+0x10>)
 802a0da:	f004 ffbb 	bl	802f054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 802a0de:	bf00      	nop
 802a0e0:	bd80      	pop	{r7, pc}
 802a0e2:	bf00      	nop
 802a0e4:	24001b14 	.word	0x24001b14

0802a0e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802a0e8:	b580      	push	{r7, lr}
 802a0ea:	b086      	sub	sp, #24
 802a0ec:	af00      	add	r7, sp, #0
 802a0ee:	60f8      	str	r0, [r7, #12]
 802a0f0:	60b9      	str	r1, [r7, #8]
 802a0f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802a0f4:	2300      	movs	r3, #0
 802a0f6:	617b      	str	r3, [r7, #20]
 802a0f8:	e00a      	b.n	802a110 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 802a0fa:	f7fc fdb9 	bl	8026c70 <__io_getchar>
 802a0fe:	4601      	mov	r1, r0
 802a100:	68bb      	ldr	r3, [r7, #8]
 802a102:	1c5a      	adds	r2, r3, #1
 802a104:	60ba      	str	r2, [r7, #8]
 802a106:	b2ca      	uxtb	r2, r1
 802a108:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802a10a:	697b      	ldr	r3, [r7, #20]
 802a10c:	3301      	adds	r3, #1
 802a10e:	617b      	str	r3, [r7, #20]
 802a110:	697a      	ldr	r2, [r7, #20]
 802a112:	687b      	ldr	r3, [r7, #4]
 802a114:	429a      	cmp	r2, r3
 802a116:	dbf0      	blt.n	802a0fa <_read+0x12>
  }

  return len;
 802a118:	687b      	ldr	r3, [r7, #4]
}
 802a11a:	4618      	mov	r0, r3
 802a11c:	3718      	adds	r7, #24
 802a11e:	46bd      	mov	sp, r7
 802a120:	bd80      	pop	{r7, pc}

0802a122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802a122:	b580      	push	{r7, lr}
 802a124:	b086      	sub	sp, #24
 802a126:	af00      	add	r7, sp, #0
 802a128:	60f8      	str	r0, [r7, #12]
 802a12a:	60b9      	str	r1, [r7, #8]
 802a12c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802a12e:	2300      	movs	r3, #0
 802a130:	617b      	str	r3, [r7, #20]
 802a132:	e009      	b.n	802a148 <_write+0x26>
  {
    __io_putchar(*ptr++);
 802a134:	68bb      	ldr	r3, [r7, #8]
 802a136:	1c5a      	adds	r2, r3, #1
 802a138:	60ba      	str	r2, [r7, #8]
 802a13a:	781b      	ldrb	r3, [r3, #0]
 802a13c:	4618      	mov	r0, r3
 802a13e:	f7fc fd83 	bl	8026c48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802a142:	697b      	ldr	r3, [r7, #20]
 802a144:	3301      	adds	r3, #1
 802a146:	617b      	str	r3, [r7, #20]
 802a148:	697a      	ldr	r2, [r7, #20]
 802a14a:	687b      	ldr	r3, [r7, #4]
 802a14c:	429a      	cmp	r2, r3
 802a14e:	dbf1      	blt.n	802a134 <_write+0x12>
  }
  return len;
 802a150:	687b      	ldr	r3, [r7, #4]
}
 802a152:	4618      	mov	r0, r3
 802a154:	3718      	adds	r7, #24
 802a156:	46bd      	mov	sp, r7
 802a158:	bd80      	pop	{r7, pc}

0802a15a <_close>:

int _close(int file)
{
 802a15a:	b480      	push	{r7}
 802a15c:	b083      	sub	sp, #12
 802a15e:	af00      	add	r7, sp, #0
 802a160:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 802a162:	f04f 33ff 	mov.w	r3, #4294967295
}
 802a166:	4618      	mov	r0, r3
 802a168:	370c      	adds	r7, #12
 802a16a:	46bd      	mov	sp, r7
 802a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a170:	4770      	bx	lr

0802a172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 802a172:	b480      	push	{r7}
 802a174:	b083      	sub	sp, #12
 802a176:	af00      	add	r7, sp, #0
 802a178:	6078      	str	r0, [r7, #4]
 802a17a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 802a17c:	683b      	ldr	r3, [r7, #0]
 802a17e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a182:	605a      	str	r2, [r3, #4]
  return 0;
 802a184:	2300      	movs	r3, #0
}
 802a186:	4618      	mov	r0, r3
 802a188:	370c      	adds	r7, #12
 802a18a:	46bd      	mov	sp, r7
 802a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a190:	4770      	bx	lr

0802a192 <_isatty>:

int _isatty(int file)
{
 802a192:	b480      	push	{r7}
 802a194:	b083      	sub	sp, #12
 802a196:	af00      	add	r7, sp, #0
 802a198:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802a19a:	2301      	movs	r3, #1
}
 802a19c:	4618      	mov	r0, r3
 802a19e:	370c      	adds	r7, #12
 802a1a0:	46bd      	mov	sp, r7
 802a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1a6:	4770      	bx	lr

0802a1a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802a1a8:	b480      	push	{r7}
 802a1aa:	b085      	sub	sp, #20
 802a1ac:	af00      	add	r7, sp, #0
 802a1ae:	60f8      	str	r0, [r7, #12]
 802a1b0:	60b9      	str	r1, [r7, #8]
 802a1b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 802a1b4:	2300      	movs	r3, #0
}
 802a1b6:	4618      	mov	r0, r3
 802a1b8:	3714      	adds	r7, #20
 802a1ba:	46bd      	mov	sp, r7
 802a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1c0:	4770      	bx	lr
	...

0802a1c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802a1c4:	b580      	push	{r7, lr}
 802a1c6:	b086      	sub	sp, #24
 802a1c8:	af00      	add	r7, sp, #0
 802a1ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802a1cc:	4a14      	ldr	r2, [pc, #80]	; (802a220 <_sbrk+0x5c>)
 802a1ce:	4b15      	ldr	r3, [pc, #84]	; (802a224 <_sbrk+0x60>)
 802a1d0:	1ad3      	subs	r3, r2, r3
 802a1d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802a1d4:	697b      	ldr	r3, [r7, #20]
 802a1d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802a1d8:	4b13      	ldr	r3, [pc, #76]	; (802a228 <_sbrk+0x64>)
 802a1da:	681b      	ldr	r3, [r3, #0]
 802a1dc:	2b00      	cmp	r3, #0
 802a1de:	d102      	bne.n	802a1e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802a1e0:	4b11      	ldr	r3, [pc, #68]	; (802a228 <_sbrk+0x64>)
 802a1e2:	4a12      	ldr	r2, [pc, #72]	; (802a22c <_sbrk+0x68>)
 802a1e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802a1e6:	4b10      	ldr	r3, [pc, #64]	; (802a228 <_sbrk+0x64>)
 802a1e8:	681a      	ldr	r2, [r3, #0]
 802a1ea:	687b      	ldr	r3, [r7, #4]
 802a1ec:	4413      	add	r3, r2
 802a1ee:	693a      	ldr	r2, [r7, #16]
 802a1f0:	429a      	cmp	r2, r3
 802a1f2:	d207      	bcs.n	802a204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 802a1f4:	f006 fc70 	bl	8030ad8 <__errno>
 802a1f8:	4603      	mov	r3, r0
 802a1fa:	220c      	movs	r2, #12
 802a1fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802a1fe:	f04f 33ff 	mov.w	r3, #4294967295
 802a202:	e009      	b.n	802a218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802a204:	4b08      	ldr	r3, [pc, #32]	; (802a228 <_sbrk+0x64>)
 802a206:	681b      	ldr	r3, [r3, #0]
 802a208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802a20a:	4b07      	ldr	r3, [pc, #28]	; (802a228 <_sbrk+0x64>)
 802a20c:	681a      	ldr	r2, [r3, #0]
 802a20e:	687b      	ldr	r3, [r7, #4]
 802a210:	4413      	add	r3, r2
 802a212:	4a05      	ldr	r2, [pc, #20]	; (802a228 <_sbrk+0x64>)
 802a214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802a216:	68fb      	ldr	r3, [r7, #12]
}
 802a218:	4618      	mov	r0, r3
 802a21a:	3718      	adds	r7, #24
 802a21c:	46bd      	mov	sp, r7
 802a21e:	bd80      	pop	{r7, pc}
 802a220:	24080000 	.word	0x24080000
 802a224:	00000800 	.word	0x00000800
 802a228:	24001ff0 	.word	0x24001ff0
 802a22c:	24002028 	.word	0x24002028

0802a230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 802a230:	b480      	push	{r7}
 802a232:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 802a234:	4b39      	ldr	r3, [pc, #228]	; (802a31c <SystemInit+0xec>)
 802a236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802a23a:	4a38      	ldr	r2, [pc, #224]	; (802a31c <SystemInit+0xec>)
 802a23c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802a240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802a244:	4b36      	ldr	r3, [pc, #216]	; (802a320 <SystemInit+0xf0>)
 802a246:	681b      	ldr	r3, [r3, #0]
 802a248:	f003 030f 	and.w	r3, r3, #15
 802a24c:	2b06      	cmp	r3, #6
 802a24e:	d807      	bhi.n	802a260 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802a250:	4b33      	ldr	r3, [pc, #204]	; (802a320 <SystemInit+0xf0>)
 802a252:	681b      	ldr	r3, [r3, #0]
 802a254:	f023 030f 	bic.w	r3, r3, #15
 802a258:	4a31      	ldr	r2, [pc, #196]	; (802a320 <SystemInit+0xf0>)
 802a25a:	f043 0307 	orr.w	r3, r3, #7
 802a25e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 802a260:	4b30      	ldr	r3, [pc, #192]	; (802a324 <SystemInit+0xf4>)
 802a262:	681b      	ldr	r3, [r3, #0]
 802a264:	4a2f      	ldr	r2, [pc, #188]	; (802a324 <SystemInit+0xf4>)
 802a266:	f043 0301 	orr.w	r3, r3, #1
 802a26a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802a26c:	4b2d      	ldr	r3, [pc, #180]	; (802a324 <SystemInit+0xf4>)
 802a26e:	2200      	movs	r2, #0
 802a270:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 802a272:	4b2c      	ldr	r3, [pc, #176]	; (802a324 <SystemInit+0xf4>)
 802a274:	681a      	ldr	r2, [r3, #0]
 802a276:	492b      	ldr	r1, [pc, #172]	; (802a324 <SystemInit+0xf4>)
 802a278:	4b2b      	ldr	r3, [pc, #172]	; (802a328 <SystemInit+0xf8>)
 802a27a:	4013      	ands	r3, r2
 802a27c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802a27e:	4b28      	ldr	r3, [pc, #160]	; (802a320 <SystemInit+0xf0>)
 802a280:	681b      	ldr	r3, [r3, #0]
 802a282:	f003 0308 	and.w	r3, r3, #8
 802a286:	2b00      	cmp	r3, #0
 802a288:	d007      	beq.n	802a29a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802a28a:	4b25      	ldr	r3, [pc, #148]	; (802a320 <SystemInit+0xf0>)
 802a28c:	681b      	ldr	r3, [r3, #0]
 802a28e:	f023 030f 	bic.w	r3, r3, #15
 802a292:	4a23      	ldr	r2, [pc, #140]	; (802a320 <SystemInit+0xf0>)
 802a294:	f043 0307 	orr.w	r3, r3, #7
 802a298:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802a29a:	4b22      	ldr	r3, [pc, #136]	; (802a324 <SystemInit+0xf4>)
 802a29c:	2200      	movs	r2, #0
 802a29e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802a2a0:	4b20      	ldr	r3, [pc, #128]	; (802a324 <SystemInit+0xf4>)
 802a2a2:	2200      	movs	r2, #0
 802a2a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 802a2a6:	4b1f      	ldr	r3, [pc, #124]	; (802a324 <SystemInit+0xf4>)
 802a2a8:	2200      	movs	r2, #0
 802a2aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 802a2ac:	4b1d      	ldr	r3, [pc, #116]	; (802a324 <SystemInit+0xf4>)
 802a2ae:	4a1f      	ldr	r2, [pc, #124]	; (802a32c <SystemInit+0xfc>)
 802a2b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802a2b2:	4b1c      	ldr	r3, [pc, #112]	; (802a324 <SystemInit+0xf4>)
 802a2b4:	4a1e      	ldr	r2, [pc, #120]	; (802a330 <SystemInit+0x100>)
 802a2b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 802a2b8:	4b1a      	ldr	r3, [pc, #104]	; (802a324 <SystemInit+0xf4>)
 802a2ba:	4a1e      	ldr	r2, [pc, #120]	; (802a334 <SystemInit+0x104>)
 802a2bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802a2be:	4b19      	ldr	r3, [pc, #100]	; (802a324 <SystemInit+0xf4>)
 802a2c0:	2200      	movs	r2, #0
 802a2c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 802a2c4:	4b17      	ldr	r3, [pc, #92]	; (802a324 <SystemInit+0xf4>)
 802a2c6:	4a1b      	ldr	r2, [pc, #108]	; (802a334 <SystemInit+0x104>)
 802a2c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 802a2ca:	4b16      	ldr	r3, [pc, #88]	; (802a324 <SystemInit+0xf4>)
 802a2cc:	2200      	movs	r2, #0
 802a2ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802a2d0:	4b14      	ldr	r3, [pc, #80]	; (802a324 <SystemInit+0xf4>)
 802a2d2:	4a18      	ldr	r2, [pc, #96]	; (802a334 <SystemInit+0x104>)
 802a2d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 802a2d6:	4b13      	ldr	r3, [pc, #76]	; (802a324 <SystemInit+0xf4>)
 802a2d8:	2200      	movs	r2, #0
 802a2da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 802a2dc:	4b11      	ldr	r3, [pc, #68]	; (802a324 <SystemInit+0xf4>)
 802a2de:	681b      	ldr	r3, [r3, #0]
 802a2e0:	4a10      	ldr	r2, [pc, #64]	; (802a324 <SystemInit+0xf4>)
 802a2e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a2e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 802a2e8:	4b0e      	ldr	r3, [pc, #56]	; (802a324 <SystemInit+0xf4>)
 802a2ea:	2200      	movs	r2, #0
 802a2ec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802a2ee:	4b12      	ldr	r3, [pc, #72]	; (802a338 <SystemInit+0x108>)
 802a2f0:	681a      	ldr	r2, [r3, #0]
 802a2f2:	4b12      	ldr	r3, [pc, #72]	; (802a33c <SystemInit+0x10c>)
 802a2f4:	4013      	ands	r3, r2
 802a2f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802a2fa:	d202      	bcs.n	802a302 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 802a2fc:	4b10      	ldr	r3, [pc, #64]	; (802a340 <SystemInit+0x110>)
 802a2fe:	2201      	movs	r2, #1
 802a300:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802a302:	4b10      	ldr	r3, [pc, #64]	; (802a344 <SystemInit+0x114>)
 802a304:	f243 02d2 	movw	r2, #12498	; 0x30d2
 802a308:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 802a30a:	4b04      	ldr	r3, [pc, #16]	; (802a31c <SystemInit+0xec>)
 802a30c:	4a0e      	ldr	r2, [pc, #56]	; (802a348 <SystemInit+0x118>)
 802a30e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 802a310:	bf00      	nop
 802a312:	46bd      	mov	sp, r7
 802a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a318:	4770      	bx	lr
 802a31a:	bf00      	nop
 802a31c:	e000ed00 	.word	0xe000ed00
 802a320:	52002000 	.word	0x52002000
 802a324:	58024400 	.word	0x58024400
 802a328:	eaf6ed7f 	.word	0xeaf6ed7f
 802a32c:	02020200 	.word	0x02020200
 802a330:	01ff0000 	.word	0x01ff0000
 802a334:	01010280 	.word	0x01010280
 802a338:	5c001000 	.word	0x5c001000
 802a33c:	ffff0000 	.word	0xffff0000
 802a340:	51008108 	.word	0x51008108
 802a344:	52004000 	.word	0x52004000
 802a348:	08020000 	.word	0x08020000

0802a34c <time>:

static char dtBuf[ASCBUFSIZE];


time_t time(time_t *_timer)
{
 802a34c:	b580      	push	{r7, lr}
 802a34e:	b082      	sub	sp, #8
 802a350:	af00      	add	r7, sp, #0
 802a352:	6078      	str	r0, [r7, #4]
	if(_timer != NULL)
 802a354:	687b      	ldr	r3, [r7, #4]
 802a356:	2b00      	cmp	r3, #0
 802a358:	d006      	beq.n	802a368 <time+0x1c>
		*_timer = bsp_GetTime();
 802a35a:	f7fc fb03 	bl	8026964 <bsp_GetTime>
 802a35e:	4602      	mov	r2, r0
 802a360:	460b      	mov	r3, r1
 802a362:	6879      	ldr	r1, [r7, #4]
 802a364:	e9c1 2300 	strd	r2, r3, [r1]

	return bsp_GetTime();
 802a368:	f7fc fafc 	bl	8026964 <bsp_GetTime>
 802a36c:	4602      	mov	r2, r0
 802a36e:	460b      	mov	r3, r1
}
 802a370:	4610      	mov	r0, r2
 802a372:	4619      	mov	r1, r3
 802a374:	3708      	adds	r7, #8
 802a376:	46bd      	mov	sp, r7
 802a378:	bd80      	pop	{r7, pc}

0802a37a <mclocktime>:
}


// return ms.
dword mclocktime(void)
{
 802a37a:	b580      	push	{r7, lr}
 802a37c:	af00      	add	r7, sp, #0
	return (bsp_GetTimeEx());
 802a37e:	f7fc faff 	bl	8026980 <bsp_GetTimeEx>
 802a382:	4602      	mov	r2, r0
 802a384:	460b      	mov	r3, r1
 802a386:	4613      	mov	r3, r2
}
 802a388:	4618      	mov	r0, r3
 802a38a:	bd80      	pop	{r7, pc}

0802a38c <dformat>:


char *dformat(const struct tm *tp)
{
 802a38c:	b5b0      	push	{r4, r5, r7, lr}
 802a38e:	b088      	sub	sp, #32
 802a390:	af04      	add	r7, sp, #16
 802a392:	6078      	str	r0, [r7, #4]
	char *pdtBuf = dtBuf;
 802a394:	4b17      	ldr	r3, [pc, #92]	; (802a3f4 <dformat+0x68>)
 802a396:	60fb      	str	r3, [r7, #12]

	if (tp == NULL)
 802a398:	687b      	ldr	r3, [r7, #4]
 802a39a:	2b00      	cmp	r3, #0
 802a39c:	d10b      	bne.n	802a3b6 <dformat+0x2a>
		strcpy(pdtBuf, "0000-00-00 00:00:00");
 802a39e:	68fb      	ldr	r3, [r7, #12]
 802a3a0:	4a15      	ldr	r2, [pc, #84]	; (802a3f8 <dformat+0x6c>)
 802a3a2:	461d      	mov	r5, r3
 802a3a4:	4614      	mov	r4, r2
 802a3a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802a3a8:	6028      	str	r0, [r5, #0]
 802a3aa:	6069      	str	r1, [r5, #4]
 802a3ac:	60aa      	str	r2, [r5, #8]
 802a3ae:	60eb      	str	r3, [r5, #12]
 802a3b0:	6820      	ldr	r0, [r4, #0]
 802a3b2:	6128      	str	r0, [r5, #16]
 802a3b4:	e018      	b.n	802a3e8 <dformat+0x5c>
	else
		sprintf(pdtBuf, "%04d-%02d-%02d %02d:%02d:%02d",
				(tp->tm_year + 1900), (tp->tm_mon + 1), tp->tm_mday, tp->tm_hour, tp->tm_min, tp->tm_sec);
 802a3b6:	687b      	ldr	r3, [r7, #4]
 802a3b8:	695b      	ldr	r3, [r3, #20]
		sprintf(pdtBuf, "%04d-%02d-%02d %02d:%02d:%02d",
 802a3ba:	f203 746c 	addw	r4, r3, #1900	; 0x76c
				(tp->tm_year + 1900), (tp->tm_mon + 1), tp->tm_mday, tp->tm_hour, tp->tm_min, tp->tm_sec);
 802a3be:	687b      	ldr	r3, [r7, #4]
 802a3c0:	691b      	ldr	r3, [r3, #16]
		sprintf(pdtBuf, "%04d-%02d-%02d %02d:%02d:%02d",
 802a3c2:	1c5d      	adds	r5, r3, #1
 802a3c4:	687b      	ldr	r3, [r7, #4]
 802a3c6:	68db      	ldr	r3, [r3, #12]
 802a3c8:	687a      	ldr	r2, [r7, #4]
 802a3ca:	6892      	ldr	r2, [r2, #8]
 802a3cc:	6879      	ldr	r1, [r7, #4]
 802a3ce:	6849      	ldr	r1, [r1, #4]
 802a3d0:	6878      	ldr	r0, [r7, #4]
 802a3d2:	6800      	ldr	r0, [r0, #0]
 802a3d4:	9003      	str	r0, [sp, #12]
 802a3d6:	9102      	str	r1, [sp, #8]
 802a3d8:	9201      	str	r2, [sp, #4]
 802a3da:	9300      	str	r3, [sp, #0]
 802a3dc:	462b      	mov	r3, r5
 802a3de:	4622      	mov	r2, r4
 802a3e0:	4906      	ldr	r1, [pc, #24]	; (802a3fc <dformat+0x70>)
 802a3e2:	68f8      	ldr	r0, [r7, #12]
 802a3e4:	f006 fd5c 	bl	8030ea0 <siprintf>
	return pdtBuf;
 802a3e8:	68fb      	ldr	r3, [r7, #12]
}
 802a3ea:	4618      	mov	r0, r3
 802a3ec:	3710      	adds	r7, #16
 802a3ee:	46bd      	mov	sp, r7
 802a3f0:	bdb0      	pop	{r4, r5, r7, pc}
 802a3f2:	bf00      	nop
 802a3f4:	24001ff4 	.word	0x24001ff4
 802a3f8:	08033138 	.word	0x08033138
 802a3fc:	0803314c 	.word	0x0803314c

0802a400 <dtime>:
	return pdtBuf;
}


char *dtime(const time_t *tp)
{
 802a400:	b580      	push	{r7, lr}
 802a402:	b082      	sub	sp, #8
 802a404:	af00      	add	r7, sp, #0
 802a406:	6078      	str	r0, [r7, #4]
	return dformat(*tp == 0 ? NULL : GmTime(tp));
 802a408:	687b      	ldr	r3, [r7, #4]
 802a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a40e:	4313      	orrs	r3, r2
 802a410:	d004      	beq.n	802a41c <dtime+0x1c>
 802a412:	6878      	ldr	r0, [r7, #4]
 802a414:	f7fc f932 	bl	802667c <GmTime>
 802a418:	4603      	mov	r3, r0
 802a41a:	e000      	b.n	802a41e <dtime+0x1e>
 802a41c:	2300      	movs	r3, #0
 802a41e:	4618      	mov	r0, r3
 802a420:	f7ff ffb4 	bl	802a38c <dformat>
 802a424:	4603      	mov	r3, r0
}
 802a426:	4618      	mov	r0, r3
 802a428:	3708      	adds	r7, #8
 802a42a:	46bd      	mov	sp, r7
 802a42c:	bd80      	pop	{r7, pc}
	...

0802a430 <strmtime>:
	return kformat(*tp == 0 ? NULL : GmTime(tp));
}


char *strmtime()
{
 802a430:	b590      	push	{r4, r7, lr}
 802a432:	b085      	sub	sp, #20
 802a434:	af00      	add	r7, sp, #0
	time_t	now;
	char	*s;

	time(&now);
 802a436:	463b      	mov	r3, r7
 802a438:	4618      	mov	r0, r3
 802a43a:	f7ff ff87 	bl	802a34c <time>
	s = dtime(&now);
 802a43e:	463b      	mov	r3, r7
 802a440:	4618      	mov	r0, r3
 802a442:	f7ff ffdd 	bl	802a400 <dtime>
 802a446:	60f8      	str	r0, [r7, #12]
	sprintf(&s[strlen(s)], ".%03u", (unsigned)(mclocktime()%1000));
 802a448:	68f8      	ldr	r0, [r7, #12]
 802a44a:	f7f5 ff49 	bl	80202e0 <strlen>
 802a44e:	4602      	mov	r2, r0
 802a450:	68fb      	ldr	r3, [r7, #12]
 802a452:	189c      	adds	r4, r3, r2
 802a454:	f7ff ff91 	bl	802a37a <mclocktime>
 802a458:	4602      	mov	r2, r0
 802a45a:	4b09      	ldr	r3, [pc, #36]	; (802a480 <strmtime+0x50>)
 802a45c:	fba3 1302 	umull	r1, r3, r3, r2
 802a460:	099b      	lsrs	r3, r3, #6
 802a462:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 802a466:	fb01 f303 	mul.w	r3, r1, r3
 802a46a:	1ad3      	subs	r3, r2, r3
 802a46c:	461a      	mov	r2, r3
 802a46e:	4905      	ldr	r1, [pc, #20]	; (802a484 <strmtime+0x54>)
 802a470:	4620      	mov	r0, r4
 802a472:	f006 fd15 	bl	8030ea0 <siprintf>
	return s;
 802a476:	68fb      	ldr	r3, [r7, #12]
}
 802a478:	4618      	mov	r0, r3
 802a47a:	3714      	adds	r7, #20
 802a47c:	46bd      	mov	sp, r7
 802a47e:	bd90      	pop	{r4, r7, pc}
 802a480:	10624dd3 	.word	0x10624dd3
 802a484:	08033198 	.word	0x08033198

0802a488 <msleep>:
		;
}

// ticktime(1ms unit) delay
void msleep(int t)
{
 802a488:	b580      	push	{r7, lr}
 802a48a:	b084      	sub	sp, #16
 802a48c:	af00      	add	r7, sp, #0
 802a48e:	6078      	str	r0, [r7, #4]
	clock_t ms;

	mstimeout(&ms,0);
 802a490:	f107 030c 	add.w	r3, r7, #12
 802a494:	2100      	movs	r1, #0
 802a496:	4618      	mov	r0, r3
 802a498:	f000 f826 	bl	802a4e8 <mstimeout>
	while (!mstimeout(&ms, t))
 802a49c:	bf00      	nop
 802a49e:	f107 030c 	add.w	r3, r7, #12
 802a4a2:	6879      	ldr	r1, [r7, #4]
 802a4a4:	4618      	mov	r0, r3
 802a4a6:	f000 f81f 	bl	802a4e8 <mstimeout>
 802a4aa:	4603      	mov	r3, r0
 802a4ac:	2b00      	cmp	r3, #0
 802a4ae:	d0f6      	beq.n	802a49e <msleep+0x16>
		;
}
 802a4b0:	bf00      	nop
 802a4b2:	bf00      	nop
 802a4b4:	3710      	adds	r7, #16
 802a4b6:	46bd      	mov	sp, r7
 802a4b8:	bd80      	pop	{r7, pc}

0802a4ba <mstime>:
	return diff;
}


clock_t mstime(clock_t *tp)
{
 802a4ba:	b5b0      	push	{r4, r5, r7, lr}
 802a4bc:	b084      	sub	sp, #16
 802a4be:	af00      	add	r7, sp, #0
 802a4c0:	6078      	str	r0, [r7, #4]
	time_t cur = bsp_GetTickCount();
 802a4c2:	f7fc fa43 	bl	802694c <bsp_GetTickCount>
 802a4c6:	4603      	mov	r3, r0
 802a4c8:	2200      	movs	r2, #0
 802a4ca:	461c      	mov	r4, r3
 802a4cc:	4615      	mov	r5, r2
 802a4ce:	e9c7 4502 	strd	r4, r5, [r7, #8]

	if(tp != NULL)
 802a4d2:	687b      	ldr	r3, [r7, #4]
 802a4d4:	2b00      	cmp	r3, #0
 802a4d6:	d002      	beq.n	802a4de <mstime+0x24>
		*tp = cur;
 802a4d8:	68ba      	ldr	r2, [r7, #8]
 802a4da:	687b      	ldr	r3, [r7, #4]
 802a4dc:	601a      	str	r2, [r3, #0]

	return cur;
 802a4de:	68bb      	ldr	r3, [r7, #8]
}
 802a4e0:	4618      	mov	r0, r3
 802a4e2:	3710      	adds	r7, #16
 802a4e4:	46bd      	mov	sp, r7
 802a4e6:	bdb0      	pop	{r4, r5, r7, pc}

0802a4e8 <mstimeout>:
	return(tout);
}


int mstimeout(clock_t *cp, int msec)
{
 802a4e8:	b580      	push	{r7, lr}
 802a4ea:	b084      	sub	sp, #16
 802a4ec:	af00      	add	r7, sp, #0
 802a4ee:	6078      	str	r0, [r7, #4]
 802a4f0:	6039      	str	r1, [r7, #0]
	clock_t tim;
	DWORD   diff;

	tim = mstime(0);
 802a4f2:	2000      	movs	r0, #0
 802a4f4:	f7ff ffe1 	bl	802a4ba <mstime>
 802a4f8:	60b8      	str	r0, [r7, #8]
	if(msec == 0)
 802a4fa:	683b      	ldr	r3, [r7, #0]
 802a4fc:	2b00      	cmp	r3, #0
 802a4fe:	d104      	bne.n	802a50a <mstimeout+0x22>
	{
		*cp = tim;
 802a500:	687b      	ldr	r3, [r7, #4]
 802a502:	68ba      	ldr	r2, [r7, #8]
 802a504:	601a      	str	r2, [r3, #0]
		return(1);
 802a506:	2301      	movs	r3, #1
 802a508:	e01c      	b.n	802a544 <mstimeout+0x5c>
	}

	if(tim >= *cp)
 802a50a:	687b      	ldr	r3, [r7, #4]
 802a50c:	681b      	ldr	r3, [r3, #0]
 802a50e:	68ba      	ldr	r2, [r7, #8]
 802a510:	429a      	cmp	r2, r3
 802a512:	d305      	bcc.n	802a520 <mstimeout+0x38>
		diff = tim - *cp;
 802a514:	687b      	ldr	r3, [r7, #4]
 802a516:	681b      	ldr	r3, [r3, #0]
 802a518:	68ba      	ldr	r2, [r7, #8]
 802a51a:	1ad3      	subs	r3, r2, r3
 802a51c:	60fb      	str	r3, [r7, #12]
 802a51e:	e007      	b.n	802a530 <mstimeout+0x48>
	else
	{
		diff = (0xffffffffUL - *cp) + 1;
 802a520:	687b      	ldr	r3, [r7, #4]
 802a522:	681b      	ldr	r3, [r3, #0]
 802a524:	425b      	negs	r3, r3
 802a526:	60fb      	str	r3, [r7, #12]
		diff += tim;
 802a528:	68fa      	ldr	r2, [r7, #12]
 802a52a:	68bb      	ldr	r3, [r7, #8]
 802a52c:	4413      	add	r3, r2
 802a52e:	60fb      	str	r3, [r7, #12]
	}

	if(diff >= msec)
 802a530:	683b      	ldr	r3, [r7, #0]
 802a532:	68fa      	ldr	r2, [r7, #12]
 802a534:	429a      	cmp	r2, r3
 802a536:	d304      	bcc.n	802a542 <mstimeout+0x5a>
	{
		*cp  = tim;
 802a538:	687b      	ldr	r3, [r7, #4]
 802a53a:	68ba      	ldr	r2, [r7, #8]
 802a53c:	601a      	str	r2, [r3, #0]
		return(1);
 802a53e:	2301      	movs	r3, #1
 802a540:	e000      	b.n	802a544 <mstimeout+0x5c>
	}

	return (0);
 802a542:	2300      	movs	r3, #0
}
 802a544:	4618      	mov	r0, r3
 802a546:	3710      	adds	r7, #16
 802a548:	46bd      	mov	sp, r7
 802a54a:	bd80      	pop	{r7, pc}

0802a54c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802a54c:	f8df d034 	ldr.w	sp, [pc, #52]	; 802a584 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 802a550:	f7ff fe6e 	bl	802a230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802a554:	480c      	ldr	r0, [pc, #48]	; (802a588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802a556:	490d      	ldr	r1, [pc, #52]	; (802a58c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802a558:	4a0d      	ldr	r2, [pc, #52]	; (802a590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 802a55a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802a55c:	e002      	b.n	802a564 <LoopCopyDataInit>

0802a55e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802a55e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802a560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802a562:	3304      	adds	r3, #4

0802a564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802a564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802a566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802a568:	d3f9      	bcc.n	802a55e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802a56a:	4a0a      	ldr	r2, [pc, #40]	; (802a594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802a56c:	4c0a      	ldr	r4, [pc, #40]	; (802a598 <LoopFillZerobss+0x22>)
  movs r3, #0
 802a56e:	2300      	movs	r3, #0
  b LoopFillZerobss
 802a570:	e001      	b.n	802a576 <LoopFillZerobss>

0802a572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802a572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802a574:	3204      	adds	r2, #4

0802a576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802a576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802a578:	d3fb      	bcc.n	802a572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802a57a:	f006 fab3 	bl	8030ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802a57e:	f7fd fd09 	bl	8027f94 <main>
  bx  lr
 802a582:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 802a584:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802a588:	24000000 	.word	0x24000000
  ldr r1, =_edata
 802a58c:	24000128 	.word	0x24000128
  ldr r2, =_sidata
 802a590:	080334e4 	.word	0x080334e4
  ldr r2, =_sbss
 802a594:	24000128 	.word	0x24000128
  ldr r4, =_ebss
 802a598:	24002028 	.word	0x24002028

0802a59c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802a59c:	e7fe      	b.n	802a59c <ADC3_IRQHandler>
	...

0802a5a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802a5a0:	b580      	push	{r7, lr}
 802a5a2:	b082      	sub	sp, #8
 802a5a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802a5a6:	2003      	movs	r0, #3
 802a5a8:	f000 f98c 	bl	802a8c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802a5ac:	f001 fdec 	bl	802c188 <HAL_RCC_GetSysClockFreq>
 802a5b0:	4602      	mov	r2, r0
 802a5b2:	4b15      	ldr	r3, [pc, #84]	; (802a608 <HAL_Init+0x68>)
 802a5b4:	699b      	ldr	r3, [r3, #24]
 802a5b6:	0a1b      	lsrs	r3, r3, #8
 802a5b8:	f003 030f 	and.w	r3, r3, #15
 802a5bc:	4913      	ldr	r1, [pc, #76]	; (802a60c <HAL_Init+0x6c>)
 802a5be:	5ccb      	ldrb	r3, [r1, r3]
 802a5c0:	f003 031f 	and.w	r3, r3, #31
 802a5c4:	fa22 f303 	lsr.w	r3, r2, r3
 802a5c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802a5ca:	4b0f      	ldr	r3, [pc, #60]	; (802a608 <HAL_Init+0x68>)
 802a5cc:	699b      	ldr	r3, [r3, #24]
 802a5ce:	f003 030f 	and.w	r3, r3, #15
 802a5d2:	4a0e      	ldr	r2, [pc, #56]	; (802a60c <HAL_Init+0x6c>)
 802a5d4:	5cd3      	ldrb	r3, [r2, r3]
 802a5d6:	f003 031f 	and.w	r3, r3, #31
 802a5da:	687a      	ldr	r2, [r7, #4]
 802a5dc:	fa22 f303 	lsr.w	r3, r2, r3
 802a5e0:	4a0b      	ldr	r2, [pc, #44]	; (802a610 <HAL_Init+0x70>)
 802a5e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802a5e4:	4a0b      	ldr	r2, [pc, #44]	; (802a614 <HAL_Init+0x74>)
 802a5e6:	687b      	ldr	r3, [r7, #4]
 802a5e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802a5ea:	200f      	movs	r0, #15
 802a5ec:	f000 f814 	bl	802a618 <HAL_InitTick>
 802a5f0:	4603      	mov	r3, r0
 802a5f2:	2b00      	cmp	r3, #0
 802a5f4:	d001      	beq.n	802a5fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802a5f6:	2301      	movs	r3, #1
 802a5f8:	e002      	b.n	802a600 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802a5fa:	f7ff f947 	bl	802988c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802a5fe:	2300      	movs	r3, #0
}
 802a600:	4618      	mov	r0, r3
 802a602:	3708      	adds	r7, #8
 802a604:	46bd      	mov	sp, r7
 802a606:	bd80      	pop	{r7, pc}
 802a608:	58024400 	.word	0x58024400
 802a60c:	08033300 	.word	0x08033300
 802a610:	240000b8 	.word	0x240000b8
 802a614:	240000b4 	.word	0x240000b4

0802a618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802a618:	b580      	push	{r7, lr}
 802a61a:	b082      	sub	sp, #8
 802a61c:	af00      	add	r7, sp, #0
 802a61e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802a620:	4b15      	ldr	r3, [pc, #84]	; (802a678 <HAL_InitTick+0x60>)
 802a622:	781b      	ldrb	r3, [r3, #0]
 802a624:	2b00      	cmp	r3, #0
 802a626:	d101      	bne.n	802a62c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802a628:	2301      	movs	r3, #1
 802a62a:	e021      	b.n	802a670 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802a62c:	4b13      	ldr	r3, [pc, #76]	; (802a67c <HAL_InitTick+0x64>)
 802a62e:	681a      	ldr	r2, [r3, #0]
 802a630:	4b11      	ldr	r3, [pc, #68]	; (802a678 <HAL_InitTick+0x60>)
 802a632:	781b      	ldrb	r3, [r3, #0]
 802a634:	4619      	mov	r1, r3
 802a636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a63a:	fbb3 f3f1 	udiv	r3, r3, r1
 802a63e:	fbb2 f3f3 	udiv	r3, r2, r3
 802a642:	4618      	mov	r0, r3
 802a644:	f000 f971 	bl	802a92a <HAL_SYSTICK_Config>
 802a648:	4603      	mov	r3, r0
 802a64a:	2b00      	cmp	r3, #0
 802a64c:	d001      	beq.n	802a652 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802a64e:	2301      	movs	r3, #1
 802a650:	e00e      	b.n	802a670 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802a652:	687b      	ldr	r3, [r7, #4]
 802a654:	2b0f      	cmp	r3, #15
 802a656:	d80a      	bhi.n	802a66e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802a658:	2200      	movs	r2, #0
 802a65a:	6879      	ldr	r1, [r7, #4]
 802a65c:	f04f 30ff 	mov.w	r0, #4294967295
 802a660:	f000 f93b 	bl	802a8da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802a664:	4a06      	ldr	r2, [pc, #24]	; (802a680 <HAL_InitTick+0x68>)
 802a666:	687b      	ldr	r3, [r7, #4]
 802a668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802a66a:	2300      	movs	r3, #0
 802a66c:	e000      	b.n	802a670 <HAL_InitTick+0x58>
    return HAL_ERROR;
 802a66e:	2301      	movs	r3, #1
}
 802a670:	4618      	mov	r0, r3
 802a672:	3708      	adds	r7, #8
 802a674:	46bd      	mov	sp, r7
 802a676:	bd80      	pop	{r7, pc}
 802a678:	240000c0 	.word	0x240000c0
 802a67c:	240000b4 	.word	0x240000b4
 802a680:	240000bc 	.word	0x240000bc

0802a684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802a684:	b480      	push	{r7}
 802a686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802a688:	4b06      	ldr	r3, [pc, #24]	; (802a6a4 <HAL_IncTick+0x20>)
 802a68a:	781b      	ldrb	r3, [r3, #0]
 802a68c:	461a      	mov	r2, r3
 802a68e:	4b06      	ldr	r3, [pc, #24]	; (802a6a8 <HAL_IncTick+0x24>)
 802a690:	681b      	ldr	r3, [r3, #0]
 802a692:	4413      	add	r3, r2
 802a694:	4a04      	ldr	r2, [pc, #16]	; (802a6a8 <HAL_IncTick+0x24>)
 802a696:	6013      	str	r3, [r2, #0]
}
 802a698:	bf00      	nop
 802a69a:	46bd      	mov	sp, r7
 802a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6a0:	4770      	bx	lr
 802a6a2:	bf00      	nop
 802a6a4:	240000c0 	.word	0x240000c0
 802a6a8:	24002010 	.word	0x24002010

0802a6ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802a6ac:	b480      	push	{r7}
 802a6ae:	af00      	add	r7, sp, #0
  return uwTick;
 802a6b0:	4b03      	ldr	r3, [pc, #12]	; (802a6c0 <HAL_GetTick+0x14>)
 802a6b2:	681b      	ldr	r3, [r3, #0]
}
 802a6b4:	4618      	mov	r0, r3
 802a6b6:	46bd      	mov	sp, r7
 802a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6bc:	4770      	bx	lr
 802a6be:	bf00      	nop
 802a6c0:	24002010 	.word	0x24002010

0802a6c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802a6c4:	b580      	push	{r7, lr}
 802a6c6:	b084      	sub	sp, #16
 802a6c8:	af00      	add	r7, sp, #0
 802a6ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802a6cc:	f7ff ffee 	bl	802a6ac <HAL_GetTick>
 802a6d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802a6d2:	687b      	ldr	r3, [r7, #4]
 802a6d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802a6d6:	68fb      	ldr	r3, [r7, #12]
 802a6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a6dc:	d005      	beq.n	802a6ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802a6de:	4b0a      	ldr	r3, [pc, #40]	; (802a708 <HAL_Delay+0x44>)
 802a6e0:	781b      	ldrb	r3, [r3, #0]
 802a6e2:	461a      	mov	r2, r3
 802a6e4:	68fb      	ldr	r3, [r7, #12]
 802a6e6:	4413      	add	r3, r2
 802a6e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802a6ea:	bf00      	nop
 802a6ec:	f7ff ffde 	bl	802a6ac <HAL_GetTick>
 802a6f0:	4602      	mov	r2, r0
 802a6f2:	68bb      	ldr	r3, [r7, #8]
 802a6f4:	1ad3      	subs	r3, r2, r3
 802a6f6:	68fa      	ldr	r2, [r7, #12]
 802a6f8:	429a      	cmp	r2, r3
 802a6fa:	d8f7      	bhi.n	802a6ec <HAL_Delay+0x28>
  {
  }
}
 802a6fc:	bf00      	nop
 802a6fe:	bf00      	nop
 802a700:	3710      	adds	r7, #16
 802a702:	46bd      	mov	sp, r7
 802a704:	bd80      	pop	{r7, pc}
 802a706:	bf00      	nop
 802a708:	240000c0 	.word	0x240000c0

0802a70c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802a70c:	b480      	push	{r7}
 802a70e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802a710:	4b03      	ldr	r3, [pc, #12]	; (802a720 <HAL_GetREVID+0x14>)
 802a712:	681b      	ldr	r3, [r3, #0]
 802a714:	0c1b      	lsrs	r3, r3, #16
}
 802a716:	4618      	mov	r0, r3
 802a718:	46bd      	mov	sp, r7
 802a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a71e:	4770      	bx	lr
 802a720:	5c001000 	.word	0x5c001000

0802a724 <__NVIC_SetPriorityGrouping>:
{
 802a724:	b480      	push	{r7}
 802a726:	b085      	sub	sp, #20
 802a728:	af00      	add	r7, sp, #0
 802a72a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802a72c:	687b      	ldr	r3, [r7, #4]
 802a72e:	f003 0307 	and.w	r3, r3, #7
 802a732:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802a734:	4b0b      	ldr	r3, [pc, #44]	; (802a764 <__NVIC_SetPriorityGrouping+0x40>)
 802a736:	68db      	ldr	r3, [r3, #12]
 802a738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802a73a:	68ba      	ldr	r2, [r7, #8]
 802a73c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802a740:	4013      	ands	r3, r2
 802a742:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802a744:	68fb      	ldr	r3, [r7, #12]
 802a746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802a748:	68bb      	ldr	r3, [r7, #8]
 802a74a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802a74c:	4b06      	ldr	r3, [pc, #24]	; (802a768 <__NVIC_SetPriorityGrouping+0x44>)
 802a74e:	4313      	orrs	r3, r2
 802a750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802a752:	4a04      	ldr	r2, [pc, #16]	; (802a764 <__NVIC_SetPriorityGrouping+0x40>)
 802a754:	68bb      	ldr	r3, [r7, #8]
 802a756:	60d3      	str	r3, [r2, #12]
}
 802a758:	bf00      	nop
 802a75a:	3714      	adds	r7, #20
 802a75c:	46bd      	mov	sp, r7
 802a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a762:	4770      	bx	lr
 802a764:	e000ed00 	.word	0xe000ed00
 802a768:	05fa0000 	.word	0x05fa0000

0802a76c <__NVIC_GetPriorityGrouping>:
{
 802a76c:	b480      	push	{r7}
 802a76e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802a770:	4b04      	ldr	r3, [pc, #16]	; (802a784 <__NVIC_GetPriorityGrouping+0x18>)
 802a772:	68db      	ldr	r3, [r3, #12]
 802a774:	0a1b      	lsrs	r3, r3, #8
 802a776:	f003 0307 	and.w	r3, r3, #7
}
 802a77a:	4618      	mov	r0, r3
 802a77c:	46bd      	mov	sp, r7
 802a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a782:	4770      	bx	lr
 802a784:	e000ed00 	.word	0xe000ed00

0802a788 <__NVIC_EnableIRQ>:
{
 802a788:	b480      	push	{r7}
 802a78a:	b083      	sub	sp, #12
 802a78c:	af00      	add	r7, sp, #0
 802a78e:	4603      	mov	r3, r0
 802a790:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802a792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802a796:	2b00      	cmp	r3, #0
 802a798:	db0b      	blt.n	802a7b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802a79a:	88fb      	ldrh	r3, [r7, #6]
 802a79c:	f003 021f 	and.w	r2, r3, #31
 802a7a0:	4907      	ldr	r1, [pc, #28]	; (802a7c0 <__NVIC_EnableIRQ+0x38>)
 802a7a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802a7a6:	095b      	lsrs	r3, r3, #5
 802a7a8:	2001      	movs	r0, #1
 802a7aa:	fa00 f202 	lsl.w	r2, r0, r2
 802a7ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802a7b2:	bf00      	nop
 802a7b4:	370c      	adds	r7, #12
 802a7b6:	46bd      	mov	sp, r7
 802a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7bc:	4770      	bx	lr
 802a7be:	bf00      	nop
 802a7c0:	e000e100 	.word	0xe000e100

0802a7c4 <__NVIC_SetPriority>:
{
 802a7c4:	b480      	push	{r7}
 802a7c6:	b083      	sub	sp, #12
 802a7c8:	af00      	add	r7, sp, #0
 802a7ca:	4603      	mov	r3, r0
 802a7cc:	6039      	str	r1, [r7, #0]
 802a7ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802a7d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802a7d4:	2b00      	cmp	r3, #0
 802a7d6:	db0a      	blt.n	802a7ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802a7d8:	683b      	ldr	r3, [r7, #0]
 802a7da:	b2da      	uxtb	r2, r3
 802a7dc:	490c      	ldr	r1, [pc, #48]	; (802a810 <__NVIC_SetPriority+0x4c>)
 802a7de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802a7e2:	0112      	lsls	r2, r2, #4
 802a7e4:	b2d2      	uxtb	r2, r2
 802a7e6:	440b      	add	r3, r1
 802a7e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 802a7ec:	e00a      	b.n	802a804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802a7ee:	683b      	ldr	r3, [r7, #0]
 802a7f0:	b2da      	uxtb	r2, r3
 802a7f2:	4908      	ldr	r1, [pc, #32]	; (802a814 <__NVIC_SetPriority+0x50>)
 802a7f4:	88fb      	ldrh	r3, [r7, #6]
 802a7f6:	f003 030f 	and.w	r3, r3, #15
 802a7fa:	3b04      	subs	r3, #4
 802a7fc:	0112      	lsls	r2, r2, #4
 802a7fe:	b2d2      	uxtb	r2, r2
 802a800:	440b      	add	r3, r1
 802a802:	761a      	strb	r2, [r3, #24]
}
 802a804:	bf00      	nop
 802a806:	370c      	adds	r7, #12
 802a808:	46bd      	mov	sp, r7
 802a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a80e:	4770      	bx	lr
 802a810:	e000e100 	.word	0xe000e100
 802a814:	e000ed00 	.word	0xe000ed00

0802a818 <NVIC_EncodePriority>:
{
 802a818:	b480      	push	{r7}
 802a81a:	b089      	sub	sp, #36	; 0x24
 802a81c:	af00      	add	r7, sp, #0
 802a81e:	60f8      	str	r0, [r7, #12]
 802a820:	60b9      	str	r1, [r7, #8]
 802a822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802a824:	68fb      	ldr	r3, [r7, #12]
 802a826:	f003 0307 	and.w	r3, r3, #7
 802a82a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802a82c:	69fb      	ldr	r3, [r7, #28]
 802a82e:	f1c3 0307 	rsb	r3, r3, #7
 802a832:	2b04      	cmp	r3, #4
 802a834:	bf28      	it	cs
 802a836:	2304      	movcs	r3, #4
 802a838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802a83a:	69fb      	ldr	r3, [r7, #28]
 802a83c:	3304      	adds	r3, #4
 802a83e:	2b06      	cmp	r3, #6
 802a840:	d902      	bls.n	802a848 <NVIC_EncodePriority+0x30>
 802a842:	69fb      	ldr	r3, [r7, #28]
 802a844:	3b03      	subs	r3, #3
 802a846:	e000      	b.n	802a84a <NVIC_EncodePriority+0x32>
 802a848:	2300      	movs	r3, #0
 802a84a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802a84c:	f04f 32ff 	mov.w	r2, #4294967295
 802a850:	69bb      	ldr	r3, [r7, #24]
 802a852:	fa02 f303 	lsl.w	r3, r2, r3
 802a856:	43da      	mvns	r2, r3
 802a858:	68bb      	ldr	r3, [r7, #8]
 802a85a:	401a      	ands	r2, r3
 802a85c:	697b      	ldr	r3, [r7, #20]
 802a85e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802a860:	f04f 31ff 	mov.w	r1, #4294967295
 802a864:	697b      	ldr	r3, [r7, #20]
 802a866:	fa01 f303 	lsl.w	r3, r1, r3
 802a86a:	43d9      	mvns	r1, r3
 802a86c:	687b      	ldr	r3, [r7, #4]
 802a86e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802a870:	4313      	orrs	r3, r2
}
 802a872:	4618      	mov	r0, r3
 802a874:	3724      	adds	r7, #36	; 0x24
 802a876:	46bd      	mov	sp, r7
 802a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a87c:	4770      	bx	lr
	...

0802a880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802a880:	b580      	push	{r7, lr}
 802a882:	b082      	sub	sp, #8
 802a884:	af00      	add	r7, sp, #0
 802a886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802a888:	687b      	ldr	r3, [r7, #4]
 802a88a:	3b01      	subs	r3, #1
 802a88c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802a890:	d301      	bcc.n	802a896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802a892:	2301      	movs	r3, #1
 802a894:	e00f      	b.n	802a8b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802a896:	4a0a      	ldr	r2, [pc, #40]	; (802a8c0 <SysTick_Config+0x40>)
 802a898:	687b      	ldr	r3, [r7, #4]
 802a89a:	3b01      	subs	r3, #1
 802a89c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802a89e:	210f      	movs	r1, #15
 802a8a0:	f04f 30ff 	mov.w	r0, #4294967295
 802a8a4:	f7ff ff8e 	bl	802a7c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802a8a8:	4b05      	ldr	r3, [pc, #20]	; (802a8c0 <SysTick_Config+0x40>)
 802a8aa:	2200      	movs	r2, #0
 802a8ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802a8ae:	4b04      	ldr	r3, [pc, #16]	; (802a8c0 <SysTick_Config+0x40>)
 802a8b0:	2207      	movs	r2, #7
 802a8b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802a8b4:	2300      	movs	r3, #0
}
 802a8b6:	4618      	mov	r0, r3
 802a8b8:	3708      	adds	r7, #8
 802a8ba:	46bd      	mov	sp, r7
 802a8bc:	bd80      	pop	{r7, pc}
 802a8be:	bf00      	nop
 802a8c0:	e000e010 	.word	0xe000e010

0802a8c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802a8c4:	b580      	push	{r7, lr}
 802a8c6:	b082      	sub	sp, #8
 802a8c8:	af00      	add	r7, sp, #0
 802a8ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802a8cc:	6878      	ldr	r0, [r7, #4]
 802a8ce:	f7ff ff29 	bl	802a724 <__NVIC_SetPriorityGrouping>
}
 802a8d2:	bf00      	nop
 802a8d4:	3708      	adds	r7, #8
 802a8d6:	46bd      	mov	sp, r7
 802a8d8:	bd80      	pop	{r7, pc}

0802a8da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802a8da:	b580      	push	{r7, lr}
 802a8dc:	b086      	sub	sp, #24
 802a8de:	af00      	add	r7, sp, #0
 802a8e0:	4603      	mov	r3, r0
 802a8e2:	60b9      	str	r1, [r7, #8]
 802a8e4:	607a      	str	r2, [r7, #4]
 802a8e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802a8e8:	f7ff ff40 	bl	802a76c <__NVIC_GetPriorityGrouping>
 802a8ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802a8ee:	687a      	ldr	r2, [r7, #4]
 802a8f0:	68b9      	ldr	r1, [r7, #8]
 802a8f2:	6978      	ldr	r0, [r7, #20]
 802a8f4:	f7ff ff90 	bl	802a818 <NVIC_EncodePriority>
 802a8f8:	4602      	mov	r2, r0
 802a8fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802a8fe:	4611      	mov	r1, r2
 802a900:	4618      	mov	r0, r3
 802a902:	f7ff ff5f 	bl	802a7c4 <__NVIC_SetPriority>
}
 802a906:	bf00      	nop
 802a908:	3718      	adds	r7, #24
 802a90a:	46bd      	mov	sp, r7
 802a90c:	bd80      	pop	{r7, pc}

0802a90e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802a90e:	b580      	push	{r7, lr}
 802a910:	b082      	sub	sp, #8
 802a912:	af00      	add	r7, sp, #0
 802a914:	4603      	mov	r3, r0
 802a916:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802a918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802a91c:	4618      	mov	r0, r3
 802a91e:	f7ff ff33 	bl	802a788 <__NVIC_EnableIRQ>
}
 802a922:	bf00      	nop
 802a924:	3708      	adds	r7, #8
 802a926:	46bd      	mov	sp, r7
 802a928:	bd80      	pop	{r7, pc}

0802a92a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802a92a:	b580      	push	{r7, lr}
 802a92c:	b082      	sub	sp, #8
 802a92e:	af00      	add	r7, sp, #0
 802a930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802a932:	6878      	ldr	r0, [r7, #4]
 802a934:	f7ff ffa4 	bl	802a880 <SysTick_Config>
 802a938:	4603      	mov	r3, r0
}
 802a93a:	4618      	mov	r0, r3
 802a93c:	3708      	adds	r7, #8
 802a93e:	46bd      	mov	sp, r7
 802a940:	bd80      	pop	{r7, pc}
	...

0802a944 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 802a944:	b480      	push	{r7}
 802a946:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 802a948:	f3bf 8f5f 	dmb	sy
}
 802a94c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 802a94e:	4b07      	ldr	r3, [pc, #28]	; (802a96c <HAL_MPU_Disable+0x28>)
 802a950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a952:	4a06      	ldr	r2, [pc, #24]	; (802a96c <HAL_MPU_Disable+0x28>)
 802a954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802a958:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 802a95a:	4b05      	ldr	r3, [pc, #20]	; (802a970 <HAL_MPU_Disable+0x2c>)
 802a95c:	2200      	movs	r2, #0
 802a95e:	605a      	str	r2, [r3, #4]
}
 802a960:	bf00      	nop
 802a962:	46bd      	mov	sp, r7
 802a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a968:	4770      	bx	lr
 802a96a:	bf00      	nop
 802a96c:	e000ed00 	.word	0xe000ed00
 802a970:	e000ed90 	.word	0xe000ed90

0802a974 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 802a974:	b480      	push	{r7}
 802a976:	b083      	sub	sp, #12
 802a978:	af00      	add	r7, sp, #0
 802a97a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 802a97c:	4a0b      	ldr	r2, [pc, #44]	; (802a9ac <HAL_MPU_Enable+0x38>)
 802a97e:	687b      	ldr	r3, [r7, #4]
 802a980:	f043 0301 	orr.w	r3, r3, #1
 802a984:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 802a986:	4b0a      	ldr	r3, [pc, #40]	; (802a9b0 <HAL_MPU_Enable+0x3c>)
 802a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a98a:	4a09      	ldr	r2, [pc, #36]	; (802a9b0 <HAL_MPU_Enable+0x3c>)
 802a98c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a990:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 802a992:	f3bf 8f4f 	dsb	sy
}
 802a996:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802a998:	f3bf 8f6f 	isb	sy
}
 802a99c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 802a99e:	bf00      	nop
 802a9a0:	370c      	adds	r7, #12
 802a9a2:	46bd      	mov	sp, r7
 802a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9a8:	4770      	bx	lr
 802a9aa:	bf00      	nop
 802a9ac:	e000ed90 	.word	0xe000ed90
 802a9b0:	e000ed00 	.word	0xe000ed00

0802a9b4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 802a9b4:	b480      	push	{r7}
 802a9b6:	b083      	sub	sp, #12
 802a9b8:	af00      	add	r7, sp, #0
 802a9ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 802a9bc:	687b      	ldr	r3, [r7, #4]
 802a9be:	785a      	ldrb	r2, [r3, #1]
 802a9c0:	4b1d      	ldr	r3, [pc, #116]	; (802aa38 <HAL_MPU_ConfigRegion+0x84>)
 802a9c2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 802a9c4:	687b      	ldr	r3, [r7, #4]
 802a9c6:	781b      	ldrb	r3, [r3, #0]
 802a9c8:	2b00      	cmp	r3, #0
 802a9ca:	d029      	beq.n	802aa20 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 802a9cc:	4a1a      	ldr	r2, [pc, #104]	; (802aa38 <HAL_MPU_ConfigRegion+0x84>)
 802a9ce:	687b      	ldr	r3, [r7, #4]
 802a9d0:	685b      	ldr	r3, [r3, #4]
 802a9d2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 802a9d4:	687b      	ldr	r3, [r7, #4]
 802a9d6:	7b1b      	ldrb	r3, [r3, #12]
 802a9d8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 802a9da:	687b      	ldr	r3, [r7, #4]
 802a9dc:	7adb      	ldrb	r3, [r3, #11]
 802a9de:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 802a9e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 802a9e2:	687b      	ldr	r3, [r7, #4]
 802a9e4:	7a9b      	ldrb	r3, [r3, #10]
 802a9e6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 802a9e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 802a9ea:	687b      	ldr	r3, [r7, #4]
 802a9ec:	7b5b      	ldrb	r3, [r3, #13]
 802a9ee:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 802a9f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 802a9f2:	687b      	ldr	r3, [r7, #4]
 802a9f4:	7b9b      	ldrb	r3, [r3, #14]
 802a9f6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 802a9f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 802a9fa:	687b      	ldr	r3, [r7, #4]
 802a9fc:	7bdb      	ldrb	r3, [r3, #15]
 802a9fe:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 802aa00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 802aa02:	687b      	ldr	r3, [r7, #4]
 802aa04:	7a5b      	ldrb	r3, [r3, #9]
 802aa06:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 802aa08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 802aa0a:	687b      	ldr	r3, [r7, #4]
 802aa0c:	7a1b      	ldrb	r3, [r3, #8]
 802aa0e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 802aa10:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 802aa12:	687a      	ldr	r2, [r7, #4]
 802aa14:	7812      	ldrb	r2, [r2, #0]
 802aa16:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 802aa18:	4a07      	ldr	r2, [pc, #28]	; (802aa38 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 802aa1a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 802aa1c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 802aa1e:	e005      	b.n	802aa2c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 802aa20:	4b05      	ldr	r3, [pc, #20]	; (802aa38 <HAL_MPU_ConfigRegion+0x84>)
 802aa22:	2200      	movs	r2, #0
 802aa24:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 802aa26:	4b04      	ldr	r3, [pc, #16]	; (802aa38 <HAL_MPU_ConfigRegion+0x84>)
 802aa28:	2200      	movs	r2, #0
 802aa2a:	611a      	str	r2, [r3, #16]
}
 802aa2c:	bf00      	nop
 802aa2e:	370c      	adds	r7, #12
 802aa30:	46bd      	mov	sp, r7
 802aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa36:	4770      	bx	lr
 802aa38:	e000ed90 	.word	0xe000ed90

0802aa3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802aa3c:	b580      	push	{r7, lr}
 802aa3e:	b084      	sub	sp, #16
 802aa40:	af00      	add	r7, sp, #0
 802aa42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802aa44:	687b      	ldr	r3, [r7, #4]
 802aa46:	2b00      	cmp	r3, #0
 802aa48:	d101      	bne.n	802aa4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 802aa4a:	2301      	movs	r3, #1
 802aa4c:	e237      	b.n	802aebe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 802aa4e:	687b      	ldr	r3, [r7, #4]
 802aa50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802aa54:	b2db      	uxtb	r3, r3
 802aa56:	2b02      	cmp	r3, #2
 802aa58:	d004      	beq.n	802aa64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802aa5a:	687b      	ldr	r3, [r7, #4]
 802aa5c:	2280      	movs	r2, #128	; 0x80
 802aa5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802aa60:	2301      	movs	r3, #1
 802aa62:	e22c      	b.n	802aebe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802aa64:	687b      	ldr	r3, [r7, #4]
 802aa66:	681b      	ldr	r3, [r3, #0]
 802aa68:	4a5c      	ldr	r2, [pc, #368]	; (802abdc <HAL_DMA_Abort_IT+0x1a0>)
 802aa6a:	4293      	cmp	r3, r2
 802aa6c:	d04a      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aa6e:	687b      	ldr	r3, [r7, #4]
 802aa70:	681b      	ldr	r3, [r3, #0]
 802aa72:	4a5b      	ldr	r2, [pc, #364]	; (802abe0 <HAL_DMA_Abort_IT+0x1a4>)
 802aa74:	4293      	cmp	r3, r2
 802aa76:	d045      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aa78:	687b      	ldr	r3, [r7, #4]
 802aa7a:	681b      	ldr	r3, [r3, #0]
 802aa7c:	4a59      	ldr	r2, [pc, #356]	; (802abe4 <HAL_DMA_Abort_IT+0x1a8>)
 802aa7e:	4293      	cmp	r3, r2
 802aa80:	d040      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aa82:	687b      	ldr	r3, [r7, #4]
 802aa84:	681b      	ldr	r3, [r3, #0]
 802aa86:	4a58      	ldr	r2, [pc, #352]	; (802abe8 <HAL_DMA_Abort_IT+0x1ac>)
 802aa88:	4293      	cmp	r3, r2
 802aa8a:	d03b      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aa8c:	687b      	ldr	r3, [r7, #4]
 802aa8e:	681b      	ldr	r3, [r3, #0]
 802aa90:	4a56      	ldr	r2, [pc, #344]	; (802abec <HAL_DMA_Abort_IT+0x1b0>)
 802aa92:	4293      	cmp	r3, r2
 802aa94:	d036      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aa96:	687b      	ldr	r3, [r7, #4]
 802aa98:	681b      	ldr	r3, [r3, #0]
 802aa9a:	4a55      	ldr	r2, [pc, #340]	; (802abf0 <HAL_DMA_Abort_IT+0x1b4>)
 802aa9c:	4293      	cmp	r3, r2
 802aa9e:	d031      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aaa0:	687b      	ldr	r3, [r7, #4]
 802aaa2:	681b      	ldr	r3, [r3, #0]
 802aaa4:	4a53      	ldr	r2, [pc, #332]	; (802abf4 <HAL_DMA_Abort_IT+0x1b8>)
 802aaa6:	4293      	cmp	r3, r2
 802aaa8:	d02c      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aaaa:	687b      	ldr	r3, [r7, #4]
 802aaac:	681b      	ldr	r3, [r3, #0]
 802aaae:	4a52      	ldr	r2, [pc, #328]	; (802abf8 <HAL_DMA_Abort_IT+0x1bc>)
 802aab0:	4293      	cmp	r3, r2
 802aab2:	d027      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aab4:	687b      	ldr	r3, [r7, #4]
 802aab6:	681b      	ldr	r3, [r3, #0]
 802aab8:	4a50      	ldr	r2, [pc, #320]	; (802abfc <HAL_DMA_Abort_IT+0x1c0>)
 802aaba:	4293      	cmp	r3, r2
 802aabc:	d022      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aabe:	687b      	ldr	r3, [r7, #4]
 802aac0:	681b      	ldr	r3, [r3, #0]
 802aac2:	4a4f      	ldr	r2, [pc, #316]	; (802ac00 <HAL_DMA_Abort_IT+0x1c4>)
 802aac4:	4293      	cmp	r3, r2
 802aac6:	d01d      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aac8:	687b      	ldr	r3, [r7, #4]
 802aaca:	681b      	ldr	r3, [r3, #0]
 802aacc:	4a4d      	ldr	r2, [pc, #308]	; (802ac04 <HAL_DMA_Abort_IT+0x1c8>)
 802aace:	4293      	cmp	r3, r2
 802aad0:	d018      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aad2:	687b      	ldr	r3, [r7, #4]
 802aad4:	681b      	ldr	r3, [r3, #0]
 802aad6:	4a4c      	ldr	r2, [pc, #304]	; (802ac08 <HAL_DMA_Abort_IT+0x1cc>)
 802aad8:	4293      	cmp	r3, r2
 802aada:	d013      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aadc:	687b      	ldr	r3, [r7, #4]
 802aade:	681b      	ldr	r3, [r3, #0]
 802aae0:	4a4a      	ldr	r2, [pc, #296]	; (802ac0c <HAL_DMA_Abort_IT+0x1d0>)
 802aae2:	4293      	cmp	r3, r2
 802aae4:	d00e      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aae6:	687b      	ldr	r3, [r7, #4]
 802aae8:	681b      	ldr	r3, [r3, #0]
 802aaea:	4a49      	ldr	r2, [pc, #292]	; (802ac10 <HAL_DMA_Abort_IT+0x1d4>)
 802aaec:	4293      	cmp	r3, r2
 802aaee:	d009      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aaf0:	687b      	ldr	r3, [r7, #4]
 802aaf2:	681b      	ldr	r3, [r3, #0]
 802aaf4:	4a47      	ldr	r2, [pc, #284]	; (802ac14 <HAL_DMA_Abort_IT+0x1d8>)
 802aaf6:	4293      	cmp	r3, r2
 802aaf8:	d004      	beq.n	802ab04 <HAL_DMA_Abort_IT+0xc8>
 802aafa:	687b      	ldr	r3, [r7, #4]
 802aafc:	681b      	ldr	r3, [r3, #0]
 802aafe:	4a46      	ldr	r2, [pc, #280]	; (802ac18 <HAL_DMA_Abort_IT+0x1dc>)
 802ab00:	4293      	cmp	r3, r2
 802ab02:	d101      	bne.n	802ab08 <HAL_DMA_Abort_IT+0xcc>
 802ab04:	2301      	movs	r3, #1
 802ab06:	e000      	b.n	802ab0a <HAL_DMA_Abort_IT+0xce>
 802ab08:	2300      	movs	r3, #0
 802ab0a:	2b00      	cmp	r3, #0
 802ab0c:	f000 8086 	beq.w	802ac1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802ab10:	687b      	ldr	r3, [r7, #4]
 802ab12:	2204      	movs	r2, #4
 802ab14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802ab18:	687b      	ldr	r3, [r7, #4]
 802ab1a:	681b      	ldr	r3, [r3, #0]
 802ab1c:	4a2f      	ldr	r2, [pc, #188]	; (802abdc <HAL_DMA_Abort_IT+0x1a0>)
 802ab1e:	4293      	cmp	r3, r2
 802ab20:	d04a      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab22:	687b      	ldr	r3, [r7, #4]
 802ab24:	681b      	ldr	r3, [r3, #0]
 802ab26:	4a2e      	ldr	r2, [pc, #184]	; (802abe0 <HAL_DMA_Abort_IT+0x1a4>)
 802ab28:	4293      	cmp	r3, r2
 802ab2a:	d045      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab2c:	687b      	ldr	r3, [r7, #4]
 802ab2e:	681b      	ldr	r3, [r3, #0]
 802ab30:	4a2c      	ldr	r2, [pc, #176]	; (802abe4 <HAL_DMA_Abort_IT+0x1a8>)
 802ab32:	4293      	cmp	r3, r2
 802ab34:	d040      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab36:	687b      	ldr	r3, [r7, #4]
 802ab38:	681b      	ldr	r3, [r3, #0]
 802ab3a:	4a2b      	ldr	r2, [pc, #172]	; (802abe8 <HAL_DMA_Abort_IT+0x1ac>)
 802ab3c:	4293      	cmp	r3, r2
 802ab3e:	d03b      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab40:	687b      	ldr	r3, [r7, #4]
 802ab42:	681b      	ldr	r3, [r3, #0]
 802ab44:	4a29      	ldr	r2, [pc, #164]	; (802abec <HAL_DMA_Abort_IT+0x1b0>)
 802ab46:	4293      	cmp	r3, r2
 802ab48:	d036      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab4a:	687b      	ldr	r3, [r7, #4]
 802ab4c:	681b      	ldr	r3, [r3, #0]
 802ab4e:	4a28      	ldr	r2, [pc, #160]	; (802abf0 <HAL_DMA_Abort_IT+0x1b4>)
 802ab50:	4293      	cmp	r3, r2
 802ab52:	d031      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab54:	687b      	ldr	r3, [r7, #4]
 802ab56:	681b      	ldr	r3, [r3, #0]
 802ab58:	4a26      	ldr	r2, [pc, #152]	; (802abf4 <HAL_DMA_Abort_IT+0x1b8>)
 802ab5a:	4293      	cmp	r3, r2
 802ab5c:	d02c      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab5e:	687b      	ldr	r3, [r7, #4]
 802ab60:	681b      	ldr	r3, [r3, #0]
 802ab62:	4a25      	ldr	r2, [pc, #148]	; (802abf8 <HAL_DMA_Abort_IT+0x1bc>)
 802ab64:	4293      	cmp	r3, r2
 802ab66:	d027      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab68:	687b      	ldr	r3, [r7, #4]
 802ab6a:	681b      	ldr	r3, [r3, #0]
 802ab6c:	4a23      	ldr	r2, [pc, #140]	; (802abfc <HAL_DMA_Abort_IT+0x1c0>)
 802ab6e:	4293      	cmp	r3, r2
 802ab70:	d022      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab72:	687b      	ldr	r3, [r7, #4]
 802ab74:	681b      	ldr	r3, [r3, #0]
 802ab76:	4a22      	ldr	r2, [pc, #136]	; (802ac00 <HAL_DMA_Abort_IT+0x1c4>)
 802ab78:	4293      	cmp	r3, r2
 802ab7a:	d01d      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab7c:	687b      	ldr	r3, [r7, #4]
 802ab7e:	681b      	ldr	r3, [r3, #0]
 802ab80:	4a20      	ldr	r2, [pc, #128]	; (802ac04 <HAL_DMA_Abort_IT+0x1c8>)
 802ab82:	4293      	cmp	r3, r2
 802ab84:	d018      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab86:	687b      	ldr	r3, [r7, #4]
 802ab88:	681b      	ldr	r3, [r3, #0]
 802ab8a:	4a1f      	ldr	r2, [pc, #124]	; (802ac08 <HAL_DMA_Abort_IT+0x1cc>)
 802ab8c:	4293      	cmp	r3, r2
 802ab8e:	d013      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab90:	687b      	ldr	r3, [r7, #4]
 802ab92:	681b      	ldr	r3, [r3, #0]
 802ab94:	4a1d      	ldr	r2, [pc, #116]	; (802ac0c <HAL_DMA_Abort_IT+0x1d0>)
 802ab96:	4293      	cmp	r3, r2
 802ab98:	d00e      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802ab9a:	687b      	ldr	r3, [r7, #4]
 802ab9c:	681b      	ldr	r3, [r3, #0]
 802ab9e:	4a1c      	ldr	r2, [pc, #112]	; (802ac10 <HAL_DMA_Abort_IT+0x1d4>)
 802aba0:	4293      	cmp	r3, r2
 802aba2:	d009      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802aba4:	687b      	ldr	r3, [r7, #4]
 802aba6:	681b      	ldr	r3, [r3, #0]
 802aba8:	4a1a      	ldr	r2, [pc, #104]	; (802ac14 <HAL_DMA_Abort_IT+0x1d8>)
 802abaa:	4293      	cmp	r3, r2
 802abac:	d004      	beq.n	802abb8 <HAL_DMA_Abort_IT+0x17c>
 802abae:	687b      	ldr	r3, [r7, #4]
 802abb0:	681b      	ldr	r3, [r3, #0]
 802abb2:	4a19      	ldr	r2, [pc, #100]	; (802ac18 <HAL_DMA_Abort_IT+0x1dc>)
 802abb4:	4293      	cmp	r3, r2
 802abb6:	d108      	bne.n	802abca <HAL_DMA_Abort_IT+0x18e>
 802abb8:	687b      	ldr	r3, [r7, #4]
 802abba:	681b      	ldr	r3, [r3, #0]
 802abbc:	681a      	ldr	r2, [r3, #0]
 802abbe:	687b      	ldr	r3, [r7, #4]
 802abc0:	681b      	ldr	r3, [r3, #0]
 802abc2:	f022 0201 	bic.w	r2, r2, #1
 802abc6:	601a      	str	r2, [r3, #0]
 802abc8:	e178      	b.n	802aebc <HAL_DMA_Abort_IT+0x480>
 802abca:	687b      	ldr	r3, [r7, #4]
 802abcc:	681b      	ldr	r3, [r3, #0]
 802abce:	681a      	ldr	r2, [r3, #0]
 802abd0:	687b      	ldr	r3, [r7, #4]
 802abd2:	681b      	ldr	r3, [r3, #0]
 802abd4:	f022 0201 	bic.w	r2, r2, #1
 802abd8:	601a      	str	r2, [r3, #0]
 802abda:	e16f      	b.n	802aebc <HAL_DMA_Abort_IT+0x480>
 802abdc:	40020010 	.word	0x40020010
 802abe0:	40020028 	.word	0x40020028
 802abe4:	40020040 	.word	0x40020040
 802abe8:	40020058 	.word	0x40020058
 802abec:	40020070 	.word	0x40020070
 802abf0:	40020088 	.word	0x40020088
 802abf4:	400200a0 	.word	0x400200a0
 802abf8:	400200b8 	.word	0x400200b8
 802abfc:	40020410 	.word	0x40020410
 802ac00:	40020428 	.word	0x40020428
 802ac04:	40020440 	.word	0x40020440
 802ac08:	40020458 	.word	0x40020458
 802ac0c:	40020470 	.word	0x40020470
 802ac10:	40020488 	.word	0x40020488
 802ac14:	400204a0 	.word	0x400204a0
 802ac18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802ac1c:	687b      	ldr	r3, [r7, #4]
 802ac1e:	681b      	ldr	r3, [r3, #0]
 802ac20:	681a      	ldr	r2, [r3, #0]
 802ac22:	687b      	ldr	r3, [r7, #4]
 802ac24:	681b      	ldr	r3, [r3, #0]
 802ac26:	f022 020e 	bic.w	r2, r2, #14
 802ac2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 802ac2c:	687b      	ldr	r3, [r7, #4]
 802ac2e:	681b      	ldr	r3, [r3, #0]
 802ac30:	4a6c      	ldr	r2, [pc, #432]	; (802ade4 <HAL_DMA_Abort_IT+0x3a8>)
 802ac32:	4293      	cmp	r3, r2
 802ac34:	d04a      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802ac36:	687b      	ldr	r3, [r7, #4]
 802ac38:	681b      	ldr	r3, [r3, #0]
 802ac3a:	4a6b      	ldr	r2, [pc, #428]	; (802ade8 <HAL_DMA_Abort_IT+0x3ac>)
 802ac3c:	4293      	cmp	r3, r2
 802ac3e:	d045      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802ac40:	687b      	ldr	r3, [r7, #4]
 802ac42:	681b      	ldr	r3, [r3, #0]
 802ac44:	4a69      	ldr	r2, [pc, #420]	; (802adec <HAL_DMA_Abort_IT+0x3b0>)
 802ac46:	4293      	cmp	r3, r2
 802ac48:	d040      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802ac4a:	687b      	ldr	r3, [r7, #4]
 802ac4c:	681b      	ldr	r3, [r3, #0]
 802ac4e:	4a68      	ldr	r2, [pc, #416]	; (802adf0 <HAL_DMA_Abort_IT+0x3b4>)
 802ac50:	4293      	cmp	r3, r2
 802ac52:	d03b      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802ac54:	687b      	ldr	r3, [r7, #4]
 802ac56:	681b      	ldr	r3, [r3, #0]
 802ac58:	4a66      	ldr	r2, [pc, #408]	; (802adf4 <HAL_DMA_Abort_IT+0x3b8>)
 802ac5a:	4293      	cmp	r3, r2
 802ac5c:	d036      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802ac5e:	687b      	ldr	r3, [r7, #4]
 802ac60:	681b      	ldr	r3, [r3, #0]
 802ac62:	4a65      	ldr	r2, [pc, #404]	; (802adf8 <HAL_DMA_Abort_IT+0x3bc>)
 802ac64:	4293      	cmp	r3, r2
 802ac66:	d031      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802ac68:	687b      	ldr	r3, [r7, #4]
 802ac6a:	681b      	ldr	r3, [r3, #0]
 802ac6c:	4a63      	ldr	r2, [pc, #396]	; (802adfc <HAL_DMA_Abort_IT+0x3c0>)
 802ac6e:	4293      	cmp	r3, r2
 802ac70:	d02c      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802ac72:	687b      	ldr	r3, [r7, #4]
 802ac74:	681b      	ldr	r3, [r3, #0]
 802ac76:	4a62      	ldr	r2, [pc, #392]	; (802ae00 <HAL_DMA_Abort_IT+0x3c4>)
 802ac78:	4293      	cmp	r3, r2
 802ac7a:	d027      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802ac7c:	687b      	ldr	r3, [r7, #4]
 802ac7e:	681b      	ldr	r3, [r3, #0]
 802ac80:	4a60      	ldr	r2, [pc, #384]	; (802ae04 <HAL_DMA_Abort_IT+0x3c8>)
 802ac82:	4293      	cmp	r3, r2
 802ac84:	d022      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802ac86:	687b      	ldr	r3, [r7, #4]
 802ac88:	681b      	ldr	r3, [r3, #0]
 802ac8a:	4a5f      	ldr	r2, [pc, #380]	; (802ae08 <HAL_DMA_Abort_IT+0x3cc>)
 802ac8c:	4293      	cmp	r3, r2
 802ac8e:	d01d      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802ac90:	687b      	ldr	r3, [r7, #4]
 802ac92:	681b      	ldr	r3, [r3, #0]
 802ac94:	4a5d      	ldr	r2, [pc, #372]	; (802ae0c <HAL_DMA_Abort_IT+0x3d0>)
 802ac96:	4293      	cmp	r3, r2
 802ac98:	d018      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802ac9a:	687b      	ldr	r3, [r7, #4]
 802ac9c:	681b      	ldr	r3, [r3, #0]
 802ac9e:	4a5c      	ldr	r2, [pc, #368]	; (802ae10 <HAL_DMA_Abort_IT+0x3d4>)
 802aca0:	4293      	cmp	r3, r2
 802aca2:	d013      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802aca4:	687b      	ldr	r3, [r7, #4]
 802aca6:	681b      	ldr	r3, [r3, #0]
 802aca8:	4a5a      	ldr	r2, [pc, #360]	; (802ae14 <HAL_DMA_Abort_IT+0x3d8>)
 802acaa:	4293      	cmp	r3, r2
 802acac:	d00e      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802acae:	687b      	ldr	r3, [r7, #4]
 802acb0:	681b      	ldr	r3, [r3, #0]
 802acb2:	4a59      	ldr	r2, [pc, #356]	; (802ae18 <HAL_DMA_Abort_IT+0x3dc>)
 802acb4:	4293      	cmp	r3, r2
 802acb6:	d009      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802acb8:	687b      	ldr	r3, [r7, #4]
 802acba:	681b      	ldr	r3, [r3, #0]
 802acbc:	4a57      	ldr	r2, [pc, #348]	; (802ae1c <HAL_DMA_Abort_IT+0x3e0>)
 802acbe:	4293      	cmp	r3, r2
 802acc0:	d004      	beq.n	802accc <HAL_DMA_Abort_IT+0x290>
 802acc2:	687b      	ldr	r3, [r7, #4]
 802acc4:	681b      	ldr	r3, [r3, #0]
 802acc6:	4a56      	ldr	r2, [pc, #344]	; (802ae20 <HAL_DMA_Abort_IT+0x3e4>)
 802acc8:	4293      	cmp	r3, r2
 802acca:	d108      	bne.n	802acde <HAL_DMA_Abort_IT+0x2a2>
 802accc:	687b      	ldr	r3, [r7, #4]
 802acce:	681b      	ldr	r3, [r3, #0]
 802acd0:	681a      	ldr	r2, [r3, #0]
 802acd2:	687b      	ldr	r3, [r7, #4]
 802acd4:	681b      	ldr	r3, [r3, #0]
 802acd6:	f022 0201 	bic.w	r2, r2, #1
 802acda:	601a      	str	r2, [r3, #0]
 802acdc:	e007      	b.n	802acee <HAL_DMA_Abort_IT+0x2b2>
 802acde:	687b      	ldr	r3, [r7, #4]
 802ace0:	681b      	ldr	r3, [r3, #0]
 802ace2:	681a      	ldr	r2, [r3, #0]
 802ace4:	687b      	ldr	r3, [r7, #4]
 802ace6:	681b      	ldr	r3, [r3, #0]
 802ace8:	f022 0201 	bic.w	r2, r2, #1
 802acec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802acee:	687b      	ldr	r3, [r7, #4]
 802acf0:	681b      	ldr	r3, [r3, #0]
 802acf2:	4a3c      	ldr	r2, [pc, #240]	; (802ade4 <HAL_DMA_Abort_IT+0x3a8>)
 802acf4:	4293      	cmp	r3, r2
 802acf6:	d072      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802acf8:	687b      	ldr	r3, [r7, #4]
 802acfa:	681b      	ldr	r3, [r3, #0]
 802acfc:	4a3a      	ldr	r2, [pc, #232]	; (802ade8 <HAL_DMA_Abort_IT+0x3ac>)
 802acfe:	4293      	cmp	r3, r2
 802ad00:	d06d      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad02:	687b      	ldr	r3, [r7, #4]
 802ad04:	681b      	ldr	r3, [r3, #0]
 802ad06:	4a39      	ldr	r2, [pc, #228]	; (802adec <HAL_DMA_Abort_IT+0x3b0>)
 802ad08:	4293      	cmp	r3, r2
 802ad0a:	d068      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad0c:	687b      	ldr	r3, [r7, #4]
 802ad0e:	681b      	ldr	r3, [r3, #0]
 802ad10:	4a37      	ldr	r2, [pc, #220]	; (802adf0 <HAL_DMA_Abort_IT+0x3b4>)
 802ad12:	4293      	cmp	r3, r2
 802ad14:	d063      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad16:	687b      	ldr	r3, [r7, #4]
 802ad18:	681b      	ldr	r3, [r3, #0]
 802ad1a:	4a36      	ldr	r2, [pc, #216]	; (802adf4 <HAL_DMA_Abort_IT+0x3b8>)
 802ad1c:	4293      	cmp	r3, r2
 802ad1e:	d05e      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad20:	687b      	ldr	r3, [r7, #4]
 802ad22:	681b      	ldr	r3, [r3, #0]
 802ad24:	4a34      	ldr	r2, [pc, #208]	; (802adf8 <HAL_DMA_Abort_IT+0x3bc>)
 802ad26:	4293      	cmp	r3, r2
 802ad28:	d059      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad2a:	687b      	ldr	r3, [r7, #4]
 802ad2c:	681b      	ldr	r3, [r3, #0]
 802ad2e:	4a33      	ldr	r2, [pc, #204]	; (802adfc <HAL_DMA_Abort_IT+0x3c0>)
 802ad30:	4293      	cmp	r3, r2
 802ad32:	d054      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad34:	687b      	ldr	r3, [r7, #4]
 802ad36:	681b      	ldr	r3, [r3, #0]
 802ad38:	4a31      	ldr	r2, [pc, #196]	; (802ae00 <HAL_DMA_Abort_IT+0x3c4>)
 802ad3a:	4293      	cmp	r3, r2
 802ad3c:	d04f      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad3e:	687b      	ldr	r3, [r7, #4]
 802ad40:	681b      	ldr	r3, [r3, #0]
 802ad42:	4a30      	ldr	r2, [pc, #192]	; (802ae04 <HAL_DMA_Abort_IT+0x3c8>)
 802ad44:	4293      	cmp	r3, r2
 802ad46:	d04a      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad48:	687b      	ldr	r3, [r7, #4]
 802ad4a:	681b      	ldr	r3, [r3, #0]
 802ad4c:	4a2e      	ldr	r2, [pc, #184]	; (802ae08 <HAL_DMA_Abort_IT+0x3cc>)
 802ad4e:	4293      	cmp	r3, r2
 802ad50:	d045      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad52:	687b      	ldr	r3, [r7, #4]
 802ad54:	681b      	ldr	r3, [r3, #0]
 802ad56:	4a2d      	ldr	r2, [pc, #180]	; (802ae0c <HAL_DMA_Abort_IT+0x3d0>)
 802ad58:	4293      	cmp	r3, r2
 802ad5a:	d040      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad5c:	687b      	ldr	r3, [r7, #4]
 802ad5e:	681b      	ldr	r3, [r3, #0]
 802ad60:	4a2b      	ldr	r2, [pc, #172]	; (802ae10 <HAL_DMA_Abort_IT+0x3d4>)
 802ad62:	4293      	cmp	r3, r2
 802ad64:	d03b      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad66:	687b      	ldr	r3, [r7, #4]
 802ad68:	681b      	ldr	r3, [r3, #0]
 802ad6a:	4a2a      	ldr	r2, [pc, #168]	; (802ae14 <HAL_DMA_Abort_IT+0x3d8>)
 802ad6c:	4293      	cmp	r3, r2
 802ad6e:	d036      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad70:	687b      	ldr	r3, [r7, #4]
 802ad72:	681b      	ldr	r3, [r3, #0]
 802ad74:	4a28      	ldr	r2, [pc, #160]	; (802ae18 <HAL_DMA_Abort_IT+0x3dc>)
 802ad76:	4293      	cmp	r3, r2
 802ad78:	d031      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad7a:	687b      	ldr	r3, [r7, #4]
 802ad7c:	681b      	ldr	r3, [r3, #0]
 802ad7e:	4a27      	ldr	r2, [pc, #156]	; (802ae1c <HAL_DMA_Abort_IT+0x3e0>)
 802ad80:	4293      	cmp	r3, r2
 802ad82:	d02c      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad84:	687b      	ldr	r3, [r7, #4]
 802ad86:	681b      	ldr	r3, [r3, #0]
 802ad88:	4a25      	ldr	r2, [pc, #148]	; (802ae20 <HAL_DMA_Abort_IT+0x3e4>)
 802ad8a:	4293      	cmp	r3, r2
 802ad8c:	d027      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad8e:	687b      	ldr	r3, [r7, #4]
 802ad90:	681b      	ldr	r3, [r3, #0]
 802ad92:	4a24      	ldr	r2, [pc, #144]	; (802ae24 <HAL_DMA_Abort_IT+0x3e8>)
 802ad94:	4293      	cmp	r3, r2
 802ad96:	d022      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ad98:	687b      	ldr	r3, [r7, #4]
 802ad9a:	681b      	ldr	r3, [r3, #0]
 802ad9c:	4a22      	ldr	r2, [pc, #136]	; (802ae28 <HAL_DMA_Abort_IT+0x3ec>)
 802ad9e:	4293      	cmp	r3, r2
 802ada0:	d01d      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802ada2:	687b      	ldr	r3, [r7, #4]
 802ada4:	681b      	ldr	r3, [r3, #0]
 802ada6:	4a21      	ldr	r2, [pc, #132]	; (802ae2c <HAL_DMA_Abort_IT+0x3f0>)
 802ada8:	4293      	cmp	r3, r2
 802adaa:	d018      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802adac:	687b      	ldr	r3, [r7, #4]
 802adae:	681b      	ldr	r3, [r3, #0]
 802adb0:	4a1f      	ldr	r2, [pc, #124]	; (802ae30 <HAL_DMA_Abort_IT+0x3f4>)
 802adb2:	4293      	cmp	r3, r2
 802adb4:	d013      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802adb6:	687b      	ldr	r3, [r7, #4]
 802adb8:	681b      	ldr	r3, [r3, #0]
 802adba:	4a1e      	ldr	r2, [pc, #120]	; (802ae34 <HAL_DMA_Abort_IT+0x3f8>)
 802adbc:	4293      	cmp	r3, r2
 802adbe:	d00e      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802adc0:	687b      	ldr	r3, [r7, #4]
 802adc2:	681b      	ldr	r3, [r3, #0]
 802adc4:	4a1c      	ldr	r2, [pc, #112]	; (802ae38 <HAL_DMA_Abort_IT+0x3fc>)
 802adc6:	4293      	cmp	r3, r2
 802adc8:	d009      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802adca:	687b      	ldr	r3, [r7, #4]
 802adcc:	681b      	ldr	r3, [r3, #0]
 802adce:	4a1b      	ldr	r2, [pc, #108]	; (802ae3c <HAL_DMA_Abort_IT+0x400>)
 802add0:	4293      	cmp	r3, r2
 802add2:	d004      	beq.n	802adde <HAL_DMA_Abort_IT+0x3a2>
 802add4:	687b      	ldr	r3, [r7, #4]
 802add6:	681b      	ldr	r3, [r3, #0]
 802add8:	4a19      	ldr	r2, [pc, #100]	; (802ae40 <HAL_DMA_Abort_IT+0x404>)
 802adda:	4293      	cmp	r3, r2
 802addc:	d132      	bne.n	802ae44 <HAL_DMA_Abort_IT+0x408>
 802adde:	2301      	movs	r3, #1
 802ade0:	e031      	b.n	802ae46 <HAL_DMA_Abort_IT+0x40a>
 802ade2:	bf00      	nop
 802ade4:	40020010 	.word	0x40020010
 802ade8:	40020028 	.word	0x40020028
 802adec:	40020040 	.word	0x40020040
 802adf0:	40020058 	.word	0x40020058
 802adf4:	40020070 	.word	0x40020070
 802adf8:	40020088 	.word	0x40020088
 802adfc:	400200a0 	.word	0x400200a0
 802ae00:	400200b8 	.word	0x400200b8
 802ae04:	40020410 	.word	0x40020410
 802ae08:	40020428 	.word	0x40020428
 802ae0c:	40020440 	.word	0x40020440
 802ae10:	40020458 	.word	0x40020458
 802ae14:	40020470 	.word	0x40020470
 802ae18:	40020488 	.word	0x40020488
 802ae1c:	400204a0 	.word	0x400204a0
 802ae20:	400204b8 	.word	0x400204b8
 802ae24:	58025408 	.word	0x58025408
 802ae28:	5802541c 	.word	0x5802541c
 802ae2c:	58025430 	.word	0x58025430
 802ae30:	58025444 	.word	0x58025444
 802ae34:	58025458 	.word	0x58025458
 802ae38:	5802546c 	.word	0x5802546c
 802ae3c:	58025480 	.word	0x58025480
 802ae40:	58025494 	.word	0x58025494
 802ae44:	2300      	movs	r3, #0
 802ae46:	2b00      	cmp	r3, #0
 802ae48:	d028      	beq.n	802ae9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802ae4a:	687b      	ldr	r3, [r7, #4]
 802ae4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802ae4e:	681a      	ldr	r2, [r3, #0]
 802ae50:	687b      	ldr	r3, [r7, #4]
 802ae52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802ae54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802ae58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802ae5a:	687b      	ldr	r3, [r7, #4]
 802ae5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802ae5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802ae60:	687b      	ldr	r3, [r7, #4]
 802ae62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ae64:	f003 031f 	and.w	r3, r3, #31
 802ae68:	2201      	movs	r2, #1
 802ae6a:	409a      	lsls	r2, r3
 802ae6c:	68fb      	ldr	r3, [r7, #12]
 802ae6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802ae70:	687b      	ldr	r3, [r7, #4]
 802ae72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802ae74:	687a      	ldr	r2, [r7, #4]
 802ae76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802ae78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 802ae7a:	687b      	ldr	r3, [r7, #4]
 802ae7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ae7e:	2b00      	cmp	r3, #0
 802ae80:	d00c      	beq.n	802ae9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802ae82:	687b      	ldr	r3, [r7, #4]
 802ae84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ae86:	681a      	ldr	r2, [r3, #0]
 802ae88:	687b      	ldr	r3, [r7, #4]
 802ae8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ae8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802ae90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802ae92:	687b      	ldr	r3, [r7, #4]
 802ae94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802ae96:	687a      	ldr	r2, [r7, #4]
 802ae98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802ae9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802ae9c:	687b      	ldr	r3, [r7, #4]
 802ae9e:	2201      	movs	r2, #1
 802aea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802aea4:	687b      	ldr	r3, [r7, #4]
 802aea6:	2200      	movs	r2, #0
 802aea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 802aeac:	687b      	ldr	r3, [r7, #4]
 802aeae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802aeb0:	2b00      	cmp	r3, #0
 802aeb2:	d003      	beq.n	802aebc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 802aeb4:	687b      	ldr	r3, [r7, #4]
 802aeb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802aeb8:	6878      	ldr	r0, [r7, #4]
 802aeba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 802aebc:	2300      	movs	r3, #0
}
 802aebe:	4618      	mov	r0, r3
 802aec0:	3710      	adds	r7, #16
 802aec2:	46bd      	mov	sp, r7
 802aec4:	bd80      	pop	{r7, pc}
 802aec6:	bf00      	nop

0802aec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802aec8:	b480      	push	{r7}
 802aeca:	b089      	sub	sp, #36	; 0x24
 802aecc:	af00      	add	r7, sp, #0
 802aece:	6078      	str	r0, [r7, #4]
 802aed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 802aed2:	2300      	movs	r3, #0
 802aed4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 802aed6:	4b89      	ldr	r3, [pc, #548]	; (802b0fc <HAL_GPIO_Init+0x234>)
 802aed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802aeda:	e194      	b.n	802b206 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 802aedc:	683b      	ldr	r3, [r7, #0]
 802aede:	681a      	ldr	r2, [r3, #0]
 802aee0:	2101      	movs	r1, #1
 802aee2:	69fb      	ldr	r3, [r7, #28]
 802aee4:	fa01 f303 	lsl.w	r3, r1, r3
 802aee8:	4013      	ands	r3, r2
 802aeea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 802aeec:	693b      	ldr	r3, [r7, #16]
 802aeee:	2b00      	cmp	r3, #0
 802aef0:	f000 8186 	beq.w	802b200 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 802aef4:	683b      	ldr	r3, [r7, #0]
 802aef6:	685b      	ldr	r3, [r3, #4]
 802aef8:	f003 0303 	and.w	r3, r3, #3
 802aefc:	2b01      	cmp	r3, #1
 802aefe:	d005      	beq.n	802af0c <HAL_GPIO_Init+0x44>
 802af00:	683b      	ldr	r3, [r7, #0]
 802af02:	685b      	ldr	r3, [r3, #4]
 802af04:	f003 0303 	and.w	r3, r3, #3
 802af08:	2b02      	cmp	r3, #2
 802af0a:	d130      	bne.n	802af6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 802af0c:	687b      	ldr	r3, [r7, #4]
 802af0e:	689b      	ldr	r3, [r3, #8]
 802af10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802af12:	69fb      	ldr	r3, [r7, #28]
 802af14:	005b      	lsls	r3, r3, #1
 802af16:	2203      	movs	r2, #3
 802af18:	fa02 f303 	lsl.w	r3, r2, r3
 802af1c:	43db      	mvns	r3, r3
 802af1e:	69ba      	ldr	r2, [r7, #24]
 802af20:	4013      	ands	r3, r2
 802af22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802af24:	683b      	ldr	r3, [r7, #0]
 802af26:	68da      	ldr	r2, [r3, #12]
 802af28:	69fb      	ldr	r3, [r7, #28]
 802af2a:	005b      	lsls	r3, r3, #1
 802af2c:	fa02 f303 	lsl.w	r3, r2, r3
 802af30:	69ba      	ldr	r2, [r7, #24]
 802af32:	4313      	orrs	r3, r2
 802af34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802af36:	687b      	ldr	r3, [r7, #4]
 802af38:	69ba      	ldr	r2, [r7, #24]
 802af3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802af3c:	687b      	ldr	r3, [r7, #4]
 802af3e:	685b      	ldr	r3, [r3, #4]
 802af40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 802af42:	2201      	movs	r2, #1
 802af44:	69fb      	ldr	r3, [r7, #28]
 802af46:	fa02 f303 	lsl.w	r3, r2, r3
 802af4a:	43db      	mvns	r3, r3
 802af4c:	69ba      	ldr	r2, [r7, #24]
 802af4e:	4013      	ands	r3, r2
 802af50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802af52:	683b      	ldr	r3, [r7, #0]
 802af54:	685b      	ldr	r3, [r3, #4]
 802af56:	091b      	lsrs	r3, r3, #4
 802af58:	f003 0201 	and.w	r2, r3, #1
 802af5c:	69fb      	ldr	r3, [r7, #28]
 802af5e:	fa02 f303 	lsl.w	r3, r2, r3
 802af62:	69ba      	ldr	r2, [r7, #24]
 802af64:	4313      	orrs	r3, r2
 802af66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802af68:	687b      	ldr	r3, [r7, #4]
 802af6a:	69ba      	ldr	r2, [r7, #24]
 802af6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802af6e:	683b      	ldr	r3, [r7, #0]
 802af70:	685b      	ldr	r3, [r3, #4]
 802af72:	f003 0303 	and.w	r3, r3, #3
 802af76:	2b03      	cmp	r3, #3
 802af78:	d017      	beq.n	802afaa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802af7a:	687b      	ldr	r3, [r7, #4]
 802af7c:	68db      	ldr	r3, [r3, #12]
 802af7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802af80:	69fb      	ldr	r3, [r7, #28]
 802af82:	005b      	lsls	r3, r3, #1
 802af84:	2203      	movs	r2, #3
 802af86:	fa02 f303 	lsl.w	r3, r2, r3
 802af8a:	43db      	mvns	r3, r3
 802af8c:	69ba      	ldr	r2, [r7, #24]
 802af8e:	4013      	ands	r3, r2
 802af90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802af92:	683b      	ldr	r3, [r7, #0]
 802af94:	689a      	ldr	r2, [r3, #8]
 802af96:	69fb      	ldr	r3, [r7, #28]
 802af98:	005b      	lsls	r3, r3, #1
 802af9a:	fa02 f303 	lsl.w	r3, r2, r3
 802af9e:	69ba      	ldr	r2, [r7, #24]
 802afa0:	4313      	orrs	r3, r2
 802afa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802afa4:	687b      	ldr	r3, [r7, #4]
 802afa6:	69ba      	ldr	r2, [r7, #24]
 802afa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802afaa:	683b      	ldr	r3, [r7, #0]
 802afac:	685b      	ldr	r3, [r3, #4]
 802afae:	f003 0303 	and.w	r3, r3, #3
 802afb2:	2b02      	cmp	r3, #2
 802afb4:	d123      	bne.n	802affe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802afb6:	69fb      	ldr	r3, [r7, #28]
 802afb8:	08da      	lsrs	r2, r3, #3
 802afba:	687b      	ldr	r3, [r7, #4]
 802afbc:	3208      	adds	r2, #8
 802afbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802afc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 802afc4:	69fb      	ldr	r3, [r7, #28]
 802afc6:	f003 0307 	and.w	r3, r3, #7
 802afca:	009b      	lsls	r3, r3, #2
 802afcc:	220f      	movs	r2, #15
 802afce:	fa02 f303 	lsl.w	r3, r2, r3
 802afd2:	43db      	mvns	r3, r3
 802afd4:	69ba      	ldr	r2, [r7, #24]
 802afd6:	4013      	ands	r3, r2
 802afd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 802afda:	683b      	ldr	r3, [r7, #0]
 802afdc:	691a      	ldr	r2, [r3, #16]
 802afde:	69fb      	ldr	r3, [r7, #28]
 802afe0:	f003 0307 	and.w	r3, r3, #7
 802afe4:	009b      	lsls	r3, r3, #2
 802afe6:	fa02 f303 	lsl.w	r3, r2, r3
 802afea:	69ba      	ldr	r2, [r7, #24]
 802afec:	4313      	orrs	r3, r2
 802afee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802aff0:	69fb      	ldr	r3, [r7, #28]
 802aff2:	08da      	lsrs	r2, r3, #3
 802aff4:	687b      	ldr	r3, [r7, #4]
 802aff6:	3208      	adds	r2, #8
 802aff8:	69b9      	ldr	r1, [r7, #24]
 802affa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802affe:	687b      	ldr	r3, [r7, #4]
 802b000:	681b      	ldr	r3, [r3, #0]
 802b002:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 802b004:	69fb      	ldr	r3, [r7, #28]
 802b006:	005b      	lsls	r3, r3, #1
 802b008:	2203      	movs	r2, #3
 802b00a:	fa02 f303 	lsl.w	r3, r2, r3
 802b00e:	43db      	mvns	r3, r3
 802b010:	69ba      	ldr	r2, [r7, #24]
 802b012:	4013      	ands	r3, r2
 802b014:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802b016:	683b      	ldr	r3, [r7, #0]
 802b018:	685b      	ldr	r3, [r3, #4]
 802b01a:	f003 0203 	and.w	r2, r3, #3
 802b01e:	69fb      	ldr	r3, [r7, #28]
 802b020:	005b      	lsls	r3, r3, #1
 802b022:	fa02 f303 	lsl.w	r3, r2, r3
 802b026:	69ba      	ldr	r2, [r7, #24]
 802b028:	4313      	orrs	r3, r2
 802b02a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802b02c:	687b      	ldr	r3, [r7, #4]
 802b02e:	69ba      	ldr	r2, [r7, #24]
 802b030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802b032:	683b      	ldr	r3, [r7, #0]
 802b034:	685b      	ldr	r3, [r3, #4]
 802b036:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802b03a:	2b00      	cmp	r3, #0
 802b03c:	f000 80e0 	beq.w	802b200 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802b040:	4b2f      	ldr	r3, [pc, #188]	; (802b100 <HAL_GPIO_Init+0x238>)
 802b042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802b046:	4a2e      	ldr	r2, [pc, #184]	; (802b100 <HAL_GPIO_Init+0x238>)
 802b048:	f043 0302 	orr.w	r3, r3, #2
 802b04c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802b050:	4b2b      	ldr	r3, [pc, #172]	; (802b100 <HAL_GPIO_Init+0x238>)
 802b052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802b056:	f003 0302 	and.w	r3, r3, #2
 802b05a:	60fb      	str	r3, [r7, #12]
 802b05c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802b05e:	4a29      	ldr	r2, [pc, #164]	; (802b104 <HAL_GPIO_Init+0x23c>)
 802b060:	69fb      	ldr	r3, [r7, #28]
 802b062:	089b      	lsrs	r3, r3, #2
 802b064:	3302      	adds	r3, #2
 802b066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802b06a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 802b06c:	69fb      	ldr	r3, [r7, #28]
 802b06e:	f003 0303 	and.w	r3, r3, #3
 802b072:	009b      	lsls	r3, r3, #2
 802b074:	220f      	movs	r2, #15
 802b076:	fa02 f303 	lsl.w	r3, r2, r3
 802b07a:	43db      	mvns	r3, r3
 802b07c:	69ba      	ldr	r2, [r7, #24]
 802b07e:	4013      	ands	r3, r2
 802b080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 802b082:	687b      	ldr	r3, [r7, #4]
 802b084:	4a20      	ldr	r2, [pc, #128]	; (802b108 <HAL_GPIO_Init+0x240>)
 802b086:	4293      	cmp	r3, r2
 802b088:	d052      	beq.n	802b130 <HAL_GPIO_Init+0x268>
 802b08a:	687b      	ldr	r3, [r7, #4]
 802b08c:	4a1f      	ldr	r2, [pc, #124]	; (802b10c <HAL_GPIO_Init+0x244>)
 802b08e:	4293      	cmp	r3, r2
 802b090:	d031      	beq.n	802b0f6 <HAL_GPIO_Init+0x22e>
 802b092:	687b      	ldr	r3, [r7, #4]
 802b094:	4a1e      	ldr	r2, [pc, #120]	; (802b110 <HAL_GPIO_Init+0x248>)
 802b096:	4293      	cmp	r3, r2
 802b098:	d02b      	beq.n	802b0f2 <HAL_GPIO_Init+0x22a>
 802b09a:	687b      	ldr	r3, [r7, #4]
 802b09c:	4a1d      	ldr	r2, [pc, #116]	; (802b114 <HAL_GPIO_Init+0x24c>)
 802b09e:	4293      	cmp	r3, r2
 802b0a0:	d025      	beq.n	802b0ee <HAL_GPIO_Init+0x226>
 802b0a2:	687b      	ldr	r3, [r7, #4]
 802b0a4:	4a1c      	ldr	r2, [pc, #112]	; (802b118 <HAL_GPIO_Init+0x250>)
 802b0a6:	4293      	cmp	r3, r2
 802b0a8:	d01f      	beq.n	802b0ea <HAL_GPIO_Init+0x222>
 802b0aa:	687b      	ldr	r3, [r7, #4]
 802b0ac:	4a1b      	ldr	r2, [pc, #108]	; (802b11c <HAL_GPIO_Init+0x254>)
 802b0ae:	4293      	cmp	r3, r2
 802b0b0:	d019      	beq.n	802b0e6 <HAL_GPIO_Init+0x21e>
 802b0b2:	687b      	ldr	r3, [r7, #4]
 802b0b4:	4a1a      	ldr	r2, [pc, #104]	; (802b120 <HAL_GPIO_Init+0x258>)
 802b0b6:	4293      	cmp	r3, r2
 802b0b8:	d013      	beq.n	802b0e2 <HAL_GPIO_Init+0x21a>
 802b0ba:	687b      	ldr	r3, [r7, #4]
 802b0bc:	4a19      	ldr	r2, [pc, #100]	; (802b124 <HAL_GPIO_Init+0x25c>)
 802b0be:	4293      	cmp	r3, r2
 802b0c0:	d00d      	beq.n	802b0de <HAL_GPIO_Init+0x216>
 802b0c2:	687b      	ldr	r3, [r7, #4]
 802b0c4:	4a18      	ldr	r2, [pc, #96]	; (802b128 <HAL_GPIO_Init+0x260>)
 802b0c6:	4293      	cmp	r3, r2
 802b0c8:	d007      	beq.n	802b0da <HAL_GPIO_Init+0x212>
 802b0ca:	687b      	ldr	r3, [r7, #4]
 802b0cc:	4a17      	ldr	r2, [pc, #92]	; (802b12c <HAL_GPIO_Init+0x264>)
 802b0ce:	4293      	cmp	r3, r2
 802b0d0:	d101      	bne.n	802b0d6 <HAL_GPIO_Init+0x20e>
 802b0d2:	2309      	movs	r3, #9
 802b0d4:	e02d      	b.n	802b132 <HAL_GPIO_Init+0x26a>
 802b0d6:	230a      	movs	r3, #10
 802b0d8:	e02b      	b.n	802b132 <HAL_GPIO_Init+0x26a>
 802b0da:	2308      	movs	r3, #8
 802b0dc:	e029      	b.n	802b132 <HAL_GPIO_Init+0x26a>
 802b0de:	2307      	movs	r3, #7
 802b0e0:	e027      	b.n	802b132 <HAL_GPIO_Init+0x26a>
 802b0e2:	2306      	movs	r3, #6
 802b0e4:	e025      	b.n	802b132 <HAL_GPIO_Init+0x26a>
 802b0e6:	2305      	movs	r3, #5
 802b0e8:	e023      	b.n	802b132 <HAL_GPIO_Init+0x26a>
 802b0ea:	2304      	movs	r3, #4
 802b0ec:	e021      	b.n	802b132 <HAL_GPIO_Init+0x26a>
 802b0ee:	2303      	movs	r3, #3
 802b0f0:	e01f      	b.n	802b132 <HAL_GPIO_Init+0x26a>
 802b0f2:	2302      	movs	r3, #2
 802b0f4:	e01d      	b.n	802b132 <HAL_GPIO_Init+0x26a>
 802b0f6:	2301      	movs	r3, #1
 802b0f8:	e01b      	b.n	802b132 <HAL_GPIO_Init+0x26a>
 802b0fa:	bf00      	nop
 802b0fc:	58000080 	.word	0x58000080
 802b100:	58024400 	.word	0x58024400
 802b104:	58000400 	.word	0x58000400
 802b108:	58020000 	.word	0x58020000
 802b10c:	58020400 	.word	0x58020400
 802b110:	58020800 	.word	0x58020800
 802b114:	58020c00 	.word	0x58020c00
 802b118:	58021000 	.word	0x58021000
 802b11c:	58021400 	.word	0x58021400
 802b120:	58021800 	.word	0x58021800
 802b124:	58021c00 	.word	0x58021c00
 802b128:	58022000 	.word	0x58022000
 802b12c:	58022400 	.word	0x58022400
 802b130:	2300      	movs	r3, #0
 802b132:	69fa      	ldr	r2, [r7, #28]
 802b134:	f002 0203 	and.w	r2, r2, #3
 802b138:	0092      	lsls	r2, r2, #2
 802b13a:	4093      	lsls	r3, r2
 802b13c:	69ba      	ldr	r2, [r7, #24]
 802b13e:	4313      	orrs	r3, r2
 802b140:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802b142:	4938      	ldr	r1, [pc, #224]	; (802b224 <HAL_GPIO_Init+0x35c>)
 802b144:	69fb      	ldr	r3, [r7, #28]
 802b146:	089b      	lsrs	r3, r3, #2
 802b148:	3302      	adds	r3, #2
 802b14a:	69ba      	ldr	r2, [r7, #24]
 802b14c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 802b150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802b154:	681b      	ldr	r3, [r3, #0]
 802b156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802b158:	693b      	ldr	r3, [r7, #16]
 802b15a:	43db      	mvns	r3, r3
 802b15c:	69ba      	ldr	r2, [r7, #24]
 802b15e:	4013      	ands	r3, r2
 802b160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802b162:	683b      	ldr	r3, [r7, #0]
 802b164:	685b      	ldr	r3, [r3, #4]
 802b166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802b16a:	2b00      	cmp	r3, #0
 802b16c:	d003      	beq.n	802b176 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 802b16e:	69ba      	ldr	r2, [r7, #24]
 802b170:	693b      	ldr	r3, [r7, #16]
 802b172:	4313      	orrs	r3, r2
 802b174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 802b176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802b17a:	69bb      	ldr	r3, [r7, #24]
 802b17c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 802b17e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802b182:	685b      	ldr	r3, [r3, #4]
 802b184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802b186:	693b      	ldr	r3, [r7, #16]
 802b188:	43db      	mvns	r3, r3
 802b18a:	69ba      	ldr	r2, [r7, #24]
 802b18c:	4013      	ands	r3, r2
 802b18e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802b190:	683b      	ldr	r3, [r7, #0]
 802b192:	685b      	ldr	r3, [r3, #4]
 802b194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802b198:	2b00      	cmp	r3, #0
 802b19a:	d003      	beq.n	802b1a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802b19c:	69ba      	ldr	r2, [r7, #24]
 802b19e:	693b      	ldr	r3, [r7, #16]
 802b1a0:	4313      	orrs	r3, r2
 802b1a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 802b1a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802b1a8:	69bb      	ldr	r3, [r7, #24]
 802b1aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 802b1ac:	697b      	ldr	r3, [r7, #20]
 802b1ae:	685b      	ldr	r3, [r3, #4]
 802b1b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802b1b2:	693b      	ldr	r3, [r7, #16]
 802b1b4:	43db      	mvns	r3, r3
 802b1b6:	69ba      	ldr	r2, [r7, #24]
 802b1b8:	4013      	ands	r3, r2
 802b1ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802b1bc:	683b      	ldr	r3, [r7, #0]
 802b1be:	685b      	ldr	r3, [r3, #4]
 802b1c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802b1c4:	2b00      	cmp	r3, #0
 802b1c6:	d003      	beq.n	802b1d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 802b1c8:	69ba      	ldr	r2, [r7, #24]
 802b1ca:	693b      	ldr	r3, [r7, #16]
 802b1cc:	4313      	orrs	r3, r2
 802b1ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 802b1d0:	697b      	ldr	r3, [r7, #20]
 802b1d2:	69ba      	ldr	r2, [r7, #24]
 802b1d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 802b1d6:	697b      	ldr	r3, [r7, #20]
 802b1d8:	681b      	ldr	r3, [r3, #0]
 802b1da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802b1dc:	693b      	ldr	r3, [r7, #16]
 802b1de:	43db      	mvns	r3, r3
 802b1e0:	69ba      	ldr	r2, [r7, #24]
 802b1e2:	4013      	ands	r3, r2
 802b1e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802b1e6:	683b      	ldr	r3, [r7, #0]
 802b1e8:	685b      	ldr	r3, [r3, #4]
 802b1ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802b1ee:	2b00      	cmp	r3, #0
 802b1f0:	d003      	beq.n	802b1fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 802b1f2:	69ba      	ldr	r2, [r7, #24]
 802b1f4:	693b      	ldr	r3, [r7, #16]
 802b1f6:	4313      	orrs	r3, r2
 802b1f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 802b1fa:	697b      	ldr	r3, [r7, #20]
 802b1fc:	69ba      	ldr	r2, [r7, #24]
 802b1fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 802b200:	69fb      	ldr	r3, [r7, #28]
 802b202:	3301      	adds	r3, #1
 802b204:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802b206:	683b      	ldr	r3, [r7, #0]
 802b208:	681a      	ldr	r2, [r3, #0]
 802b20a:	69fb      	ldr	r3, [r7, #28]
 802b20c:	fa22 f303 	lsr.w	r3, r2, r3
 802b210:	2b00      	cmp	r3, #0
 802b212:	f47f ae63 	bne.w	802aedc <HAL_GPIO_Init+0x14>
  }
}
 802b216:	bf00      	nop
 802b218:	bf00      	nop
 802b21a:	3724      	adds	r7, #36	; 0x24
 802b21c:	46bd      	mov	sp, r7
 802b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b222:	4770      	bx	lr
 802b224:	58000400 	.word	0x58000400

0802b228 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 802b228:	b480      	push	{r7}
 802b22a:	b087      	sub	sp, #28
 802b22c:	af00      	add	r7, sp, #0
 802b22e:	6078      	str	r0, [r7, #4]
 802b230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 802b232:	2300      	movs	r3, #0
 802b234:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 802b236:	4b75      	ldr	r3, [pc, #468]	; (802b40c <HAL_GPIO_DeInit+0x1e4>)
 802b238:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 802b23a:	e0d9      	b.n	802b3f0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 802b23c:	2201      	movs	r2, #1
 802b23e:	697b      	ldr	r3, [r7, #20]
 802b240:	fa02 f303 	lsl.w	r3, r2, r3
 802b244:	683a      	ldr	r2, [r7, #0]
 802b246:	4013      	ands	r3, r2
 802b248:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 802b24a:	68fb      	ldr	r3, [r7, #12]
 802b24c:	2b00      	cmp	r3, #0
 802b24e:	f000 80cc 	beq.w	802b3ea <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 802b252:	4a6f      	ldr	r2, [pc, #444]	; (802b410 <HAL_GPIO_DeInit+0x1e8>)
 802b254:	697b      	ldr	r3, [r7, #20]
 802b256:	089b      	lsrs	r3, r3, #2
 802b258:	3302      	adds	r3, #2
 802b25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802b25e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 802b260:	697b      	ldr	r3, [r7, #20]
 802b262:	f003 0303 	and.w	r3, r3, #3
 802b266:	009b      	lsls	r3, r3, #2
 802b268:	220f      	movs	r2, #15
 802b26a:	fa02 f303 	lsl.w	r3, r2, r3
 802b26e:	68ba      	ldr	r2, [r7, #8]
 802b270:	4013      	ands	r3, r2
 802b272:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 802b274:	687b      	ldr	r3, [r7, #4]
 802b276:	4a67      	ldr	r2, [pc, #412]	; (802b414 <HAL_GPIO_DeInit+0x1ec>)
 802b278:	4293      	cmp	r3, r2
 802b27a:	d037      	beq.n	802b2ec <HAL_GPIO_DeInit+0xc4>
 802b27c:	687b      	ldr	r3, [r7, #4]
 802b27e:	4a66      	ldr	r2, [pc, #408]	; (802b418 <HAL_GPIO_DeInit+0x1f0>)
 802b280:	4293      	cmp	r3, r2
 802b282:	d031      	beq.n	802b2e8 <HAL_GPIO_DeInit+0xc0>
 802b284:	687b      	ldr	r3, [r7, #4]
 802b286:	4a65      	ldr	r2, [pc, #404]	; (802b41c <HAL_GPIO_DeInit+0x1f4>)
 802b288:	4293      	cmp	r3, r2
 802b28a:	d02b      	beq.n	802b2e4 <HAL_GPIO_DeInit+0xbc>
 802b28c:	687b      	ldr	r3, [r7, #4]
 802b28e:	4a64      	ldr	r2, [pc, #400]	; (802b420 <HAL_GPIO_DeInit+0x1f8>)
 802b290:	4293      	cmp	r3, r2
 802b292:	d025      	beq.n	802b2e0 <HAL_GPIO_DeInit+0xb8>
 802b294:	687b      	ldr	r3, [r7, #4]
 802b296:	4a63      	ldr	r2, [pc, #396]	; (802b424 <HAL_GPIO_DeInit+0x1fc>)
 802b298:	4293      	cmp	r3, r2
 802b29a:	d01f      	beq.n	802b2dc <HAL_GPIO_DeInit+0xb4>
 802b29c:	687b      	ldr	r3, [r7, #4]
 802b29e:	4a62      	ldr	r2, [pc, #392]	; (802b428 <HAL_GPIO_DeInit+0x200>)
 802b2a0:	4293      	cmp	r3, r2
 802b2a2:	d019      	beq.n	802b2d8 <HAL_GPIO_DeInit+0xb0>
 802b2a4:	687b      	ldr	r3, [r7, #4]
 802b2a6:	4a61      	ldr	r2, [pc, #388]	; (802b42c <HAL_GPIO_DeInit+0x204>)
 802b2a8:	4293      	cmp	r3, r2
 802b2aa:	d013      	beq.n	802b2d4 <HAL_GPIO_DeInit+0xac>
 802b2ac:	687b      	ldr	r3, [r7, #4]
 802b2ae:	4a60      	ldr	r2, [pc, #384]	; (802b430 <HAL_GPIO_DeInit+0x208>)
 802b2b0:	4293      	cmp	r3, r2
 802b2b2:	d00d      	beq.n	802b2d0 <HAL_GPIO_DeInit+0xa8>
 802b2b4:	687b      	ldr	r3, [r7, #4]
 802b2b6:	4a5f      	ldr	r2, [pc, #380]	; (802b434 <HAL_GPIO_DeInit+0x20c>)
 802b2b8:	4293      	cmp	r3, r2
 802b2ba:	d007      	beq.n	802b2cc <HAL_GPIO_DeInit+0xa4>
 802b2bc:	687b      	ldr	r3, [r7, #4]
 802b2be:	4a5e      	ldr	r2, [pc, #376]	; (802b438 <HAL_GPIO_DeInit+0x210>)
 802b2c0:	4293      	cmp	r3, r2
 802b2c2:	d101      	bne.n	802b2c8 <HAL_GPIO_DeInit+0xa0>
 802b2c4:	2309      	movs	r3, #9
 802b2c6:	e012      	b.n	802b2ee <HAL_GPIO_DeInit+0xc6>
 802b2c8:	230a      	movs	r3, #10
 802b2ca:	e010      	b.n	802b2ee <HAL_GPIO_DeInit+0xc6>
 802b2cc:	2308      	movs	r3, #8
 802b2ce:	e00e      	b.n	802b2ee <HAL_GPIO_DeInit+0xc6>
 802b2d0:	2307      	movs	r3, #7
 802b2d2:	e00c      	b.n	802b2ee <HAL_GPIO_DeInit+0xc6>
 802b2d4:	2306      	movs	r3, #6
 802b2d6:	e00a      	b.n	802b2ee <HAL_GPIO_DeInit+0xc6>
 802b2d8:	2305      	movs	r3, #5
 802b2da:	e008      	b.n	802b2ee <HAL_GPIO_DeInit+0xc6>
 802b2dc:	2304      	movs	r3, #4
 802b2de:	e006      	b.n	802b2ee <HAL_GPIO_DeInit+0xc6>
 802b2e0:	2303      	movs	r3, #3
 802b2e2:	e004      	b.n	802b2ee <HAL_GPIO_DeInit+0xc6>
 802b2e4:	2302      	movs	r3, #2
 802b2e6:	e002      	b.n	802b2ee <HAL_GPIO_DeInit+0xc6>
 802b2e8:	2301      	movs	r3, #1
 802b2ea:	e000      	b.n	802b2ee <HAL_GPIO_DeInit+0xc6>
 802b2ec:	2300      	movs	r3, #0
 802b2ee:	697a      	ldr	r2, [r7, #20]
 802b2f0:	f002 0203 	and.w	r2, r2, #3
 802b2f4:	0092      	lsls	r2, r2, #2
 802b2f6:	4093      	lsls	r3, r2
 802b2f8:	68ba      	ldr	r2, [r7, #8]
 802b2fa:	429a      	cmp	r2, r3
 802b2fc:	d136      	bne.n	802b36c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 802b2fe:	693b      	ldr	r3, [r7, #16]
 802b300:	681a      	ldr	r2, [r3, #0]
 802b302:	68fb      	ldr	r3, [r7, #12]
 802b304:	43db      	mvns	r3, r3
 802b306:	401a      	ands	r2, r3
 802b308:	693b      	ldr	r3, [r7, #16]
 802b30a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 802b30c:	693b      	ldr	r3, [r7, #16]
 802b30e:	685a      	ldr	r2, [r3, #4]
 802b310:	68fb      	ldr	r3, [r7, #12]
 802b312:	43db      	mvns	r3, r3
 802b314:	401a      	ands	r2, r3
 802b316:	693b      	ldr	r3, [r7, #16]
 802b318:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 802b31a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802b31e:	685a      	ldr	r2, [r3, #4]
 802b320:	68fb      	ldr	r3, [r7, #12]
 802b322:	43db      	mvns	r3, r3
 802b324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802b328:	4013      	ands	r3, r2
 802b32a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 802b32c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802b330:	681a      	ldr	r2, [r3, #0]
 802b332:	68fb      	ldr	r3, [r7, #12]
 802b334:	43db      	mvns	r3, r3
 802b336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802b33a:	4013      	ands	r3, r2
 802b33c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 802b33e:	697b      	ldr	r3, [r7, #20]
 802b340:	f003 0303 	and.w	r3, r3, #3
 802b344:	009b      	lsls	r3, r3, #2
 802b346:	220f      	movs	r2, #15
 802b348:	fa02 f303 	lsl.w	r3, r2, r3
 802b34c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 802b34e:	4a30      	ldr	r2, [pc, #192]	; (802b410 <HAL_GPIO_DeInit+0x1e8>)
 802b350:	697b      	ldr	r3, [r7, #20]
 802b352:	089b      	lsrs	r3, r3, #2
 802b354:	3302      	adds	r3, #2
 802b356:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802b35a:	68bb      	ldr	r3, [r7, #8]
 802b35c:	43da      	mvns	r2, r3
 802b35e:	482c      	ldr	r0, [pc, #176]	; (802b410 <HAL_GPIO_DeInit+0x1e8>)
 802b360:	697b      	ldr	r3, [r7, #20]
 802b362:	089b      	lsrs	r3, r3, #2
 802b364:	400a      	ands	r2, r1
 802b366:	3302      	adds	r3, #2
 802b368:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 802b36c:	687b      	ldr	r3, [r7, #4]
 802b36e:	681a      	ldr	r2, [r3, #0]
 802b370:	697b      	ldr	r3, [r7, #20]
 802b372:	005b      	lsls	r3, r3, #1
 802b374:	2103      	movs	r1, #3
 802b376:	fa01 f303 	lsl.w	r3, r1, r3
 802b37a:	431a      	orrs	r2, r3
 802b37c:	687b      	ldr	r3, [r7, #4]
 802b37e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 802b380:	697b      	ldr	r3, [r7, #20]
 802b382:	08da      	lsrs	r2, r3, #3
 802b384:	687b      	ldr	r3, [r7, #4]
 802b386:	3208      	adds	r2, #8
 802b388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802b38c:	697b      	ldr	r3, [r7, #20]
 802b38e:	f003 0307 	and.w	r3, r3, #7
 802b392:	009b      	lsls	r3, r3, #2
 802b394:	220f      	movs	r2, #15
 802b396:	fa02 f303 	lsl.w	r3, r2, r3
 802b39a:	43db      	mvns	r3, r3
 802b39c:	697a      	ldr	r2, [r7, #20]
 802b39e:	08d2      	lsrs	r2, r2, #3
 802b3a0:	4019      	ands	r1, r3
 802b3a2:	687b      	ldr	r3, [r7, #4]
 802b3a4:	3208      	adds	r2, #8
 802b3a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802b3aa:	687b      	ldr	r3, [r7, #4]
 802b3ac:	68da      	ldr	r2, [r3, #12]
 802b3ae:	697b      	ldr	r3, [r7, #20]
 802b3b0:	005b      	lsls	r3, r3, #1
 802b3b2:	2103      	movs	r1, #3
 802b3b4:	fa01 f303 	lsl.w	r3, r1, r3
 802b3b8:	43db      	mvns	r3, r3
 802b3ba:	401a      	ands	r2, r3
 802b3bc:	687b      	ldr	r3, [r7, #4]
 802b3be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 802b3c0:	687b      	ldr	r3, [r7, #4]
 802b3c2:	685a      	ldr	r2, [r3, #4]
 802b3c4:	2101      	movs	r1, #1
 802b3c6:	697b      	ldr	r3, [r7, #20]
 802b3c8:	fa01 f303 	lsl.w	r3, r1, r3
 802b3cc:	43db      	mvns	r3, r3
 802b3ce:	401a      	ands	r2, r3
 802b3d0:	687b      	ldr	r3, [r7, #4]
 802b3d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802b3d4:	687b      	ldr	r3, [r7, #4]
 802b3d6:	689a      	ldr	r2, [r3, #8]
 802b3d8:	697b      	ldr	r3, [r7, #20]
 802b3da:	005b      	lsls	r3, r3, #1
 802b3dc:	2103      	movs	r1, #3
 802b3de:	fa01 f303 	lsl.w	r3, r1, r3
 802b3e2:	43db      	mvns	r3, r3
 802b3e4:	401a      	ands	r2, r3
 802b3e6:	687b      	ldr	r3, [r7, #4]
 802b3e8:	609a      	str	r2, [r3, #8]
    }

    position++;
 802b3ea:	697b      	ldr	r3, [r7, #20]
 802b3ec:	3301      	adds	r3, #1
 802b3ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 802b3f0:	683a      	ldr	r2, [r7, #0]
 802b3f2:	697b      	ldr	r3, [r7, #20]
 802b3f4:	fa22 f303 	lsr.w	r3, r2, r3
 802b3f8:	2b00      	cmp	r3, #0
 802b3fa:	f47f af1f 	bne.w	802b23c <HAL_GPIO_DeInit+0x14>
  }
}
 802b3fe:	bf00      	nop
 802b400:	bf00      	nop
 802b402:	371c      	adds	r7, #28
 802b404:	46bd      	mov	sp, r7
 802b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b40a:	4770      	bx	lr
 802b40c:	58000080 	.word	0x58000080
 802b410:	58000400 	.word	0x58000400
 802b414:	58020000 	.word	0x58020000
 802b418:	58020400 	.word	0x58020400
 802b41c:	58020800 	.word	0x58020800
 802b420:	58020c00 	.word	0x58020c00
 802b424:	58021000 	.word	0x58021000
 802b428:	58021400 	.word	0x58021400
 802b42c:	58021800 	.word	0x58021800
 802b430:	58021c00 	.word	0x58021c00
 802b434:	58022000 	.word	0x58022000
 802b438:	58022400 	.word	0x58022400

0802b43c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 802b43c:	b480      	push	{r7}
 802b43e:	b085      	sub	sp, #20
 802b440:	af00      	add	r7, sp, #0
 802b442:	6078      	str	r0, [r7, #4]
 802b444:	460b      	mov	r3, r1
 802b446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 802b448:	687b      	ldr	r3, [r7, #4]
 802b44a:	691a      	ldr	r2, [r3, #16]
 802b44c:	887b      	ldrh	r3, [r7, #2]
 802b44e:	4013      	ands	r3, r2
 802b450:	2b00      	cmp	r3, #0
 802b452:	d002      	beq.n	802b45a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 802b454:	2301      	movs	r3, #1
 802b456:	73fb      	strb	r3, [r7, #15]
 802b458:	e001      	b.n	802b45e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 802b45a:	2300      	movs	r3, #0
 802b45c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 802b45e:	7bfb      	ldrb	r3, [r7, #15]
}
 802b460:	4618      	mov	r0, r3
 802b462:	3714      	adds	r7, #20
 802b464:	46bd      	mov	sp, r7
 802b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b46a:	4770      	bx	lr

0802b46c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802b46c:	b480      	push	{r7}
 802b46e:	b083      	sub	sp, #12
 802b470:	af00      	add	r7, sp, #0
 802b472:	6078      	str	r0, [r7, #4]
 802b474:	460b      	mov	r3, r1
 802b476:	807b      	strh	r3, [r7, #2]
 802b478:	4613      	mov	r3, r2
 802b47a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 802b47c:	787b      	ldrb	r3, [r7, #1]
 802b47e:	2b00      	cmp	r3, #0
 802b480:	d003      	beq.n	802b48a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802b482:	887a      	ldrh	r2, [r7, #2]
 802b484:	687b      	ldr	r3, [r7, #4]
 802b486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 802b488:	e003      	b.n	802b492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802b48a:	887b      	ldrh	r3, [r7, #2]
 802b48c:	041a      	lsls	r2, r3, #16
 802b48e:	687b      	ldr	r3, [r7, #4]
 802b490:	619a      	str	r2, [r3, #24]
}
 802b492:	bf00      	nop
 802b494:	370c      	adds	r7, #12
 802b496:	46bd      	mov	sp, r7
 802b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b49c:	4770      	bx	lr

0802b49e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 802b49e:	b480      	push	{r7}
 802b4a0:	b085      	sub	sp, #20
 802b4a2:	af00      	add	r7, sp, #0
 802b4a4:	6078      	str	r0, [r7, #4]
 802b4a6:	460b      	mov	r3, r1
 802b4a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 802b4aa:	687b      	ldr	r3, [r7, #4]
 802b4ac:	695b      	ldr	r3, [r3, #20]
 802b4ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 802b4b0:	887a      	ldrh	r2, [r7, #2]
 802b4b2:	68fb      	ldr	r3, [r7, #12]
 802b4b4:	4013      	ands	r3, r2
 802b4b6:	041a      	lsls	r2, r3, #16
 802b4b8:	68fb      	ldr	r3, [r7, #12]
 802b4ba:	43d9      	mvns	r1, r3
 802b4bc:	887b      	ldrh	r3, [r7, #2]
 802b4be:	400b      	ands	r3, r1
 802b4c0:	431a      	orrs	r2, r3
 802b4c2:	687b      	ldr	r3, [r7, #4]
 802b4c4:	619a      	str	r2, [r3, #24]
}
 802b4c6:	bf00      	nop
 802b4c8:	3714      	adds	r7, #20
 802b4ca:	46bd      	mov	sp, r7
 802b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4d0:	4770      	bx	lr
	...

0802b4d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 802b4d4:	b480      	push	{r7}
 802b4d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 802b4d8:	4b05      	ldr	r3, [pc, #20]	; (802b4f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 802b4da:	681b      	ldr	r3, [r3, #0]
 802b4dc:	4a04      	ldr	r2, [pc, #16]	; (802b4f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 802b4de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b4e2:	6013      	str	r3, [r2, #0]
}
 802b4e4:	bf00      	nop
 802b4e6:	46bd      	mov	sp, r7
 802b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4ec:	4770      	bx	lr
 802b4ee:	bf00      	nop
 802b4f0:	58024800 	.word	0x58024800

0802b4f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 802b4f4:	b580      	push	{r7, lr}
 802b4f6:	b084      	sub	sp, #16
 802b4f8:	af00      	add	r7, sp, #0
 802b4fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 802b4fc:	4b19      	ldr	r3, [pc, #100]	; (802b564 <HAL_PWREx_ConfigSupply+0x70>)
 802b4fe:	68db      	ldr	r3, [r3, #12]
 802b500:	f003 0304 	and.w	r3, r3, #4
 802b504:	2b04      	cmp	r3, #4
 802b506:	d00a      	beq.n	802b51e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 802b508:	4b16      	ldr	r3, [pc, #88]	; (802b564 <HAL_PWREx_ConfigSupply+0x70>)
 802b50a:	68db      	ldr	r3, [r3, #12]
 802b50c:	f003 0307 	and.w	r3, r3, #7
 802b510:	687a      	ldr	r2, [r7, #4]
 802b512:	429a      	cmp	r2, r3
 802b514:	d001      	beq.n	802b51a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 802b516:	2301      	movs	r3, #1
 802b518:	e01f      	b.n	802b55a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 802b51a:	2300      	movs	r3, #0
 802b51c:	e01d      	b.n	802b55a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 802b51e:	4b11      	ldr	r3, [pc, #68]	; (802b564 <HAL_PWREx_ConfigSupply+0x70>)
 802b520:	68db      	ldr	r3, [r3, #12]
 802b522:	f023 0207 	bic.w	r2, r3, #7
 802b526:	490f      	ldr	r1, [pc, #60]	; (802b564 <HAL_PWREx_ConfigSupply+0x70>)
 802b528:	687b      	ldr	r3, [r7, #4]
 802b52a:	4313      	orrs	r3, r2
 802b52c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 802b52e:	f7ff f8bd 	bl	802a6ac <HAL_GetTick>
 802b532:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 802b534:	e009      	b.n	802b54a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 802b536:	f7ff f8b9 	bl	802a6ac <HAL_GetTick>
 802b53a:	4602      	mov	r2, r0
 802b53c:	68fb      	ldr	r3, [r7, #12]
 802b53e:	1ad3      	subs	r3, r2, r3
 802b540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b544:	d901      	bls.n	802b54a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 802b546:	2301      	movs	r3, #1
 802b548:	e007      	b.n	802b55a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 802b54a:	4b06      	ldr	r3, [pc, #24]	; (802b564 <HAL_PWREx_ConfigSupply+0x70>)
 802b54c:	685b      	ldr	r3, [r3, #4]
 802b54e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802b552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802b556:	d1ee      	bne.n	802b536 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 802b558:	2300      	movs	r3, #0
}
 802b55a:	4618      	mov	r0, r3
 802b55c:	3710      	adds	r7, #16
 802b55e:	46bd      	mov	sp, r7
 802b560:	bd80      	pop	{r7, pc}
 802b562:	bf00      	nop
 802b564:	58024800 	.word	0x58024800

0802b568 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802b568:	b580      	push	{r7, lr}
 802b56a:	b08c      	sub	sp, #48	; 0x30
 802b56c:	af00      	add	r7, sp, #0
 802b56e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 802b570:	687b      	ldr	r3, [r7, #4]
 802b572:	2b00      	cmp	r3, #0
 802b574:	d102      	bne.n	802b57c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 802b576:	2301      	movs	r3, #1
 802b578:	f000 bc48 	b.w	802be0c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802b57c:	687b      	ldr	r3, [r7, #4]
 802b57e:	681b      	ldr	r3, [r3, #0]
 802b580:	f003 0301 	and.w	r3, r3, #1
 802b584:	2b00      	cmp	r3, #0
 802b586:	f000 8088 	beq.w	802b69a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802b58a:	4b99      	ldr	r3, [pc, #612]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b58c:	691b      	ldr	r3, [r3, #16]
 802b58e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802b592:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802b594:	4b96      	ldr	r3, [pc, #600]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b598:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 802b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b59c:	2b10      	cmp	r3, #16
 802b59e:	d007      	beq.n	802b5b0 <HAL_RCC_OscConfig+0x48>
 802b5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b5a2:	2b18      	cmp	r3, #24
 802b5a4:	d111      	bne.n	802b5ca <HAL_RCC_OscConfig+0x62>
 802b5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b5a8:	f003 0303 	and.w	r3, r3, #3
 802b5ac:	2b02      	cmp	r3, #2
 802b5ae:	d10c      	bne.n	802b5ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802b5b0:	4b8f      	ldr	r3, [pc, #572]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b5b2:	681b      	ldr	r3, [r3, #0]
 802b5b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802b5b8:	2b00      	cmp	r3, #0
 802b5ba:	d06d      	beq.n	802b698 <HAL_RCC_OscConfig+0x130>
 802b5bc:	687b      	ldr	r3, [r7, #4]
 802b5be:	685b      	ldr	r3, [r3, #4]
 802b5c0:	2b00      	cmp	r3, #0
 802b5c2:	d169      	bne.n	802b698 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 802b5c4:	2301      	movs	r3, #1
 802b5c6:	f000 bc21 	b.w	802be0c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802b5ca:	687b      	ldr	r3, [r7, #4]
 802b5cc:	685b      	ldr	r3, [r3, #4]
 802b5ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802b5d2:	d106      	bne.n	802b5e2 <HAL_RCC_OscConfig+0x7a>
 802b5d4:	4b86      	ldr	r3, [pc, #536]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b5d6:	681b      	ldr	r3, [r3, #0]
 802b5d8:	4a85      	ldr	r2, [pc, #532]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b5da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802b5de:	6013      	str	r3, [r2, #0]
 802b5e0:	e02e      	b.n	802b640 <HAL_RCC_OscConfig+0xd8>
 802b5e2:	687b      	ldr	r3, [r7, #4]
 802b5e4:	685b      	ldr	r3, [r3, #4]
 802b5e6:	2b00      	cmp	r3, #0
 802b5e8:	d10c      	bne.n	802b604 <HAL_RCC_OscConfig+0x9c>
 802b5ea:	4b81      	ldr	r3, [pc, #516]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b5ec:	681b      	ldr	r3, [r3, #0]
 802b5ee:	4a80      	ldr	r2, [pc, #512]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b5f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802b5f4:	6013      	str	r3, [r2, #0]
 802b5f6:	4b7e      	ldr	r3, [pc, #504]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b5f8:	681b      	ldr	r3, [r3, #0]
 802b5fa:	4a7d      	ldr	r2, [pc, #500]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b5fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802b600:	6013      	str	r3, [r2, #0]
 802b602:	e01d      	b.n	802b640 <HAL_RCC_OscConfig+0xd8>
 802b604:	687b      	ldr	r3, [r7, #4]
 802b606:	685b      	ldr	r3, [r3, #4]
 802b608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802b60c:	d10c      	bne.n	802b628 <HAL_RCC_OscConfig+0xc0>
 802b60e:	4b78      	ldr	r3, [pc, #480]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b610:	681b      	ldr	r3, [r3, #0]
 802b612:	4a77      	ldr	r2, [pc, #476]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802b618:	6013      	str	r3, [r2, #0]
 802b61a:	4b75      	ldr	r3, [pc, #468]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b61c:	681b      	ldr	r3, [r3, #0]
 802b61e:	4a74      	ldr	r2, [pc, #464]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802b624:	6013      	str	r3, [r2, #0]
 802b626:	e00b      	b.n	802b640 <HAL_RCC_OscConfig+0xd8>
 802b628:	4b71      	ldr	r3, [pc, #452]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b62a:	681b      	ldr	r3, [r3, #0]
 802b62c:	4a70      	ldr	r2, [pc, #448]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b62e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802b632:	6013      	str	r3, [r2, #0]
 802b634:	4b6e      	ldr	r3, [pc, #440]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b636:	681b      	ldr	r3, [r3, #0]
 802b638:	4a6d      	ldr	r2, [pc, #436]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b63a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802b63e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 802b640:	687b      	ldr	r3, [r7, #4]
 802b642:	685b      	ldr	r3, [r3, #4]
 802b644:	2b00      	cmp	r3, #0
 802b646:	d013      	beq.n	802b670 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b648:	f7ff f830 	bl	802a6ac <HAL_GetTick>
 802b64c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802b64e:	e008      	b.n	802b662 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802b650:	f7ff f82c 	bl	802a6ac <HAL_GetTick>
 802b654:	4602      	mov	r2, r0
 802b656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b658:	1ad3      	subs	r3, r2, r3
 802b65a:	2b64      	cmp	r3, #100	; 0x64
 802b65c:	d901      	bls.n	802b662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802b65e:	2303      	movs	r3, #3
 802b660:	e3d4      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802b662:	4b63      	ldr	r3, [pc, #396]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b664:	681b      	ldr	r3, [r3, #0]
 802b666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802b66a:	2b00      	cmp	r3, #0
 802b66c:	d0f0      	beq.n	802b650 <HAL_RCC_OscConfig+0xe8>
 802b66e:	e014      	b.n	802b69a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b670:	f7ff f81c 	bl	802a6ac <HAL_GetTick>
 802b674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 802b676:	e008      	b.n	802b68a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802b678:	f7ff f818 	bl	802a6ac <HAL_GetTick>
 802b67c:	4602      	mov	r2, r0
 802b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b680:	1ad3      	subs	r3, r2, r3
 802b682:	2b64      	cmp	r3, #100	; 0x64
 802b684:	d901      	bls.n	802b68a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 802b686:	2303      	movs	r3, #3
 802b688:	e3c0      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 802b68a:	4b59      	ldr	r3, [pc, #356]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b68c:	681b      	ldr	r3, [r3, #0]
 802b68e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802b692:	2b00      	cmp	r3, #0
 802b694:	d1f0      	bne.n	802b678 <HAL_RCC_OscConfig+0x110>
 802b696:	e000      	b.n	802b69a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802b698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802b69a:	687b      	ldr	r3, [r7, #4]
 802b69c:	681b      	ldr	r3, [r3, #0]
 802b69e:	f003 0302 	and.w	r3, r3, #2
 802b6a2:	2b00      	cmp	r3, #0
 802b6a4:	f000 80ca 	beq.w	802b83c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802b6a8:	4b51      	ldr	r3, [pc, #324]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b6aa:	691b      	ldr	r3, [r3, #16]
 802b6ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802b6b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802b6b2:	4b4f      	ldr	r3, [pc, #316]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b6b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 802b6b8:	6a3b      	ldr	r3, [r7, #32]
 802b6ba:	2b00      	cmp	r3, #0
 802b6bc:	d007      	beq.n	802b6ce <HAL_RCC_OscConfig+0x166>
 802b6be:	6a3b      	ldr	r3, [r7, #32]
 802b6c0:	2b18      	cmp	r3, #24
 802b6c2:	d156      	bne.n	802b772 <HAL_RCC_OscConfig+0x20a>
 802b6c4:	69fb      	ldr	r3, [r7, #28]
 802b6c6:	f003 0303 	and.w	r3, r3, #3
 802b6ca:	2b00      	cmp	r3, #0
 802b6cc:	d151      	bne.n	802b772 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802b6ce:	4b48      	ldr	r3, [pc, #288]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b6d0:	681b      	ldr	r3, [r3, #0]
 802b6d2:	f003 0304 	and.w	r3, r3, #4
 802b6d6:	2b00      	cmp	r3, #0
 802b6d8:	d005      	beq.n	802b6e6 <HAL_RCC_OscConfig+0x17e>
 802b6da:	687b      	ldr	r3, [r7, #4]
 802b6dc:	68db      	ldr	r3, [r3, #12]
 802b6de:	2b00      	cmp	r3, #0
 802b6e0:	d101      	bne.n	802b6e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 802b6e2:	2301      	movs	r3, #1
 802b6e4:	e392      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 802b6e6:	4b42      	ldr	r3, [pc, #264]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b6e8:	681b      	ldr	r3, [r3, #0]
 802b6ea:	f023 0219 	bic.w	r2, r3, #25
 802b6ee:	687b      	ldr	r3, [r7, #4]
 802b6f0:	68db      	ldr	r3, [r3, #12]
 802b6f2:	493f      	ldr	r1, [pc, #252]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b6f4:	4313      	orrs	r3, r2
 802b6f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b6f8:	f7fe ffd8 	bl	802a6ac <HAL_GetTick>
 802b6fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802b6fe:	e008      	b.n	802b712 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802b700:	f7fe ffd4 	bl	802a6ac <HAL_GetTick>
 802b704:	4602      	mov	r2, r0
 802b706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b708:	1ad3      	subs	r3, r2, r3
 802b70a:	2b02      	cmp	r3, #2
 802b70c:	d901      	bls.n	802b712 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 802b70e:	2303      	movs	r3, #3
 802b710:	e37c      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802b712:	4b37      	ldr	r3, [pc, #220]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b714:	681b      	ldr	r3, [r3, #0]
 802b716:	f003 0304 	and.w	r3, r3, #4
 802b71a:	2b00      	cmp	r3, #0
 802b71c:	d0f0      	beq.n	802b700 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802b71e:	f7fe fff5 	bl	802a70c <HAL_GetREVID>
 802b722:	4603      	mov	r3, r0
 802b724:	f241 0203 	movw	r2, #4099	; 0x1003
 802b728:	4293      	cmp	r3, r2
 802b72a:	d817      	bhi.n	802b75c <HAL_RCC_OscConfig+0x1f4>
 802b72c:	687b      	ldr	r3, [r7, #4]
 802b72e:	691b      	ldr	r3, [r3, #16]
 802b730:	2b40      	cmp	r3, #64	; 0x40
 802b732:	d108      	bne.n	802b746 <HAL_RCC_OscConfig+0x1de>
 802b734:	4b2e      	ldr	r3, [pc, #184]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b736:	685b      	ldr	r3, [r3, #4]
 802b738:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 802b73c:	4a2c      	ldr	r2, [pc, #176]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b73e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b742:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802b744:	e07a      	b.n	802b83c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802b746:	4b2a      	ldr	r3, [pc, #168]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b748:	685b      	ldr	r3, [r3, #4]
 802b74a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802b74e:	687b      	ldr	r3, [r7, #4]
 802b750:	691b      	ldr	r3, [r3, #16]
 802b752:	031b      	lsls	r3, r3, #12
 802b754:	4926      	ldr	r1, [pc, #152]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b756:	4313      	orrs	r3, r2
 802b758:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802b75a:	e06f      	b.n	802b83c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802b75c:	4b24      	ldr	r3, [pc, #144]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b75e:	685b      	ldr	r3, [r3, #4]
 802b760:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802b764:	687b      	ldr	r3, [r7, #4]
 802b766:	691b      	ldr	r3, [r3, #16]
 802b768:	061b      	lsls	r3, r3, #24
 802b76a:	4921      	ldr	r1, [pc, #132]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b76c:	4313      	orrs	r3, r2
 802b76e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802b770:	e064      	b.n	802b83c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 802b772:	687b      	ldr	r3, [r7, #4]
 802b774:	68db      	ldr	r3, [r3, #12]
 802b776:	2b00      	cmp	r3, #0
 802b778:	d047      	beq.n	802b80a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 802b77a:	4b1d      	ldr	r3, [pc, #116]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b77c:	681b      	ldr	r3, [r3, #0]
 802b77e:	f023 0219 	bic.w	r2, r3, #25
 802b782:	687b      	ldr	r3, [r7, #4]
 802b784:	68db      	ldr	r3, [r3, #12]
 802b786:	491a      	ldr	r1, [pc, #104]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b788:	4313      	orrs	r3, r2
 802b78a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b78c:	f7fe ff8e 	bl	802a6ac <HAL_GetTick>
 802b790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802b792:	e008      	b.n	802b7a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802b794:	f7fe ff8a 	bl	802a6ac <HAL_GetTick>
 802b798:	4602      	mov	r2, r0
 802b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b79c:	1ad3      	subs	r3, r2, r3
 802b79e:	2b02      	cmp	r3, #2
 802b7a0:	d901      	bls.n	802b7a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 802b7a2:	2303      	movs	r3, #3
 802b7a4:	e332      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802b7a6:	4b12      	ldr	r3, [pc, #72]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b7a8:	681b      	ldr	r3, [r3, #0]
 802b7aa:	f003 0304 	and.w	r3, r3, #4
 802b7ae:	2b00      	cmp	r3, #0
 802b7b0:	d0f0      	beq.n	802b794 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802b7b2:	f7fe ffab 	bl	802a70c <HAL_GetREVID>
 802b7b6:	4603      	mov	r3, r0
 802b7b8:	f241 0203 	movw	r2, #4099	; 0x1003
 802b7bc:	4293      	cmp	r3, r2
 802b7be:	d819      	bhi.n	802b7f4 <HAL_RCC_OscConfig+0x28c>
 802b7c0:	687b      	ldr	r3, [r7, #4]
 802b7c2:	691b      	ldr	r3, [r3, #16]
 802b7c4:	2b40      	cmp	r3, #64	; 0x40
 802b7c6:	d108      	bne.n	802b7da <HAL_RCC_OscConfig+0x272>
 802b7c8:	4b09      	ldr	r3, [pc, #36]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b7ca:	685b      	ldr	r3, [r3, #4]
 802b7cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 802b7d0:	4a07      	ldr	r2, [pc, #28]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b7d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b7d6:	6053      	str	r3, [r2, #4]
 802b7d8:	e030      	b.n	802b83c <HAL_RCC_OscConfig+0x2d4>
 802b7da:	4b05      	ldr	r3, [pc, #20]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b7dc:	685b      	ldr	r3, [r3, #4]
 802b7de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802b7e2:	687b      	ldr	r3, [r7, #4]
 802b7e4:	691b      	ldr	r3, [r3, #16]
 802b7e6:	031b      	lsls	r3, r3, #12
 802b7e8:	4901      	ldr	r1, [pc, #4]	; (802b7f0 <HAL_RCC_OscConfig+0x288>)
 802b7ea:	4313      	orrs	r3, r2
 802b7ec:	604b      	str	r3, [r1, #4]
 802b7ee:	e025      	b.n	802b83c <HAL_RCC_OscConfig+0x2d4>
 802b7f0:	58024400 	.word	0x58024400
 802b7f4:	4b9a      	ldr	r3, [pc, #616]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b7f6:	685b      	ldr	r3, [r3, #4]
 802b7f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802b7fc:	687b      	ldr	r3, [r7, #4]
 802b7fe:	691b      	ldr	r3, [r3, #16]
 802b800:	061b      	lsls	r3, r3, #24
 802b802:	4997      	ldr	r1, [pc, #604]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b804:	4313      	orrs	r3, r2
 802b806:	604b      	str	r3, [r1, #4]
 802b808:	e018      	b.n	802b83c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802b80a:	4b95      	ldr	r3, [pc, #596]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b80c:	681b      	ldr	r3, [r3, #0]
 802b80e:	4a94      	ldr	r2, [pc, #592]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b810:	f023 0301 	bic.w	r3, r3, #1
 802b814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b816:	f7fe ff49 	bl	802a6ac <HAL_GetTick>
 802b81a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 802b81c:	e008      	b.n	802b830 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802b81e:	f7fe ff45 	bl	802a6ac <HAL_GetTick>
 802b822:	4602      	mov	r2, r0
 802b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b826:	1ad3      	subs	r3, r2, r3
 802b828:	2b02      	cmp	r3, #2
 802b82a:	d901      	bls.n	802b830 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 802b82c:	2303      	movs	r3, #3
 802b82e:	e2ed      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 802b830:	4b8b      	ldr	r3, [pc, #556]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b832:	681b      	ldr	r3, [r3, #0]
 802b834:	f003 0304 	and.w	r3, r3, #4
 802b838:	2b00      	cmp	r3, #0
 802b83a:	d1f0      	bne.n	802b81e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 802b83c:	687b      	ldr	r3, [r7, #4]
 802b83e:	681b      	ldr	r3, [r3, #0]
 802b840:	f003 0310 	and.w	r3, r3, #16
 802b844:	2b00      	cmp	r3, #0
 802b846:	f000 80a9 	beq.w	802b99c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802b84a:	4b85      	ldr	r3, [pc, #532]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b84c:	691b      	ldr	r3, [r3, #16]
 802b84e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802b852:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802b854:	4b82      	ldr	r3, [pc, #520]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b858:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 802b85a:	69bb      	ldr	r3, [r7, #24]
 802b85c:	2b08      	cmp	r3, #8
 802b85e:	d007      	beq.n	802b870 <HAL_RCC_OscConfig+0x308>
 802b860:	69bb      	ldr	r3, [r7, #24]
 802b862:	2b18      	cmp	r3, #24
 802b864:	d13a      	bne.n	802b8dc <HAL_RCC_OscConfig+0x374>
 802b866:	697b      	ldr	r3, [r7, #20]
 802b868:	f003 0303 	and.w	r3, r3, #3
 802b86c:	2b01      	cmp	r3, #1
 802b86e:	d135      	bne.n	802b8dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802b870:	4b7b      	ldr	r3, [pc, #492]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b872:	681b      	ldr	r3, [r3, #0]
 802b874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b878:	2b00      	cmp	r3, #0
 802b87a:	d005      	beq.n	802b888 <HAL_RCC_OscConfig+0x320>
 802b87c:	687b      	ldr	r3, [r7, #4]
 802b87e:	69db      	ldr	r3, [r3, #28]
 802b880:	2b80      	cmp	r3, #128	; 0x80
 802b882:	d001      	beq.n	802b888 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 802b884:	2301      	movs	r3, #1
 802b886:	e2c1      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802b888:	f7fe ff40 	bl	802a70c <HAL_GetREVID>
 802b88c:	4603      	mov	r3, r0
 802b88e:	f241 0203 	movw	r2, #4099	; 0x1003
 802b892:	4293      	cmp	r3, r2
 802b894:	d817      	bhi.n	802b8c6 <HAL_RCC_OscConfig+0x35e>
 802b896:	687b      	ldr	r3, [r7, #4]
 802b898:	6a1b      	ldr	r3, [r3, #32]
 802b89a:	2b20      	cmp	r3, #32
 802b89c:	d108      	bne.n	802b8b0 <HAL_RCC_OscConfig+0x348>
 802b89e:	4b70      	ldr	r3, [pc, #448]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b8a0:	685b      	ldr	r3, [r3, #4]
 802b8a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 802b8a6:	4a6e      	ldr	r2, [pc, #440]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b8a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b8ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802b8ae:	e075      	b.n	802b99c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802b8b0:	4b6b      	ldr	r3, [pc, #428]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b8b2:	685b      	ldr	r3, [r3, #4]
 802b8b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 802b8b8:	687b      	ldr	r3, [r7, #4]
 802b8ba:	6a1b      	ldr	r3, [r3, #32]
 802b8bc:	069b      	lsls	r3, r3, #26
 802b8be:	4968      	ldr	r1, [pc, #416]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b8c0:	4313      	orrs	r3, r2
 802b8c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802b8c4:	e06a      	b.n	802b99c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802b8c6:	4b66      	ldr	r3, [pc, #408]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b8c8:	68db      	ldr	r3, [r3, #12]
 802b8ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 802b8ce:	687b      	ldr	r3, [r7, #4]
 802b8d0:	6a1b      	ldr	r3, [r3, #32]
 802b8d2:	061b      	lsls	r3, r3, #24
 802b8d4:	4962      	ldr	r1, [pc, #392]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b8d6:	4313      	orrs	r3, r2
 802b8d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802b8da:	e05f      	b.n	802b99c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 802b8dc:	687b      	ldr	r3, [r7, #4]
 802b8de:	69db      	ldr	r3, [r3, #28]
 802b8e0:	2b00      	cmp	r3, #0
 802b8e2:	d042      	beq.n	802b96a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 802b8e4:	4b5e      	ldr	r3, [pc, #376]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b8e6:	681b      	ldr	r3, [r3, #0]
 802b8e8:	4a5d      	ldr	r2, [pc, #372]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b8ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b8ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b8f0:	f7fe fedc 	bl	802a6ac <HAL_GetTick>
 802b8f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802b8f6:	e008      	b.n	802b90a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 802b8f8:	f7fe fed8 	bl	802a6ac <HAL_GetTick>
 802b8fc:	4602      	mov	r2, r0
 802b8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b900:	1ad3      	subs	r3, r2, r3
 802b902:	2b02      	cmp	r3, #2
 802b904:	d901      	bls.n	802b90a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 802b906:	2303      	movs	r3, #3
 802b908:	e280      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802b90a:	4b55      	ldr	r3, [pc, #340]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b90c:	681b      	ldr	r3, [r3, #0]
 802b90e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b912:	2b00      	cmp	r3, #0
 802b914:	d0f0      	beq.n	802b8f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802b916:	f7fe fef9 	bl	802a70c <HAL_GetREVID>
 802b91a:	4603      	mov	r3, r0
 802b91c:	f241 0203 	movw	r2, #4099	; 0x1003
 802b920:	4293      	cmp	r3, r2
 802b922:	d817      	bhi.n	802b954 <HAL_RCC_OscConfig+0x3ec>
 802b924:	687b      	ldr	r3, [r7, #4]
 802b926:	6a1b      	ldr	r3, [r3, #32]
 802b928:	2b20      	cmp	r3, #32
 802b92a:	d108      	bne.n	802b93e <HAL_RCC_OscConfig+0x3d6>
 802b92c:	4b4c      	ldr	r3, [pc, #304]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b92e:	685b      	ldr	r3, [r3, #4]
 802b930:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 802b934:	4a4a      	ldr	r2, [pc, #296]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b936:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b93a:	6053      	str	r3, [r2, #4]
 802b93c:	e02e      	b.n	802b99c <HAL_RCC_OscConfig+0x434>
 802b93e:	4b48      	ldr	r3, [pc, #288]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b940:	685b      	ldr	r3, [r3, #4]
 802b942:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 802b946:	687b      	ldr	r3, [r7, #4]
 802b948:	6a1b      	ldr	r3, [r3, #32]
 802b94a:	069b      	lsls	r3, r3, #26
 802b94c:	4944      	ldr	r1, [pc, #272]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b94e:	4313      	orrs	r3, r2
 802b950:	604b      	str	r3, [r1, #4]
 802b952:	e023      	b.n	802b99c <HAL_RCC_OscConfig+0x434>
 802b954:	4b42      	ldr	r3, [pc, #264]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b956:	68db      	ldr	r3, [r3, #12]
 802b958:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 802b95c:	687b      	ldr	r3, [r7, #4]
 802b95e:	6a1b      	ldr	r3, [r3, #32]
 802b960:	061b      	lsls	r3, r3, #24
 802b962:	493f      	ldr	r1, [pc, #252]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b964:	4313      	orrs	r3, r2
 802b966:	60cb      	str	r3, [r1, #12]
 802b968:	e018      	b.n	802b99c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 802b96a:	4b3d      	ldr	r3, [pc, #244]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b96c:	681b      	ldr	r3, [r3, #0]
 802b96e:	4a3c      	ldr	r2, [pc, #240]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802b974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b976:	f7fe fe99 	bl	802a6ac <HAL_GetTick>
 802b97a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 802b97c:	e008      	b.n	802b990 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 802b97e:	f7fe fe95 	bl	802a6ac <HAL_GetTick>
 802b982:	4602      	mov	r2, r0
 802b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b986:	1ad3      	subs	r3, r2, r3
 802b988:	2b02      	cmp	r3, #2
 802b98a:	d901      	bls.n	802b990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802b98c:	2303      	movs	r3, #3
 802b98e:	e23d      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 802b990:	4b33      	ldr	r3, [pc, #204]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b992:	681b      	ldr	r3, [r3, #0]
 802b994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b998:	2b00      	cmp	r3, #0
 802b99a:	d1f0      	bne.n	802b97e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802b99c:	687b      	ldr	r3, [r7, #4]
 802b99e:	681b      	ldr	r3, [r3, #0]
 802b9a0:	f003 0308 	and.w	r3, r3, #8
 802b9a4:	2b00      	cmp	r3, #0
 802b9a6:	d036      	beq.n	802ba16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 802b9a8:	687b      	ldr	r3, [r7, #4]
 802b9aa:	695b      	ldr	r3, [r3, #20]
 802b9ac:	2b00      	cmp	r3, #0
 802b9ae:	d019      	beq.n	802b9e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802b9b0:	4b2b      	ldr	r3, [pc, #172]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b9b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b9b4:	4a2a      	ldr	r2, [pc, #168]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b9b6:	f043 0301 	orr.w	r3, r3, #1
 802b9ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802b9bc:	f7fe fe76 	bl	802a6ac <HAL_GetTick>
 802b9c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802b9c2:	e008      	b.n	802b9d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802b9c4:	f7fe fe72 	bl	802a6ac <HAL_GetTick>
 802b9c8:	4602      	mov	r2, r0
 802b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b9cc:	1ad3      	subs	r3, r2, r3
 802b9ce:	2b02      	cmp	r3, #2
 802b9d0:	d901      	bls.n	802b9d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 802b9d2:	2303      	movs	r3, #3
 802b9d4:	e21a      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802b9d6:	4b22      	ldr	r3, [pc, #136]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b9d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b9da:	f003 0302 	and.w	r3, r3, #2
 802b9de:	2b00      	cmp	r3, #0
 802b9e0:	d0f0      	beq.n	802b9c4 <HAL_RCC_OscConfig+0x45c>
 802b9e2:	e018      	b.n	802ba16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802b9e4:	4b1e      	ldr	r3, [pc, #120]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b9e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b9e8:	4a1d      	ldr	r2, [pc, #116]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802b9ea:	f023 0301 	bic.w	r3, r3, #1
 802b9ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802b9f0:	f7fe fe5c 	bl	802a6ac <HAL_GetTick>
 802b9f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 802b9f6:	e008      	b.n	802ba0a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802b9f8:	f7fe fe58 	bl	802a6ac <HAL_GetTick>
 802b9fc:	4602      	mov	r2, r0
 802b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ba00:	1ad3      	subs	r3, r2, r3
 802ba02:	2b02      	cmp	r3, #2
 802ba04:	d901      	bls.n	802ba0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 802ba06:	2303      	movs	r3, #3
 802ba08:	e200      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 802ba0a:	4b15      	ldr	r3, [pc, #84]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802ba0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802ba0e:	f003 0302 	and.w	r3, r3, #2
 802ba12:	2b00      	cmp	r3, #0
 802ba14:	d1f0      	bne.n	802b9f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 802ba16:	687b      	ldr	r3, [r7, #4]
 802ba18:	681b      	ldr	r3, [r3, #0]
 802ba1a:	f003 0320 	and.w	r3, r3, #32
 802ba1e:	2b00      	cmp	r3, #0
 802ba20:	d039      	beq.n	802ba96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 802ba22:	687b      	ldr	r3, [r7, #4]
 802ba24:	699b      	ldr	r3, [r3, #24]
 802ba26:	2b00      	cmp	r3, #0
 802ba28:	d01c      	beq.n	802ba64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 802ba2a:	4b0d      	ldr	r3, [pc, #52]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802ba2c:	681b      	ldr	r3, [r3, #0]
 802ba2e:	4a0c      	ldr	r2, [pc, #48]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802ba30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802ba34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 802ba36:	f7fe fe39 	bl	802a6ac <HAL_GetTick>
 802ba3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 802ba3c:	e008      	b.n	802ba50 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802ba3e:	f7fe fe35 	bl	802a6ac <HAL_GetTick>
 802ba42:	4602      	mov	r2, r0
 802ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ba46:	1ad3      	subs	r3, r2, r3
 802ba48:	2b02      	cmp	r3, #2
 802ba4a:	d901      	bls.n	802ba50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 802ba4c:	2303      	movs	r3, #3
 802ba4e:	e1dd      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 802ba50:	4b03      	ldr	r3, [pc, #12]	; (802ba60 <HAL_RCC_OscConfig+0x4f8>)
 802ba52:	681b      	ldr	r3, [r3, #0]
 802ba54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802ba58:	2b00      	cmp	r3, #0
 802ba5a:	d0f0      	beq.n	802ba3e <HAL_RCC_OscConfig+0x4d6>
 802ba5c:	e01b      	b.n	802ba96 <HAL_RCC_OscConfig+0x52e>
 802ba5e:	bf00      	nop
 802ba60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 802ba64:	4b9b      	ldr	r3, [pc, #620]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802ba66:	681b      	ldr	r3, [r3, #0]
 802ba68:	4a9a      	ldr	r2, [pc, #616]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802ba6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ba6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 802ba70:	f7fe fe1c 	bl	802a6ac <HAL_GetTick>
 802ba74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 802ba76:	e008      	b.n	802ba8a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802ba78:	f7fe fe18 	bl	802a6ac <HAL_GetTick>
 802ba7c:	4602      	mov	r2, r0
 802ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ba80:	1ad3      	subs	r3, r2, r3
 802ba82:	2b02      	cmp	r3, #2
 802ba84:	d901      	bls.n	802ba8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 802ba86:	2303      	movs	r3, #3
 802ba88:	e1c0      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 802ba8a:	4b92      	ldr	r3, [pc, #584]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802ba8c:	681b      	ldr	r3, [r3, #0]
 802ba8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802ba92:	2b00      	cmp	r3, #0
 802ba94:	d1f0      	bne.n	802ba78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802ba96:	687b      	ldr	r3, [r7, #4]
 802ba98:	681b      	ldr	r3, [r3, #0]
 802ba9a:	f003 0304 	and.w	r3, r3, #4
 802ba9e:	2b00      	cmp	r3, #0
 802baa0:	f000 8081 	beq.w	802bba6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 802baa4:	4b8c      	ldr	r3, [pc, #560]	; (802bcd8 <HAL_RCC_OscConfig+0x770>)
 802baa6:	681b      	ldr	r3, [r3, #0]
 802baa8:	4a8b      	ldr	r2, [pc, #556]	; (802bcd8 <HAL_RCC_OscConfig+0x770>)
 802baaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802baae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802bab0:	f7fe fdfc 	bl	802a6ac <HAL_GetTick>
 802bab4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802bab6:	e008      	b.n	802baca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802bab8:	f7fe fdf8 	bl	802a6ac <HAL_GetTick>
 802babc:	4602      	mov	r2, r0
 802babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bac0:	1ad3      	subs	r3, r2, r3
 802bac2:	2b64      	cmp	r3, #100	; 0x64
 802bac4:	d901      	bls.n	802baca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 802bac6:	2303      	movs	r3, #3
 802bac8:	e1a0      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802baca:	4b83      	ldr	r3, [pc, #524]	; (802bcd8 <HAL_RCC_OscConfig+0x770>)
 802bacc:	681b      	ldr	r3, [r3, #0]
 802bace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802bad2:	2b00      	cmp	r3, #0
 802bad4:	d0f0      	beq.n	802bab8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802bad6:	687b      	ldr	r3, [r7, #4]
 802bad8:	689b      	ldr	r3, [r3, #8]
 802bada:	2b01      	cmp	r3, #1
 802badc:	d106      	bne.n	802baec <HAL_RCC_OscConfig+0x584>
 802bade:	4b7d      	ldr	r3, [pc, #500]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bae2:	4a7c      	ldr	r2, [pc, #496]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bae4:	f043 0301 	orr.w	r3, r3, #1
 802bae8:	6713      	str	r3, [r2, #112]	; 0x70
 802baea:	e02d      	b.n	802bb48 <HAL_RCC_OscConfig+0x5e0>
 802baec:	687b      	ldr	r3, [r7, #4]
 802baee:	689b      	ldr	r3, [r3, #8]
 802baf0:	2b00      	cmp	r3, #0
 802baf2:	d10c      	bne.n	802bb0e <HAL_RCC_OscConfig+0x5a6>
 802baf4:	4b77      	ldr	r3, [pc, #476]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802baf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802baf8:	4a76      	ldr	r2, [pc, #472]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bafa:	f023 0301 	bic.w	r3, r3, #1
 802bafe:	6713      	str	r3, [r2, #112]	; 0x70
 802bb00:	4b74      	ldr	r3, [pc, #464]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bb04:	4a73      	ldr	r2, [pc, #460]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb06:	f023 0304 	bic.w	r3, r3, #4
 802bb0a:	6713      	str	r3, [r2, #112]	; 0x70
 802bb0c:	e01c      	b.n	802bb48 <HAL_RCC_OscConfig+0x5e0>
 802bb0e:	687b      	ldr	r3, [r7, #4]
 802bb10:	689b      	ldr	r3, [r3, #8]
 802bb12:	2b05      	cmp	r3, #5
 802bb14:	d10c      	bne.n	802bb30 <HAL_RCC_OscConfig+0x5c8>
 802bb16:	4b6f      	ldr	r3, [pc, #444]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bb1a:	4a6e      	ldr	r2, [pc, #440]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb1c:	f043 0304 	orr.w	r3, r3, #4
 802bb20:	6713      	str	r3, [r2, #112]	; 0x70
 802bb22:	4b6c      	ldr	r3, [pc, #432]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bb26:	4a6b      	ldr	r2, [pc, #428]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb28:	f043 0301 	orr.w	r3, r3, #1
 802bb2c:	6713      	str	r3, [r2, #112]	; 0x70
 802bb2e:	e00b      	b.n	802bb48 <HAL_RCC_OscConfig+0x5e0>
 802bb30:	4b68      	ldr	r3, [pc, #416]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bb34:	4a67      	ldr	r2, [pc, #412]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb36:	f023 0301 	bic.w	r3, r3, #1
 802bb3a:	6713      	str	r3, [r2, #112]	; 0x70
 802bb3c:	4b65      	ldr	r3, [pc, #404]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bb40:	4a64      	ldr	r2, [pc, #400]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb42:	f023 0304 	bic.w	r3, r3, #4
 802bb46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802bb48:	687b      	ldr	r3, [r7, #4]
 802bb4a:	689b      	ldr	r3, [r3, #8]
 802bb4c:	2b00      	cmp	r3, #0
 802bb4e:	d015      	beq.n	802bb7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802bb50:	f7fe fdac 	bl	802a6ac <HAL_GetTick>
 802bb54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802bb56:	e00a      	b.n	802bb6e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802bb58:	f7fe fda8 	bl	802a6ac <HAL_GetTick>
 802bb5c:	4602      	mov	r2, r0
 802bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bb60:	1ad3      	subs	r3, r2, r3
 802bb62:	f241 3288 	movw	r2, #5000	; 0x1388
 802bb66:	4293      	cmp	r3, r2
 802bb68:	d901      	bls.n	802bb6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 802bb6a:	2303      	movs	r3, #3
 802bb6c:	e14e      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802bb6e:	4b59      	ldr	r3, [pc, #356]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bb72:	f003 0302 	and.w	r3, r3, #2
 802bb76:	2b00      	cmp	r3, #0
 802bb78:	d0ee      	beq.n	802bb58 <HAL_RCC_OscConfig+0x5f0>
 802bb7a:	e014      	b.n	802bba6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802bb7c:	f7fe fd96 	bl	802a6ac <HAL_GetTick>
 802bb80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 802bb82:	e00a      	b.n	802bb9a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802bb84:	f7fe fd92 	bl	802a6ac <HAL_GetTick>
 802bb88:	4602      	mov	r2, r0
 802bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bb8c:	1ad3      	subs	r3, r2, r3
 802bb8e:	f241 3288 	movw	r2, #5000	; 0x1388
 802bb92:	4293      	cmp	r3, r2
 802bb94:	d901      	bls.n	802bb9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 802bb96:	2303      	movs	r3, #3
 802bb98:	e138      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 802bb9a:	4b4e      	ldr	r3, [pc, #312]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bb9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bb9e:	f003 0302 	and.w	r3, r3, #2
 802bba2:	2b00      	cmp	r3, #0
 802bba4:	d1ee      	bne.n	802bb84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802bba6:	687b      	ldr	r3, [r7, #4]
 802bba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bbaa:	2b00      	cmp	r3, #0
 802bbac:	f000 812d 	beq.w	802be0a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 802bbb0:	4b48      	ldr	r3, [pc, #288]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bbb2:	691b      	ldr	r3, [r3, #16]
 802bbb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802bbb8:	2b18      	cmp	r3, #24
 802bbba:	f000 80bd 	beq.w	802bd38 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802bbbe:	687b      	ldr	r3, [r7, #4]
 802bbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bbc2:	2b02      	cmp	r3, #2
 802bbc4:	f040 809e 	bne.w	802bd04 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802bbc8:	4b42      	ldr	r3, [pc, #264]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bbca:	681b      	ldr	r3, [r3, #0]
 802bbcc:	4a41      	ldr	r2, [pc, #260]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bbce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802bbd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802bbd4:	f7fe fd6a 	bl	802a6ac <HAL_GetTick>
 802bbd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802bbda:	e008      	b.n	802bbee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802bbdc:	f7fe fd66 	bl	802a6ac <HAL_GetTick>
 802bbe0:	4602      	mov	r2, r0
 802bbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bbe4:	1ad3      	subs	r3, r2, r3
 802bbe6:	2b02      	cmp	r3, #2
 802bbe8:	d901      	bls.n	802bbee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 802bbea:	2303      	movs	r3, #3
 802bbec:	e10e      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802bbee:	4b39      	ldr	r3, [pc, #228]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bbf0:	681b      	ldr	r3, [r3, #0]
 802bbf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802bbf6:	2b00      	cmp	r3, #0
 802bbf8:	d1f0      	bne.n	802bbdc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 802bbfa:	4b36      	ldr	r3, [pc, #216]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bbfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802bbfe:	4b37      	ldr	r3, [pc, #220]	; (802bcdc <HAL_RCC_OscConfig+0x774>)
 802bc00:	4013      	ands	r3, r2
 802bc02:	687a      	ldr	r2, [r7, #4]
 802bc04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 802bc06:	687a      	ldr	r2, [r7, #4]
 802bc08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 802bc0a:	0112      	lsls	r2, r2, #4
 802bc0c:	430a      	orrs	r2, r1
 802bc0e:	4931      	ldr	r1, [pc, #196]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc10:	4313      	orrs	r3, r2
 802bc12:	628b      	str	r3, [r1, #40]	; 0x28
 802bc14:	687b      	ldr	r3, [r7, #4]
 802bc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bc18:	3b01      	subs	r3, #1
 802bc1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802bc1e:	687b      	ldr	r3, [r7, #4]
 802bc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802bc22:	3b01      	subs	r3, #1
 802bc24:	025b      	lsls	r3, r3, #9
 802bc26:	b29b      	uxth	r3, r3
 802bc28:	431a      	orrs	r2, r3
 802bc2a:	687b      	ldr	r3, [r7, #4]
 802bc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bc2e:	3b01      	subs	r3, #1
 802bc30:	041b      	lsls	r3, r3, #16
 802bc32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802bc36:	431a      	orrs	r2, r3
 802bc38:	687b      	ldr	r3, [r7, #4]
 802bc3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802bc3c:	3b01      	subs	r3, #1
 802bc3e:	061b      	lsls	r3, r3, #24
 802bc40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 802bc44:	4923      	ldr	r1, [pc, #140]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc46:	4313      	orrs	r3, r2
 802bc48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 802bc4a:	4b22      	ldr	r3, [pc, #136]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bc4e:	4a21      	ldr	r2, [pc, #132]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc50:	f023 0301 	bic.w	r3, r3, #1
 802bc54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 802bc56:	4b1f      	ldr	r3, [pc, #124]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802bc5a:	4b21      	ldr	r3, [pc, #132]	; (802bce0 <HAL_RCC_OscConfig+0x778>)
 802bc5c:	4013      	ands	r3, r2
 802bc5e:	687a      	ldr	r2, [r7, #4]
 802bc60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 802bc62:	00d2      	lsls	r2, r2, #3
 802bc64:	491b      	ldr	r1, [pc, #108]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc66:	4313      	orrs	r3, r2
 802bc68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 802bc6a:	4b1a      	ldr	r3, [pc, #104]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bc6e:	f023 020c 	bic.w	r2, r3, #12
 802bc72:	687b      	ldr	r3, [r7, #4]
 802bc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bc76:	4917      	ldr	r1, [pc, #92]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc78:	4313      	orrs	r3, r2
 802bc7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 802bc7c:	4b15      	ldr	r3, [pc, #84]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bc80:	f023 0202 	bic.w	r2, r3, #2
 802bc84:	687b      	ldr	r3, [r7, #4]
 802bc86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bc88:	4912      	ldr	r1, [pc, #72]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc8a:	4313      	orrs	r3, r2
 802bc8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 802bc8e:	4b11      	ldr	r3, [pc, #68]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bc92:	4a10      	ldr	r2, [pc, #64]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802bc98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802bc9a:	4b0e      	ldr	r3, [pc, #56]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bc9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bc9e:	4a0d      	ldr	r2, [pc, #52]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802bca4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 802bca6:	4b0b      	ldr	r3, [pc, #44]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bcaa:	4a0a      	ldr	r2, [pc, #40]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bcac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802bcb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 802bcb2:	4b08      	ldr	r3, [pc, #32]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bcb6:	4a07      	ldr	r2, [pc, #28]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bcb8:	f043 0301 	orr.w	r3, r3, #1
 802bcbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802bcbe:	4b05      	ldr	r3, [pc, #20]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bcc0:	681b      	ldr	r3, [r3, #0]
 802bcc2:	4a04      	ldr	r2, [pc, #16]	; (802bcd4 <HAL_RCC_OscConfig+0x76c>)
 802bcc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802bcc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802bcca:	f7fe fcef 	bl	802a6ac <HAL_GetTick>
 802bcce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802bcd0:	e011      	b.n	802bcf6 <HAL_RCC_OscConfig+0x78e>
 802bcd2:	bf00      	nop
 802bcd4:	58024400 	.word	0x58024400
 802bcd8:	58024800 	.word	0x58024800
 802bcdc:	fffffc0c 	.word	0xfffffc0c
 802bce0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802bce4:	f7fe fce2 	bl	802a6ac <HAL_GetTick>
 802bce8:	4602      	mov	r2, r0
 802bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bcec:	1ad3      	subs	r3, r2, r3
 802bcee:	2b02      	cmp	r3, #2
 802bcf0:	d901      	bls.n	802bcf6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 802bcf2:	2303      	movs	r3, #3
 802bcf4:	e08a      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802bcf6:	4b47      	ldr	r3, [pc, #284]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802bcf8:	681b      	ldr	r3, [r3, #0]
 802bcfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802bcfe:	2b00      	cmp	r3, #0
 802bd00:	d0f0      	beq.n	802bce4 <HAL_RCC_OscConfig+0x77c>
 802bd02:	e082      	b.n	802be0a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802bd04:	4b43      	ldr	r3, [pc, #268]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802bd06:	681b      	ldr	r3, [r3, #0]
 802bd08:	4a42      	ldr	r2, [pc, #264]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802bd0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802bd0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802bd10:	f7fe fccc 	bl	802a6ac <HAL_GetTick>
 802bd14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802bd16:	e008      	b.n	802bd2a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802bd18:	f7fe fcc8 	bl	802a6ac <HAL_GetTick>
 802bd1c:	4602      	mov	r2, r0
 802bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd20:	1ad3      	subs	r3, r2, r3
 802bd22:	2b02      	cmp	r3, #2
 802bd24:	d901      	bls.n	802bd2a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 802bd26:	2303      	movs	r3, #3
 802bd28:	e070      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802bd2a:	4b3a      	ldr	r3, [pc, #232]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802bd2c:	681b      	ldr	r3, [r3, #0]
 802bd2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802bd32:	2b00      	cmp	r3, #0
 802bd34:	d1f0      	bne.n	802bd18 <HAL_RCC_OscConfig+0x7b0>
 802bd36:	e068      	b.n	802be0a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 802bd38:	4b36      	ldr	r3, [pc, #216]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802bd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bd3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 802bd3e:	4b35      	ldr	r3, [pc, #212]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802bd40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bd42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802bd44:	687b      	ldr	r3, [r7, #4]
 802bd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bd48:	2b01      	cmp	r3, #1
 802bd4a:	d031      	beq.n	802bdb0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802bd4c:	693b      	ldr	r3, [r7, #16]
 802bd4e:	f003 0203 	and.w	r2, r3, #3
 802bd52:	687b      	ldr	r3, [r7, #4]
 802bd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802bd56:	429a      	cmp	r2, r3
 802bd58:	d12a      	bne.n	802bdb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 802bd5a:	693b      	ldr	r3, [r7, #16]
 802bd5c:	091b      	lsrs	r3, r3, #4
 802bd5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802bd62:	687b      	ldr	r3, [r7, #4]
 802bd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802bd66:	429a      	cmp	r2, r3
 802bd68:	d122      	bne.n	802bdb0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 802bd6a:	68fb      	ldr	r3, [r7, #12]
 802bd6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802bd70:	687b      	ldr	r3, [r7, #4]
 802bd72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bd74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 802bd76:	429a      	cmp	r2, r3
 802bd78:	d11a      	bne.n	802bdb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 802bd7a:	68fb      	ldr	r3, [r7, #12]
 802bd7c:	0a5b      	lsrs	r3, r3, #9
 802bd7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802bd82:	687b      	ldr	r3, [r7, #4]
 802bd84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802bd86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 802bd88:	429a      	cmp	r2, r3
 802bd8a:	d111      	bne.n	802bdb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 802bd8c:	68fb      	ldr	r3, [r7, #12]
 802bd8e:	0c1b      	lsrs	r3, r3, #16
 802bd90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802bd94:	687b      	ldr	r3, [r7, #4]
 802bd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bd98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 802bd9a:	429a      	cmp	r2, r3
 802bd9c:	d108      	bne.n	802bdb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 802bd9e:	68fb      	ldr	r3, [r7, #12]
 802bda0:	0e1b      	lsrs	r3, r3, #24
 802bda2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802bda6:	687b      	ldr	r3, [r7, #4]
 802bda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802bdaa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 802bdac:	429a      	cmp	r2, r3
 802bdae:	d001      	beq.n	802bdb4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 802bdb0:	2301      	movs	r3, #1
 802bdb2:	e02b      	b.n	802be0c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 802bdb4:	4b17      	ldr	r3, [pc, #92]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802bdb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802bdb8:	08db      	lsrs	r3, r3, #3
 802bdba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802bdbe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 802bdc0:	687b      	ldr	r3, [r7, #4]
 802bdc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bdc4:	693a      	ldr	r2, [r7, #16]
 802bdc6:	429a      	cmp	r2, r3
 802bdc8:	d01f      	beq.n	802be0a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 802bdca:	4b12      	ldr	r3, [pc, #72]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802bdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bdce:	4a11      	ldr	r2, [pc, #68]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802bdd0:	f023 0301 	bic.w	r3, r3, #1
 802bdd4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 802bdd6:	f7fe fc69 	bl	802a6ac <HAL_GetTick>
 802bdda:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 802bddc:	bf00      	nop
 802bdde:	f7fe fc65 	bl	802a6ac <HAL_GetTick>
 802bde2:	4602      	mov	r2, r0
 802bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bde6:	4293      	cmp	r3, r2
 802bde8:	d0f9      	beq.n	802bdde <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 802bdea:	4b0a      	ldr	r3, [pc, #40]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802bdec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802bdee:	4b0a      	ldr	r3, [pc, #40]	; (802be18 <HAL_RCC_OscConfig+0x8b0>)
 802bdf0:	4013      	ands	r3, r2
 802bdf2:	687a      	ldr	r2, [r7, #4]
 802bdf4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 802bdf6:	00d2      	lsls	r2, r2, #3
 802bdf8:	4906      	ldr	r1, [pc, #24]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802bdfa:	4313      	orrs	r3, r2
 802bdfc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 802bdfe:	4b05      	ldr	r3, [pc, #20]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802be00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802be02:	4a04      	ldr	r2, [pc, #16]	; (802be14 <HAL_RCC_OscConfig+0x8ac>)
 802be04:	f043 0301 	orr.w	r3, r3, #1
 802be08:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 802be0a:	2300      	movs	r3, #0
}
 802be0c:	4618      	mov	r0, r3
 802be0e:	3730      	adds	r7, #48	; 0x30
 802be10:	46bd      	mov	sp, r7
 802be12:	bd80      	pop	{r7, pc}
 802be14:	58024400 	.word	0x58024400
 802be18:	ffff0007 	.word	0xffff0007

0802be1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802be1c:	b580      	push	{r7, lr}
 802be1e:	b086      	sub	sp, #24
 802be20:	af00      	add	r7, sp, #0
 802be22:	6078      	str	r0, [r7, #4]
 802be24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 802be26:	687b      	ldr	r3, [r7, #4]
 802be28:	2b00      	cmp	r3, #0
 802be2a:	d101      	bne.n	802be30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802be2c:	2301      	movs	r3, #1
 802be2e:	e19c      	b.n	802c16a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 802be30:	4b8a      	ldr	r3, [pc, #552]	; (802c05c <HAL_RCC_ClockConfig+0x240>)
 802be32:	681b      	ldr	r3, [r3, #0]
 802be34:	f003 030f 	and.w	r3, r3, #15
 802be38:	683a      	ldr	r2, [r7, #0]
 802be3a:	429a      	cmp	r2, r3
 802be3c:	d910      	bls.n	802be60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802be3e:	4b87      	ldr	r3, [pc, #540]	; (802c05c <HAL_RCC_ClockConfig+0x240>)
 802be40:	681b      	ldr	r3, [r3, #0]
 802be42:	f023 020f 	bic.w	r2, r3, #15
 802be46:	4985      	ldr	r1, [pc, #532]	; (802c05c <HAL_RCC_ClockConfig+0x240>)
 802be48:	683b      	ldr	r3, [r7, #0]
 802be4a:	4313      	orrs	r3, r2
 802be4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802be4e:	4b83      	ldr	r3, [pc, #524]	; (802c05c <HAL_RCC_ClockConfig+0x240>)
 802be50:	681b      	ldr	r3, [r3, #0]
 802be52:	f003 030f 	and.w	r3, r3, #15
 802be56:	683a      	ldr	r2, [r7, #0]
 802be58:	429a      	cmp	r2, r3
 802be5a:	d001      	beq.n	802be60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 802be5c:	2301      	movs	r3, #1
 802be5e:	e184      	b.n	802c16a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 802be60:	687b      	ldr	r3, [r7, #4]
 802be62:	681b      	ldr	r3, [r3, #0]
 802be64:	f003 0304 	and.w	r3, r3, #4
 802be68:	2b00      	cmp	r3, #0
 802be6a:	d010      	beq.n	802be8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 802be6c:	687b      	ldr	r3, [r7, #4]
 802be6e:	691a      	ldr	r2, [r3, #16]
 802be70:	4b7b      	ldr	r3, [pc, #492]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802be72:	699b      	ldr	r3, [r3, #24]
 802be74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802be78:	429a      	cmp	r2, r3
 802be7a:	d908      	bls.n	802be8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 802be7c:	4b78      	ldr	r3, [pc, #480]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802be7e:	699b      	ldr	r3, [r3, #24]
 802be80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802be84:	687b      	ldr	r3, [r7, #4]
 802be86:	691b      	ldr	r3, [r3, #16]
 802be88:	4975      	ldr	r1, [pc, #468]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802be8a:	4313      	orrs	r3, r2
 802be8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802be8e:	687b      	ldr	r3, [r7, #4]
 802be90:	681b      	ldr	r3, [r3, #0]
 802be92:	f003 0308 	and.w	r3, r3, #8
 802be96:	2b00      	cmp	r3, #0
 802be98:	d010      	beq.n	802bebc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 802be9a:	687b      	ldr	r3, [r7, #4]
 802be9c:	695a      	ldr	r2, [r3, #20]
 802be9e:	4b70      	ldr	r3, [pc, #448]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bea0:	69db      	ldr	r3, [r3, #28]
 802bea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802bea6:	429a      	cmp	r2, r3
 802bea8:	d908      	bls.n	802bebc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 802beaa:	4b6d      	ldr	r3, [pc, #436]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802beac:	69db      	ldr	r3, [r3, #28]
 802beae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802beb2:	687b      	ldr	r3, [r7, #4]
 802beb4:	695b      	ldr	r3, [r3, #20]
 802beb6:	496a      	ldr	r1, [pc, #424]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802beb8:	4313      	orrs	r3, r2
 802beba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802bebc:	687b      	ldr	r3, [r7, #4]
 802bebe:	681b      	ldr	r3, [r3, #0]
 802bec0:	f003 0310 	and.w	r3, r3, #16
 802bec4:	2b00      	cmp	r3, #0
 802bec6:	d010      	beq.n	802beea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 802bec8:	687b      	ldr	r3, [r7, #4]
 802beca:	699a      	ldr	r2, [r3, #24]
 802becc:	4b64      	ldr	r3, [pc, #400]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bece:	69db      	ldr	r3, [r3, #28]
 802bed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802bed4:	429a      	cmp	r2, r3
 802bed6:	d908      	bls.n	802beea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 802bed8:	4b61      	ldr	r3, [pc, #388]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802beda:	69db      	ldr	r3, [r3, #28]
 802bedc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 802bee0:	687b      	ldr	r3, [r7, #4]
 802bee2:	699b      	ldr	r3, [r3, #24]
 802bee4:	495e      	ldr	r1, [pc, #376]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bee6:	4313      	orrs	r3, r2
 802bee8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 802beea:	687b      	ldr	r3, [r7, #4]
 802beec:	681b      	ldr	r3, [r3, #0]
 802beee:	f003 0320 	and.w	r3, r3, #32
 802bef2:	2b00      	cmp	r3, #0
 802bef4:	d010      	beq.n	802bf18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 802bef6:	687b      	ldr	r3, [r7, #4]
 802bef8:	69da      	ldr	r2, [r3, #28]
 802befa:	4b59      	ldr	r3, [pc, #356]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802befc:	6a1b      	ldr	r3, [r3, #32]
 802befe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802bf02:	429a      	cmp	r2, r3
 802bf04:	d908      	bls.n	802bf18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 802bf06:	4b56      	ldr	r3, [pc, #344]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bf08:	6a1b      	ldr	r3, [r3, #32]
 802bf0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802bf0e:	687b      	ldr	r3, [r7, #4]
 802bf10:	69db      	ldr	r3, [r3, #28]
 802bf12:	4953      	ldr	r1, [pc, #332]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bf14:	4313      	orrs	r3, r2
 802bf16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802bf18:	687b      	ldr	r3, [r7, #4]
 802bf1a:	681b      	ldr	r3, [r3, #0]
 802bf1c:	f003 0302 	and.w	r3, r3, #2
 802bf20:	2b00      	cmp	r3, #0
 802bf22:	d010      	beq.n	802bf46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 802bf24:	687b      	ldr	r3, [r7, #4]
 802bf26:	68da      	ldr	r2, [r3, #12]
 802bf28:	4b4d      	ldr	r3, [pc, #308]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bf2a:	699b      	ldr	r3, [r3, #24]
 802bf2c:	f003 030f 	and.w	r3, r3, #15
 802bf30:	429a      	cmp	r2, r3
 802bf32:	d908      	bls.n	802bf46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802bf34:	4b4a      	ldr	r3, [pc, #296]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bf36:	699b      	ldr	r3, [r3, #24]
 802bf38:	f023 020f 	bic.w	r2, r3, #15
 802bf3c:	687b      	ldr	r3, [r7, #4]
 802bf3e:	68db      	ldr	r3, [r3, #12]
 802bf40:	4947      	ldr	r1, [pc, #284]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bf42:	4313      	orrs	r3, r2
 802bf44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802bf46:	687b      	ldr	r3, [r7, #4]
 802bf48:	681b      	ldr	r3, [r3, #0]
 802bf4a:	f003 0301 	and.w	r3, r3, #1
 802bf4e:	2b00      	cmp	r3, #0
 802bf50:	d055      	beq.n	802bffe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 802bf52:	4b43      	ldr	r3, [pc, #268]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bf54:	699b      	ldr	r3, [r3, #24]
 802bf56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 802bf5a:	687b      	ldr	r3, [r7, #4]
 802bf5c:	689b      	ldr	r3, [r3, #8]
 802bf5e:	4940      	ldr	r1, [pc, #256]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bf60:	4313      	orrs	r3, r2
 802bf62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802bf64:	687b      	ldr	r3, [r7, #4]
 802bf66:	685b      	ldr	r3, [r3, #4]
 802bf68:	2b02      	cmp	r3, #2
 802bf6a:	d107      	bne.n	802bf7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802bf6c:	4b3c      	ldr	r3, [pc, #240]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bf6e:	681b      	ldr	r3, [r3, #0]
 802bf70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802bf74:	2b00      	cmp	r3, #0
 802bf76:	d121      	bne.n	802bfbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802bf78:	2301      	movs	r3, #1
 802bf7a:	e0f6      	b.n	802c16a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802bf7c:	687b      	ldr	r3, [r7, #4]
 802bf7e:	685b      	ldr	r3, [r3, #4]
 802bf80:	2b03      	cmp	r3, #3
 802bf82:	d107      	bne.n	802bf94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802bf84:	4b36      	ldr	r3, [pc, #216]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bf86:	681b      	ldr	r3, [r3, #0]
 802bf88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802bf8c:	2b00      	cmp	r3, #0
 802bf8e:	d115      	bne.n	802bfbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802bf90:	2301      	movs	r3, #1
 802bf92:	e0ea      	b.n	802c16a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 802bf94:	687b      	ldr	r3, [r7, #4]
 802bf96:	685b      	ldr	r3, [r3, #4]
 802bf98:	2b01      	cmp	r3, #1
 802bf9a:	d107      	bne.n	802bfac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802bf9c:	4b30      	ldr	r3, [pc, #192]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bf9e:	681b      	ldr	r3, [r3, #0]
 802bfa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802bfa4:	2b00      	cmp	r3, #0
 802bfa6:	d109      	bne.n	802bfbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802bfa8:	2301      	movs	r3, #1
 802bfaa:	e0de      	b.n	802c16a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802bfac:	4b2c      	ldr	r3, [pc, #176]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bfae:	681b      	ldr	r3, [r3, #0]
 802bfb0:	f003 0304 	and.w	r3, r3, #4
 802bfb4:	2b00      	cmp	r3, #0
 802bfb6:	d101      	bne.n	802bfbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802bfb8:	2301      	movs	r3, #1
 802bfba:	e0d6      	b.n	802c16a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 802bfbc:	4b28      	ldr	r3, [pc, #160]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bfbe:	691b      	ldr	r3, [r3, #16]
 802bfc0:	f023 0207 	bic.w	r2, r3, #7
 802bfc4:	687b      	ldr	r3, [r7, #4]
 802bfc6:	685b      	ldr	r3, [r3, #4]
 802bfc8:	4925      	ldr	r1, [pc, #148]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bfca:	4313      	orrs	r3, r2
 802bfcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802bfce:	f7fe fb6d 	bl	802a6ac <HAL_GetTick>
 802bfd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802bfd4:	e00a      	b.n	802bfec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802bfd6:	f7fe fb69 	bl	802a6ac <HAL_GetTick>
 802bfda:	4602      	mov	r2, r0
 802bfdc:	697b      	ldr	r3, [r7, #20]
 802bfde:	1ad3      	subs	r3, r2, r3
 802bfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 802bfe4:	4293      	cmp	r3, r2
 802bfe6:	d901      	bls.n	802bfec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 802bfe8:	2303      	movs	r3, #3
 802bfea:	e0be      	b.n	802c16a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802bfec:	4b1c      	ldr	r3, [pc, #112]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802bfee:	691b      	ldr	r3, [r3, #16]
 802bff0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 802bff4:	687b      	ldr	r3, [r7, #4]
 802bff6:	685b      	ldr	r3, [r3, #4]
 802bff8:	00db      	lsls	r3, r3, #3
 802bffa:	429a      	cmp	r2, r3
 802bffc:	d1eb      	bne.n	802bfd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802bffe:	687b      	ldr	r3, [r7, #4]
 802c000:	681b      	ldr	r3, [r3, #0]
 802c002:	f003 0302 	and.w	r3, r3, #2
 802c006:	2b00      	cmp	r3, #0
 802c008:	d010      	beq.n	802c02c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 802c00a:	687b      	ldr	r3, [r7, #4]
 802c00c:	68da      	ldr	r2, [r3, #12]
 802c00e:	4b14      	ldr	r3, [pc, #80]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802c010:	699b      	ldr	r3, [r3, #24]
 802c012:	f003 030f 	and.w	r3, r3, #15
 802c016:	429a      	cmp	r2, r3
 802c018:	d208      	bcs.n	802c02c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802c01a:	4b11      	ldr	r3, [pc, #68]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802c01c:	699b      	ldr	r3, [r3, #24]
 802c01e:	f023 020f 	bic.w	r2, r3, #15
 802c022:	687b      	ldr	r3, [r7, #4]
 802c024:	68db      	ldr	r3, [r3, #12]
 802c026:	490e      	ldr	r1, [pc, #56]	; (802c060 <HAL_RCC_ClockConfig+0x244>)
 802c028:	4313      	orrs	r3, r2
 802c02a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 802c02c:	4b0b      	ldr	r3, [pc, #44]	; (802c05c <HAL_RCC_ClockConfig+0x240>)
 802c02e:	681b      	ldr	r3, [r3, #0]
 802c030:	f003 030f 	and.w	r3, r3, #15
 802c034:	683a      	ldr	r2, [r7, #0]
 802c036:	429a      	cmp	r2, r3
 802c038:	d214      	bcs.n	802c064 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802c03a:	4b08      	ldr	r3, [pc, #32]	; (802c05c <HAL_RCC_ClockConfig+0x240>)
 802c03c:	681b      	ldr	r3, [r3, #0]
 802c03e:	f023 020f 	bic.w	r2, r3, #15
 802c042:	4906      	ldr	r1, [pc, #24]	; (802c05c <HAL_RCC_ClockConfig+0x240>)
 802c044:	683b      	ldr	r3, [r7, #0]
 802c046:	4313      	orrs	r3, r2
 802c048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802c04a:	4b04      	ldr	r3, [pc, #16]	; (802c05c <HAL_RCC_ClockConfig+0x240>)
 802c04c:	681b      	ldr	r3, [r3, #0]
 802c04e:	f003 030f 	and.w	r3, r3, #15
 802c052:	683a      	ldr	r2, [r7, #0]
 802c054:	429a      	cmp	r2, r3
 802c056:	d005      	beq.n	802c064 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 802c058:	2301      	movs	r3, #1
 802c05a:	e086      	b.n	802c16a <HAL_RCC_ClockConfig+0x34e>
 802c05c:	52002000 	.word	0x52002000
 802c060:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 802c064:	687b      	ldr	r3, [r7, #4]
 802c066:	681b      	ldr	r3, [r3, #0]
 802c068:	f003 0304 	and.w	r3, r3, #4
 802c06c:	2b00      	cmp	r3, #0
 802c06e:	d010      	beq.n	802c092 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 802c070:	687b      	ldr	r3, [r7, #4]
 802c072:	691a      	ldr	r2, [r3, #16]
 802c074:	4b3f      	ldr	r3, [pc, #252]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c076:	699b      	ldr	r3, [r3, #24]
 802c078:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802c07c:	429a      	cmp	r2, r3
 802c07e:	d208      	bcs.n	802c092 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 802c080:	4b3c      	ldr	r3, [pc, #240]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c082:	699b      	ldr	r3, [r3, #24]
 802c084:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802c088:	687b      	ldr	r3, [r7, #4]
 802c08a:	691b      	ldr	r3, [r3, #16]
 802c08c:	4939      	ldr	r1, [pc, #228]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c08e:	4313      	orrs	r3, r2
 802c090:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802c092:	687b      	ldr	r3, [r7, #4]
 802c094:	681b      	ldr	r3, [r3, #0]
 802c096:	f003 0308 	and.w	r3, r3, #8
 802c09a:	2b00      	cmp	r3, #0
 802c09c:	d010      	beq.n	802c0c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 802c09e:	687b      	ldr	r3, [r7, #4]
 802c0a0:	695a      	ldr	r2, [r3, #20]
 802c0a2:	4b34      	ldr	r3, [pc, #208]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c0a4:	69db      	ldr	r3, [r3, #28]
 802c0a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802c0aa:	429a      	cmp	r2, r3
 802c0ac:	d208      	bcs.n	802c0c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 802c0ae:	4b31      	ldr	r3, [pc, #196]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c0b0:	69db      	ldr	r3, [r3, #28]
 802c0b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802c0b6:	687b      	ldr	r3, [r7, #4]
 802c0b8:	695b      	ldr	r3, [r3, #20]
 802c0ba:	492e      	ldr	r1, [pc, #184]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c0bc:	4313      	orrs	r3, r2
 802c0be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802c0c0:	687b      	ldr	r3, [r7, #4]
 802c0c2:	681b      	ldr	r3, [r3, #0]
 802c0c4:	f003 0310 	and.w	r3, r3, #16
 802c0c8:	2b00      	cmp	r3, #0
 802c0ca:	d010      	beq.n	802c0ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 802c0cc:	687b      	ldr	r3, [r7, #4]
 802c0ce:	699a      	ldr	r2, [r3, #24]
 802c0d0:	4b28      	ldr	r3, [pc, #160]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c0d2:	69db      	ldr	r3, [r3, #28]
 802c0d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802c0d8:	429a      	cmp	r2, r3
 802c0da:	d208      	bcs.n	802c0ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 802c0dc:	4b25      	ldr	r3, [pc, #148]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c0de:	69db      	ldr	r3, [r3, #28]
 802c0e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 802c0e4:	687b      	ldr	r3, [r7, #4]
 802c0e6:	699b      	ldr	r3, [r3, #24]
 802c0e8:	4922      	ldr	r1, [pc, #136]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c0ea:	4313      	orrs	r3, r2
 802c0ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 802c0ee:	687b      	ldr	r3, [r7, #4]
 802c0f0:	681b      	ldr	r3, [r3, #0]
 802c0f2:	f003 0320 	and.w	r3, r3, #32
 802c0f6:	2b00      	cmp	r3, #0
 802c0f8:	d010      	beq.n	802c11c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 802c0fa:	687b      	ldr	r3, [r7, #4]
 802c0fc:	69da      	ldr	r2, [r3, #28]
 802c0fe:	4b1d      	ldr	r3, [pc, #116]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c100:	6a1b      	ldr	r3, [r3, #32]
 802c102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802c106:	429a      	cmp	r2, r3
 802c108:	d208      	bcs.n	802c11c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 802c10a:	4b1a      	ldr	r3, [pc, #104]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c10c:	6a1b      	ldr	r3, [r3, #32]
 802c10e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802c112:	687b      	ldr	r3, [r7, #4]
 802c114:	69db      	ldr	r3, [r3, #28]
 802c116:	4917      	ldr	r1, [pc, #92]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c118:	4313      	orrs	r3, r2
 802c11a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802c11c:	f000 f834 	bl	802c188 <HAL_RCC_GetSysClockFreq>
 802c120:	4602      	mov	r2, r0
 802c122:	4b14      	ldr	r3, [pc, #80]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c124:	699b      	ldr	r3, [r3, #24]
 802c126:	0a1b      	lsrs	r3, r3, #8
 802c128:	f003 030f 	and.w	r3, r3, #15
 802c12c:	4912      	ldr	r1, [pc, #72]	; (802c178 <HAL_RCC_ClockConfig+0x35c>)
 802c12e:	5ccb      	ldrb	r3, [r1, r3]
 802c130:	f003 031f 	and.w	r3, r3, #31
 802c134:	fa22 f303 	lsr.w	r3, r2, r3
 802c138:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802c13a:	4b0e      	ldr	r3, [pc, #56]	; (802c174 <HAL_RCC_ClockConfig+0x358>)
 802c13c:	699b      	ldr	r3, [r3, #24]
 802c13e:	f003 030f 	and.w	r3, r3, #15
 802c142:	4a0d      	ldr	r2, [pc, #52]	; (802c178 <HAL_RCC_ClockConfig+0x35c>)
 802c144:	5cd3      	ldrb	r3, [r2, r3]
 802c146:	f003 031f 	and.w	r3, r3, #31
 802c14a:	693a      	ldr	r2, [r7, #16]
 802c14c:	fa22 f303 	lsr.w	r3, r2, r3
 802c150:	4a0a      	ldr	r2, [pc, #40]	; (802c17c <HAL_RCC_ClockConfig+0x360>)
 802c152:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802c154:	4a0a      	ldr	r2, [pc, #40]	; (802c180 <HAL_RCC_ClockConfig+0x364>)
 802c156:	693b      	ldr	r3, [r7, #16]
 802c158:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 802c15a:	4b0a      	ldr	r3, [pc, #40]	; (802c184 <HAL_RCC_ClockConfig+0x368>)
 802c15c:	681b      	ldr	r3, [r3, #0]
 802c15e:	4618      	mov	r0, r3
 802c160:	f7fe fa5a 	bl	802a618 <HAL_InitTick>
 802c164:	4603      	mov	r3, r0
 802c166:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 802c168:	7bfb      	ldrb	r3, [r7, #15]
}
 802c16a:	4618      	mov	r0, r3
 802c16c:	3718      	adds	r7, #24
 802c16e:	46bd      	mov	sp, r7
 802c170:	bd80      	pop	{r7, pc}
 802c172:	bf00      	nop
 802c174:	58024400 	.word	0x58024400
 802c178:	08033300 	.word	0x08033300
 802c17c:	240000b8 	.word	0x240000b8
 802c180:	240000b4 	.word	0x240000b4
 802c184:	240000bc 	.word	0x240000bc

0802c188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802c188:	b480      	push	{r7}
 802c18a:	b089      	sub	sp, #36	; 0x24
 802c18c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 802c18e:	4bb3      	ldr	r3, [pc, #716]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c190:	691b      	ldr	r3, [r3, #16]
 802c192:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802c196:	2b18      	cmp	r3, #24
 802c198:	f200 8155 	bhi.w	802c446 <HAL_RCC_GetSysClockFreq+0x2be>
 802c19c:	a201      	add	r2, pc, #4	; (adr r2, 802c1a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 802c19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c1a2:	bf00      	nop
 802c1a4:	0802c209 	.word	0x0802c209
 802c1a8:	0802c447 	.word	0x0802c447
 802c1ac:	0802c447 	.word	0x0802c447
 802c1b0:	0802c447 	.word	0x0802c447
 802c1b4:	0802c447 	.word	0x0802c447
 802c1b8:	0802c447 	.word	0x0802c447
 802c1bc:	0802c447 	.word	0x0802c447
 802c1c0:	0802c447 	.word	0x0802c447
 802c1c4:	0802c22f 	.word	0x0802c22f
 802c1c8:	0802c447 	.word	0x0802c447
 802c1cc:	0802c447 	.word	0x0802c447
 802c1d0:	0802c447 	.word	0x0802c447
 802c1d4:	0802c447 	.word	0x0802c447
 802c1d8:	0802c447 	.word	0x0802c447
 802c1dc:	0802c447 	.word	0x0802c447
 802c1e0:	0802c447 	.word	0x0802c447
 802c1e4:	0802c235 	.word	0x0802c235
 802c1e8:	0802c447 	.word	0x0802c447
 802c1ec:	0802c447 	.word	0x0802c447
 802c1f0:	0802c447 	.word	0x0802c447
 802c1f4:	0802c447 	.word	0x0802c447
 802c1f8:	0802c447 	.word	0x0802c447
 802c1fc:	0802c447 	.word	0x0802c447
 802c200:	0802c447 	.word	0x0802c447
 802c204:	0802c23b 	.word	0x0802c23b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802c208:	4b94      	ldr	r3, [pc, #592]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c20a:	681b      	ldr	r3, [r3, #0]
 802c20c:	f003 0320 	and.w	r3, r3, #32
 802c210:	2b00      	cmp	r3, #0
 802c212:	d009      	beq.n	802c228 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802c214:	4b91      	ldr	r3, [pc, #580]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c216:	681b      	ldr	r3, [r3, #0]
 802c218:	08db      	lsrs	r3, r3, #3
 802c21a:	f003 0303 	and.w	r3, r3, #3
 802c21e:	4a90      	ldr	r2, [pc, #576]	; (802c460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 802c220:	fa22 f303 	lsr.w	r3, r2, r3
 802c224:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 802c226:	e111      	b.n	802c44c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 802c228:	4b8d      	ldr	r3, [pc, #564]	; (802c460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 802c22a:	61bb      	str	r3, [r7, #24]
      break;
 802c22c:	e10e      	b.n	802c44c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 802c22e:	4b8d      	ldr	r3, [pc, #564]	; (802c464 <HAL_RCC_GetSysClockFreq+0x2dc>)
 802c230:	61bb      	str	r3, [r7, #24]
      break;
 802c232:	e10b      	b.n	802c44c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 802c234:	4b8c      	ldr	r3, [pc, #560]	; (802c468 <HAL_RCC_GetSysClockFreq+0x2e0>)
 802c236:	61bb      	str	r3, [r7, #24]
      break;
 802c238:	e108      	b.n	802c44c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802c23a:	4b88      	ldr	r3, [pc, #544]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c23e:	f003 0303 	and.w	r3, r3, #3
 802c242:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 802c244:	4b85      	ldr	r3, [pc, #532]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c248:	091b      	lsrs	r3, r3, #4
 802c24a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c24e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 802c250:	4b82      	ldr	r3, [pc, #520]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c254:	f003 0301 	and.w	r3, r3, #1
 802c258:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 802c25a:	4b80      	ldr	r3, [pc, #512]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c25e:	08db      	lsrs	r3, r3, #3
 802c260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802c264:	68fa      	ldr	r2, [r7, #12]
 802c266:	fb02 f303 	mul.w	r3, r2, r3
 802c26a:	ee07 3a90 	vmov	s15, r3
 802c26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c272:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 802c276:	693b      	ldr	r3, [r7, #16]
 802c278:	2b00      	cmp	r3, #0
 802c27a:	f000 80e1 	beq.w	802c440 <HAL_RCC_GetSysClockFreq+0x2b8>
 802c27e:	697b      	ldr	r3, [r7, #20]
 802c280:	2b02      	cmp	r3, #2
 802c282:	f000 8083 	beq.w	802c38c <HAL_RCC_GetSysClockFreq+0x204>
 802c286:	697b      	ldr	r3, [r7, #20]
 802c288:	2b02      	cmp	r3, #2
 802c28a:	f200 80a1 	bhi.w	802c3d0 <HAL_RCC_GetSysClockFreq+0x248>
 802c28e:	697b      	ldr	r3, [r7, #20]
 802c290:	2b00      	cmp	r3, #0
 802c292:	d003      	beq.n	802c29c <HAL_RCC_GetSysClockFreq+0x114>
 802c294:	697b      	ldr	r3, [r7, #20]
 802c296:	2b01      	cmp	r3, #1
 802c298:	d056      	beq.n	802c348 <HAL_RCC_GetSysClockFreq+0x1c0>
 802c29a:	e099      	b.n	802c3d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802c29c:	4b6f      	ldr	r3, [pc, #444]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c29e:	681b      	ldr	r3, [r3, #0]
 802c2a0:	f003 0320 	and.w	r3, r3, #32
 802c2a4:	2b00      	cmp	r3, #0
 802c2a6:	d02d      	beq.n	802c304 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802c2a8:	4b6c      	ldr	r3, [pc, #432]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c2aa:	681b      	ldr	r3, [r3, #0]
 802c2ac:	08db      	lsrs	r3, r3, #3
 802c2ae:	f003 0303 	and.w	r3, r3, #3
 802c2b2:	4a6b      	ldr	r2, [pc, #428]	; (802c460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 802c2b4:	fa22 f303 	lsr.w	r3, r2, r3
 802c2b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802c2ba:	687b      	ldr	r3, [r7, #4]
 802c2bc:	ee07 3a90 	vmov	s15, r3
 802c2c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c2c4:	693b      	ldr	r3, [r7, #16]
 802c2c6:	ee07 3a90 	vmov	s15, r3
 802c2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c2ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c2d2:	4b62      	ldr	r3, [pc, #392]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c2da:	ee07 3a90 	vmov	s15, r3
 802c2de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c2e2:	ed97 6a02 	vldr	s12, [r7, #8]
 802c2e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 802c46c <HAL_RCC_GetSysClockFreq+0x2e4>
 802c2ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c2ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c2f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c2fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 802c302:	e087      	b.n	802c414 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802c304:	693b      	ldr	r3, [r7, #16]
 802c306:	ee07 3a90 	vmov	s15, r3
 802c30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c30e:	eddf 6a58 	vldr	s13, [pc, #352]	; 802c470 <HAL_RCC_GetSysClockFreq+0x2e8>
 802c312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c316:	4b51      	ldr	r3, [pc, #324]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c31e:	ee07 3a90 	vmov	s15, r3
 802c322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c326:	ed97 6a02 	vldr	s12, [r7, #8]
 802c32a:	eddf 5a50 	vldr	s11, [pc, #320]	; 802c46c <HAL_RCC_GetSysClockFreq+0x2e4>
 802c32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c342:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802c346:	e065      	b.n	802c414 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802c348:	693b      	ldr	r3, [r7, #16]
 802c34a:	ee07 3a90 	vmov	s15, r3
 802c34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c352:	eddf 6a48 	vldr	s13, [pc, #288]	; 802c474 <HAL_RCC_GetSysClockFreq+0x2ec>
 802c356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c35a:	4b40      	ldr	r3, [pc, #256]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c35e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c362:	ee07 3a90 	vmov	s15, r3
 802c366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c36a:	ed97 6a02 	vldr	s12, [r7, #8]
 802c36e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802c46c <HAL_RCC_GetSysClockFreq+0x2e4>
 802c372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c37a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c382:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c386:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802c38a:	e043      	b.n	802c414 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802c38c:	693b      	ldr	r3, [r7, #16]
 802c38e:	ee07 3a90 	vmov	s15, r3
 802c392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c396:	eddf 6a38 	vldr	s13, [pc, #224]	; 802c478 <HAL_RCC_GetSysClockFreq+0x2f0>
 802c39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c39e:	4b2f      	ldr	r3, [pc, #188]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c3a6:	ee07 3a90 	vmov	s15, r3
 802c3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c3ae:	ed97 6a02 	vldr	s12, [r7, #8]
 802c3b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 802c46c <HAL_RCC_GetSysClockFreq+0x2e4>
 802c3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c3be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c3ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802c3ce:	e021      	b.n	802c414 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802c3d0:	693b      	ldr	r3, [r7, #16]
 802c3d2:	ee07 3a90 	vmov	s15, r3
 802c3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802c3da:	eddf 6a26 	vldr	s13, [pc, #152]	; 802c474 <HAL_RCC_GetSysClockFreq+0x2ec>
 802c3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802c3e2:	4b1e      	ldr	r3, [pc, #120]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c3ea:	ee07 3a90 	vmov	s15, r3
 802c3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802c3f2:	ed97 6a02 	vldr	s12, [r7, #8]
 802c3f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 802c46c <HAL_RCC_GetSysClockFreq+0x2e4>
 802c3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802c3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802c402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802c406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802c40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802c40e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802c412:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 802c414:	4b11      	ldr	r3, [pc, #68]	; (802c45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 802c416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c418:	0a5b      	lsrs	r3, r3, #9
 802c41a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c41e:	3301      	adds	r3, #1
 802c420:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 802c422:	683b      	ldr	r3, [r7, #0]
 802c424:	ee07 3a90 	vmov	s15, r3
 802c428:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802c42c:	edd7 6a07 	vldr	s13, [r7, #28]
 802c430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802c434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802c438:	ee17 3a90 	vmov	r3, s15
 802c43c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 802c43e:	e005      	b.n	802c44c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 802c440:	2300      	movs	r3, #0
 802c442:	61bb      	str	r3, [r7, #24]
      break;
 802c444:	e002      	b.n	802c44c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 802c446:	4b07      	ldr	r3, [pc, #28]	; (802c464 <HAL_RCC_GetSysClockFreq+0x2dc>)
 802c448:	61bb      	str	r3, [r7, #24]
      break;
 802c44a:	bf00      	nop
  }

  return sysclockfreq;
 802c44c:	69bb      	ldr	r3, [r7, #24]
}
 802c44e:	4618      	mov	r0, r3
 802c450:	3724      	adds	r7, #36	; 0x24
 802c452:	46bd      	mov	sp, r7
 802c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c458:	4770      	bx	lr
 802c45a:	bf00      	nop
 802c45c:	58024400 	.word	0x58024400
 802c460:	03d09000 	.word	0x03d09000
 802c464:	003d0900 	.word	0x003d0900
 802c468:	017d7840 	.word	0x017d7840
 802c46c:	46000000 	.word	0x46000000
 802c470:	4c742400 	.word	0x4c742400
 802c474:	4a742400 	.word	0x4a742400
 802c478:	4bbebc20 	.word	0x4bbebc20

0802c47c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802c47c:	b580      	push	{r7, lr}
 802c47e:	b082      	sub	sp, #8
 802c480:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 802c482:	f7ff fe81 	bl	802c188 <HAL_RCC_GetSysClockFreq>
 802c486:	4602      	mov	r2, r0
 802c488:	4b10      	ldr	r3, [pc, #64]	; (802c4cc <HAL_RCC_GetHCLKFreq+0x50>)
 802c48a:	699b      	ldr	r3, [r3, #24]
 802c48c:	0a1b      	lsrs	r3, r3, #8
 802c48e:	f003 030f 	and.w	r3, r3, #15
 802c492:	490f      	ldr	r1, [pc, #60]	; (802c4d0 <HAL_RCC_GetHCLKFreq+0x54>)
 802c494:	5ccb      	ldrb	r3, [r1, r3]
 802c496:	f003 031f 	and.w	r3, r3, #31
 802c49a:	fa22 f303 	lsr.w	r3, r2, r3
 802c49e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802c4a0:	4b0a      	ldr	r3, [pc, #40]	; (802c4cc <HAL_RCC_GetHCLKFreq+0x50>)
 802c4a2:	699b      	ldr	r3, [r3, #24]
 802c4a4:	f003 030f 	and.w	r3, r3, #15
 802c4a8:	4a09      	ldr	r2, [pc, #36]	; (802c4d0 <HAL_RCC_GetHCLKFreq+0x54>)
 802c4aa:	5cd3      	ldrb	r3, [r2, r3]
 802c4ac:	f003 031f 	and.w	r3, r3, #31
 802c4b0:	687a      	ldr	r2, [r7, #4]
 802c4b2:	fa22 f303 	lsr.w	r3, r2, r3
 802c4b6:	4a07      	ldr	r2, [pc, #28]	; (802c4d4 <HAL_RCC_GetHCLKFreq+0x58>)
 802c4b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802c4ba:	4a07      	ldr	r2, [pc, #28]	; (802c4d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 802c4bc:	687b      	ldr	r3, [r7, #4]
 802c4be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 802c4c0:	4b04      	ldr	r3, [pc, #16]	; (802c4d4 <HAL_RCC_GetHCLKFreq+0x58>)
 802c4c2:	681b      	ldr	r3, [r3, #0]
}
 802c4c4:	4618      	mov	r0, r3
 802c4c6:	3708      	adds	r7, #8
 802c4c8:	46bd      	mov	sp, r7
 802c4ca:	bd80      	pop	{r7, pc}
 802c4cc:	58024400 	.word	0x58024400
 802c4d0:	08033300 	.word	0x08033300
 802c4d4:	240000b8 	.word	0x240000b8
 802c4d8:	240000b4 	.word	0x240000b4

0802c4dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802c4dc:	b580      	push	{r7, lr}
 802c4de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 802c4e0:	f7ff ffcc 	bl	802c47c <HAL_RCC_GetHCLKFreq>
 802c4e4:	4602      	mov	r2, r0
 802c4e6:	4b06      	ldr	r3, [pc, #24]	; (802c500 <HAL_RCC_GetPCLK1Freq+0x24>)
 802c4e8:	69db      	ldr	r3, [r3, #28]
 802c4ea:	091b      	lsrs	r3, r3, #4
 802c4ec:	f003 0307 	and.w	r3, r3, #7
 802c4f0:	4904      	ldr	r1, [pc, #16]	; (802c504 <HAL_RCC_GetPCLK1Freq+0x28>)
 802c4f2:	5ccb      	ldrb	r3, [r1, r3]
 802c4f4:	f003 031f 	and.w	r3, r3, #31
 802c4f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 802c4fc:	4618      	mov	r0, r3
 802c4fe:	bd80      	pop	{r7, pc}
 802c500:	58024400 	.word	0x58024400
 802c504:	08033300 	.word	0x08033300

0802c508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802c508:	b580      	push	{r7, lr}
 802c50a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 802c50c:	f7ff ffb6 	bl	802c47c <HAL_RCC_GetHCLKFreq>
 802c510:	4602      	mov	r2, r0
 802c512:	4b06      	ldr	r3, [pc, #24]	; (802c52c <HAL_RCC_GetPCLK2Freq+0x24>)
 802c514:	69db      	ldr	r3, [r3, #28]
 802c516:	0a1b      	lsrs	r3, r3, #8
 802c518:	f003 0307 	and.w	r3, r3, #7
 802c51c:	4904      	ldr	r1, [pc, #16]	; (802c530 <HAL_RCC_GetPCLK2Freq+0x28>)
 802c51e:	5ccb      	ldrb	r3, [r1, r3]
 802c520:	f003 031f 	and.w	r3, r3, #31
 802c524:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 802c528:	4618      	mov	r0, r3
 802c52a:	bd80      	pop	{r7, pc}
 802c52c:	58024400 	.word	0x58024400
 802c530:	08033300 	.word	0x08033300

0802c534 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 802c534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802c538:	b0ca      	sub	sp, #296	; 0x128
 802c53a:	af00      	add	r7, sp, #0
 802c53c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 802c540:	2300      	movs	r3, #0
 802c542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 802c546:	2300      	movs	r3, #0
 802c548:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 802c54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c554:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 802c558:	2500      	movs	r5, #0
 802c55a:	ea54 0305 	orrs.w	r3, r4, r5
 802c55e:	d049      	beq.n	802c5f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 802c560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c566:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802c56a:	d02f      	beq.n	802c5cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 802c56c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802c570:	d828      	bhi.n	802c5c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 802c572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802c576:	d01a      	beq.n	802c5ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 802c578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802c57c:	d822      	bhi.n	802c5c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 802c57e:	2b00      	cmp	r3, #0
 802c580:	d003      	beq.n	802c58a <HAL_RCCEx_PeriphCLKConfig+0x56>
 802c582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802c586:	d007      	beq.n	802c598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 802c588:	e01c      	b.n	802c5c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c58a:	4bb8      	ldr	r3, [pc, #736]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c58e:	4ab7      	ldr	r2, [pc, #732]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c594:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 802c596:	e01a      	b.n	802c5ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802c598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c59c:	3308      	adds	r3, #8
 802c59e:	2102      	movs	r1, #2
 802c5a0:	4618      	mov	r0, r3
 802c5a2:	f001 fc8f 	bl	802dec4 <RCCEx_PLL2_Config>
 802c5a6:	4603      	mov	r3, r0
 802c5a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 802c5ac:	e00f      	b.n	802c5ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802c5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c5b2:	3328      	adds	r3, #40	; 0x28
 802c5b4:	2102      	movs	r1, #2
 802c5b6:	4618      	mov	r0, r3
 802c5b8:	f001 fd36 	bl	802e028 <RCCEx_PLL3_Config>
 802c5bc:	4603      	mov	r3, r0
 802c5be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 802c5c2:	e004      	b.n	802c5ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c5c4:	2301      	movs	r3, #1
 802c5c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c5ca:	e000      	b.n	802c5ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 802c5cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c5ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c5d2:	2b00      	cmp	r3, #0
 802c5d4:	d10a      	bne.n	802c5ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 802c5d6:	4ba5      	ldr	r3, [pc, #660]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c5d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c5da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 802c5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c5e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c5e4:	4aa1      	ldr	r2, [pc, #644]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c5e6:	430b      	orrs	r3, r1
 802c5e8:	6513      	str	r3, [r2, #80]	; 0x50
 802c5ea:	e003      	b.n	802c5f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c5ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c5f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 802c5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c5fc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 802c600:	f04f 0900 	mov.w	r9, #0
 802c604:	ea58 0309 	orrs.w	r3, r8, r9
 802c608:	d047      	beq.n	802c69a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 802c60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c610:	2b04      	cmp	r3, #4
 802c612:	d82a      	bhi.n	802c66a <HAL_RCCEx_PeriphCLKConfig+0x136>
 802c614:	a201      	add	r2, pc, #4	; (adr r2, 802c61c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 802c616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c61a:	bf00      	nop
 802c61c:	0802c631 	.word	0x0802c631
 802c620:	0802c63f 	.word	0x0802c63f
 802c624:	0802c655 	.word	0x0802c655
 802c628:	0802c673 	.word	0x0802c673
 802c62c:	0802c673 	.word	0x0802c673
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c630:	4b8e      	ldr	r3, [pc, #568]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c634:	4a8d      	ldr	r2, [pc, #564]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c63a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c63c:	e01a      	b.n	802c674 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802c63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c642:	3308      	adds	r3, #8
 802c644:	2100      	movs	r1, #0
 802c646:	4618      	mov	r0, r3
 802c648:	f001 fc3c 	bl	802dec4 <RCCEx_PLL2_Config>
 802c64c:	4603      	mov	r3, r0
 802c64e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c652:	e00f      	b.n	802c674 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802c654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c658:	3328      	adds	r3, #40	; 0x28
 802c65a:	2100      	movs	r1, #0
 802c65c:	4618      	mov	r0, r3
 802c65e:	f001 fce3 	bl	802e028 <RCCEx_PLL3_Config>
 802c662:	4603      	mov	r3, r0
 802c664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c668:	e004      	b.n	802c674 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c66a:	2301      	movs	r3, #1
 802c66c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c670:	e000      	b.n	802c674 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 802c672:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c678:	2b00      	cmp	r3, #0
 802c67a:	d10a      	bne.n	802c692 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802c67c:	4b7b      	ldr	r3, [pc, #492]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c680:	f023 0107 	bic.w	r1, r3, #7
 802c684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c68a:	4a78      	ldr	r2, [pc, #480]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c68c:	430b      	orrs	r3, r1
 802c68e:	6513      	str	r3, [r2, #80]	; 0x50
 802c690:	e003      	b.n	802c69a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c696:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 802c69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c6a2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 802c6a6:	f04f 0b00 	mov.w	fp, #0
 802c6aa:	ea5a 030b 	orrs.w	r3, sl, fp
 802c6ae:	d04c      	beq.n	802c74a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 802c6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c6b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c6ba:	d030      	beq.n	802c71e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 802c6bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c6c0:	d829      	bhi.n	802c716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 802c6c2:	2bc0      	cmp	r3, #192	; 0xc0
 802c6c4:	d02d      	beq.n	802c722 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 802c6c6:	2bc0      	cmp	r3, #192	; 0xc0
 802c6c8:	d825      	bhi.n	802c716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 802c6ca:	2b80      	cmp	r3, #128	; 0x80
 802c6cc:	d018      	beq.n	802c700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 802c6ce:	2b80      	cmp	r3, #128	; 0x80
 802c6d0:	d821      	bhi.n	802c716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 802c6d2:	2b00      	cmp	r3, #0
 802c6d4:	d002      	beq.n	802c6dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 802c6d6:	2b40      	cmp	r3, #64	; 0x40
 802c6d8:	d007      	beq.n	802c6ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 802c6da:	e01c      	b.n	802c716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c6dc:	4b63      	ldr	r3, [pc, #396]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c6e0:	4a62      	ldr	r2, [pc, #392]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c6e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c6e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 802c6e8:	e01c      	b.n	802c724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802c6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c6ee:	3308      	adds	r3, #8
 802c6f0:	2100      	movs	r1, #0
 802c6f2:	4618      	mov	r0, r3
 802c6f4:	f001 fbe6 	bl	802dec4 <RCCEx_PLL2_Config>
 802c6f8:	4603      	mov	r3, r0
 802c6fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 802c6fe:	e011      	b.n	802c724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802c700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c704:	3328      	adds	r3, #40	; 0x28
 802c706:	2100      	movs	r1, #0
 802c708:	4618      	mov	r0, r3
 802c70a:	f001 fc8d 	bl	802e028 <RCCEx_PLL3_Config>
 802c70e:	4603      	mov	r3, r0
 802c710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 802c714:	e006      	b.n	802c724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c716:	2301      	movs	r3, #1
 802c718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c71c:	e002      	b.n	802c724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 802c71e:	bf00      	nop
 802c720:	e000      	b.n	802c724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 802c722:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c728:	2b00      	cmp	r3, #0
 802c72a:	d10a      	bne.n	802c742 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 802c72c:	4b4f      	ldr	r3, [pc, #316]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c72e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c730:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 802c734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c73a:	4a4c      	ldr	r2, [pc, #304]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c73c:	430b      	orrs	r3, r1
 802c73e:	6513      	str	r3, [r2, #80]	; 0x50
 802c740:	e003      	b.n	802c74a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 802c74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c752:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 802c756:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 802c75a:	2300      	movs	r3, #0
 802c75c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 802c760:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 802c764:	460b      	mov	r3, r1
 802c766:	4313      	orrs	r3, r2
 802c768:	d053      	beq.n	802c812 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 802c76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c76e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 802c772:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802c776:	d035      	beq.n	802c7e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 802c778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802c77c:	d82e      	bhi.n	802c7dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 802c77e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 802c782:	d031      	beq.n	802c7e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 802c784:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 802c788:	d828      	bhi.n	802c7dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 802c78a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802c78e:	d01a      	beq.n	802c7c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 802c790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802c794:	d822      	bhi.n	802c7dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 802c796:	2b00      	cmp	r3, #0
 802c798:	d003      	beq.n	802c7a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 802c79a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802c79e:	d007      	beq.n	802c7b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 802c7a0:	e01c      	b.n	802c7dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c7a2:	4b32      	ldr	r3, [pc, #200]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c7a6:	4a31      	ldr	r2, [pc, #196]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c7a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c7ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c7ae:	e01c      	b.n	802c7ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802c7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c7b4:	3308      	adds	r3, #8
 802c7b6:	2100      	movs	r1, #0
 802c7b8:	4618      	mov	r0, r3
 802c7ba:	f001 fb83 	bl	802dec4 <RCCEx_PLL2_Config>
 802c7be:	4603      	mov	r3, r0
 802c7c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 802c7c4:	e011      	b.n	802c7ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802c7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c7ca:	3328      	adds	r3, #40	; 0x28
 802c7cc:	2100      	movs	r1, #0
 802c7ce:	4618      	mov	r0, r3
 802c7d0:	f001 fc2a 	bl	802e028 <RCCEx_PLL3_Config>
 802c7d4:	4603      	mov	r3, r0
 802c7d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c7da:	e006      	b.n	802c7ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 802c7dc:	2301      	movs	r3, #1
 802c7de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c7e2:	e002      	b.n	802c7ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 802c7e4:	bf00      	nop
 802c7e6:	e000      	b.n	802c7ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 802c7e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c7ee:	2b00      	cmp	r3, #0
 802c7f0:	d10b      	bne.n	802c80a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 802c7f2:	4b1e      	ldr	r3, [pc, #120]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c7f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c7f6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 802c7fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c7fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 802c802:	4a1a      	ldr	r2, [pc, #104]	; (802c86c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c804:	430b      	orrs	r3, r1
 802c806:	6593      	str	r3, [r2, #88]	; 0x58
 802c808:	e003      	b.n	802c812 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c80a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c80e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 802c812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c81a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 802c81e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 802c822:	2300      	movs	r3, #0
 802c824:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 802c828:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 802c82c:	460b      	mov	r3, r1
 802c82e:	4313      	orrs	r3, r2
 802c830:	d056      	beq.n	802c8e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 802c832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c836:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802c83a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802c83e:	d038      	beq.n	802c8b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 802c840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802c844:	d831      	bhi.n	802c8aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 802c846:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 802c84a:	d034      	beq.n	802c8b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 802c84c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 802c850:	d82b      	bhi.n	802c8aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 802c852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802c856:	d01d      	beq.n	802c894 <HAL_RCCEx_PeriphCLKConfig+0x360>
 802c858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802c85c:	d825      	bhi.n	802c8aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 802c85e:	2b00      	cmp	r3, #0
 802c860:	d006      	beq.n	802c870 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 802c862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802c866:	d00a      	beq.n	802c87e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 802c868:	e01f      	b.n	802c8aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 802c86a:	bf00      	nop
 802c86c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c870:	4ba2      	ldr	r3, [pc, #648]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c874:	4aa1      	ldr	r2, [pc, #644]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c87a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c87c:	e01c      	b.n	802c8b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802c87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c882:	3308      	adds	r3, #8
 802c884:	2100      	movs	r1, #0
 802c886:	4618      	mov	r0, r3
 802c888:	f001 fb1c 	bl	802dec4 <RCCEx_PLL2_Config>
 802c88c:	4603      	mov	r3, r0
 802c88e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 802c892:	e011      	b.n	802c8b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802c894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c898:	3328      	adds	r3, #40	; 0x28
 802c89a:	2100      	movs	r1, #0
 802c89c:	4618      	mov	r0, r3
 802c89e:	f001 fbc3 	bl	802e028 <RCCEx_PLL3_Config>
 802c8a2:	4603      	mov	r3, r0
 802c8a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c8a8:	e006      	b.n	802c8b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 802c8aa:	2301      	movs	r3, #1
 802c8ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c8b0:	e002      	b.n	802c8b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 802c8b2:	bf00      	nop
 802c8b4:	e000      	b.n	802c8b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 802c8b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c8b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c8bc:	2b00      	cmp	r3, #0
 802c8be:	d10b      	bne.n	802c8d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 802c8c0:	4b8e      	ldr	r3, [pc, #568]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c8c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c8c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 802c8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c8cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802c8d0:	4a8a      	ldr	r2, [pc, #552]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c8d2:	430b      	orrs	r3, r1
 802c8d4:	6593      	str	r3, [r2, #88]	; 0x58
 802c8d6:	e003      	b.n	802c8e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c8d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c8dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 802c8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c8e8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 802c8ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 802c8f0:	2300      	movs	r3, #0
 802c8f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 802c8f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 802c8fa:	460b      	mov	r3, r1
 802c8fc:	4313      	orrs	r3, r2
 802c8fe:	d03a      	beq.n	802c976 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 802c900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c906:	2b30      	cmp	r3, #48	; 0x30
 802c908:	d01f      	beq.n	802c94a <HAL_RCCEx_PeriphCLKConfig+0x416>
 802c90a:	2b30      	cmp	r3, #48	; 0x30
 802c90c:	d819      	bhi.n	802c942 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 802c90e:	2b20      	cmp	r3, #32
 802c910:	d00c      	beq.n	802c92c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 802c912:	2b20      	cmp	r3, #32
 802c914:	d815      	bhi.n	802c942 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 802c916:	2b00      	cmp	r3, #0
 802c918:	d019      	beq.n	802c94e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 802c91a:	2b10      	cmp	r3, #16
 802c91c:	d111      	bne.n	802c942 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c91e:	4b77      	ldr	r3, [pc, #476]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c922:	4a76      	ldr	r2, [pc, #472]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c928:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 802c92a:	e011      	b.n	802c950 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802c92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c930:	3308      	adds	r3, #8
 802c932:	2102      	movs	r1, #2
 802c934:	4618      	mov	r0, r3
 802c936:	f001 fac5 	bl	802dec4 <RCCEx_PLL2_Config>
 802c93a:	4603      	mov	r3, r0
 802c93c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 802c940:	e006      	b.n	802c950 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 802c942:	2301      	movs	r3, #1
 802c944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c948:	e002      	b.n	802c950 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 802c94a:	bf00      	nop
 802c94c:	e000      	b.n	802c950 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 802c94e:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c950:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c954:	2b00      	cmp	r3, #0
 802c956:	d10a      	bne.n	802c96e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 802c958:	4b68      	ldr	r3, [pc, #416]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c95a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c95c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 802c960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c966:	4a65      	ldr	r2, [pc, #404]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c968:	430b      	orrs	r3, r1
 802c96a:	64d3      	str	r3, [r2, #76]	; 0x4c
 802c96c:	e003      	b.n	802c976 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c96e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c972:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 802c976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c97e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 802c982:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 802c986:	2300      	movs	r3, #0
 802c988:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 802c98c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 802c990:	460b      	mov	r3, r1
 802c992:	4313      	orrs	r3, r2
 802c994:	d051      	beq.n	802ca3a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 802c996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c99a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c99c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802c9a0:	d035      	beq.n	802ca0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 802c9a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802c9a6:	d82e      	bhi.n	802ca06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 802c9a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 802c9ac:	d031      	beq.n	802ca12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 802c9ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 802c9b2:	d828      	bhi.n	802ca06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 802c9b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802c9b8:	d01a      	beq.n	802c9f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 802c9ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802c9be:	d822      	bhi.n	802ca06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 802c9c0:	2b00      	cmp	r3, #0
 802c9c2:	d003      	beq.n	802c9cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 802c9c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c9c8:	d007      	beq.n	802c9da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 802c9ca:	e01c      	b.n	802ca06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c9cc:	4b4b      	ldr	r3, [pc, #300]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c9d0:	4a4a      	ldr	r2, [pc, #296]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c9d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c9d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 802c9d8:	e01c      	b.n	802ca14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802c9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c9de:	3308      	adds	r3, #8
 802c9e0:	2100      	movs	r1, #0
 802c9e2:	4618      	mov	r0, r3
 802c9e4:	f001 fa6e 	bl	802dec4 <RCCEx_PLL2_Config>
 802c9e8:	4603      	mov	r3, r0
 802c9ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 802c9ee:	e011      	b.n	802ca14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802c9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c9f4:	3328      	adds	r3, #40	; 0x28
 802c9f6:	2100      	movs	r1, #0
 802c9f8:	4618      	mov	r0, r3
 802c9fa:	f001 fb15 	bl	802e028 <RCCEx_PLL3_Config>
 802c9fe:	4603      	mov	r3, r0
 802ca00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 802ca04:	e006      	b.n	802ca14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802ca06:	2301      	movs	r3, #1
 802ca08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802ca0c:	e002      	b.n	802ca14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 802ca0e:	bf00      	nop
 802ca10:	e000      	b.n	802ca14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 802ca12:	bf00      	nop
    }

    if (ret == HAL_OK)
 802ca14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802ca18:	2b00      	cmp	r3, #0
 802ca1a:	d10a      	bne.n	802ca32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 802ca1c:	4b37      	ldr	r3, [pc, #220]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802ca1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802ca20:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 802ca24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ca28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802ca2a:	4a34      	ldr	r2, [pc, #208]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802ca2c:	430b      	orrs	r3, r1
 802ca2e:	6513      	str	r3, [r2, #80]	; 0x50
 802ca30:	e003      	b.n	802ca3a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802ca32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802ca36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 802ca3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ca42:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 802ca46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802ca4a:	2300      	movs	r3, #0
 802ca4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 802ca50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 802ca54:	460b      	mov	r3, r1
 802ca56:	4313      	orrs	r3, r2
 802ca58:	d056      	beq.n	802cb08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 802ca5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ca5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802ca60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802ca64:	d033      	beq.n	802cace <HAL_RCCEx_PeriphCLKConfig+0x59a>
 802ca66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802ca6a:	d82c      	bhi.n	802cac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 802ca6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802ca70:	d02f      	beq.n	802cad2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 802ca72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802ca76:	d826      	bhi.n	802cac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 802ca78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 802ca7c:	d02b      	beq.n	802cad6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 802ca7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 802ca82:	d820      	bhi.n	802cac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 802ca84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802ca88:	d012      	beq.n	802cab0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 802ca8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802ca8e:	d81a      	bhi.n	802cac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 802ca90:	2b00      	cmp	r3, #0
 802ca92:	d022      	beq.n	802cada <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 802ca94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802ca98:	d115      	bne.n	802cac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802ca9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ca9e:	3308      	adds	r3, #8
 802caa0:	2101      	movs	r1, #1
 802caa2:	4618      	mov	r0, r3
 802caa4:	f001 fa0e 	bl	802dec4 <RCCEx_PLL2_Config>
 802caa8:	4603      	mov	r3, r0
 802caaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 802caae:	e015      	b.n	802cadc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802cab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cab4:	3328      	adds	r3, #40	; 0x28
 802cab6:	2101      	movs	r1, #1
 802cab8:	4618      	mov	r0, r3
 802caba:	f001 fab5 	bl	802e028 <RCCEx_PLL3_Config>
 802cabe:	4603      	mov	r3, r0
 802cac0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 802cac4:	e00a      	b.n	802cadc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802cac6:	2301      	movs	r3, #1
 802cac8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cacc:	e006      	b.n	802cadc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802cace:	bf00      	nop
 802cad0:	e004      	b.n	802cadc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802cad2:	bf00      	nop
 802cad4:	e002      	b.n	802cadc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802cad6:	bf00      	nop
 802cad8:	e000      	b.n	802cadc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802cada:	bf00      	nop
    }

    if (ret == HAL_OK)
 802cadc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cae0:	2b00      	cmp	r3, #0
 802cae2:	d10d      	bne.n	802cb00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 802cae4:	4b05      	ldr	r3, [pc, #20]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802cae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cae8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 802caec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802caf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802caf2:	4a02      	ldr	r2, [pc, #8]	; (802cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802caf4:	430b      	orrs	r3, r1
 802caf6:	6513      	str	r3, [r2, #80]	; 0x50
 802caf8:	e006      	b.n	802cb08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 802cafa:	bf00      	nop
 802cafc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 802cb00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cb04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 802cb08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb10:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 802cb14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802cb18:	2300      	movs	r3, #0
 802cb1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802cb1e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 802cb22:	460b      	mov	r3, r1
 802cb24:	4313      	orrs	r3, r2
 802cb26:	d055      	beq.n	802cbd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 802cb28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cb2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 802cb30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802cb34:	d033      	beq.n	802cb9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 802cb36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802cb3a:	d82c      	bhi.n	802cb96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 802cb3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802cb40:	d02f      	beq.n	802cba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 802cb42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802cb46:	d826      	bhi.n	802cb96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 802cb48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802cb4c:	d02b      	beq.n	802cba6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 802cb4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802cb52:	d820      	bhi.n	802cb96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 802cb54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802cb58:	d012      	beq.n	802cb80 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 802cb5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802cb5e:	d81a      	bhi.n	802cb96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 802cb60:	2b00      	cmp	r3, #0
 802cb62:	d022      	beq.n	802cbaa <HAL_RCCEx_PeriphCLKConfig+0x676>
 802cb64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802cb68:	d115      	bne.n	802cb96 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802cb6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cb6e:	3308      	adds	r3, #8
 802cb70:	2101      	movs	r1, #1
 802cb72:	4618      	mov	r0, r3
 802cb74:	f001 f9a6 	bl	802dec4 <RCCEx_PLL2_Config>
 802cb78:	4603      	mov	r3, r0
 802cb7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 802cb7e:	e015      	b.n	802cbac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802cb80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cb84:	3328      	adds	r3, #40	; 0x28
 802cb86:	2101      	movs	r1, #1
 802cb88:	4618      	mov	r0, r3
 802cb8a:	f001 fa4d 	bl	802e028 <RCCEx_PLL3_Config>
 802cb8e:	4603      	mov	r3, r0
 802cb90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 802cb94:	e00a      	b.n	802cbac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 802cb96:	2301      	movs	r3, #1
 802cb98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cb9c:	e006      	b.n	802cbac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802cb9e:	bf00      	nop
 802cba0:	e004      	b.n	802cbac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802cba2:	bf00      	nop
 802cba4:	e002      	b.n	802cbac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802cba6:	bf00      	nop
 802cba8:	e000      	b.n	802cbac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802cbaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 802cbac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cbb0:	2b00      	cmp	r3, #0
 802cbb2:	d10b      	bne.n	802cbcc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 802cbb4:	4ba3      	ldr	r3, [pc, #652]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cbb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cbb8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 802cbbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cbc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 802cbc4:	4a9f      	ldr	r2, [pc, #636]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cbc6:	430b      	orrs	r3, r1
 802cbc8:	6593      	str	r3, [r2, #88]	; 0x58
 802cbca:	e003      	b.n	802cbd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802cbcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cbd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 802cbd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cbdc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 802cbe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802cbe4:	2300      	movs	r3, #0
 802cbe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 802cbea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802cbee:	460b      	mov	r3, r1
 802cbf0:	4313      	orrs	r3, r2
 802cbf2:	d037      	beq.n	802cc64 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 802cbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cbfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802cbfe:	d00e      	beq.n	802cc1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 802cc00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802cc04:	d816      	bhi.n	802cc34 <HAL_RCCEx_PeriphCLKConfig+0x700>
 802cc06:	2b00      	cmp	r3, #0
 802cc08:	d018      	beq.n	802cc3c <HAL_RCCEx_PeriphCLKConfig+0x708>
 802cc0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802cc0e:	d111      	bne.n	802cc34 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802cc10:	4b8c      	ldr	r3, [pc, #560]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cc14:	4a8b      	ldr	r2, [pc, #556]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cc16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802cc1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 802cc1c:	e00f      	b.n	802cc3e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802cc1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cc22:	3308      	adds	r3, #8
 802cc24:	2101      	movs	r1, #1
 802cc26:	4618      	mov	r0, r3
 802cc28:	f001 f94c 	bl	802dec4 <RCCEx_PLL2_Config>
 802cc2c:	4603      	mov	r3, r0
 802cc2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 802cc32:	e004      	b.n	802cc3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802cc34:	2301      	movs	r3, #1
 802cc36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cc3a:	e000      	b.n	802cc3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 802cc3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802cc3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cc42:	2b00      	cmp	r3, #0
 802cc44:	d10a      	bne.n	802cc5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 802cc46:	4b7f      	ldr	r3, [pc, #508]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cc48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cc4a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 802cc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cc52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cc54:	4a7b      	ldr	r2, [pc, #492]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cc56:	430b      	orrs	r3, r1
 802cc58:	6513      	str	r3, [r2, #80]	; 0x50
 802cc5a:	e003      	b.n	802cc64 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802cc5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cc60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 802cc64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cc6c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 802cc70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802cc74:	2300      	movs	r3, #0
 802cc76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 802cc7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 802cc7e:	460b      	mov	r3, r1
 802cc80:	4313      	orrs	r3, r2
 802cc82:	d039      	beq.n	802ccf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 802cc84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cc88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802cc8a:	2b03      	cmp	r3, #3
 802cc8c:	d81c      	bhi.n	802ccc8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 802cc8e:	a201      	add	r2, pc, #4	; (adr r2, 802cc94 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 802cc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802cc94:	0802ccd1 	.word	0x0802ccd1
 802cc98:	0802cca5 	.word	0x0802cca5
 802cc9c:	0802ccb3 	.word	0x0802ccb3
 802cca0:	0802ccd1 	.word	0x0802ccd1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802cca4:	4b67      	ldr	r3, [pc, #412]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cca8:	4a66      	ldr	r2, [pc, #408]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802ccaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802ccae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 802ccb0:	e00f      	b.n	802ccd2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802ccb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ccb6:	3308      	adds	r3, #8
 802ccb8:	2102      	movs	r1, #2
 802ccba:	4618      	mov	r0, r3
 802ccbc:	f001 f902 	bl	802dec4 <RCCEx_PLL2_Config>
 802ccc0:	4603      	mov	r3, r0
 802ccc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 802ccc6:	e004      	b.n	802ccd2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 802ccc8:	2301      	movs	r3, #1
 802ccca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802ccce:	e000      	b.n	802ccd2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 802ccd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 802ccd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802ccd6:	2b00      	cmp	r3, #0
 802ccd8:	d10a      	bne.n	802ccf0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 802ccda:	4b5a      	ldr	r3, [pc, #360]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802ccdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802ccde:	f023 0103 	bic.w	r1, r3, #3
 802cce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802cce8:	4a56      	ldr	r2, [pc, #344]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802ccea:	430b      	orrs	r3, r1
 802ccec:	64d3      	str	r3, [r2, #76]	; 0x4c
 802ccee:	e003      	b.n	802ccf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802ccf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802ccf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 802ccf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cd00:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 802cd04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802cd08:	2300      	movs	r3, #0
 802cd0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802cd0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 802cd12:	460b      	mov	r3, r1
 802cd14:	4313      	orrs	r3, r2
 802cd16:	f000 809f 	beq.w	802ce58 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802cd1a:	4b4b      	ldr	r3, [pc, #300]	; (802ce48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802cd1c:	681b      	ldr	r3, [r3, #0]
 802cd1e:	4a4a      	ldr	r2, [pc, #296]	; (802ce48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802cd20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802cd24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802cd26:	f7fd fcc1 	bl	802a6ac <HAL_GetTick>
 802cd2a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802cd2e:	e00b      	b.n	802cd48 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802cd30:	f7fd fcbc 	bl	802a6ac <HAL_GetTick>
 802cd34:	4602      	mov	r2, r0
 802cd36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802cd3a:	1ad3      	subs	r3, r2, r3
 802cd3c:	2b64      	cmp	r3, #100	; 0x64
 802cd3e:	d903      	bls.n	802cd48 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 802cd40:	2303      	movs	r3, #3
 802cd42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cd46:	e005      	b.n	802cd54 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802cd48:	4b3f      	ldr	r3, [pc, #252]	; (802ce48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802cd4a:	681b      	ldr	r3, [r3, #0]
 802cd4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802cd50:	2b00      	cmp	r3, #0
 802cd52:	d0ed      	beq.n	802cd30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 802cd54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cd58:	2b00      	cmp	r3, #0
 802cd5a:	d179      	bne.n	802ce50 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 802cd5c:	4b39      	ldr	r3, [pc, #228]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cd5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802cd60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cd64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802cd68:	4053      	eors	r3, r2
 802cd6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802cd6e:	2b00      	cmp	r3, #0
 802cd70:	d015      	beq.n	802cd9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802cd72:	4b34      	ldr	r3, [pc, #208]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cd74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cd76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802cd7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 802cd7e:	4b31      	ldr	r3, [pc, #196]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cd82:	4a30      	ldr	r2, [pc, #192]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cd84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802cd88:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 802cd8a:	4b2e      	ldr	r3, [pc, #184]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cd8e:	4a2d      	ldr	r2, [pc, #180]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cd90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802cd94:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 802cd96:	4a2b      	ldr	r2, [pc, #172]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cd98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802cd9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 802cd9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cda2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802cda6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802cdaa:	d118      	bne.n	802cdde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802cdac:	f7fd fc7e 	bl	802a6ac <HAL_GetTick>
 802cdb0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802cdb4:	e00d      	b.n	802cdd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802cdb6:	f7fd fc79 	bl	802a6ac <HAL_GetTick>
 802cdba:	4602      	mov	r2, r0
 802cdbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802cdc0:	1ad2      	subs	r2, r2, r3
 802cdc2:	f241 3388 	movw	r3, #5000	; 0x1388
 802cdc6:	429a      	cmp	r2, r3
 802cdc8:	d903      	bls.n	802cdd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 802cdca:	2303      	movs	r3, #3
 802cdcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 802cdd0:	e005      	b.n	802cdde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802cdd2:	4b1c      	ldr	r3, [pc, #112]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cdd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cdd6:	f003 0302 	and.w	r3, r3, #2
 802cdda:	2b00      	cmp	r3, #0
 802cddc:	d0eb      	beq.n	802cdb6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 802cdde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cde2:	2b00      	cmp	r3, #0
 802cde4:	d129      	bne.n	802ce3a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802cde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cdea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802cdee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802cdf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802cdf6:	d10e      	bne.n	802ce16 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 802cdf8:	4b12      	ldr	r3, [pc, #72]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802cdfa:	691b      	ldr	r3, [r3, #16]
 802cdfc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 802ce00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ce04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802ce08:	091a      	lsrs	r2, r3, #4
 802ce0a:	4b10      	ldr	r3, [pc, #64]	; (802ce4c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 802ce0c:	4013      	ands	r3, r2
 802ce0e:	4a0d      	ldr	r2, [pc, #52]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802ce10:	430b      	orrs	r3, r1
 802ce12:	6113      	str	r3, [r2, #16]
 802ce14:	e005      	b.n	802ce22 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 802ce16:	4b0b      	ldr	r3, [pc, #44]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802ce18:	691b      	ldr	r3, [r3, #16]
 802ce1a:	4a0a      	ldr	r2, [pc, #40]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802ce1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802ce20:	6113      	str	r3, [r2, #16]
 802ce22:	4b08      	ldr	r3, [pc, #32]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802ce24:	6f19      	ldr	r1, [r3, #112]	; 0x70
 802ce26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ce2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802ce2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802ce32:	4a04      	ldr	r2, [pc, #16]	; (802ce44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802ce34:	430b      	orrs	r3, r1
 802ce36:	6713      	str	r3, [r2, #112]	; 0x70
 802ce38:	e00e      	b.n	802ce58 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 802ce3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802ce3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 802ce42:	e009      	b.n	802ce58 <HAL_RCCEx_PeriphCLKConfig+0x924>
 802ce44:	58024400 	.word	0x58024400
 802ce48:	58024800 	.word	0x58024800
 802ce4c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 802ce50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802ce54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 802ce58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ce5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce60:	f002 0301 	and.w	r3, r2, #1
 802ce64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802ce68:	2300      	movs	r3, #0
 802ce6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802ce6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802ce72:	460b      	mov	r3, r1
 802ce74:	4313      	orrs	r3, r2
 802ce76:	f000 8089 	beq.w	802cf8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 802ce7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ce7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802ce80:	2b28      	cmp	r3, #40	; 0x28
 802ce82:	d86b      	bhi.n	802cf5c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 802ce84:	a201      	add	r2, pc, #4	; (adr r2, 802ce8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 802ce86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ce8a:	bf00      	nop
 802ce8c:	0802cf65 	.word	0x0802cf65
 802ce90:	0802cf5d 	.word	0x0802cf5d
 802ce94:	0802cf5d 	.word	0x0802cf5d
 802ce98:	0802cf5d 	.word	0x0802cf5d
 802ce9c:	0802cf5d 	.word	0x0802cf5d
 802cea0:	0802cf5d 	.word	0x0802cf5d
 802cea4:	0802cf5d 	.word	0x0802cf5d
 802cea8:	0802cf5d 	.word	0x0802cf5d
 802ceac:	0802cf31 	.word	0x0802cf31
 802ceb0:	0802cf5d 	.word	0x0802cf5d
 802ceb4:	0802cf5d 	.word	0x0802cf5d
 802ceb8:	0802cf5d 	.word	0x0802cf5d
 802cebc:	0802cf5d 	.word	0x0802cf5d
 802cec0:	0802cf5d 	.word	0x0802cf5d
 802cec4:	0802cf5d 	.word	0x0802cf5d
 802cec8:	0802cf5d 	.word	0x0802cf5d
 802cecc:	0802cf47 	.word	0x0802cf47
 802ced0:	0802cf5d 	.word	0x0802cf5d
 802ced4:	0802cf5d 	.word	0x0802cf5d
 802ced8:	0802cf5d 	.word	0x0802cf5d
 802cedc:	0802cf5d 	.word	0x0802cf5d
 802cee0:	0802cf5d 	.word	0x0802cf5d
 802cee4:	0802cf5d 	.word	0x0802cf5d
 802cee8:	0802cf5d 	.word	0x0802cf5d
 802ceec:	0802cf65 	.word	0x0802cf65
 802cef0:	0802cf5d 	.word	0x0802cf5d
 802cef4:	0802cf5d 	.word	0x0802cf5d
 802cef8:	0802cf5d 	.word	0x0802cf5d
 802cefc:	0802cf5d 	.word	0x0802cf5d
 802cf00:	0802cf5d 	.word	0x0802cf5d
 802cf04:	0802cf5d 	.word	0x0802cf5d
 802cf08:	0802cf5d 	.word	0x0802cf5d
 802cf0c:	0802cf65 	.word	0x0802cf65
 802cf10:	0802cf5d 	.word	0x0802cf5d
 802cf14:	0802cf5d 	.word	0x0802cf5d
 802cf18:	0802cf5d 	.word	0x0802cf5d
 802cf1c:	0802cf5d 	.word	0x0802cf5d
 802cf20:	0802cf5d 	.word	0x0802cf5d
 802cf24:	0802cf5d 	.word	0x0802cf5d
 802cf28:	0802cf5d 	.word	0x0802cf5d
 802cf2c:	0802cf65 	.word	0x0802cf65
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802cf30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cf34:	3308      	adds	r3, #8
 802cf36:	2101      	movs	r1, #1
 802cf38:	4618      	mov	r0, r3
 802cf3a:	f000 ffc3 	bl	802dec4 <RCCEx_PLL2_Config>
 802cf3e:	4603      	mov	r3, r0
 802cf40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 802cf44:	e00f      	b.n	802cf66 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802cf46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cf4a:	3328      	adds	r3, #40	; 0x28
 802cf4c:	2101      	movs	r1, #1
 802cf4e:	4618      	mov	r0, r3
 802cf50:	f001 f86a 	bl	802e028 <RCCEx_PLL3_Config>
 802cf54:	4603      	mov	r3, r0
 802cf56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 802cf5a:	e004      	b.n	802cf66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802cf5c:	2301      	movs	r3, #1
 802cf5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cf62:	e000      	b.n	802cf66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 802cf64:	bf00      	nop
    }

    if (ret == HAL_OK)
 802cf66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cf6a:	2b00      	cmp	r3, #0
 802cf6c:	d10a      	bne.n	802cf84 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 802cf6e:	4bbf      	ldr	r3, [pc, #764]	; (802d26c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802cf70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cf72:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 802cf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cf7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802cf7c:	4abb      	ldr	r2, [pc, #748]	; (802d26c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802cf7e:	430b      	orrs	r3, r1
 802cf80:	6553      	str	r3, [r2, #84]	; 0x54
 802cf82:	e003      	b.n	802cf8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802cf84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cf88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 802cf8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cf94:	f002 0302 	and.w	r3, r2, #2
 802cf98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802cf9c:	2300      	movs	r3, #0
 802cf9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802cfa2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 802cfa6:	460b      	mov	r3, r1
 802cfa8:	4313      	orrs	r3, r2
 802cfaa:	d041      	beq.n	802d030 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 802cfac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cfb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802cfb2:	2b05      	cmp	r3, #5
 802cfb4:	d824      	bhi.n	802d000 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 802cfb6:	a201      	add	r2, pc, #4	; (adr r2, 802cfbc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 802cfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802cfbc:	0802d009 	.word	0x0802d009
 802cfc0:	0802cfd5 	.word	0x0802cfd5
 802cfc4:	0802cfeb 	.word	0x0802cfeb
 802cfc8:	0802d009 	.word	0x0802d009
 802cfcc:	0802d009 	.word	0x0802d009
 802cfd0:	0802d009 	.word	0x0802d009
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802cfd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cfd8:	3308      	adds	r3, #8
 802cfda:	2101      	movs	r1, #1
 802cfdc:	4618      	mov	r0, r3
 802cfde:	f000 ff71 	bl	802dec4 <RCCEx_PLL2_Config>
 802cfe2:	4603      	mov	r3, r0
 802cfe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 802cfe8:	e00f      	b.n	802d00a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802cfea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cfee:	3328      	adds	r3, #40	; 0x28
 802cff0:	2101      	movs	r1, #1
 802cff2:	4618      	mov	r0, r3
 802cff4:	f001 f818 	bl	802e028 <RCCEx_PLL3_Config>
 802cff8:	4603      	mov	r3, r0
 802cffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 802cffe:	e004      	b.n	802d00a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802d000:	2301      	movs	r3, #1
 802d002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802d006:	e000      	b.n	802d00a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 802d008:	bf00      	nop
    }

    if (ret == HAL_OK)
 802d00a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d00e:	2b00      	cmp	r3, #0
 802d010:	d10a      	bne.n	802d028 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 802d012:	4b96      	ldr	r3, [pc, #600]	; (802d26c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802d014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d016:	f023 0107 	bic.w	r1, r3, #7
 802d01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d01e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802d020:	4a92      	ldr	r2, [pc, #584]	; (802d26c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802d022:	430b      	orrs	r3, r1
 802d024:	6553      	str	r3, [r2, #84]	; 0x54
 802d026:	e003      	b.n	802d030 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d02c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 802d030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d034:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d038:	f002 0304 	and.w	r3, r2, #4
 802d03c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802d040:	2300      	movs	r3, #0
 802d042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802d046:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 802d04a:	460b      	mov	r3, r1
 802d04c:	4313      	orrs	r3, r2
 802d04e:	d044      	beq.n	802d0da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 802d050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802d058:	2b05      	cmp	r3, #5
 802d05a:	d825      	bhi.n	802d0a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 802d05c:	a201      	add	r2, pc, #4	; (adr r2, 802d064 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 802d05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d062:	bf00      	nop
 802d064:	0802d0b1 	.word	0x0802d0b1
 802d068:	0802d07d 	.word	0x0802d07d
 802d06c:	0802d093 	.word	0x0802d093
 802d070:	0802d0b1 	.word	0x0802d0b1
 802d074:	0802d0b1 	.word	0x0802d0b1
 802d078:	0802d0b1 	.word	0x0802d0b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802d07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d080:	3308      	adds	r3, #8
 802d082:	2101      	movs	r1, #1
 802d084:	4618      	mov	r0, r3
 802d086:	f000 ff1d 	bl	802dec4 <RCCEx_PLL2_Config>
 802d08a:	4603      	mov	r3, r0
 802d08c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 802d090:	e00f      	b.n	802d0b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802d092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d096:	3328      	adds	r3, #40	; 0x28
 802d098:	2101      	movs	r1, #1
 802d09a:	4618      	mov	r0, r3
 802d09c:	f000 ffc4 	bl	802e028 <RCCEx_PLL3_Config>
 802d0a0:	4603      	mov	r3, r0
 802d0a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 802d0a6:	e004      	b.n	802d0b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802d0a8:	2301      	movs	r3, #1
 802d0aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802d0ae:	e000      	b.n	802d0b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 802d0b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 802d0b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d0b6:	2b00      	cmp	r3, #0
 802d0b8:	d10b      	bne.n	802d0d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 802d0ba:	4b6c      	ldr	r3, [pc, #432]	; (802d26c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802d0bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802d0be:	f023 0107 	bic.w	r1, r3, #7
 802d0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d0c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802d0ca:	4a68      	ldr	r2, [pc, #416]	; (802d26c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802d0cc:	430b      	orrs	r3, r1
 802d0ce:	6593      	str	r3, [r2, #88]	; 0x58
 802d0d0:	e003      	b.n	802d0da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d0d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 802d0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d0e2:	f002 0320 	and.w	r3, r2, #32
 802d0e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802d0ea:	2300      	movs	r3, #0
 802d0ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802d0f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802d0f4:	460b      	mov	r3, r1
 802d0f6:	4313      	orrs	r3, r2
 802d0f8:	d055      	beq.n	802d1a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 802d0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802d102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802d106:	d033      	beq.n	802d170 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 802d108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802d10c:	d82c      	bhi.n	802d168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802d10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802d112:	d02f      	beq.n	802d174 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 802d114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802d118:	d826      	bhi.n	802d168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802d11a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802d11e:	d02b      	beq.n	802d178 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 802d120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802d124:	d820      	bhi.n	802d168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802d126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802d12a:	d012      	beq.n	802d152 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 802d12c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802d130:	d81a      	bhi.n	802d168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802d132:	2b00      	cmp	r3, #0
 802d134:	d022      	beq.n	802d17c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 802d136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802d13a:	d115      	bne.n	802d168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802d13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d140:	3308      	adds	r3, #8
 802d142:	2100      	movs	r1, #0
 802d144:	4618      	mov	r0, r3
 802d146:	f000 febd 	bl	802dec4 <RCCEx_PLL2_Config>
 802d14a:	4603      	mov	r3, r0
 802d14c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 802d150:	e015      	b.n	802d17e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802d152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d156:	3328      	adds	r3, #40	; 0x28
 802d158:	2102      	movs	r1, #2
 802d15a:	4618      	mov	r0, r3
 802d15c:	f000 ff64 	bl	802e028 <RCCEx_PLL3_Config>
 802d160:	4603      	mov	r3, r0
 802d162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 802d166:	e00a      	b.n	802d17e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802d168:	2301      	movs	r3, #1
 802d16a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802d16e:	e006      	b.n	802d17e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802d170:	bf00      	nop
 802d172:	e004      	b.n	802d17e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802d174:	bf00      	nop
 802d176:	e002      	b.n	802d17e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802d178:	bf00      	nop
 802d17a:	e000      	b.n	802d17e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802d17c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802d17e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d182:	2b00      	cmp	r3, #0
 802d184:	d10b      	bne.n	802d19e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 802d186:	4b39      	ldr	r3, [pc, #228]	; (802d26c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802d188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d18a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 802d18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802d196:	4a35      	ldr	r2, [pc, #212]	; (802d26c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802d198:	430b      	orrs	r3, r1
 802d19a:	6553      	str	r3, [r2, #84]	; 0x54
 802d19c:	e003      	b.n	802d1a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d19e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d1a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 802d1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d1ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 802d1b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802d1b6:	2300      	movs	r3, #0
 802d1b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802d1bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 802d1c0:	460b      	mov	r3, r1
 802d1c2:	4313      	orrs	r3, r2
 802d1c4:	d058      	beq.n	802d278 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 802d1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d1ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802d1ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 802d1d2:	d033      	beq.n	802d23c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 802d1d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 802d1d8:	d82c      	bhi.n	802d234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802d1da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802d1de:	d02f      	beq.n	802d240 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 802d1e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802d1e4:	d826      	bhi.n	802d234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802d1e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802d1ea:	d02b      	beq.n	802d244 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 802d1ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802d1f0:	d820      	bhi.n	802d234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802d1f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802d1f6:	d012      	beq.n	802d21e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 802d1f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802d1fc:	d81a      	bhi.n	802d234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802d1fe:	2b00      	cmp	r3, #0
 802d200:	d022      	beq.n	802d248 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 802d202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802d206:	d115      	bne.n	802d234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802d208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d20c:	3308      	adds	r3, #8
 802d20e:	2100      	movs	r1, #0
 802d210:	4618      	mov	r0, r3
 802d212:	f000 fe57 	bl	802dec4 <RCCEx_PLL2_Config>
 802d216:	4603      	mov	r3, r0
 802d218:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 802d21c:	e015      	b.n	802d24a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802d21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d222:	3328      	adds	r3, #40	; 0x28
 802d224:	2102      	movs	r1, #2
 802d226:	4618      	mov	r0, r3
 802d228:	f000 fefe 	bl	802e028 <RCCEx_PLL3_Config>
 802d22c:	4603      	mov	r3, r0
 802d22e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 802d232:	e00a      	b.n	802d24a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802d234:	2301      	movs	r3, #1
 802d236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802d23a:	e006      	b.n	802d24a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802d23c:	bf00      	nop
 802d23e:	e004      	b.n	802d24a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802d240:	bf00      	nop
 802d242:	e002      	b.n	802d24a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802d244:	bf00      	nop
 802d246:	e000      	b.n	802d24a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802d248:	bf00      	nop
    }

    if (ret == HAL_OK)
 802d24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d24e:	2b00      	cmp	r3, #0
 802d250:	d10e      	bne.n	802d270 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 802d252:	4b06      	ldr	r3, [pc, #24]	; (802d26c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802d254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802d256:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 802d25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d25e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802d262:	4a02      	ldr	r2, [pc, #8]	; (802d26c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802d264:	430b      	orrs	r3, r1
 802d266:	6593      	str	r3, [r2, #88]	; 0x58
 802d268:	e006      	b.n	802d278 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 802d26a:	bf00      	nop
 802d26c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d274:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 802d278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d280:	f002 0380 	and.w	r3, r2, #128	; 0x80
 802d284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802d288:	2300      	movs	r3, #0
 802d28a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802d28e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 802d292:	460b      	mov	r3, r1
 802d294:	4313      	orrs	r3, r2
 802d296:	d055      	beq.n	802d344 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 802d298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d29c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 802d2a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 802d2a4:	d033      	beq.n	802d30e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 802d2a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 802d2aa:	d82c      	bhi.n	802d306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802d2ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802d2b0:	d02f      	beq.n	802d312 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 802d2b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802d2b6:	d826      	bhi.n	802d306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802d2b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 802d2bc:	d02b      	beq.n	802d316 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 802d2be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 802d2c2:	d820      	bhi.n	802d306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802d2c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802d2c8:	d012      	beq.n	802d2f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 802d2ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802d2ce:	d81a      	bhi.n	802d306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802d2d0:	2b00      	cmp	r3, #0
 802d2d2:	d022      	beq.n	802d31a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 802d2d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802d2d8:	d115      	bne.n	802d306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802d2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d2de:	3308      	adds	r3, #8
 802d2e0:	2100      	movs	r1, #0
 802d2e2:	4618      	mov	r0, r3
 802d2e4:	f000 fdee 	bl	802dec4 <RCCEx_PLL2_Config>
 802d2e8:	4603      	mov	r3, r0
 802d2ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 802d2ee:	e015      	b.n	802d31c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802d2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d2f4:	3328      	adds	r3, #40	; 0x28
 802d2f6:	2102      	movs	r1, #2
 802d2f8:	4618      	mov	r0, r3
 802d2fa:	f000 fe95 	bl	802e028 <RCCEx_PLL3_Config>
 802d2fe:	4603      	mov	r3, r0
 802d300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 802d304:	e00a      	b.n	802d31c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802d306:	2301      	movs	r3, #1
 802d308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802d30c:	e006      	b.n	802d31c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802d30e:	bf00      	nop
 802d310:	e004      	b.n	802d31c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802d312:	bf00      	nop
 802d314:	e002      	b.n	802d31c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802d316:	bf00      	nop
 802d318:	e000      	b.n	802d31c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802d31a:	bf00      	nop
    }

    if (ret == HAL_OK)
 802d31c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d320:	2b00      	cmp	r3, #0
 802d322:	d10b      	bne.n	802d33c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 802d324:	4ba1      	ldr	r3, [pc, #644]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802d328:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 802d32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d330:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 802d334:	4a9d      	ldr	r2, [pc, #628]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d336:	430b      	orrs	r3, r1
 802d338:	6593      	str	r3, [r2, #88]	; 0x58
 802d33a:	e003      	b.n	802d344 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d33c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d340:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 802d344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d34c:	f002 0308 	and.w	r3, r2, #8
 802d350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802d354:	2300      	movs	r3, #0
 802d356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802d35a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 802d35e:	460b      	mov	r3, r1
 802d360:	4313      	orrs	r3, r2
 802d362:	d01e      	beq.n	802d3a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 802d364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802d36c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802d370:	d10c      	bne.n	802d38c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 802d372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d376:	3328      	adds	r3, #40	; 0x28
 802d378:	2102      	movs	r1, #2
 802d37a:	4618      	mov	r0, r3
 802d37c:	f000 fe54 	bl	802e028 <RCCEx_PLL3_Config>
 802d380:	4603      	mov	r3, r0
 802d382:	2b00      	cmp	r3, #0
 802d384:	d002      	beq.n	802d38c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 802d386:	2301      	movs	r3, #1
 802d388:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 802d38c:	4b87      	ldr	r3, [pc, #540]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d38e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d390:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802d394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802d39c:	4a83      	ldr	r2, [pc, #524]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d39e:	430b      	orrs	r3, r1
 802d3a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 802d3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d3aa:	f002 0310 	and.w	r3, r2, #16
 802d3ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802d3b2:	2300      	movs	r3, #0
 802d3b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802d3b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 802d3bc:	460b      	mov	r3, r1
 802d3be:	4313      	orrs	r3, r2
 802d3c0:	d01e      	beq.n	802d400 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 802d3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d3c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802d3ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802d3ce:	d10c      	bne.n	802d3ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 802d3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d3d4:	3328      	adds	r3, #40	; 0x28
 802d3d6:	2102      	movs	r1, #2
 802d3d8:	4618      	mov	r0, r3
 802d3da:	f000 fe25 	bl	802e028 <RCCEx_PLL3_Config>
 802d3de:	4603      	mov	r3, r0
 802d3e0:	2b00      	cmp	r3, #0
 802d3e2:	d002      	beq.n	802d3ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 802d3e4:	2301      	movs	r3, #1
 802d3e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 802d3ea:	4b70      	ldr	r3, [pc, #448]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802d3ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 802d3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d3f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802d3fa:	4a6c      	ldr	r2, [pc, #432]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d3fc:	430b      	orrs	r3, r1
 802d3fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 802d400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d404:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d408:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 802d40c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802d410:	2300      	movs	r3, #0
 802d412:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802d416:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 802d41a:	460b      	mov	r3, r1
 802d41c:	4313      	orrs	r3, r2
 802d41e:	d03e      	beq.n	802d49e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 802d420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 802d428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802d42c:	d022      	beq.n	802d474 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 802d42e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802d432:	d81b      	bhi.n	802d46c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 802d434:	2b00      	cmp	r3, #0
 802d436:	d003      	beq.n	802d440 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 802d438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802d43c:	d00b      	beq.n	802d456 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 802d43e:	e015      	b.n	802d46c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802d440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d444:	3308      	adds	r3, #8
 802d446:	2100      	movs	r1, #0
 802d448:	4618      	mov	r0, r3
 802d44a:	f000 fd3b 	bl	802dec4 <RCCEx_PLL2_Config>
 802d44e:	4603      	mov	r3, r0
 802d450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 802d454:	e00f      	b.n	802d476 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802d456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d45a:	3328      	adds	r3, #40	; 0x28
 802d45c:	2102      	movs	r1, #2
 802d45e:	4618      	mov	r0, r3
 802d460:	f000 fde2 	bl	802e028 <RCCEx_PLL3_Config>
 802d464:	4603      	mov	r3, r0
 802d466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 802d46a:	e004      	b.n	802d476 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802d46c:	2301      	movs	r3, #1
 802d46e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802d472:	e000      	b.n	802d476 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 802d474:	bf00      	nop
    }

    if (ret == HAL_OK)
 802d476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d47a:	2b00      	cmp	r3, #0
 802d47c:	d10b      	bne.n	802d496 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 802d47e:	4b4b      	ldr	r3, [pc, #300]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802d482:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 802d486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d48a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 802d48e:	4a47      	ldr	r2, [pc, #284]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d490:	430b      	orrs	r3, r1
 802d492:	6593      	str	r3, [r2, #88]	; 0x58
 802d494:	e003      	b.n	802d49e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d49a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 802d49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d4a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 802d4aa:	67bb      	str	r3, [r7, #120]	; 0x78
 802d4ac:	2300      	movs	r3, #0
 802d4ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 802d4b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 802d4b4:	460b      	mov	r3, r1
 802d4b6:	4313      	orrs	r3, r2
 802d4b8:	d03b      	beq.n	802d532 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 802d4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d4be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802d4c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802d4c6:	d01f      	beq.n	802d508 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 802d4c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802d4cc:	d818      	bhi.n	802d500 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 802d4ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802d4d2:	d003      	beq.n	802d4dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 802d4d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802d4d8:	d007      	beq.n	802d4ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 802d4da:	e011      	b.n	802d500 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802d4dc:	4b33      	ldr	r3, [pc, #204]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d4e0:	4a32      	ldr	r2, [pc, #200]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d4e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802d4e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 802d4e8:	e00f      	b.n	802d50a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802d4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d4ee:	3328      	adds	r3, #40	; 0x28
 802d4f0:	2101      	movs	r1, #1
 802d4f2:	4618      	mov	r0, r3
 802d4f4:	f000 fd98 	bl	802e028 <RCCEx_PLL3_Config>
 802d4f8:	4603      	mov	r3, r0
 802d4fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 802d4fe:	e004      	b.n	802d50a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802d500:	2301      	movs	r3, #1
 802d502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802d506:	e000      	b.n	802d50a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 802d508:	bf00      	nop
    }

    if (ret == HAL_OK)
 802d50a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d50e:	2b00      	cmp	r3, #0
 802d510:	d10b      	bne.n	802d52a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 802d512:	4b26      	ldr	r3, [pc, #152]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d516:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 802d51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d51e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802d522:	4a22      	ldr	r2, [pc, #136]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d524:	430b      	orrs	r3, r1
 802d526:	6553      	str	r3, [r2, #84]	; 0x54
 802d528:	e003      	b.n	802d532 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d52a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d52e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 802d532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d536:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d53a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 802d53e:	673b      	str	r3, [r7, #112]	; 0x70
 802d540:	2300      	movs	r3, #0
 802d542:	677b      	str	r3, [r7, #116]	; 0x74
 802d544:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 802d548:	460b      	mov	r3, r1
 802d54a:	4313      	orrs	r3, r2
 802d54c:	d034      	beq.n	802d5b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 802d54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d554:	2b00      	cmp	r3, #0
 802d556:	d003      	beq.n	802d560 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 802d558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802d55c:	d007      	beq.n	802d56e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 802d55e:	e011      	b.n	802d584 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802d560:	4b12      	ldr	r3, [pc, #72]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d564:	4a11      	ldr	r2, [pc, #68]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802d56a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 802d56c:	e00e      	b.n	802d58c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802d56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d572:	3308      	adds	r3, #8
 802d574:	2102      	movs	r1, #2
 802d576:	4618      	mov	r0, r3
 802d578:	f000 fca4 	bl	802dec4 <RCCEx_PLL2_Config>
 802d57c:	4603      	mov	r3, r0
 802d57e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 802d582:	e003      	b.n	802d58c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 802d584:	2301      	movs	r3, #1
 802d586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802d58a:	bf00      	nop
    }

    if (ret == HAL_OK)
 802d58c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d590:	2b00      	cmp	r3, #0
 802d592:	d10d      	bne.n	802d5b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 802d594:	4b05      	ldr	r3, [pc, #20]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d598:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 802d59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d5a2:	4a02      	ldr	r2, [pc, #8]	; (802d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802d5a4:	430b      	orrs	r3, r1
 802d5a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 802d5a8:	e006      	b.n	802d5b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 802d5aa:	bf00      	nop
 802d5ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d5b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d5b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 802d5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d5c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 802d5c4:	66bb      	str	r3, [r7, #104]	; 0x68
 802d5c6:	2300      	movs	r3, #0
 802d5c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 802d5ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 802d5ce:	460b      	mov	r3, r1
 802d5d0:	4313      	orrs	r3, r2
 802d5d2:	d00c      	beq.n	802d5ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 802d5d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d5d8:	3328      	adds	r3, #40	; 0x28
 802d5da:	2102      	movs	r1, #2
 802d5dc:	4618      	mov	r0, r3
 802d5de:	f000 fd23 	bl	802e028 <RCCEx_PLL3_Config>
 802d5e2:	4603      	mov	r3, r0
 802d5e4:	2b00      	cmp	r3, #0
 802d5e6:	d002      	beq.n	802d5ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 802d5e8:	2301      	movs	r3, #1
 802d5ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 802d5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d5f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 802d5fa:	663b      	str	r3, [r7, #96]	; 0x60
 802d5fc:	2300      	movs	r3, #0
 802d5fe:	667b      	str	r3, [r7, #100]	; 0x64
 802d600:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 802d604:	460b      	mov	r3, r1
 802d606:	4313      	orrs	r3, r2
 802d608:	d038      	beq.n	802d67c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 802d60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d60e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802d612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802d616:	d018      	beq.n	802d64a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 802d618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802d61c:	d811      	bhi.n	802d642 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 802d61e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d622:	d014      	beq.n	802d64e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 802d624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d628:	d80b      	bhi.n	802d642 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 802d62a:	2b00      	cmp	r3, #0
 802d62c:	d011      	beq.n	802d652 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 802d62e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802d632:	d106      	bne.n	802d642 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802d634:	4bc3      	ldr	r3, [pc, #780]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d638:	4ac2      	ldr	r2, [pc, #776]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d63a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802d63e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 802d640:	e008      	b.n	802d654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802d642:	2301      	movs	r3, #1
 802d644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802d648:	e004      	b.n	802d654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 802d64a:	bf00      	nop
 802d64c:	e002      	b.n	802d654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 802d64e:	bf00      	nop
 802d650:	e000      	b.n	802d654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 802d652:	bf00      	nop
    }

    if (ret == HAL_OK)
 802d654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d658:	2b00      	cmp	r3, #0
 802d65a:	d10b      	bne.n	802d674 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 802d65c:	4bb9      	ldr	r3, [pc, #740]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d660:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 802d664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802d66c:	4ab5      	ldr	r2, [pc, #724]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d66e:	430b      	orrs	r3, r1
 802d670:	6553      	str	r3, [r2, #84]	; 0x54
 802d672:	e003      	b.n	802d67c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d678:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 802d67c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d680:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d684:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 802d688:	65bb      	str	r3, [r7, #88]	; 0x58
 802d68a:	2300      	movs	r3, #0
 802d68c:	65fb      	str	r3, [r7, #92]	; 0x5c
 802d68e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 802d692:	460b      	mov	r3, r1
 802d694:	4313      	orrs	r3, r2
 802d696:	d009      	beq.n	802d6ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 802d698:	4baa      	ldr	r3, [pc, #680]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d69c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d6a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802d6a6:	4aa7      	ldr	r2, [pc, #668]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d6a8:	430b      	orrs	r3, r1
 802d6aa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 802d6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d6b4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 802d6b8:	653b      	str	r3, [r7, #80]	; 0x50
 802d6ba:	2300      	movs	r3, #0
 802d6bc:	657b      	str	r3, [r7, #84]	; 0x54
 802d6be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 802d6c2:	460b      	mov	r3, r1
 802d6c4:	4313      	orrs	r3, r2
 802d6c6:	d00a      	beq.n	802d6de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 802d6c8:	4b9e      	ldr	r3, [pc, #632]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d6ca:	691b      	ldr	r3, [r3, #16]
 802d6cc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 802d6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d6d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 802d6d8:	4a9a      	ldr	r2, [pc, #616]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d6da:	430b      	orrs	r3, r1
 802d6dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 802d6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d6e6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 802d6ea:	64bb      	str	r3, [r7, #72]	; 0x48
 802d6ec:	2300      	movs	r3, #0
 802d6ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 802d6f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 802d6f4:	460b      	mov	r3, r1
 802d6f6:	4313      	orrs	r3, r2
 802d6f8:	d009      	beq.n	802d70e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 802d6fa:	4b92      	ldr	r3, [pc, #584]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d6fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d6fe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 802d702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d708:	4a8e      	ldr	r2, [pc, #568]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d70a:	430b      	orrs	r3, r1
 802d70c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 802d70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d716:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 802d71a:	643b      	str	r3, [r7, #64]	; 0x40
 802d71c:	2300      	movs	r3, #0
 802d71e:	647b      	str	r3, [r7, #68]	; 0x44
 802d720:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 802d724:	460b      	mov	r3, r1
 802d726:	4313      	orrs	r3, r2
 802d728:	d00e      	beq.n	802d748 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 802d72a:	4b86      	ldr	r3, [pc, #536]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d72c:	691b      	ldr	r3, [r3, #16]
 802d72e:	4a85      	ldr	r2, [pc, #532]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d730:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802d734:	6113      	str	r3, [r2, #16]
 802d736:	4b83      	ldr	r3, [pc, #524]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d738:	6919      	ldr	r1, [r3, #16]
 802d73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d73e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 802d742:	4a80      	ldr	r2, [pc, #512]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d744:	430b      	orrs	r3, r1
 802d746:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 802d748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d750:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 802d754:	63bb      	str	r3, [r7, #56]	; 0x38
 802d756:	2300      	movs	r3, #0
 802d758:	63fb      	str	r3, [r7, #60]	; 0x3c
 802d75a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 802d75e:	460b      	mov	r3, r1
 802d760:	4313      	orrs	r3, r2
 802d762:	d009      	beq.n	802d778 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 802d764:	4b77      	ldr	r3, [pc, #476]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d768:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 802d76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d772:	4a74      	ldr	r2, [pc, #464]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d774:	430b      	orrs	r3, r1
 802d776:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 802d778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d780:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 802d784:	633b      	str	r3, [r7, #48]	; 0x30
 802d786:	2300      	movs	r3, #0
 802d788:	637b      	str	r3, [r7, #52]	; 0x34
 802d78a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 802d78e:	460b      	mov	r3, r1
 802d790:	4313      	orrs	r3, r2
 802d792:	d00a      	beq.n	802d7aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 802d794:	4b6b      	ldr	r3, [pc, #428]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d798:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 802d79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802d7a4:	4a67      	ldr	r2, [pc, #412]	; (802d944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d7a6:	430b      	orrs	r3, r1
 802d7a8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 802d7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d7b2:	2100      	movs	r1, #0
 802d7b4:	62b9      	str	r1, [r7, #40]	; 0x28
 802d7b6:	f003 0301 	and.w	r3, r3, #1
 802d7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d7bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 802d7c0:	460b      	mov	r3, r1
 802d7c2:	4313      	orrs	r3, r2
 802d7c4:	d011      	beq.n	802d7ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802d7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d7ca:	3308      	adds	r3, #8
 802d7cc:	2100      	movs	r1, #0
 802d7ce:	4618      	mov	r0, r3
 802d7d0:	f000 fb78 	bl	802dec4 <RCCEx_PLL2_Config>
 802d7d4:	4603      	mov	r3, r0
 802d7d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802d7da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d7de:	2b00      	cmp	r3, #0
 802d7e0:	d003      	beq.n	802d7ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d7e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d7e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 802d7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d7f2:	2100      	movs	r1, #0
 802d7f4:	6239      	str	r1, [r7, #32]
 802d7f6:	f003 0302 	and.w	r3, r3, #2
 802d7fa:	627b      	str	r3, [r7, #36]	; 0x24
 802d7fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 802d800:	460b      	mov	r3, r1
 802d802:	4313      	orrs	r3, r2
 802d804:	d011      	beq.n	802d82a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802d806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d80a:	3308      	adds	r3, #8
 802d80c:	2101      	movs	r1, #1
 802d80e:	4618      	mov	r0, r3
 802d810:	f000 fb58 	bl	802dec4 <RCCEx_PLL2_Config>
 802d814:	4603      	mov	r3, r0
 802d816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802d81a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d81e:	2b00      	cmp	r3, #0
 802d820:	d003      	beq.n	802d82a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d826:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 802d82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d832:	2100      	movs	r1, #0
 802d834:	61b9      	str	r1, [r7, #24]
 802d836:	f003 0304 	and.w	r3, r3, #4
 802d83a:	61fb      	str	r3, [r7, #28]
 802d83c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802d840:	460b      	mov	r3, r1
 802d842:	4313      	orrs	r3, r2
 802d844:	d011      	beq.n	802d86a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802d846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d84a:	3308      	adds	r3, #8
 802d84c:	2102      	movs	r1, #2
 802d84e:	4618      	mov	r0, r3
 802d850:	f000 fb38 	bl	802dec4 <RCCEx_PLL2_Config>
 802d854:	4603      	mov	r3, r0
 802d856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802d85a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d85e:	2b00      	cmp	r3, #0
 802d860:	d003      	beq.n	802d86a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d866:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 802d86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d872:	2100      	movs	r1, #0
 802d874:	6139      	str	r1, [r7, #16]
 802d876:	f003 0308 	and.w	r3, r3, #8
 802d87a:	617b      	str	r3, [r7, #20]
 802d87c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 802d880:	460b      	mov	r3, r1
 802d882:	4313      	orrs	r3, r2
 802d884:	d011      	beq.n	802d8aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802d886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d88a:	3328      	adds	r3, #40	; 0x28
 802d88c:	2100      	movs	r1, #0
 802d88e:	4618      	mov	r0, r3
 802d890:	f000 fbca 	bl	802e028 <RCCEx_PLL3_Config>
 802d894:	4603      	mov	r3, r0
 802d896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 802d89a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d89e:	2b00      	cmp	r3, #0
 802d8a0:	d003      	beq.n	802d8aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d8a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d8a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 802d8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d8b2:	2100      	movs	r1, #0
 802d8b4:	60b9      	str	r1, [r7, #8]
 802d8b6:	f003 0310 	and.w	r3, r3, #16
 802d8ba:	60fb      	str	r3, [r7, #12]
 802d8bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 802d8c0:	460b      	mov	r3, r1
 802d8c2:	4313      	orrs	r3, r2
 802d8c4:	d011      	beq.n	802d8ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802d8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d8ca:	3328      	adds	r3, #40	; 0x28
 802d8cc:	2101      	movs	r1, #1
 802d8ce:	4618      	mov	r0, r3
 802d8d0:	f000 fbaa 	bl	802e028 <RCCEx_PLL3_Config>
 802d8d4:	4603      	mov	r3, r0
 802d8d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802d8da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d8de:	2b00      	cmp	r3, #0
 802d8e0:	d003      	beq.n	802d8ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d8e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d8e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 802d8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d8f2:	2100      	movs	r1, #0
 802d8f4:	6039      	str	r1, [r7, #0]
 802d8f6:	f003 0320 	and.w	r3, r3, #32
 802d8fa:	607b      	str	r3, [r7, #4]
 802d8fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 802d900:	460b      	mov	r3, r1
 802d902:	4313      	orrs	r3, r2
 802d904:	d011      	beq.n	802d92a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802d906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d90a:	3328      	adds	r3, #40	; 0x28
 802d90c:	2102      	movs	r1, #2
 802d90e:	4618      	mov	r0, r3
 802d910:	f000 fb8a 	bl	802e028 <RCCEx_PLL3_Config>
 802d914:	4603      	mov	r3, r0
 802d916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802d91a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d91e:	2b00      	cmp	r3, #0
 802d920:	d003      	beq.n	802d92a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d926:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 802d92a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 802d92e:	2b00      	cmp	r3, #0
 802d930:	d101      	bne.n	802d936 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 802d932:	2300      	movs	r3, #0
 802d934:	e000      	b.n	802d938 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 802d936:	2301      	movs	r3, #1
}
 802d938:	4618      	mov	r0, r3
 802d93a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 802d93e:	46bd      	mov	sp, r7
 802d940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802d944:	58024400 	.word	0x58024400

0802d948 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 802d948:	b580      	push	{r7, lr}
 802d94a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 802d94c:	f7fe fd96 	bl	802c47c <HAL_RCC_GetHCLKFreq>
 802d950:	4602      	mov	r2, r0
 802d952:	4b06      	ldr	r3, [pc, #24]	; (802d96c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 802d954:	6a1b      	ldr	r3, [r3, #32]
 802d956:	091b      	lsrs	r3, r3, #4
 802d958:	f003 0307 	and.w	r3, r3, #7
 802d95c:	4904      	ldr	r1, [pc, #16]	; (802d970 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 802d95e:	5ccb      	ldrb	r3, [r1, r3]
 802d960:	f003 031f 	and.w	r3, r3, #31
 802d964:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 802d968:	4618      	mov	r0, r3
 802d96a:	bd80      	pop	{r7, pc}
 802d96c:	58024400 	.word	0x58024400
 802d970:	08033300 	.word	0x08033300

0802d974 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 802d974:	b480      	push	{r7}
 802d976:	b089      	sub	sp, #36	; 0x24
 802d978:	af00      	add	r7, sp, #0
 802d97a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802d97c:	4ba1      	ldr	r3, [pc, #644]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d980:	f003 0303 	and.w	r3, r3, #3
 802d984:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 802d986:	4b9f      	ldr	r3, [pc, #636]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d98a:	0b1b      	lsrs	r3, r3, #12
 802d98c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802d990:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 802d992:	4b9c      	ldr	r3, [pc, #624]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d996:	091b      	lsrs	r3, r3, #4
 802d998:	f003 0301 	and.w	r3, r3, #1
 802d99c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 802d99e:	4b99      	ldr	r3, [pc, #612]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d9a2:	08db      	lsrs	r3, r3, #3
 802d9a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802d9a8:	693a      	ldr	r2, [r7, #16]
 802d9aa:	fb02 f303 	mul.w	r3, r2, r3
 802d9ae:	ee07 3a90 	vmov	s15, r3
 802d9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d9b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 802d9ba:	697b      	ldr	r3, [r7, #20]
 802d9bc:	2b00      	cmp	r3, #0
 802d9be:	f000 8111 	beq.w	802dbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 802d9c2:	69bb      	ldr	r3, [r7, #24]
 802d9c4:	2b02      	cmp	r3, #2
 802d9c6:	f000 8083 	beq.w	802dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 802d9ca:	69bb      	ldr	r3, [r7, #24]
 802d9cc:	2b02      	cmp	r3, #2
 802d9ce:	f200 80a1 	bhi.w	802db14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 802d9d2:	69bb      	ldr	r3, [r7, #24]
 802d9d4:	2b00      	cmp	r3, #0
 802d9d6:	d003      	beq.n	802d9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 802d9d8:	69bb      	ldr	r3, [r7, #24]
 802d9da:	2b01      	cmp	r3, #1
 802d9dc:	d056      	beq.n	802da8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 802d9de:	e099      	b.n	802db14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802d9e0:	4b88      	ldr	r3, [pc, #544]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d9e2:	681b      	ldr	r3, [r3, #0]
 802d9e4:	f003 0320 	and.w	r3, r3, #32
 802d9e8:	2b00      	cmp	r3, #0
 802d9ea:	d02d      	beq.n	802da48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802d9ec:	4b85      	ldr	r3, [pc, #532]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d9ee:	681b      	ldr	r3, [r3, #0]
 802d9f0:	08db      	lsrs	r3, r3, #3
 802d9f2:	f003 0303 	and.w	r3, r3, #3
 802d9f6:	4a84      	ldr	r2, [pc, #528]	; (802dc08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 802d9f8:	fa22 f303 	lsr.w	r3, r2, r3
 802d9fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802d9fe:	68bb      	ldr	r3, [r7, #8]
 802da00:	ee07 3a90 	vmov	s15, r3
 802da04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802da08:	697b      	ldr	r3, [r7, #20]
 802da0a:	ee07 3a90 	vmov	s15, r3
 802da0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802da12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802da16:	4b7b      	ldr	r3, [pc, #492]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802da18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802da1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802da1e:	ee07 3a90 	vmov	s15, r3
 802da22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802da26:	ed97 6a03 	vldr	s12, [r7, #12]
 802da2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 802dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802da2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802da32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802da36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802da3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802da3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 802da42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 802da46:	e087      	b.n	802db58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802da48:	697b      	ldr	r3, [r7, #20]
 802da4a:	ee07 3a90 	vmov	s15, r3
 802da4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802da52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 802dc10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 802da56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802da5a:	4b6a      	ldr	r3, [pc, #424]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802da5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802da5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802da62:	ee07 3a90 	vmov	s15, r3
 802da66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802da6a:	ed97 6a03 	vldr	s12, [r7, #12]
 802da6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 802dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802da72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802da76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802da7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802da7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802da82:	ee67 7a27 	vmul.f32	s15, s14, s15
 802da86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802da8a:	e065      	b.n	802db58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802da8c:	697b      	ldr	r3, [r7, #20]
 802da8e:	ee07 3a90 	vmov	s15, r3
 802da92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802da96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 802dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 802da9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802da9e:	4b59      	ldr	r3, [pc, #356]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802daa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802daa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802daa6:	ee07 3a90 	vmov	s15, r3
 802daaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802daae:	ed97 6a03 	vldr	s12, [r7, #12]
 802dab2:	eddf 5a56 	vldr	s11, [pc, #344]	; 802dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802dab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802daba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802dabe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802dac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802dac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 802daca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802dace:	e043      	b.n	802db58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802dad0:	697b      	ldr	r3, [r7, #20]
 802dad2:	ee07 3a90 	vmov	s15, r3
 802dad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802dada:	eddf 6a4f 	vldr	s13, [pc, #316]	; 802dc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 802dade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802dae2:	4b48      	ldr	r3, [pc, #288]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802dae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802dae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802daea:	ee07 3a90 	vmov	s15, r3
 802daee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802daf2:	ed97 6a03 	vldr	s12, [r7, #12]
 802daf6:	eddf 5a45 	vldr	s11, [pc, #276]	; 802dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802dafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802dafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802db02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802db06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802db0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802db0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802db12:	e021      	b.n	802db58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802db14:	697b      	ldr	r3, [r7, #20]
 802db16:	ee07 3a90 	vmov	s15, r3
 802db1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802db1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 802dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 802db22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802db26:	4b37      	ldr	r3, [pc, #220]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802db28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802db2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802db2e:	ee07 3a90 	vmov	s15, r3
 802db32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802db36:	ed97 6a03 	vldr	s12, [r7, #12]
 802db3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 802dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802db3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802db42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802db46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802db4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802db4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 802db52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802db56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 802db58:	4b2a      	ldr	r3, [pc, #168]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802db5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802db5c:	0a5b      	lsrs	r3, r3, #9
 802db5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802db62:	ee07 3a90 	vmov	s15, r3
 802db66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802db6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802db6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 802db72:	edd7 6a07 	vldr	s13, [r7, #28]
 802db76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802db7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802db7e:	ee17 2a90 	vmov	r2, s15
 802db82:	687b      	ldr	r3, [r7, #4]
 802db84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 802db86:	4b1f      	ldr	r3, [pc, #124]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802db88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802db8a:	0c1b      	lsrs	r3, r3, #16
 802db8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802db90:	ee07 3a90 	vmov	s15, r3
 802db94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802db98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802db9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 802dba0:	edd7 6a07 	vldr	s13, [r7, #28]
 802dba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802dba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802dbac:	ee17 2a90 	vmov	r2, s15
 802dbb0:	687b      	ldr	r3, [r7, #4]
 802dbb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 802dbb4:	4b13      	ldr	r3, [pc, #76]	; (802dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802dbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802dbb8:	0e1b      	lsrs	r3, r3, #24
 802dbba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802dbbe:	ee07 3a90 	vmov	s15, r3
 802dbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802dbc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802dbca:	ee37 7a87 	vadd.f32	s14, s15, s14
 802dbce:	edd7 6a07 	vldr	s13, [r7, #28]
 802dbd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802dbd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802dbda:	ee17 2a90 	vmov	r2, s15
 802dbde:	687b      	ldr	r3, [r7, #4]
 802dbe0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 802dbe2:	e008      	b.n	802dbf6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 802dbe4:	687b      	ldr	r3, [r7, #4]
 802dbe6:	2200      	movs	r2, #0
 802dbe8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 802dbea:	687b      	ldr	r3, [r7, #4]
 802dbec:	2200      	movs	r2, #0
 802dbee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 802dbf0:	687b      	ldr	r3, [r7, #4]
 802dbf2:	2200      	movs	r2, #0
 802dbf4:	609a      	str	r2, [r3, #8]
}
 802dbf6:	bf00      	nop
 802dbf8:	3724      	adds	r7, #36	; 0x24
 802dbfa:	46bd      	mov	sp, r7
 802dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dc00:	4770      	bx	lr
 802dc02:	bf00      	nop
 802dc04:	58024400 	.word	0x58024400
 802dc08:	03d09000 	.word	0x03d09000
 802dc0c:	46000000 	.word	0x46000000
 802dc10:	4c742400 	.word	0x4c742400
 802dc14:	4a742400 	.word	0x4a742400
 802dc18:	4bbebc20 	.word	0x4bbebc20

0802dc1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 802dc1c:	b480      	push	{r7}
 802dc1e:	b089      	sub	sp, #36	; 0x24
 802dc20:	af00      	add	r7, sp, #0
 802dc22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802dc24:	4ba1      	ldr	r3, [pc, #644]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802dc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dc28:	f003 0303 	and.w	r3, r3, #3
 802dc2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 802dc2e:	4b9f      	ldr	r3, [pc, #636]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802dc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dc32:	0d1b      	lsrs	r3, r3, #20
 802dc34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802dc38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 802dc3a:	4b9c      	ldr	r3, [pc, #624]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802dc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dc3e:	0a1b      	lsrs	r3, r3, #8
 802dc40:	f003 0301 	and.w	r3, r3, #1
 802dc44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 802dc46:	4b99      	ldr	r3, [pc, #612]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802dc48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802dc4a:	08db      	lsrs	r3, r3, #3
 802dc4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802dc50:	693a      	ldr	r2, [r7, #16]
 802dc52:	fb02 f303 	mul.w	r3, r2, r3
 802dc56:	ee07 3a90 	vmov	s15, r3
 802dc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802dc5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 802dc62:	697b      	ldr	r3, [r7, #20]
 802dc64:	2b00      	cmp	r3, #0
 802dc66:	f000 8111 	beq.w	802de8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 802dc6a:	69bb      	ldr	r3, [r7, #24]
 802dc6c:	2b02      	cmp	r3, #2
 802dc6e:	f000 8083 	beq.w	802dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 802dc72:	69bb      	ldr	r3, [r7, #24]
 802dc74:	2b02      	cmp	r3, #2
 802dc76:	f200 80a1 	bhi.w	802ddbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 802dc7a:	69bb      	ldr	r3, [r7, #24]
 802dc7c:	2b00      	cmp	r3, #0
 802dc7e:	d003      	beq.n	802dc88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 802dc80:	69bb      	ldr	r3, [r7, #24]
 802dc82:	2b01      	cmp	r3, #1
 802dc84:	d056      	beq.n	802dd34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 802dc86:	e099      	b.n	802ddbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802dc88:	4b88      	ldr	r3, [pc, #544]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802dc8a:	681b      	ldr	r3, [r3, #0]
 802dc8c:	f003 0320 	and.w	r3, r3, #32
 802dc90:	2b00      	cmp	r3, #0
 802dc92:	d02d      	beq.n	802dcf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802dc94:	4b85      	ldr	r3, [pc, #532]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802dc96:	681b      	ldr	r3, [r3, #0]
 802dc98:	08db      	lsrs	r3, r3, #3
 802dc9a:	f003 0303 	and.w	r3, r3, #3
 802dc9e:	4a84      	ldr	r2, [pc, #528]	; (802deb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 802dca0:	fa22 f303 	lsr.w	r3, r2, r3
 802dca4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802dca6:	68bb      	ldr	r3, [r7, #8]
 802dca8:	ee07 3a90 	vmov	s15, r3
 802dcac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802dcb0:	697b      	ldr	r3, [r7, #20]
 802dcb2:	ee07 3a90 	vmov	s15, r3
 802dcb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802dcba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802dcbe:	4b7b      	ldr	r3, [pc, #492]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802dcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802dcc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802dcc6:	ee07 3a90 	vmov	s15, r3
 802dcca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802dcce:	ed97 6a03 	vldr	s12, [r7, #12]
 802dcd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 802deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802dcd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802dcda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802dcde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802dce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802dce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 802dcea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 802dcee:	e087      	b.n	802de00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802dcf0:	697b      	ldr	r3, [r7, #20]
 802dcf2:	ee07 3a90 	vmov	s15, r3
 802dcf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802dcfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 802deb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 802dcfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802dd02:	4b6a      	ldr	r3, [pc, #424]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802dd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802dd06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802dd0a:	ee07 3a90 	vmov	s15, r3
 802dd0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802dd12:	ed97 6a03 	vldr	s12, [r7, #12]
 802dd16:	eddf 5a67 	vldr	s11, [pc, #412]	; 802deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802dd1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802dd1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802dd22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802dd26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802dd2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802dd2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802dd32:	e065      	b.n	802de00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802dd34:	697b      	ldr	r3, [r7, #20]
 802dd36:	ee07 3a90 	vmov	s15, r3
 802dd3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802dd3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 802debc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 802dd42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802dd46:	4b59      	ldr	r3, [pc, #356]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802dd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802dd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802dd4e:	ee07 3a90 	vmov	s15, r3
 802dd52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802dd56:	ed97 6a03 	vldr	s12, [r7, #12]
 802dd5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 802deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802dd5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802dd62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802dd66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802dd6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802dd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 802dd72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802dd76:	e043      	b.n	802de00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802dd78:	697b      	ldr	r3, [r7, #20]
 802dd7a:	ee07 3a90 	vmov	s15, r3
 802dd7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802dd82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 802dec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 802dd86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802dd8a:	4b48      	ldr	r3, [pc, #288]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802dd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802dd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802dd92:	ee07 3a90 	vmov	s15, r3
 802dd96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802dd9a:	ed97 6a03 	vldr	s12, [r7, #12]
 802dd9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 802deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802dda2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802dda6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802ddaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802ddae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802ddb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 802ddb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802ddba:	e021      	b.n	802de00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802ddbc:	697b      	ldr	r3, [r7, #20]
 802ddbe:	ee07 3a90 	vmov	s15, r3
 802ddc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802ddc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 802debc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 802ddca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802ddce:	4b37      	ldr	r3, [pc, #220]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802ddd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ddd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802ddd6:	ee07 3a90 	vmov	s15, r3
 802ddda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802ddde:	ed97 6a03 	vldr	s12, [r7, #12]
 802dde2:	eddf 5a34 	vldr	s11, [pc, #208]	; 802deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802dde6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802ddea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802ddee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802ddf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802ddf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 802ddfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802ddfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 802de00:	4b2a      	ldr	r3, [pc, #168]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802de02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802de04:	0a5b      	lsrs	r3, r3, #9
 802de06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802de0a:	ee07 3a90 	vmov	s15, r3
 802de0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802de12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802de16:	ee37 7a87 	vadd.f32	s14, s15, s14
 802de1a:	edd7 6a07 	vldr	s13, [r7, #28]
 802de1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802de22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802de26:	ee17 2a90 	vmov	r2, s15
 802de2a:	687b      	ldr	r3, [r7, #4]
 802de2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 802de2e:	4b1f      	ldr	r3, [pc, #124]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802de30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802de32:	0c1b      	lsrs	r3, r3, #16
 802de34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802de38:	ee07 3a90 	vmov	s15, r3
 802de3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802de40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802de44:	ee37 7a87 	vadd.f32	s14, s15, s14
 802de48:	edd7 6a07 	vldr	s13, [r7, #28]
 802de4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802de50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802de54:	ee17 2a90 	vmov	r2, s15
 802de58:	687b      	ldr	r3, [r7, #4]
 802de5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 802de5c:	4b13      	ldr	r3, [pc, #76]	; (802deac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802de5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802de60:	0e1b      	lsrs	r3, r3, #24
 802de62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802de66:	ee07 3a90 	vmov	s15, r3
 802de6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802de6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802de72:	ee37 7a87 	vadd.f32	s14, s15, s14
 802de76:	edd7 6a07 	vldr	s13, [r7, #28]
 802de7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802de7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802de82:	ee17 2a90 	vmov	r2, s15
 802de86:	687b      	ldr	r3, [r7, #4]
 802de88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 802de8a:	e008      	b.n	802de9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 802de8c:	687b      	ldr	r3, [r7, #4]
 802de8e:	2200      	movs	r2, #0
 802de90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 802de92:	687b      	ldr	r3, [r7, #4]
 802de94:	2200      	movs	r2, #0
 802de96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 802de98:	687b      	ldr	r3, [r7, #4]
 802de9a:	2200      	movs	r2, #0
 802de9c:	609a      	str	r2, [r3, #8]
}
 802de9e:	bf00      	nop
 802dea0:	3724      	adds	r7, #36	; 0x24
 802dea2:	46bd      	mov	sp, r7
 802dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dea8:	4770      	bx	lr
 802deaa:	bf00      	nop
 802deac:	58024400 	.word	0x58024400
 802deb0:	03d09000 	.word	0x03d09000
 802deb4:	46000000 	.word	0x46000000
 802deb8:	4c742400 	.word	0x4c742400
 802debc:	4a742400 	.word	0x4a742400
 802dec0:	4bbebc20 	.word	0x4bbebc20

0802dec4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 802dec4:	b580      	push	{r7, lr}
 802dec6:	b084      	sub	sp, #16
 802dec8:	af00      	add	r7, sp, #0
 802deca:	6078      	str	r0, [r7, #4]
 802decc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802dece:	2300      	movs	r3, #0
 802ded0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802ded2:	4b53      	ldr	r3, [pc, #332]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802ded4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ded6:	f003 0303 	and.w	r3, r3, #3
 802deda:	2b03      	cmp	r3, #3
 802dedc:	d101      	bne.n	802dee2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 802dede:	2301      	movs	r3, #1
 802dee0:	e099      	b.n	802e016 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 802dee2:	4b4f      	ldr	r3, [pc, #316]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dee4:	681b      	ldr	r3, [r3, #0]
 802dee6:	4a4e      	ldr	r2, [pc, #312]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dee8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 802deec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802deee:	f7fc fbdd 	bl	802a6ac <HAL_GetTick>
 802def2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 802def4:	e008      	b.n	802df08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 802def6:	f7fc fbd9 	bl	802a6ac <HAL_GetTick>
 802defa:	4602      	mov	r2, r0
 802defc:	68bb      	ldr	r3, [r7, #8]
 802defe:	1ad3      	subs	r3, r2, r3
 802df00:	2b02      	cmp	r3, #2
 802df02:	d901      	bls.n	802df08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 802df04:	2303      	movs	r3, #3
 802df06:	e086      	b.n	802e016 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 802df08:	4b45      	ldr	r3, [pc, #276]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df0a:	681b      	ldr	r3, [r3, #0]
 802df0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802df10:	2b00      	cmp	r3, #0
 802df12:	d1f0      	bne.n	802def6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 802df14:	4b42      	ldr	r3, [pc, #264]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802df18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802df1c:	687b      	ldr	r3, [r7, #4]
 802df1e:	681b      	ldr	r3, [r3, #0]
 802df20:	031b      	lsls	r3, r3, #12
 802df22:	493f      	ldr	r1, [pc, #252]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df24:	4313      	orrs	r3, r2
 802df26:	628b      	str	r3, [r1, #40]	; 0x28
 802df28:	687b      	ldr	r3, [r7, #4]
 802df2a:	685b      	ldr	r3, [r3, #4]
 802df2c:	3b01      	subs	r3, #1
 802df2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802df32:	687b      	ldr	r3, [r7, #4]
 802df34:	689b      	ldr	r3, [r3, #8]
 802df36:	3b01      	subs	r3, #1
 802df38:	025b      	lsls	r3, r3, #9
 802df3a:	b29b      	uxth	r3, r3
 802df3c:	431a      	orrs	r2, r3
 802df3e:	687b      	ldr	r3, [r7, #4]
 802df40:	68db      	ldr	r3, [r3, #12]
 802df42:	3b01      	subs	r3, #1
 802df44:	041b      	lsls	r3, r3, #16
 802df46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802df4a:	431a      	orrs	r2, r3
 802df4c:	687b      	ldr	r3, [r7, #4]
 802df4e:	691b      	ldr	r3, [r3, #16]
 802df50:	3b01      	subs	r3, #1
 802df52:	061b      	lsls	r3, r3, #24
 802df54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 802df58:	4931      	ldr	r1, [pc, #196]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df5a:	4313      	orrs	r3, r2
 802df5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 802df5e:	4b30      	ldr	r3, [pc, #192]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802df62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 802df66:	687b      	ldr	r3, [r7, #4]
 802df68:	695b      	ldr	r3, [r3, #20]
 802df6a:	492d      	ldr	r1, [pc, #180]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df6c:	4313      	orrs	r3, r2
 802df6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 802df70:	4b2b      	ldr	r3, [pc, #172]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802df74:	f023 0220 	bic.w	r2, r3, #32
 802df78:	687b      	ldr	r3, [r7, #4]
 802df7a:	699b      	ldr	r3, [r3, #24]
 802df7c:	4928      	ldr	r1, [pc, #160]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df7e:	4313      	orrs	r3, r2
 802df80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 802df82:	4b27      	ldr	r3, [pc, #156]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802df86:	4a26      	ldr	r2, [pc, #152]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df88:	f023 0310 	bic.w	r3, r3, #16
 802df8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 802df8e:	4b24      	ldr	r3, [pc, #144]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802df92:	4b24      	ldr	r3, [pc, #144]	; (802e024 <RCCEx_PLL2_Config+0x160>)
 802df94:	4013      	ands	r3, r2
 802df96:	687a      	ldr	r2, [r7, #4]
 802df98:	69d2      	ldr	r2, [r2, #28]
 802df9a:	00d2      	lsls	r2, r2, #3
 802df9c:	4920      	ldr	r1, [pc, #128]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802df9e:	4313      	orrs	r3, r2
 802dfa0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 802dfa2:	4b1f      	ldr	r3, [pc, #124]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dfa6:	4a1e      	ldr	r2, [pc, #120]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dfa8:	f043 0310 	orr.w	r3, r3, #16
 802dfac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 802dfae:	683b      	ldr	r3, [r7, #0]
 802dfb0:	2b00      	cmp	r3, #0
 802dfb2:	d106      	bne.n	802dfc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 802dfb4:	4b1a      	ldr	r3, [pc, #104]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dfb8:	4a19      	ldr	r2, [pc, #100]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dfba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802dfbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 802dfc0:	e00f      	b.n	802dfe2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 802dfc2:	683b      	ldr	r3, [r7, #0]
 802dfc4:	2b01      	cmp	r3, #1
 802dfc6:	d106      	bne.n	802dfd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 802dfc8:	4b15      	ldr	r3, [pc, #84]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dfcc:	4a14      	ldr	r2, [pc, #80]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dfce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802dfd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 802dfd4:	e005      	b.n	802dfe2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 802dfd6:	4b12      	ldr	r3, [pc, #72]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dfda:	4a11      	ldr	r2, [pc, #68]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dfdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802dfe0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 802dfe2:	4b0f      	ldr	r3, [pc, #60]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dfe4:	681b      	ldr	r3, [r3, #0]
 802dfe6:	4a0e      	ldr	r2, [pc, #56]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802dfe8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802dfec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802dfee:	f7fc fb5d 	bl	802a6ac <HAL_GetTick>
 802dff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 802dff4:	e008      	b.n	802e008 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 802dff6:	f7fc fb59 	bl	802a6ac <HAL_GetTick>
 802dffa:	4602      	mov	r2, r0
 802dffc:	68bb      	ldr	r3, [r7, #8]
 802dffe:	1ad3      	subs	r3, r2, r3
 802e000:	2b02      	cmp	r3, #2
 802e002:	d901      	bls.n	802e008 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 802e004:	2303      	movs	r3, #3
 802e006:	e006      	b.n	802e016 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 802e008:	4b05      	ldr	r3, [pc, #20]	; (802e020 <RCCEx_PLL2_Config+0x15c>)
 802e00a:	681b      	ldr	r3, [r3, #0]
 802e00c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802e010:	2b00      	cmp	r3, #0
 802e012:	d0f0      	beq.n	802dff6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 802e014:	7bfb      	ldrb	r3, [r7, #15]
}
 802e016:	4618      	mov	r0, r3
 802e018:	3710      	adds	r7, #16
 802e01a:	46bd      	mov	sp, r7
 802e01c:	bd80      	pop	{r7, pc}
 802e01e:	bf00      	nop
 802e020:	58024400 	.word	0x58024400
 802e024:	ffff0007 	.word	0xffff0007

0802e028 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 802e028:	b580      	push	{r7, lr}
 802e02a:	b084      	sub	sp, #16
 802e02c:	af00      	add	r7, sp, #0
 802e02e:	6078      	str	r0, [r7, #4]
 802e030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802e032:	2300      	movs	r3, #0
 802e034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802e036:	4b53      	ldr	r3, [pc, #332]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e03a:	f003 0303 	and.w	r3, r3, #3
 802e03e:	2b03      	cmp	r3, #3
 802e040:	d101      	bne.n	802e046 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 802e042:	2301      	movs	r3, #1
 802e044:	e099      	b.n	802e17a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 802e046:	4b4f      	ldr	r3, [pc, #316]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e048:	681b      	ldr	r3, [r3, #0]
 802e04a:	4a4e      	ldr	r2, [pc, #312]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e04c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802e050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802e052:	f7fc fb2b 	bl	802a6ac <HAL_GetTick>
 802e056:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 802e058:	e008      	b.n	802e06c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802e05a:	f7fc fb27 	bl	802a6ac <HAL_GetTick>
 802e05e:	4602      	mov	r2, r0
 802e060:	68bb      	ldr	r3, [r7, #8]
 802e062:	1ad3      	subs	r3, r2, r3
 802e064:	2b02      	cmp	r3, #2
 802e066:	d901      	bls.n	802e06c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 802e068:	2303      	movs	r3, #3
 802e06a:	e086      	b.n	802e17a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 802e06c:	4b45      	ldr	r3, [pc, #276]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e06e:	681b      	ldr	r3, [r3, #0]
 802e070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802e074:	2b00      	cmp	r3, #0
 802e076:	d1f0      	bne.n	802e05a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 802e078:	4b42      	ldr	r3, [pc, #264]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e07c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 802e080:	687b      	ldr	r3, [r7, #4]
 802e082:	681b      	ldr	r3, [r3, #0]
 802e084:	051b      	lsls	r3, r3, #20
 802e086:	493f      	ldr	r1, [pc, #252]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e088:	4313      	orrs	r3, r2
 802e08a:	628b      	str	r3, [r1, #40]	; 0x28
 802e08c:	687b      	ldr	r3, [r7, #4]
 802e08e:	685b      	ldr	r3, [r3, #4]
 802e090:	3b01      	subs	r3, #1
 802e092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802e096:	687b      	ldr	r3, [r7, #4]
 802e098:	689b      	ldr	r3, [r3, #8]
 802e09a:	3b01      	subs	r3, #1
 802e09c:	025b      	lsls	r3, r3, #9
 802e09e:	b29b      	uxth	r3, r3
 802e0a0:	431a      	orrs	r2, r3
 802e0a2:	687b      	ldr	r3, [r7, #4]
 802e0a4:	68db      	ldr	r3, [r3, #12]
 802e0a6:	3b01      	subs	r3, #1
 802e0a8:	041b      	lsls	r3, r3, #16
 802e0aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802e0ae:	431a      	orrs	r2, r3
 802e0b0:	687b      	ldr	r3, [r7, #4]
 802e0b2:	691b      	ldr	r3, [r3, #16]
 802e0b4:	3b01      	subs	r3, #1
 802e0b6:	061b      	lsls	r3, r3, #24
 802e0b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 802e0bc:	4931      	ldr	r1, [pc, #196]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e0be:	4313      	orrs	r3, r2
 802e0c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 802e0c2:	4b30      	ldr	r3, [pc, #192]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e0c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 802e0ca:	687b      	ldr	r3, [r7, #4]
 802e0cc:	695b      	ldr	r3, [r3, #20]
 802e0ce:	492d      	ldr	r1, [pc, #180]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e0d0:	4313      	orrs	r3, r2
 802e0d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 802e0d4:	4b2b      	ldr	r3, [pc, #172]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e0d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 802e0dc:	687b      	ldr	r3, [r7, #4]
 802e0de:	699b      	ldr	r3, [r3, #24]
 802e0e0:	4928      	ldr	r1, [pc, #160]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e0e2:	4313      	orrs	r3, r2
 802e0e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 802e0e6:	4b27      	ldr	r3, [pc, #156]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e0ea:	4a26      	ldr	r2, [pc, #152]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e0ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802e0f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 802e0f2:	4b24      	ldr	r3, [pc, #144]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e0f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802e0f6:	4b24      	ldr	r3, [pc, #144]	; (802e188 <RCCEx_PLL3_Config+0x160>)
 802e0f8:	4013      	ands	r3, r2
 802e0fa:	687a      	ldr	r2, [r7, #4]
 802e0fc:	69d2      	ldr	r2, [r2, #28]
 802e0fe:	00d2      	lsls	r2, r2, #3
 802e100:	4920      	ldr	r1, [pc, #128]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e102:	4313      	orrs	r3, r2
 802e104:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 802e106:	4b1f      	ldr	r3, [pc, #124]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e10a:	4a1e      	ldr	r2, [pc, #120]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e10c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802e110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 802e112:	683b      	ldr	r3, [r7, #0]
 802e114:	2b00      	cmp	r3, #0
 802e116:	d106      	bne.n	802e126 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 802e118:	4b1a      	ldr	r3, [pc, #104]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e11c:	4a19      	ldr	r2, [pc, #100]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e11e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802e122:	62d3      	str	r3, [r2, #44]	; 0x2c
 802e124:	e00f      	b.n	802e146 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 802e126:	683b      	ldr	r3, [r7, #0]
 802e128:	2b01      	cmp	r3, #1
 802e12a:	d106      	bne.n	802e13a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 802e12c:	4b15      	ldr	r3, [pc, #84]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e130:	4a14      	ldr	r2, [pc, #80]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e132:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802e136:	62d3      	str	r3, [r2, #44]	; 0x2c
 802e138:	e005      	b.n	802e146 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 802e13a:	4b12      	ldr	r3, [pc, #72]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e13e:	4a11      	ldr	r2, [pc, #68]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802e144:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 802e146:	4b0f      	ldr	r3, [pc, #60]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e148:	681b      	ldr	r3, [r3, #0]
 802e14a:	4a0e      	ldr	r2, [pc, #56]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e14c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802e150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802e152:	f7fc faab 	bl	802a6ac <HAL_GetTick>
 802e156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 802e158:	e008      	b.n	802e16c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802e15a:	f7fc faa7 	bl	802a6ac <HAL_GetTick>
 802e15e:	4602      	mov	r2, r0
 802e160:	68bb      	ldr	r3, [r7, #8]
 802e162:	1ad3      	subs	r3, r2, r3
 802e164:	2b02      	cmp	r3, #2
 802e166:	d901      	bls.n	802e16c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 802e168:	2303      	movs	r3, #3
 802e16a:	e006      	b.n	802e17a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 802e16c:	4b05      	ldr	r3, [pc, #20]	; (802e184 <RCCEx_PLL3_Config+0x15c>)
 802e16e:	681b      	ldr	r3, [r3, #0]
 802e170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802e174:	2b00      	cmp	r3, #0
 802e176:	d0f0      	beq.n	802e15a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 802e178:	7bfb      	ldrb	r3, [r7, #15]
}
 802e17a:	4618      	mov	r0, r3
 802e17c:	3710      	adds	r7, #16
 802e17e:	46bd      	mov	sp, r7
 802e180:	bd80      	pop	{r7, pc}
 802e182:	bf00      	nop
 802e184:	58024400 	.word	0x58024400
 802e188:	ffff0007 	.word	0xffff0007

0802e18c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802e18c:	b580      	push	{r7, lr}
 802e18e:	b084      	sub	sp, #16
 802e190:	af00      	add	r7, sp, #0
 802e192:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802e194:	687b      	ldr	r3, [r7, #4]
 802e196:	2b00      	cmp	r3, #0
 802e198:	d101      	bne.n	802e19e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802e19a:	2301      	movs	r3, #1
 802e19c:	e10f      	b.n	802e3be <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802e19e:	687b      	ldr	r3, [r7, #4]
 802e1a0:	2200      	movs	r2, #0
 802e1a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 802e1a4:	687b      	ldr	r3, [r7, #4]
 802e1a6:	681b      	ldr	r3, [r3, #0]
 802e1a8:	4a87      	ldr	r2, [pc, #540]	; (802e3c8 <HAL_SPI_Init+0x23c>)
 802e1aa:	4293      	cmp	r3, r2
 802e1ac:	d00f      	beq.n	802e1ce <HAL_SPI_Init+0x42>
 802e1ae:	687b      	ldr	r3, [r7, #4]
 802e1b0:	681b      	ldr	r3, [r3, #0]
 802e1b2:	4a86      	ldr	r2, [pc, #536]	; (802e3cc <HAL_SPI_Init+0x240>)
 802e1b4:	4293      	cmp	r3, r2
 802e1b6:	d00a      	beq.n	802e1ce <HAL_SPI_Init+0x42>
 802e1b8:	687b      	ldr	r3, [r7, #4]
 802e1ba:	681b      	ldr	r3, [r3, #0]
 802e1bc:	4a84      	ldr	r2, [pc, #528]	; (802e3d0 <HAL_SPI_Init+0x244>)
 802e1be:	4293      	cmp	r3, r2
 802e1c0:	d005      	beq.n	802e1ce <HAL_SPI_Init+0x42>
 802e1c2:	687b      	ldr	r3, [r7, #4]
 802e1c4:	68db      	ldr	r3, [r3, #12]
 802e1c6:	2b0f      	cmp	r3, #15
 802e1c8:	d901      	bls.n	802e1ce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 802e1ca:	2301      	movs	r3, #1
 802e1cc:	e0f7      	b.n	802e3be <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 802e1ce:	6878      	ldr	r0, [r7, #4]
 802e1d0:	f000 fe04 	bl	802eddc <SPI_GetPacketSize>
 802e1d4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 802e1d6:	687b      	ldr	r3, [r7, #4]
 802e1d8:	681b      	ldr	r3, [r3, #0]
 802e1da:	4a7b      	ldr	r2, [pc, #492]	; (802e3c8 <HAL_SPI_Init+0x23c>)
 802e1dc:	4293      	cmp	r3, r2
 802e1de:	d00c      	beq.n	802e1fa <HAL_SPI_Init+0x6e>
 802e1e0:	687b      	ldr	r3, [r7, #4]
 802e1e2:	681b      	ldr	r3, [r3, #0]
 802e1e4:	4a79      	ldr	r2, [pc, #484]	; (802e3cc <HAL_SPI_Init+0x240>)
 802e1e6:	4293      	cmp	r3, r2
 802e1e8:	d007      	beq.n	802e1fa <HAL_SPI_Init+0x6e>
 802e1ea:	687b      	ldr	r3, [r7, #4]
 802e1ec:	681b      	ldr	r3, [r3, #0]
 802e1ee:	4a78      	ldr	r2, [pc, #480]	; (802e3d0 <HAL_SPI_Init+0x244>)
 802e1f0:	4293      	cmp	r3, r2
 802e1f2:	d002      	beq.n	802e1fa <HAL_SPI_Init+0x6e>
 802e1f4:	68fb      	ldr	r3, [r7, #12]
 802e1f6:	2b08      	cmp	r3, #8
 802e1f8:	d811      	bhi.n	802e21e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 802e1fa:	687b      	ldr	r3, [r7, #4]
 802e1fc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 802e1fe:	4a72      	ldr	r2, [pc, #456]	; (802e3c8 <HAL_SPI_Init+0x23c>)
 802e200:	4293      	cmp	r3, r2
 802e202:	d009      	beq.n	802e218 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 802e204:	687b      	ldr	r3, [r7, #4]
 802e206:	681b      	ldr	r3, [r3, #0]
 802e208:	4a70      	ldr	r2, [pc, #448]	; (802e3cc <HAL_SPI_Init+0x240>)
 802e20a:	4293      	cmp	r3, r2
 802e20c:	d004      	beq.n	802e218 <HAL_SPI_Init+0x8c>
 802e20e:	687b      	ldr	r3, [r7, #4]
 802e210:	681b      	ldr	r3, [r3, #0]
 802e212:	4a6f      	ldr	r2, [pc, #444]	; (802e3d0 <HAL_SPI_Init+0x244>)
 802e214:	4293      	cmp	r3, r2
 802e216:	d104      	bne.n	802e222 <HAL_SPI_Init+0x96>
 802e218:	68fb      	ldr	r3, [r7, #12]
 802e21a:	2b10      	cmp	r3, #16
 802e21c:	d901      	bls.n	802e222 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 802e21e:	2301      	movs	r3, #1
 802e220:	e0cd      	b.n	802e3be <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802e222:	687b      	ldr	r3, [r7, #4]
 802e224:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802e228:	b2db      	uxtb	r3, r3
 802e22a:	2b00      	cmp	r3, #0
 802e22c:	d106      	bne.n	802e23c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802e22e:	687b      	ldr	r3, [r7, #4]
 802e230:	2200      	movs	r2, #0
 802e232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802e236:	6878      	ldr	r0, [r7, #4]
 802e238:	f7fb fb42 	bl	80298c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802e23c:	687b      	ldr	r3, [r7, #4]
 802e23e:	2202      	movs	r2, #2
 802e240:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802e244:	687b      	ldr	r3, [r7, #4]
 802e246:	681b      	ldr	r3, [r3, #0]
 802e248:	681a      	ldr	r2, [r3, #0]
 802e24a:	687b      	ldr	r3, [r7, #4]
 802e24c:	681b      	ldr	r3, [r3, #0]
 802e24e:	f022 0201 	bic.w	r2, r2, #1
 802e252:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 802e254:	687b      	ldr	r3, [r7, #4]
 802e256:	681b      	ldr	r3, [r3, #0]
 802e258:	689b      	ldr	r3, [r3, #8]
 802e25a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 802e25e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 802e260:	687b      	ldr	r3, [r7, #4]
 802e262:	699b      	ldr	r3, [r3, #24]
 802e264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802e268:	d119      	bne.n	802e29e <HAL_SPI_Init+0x112>
 802e26a:	687b      	ldr	r3, [r7, #4]
 802e26c:	685b      	ldr	r3, [r3, #4]
 802e26e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802e272:	d103      	bne.n	802e27c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 802e274:	687b      	ldr	r3, [r7, #4]
 802e276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 802e278:	2b00      	cmp	r3, #0
 802e27a:	d008      	beq.n	802e28e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 802e27c:	687b      	ldr	r3, [r7, #4]
 802e27e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 802e280:	2b00      	cmp	r3, #0
 802e282:	d10c      	bne.n	802e29e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 802e284:	687b      	ldr	r3, [r7, #4]
 802e286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 802e288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802e28c:	d107      	bne.n	802e29e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 802e28e:	687b      	ldr	r3, [r7, #4]
 802e290:	681b      	ldr	r3, [r3, #0]
 802e292:	681a      	ldr	r2, [r3, #0]
 802e294:	687b      	ldr	r3, [r7, #4]
 802e296:	681b      	ldr	r3, [r3, #0]
 802e298:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802e29c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 802e29e:	687b      	ldr	r3, [r7, #4]
 802e2a0:	685b      	ldr	r3, [r3, #4]
 802e2a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802e2a6:	2b00      	cmp	r3, #0
 802e2a8:	d00f      	beq.n	802e2ca <HAL_SPI_Init+0x13e>
 802e2aa:	687b      	ldr	r3, [r7, #4]
 802e2ac:	68db      	ldr	r3, [r3, #12]
 802e2ae:	2b06      	cmp	r3, #6
 802e2b0:	d90b      	bls.n	802e2ca <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 802e2b2:	687b      	ldr	r3, [r7, #4]
 802e2b4:	681b      	ldr	r3, [r3, #0]
 802e2b6:	681b      	ldr	r3, [r3, #0]
 802e2b8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 802e2bc:	687b      	ldr	r3, [r7, #4]
 802e2be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802e2c0:	687b      	ldr	r3, [r7, #4]
 802e2c2:	681b      	ldr	r3, [r3, #0]
 802e2c4:	430a      	orrs	r2, r1
 802e2c6:	601a      	str	r2, [r3, #0]
 802e2c8:	e007      	b.n	802e2da <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 802e2ca:	687b      	ldr	r3, [r7, #4]
 802e2cc:	681b      	ldr	r3, [r3, #0]
 802e2ce:	681a      	ldr	r2, [r3, #0]
 802e2d0:	687b      	ldr	r3, [r7, #4]
 802e2d2:	681b      	ldr	r3, [r3, #0]
 802e2d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802e2d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 802e2da:	687b      	ldr	r3, [r7, #4]
 802e2dc:	69da      	ldr	r2, [r3, #28]
 802e2de:	687b      	ldr	r3, [r7, #4]
 802e2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e2e2:	431a      	orrs	r2, r3
 802e2e4:	68bb      	ldr	r3, [r7, #8]
 802e2e6:	431a      	orrs	r2, r3
 802e2e8:	687b      	ldr	r3, [r7, #4]
 802e2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e2ec:	ea42 0103 	orr.w	r1, r2, r3
 802e2f0:	687b      	ldr	r3, [r7, #4]
 802e2f2:	68da      	ldr	r2, [r3, #12]
 802e2f4:	687b      	ldr	r3, [r7, #4]
 802e2f6:	681b      	ldr	r3, [r3, #0]
 802e2f8:	430a      	orrs	r2, r1
 802e2fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 802e2fc:	687b      	ldr	r3, [r7, #4]
 802e2fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802e300:	687b      	ldr	r3, [r7, #4]
 802e302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e304:	431a      	orrs	r2, r3
 802e306:	687b      	ldr	r3, [r7, #4]
 802e308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e30a:	431a      	orrs	r2, r3
 802e30c:	687b      	ldr	r3, [r7, #4]
 802e30e:	699b      	ldr	r3, [r3, #24]
 802e310:	431a      	orrs	r2, r3
 802e312:	687b      	ldr	r3, [r7, #4]
 802e314:	691b      	ldr	r3, [r3, #16]
 802e316:	431a      	orrs	r2, r3
 802e318:	687b      	ldr	r3, [r7, #4]
 802e31a:	695b      	ldr	r3, [r3, #20]
 802e31c:	431a      	orrs	r2, r3
 802e31e:	687b      	ldr	r3, [r7, #4]
 802e320:	6a1b      	ldr	r3, [r3, #32]
 802e322:	431a      	orrs	r2, r3
 802e324:	687b      	ldr	r3, [r7, #4]
 802e326:	685b      	ldr	r3, [r3, #4]
 802e328:	431a      	orrs	r2, r3
 802e32a:	687b      	ldr	r3, [r7, #4]
 802e32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802e32e:	431a      	orrs	r2, r3
 802e330:	687b      	ldr	r3, [r7, #4]
 802e332:	689b      	ldr	r3, [r3, #8]
 802e334:	431a      	orrs	r2, r3
 802e336:	687b      	ldr	r3, [r7, #4]
 802e338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e33a:	ea42 0103 	orr.w	r1, r2, r3
 802e33e:	687b      	ldr	r3, [r7, #4]
 802e340:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802e342:	687b      	ldr	r3, [r7, #4]
 802e344:	681b      	ldr	r3, [r3, #0]
 802e346:	430a      	orrs	r2, r1
 802e348:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 802e34a:	687b      	ldr	r3, [r7, #4]
 802e34c:	685b      	ldr	r3, [r3, #4]
 802e34e:	2b00      	cmp	r3, #0
 802e350:	d113      	bne.n	802e37a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 802e352:	687b      	ldr	r3, [r7, #4]
 802e354:	681b      	ldr	r3, [r3, #0]
 802e356:	689b      	ldr	r3, [r3, #8]
 802e358:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 802e35c:	687b      	ldr	r3, [r7, #4]
 802e35e:	681b      	ldr	r3, [r3, #0]
 802e360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802e364:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 802e366:	687b      	ldr	r3, [r7, #4]
 802e368:	681b      	ldr	r3, [r3, #0]
 802e36a:	689b      	ldr	r3, [r3, #8]
 802e36c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 802e370:	687b      	ldr	r3, [r7, #4]
 802e372:	681b      	ldr	r3, [r3, #0]
 802e374:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802e378:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802e37a:	687b      	ldr	r3, [r7, #4]
 802e37c:	681b      	ldr	r3, [r3, #0]
 802e37e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802e380:	687b      	ldr	r3, [r7, #4]
 802e382:	681b      	ldr	r3, [r3, #0]
 802e384:	f022 0201 	bic.w	r2, r2, #1
 802e388:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 802e38a:	687b      	ldr	r3, [r7, #4]
 802e38c:	685b      	ldr	r3, [r3, #4]
 802e38e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802e392:	2b00      	cmp	r3, #0
 802e394:	d00a      	beq.n	802e3ac <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 802e396:	687b      	ldr	r3, [r7, #4]
 802e398:	681b      	ldr	r3, [r3, #0]
 802e39a:	68db      	ldr	r3, [r3, #12]
 802e39c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802e3a0:	687b      	ldr	r3, [r7, #4]
 802e3a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802e3a4:	687b      	ldr	r3, [r7, #4]
 802e3a6:	681b      	ldr	r3, [r3, #0]
 802e3a8:	430a      	orrs	r2, r1
 802e3aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802e3ac:	687b      	ldr	r3, [r7, #4]
 802e3ae:	2200      	movs	r2, #0
 802e3b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 802e3b4:	687b      	ldr	r3, [r7, #4]
 802e3b6:	2201      	movs	r2, #1
 802e3b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 802e3bc:	2300      	movs	r3, #0
}
 802e3be:	4618      	mov	r0, r3
 802e3c0:	3710      	adds	r7, #16
 802e3c2:	46bd      	mov	sp, r7
 802e3c4:	bd80      	pop	{r7, pc}
 802e3c6:	bf00      	nop
 802e3c8:	40013000 	.word	0x40013000
 802e3cc:	40003800 	.word	0x40003800
 802e3d0:	40003c00 	.word	0x40003c00

0802e3d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 802e3d4:	b580      	push	{r7, lr}
 802e3d6:	b08c      	sub	sp, #48	; 0x30
 802e3d8:	af02      	add	r7, sp, #8
 802e3da:	60f8      	str	r0, [r7, #12]
 802e3dc:	60b9      	str	r1, [r7, #8]
 802e3de:	607a      	str	r2, [r7, #4]
 802e3e0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 802e3e2:	2300      	movs	r3, #0
 802e3e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 802e3e8:	68fb      	ldr	r3, [r7, #12]
 802e3ea:	681b      	ldr	r3, [r3, #0]
 802e3ec:	3320      	adds	r3, #32
 802e3ee:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 802e3f0:	68fb      	ldr	r3, [r7, #12]
 802e3f2:	681b      	ldr	r3, [r3, #0]
 802e3f4:	3330      	adds	r3, #48	; 0x30
 802e3f6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 802e3f8:	68fb      	ldr	r3, [r7, #12]
 802e3fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802e3fe:	2b01      	cmp	r3, #1
 802e400:	d101      	bne.n	802e406 <HAL_SPI_TransmitReceive+0x32>
 802e402:	2302      	movs	r3, #2
 802e404:	e1fd      	b.n	802e802 <HAL_SPI_TransmitReceive+0x42e>
 802e406:	68fb      	ldr	r3, [r7, #12]
 802e408:	2201      	movs	r2, #1
 802e40a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802e40e:	f7fc f94d 	bl	802a6ac <HAL_GetTick>
 802e412:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 802e414:	887b      	ldrh	r3, [r7, #2]
 802e416:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 802e418:	887b      	ldrh	r3, [r7, #2]
 802e41a:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 802e41c:	68fb      	ldr	r3, [r7, #12]
 802e41e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802e422:	b2db      	uxtb	r3, r3
 802e424:	2b01      	cmp	r3, #1
 802e426:	d009      	beq.n	802e43c <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 802e428:	2302      	movs	r3, #2
 802e42a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 802e42e:	68fb      	ldr	r3, [r7, #12]
 802e430:	2200      	movs	r2, #0
 802e432:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802e436:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802e43a:	e1e2      	b.n	802e802 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 802e43c:	68bb      	ldr	r3, [r7, #8]
 802e43e:	2b00      	cmp	r3, #0
 802e440:	d005      	beq.n	802e44e <HAL_SPI_TransmitReceive+0x7a>
 802e442:	687b      	ldr	r3, [r7, #4]
 802e444:	2b00      	cmp	r3, #0
 802e446:	d002      	beq.n	802e44e <HAL_SPI_TransmitReceive+0x7a>
 802e448:	887b      	ldrh	r3, [r7, #2]
 802e44a:	2b00      	cmp	r3, #0
 802e44c:	d109      	bne.n	802e462 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 802e44e:	2301      	movs	r3, #1
 802e450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 802e454:	68fb      	ldr	r3, [r7, #12]
 802e456:	2200      	movs	r2, #0
 802e458:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802e45c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802e460:	e1cf      	b.n	802e802 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 802e462:	68fb      	ldr	r3, [r7, #12]
 802e464:	2205      	movs	r2, #5
 802e466:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802e46a:	68fb      	ldr	r3, [r7, #12]
 802e46c:	2200      	movs	r2, #0
 802e46e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802e472:	68fb      	ldr	r3, [r7, #12]
 802e474:	687a      	ldr	r2, [r7, #4]
 802e476:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 802e478:	68fb      	ldr	r3, [r7, #12]
 802e47a:	887a      	ldrh	r2, [r7, #2]
 802e47c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 802e480:	68fb      	ldr	r3, [r7, #12]
 802e482:	887a      	ldrh	r2, [r7, #2]
 802e484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 802e488:	68fb      	ldr	r3, [r7, #12]
 802e48a:	68ba      	ldr	r2, [r7, #8]
 802e48c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 802e48e:	68fb      	ldr	r3, [r7, #12]
 802e490:	887a      	ldrh	r2, [r7, #2]
 802e492:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 802e496:	68fb      	ldr	r3, [r7, #12]
 802e498:	887a      	ldrh	r2, [r7, #2]
 802e49a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802e49e:	68fb      	ldr	r3, [r7, #12]
 802e4a0:	2200      	movs	r2, #0
 802e4a2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 802e4a4:	68fb      	ldr	r3, [r7, #12]
 802e4a6:	2200      	movs	r2, #0
 802e4a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 802e4aa:	68fb      	ldr	r3, [r7, #12]
 802e4ac:	681b      	ldr	r3, [r3, #0]
 802e4ae:	68da      	ldr	r2, [r3, #12]
 802e4b0:	68fb      	ldr	r3, [r7, #12]
 802e4b2:	681b      	ldr	r3, [r3, #0]
 802e4b4:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 802e4b8:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 802e4ba:	68fb      	ldr	r3, [r7, #12]
 802e4bc:	681b      	ldr	r3, [r3, #0]
 802e4be:	685a      	ldr	r2, [r3, #4]
 802e4c0:	4b82      	ldr	r3, [pc, #520]	; (802e6cc <HAL_SPI_TransmitReceive+0x2f8>)
 802e4c2:	4013      	ands	r3, r2
 802e4c4:	8879      	ldrh	r1, [r7, #2]
 802e4c6:	68fa      	ldr	r2, [r7, #12]
 802e4c8:	6812      	ldr	r2, [r2, #0]
 802e4ca:	430b      	orrs	r3, r1
 802e4cc:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 802e4ce:	68fb      	ldr	r3, [r7, #12]
 802e4d0:	681b      	ldr	r3, [r3, #0]
 802e4d2:	681a      	ldr	r2, [r3, #0]
 802e4d4:	68fb      	ldr	r3, [r7, #12]
 802e4d6:	681b      	ldr	r3, [r3, #0]
 802e4d8:	f042 0201 	orr.w	r2, r2, #1
 802e4dc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802e4de:	68fb      	ldr	r3, [r7, #12]
 802e4e0:	685b      	ldr	r3, [r3, #4]
 802e4e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802e4e6:	d107      	bne.n	802e4f8 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 802e4e8:	68fb      	ldr	r3, [r7, #12]
 802e4ea:	681b      	ldr	r3, [r3, #0]
 802e4ec:	681a      	ldr	r2, [r3, #0]
 802e4ee:	68fb      	ldr	r3, [r7, #12]
 802e4f0:	681b      	ldr	r3, [r3, #0]
 802e4f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802e4f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 802e4f8:	68fb      	ldr	r3, [r7, #12]
 802e4fa:	68db      	ldr	r3, [r3, #12]
 802e4fc:	2b0f      	cmp	r3, #15
 802e4fe:	d970      	bls.n	802e5e2 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802e500:	e068      	b.n	802e5d4 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 802e502:	68fb      	ldr	r3, [r7, #12]
 802e504:	681b      	ldr	r3, [r3, #0]
 802e506:	695b      	ldr	r3, [r3, #20]
 802e508:	f003 0302 	and.w	r3, r3, #2
 802e50c:	2b02      	cmp	r3, #2
 802e50e:	d11a      	bne.n	802e546 <HAL_SPI_TransmitReceive+0x172>
 802e510:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e512:	2b00      	cmp	r3, #0
 802e514:	d017      	beq.n	802e546 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 802e516:	68fb      	ldr	r3, [r7, #12]
 802e518:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802e51a:	68fb      	ldr	r3, [r7, #12]
 802e51c:	681b      	ldr	r3, [r3, #0]
 802e51e:	6812      	ldr	r2, [r2, #0]
 802e520:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 802e522:	68fb      	ldr	r3, [r7, #12]
 802e524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e526:	1d1a      	adds	r2, r3, #4
 802e528:	68fb      	ldr	r3, [r7, #12]
 802e52a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 802e52c:	68fb      	ldr	r3, [r7, #12]
 802e52e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802e532:	b29b      	uxth	r3, r3
 802e534:	3b01      	subs	r3, #1
 802e536:	b29a      	uxth	r2, r3
 802e538:	68fb      	ldr	r3, [r7, #12]
 802e53a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 802e53e:	68fb      	ldr	r3, [r7, #12]
 802e540:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802e544:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 802e546:	68fb      	ldr	r3, [r7, #12]
 802e548:	681b      	ldr	r3, [r3, #0]
 802e54a:	695a      	ldr	r2, [r3, #20]
 802e54c:	f248 0308 	movw	r3, #32776	; 0x8008
 802e550:	4013      	ands	r3, r2
 802e552:	2b00      	cmp	r3, #0
 802e554:	d01a      	beq.n	802e58c <HAL_SPI_TransmitReceive+0x1b8>
 802e556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802e558:	2b00      	cmp	r3, #0
 802e55a:	d017      	beq.n	802e58c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 802e55c:	68fb      	ldr	r3, [r7, #12]
 802e55e:	681a      	ldr	r2, [r3, #0]
 802e560:	68fb      	ldr	r3, [r7, #12]
 802e562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e564:	6b12      	ldr	r2, [r2, #48]	; 0x30
 802e566:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 802e568:	68fb      	ldr	r3, [r7, #12]
 802e56a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e56c:	1d1a      	adds	r2, r3, #4
 802e56e:	68fb      	ldr	r3, [r7, #12]
 802e570:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 802e572:	68fb      	ldr	r3, [r7, #12]
 802e574:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e578:	b29b      	uxth	r3, r3
 802e57a:	3b01      	subs	r3, #1
 802e57c:	b29a      	uxth	r2, r3
 802e57e:	68fb      	ldr	r3, [r7, #12]
 802e580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 802e584:	68fb      	ldr	r3, [r7, #12]
 802e586:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e58a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802e58c:	f7fc f88e 	bl	802a6ac <HAL_GetTick>
 802e590:	4602      	mov	r2, r0
 802e592:	697b      	ldr	r3, [r7, #20]
 802e594:	1ad3      	subs	r3, r2, r3
 802e596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802e598:	429a      	cmp	r2, r3
 802e59a:	d803      	bhi.n	802e5a4 <HAL_SPI_TransmitReceive+0x1d0>
 802e59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802e5a2:	d102      	bne.n	802e5aa <HAL_SPI_TransmitReceive+0x1d6>
 802e5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e5a6:	2b00      	cmp	r3, #0
 802e5a8:	d114      	bne.n	802e5d4 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 802e5aa:	68f8      	ldr	r0, [r7, #12]
 802e5ac:	f000 fb48 	bl	802ec40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 802e5b0:	68fb      	ldr	r3, [r7, #12]
 802e5b2:	2200      	movs	r2, #0
 802e5b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 802e5b8:	68fb      	ldr	r3, [r7, #12]
 802e5ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e5be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802e5c2:	68fb      	ldr	r3, [r7, #12]
 802e5c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 802e5c8:	68fb      	ldr	r3, [r7, #12]
 802e5ca:	2201      	movs	r2, #1
 802e5cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 802e5d0:	2303      	movs	r3, #3
 802e5d2:	e116      	b.n	802e802 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802e5d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e5d6:	2b00      	cmp	r3, #0
 802e5d8:	d193      	bne.n	802e502 <HAL_SPI_TransmitReceive+0x12e>
 802e5da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802e5dc:	2b00      	cmp	r3, #0
 802e5de:	d190      	bne.n	802e502 <HAL_SPI_TransmitReceive+0x12e>
 802e5e0:	e0e8      	b.n	802e7b4 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802e5e2:	68fb      	ldr	r3, [r7, #12]
 802e5e4:	68db      	ldr	r3, [r3, #12]
 802e5e6:	2b07      	cmp	r3, #7
 802e5e8:	f240 80de 	bls.w	802e7a8 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802e5ec:	e066      	b.n	802e6bc <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 802e5ee:	68fb      	ldr	r3, [r7, #12]
 802e5f0:	681b      	ldr	r3, [r3, #0]
 802e5f2:	695b      	ldr	r3, [r3, #20]
 802e5f4:	f003 0302 	and.w	r3, r3, #2
 802e5f8:	2b02      	cmp	r3, #2
 802e5fa:	d119      	bne.n	802e630 <HAL_SPI_TransmitReceive+0x25c>
 802e5fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e5fe:	2b00      	cmp	r3, #0
 802e600:	d016      	beq.n	802e630 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 802e602:	68fb      	ldr	r3, [r7, #12]
 802e604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e606:	881a      	ldrh	r2, [r3, #0]
 802e608:	69fb      	ldr	r3, [r7, #28]
 802e60a:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802e60c:	68fb      	ldr	r3, [r7, #12]
 802e60e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e610:	1c9a      	adds	r2, r3, #2
 802e612:	68fb      	ldr	r3, [r7, #12]
 802e614:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 802e616:	68fb      	ldr	r3, [r7, #12]
 802e618:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802e61c:	b29b      	uxth	r3, r3
 802e61e:	3b01      	subs	r3, #1
 802e620:	b29a      	uxth	r2, r3
 802e622:	68fb      	ldr	r3, [r7, #12]
 802e624:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 802e628:	68fb      	ldr	r3, [r7, #12]
 802e62a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802e62e:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 802e630:	68fb      	ldr	r3, [r7, #12]
 802e632:	681b      	ldr	r3, [r3, #0]
 802e634:	695b      	ldr	r3, [r3, #20]
 802e636:	f003 0301 	and.w	r3, r3, #1
 802e63a:	2b01      	cmp	r3, #1
 802e63c:	d11a      	bne.n	802e674 <HAL_SPI_TransmitReceive+0x2a0>
 802e63e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802e640:	2b00      	cmp	r3, #0
 802e642:	d017      	beq.n	802e674 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 802e644:	68fb      	ldr	r3, [r7, #12]
 802e646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e648:	69ba      	ldr	r2, [r7, #24]
 802e64a:	8812      	ldrh	r2, [r2, #0]
 802e64c:	b292      	uxth	r2, r2
 802e64e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802e650:	68fb      	ldr	r3, [r7, #12]
 802e652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e654:	1c9a      	adds	r2, r3, #2
 802e656:	68fb      	ldr	r3, [r7, #12]
 802e658:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 802e65a:	68fb      	ldr	r3, [r7, #12]
 802e65c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e660:	b29b      	uxth	r3, r3
 802e662:	3b01      	subs	r3, #1
 802e664:	b29a      	uxth	r2, r3
 802e666:	68fb      	ldr	r3, [r7, #12]
 802e668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 802e66c:	68fb      	ldr	r3, [r7, #12]
 802e66e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e672:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802e674:	f7fc f81a 	bl	802a6ac <HAL_GetTick>
 802e678:	4602      	mov	r2, r0
 802e67a:	697b      	ldr	r3, [r7, #20]
 802e67c:	1ad3      	subs	r3, r2, r3
 802e67e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802e680:	429a      	cmp	r2, r3
 802e682:	d803      	bhi.n	802e68c <HAL_SPI_TransmitReceive+0x2b8>
 802e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e686:	f1b3 3fff 	cmp.w	r3, #4294967295
 802e68a:	d102      	bne.n	802e692 <HAL_SPI_TransmitReceive+0x2be>
 802e68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e68e:	2b00      	cmp	r3, #0
 802e690:	d114      	bne.n	802e6bc <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 802e692:	68f8      	ldr	r0, [r7, #12]
 802e694:	f000 fad4 	bl	802ec40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 802e698:	68fb      	ldr	r3, [r7, #12]
 802e69a:	2200      	movs	r2, #0
 802e69c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 802e6a0:	68fb      	ldr	r3, [r7, #12]
 802e6a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e6a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802e6aa:	68fb      	ldr	r3, [r7, #12]
 802e6ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 802e6b0:	68fb      	ldr	r3, [r7, #12]
 802e6b2:	2201      	movs	r2, #1
 802e6b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 802e6b8:	2303      	movs	r3, #3
 802e6ba:	e0a2      	b.n	802e802 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802e6bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e6be:	2b00      	cmp	r3, #0
 802e6c0:	d195      	bne.n	802e5ee <HAL_SPI_TransmitReceive+0x21a>
 802e6c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802e6c4:	2b00      	cmp	r3, #0
 802e6c6:	d192      	bne.n	802e5ee <HAL_SPI_TransmitReceive+0x21a>
 802e6c8:	e074      	b.n	802e7b4 <HAL_SPI_TransmitReceive+0x3e0>
 802e6ca:	bf00      	nop
 802e6cc:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 802e6d0:	68fb      	ldr	r3, [r7, #12]
 802e6d2:	681b      	ldr	r3, [r3, #0]
 802e6d4:	695b      	ldr	r3, [r3, #20]
 802e6d6:	f003 0302 	and.w	r3, r3, #2
 802e6da:	2b02      	cmp	r3, #2
 802e6dc:	d11b      	bne.n	802e716 <HAL_SPI_TransmitReceive+0x342>
 802e6de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e6e0:	2b00      	cmp	r3, #0
 802e6e2:	d018      	beq.n	802e716 <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 802e6e4:	68fb      	ldr	r3, [r7, #12]
 802e6e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802e6e8:	68fb      	ldr	r3, [r7, #12]
 802e6ea:	681b      	ldr	r3, [r3, #0]
 802e6ec:	3320      	adds	r3, #32
 802e6ee:	7812      	ldrb	r2, [r2, #0]
 802e6f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802e6f2:	68fb      	ldr	r3, [r7, #12]
 802e6f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e6f6:	1c5a      	adds	r2, r3, #1
 802e6f8:	68fb      	ldr	r3, [r7, #12]
 802e6fa:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 802e6fc:	68fb      	ldr	r3, [r7, #12]
 802e6fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802e702:	b29b      	uxth	r3, r3
 802e704:	3b01      	subs	r3, #1
 802e706:	b29a      	uxth	r2, r3
 802e708:	68fb      	ldr	r3, [r7, #12]
 802e70a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 802e70e:	68fb      	ldr	r3, [r7, #12]
 802e710:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802e714:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 802e716:	68fb      	ldr	r3, [r7, #12]
 802e718:	681b      	ldr	r3, [r3, #0]
 802e71a:	695b      	ldr	r3, [r3, #20]
 802e71c:	f003 0301 	and.w	r3, r3, #1
 802e720:	2b01      	cmp	r3, #1
 802e722:	d11d      	bne.n	802e760 <HAL_SPI_TransmitReceive+0x38c>
 802e724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802e726:	2b00      	cmp	r3, #0
 802e728:	d01a      	beq.n	802e760 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 802e72a:	68fb      	ldr	r3, [r7, #12]
 802e72c:	681b      	ldr	r3, [r3, #0]
 802e72e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802e732:	68fb      	ldr	r3, [r7, #12]
 802e734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e736:	7812      	ldrb	r2, [r2, #0]
 802e738:	b2d2      	uxtb	r2, r2
 802e73a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 802e73c:	68fb      	ldr	r3, [r7, #12]
 802e73e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e740:	1c5a      	adds	r2, r3, #1
 802e742:	68fb      	ldr	r3, [r7, #12]
 802e744:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 802e746:	68fb      	ldr	r3, [r7, #12]
 802e748:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e74c:	b29b      	uxth	r3, r3
 802e74e:	3b01      	subs	r3, #1
 802e750:	b29a      	uxth	r2, r3
 802e752:	68fb      	ldr	r3, [r7, #12]
 802e754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 802e758:	68fb      	ldr	r3, [r7, #12]
 802e75a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e75e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802e760:	f7fb ffa4 	bl	802a6ac <HAL_GetTick>
 802e764:	4602      	mov	r2, r0
 802e766:	697b      	ldr	r3, [r7, #20]
 802e768:	1ad3      	subs	r3, r2, r3
 802e76a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802e76c:	429a      	cmp	r2, r3
 802e76e:	d803      	bhi.n	802e778 <HAL_SPI_TransmitReceive+0x3a4>
 802e770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e772:	f1b3 3fff 	cmp.w	r3, #4294967295
 802e776:	d102      	bne.n	802e77e <HAL_SPI_TransmitReceive+0x3aa>
 802e778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e77a:	2b00      	cmp	r3, #0
 802e77c:	d114      	bne.n	802e7a8 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 802e77e:	68f8      	ldr	r0, [r7, #12]
 802e780:	f000 fa5e 	bl	802ec40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 802e784:	68fb      	ldr	r3, [r7, #12]
 802e786:	2200      	movs	r2, #0
 802e788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 802e78c:	68fb      	ldr	r3, [r7, #12]
 802e78e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e792:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802e796:	68fb      	ldr	r3, [r7, #12]
 802e798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 802e79c:	68fb      	ldr	r3, [r7, #12]
 802e79e:	2201      	movs	r2, #1
 802e7a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 802e7a4:	2303      	movs	r3, #3
 802e7a6:	e02c      	b.n	802e802 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802e7a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e7aa:	2b00      	cmp	r3, #0
 802e7ac:	d190      	bne.n	802e6d0 <HAL_SPI_TransmitReceive+0x2fc>
 802e7ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802e7b0:	2b00      	cmp	r3, #0
 802e7b2:	d18d      	bne.n	802e6d0 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 802e7b4:	697b      	ldr	r3, [r7, #20]
 802e7b6:	9300      	str	r3, [sp, #0]
 802e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e7ba:	2200      	movs	r2, #0
 802e7bc:	2108      	movs	r1, #8
 802e7be:	68f8      	ldr	r0, [r7, #12]
 802e7c0:	f000 fade 	bl	802ed80 <SPI_WaitOnFlagUntilTimeout>
 802e7c4:	4603      	mov	r3, r0
 802e7c6:	2b00      	cmp	r3, #0
 802e7c8:	d007      	beq.n	802e7da <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802e7ca:	68fb      	ldr	r3, [r7, #12]
 802e7cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e7d0:	f043 0220 	orr.w	r2, r3, #32
 802e7d4:	68fb      	ldr	r3, [r7, #12]
 802e7d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 802e7da:	68f8      	ldr	r0, [r7, #12]
 802e7dc:	f000 fa30 	bl	802ec40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 802e7e0:	68fb      	ldr	r3, [r7, #12]
 802e7e2:	2200      	movs	r2, #0
 802e7e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 802e7e8:	68fb      	ldr	r3, [r7, #12]
 802e7ea:	2201      	movs	r2, #1
 802e7ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802e7f0:	68fb      	ldr	r3, [r7, #12]
 802e7f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e7f6:	2b00      	cmp	r3, #0
 802e7f8:	d001      	beq.n	802e7fe <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 802e7fa:	2301      	movs	r3, #1
 802e7fc:	e001      	b.n	802e802 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 802e7fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 802e802:	4618      	mov	r0, r3
 802e804:	3728      	adds	r7, #40	; 0x28
 802e806:	46bd      	mov	sp, r7
 802e808:	bd80      	pop	{r7, pc}
 802e80a:	bf00      	nop

0802e80c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 802e80c:	b580      	push	{r7, lr}
 802e80e:	b08a      	sub	sp, #40	; 0x28
 802e810:	af00      	add	r7, sp, #0
 802e812:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 802e814:	687b      	ldr	r3, [r7, #4]
 802e816:	681b      	ldr	r3, [r3, #0]
 802e818:	691b      	ldr	r3, [r3, #16]
 802e81a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 802e81c:	687b      	ldr	r3, [r7, #4]
 802e81e:	681b      	ldr	r3, [r3, #0]
 802e820:	695b      	ldr	r3, [r3, #20]
 802e822:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 802e824:	6a3a      	ldr	r2, [r7, #32]
 802e826:	69fb      	ldr	r3, [r7, #28]
 802e828:	4013      	ands	r3, r2
 802e82a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 802e82c:	687b      	ldr	r3, [r7, #4]
 802e82e:	681b      	ldr	r3, [r3, #0]
 802e830:	689b      	ldr	r3, [r3, #8]
 802e832:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 802e834:	2300      	movs	r3, #0
 802e836:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 802e838:	687b      	ldr	r3, [r7, #4]
 802e83a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802e83e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 802e840:	687b      	ldr	r3, [r7, #4]
 802e842:	681b      	ldr	r3, [r3, #0]
 802e844:	3330      	adds	r3, #48	; 0x30
 802e846:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 802e848:	69fb      	ldr	r3, [r7, #28]
 802e84a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802e84e:	2b00      	cmp	r3, #0
 802e850:	d010      	beq.n	802e874 <HAL_SPI_IRQHandler+0x68>
 802e852:	6a3b      	ldr	r3, [r7, #32]
 802e854:	f003 0308 	and.w	r3, r3, #8
 802e858:	2b00      	cmp	r3, #0
 802e85a:	d00b      	beq.n	802e874 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 802e85c:	687b      	ldr	r3, [r7, #4]
 802e85e:	681b      	ldr	r3, [r3, #0]
 802e860:	699a      	ldr	r2, [r3, #24]
 802e862:	687b      	ldr	r3, [r7, #4]
 802e864:	681b      	ldr	r3, [r3, #0]
 802e866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802e86a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 802e86c:	6878      	ldr	r0, [r7, #4]
 802e86e:	f000 f9c3 	bl	802ebf8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 802e872:	e192      	b.n	802eb9a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 802e874:	69bb      	ldr	r3, [r7, #24]
 802e876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e87a:	2b00      	cmp	r3, #0
 802e87c:	d113      	bne.n	802e8a6 <HAL_SPI_IRQHandler+0x9a>
 802e87e:	69bb      	ldr	r3, [r7, #24]
 802e880:	f003 0320 	and.w	r3, r3, #32
 802e884:	2b00      	cmp	r3, #0
 802e886:	d10e      	bne.n	802e8a6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 802e888:	69bb      	ldr	r3, [r7, #24]
 802e88a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 802e88e:	2b00      	cmp	r3, #0
 802e890:	d009      	beq.n	802e8a6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 802e892:	687b      	ldr	r3, [r7, #4]
 802e894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802e896:	6878      	ldr	r0, [r7, #4]
 802e898:	4798      	blx	r3
    hspi->RxISR(hspi);
 802e89a:	687b      	ldr	r3, [r7, #4]
 802e89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802e89e:	6878      	ldr	r0, [r7, #4]
 802e8a0:	4798      	blx	r3
    handled = 1UL;
 802e8a2:	2301      	movs	r3, #1
 802e8a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 802e8a6:	69bb      	ldr	r3, [r7, #24]
 802e8a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e8ac:	2b00      	cmp	r3, #0
 802e8ae:	d10f      	bne.n	802e8d0 <HAL_SPI_IRQHandler+0xc4>
 802e8b0:	69bb      	ldr	r3, [r7, #24]
 802e8b2:	f003 0301 	and.w	r3, r3, #1
 802e8b6:	2b00      	cmp	r3, #0
 802e8b8:	d00a      	beq.n	802e8d0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 802e8ba:	69bb      	ldr	r3, [r7, #24]
 802e8bc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 802e8c0:	2b00      	cmp	r3, #0
 802e8c2:	d105      	bne.n	802e8d0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 802e8c4:	687b      	ldr	r3, [r7, #4]
 802e8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802e8c8:	6878      	ldr	r0, [r7, #4]
 802e8ca:	4798      	blx	r3
    handled = 1UL;
 802e8cc:	2301      	movs	r3, #1
 802e8ce:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 802e8d0:	69bb      	ldr	r3, [r7, #24]
 802e8d2:	f003 0320 	and.w	r3, r3, #32
 802e8d6:	2b00      	cmp	r3, #0
 802e8d8:	d10f      	bne.n	802e8fa <HAL_SPI_IRQHandler+0xee>
 802e8da:	69bb      	ldr	r3, [r7, #24]
 802e8dc:	f003 0302 	and.w	r3, r3, #2
 802e8e0:	2b00      	cmp	r3, #0
 802e8e2:	d00a      	beq.n	802e8fa <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 802e8e4:	69bb      	ldr	r3, [r7, #24]
 802e8e6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 802e8ea:	2b00      	cmp	r3, #0
 802e8ec:	d105      	bne.n	802e8fa <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 802e8ee:	687b      	ldr	r3, [r7, #4]
 802e8f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802e8f2:	6878      	ldr	r0, [r7, #4]
 802e8f4:	4798      	blx	r3
    handled = 1UL;
 802e8f6:	2301      	movs	r3, #1
 802e8f8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 802e8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e8fc:	2b00      	cmp	r3, #0
 802e8fe:	f040 8147 	bne.w	802eb90 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 802e902:	69bb      	ldr	r3, [r7, #24]
 802e904:	f003 0308 	and.w	r3, r3, #8
 802e908:	2b00      	cmp	r3, #0
 802e90a:	f000 808b 	beq.w	802ea24 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 802e90e:	687b      	ldr	r3, [r7, #4]
 802e910:	681b      	ldr	r3, [r3, #0]
 802e912:	699a      	ldr	r2, [r3, #24]
 802e914:	687b      	ldr	r3, [r7, #4]
 802e916:	681b      	ldr	r3, [r3, #0]
 802e918:	f042 0208 	orr.w	r2, r2, #8
 802e91c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 802e91e:	687b      	ldr	r3, [r7, #4]
 802e920:	681b      	ldr	r3, [r3, #0]
 802e922:	699a      	ldr	r2, [r3, #24]
 802e924:	687b      	ldr	r3, [r7, #4]
 802e926:	681b      	ldr	r3, [r3, #0]
 802e928:	f042 0210 	orr.w	r2, r2, #16
 802e92c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 802e92e:	687b      	ldr	r3, [r7, #4]
 802e930:	681b      	ldr	r3, [r3, #0]
 802e932:	699a      	ldr	r2, [r3, #24]
 802e934:	687b      	ldr	r3, [r7, #4]
 802e936:	681b      	ldr	r3, [r3, #0]
 802e938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802e93c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 802e93e:	687b      	ldr	r3, [r7, #4]
 802e940:	681b      	ldr	r3, [r3, #0]
 802e942:	691a      	ldr	r2, [r3, #16]
 802e944:	687b      	ldr	r3, [r7, #4]
 802e946:	681b      	ldr	r3, [r3, #0]
 802e948:	f022 0208 	bic.w	r2, r2, #8
 802e94c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 802e94e:	687b      	ldr	r3, [r7, #4]
 802e950:	681b      	ldr	r3, [r3, #0]
 802e952:	689b      	ldr	r3, [r3, #8]
 802e954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802e958:	2b00      	cmp	r3, #0
 802e95a:	d13d      	bne.n	802e9d8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 802e95c:	e036      	b.n	802e9cc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 802e95e:	687b      	ldr	r3, [r7, #4]
 802e960:	68db      	ldr	r3, [r3, #12]
 802e962:	2b0f      	cmp	r3, #15
 802e964:	d90b      	bls.n	802e97e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 802e966:	687b      	ldr	r3, [r7, #4]
 802e968:	681a      	ldr	r2, [r3, #0]
 802e96a:	687b      	ldr	r3, [r7, #4]
 802e96c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e96e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 802e970:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 802e972:	687b      	ldr	r3, [r7, #4]
 802e974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e976:	1d1a      	adds	r2, r3, #4
 802e978:	687b      	ldr	r3, [r7, #4]
 802e97a:	665a      	str	r2, [r3, #100]	; 0x64
 802e97c:	e01d      	b.n	802e9ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802e97e:	687b      	ldr	r3, [r7, #4]
 802e980:	68db      	ldr	r3, [r3, #12]
 802e982:	2b07      	cmp	r3, #7
 802e984:	d90b      	bls.n	802e99e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 802e986:	687b      	ldr	r3, [r7, #4]
 802e988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e98a:	68fa      	ldr	r2, [r7, #12]
 802e98c:	8812      	ldrh	r2, [r2, #0]
 802e98e:	b292      	uxth	r2, r2
 802e990:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 802e992:	687b      	ldr	r3, [r7, #4]
 802e994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e996:	1c9a      	adds	r2, r3, #2
 802e998:	687b      	ldr	r3, [r7, #4]
 802e99a:	665a      	str	r2, [r3, #100]	; 0x64
 802e99c:	e00d      	b.n	802e9ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 802e99e:	687b      	ldr	r3, [r7, #4]
 802e9a0:	681b      	ldr	r3, [r3, #0]
 802e9a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802e9a6:	687b      	ldr	r3, [r7, #4]
 802e9a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e9aa:	7812      	ldrb	r2, [r2, #0]
 802e9ac:	b2d2      	uxtb	r2, r2
 802e9ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 802e9b0:	687b      	ldr	r3, [r7, #4]
 802e9b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e9b4:	1c5a      	adds	r2, r3, #1
 802e9b6:	687b      	ldr	r3, [r7, #4]
 802e9b8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 802e9ba:	687b      	ldr	r3, [r7, #4]
 802e9bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e9c0:	b29b      	uxth	r3, r3
 802e9c2:	3b01      	subs	r3, #1
 802e9c4:	b29a      	uxth	r2, r3
 802e9c6:	687b      	ldr	r3, [r7, #4]
 802e9c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 802e9cc:	687b      	ldr	r3, [r7, #4]
 802e9ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e9d2:	b29b      	uxth	r3, r3
 802e9d4:	2b00      	cmp	r3, #0
 802e9d6:	d1c2      	bne.n	802e95e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 802e9d8:	6878      	ldr	r0, [r7, #4]
 802e9da:	f000 f931 	bl	802ec40 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 802e9de:	687b      	ldr	r3, [r7, #4]
 802e9e0:	2201      	movs	r2, #1
 802e9e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802e9e6:	687b      	ldr	r3, [r7, #4]
 802e9e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e9ec:	2b00      	cmp	r3, #0
 802e9ee:	d003      	beq.n	802e9f8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 802e9f0:	6878      	ldr	r0, [r7, #4]
 802e9f2:	f000 f8f7 	bl	802ebe4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 802e9f6:	e0d0      	b.n	802eb9a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 802e9f8:	7cfb      	ldrb	r3, [r7, #19]
 802e9fa:	2b05      	cmp	r3, #5
 802e9fc:	d103      	bne.n	802ea06 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 802e9fe:	6878      	ldr	r0, [r7, #4]
 802ea00:	f000 f8e6 	bl	802ebd0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 802ea04:	e0c6      	b.n	802eb94 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 802ea06:	7cfb      	ldrb	r3, [r7, #19]
 802ea08:	2b04      	cmp	r3, #4
 802ea0a:	d103      	bne.n	802ea14 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 802ea0c:	6878      	ldr	r0, [r7, #4]
 802ea0e:	f000 f8d5 	bl	802ebbc <HAL_SPI_RxCpltCallback>
    return;
 802ea12:	e0bf      	b.n	802eb94 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 802ea14:	7cfb      	ldrb	r3, [r7, #19]
 802ea16:	2b03      	cmp	r3, #3
 802ea18:	f040 80bc 	bne.w	802eb94 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 802ea1c:	6878      	ldr	r0, [r7, #4]
 802ea1e:	f000 f8c3 	bl	802eba8 <HAL_SPI_TxCpltCallback>
    return;
 802ea22:	e0b7      	b.n	802eb94 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 802ea24:	69bb      	ldr	r3, [r7, #24]
 802ea26:	f403 7358 	and.w	r3, r3, #864	; 0x360
 802ea2a:	2b00      	cmp	r3, #0
 802ea2c:	f000 80b5 	beq.w	802eb9a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 802ea30:	69bb      	ldr	r3, [r7, #24]
 802ea32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ea36:	2b00      	cmp	r3, #0
 802ea38:	d00f      	beq.n	802ea5a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802ea3a:	687b      	ldr	r3, [r7, #4]
 802ea3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802ea40:	f043 0204 	orr.w	r2, r3, #4
 802ea44:	687b      	ldr	r3, [r7, #4]
 802ea46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802ea4a:	687b      	ldr	r3, [r7, #4]
 802ea4c:	681b      	ldr	r3, [r3, #0]
 802ea4e:	699a      	ldr	r2, [r3, #24]
 802ea50:	687b      	ldr	r3, [r7, #4]
 802ea52:	681b      	ldr	r3, [r3, #0]
 802ea54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ea58:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 802ea5a:	69bb      	ldr	r3, [r7, #24]
 802ea5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802ea60:	2b00      	cmp	r3, #0
 802ea62:	d00f      	beq.n	802ea84 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802ea64:	687b      	ldr	r3, [r7, #4]
 802ea66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802ea6a:	f043 0201 	orr.w	r2, r3, #1
 802ea6e:	687b      	ldr	r3, [r7, #4]
 802ea70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802ea74:	687b      	ldr	r3, [r7, #4]
 802ea76:	681b      	ldr	r3, [r3, #0]
 802ea78:	699a      	ldr	r2, [r3, #24]
 802ea7a:	687b      	ldr	r3, [r7, #4]
 802ea7c:	681b      	ldr	r3, [r3, #0]
 802ea7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802ea82:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 802ea84:	69bb      	ldr	r3, [r7, #24]
 802ea86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802ea8a:	2b00      	cmp	r3, #0
 802ea8c:	d00f      	beq.n	802eaae <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802ea8e:	687b      	ldr	r3, [r7, #4]
 802ea90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802ea94:	f043 0208 	orr.w	r2, r3, #8
 802ea98:	687b      	ldr	r3, [r7, #4]
 802ea9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 802ea9e:	687b      	ldr	r3, [r7, #4]
 802eaa0:	681b      	ldr	r3, [r3, #0]
 802eaa2:	699a      	ldr	r2, [r3, #24]
 802eaa4:	687b      	ldr	r3, [r7, #4]
 802eaa6:	681b      	ldr	r3, [r3, #0]
 802eaa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802eaac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 802eaae:	69bb      	ldr	r3, [r7, #24]
 802eab0:	f003 0320 	and.w	r3, r3, #32
 802eab4:	2b00      	cmp	r3, #0
 802eab6:	d00f      	beq.n	802ead8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 802eab8:	687b      	ldr	r3, [r7, #4]
 802eaba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802eabe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 802eac2:	687b      	ldr	r3, [r7, #4]
 802eac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 802eac8:	687b      	ldr	r3, [r7, #4]
 802eaca:	681b      	ldr	r3, [r3, #0]
 802eacc:	699a      	ldr	r2, [r3, #24]
 802eace:	687b      	ldr	r3, [r7, #4]
 802ead0:	681b      	ldr	r3, [r3, #0]
 802ead2:	f042 0220 	orr.w	r2, r2, #32
 802ead6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802ead8:	687b      	ldr	r3, [r7, #4]
 802eada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802eade:	2b00      	cmp	r3, #0
 802eae0:	d05a      	beq.n	802eb98 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 802eae2:	687b      	ldr	r3, [r7, #4]
 802eae4:	681b      	ldr	r3, [r3, #0]
 802eae6:	681a      	ldr	r2, [r3, #0]
 802eae8:	687b      	ldr	r3, [r7, #4]
 802eaea:	681b      	ldr	r3, [r3, #0]
 802eaec:	f022 0201 	bic.w	r2, r2, #1
 802eaf0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 802eaf2:	687b      	ldr	r3, [r7, #4]
 802eaf4:	681b      	ldr	r3, [r3, #0]
 802eaf6:	6919      	ldr	r1, [r3, #16]
 802eaf8:	687b      	ldr	r3, [r7, #4]
 802eafa:	681a      	ldr	r2, [r3, #0]
 802eafc:	4b28      	ldr	r3, [pc, #160]	; (802eba0 <HAL_SPI_IRQHandler+0x394>)
 802eafe:	400b      	ands	r3, r1
 802eb00:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 802eb02:	697b      	ldr	r3, [r7, #20]
 802eb04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802eb08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 802eb0c:	d138      	bne.n	802eb80 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 802eb0e:	687b      	ldr	r3, [r7, #4]
 802eb10:	681b      	ldr	r3, [r3, #0]
 802eb12:	689a      	ldr	r2, [r3, #8]
 802eb14:	687b      	ldr	r3, [r7, #4]
 802eb16:	681b      	ldr	r3, [r3, #0]
 802eb18:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 802eb1c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 802eb1e:	687b      	ldr	r3, [r7, #4]
 802eb20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802eb22:	2b00      	cmp	r3, #0
 802eb24:	d013      	beq.n	802eb4e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802eb26:	687b      	ldr	r3, [r7, #4]
 802eb28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802eb2a:	4a1e      	ldr	r2, [pc, #120]	; (802eba4 <HAL_SPI_IRQHandler+0x398>)
 802eb2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802eb2e:	687b      	ldr	r3, [r7, #4]
 802eb30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802eb32:	4618      	mov	r0, r3
 802eb34:	f7fb ff82 	bl	802aa3c <HAL_DMA_Abort_IT>
 802eb38:	4603      	mov	r3, r0
 802eb3a:	2b00      	cmp	r3, #0
 802eb3c:	d007      	beq.n	802eb4e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802eb3e:	687b      	ldr	r3, [r7, #4]
 802eb40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802eb44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802eb48:	687b      	ldr	r3, [r7, #4]
 802eb4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 802eb4e:	687b      	ldr	r3, [r7, #4]
 802eb50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802eb52:	2b00      	cmp	r3, #0
 802eb54:	d020      	beq.n	802eb98 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802eb56:	687b      	ldr	r3, [r7, #4]
 802eb58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802eb5a:	4a12      	ldr	r2, [pc, #72]	; (802eba4 <HAL_SPI_IRQHandler+0x398>)
 802eb5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 802eb5e:	687b      	ldr	r3, [r7, #4]
 802eb60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802eb62:	4618      	mov	r0, r3
 802eb64:	f7fb ff6a 	bl	802aa3c <HAL_DMA_Abort_IT>
 802eb68:	4603      	mov	r3, r0
 802eb6a:	2b00      	cmp	r3, #0
 802eb6c:	d014      	beq.n	802eb98 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802eb6e:	687b      	ldr	r3, [r7, #4]
 802eb70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802eb74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802eb78:	687b      	ldr	r3, [r7, #4]
 802eb7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 802eb7e:	e00b      	b.n	802eb98 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 802eb80:	687b      	ldr	r3, [r7, #4]
 802eb82:	2201      	movs	r2, #1
 802eb84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 802eb88:	6878      	ldr	r0, [r7, #4]
 802eb8a:	f000 f82b 	bl	802ebe4 <HAL_SPI_ErrorCallback>
    return;
 802eb8e:	e003      	b.n	802eb98 <HAL_SPI_IRQHandler+0x38c>
    return;
 802eb90:	bf00      	nop
 802eb92:	e002      	b.n	802eb9a <HAL_SPI_IRQHandler+0x38e>
    return;
 802eb94:	bf00      	nop
 802eb96:	e000      	b.n	802eb9a <HAL_SPI_IRQHandler+0x38e>
    return;
 802eb98:	bf00      	nop
  }
}
 802eb9a:	3728      	adds	r7, #40	; 0x28
 802eb9c:	46bd      	mov	sp, r7
 802eb9e:	bd80      	pop	{r7, pc}
 802eba0:	fffffc94 	.word	0xfffffc94
 802eba4:	0802ec0d 	.word	0x0802ec0d

0802eba8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802eba8:	b480      	push	{r7}
 802ebaa:	b083      	sub	sp, #12
 802ebac:	af00      	add	r7, sp, #0
 802ebae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 802ebb0:	bf00      	nop
 802ebb2:	370c      	adds	r7, #12
 802ebb4:	46bd      	mov	sp, r7
 802ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ebba:	4770      	bx	lr

0802ebbc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802ebbc:	b480      	push	{r7}
 802ebbe:	b083      	sub	sp, #12
 802ebc0:	af00      	add	r7, sp, #0
 802ebc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 802ebc4:	bf00      	nop
 802ebc6:	370c      	adds	r7, #12
 802ebc8:	46bd      	mov	sp, r7
 802ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ebce:	4770      	bx	lr

0802ebd0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802ebd0:	b480      	push	{r7}
 802ebd2:	b083      	sub	sp, #12
 802ebd4:	af00      	add	r7, sp, #0
 802ebd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 802ebd8:	bf00      	nop
 802ebda:	370c      	adds	r7, #12
 802ebdc:	46bd      	mov	sp, r7
 802ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ebe2:	4770      	bx	lr

0802ebe4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 802ebe4:	b480      	push	{r7}
 802ebe6:	b083      	sub	sp, #12
 802ebe8:	af00      	add	r7, sp, #0
 802ebea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 802ebec:	bf00      	nop
 802ebee:	370c      	adds	r7, #12
 802ebf0:	46bd      	mov	sp, r7
 802ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ebf6:	4770      	bx	lr

0802ebf8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 802ebf8:	b480      	push	{r7}
 802ebfa:	b083      	sub	sp, #12
 802ebfc:	af00      	add	r7, sp, #0
 802ebfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 802ec00:	bf00      	nop
 802ec02:	370c      	adds	r7, #12
 802ec04:	46bd      	mov	sp, r7
 802ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ec0a:	4770      	bx	lr

0802ec0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802ec0c:	b580      	push	{r7, lr}
 802ec0e:	b084      	sub	sp, #16
 802ec10:	af00      	add	r7, sp, #0
 802ec12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802ec14:	687b      	ldr	r3, [r7, #4]
 802ec16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 802ec1a:	68fb      	ldr	r3, [r7, #12]
 802ec1c:	2200      	movs	r2, #0
 802ec1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 802ec22:	68fb      	ldr	r3, [r7, #12]
 802ec24:	2200      	movs	r2, #0
 802ec26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 802ec2a:	68fb      	ldr	r3, [r7, #12]
 802ec2c:	2201      	movs	r2, #1
 802ec2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802ec32:	68f8      	ldr	r0, [r7, #12]
 802ec34:	f7ff ffd6 	bl	802ebe4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802ec38:	bf00      	nop
 802ec3a:	3710      	adds	r7, #16
 802ec3c:	46bd      	mov	sp, r7
 802ec3e:	bd80      	pop	{r7, pc}

0802ec40 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 802ec40:	b480      	push	{r7}
 802ec42:	b085      	sub	sp, #20
 802ec44:	af00      	add	r7, sp, #0
 802ec46:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 802ec48:	687b      	ldr	r3, [r7, #4]
 802ec4a:	681b      	ldr	r3, [r3, #0]
 802ec4c:	695b      	ldr	r3, [r3, #20]
 802ec4e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 802ec50:	687b      	ldr	r3, [r7, #4]
 802ec52:	681b      	ldr	r3, [r3, #0]
 802ec54:	699a      	ldr	r2, [r3, #24]
 802ec56:	687b      	ldr	r3, [r7, #4]
 802ec58:	681b      	ldr	r3, [r3, #0]
 802ec5a:	f042 0208 	orr.w	r2, r2, #8
 802ec5e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 802ec60:	687b      	ldr	r3, [r7, #4]
 802ec62:	681b      	ldr	r3, [r3, #0]
 802ec64:	699a      	ldr	r2, [r3, #24]
 802ec66:	687b      	ldr	r3, [r7, #4]
 802ec68:	681b      	ldr	r3, [r3, #0]
 802ec6a:	f042 0210 	orr.w	r2, r2, #16
 802ec6e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802ec70:	687b      	ldr	r3, [r7, #4]
 802ec72:	681b      	ldr	r3, [r3, #0]
 802ec74:	681a      	ldr	r2, [r3, #0]
 802ec76:	687b      	ldr	r3, [r7, #4]
 802ec78:	681b      	ldr	r3, [r3, #0]
 802ec7a:	f022 0201 	bic.w	r2, r2, #1
 802ec7e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 802ec80:	687b      	ldr	r3, [r7, #4]
 802ec82:	681b      	ldr	r3, [r3, #0]
 802ec84:	6919      	ldr	r1, [r3, #16]
 802ec86:	687b      	ldr	r3, [r7, #4]
 802ec88:	681a      	ldr	r2, [r3, #0]
 802ec8a:	4b3c      	ldr	r3, [pc, #240]	; (802ed7c <SPI_CloseTransfer+0x13c>)
 802ec8c:	400b      	ands	r3, r1
 802ec8e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 802ec90:	687b      	ldr	r3, [r7, #4]
 802ec92:	681b      	ldr	r3, [r3, #0]
 802ec94:	689a      	ldr	r2, [r3, #8]
 802ec96:	687b      	ldr	r3, [r7, #4]
 802ec98:	681b      	ldr	r3, [r3, #0]
 802ec9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 802ec9e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802eca0:	687b      	ldr	r3, [r7, #4]
 802eca2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802eca6:	b2db      	uxtb	r3, r3
 802eca8:	2b04      	cmp	r3, #4
 802ecaa:	d014      	beq.n	802ecd6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 802ecac:	68fb      	ldr	r3, [r7, #12]
 802ecae:	f003 0320 	and.w	r3, r3, #32
 802ecb2:	2b00      	cmp	r3, #0
 802ecb4:	d00f      	beq.n	802ecd6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 802ecb6:	687b      	ldr	r3, [r7, #4]
 802ecb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802ecbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 802ecc0:	687b      	ldr	r3, [r7, #4]
 802ecc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 802ecc6:	687b      	ldr	r3, [r7, #4]
 802ecc8:	681b      	ldr	r3, [r3, #0]
 802ecca:	699a      	ldr	r2, [r3, #24]
 802eccc:	687b      	ldr	r3, [r7, #4]
 802ecce:	681b      	ldr	r3, [r3, #0]
 802ecd0:	f042 0220 	orr.w	r2, r2, #32
 802ecd4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802ecd6:	687b      	ldr	r3, [r7, #4]
 802ecd8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802ecdc:	b2db      	uxtb	r3, r3
 802ecde:	2b03      	cmp	r3, #3
 802ece0:	d014      	beq.n	802ed0c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 802ece2:	68fb      	ldr	r3, [r7, #12]
 802ece4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ece8:	2b00      	cmp	r3, #0
 802ecea:	d00f      	beq.n	802ed0c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802ecec:	687b      	ldr	r3, [r7, #4]
 802ecee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802ecf2:	f043 0204 	orr.w	r2, r3, #4
 802ecf6:	687b      	ldr	r3, [r7, #4]
 802ecf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802ecfc:	687b      	ldr	r3, [r7, #4]
 802ecfe:	681b      	ldr	r3, [r3, #0]
 802ed00:	699a      	ldr	r2, [r3, #24]
 802ed02:	687b      	ldr	r3, [r7, #4]
 802ed04:	681b      	ldr	r3, [r3, #0]
 802ed06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ed0a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 802ed0c:	68fb      	ldr	r3, [r7, #12]
 802ed0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802ed12:	2b00      	cmp	r3, #0
 802ed14:	d00f      	beq.n	802ed36 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802ed16:	687b      	ldr	r3, [r7, #4]
 802ed18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802ed1c:	f043 0201 	orr.w	r2, r3, #1
 802ed20:	687b      	ldr	r3, [r7, #4]
 802ed22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802ed26:	687b      	ldr	r3, [r7, #4]
 802ed28:	681b      	ldr	r3, [r3, #0]
 802ed2a:	699a      	ldr	r2, [r3, #24]
 802ed2c:	687b      	ldr	r3, [r7, #4]
 802ed2e:	681b      	ldr	r3, [r3, #0]
 802ed30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802ed34:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 802ed36:	68fb      	ldr	r3, [r7, #12]
 802ed38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802ed3c:	2b00      	cmp	r3, #0
 802ed3e:	d00f      	beq.n	802ed60 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802ed40:	687b      	ldr	r3, [r7, #4]
 802ed42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802ed46:	f043 0208 	orr.w	r2, r3, #8
 802ed4a:	687b      	ldr	r3, [r7, #4]
 802ed4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 802ed50:	687b      	ldr	r3, [r7, #4]
 802ed52:	681b      	ldr	r3, [r3, #0]
 802ed54:	699a      	ldr	r2, [r3, #24]
 802ed56:	687b      	ldr	r3, [r7, #4]
 802ed58:	681b      	ldr	r3, [r3, #0]
 802ed5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802ed5e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 802ed60:	687b      	ldr	r3, [r7, #4]
 802ed62:	2200      	movs	r2, #0
 802ed64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 802ed68:	687b      	ldr	r3, [r7, #4]
 802ed6a:	2200      	movs	r2, #0
 802ed6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 802ed70:	bf00      	nop
 802ed72:	3714      	adds	r7, #20
 802ed74:	46bd      	mov	sp, r7
 802ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed7a:	4770      	bx	lr
 802ed7c:	fffffc90 	.word	0xfffffc90

0802ed80 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 802ed80:	b580      	push	{r7, lr}
 802ed82:	b084      	sub	sp, #16
 802ed84:	af00      	add	r7, sp, #0
 802ed86:	60f8      	str	r0, [r7, #12]
 802ed88:	60b9      	str	r1, [r7, #8]
 802ed8a:	603b      	str	r3, [r7, #0]
 802ed8c:	4613      	mov	r3, r2
 802ed8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 802ed90:	e010      	b.n	802edb4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802ed92:	f7fb fc8b 	bl	802a6ac <HAL_GetTick>
 802ed96:	4602      	mov	r2, r0
 802ed98:	69bb      	ldr	r3, [r7, #24]
 802ed9a:	1ad3      	subs	r3, r2, r3
 802ed9c:	683a      	ldr	r2, [r7, #0]
 802ed9e:	429a      	cmp	r2, r3
 802eda0:	d803      	bhi.n	802edaa <SPI_WaitOnFlagUntilTimeout+0x2a>
 802eda2:	683b      	ldr	r3, [r7, #0]
 802eda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 802eda8:	d102      	bne.n	802edb0 <SPI_WaitOnFlagUntilTimeout+0x30>
 802edaa:	683b      	ldr	r3, [r7, #0]
 802edac:	2b00      	cmp	r3, #0
 802edae:	d101      	bne.n	802edb4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 802edb0:	2303      	movs	r3, #3
 802edb2:	e00f      	b.n	802edd4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 802edb4:	68fb      	ldr	r3, [r7, #12]
 802edb6:	681b      	ldr	r3, [r3, #0]
 802edb8:	695a      	ldr	r2, [r3, #20]
 802edba:	68bb      	ldr	r3, [r7, #8]
 802edbc:	4013      	ands	r3, r2
 802edbe:	68ba      	ldr	r2, [r7, #8]
 802edc0:	429a      	cmp	r2, r3
 802edc2:	bf0c      	ite	eq
 802edc4:	2301      	moveq	r3, #1
 802edc6:	2300      	movne	r3, #0
 802edc8:	b2db      	uxtb	r3, r3
 802edca:	461a      	mov	r2, r3
 802edcc:	79fb      	ldrb	r3, [r7, #7]
 802edce:	429a      	cmp	r2, r3
 802edd0:	d0df      	beq.n	802ed92 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 802edd2:	2300      	movs	r3, #0
}
 802edd4:	4618      	mov	r0, r3
 802edd6:	3710      	adds	r7, #16
 802edd8:	46bd      	mov	sp, r7
 802edda:	bd80      	pop	{r7, pc}

0802eddc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 802eddc:	b480      	push	{r7}
 802edde:	b085      	sub	sp, #20
 802ede0:	af00      	add	r7, sp, #0
 802ede2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 802ede4:	687b      	ldr	r3, [r7, #4]
 802ede6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ede8:	095b      	lsrs	r3, r3, #5
 802edea:	3301      	adds	r3, #1
 802edec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 802edee:	687b      	ldr	r3, [r7, #4]
 802edf0:	68db      	ldr	r3, [r3, #12]
 802edf2:	3301      	adds	r3, #1
 802edf4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 802edf6:	68bb      	ldr	r3, [r7, #8]
 802edf8:	3307      	adds	r3, #7
 802edfa:	08db      	lsrs	r3, r3, #3
 802edfc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 802edfe:	68bb      	ldr	r3, [r7, #8]
 802ee00:	68fa      	ldr	r2, [r7, #12]
 802ee02:	fb02 f303 	mul.w	r3, r2, r3
}
 802ee06:	4618      	mov	r0, r3
 802ee08:	3714      	adds	r7, #20
 802ee0a:	46bd      	mov	sp, r7
 802ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ee10:	4770      	bx	lr
	...

0802ee14 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 802ee14:	b580      	push	{r7, lr}
 802ee16:	b084      	sub	sp, #16
 802ee18:	af00      	add	r7, sp, #0
 802ee1a:	60f8      	str	r0, [r7, #12]
 802ee1c:	60b9      	str	r1, [r7, #8]
 802ee1e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 802ee20:	68fb      	ldr	r3, [r7, #12]
 802ee22:	2b00      	cmp	r3, #0
 802ee24:	d101      	bne.n	802ee2a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 802ee26:	2301      	movs	r3, #1
 802ee28:	e03e      	b.n	802eea8 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 802ee2a:	68fb      	ldr	r3, [r7, #12]
 802ee2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802ee30:	b2db      	uxtb	r3, r3
 802ee32:	2b00      	cmp	r3, #0
 802ee34:	d106      	bne.n	802ee44 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 802ee36:	68fb      	ldr	r3, [r7, #12]
 802ee38:	2200      	movs	r2, #0
 802ee3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 802ee3e:	68f8      	ldr	r0, [r7, #12]
 802ee40:	f7fb f8cc 	bl	8029fdc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 802ee44:	68fb      	ldr	r3, [r7, #12]
 802ee46:	681a      	ldr	r2, [r3, #0]
 802ee48:	68fb      	ldr	r3, [r7, #12]
 802ee4a:	3308      	adds	r3, #8
 802ee4c:	4619      	mov	r1, r3
 802ee4e:	4610      	mov	r0, r2
 802ee50:	f001 fca4 	bl	803079c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 802ee54:	68fb      	ldr	r3, [r7, #12]
 802ee56:	6818      	ldr	r0, [r3, #0]
 802ee58:	68fb      	ldr	r3, [r7, #12]
 802ee5a:	689b      	ldr	r3, [r3, #8]
 802ee5c:	461a      	mov	r2, r3
 802ee5e:	68b9      	ldr	r1, [r7, #8]
 802ee60:	f001 fd2c 	bl	80308bc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 802ee64:	68fb      	ldr	r3, [r7, #12]
 802ee66:	6858      	ldr	r0, [r3, #4]
 802ee68:	68fb      	ldr	r3, [r7, #12]
 802ee6a:	689a      	ldr	r2, [r3, #8]
 802ee6c:	68fb      	ldr	r3, [r7, #12]
 802ee6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ee70:	6879      	ldr	r1, [r7, #4]
 802ee72:	f001 fd73 	bl	803095c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 802ee76:	68fb      	ldr	r3, [r7, #12]
 802ee78:	681b      	ldr	r3, [r3, #0]
 802ee7a:	68fa      	ldr	r2, [r7, #12]
 802ee7c:	6892      	ldr	r2, [r2, #8]
 802ee7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802ee82:	68fb      	ldr	r3, [r7, #12]
 802ee84:	681b      	ldr	r3, [r3, #0]
 802ee86:	68fa      	ldr	r2, [r7, #12]
 802ee88:	6892      	ldr	r2, [r2, #8]
 802ee8a:	f041 0101 	orr.w	r1, r1, #1
 802ee8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 802ee92:	4b07      	ldr	r3, [pc, #28]	; (802eeb0 <HAL_SRAM_Init+0x9c>)
 802ee94:	681b      	ldr	r3, [r3, #0]
 802ee96:	4a06      	ldr	r2, [pc, #24]	; (802eeb0 <HAL_SRAM_Init+0x9c>)
 802ee98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ee9c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 802ee9e:	68fb      	ldr	r3, [r7, #12]
 802eea0:	2201      	movs	r2, #1
 802eea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 802eea6:	2300      	movs	r3, #0
}
 802eea8:	4618      	mov	r0, r3
 802eeaa:	3710      	adds	r7, #16
 802eeac:	46bd      	mov	sp, r7
 802eeae:	bd80      	pop	{r7, pc}
 802eeb0:	52004000 	.word	0x52004000

0802eeb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802eeb4:	b580      	push	{r7, lr}
 802eeb6:	b082      	sub	sp, #8
 802eeb8:	af00      	add	r7, sp, #0
 802eeba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802eebc:	687b      	ldr	r3, [r7, #4]
 802eebe:	2b00      	cmp	r3, #0
 802eec0:	d101      	bne.n	802eec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802eec2:	2301      	movs	r3, #1
 802eec4:	e049      	b.n	802ef5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802eec6:	687b      	ldr	r3, [r7, #4]
 802eec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802eecc:	b2db      	uxtb	r3, r3
 802eece:	2b00      	cmp	r3, #0
 802eed0:	d106      	bne.n	802eee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802eed2:	687b      	ldr	r3, [r7, #4]
 802eed4:	2200      	movs	r2, #0
 802eed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802eeda:	6878      	ldr	r0, [r7, #4]
 802eedc:	f7fa fd60 	bl	80299a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802eee0:	687b      	ldr	r3, [r7, #4]
 802eee2:	2202      	movs	r2, #2
 802eee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802eee8:	687b      	ldr	r3, [r7, #4]
 802eeea:	681a      	ldr	r2, [r3, #0]
 802eeec:	687b      	ldr	r3, [r7, #4]
 802eeee:	3304      	adds	r3, #4
 802eef0:	4619      	mov	r1, r3
 802eef2:	4610      	mov	r0, r2
 802eef4:	f000 f9f6 	bl	802f2e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802eef8:	687b      	ldr	r3, [r7, #4]
 802eefa:	2201      	movs	r2, #1
 802eefc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802ef00:	687b      	ldr	r3, [r7, #4]
 802ef02:	2201      	movs	r2, #1
 802ef04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802ef08:	687b      	ldr	r3, [r7, #4]
 802ef0a:	2201      	movs	r2, #1
 802ef0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 802ef10:	687b      	ldr	r3, [r7, #4]
 802ef12:	2201      	movs	r2, #1
 802ef14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802ef18:	687b      	ldr	r3, [r7, #4]
 802ef1a:	2201      	movs	r2, #1
 802ef1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802ef20:	687b      	ldr	r3, [r7, #4]
 802ef22:	2201      	movs	r2, #1
 802ef24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802ef28:	687b      	ldr	r3, [r7, #4]
 802ef2a:	2201      	movs	r2, #1
 802ef2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802ef30:	687b      	ldr	r3, [r7, #4]
 802ef32:	2201      	movs	r2, #1
 802ef34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802ef38:	687b      	ldr	r3, [r7, #4]
 802ef3a:	2201      	movs	r2, #1
 802ef3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802ef40:	687b      	ldr	r3, [r7, #4]
 802ef42:	2201      	movs	r2, #1
 802ef44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 802ef48:	687b      	ldr	r3, [r7, #4]
 802ef4a:	2201      	movs	r2, #1
 802ef4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802ef50:	687b      	ldr	r3, [r7, #4]
 802ef52:	2201      	movs	r2, #1
 802ef54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802ef58:	2300      	movs	r3, #0
}
 802ef5a:	4618      	mov	r0, r3
 802ef5c:	3708      	adds	r7, #8
 802ef5e:	46bd      	mov	sp, r7
 802ef60:	bd80      	pop	{r7, pc}
	...

0802ef64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 802ef64:	b480      	push	{r7}
 802ef66:	b085      	sub	sp, #20
 802ef68:	af00      	add	r7, sp, #0
 802ef6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 802ef6c:	687b      	ldr	r3, [r7, #4]
 802ef6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802ef72:	b2db      	uxtb	r3, r3
 802ef74:	2b01      	cmp	r3, #1
 802ef76:	d001      	beq.n	802ef7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802ef78:	2301      	movs	r3, #1
 802ef7a:	e054      	b.n	802f026 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802ef7c:	687b      	ldr	r3, [r7, #4]
 802ef7e:	2202      	movs	r2, #2
 802ef80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802ef84:	687b      	ldr	r3, [r7, #4]
 802ef86:	681b      	ldr	r3, [r3, #0]
 802ef88:	68da      	ldr	r2, [r3, #12]
 802ef8a:	687b      	ldr	r3, [r7, #4]
 802ef8c:	681b      	ldr	r3, [r3, #0]
 802ef8e:	f042 0201 	orr.w	r2, r2, #1
 802ef92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802ef94:	687b      	ldr	r3, [r7, #4]
 802ef96:	681b      	ldr	r3, [r3, #0]
 802ef98:	4a26      	ldr	r2, [pc, #152]	; (802f034 <HAL_TIM_Base_Start_IT+0xd0>)
 802ef9a:	4293      	cmp	r3, r2
 802ef9c:	d022      	beq.n	802efe4 <HAL_TIM_Base_Start_IT+0x80>
 802ef9e:	687b      	ldr	r3, [r7, #4]
 802efa0:	681b      	ldr	r3, [r3, #0]
 802efa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802efa6:	d01d      	beq.n	802efe4 <HAL_TIM_Base_Start_IT+0x80>
 802efa8:	687b      	ldr	r3, [r7, #4]
 802efaa:	681b      	ldr	r3, [r3, #0]
 802efac:	4a22      	ldr	r2, [pc, #136]	; (802f038 <HAL_TIM_Base_Start_IT+0xd4>)
 802efae:	4293      	cmp	r3, r2
 802efb0:	d018      	beq.n	802efe4 <HAL_TIM_Base_Start_IT+0x80>
 802efb2:	687b      	ldr	r3, [r7, #4]
 802efb4:	681b      	ldr	r3, [r3, #0]
 802efb6:	4a21      	ldr	r2, [pc, #132]	; (802f03c <HAL_TIM_Base_Start_IT+0xd8>)
 802efb8:	4293      	cmp	r3, r2
 802efba:	d013      	beq.n	802efe4 <HAL_TIM_Base_Start_IT+0x80>
 802efbc:	687b      	ldr	r3, [r7, #4]
 802efbe:	681b      	ldr	r3, [r3, #0]
 802efc0:	4a1f      	ldr	r2, [pc, #124]	; (802f040 <HAL_TIM_Base_Start_IT+0xdc>)
 802efc2:	4293      	cmp	r3, r2
 802efc4:	d00e      	beq.n	802efe4 <HAL_TIM_Base_Start_IT+0x80>
 802efc6:	687b      	ldr	r3, [r7, #4]
 802efc8:	681b      	ldr	r3, [r3, #0]
 802efca:	4a1e      	ldr	r2, [pc, #120]	; (802f044 <HAL_TIM_Base_Start_IT+0xe0>)
 802efcc:	4293      	cmp	r3, r2
 802efce:	d009      	beq.n	802efe4 <HAL_TIM_Base_Start_IT+0x80>
 802efd0:	687b      	ldr	r3, [r7, #4]
 802efd2:	681b      	ldr	r3, [r3, #0]
 802efd4:	4a1c      	ldr	r2, [pc, #112]	; (802f048 <HAL_TIM_Base_Start_IT+0xe4>)
 802efd6:	4293      	cmp	r3, r2
 802efd8:	d004      	beq.n	802efe4 <HAL_TIM_Base_Start_IT+0x80>
 802efda:	687b      	ldr	r3, [r7, #4]
 802efdc:	681b      	ldr	r3, [r3, #0]
 802efde:	4a1b      	ldr	r2, [pc, #108]	; (802f04c <HAL_TIM_Base_Start_IT+0xe8>)
 802efe0:	4293      	cmp	r3, r2
 802efe2:	d115      	bne.n	802f010 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802efe4:	687b      	ldr	r3, [r7, #4]
 802efe6:	681b      	ldr	r3, [r3, #0]
 802efe8:	689a      	ldr	r2, [r3, #8]
 802efea:	4b19      	ldr	r3, [pc, #100]	; (802f050 <HAL_TIM_Base_Start_IT+0xec>)
 802efec:	4013      	ands	r3, r2
 802efee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802eff0:	68fb      	ldr	r3, [r7, #12]
 802eff2:	2b06      	cmp	r3, #6
 802eff4:	d015      	beq.n	802f022 <HAL_TIM_Base_Start_IT+0xbe>
 802eff6:	68fb      	ldr	r3, [r7, #12]
 802eff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802effc:	d011      	beq.n	802f022 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 802effe:	687b      	ldr	r3, [r7, #4]
 802f000:	681b      	ldr	r3, [r3, #0]
 802f002:	681a      	ldr	r2, [r3, #0]
 802f004:	687b      	ldr	r3, [r7, #4]
 802f006:	681b      	ldr	r3, [r3, #0]
 802f008:	f042 0201 	orr.w	r2, r2, #1
 802f00c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802f00e:	e008      	b.n	802f022 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802f010:	687b      	ldr	r3, [r7, #4]
 802f012:	681b      	ldr	r3, [r3, #0]
 802f014:	681a      	ldr	r2, [r3, #0]
 802f016:	687b      	ldr	r3, [r7, #4]
 802f018:	681b      	ldr	r3, [r3, #0]
 802f01a:	f042 0201 	orr.w	r2, r2, #1
 802f01e:	601a      	str	r2, [r3, #0]
 802f020:	e000      	b.n	802f024 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802f022:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 802f024:	2300      	movs	r3, #0
}
 802f026:	4618      	mov	r0, r3
 802f028:	3714      	adds	r7, #20
 802f02a:	46bd      	mov	sp, r7
 802f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f030:	4770      	bx	lr
 802f032:	bf00      	nop
 802f034:	40010000 	.word	0x40010000
 802f038:	40000400 	.word	0x40000400
 802f03c:	40000800 	.word	0x40000800
 802f040:	40000c00 	.word	0x40000c00
 802f044:	40010400 	.word	0x40010400
 802f048:	40001800 	.word	0x40001800
 802f04c:	40014000 	.word	0x40014000
 802f050:	00010007 	.word	0x00010007

0802f054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802f054:	b580      	push	{r7, lr}
 802f056:	b082      	sub	sp, #8
 802f058:	af00      	add	r7, sp, #0
 802f05a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802f05c:	687b      	ldr	r3, [r7, #4]
 802f05e:	681b      	ldr	r3, [r3, #0]
 802f060:	691b      	ldr	r3, [r3, #16]
 802f062:	f003 0302 	and.w	r3, r3, #2
 802f066:	2b02      	cmp	r3, #2
 802f068:	d122      	bne.n	802f0b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802f06a:	687b      	ldr	r3, [r7, #4]
 802f06c:	681b      	ldr	r3, [r3, #0]
 802f06e:	68db      	ldr	r3, [r3, #12]
 802f070:	f003 0302 	and.w	r3, r3, #2
 802f074:	2b02      	cmp	r3, #2
 802f076:	d11b      	bne.n	802f0b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802f078:	687b      	ldr	r3, [r7, #4]
 802f07a:	681b      	ldr	r3, [r3, #0]
 802f07c:	f06f 0202 	mvn.w	r2, #2
 802f080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802f082:	687b      	ldr	r3, [r7, #4]
 802f084:	2201      	movs	r2, #1
 802f086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802f088:	687b      	ldr	r3, [r7, #4]
 802f08a:	681b      	ldr	r3, [r3, #0]
 802f08c:	699b      	ldr	r3, [r3, #24]
 802f08e:	f003 0303 	and.w	r3, r3, #3
 802f092:	2b00      	cmp	r3, #0
 802f094:	d003      	beq.n	802f09e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802f096:	6878      	ldr	r0, [r7, #4]
 802f098:	f000 f905 	bl	802f2a6 <HAL_TIM_IC_CaptureCallback>
 802f09c:	e005      	b.n	802f0aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802f09e:	6878      	ldr	r0, [r7, #4]
 802f0a0:	f000 f8f7 	bl	802f292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802f0a4:	6878      	ldr	r0, [r7, #4]
 802f0a6:	f000 f908 	bl	802f2ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802f0aa:	687b      	ldr	r3, [r7, #4]
 802f0ac:	2200      	movs	r2, #0
 802f0ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802f0b0:	687b      	ldr	r3, [r7, #4]
 802f0b2:	681b      	ldr	r3, [r3, #0]
 802f0b4:	691b      	ldr	r3, [r3, #16]
 802f0b6:	f003 0304 	and.w	r3, r3, #4
 802f0ba:	2b04      	cmp	r3, #4
 802f0bc:	d122      	bne.n	802f104 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802f0be:	687b      	ldr	r3, [r7, #4]
 802f0c0:	681b      	ldr	r3, [r3, #0]
 802f0c2:	68db      	ldr	r3, [r3, #12]
 802f0c4:	f003 0304 	and.w	r3, r3, #4
 802f0c8:	2b04      	cmp	r3, #4
 802f0ca:	d11b      	bne.n	802f104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802f0cc:	687b      	ldr	r3, [r7, #4]
 802f0ce:	681b      	ldr	r3, [r3, #0]
 802f0d0:	f06f 0204 	mvn.w	r2, #4
 802f0d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802f0d6:	687b      	ldr	r3, [r7, #4]
 802f0d8:	2202      	movs	r2, #2
 802f0da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802f0dc:	687b      	ldr	r3, [r7, #4]
 802f0de:	681b      	ldr	r3, [r3, #0]
 802f0e0:	699b      	ldr	r3, [r3, #24]
 802f0e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802f0e6:	2b00      	cmp	r3, #0
 802f0e8:	d003      	beq.n	802f0f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802f0ea:	6878      	ldr	r0, [r7, #4]
 802f0ec:	f000 f8db 	bl	802f2a6 <HAL_TIM_IC_CaptureCallback>
 802f0f0:	e005      	b.n	802f0fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802f0f2:	6878      	ldr	r0, [r7, #4]
 802f0f4:	f000 f8cd 	bl	802f292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802f0f8:	6878      	ldr	r0, [r7, #4]
 802f0fa:	f000 f8de 	bl	802f2ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802f0fe:	687b      	ldr	r3, [r7, #4]
 802f100:	2200      	movs	r2, #0
 802f102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802f104:	687b      	ldr	r3, [r7, #4]
 802f106:	681b      	ldr	r3, [r3, #0]
 802f108:	691b      	ldr	r3, [r3, #16]
 802f10a:	f003 0308 	and.w	r3, r3, #8
 802f10e:	2b08      	cmp	r3, #8
 802f110:	d122      	bne.n	802f158 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802f112:	687b      	ldr	r3, [r7, #4]
 802f114:	681b      	ldr	r3, [r3, #0]
 802f116:	68db      	ldr	r3, [r3, #12]
 802f118:	f003 0308 	and.w	r3, r3, #8
 802f11c:	2b08      	cmp	r3, #8
 802f11e:	d11b      	bne.n	802f158 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802f120:	687b      	ldr	r3, [r7, #4]
 802f122:	681b      	ldr	r3, [r3, #0]
 802f124:	f06f 0208 	mvn.w	r2, #8
 802f128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802f12a:	687b      	ldr	r3, [r7, #4]
 802f12c:	2204      	movs	r2, #4
 802f12e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802f130:	687b      	ldr	r3, [r7, #4]
 802f132:	681b      	ldr	r3, [r3, #0]
 802f134:	69db      	ldr	r3, [r3, #28]
 802f136:	f003 0303 	and.w	r3, r3, #3
 802f13a:	2b00      	cmp	r3, #0
 802f13c:	d003      	beq.n	802f146 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802f13e:	6878      	ldr	r0, [r7, #4]
 802f140:	f000 f8b1 	bl	802f2a6 <HAL_TIM_IC_CaptureCallback>
 802f144:	e005      	b.n	802f152 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802f146:	6878      	ldr	r0, [r7, #4]
 802f148:	f000 f8a3 	bl	802f292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802f14c:	6878      	ldr	r0, [r7, #4]
 802f14e:	f000 f8b4 	bl	802f2ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802f152:	687b      	ldr	r3, [r7, #4]
 802f154:	2200      	movs	r2, #0
 802f156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802f158:	687b      	ldr	r3, [r7, #4]
 802f15a:	681b      	ldr	r3, [r3, #0]
 802f15c:	691b      	ldr	r3, [r3, #16]
 802f15e:	f003 0310 	and.w	r3, r3, #16
 802f162:	2b10      	cmp	r3, #16
 802f164:	d122      	bne.n	802f1ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802f166:	687b      	ldr	r3, [r7, #4]
 802f168:	681b      	ldr	r3, [r3, #0]
 802f16a:	68db      	ldr	r3, [r3, #12]
 802f16c:	f003 0310 	and.w	r3, r3, #16
 802f170:	2b10      	cmp	r3, #16
 802f172:	d11b      	bne.n	802f1ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802f174:	687b      	ldr	r3, [r7, #4]
 802f176:	681b      	ldr	r3, [r3, #0]
 802f178:	f06f 0210 	mvn.w	r2, #16
 802f17c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802f17e:	687b      	ldr	r3, [r7, #4]
 802f180:	2208      	movs	r2, #8
 802f182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802f184:	687b      	ldr	r3, [r7, #4]
 802f186:	681b      	ldr	r3, [r3, #0]
 802f188:	69db      	ldr	r3, [r3, #28]
 802f18a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802f18e:	2b00      	cmp	r3, #0
 802f190:	d003      	beq.n	802f19a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802f192:	6878      	ldr	r0, [r7, #4]
 802f194:	f000 f887 	bl	802f2a6 <HAL_TIM_IC_CaptureCallback>
 802f198:	e005      	b.n	802f1a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802f19a:	6878      	ldr	r0, [r7, #4]
 802f19c:	f000 f879 	bl	802f292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802f1a0:	6878      	ldr	r0, [r7, #4]
 802f1a2:	f000 f88a 	bl	802f2ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802f1a6:	687b      	ldr	r3, [r7, #4]
 802f1a8:	2200      	movs	r2, #0
 802f1aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802f1ac:	687b      	ldr	r3, [r7, #4]
 802f1ae:	681b      	ldr	r3, [r3, #0]
 802f1b0:	691b      	ldr	r3, [r3, #16]
 802f1b2:	f003 0301 	and.w	r3, r3, #1
 802f1b6:	2b01      	cmp	r3, #1
 802f1b8:	d10e      	bne.n	802f1d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802f1ba:	687b      	ldr	r3, [r7, #4]
 802f1bc:	681b      	ldr	r3, [r3, #0]
 802f1be:	68db      	ldr	r3, [r3, #12]
 802f1c0:	f003 0301 	and.w	r3, r3, #1
 802f1c4:	2b01      	cmp	r3, #1
 802f1c6:	d107      	bne.n	802f1d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802f1c8:	687b      	ldr	r3, [r7, #4]
 802f1ca:	681b      	ldr	r3, [r3, #0]
 802f1cc:	f06f 0201 	mvn.w	r2, #1
 802f1d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802f1d2:	6878      	ldr	r0, [r7, #4]
 802f1d4:	f7f7 fca0 	bl	8026b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802f1d8:	687b      	ldr	r3, [r7, #4]
 802f1da:	681b      	ldr	r3, [r3, #0]
 802f1dc:	691b      	ldr	r3, [r3, #16]
 802f1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802f1e2:	2b80      	cmp	r3, #128	; 0x80
 802f1e4:	d10e      	bne.n	802f204 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802f1e6:	687b      	ldr	r3, [r7, #4]
 802f1e8:	681b      	ldr	r3, [r3, #0]
 802f1ea:	68db      	ldr	r3, [r3, #12]
 802f1ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802f1f0:	2b80      	cmp	r3, #128	; 0x80
 802f1f2:	d107      	bne.n	802f204 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802f1f4:	687b      	ldr	r3, [r7, #4]
 802f1f6:	681b      	ldr	r3, [r3, #0]
 802f1f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802f1fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802f1fe:	6878      	ldr	r0, [r7, #4]
 802f200:	f000 f9a2 	bl	802f548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 802f204:	687b      	ldr	r3, [r7, #4]
 802f206:	681b      	ldr	r3, [r3, #0]
 802f208:	691b      	ldr	r3, [r3, #16]
 802f20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802f20e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802f212:	d10e      	bne.n	802f232 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802f214:	687b      	ldr	r3, [r7, #4]
 802f216:	681b      	ldr	r3, [r3, #0]
 802f218:	68db      	ldr	r3, [r3, #12]
 802f21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802f21e:	2b80      	cmp	r3, #128	; 0x80
 802f220:	d107      	bne.n	802f232 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 802f222:	687b      	ldr	r3, [r7, #4]
 802f224:	681b      	ldr	r3, [r3, #0]
 802f226:	f46f 7280 	mvn.w	r2, #256	; 0x100
 802f22a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 802f22c:	6878      	ldr	r0, [r7, #4]
 802f22e:	f000 f995 	bl	802f55c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802f232:	687b      	ldr	r3, [r7, #4]
 802f234:	681b      	ldr	r3, [r3, #0]
 802f236:	691b      	ldr	r3, [r3, #16]
 802f238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802f23c:	2b40      	cmp	r3, #64	; 0x40
 802f23e:	d10e      	bne.n	802f25e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802f240:	687b      	ldr	r3, [r7, #4]
 802f242:	681b      	ldr	r3, [r3, #0]
 802f244:	68db      	ldr	r3, [r3, #12]
 802f246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802f24a:	2b40      	cmp	r3, #64	; 0x40
 802f24c:	d107      	bne.n	802f25e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802f24e:	687b      	ldr	r3, [r7, #4]
 802f250:	681b      	ldr	r3, [r3, #0]
 802f252:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802f256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802f258:	6878      	ldr	r0, [r7, #4]
 802f25a:	f000 f838 	bl	802f2ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802f25e:	687b      	ldr	r3, [r7, #4]
 802f260:	681b      	ldr	r3, [r3, #0]
 802f262:	691b      	ldr	r3, [r3, #16]
 802f264:	f003 0320 	and.w	r3, r3, #32
 802f268:	2b20      	cmp	r3, #32
 802f26a:	d10e      	bne.n	802f28a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802f26c:	687b      	ldr	r3, [r7, #4]
 802f26e:	681b      	ldr	r3, [r3, #0]
 802f270:	68db      	ldr	r3, [r3, #12]
 802f272:	f003 0320 	and.w	r3, r3, #32
 802f276:	2b20      	cmp	r3, #32
 802f278:	d107      	bne.n	802f28a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802f27a:	687b      	ldr	r3, [r7, #4]
 802f27c:	681b      	ldr	r3, [r3, #0]
 802f27e:	f06f 0220 	mvn.w	r2, #32
 802f282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802f284:	6878      	ldr	r0, [r7, #4]
 802f286:	f000 f955 	bl	802f534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802f28a:	bf00      	nop
 802f28c:	3708      	adds	r7, #8
 802f28e:	46bd      	mov	sp, r7
 802f290:	bd80      	pop	{r7, pc}

0802f292 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802f292:	b480      	push	{r7}
 802f294:	b083      	sub	sp, #12
 802f296:	af00      	add	r7, sp, #0
 802f298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802f29a:	bf00      	nop
 802f29c:	370c      	adds	r7, #12
 802f29e:	46bd      	mov	sp, r7
 802f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f2a4:	4770      	bx	lr

0802f2a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802f2a6:	b480      	push	{r7}
 802f2a8:	b083      	sub	sp, #12
 802f2aa:	af00      	add	r7, sp, #0
 802f2ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802f2ae:	bf00      	nop
 802f2b0:	370c      	adds	r7, #12
 802f2b2:	46bd      	mov	sp, r7
 802f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f2b8:	4770      	bx	lr

0802f2ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802f2ba:	b480      	push	{r7}
 802f2bc:	b083      	sub	sp, #12
 802f2be:	af00      	add	r7, sp, #0
 802f2c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802f2c2:	bf00      	nop
 802f2c4:	370c      	adds	r7, #12
 802f2c6:	46bd      	mov	sp, r7
 802f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f2cc:	4770      	bx	lr

0802f2ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802f2ce:	b480      	push	{r7}
 802f2d0:	b083      	sub	sp, #12
 802f2d2:	af00      	add	r7, sp, #0
 802f2d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802f2d6:	bf00      	nop
 802f2d8:	370c      	adds	r7, #12
 802f2da:	46bd      	mov	sp, r7
 802f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f2e0:	4770      	bx	lr
	...

0802f2e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 802f2e4:	b480      	push	{r7}
 802f2e6:	b085      	sub	sp, #20
 802f2e8:	af00      	add	r7, sp, #0
 802f2ea:	6078      	str	r0, [r7, #4]
 802f2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802f2ee:	687b      	ldr	r3, [r7, #4]
 802f2f0:	681b      	ldr	r3, [r3, #0]
 802f2f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802f2f4:	687b      	ldr	r3, [r7, #4]
 802f2f6:	4a40      	ldr	r2, [pc, #256]	; (802f3f8 <TIM_Base_SetConfig+0x114>)
 802f2f8:	4293      	cmp	r3, r2
 802f2fa:	d013      	beq.n	802f324 <TIM_Base_SetConfig+0x40>
 802f2fc:	687b      	ldr	r3, [r7, #4]
 802f2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802f302:	d00f      	beq.n	802f324 <TIM_Base_SetConfig+0x40>
 802f304:	687b      	ldr	r3, [r7, #4]
 802f306:	4a3d      	ldr	r2, [pc, #244]	; (802f3fc <TIM_Base_SetConfig+0x118>)
 802f308:	4293      	cmp	r3, r2
 802f30a:	d00b      	beq.n	802f324 <TIM_Base_SetConfig+0x40>
 802f30c:	687b      	ldr	r3, [r7, #4]
 802f30e:	4a3c      	ldr	r2, [pc, #240]	; (802f400 <TIM_Base_SetConfig+0x11c>)
 802f310:	4293      	cmp	r3, r2
 802f312:	d007      	beq.n	802f324 <TIM_Base_SetConfig+0x40>
 802f314:	687b      	ldr	r3, [r7, #4]
 802f316:	4a3b      	ldr	r2, [pc, #236]	; (802f404 <TIM_Base_SetConfig+0x120>)
 802f318:	4293      	cmp	r3, r2
 802f31a:	d003      	beq.n	802f324 <TIM_Base_SetConfig+0x40>
 802f31c:	687b      	ldr	r3, [r7, #4]
 802f31e:	4a3a      	ldr	r2, [pc, #232]	; (802f408 <TIM_Base_SetConfig+0x124>)
 802f320:	4293      	cmp	r3, r2
 802f322:	d108      	bne.n	802f336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802f324:	68fb      	ldr	r3, [r7, #12]
 802f326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802f32a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802f32c:	683b      	ldr	r3, [r7, #0]
 802f32e:	685b      	ldr	r3, [r3, #4]
 802f330:	68fa      	ldr	r2, [r7, #12]
 802f332:	4313      	orrs	r3, r2
 802f334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802f336:	687b      	ldr	r3, [r7, #4]
 802f338:	4a2f      	ldr	r2, [pc, #188]	; (802f3f8 <TIM_Base_SetConfig+0x114>)
 802f33a:	4293      	cmp	r3, r2
 802f33c:	d01f      	beq.n	802f37e <TIM_Base_SetConfig+0x9a>
 802f33e:	687b      	ldr	r3, [r7, #4]
 802f340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802f344:	d01b      	beq.n	802f37e <TIM_Base_SetConfig+0x9a>
 802f346:	687b      	ldr	r3, [r7, #4]
 802f348:	4a2c      	ldr	r2, [pc, #176]	; (802f3fc <TIM_Base_SetConfig+0x118>)
 802f34a:	4293      	cmp	r3, r2
 802f34c:	d017      	beq.n	802f37e <TIM_Base_SetConfig+0x9a>
 802f34e:	687b      	ldr	r3, [r7, #4]
 802f350:	4a2b      	ldr	r2, [pc, #172]	; (802f400 <TIM_Base_SetConfig+0x11c>)
 802f352:	4293      	cmp	r3, r2
 802f354:	d013      	beq.n	802f37e <TIM_Base_SetConfig+0x9a>
 802f356:	687b      	ldr	r3, [r7, #4]
 802f358:	4a2a      	ldr	r2, [pc, #168]	; (802f404 <TIM_Base_SetConfig+0x120>)
 802f35a:	4293      	cmp	r3, r2
 802f35c:	d00f      	beq.n	802f37e <TIM_Base_SetConfig+0x9a>
 802f35e:	687b      	ldr	r3, [r7, #4]
 802f360:	4a29      	ldr	r2, [pc, #164]	; (802f408 <TIM_Base_SetConfig+0x124>)
 802f362:	4293      	cmp	r3, r2
 802f364:	d00b      	beq.n	802f37e <TIM_Base_SetConfig+0x9a>
 802f366:	687b      	ldr	r3, [r7, #4]
 802f368:	4a28      	ldr	r2, [pc, #160]	; (802f40c <TIM_Base_SetConfig+0x128>)
 802f36a:	4293      	cmp	r3, r2
 802f36c:	d007      	beq.n	802f37e <TIM_Base_SetConfig+0x9a>
 802f36e:	687b      	ldr	r3, [r7, #4]
 802f370:	4a27      	ldr	r2, [pc, #156]	; (802f410 <TIM_Base_SetConfig+0x12c>)
 802f372:	4293      	cmp	r3, r2
 802f374:	d003      	beq.n	802f37e <TIM_Base_SetConfig+0x9a>
 802f376:	687b      	ldr	r3, [r7, #4]
 802f378:	4a26      	ldr	r2, [pc, #152]	; (802f414 <TIM_Base_SetConfig+0x130>)
 802f37a:	4293      	cmp	r3, r2
 802f37c:	d108      	bne.n	802f390 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802f37e:	68fb      	ldr	r3, [r7, #12]
 802f380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802f384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802f386:	683b      	ldr	r3, [r7, #0]
 802f388:	68db      	ldr	r3, [r3, #12]
 802f38a:	68fa      	ldr	r2, [r7, #12]
 802f38c:	4313      	orrs	r3, r2
 802f38e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802f390:	68fb      	ldr	r3, [r7, #12]
 802f392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802f396:	683b      	ldr	r3, [r7, #0]
 802f398:	695b      	ldr	r3, [r3, #20]
 802f39a:	4313      	orrs	r3, r2
 802f39c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802f39e:	687b      	ldr	r3, [r7, #4]
 802f3a0:	68fa      	ldr	r2, [r7, #12]
 802f3a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802f3a4:	683b      	ldr	r3, [r7, #0]
 802f3a6:	689a      	ldr	r2, [r3, #8]
 802f3a8:	687b      	ldr	r3, [r7, #4]
 802f3aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802f3ac:	683b      	ldr	r3, [r7, #0]
 802f3ae:	681a      	ldr	r2, [r3, #0]
 802f3b0:	687b      	ldr	r3, [r7, #4]
 802f3b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802f3b4:	687b      	ldr	r3, [r7, #4]
 802f3b6:	4a10      	ldr	r2, [pc, #64]	; (802f3f8 <TIM_Base_SetConfig+0x114>)
 802f3b8:	4293      	cmp	r3, r2
 802f3ba:	d00f      	beq.n	802f3dc <TIM_Base_SetConfig+0xf8>
 802f3bc:	687b      	ldr	r3, [r7, #4]
 802f3be:	4a12      	ldr	r2, [pc, #72]	; (802f408 <TIM_Base_SetConfig+0x124>)
 802f3c0:	4293      	cmp	r3, r2
 802f3c2:	d00b      	beq.n	802f3dc <TIM_Base_SetConfig+0xf8>
 802f3c4:	687b      	ldr	r3, [r7, #4]
 802f3c6:	4a11      	ldr	r2, [pc, #68]	; (802f40c <TIM_Base_SetConfig+0x128>)
 802f3c8:	4293      	cmp	r3, r2
 802f3ca:	d007      	beq.n	802f3dc <TIM_Base_SetConfig+0xf8>
 802f3cc:	687b      	ldr	r3, [r7, #4]
 802f3ce:	4a10      	ldr	r2, [pc, #64]	; (802f410 <TIM_Base_SetConfig+0x12c>)
 802f3d0:	4293      	cmp	r3, r2
 802f3d2:	d003      	beq.n	802f3dc <TIM_Base_SetConfig+0xf8>
 802f3d4:	687b      	ldr	r3, [r7, #4]
 802f3d6:	4a0f      	ldr	r2, [pc, #60]	; (802f414 <TIM_Base_SetConfig+0x130>)
 802f3d8:	4293      	cmp	r3, r2
 802f3da:	d103      	bne.n	802f3e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802f3dc:	683b      	ldr	r3, [r7, #0]
 802f3de:	691a      	ldr	r2, [r3, #16]
 802f3e0:	687b      	ldr	r3, [r7, #4]
 802f3e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802f3e4:	687b      	ldr	r3, [r7, #4]
 802f3e6:	2201      	movs	r2, #1
 802f3e8:	615a      	str	r2, [r3, #20]
}
 802f3ea:	bf00      	nop
 802f3ec:	3714      	adds	r7, #20
 802f3ee:	46bd      	mov	sp, r7
 802f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f3f4:	4770      	bx	lr
 802f3f6:	bf00      	nop
 802f3f8:	40010000 	.word	0x40010000
 802f3fc:	40000400 	.word	0x40000400
 802f400:	40000800 	.word	0x40000800
 802f404:	40000c00 	.word	0x40000c00
 802f408:	40010400 	.word	0x40010400
 802f40c:	40014000 	.word	0x40014000
 802f410:	40014400 	.word	0x40014400
 802f414:	40014800 	.word	0x40014800

0802f418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 802f418:	b480      	push	{r7}
 802f41a:	b085      	sub	sp, #20
 802f41c:	af00      	add	r7, sp, #0
 802f41e:	6078      	str	r0, [r7, #4]
 802f420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802f422:	687b      	ldr	r3, [r7, #4]
 802f424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802f428:	2b01      	cmp	r3, #1
 802f42a:	d101      	bne.n	802f430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802f42c:	2302      	movs	r3, #2
 802f42e:	e06d      	b.n	802f50c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 802f430:	687b      	ldr	r3, [r7, #4]
 802f432:	2201      	movs	r2, #1
 802f434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802f438:	687b      	ldr	r3, [r7, #4]
 802f43a:	2202      	movs	r2, #2
 802f43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802f440:	687b      	ldr	r3, [r7, #4]
 802f442:	681b      	ldr	r3, [r3, #0]
 802f444:	685b      	ldr	r3, [r3, #4]
 802f446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802f448:	687b      	ldr	r3, [r7, #4]
 802f44a:	681b      	ldr	r3, [r3, #0]
 802f44c:	689b      	ldr	r3, [r3, #8]
 802f44e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 802f450:	687b      	ldr	r3, [r7, #4]
 802f452:	681b      	ldr	r3, [r3, #0]
 802f454:	4a30      	ldr	r2, [pc, #192]	; (802f518 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802f456:	4293      	cmp	r3, r2
 802f458:	d004      	beq.n	802f464 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802f45a:	687b      	ldr	r3, [r7, #4]
 802f45c:	681b      	ldr	r3, [r3, #0]
 802f45e:	4a2f      	ldr	r2, [pc, #188]	; (802f51c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802f460:	4293      	cmp	r3, r2
 802f462:	d108      	bne.n	802f476 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 802f464:	68fb      	ldr	r3, [r7, #12]
 802f466:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802f46a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 802f46c:	683b      	ldr	r3, [r7, #0]
 802f46e:	685b      	ldr	r3, [r3, #4]
 802f470:	68fa      	ldr	r2, [r7, #12]
 802f472:	4313      	orrs	r3, r2
 802f474:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802f476:	68fb      	ldr	r3, [r7, #12]
 802f478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802f47c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802f47e:	683b      	ldr	r3, [r7, #0]
 802f480:	681b      	ldr	r3, [r3, #0]
 802f482:	68fa      	ldr	r2, [r7, #12]
 802f484:	4313      	orrs	r3, r2
 802f486:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802f488:	687b      	ldr	r3, [r7, #4]
 802f48a:	681b      	ldr	r3, [r3, #0]
 802f48c:	68fa      	ldr	r2, [r7, #12]
 802f48e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802f490:	687b      	ldr	r3, [r7, #4]
 802f492:	681b      	ldr	r3, [r3, #0]
 802f494:	4a20      	ldr	r2, [pc, #128]	; (802f518 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802f496:	4293      	cmp	r3, r2
 802f498:	d022      	beq.n	802f4e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802f49a:	687b      	ldr	r3, [r7, #4]
 802f49c:	681b      	ldr	r3, [r3, #0]
 802f49e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802f4a2:	d01d      	beq.n	802f4e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802f4a4:	687b      	ldr	r3, [r7, #4]
 802f4a6:	681b      	ldr	r3, [r3, #0]
 802f4a8:	4a1d      	ldr	r2, [pc, #116]	; (802f520 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802f4aa:	4293      	cmp	r3, r2
 802f4ac:	d018      	beq.n	802f4e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802f4ae:	687b      	ldr	r3, [r7, #4]
 802f4b0:	681b      	ldr	r3, [r3, #0]
 802f4b2:	4a1c      	ldr	r2, [pc, #112]	; (802f524 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 802f4b4:	4293      	cmp	r3, r2
 802f4b6:	d013      	beq.n	802f4e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802f4b8:	687b      	ldr	r3, [r7, #4]
 802f4ba:	681b      	ldr	r3, [r3, #0]
 802f4bc:	4a1a      	ldr	r2, [pc, #104]	; (802f528 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 802f4be:	4293      	cmp	r3, r2
 802f4c0:	d00e      	beq.n	802f4e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802f4c2:	687b      	ldr	r3, [r7, #4]
 802f4c4:	681b      	ldr	r3, [r3, #0]
 802f4c6:	4a15      	ldr	r2, [pc, #84]	; (802f51c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802f4c8:	4293      	cmp	r3, r2
 802f4ca:	d009      	beq.n	802f4e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802f4cc:	687b      	ldr	r3, [r7, #4]
 802f4ce:	681b      	ldr	r3, [r3, #0]
 802f4d0:	4a16      	ldr	r2, [pc, #88]	; (802f52c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 802f4d2:	4293      	cmp	r3, r2
 802f4d4:	d004      	beq.n	802f4e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802f4d6:	687b      	ldr	r3, [r7, #4]
 802f4d8:	681b      	ldr	r3, [r3, #0]
 802f4da:	4a15      	ldr	r2, [pc, #84]	; (802f530 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 802f4dc:	4293      	cmp	r3, r2
 802f4de:	d10c      	bne.n	802f4fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802f4e0:	68bb      	ldr	r3, [r7, #8]
 802f4e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802f4e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802f4e8:	683b      	ldr	r3, [r7, #0]
 802f4ea:	689b      	ldr	r3, [r3, #8]
 802f4ec:	68ba      	ldr	r2, [r7, #8]
 802f4ee:	4313      	orrs	r3, r2
 802f4f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802f4f2:	687b      	ldr	r3, [r7, #4]
 802f4f4:	681b      	ldr	r3, [r3, #0]
 802f4f6:	68ba      	ldr	r2, [r7, #8]
 802f4f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802f4fa:	687b      	ldr	r3, [r7, #4]
 802f4fc:	2201      	movs	r2, #1
 802f4fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802f502:	687b      	ldr	r3, [r7, #4]
 802f504:	2200      	movs	r2, #0
 802f506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802f50a:	2300      	movs	r3, #0
}
 802f50c:	4618      	mov	r0, r3
 802f50e:	3714      	adds	r7, #20
 802f510:	46bd      	mov	sp, r7
 802f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f516:	4770      	bx	lr
 802f518:	40010000 	.word	0x40010000
 802f51c:	40010400 	.word	0x40010400
 802f520:	40000400 	.word	0x40000400
 802f524:	40000800 	.word	0x40000800
 802f528:	40000c00 	.word	0x40000c00
 802f52c:	40001800 	.word	0x40001800
 802f530:	40014000 	.word	0x40014000

0802f534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802f534:	b480      	push	{r7}
 802f536:	b083      	sub	sp, #12
 802f538:	af00      	add	r7, sp, #0
 802f53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802f53c:	bf00      	nop
 802f53e:	370c      	adds	r7, #12
 802f540:	46bd      	mov	sp, r7
 802f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f546:	4770      	bx	lr

0802f548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802f548:	b480      	push	{r7}
 802f54a:	b083      	sub	sp, #12
 802f54c:	af00      	add	r7, sp, #0
 802f54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802f550:	bf00      	nop
 802f552:	370c      	adds	r7, #12
 802f554:	46bd      	mov	sp, r7
 802f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f55a:	4770      	bx	lr

0802f55c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 802f55c:	b480      	push	{r7}
 802f55e:	b083      	sub	sp, #12
 802f560:	af00      	add	r7, sp, #0
 802f562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 802f564:	bf00      	nop
 802f566:	370c      	adds	r7, #12
 802f568:	46bd      	mov	sp, r7
 802f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f56e:	4770      	bx	lr

0802f570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802f570:	b580      	push	{r7, lr}
 802f572:	b082      	sub	sp, #8
 802f574:	af00      	add	r7, sp, #0
 802f576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802f578:	687b      	ldr	r3, [r7, #4]
 802f57a:	2b00      	cmp	r3, #0
 802f57c:	d101      	bne.n	802f582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802f57e:	2301      	movs	r3, #1
 802f580:	e042      	b.n	802f608 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802f582:	687b      	ldr	r3, [r7, #4]
 802f584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802f588:	2b00      	cmp	r3, #0
 802f58a:	d106      	bne.n	802f59a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802f58c:	687b      	ldr	r3, [r7, #4]
 802f58e:	2200      	movs	r2, #0
 802f590:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802f594:	6878      	ldr	r0, [r7, #4]
 802f596:	f7fa fa2b 	bl	80299f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802f59a:	687b      	ldr	r3, [r7, #4]
 802f59c:	2224      	movs	r2, #36	; 0x24
 802f59e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 802f5a2:	687b      	ldr	r3, [r7, #4]
 802f5a4:	681b      	ldr	r3, [r3, #0]
 802f5a6:	681a      	ldr	r2, [r3, #0]
 802f5a8:	687b      	ldr	r3, [r7, #4]
 802f5aa:	681b      	ldr	r3, [r3, #0]
 802f5ac:	f022 0201 	bic.w	r2, r2, #1
 802f5b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 802f5b2:	6878      	ldr	r0, [r7, #4]
 802f5b4:	f000 f86c 	bl	802f690 <UART_SetConfig>
 802f5b8:	4603      	mov	r3, r0
 802f5ba:	2b01      	cmp	r3, #1
 802f5bc:	d101      	bne.n	802f5c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 802f5be:	2301      	movs	r3, #1
 802f5c0:	e022      	b.n	802f608 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802f5c2:	687b      	ldr	r3, [r7, #4]
 802f5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f5c6:	2b00      	cmp	r3, #0
 802f5c8:	d002      	beq.n	802f5d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 802f5ca:	6878      	ldr	r0, [r7, #4]
 802f5cc:	f000 fdc8 	bl	8030160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802f5d0:	687b      	ldr	r3, [r7, #4]
 802f5d2:	681b      	ldr	r3, [r3, #0]
 802f5d4:	685a      	ldr	r2, [r3, #4]
 802f5d6:	687b      	ldr	r3, [r7, #4]
 802f5d8:	681b      	ldr	r3, [r3, #0]
 802f5da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802f5de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802f5e0:	687b      	ldr	r3, [r7, #4]
 802f5e2:	681b      	ldr	r3, [r3, #0]
 802f5e4:	689a      	ldr	r2, [r3, #8]
 802f5e6:	687b      	ldr	r3, [r7, #4]
 802f5e8:	681b      	ldr	r3, [r3, #0]
 802f5ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802f5ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 802f5f0:	687b      	ldr	r3, [r7, #4]
 802f5f2:	681b      	ldr	r3, [r3, #0]
 802f5f4:	681a      	ldr	r2, [r3, #0]
 802f5f6:	687b      	ldr	r3, [r7, #4]
 802f5f8:	681b      	ldr	r3, [r3, #0]
 802f5fa:	f042 0201 	orr.w	r2, r2, #1
 802f5fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 802f600:	6878      	ldr	r0, [r7, #4]
 802f602:	f000 fe4f 	bl	80302a4 <UART_CheckIdleState>
 802f606:	4603      	mov	r3, r0
}
 802f608:	4618      	mov	r0, r3
 802f60a:	3708      	adds	r7, #8
 802f60c:	46bd      	mov	sp, r7
 802f60e:	bd80      	pop	{r7, pc}

0802f610 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 802f610:	b580      	push	{r7, lr}
 802f612:	b082      	sub	sp, #8
 802f614:	af00      	add	r7, sp, #0
 802f616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802f618:	687b      	ldr	r3, [r7, #4]
 802f61a:	2b00      	cmp	r3, #0
 802f61c:	d101      	bne.n	802f622 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 802f61e:	2301      	movs	r3, #1
 802f620:	e031      	b.n	802f686 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 802f622:	687b      	ldr	r3, [r7, #4]
 802f624:	2224      	movs	r2, #36	; 0x24
 802f626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 802f62a:	687b      	ldr	r3, [r7, #4]
 802f62c:	681b      	ldr	r3, [r3, #0]
 802f62e:	681a      	ldr	r2, [r3, #0]
 802f630:	687b      	ldr	r3, [r7, #4]
 802f632:	681b      	ldr	r3, [r3, #0]
 802f634:	f022 0201 	bic.w	r2, r2, #1
 802f638:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 802f63a:	687b      	ldr	r3, [r7, #4]
 802f63c:	681b      	ldr	r3, [r3, #0]
 802f63e:	2200      	movs	r2, #0
 802f640:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 802f642:	687b      	ldr	r3, [r7, #4]
 802f644:	681b      	ldr	r3, [r3, #0]
 802f646:	2200      	movs	r2, #0
 802f648:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 802f64a:	687b      	ldr	r3, [r7, #4]
 802f64c:	681b      	ldr	r3, [r3, #0]
 802f64e:	2200      	movs	r2, #0
 802f650:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 802f652:	6878      	ldr	r0, [r7, #4]
 802f654:	f7fa fb92 	bl	8029d7c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802f658:	687b      	ldr	r3, [r7, #4]
 802f65a:	2200      	movs	r2, #0
 802f65c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 802f660:	687b      	ldr	r3, [r7, #4]
 802f662:	2200      	movs	r2, #0
 802f664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 802f668:	687b      	ldr	r3, [r7, #4]
 802f66a:	2200      	movs	r2, #0
 802f66c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802f670:	687b      	ldr	r3, [r7, #4]
 802f672:	2200      	movs	r2, #0
 802f674:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802f676:	687b      	ldr	r3, [r7, #4]
 802f678:	2200      	movs	r2, #0
 802f67a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 802f67c:	687b      	ldr	r3, [r7, #4]
 802f67e:	2200      	movs	r2, #0
 802f680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802f684:	2300      	movs	r3, #0
}
 802f686:	4618      	mov	r0, r3
 802f688:	3708      	adds	r7, #8
 802f68a:	46bd      	mov	sp, r7
 802f68c:	bd80      	pop	{r7, pc}
	...

0802f690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 802f690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802f694:	b092      	sub	sp, #72	; 0x48
 802f696:	af00      	add	r7, sp, #0
 802f698:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 802f69a:	2300      	movs	r3, #0
 802f69c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802f6a0:	697b      	ldr	r3, [r7, #20]
 802f6a2:	689a      	ldr	r2, [r3, #8]
 802f6a4:	697b      	ldr	r3, [r7, #20]
 802f6a6:	691b      	ldr	r3, [r3, #16]
 802f6a8:	431a      	orrs	r2, r3
 802f6aa:	697b      	ldr	r3, [r7, #20]
 802f6ac:	695b      	ldr	r3, [r3, #20]
 802f6ae:	431a      	orrs	r2, r3
 802f6b0:	697b      	ldr	r3, [r7, #20]
 802f6b2:	69db      	ldr	r3, [r3, #28]
 802f6b4:	4313      	orrs	r3, r2
 802f6b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802f6b8:	697b      	ldr	r3, [r7, #20]
 802f6ba:	681b      	ldr	r3, [r3, #0]
 802f6bc:	681a      	ldr	r2, [r3, #0]
 802f6be:	4bbe      	ldr	r3, [pc, #760]	; (802f9b8 <UART_SetConfig+0x328>)
 802f6c0:	4013      	ands	r3, r2
 802f6c2:	697a      	ldr	r2, [r7, #20]
 802f6c4:	6812      	ldr	r2, [r2, #0]
 802f6c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802f6c8:	430b      	orrs	r3, r1
 802f6ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802f6cc:	697b      	ldr	r3, [r7, #20]
 802f6ce:	681b      	ldr	r3, [r3, #0]
 802f6d0:	685b      	ldr	r3, [r3, #4]
 802f6d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802f6d6:	697b      	ldr	r3, [r7, #20]
 802f6d8:	68da      	ldr	r2, [r3, #12]
 802f6da:	697b      	ldr	r3, [r7, #20]
 802f6dc:	681b      	ldr	r3, [r3, #0]
 802f6de:	430a      	orrs	r2, r1
 802f6e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802f6e2:	697b      	ldr	r3, [r7, #20]
 802f6e4:	699b      	ldr	r3, [r3, #24]
 802f6e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802f6e8:	697b      	ldr	r3, [r7, #20]
 802f6ea:	681b      	ldr	r3, [r3, #0]
 802f6ec:	4ab3      	ldr	r2, [pc, #716]	; (802f9bc <UART_SetConfig+0x32c>)
 802f6ee:	4293      	cmp	r3, r2
 802f6f0:	d004      	beq.n	802f6fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802f6f2:	697b      	ldr	r3, [r7, #20]
 802f6f4:	6a1b      	ldr	r3, [r3, #32]
 802f6f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802f6f8:	4313      	orrs	r3, r2
 802f6fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802f6fc:	697b      	ldr	r3, [r7, #20]
 802f6fe:	681b      	ldr	r3, [r3, #0]
 802f700:	689a      	ldr	r2, [r3, #8]
 802f702:	4baf      	ldr	r3, [pc, #700]	; (802f9c0 <UART_SetConfig+0x330>)
 802f704:	4013      	ands	r3, r2
 802f706:	697a      	ldr	r2, [r7, #20]
 802f708:	6812      	ldr	r2, [r2, #0]
 802f70a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802f70c:	430b      	orrs	r3, r1
 802f70e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 802f710:	697b      	ldr	r3, [r7, #20]
 802f712:	681b      	ldr	r3, [r3, #0]
 802f714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f716:	f023 010f 	bic.w	r1, r3, #15
 802f71a:	697b      	ldr	r3, [r7, #20]
 802f71c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802f71e:	697b      	ldr	r3, [r7, #20]
 802f720:	681b      	ldr	r3, [r3, #0]
 802f722:	430a      	orrs	r2, r1
 802f724:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802f726:	697b      	ldr	r3, [r7, #20]
 802f728:	681b      	ldr	r3, [r3, #0]
 802f72a:	4aa6      	ldr	r2, [pc, #664]	; (802f9c4 <UART_SetConfig+0x334>)
 802f72c:	4293      	cmp	r3, r2
 802f72e:	d177      	bne.n	802f820 <UART_SetConfig+0x190>
 802f730:	4ba5      	ldr	r3, [pc, #660]	; (802f9c8 <UART_SetConfig+0x338>)
 802f732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802f738:	2b28      	cmp	r3, #40	; 0x28
 802f73a:	d86d      	bhi.n	802f818 <UART_SetConfig+0x188>
 802f73c:	a201      	add	r2, pc, #4	; (adr r2, 802f744 <UART_SetConfig+0xb4>)
 802f73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f742:	bf00      	nop
 802f744:	0802f7e9 	.word	0x0802f7e9
 802f748:	0802f819 	.word	0x0802f819
 802f74c:	0802f819 	.word	0x0802f819
 802f750:	0802f819 	.word	0x0802f819
 802f754:	0802f819 	.word	0x0802f819
 802f758:	0802f819 	.word	0x0802f819
 802f75c:	0802f819 	.word	0x0802f819
 802f760:	0802f819 	.word	0x0802f819
 802f764:	0802f7f1 	.word	0x0802f7f1
 802f768:	0802f819 	.word	0x0802f819
 802f76c:	0802f819 	.word	0x0802f819
 802f770:	0802f819 	.word	0x0802f819
 802f774:	0802f819 	.word	0x0802f819
 802f778:	0802f819 	.word	0x0802f819
 802f77c:	0802f819 	.word	0x0802f819
 802f780:	0802f819 	.word	0x0802f819
 802f784:	0802f7f9 	.word	0x0802f7f9
 802f788:	0802f819 	.word	0x0802f819
 802f78c:	0802f819 	.word	0x0802f819
 802f790:	0802f819 	.word	0x0802f819
 802f794:	0802f819 	.word	0x0802f819
 802f798:	0802f819 	.word	0x0802f819
 802f79c:	0802f819 	.word	0x0802f819
 802f7a0:	0802f819 	.word	0x0802f819
 802f7a4:	0802f801 	.word	0x0802f801
 802f7a8:	0802f819 	.word	0x0802f819
 802f7ac:	0802f819 	.word	0x0802f819
 802f7b0:	0802f819 	.word	0x0802f819
 802f7b4:	0802f819 	.word	0x0802f819
 802f7b8:	0802f819 	.word	0x0802f819
 802f7bc:	0802f819 	.word	0x0802f819
 802f7c0:	0802f819 	.word	0x0802f819
 802f7c4:	0802f809 	.word	0x0802f809
 802f7c8:	0802f819 	.word	0x0802f819
 802f7cc:	0802f819 	.word	0x0802f819
 802f7d0:	0802f819 	.word	0x0802f819
 802f7d4:	0802f819 	.word	0x0802f819
 802f7d8:	0802f819 	.word	0x0802f819
 802f7dc:	0802f819 	.word	0x0802f819
 802f7e0:	0802f819 	.word	0x0802f819
 802f7e4:	0802f811 	.word	0x0802f811
 802f7e8:	2301      	movs	r3, #1
 802f7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f7ee:	e222      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f7f0:	2304      	movs	r3, #4
 802f7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f7f6:	e21e      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f7f8:	2308      	movs	r3, #8
 802f7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f7fe:	e21a      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f800:	2310      	movs	r3, #16
 802f802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f806:	e216      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f808:	2320      	movs	r3, #32
 802f80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f80e:	e212      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f810:	2340      	movs	r3, #64	; 0x40
 802f812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f816:	e20e      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f818:	2380      	movs	r3, #128	; 0x80
 802f81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f81e:	e20a      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f820:	697b      	ldr	r3, [r7, #20]
 802f822:	681b      	ldr	r3, [r3, #0]
 802f824:	4a69      	ldr	r2, [pc, #420]	; (802f9cc <UART_SetConfig+0x33c>)
 802f826:	4293      	cmp	r3, r2
 802f828:	d130      	bne.n	802f88c <UART_SetConfig+0x1fc>
 802f82a:	4b67      	ldr	r3, [pc, #412]	; (802f9c8 <UART_SetConfig+0x338>)
 802f82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f82e:	f003 0307 	and.w	r3, r3, #7
 802f832:	2b05      	cmp	r3, #5
 802f834:	d826      	bhi.n	802f884 <UART_SetConfig+0x1f4>
 802f836:	a201      	add	r2, pc, #4	; (adr r2, 802f83c <UART_SetConfig+0x1ac>)
 802f838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f83c:	0802f855 	.word	0x0802f855
 802f840:	0802f85d 	.word	0x0802f85d
 802f844:	0802f865 	.word	0x0802f865
 802f848:	0802f86d 	.word	0x0802f86d
 802f84c:	0802f875 	.word	0x0802f875
 802f850:	0802f87d 	.word	0x0802f87d
 802f854:	2300      	movs	r3, #0
 802f856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f85a:	e1ec      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f85c:	2304      	movs	r3, #4
 802f85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f862:	e1e8      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f864:	2308      	movs	r3, #8
 802f866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f86a:	e1e4      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f86c:	2310      	movs	r3, #16
 802f86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f872:	e1e0      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f874:	2320      	movs	r3, #32
 802f876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f87a:	e1dc      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f87c:	2340      	movs	r3, #64	; 0x40
 802f87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f882:	e1d8      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f884:	2380      	movs	r3, #128	; 0x80
 802f886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f88a:	e1d4      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f88c:	697b      	ldr	r3, [r7, #20]
 802f88e:	681b      	ldr	r3, [r3, #0]
 802f890:	4a4f      	ldr	r2, [pc, #316]	; (802f9d0 <UART_SetConfig+0x340>)
 802f892:	4293      	cmp	r3, r2
 802f894:	d130      	bne.n	802f8f8 <UART_SetConfig+0x268>
 802f896:	4b4c      	ldr	r3, [pc, #304]	; (802f9c8 <UART_SetConfig+0x338>)
 802f898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f89a:	f003 0307 	and.w	r3, r3, #7
 802f89e:	2b05      	cmp	r3, #5
 802f8a0:	d826      	bhi.n	802f8f0 <UART_SetConfig+0x260>
 802f8a2:	a201      	add	r2, pc, #4	; (adr r2, 802f8a8 <UART_SetConfig+0x218>)
 802f8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f8a8:	0802f8c1 	.word	0x0802f8c1
 802f8ac:	0802f8c9 	.word	0x0802f8c9
 802f8b0:	0802f8d1 	.word	0x0802f8d1
 802f8b4:	0802f8d9 	.word	0x0802f8d9
 802f8b8:	0802f8e1 	.word	0x0802f8e1
 802f8bc:	0802f8e9 	.word	0x0802f8e9
 802f8c0:	2300      	movs	r3, #0
 802f8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f8c6:	e1b6      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f8c8:	2304      	movs	r3, #4
 802f8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f8ce:	e1b2      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f8d0:	2308      	movs	r3, #8
 802f8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f8d6:	e1ae      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f8d8:	2310      	movs	r3, #16
 802f8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f8de:	e1aa      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f8e0:	2320      	movs	r3, #32
 802f8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f8e6:	e1a6      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f8e8:	2340      	movs	r3, #64	; 0x40
 802f8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f8ee:	e1a2      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f8f0:	2380      	movs	r3, #128	; 0x80
 802f8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f8f6:	e19e      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f8f8:	697b      	ldr	r3, [r7, #20]
 802f8fa:	681b      	ldr	r3, [r3, #0]
 802f8fc:	4a35      	ldr	r2, [pc, #212]	; (802f9d4 <UART_SetConfig+0x344>)
 802f8fe:	4293      	cmp	r3, r2
 802f900:	d130      	bne.n	802f964 <UART_SetConfig+0x2d4>
 802f902:	4b31      	ldr	r3, [pc, #196]	; (802f9c8 <UART_SetConfig+0x338>)
 802f904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f906:	f003 0307 	and.w	r3, r3, #7
 802f90a:	2b05      	cmp	r3, #5
 802f90c:	d826      	bhi.n	802f95c <UART_SetConfig+0x2cc>
 802f90e:	a201      	add	r2, pc, #4	; (adr r2, 802f914 <UART_SetConfig+0x284>)
 802f910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f914:	0802f92d 	.word	0x0802f92d
 802f918:	0802f935 	.word	0x0802f935
 802f91c:	0802f93d 	.word	0x0802f93d
 802f920:	0802f945 	.word	0x0802f945
 802f924:	0802f94d 	.word	0x0802f94d
 802f928:	0802f955 	.word	0x0802f955
 802f92c:	2300      	movs	r3, #0
 802f92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f932:	e180      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f934:	2304      	movs	r3, #4
 802f936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f93a:	e17c      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f93c:	2308      	movs	r3, #8
 802f93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f942:	e178      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f944:	2310      	movs	r3, #16
 802f946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f94a:	e174      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f94c:	2320      	movs	r3, #32
 802f94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f952:	e170      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f954:	2340      	movs	r3, #64	; 0x40
 802f956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f95a:	e16c      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f95c:	2380      	movs	r3, #128	; 0x80
 802f95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f962:	e168      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f964:	697b      	ldr	r3, [r7, #20]
 802f966:	681b      	ldr	r3, [r3, #0]
 802f968:	4a1b      	ldr	r2, [pc, #108]	; (802f9d8 <UART_SetConfig+0x348>)
 802f96a:	4293      	cmp	r3, r2
 802f96c:	d142      	bne.n	802f9f4 <UART_SetConfig+0x364>
 802f96e:	4b16      	ldr	r3, [pc, #88]	; (802f9c8 <UART_SetConfig+0x338>)
 802f970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f972:	f003 0307 	and.w	r3, r3, #7
 802f976:	2b05      	cmp	r3, #5
 802f978:	d838      	bhi.n	802f9ec <UART_SetConfig+0x35c>
 802f97a:	a201      	add	r2, pc, #4	; (adr r2, 802f980 <UART_SetConfig+0x2f0>)
 802f97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f980:	0802f999 	.word	0x0802f999
 802f984:	0802f9a1 	.word	0x0802f9a1
 802f988:	0802f9a9 	.word	0x0802f9a9
 802f98c:	0802f9b1 	.word	0x0802f9b1
 802f990:	0802f9dd 	.word	0x0802f9dd
 802f994:	0802f9e5 	.word	0x0802f9e5
 802f998:	2300      	movs	r3, #0
 802f99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f99e:	e14a      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f9a0:	2304      	movs	r3, #4
 802f9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f9a6:	e146      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f9a8:	2308      	movs	r3, #8
 802f9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f9ae:	e142      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f9b0:	2310      	movs	r3, #16
 802f9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f9b6:	e13e      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f9b8:	cfff69f3 	.word	0xcfff69f3
 802f9bc:	58000c00 	.word	0x58000c00
 802f9c0:	11fff4ff 	.word	0x11fff4ff
 802f9c4:	40011000 	.word	0x40011000
 802f9c8:	58024400 	.word	0x58024400
 802f9cc:	40004400 	.word	0x40004400
 802f9d0:	40004800 	.word	0x40004800
 802f9d4:	40004c00 	.word	0x40004c00
 802f9d8:	40005000 	.word	0x40005000
 802f9dc:	2320      	movs	r3, #32
 802f9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f9e2:	e128      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f9e4:	2340      	movs	r3, #64	; 0x40
 802f9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f9ea:	e124      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f9ec:	2380      	movs	r3, #128	; 0x80
 802f9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f9f2:	e120      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802f9f4:	697b      	ldr	r3, [r7, #20]
 802f9f6:	681b      	ldr	r3, [r3, #0]
 802f9f8:	4acb      	ldr	r2, [pc, #812]	; (802fd28 <UART_SetConfig+0x698>)
 802f9fa:	4293      	cmp	r3, r2
 802f9fc:	d176      	bne.n	802faec <UART_SetConfig+0x45c>
 802f9fe:	4bcb      	ldr	r3, [pc, #812]	; (802fd2c <UART_SetConfig+0x69c>)
 802fa00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802fa02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802fa06:	2b28      	cmp	r3, #40	; 0x28
 802fa08:	d86c      	bhi.n	802fae4 <UART_SetConfig+0x454>
 802fa0a:	a201      	add	r2, pc, #4	; (adr r2, 802fa10 <UART_SetConfig+0x380>)
 802fa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fa10:	0802fab5 	.word	0x0802fab5
 802fa14:	0802fae5 	.word	0x0802fae5
 802fa18:	0802fae5 	.word	0x0802fae5
 802fa1c:	0802fae5 	.word	0x0802fae5
 802fa20:	0802fae5 	.word	0x0802fae5
 802fa24:	0802fae5 	.word	0x0802fae5
 802fa28:	0802fae5 	.word	0x0802fae5
 802fa2c:	0802fae5 	.word	0x0802fae5
 802fa30:	0802fabd 	.word	0x0802fabd
 802fa34:	0802fae5 	.word	0x0802fae5
 802fa38:	0802fae5 	.word	0x0802fae5
 802fa3c:	0802fae5 	.word	0x0802fae5
 802fa40:	0802fae5 	.word	0x0802fae5
 802fa44:	0802fae5 	.word	0x0802fae5
 802fa48:	0802fae5 	.word	0x0802fae5
 802fa4c:	0802fae5 	.word	0x0802fae5
 802fa50:	0802fac5 	.word	0x0802fac5
 802fa54:	0802fae5 	.word	0x0802fae5
 802fa58:	0802fae5 	.word	0x0802fae5
 802fa5c:	0802fae5 	.word	0x0802fae5
 802fa60:	0802fae5 	.word	0x0802fae5
 802fa64:	0802fae5 	.word	0x0802fae5
 802fa68:	0802fae5 	.word	0x0802fae5
 802fa6c:	0802fae5 	.word	0x0802fae5
 802fa70:	0802facd 	.word	0x0802facd
 802fa74:	0802fae5 	.word	0x0802fae5
 802fa78:	0802fae5 	.word	0x0802fae5
 802fa7c:	0802fae5 	.word	0x0802fae5
 802fa80:	0802fae5 	.word	0x0802fae5
 802fa84:	0802fae5 	.word	0x0802fae5
 802fa88:	0802fae5 	.word	0x0802fae5
 802fa8c:	0802fae5 	.word	0x0802fae5
 802fa90:	0802fad5 	.word	0x0802fad5
 802fa94:	0802fae5 	.word	0x0802fae5
 802fa98:	0802fae5 	.word	0x0802fae5
 802fa9c:	0802fae5 	.word	0x0802fae5
 802faa0:	0802fae5 	.word	0x0802fae5
 802faa4:	0802fae5 	.word	0x0802fae5
 802faa8:	0802fae5 	.word	0x0802fae5
 802faac:	0802fae5 	.word	0x0802fae5
 802fab0:	0802fadd 	.word	0x0802fadd
 802fab4:	2301      	movs	r3, #1
 802fab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802faba:	e0bc      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fabc:	2304      	movs	r3, #4
 802fabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fac2:	e0b8      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fac4:	2308      	movs	r3, #8
 802fac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802faca:	e0b4      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802facc:	2310      	movs	r3, #16
 802face:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fad2:	e0b0      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fad4:	2320      	movs	r3, #32
 802fad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fada:	e0ac      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fadc:	2340      	movs	r3, #64	; 0x40
 802fade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fae2:	e0a8      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fae4:	2380      	movs	r3, #128	; 0x80
 802fae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802faea:	e0a4      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802faec:	697b      	ldr	r3, [r7, #20]
 802faee:	681b      	ldr	r3, [r3, #0]
 802faf0:	4a8f      	ldr	r2, [pc, #572]	; (802fd30 <UART_SetConfig+0x6a0>)
 802faf2:	4293      	cmp	r3, r2
 802faf4:	d130      	bne.n	802fb58 <UART_SetConfig+0x4c8>
 802faf6:	4b8d      	ldr	r3, [pc, #564]	; (802fd2c <UART_SetConfig+0x69c>)
 802faf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802fafa:	f003 0307 	and.w	r3, r3, #7
 802fafe:	2b05      	cmp	r3, #5
 802fb00:	d826      	bhi.n	802fb50 <UART_SetConfig+0x4c0>
 802fb02:	a201      	add	r2, pc, #4	; (adr r2, 802fb08 <UART_SetConfig+0x478>)
 802fb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fb08:	0802fb21 	.word	0x0802fb21
 802fb0c:	0802fb29 	.word	0x0802fb29
 802fb10:	0802fb31 	.word	0x0802fb31
 802fb14:	0802fb39 	.word	0x0802fb39
 802fb18:	0802fb41 	.word	0x0802fb41
 802fb1c:	0802fb49 	.word	0x0802fb49
 802fb20:	2300      	movs	r3, #0
 802fb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fb26:	e086      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fb28:	2304      	movs	r3, #4
 802fb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fb2e:	e082      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fb30:	2308      	movs	r3, #8
 802fb32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fb36:	e07e      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fb38:	2310      	movs	r3, #16
 802fb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fb3e:	e07a      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fb40:	2320      	movs	r3, #32
 802fb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fb46:	e076      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fb48:	2340      	movs	r3, #64	; 0x40
 802fb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fb4e:	e072      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fb50:	2380      	movs	r3, #128	; 0x80
 802fb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fb56:	e06e      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fb58:	697b      	ldr	r3, [r7, #20]
 802fb5a:	681b      	ldr	r3, [r3, #0]
 802fb5c:	4a75      	ldr	r2, [pc, #468]	; (802fd34 <UART_SetConfig+0x6a4>)
 802fb5e:	4293      	cmp	r3, r2
 802fb60:	d130      	bne.n	802fbc4 <UART_SetConfig+0x534>
 802fb62:	4b72      	ldr	r3, [pc, #456]	; (802fd2c <UART_SetConfig+0x69c>)
 802fb64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802fb66:	f003 0307 	and.w	r3, r3, #7
 802fb6a:	2b05      	cmp	r3, #5
 802fb6c:	d826      	bhi.n	802fbbc <UART_SetConfig+0x52c>
 802fb6e:	a201      	add	r2, pc, #4	; (adr r2, 802fb74 <UART_SetConfig+0x4e4>)
 802fb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fb74:	0802fb8d 	.word	0x0802fb8d
 802fb78:	0802fb95 	.word	0x0802fb95
 802fb7c:	0802fb9d 	.word	0x0802fb9d
 802fb80:	0802fba5 	.word	0x0802fba5
 802fb84:	0802fbad 	.word	0x0802fbad
 802fb88:	0802fbb5 	.word	0x0802fbb5
 802fb8c:	2300      	movs	r3, #0
 802fb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fb92:	e050      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fb94:	2304      	movs	r3, #4
 802fb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fb9a:	e04c      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fb9c:	2308      	movs	r3, #8
 802fb9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fba2:	e048      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fba4:	2310      	movs	r3, #16
 802fba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fbaa:	e044      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fbac:	2320      	movs	r3, #32
 802fbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fbb2:	e040      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fbb4:	2340      	movs	r3, #64	; 0x40
 802fbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fbba:	e03c      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fbbc:	2380      	movs	r3, #128	; 0x80
 802fbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fbc2:	e038      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fbc4:	697b      	ldr	r3, [r7, #20]
 802fbc6:	681b      	ldr	r3, [r3, #0]
 802fbc8:	4a5b      	ldr	r2, [pc, #364]	; (802fd38 <UART_SetConfig+0x6a8>)
 802fbca:	4293      	cmp	r3, r2
 802fbcc:	d130      	bne.n	802fc30 <UART_SetConfig+0x5a0>
 802fbce:	4b57      	ldr	r3, [pc, #348]	; (802fd2c <UART_SetConfig+0x69c>)
 802fbd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802fbd2:	f003 0307 	and.w	r3, r3, #7
 802fbd6:	2b05      	cmp	r3, #5
 802fbd8:	d826      	bhi.n	802fc28 <UART_SetConfig+0x598>
 802fbda:	a201      	add	r2, pc, #4	; (adr r2, 802fbe0 <UART_SetConfig+0x550>)
 802fbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fbe0:	0802fbf9 	.word	0x0802fbf9
 802fbe4:	0802fc01 	.word	0x0802fc01
 802fbe8:	0802fc09 	.word	0x0802fc09
 802fbec:	0802fc11 	.word	0x0802fc11
 802fbf0:	0802fc19 	.word	0x0802fc19
 802fbf4:	0802fc21 	.word	0x0802fc21
 802fbf8:	2302      	movs	r3, #2
 802fbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fbfe:	e01a      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fc00:	2304      	movs	r3, #4
 802fc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fc06:	e016      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fc08:	2308      	movs	r3, #8
 802fc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fc0e:	e012      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fc10:	2310      	movs	r3, #16
 802fc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fc16:	e00e      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fc18:	2320      	movs	r3, #32
 802fc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fc1e:	e00a      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fc20:	2340      	movs	r3, #64	; 0x40
 802fc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fc26:	e006      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fc28:	2380      	movs	r3, #128	; 0x80
 802fc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802fc2e:	e002      	b.n	802fc36 <UART_SetConfig+0x5a6>
 802fc30:	2380      	movs	r3, #128	; 0x80
 802fc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802fc36:	697b      	ldr	r3, [r7, #20]
 802fc38:	681b      	ldr	r3, [r3, #0]
 802fc3a:	4a3f      	ldr	r2, [pc, #252]	; (802fd38 <UART_SetConfig+0x6a8>)
 802fc3c:	4293      	cmp	r3, r2
 802fc3e:	f040 80f8 	bne.w	802fe32 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802fc42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802fc46:	2b20      	cmp	r3, #32
 802fc48:	dc46      	bgt.n	802fcd8 <UART_SetConfig+0x648>
 802fc4a:	2b02      	cmp	r3, #2
 802fc4c:	f2c0 8082 	blt.w	802fd54 <UART_SetConfig+0x6c4>
 802fc50:	3b02      	subs	r3, #2
 802fc52:	2b1e      	cmp	r3, #30
 802fc54:	d87e      	bhi.n	802fd54 <UART_SetConfig+0x6c4>
 802fc56:	a201      	add	r2, pc, #4	; (adr r2, 802fc5c <UART_SetConfig+0x5cc>)
 802fc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fc5c:	0802fcdf 	.word	0x0802fcdf
 802fc60:	0802fd55 	.word	0x0802fd55
 802fc64:	0802fce7 	.word	0x0802fce7
 802fc68:	0802fd55 	.word	0x0802fd55
 802fc6c:	0802fd55 	.word	0x0802fd55
 802fc70:	0802fd55 	.word	0x0802fd55
 802fc74:	0802fcf7 	.word	0x0802fcf7
 802fc78:	0802fd55 	.word	0x0802fd55
 802fc7c:	0802fd55 	.word	0x0802fd55
 802fc80:	0802fd55 	.word	0x0802fd55
 802fc84:	0802fd55 	.word	0x0802fd55
 802fc88:	0802fd55 	.word	0x0802fd55
 802fc8c:	0802fd55 	.word	0x0802fd55
 802fc90:	0802fd55 	.word	0x0802fd55
 802fc94:	0802fd07 	.word	0x0802fd07
 802fc98:	0802fd55 	.word	0x0802fd55
 802fc9c:	0802fd55 	.word	0x0802fd55
 802fca0:	0802fd55 	.word	0x0802fd55
 802fca4:	0802fd55 	.word	0x0802fd55
 802fca8:	0802fd55 	.word	0x0802fd55
 802fcac:	0802fd55 	.word	0x0802fd55
 802fcb0:	0802fd55 	.word	0x0802fd55
 802fcb4:	0802fd55 	.word	0x0802fd55
 802fcb8:	0802fd55 	.word	0x0802fd55
 802fcbc:	0802fd55 	.word	0x0802fd55
 802fcc0:	0802fd55 	.word	0x0802fd55
 802fcc4:	0802fd55 	.word	0x0802fd55
 802fcc8:	0802fd55 	.word	0x0802fd55
 802fccc:	0802fd55 	.word	0x0802fd55
 802fcd0:	0802fd55 	.word	0x0802fd55
 802fcd4:	0802fd47 	.word	0x0802fd47
 802fcd8:	2b40      	cmp	r3, #64	; 0x40
 802fcda:	d037      	beq.n	802fd4c <UART_SetConfig+0x6bc>
 802fcdc:	e03a      	b.n	802fd54 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 802fcde:	f7fd fe33 	bl	802d948 <HAL_RCCEx_GetD3PCLK1Freq>
 802fce2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802fce4:	e03c      	b.n	802fd60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802fce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802fcea:	4618      	mov	r0, r3
 802fcec:	f7fd fe42 	bl	802d974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802fcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fcf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802fcf4:	e034      	b.n	802fd60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802fcf6:	f107 0318 	add.w	r3, r7, #24
 802fcfa:	4618      	mov	r0, r3
 802fcfc:	f7fd ff8e 	bl	802dc1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802fd00:	69fb      	ldr	r3, [r7, #28]
 802fd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802fd04:	e02c      	b.n	802fd60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802fd06:	4b09      	ldr	r3, [pc, #36]	; (802fd2c <UART_SetConfig+0x69c>)
 802fd08:	681b      	ldr	r3, [r3, #0]
 802fd0a:	f003 0320 	and.w	r3, r3, #32
 802fd0e:	2b00      	cmp	r3, #0
 802fd10:	d016      	beq.n	802fd40 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802fd12:	4b06      	ldr	r3, [pc, #24]	; (802fd2c <UART_SetConfig+0x69c>)
 802fd14:	681b      	ldr	r3, [r3, #0]
 802fd16:	08db      	lsrs	r3, r3, #3
 802fd18:	f003 0303 	and.w	r3, r3, #3
 802fd1c:	4a07      	ldr	r2, [pc, #28]	; (802fd3c <UART_SetConfig+0x6ac>)
 802fd1e:	fa22 f303 	lsr.w	r3, r2, r3
 802fd22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802fd24:	e01c      	b.n	802fd60 <UART_SetConfig+0x6d0>
 802fd26:	bf00      	nop
 802fd28:	40011400 	.word	0x40011400
 802fd2c:	58024400 	.word	0x58024400
 802fd30:	40007800 	.word	0x40007800
 802fd34:	40007c00 	.word	0x40007c00
 802fd38:	58000c00 	.word	0x58000c00
 802fd3c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 802fd40:	4b9d      	ldr	r3, [pc, #628]	; (802ffb8 <UART_SetConfig+0x928>)
 802fd42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802fd44:	e00c      	b.n	802fd60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802fd46:	4b9d      	ldr	r3, [pc, #628]	; (802ffbc <UART_SetConfig+0x92c>)
 802fd48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802fd4a:	e009      	b.n	802fd60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802fd4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802fd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802fd52:	e005      	b.n	802fd60 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 802fd54:	2300      	movs	r3, #0
 802fd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802fd58:	2301      	movs	r3, #1
 802fd5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802fd5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 802fd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802fd62:	2b00      	cmp	r3, #0
 802fd64:	f000 81de 	beq.w	8030124 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 802fd68:	697b      	ldr	r3, [r7, #20]
 802fd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802fd6c:	4a94      	ldr	r2, [pc, #592]	; (802ffc0 <UART_SetConfig+0x930>)
 802fd6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802fd72:	461a      	mov	r2, r3
 802fd74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802fd76:	fbb3 f3f2 	udiv	r3, r3, r2
 802fd7a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802fd7c:	697b      	ldr	r3, [r7, #20]
 802fd7e:	685a      	ldr	r2, [r3, #4]
 802fd80:	4613      	mov	r3, r2
 802fd82:	005b      	lsls	r3, r3, #1
 802fd84:	4413      	add	r3, r2
 802fd86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802fd88:	429a      	cmp	r2, r3
 802fd8a:	d305      	bcc.n	802fd98 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 802fd8c:	697b      	ldr	r3, [r7, #20]
 802fd8e:	685b      	ldr	r3, [r3, #4]
 802fd90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802fd92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802fd94:	429a      	cmp	r2, r3
 802fd96:	d903      	bls.n	802fda0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 802fd98:	2301      	movs	r3, #1
 802fd9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802fd9e:	e1c1      	b.n	8030124 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802fda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802fda2:	2200      	movs	r2, #0
 802fda4:	60bb      	str	r3, [r7, #8]
 802fda6:	60fa      	str	r2, [r7, #12]
 802fda8:	697b      	ldr	r3, [r7, #20]
 802fdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802fdac:	4a84      	ldr	r2, [pc, #528]	; (802ffc0 <UART_SetConfig+0x930>)
 802fdae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802fdb2:	b29b      	uxth	r3, r3
 802fdb4:	2200      	movs	r2, #0
 802fdb6:	603b      	str	r3, [r7, #0]
 802fdb8:	607a      	str	r2, [r7, #4]
 802fdba:	e9d7 2300 	ldrd	r2, r3, [r7]
 802fdbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802fdc2:	f7f0 fae5 	bl	8020390 <__aeabi_uldivmod>
 802fdc6:	4602      	mov	r2, r0
 802fdc8:	460b      	mov	r3, r1
 802fdca:	4610      	mov	r0, r2
 802fdcc:	4619      	mov	r1, r3
 802fdce:	f04f 0200 	mov.w	r2, #0
 802fdd2:	f04f 0300 	mov.w	r3, #0
 802fdd6:	020b      	lsls	r3, r1, #8
 802fdd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802fddc:	0202      	lsls	r2, r0, #8
 802fdde:	6979      	ldr	r1, [r7, #20]
 802fde0:	6849      	ldr	r1, [r1, #4]
 802fde2:	0849      	lsrs	r1, r1, #1
 802fde4:	2000      	movs	r0, #0
 802fde6:	460c      	mov	r4, r1
 802fde8:	4605      	mov	r5, r0
 802fdea:	eb12 0804 	adds.w	r8, r2, r4
 802fdee:	eb43 0905 	adc.w	r9, r3, r5
 802fdf2:	697b      	ldr	r3, [r7, #20]
 802fdf4:	685b      	ldr	r3, [r3, #4]
 802fdf6:	2200      	movs	r2, #0
 802fdf8:	469a      	mov	sl, r3
 802fdfa:	4693      	mov	fp, r2
 802fdfc:	4652      	mov	r2, sl
 802fdfe:	465b      	mov	r3, fp
 802fe00:	4640      	mov	r0, r8
 802fe02:	4649      	mov	r1, r9
 802fe04:	f7f0 fac4 	bl	8020390 <__aeabi_uldivmod>
 802fe08:	4602      	mov	r2, r0
 802fe0a:	460b      	mov	r3, r1
 802fe0c:	4613      	mov	r3, r2
 802fe0e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 802fe10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802fe12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802fe16:	d308      	bcc.n	802fe2a <UART_SetConfig+0x79a>
 802fe18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802fe1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802fe1e:	d204      	bcs.n	802fe2a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 802fe20:	697b      	ldr	r3, [r7, #20]
 802fe22:	681b      	ldr	r3, [r3, #0]
 802fe24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802fe26:	60da      	str	r2, [r3, #12]
 802fe28:	e17c      	b.n	8030124 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 802fe2a:	2301      	movs	r3, #1
 802fe2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802fe30:	e178      	b.n	8030124 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802fe32:	697b      	ldr	r3, [r7, #20]
 802fe34:	69db      	ldr	r3, [r3, #28]
 802fe36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802fe3a:	f040 80c5 	bne.w	802ffc8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 802fe3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802fe42:	2b20      	cmp	r3, #32
 802fe44:	dc48      	bgt.n	802fed8 <UART_SetConfig+0x848>
 802fe46:	2b00      	cmp	r3, #0
 802fe48:	db7b      	blt.n	802ff42 <UART_SetConfig+0x8b2>
 802fe4a:	2b20      	cmp	r3, #32
 802fe4c:	d879      	bhi.n	802ff42 <UART_SetConfig+0x8b2>
 802fe4e:	a201      	add	r2, pc, #4	; (adr r2, 802fe54 <UART_SetConfig+0x7c4>)
 802fe50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fe54:	0802fedf 	.word	0x0802fedf
 802fe58:	0802fee7 	.word	0x0802fee7
 802fe5c:	0802ff43 	.word	0x0802ff43
 802fe60:	0802ff43 	.word	0x0802ff43
 802fe64:	0802feef 	.word	0x0802feef
 802fe68:	0802ff43 	.word	0x0802ff43
 802fe6c:	0802ff43 	.word	0x0802ff43
 802fe70:	0802ff43 	.word	0x0802ff43
 802fe74:	0802feff 	.word	0x0802feff
 802fe78:	0802ff43 	.word	0x0802ff43
 802fe7c:	0802ff43 	.word	0x0802ff43
 802fe80:	0802ff43 	.word	0x0802ff43
 802fe84:	0802ff43 	.word	0x0802ff43
 802fe88:	0802ff43 	.word	0x0802ff43
 802fe8c:	0802ff43 	.word	0x0802ff43
 802fe90:	0802ff43 	.word	0x0802ff43
 802fe94:	0802ff0f 	.word	0x0802ff0f
 802fe98:	0802ff43 	.word	0x0802ff43
 802fe9c:	0802ff43 	.word	0x0802ff43
 802fea0:	0802ff43 	.word	0x0802ff43
 802fea4:	0802ff43 	.word	0x0802ff43
 802fea8:	0802ff43 	.word	0x0802ff43
 802feac:	0802ff43 	.word	0x0802ff43
 802feb0:	0802ff43 	.word	0x0802ff43
 802feb4:	0802ff43 	.word	0x0802ff43
 802feb8:	0802ff43 	.word	0x0802ff43
 802febc:	0802ff43 	.word	0x0802ff43
 802fec0:	0802ff43 	.word	0x0802ff43
 802fec4:	0802ff43 	.word	0x0802ff43
 802fec8:	0802ff43 	.word	0x0802ff43
 802fecc:	0802ff43 	.word	0x0802ff43
 802fed0:	0802ff43 	.word	0x0802ff43
 802fed4:	0802ff35 	.word	0x0802ff35
 802fed8:	2b40      	cmp	r3, #64	; 0x40
 802feda:	d02e      	beq.n	802ff3a <UART_SetConfig+0x8aa>
 802fedc:	e031      	b.n	802ff42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802fede:	f7fc fafd 	bl	802c4dc <HAL_RCC_GetPCLK1Freq>
 802fee2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802fee4:	e033      	b.n	802ff4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802fee6:	f7fc fb0f 	bl	802c508 <HAL_RCC_GetPCLK2Freq>
 802feea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802feec:	e02f      	b.n	802ff4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802feee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802fef2:	4618      	mov	r0, r3
 802fef4:	f7fd fd3e 	bl	802d974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802fef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802fefc:	e027      	b.n	802ff4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802fefe:	f107 0318 	add.w	r3, r7, #24
 802ff02:	4618      	mov	r0, r3
 802ff04:	f7fd fe8a 	bl	802dc1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802ff08:	69fb      	ldr	r3, [r7, #28]
 802ff0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ff0c:	e01f      	b.n	802ff4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802ff0e:	4b2d      	ldr	r3, [pc, #180]	; (802ffc4 <UART_SetConfig+0x934>)
 802ff10:	681b      	ldr	r3, [r3, #0]
 802ff12:	f003 0320 	and.w	r3, r3, #32
 802ff16:	2b00      	cmp	r3, #0
 802ff18:	d009      	beq.n	802ff2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802ff1a:	4b2a      	ldr	r3, [pc, #168]	; (802ffc4 <UART_SetConfig+0x934>)
 802ff1c:	681b      	ldr	r3, [r3, #0]
 802ff1e:	08db      	lsrs	r3, r3, #3
 802ff20:	f003 0303 	and.w	r3, r3, #3
 802ff24:	4a24      	ldr	r2, [pc, #144]	; (802ffb8 <UART_SetConfig+0x928>)
 802ff26:	fa22 f303 	lsr.w	r3, r2, r3
 802ff2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802ff2c:	e00f      	b.n	802ff4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 802ff2e:	4b22      	ldr	r3, [pc, #136]	; (802ffb8 <UART_SetConfig+0x928>)
 802ff30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ff32:	e00c      	b.n	802ff4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802ff34:	4b21      	ldr	r3, [pc, #132]	; (802ffbc <UART_SetConfig+0x92c>)
 802ff36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ff38:	e009      	b.n	802ff4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802ff3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802ff3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802ff40:	e005      	b.n	802ff4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802ff42:	2300      	movs	r3, #0
 802ff44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802ff46:	2301      	movs	r3, #1
 802ff48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802ff4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 802ff4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ff50:	2b00      	cmp	r3, #0
 802ff52:	f000 80e7 	beq.w	8030124 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802ff56:	697b      	ldr	r3, [r7, #20]
 802ff58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ff5a:	4a19      	ldr	r2, [pc, #100]	; (802ffc0 <UART_SetConfig+0x930>)
 802ff5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802ff60:	461a      	mov	r2, r3
 802ff62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ff64:	fbb3 f3f2 	udiv	r3, r3, r2
 802ff68:	005a      	lsls	r2, r3, #1
 802ff6a:	697b      	ldr	r3, [r7, #20]
 802ff6c:	685b      	ldr	r3, [r3, #4]
 802ff6e:	085b      	lsrs	r3, r3, #1
 802ff70:	441a      	add	r2, r3
 802ff72:	697b      	ldr	r3, [r7, #20]
 802ff74:	685b      	ldr	r3, [r3, #4]
 802ff76:	fbb2 f3f3 	udiv	r3, r2, r3
 802ff7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802ff7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ff7e:	2b0f      	cmp	r3, #15
 802ff80:	d916      	bls.n	802ffb0 <UART_SetConfig+0x920>
 802ff82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ff84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802ff88:	d212      	bcs.n	802ffb0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802ff8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ff8c:	b29b      	uxth	r3, r3
 802ff8e:	f023 030f 	bic.w	r3, r3, #15
 802ff92:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802ff94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ff96:	085b      	lsrs	r3, r3, #1
 802ff98:	b29b      	uxth	r3, r3
 802ff9a:	f003 0307 	and.w	r3, r3, #7
 802ff9e:	b29a      	uxth	r2, r3
 802ffa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802ffa2:	4313      	orrs	r3, r2
 802ffa4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 802ffa6:	697b      	ldr	r3, [r7, #20]
 802ffa8:	681b      	ldr	r3, [r3, #0]
 802ffaa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802ffac:	60da      	str	r2, [r3, #12]
 802ffae:	e0b9      	b.n	8030124 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 802ffb0:	2301      	movs	r3, #1
 802ffb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802ffb6:	e0b5      	b.n	8030124 <UART_SetConfig+0xa94>
 802ffb8:	03d09000 	.word	0x03d09000
 802ffbc:	003d0900 	.word	0x003d0900
 802ffc0:	08033310 	.word	0x08033310
 802ffc4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 802ffc8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802ffcc:	2b20      	cmp	r3, #32
 802ffce:	dc49      	bgt.n	8030064 <UART_SetConfig+0x9d4>
 802ffd0:	2b00      	cmp	r3, #0
 802ffd2:	db7c      	blt.n	80300ce <UART_SetConfig+0xa3e>
 802ffd4:	2b20      	cmp	r3, #32
 802ffd6:	d87a      	bhi.n	80300ce <UART_SetConfig+0xa3e>
 802ffd8:	a201      	add	r2, pc, #4	; (adr r2, 802ffe0 <UART_SetConfig+0x950>)
 802ffda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ffde:	bf00      	nop
 802ffe0:	0803006b 	.word	0x0803006b
 802ffe4:	08030073 	.word	0x08030073
 802ffe8:	080300cf 	.word	0x080300cf
 802ffec:	080300cf 	.word	0x080300cf
 802fff0:	0803007b 	.word	0x0803007b
 802fff4:	080300cf 	.word	0x080300cf
 802fff8:	080300cf 	.word	0x080300cf
 802fffc:	080300cf 	.word	0x080300cf
 8030000:	0803008b 	.word	0x0803008b
 8030004:	080300cf 	.word	0x080300cf
 8030008:	080300cf 	.word	0x080300cf
 803000c:	080300cf 	.word	0x080300cf
 8030010:	080300cf 	.word	0x080300cf
 8030014:	080300cf 	.word	0x080300cf
 8030018:	080300cf 	.word	0x080300cf
 803001c:	080300cf 	.word	0x080300cf
 8030020:	0803009b 	.word	0x0803009b
 8030024:	080300cf 	.word	0x080300cf
 8030028:	080300cf 	.word	0x080300cf
 803002c:	080300cf 	.word	0x080300cf
 8030030:	080300cf 	.word	0x080300cf
 8030034:	080300cf 	.word	0x080300cf
 8030038:	080300cf 	.word	0x080300cf
 803003c:	080300cf 	.word	0x080300cf
 8030040:	080300cf 	.word	0x080300cf
 8030044:	080300cf 	.word	0x080300cf
 8030048:	080300cf 	.word	0x080300cf
 803004c:	080300cf 	.word	0x080300cf
 8030050:	080300cf 	.word	0x080300cf
 8030054:	080300cf 	.word	0x080300cf
 8030058:	080300cf 	.word	0x080300cf
 803005c:	080300cf 	.word	0x080300cf
 8030060:	080300c1 	.word	0x080300c1
 8030064:	2b40      	cmp	r3, #64	; 0x40
 8030066:	d02e      	beq.n	80300c6 <UART_SetConfig+0xa36>
 8030068:	e031      	b.n	80300ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 803006a:	f7fc fa37 	bl	802c4dc <HAL_RCC_GetPCLK1Freq>
 803006e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8030070:	e033      	b.n	80300da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8030072:	f7fc fa49 	bl	802c508 <HAL_RCC_GetPCLK2Freq>
 8030076:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8030078:	e02f      	b.n	80300da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 803007a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803007e:	4618      	mov	r0, r3
 8030080:	f7fd fc78 	bl	802d974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8030084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8030088:	e027      	b.n	80300da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 803008a:	f107 0318 	add.w	r3, r7, #24
 803008e:	4618      	mov	r0, r3
 8030090:	f7fd fdc4 	bl	802dc1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8030094:	69fb      	ldr	r3, [r7, #28]
 8030096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8030098:	e01f      	b.n	80300da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803009a:	4b2d      	ldr	r3, [pc, #180]	; (8030150 <UART_SetConfig+0xac0>)
 803009c:	681b      	ldr	r3, [r3, #0]
 803009e:	f003 0320 	and.w	r3, r3, #32
 80300a2:	2b00      	cmp	r3, #0
 80300a4:	d009      	beq.n	80300ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80300a6:	4b2a      	ldr	r3, [pc, #168]	; (8030150 <UART_SetConfig+0xac0>)
 80300a8:	681b      	ldr	r3, [r3, #0]
 80300aa:	08db      	lsrs	r3, r3, #3
 80300ac:	f003 0303 	and.w	r3, r3, #3
 80300b0:	4a28      	ldr	r2, [pc, #160]	; (8030154 <UART_SetConfig+0xac4>)
 80300b2:	fa22 f303 	lsr.w	r3, r2, r3
 80300b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80300b8:	e00f      	b.n	80300da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80300ba:	4b26      	ldr	r3, [pc, #152]	; (8030154 <UART_SetConfig+0xac4>)
 80300bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80300be:	e00c      	b.n	80300da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80300c0:	4b25      	ldr	r3, [pc, #148]	; (8030158 <UART_SetConfig+0xac8>)
 80300c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80300c4:	e009      	b.n	80300da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80300c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80300ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80300cc:	e005      	b.n	80300da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80300ce:	2300      	movs	r3, #0
 80300d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80300d2:	2301      	movs	r3, #1
 80300d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80300d8:	bf00      	nop
    }

    if (pclk != 0U)
 80300da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80300dc:	2b00      	cmp	r3, #0
 80300de:	d021      	beq.n	8030124 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80300e0:	697b      	ldr	r3, [r7, #20]
 80300e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80300e4:	4a1d      	ldr	r2, [pc, #116]	; (803015c <UART_SetConfig+0xacc>)
 80300e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80300ea:	461a      	mov	r2, r3
 80300ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80300ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80300f2:	697b      	ldr	r3, [r7, #20]
 80300f4:	685b      	ldr	r3, [r3, #4]
 80300f6:	085b      	lsrs	r3, r3, #1
 80300f8:	441a      	add	r2, r3
 80300fa:	697b      	ldr	r3, [r7, #20]
 80300fc:	685b      	ldr	r3, [r3, #4]
 80300fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8030102:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8030104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030106:	2b0f      	cmp	r3, #15
 8030108:	d909      	bls.n	803011e <UART_SetConfig+0xa8e>
 803010a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803010c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8030110:	d205      	bcs.n	803011e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8030112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030114:	b29a      	uxth	r2, r3
 8030116:	697b      	ldr	r3, [r7, #20]
 8030118:	681b      	ldr	r3, [r3, #0]
 803011a:	60da      	str	r2, [r3, #12]
 803011c:	e002      	b.n	8030124 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 803011e:	2301      	movs	r3, #1
 8030120:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8030124:	697b      	ldr	r3, [r7, #20]
 8030126:	2201      	movs	r2, #1
 8030128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 803012c:	697b      	ldr	r3, [r7, #20]
 803012e:	2201      	movs	r2, #1
 8030130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8030134:	697b      	ldr	r3, [r7, #20]
 8030136:	2200      	movs	r2, #0
 8030138:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 803013a:	697b      	ldr	r3, [r7, #20]
 803013c:	2200      	movs	r2, #0
 803013e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8030140:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8030144:	4618      	mov	r0, r3
 8030146:	3748      	adds	r7, #72	; 0x48
 8030148:	46bd      	mov	sp, r7
 803014a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 803014e:	bf00      	nop
 8030150:	58024400 	.word	0x58024400
 8030154:	03d09000 	.word	0x03d09000
 8030158:	003d0900 	.word	0x003d0900
 803015c:	08033310 	.word	0x08033310

08030160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8030160:	b480      	push	{r7}
 8030162:	b083      	sub	sp, #12
 8030164:	af00      	add	r7, sp, #0
 8030166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8030168:	687b      	ldr	r3, [r7, #4]
 803016a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803016c:	f003 0301 	and.w	r3, r3, #1
 8030170:	2b00      	cmp	r3, #0
 8030172:	d00a      	beq.n	803018a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8030174:	687b      	ldr	r3, [r7, #4]
 8030176:	681b      	ldr	r3, [r3, #0]
 8030178:	685b      	ldr	r3, [r3, #4]
 803017a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 803017e:	687b      	ldr	r3, [r7, #4]
 8030180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8030182:	687b      	ldr	r3, [r7, #4]
 8030184:	681b      	ldr	r3, [r3, #0]
 8030186:	430a      	orrs	r2, r1
 8030188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 803018a:	687b      	ldr	r3, [r7, #4]
 803018c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803018e:	f003 0302 	and.w	r3, r3, #2
 8030192:	2b00      	cmp	r3, #0
 8030194:	d00a      	beq.n	80301ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8030196:	687b      	ldr	r3, [r7, #4]
 8030198:	681b      	ldr	r3, [r3, #0]
 803019a:	685b      	ldr	r3, [r3, #4]
 803019c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80301a0:	687b      	ldr	r3, [r7, #4]
 80301a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80301a4:	687b      	ldr	r3, [r7, #4]
 80301a6:	681b      	ldr	r3, [r3, #0]
 80301a8:	430a      	orrs	r2, r1
 80301aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80301ac:	687b      	ldr	r3, [r7, #4]
 80301ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80301b0:	f003 0304 	and.w	r3, r3, #4
 80301b4:	2b00      	cmp	r3, #0
 80301b6:	d00a      	beq.n	80301ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80301b8:	687b      	ldr	r3, [r7, #4]
 80301ba:	681b      	ldr	r3, [r3, #0]
 80301bc:	685b      	ldr	r3, [r3, #4]
 80301be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80301c2:	687b      	ldr	r3, [r7, #4]
 80301c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80301c6:	687b      	ldr	r3, [r7, #4]
 80301c8:	681b      	ldr	r3, [r3, #0]
 80301ca:	430a      	orrs	r2, r1
 80301cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80301ce:	687b      	ldr	r3, [r7, #4]
 80301d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80301d2:	f003 0308 	and.w	r3, r3, #8
 80301d6:	2b00      	cmp	r3, #0
 80301d8:	d00a      	beq.n	80301f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80301da:	687b      	ldr	r3, [r7, #4]
 80301dc:	681b      	ldr	r3, [r3, #0]
 80301de:	685b      	ldr	r3, [r3, #4]
 80301e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80301e4:	687b      	ldr	r3, [r7, #4]
 80301e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80301e8:	687b      	ldr	r3, [r7, #4]
 80301ea:	681b      	ldr	r3, [r3, #0]
 80301ec:	430a      	orrs	r2, r1
 80301ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80301f0:	687b      	ldr	r3, [r7, #4]
 80301f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80301f4:	f003 0310 	and.w	r3, r3, #16
 80301f8:	2b00      	cmp	r3, #0
 80301fa:	d00a      	beq.n	8030212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80301fc:	687b      	ldr	r3, [r7, #4]
 80301fe:	681b      	ldr	r3, [r3, #0]
 8030200:	689b      	ldr	r3, [r3, #8]
 8030202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8030206:	687b      	ldr	r3, [r7, #4]
 8030208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803020a:	687b      	ldr	r3, [r7, #4]
 803020c:	681b      	ldr	r3, [r3, #0]
 803020e:	430a      	orrs	r2, r1
 8030210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8030212:	687b      	ldr	r3, [r7, #4]
 8030214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030216:	f003 0320 	and.w	r3, r3, #32
 803021a:	2b00      	cmp	r3, #0
 803021c:	d00a      	beq.n	8030234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 803021e:	687b      	ldr	r3, [r7, #4]
 8030220:	681b      	ldr	r3, [r3, #0]
 8030222:	689b      	ldr	r3, [r3, #8]
 8030224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8030228:	687b      	ldr	r3, [r7, #4]
 803022a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 803022c:	687b      	ldr	r3, [r7, #4]
 803022e:	681b      	ldr	r3, [r3, #0]
 8030230:	430a      	orrs	r2, r1
 8030232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8030234:	687b      	ldr	r3, [r7, #4]
 8030236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803023c:	2b00      	cmp	r3, #0
 803023e:	d01a      	beq.n	8030276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8030240:	687b      	ldr	r3, [r7, #4]
 8030242:	681b      	ldr	r3, [r3, #0]
 8030244:	685b      	ldr	r3, [r3, #4]
 8030246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 803024a:	687b      	ldr	r3, [r7, #4]
 803024c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803024e:	687b      	ldr	r3, [r7, #4]
 8030250:	681b      	ldr	r3, [r3, #0]
 8030252:	430a      	orrs	r2, r1
 8030254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8030256:	687b      	ldr	r3, [r7, #4]
 8030258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803025a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803025e:	d10a      	bne.n	8030276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8030260:	687b      	ldr	r3, [r7, #4]
 8030262:	681b      	ldr	r3, [r3, #0]
 8030264:	685b      	ldr	r3, [r3, #4]
 8030266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 803026a:	687b      	ldr	r3, [r7, #4]
 803026c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 803026e:	687b      	ldr	r3, [r7, #4]
 8030270:	681b      	ldr	r3, [r3, #0]
 8030272:	430a      	orrs	r2, r1
 8030274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8030276:	687b      	ldr	r3, [r7, #4]
 8030278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803027a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803027e:	2b00      	cmp	r3, #0
 8030280:	d00a      	beq.n	8030298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8030282:	687b      	ldr	r3, [r7, #4]
 8030284:	681b      	ldr	r3, [r3, #0]
 8030286:	685b      	ldr	r3, [r3, #4]
 8030288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 803028c:	687b      	ldr	r3, [r7, #4]
 803028e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8030290:	687b      	ldr	r3, [r7, #4]
 8030292:	681b      	ldr	r3, [r3, #0]
 8030294:	430a      	orrs	r2, r1
 8030296:	605a      	str	r2, [r3, #4]
  }
}
 8030298:	bf00      	nop
 803029a:	370c      	adds	r7, #12
 803029c:	46bd      	mov	sp, r7
 803029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80302a2:	4770      	bx	lr

080302a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80302a4:	b580      	push	{r7, lr}
 80302a6:	b098      	sub	sp, #96	; 0x60
 80302a8:	af02      	add	r7, sp, #8
 80302aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80302ac:	687b      	ldr	r3, [r7, #4]
 80302ae:	2200      	movs	r2, #0
 80302b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80302b4:	f7fa f9fa 	bl	802a6ac <HAL_GetTick>
 80302b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80302ba:	687b      	ldr	r3, [r7, #4]
 80302bc:	681b      	ldr	r3, [r3, #0]
 80302be:	681b      	ldr	r3, [r3, #0]
 80302c0:	f003 0308 	and.w	r3, r3, #8
 80302c4:	2b08      	cmp	r3, #8
 80302c6:	d12f      	bne.n	8030328 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80302c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80302cc:	9300      	str	r3, [sp, #0]
 80302ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80302d0:	2200      	movs	r2, #0
 80302d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80302d6:	6878      	ldr	r0, [r7, #4]
 80302d8:	f000 f88e 	bl	80303f8 <UART_WaitOnFlagUntilTimeout>
 80302dc:	4603      	mov	r3, r0
 80302de:	2b00      	cmp	r3, #0
 80302e0:	d022      	beq.n	8030328 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80302e2:	687b      	ldr	r3, [r7, #4]
 80302e4:	681b      	ldr	r3, [r3, #0]
 80302e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80302e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80302ea:	e853 3f00 	ldrex	r3, [r3]
 80302ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80302f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80302f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80302f6:	653b      	str	r3, [r7, #80]	; 0x50
 80302f8:	687b      	ldr	r3, [r7, #4]
 80302fa:	681b      	ldr	r3, [r3, #0]
 80302fc:	461a      	mov	r2, r3
 80302fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8030300:	647b      	str	r3, [r7, #68]	; 0x44
 8030302:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8030306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8030308:	e841 2300 	strex	r3, r2, [r1]
 803030c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803030e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8030310:	2b00      	cmp	r3, #0
 8030312:	d1e6      	bne.n	80302e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8030314:	687b      	ldr	r3, [r7, #4]
 8030316:	2220      	movs	r2, #32
 8030318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 803031c:	687b      	ldr	r3, [r7, #4]
 803031e:	2200      	movs	r2, #0
 8030320:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8030324:	2303      	movs	r3, #3
 8030326:	e063      	b.n	80303f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8030328:	687b      	ldr	r3, [r7, #4]
 803032a:	681b      	ldr	r3, [r3, #0]
 803032c:	681b      	ldr	r3, [r3, #0]
 803032e:	f003 0304 	and.w	r3, r3, #4
 8030332:	2b04      	cmp	r3, #4
 8030334:	d149      	bne.n	80303ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8030336:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 803033a:	9300      	str	r3, [sp, #0]
 803033c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803033e:	2200      	movs	r2, #0
 8030340:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8030344:	6878      	ldr	r0, [r7, #4]
 8030346:	f000 f857 	bl	80303f8 <UART_WaitOnFlagUntilTimeout>
 803034a:	4603      	mov	r3, r0
 803034c:	2b00      	cmp	r3, #0
 803034e:	d03c      	beq.n	80303ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8030350:	687b      	ldr	r3, [r7, #4]
 8030352:	681b      	ldr	r3, [r3, #0]
 8030354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030358:	e853 3f00 	ldrex	r3, [r3]
 803035c:	623b      	str	r3, [r7, #32]
   return(result);
 803035e:	6a3b      	ldr	r3, [r7, #32]
 8030360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8030364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8030366:	687b      	ldr	r3, [r7, #4]
 8030368:	681b      	ldr	r3, [r3, #0]
 803036a:	461a      	mov	r2, r3
 803036c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803036e:	633b      	str	r3, [r7, #48]	; 0x30
 8030370:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8030374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8030376:	e841 2300 	strex	r3, r2, [r1]
 803037a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803037c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803037e:	2b00      	cmp	r3, #0
 8030380:	d1e6      	bne.n	8030350 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8030382:	687b      	ldr	r3, [r7, #4]
 8030384:	681b      	ldr	r3, [r3, #0]
 8030386:	3308      	adds	r3, #8
 8030388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803038a:	693b      	ldr	r3, [r7, #16]
 803038c:	e853 3f00 	ldrex	r3, [r3]
 8030390:	60fb      	str	r3, [r7, #12]
   return(result);
 8030392:	68fb      	ldr	r3, [r7, #12]
 8030394:	f023 0301 	bic.w	r3, r3, #1
 8030398:	64bb      	str	r3, [r7, #72]	; 0x48
 803039a:	687b      	ldr	r3, [r7, #4]
 803039c:	681b      	ldr	r3, [r3, #0]
 803039e:	3308      	adds	r3, #8
 80303a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80303a2:	61fa      	str	r2, [r7, #28]
 80303a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80303a6:	69b9      	ldr	r1, [r7, #24]
 80303a8:	69fa      	ldr	r2, [r7, #28]
 80303aa:	e841 2300 	strex	r3, r2, [r1]
 80303ae:	617b      	str	r3, [r7, #20]
   return(result);
 80303b0:	697b      	ldr	r3, [r7, #20]
 80303b2:	2b00      	cmp	r3, #0
 80303b4:	d1e5      	bne.n	8030382 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80303b6:	687b      	ldr	r3, [r7, #4]
 80303b8:	2220      	movs	r2, #32
 80303ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80303be:	687b      	ldr	r3, [r7, #4]
 80303c0:	2200      	movs	r2, #0
 80303c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80303c6:	2303      	movs	r3, #3
 80303c8:	e012      	b.n	80303f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80303ca:	687b      	ldr	r3, [r7, #4]
 80303cc:	2220      	movs	r2, #32
 80303ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80303d2:	687b      	ldr	r3, [r7, #4]
 80303d4:	2220      	movs	r2, #32
 80303d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80303da:	687b      	ldr	r3, [r7, #4]
 80303dc:	2200      	movs	r2, #0
 80303de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80303e0:	687b      	ldr	r3, [r7, #4]
 80303e2:	2200      	movs	r2, #0
 80303e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80303e6:	687b      	ldr	r3, [r7, #4]
 80303e8:	2200      	movs	r2, #0
 80303ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80303ee:	2300      	movs	r3, #0
}
 80303f0:	4618      	mov	r0, r3
 80303f2:	3758      	adds	r7, #88	; 0x58
 80303f4:	46bd      	mov	sp, r7
 80303f6:	bd80      	pop	{r7, pc}

080303f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80303f8:	b580      	push	{r7, lr}
 80303fa:	b084      	sub	sp, #16
 80303fc:	af00      	add	r7, sp, #0
 80303fe:	60f8      	str	r0, [r7, #12]
 8030400:	60b9      	str	r1, [r7, #8]
 8030402:	603b      	str	r3, [r7, #0]
 8030404:	4613      	mov	r3, r2
 8030406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8030408:	e049      	b.n	803049e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 803040a:	69bb      	ldr	r3, [r7, #24]
 803040c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8030410:	d045      	beq.n	803049e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8030412:	f7fa f94b 	bl	802a6ac <HAL_GetTick>
 8030416:	4602      	mov	r2, r0
 8030418:	683b      	ldr	r3, [r7, #0]
 803041a:	1ad3      	subs	r3, r2, r3
 803041c:	69ba      	ldr	r2, [r7, #24]
 803041e:	429a      	cmp	r2, r3
 8030420:	d302      	bcc.n	8030428 <UART_WaitOnFlagUntilTimeout+0x30>
 8030422:	69bb      	ldr	r3, [r7, #24]
 8030424:	2b00      	cmp	r3, #0
 8030426:	d101      	bne.n	803042c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8030428:	2303      	movs	r3, #3
 803042a:	e048      	b.n	80304be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 803042c:	68fb      	ldr	r3, [r7, #12]
 803042e:	681b      	ldr	r3, [r3, #0]
 8030430:	681b      	ldr	r3, [r3, #0]
 8030432:	f003 0304 	and.w	r3, r3, #4
 8030436:	2b00      	cmp	r3, #0
 8030438:	d031      	beq.n	803049e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 803043a:	68fb      	ldr	r3, [r7, #12]
 803043c:	681b      	ldr	r3, [r3, #0]
 803043e:	69db      	ldr	r3, [r3, #28]
 8030440:	f003 0308 	and.w	r3, r3, #8
 8030444:	2b08      	cmp	r3, #8
 8030446:	d110      	bne.n	803046a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8030448:	68fb      	ldr	r3, [r7, #12]
 803044a:	681b      	ldr	r3, [r3, #0]
 803044c:	2208      	movs	r2, #8
 803044e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8030450:	68f8      	ldr	r0, [r7, #12]
 8030452:	f000 f839 	bl	80304c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8030456:	68fb      	ldr	r3, [r7, #12]
 8030458:	2208      	movs	r2, #8
 803045a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 803045e:	68fb      	ldr	r3, [r7, #12]
 8030460:	2200      	movs	r2, #0
 8030462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8030466:	2301      	movs	r3, #1
 8030468:	e029      	b.n	80304be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 803046a:	68fb      	ldr	r3, [r7, #12]
 803046c:	681b      	ldr	r3, [r3, #0]
 803046e:	69db      	ldr	r3, [r3, #28]
 8030470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8030474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8030478:	d111      	bne.n	803049e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 803047a:	68fb      	ldr	r3, [r7, #12]
 803047c:	681b      	ldr	r3, [r3, #0]
 803047e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8030482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8030484:	68f8      	ldr	r0, [r7, #12]
 8030486:	f000 f81f 	bl	80304c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 803048a:	68fb      	ldr	r3, [r7, #12]
 803048c:	2220      	movs	r2, #32
 803048e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8030492:	68fb      	ldr	r3, [r7, #12]
 8030494:	2200      	movs	r2, #0
 8030496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 803049a:	2303      	movs	r3, #3
 803049c:	e00f      	b.n	80304be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 803049e:	68fb      	ldr	r3, [r7, #12]
 80304a0:	681b      	ldr	r3, [r3, #0]
 80304a2:	69da      	ldr	r2, [r3, #28]
 80304a4:	68bb      	ldr	r3, [r7, #8]
 80304a6:	4013      	ands	r3, r2
 80304a8:	68ba      	ldr	r2, [r7, #8]
 80304aa:	429a      	cmp	r2, r3
 80304ac:	bf0c      	ite	eq
 80304ae:	2301      	moveq	r3, #1
 80304b0:	2300      	movne	r3, #0
 80304b2:	b2db      	uxtb	r3, r3
 80304b4:	461a      	mov	r2, r3
 80304b6:	79fb      	ldrb	r3, [r7, #7]
 80304b8:	429a      	cmp	r2, r3
 80304ba:	d0a6      	beq.n	803040a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80304bc:	2300      	movs	r3, #0
}
 80304be:	4618      	mov	r0, r3
 80304c0:	3710      	adds	r7, #16
 80304c2:	46bd      	mov	sp, r7
 80304c4:	bd80      	pop	{r7, pc}
	...

080304c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80304c8:	b480      	push	{r7}
 80304ca:	b095      	sub	sp, #84	; 0x54
 80304cc:	af00      	add	r7, sp, #0
 80304ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80304d0:	687b      	ldr	r3, [r7, #4]
 80304d2:	681b      	ldr	r3, [r3, #0]
 80304d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80304d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80304d8:	e853 3f00 	ldrex	r3, [r3]
 80304dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80304de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80304e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80304e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80304e6:	687b      	ldr	r3, [r7, #4]
 80304e8:	681b      	ldr	r3, [r3, #0]
 80304ea:	461a      	mov	r2, r3
 80304ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80304ee:	643b      	str	r3, [r7, #64]	; 0x40
 80304f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80304f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80304f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80304f6:	e841 2300 	strex	r3, r2, [r1]
 80304fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80304fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80304fe:	2b00      	cmp	r3, #0
 8030500:	d1e6      	bne.n	80304d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8030502:	687b      	ldr	r3, [r7, #4]
 8030504:	681b      	ldr	r3, [r3, #0]
 8030506:	3308      	adds	r3, #8
 8030508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803050a:	6a3b      	ldr	r3, [r7, #32]
 803050c:	e853 3f00 	ldrex	r3, [r3]
 8030510:	61fb      	str	r3, [r7, #28]
   return(result);
 8030512:	69fa      	ldr	r2, [r7, #28]
 8030514:	4b1e      	ldr	r3, [pc, #120]	; (8030590 <UART_EndRxTransfer+0xc8>)
 8030516:	4013      	ands	r3, r2
 8030518:	64bb      	str	r3, [r7, #72]	; 0x48
 803051a:	687b      	ldr	r3, [r7, #4]
 803051c:	681b      	ldr	r3, [r3, #0]
 803051e:	3308      	adds	r3, #8
 8030520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8030522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8030524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8030528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803052a:	e841 2300 	strex	r3, r2, [r1]
 803052e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8030530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030532:	2b00      	cmp	r3, #0
 8030534:	d1e5      	bne.n	8030502 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8030536:	687b      	ldr	r3, [r7, #4]
 8030538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803053a:	2b01      	cmp	r3, #1
 803053c:	d118      	bne.n	8030570 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803053e:	687b      	ldr	r3, [r7, #4]
 8030540:	681b      	ldr	r3, [r3, #0]
 8030542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030544:	68fb      	ldr	r3, [r7, #12]
 8030546:	e853 3f00 	ldrex	r3, [r3]
 803054a:	60bb      	str	r3, [r7, #8]
   return(result);
 803054c:	68bb      	ldr	r3, [r7, #8]
 803054e:	f023 0310 	bic.w	r3, r3, #16
 8030552:	647b      	str	r3, [r7, #68]	; 0x44
 8030554:	687b      	ldr	r3, [r7, #4]
 8030556:	681b      	ldr	r3, [r3, #0]
 8030558:	461a      	mov	r2, r3
 803055a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803055c:	61bb      	str	r3, [r7, #24]
 803055e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030560:	6979      	ldr	r1, [r7, #20]
 8030562:	69ba      	ldr	r2, [r7, #24]
 8030564:	e841 2300 	strex	r3, r2, [r1]
 8030568:	613b      	str	r3, [r7, #16]
   return(result);
 803056a:	693b      	ldr	r3, [r7, #16]
 803056c:	2b00      	cmp	r3, #0
 803056e:	d1e6      	bne.n	803053e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8030570:	687b      	ldr	r3, [r7, #4]
 8030572:	2220      	movs	r2, #32
 8030574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8030578:	687b      	ldr	r3, [r7, #4]
 803057a:	2200      	movs	r2, #0
 803057c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 803057e:	687b      	ldr	r3, [r7, #4]
 8030580:	2200      	movs	r2, #0
 8030582:	675a      	str	r2, [r3, #116]	; 0x74
}
 8030584:	bf00      	nop
 8030586:	3754      	adds	r7, #84	; 0x54
 8030588:	46bd      	mov	sp, r7
 803058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803058e:	4770      	bx	lr
 8030590:	effffffe 	.word	0xeffffffe

08030594 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8030594:	b480      	push	{r7}
 8030596:	b085      	sub	sp, #20
 8030598:	af00      	add	r7, sp, #0
 803059a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 803059c:	687b      	ldr	r3, [r7, #4]
 803059e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80305a2:	2b01      	cmp	r3, #1
 80305a4:	d101      	bne.n	80305aa <HAL_UARTEx_DisableFifoMode+0x16>
 80305a6:	2302      	movs	r3, #2
 80305a8:	e027      	b.n	80305fa <HAL_UARTEx_DisableFifoMode+0x66>
 80305aa:	687b      	ldr	r3, [r7, #4]
 80305ac:	2201      	movs	r2, #1
 80305ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80305b2:	687b      	ldr	r3, [r7, #4]
 80305b4:	2224      	movs	r2, #36	; 0x24
 80305b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80305ba:	687b      	ldr	r3, [r7, #4]
 80305bc:	681b      	ldr	r3, [r3, #0]
 80305be:	681b      	ldr	r3, [r3, #0]
 80305c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80305c2:	687b      	ldr	r3, [r7, #4]
 80305c4:	681b      	ldr	r3, [r3, #0]
 80305c6:	681a      	ldr	r2, [r3, #0]
 80305c8:	687b      	ldr	r3, [r7, #4]
 80305ca:	681b      	ldr	r3, [r3, #0]
 80305cc:	f022 0201 	bic.w	r2, r2, #1
 80305d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80305d2:	68fb      	ldr	r3, [r7, #12]
 80305d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80305d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80305da:	687b      	ldr	r3, [r7, #4]
 80305dc:	2200      	movs	r2, #0
 80305de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80305e0:	687b      	ldr	r3, [r7, #4]
 80305e2:	681b      	ldr	r3, [r3, #0]
 80305e4:	68fa      	ldr	r2, [r7, #12]
 80305e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80305e8:	687b      	ldr	r3, [r7, #4]
 80305ea:	2220      	movs	r2, #32
 80305ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80305f0:	687b      	ldr	r3, [r7, #4]
 80305f2:	2200      	movs	r2, #0
 80305f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80305f8:	2300      	movs	r3, #0
}
 80305fa:	4618      	mov	r0, r3
 80305fc:	3714      	adds	r7, #20
 80305fe:	46bd      	mov	sp, r7
 8030600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030604:	4770      	bx	lr

08030606 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8030606:	b580      	push	{r7, lr}
 8030608:	b084      	sub	sp, #16
 803060a:	af00      	add	r7, sp, #0
 803060c:	6078      	str	r0, [r7, #4]
 803060e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8030610:	687b      	ldr	r3, [r7, #4]
 8030612:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8030616:	2b01      	cmp	r3, #1
 8030618:	d101      	bne.n	803061e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 803061a:	2302      	movs	r3, #2
 803061c:	e02d      	b.n	803067a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 803061e:	687b      	ldr	r3, [r7, #4]
 8030620:	2201      	movs	r2, #1
 8030622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8030626:	687b      	ldr	r3, [r7, #4]
 8030628:	2224      	movs	r2, #36	; 0x24
 803062a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803062e:	687b      	ldr	r3, [r7, #4]
 8030630:	681b      	ldr	r3, [r3, #0]
 8030632:	681b      	ldr	r3, [r3, #0]
 8030634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8030636:	687b      	ldr	r3, [r7, #4]
 8030638:	681b      	ldr	r3, [r3, #0]
 803063a:	681a      	ldr	r2, [r3, #0]
 803063c:	687b      	ldr	r3, [r7, #4]
 803063e:	681b      	ldr	r3, [r3, #0]
 8030640:	f022 0201 	bic.w	r2, r2, #1
 8030644:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8030646:	687b      	ldr	r3, [r7, #4]
 8030648:	681b      	ldr	r3, [r3, #0]
 803064a:	689b      	ldr	r3, [r3, #8]
 803064c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8030650:	687b      	ldr	r3, [r7, #4]
 8030652:	681b      	ldr	r3, [r3, #0]
 8030654:	683a      	ldr	r2, [r7, #0]
 8030656:	430a      	orrs	r2, r1
 8030658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803065a:	6878      	ldr	r0, [r7, #4]
 803065c:	f000 f850 	bl	8030700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8030660:	687b      	ldr	r3, [r7, #4]
 8030662:	681b      	ldr	r3, [r3, #0]
 8030664:	68fa      	ldr	r2, [r7, #12]
 8030666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8030668:	687b      	ldr	r3, [r7, #4]
 803066a:	2220      	movs	r2, #32
 803066c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8030670:	687b      	ldr	r3, [r7, #4]
 8030672:	2200      	movs	r2, #0
 8030674:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8030678:	2300      	movs	r3, #0
}
 803067a:	4618      	mov	r0, r3
 803067c:	3710      	adds	r7, #16
 803067e:	46bd      	mov	sp, r7
 8030680:	bd80      	pop	{r7, pc}

08030682 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8030682:	b580      	push	{r7, lr}
 8030684:	b084      	sub	sp, #16
 8030686:	af00      	add	r7, sp, #0
 8030688:	6078      	str	r0, [r7, #4]
 803068a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803068c:	687b      	ldr	r3, [r7, #4]
 803068e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8030692:	2b01      	cmp	r3, #1
 8030694:	d101      	bne.n	803069a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8030696:	2302      	movs	r3, #2
 8030698:	e02d      	b.n	80306f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 803069a:	687b      	ldr	r3, [r7, #4]
 803069c:	2201      	movs	r2, #1
 803069e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80306a2:	687b      	ldr	r3, [r7, #4]
 80306a4:	2224      	movs	r2, #36	; 0x24
 80306a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80306aa:	687b      	ldr	r3, [r7, #4]
 80306ac:	681b      	ldr	r3, [r3, #0]
 80306ae:	681b      	ldr	r3, [r3, #0]
 80306b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80306b2:	687b      	ldr	r3, [r7, #4]
 80306b4:	681b      	ldr	r3, [r3, #0]
 80306b6:	681a      	ldr	r2, [r3, #0]
 80306b8:	687b      	ldr	r3, [r7, #4]
 80306ba:	681b      	ldr	r3, [r3, #0]
 80306bc:	f022 0201 	bic.w	r2, r2, #1
 80306c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80306c2:	687b      	ldr	r3, [r7, #4]
 80306c4:	681b      	ldr	r3, [r3, #0]
 80306c6:	689b      	ldr	r3, [r3, #8]
 80306c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80306cc:	687b      	ldr	r3, [r7, #4]
 80306ce:	681b      	ldr	r3, [r3, #0]
 80306d0:	683a      	ldr	r2, [r7, #0]
 80306d2:	430a      	orrs	r2, r1
 80306d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80306d6:	6878      	ldr	r0, [r7, #4]
 80306d8:	f000 f812 	bl	8030700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80306dc:	687b      	ldr	r3, [r7, #4]
 80306de:	681b      	ldr	r3, [r3, #0]
 80306e0:	68fa      	ldr	r2, [r7, #12]
 80306e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80306e4:	687b      	ldr	r3, [r7, #4]
 80306e6:	2220      	movs	r2, #32
 80306e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80306ec:	687b      	ldr	r3, [r7, #4]
 80306ee:	2200      	movs	r2, #0
 80306f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80306f4:	2300      	movs	r3, #0
}
 80306f6:	4618      	mov	r0, r3
 80306f8:	3710      	adds	r7, #16
 80306fa:	46bd      	mov	sp, r7
 80306fc:	bd80      	pop	{r7, pc}
	...

08030700 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8030700:	b480      	push	{r7}
 8030702:	b085      	sub	sp, #20
 8030704:	af00      	add	r7, sp, #0
 8030706:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8030708:	687b      	ldr	r3, [r7, #4]
 803070a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803070c:	2b00      	cmp	r3, #0
 803070e:	d108      	bne.n	8030722 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8030710:	687b      	ldr	r3, [r7, #4]
 8030712:	2201      	movs	r2, #1
 8030714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8030718:	687b      	ldr	r3, [r7, #4]
 803071a:	2201      	movs	r2, #1
 803071c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8030720:	e031      	b.n	8030786 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8030722:	2310      	movs	r3, #16
 8030724:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8030726:	2310      	movs	r3, #16
 8030728:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 803072a:	687b      	ldr	r3, [r7, #4]
 803072c:	681b      	ldr	r3, [r3, #0]
 803072e:	689b      	ldr	r3, [r3, #8]
 8030730:	0e5b      	lsrs	r3, r3, #25
 8030732:	b2db      	uxtb	r3, r3
 8030734:	f003 0307 	and.w	r3, r3, #7
 8030738:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 803073a:	687b      	ldr	r3, [r7, #4]
 803073c:	681b      	ldr	r3, [r3, #0]
 803073e:	689b      	ldr	r3, [r3, #8]
 8030740:	0f5b      	lsrs	r3, r3, #29
 8030742:	b2db      	uxtb	r3, r3
 8030744:	f003 0307 	and.w	r3, r3, #7
 8030748:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 803074a:	7bbb      	ldrb	r3, [r7, #14]
 803074c:	7b3a      	ldrb	r2, [r7, #12]
 803074e:	4911      	ldr	r1, [pc, #68]	; (8030794 <UARTEx_SetNbDataToProcess+0x94>)
 8030750:	5c8a      	ldrb	r2, [r1, r2]
 8030752:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8030756:	7b3a      	ldrb	r2, [r7, #12]
 8030758:	490f      	ldr	r1, [pc, #60]	; (8030798 <UARTEx_SetNbDataToProcess+0x98>)
 803075a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 803075c:	fb93 f3f2 	sdiv	r3, r3, r2
 8030760:	b29a      	uxth	r2, r3
 8030762:	687b      	ldr	r3, [r7, #4]
 8030764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8030768:	7bfb      	ldrb	r3, [r7, #15]
 803076a:	7b7a      	ldrb	r2, [r7, #13]
 803076c:	4909      	ldr	r1, [pc, #36]	; (8030794 <UARTEx_SetNbDataToProcess+0x94>)
 803076e:	5c8a      	ldrb	r2, [r1, r2]
 8030770:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8030774:	7b7a      	ldrb	r2, [r7, #13]
 8030776:	4908      	ldr	r1, [pc, #32]	; (8030798 <UARTEx_SetNbDataToProcess+0x98>)
 8030778:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 803077a:	fb93 f3f2 	sdiv	r3, r3, r2
 803077e:	b29a      	uxth	r2, r3
 8030780:	687b      	ldr	r3, [r7, #4]
 8030782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8030786:	bf00      	nop
 8030788:	3714      	adds	r7, #20
 803078a:	46bd      	mov	sp, r7
 803078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030790:	4770      	bx	lr
 8030792:	bf00      	nop
 8030794:	08033328 	.word	0x08033328
 8030798:	08033330 	.word	0x08033330

0803079c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 803079c:	b480      	push	{r7}
 803079e:	b087      	sub	sp, #28
 80307a0:	af00      	add	r7, sp, #0
 80307a2:	6078      	str	r0, [r7, #4]
 80307a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80307a6:	683b      	ldr	r3, [r7, #0]
 80307a8:	681a      	ldr	r2, [r3, #0]
 80307aa:	687b      	ldr	r3, [r7, #4]
 80307ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80307b0:	683a      	ldr	r2, [r7, #0]
 80307b2:	6812      	ldr	r2, [r2, #0]
 80307b4:	f023 0101 	bic.w	r1, r3, #1
 80307b8:	687b      	ldr	r3, [r7, #4]
 80307ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80307be:	683b      	ldr	r3, [r7, #0]
 80307c0:	689b      	ldr	r3, [r3, #8]
 80307c2:	2b08      	cmp	r3, #8
 80307c4:	d102      	bne.n	80307cc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80307c6:	2340      	movs	r3, #64	; 0x40
 80307c8:	617b      	str	r3, [r7, #20]
 80307ca:	e001      	b.n	80307d0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80307cc:	2300      	movs	r3, #0
 80307ce:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80307d0:	683b      	ldr	r3, [r7, #0]
 80307d2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80307d4:	697b      	ldr	r3, [r7, #20]
 80307d6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80307d8:	683b      	ldr	r3, [r7, #0]
 80307da:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80307dc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80307de:	683b      	ldr	r3, [r7, #0]
 80307e0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80307e2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80307e4:	683b      	ldr	r3, [r7, #0]
 80307e6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80307e8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80307ea:	683b      	ldr	r3, [r7, #0]
 80307ec:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80307ee:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80307f0:	683b      	ldr	r3, [r7, #0]
 80307f2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80307f4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80307f6:	683b      	ldr	r3, [r7, #0]
 80307f8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80307fa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80307fc:	683b      	ldr	r3, [r7, #0]
 80307fe:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8030800:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8030802:	683b      	ldr	r3, [r7, #0]
 8030804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8030806:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8030808:	683b      	ldr	r3, [r7, #0]
 803080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 803080c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 803080e:	683b      	ldr	r3, [r7, #0]
 8030810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8030812:	4313      	orrs	r3, r2
 8030814:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8030816:	683b      	ldr	r3, [r7, #0]
 8030818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803081a:	693a      	ldr	r2, [r7, #16]
 803081c:	4313      	orrs	r3, r2
 803081e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8030820:	683b      	ldr	r3, [r7, #0]
 8030822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030824:	693a      	ldr	r2, [r7, #16]
 8030826:	4313      	orrs	r3, r2
 8030828:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 803082a:	683b      	ldr	r3, [r7, #0]
 803082c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803082e:	693a      	ldr	r2, [r7, #16]
 8030830:	4313      	orrs	r3, r2
 8030832:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8030834:	4b20      	ldr	r3, [pc, #128]	; (80308b8 <FMC_NORSRAM_Init+0x11c>)
 8030836:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8030838:	68fb      	ldr	r3, [r7, #12]
 803083a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 803083e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8030840:	68fb      	ldr	r3, [r7, #12]
 8030842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8030846:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8030848:	68fb      	ldr	r3, [r7, #12]
 803084a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 803084e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8030850:	683b      	ldr	r3, [r7, #0]
 8030852:	681a      	ldr	r2, [r3, #0]
 8030854:	687b      	ldr	r3, [r7, #4]
 8030856:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803085a:	68fb      	ldr	r3, [r7, #12]
 803085c:	43db      	mvns	r3, r3
 803085e:	ea02 0103 	and.w	r1, r2, r3
 8030862:	683b      	ldr	r3, [r7, #0]
 8030864:	681a      	ldr	r2, [r3, #0]
 8030866:	693b      	ldr	r3, [r7, #16]
 8030868:	4319      	orrs	r1, r3
 803086a:	687b      	ldr	r3, [r7, #4]
 803086c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8030870:	683b      	ldr	r3, [r7, #0]
 8030872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8030878:	d10c      	bne.n	8030894 <FMC_NORSRAM_Init+0xf8>
 803087a:	683b      	ldr	r3, [r7, #0]
 803087c:	681b      	ldr	r3, [r3, #0]
 803087e:	2b00      	cmp	r3, #0
 8030880:	d008      	beq.n	8030894 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8030882:	687b      	ldr	r3, [r7, #4]
 8030884:	681b      	ldr	r3, [r3, #0]
 8030886:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 803088a:	683b      	ldr	r3, [r7, #0]
 803088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803088e:	431a      	orrs	r2, r3
 8030890:	687b      	ldr	r3, [r7, #4]
 8030892:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8030894:	683b      	ldr	r3, [r7, #0]
 8030896:	681b      	ldr	r3, [r3, #0]
 8030898:	2b00      	cmp	r3, #0
 803089a:	d006      	beq.n	80308aa <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 803089c:	687b      	ldr	r3, [r7, #4]
 803089e:	681a      	ldr	r2, [r3, #0]
 80308a0:	683b      	ldr	r3, [r7, #0]
 80308a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80308a4:	431a      	orrs	r2, r3
 80308a6:	687b      	ldr	r3, [r7, #4]
 80308a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80308aa:	2300      	movs	r3, #0
}
 80308ac:	4618      	mov	r0, r3
 80308ae:	371c      	adds	r7, #28
 80308b0:	46bd      	mov	sp, r7
 80308b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80308b6:	4770      	bx	lr
 80308b8:	0008fb7f 	.word	0x0008fb7f

080308bc <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80308bc:	b480      	push	{r7}
 80308be:	b087      	sub	sp, #28
 80308c0:	af00      	add	r7, sp, #0
 80308c2:	60f8      	str	r0, [r7, #12]
 80308c4:	60b9      	str	r1, [r7, #8]
 80308c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80308c8:	687b      	ldr	r3, [r7, #4]
 80308ca:	1c5a      	adds	r2, r3, #1
 80308cc:	68fb      	ldr	r3, [r7, #12]
 80308ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80308d2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80308d6:	68bb      	ldr	r3, [r7, #8]
 80308d8:	681a      	ldr	r2, [r3, #0]
 80308da:	68bb      	ldr	r3, [r7, #8]
 80308dc:	685b      	ldr	r3, [r3, #4]
 80308de:	011b      	lsls	r3, r3, #4
 80308e0:	431a      	orrs	r2, r3
 80308e2:	68bb      	ldr	r3, [r7, #8]
 80308e4:	689b      	ldr	r3, [r3, #8]
 80308e6:	021b      	lsls	r3, r3, #8
 80308e8:	431a      	orrs	r2, r3
 80308ea:	68bb      	ldr	r3, [r7, #8]
 80308ec:	68db      	ldr	r3, [r3, #12]
 80308ee:	041b      	lsls	r3, r3, #16
 80308f0:	431a      	orrs	r2, r3
 80308f2:	68bb      	ldr	r3, [r7, #8]
 80308f4:	691b      	ldr	r3, [r3, #16]
 80308f6:	3b01      	subs	r3, #1
 80308f8:	051b      	lsls	r3, r3, #20
 80308fa:	431a      	orrs	r2, r3
 80308fc:	68bb      	ldr	r3, [r7, #8]
 80308fe:	695b      	ldr	r3, [r3, #20]
 8030900:	3b02      	subs	r3, #2
 8030902:	061b      	lsls	r3, r3, #24
 8030904:	431a      	orrs	r2, r3
 8030906:	68bb      	ldr	r3, [r7, #8]
 8030908:	699b      	ldr	r3, [r3, #24]
 803090a:	4313      	orrs	r3, r2
 803090c:	687a      	ldr	r2, [r7, #4]
 803090e:	3201      	adds	r2, #1
 8030910:	4319      	orrs	r1, r3
 8030912:	68fb      	ldr	r3, [r7, #12]
 8030914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8030918:	68fb      	ldr	r3, [r7, #12]
 803091a:	681b      	ldr	r3, [r3, #0]
 803091c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8030920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8030924:	d113      	bne.n	803094e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8030926:	68fb      	ldr	r3, [r7, #12]
 8030928:	685b      	ldr	r3, [r3, #4]
 803092a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 803092e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8030930:	68bb      	ldr	r3, [r7, #8]
 8030932:	691b      	ldr	r3, [r3, #16]
 8030934:	3b01      	subs	r3, #1
 8030936:	051b      	lsls	r3, r3, #20
 8030938:	697a      	ldr	r2, [r7, #20]
 803093a:	4313      	orrs	r3, r2
 803093c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 803093e:	68fb      	ldr	r3, [r7, #12]
 8030940:	685b      	ldr	r3, [r3, #4]
 8030942:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8030946:	697b      	ldr	r3, [r7, #20]
 8030948:	431a      	orrs	r2, r3
 803094a:	68fb      	ldr	r3, [r7, #12]
 803094c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 803094e:	2300      	movs	r3, #0
}
 8030950:	4618      	mov	r0, r3
 8030952:	371c      	adds	r7, #28
 8030954:	46bd      	mov	sp, r7
 8030956:	f85d 7b04 	ldr.w	r7, [sp], #4
 803095a:	4770      	bx	lr

0803095c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 803095c:	b480      	push	{r7}
 803095e:	b085      	sub	sp, #20
 8030960:	af00      	add	r7, sp, #0
 8030962:	60f8      	str	r0, [r7, #12]
 8030964:	60b9      	str	r1, [r7, #8]
 8030966:	607a      	str	r2, [r7, #4]
 8030968:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 803096a:	683b      	ldr	r3, [r7, #0]
 803096c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8030970:	d11d      	bne.n	80309ae <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8030972:	68fb      	ldr	r3, [r7, #12]
 8030974:	687a      	ldr	r2, [r7, #4]
 8030976:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803097a:	4b13      	ldr	r3, [pc, #76]	; (80309c8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 803097c:	4013      	ands	r3, r2
 803097e:	68ba      	ldr	r2, [r7, #8]
 8030980:	6811      	ldr	r1, [r2, #0]
 8030982:	68ba      	ldr	r2, [r7, #8]
 8030984:	6852      	ldr	r2, [r2, #4]
 8030986:	0112      	lsls	r2, r2, #4
 8030988:	4311      	orrs	r1, r2
 803098a:	68ba      	ldr	r2, [r7, #8]
 803098c:	6892      	ldr	r2, [r2, #8]
 803098e:	0212      	lsls	r2, r2, #8
 8030990:	4311      	orrs	r1, r2
 8030992:	68ba      	ldr	r2, [r7, #8]
 8030994:	6992      	ldr	r2, [r2, #24]
 8030996:	4311      	orrs	r1, r2
 8030998:	68ba      	ldr	r2, [r7, #8]
 803099a:	68d2      	ldr	r2, [r2, #12]
 803099c:	0412      	lsls	r2, r2, #16
 803099e:	430a      	orrs	r2, r1
 80309a0:	ea43 0102 	orr.w	r1, r3, r2
 80309a4:	68fb      	ldr	r3, [r7, #12]
 80309a6:	687a      	ldr	r2, [r7, #4]
 80309a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80309ac:	e005      	b.n	80309ba <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80309ae:	68fb      	ldr	r3, [r7, #12]
 80309b0:	687a      	ldr	r2, [r7, #4]
 80309b2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80309b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80309ba:	2300      	movs	r3, #0
}
 80309bc:	4618      	mov	r0, r3
 80309be:	3714      	adds	r7, #20
 80309c0:	46bd      	mov	sp, r7
 80309c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80309c6:	4770      	bx	lr
 80309c8:	cff00000 	.word	0xcff00000

080309cc <Print2Hex>:
*           nLen - data length
* Return:   None
* comments: print title and hex data with 16 characters a line
*******************************************************************************/
void Print2Hex(char* szTitle, void* pBuff, int nLen)
{
 80309cc:	b580      	push	{r7, lr}
 80309ce:	b086      	sub	sp, #24
 80309d0:	af00      	add	r7, sp, #0
 80309d2:	60f8      	str	r0, [r7, #12]
 80309d4:	60b9      	str	r1, [r7, #8]
 80309d6:	607a      	str	r2, [r7, #4]
	int i;
	char *pcBuff = (char*)pBuff;
 80309d8:	68bb      	ldr	r3, [r7, #8]
 80309da:	613b      	str	r3, [r7, #16]

	//PRINT("Recv: %s", szTitle);
	printf("Recv: %s", szTitle);
 80309dc:	68f9      	ldr	r1, [r7, #12]
 80309de:	4812      	ldr	r0, [pc, #72]	; (8030a28 <Print2Hex+0x5c>)
 80309e0:	f7f8 ff38 	bl	8029854 <printf_>
	for (i=0; i<nLen; i++)
 80309e4:	2300      	movs	r3, #0
 80309e6:	617b      	str	r3, [r7, #20]
 80309e8:	e012      	b.n	8030a10 <Print2Hex+0x44>
	{
		//if (!(i%16)) PRINT("\r\n");
		if (!(i%16)) printf("\r\n");
 80309ea:	697b      	ldr	r3, [r7, #20]
 80309ec:	f003 030f 	and.w	r3, r3, #15
 80309f0:	2b00      	cmp	r3, #0
 80309f2:	d102      	bne.n	80309fa <Print2Hex+0x2e>
 80309f4:	480d      	ldr	r0, [pc, #52]	; (8030a2c <Print2Hex+0x60>)
 80309f6:	f7f8 ff2d 	bl	8029854 <printf_>

		//PRINT("%x ", *pcBuff++);
		printf("%x ", *pcBuff++);
 80309fa:	693b      	ldr	r3, [r7, #16]
 80309fc:	1c5a      	adds	r2, r3, #1
 80309fe:	613a      	str	r2, [r7, #16]
 8030a00:	781b      	ldrb	r3, [r3, #0]
 8030a02:	4619      	mov	r1, r3
 8030a04:	480a      	ldr	r0, [pc, #40]	; (8030a30 <Print2Hex+0x64>)
 8030a06:	f7f8 ff25 	bl	8029854 <printf_>
	for (i=0; i<nLen; i++)
 8030a0a:	697b      	ldr	r3, [r7, #20]
 8030a0c:	3301      	adds	r3, #1
 8030a0e:	617b      	str	r3, [r7, #20]
 8030a10:	697a      	ldr	r2, [r7, #20]
 8030a12:	687b      	ldr	r3, [r7, #4]
 8030a14:	429a      	cmp	r2, r3
 8030a16:	dbe8      	blt.n	80309ea <Print2Hex+0x1e>
	}
	//PRINT("\r\n");
	printf("\r\n");
 8030a18:	4804      	ldr	r0, [pc, #16]	; (8030a2c <Print2Hex+0x60>)
 8030a1a:	f7f8 ff1b 	bl	8029854 <printf_>
}
 8030a1e:	bf00      	nop
 8030a20:	3718      	adds	r7, #24
 8030a22:	46bd      	mov	sp, r7
 8030a24:	bd80      	pop	{r7, pc}
 8030a26:	bf00      	nop
 8030a28:	08033298 	.word	0x08033298
 8030a2c:	08033294 	.word	0x08033294
 8030a30:	080332a4 	.word	0x080332a4

08030a34 <SetTimer>:

	TIM_CounterConfig(DELAY_TIM, TIM_STOP);	// Stop Timer
}
#endif
void SetTimer(TTIMER *pTimer)
{
 8030a34:	b480      	push	{r7}
 8030a36:	b083      	sub	sp, #12
 8030a38:	af00      	add	r7, sp, #0
 8030a3a:	6078      	str	r0, [r7, #4]
	pTimer->fStart = TRUE;
 8030a3c:	687b      	ldr	r3, [r7, #4]
 8030a3e:	2201      	movs	r2, #1
 8030a40:	701a      	strb	r2, [r3, #0]
	pTimer->dwStartTick = gdwTick;
 8030a42:	4b05      	ldr	r3, [pc, #20]	; (8030a58 <SetTimer+0x24>)
 8030a44:	681a      	ldr	r2, [r3, #0]
 8030a46:	687b      	ldr	r3, [r7, #4]
 8030a48:	605a      	str	r2, [r3, #4]
}
 8030a4a:	bf00      	nop
 8030a4c:	370c      	adds	r7, #12
 8030a4e:	46bd      	mov	sp, r7
 8030a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a54:	4770      	bx	lr
 8030a56:	bf00      	nop
 8030a58:	24002014 	.word	0x24002014

08030a5c <ResetTimer>:

void ResetTimer(TTIMER *pTimer)
{
 8030a5c:	b480      	push	{r7}
 8030a5e:	b083      	sub	sp, #12
 8030a60:	af00      	add	r7, sp, #0
 8030a62:	6078      	str	r0, [r7, #4]
	pTimer->fStart = FALSE;
 8030a64:	687b      	ldr	r3, [r7, #4]
 8030a66:	2200      	movs	r2, #0
 8030a68:	701a      	strb	r2, [r3, #0]
}
 8030a6a:	bf00      	nop
 8030a6c:	370c      	adds	r7, #12
 8030a6e:	46bd      	mov	sp, r7
 8030a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a74:	4770      	bx	lr
	...

08030a78 <IsTimeout>:
* Out:      None
* Return:   void
* comments: Timeout range is between 0 and (0xFFFFFFFF * 10ms)
*******************************************************************************/
bool IsTimeout(TTIMER *pTimer, DWORD dwTimeout)
{
 8030a78:	b480      	push	{r7}
 8030a7a:	b085      	sub	sp, #20
 8030a7c:	af00      	add	r7, sp, #0
 8030a7e:	6078      	str	r0, [r7, #4]
 8030a80:	6039      	str	r1, [r7, #0]
	bool	fTimeout = FALSE;
 8030a82:	2300      	movs	r3, #0
 8030a84:	73fb      	strb	r3, [r7, #15]
	DWORD	dwCurrentTick;

	if (pTimer->fStart)
 8030a86:	687b      	ldr	r3, [r7, #4]
 8030a88:	781b      	ldrb	r3, [r3, #0]
 8030a8a:	2b00      	cmp	r3, #0
 8030a8c:	d01b      	beq.n	8030ac6 <IsTimeout+0x4e>
	{
		dwCurrentTick = gdwTick;
 8030a8e:	4b11      	ldr	r3, [pc, #68]	; (8030ad4 <IsTimeout+0x5c>)
 8030a90:	681b      	ldr	r3, [r3, #0]
 8030a92:	60bb      	str	r3, [r7, #8]

		if (dwCurrentTick >= pTimer->dwStartTick )
 8030a94:	687b      	ldr	r3, [r7, #4]
 8030a96:	685b      	ldr	r3, [r3, #4]
 8030a98:	68ba      	ldr	r2, [r7, #8]
 8030a9a:	429a      	cmp	r2, r3
 8030a9c:	d309      	bcc.n	8030ab2 <IsTimeout+0x3a>
		{
			if ( (dwCurrentTick - pTimer->dwStartTick) >= dwTimeout )
 8030a9e:	687b      	ldr	r3, [r7, #4]
 8030aa0:	685b      	ldr	r3, [r3, #4]
 8030aa2:	68ba      	ldr	r2, [r7, #8]
 8030aa4:	1ad3      	subs	r3, r2, r3
 8030aa6:	683a      	ldr	r2, [r7, #0]
 8030aa8:	429a      	cmp	r2, r3
 8030aaa:	d80c      	bhi.n	8030ac6 <IsTimeout+0x4e>
				fTimeout = TRUE;
 8030aac:	2301      	movs	r3, #1
 8030aae:	73fb      	strb	r3, [r7, #15]
 8030ab0:	e009      	b.n	8030ac6 <IsTimeout+0x4e>
		}
		else // in case of (dwCurrentTick < pTimer->dwStartTick)
		{
			if ( (0xFFFFFFFF - pTimer->dwStartTick + dwCurrentTick) >= dwTimeout )
 8030ab2:	687b      	ldr	r3, [r7, #4]
 8030ab4:	685b      	ldr	r3, [r3, #4]
 8030ab6:	68ba      	ldr	r2, [r7, #8]
 8030ab8:	1ad3      	subs	r3, r2, r3
 8030aba:	3b01      	subs	r3, #1
 8030abc:	683a      	ldr	r2, [r7, #0]
 8030abe:	429a      	cmp	r2, r3
 8030ac0:	d801      	bhi.n	8030ac6 <IsTimeout+0x4e>
				fTimeout = TRUE;
 8030ac2:	2301      	movs	r3, #1
 8030ac4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return fTimeout;
 8030ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8030ac8:	4618      	mov	r0, r3
 8030aca:	3714      	adds	r7, #20
 8030acc:	46bd      	mov	sp, r7
 8030ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030ad2:	4770      	bx	lr
 8030ad4:	24002014 	.word	0x24002014

08030ad8 <__errno>:
 8030ad8:	4b01      	ldr	r3, [pc, #4]	; (8030ae0 <__errno+0x8>)
 8030ada:	6818      	ldr	r0, [r3, #0]
 8030adc:	4770      	bx	lr
 8030ade:	bf00      	nop
 8030ae0:	240000c4 	.word	0x240000c4

08030ae4 <__libc_init_array>:
 8030ae4:	b570      	push	{r4, r5, r6, lr}
 8030ae6:	4d0d      	ldr	r5, [pc, #52]	; (8030b1c <__libc_init_array+0x38>)
 8030ae8:	4c0d      	ldr	r4, [pc, #52]	; (8030b20 <__libc_init_array+0x3c>)
 8030aea:	1b64      	subs	r4, r4, r5
 8030aec:	10a4      	asrs	r4, r4, #2
 8030aee:	2600      	movs	r6, #0
 8030af0:	42a6      	cmp	r6, r4
 8030af2:	d109      	bne.n	8030b08 <__libc_init_array+0x24>
 8030af4:	4d0b      	ldr	r5, [pc, #44]	; (8030b24 <__libc_init_array+0x40>)
 8030af6:	4c0c      	ldr	r4, [pc, #48]	; (8030b28 <__libc_init_array+0x44>)
 8030af8:	f001 fa6e 	bl	8031fd8 <_init>
 8030afc:	1b64      	subs	r4, r4, r5
 8030afe:	10a4      	asrs	r4, r4, #2
 8030b00:	2600      	movs	r6, #0
 8030b02:	42a6      	cmp	r6, r4
 8030b04:	d105      	bne.n	8030b12 <__libc_init_array+0x2e>
 8030b06:	bd70      	pop	{r4, r5, r6, pc}
 8030b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8030b0c:	4798      	blx	r3
 8030b0e:	3601      	adds	r6, #1
 8030b10:	e7ee      	b.n	8030af0 <__libc_init_array+0xc>
 8030b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8030b16:	4798      	blx	r3
 8030b18:	3601      	adds	r6, #1
 8030b1a:	e7f2      	b.n	8030b02 <__libc_init_array+0x1e>
 8030b1c:	080334dc 	.word	0x080334dc
 8030b20:	080334dc 	.word	0x080334dc
 8030b24:	080334dc 	.word	0x080334dc
 8030b28:	080334e0 	.word	0x080334e0

08030b2c <memcmp>:
 8030b2c:	b510      	push	{r4, lr}
 8030b2e:	3901      	subs	r1, #1
 8030b30:	4402      	add	r2, r0
 8030b32:	4290      	cmp	r0, r2
 8030b34:	d101      	bne.n	8030b3a <memcmp+0xe>
 8030b36:	2000      	movs	r0, #0
 8030b38:	e005      	b.n	8030b46 <memcmp+0x1a>
 8030b3a:	7803      	ldrb	r3, [r0, #0]
 8030b3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8030b40:	42a3      	cmp	r3, r4
 8030b42:	d001      	beq.n	8030b48 <memcmp+0x1c>
 8030b44:	1b18      	subs	r0, r3, r4
 8030b46:	bd10      	pop	{r4, pc}
 8030b48:	3001      	adds	r0, #1
 8030b4a:	e7f2      	b.n	8030b32 <memcmp+0x6>

08030b4c <memcpy>:
 8030b4c:	440a      	add	r2, r1
 8030b4e:	4291      	cmp	r1, r2
 8030b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8030b54:	d100      	bne.n	8030b58 <memcpy+0xc>
 8030b56:	4770      	bx	lr
 8030b58:	b510      	push	{r4, lr}
 8030b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8030b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8030b62:	4291      	cmp	r1, r2
 8030b64:	d1f9      	bne.n	8030b5a <memcpy+0xe>
 8030b66:	bd10      	pop	{r4, pc}

08030b68 <memset>:
 8030b68:	4402      	add	r2, r0
 8030b6a:	4603      	mov	r3, r0
 8030b6c:	4293      	cmp	r3, r2
 8030b6e:	d100      	bne.n	8030b72 <memset+0xa>
 8030b70:	4770      	bx	lr
 8030b72:	f803 1b01 	strb.w	r1, [r3], #1
 8030b76:	e7f9      	b.n	8030b6c <memset+0x4>

08030b78 <_free_r>:
 8030b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8030b7a:	2900      	cmp	r1, #0
 8030b7c:	d044      	beq.n	8030c08 <_free_r+0x90>
 8030b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8030b82:	9001      	str	r0, [sp, #4]
 8030b84:	2b00      	cmp	r3, #0
 8030b86:	f1a1 0404 	sub.w	r4, r1, #4
 8030b8a:	bfb8      	it	lt
 8030b8c:	18e4      	addlt	r4, r4, r3
 8030b8e:	f000 fc87 	bl	80314a0 <__malloc_lock>
 8030b92:	4a1e      	ldr	r2, [pc, #120]	; (8030c0c <_free_r+0x94>)
 8030b94:	9801      	ldr	r0, [sp, #4]
 8030b96:	6813      	ldr	r3, [r2, #0]
 8030b98:	b933      	cbnz	r3, 8030ba8 <_free_r+0x30>
 8030b9a:	6063      	str	r3, [r4, #4]
 8030b9c:	6014      	str	r4, [r2, #0]
 8030b9e:	b003      	add	sp, #12
 8030ba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8030ba4:	f000 bc82 	b.w	80314ac <__malloc_unlock>
 8030ba8:	42a3      	cmp	r3, r4
 8030baa:	d908      	bls.n	8030bbe <_free_r+0x46>
 8030bac:	6825      	ldr	r5, [r4, #0]
 8030bae:	1961      	adds	r1, r4, r5
 8030bb0:	428b      	cmp	r3, r1
 8030bb2:	bf01      	itttt	eq
 8030bb4:	6819      	ldreq	r1, [r3, #0]
 8030bb6:	685b      	ldreq	r3, [r3, #4]
 8030bb8:	1949      	addeq	r1, r1, r5
 8030bba:	6021      	streq	r1, [r4, #0]
 8030bbc:	e7ed      	b.n	8030b9a <_free_r+0x22>
 8030bbe:	461a      	mov	r2, r3
 8030bc0:	685b      	ldr	r3, [r3, #4]
 8030bc2:	b10b      	cbz	r3, 8030bc8 <_free_r+0x50>
 8030bc4:	42a3      	cmp	r3, r4
 8030bc6:	d9fa      	bls.n	8030bbe <_free_r+0x46>
 8030bc8:	6811      	ldr	r1, [r2, #0]
 8030bca:	1855      	adds	r5, r2, r1
 8030bcc:	42a5      	cmp	r5, r4
 8030bce:	d10b      	bne.n	8030be8 <_free_r+0x70>
 8030bd0:	6824      	ldr	r4, [r4, #0]
 8030bd2:	4421      	add	r1, r4
 8030bd4:	1854      	adds	r4, r2, r1
 8030bd6:	42a3      	cmp	r3, r4
 8030bd8:	6011      	str	r1, [r2, #0]
 8030bda:	d1e0      	bne.n	8030b9e <_free_r+0x26>
 8030bdc:	681c      	ldr	r4, [r3, #0]
 8030bde:	685b      	ldr	r3, [r3, #4]
 8030be0:	6053      	str	r3, [r2, #4]
 8030be2:	4421      	add	r1, r4
 8030be4:	6011      	str	r1, [r2, #0]
 8030be6:	e7da      	b.n	8030b9e <_free_r+0x26>
 8030be8:	d902      	bls.n	8030bf0 <_free_r+0x78>
 8030bea:	230c      	movs	r3, #12
 8030bec:	6003      	str	r3, [r0, #0]
 8030bee:	e7d6      	b.n	8030b9e <_free_r+0x26>
 8030bf0:	6825      	ldr	r5, [r4, #0]
 8030bf2:	1961      	adds	r1, r4, r5
 8030bf4:	428b      	cmp	r3, r1
 8030bf6:	bf04      	itt	eq
 8030bf8:	6819      	ldreq	r1, [r3, #0]
 8030bfa:	685b      	ldreq	r3, [r3, #4]
 8030bfc:	6063      	str	r3, [r4, #4]
 8030bfe:	bf04      	itt	eq
 8030c00:	1949      	addeq	r1, r1, r5
 8030c02:	6021      	streq	r1, [r4, #0]
 8030c04:	6054      	str	r4, [r2, #4]
 8030c06:	e7ca      	b.n	8030b9e <_free_r+0x26>
 8030c08:	b003      	add	sp, #12
 8030c0a:	bd30      	pop	{r4, r5, pc}
 8030c0c:	24002018 	.word	0x24002018

08030c10 <sbrk_aligned>:
 8030c10:	b570      	push	{r4, r5, r6, lr}
 8030c12:	4e0e      	ldr	r6, [pc, #56]	; (8030c4c <sbrk_aligned+0x3c>)
 8030c14:	460c      	mov	r4, r1
 8030c16:	6831      	ldr	r1, [r6, #0]
 8030c18:	4605      	mov	r5, r0
 8030c1a:	b911      	cbnz	r1, 8030c22 <sbrk_aligned+0x12>
 8030c1c:	f000 f930 	bl	8030e80 <_sbrk_r>
 8030c20:	6030      	str	r0, [r6, #0]
 8030c22:	4621      	mov	r1, r4
 8030c24:	4628      	mov	r0, r5
 8030c26:	f000 f92b 	bl	8030e80 <_sbrk_r>
 8030c2a:	1c43      	adds	r3, r0, #1
 8030c2c:	d00a      	beq.n	8030c44 <sbrk_aligned+0x34>
 8030c2e:	1cc4      	adds	r4, r0, #3
 8030c30:	f024 0403 	bic.w	r4, r4, #3
 8030c34:	42a0      	cmp	r0, r4
 8030c36:	d007      	beq.n	8030c48 <sbrk_aligned+0x38>
 8030c38:	1a21      	subs	r1, r4, r0
 8030c3a:	4628      	mov	r0, r5
 8030c3c:	f000 f920 	bl	8030e80 <_sbrk_r>
 8030c40:	3001      	adds	r0, #1
 8030c42:	d101      	bne.n	8030c48 <sbrk_aligned+0x38>
 8030c44:	f04f 34ff 	mov.w	r4, #4294967295
 8030c48:	4620      	mov	r0, r4
 8030c4a:	bd70      	pop	{r4, r5, r6, pc}
 8030c4c:	2400201c 	.word	0x2400201c

08030c50 <_malloc_r>:
 8030c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030c54:	1ccd      	adds	r5, r1, #3
 8030c56:	f025 0503 	bic.w	r5, r5, #3
 8030c5a:	3508      	adds	r5, #8
 8030c5c:	2d0c      	cmp	r5, #12
 8030c5e:	bf38      	it	cc
 8030c60:	250c      	movcc	r5, #12
 8030c62:	2d00      	cmp	r5, #0
 8030c64:	4607      	mov	r7, r0
 8030c66:	db01      	blt.n	8030c6c <_malloc_r+0x1c>
 8030c68:	42a9      	cmp	r1, r5
 8030c6a:	d905      	bls.n	8030c78 <_malloc_r+0x28>
 8030c6c:	230c      	movs	r3, #12
 8030c6e:	603b      	str	r3, [r7, #0]
 8030c70:	2600      	movs	r6, #0
 8030c72:	4630      	mov	r0, r6
 8030c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030c78:	4e2e      	ldr	r6, [pc, #184]	; (8030d34 <_malloc_r+0xe4>)
 8030c7a:	f000 fc11 	bl	80314a0 <__malloc_lock>
 8030c7e:	6833      	ldr	r3, [r6, #0]
 8030c80:	461c      	mov	r4, r3
 8030c82:	bb34      	cbnz	r4, 8030cd2 <_malloc_r+0x82>
 8030c84:	4629      	mov	r1, r5
 8030c86:	4638      	mov	r0, r7
 8030c88:	f7ff ffc2 	bl	8030c10 <sbrk_aligned>
 8030c8c:	1c43      	adds	r3, r0, #1
 8030c8e:	4604      	mov	r4, r0
 8030c90:	d14d      	bne.n	8030d2e <_malloc_r+0xde>
 8030c92:	6834      	ldr	r4, [r6, #0]
 8030c94:	4626      	mov	r6, r4
 8030c96:	2e00      	cmp	r6, #0
 8030c98:	d140      	bne.n	8030d1c <_malloc_r+0xcc>
 8030c9a:	6823      	ldr	r3, [r4, #0]
 8030c9c:	4631      	mov	r1, r6
 8030c9e:	4638      	mov	r0, r7
 8030ca0:	eb04 0803 	add.w	r8, r4, r3
 8030ca4:	f000 f8ec 	bl	8030e80 <_sbrk_r>
 8030ca8:	4580      	cmp	r8, r0
 8030caa:	d13a      	bne.n	8030d22 <_malloc_r+0xd2>
 8030cac:	6821      	ldr	r1, [r4, #0]
 8030cae:	3503      	adds	r5, #3
 8030cb0:	1a6d      	subs	r5, r5, r1
 8030cb2:	f025 0503 	bic.w	r5, r5, #3
 8030cb6:	3508      	adds	r5, #8
 8030cb8:	2d0c      	cmp	r5, #12
 8030cba:	bf38      	it	cc
 8030cbc:	250c      	movcc	r5, #12
 8030cbe:	4629      	mov	r1, r5
 8030cc0:	4638      	mov	r0, r7
 8030cc2:	f7ff ffa5 	bl	8030c10 <sbrk_aligned>
 8030cc6:	3001      	adds	r0, #1
 8030cc8:	d02b      	beq.n	8030d22 <_malloc_r+0xd2>
 8030cca:	6823      	ldr	r3, [r4, #0]
 8030ccc:	442b      	add	r3, r5
 8030cce:	6023      	str	r3, [r4, #0]
 8030cd0:	e00e      	b.n	8030cf0 <_malloc_r+0xa0>
 8030cd2:	6822      	ldr	r2, [r4, #0]
 8030cd4:	1b52      	subs	r2, r2, r5
 8030cd6:	d41e      	bmi.n	8030d16 <_malloc_r+0xc6>
 8030cd8:	2a0b      	cmp	r2, #11
 8030cda:	d916      	bls.n	8030d0a <_malloc_r+0xba>
 8030cdc:	1961      	adds	r1, r4, r5
 8030cde:	42a3      	cmp	r3, r4
 8030ce0:	6025      	str	r5, [r4, #0]
 8030ce2:	bf18      	it	ne
 8030ce4:	6059      	strne	r1, [r3, #4]
 8030ce6:	6863      	ldr	r3, [r4, #4]
 8030ce8:	bf08      	it	eq
 8030cea:	6031      	streq	r1, [r6, #0]
 8030cec:	5162      	str	r2, [r4, r5]
 8030cee:	604b      	str	r3, [r1, #4]
 8030cf0:	4638      	mov	r0, r7
 8030cf2:	f104 060b 	add.w	r6, r4, #11
 8030cf6:	f000 fbd9 	bl	80314ac <__malloc_unlock>
 8030cfa:	f026 0607 	bic.w	r6, r6, #7
 8030cfe:	1d23      	adds	r3, r4, #4
 8030d00:	1af2      	subs	r2, r6, r3
 8030d02:	d0b6      	beq.n	8030c72 <_malloc_r+0x22>
 8030d04:	1b9b      	subs	r3, r3, r6
 8030d06:	50a3      	str	r3, [r4, r2]
 8030d08:	e7b3      	b.n	8030c72 <_malloc_r+0x22>
 8030d0a:	6862      	ldr	r2, [r4, #4]
 8030d0c:	42a3      	cmp	r3, r4
 8030d0e:	bf0c      	ite	eq
 8030d10:	6032      	streq	r2, [r6, #0]
 8030d12:	605a      	strne	r2, [r3, #4]
 8030d14:	e7ec      	b.n	8030cf0 <_malloc_r+0xa0>
 8030d16:	4623      	mov	r3, r4
 8030d18:	6864      	ldr	r4, [r4, #4]
 8030d1a:	e7b2      	b.n	8030c82 <_malloc_r+0x32>
 8030d1c:	4634      	mov	r4, r6
 8030d1e:	6876      	ldr	r6, [r6, #4]
 8030d20:	e7b9      	b.n	8030c96 <_malloc_r+0x46>
 8030d22:	230c      	movs	r3, #12
 8030d24:	603b      	str	r3, [r7, #0]
 8030d26:	4638      	mov	r0, r7
 8030d28:	f000 fbc0 	bl	80314ac <__malloc_unlock>
 8030d2c:	e7a1      	b.n	8030c72 <_malloc_r+0x22>
 8030d2e:	6025      	str	r5, [r4, #0]
 8030d30:	e7de      	b.n	8030cf0 <_malloc_r+0xa0>
 8030d32:	bf00      	nop
 8030d34:	24002018 	.word	0x24002018

08030d38 <iprintf>:
 8030d38:	b40f      	push	{r0, r1, r2, r3}
 8030d3a:	4b0a      	ldr	r3, [pc, #40]	; (8030d64 <iprintf+0x2c>)
 8030d3c:	b513      	push	{r0, r1, r4, lr}
 8030d3e:	681c      	ldr	r4, [r3, #0]
 8030d40:	b124      	cbz	r4, 8030d4c <iprintf+0x14>
 8030d42:	69a3      	ldr	r3, [r4, #24]
 8030d44:	b913      	cbnz	r3, 8030d4c <iprintf+0x14>
 8030d46:	4620      	mov	r0, r4
 8030d48:	f000 faa4 	bl	8031294 <__sinit>
 8030d4c:	ab05      	add	r3, sp, #20
 8030d4e:	9a04      	ldr	r2, [sp, #16]
 8030d50:	68a1      	ldr	r1, [r4, #8]
 8030d52:	9301      	str	r3, [sp, #4]
 8030d54:	4620      	mov	r0, r4
 8030d56:	f000 fd35 	bl	80317c4 <_vfiprintf_r>
 8030d5a:	b002      	add	sp, #8
 8030d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8030d60:	b004      	add	sp, #16
 8030d62:	4770      	bx	lr
 8030d64:	240000c4 	.word	0x240000c4

08030d68 <putchar>:
 8030d68:	4b09      	ldr	r3, [pc, #36]	; (8030d90 <putchar+0x28>)
 8030d6a:	b513      	push	{r0, r1, r4, lr}
 8030d6c:	681c      	ldr	r4, [r3, #0]
 8030d6e:	4601      	mov	r1, r0
 8030d70:	b134      	cbz	r4, 8030d80 <putchar+0x18>
 8030d72:	69a3      	ldr	r3, [r4, #24]
 8030d74:	b923      	cbnz	r3, 8030d80 <putchar+0x18>
 8030d76:	9001      	str	r0, [sp, #4]
 8030d78:	4620      	mov	r0, r4
 8030d7a:	f000 fa8b 	bl	8031294 <__sinit>
 8030d7e:	9901      	ldr	r1, [sp, #4]
 8030d80:	68a2      	ldr	r2, [r4, #8]
 8030d82:	4620      	mov	r0, r4
 8030d84:	b002      	add	sp, #8
 8030d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8030d8a:	f000 bfdf 	b.w	8031d4c <_putc_r>
 8030d8e:	bf00      	nop
 8030d90:	240000c4 	.word	0x240000c4

08030d94 <_puts_r>:
 8030d94:	b570      	push	{r4, r5, r6, lr}
 8030d96:	460e      	mov	r6, r1
 8030d98:	4605      	mov	r5, r0
 8030d9a:	b118      	cbz	r0, 8030da4 <_puts_r+0x10>
 8030d9c:	6983      	ldr	r3, [r0, #24]
 8030d9e:	b90b      	cbnz	r3, 8030da4 <_puts_r+0x10>
 8030da0:	f000 fa78 	bl	8031294 <__sinit>
 8030da4:	69ab      	ldr	r3, [r5, #24]
 8030da6:	68ac      	ldr	r4, [r5, #8]
 8030da8:	b913      	cbnz	r3, 8030db0 <_puts_r+0x1c>
 8030daa:	4628      	mov	r0, r5
 8030dac:	f000 fa72 	bl	8031294 <__sinit>
 8030db0:	4b2c      	ldr	r3, [pc, #176]	; (8030e64 <_puts_r+0xd0>)
 8030db2:	429c      	cmp	r4, r3
 8030db4:	d120      	bne.n	8030df8 <_puts_r+0x64>
 8030db6:	686c      	ldr	r4, [r5, #4]
 8030db8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030dba:	07db      	lsls	r3, r3, #31
 8030dbc:	d405      	bmi.n	8030dca <_puts_r+0x36>
 8030dbe:	89a3      	ldrh	r3, [r4, #12]
 8030dc0:	0598      	lsls	r0, r3, #22
 8030dc2:	d402      	bmi.n	8030dca <_puts_r+0x36>
 8030dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030dc6:	f000 fb03 	bl	80313d0 <__retarget_lock_acquire_recursive>
 8030dca:	89a3      	ldrh	r3, [r4, #12]
 8030dcc:	0719      	lsls	r1, r3, #28
 8030dce:	d51d      	bpl.n	8030e0c <_puts_r+0x78>
 8030dd0:	6923      	ldr	r3, [r4, #16]
 8030dd2:	b1db      	cbz	r3, 8030e0c <_puts_r+0x78>
 8030dd4:	3e01      	subs	r6, #1
 8030dd6:	68a3      	ldr	r3, [r4, #8]
 8030dd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8030ddc:	3b01      	subs	r3, #1
 8030dde:	60a3      	str	r3, [r4, #8]
 8030de0:	bb39      	cbnz	r1, 8030e32 <_puts_r+0x9e>
 8030de2:	2b00      	cmp	r3, #0
 8030de4:	da38      	bge.n	8030e58 <_puts_r+0xc4>
 8030de6:	4622      	mov	r2, r4
 8030de8:	210a      	movs	r1, #10
 8030dea:	4628      	mov	r0, r5
 8030dec:	f000 f878 	bl	8030ee0 <__swbuf_r>
 8030df0:	3001      	adds	r0, #1
 8030df2:	d011      	beq.n	8030e18 <_puts_r+0x84>
 8030df4:	250a      	movs	r5, #10
 8030df6:	e011      	b.n	8030e1c <_puts_r+0x88>
 8030df8:	4b1b      	ldr	r3, [pc, #108]	; (8030e68 <_puts_r+0xd4>)
 8030dfa:	429c      	cmp	r4, r3
 8030dfc:	d101      	bne.n	8030e02 <_puts_r+0x6e>
 8030dfe:	68ac      	ldr	r4, [r5, #8]
 8030e00:	e7da      	b.n	8030db8 <_puts_r+0x24>
 8030e02:	4b1a      	ldr	r3, [pc, #104]	; (8030e6c <_puts_r+0xd8>)
 8030e04:	429c      	cmp	r4, r3
 8030e06:	bf08      	it	eq
 8030e08:	68ec      	ldreq	r4, [r5, #12]
 8030e0a:	e7d5      	b.n	8030db8 <_puts_r+0x24>
 8030e0c:	4621      	mov	r1, r4
 8030e0e:	4628      	mov	r0, r5
 8030e10:	f000 f8b8 	bl	8030f84 <__swsetup_r>
 8030e14:	2800      	cmp	r0, #0
 8030e16:	d0dd      	beq.n	8030dd4 <_puts_r+0x40>
 8030e18:	f04f 35ff 	mov.w	r5, #4294967295
 8030e1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030e1e:	07da      	lsls	r2, r3, #31
 8030e20:	d405      	bmi.n	8030e2e <_puts_r+0x9a>
 8030e22:	89a3      	ldrh	r3, [r4, #12]
 8030e24:	059b      	lsls	r3, r3, #22
 8030e26:	d402      	bmi.n	8030e2e <_puts_r+0x9a>
 8030e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030e2a:	f000 fad2 	bl	80313d2 <__retarget_lock_release_recursive>
 8030e2e:	4628      	mov	r0, r5
 8030e30:	bd70      	pop	{r4, r5, r6, pc}
 8030e32:	2b00      	cmp	r3, #0
 8030e34:	da04      	bge.n	8030e40 <_puts_r+0xac>
 8030e36:	69a2      	ldr	r2, [r4, #24]
 8030e38:	429a      	cmp	r2, r3
 8030e3a:	dc06      	bgt.n	8030e4a <_puts_r+0xb6>
 8030e3c:	290a      	cmp	r1, #10
 8030e3e:	d004      	beq.n	8030e4a <_puts_r+0xb6>
 8030e40:	6823      	ldr	r3, [r4, #0]
 8030e42:	1c5a      	adds	r2, r3, #1
 8030e44:	6022      	str	r2, [r4, #0]
 8030e46:	7019      	strb	r1, [r3, #0]
 8030e48:	e7c5      	b.n	8030dd6 <_puts_r+0x42>
 8030e4a:	4622      	mov	r2, r4
 8030e4c:	4628      	mov	r0, r5
 8030e4e:	f000 f847 	bl	8030ee0 <__swbuf_r>
 8030e52:	3001      	adds	r0, #1
 8030e54:	d1bf      	bne.n	8030dd6 <_puts_r+0x42>
 8030e56:	e7df      	b.n	8030e18 <_puts_r+0x84>
 8030e58:	6823      	ldr	r3, [r4, #0]
 8030e5a:	250a      	movs	r5, #10
 8030e5c:	1c5a      	adds	r2, r3, #1
 8030e5e:	6022      	str	r2, [r4, #0]
 8030e60:	701d      	strb	r5, [r3, #0]
 8030e62:	e7db      	b.n	8030e1c <_puts_r+0x88>
 8030e64:	08033460 	.word	0x08033460
 8030e68:	08033480 	.word	0x08033480
 8030e6c:	08033440 	.word	0x08033440

08030e70 <puts>:
 8030e70:	4b02      	ldr	r3, [pc, #8]	; (8030e7c <puts+0xc>)
 8030e72:	4601      	mov	r1, r0
 8030e74:	6818      	ldr	r0, [r3, #0]
 8030e76:	f7ff bf8d 	b.w	8030d94 <_puts_r>
 8030e7a:	bf00      	nop
 8030e7c:	240000c4 	.word	0x240000c4

08030e80 <_sbrk_r>:
 8030e80:	b538      	push	{r3, r4, r5, lr}
 8030e82:	4d06      	ldr	r5, [pc, #24]	; (8030e9c <_sbrk_r+0x1c>)
 8030e84:	2300      	movs	r3, #0
 8030e86:	4604      	mov	r4, r0
 8030e88:	4608      	mov	r0, r1
 8030e8a:	602b      	str	r3, [r5, #0]
 8030e8c:	f7f9 f99a 	bl	802a1c4 <_sbrk>
 8030e90:	1c43      	adds	r3, r0, #1
 8030e92:	d102      	bne.n	8030e9a <_sbrk_r+0x1a>
 8030e94:	682b      	ldr	r3, [r5, #0]
 8030e96:	b103      	cbz	r3, 8030e9a <_sbrk_r+0x1a>
 8030e98:	6023      	str	r3, [r4, #0]
 8030e9a:	bd38      	pop	{r3, r4, r5, pc}
 8030e9c:	24002024 	.word	0x24002024

08030ea0 <siprintf>:
 8030ea0:	b40e      	push	{r1, r2, r3}
 8030ea2:	b500      	push	{lr}
 8030ea4:	b09c      	sub	sp, #112	; 0x70
 8030ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8030ea8:	9002      	str	r0, [sp, #8]
 8030eaa:	9006      	str	r0, [sp, #24]
 8030eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8030eb0:	4809      	ldr	r0, [pc, #36]	; (8030ed8 <siprintf+0x38>)
 8030eb2:	9107      	str	r1, [sp, #28]
 8030eb4:	9104      	str	r1, [sp, #16]
 8030eb6:	4909      	ldr	r1, [pc, #36]	; (8030edc <siprintf+0x3c>)
 8030eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8030ebc:	9105      	str	r1, [sp, #20]
 8030ebe:	6800      	ldr	r0, [r0, #0]
 8030ec0:	9301      	str	r3, [sp, #4]
 8030ec2:	a902      	add	r1, sp, #8
 8030ec4:	f000 fb54 	bl	8031570 <_svfiprintf_r>
 8030ec8:	9b02      	ldr	r3, [sp, #8]
 8030eca:	2200      	movs	r2, #0
 8030ecc:	701a      	strb	r2, [r3, #0]
 8030ece:	b01c      	add	sp, #112	; 0x70
 8030ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8030ed4:	b003      	add	sp, #12
 8030ed6:	4770      	bx	lr
 8030ed8:	240000c4 	.word	0x240000c4
 8030edc:	ffff0208 	.word	0xffff0208

08030ee0 <__swbuf_r>:
 8030ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030ee2:	460e      	mov	r6, r1
 8030ee4:	4614      	mov	r4, r2
 8030ee6:	4605      	mov	r5, r0
 8030ee8:	b118      	cbz	r0, 8030ef2 <__swbuf_r+0x12>
 8030eea:	6983      	ldr	r3, [r0, #24]
 8030eec:	b90b      	cbnz	r3, 8030ef2 <__swbuf_r+0x12>
 8030eee:	f000 f9d1 	bl	8031294 <__sinit>
 8030ef2:	4b21      	ldr	r3, [pc, #132]	; (8030f78 <__swbuf_r+0x98>)
 8030ef4:	429c      	cmp	r4, r3
 8030ef6:	d12b      	bne.n	8030f50 <__swbuf_r+0x70>
 8030ef8:	686c      	ldr	r4, [r5, #4]
 8030efa:	69a3      	ldr	r3, [r4, #24]
 8030efc:	60a3      	str	r3, [r4, #8]
 8030efe:	89a3      	ldrh	r3, [r4, #12]
 8030f00:	071a      	lsls	r2, r3, #28
 8030f02:	d52f      	bpl.n	8030f64 <__swbuf_r+0x84>
 8030f04:	6923      	ldr	r3, [r4, #16]
 8030f06:	b36b      	cbz	r3, 8030f64 <__swbuf_r+0x84>
 8030f08:	6923      	ldr	r3, [r4, #16]
 8030f0a:	6820      	ldr	r0, [r4, #0]
 8030f0c:	1ac0      	subs	r0, r0, r3
 8030f0e:	6963      	ldr	r3, [r4, #20]
 8030f10:	b2f6      	uxtb	r6, r6
 8030f12:	4283      	cmp	r3, r0
 8030f14:	4637      	mov	r7, r6
 8030f16:	dc04      	bgt.n	8030f22 <__swbuf_r+0x42>
 8030f18:	4621      	mov	r1, r4
 8030f1a:	4628      	mov	r0, r5
 8030f1c:	f000 f926 	bl	803116c <_fflush_r>
 8030f20:	bb30      	cbnz	r0, 8030f70 <__swbuf_r+0x90>
 8030f22:	68a3      	ldr	r3, [r4, #8]
 8030f24:	3b01      	subs	r3, #1
 8030f26:	60a3      	str	r3, [r4, #8]
 8030f28:	6823      	ldr	r3, [r4, #0]
 8030f2a:	1c5a      	adds	r2, r3, #1
 8030f2c:	6022      	str	r2, [r4, #0]
 8030f2e:	701e      	strb	r6, [r3, #0]
 8030f30:	6963      	ldr	r3, [r4, #20]
 8030f32:	3001      	adds	r0, #1
 8030f34:	4283      	cmp	r3, r0
 8030f36:	d004      	beq.n	8030f42 <__swbuf_r+0x62>
 8030f38:	89a3      	ldrh	r3, [r4, #12]
 8030f3a:	07db      	lsls	r3, r3, #31
 8030f3c:	d506      	bpl.n	8030f4c <__swbuf_r+0x6c>
 8030f3e:	2e0a      	cmp	r6, #10
 8030f40:	d104      	bne.n	8030f4c <__swbuf_r+0x6c>
 8030f42:	4621      	mov	r1, r4
 8030f44:	4628      	mov	r0, r5
 8030f46:	f000 f911 	bl	803116c <_fflush_r>
 8030f4a:	b988      	cbnz	r0, 8030f70 <__swbuf_r+0x90>
 8030f4c:	4638      	mov	r0, r7
 8030f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8030f50:	4b0a      	ldr	r3, [pc, #40]	; (8030f7c <__swbuf_r+0x9c>)
 8030f52:	429c      	cmp	r4, r3
 8030f54:	d101      	bne.n	8030f5a <__swbuf_r+0x7a>
 8030f56:	68ac      	ldr	r4, [r5, #8]
 8030f58:	e7cf      	b.n	8030efa <__swbuf_r+0x1a>
 8030f5a:	4b09      	ldr	r3, [pc, #36]	; (8030f80 <__swbuf_r+0xa0>)
 8030f5c:	429c      	cmp	r4, r3
 8030f5e:	bf08      	it	eq
 8030f60:	68ec      	ldreq	r4, [r5, #12]
 8030f62:	e7ca      	b.n	8030efa <__swbuf_r+0x1a>
 8030f64:	4621      	mov	r1, r4
 8030f66:	4628      	mov	r0, r5
 8030f68:	f000 f80c 	bl	8030f84 <__swsetup_r>
 8030f6c:	2800      	cmp	r0, #0
 8030f6e:	d0cb      	beq.n	8030f08 <__swbuf_r+0x28>
 8030f70:	f04f 37ff 	mov.w	r7, #4294967295
 8030f74:	e7ea      	b.n	8030f4c <__swbuf_r+0x6c>
 8030f76:	bf00      	nop
 8030f78:	08033460 	.word	0x08033460
 8030f7c:	08033480 	.word	0x08033480
 8030f80:	08033440 	.word	0x08033440

08030f84 <__swsetup_r>:
 8030f84:	4b32      	ldr	r3, [pc, #200]	; (8031050 <__swsetup_r+0xcc>)
 8030f86:	b570      	push	{r4, r5, r6, lr}
 8030f88:	681d      	ldr	r5, [r3, #0]
 8030f8a:	4606      	mov	r6, r0
 8030f8c:	460c      	mov	r4, r1
 8030f8e:	b125      	cbz	r5, 8030f9a <__swsetup_r+0x16>
 8030f90:	69ab      	ldr	r3, [r5, #24]
 8030f92:	b913      	cbnz	r3, 8030f9a <__swsetup_r+0x16>
 8030f94:	4628      	mov	r0, r5
 8030f96:	f000 f97d 	bl	8031294 <__sinit>
 8030f9a:	4b2e      	ldr	r3, [pc, #184]	; (8031054 <__swsetup_r+0xd0>)
 8030f9c:	429c      	cmp	r4, r3
 8030f9e:	d10f      	bne.n	8030fc0 <__swsetup_r+0x3c>
 8030fa0:	686c      	ldr	r4, [r5, #4]
 8030fa2:	89a3      	ldrh	r3, [r4, #12]
 8030fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8030fa8:	0719      	lsls	r1, r3, #28
 8030faa:	d42c      	bmi.n	8031006 <__swsetup_r+0x82>
 8030fac:	06dd      	lsls	r5, r3, #27
 8030fae:	d411      	bmi.n	8030fd4 <__swsetup_r+0x50>
 8030fb0:	2309      	movs	r3, #9
 8030fb2:	6033      	str	r3, [r6, #0]
 8030fb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8030fb8:	81a3      	strh	r3, [r4, #12]
 8030fba:	f04f 30ff 	mov.w	r0, #4294967295
 8030fbe:	e03e      	b.n	803103e <__swsetup_r+0xba>
 8030fc0:	4b25      	ldr	r3, [pc, #148]	; (8031058 <__swsetup_r+0xd4>)
 8030fc2:	429c      	cmp	r4, r3
 8030fc4:	d101      	bne.n	8030fca <__swsetup_r+0x46>
 8030fc6:	68ac      	ldr	r4, [r5, #8]
 8030fc8:	e7eb      	b.n	8030fa2 <__swsetup_r+0x1e>
 8030fca:	4b24      	ldr	r3, [pc, #144]	; (803105c <__swsetup_r+0xd8>)
 8030fcc:	429c      	cmp	r4, r3
 8030fce:	bf08      	it	eq
 8030fd0:	68ec      	ldreq	r4, [r5, #12]
 8030fd2:	e7e6      	b.n	8030fa2 <__swsetup_r+0x1e>
 8030fd4:	0758      	lsls	r0, r3, #29
 8030fd6:	d512      	bpl.n	8030ffe <__swsetup_r+0x7a>
 8030fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8030fda:	b141      	cbz	r1, 8030fee <__swsetup_r+0x6a>
 8030fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030fe0:	4299      	cmp	r1, r3
 8030fe2:	d002      	beq.n	8030fea <__swsetup_r+0x66>
 8030fe4:	4630      	mov	r0, r6
 8030fe6:	f7ff fdc7 	bl	8030b78 <_free_r>
 8030fea:	2300      	movs	r3, #0
 8030fec:	6363      	str	r3, [r4, #52]	; 0x34
 8030fee:	89a3      	ldrh	r3, [r4, #12]
 8030ff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8030ff4:	81a3      	strh	r3, [r4, #12]
 8030ff6:	2300      	movs	r3, #0
 8030ff8:	6063      	str	r3, [r4, #4]
 8030ffa:	6923      	ldr	r3, [r4, #16]
 8030ffc:	6023      	str	r3, [r4, #0]
 8030ffe:	89a3      	ldrh	r3, [r4, #12]
 8031000:	f043 0308 	orr.w	r3, r3, #8
 8031004:	81a3      	strh	r3, [r4, #12]
 8031006:	6923      	ldr	r3, [r4, #16]
 8031008:	b94b      	cbnz	r3, 803101e <__swsetup_r+0x9a>
 803100a:	89a3      	ldrh	r3, [r4, #12]
 803100c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8031010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8031014:	d003      	beq.n	803101e <__swsetup_r+0x9a>
 8031016:	4621      	mov	r1, r4
 8031018:	4630      	mov	r0, r6
 803101a:	f000 fa01 	bl	8031420 <__smakebuf_r>
 803101e:	89a0      	ldrh	r0, [r4, #12]
 8031020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8031024:	f010 0301 	ands.w	r3, r0, #1
 8031028:	d00a      	beq.n	8031040 <__swsetup_r+0xbc>
 803102a:	2300      	movs	r3, #0
 803102c:	60a3      	str	r3, [r4, #8]
 803102e:	6963      	ldr	r3, [r4, #20]
 8031030:	425b      	negs	r3, r3
 8031032:	61a3      	str	r3, [r4, #24]
 8031034:	6923      	ldr	r3, [r4, #16]
 8031036:	b943      	cbnz	r3, 803104a <__swsetup_r+0xc6>
 8031038:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803103c:	d1ba      	bne.n	8030fb4 <__swsetup_r+0x30>
 803103e:	bd70      	pop	{r4, r5, r6, pc}
 8031040:	0781      	lsls	r1, r0, #30
 8031042:	bf58      	it	pl
 8031044:	6963      	ldrpl	r3, [r4, #20]
 8031046:	60a3      	str	r3, [r4, #8]
 8031048:	e7f4      	b.n	8031034 <__swsetup_r+0xb0>
 803104a:	2000      	movs	r0, #0
 803104c:	e7f7      	b.n	803103e <__swsetup_r+0xba>
 803104e:	bf00      	nop
 8031050:	240000c4 	.word	0x240000c4
 8031054:	08033460 	.word	0x08033460
 8031058:	08033480 	.word	0x08033480
 803105c:	08033440 	.word	0x08033440

08031060 <__sflush_r>:
 8031060:	898a      	ldrh	r2, [r1, #12]
 8031062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031066:	4605      	mov	r5, r0
 8031068:	0710      	lsls	r0, r2, #28
 803106a:	460c      	mov	r4, r1
 803106c:	d458      	bmi.n	8031120 <__sflush_r+0xc0>
 803106e:	684b      	ldr	r3, [r1, #4]
 8031070:	2b00      	cmp	r3, #0
 8031072:	dc05      	bgt.n	8031080 <__sflush_r+0x20>
 8031074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8031076:	2b00      	cmp	r3, #0
 8031078:	dc02      	bgt.n	8031080 <__sflush_r+0x20>
 803107a:	2000      	movs	r0, #0
 803107c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8031082:	2e00      	cmp	r6, #0
 8031084:	d0f9      	beq.n	803107a <__sflush_r+0x1a>
 8031086:	2300      	movs	r3, #0
 8031088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803108c:	682f      	ldr	r7, [r5, #0]
 803108e:	602b      	str	r3, [r5, #0]
 8031090:	d032      	beq.n	80310f8 <__sflush_r+0x98>
 8031092:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8031094:	89a3      	ldrh	r3, [r4, #12]
 8031096:	075a      	lsls	r2, r3, #29
 8031098:	d505      	bpl.n	80310a6 <__sflush_r+0x46>
 803109a:	6863      	ldr	r3, [r4, #4]
 803109c:	1ac0      	subs	r0, r0, r3
 803109e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80310a0:	b10b      	cbz	r3, 80310a6 <__sflush_r+0x46>
 80310a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80310a4:	1ac0      	subs	r0, r0, r3
 80310a6:	2300      	movs	r3, #0
 80310a8:	4602      	mov	r2, r0
 80310aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80310ac:	6a21      	ldr	r1, [r4, #32]
 80310ae:	4628      	mov	r0, r5
 80310b0:	47b0      	blx	r6
 80310b2:	1c43      	adds	r3, r0, #1
 80310b4:	89a3      	ldrh	r3, [r4, #12]
 80310b6:	d106      	bne.n	80310c6 <__sflush_r+0x66>
 80310b8:	6829      	ldr	r1, [r5, #0]
 80310ba:	291d      	cmp	r1, #29
 80310bc:	d82c      	bhi.n	8031118 <__sflush_r+0xb8>
 80310be:	4a2a      	ldr	r2, [pc, #168]	; (8031168 <__sflush_r+0x108>)
 80310c0:	40ca      	lsrs	r2, r1
 80310c2:	07d6      	lsls	r6, r2, #31
 80310c4:	d528      	bpl.n	8031118 <__sflush_r+0xb8>
 80310c6:	2200      	movs	r2, #0
 80310c8:	6062      	str	r2, [r4, #4]
 80310ca:	04d9      	lsls	r1, r3, #19
 80310cc:	6922      	ldr	r2, [r4, #16]
 80310ce:	6022      	str	r2, [r4, #0]
 80310d0:	d504      	bpl.n	80310dc <__sflush_r+0x7c>
 80310d2:	1c42      	adds	r2, r0, #1
 80310d4:	d101      	bne.n	80310da <__sflush_r+0x7a>
 80310d6:	682b      	ldr	r3, [r5, #0]
 80310d8:	b903      	cbnz	r3, 80310dc <__sflush_r+0x7c>
 80310da:	6560      	str	r0, [r4, #84]	; 0x54
 80310dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80310de:	602f      	str	r7, [r5, #0]
 80310e0:	2900      	cmp	r1, #0
 80310e2:	d0ca      	beq.n	803107a <__sflush_r+0x1a>
 80310e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80310e8:	4299      	cmp	r1, r3
 80310ea:	d002      	beq.n	80310f2 <__sflush_r+0x92>
 80310ec:	4628      	mov	r0, r5
 80310ee:	f7ff fd43 	bl	8030b78 <_free_r>
 80310f2:	2000      	movs	r0, #0
 80310f4:	6360      	str	r0, [r4, #52]	; 0x34
 80310f6:	e7c1      	b.n	803107c <__sflush_r+0x1c>
 80310f8:	6a21      	ldr	r1, [r4, #32]
 80310fa:	2301      	movs	r3, #1
 80310fc:	4628      	mov	r0, r5
 80310fe:	47b0      	blx	r6
 8031100:	1c41      	adds	r1, r0, #1
 8031102:	d1c7      	bne.n	8031094 <__sflush_r+0x34>
 8031104:	682b      	ldr	r3, [r5, #0]
 8031106:	2b00      	cmp	r3, #0
 8031108:	d0c4      	beq.n	8031094 <__sflush_r+0x34>
 803110a:	2b1d      	cmp	r3, #29
 803110c:	d001      	beq.n	8031112 <__sflush_r+0xb2>
 803110e:	2b16      	cmp	r3, #22
 8031110:	d101      	bne.n	8031116 <__sflush_r+0xb6>
 8031112:	602f      	str	r7, [r5, #0]
 8031114:	e7b1      	b.n	803107a <__sflush_r+0x1a>
 8031116:	89a3      	ldrh	r3, [r4, #12]
 8031118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803111c:	81a3      	strh	r3, [r4, #12]
 803111e:	e7ad      	b.n	803107c <__sflush_r+0x1c>
 8031120:	690f      	ldr	r7, [r1, #16]
 8031122:	2f00      	cmp	r7, #0
 8031124:	d0a9      	beq.n	803107a <__sflush_r+0x1a>
 8031126:	0793      	lsls	r3, r2, #30
 8031128:	680e      	ldr	r6, [r1, #0]
 803112a:	bf08      	it	eq
 803112c:	694b      	ldreq	r3, [r1, #20]
 803112e:	600f      	str	r7, [r1, #0]
 8031130:	bf18      	it	ne
 8031132:	2300      	movne	r3, #0
 8031134:	eba6 0807 	sub.w	r8, r6, r7
 8031138:	608b      	str	r3, [r1, #8]
 803113a:	f1b8 0f00 	cmp.w	r8, #0
 803113e:	dd9c      	ble.n	803107a <__sflush_r+0x1a>
 8031140:	6a21      	ldr	r1, [r4, #32]
 8031142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8031144:	4643      	mov	r3, r8
 8031146:	463a      	mov	r2, r7
 8031148:	4628      	mov	r0, r5
 803114a:	47b0      	blx	r6
 803114c:	2800      	cmp	r0, #0
 803114e:	dc06      	bgt.n	803115e <__sflush_r+0xfe>
 8031150:	89a3      	ldrh	r3, [r4, #12]
 8031152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8031156:	81a3      	strh	r3, [r4, #12]
 8031158:	f04f 30ff 	mov.w	r0, #4294967295
 803115c:	e78e      	b.n	803107c <__sflush_r+0x1c>
 803115e:	4407      	add	r7, r0
 8031160:	eba8 0800 	sub.w	r8, r8, r0
 8031164:	e7e9      	b.n	803113a <__sflush_r+0xda>
 8031166:	bf00      	nop
 8031168:	20400001 	.word	0x20400001

0803116c <_fflush_r>:
 803116c:	b538      	push	{r3, r4, r5, lr}
 803116e:	690b      	ldr	r3, [r1, #16]
 8031170:	4605      	mov	r5, r0
 8031172:	460c      	mov	r4, r1
 8031174:	b913      	cbnz	r3, 803117c <_fflush_r+0x10>
 8031176:	2500      	movs	r5, #0
 8031178:	4628      	mov	r0, r5
 803117a:	bd38      	pop	{r3, r4, r5, pc}
 803117c:	b118      	cbz	r0, 8031186 <_fflush_r+0x1a>
 803117e:	6983      	ldr	r3, [r0, #24]
 8031180:	b90b      	cbnz	r3, 8031186 <_fflush_r+0x1a>
 8031182:	f000 f887 	bl	8031294 <__sinit>
 8031186:	4b14      	ldr	r3, [pc, #80]	; (80311d8 <_fflush_r+0x6c>)
 8031188:	429c      	cmp	r4, r3
 803118a:	d11b      	bne.n	80311c4 <_fflush_r+0x58>
 803118c:	686c      	ldr	r4, [r5, #4]
 803118e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031192:	2b00      	cmp	r3, #0
 8031194:	d0ef      	beq.n	8031176 <_fflush_r+0xa>
 8031196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8031198:	07d0      	lsls	r0, r2, #31
 803119a:	d404      	bmi.n	80311a6 <_fflush_r+0x3a>
 803119c:	0599      	lsls	r1, r3, #22
 803119e:	d402      	bmi.n	80311a6 <_fflush_r+0x3a>
 80311a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80311a2:	f000 f915 	bl	80313d0 <__retarget_lock_acquire_recursive>
 80311a6:	4628      	mov	r0, r5
 80311a8:	4621      	mov	r1, r4
 80311aa:	f7ff ff59 	bl	8031060 <__sflush_r>
 80311ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80311b0:	07da      	lsls	r2, r3, #31
 80311b2:	4605      	mov	r5, r0
 80311b4:	d4e0      	bmi.n	8031178 <_fflush_r+0xc>
 80311b6:	89a3      	ldrh	r3, [r4, #12]
 80311b8:	059b      	lsls	r3, r3, #22
 80311ba:	d4dd      	bmi.n	8031178 <_fflush_r+0xc>
 80311bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80311be:	f000 f908 	bl	80313d2 <__retarget_lock_release_recursive>
 80311c2:	e7d9      	b.n	8031178 <_fflush_r+0xc>
 80311c4:	4b05      	ldr	r3, [pc, #20]	; (80311dc <_fflush_r+0x70>)
 80311c6:	429c      	cmp	r4, r3
 80311c8:	d101      	bne.n	80311ce <_fflush_r+0x62>
 80311ca:	68ac      	ldr	r4, [r5, #8]
 80311cc:	e7df      	b.n	803118e <_fflush_r+0x22>
 80311ce:	4b04      	ldr	r3, [pc, #16]	; (80311e0 <_fflush_r+0x74>)
 80311d0:	429c      	cmp	r4, r3
 80311d2:	bf08      	it	eq
 80311d4:	68ec      	ldreq	r4, [r5, #12]
 80311d6:	e7da      	b.n	803118e <_fflush_r+0x22>
 80311d8:	08033460 	.word	0x08033460
 80311dc:	08033480 	.word	0x08033480
 80311e0:	08033440 	.word	0x08033440

080311e4 <std>:
 80311e4:	2300      	movs	r3, #0
 80311e6:	b510      	push	{r4, lr}
 80311e8:	4604      	mov	r4, r0
 80311ea:	e9c0 3300 	strd	r3, r3, [r0]
 80311ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80311f2:	6083      	str	r3, [r0, #8]
 80311f4:	8181      	strh	r1, [r0, #12]
 80311f6:	6643      	str	r3, [r0, #100]	; 0x64
 80311f8:	81c2      	strh	r2, [r0, #14]
 80311fa:	6183      	str	r3, [r0, #24]
 80311fc:	4619      	mov	r1, r3
 80311fe:	2208      	movs	r2, #8
 8031200:	305c      	adds	r0, #92	; 0x5c
 8031202:	f7ff fcb1 	bl	8030b68 <memset>
 8031206:	4b05      	ldr	r3, [pc, #20]	; (803121c <std+0x38>)
 8031208:	6263      	str	r3, [r4, #36]	; 0x24
 803120a:	4b05      	ldr	r3, [pc, #20]	; (8031220 <std+0x3c>)
 803120c:	62a3      	str	r3, [r4, #40]	; 0x28
 803120e:	4b05      	ldr	r3, [pc, #20]	; (8031224 <std+0x40>)
 8031210:	62e3      	str	r3, [r4, #44]	; 0x2c
 8031212:	4b05      	ldr	r3, [pc, #20]	; (8031228 <std+0x44>)
 8031214:	6224      	str	r4, [r4, #32]
 8031216:	6323      	str	r3, [r4, #48]	; 0x30
 8031218:	bd10      	pop	{r4, pc}
 803121a:	bf00      	nop
 803121c:	08031ddd 	.word	0x08031ddd
 8031220:	08031dff 	.word	0x08031dff
 8031224:	08031e37 	.word	0x08031e37
 8031228:	08031e5b 	.word	0x08031e5b

0803122c <_cleanup_r>:
 803122c:	4901      	ldr	r1, [pc, #4]	; (8031234 <_cleanup_r+0x8>)
 803122e:	f000 b8af 	b.w	8031390 <_fwalk_reent>
 8031232:	bf00      	nop
 8031234:	0803116d 	.word	0x0803116d

08031238 <__sfmoreglue>:
 8031238:	b570      	push	{r4, r5, r6, lr}
 803123a:	2268      	movs	r2, #104	; 0x68
 803123c:	1e4d      	subs	r5, r1, #1
 803123e:	4355      	muls	r5, r2
 8031240:	460e      	mov	r6, r1
 8031242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8031246:	f7ff fd03 	bl	8030c50 <_malloc_r>
 803124a:	4604      	mov	r4, r0
 803124c:	b140      	cbz	r0, 8031260 <__sfmoreglue+0x28>
 803124e:	2100      	movs	r1, #0
 8031250:	e9c0 1600 	strd	r1, r6, [r0]
 8031254:	300c      	adds	r0, #12
 8031256:	60a0      	str	r0, [r4, #8]
 8031258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803125c:	f7ff fc84 	bl	8030b68 <memset>
 8031260:	4620      	mov	r0, r4
 8031262:	bd70      	pop	{r4, r5, r6, pc}

08031264 <__sfp_lock_acquire>:
 8031264:	4801      	ldr	r0, [pc, #4]	; (803126c <__sfp_lock_acquire+0x8>)
 8031266:	f000 b8b3 	b.w	80313d0 <__retarget_lock_acquire_recursive>
 803126a:	bf00      	nop
 803126c:	24002021 	.word	0x24002021

08031270 <__sfp_lock_release>:
 8031270:	4801      	ldr	r0, [pc, #4]	; (8031278 <__sfp_lock_release+0x8>)
 8031272:	f000 b8ae 	b.w	80313d2 <__retarget_lock_release_recursive>
 8031276:	bf00      	nop
 8031278:	24002021 	.word	0x24002021

0803127c <__sinit_lock_acquire>:
 803127c:	4801      	ldr	r0, [pc, #4]	; (8031284 <__sinit_lock_acquire+0x8>)
 803127e:	f000 b8a7 	b.w	80313d0 <__retarget_lock_acquire_recursive>
 8031282:	bf00      	nop
 8031284:	24002022 	.word	0x24002022

08031288 <__sinit_lock_release>:
 8031288:	4801      	ldr	r0, [pc, #4]	; (8031290 <__sinit_lock_release+0x8>)
 803128a:	f000 b8a2 	b.w	80313d2 <__retarget_lock_release_recursive>
 803128e:	bf00      	nop
 8031290:	24002022 	.word	0x24002022

08031294 <__sinit>:
 8031294:	b510      	push	{r4, lr}
 8031296:	4604      	mov	r4, r0
 8031298:	f7ff fff0 	bl	803127c <__sinit_lock_acquire>
 803129c:	69a3      	ldr	r3, [r4, #24]
 803129e:	b11b      	cbz	r3, 80312a8 <__sinit+0x14>
 80312a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80312a4:	f7ff bff0 	b.w	8031288 <__sinit_lock_release>
 80312a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80312ac:	6523      	str	r3, [r4, #80]	; 0x50
 80312ae:	4b13      	ldr	r3, [pc, #76]	; (80312fc <__sinit+0x68>)
 80312b0:	4a13      	ldr	r2, [pc, #76]	; (8031300 <__sinit+0x6c>)
 80312b2:	681b      	ldr	r3, [r3, #0]
 80312b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80312b6:	42a3      	cmp	r3, r4
 80312b8:	bf04      	itt	eq
 80312ba:	2301      	moveq	r3, #1
 80312bc:	61a3      	streq	r3, [r4, #24]
 80312be:	4620      	mov	r0, r4
 80312c0:	f000 f820 	bl	8031304 <__sfp>
 80312c4:	6060      	str	r0, [r4, #4]
 80312c6:	4620      	mov	r0, r4
 80312c8:	f000 f81c 	bl	8031304 <__sfp>
 80312cc:	60a0      	str	r0, [r4, #8]
 80312ce:	4620      	mov	r0, r4
 80312d0:	f000 f818 	bl	8031304 <__sfp>
 80312d4:	2200      	movs	r2, #0
 80312d6:	60e0      	str	r0, [r4, #12]
 80312d8:	2104      	movs	r1, #4
 80312da:	6860      	ldr	r0, [r4, #4]
 80312dc:	f7ff ff82 	bl	80311e4 <std>
 80312e0:	68a0      	ldr	r0, [r4, #8]
 80312e2:	2201      	movs	r2, #1
 80312e4:	2109      	movs	r1, #9
 80312e6:	f7ff ff7d 	bl	80311e4 <std>
 80312ea:	68e0      	ldr	r0, [r4, #12]
 80312ec:	2202      	movs	r2, #2
 80312ee:	2112      	movs	r1, #18
 80312f0:	f7ff ff78 	bl	80311e4 <std>
 80312f4:	2301      	movs	r3, #1
 80312f6:	61a3      	str	r3, [r4, #24]
 80312f8:	e7d2      	b.n	80312a0 <__sinit+0xc>
 80312fa:	bf00      	nop
 80312fc:	0803343c 	.word	0x0803343c
 8031300:	0803122d 	.word	0x0803122d

08031304 <__sfp>:
 8031304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031306:	4607      	mov	r7, r0
 8031308:	f7ff ffac 	bl	8031264 <__sfp_lock_acquire>
 803130c:	4b1e      	ldr	r3, [pc, #120]	; (8031388 <__sfp+0x84>)
 803130e:	681e      	ldr	r6, [r3, #0]
 8031310:	69b3      	ldr	r3, [r6, #24]
 8031312:	b913      	cbnz	r3, 803131a <__sfp+0x16>
 8031314:	4630      	mov	r0, r6
 8031316:	f7ff ffbd 	bl	8031294 <__sinit>
 803131a:	3648      	adds	r6, #72	; 0x48
 803131c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8031320:	3b01      	subs	r3, #1
 8031322:	d503      	bpl.n	803132c <__sfp+0x28>
 8031324:	6833      	ldr	r3, [r6, #0]
 8031326:	b30b      	cbz	r3, 803136c <__sfp+0x68>
 8031328:	6836      	ldr	r6, [r6, #0]
 803132a:	e7f7      	b.n	803131c <__sfp+0x18>
 803132c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8031330:	b9d5      	cbnz	r5, 8031368 <__sfp+0x64>
 8031332:	4b16      	ldr	r3, [pc, #88]	; (803138c <__sfp+0x88>)
 8031334:	60e3      	str	r3, [r4, #12]
 8031336:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803133a:	6665      	str	r5, [r4, #100]	; 0x64
 803133c:	f000 f847 	bl	80313ce <__retarget_lock_init_recursive>
 8031340:	f7ff ff96 	bl	8031270 <__sfp_lock_release>
 8031344:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8031348:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803134c:	6025      	str	r5, [r4, #0]
 803134e:	61a5      	str	r5, [r4, #24]
 8031350:	2208      	movs	r2, #8
 8031352:	4629      	mov	r1, r5
 8031354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8031358:	f7ff fc06 	bl	8030b68 <memset>
 803135c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8031360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8031364:	4620      	mov	r0, r4
 8031366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8031368:	3468      	adds	r4, #104	; 0x68
 803136a:	e7d9      	b.n	8031320 <__sfp+0x1c>
 803136c:	2104      	movs	r1, #4
 803136e:	4638      	mov	r0, r7
 8031370:	f7ff ff62 	bl	8031238 <__sfmoreglue>
 8031374:	4604      	mov	r4, r0
 8031376:	6030      	str	r0, [r6, #0]
 8031378:	2800      	cmp	r0, #0
 803137a:	d1d5      	bne.n	8031328 <__sfp+0x24>
 803137c:	f7ff ff78 	bl	8031270 <__sfp_lock_release>
 8031380:	230c      	movs	r3, #12
 8031382:	603b      	str	r3, [r7, #0]
 8031384:	e7ee      	b.n	8031364 <__sfp+0x60>
 8031386:	bf00      	nop
 8031388:	0803343c 	.word	0x0803343c
 803138c:	ffff0001 	.word	0xffff0001

08031390 <_fwalk_reent>:
 8031390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8031394:	4606      	mov	r6, r0
 8031396:	4688      	mov	r8, r1
 8031398:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803139c:	2700      	movs	r7, #0
 803139e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80313a2:	f1b9 0901 	subs.w	r9, r9, #1
 80313a6:	d505      	bpl.n	80313b4 <_fwalk_reent+0x24>
 80313a8:	6824      	ldr	r4, [r4, #0]
 80313aa:	2c00      	cmp	r4, #0
 80313ac:	d1f7      	bne.n	803139e <_fwalk_reent+0xe>
 80313ae:	4638      	mov	r0, r7
 80313b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80313b4:	89ab      	ldrh	r3, [r5, #12]
 80313b6:	2b01      	cmp	r3, #1
 80313b8:	d907      	bls.n	80313ca <_fwalk_reent+0x3a>
 80313ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80313be:	3301      	adds	r3, #1
 80313c0:	d003      	beq.n	80313ca <_fwalk_reent+0x3a>
 80313c2:	4629      	mov	r1, r5
 80313c4:	4630      	mov	r0, r6
 80313c6:	47c0      	blx	r8
 80313c8:	4307      	orrs	r7, r0
 80313ca:	3568      	adds	r5, #104	; 0x68
 80313cc:	e7e9      	b.n	80313a2 <_fwalk_reent+0x12>

080313ce <__retarget_lock_init_recursive>:
 80313ce:	4770      	bx	lr

080313d0 <__retarget_lock_acquire_recursive>:
 80313d0:	4770      	bx	lr

080313d2 <__retarget_lock_release_recursive>:
 80313d2:	4770      	bx	lr

080313d4 <__swhatbuf_r>:
 80313d4:	b570      	push	{r4, r5, r6, lr}
 80313d6:	460e      	mov	r6, r1
 80313d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80313dc:	2900      	cmp	r1, #0
 80313de:	b096      	sub	sp, #88	; 0x58
 80313e0:	4614      	mov	r4, r2
 80313e2:	461d      	mov	r5, r3
 80313e4:	da08      	bge.n	80313f8 <__swhatbuf_r+0x24>
 80313e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80313ea:	2200      	movs	r2, #0
 80313ec:	602a      	str	r2, [r5, #0]
 80313ee:	061a      	lsls	r2, r3, #24
 80313f0:	d410      	bmi.n	8031414 <__swhatbuf_r+0x40>
 80313f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80313f6:	e00e      	b.n	8031416 <__swhatbuf_r+0x42>
 80313f8:	466a      	mov	r2, sp
 80313fa:	f000 fd55 	bl	8031ea8 <_fstat_r>
 80313fe:	2800      	cmp	r0, #0
 8031400:	dbf1      	blt.n	80313e6 <__swhatbuf_r+0x12>
 8031402:	9a01      	ldr	r2, [sp, #4]
 8031404:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8031408:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803140c:	425a      	negs	r2, r3
 803140e:	415a      	adcs	r2, r3
 8031410:	602a      	str	r2, [r5, #0]
 8031412:	e7ee      	b.n	80313f2 <__swhatbuf_r+0x1e>
 8031414:	2340      	movs	r3, #64	; 0x40
 8031416:	2000      	movs	r0, #0
 8031418:	6023      	str	r3, [r4, #0]
 803141a:	b016      	add	sp, #88	; 0x58
 803141c:	bd70      	pop	{r4, r5, r6, pc}
	...

08031420 <__smakebuf_r>:
 8031420:	898b      	ldrh	r3, [r1, #12]
 8031422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8031424:	079d      	lsls	r5, r3, #30
 8031426:	4606      	mov	r6, r0
 8031428:	460c      	mov	r4, r1
 803142a:	d507      	bpl.n	803143c <__smakebuf_r+0x1c>
 803142c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8031430:	6023      	str	r3, [r4, #0]
 8031432:	6123      	str	r3, [r4, #16]
 8031434:	2301      	movs	r3, #1
 8031436:	6163      	str	r3, [r4, #20]
 8031438:	b002      	add	sp, #8
 803143a:	bd70      	pop	{r4, r5, r6, pc}
 803143c:	ab01      	add	r3, sp, #4
 803143e:	466a      	mov	r2, sp
 8031440:	f7ff ffc8 	bl	80313d4 <__swhatbuf_r>
 8031444:	9900      	ldr	r1, [sp, #0]
 8031446:	4605      	mov	r5, r0
 8031448:	4630      	mov	r0, r6
 803144a:	f7ff fc01 	bl	8030c50 <_malloc_r>
 803144e:	b948      	cbnz	r0, 8031464 <__smakebuf_r+0x44>
 8031450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031454:	059a      	lsls	r2, r3, #22
 8031456:	d4ef      	bmi.n	8031438 <__smakebuf_r+0x18>
 8031458:	f023 0303 	bic.w	r3, r3, #3
 803145c:	f043 0302 	orr.w	r3, r3, #2
 8031460:	81a3      	strh	r3, [r4, #12]
 8031462:	e7e3      	b.n	803142c <__smakebuf_r+0xc>
 8031464:	4b0d      	ldr	r3, [pc, #52]	; (803149c <__smakebuf_r+0x7c>)
 8031466:	62b3      	str	r3, [r6, #40]	; 0x28
 8031468:	89a3      	ldrh	r3, [r4, #12]
 803146a:	6020      	str	r0, [r4, #0]
 803146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8031470:	81a3      	strh	r3, [r4, #12]
 8031472:	9b00      	ldr	r3, [sp, #0]
 8031474:	6163      	str	r3, [r4, #20]
 8031476:	9b01      	ldr	r3, [sp, #4]
 8031478:	6120      	str	r0, [r4, #16]
 803147a:	b15b      	cbz	r3, 8031494 <__smakebuf_r+0x74>
 803147c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031480:	4630      	mov	r0, r6
 8031482:	f000 fd23 	bl	8031ecc <_isatty_r>
 8031486:	b128      	cbz	r0, 8031494 <__smakebuf_r+0x74>
 8031488:	89a3      	ldrh	r3, [r4, #12]
 803148a:	f023 0303 	bic.w	r3, r3, #3
 803148e:	f043 0301 	orr.w	r3, r3, #1
 8031492:	81a3      	strh	r3, [r4, #12]
 8031494:	89a0      	ldrh	r0, [r4, #12]
 8031496:	4305      	orrs	r5, r0
 8031498:	81a5      	strh	r5, [r4, #12]
 803149a:	e7cd      	b.n	8031438 <__smakebuf_r+0x18>
 803149c:	0803122d 	.word	0x0803122d

080314a0 <__malloc_lock>:
 80314a0:	4801      	ldr	r0, [pc, #4]	; (80314a8 <__malloc_lock+0x8>)
 80314a2:	f7ff bf95 	b.w	80313d0 <__retarget_lock_acquire_recursive>
 80314a6:	bf00      	nop
 80314a8:	24002020 	.word	0x24002020

080314ac <__malloc_unlock>:
 80314ac:	4801      	ldr	r0, [pc, #4]	; (80314b4 <__malloc_unlock+0x8>)
 80314ae:	f7ff bf90 	b.w	80313d2 <__retarget_lock_release_recursive>
 80314b2:	bf00      	nop
 80314b4:	24002020 	.word	0x24002020

080314b8 <__ssputs_r>:
 80314b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80314bc:	688e      	ldr	r6, [r1, #8]
 80314be:	429e      	cmp	r6, r3
 80314c0:	4682      	mov	sl, r0
 80314c2:	460c      	mov	r4, r1
 80314c4:	4690      	mov	r8, r2
 80314c6:	461f      	mov	r7, r3
 80314c8:	d838      	bhi.n	803153c <__ssputs_r+0x84>
 80314ca:	898a      	ldrh	r2, [r1, #12]
 80314cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80314d0:	d032      	beq.n	8031538 <__ssputs_r+0x80>
 80314d2:	6825      	ldr	r5, [r4, #0]
 80314d4:	6909      	ldr	r1, [r1, #16]
 80314d6:	eba5 0901 	sub.w	r9, r5, r1
 80314da:	6965      	ldr	r5, [r4, #20]
 80314dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80314e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80314e4:	3301      	adds	r3, #1
 80314e6:	444b      	add	r3, r9
 80314e8:	106d      	asrs	r5, r5, #1
 80314ea:	429d      	cmp	r5, r3
 80314ec:	bf38      	it	cc
 80314ee:	461d      	movcc	r5, r3
 80314f0:	0553      	lsls	r3, r2, #21
 80314f2:	d531      	bpl.n	8031558 <__ssputs_r+0xa0>
 80314f4:	4629      	mov	r1, r5
 80314f6:	f7ff fbab 	bl	8030c50 <_malloc_r>
 80314fa:	4606      	mov	r6, r0
 80314fc:	b950      	cbnz	r0, 8031514 <__ssputs_r+0x5c>
 80314fe:	230c      	movs	r3, #12
 8031500:	f8ca 3000 	str.w	r3, [sl]
 8031504:	89a3      	ldrh	r3, [r4, #12]
 8031506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803150a:	81a3      	strh	r3, [r4, #12]
 803150c:	f04f 30ff 	mov.w	r0, #4294967295
 8031510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031514:	6921      	ldr	r1, [r4, #16]
 8031516:	464a      	mov	r2, r9
 8031518:	f7ff fb18 	bl	8030b4c <memcpy>
 803151c:	89a3      	ldrh	r3, [r4, #12]
 803151e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8031522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8031526:	81a3      	strh	r3, [r4, #12]
 8031528:	6126      	str	r6, [r4, #16]
 803152a:	6165      	str	r5, [r4, #20]
 803152c:	444e      	add	r6, r9
 803152e:	eba5 0509 	sub.w	r5, r5, r9
 8031532:	6026      	str	r6, [r4, #0]
 8031534:	60a5      	str	r5, [r4, #8]
 8031536:	463e      	mov	r6, r7
 8031538:	42be      	cmp	r6, r7
 803153a:	d900      	bls.n	803153e <__ssputs_r+0x86>
 803153c:	463e      	mov	r6, r7
 803153e:	6820      	ldr	r0, [r4, #0]
 8031540:	4632      	mov	r2, r6
 8031542:	4641      	mov	r1, r8
 8031544:	f000 fce4 	bl	8031f10 <memmove>
 8031548:	68a3      	ldr	r3, [r4, #8]
 803154a:	1b9b      	subs	r3, r3, r6
 803154c:	60a3      	str	r3, [r4, #8]
 803154e:	6823      	ldr	r3, [r4, #0]
 8031550:	4433      	add	r3, r6
 8031552:	6023      	str	r3, [r4, #0]
 8031554:	2000      	movs	r0, #0
 8031556:	e7db      	b.n	8031510 <__ssputs_r+0x58>
 8031558:	462a      	mov	r2, r5
 803155a:	f000 fcf3 	bl	8031f44 <_realloc_r>
 803155e:	4606      	mov	r6, r0
 8031560:	2800      	cmp	r0, #0
 8031562:	d1e1      	bne.n	8031528 <__ssputs_r+0x70>
 8031564:	6921      	ldr	r1, [r4, #16]
 8031566:	4650      	mov	r0, sl
 8031568:	f7ff fb06 	bl	8030b78 <_free_r>
 803156c:	e7c7      	b.n	80314fe <__ssputs_r+0x46>
	...

08031570 <_svfiprintf_r>:
 8031570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031574:	4698      	mov	r8, r3
 8031576:	898b      	ldrh	r3, [r1, #12]
 8031578:	061b      	lsls	r3, r3, #24
 803157a:	b09d      	sub	sp, #116	; 0x74
 803157c:	4607      	mov	r7, r0
 803157e:	460d      	mov	r5, r1
 8031580:	4614      	mov	r4, r2
 8031582:	d50e      	bpl.n	80315a2 <_svfiprintf_r+0x32>
 8031584:	690b      	ldr	r3, [r1, #16]
 8031586:	b963      	cbnz	r3, 80315a2 <_svfiprintf_r+0x32>
 8031588:	2140      	movs	r1, #64	; 0x40
 803158a:	f7ff fb61 	bl	8030c50 <_malloc_r>
 803158e:	6028      	str	r0, [r5, #0]
 8031590:	6128      	str	r0, [r5, #16]
 8031592:	b920      	cbnz	r0, 803159e <_svfiprintf_r+0x2e>
 8031594:	230c      	movs	r3, #12
 8031596:	603b      	str	r3, [r7, #0]
 8031598:	f04f 30ff 	mov.w	r0, #4294967295
 803159c:	e0d1      	b.n	8031742 <_svfiprintf_r+0x1d2>
 803159e:	2340      	movs	r3, #64	; 0x40
 80315a0:	616b      	str	r3, [r5, #20]
 80315a2:	2300      	movs	r3, #0
 80315a4:	9309      	str	r3, [sp, #36]	; 0x24
 80315a6:	2320      	movs	r3, #32
 80315a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80315ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80315b0:	2330      	movs	r3, #48	; 0x30
 80315b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 803175c <_svfiprintf_r+0x1ec>
 80315b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80315ba:	f04f 0901 	mov.w	r9, #1
 80315be:	4623      	mov	r3, r4
 80315c0:	469a      	mov	sl, r3
 80315c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80315c6:	b10a      	cbz	r2, 80315cc <_svfiprintf_r+0x5c>
 80315c8:	2a25      	cmp	r2, #37	; 0x25
 80315ca:	d1f9      	bne.n	80315c0 <_svfiprintf_r+0x50>
 80315cc:	ebba 0b04 	subs.w	fp, sl, r4
 80315d0:	d00b      	beq.n	80315ea <_svfiprintf_r+0x7a>
 80315d2:	465b      	mov	r3, fp
 80315d4:	4622      	mov	r2, r4
 80315d6:	4629      	mov	r1, r5
 80315d8:	4638      	mov	r0, r7
 80315da:	f7ff ff6d 	bl	80314b8 <__ssputs_r>
 80315de:	3001      	adds	r0, #1
 80315e0:	f000 80aa 	beq.w	8031738 <_svfiprintf_r+0x1c8>
 80315e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80315e6:	445a      	add	r2, fp
 80315e8:	9209      	str	r2, [sp, #36]	; 0x24
 80315ea:	f89a 3000 	ldrb.w	r3, [sl]
 80315ee:	2b00      	cmp	r3, #0
 80315f0:	f000 80a2 	beq.w	8031738 <_svfiprintf_r+0x1c8>
 80315f4:	2300      	movs	r3, #0
 80315f6:	f04f 32ff 	mov.w	r2, #4294967295
 80315fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80315fe:	f10a 0a01 	add.w	sl, sl, #1
 8031602:	9304      	str	r3, [sp, #16]
 8031604:	9307      	str	r3, [sp, #28]
 8031606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803160a:	931a      	str	r3, [sp, #104]	; 0x68
 803160c:	4654      	mov	r4, sl
 803160e:	2205      	movs	r2, #5
 8031610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031614:	4851      	ldr	r0, [pc, #324]	; (803175c <_svfiprintf_r+0x1ec>)
 8031616:	f7ee fe6b 	bl	80202f0 <memchr>
 803161a:	9a04      	ldr	r2, [sp, #16]
 803161c:	b9d8      	cbnz	r0, 8031656 <_svfiprintf_r+0xe6>
 803161e:	06d0      	lsls	r0, r2, #27
 8031620:	bf44      	itt	mi
 8031622:	2320      	movmi	r3, #32
 8031624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031628:	0711      	lsls	r1, r2, #28
 803162a:	bf44      	itt	mi
 803162c:	232b      	movmi	r3, #43	; 0x2b
 803162e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031632:	f89a 3000 	ldrb.w	r3, [sl]
 8031636:	2b2a      	cmp	r3, #42	; 0x2a
 8031638:	d015      	beq.n	8031666 <_svfiprintf_r+0xf6>
 803163a:	9a07      	ldr	r2, [sp, #28]
 803163c:	4654      	mov	r4, sl
 803163e:	2000      	movs	r0, #0
 8031640:	f04f 0c0a 	mov.w	ip, #10
 8031644:	4621      	mov	r1, r4
 8031646:	f811 3b01 	ldrb.w	r3, [r1], #1
 803164a:	3b30      	subs	r3, #48	; 0x30
 803164c:	2b09      	cmp	r3, #9
 803164e:	d94e      	bls.n	80316ee <_svfiprintf_r+0x17e>
 8031650:	b1b0      	cbz	r0, 8031680 <_svfiprintf_r+0x110>
 8031652:	9207      	str	r2, [sp, #28]
 8031654:	e014      	b.n	8031680 <_svfiprintf_r+0x110>
 8031656:	eba0 0308 	sub.w	r3, r0, r8
 803165a:	fa09 f303 	lsl.w	r3, r9, r3
 803165e:	4313      	orrs	r3, r2
 8031660:	9304      	str	r3, [sp, #16]
 8031662:	46a2      	mov	sl, r4
 8031664:	e7d2      	b.n	803160c <_svfiprintf_r+0x9c>
 8031666:	9b03      	ldr	r3, [sp, #12]
 8031668:	1d19      	adds	r1, r3, #4
 803166a:	681b      	ldr	r3, [r3, #0]
 803166c:	9103      	str	r1, [sp, #12]
 803166e:	2b00      	cmp	r3, #0
 8031670:	bfbb      	ittet	lt
 8031672:	425b      	neglt	r3, r3
 8031674:	f042 0202 	orrlt.w	r2, r2, #2
 8031678:	9307      	strge	r3, [sp, #28]
 803167a:	9307      	strlt	r3, [sp, #28]
 803167c:	bfb8      	it	lt
 803167e:	9204      	strlt	r2, [sp, #16]
 8031680:	7823      	ldrb	r3, [r4, #0]
 8031682:	2b2e      	cmp	r3, #46	; 0x2e
 8031684:	d10c      	bne.n	80316a0 <_svfiprintf_r+0x130>
 8031686:	7863      	ldrb	r3, [r4, #1]
 8031688:	2b2a      	cmp	r3, #42	; 0x2a
 803168a:	d135      	bne.n	80316f8 <_svfiprintf_r+0x188>
 803168c:	9b03      	ldr	r3, [sp, #12]
 803168e:	1d1a      	adds	r2, r3, #4
 8031690:	681b      	ldr	r3, [r3, #0]
 8031692:	9203      	str	r2, [sp, #12]
 8031694:	2b00      	cmp	r3, #0
 8031696:	bfb8      	it	lt
 8031698:	f04f 33ff 	movlt.w	r3, #4294967295
 803169c:	3402      	adds	r4, #2
 803169e:	9305      	str	r3, [sp, #20]
 80316a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 803176c <_svfiprintf_r+0x1fc>
 80316a4:	7821      	ldrb	r1, [r4, #0]
 80316a6:	2203      	movs	r2, #3
 80316a8:	4650      	mov	r0, sl
 80316aa:	f7ee fe21 	bl	80202f0 <memchr>
 80316ae:	b140      	cbz	r0, 80316c2 <_svfiprintf_r+0x152>
 80316b0:	2340      	movs	r3, #64	; 0x40
 80316b2:	eba0 000a 	sub.w	r0, r0, sl
 80316b6:	fa03 f000 	lsl.w	r0, r3, r0
 80316ba:	9b04      	ldr	r3, [sp, #16]
 80316bc:	4303      	orrs	r3, r0
 80316be:	3401      	adds	r4, #1
 80316c0:	9304      	str	r3, [sp, #16]
 80316c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80316c6:	4826      	ldr	r0, [pc, #152]	; (8031760 <_svfiprintf_r+0x1f0>)
 80316c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80316cc:	2206      	movs	r2, #6
 80316ce:	f7ee fe0f 	bl	80202f0 <memchr>
 80316d2:	2800      	cmp	r0, #0
 80316d4:	d038      	beq.n	8031748 <_svfiprintf_r+0x1d8>
 80316d6:	4b23      	ldr	r3, [pc, #140]	; (8031764 <_svfiprintf_r+0x1f4>)
 80316d8:	bb1b      	cbnz	r3, 8031722 <_svfiprintf_r+0x1b2>
 80316da:	9b03      	ldr	r3, [sp, #12]
 80316dc:	3307      	adds	r3, #7
 80316de:	f023 0307 	bic.w	r3, r3, #7
 80316e2:	3308      	adds	r3, #8
 80316e4:	9303      	str	r3, [sp, #12]
 80316e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80316e8:	4433      	add	r3, r6
 80316ea:	9309      	str	r3, [sp, #36]	; 0x24
 80316ec:	e767      	b.n	80315be <_svfiprintf_r+0x4e>
 80316ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80316f2:	460c      	mov	r4, r1
 80316f4:	2001      	movs	r0, #1
 80316f6:	e7a5      	b.n	8031644 <_svfiprintf_r+0xd4>
 80316f8:	2300      	movs	r3, #0
 80316fa:	3401      	adds	r4, #1
 80316fc:	9305      	str	r3, [sp, #20]
 80316fe:	4619      	mov	r1, r3
 8031700:	f04f 0c0a 	mov.w	ip, #10
 8031704:	4620      	mov	r0, r4
 8031706:	f810 2b01 	ldrb.w	r2, [r0], #1
 803170a:	3a30      	subs	r2, #48	; 0x30
 803170c:	2a09      	cmp	r2, #9
 803170e:	d903      	bls.n	8031718 <_svfiprintf_r+0x1a8>
 8031710:	2b00      	cmp	r3, #0
 8031712:	d0c5      	beq.n	80316a0 <_svfiprintf_r+0x130>
 8031714:	9105      	str	r1, [sp, #20]
 8031716:	e7c3      	b.n	80316a0 <_svfiprintf_r+0x130>
 8031718:	fb0c 2101 	mla	r1, ip, r1, r2
 803171c:	4604      	mov	r4, r0
 803171e:	2301      	movs	r3, #1
 8031720:	e7f0      	b.n	8031704 <_svfiprintf_r+0x194>
 8031722:	ab03      	add	r3, sp, #12
 8031724:	9300      	str	r3, [sp, #0]
 8031726:	462a      	mov	r2, r5
 8031728:	4b0f      	ldr	r3, [pc, #60]	; (8031768 <_svfiprintf_r+0x1f8>)
 803172a:	a904      	add	r1, sp, #16
 803172c:	4638      	mov	r0, r7
 803172e:	f3af 8000 	nop.w
 8031732:	1c42      	adds	r2, r0, #1
 8031734:	4606      	mov	r6, r0
 8031736:	d1d6      	bne.n	80316e6 <_svfiprintf_r+0x176>
 8031738:	89ab      	ldrh	r3, [r5, #12]
 803173a:	065b      	lsls	r3, r3, #25
 803173c:	f53f af2c 	bmi.w	8031598 <_svfiprintf_r+0x28>
 8031740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8031742:	b01d      	add	sp, #116	; 0x74
 8031744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031748:	ab03      	add	r3, sp, #12
 803174a:	9300      	str	r3, [sp, #0]
 803174c:	462a      	mov	r2, r5
 803174e:	4b06      	ldr	r3, [pc, #24]	; (8031768 <_svfiprintf_r+0x1f8>)
 8031750:	a904      	add	r1, sp, #16
 8031752:	4638      	mov	r0, r7
 8031754:	f000 f9d4 	bl	8031b00 <_printf_i>
 8031758:	e7eb      	b.n	8031732 <_svfiprintf_r+0x1c2>
 803175a:	bf00      	nop
 803175c:	080334a0 	.word	0x080334a0
 8031760:	080334aa 	.word	0x080334aa
 8031764:	00000000 	.word	0x00000000
 8031768:	080314b9 	.word	0x080314b9
 803176c:	080334a6 	.word	0x080334a6

08031770 <__sfputc_r>:
 8031770:	6893      	ldr	r3, [r2, #8]
 8031772:	3b01      	subs	r3, #1
 8031774:	2b00      	cmp	r3, #0
 8031776:	b410      	push	{r4}
 8031778:	6093      	str	r3, [r2, #8]
 803177a:	da08      	bge.n	803178e <__sfputc_r+0x1e>
 803177c:	6994      	ldr	r4, [r2, #24]
 803177e:	42a3      	cmp	r3, r4
 8031780:	db01      	blt.n	8031786 <__sfputc_r+0x16>
 8031782:	290a      	cmp	r1, #10
 8031784:	d103      	bne.n	803178e <__sfputc_r+0x1e>
 8031786:	f85d 4b04 	ldr.w	r4, [sp], #4
 803178a:	f7ff bba9 	b.w	8030ee0 <__swbuf_r>
 803178e:	6813      	ldr	r3, [r2, #0]
 8031790:	1c58      	adds	r0, r3, #1
 8031792:	6010      	str	r0, [r2, #0]
 8031794:	7019      	strb	r1, [r3, #0]
 8031796:	4608      	mov	r0, r1
 8031798:	f85d 4b04 	ldr.w	r4, [sp], #4
 803179c:	4770      	bx	lr

0803179e <__sfputs_r>:
 803179e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80317a0:	4606      	mov	r6, r0
 80317a2:	460f      	mov	r7, r1
 80317a4:	4614      	mov	r4, r2
 80317a6:	18d5      	adds	r5, r2, r3
 80317a8:	42ac      	cmp	r4, r5
 80317aa:	d101      	bne.n	80317b0 <__sfputs_r+0x12>
 80317ac:	2000      	movs	r0, #0
 80317ae:	e007      	b.n	80317c0 <__sfputs_r+0x22>
 80317b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80317b4:	463a      	mov	r2, r7
 80317b6:	4630      	mov	r0, r6
 80317b8:	f7ff ffda 	bl	8031770 <__sfputc_r>
 80317bc:	1c43      	adds	r3, r0, #1
 80317be:	d1f3      	bne.n	80317a8 <__sfputs_r+0xa>
 80317c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080317c4 <_vfiprintf_r>:
 80317c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80317c8:	460d      	mov	r5, r1
 80317ca:	b09d      	sub	sp, #116	; 0x74
 80317cc:	4614      	mov	r4, r2
 80317ce:	4698      	mov	r8, r3
 80317d0:	4606      	mov	r6, r0
 80317d2:	b118      	cbz	r0, 80317dc <_vfiprintf_r+0x18>
 80317d4:	6983      	ldr	r3, [r0, #24]
 80317d6:	b90b      	cbnz	r3, 80317dc <_vfiprintf_r+0x18>
 80317d8:	f7ff fd5c 	bl	8031294 <__sinit>
 80317dc:	4b89      	ldr	r3, [pc, #548]	; (8031a04 <_vfiprintf_r+0x240>)
 80317de:	429d      	cmp	r5, r3
 80317e0:	d11b      	bne.n	803181a <_vfiprintf_r+0x56>
 80317e2:	6875      	ldr	r5, [r6, #4]
 80317e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80317e6:	07d9      	lsls	r1, r3, #31
 80317e8:	d405      	bmi.n	80317f6 <_vfiprintf_r+0x32>
 80317ea:	89ab      	ldrh	r3, [r5, #12]
 80317ec:	059a      	lsls	r2, r3, #22
 80317ee:	d402      	bmi.n	80317f6 <_vfiprintf_r+0x32>
 80317f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80317f2:	f7ff fded 	bl	80313d0 <__retarget_lock_acquire_recursive>
 80317f6:	89ab      	ldrh	r3, [r5, #12]
 80317f8:	071b      	lsls	r3, r3, #28
 80317fa:	d501      	bpl.n	8031800 <_vfiprintf_r+0x3c>
 80317fc:	692b      	ldr	r3, [r5, #16]
 80317fe:	b9eb      	cbnz	r3, 803183c <_vfiprintf_r+0x78>
 8031800:	4629      	mov	r1, r5
 8031802:	4630      	mov	r0, r6
 8031804:	f7ff fbbe 	bl	8030f84 <__swsetup_r>
 8031808:	b1c0      	cbz	r0, 803183c <_vfiprintf_r+0x78>
 803180a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803180c:	07dc      	lsls	r4, r3, #31
 803180e:	d50e      	bpl.n	803182e <_vfiprintf_r+0x6a>
 8031810:	f04f 30ff 	mov.w	r0, #4294967295
 8031814:	b01d      	add	sp, #116	; 0x74
 8031816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803181a:	4b7b      	ldr	r3, [pc, #492]	; (8031a08 <_vfiprintf_r+0x244>)
 803181c:	429d      	cmp	r5, r3
 803181e:	d101      	bne.n	8031824 <_vfiprintf_r+0x60>
 8031820:	68b5      	ldr	r5, [r6, #8]
 8031822:	e7df      	b.n	80317e4 <_vfiprintf_r+0x20>
 8031824:	4b79      	ldr	r3, [pc, #484]	; (8031a0c <_vfiprintf_r+0x248>)
 8031826:	429d      	cmp	r5, r3
 8031828:	bf08      	it	eq
 803182a:	68f5      	ldreq	r5, [r6, #12]
 803182c:	e7da      	b.n	80317e4 <_vfiprintf_r+0x20>
 803182e:	89ab      	ldrh	r3, [r5, #12]
 8031830:	0598      	lsls	r0, r3, #22
 8031832:	d4ed      	bmi.n	8031810 <_vfiprintf_r+0x4c>
 8031834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031836:	f7ff fdcc 	bl	80313d2 <__retarget_lock_release_recursive>
 803183a:	e7e9      	b.n	8031810 <_vfiprintf_r+0x4c>
 803183c:	2300      	movs	r3, #0
 803183e:	9309      	str	r3, [sp, #36]	; 0x24
 8031840:	2320      	movs	r3, #32
 8031842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8031846:	f8cd 800c 	str.w	r8, [sp, #12]
 803184a:	2330      	movs	r3, #48	; 0x30
 803184c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8031a10 <_vfiprintf_r+0x24c>
 8031850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8031854:	f04f 0901 	mov.w	r9, #1
 8031858:	4623      	mov	r3, r4
 803185a:	469a      	mov	sl, r3
 803185c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031860:	b10a      	cbz	r2, 8031866 <_vfiprintf_r+0xa2>
 8031862:	2a25      	cmp	r2, #37	; 0x25
 8031864:	d1f9      	bne.n	803185a <_vfiprintf_r+0x96>
 8031866:	ebba 0b04 	subs.w	fp, sl, r4
 803186a:	d00b      	beq.n	8031884 <_vfiprintf_r+0xc0>
 803186c:	465b      	mov	r3, fp
 803186e:	4622      	mov	r2, r4
 8031870:	4629      	mov	r1, r5
 8031872:	4630      	mov	r0, r6
 8031874:	f7ff ff93 	bl	803179e <__sfputs_r>
 8031878:	3001      	adds	r0, #1
 803187a:	f000 80aa 	beq.w	80319d2 <_vfiprintf_r+0x20e>
 803187e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8031880:	445a      	add	r2, fp
 8031882:	9209      	str	r2, [sp, #36]	; 0x24
 8031884:	f89a 3000 	ldrb.w	r3, [sl]
 8031888:	2b00      	cmp	r3, #0
 803188a:	f000 80a2 	beq.w	80319d2 <_vfiprintf_r+0x20e>
 803188e:	2300      	movs	r3, #0
 8031890:	f04f 32ff 	mov.w	r2, #4294967295
 8031894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8031898:	f10a 0a01 	add.w	sl, sl, #1
 803189c:	9304      	str	r3, [sp, #16]
 803189e:	9307      	str	r3, [sp, #28]
 80318a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80318a4:	931a      	str	r3, [sp, #104]	; 0x68
 80318a6:	4654      	mov	r4, sl
 80318a8:	2205      	movs	r2, #5
 80318aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80318ae:	4858      	ldr	r0, [pc, #352]	; (8031a10 <_vfiprintf_r+0x24c>)
 80318b0:	f7ee fd1e 	bl	80202f0 <memchr>
 80318b4:	9a04      	ldr	r2, [sp, #16]
 80318b6:	b9d8      	cbnz	r0, 80318f0 <_vfiprintf_r+0x12c>
 80318b8:	06d1      	lsls	r1, r2, #27
 80318ba:	bf44      	itt	mi
 80318bc:	2320      	movmi	r3, #32
 80318be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80318c2:	0713      	lsls	r3, r2, #28
 80318c4:	bf44      	itt	mi
 80318c6:	232b      	movmi	r3, #43	; 0x2b
 80318c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80318cc:	f89a 3000 	ldrb.w	r3, [sl]
 80318d0:	2b2a      	cmp	r3, #42	; 0x2a
 80318d2:	d015      	beq.n	8031900 <_vfiprintf_r+0x13c>
 80318d4:	9a07      	ldr	r2, [sp, #28]
 80318d6:	4654      	mov	r4, sl
 80318d8:	2000      	movs	r0, #0
 80318da:	f04f 0c0a 	mov.w	ip, #10
 80318de:	4621      	mov	r1, r4
 80318e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80318e4:	3b30      	subs	r3, #48	; 0x30
 80318e6:	2b09      	cmp	r3, #9
 80318e8:	d94e      	bls.n	8031988 <_vfiprintf_r+0x1c4>
 80318ea:	b1b0      	cbz	r0, 803191a <_vfiprintf_r+0x156>
 80318ec:	9207      	str	r2, [sp, #28]
 80318ee:	e014      	b.n	803191a <_vfiprintf_r+0x156>
 80318f0:	eba0 0308 	sub.w	r3, r0, r8
 80318f4:	fa09 f303 	lsl.w	r3, r9, r3
 80318f8:	4313      	orrs	r3, r2
 80318fa:	9304      	str	r3, [sp, #16]
 80318fc:	46a2      	mov	sl, r4
 80318fe:	e7d2      	b.n	80318a6 <_vfiprintf_r+0xe2>
 8031900:	9b03      	ldr	r3, [sp, #12]
 8031902:	1d19      	adds	r1, r3, #4
 8031904:	681b      	ldr	r3, [r3, #0]
 8031906:	9103      	str	r1, [sp, #12]
 8031908:	2b00      	cmp	r3, #0
 803190a:	bfbb      	ittet	lt
 803190c:	425b      	neglt	r3, r3
 803190e:	f042 0202 	orrlt.w	r2, r2, #2
 8031912:	9307      	strge	r3, [sp, #28]
 8031914:	9307      	strlt	r3, [sp, #28]
 8031916:	bfb8      	it	lt
 8031918:	9204      	strlt	r2, [sp, #16]
 803191a:	7823      	ldrb	r3, [r4, #0]
 803191c:	2b2e      	cmp	r3, #46	; 0x2e
 803191e:	d10c      	bne.n	803193a <_vfiprintf_r+0x176>
 8031920:	7863      	ldrb	r3, [r4, #1]
 8031922:	2b2a      	cmp	r3, #42	; 0x2a
 8031924:	d135      	bne.n	8031992 <_vfiprintf_r+0x1ce>
 8031926:	9b03      	ldr	r3, [sp, #12]
 8031928:	1d1a      	adds	r2, r3, #4
 803192a:	681b      	ldr	r3, [r3, #0]
 803192c:	9203      	str	r2, [sp, #12]
 803192e:	2b00      	cmp	r3, #0
 8031930:	bfb8      	it	lt
 8031932:	f04f 33ff 	movlt.w	r3, #4294967295
 8031936:	3402      	adds	r4, #2
 8031938:	9305      	str	r3, [sp, #20]
 803193a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8031a20 <_vfiprintf_r+0x25c>
 803193e:	7821      	ldrb	r1, [r4, #0]
 8031940:	2203      	movs	r2, #3
 8031942:	4650      	mov	r0, sl
 8031944:	f7ee fcd4 	bl	80202f0 <memchr>
 8031948:	b140      	cbz	r0, 803195c <_vfiprintf_r+0x198>
 803194a:	2340      	movs	r3, #64	; 0x40
 803194c:	eba0 000a 	sub.w	r0, r0, sl
 8031950:	fa03 f000 	lsl.w	r0, r3, r0
 8031954:	9b04      	ldr	r3, [sp, #16]
 8031956:	4303      	orrs	r3, r0
 8031958:	3401      	adds	r4, #1
 803195a:	9304      	str	r3, [sp, #16]
 803195c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031960:	482c      	ldr	r0, [pc, #176]	; (8031a14 <_vfiprintf_r+0x250>)
 8031962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8031966:	2206      	movs	r2, #6
 8031968:	f7ee fcc2 	bl	80202f0 <memchr>
 803196c:	2800      	cmp	r0, #0
 803196e:	d03f      	beq.n	80319f0 <_vfiprintf_r+0x22c>
 8031970:	4b29      	ldr	r3, [pc, #164]	; (8031a18 <_vfiprintf_r+0x254>)
 8031972:	bb1b      	cbnz	r3, 80319bc <_vfiprintf_r+0x1f8>
 8031974:	9b03      	ldr	r3, [sp, #12]
 8031976:	3307      	adds	r3, #7
 8031978:	f023 0307 	bic.w	r3, r3, #7
 803197c:	3308      	adds	r3, #8
 803197e:	9303      	str	r3, [sp, #12]
 8031980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8031982:	443b      	add	r3, r7
 8031984:	9309      	str	r3, [sp, #36]	; 0x24
 8031986:	e767      	b.n	8031858 <_vfiprintf_r+0x94>
 8031988:	fb0c 3202 	mla	r2, ip, r2, r3
 803198c:	460c      	mov	r4, r1
 803198e:	2001      	movs	r0, #1
 8031990:	e7a5      	b.n	80318de <_vfiprintf_r+0x11a>
 8031992:	2300      	movs	r3, #0
 8031994:	3401      	adds	r4, #1
 8031996:	9305      	str	r3, [sp, #20]
 8031998:	4619      	mov	r1, r3
 803199a:	f04f 0c0a 	mov.w	ip, #10
 803199e:	4620      	mov	r0, r4
 80319a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80319a4:	3a30      	subs	r2, #48	; 0x30
 80319a6:	2a09      	cmp	r2, #9
 80319a8:	d903      	bls.n	80319b2 <_vfiprintf_r+0x1ee>
 80319aa:	2b00      	cmp	r3, #0
 80319ac:	d0c5      	beq.n	803193a <_vfiprintf_r+0x176>
 80319ae:	9105      	str	r1, [sp, #20]
 80319b0:	e7c3      	b.n	803193a <_vfiprintf_r+0x176>
 80319b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80319b6:	4604      	mov	r4, r0
 80319b8:	2301      	movs	r3, #1
 80319ba:	e7f0      	b.n	803199e <_vfiprintf_r+0x1da>
 80319bc:	ab03      	add	r3, sp, #12
 80319be:	9300      	str	r3, [sp, #0]
 80319c0:	462a      	mov	r2, r5
 80319c2:	4b16      	ldr	r3, [pc, #88]	; (8031a1c <_vfiprintf_r+0x258>)
 80319c4:	a904      	add	r1, sp, #16
 80319c6:	4630      	mov	r0, r6
 80319c8:	f3af 8000 	nop.w
 80319cc:	4607      	mov	r7, r0
 80319ce:	1c78      	adds	r0, r7, #1
 80319d0:	d1d6      	bne.n	8031980 <_vfiprintf_r+0x1bc>
 80319d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80319d4:	07d9      	lsls	r1, r3, #31
 80319d6:	d405      	bmi.n	80319e4 <_vfiprintf_r+0x220>
 80319d8:	89ab      	ldrh	r3, [r5, #12]
 80319da:	059a      	lsls	r2, r3, #22
 80319dc:	d402      	bmi.n	80319e4 <_vfiprintf_r+0x220>
 80319de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80319e0:	f7ff fcf7 	bl	80313d2 <__retarget_lock_release_recursive>
 80319e4:	89ab      	ldrh	r3, [r5, #12]
 80319e6:	065b      	lsls	r3, r3, #25
 80319e8:	f53f af12 	bmi.w	8031810 <_vfiprintf_r+0x4c>
 80319ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80319ee:	e711      	b.n	8031814 <_vfiprintf_r+0x50>
 80319f0:	ab03      	add	r3, sp, #12
 80319f2:	9300      	str	r3, [sp, #0]
 80319f4:	462a      	mov	r2, r5
 80319f6:	4b09      	ldr	r3, [pc, #36]	; (8031a1c <_vfiprintf_r+0x258>)
 80319f8:	a904      	add	r1, sp, #16
 80319fa:	4630      	mov	r0, r6
 80319fc:	f000 f880 	bl	8031b00 <_printf_i>
 8031a00:	e7e4      	b.n	80319cc <_vfiprintf_r+0x208>
 8031a02:	bf00      	nop
 8031a04:	08033460 	.word	0x08033460
 8031a08:	08033480 	.word	0x08033480
 8031a0c:	08033440 	.word	0x08033440
 8031a10:	080334a0 	.word	0x080334a0
 8031a14:	080334aa 	.word	0x080334aa
 8031a18:	00000000 	.word	0x00000000
 8031a1c:	0803179f 	.word	0x0803179f
 8031a20:	080334a6 	.word	0x080334a6

08031a24 <_printf_common>:
 8031a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8031a28:	4616      	mov	r6, r2
 8031a2a:	4699      	mov	r9, r3
 8031a2c:	688a      	ldr	r2, [r1, #8]
 8031a2e:	690b      	ldr	r3, [r1, #16]
 8031a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8031a34:	4293      	cmp	r3, r2
 8031a36:	bfb8      	it	lt
 8031a38:	4613      	movlt	r3, r2
 8031a3a:	6033      	str	r3, [r6, #0]
 8031a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8031a40:	4607      	mov	r7, r0
 8031a42:	460c      	mov	r4, r1
 8031a44:	b10a      	cbz	r2, 8031a4a <_printf_common+0x26>
 8031a46:	3301      	adds	r3, #1
 8031a48:	6033      	str	r3, [r6, #0]
 8031a4a:	6823      	ldr	r3, [r4, #0]
 8031a4c:	0699      	lsls	r1, r3, #26
 8031a4e:	bf42      	ittt	mi
 8031a50:	6833      	ldrmi	r3, [r6, #0]
 8031a52:	3302      	addmi	r3, #2
 8031a54:	6033      	strmi	r3, [r6, #0]
 8031a56:	6825      	ldr	r5, [r4, #0]
 8031a58:	f015 0506 	ands.w	r5, r5, #6
 8031a5c:	d106      	bne.n	8031a6c <_printf_common+0x48>
 8031a5e:	f104 0a19 	add.w	sl, r4, #25
 8031a62:	68e3      	ldr	r3, [r4, #12]
 8031a64:	6832      	ldr	r2, [r6, #0]
 8031a66:	1a9b      	subs	r3, r3, r2
 8031a68:	42ab      	cmp	r3, r5
 8031a6a:	dc26      	bgt.n	8031aba <_printf_common+0x96>
 8031a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8031a70:	1e13      	subs	r3, r2, #0
 8031a72:	6822      	ldr	r2, [r4, #0]
 8031a74:	bf18      	it	ne
 8031a76:	2301      	movne	r3, #1
 8031a78:	0692      	lsls	r2, r2, #26
 8031a7a:	d42b      	bmi.n	8031ad4 <_printf_common+0xb0>
 8031a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8031a80:	4649      	mov	r1, r9
 8031a82:	4638      	mov	r0, r7
 8031a84:	47c0      	blx	r8
 8031a86:	3001      	adds	r0, #1
 8031a88:	d01e      	beq.n	8031ac8 <_printf_common+0xa4>
 8031a8a:	6823      	ldr	r3, [r4, #0]
 8031a8c:	68e5      	ldr	r5, [r4, #12]
 8031a8e:	6832      	ldr	r2, [r6, #0]
 8031a90:	f003 0306 	and.w	r3, r3, #6
 8031a94:	2b04      	cmp	r3, #4
 8031a96:	bf08      	it	eq
 8031a98:	1aad      	subeq	r5, r5, r2
 8031a9a:	68a3      	ldr	r3, [r4, #8]
 8031a9c:	6922      	ldr	r2, [r4, #16]
 8031a9e:	bf0c      	ite	eq
 8031aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8031aa4:	2500      	movne	r5, #0
 8031aa6:	4293      	cmp	r3, r2
 8031aa8:	bfc4      	itt	gt
 8031aaa:	1a9b      	subgt	r3, r3, r2
 8031aac:	18ed      	addgt	r5, r5, r3
 8031aae:	2600      	movs	r6, #0
 8031ab0:	341a      	adds	r4, #26
 8031ab2:	42b5      	cmp	r5, r6
 8031ab4:	d11a      	bne.n	8031aec <_printf_common+0xc8>
 8031ab6:	2000      	movs	r0, #0
 8031ab8:	e008      	b.n	8031acc <_printf_common+0xa8>
 8031aba:	2301      	movs	r3, #1
 8031abc:	4652      	mov	r2, sl
 8031abe:	4649      	mov	r1, r9
 8031ac0:	4638      	mov	r0, r7
 8031ac2:	47c0      	blx	r8
 8031ac4:	3001      	adds	r0, #1
 8031ac6:	d103      	bne.n	8031ad0 <_printf_common+0xac>
 8031ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8031acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031ad0:	3501      	adds	r5, #1
 8031ad2:	e7c6      	b.n	8031a62 <_printf_common+0x3e>
 8031ad4:	18e1      	adds	r1, r4, r3
 8031ad6:	1c5a      	adds	r2, r3, #1
 8031ad8:	2030      	movs	r0, #48	; 0x30
 8031ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8031ade:	4422      	add	r2, r4
 8031ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8031ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8031ae8:	3302      	adds	r3, #2
 8031aea:	e7c7      	b.n	8031a7c <_printf_common+0x58>
 8031aec:	2301      	movs	r3, #1
 8031aee:	4622      	mov	r2, r4
 8031af0:	4649      	mov	r1, r9
 8031af2:	4638      	mov	r0, r7
 8031af4:	47c0      	blx	r8
 8031af6:	3001      	adds	r0, #1
 8031af8:	d0e6      	beq.n	8031ac8 <_printf_common+0xa4>
 8031afa:	3601      	adds	r6, #1
 8031afc:	e7d9      	b.n	8031ab2 <_printf_common+0x8e>
	...

08031b00 <_printf_i>:
 8031b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8031b04:	7e0f      	ldrb	r7, [r1, #24]
 8031b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8031b08:	2f78      	cmp	r7, #120	; 0x78
 8031b0a:	4691      	mov	r9, r2
 8031b0c:	4680      	mov	r8, r0
 8031b0e:	460c      	mov	r4, r1
 8031b10:	469a      	mov	sl, r3
 8031b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8031b16:	d807      	bhi.n	8031b28 <_printf_i+0x28>
 8031b18:	2f62      	cmp	r7, #98	; 0x62
 8031b1a:	d80a      	bhi.n	8031b32 <_printf_i+0x32>
 8031b1c:	2f00      	cmp	r7, #0
 8031b1e:	f000 80d8 	beq.w	8031cd2 <_printf_i+0x1d2>
 8031b22:	2f58      	cmp	r7, #88	; 0x58
 8031b24:	f000 80a3 	beq.w	8031c6e <_printf_i+0x16e>
 8031b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8031b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8031b30:	e03a      	b.n	8031ba8 <_printf_i+0xa8>
 8031b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8031b36:	2b15      	cmp	r3, #21
 8031b38:	d8f6      	bhi.n	8031b28 <_printf_i+0x28>
 8031b3a:	a101      	add	r1, pc, #4	; (adr r1, 8031b40 <_printf_i+0x40>)
 8031b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8031b40:	08031b99 	.word	0x08031b99
 8031b44:	08031bad 	.word	0x08031bad
 8031b48:	08031b29 	.word	0x08031b29
 8031b4c:	08031b29 	.word	0x08031b29
 8031b50:	08031b29 	.word	0x08031b29
 8031b54:	08031b29 	.word	0x08031b29
 8031b58:	08031bad 	.word	0x08031bad
 8031b5c:	08031b29 	.word	0x08031b29
 8031b60:	08031b29 	.word	0x08031b29
 8031b64:	08031b29 	.word	0x08031b29
 8031b68:	08031b29 	.word	0x08031b29
 8031b6c:	08031cb9 	.word	0x08031cb9
 8031b70:	08031bdd 	.word	0x08031bdd
 8031b74:	08031c9b 	.word	0x08031c9b
 8031b78:	08031b29 	.word	0x08031b29
 8031b7c:	08031b29 	.word	0x08031b29
 8031b80:	08031cdb 	.word	0x08031cdb
 8031b84:	08031b29 	.word	0x08031b29
 8031b88:	08031bdd 	.word	0x08031bdd
 8031b8c:	08031b29 	.word	0x08031b29
 8031b90:	08031b29 	.word	0x08031b29
 8031b94:	08031ca3 	.word	0x08031ca3
 8031b98:	682b      	ldr	r3, [r5, #0]
 8031b9a:	1d1a      	adds	r2, r3, #4
 8031b9c:	681b      	ldr	r3, [r3, #0]
 8031b9e:	602a      	str	r2, [r5, #0]
 8031ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8031ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8031ba8:	2301      	movs	r3, #1
 8031baa:	e0a3      	b.n	8031cf4 <_printf_i+0x1f4>
 8031bac:	6820      	ldr	r0, [r4, #0]
 8031bae:	6829      	ldr	r1, [r5, #0]
 8031bb0:	0606      	lsls	r6, r0, #24
 8031bb2:	f101 0304 	add.w	r3, r1, #4
 8031bb6:	d50a      	bpl.n	8031bce <_printf_i+0xce>
 8031bb8:	680e      	ldr	r6, [r1, #0]
 8031bba:	602b      	str	r3, [r5, #0]
 8031bbc:	2e00      	cmp	r6, #0
 8031bbe:	da03      	bge.n	8031bc8 <_printf_i+0xc8>
 8031bc0:	232d      	movs	r3, #45	; 0x2d
 8031bc2:	4276      	negs	r6, r6
 8031bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8031bc8:	485e      	ldr	r0, [pc, #376]	; (8031d44 <_printf_i+0x244>)
 8031bca:	230a      	movs	r3, #10
 8031bcc:	e019      	b.n	8031c02 <_printf_i+0x102>
 8031bce:	680e      	ldr	r6, [r1, #0]
 8031bd0:	602b      	str	r3, [r5, #0]
 8031bd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8031bd6:	bf18      	it	ne
 8031bd8:	b236      	sxthne	r6, r6
 8031bda:	e7ef      	b.n	8031bbc <_printf_i+0xbc>
 8031bdc:	682b      	ldr	r3, [r5, #0]
 8031bde:	6820      	ldr	r0, [r4, #0]
 8031be0:	1d19      	adds	r1, r3, #4
 8031be2:	6029      	str	r1, [r5, #0]
 8031be4:	0601      	lsls	r1, r0, #24
 8031be6:	d501      	bpl.n	8031bec <_printf_i+0xec>
 8031be8:	681e      	ldr	r6, [r3, #0]
 8031bea:	e002      	b.n	8031bf2 <_printf_i+0xf2>
 8031bec:	0646      	lsls	r6, r0, #25
 8031bee:	d5fb      	bpl.n	8031be8 <_printf_i+0xe8>
 8031bf0:	881e      	ldrh	r6, [r3, #0]
 8031bf2:	4854      	ldr	r0, [pc, #336]	; (8031d44 <_printf_i+0x244>)
 8031bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8031bf6:	bf0c      	ite	eq
 8031bf8:	2308      	moveq	r3, #8
 8031bfa:	230a      	movne	r3, #10
 8031bfc:	2100      	movs	r1, #0
 8031bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8031c02:	6865      	ldr	r5, [r4, #4]
 8031c04:	60a5      	str	r5, [r4, #8]
 8031c06:	2d00      	cmp	r5, #0
 8031c08:	bfa2      	ittt	ge
 8031c0a:	6821      	ldrge	r1, [r4, #0]
 8031c0c:	f021 0104 	bicge.w	r1, r1, #4
 8031c10:	6021      	strge	r1, [r4, #0]
 8031c12:	b90e      	cbnz	r6, 8031c18 <_printf_i+0x118>
 8031c14:	2d00      	cmp	r5, #0
 8031c16:	d04d      	beq.n	8031cb4 <_printf_i+0x1b4>
 8031c18:	4615      	mov	r5, r2
 8031c1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8031c1e:	fb03 6711 	mls	r7, r3, r1, r6
 8031c22:	5dc7      	ldrb	r7, [r0, r7]
 8031c24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8031c28:	4637      	mov	r7, r6
 8031c2a:	42bb      	cmp	r3, r7
 8031c2c:	460e      	mov	r6, r1
 8031c2e:	d9f4      	bls.n	8031c1a <_printf_i+0x11a>
 8031c30:	2b08      	cmp	r3, #8
 8031c32:	d10b      	bne.n	8031c4c <_printf_i+0x14c>
 8031c34:	6823      	ldr	r3, [r4, #0]
 8031c36:	07de      	lsls	r6, r3, #31
 8031c38:	d508      	bpl.n	8031c4c <_printf_i+0x14c>
 8031c3a:	6923      	ldr	r3, [r4, #16]
 8031c3c:	6861      	ldr	r1, [r4, #4]
 8031c3e:	4299      	cmp	r1, r3
 8031c40:	bfde      	ittt	le
 8031c42:	2330      	movle	r3, #48	; 0x30
 8031c44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8031c48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8031c4c:	1b52      	subs	r2, r2, r5
 8031c4e:	6122      	str	r2, [r4, #16]
 8031c50:	f8cd a000 	str.w	sl, [sp]
 8031c54:	464b      	mov	r3, r9
 8031c56:	aa03      	add	r2, sp, #12
 8031c58:	4621      	mov	r1, r4
 8031c5a:	4640      	mov	r0, r8
 8031c5c:	f7ff fee2 	bl	8031a24 <_printf_common>
 8031c60:	3001      	adds	r0, #1
 8031c62:	d14c      	bne.n	8031cfe <_printf_i+0x1fe>
 8031c64:	f04f 30ff 	mov.w	r0, #4294967295
 8031c68:	b004      	add	sp, #16
 8031c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031c6e:	4835      	ldr	r0, [pc, #212]	; (8031d44 <_printf_i+0x244>)
 8031c70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8031c74:	6829      	ldr	r1, [r5, #0]
 8031c76:	6823      	ldr	r3, [r4, #0]
 8031c78:	f851 6b04 	ldr.w	r6, [r1], #4
 8031c7c:	6029      	str	r1, [r5, #0]
 8031c7e:	061d      	lsls	r5, r3, #24
 8031c80:	d514      	bpl.n	8031cac <_printf_i+0x1ac>
 8031c82:	07df      	lsls	r7, r3, #31
 8031c84:	bf44      	itt	mi
 8031c86:	f043 0320 	orrmi.w	r3, r3, #32
 8031c8a:	6023      	strmi	r3, [r4, #0]
 8031c8c:	b91e      	cbnz	r6, 8031c96 <_printf_i+0x196>
 8031c8e:	6823      	ldr	r3, [r4, #0]
 8031c90:	f023 0320 	bic.w	r3, r3, #32
 8031c94:	6023      	str	r3, [r4, #0]
 8031c96:	2310      	movs	r3, #16
 8031c98:	e7b0      	b.n	8031bfc <_printf_i+0xfc>
 8031c9a:	6823      	ldr	r3, [r4, #0]
 8031c9c:	f043 0320 	orr.w	r3, r3, #32
 8031ca0:	6023      	str	r3, [r4, #0]
 8031ca2:	2378      	movs	r3, #120	; 0x78
 8031ca4:	4828      	ldr	r0, [pc, #160]	; (8031d48 <_printf_i+0x248>)
 8031ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8031caa:	e7e3      	b.n	8031c74 <_printf_i+0x174>
 8031cac:	0659      	lsls	r1, r3, #25
 8031cae:	bf48      	it	mi
 8031cb0:	b2b6      	uxthmi	r6, r6
 8031cb2:	e7e6      	b.n	8031c82 <_printf_i+0x182>
 8031cb4:	4615      	mov	r5, r2
 8031cb6:	e7bb      	b.n	8031c30 <_printf_i+0x130>
 8031cb8:	682b      	ldr	r3, [r5, #0]
 8031cba:	6826      	ldr	r6, [r4, #0]
 8031cbc:	6961      	ldr	r1, [r4, #20]
 8031cbe:	1d18      	adds	r0, r3, #4
 8031cc0:	6028      	str	r0, [r5, #0]
 8031cc2:	0635      	lsls	r5, r6, #24
 8031cc4:	681b      	ldr	r3, [r3, #0]
 8031cc6:	d501      	bpl.n	8031ccc <_printf_i+0x1cc>
 8031cc8:	6019      	str	r1, [r3, #0]
 8031cca:	e002      	b.n	8031cd2 <_printf_i+0x1d2>
 8031ccc:	0670      	lsls	r0, r6, #25
 8031cce:	d5fb      	bpl.n	8031cc8 <_printf_i+0x1c8>
 8031cd0:	8019      	strh	r1, [r3, #0]
 8031cd2:	2300      	movs	r3, #0
 8031cd4:	6123      	str	r3, [r4, #16]
 8031cd6:	4615      	mov	r5, r2
 8031cd8:	e7ba      	b.n	8031c50 <_printf_i+0x150>
 8031cda:	682b      	ldr	r3, [r5, #0]
 8031cdc:	1d1a      	adds	r2, r3, #4
 8031cde:	602a      	str	r2, [r5, #0]
 8031ce0:	681d      	ldr	r5, [r3, #0]
 8031ce2:	6862      	ldr	r2, [r4, #4]
 8031ce4:	2100      	movs	r1, #0
 8031ce6:	4628      	mov	r0, r5
 8031ce8:	f7ee fb02 	bl	80202f0 <memchr>
 8031cec:	b108      	cbz	r0, 8031cf2 <_printf_i+0x1f2>
 8031cee:	1b40      	subs	r0, r0, r5
 8031cf0:	6060      	str	r0, [r4, #4]
 8031cf2:	6863      	ldr	r3, [r4, #4]
 8031cf4:	6123      	str	r3, [r4, #16]
 8031cf6:	2300      	movs	r3, #0
 8031cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8031cfc:	e7a8      	b.n	8031c50 <_printf_i+0x150>
 8031cfe:	6923      	ldr	r3, [r4, #16]
 8031d00:	462a      	mov	r2, r5
 8031d02:	4649      	mov	r1, r9
 8031d04:	4640      	mov	r0, r8
 8031d06:	47d0      	blx	sl
 8031d08:	3001      	adds	r0, #1
 8031d0a:	d0ab      	beq.n	8031c64 <_printf_i+0x164>
 8031d0c:	6823      	ldr	r3, [r4, #0]
 8031d0e:	079b      	lsls	r3, r3, #30
 8031d10:	d413      	bmi.n	8031d3a <_printf_i+0x23a>
 8031d12:	68e0      	ldr	r0, [r4, #12]
 8031d14:	9b03      	ldr	r3, [sp, #12]
 8031d16:	4298      	cmp	r0, r3
 8031d18:	bfb8      	it	lt
 8031d1a:	4618      	movlt	r0, r3
 8031d1c:	e7a4      	b.n	8031c68 <_printf_i+0x168>
 8031d1e:	2301      	movs	r3, #1
 8031d20:	4632      	mov	r2, r6
 8031d22:	4649      	mov	r1, r9
 8031d24:	4640      	mov	r0, r8
 8031d26:	47d0      	blx	sl
 8031d28:	3001      	adds	r0, #1
 8031d2a:	d09b      	beq.n	8031c64 <_printf_i+0x164>
 8031d2c:	3501      	adds	r5, #1
 8031d2e:	68e3      	ldr	r3, [r4, #12]
 8031d30:	9903      	ldr	r1, [sp, #12]
 8031d32:	1a5b      	subs	r3, r3, r1
 8031d34:	42ab      	cmp	r3, r5
 8031d36:	dcf2      	bgt.n	8031d1e <_printf_i+0x21e>
 8031d38:	e7eb      	b.n	8031d12 <_printf_i+0x212>
 8031d3a:	2500      	movs	r5, #0
 8031d3c:	f104 0619 	add.w	r6, r4, #25
 8031d40:	e7f5      	b.n	8031d2e <_printf_i+0x22e>
 8031d42:	bf00      	nop
 8031d44:	080334b1 	.word	0x080334b1
 8031d48:	080334c2 	.word	0x080334c2

08031d4c <_putc_r>:
 8031d4c:	b570      	push	{r4, r5, r6, lr}
 8031d4e:	460d      	mov	r5, r1
 8031d50:	4614      	mov	r4, r2
 8031d52:	4606      	mov	r6, r0
 8031d54:	b118      	cbz	r0, 8031d5e <_putc_r+0x12>
 8031d56:	6983      	ldr	r3, [r0, #24]
 8031d58:	b90b      	cbnz	r3, 8031d5e <_putc_r+0x12>
 8031d5a:	f7ff fa9b 	bl	8031294 <__sinit>
 8031d5e:	4b1c      	ldr	r3, [pc, #112]	; (8031dd0 <_putc_r+0x84>)
 8031d60:	429c      	cmp	r4, r3
 8031d62:	d124      	bne.n	8031dae <_putc_r+0x62>
 8031d64:	6874      	ldr	r4, [r6, #4]
 8031d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031d68:	07d8      	lsls	r0, r3, #31
 8031d6a:	d405      	bmi.n	8031d78 <_putc_r+0x2c>
 8031d6c:	89a3      	ldrh	r3, [r4, #12]
 8031d6e:	0599      	lsls	r1, r3, #22
 8031d70:	d402      	bmi.n	8031d78 <_putc_r+0x2c>
 8031d72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8031d74:	f7ff fb2c 	bl	80313d0 <__retarget_lock_acquire_recursive>
 8031d78:	68a3      	ldr	r3, [r4, #8]
 8031d7a:	3b01      	subs	r3, #1
 8031d7c:	2b00      	cmp	r3, #0
 8031d7e:	60a3      	str	r3, [r4, #8]
 8031d80:	da05      	bge.n	8031d8e <_putc_r+0x42>
 8031d82:	69a2      	ldr	r2, [r4, #24]
 8031d84:	4293      	cmp	r3, r2
 8031d86:	db1c      	blt.n	8031dc2 <_putc_r+0x76>
 8031d88:	b2eb      	uxtb	r3, r5
 8031d8a:	2b0a      	cmp	r3, #10
 8031d8c:	d019      	beq.n	8031dc2 <_putc_r+0x76>
 8031d8e:	6823      	ldr	r3, [r4, #0]
 8031d90:	1c5a      	adds	r2, r3, #1
 8031d92:	6022      	str	r2, [r4, #0]
 8031d94:	701d      	strb	r5, [r3, #0]
 8031d96:	b2ed      	uxtb	r5, r5
 8031d98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031d9a:	07da      	lsls	r2, r3, #31
 8031d9c:	d405      	bmi.n	8031daa <_putc_r+0x5e>
 8031d9e:	89a3      	ldrh	r3, [r4, #12]
 8031da0:	059b      	lsls	r3, r3, #22
 8031da2:	d402      	bmi.n	8031daa <_putc_r+0x5e>
 8031da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8031da6:	f7ff fb14 	bl	80313d2 <__retarget_lock_release_recursive>
 8031daa:	4628      	mov	r0, r5
 8031dac:	bd70      	pop	{r4, r5, r6, pc}
 8031dae:	4b09      	ldr	r3, [pc, #36]	; (8031dd4 <_putc_r+0x88>)
 8031db0:	429c      	cmp	r4, r3
 8031db2:	d101      	bne.n	8031db8 <_putc_r+0x6c>
 8031db4:	68b4      	ldr	r4, [r6, #8]
 8031db6:	e7d6      	b.n	8031d66 <_putc_r+0x1a>
 8031db8:	4b07      	ldr	r3, [pc, #28]	; (8031dd8 <_putc_r+0x8c>)
 8031dba:	429c      	cmp	r4, r3
 8031dbc:	bf08      	it	eq
 8031dbe:	68f4      	ldreq	r4, [r6, #12]
 8031dc0:	e7d1      	b.n	8031d66 <_putc_r+0x1a>
 8031dc2:	4629      	mov	r1, r5
 8031dc4:	4622      	mov	r2, r4
 8031dc6:	4630      	mov	r0, r6
 8031dc8:	f7ff f88a 	bl	8030ee0 <__swbuf_r>
 8031dcc:	4605      	mov	r5, r0
 8031dce:	e7e3      	b.n	8031d98 <_putc_r+0x4c>
 8031dd0:	08033460 	.word	0x08033460
 8031dd4:	08033480 	.word	0x08033480
 8031dd8:	08033440 	.word	0x08033440

08031ddc <__sread>:
 8031ddc:	b510      	push	{r4, lr}
 8031dde:	460c      	mov	r4, r1
 8031de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031de4:	f000 f8de 	bl	8031fa4 <_read_r>
 8031de8:	2800      	cmp	r0, #0
 8031dea:	bfab      	itete	ge
 8031dec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8031dee:	89a3      	ldrhlt	r3, [r4, #12]
 8031df0:	181b      	addge	r3, r3, r0
 8031df2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8031df6:	bfac      	ite	ge
 8031df8:	6563      	strge	r3, [r4, #84]	; 0x54
 8031dfa:	81a3      	strhlt	r3, [r4, #12]
 8031dfc:	bd10      	pop	{r4, pc}

08031dfe <__swrite>:
 8031dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031e02:	461f      	mov	r7, r3
 8031e04:	898b      	ldrh	r3, [r1, #12]
 8031e06:	05db      	lsls	r3, r3, #23
 8031e08:	4605      	mov	r5, r0
 8031e0a:	460c      	mov	r4, r1
 8031e0c:	4616      	mov	r6, r2
 8031e0e:	d505      	bpl.n	8031e1c <__swrite+0x1e>
 8031e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031e14:	2302      	movs	r3, #2
 8031e16:	2200      	movs	r2, #0
 8031e18:	f000 f868 	bl	8031eec <_lseek_r>
 8031e1c:	89a3      	ldrh	r3, [r4, #12]
 8031e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031e22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8031e26:	81a3      	strh	r3, [r4, #12]
 8031e28:	4632      	mov	r2, r6
 8031e2a:	463b      	mov	r3, r7
 8031e2c:	4628      	mov	r0, r5
 8031e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8031e32:	f000 b817 	b.w	8031e64 <_write_r>

08031e36 <__sseek>:
 8031e36:	b510      	push	{r4, lr}
 8031e38:	460c      	mov	r4, r1
 8031e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031e3e:	f000 f855 	bl	8031eec <_lseek_r>
 8031e42:	1c43      	adds	r3, r0, #1
 8031e44:	89a3      	ldrh	r3, [r4, #12]
 8031e46:	bf15      	itete	ne
 8031e48:	6560      	strne	r0, [r4, #84]	; 0x54
 8031e4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8031e4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8031e52:	81a3      	strheq	r3, [r4, #12]
 8031e54:	bf18      	it	ne
 8031e56:	81a3      	strhne	r3, [r4, #12]
 8031e58:	bd10      	pop	{r4, pc}

08031e5a <__sclose>:
 8031e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031e5e:	f000 b813 	b.w	8031e88 <_close_r>
	...

08031e64 <_write_r>:
 8031e64:	b538      	push	{r3, r4, r5, lr}
 8031e66:	4d07      	ldr	r5, [pc, #28]	; (8031e84 <_write_r+0x20>)
 8031e68:	4604      	mov	r4, r0
 8031e6a:	4608      	mov	r0, r1
 8031e6c:	4611      	mov	r1, r2
 8031e6e:	2200      	movs	r2, #0
 8031e70:	602a      	str	r2, [r5, #0]
 8031e72:	461a      	mov	r2, r3
 8031e74:	f7f8 f955 	bl	802a122 <_write>
 8031e78:	1c43      	adds	r3, r0, #1
 8031e7a:	d102      	bne.n	8031e82 <_write_r+0x1e>
 8031e7c:	682b      	ldr	r3, [r5, #0]
 8031e7e:	b103      	cbz	r3, 8031e82 <_write_r+0x1e>
 8031e80:	6023      	str	r3, [r4, #0]
 8031e82:	bd38      	pop	{r3, r4, r5, pc}
 8031e84:	24002024 	.word	0x24002024

08031e88 <_close_r>:
 8031e88:	b538      	push	{r3, r4, r5, lr}
 8031e8a:	4d06      	ldr	r5, [pc, #24]	; (8031ea4 <_close_r+0x1c>)
 8031e8c:	2300      	movs	r3, #0
 8031e8e:	4604      	mov	r4, r0
 8031e90:	4608      	mov	r0, r1
 8031e92:	602b      	str	r3, [r5, #0]
 8031e94:	f7f8 f961 	bl	802a15a <_close>
 8031e98:	1c43      	adds	r3, r0, #1
 8031e9a:	d102      	bne.n	8031ea2 <_close_r+0x1a>
 8031e9c:	682b      	ldr	r3, [r5, #0]
 8031e9e:	b103      	cbz	r3, 8031ea2 <_close_r+0x1a>
 8031ea0:	6023      	str	r3, [r4, #0]
 8031ea2:	bd38      	pop	{r3, r4, r5, pc}
 8031ea4:	24002024 	.word	0x24002024

08031ea8 <_fstat_r>:
 8031ea8:	b538      	push	{r3, r4, r5, lr}
 8031eaa:	4d07      	ldr	r5, [pc, #28]	; (8031ec8 <_fstat_r+0x20>)
 8031eac:	2300      	movs	r3, #0
 8031eae:	4604      	mov	r4, r0
 8031eb0:	4608      	mov	r0, r1
 8031eb2:	4611      	mov	r1, r2
 8031eb4:	602b      	str	r3, [r5, #0]
 8031eb6:	f7f8 f95c 	bl	802a172 <_fstat>
 8031eba:	1c43      	adds	r3, r0, #1
 8031ebc:	d102      	bne.n	8031ec4 <_fstat_r+0x1c>
 8031ebe:	682b      	ldr	r3, [r5, #0]
 8031ec0:	b103      	cbz	r3, 8031ec4 <_fstat_r+0x1c>
 8031ec2:	6023      	str	r3, [r4, #0]
 8031ec4:	bd38      	pop	{r3, r4, r5, pc}
 8031ec6:	bf00      	nop
 8031ec8:	24002024 	.word	0x24002024

08031ecc <_isatty_r>:
 8031ecc:	b538      	push	{r3, r4, r5, lr}
 8031ece:	4d06      	ldr	r5, [pc, #24]	; (8031ee8 <_isatty_r+0x1c>)
 8031ed0:	2300      	movs	r3, #0
 8031ed2:	4604      	mov	r4, r0
 8031ed4:	4608      	mov	r0, r1
 8031ed6:	602b      	str	r3, [r5, #0]
 8031ed8:	f7f8 f95b 	bl	802a192 <_isatty>
 8031edc:	1c43      	adds	r3, r0, #1
 8031ede:	d102      	bne.n	8031ee6 <_isatty_r+0x1a>
 8031ee0:	682b      	ldr	r3, [r5, #0]
 8031ee2:	b103      	cbz	r3, 8031ee6 <_isatty_r+0x1a>
 8031ee4:	6023      	str	r3, [r4, #0]
 8031ee6:	bd38      	pop	{r3, r4, r5, pc}
 8031ee8:	24002024 	.word	0x24002024

08031eec <_lseek_r>:
 8031eec:	b538      	push	{r3, r4, r5, lr}
 8031eee:	4d07      	ldr	r5, [pc, #28]	; (8031f0c <_lseek_r+0x20>)
 8031ef0:	4604      	mov	r4, r0
 8031ef2:	4608      	mov	r0, r1
 8031ef4:	4611      	mov	r1, r2
 8031ef6:	2200      	movs	r2, #0
 8031ef8:	602a      	str	r2, [r5, #0]
 8031efa:	461a      	mov	r2, r3
 8031efc:	f7f8 f954 	bl	802a1a8 <_lseek>
 8031f00:	1c43      	adds	r3, r0, #1
 8031f02:	d102      	bne.n	8031f0a <_lseek_r+0x1e>
 8031f04:	682b      	ldr	r3, [r5, #0]
 8031f06:	b103      	cbz	r3, 8031f0a <_lseek_r+0x1e>
 8031f08:	6023      	str	r3, [r4, #0]
 8031f0a:	bd38      	pop	{r3, r4, r5, pc}
 8031f0c:	24002024 	.word	0x24002024

08031f10 <memmove>:
 8031f10:	4288      	cmp	r0, r1
 8031f12:	b510      	push	{r4, lr}
 8031f14:	eb01 0402 	add.w	r4, r1, r2
 8031f18:	d902      	bls.n	8031f20 <memmove+0x10>
 8031f1a:	4284      	cmp	r4, r0
 8031f1c:	4623      	mov	r3, r4
 8031f1e:	d807      	bhi.n	8031f30 <memmove+0x20>
 8031f20:	1e43      	subs	r3, r0, #1
 8031f22:	42a1      	cmp	r1, r4
 8031f24:	d008      	beq.n	8031f38 <memmove+0x28>
 8031f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8031f2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8031f2e:	e7f8      	b.n	8031f22 <memmove+0x12>
 8031f30:	4402      	add	r2, r0
 8031f32:	4601      	mov	r1, r0
 8031f34:	428a      	cmp	r2, r1
 8031f36:	d100      	bne.n	8031f3a <memmove+0x2a>
 8031f38:	bd10      	pop	{r4, pc}
 8031f3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8031f3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8031f42:	e7f7      	b.n	8031f34 <memmove+0x24>

08031f44 <_realloc_r>:
 8031f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031f48:	4680      	mov	r8, r0
 8031f4a:	4614      	mov	r4, r2
 8031f4c:	460e      	mov	r6, r1
 8031f4e:	b921      	cbnz	r1, 8031f5a <_realloc_r+0x16>
 8031f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8031f54:	4611      	mov	r1, r2
 8031f56:	f7fe be7b 	b.w	8030c50 <_malloc_r>
 8031f5a:	b92a      	cbnz	r2, 8031f68 <_realloc_r+0x24>
 8031f5c:	f7fe fe0c 	bl	8030b78 <_free_r>
 8031f60:	4625      	mov	r5, r4
 8031f62:	4628      	mov	r0, r5
 8031f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031f68:	f000 f82e 	bl	8031fc8 <_malloc_usable_size_r>
 8031f6c:	4284      	cmp	r4, r0
 8031f6e:	4607      	mov	r7, r0
 8031f70:	d802      	bhi.n	8031f78 <_realloc_r+0x34>
 8031f72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8031f76:	d812      	bhi.n	8031f9e <_realloc_r+0x5a>
 8031f78:	4621      	mov	r1, r4
 8031f7a:	4640      	mov	r0, r8
 8031f7c:	f7fe fe68 	bl	8030c50 <_malloc_r>
 8031f80:	4605      	mov	r5, r0
 8031f82:	2800      	cmp	r0, #0
 8031f84:	d0ed      	beq.n	8031f62 <_realloc_r+0x1e>
 8031f86:	42bc      	cmp	r4, r7
 8031f88:	4622      	mov	r2, r4
 8031f8a:	4631      	mov	r1, r6
 8031f8c:	bf28      	it	cs
 8031f8e:	463a      	movcs	r2, r7
 8031f90:	f7fe fddc 	bl	8030b4c <memcpy>
 8031f94:	4631      	mov	r1, r6
 8031f96:	4640      	mov	r0, r8
 8031f98:	f7fe fdee 	bl	8030b78 <_free_r>
 8031f9c:	e7e1      	b.n	8031f62 <_realloc_r+0x1e>
 8031f9e:	4635      	mov	r5, r6
 8031fa0:	e7df      	b.n	8031f62 <_realloc_r+0x1e>
	...

08031fa4 <_read_r>:
 8031fa4:	b538      	push	{r3, r4, r5, lr}
 8031fa6:	4d07      	ldr	r5, [pc, #28]	; (8031fc4 <_read_r+0x20>)
 8031fa8:	4604      	mov	r4, r0
 8031faa:	4608      	mov	r0, r1
 8031fac:	4611      	mov	r1, r2
 8031fae:	2200      	movs	r2, #0
 8031fb0:	602a      	str	r2, [r5, #0]
 8031fb2:	461a      	mov	r2, r3
 8031fb4:	f7f8 f898 	bl	802a0e8 <_read>
 8031fb8:	1c43      	adds	r3, r0, #1
 8031fba:	d102      	bne.n	8031fc2 <_read_r+0x1e>
 8031fbc:	682b      	ldr	r3, [r5, #0]
 8031fbe:	b103      	cbz	r3, 8031fc2 <_read_r+0x1e>
 8031fc0:	6023      	str	r3, [r4, #0]
 8031fc2:	bd38      	pop	{r3, r4, r5, pc}
 8031fc4:	24002024 	.word	0x24002024

08031fc8 <_malloc_usable_size_r>:
 8031fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031fcc:	1f18      	subs	r0, r3, #4
 8031fce:	2b00      	cmp	r3, #0
 8031fd0:	bfbc      	itt	lt
 8031fd2:	580b      	ldrlt	r3, [r1, r0]
 8031fd4:	18c0      	addlt	r0, r0, r3
 8031fd6:	4770      	bx	lr

08031fd8 <_init>:
 8031fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031fda:	bf00      	nop
 8031fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031fde:	bc08      	pop	{r3}
 8031fe0:	469e      	mov	lr, r3
 8031fe2:	4770      	bx	lr

08031fe4 <_fini>:
 8031fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031fe6:	bf00      	nop
 8031fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031fea:	bc08      	pop	{r3}
 8031fec:	469e      	mov	lr, r3
 8031fee:	4770      	bx	lr
