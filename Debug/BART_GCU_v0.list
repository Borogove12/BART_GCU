
BART_GCU_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001179c  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001534  08031a40  08031a40  00021a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08032f74  08032f74  00022f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08032f7c  08032f7c  00022f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08032f80  08032f80  00022f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  24000000  08032f84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001e9c  240000b8  08033038  000300b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000c04  24001f54  08033038  00031f54  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002da32  00000000  00000000  000300e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005f69  00000000  00000000  0005db14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002270  00000000  00000000  00063a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002020  00000000  00000000  00065cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000426e5  00000000  00000000  00067d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030665  00000000  00000000  000aa3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d9a7  00000000  00000000  000daa5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00258401  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009930  00000000  00000000  00258454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	240000b8 	.word	0x240000b8
 80202bc:	00000000 	.word	0x00000000
 80202c0:	08031a24 	.word	0x08031a24

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	240000bc 	.word	0x240000bc
 80202dc:	08031a24 	.word	0x08031a24

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295
 8020390:	f04f 30ff 	movne.w	r0, #4294967295
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <Brr_SetEmergency>:
 * In:       bool isActive: indicator for the active/deactive
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_SetEmergency(bool isActive)
{
 8020684:	b580      	push	{r7, lr}
 8020686:	b084      	sub	sp, #16
 8020688:	af00      	add	r7, sp, #0
 802068a:	4603      	mov	r3, r0
 802068c:	71fb      	strb	r3, [r7, #7]
	static	clock_t	ms;
	BYTE cmd = isActive ? CMD_SET_EMEREGENCY : CMD_RESET_EMEREGENCY;
 802068e:	79fb      	ldrb	r3, [r7, #7]
 8020690:	2b00      	cmp	r3, #0
 8020692:	d001      	beq.n	8020698 <Brr_SetEmergency+0x14>
 8020694:	2378      	movs	r3, #120	; 0x78
 8020696:	e000      	b.n	802069a <Brr_SetEmergency+0x16>
 8020698:	2379      	movs	r3, #121	; 0x79
 802069a:	73fb      	strb	r3, [r7, #15]
	Brr_SetEmergency_P(isActive);
 802069c:	79fb      	ldrb	r3, [r7, #7]
 802069e:	4618      	mov	r0, r3
 80206a0:	f004 ffce 	bl	8025640 <Brr_SetEmergency_P>
	Brr_SetEmergency_S(isActive);
 80206a4:	79fb      	ldrb	r3, [r7, #7]
 80206a6:	4618      	mov	r0, r3
 80206a8:	f004 fff4 	bl	8025694 <Brr_SetEmergency_S>
    printf(" [%02X] command\n",cmd);
 80206ac:	7bfb      	ldrb	r3, [r7, #15]
 80206ae:	4619      	mov	r1, r3
 80206b0:	4805      	ldr	r0, [pc, #20]	; (80206c8 <Brr_SetEmergency+0x44>)
 80206b2:	f008 fe9b 	bl	80293ec <printf_>

	// 100ms 단위로 printf 발생   //너무 많은 접근으로 버퍼가 터지는 문제가 있음 해당 구문이 문제 없다면 다른 printf에도 적용 예정
	if (!mstimeout(&ms, 100))
 80206b6:	2164      	movs	r1, #100	; 0x64
 80206b8:	4804      	ldr	r0, [pc, #16]	; (80206cc <Brr_SetEmergency+0x48>)
 80206ba:	f009 fc3b 	bl	8029f34 <mstimeout>
 80206be:	4603      	mov	r3, r0
 80206c0:	2b00      	cmp	r3, #0
		return;
}
 80206c2:	3710      	adds	r7, #16
 80206c4:	46bd      	mov	sp, r7
 80206c6:	bd80      	pop	{r7, pc}
 80206c8:	08031a40 	.word	0x08031a40
 80206cc:	24000118 	.word	0x24000118

080206d0 <Brr_OpenBarrier>:
 * In:       BYTE direction: 1-Entry / 2-Exit
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_OpenBarrier(BYTE direction)
{
 80206d0:	b580      	push	{r7, lr}
 80206d2:	b082      	sub	sp, #8
 80206d4:	af00      	add	r7, sp, #0
 80206d6:	4603      	mov	r3, r0
 80206d8:	71fb      	strb	r3, [r7, #7]
    switch (direction)
 80206da:	79fb      	ldrb	r3, [r7, #7]
 80206dc:	2b01      	cmp	r3, #1
 80206de:	d008      	beq.n	80206f2 <Brr_OpenBarrier+0x22>
 80206e0:	2b02      	cmp	r3, #2
 80206e2:	d10d      	bne.n	8020700 <Brr_OpenBarrier+0x30>
		{
		case BARRIER_OPEN_FOR_EX:
			Brr_ControlBarrier_P(ENTRY_OPEN);
 80206e4:	2000      	movs	r0, #0
 80206e6:	f005 f853 	bl	8025790 <Brr_ControlBarrier_P>
			Brr_ControlBarrier_S(ENTRY_OPEN);
 80206ea:	2000      	movs	r0, #0
 80206ec:	f005 f89e 	bl	802582c <Brr_ControlBarrier_S>
			break;
 80206f0:	e006      	b.n	8020700 <Brr_OpenBarrier+0x30>

		case BARRIER_OPEN_FOR_EN:
			Brr_ControlBarrier_P(EXIT_OPEN);
 80206f2:	2002      	movs	r0, #2
 80206f4:	f005 f84c 	bl	8025790 <Brr_ControlBarrier_P>
			Brr_ControlBarrier_S(EXIT_OPEN);
 80206f8:	2002      	movs	r0, #2
 80206fa:	f005 f897 	bl	802582c <Brr_ControlBarrier_S>
			break;
 80206fe:	bf00      	nop
		}

    if (gIsOpenCmdIssued == FALSE)
 8020700:	4b08      	ldr	r3, [pc, #32]	; (8020724 <Brr_OpenBarrier+0x54>)
 8020702:	681b      	ldr	r3, [r3, #0]
 8020704:	2b00      	cmp	r3, #0
 8020706:	d109      	bne.n	802071c <Brr_OpenBarrier+0x4c>
    {
        printf(" [%02X] command\n", CMD_OPEN_BARRIER);
 8020708:	217c      	movs	r1, #124	; 0x7c
 802070a:	4807      	ldr	r0, [pc, #28]	; (8020728 <Brr_OpenBarrier+0x58>)
 802070c:	f008 fe6e 	bl	80293ec <printf_>
        gIsOpenCmdIssued = TRUE;
 8020710:	4b04      	ldr	r3, [pc, #16]	; (8020724 <Brr_OpenBarrier+0x54>)
 8020712:	2201      	movs	r2, #1
 8020714:	601a      	str	r2, [r3, #0]
        gIsCloseCmdIssued = FALSE;
 8020716:	4b05      	ldr	r3, [pc, #20]	; (802072c <Brr_OpenBarrier+0x5c>)
 8020718:	2200      	movs	r2, #0
 802071a:	601a      	str	r2, [r3, #0]
    }
}
 802071c:	bf00      	nop
 802071e:	3708      	adds	r7, #8
 8020720:	46bd      	mov	sp, r7
 8020722:	bd80      	pop	{r7, pc}
 8020724:	24000110 	.word	0x24000110
 8020728:	08031a40 	.word	0x08031a40
 802072c:	24000114 	.word	0x24000114

08020730 <Brr_CloseBarrier>:
 * In:       None
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_CloseBarrier(void)
{
 8020730:	b580      	push	{r7, lr}
 8020732:	af00      	add	r7, sp, #0
		Brr_ControlBarrier_P(CLOSE);
 8020734:	2001      	movs	r0, #1
 8020736:	f005 f82b 	bl	8025790 <Brr_ControlBarrier_P>
		Brr_ControlBarrier_S(CLOSE);
 802073a:	2001      	movs	r0, #1
 802073c:	f005 f876 	bl	802582c <Brr_ControlBarrier_S>
    if (gIsCloseCmdIssued == FALSE)
 8020740:	4b07      	ldr	r3, [pc, #28]	; (8020760 <Brr_CloseBarrier+0x30>)
 8020742:	681b      	ldr	r3, [r3, #0]
 8020744:	2b00      	cmp	r3, #0
 8020746:	d109      	bne.n	802075c <Brr_CloseBarrier+0x2c>
		{
        printf(" [%02X] command\n", CMD_CLOSE_BARRIER);
 8020748:	217d      	movs	r1, #125	; 0x7d
 802074a:	4806      	ldr	r0, [pc, #24]	; (8020764 <Brr_CloseBarrier+0x34>)
 802074c:	f008 fe4e 	bl	80293ec <printf_>
        gIsOpenCmdIssued = FALSE;
 8020750:	4b05      	ldr	r3, [pc, #20]	; (8020768 <Brr_CloseBarrier+0x38>)
 8020752:	2200      	movs	r2, #0
 8020754:	601a      	str	r2, [r3, #0]
        gIsCloseCmdIssued = TRUE;
 8020756:	4b02      	ldr	r3, [pc, #8]	; (8020760 <Brr_CloseBarrier+0x30>)
 8020758:	2201      	movs	r2, #1
 802075a:	601a      	str	r2, [r3, #0]
		}
}
 802075c:	bf00      	nop
 802075e:	bd80      	pop	{r7, pc}
 8020760:	24000114 	.word	0x24000114
 8020764:	08031a40 	.word	0x08031a40
 8020768:	24000110 	.word	0x24000110

0802076c <Brr_StopBarrier>:
 * In:       bool isStop: indicator for the stop/release
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_StopBarrier(bool isStop)
{
 802076c:	b580      	push	{r7, lr}
 802076e:	b084      	sub	sp, #16
 8020770:	af00      	add	r7, sp, #0
 8020772:	4603      	mov	r3, r0
 8020774:	71fb      	strb	r3, [r7, #7]
	BYTE cmd = isStop ? CMD_SET_STOP_BARRIER : CMD_RESET_STOP_BARRIER;
 8020776:	79fb      	ldrb	r3, [r7, #7]
 8020778:	2b00      	cmp	r3, #0
 802077a:	d001      	beq.n	8020780 <Brr_StopBarrier+0x14>
 802077c:	237e      	movs	r3, #126	; 0x7e
 802077e:	e000      	b.n	8020782 <Brr_StopBarrier+0x16>
 8020780:	237f      	movs	r3, #127	; 0x7f
 8020782:	73fb      	strb	r3, [r7, #15]
		Brr_SetBreak_P(isStop);
 8020784:	79fb      	ldrb	r3, [r7, #7]
 8020786:	4618      	mov	r0, r3
 8020788:	f004 ffae 	bl	80256e8 <Brr_SetBreak_P>
		Brr_SetBreak_S(isStop);
 802078c:	79fb      	ldrb	r3, [r7, #7]
 802078e:	4618      	mov	r0, r3
 8020790:	f004 ffd4 	bl	802573c <Brr_SetBreak_S>
    printf(" [%02X] command\n", cmd);
 8020794:	7bfb      	ldrb	r3, [r7, #15]
 8020796:	4619      	mov	r1, r3
 8020798:	4803      	ldr	r0, [pc, #12]	; (80207a8 <Brr_StopBarrier+0x3c>)
 802079a:	f008 fe27 	bl	80293ec <printf_>
}
 802079e:	bf00      	nop
 80207a0:	3710      	adds	r7, #16
 80207a2:	46bd      	mov	sp, r7
 80207a4:	bd80      	pop	{r7, pc}
 80207a6:	bf00      	nop
 80207a8:	08031a40 	.word	0x08031a40

080207ac <Brr_Inq_Status>:
 * In:       None
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_Inq_Status(void)
{
 80207ac:	b580      	push	{r7, lr}
 80207ae:	af00      	add	r7, sp, #0
	MakeRequest(CMD_GET_STATUS_MAIN, NULL, 0);
 80207b0:	2200      	movs	r2, #0
 80207b2:	2100      	movs	r1, #0
 80207b4:	2092      	movs	r0, #146	; 0x92
 80207b6:	f000 f877 	bl	80208a8 <MakeRequest>
}
 80207ba:	bf00      	nop
 80207bc:	bd80      	pop	{r7, pc}
	...

080207c0 <Brr_Res_Status>:
 * In:       bool isMain
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_Res_Status(bool isMain) // isMain : TRUE - UART1 / FALSE - UART3
{
 80207c0:	b580      	push	{r7, lr}
 80207c2:	b082      	sub	sp, #8
 80207c4:	af00      	add	r7, sp, #0
 80207c6:	4603      	mov	r3, r0
 80207c8:	71fb      	strb	r3, [r7, #7]
    if (isMain) // UART4
 80207ca:	79fb      	ldrb	r3, [r7, #7]
 80207cc:	2b00      	cmp	r3, #0
 80207ce:	d005      	beq.n	80207dc <Brr_Res_Status+0x1c>
    {
        memcpy(&gMainBarrierStatus, (B_BARRIER_STATUS *)rsp_U4.d.data, sizeof(B_BARRIER_STATUS));
 80207d0:	2208      	movs	r2, #8
 80207d2:	4907      	ldr	r1, [pc, #28]	; (80207f0 <Brr_Res_Status+0x30>)
 80207d4:	4807      	ldr	r0, [pc, #28]	; (80207f4 <Brr_Res_Status+0x34>)
 80207d6:	f00f fedf 	bl	8030598 <memcpy>
    else // UART5
    {
        memcpy(&gSubBarrierStatus, (B_BARRIER_STATUS *)rsp_U5.d.data, sizeof(B_BARRIER_STATUS));
        // printf(" Receive Sub Status %d/%d/%d  \n", gSubBarrierStatus.B.status0, gSubBarrierStatus.B.status3, gSubBarrierStatus.B.status4);
    }
}
 80207da:	e004      	b.n	80207e6 <Brr_Res_Status+0x26>
        memcpy(&gSubBarrierStatus, (B_BARRIER_STATUS *)rsp_U5.d.data, sizeof(B_BARRIER_STATUS));
 80207dc:	2208      	movs	r2, #8
 80207de:	4906      	ldr	r1, [pc, #24]	; (80207f8 <Brr_Res_Status+0x38>)
 80207e0:	4806      	ldr	r0, [pc, #24]	; (80207fc <Brr_Res_Status+0x3c>)
 80207e2:	f00f fed9 	bl	8030598 <memcpy>
}
 80207e6:	bf00      	nop
 80207e8:	3708      	adds	r7, #8
 80207ea:	46bd      	mov	sp, r7
 80207ec:	bd80      	pop	{r7, pc}
 80207ee:	bf00      	nop
 80207f0:	240000d7 	.word	0x240000d7
 80207f4:	240004bc 	.word	0x240004bc
 80207f8:	240000eb 	.word	0x240000eb
 80207fc:	240004c4 	.word	0x240004c4

08020800 <WaitTX>:

}
#endif

void WaitTX(void)
{
 8020800:	b580      	push	{r7, lr}
 8020802:	af00      	add	r7, sp, #0
        U5_TxWait();
 8020804:	f000 fa9a 	bl	8020d3c <U5_TxWait>
        U4_TxWait();
 8020808:	f000 fa84 	bl	8020d14 <U4_TxWait>
}
 802080c:	bf00      	nop
 802080e:	bd80      	pop	{r7, pc}

08020810 <SendSTX>:

void SendSTX(void)
{
 8020810:	b580      	push	{r7, lr}
 8020812:	af00      	add	r7, sp, #0
    WaitTX();
 8020814:	f7ff fff4 	bl	8020800 <WaitTX>
        U5_Putch(0xAA);
 8020818:	20aa      	movs	r0, #170	; 0xaa
 802081a:	f000 fab1 	bl	8020d80 <U5_Putch>
        U4_Putch(0xAA);
 802081e:	20aa      	movs	r0, #170	; 0xaa
 8020820:	f000 faa0 	bl	8020d64 <U4_Putch>
}
 8020824:	bf00      	nop
 8020826:	bd80      	pop	{r7, pc}

08020828 <SendBCC>:

void SendBCC(BYTE bBCC)
{
 8020828:	b580      	push	{r7, lr}
 802082a:	b082      	sub	sp, #8
 802082c:	af00      	add	r7, sp, #0
 802082e:	4603      	mov	r3, r0
 8020830:	71fb      	strb	r3, [r7, #7]
    WaitTX();
 8020832:	f7ff ffe5 	bl	8020800 <WaitTX>
        U5_Putch(bBCC);
 8020836:	79fb      	ldrb	r3, [r7, #7]
 8020838:	4618      	mov	r0, r3
 802083a:	f000 faa1 	bl	8020d80 <U5_Putch>
        U4_Putch(bBCC);
 802083e:	79fb      	ldrb	r3, [r7, #7]
 8020840:	4618      	mov	r0, r3
 8020842:	f000 fa8f 	bl	8020d64 <U4_Putch>
}
 8020846:	bf00      	nop
 8020848:	3708      	adds	r7, #8
 802084a:	46bd      	mov	sp, r7
 802084c:	bd80      	pop	{r7, pc}
	...

08020850 <SendData>:

BYTE SendData(void)
{
 8020850:	b580      	push	{r7, lr}
 8020852:	b084      	sub	sp, #16
 8020854:	af00      	add	r7, sp, #0
    BYTE bBCC;
    BYTE *pbReqBuff;
    int nReqLen;

    bBCC = 0;
 8020856:	2300      	movs	r3, #0
 8020858:	73fb      	strb	r3, [r7, #15]
    pbReqBuff = req.Buff;
 802085a:	4b12      	ldr	r3, [pc, #72]	; (80208a4 <SendData+0x54>)
 802085c:	60bb      	str	r3, [r7, #8]
    nReqLen = req.d.dataLen + FRAME_HEADER_LEN;
 802085e:	4b11      	ldr	r3, [pc, #68]	; (80208a4 <SendData+0x54>)
 8020860:	789b      	ldrb	r3, [r3, #2]
 8020862:	3303      	adds	r3, #3
 8020864:	607b      	str	r3, [r7, #4]

    while (nReqLen--)
 8020866:	e013      	b.n	8020890 <SendData+0x40>
    {
        WaitTX();
 8020868:	f7ff ffca 	bl	8020800 <WaitTX>
            U5_Putch(*pbReqBuff);
 802086c:	68bb      	ldr	r3, [r7, #8]
 802086e:	781b      	ldrb	r3, [r3, #0]
 8020870:	4618      	mov	r0, r3
 8020872:	f000 fa85 	bl	8020d80 <U5_Putch>
            U4_Putch(*pbReqBuff);
 8020876:	68bb      	ldr	r3, [r7, #8]
 8020878:	781b      	ldrb	r3, [r3, #0]
 802087a:	4618      	mov	r0, r3
 802087c:	f000 fa72 	bl	8020d64 <U4_Putch>

        bBCC ^= *pbReqBuff; // BCC calculation
 8020880:	68bb      	ldr	r3, [r7, #8]
 8020882:	781a      	ldrb	r2, [r3, #0]
 8020884:	7bfb      	ldrb	r3, [r7, #15]
 8020886:	4053      	eors	r3, r2
 8020888:	73fb      	strb	r3, [r7, #15]
        pbReqBuff++;
 802088a:	68bb      	ldr	r3, [r7, #8]
 802088c:	3301      	adds	r3, #1
 802088e:	60bb      	str	r3, [r7, #8]
    while (nReqLen--)
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	1e5a      	subs	r2, r3, #1
 8020894:	607a      	str	r2, [r7, #4]
 8020896:	2b00      	cmp	r3, #0
 8020898:	d1e6      	bne.n	8020868 <SendData+0x18>
    }

    return bBCC;
 802089a:	7bfb      	ldrb	r3, [r7, #15]
}
 802089c:	4618      	mov	r0, r3
 802089e:	3710      	adds	r7, #16
 80208a0:	46bd      	mov	sp, r7
 80208a2:	bd80      	pop	{r7, pc}
 80208a4:	240000fc 	.word	0x240000fc

080208a8 <MakeRequest>:
 * Out:      None
 * Return:   void
 * comments:
 *******************************************************************************/
void MakeRequest(BYTE command, BYTE *data, int nOptionLen)
{
 80208a8:	b580      	push	{r7, lr}
 80208aa:	b086      	sub	sp, #24
 80208ac:	af00      	add	r7, sp, #0
 80208ae:	4603      	mov	r3, r0
 80208b0:	60b9      	str	r1, [r7, #8]
 80208b2:	607a      	str	r2, [r7, #4]
 80208b4:	73fb      	strb	r3, [r7, #15]
    BYTE bBCC;

    if (req.d.moduleSeq == MAX_SEQUENCE)
 80208b6:	4b17      	ldr	r3, [pc, #92]	; (8020914 <MakeRequest+0x6c>)
 80208b8:	785b      	ldrb	r3, [r3, #1]
 80208ba:	2bff      	cmp	r3, #255	; 0xff
 80208bc:	d103      	bne.n	80208c6 <MakeRequest+0x1e>
        req.d.moduleSeq = 0;
 80208be:	4b15      	ldr	r3, [pc, #84]	; (8020914 <MakeRequest+0x6c>)
 80208c0:	2200      	movs	r2, #0
 80208c2:	705a      	strb	r2, [r3, #1]
 80208c4:	e007      	b.n	80208d6 <MakeRequest+0x2e>
    else
        req.d.moduleSeq = gbLastMainSeq_Swing++;
 80208c6:	4b14      	ldr	r3, [pc, #80]	; (8020918 <MakeRequest+0x70>)
 80208c8:	781b      	ldrb	r3, [r3, #0]
 80208ca:	1c5a      	adds	r2, r3, #1
 80208cc:	b2d1      	uxtb	r1, r2
 80208ce:	4a12      	ldr	r2, [pc, #72]	; (8020918 <MakeRequest+0x70>)
 80208d0:	7011      	strb	r1, [r2, #0]
 80208d2:	4a10      	ldr	r2, [pc, #64]	; (8020914 <MakeRequest+0x6c>)
 80208d4:	7053      	strb	r3, [r2, #1]

    req.d.command = command;
 80208d6:	4a0f      	ldr	r2, [pc, #60]	; (8020914 <MakeRequest+0x6c>)
 80208d8:	7bfb      	ldrb	r3, [r7, #15]
 80208da:	7013      	strb	r3, [r2, #0]
    req.d.dataLen = nOptionLen;
 80208dc:	687b      	ldr	r3, [r7, #4]
 80208de:	b2da      	uxtb	r2, r3
 80208e0:	4b0c      	ldr	r3, [pc, #48]	; (8020914 <MakeRequest+0x6c>)
 80208e2:	709a      	strb	r2, [r3, #2]

    if (nOptionLen)
 80208e4:	687b      	ldr	r3, [r7, #4]
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	d005      	beq.n	80208f6 <MakeRequest+0x4e>
        memcpy(req.d.data, data, nOptionLen);
 80208ea:	687b      	ldr	r3, [r7, #4]
 80208ec:	461a      	mov	r2, r3
 80208ee:	68b9      	ldr	r1, [r7, #8]
 80208f0:	480a      	ldr	r0, [pc, #40]	; (802091c <MakeRequest+0x74>)
 80208f2:	f00f fe51 	bl	8030598 <memcpy>

    SendSTX();
 80208f6:	f7ff ff8b 	bl	8020810 <SendSTX>
    bBCC = SendData();
 80208fa:	f7ff ffa9 	bl	8020850 <SendData>
 80208fe:	4603      	mov	r3, r0
 8020900:	75fb      	strb	r3, [r7, #23]
    SendBCC(bBCC);
 8020902:	7dfb      	ldrb	r3, [r7, #23]
 8020904:	4618      	mov	r0, r3
 8020906:	f7ff ff8f 	bl	8020828 <SendBCC>
}
 802090a:	bf00      	nop
 802090c:	3718      	adds	r7, #24
 802090e:	46bd      	mov	sp, r7
 8020910:	bd80      	pop	{r7, pc}
 8020912:	bf00      	nop
 8020914:	240000fc 	.word	0x240000fc
 8020918:	2400010f 	.word	0x2400010f
 802091c:	240000ff 	.word	0x240000ff

08020920 <CheckProtocol_UART4>:
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/

int CheckProtocol_UART4(void)
{
 8020920:	b580      	push	{r7, lr}
 8020922:	b082      	sub	sp, #8
 8020924:	af00      	add	r7, sp, #0
    BYTE rcvData;



  //  while (U1_Getch(&rcvData))			//스타트는 [AA] 다음 [len]이 들어오고 다음[Data]
	 while (IUart_RecvByte_check(COM4,&rcvData))
 8020926:	e08f      	b.n	8020a48 <CheckProtocol_UART4+0x128>
    {
        if (rcvData == 0xAA)
 8020928:	79fb      	ldrb	r3, [r7, #7]
 802092a:	2baa      	cmp	r3, #170	; 0xaa
 802092c:	d10c      	bne.n	8020948 <CheckProtocol_UART4+0x28>
        {
        	packetLen_U4 = 0;
 802092e:	4b4e      	ldr	r3, [pc, #312]	; (8020a68 <CheckProtocol_UART4+0x148>)
 8020930:	2200      	movs	r2, #0
 8020932:	601a      	str	r2, [r3, #0]
        	len_U4 = 0;
 8020934:	4b4d      	ldr	r3, [pc, #308]	; (8020a6c <CheckProtocol_UART4+0x14c>)
 8020936:	2200      	movs	r2, #0
 8020938:	601a      	str	r2, [r3, #0]
            BCC_U4 = 0;
 802093a:	4b4d      	ldr	r3, [pc, #308]	; (8020a70 <CheckProtocol_UART4+0x150>)
 802093c:	2200      	movs	r2, #0
 802093e:	701a      	strb	r2, [r3, #0]
            rcvState_U4 = STATE_DATA_HEAD;
 8020940:	4b4c      	ldr	r3, [pc, #304]	; (8020a74 <CheckProtocol_UART4+0x154>)
 8020942:	2205      	movs	r2, #5
 8020944:	701a      	strb	r2, [r3, #0]
 8020946:	e07f      	b.n	8020a48 <CheckProtocol_UART4+0x128>
        }
        else 
        {
            switch (rcvState_U4)
 8020948:	4b4a      	ldr	r3, [pc, #296]	; (8020a74 <CheckProtocol_UART4+0x154>)
 802094a:	781b      	ldrb	r3, [r3, #0]
 802094c:	2b06      	cmp	r3, #6
 802094e:	d028      	beq.n	80209a2 <CheckProtocol_UART4+0x82>
 8020950:	2b06      	cmp	r3, #6
 8020952:	dc79      	bgt.n	8020a48 <CheckProtocol_UART4+0x128>
 8020954:	2b02      	cmp	r3, #2
 8020956:	d040      	beq.n	80209da <CheckProtocol_UART4+0xba>
 8020958:	2b05      	cmp	r3, #5
 802095a:	d175      	bne.n	8020a48 <CheckProtocol_UART4+0x128>
            {
            case STATE_DATA_HEAD:
                rsp_U4.Buff[packetLen_U4++] = rcvData;
 802095c:	4b42      	ldr	r3, [pc, #264]	; (8020a68 <CheckProtocol_UART4+0x148>)
 802095e:	681b      	ldr	r3, [r3, #0]
 8020960:	1c5a      	adds	r2, r3, #1
 8020962:	4941      	ldr	r1, [pc, #260]	; (8020a68 <CheckProtocol_UART4+0x148>)
 8020964:	600a      	str	r2, [r1, #0]
 8020966:	79f9      	ldrb	r1, [r7, #7]
 8020968:	4a43      	ldr	r2, [pc, #268]	; (8020a78 <CheckProtocol_UART4+0x158>)
 802096a:	54d1      	strb	r1, [r2, r3]
                BCC_U4 ^= rcvData;
 802096c:	4b40      	ldr	r3, [pc, #256]	; (8020a70 <CheckProtocol_UART4+0x150>)
 802096e:	781a      	ldrb	r2, [r3, #0]
 8020970:	79fb      	ldrb	r3, [r7, #7]
 8020972:	4053      	eors	r3, r2
 8020974:	b2da      	uxtb	r2, r3
 8020976:	4b3e      	ldr	r3, [pc, #248]	; (8020a70 <CheckProtocol_UART4+0x150>)
 8020978:	701a      	strb	r2, [r3, #0]
                if (packetLen_U4 == 3)
 802097a:	4b3b      	ldr	r3, [pc, #236]	; (8020a68 <CheckProtocol_UART4+0x148>)
 802097c:	681b      	ldr	r3, [r3, #0]
 802097e:	2b03      	cmp	r3, #3
 8020980:	d162      	bne.n	8020a48 <CheckProtocol_UART4+0x128>
                {
                	len_U4 = rcvData;
 8020982:	79fb      	ldrb	r3, [r7, #7]
 8020984:	461a      	mov	r2, r3
 8020986:	4b39      	ldr	r3, [pc, #228]	; (8020a6c <CheckProtocol_UART4+0x14c>)
 8020988:	601a      	str	r2, [r3, #0]
                    if (len_U4 == 0)
 802098a:	4b38      	ldr	r3, [pc, #224]	; (8020a6c <CheckProtocol_UART4+0x14c>)
 802098c:	681b      	ldr	r3, [r3, #0]
 802098e:	2b00      	cmp	r3, #0
 8020990:	d103      	bne.n	802099a <CheckProtocol_UART4+0x7a>
                    {
                    	rcvState_U4 = STATE_DATA_BCC;
 8020992:	4b38      	ldr	r3, [pc, #224]	; (8020a74 <CheckProtocol_UART4+0x154>)
 8020994:	2202      	movs	r2, #2
 8020996:	701a      	strb	r2, [r3, #0]
 8020998:	e056      	b.n	8020a48 <CheckProtocol_UART4+0x128>
                    }
                    else
                    {
                    	rcvState_U4 = STATE_DATA_BODY;
 802099a:	4b36      	ldr	r3, [pc, #216]	; (8020a74 <CheckProtocol_UART4+0x154>)
 802099c:	2206      	movs	r2, #6
 802099e:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 80209a0:	e052      	b.n	8020a48 <CheckProtocol_UART4+0x128>
            case STATE_DATA_BODY:
            	rsp_U4.Buff[packetLen_U4++] = rcvData;
 80209a2:	4b31      	ldr	r3, [pc, #196]	; (8020a68 <CheckProtocol_UART4+0x148>)
 80209a4:	681b      	ldr	r3, [r3, #0]
 80209a6:	1c5a      	adds	r2, r3, #1
 80209a8:	492f      	ldr	r1, [pc, #188]	; (8020a68 <CheckProtocol_UART4+0x148>)
 80209aa:	600a      	str	r2, [r1, #0]
 80209ac:	79f9      	ldrb	r1, [r7, #7]
 80209ae:	4a32      	ldr	r2, [pc, #200]	; (8020a78 <CheckProtocol_UART4+0x158>)
 80209b0:	54d1      	strb	r1, [r2, r3]
            	BCC_U4 ^= rcvData;
 80209b2:	4b2f      	ldr	r3, [pc, #188]	; (8020a70 <CheckProtocol_UART4+0x150>)
 80209b4:	781a      	ldrb	r2, [r3, #0]
 80209b6:	79fb      	ldrb	r3, [r7, #7]
 80209b8:	4053      	eors	r3, r2
 80209ba:	b2da      	uxtb	r2, r3
 80209bc:	4b2c      	ldr	r3, [pc, #176]	; (8020a70 <CheckProtocol_UART4+0x150>)
 80209be:	701a      	strb	r2, [r3, #0]
            	len_U4--;
 80209c0:	4b2a      	ldr	r3, [pc, #168]	; (8020a6c <CheckProtocol_UART4+0x14c>)
 80209c2:	681b      	ldr	r3, [r3, #0]
 80209c4:	3b01      	subs	r3, #1
 80209c6:	4a29      	ldr	r2, [pc, #164]	; (8020a6c <CheckProtocol_UART4+0x14c>)
 80209c8:	6013      	str	r3, [r2, #0]

                if (len_U4 == 0)
 80209ca:	4b28      	ldr	r3, [pc, #160]	; (8020a6c <CheckProtocol_UART4+0x14c>)
 80209cc:	681b      	ldr	r3, [r3, #0]
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	d13a      	bne.n	8020a48 <CheckProtocol_UART4+0x128>
                {
                	rcvState_U4 = STATE_DATA_BCC;
 80209d2:	4b28      	ldr	r3, [pc, #160]	; (8020a74 <CheckProtocol_UART4+0x154>)
 80209d4:	2202      	movs	r2, #2
 80209d6:	701a      	strb	r2, [r3, #0]
                }
                break;
 80209d8:	e036      	b.n	8020a48 <CheckProtocol_UART4+0x128>
            case STATE_DATA_BCC:
            	rcvState_U4 = STATE_STX_WAIT;
 80209da:	4b26      	ldr	r3, [pc, #152]	; (8020a74 <CheckProtocol_UART4+0x154>)
 80209dc:	2200      	movs	r2, #0
 80209de:	701a      	strb	r2, [r3, #0]
                if (BCC_U4 == rcvData)
 80209e0:	4b23      	ldr	r3, [pc, #140]	; (8020a70 <CheckProtocol_UART4+0x150>)
 80209e2:	781a      	ldrb	r2, [r3, #0]
 80209e4:	79fb      	ldrb	r3, [r7, #7]
 80209e6:	429a      	cmp	r2, r3
 80209e8:	d116      	bne.n	8020a18 <CheckProtocol_UART4+0xf8>
                {
                    if (rsp_U4.d.dataLen != (BYTE)(packetLen_U4 - FRAME_HEADER_LEN))
 80209ea:	4b23      	ldr	r3, [pc, #140]	; (8020a78 <CheckProtocol_UART4+0x158>)
 80209ec:	789a      	ldrb	r2, [r3, #2]
 80209ee:	4b1e      	ldr	r3, [pc, #120]	; (8020a68 <CheckProtocol_UART4+0x148>)
 80209f0:	681b      	ldr	r3, [r3, #0]
 80209f2:	b2db      	uxtb	r3, r3
 80209f4:	3b03      	subs	r3, #3
 80209f6:	b2db      	uxtb	r3, r3
 80209f8:	429a      	cmp	r2, r3
 80209fa:	d00b      	beq.n	8020a14 <CheckProtocol_UART4+0xf4>
                    {
                    	 printf("U4 LENGTH ERR: %d - %d  \n", rsp_U4.d.dataLen, (packetLen_U4 - FRAME_HEADER_LEN));
 80209fc:	4b1e      	ldr	r3, [pc, #120]	; (8020a78 <CheckProtocol_UART4+0x158>)
 80209fe:	789b      	ldrb	r3, [r3, #2]
 8020a00:	4619      	mov	r1, r3
 8020a02:	4b19      	ldr	r3, [pc, #100]	; (8020a68 <CheckProtocol_UART4+0x148>)
 8020a04:	681b      	ldr	r3, [r3, #0]
 8020a06:	3b03      	subs	r3, #3
 8020a08:	461a      	mov	r2, r3
 8020a0a:	481c      	ldr	r0, [pc, #112]	; (8020a7c <CheckProtocol_UART4+0x15c>)
 8020a0c:	f008 fcee 	bl	80293ec <printf_>
                        return ERR_WRONG_CMD_LEN;
 8020a10:	230a      	movs	r3, #10
 8020a12:	e024      	b.n	8020a5e <CheckProtocol_UART4+0x13e>
                    }
                    else
                    {
                        return SUCCESS;
 8020a14:	2300      	movs	r3, #0
 8020a16:	e022      	b.n	8020a5e <CheckProtocol_UART4+0x13e>
                    }
                }
                else
                {   if (rsp_U4.d.command != 6)
 8020a18:	4b17      	ldr	r3, [pc, #92]	; (8020a78 <CheckProtocol_UART4+0x158>)
 8020a1a:	781b      	ldrb	r3, [r3, #0]
 8020a1c:	2b06      	cmp	r3, #6
 8020a1e:	d011      	beq.n	8020a44 <CheckProtocol_UART4+0x124>
                {
                        printf("U4 BCC ERR. len: %02X, BCC: %02X, cmd: %02X  \n", rsp_U4.d.dataLen, BCC_U4, rsp_U4.d.command);
 8020a20:	4b15      	ldr	r3, [pc, #84]	; (8020a78 <CheckProtocol_UART4+0x158>)
 8020a22:	789b      	ldrb	r3, [r3, #2]
 8020a24:	4619      	mov	r1, r3
 8020a26:	4b12      	ldr	r3, [pc, #72]	; (8020a70 <CheckProtocol_UART4+0x150>)
 8020a28:	781b      	ldrb	r3, [r3, #0]
 8020a2a:	461a      	mov	r2, r3
 8020a2c:	4b12      	ldr	r3, [pc, #72]	; (8020a78 <CheckProtocol_UART4+0x158>)
 8020a2e:	781b      	ldrb	r3, [r3, #0]
 8020a30:	4813      	ldr	r0, [pc, #76]	; (8020a80 <CheckProtocol_UART4+0x160>)
 8020a32:	f008 fcdb 	bl	80293ec <printf_>
                    Print2Hex("", rsp_U4.Buff, packetLen_U4);
 8020a36:	4b0c      	ldr	r3, [pc, #48]	; (8020a68 <CheckProtocol_UART4+0x148>)
 8020a38:	681b      	ldr	r3, [r3, #0]
 8020a3a:	461a      	mov	r2, r3
 8020a3c:	490e      	ldr	r1, [pc, #56]	; (8020a78 <CheckProtocol_UART4+0x158>)
 8020a3e:	4811      	ldr	r0, [pc, #68]	; (8020a84 <CheckProtocol_UART4+0x164>)
 8020a40:	f00f fcea 	bl	8030418 <Print2Hex>
                    }

                    return ERR_BCC;                    
 8020a44:	2305      	movs	r3, #5
 8020a46:	e00a      	b.n	8020a5e <CheckProtocol_UART4+0x13e>
	 while (IUart_RecvByte_check(COM4,&rcvData))
 8020a48:	1dfb      	adds	r3, r7, #7
 8020a4a:	4619      	mov	r1, r3
 8020a4c:	2003      	movs	r0, #3
 8020a4e:	f005 f9ab 	bl	8025da8 <IUart_RecvByte_check>
 8020a52:	4603      	mov	r3, r0
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	f47f af67 	bne.w	8020928 <CheckProtocol_UART4+0x8>
                }
            }
        }
    }

    return FAIL;
 8020a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020a5e:	4618      	mov	r0, r3
 8020a60:	3708      	adds	r7, #8
 8020a62:	46bd      	mov	sp, r7
 8020a64:	bd80      	pop	{r7, pc}
 8020a66:	bf00      	nop
 8020a68:	2400011c 	.word	0x2400011c
 8020a6c:	24000120 	.word	0x24000120
 8020a70:	24000124 	.word	0x24000124
 8020a74:	24000125 	.word	0x24000125
 8020a78:	240000d4 	.word	0x240000d4
 8020a7c:	08031a54 	.word	0x08031a54
 8020a80:	08031a70 	.word	0x08031a70
 8020a84:	08031aa0 	.word	0x08031aa0

08020a88 <CheckProtocol_UART5>:
 *			    - else        : no command is received
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/
int CheckProtocol_UART5(void)
{
 8020a88:	b580      	push	{r7, lr}
 8020a8a:	b082      	sub	sp, #8
 8020a8c:	af00      	add	r7, sp, #0
    static BYTE BCC_U5 = 0;
    static int len_U5 = 0;
    static int packetLen_U5 = 0;
    BYTE rcvData;

    while (IUart_RecvByte_check(COM5, &rcvData))
 8020a8e:	e08f      	b.n	8020bb0 <CheckProtocol_UART5+0x128>
    {
        if (rcvData == 0xAA)
 8020a90:	79fb      	ldrb	r3, [r7, #7]
 8020a92:	2baa      	cmp	r3, #170	; 0xaa
 8020a94:	d10c      	bne.n	8020ab0 <CheckProtocol_UART5+0x28>
        {
        	packetLen_U5 = 0;
 8020a96:	4b4e      	ldr	r3, [pc, #312]	; (8020bd0 <CheckProtocol_UART5+0x148>)
 8020a98:	2200      	movs	r2, #0
 8020a9a:	601a      	str	r2, [r3, #0]
            len_U5 = 0;
 8020a9c:	4b4d      	ldr	r3, [pc, #308]	; (8020bd4 <CheckProtocol_UART5+0x14c>)
 8020a9e:	2200      	movs	r2, #0
 8020aa0:	601a      	str	r2, [r3, #0]
            BCC_U5 = 0;
 8020aa2:	4b4d      	ldr	r3, [pc, #308]	; (8020bd8 <CheckProtocol_UART5+0x150>)
 8020aa4:	2200      	movs	r2, #0
 8020aa6:	701a      	strb	r2, [r3, #0]
            rcvState_U5 = STATE_DATA_HEAD;
 8020aa8:	4b4c      	ldr	r3, [pc, #304]	; (8020bdc <CheckProtocol_UART5+0x154>)
 8020aaa:	2205      	movs	r2, #5
 8020aac:	701a      	strb	r2, [r3, #0]
 8020aae:	e07f      	b.n	8020bb0 <CheckProtocol_UART5+0x128>
        }
        else
        {
            switch (rcvState_U5)
 8020ab0:	4b4a      	ldr	r3, [pc, #296]	; (8020bdc <CheckProtocol_UART5+0x154>)
 8020ab2:	781b      	ldrb	r3, [r3, #0]
 8020ab4:	2b06      	cmp	r3, #6
 8020ab6:	d028      	beq.n	8020b0a <CheckProtocol_UART5+0x82>
 8020ab8:	2b06      	cmp	r3, #6
 8020aba:	dc79      	bgt.n	8020bb0 <CheckProtocol_UART5+0x128>
 8020abc:	2b02      	cmp	r3, #2
 8020abe:	d040      	beq.n	8020b42 <CheckProtocol_UART5+0xba>
 8020ac0:	2b05      	cmp	r3, #5
 8020ac2:	d175      	bne.n	8020bb0 <CheckProtocol_UART5+0x128>
            {
            case STATE_DATA_HEAD:
                rsp_U5.Buff[packetLen_U5++] = rcvData;
 8020ac4:	4b42      	ldr	r3, [pc, #264]	; (8020bd0 <CheckProtocol_UART5+0x148>)
 8020ac6:	681b      	ldr	r3, [r3, #0]
 8020ac8:	1c5a      	adds	r2, r3, #1
 8020aca:	4941      	ldr	r1, [pc, #260]	; (8020bd0 <CheckProtocol_UART5+0x148>)
 8020acc:	600a      	str	r2, [r1, #0]
 8020ace:	79f9      	ldrb	r1, [r7, #7]
 8020ad0:	4a43      	ldr	r2, [pc, #268]	; (8020be0 <CheckProtocol_UART5+0x158>)
 8020ad2:	54d1      	strb	r1, [r2, r3]
                BCC_U5 ^= rcvData;
 8020ad4:	4b40      	ldr	r3, [pc, #256]	; (8020bd8 <CheckProtocol_UART5+0x150>)
 8020ad6:	781a      	ldrb	r2, [r3, #0]
 8020ad8:	79fb      	ldrb	r3, [r7, #7]
 8020ada:	4053      	eors	r3, r2
 8020adc:	b2da      	uxtb	r2, r3
 8020ade:	4b3e      	ldr	r3, [pc, #248]	; (8020bd8 <CheckProtocol_UART5+0x150>)
 8020ae0:	701a      	strb	r2, [r3, #0]
                if (packetLen_U5 == 3)
 8020ae2:	4b3b      	ldr	r3, [pc, #236]	; (8020bd0 <CheckProtocol_UART5+0x148>)
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	2b03      	cmp	r3, #3
 8020ae8:	d162      	bne.n	8020bb0 <CheckProtocol_UART5+0x128>
                {
                	len_U5 = rcvData;
 8020aea:	79fb      	ldrb	r3, [r7, #7]
 8020aec:	461a      	mov	r2, r3
 8020aee:	4b39      	ldr	r3, [pc, #228]	; (8020bd4 <CheckProtocol_UART5+0x14c>)
 8020af0:	601a      	str	r2, [r3, #0]
                    if (len_U5 == 0)
 8020af2:	4b38      	ldr	r3, [pc, #224]	; (8020bd4 <CheckProtocol_UART5+0x14c>)
 8020af4:	681b      	ldr	r3, [r3, #0]
 8020af6:	2b00      	cmp	r3, #0
 8020af8:	d103      	bne.n	8020b02 <CheckProtocol_UART5+0x7a>
                    {
                    	rcvState_U5 = STATE_DATA_BCC;
 8020afa:	4b38      	ldr	r3, [pc, #224]	; (8020bdc <CheckProtocol_UART5+0x154>)
 8020afc:	2202      	movs	r2, #2
 8020afe:	701a      	strb	r2, [r3, #0]
 8020b00:	e056      	b.n	8020bb0 <CheckProtocol_UART5+0x128>
                    }
                    else
                    {
                    	rcvState_U5 = STATE_DATA_BODY;
 8020b02:	4b36      	ldr	r3, [pc, #216]	; (8020bdc <CheckProtocol_UART5+0x154>)
 8020b04:	2206      	movs	r2, #6
 8020b06:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 8020b08:	e052      	b.n	8020bb0 <CheckProtocol_UART5+0x128>
            case STATE_DATA_BODY:
            	rsp_U5.Buff[packetLen_U5++] = rcvData;
 8020b0a:	4b31      	ldr	r3, [pc, #196]	; (8020bd0 <CheckProtocol_UART5+0x148>)
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	1c5a      	adds	r2, r3, #1
 8020b10:	492f      	ldr	r1, [pc, #188]	; (8020bd0 <CheckProtocol_UART5+0x148>)
 8020b12:	600a      	str	r2, [r1, #0]
 8020b14:	79f9      	ldrb	r1, [r7, #7]
 8020b16:	4a32      	ldr	r2, [pc, #200]	; (8020be0 <CheckProtocol_UART5+0x158>)
 8020b18:	54d1      	strb	r1, [r2, r3]
                BCC_U5 ^= rcvData;
 8020b1a:	4b2f      	ldr	r3, [pc, #188]	; (8020bd8 <CheckProtocol_UART5+0x150>)
 8020b1c:	781a      	ldrb	r2, [r3, #0]
 8020b1e:	79fb      	ldrb	r3, [r7, #7]
 8020b20:	4053      	eors	r3, r2
 8020b22:	b2da      	uxtb	r2, r3
 8020b24:	4b2c      	ldr	r3, [pc, #176]	; (8020bd8 <CheckProtocol_UART5+0x150>)
 8020b26:	701a      	strb	r2, [r3, #0]
                len_U5--;
 8020b28:	4b2a      	ldr	r3, [pc, #168]	; (8020bd4 <CheckProtocol_UART5+0x14c>)
 8020b2a:	681b      	ldr	r3, [r3, #0]
 8020b2c:	3b01      	subs	r3, #1
 8020b2e:	4a29      	ldr	r2, [pc, #164]	; (8020bd4 <CheckProtocol_UART5+0x14c>)
 8020b30:	6013      	str	r3, [r2, #0]

                if (len_U5 == 0)
 8020b32:	4b28      	ldr	r3, [pc, #160]	; (8020bd4 <CheckProtocol_UART5+0x14c>)
 8020b34:	681b      	ldr	r3, [r3, #0]
 8020b36:	2b00      	cmp	r3, #0
 8020b38:	d13a      	bne.n	8020bb0 <CheckProtocol_UART5+0x128>
                {
                	rcvState_U5 = STATE_DATA_BCC;
 8020b3a:	4b28      	ldr	r3, [pc, #160]	; (8020bdc <CheckProtocol_UART5+0x154>)
 8020b3c:	2202      	movs	r2, #2
 8020b3e:	701a      	strb	r2, [r3, #0]
                }
                break;
 8020b40:	e036      	b.n	8020bb0 <CheckProtocol_UART5+0x128>
            case STATE_DATA_BCC:
            	rcvState_U5 = STATE_STX_WAIT;
 8020b42:	4b26      	ldr	r3, [pc, #152]	; (8020bdc <CheckProtocol_UART5+0x154>)
 8020b44:	2200      	movs	r2, #0
 8020b46:	701a      	strb	r2, [r3, #0]
                if (BCC_U5 == rcvData)
 8020b48:	4b23      	ldr	r3, [pc, #140]	; (8020bd8 <CheckProtocol_UART5+0x150>)
 8020b4a:	781a      	ldrb	r2, [r3, #0]
 8020b4c:	79fb      	ldrb	r3, [r7, #7]
 8020b4e:	429a      	cmp	r2, r3
 8020b50:	d116      	bne.n	8020b80 <CheckProtocol_UART5+0xf8>
                {
                    if (rsp_U5.d.dataLen != (BYTE)(packetLen_U5 - FRAME_HEADER_LEN))
 8020b52:	4b23      	ldr	r3, [pc, #140]	; (8020be0 <CheckProtocol_UART5+0x158>)
 8020b54:	789a      	ldrb	r2, [r3, #2]
 8020b56:	4b1e      	ldr	r3, [pc, #120]	; (8020bd0 <CheckProtocol_UART5+0x148>)
 8020b58:	681b      	ldr	r3, [r3, #0]
 8020b5a:	b2db      	uxtb	r3, r3
 8020b5c:	3b03      	subs	r3, #3
 8020b5e:	b2db      	uxtb	r3, r3
 8020b60:	429a      	cmp	r2, r3
 8020b62:	d00b      	beq.n	8020b7c <CheckProtocol_UART5+0xf4>
                    {
                    	 printf("U5 LENGTH ERR: %d - %d  \n", rsp_U5.d.dataLen, (packetLen_U5 - FRAME_HEADER_LEN));
 8020b64:	4b1e      	ldr	r3, [pc, #120]	; (8020be0 <CheckProtocol_UART5+0x158>)
 8020b66:	789b      	ldrb	r3, [r3, #2]
 8020b68:	4619      	mov	r1, r3
 8020b6a:	4b19      	ldr	r3, [pc, #100]	; (8020bd0 <CheckProtocol_UART5+0x148>)
 8020b6c:	681b      	ldr	r3, [r3, #0]
 8020b6e:	3b03      	subs	r3, #3
 8020b70:	461a      	mov	r2, r3
 8020b72:	481c      	ldr	r0, [pc, #112]	; (8020be4 <CheckProtocol_UART5+0x15c>)
 8020b74:	f008 fc3a 	bl	80293ec <printf_>
                        return ERR_WRONG_CMD_LEN;
 8020b78:	230a      	movs	r3, #10
 8020b7a:	e024      	b.n	8020bc6 <CheckProtocol_UART5+0x13e>
                    }
                    else
                    {
                        return SUCCESS;
 8020b7c:	2300      	movs	r3, #0
 8020b7e:	e022      	b.n	8020bc6 <CheckProtocol_UART5+0x13e>
                    }
                }
                else
                {
                    if (rsp_U5.d.command != 6)
 8020b80:	4b17      	ldr	r3, [pc, #92]	; (8020be0 <CheckProtocol_UART5+0x158>)
 8020b82:	781b      	ldrb	r3, [r3, #0]
 8020b84:	2b06      	cmp	r3, #6
 8020b86:	d011      	beq.n	8020bac <CheckProtocol_UART5+0x124>
                    {
                        printf("U5 BCC ERR. len: %02X, BCC: %02X, cmd: %02X  \n", rsp_U5.d.dataLen, BCC_U5, rsp_U5.d.command);
 8020b88:	4b15      	ldr	r3, [pc, #84]	; (8020be0 <CheckProtocol_UART5+0x158>)
 8020b8a:	789b      	ldrb	r3, [r3, #2]
 8020b8c:	4619      	mov	r1, r3
 8020b8e:	4b12      	ldr	r3, [pc, #72]	; (8020bd8 <CheckProtocol_UART5+0x150>)
 8020b90:	781b      	ldrb	r3, [r3, #0]
 8020b92:	461a      	mov	r2, r3
 8020b94:	4b12      	ldr	r3, [pc, #72]	; (8020be0 <CheckProtocol_UART5+0x158>)
 8020b96:	781b      	ldrb	r3, [r3, #0]
 8020b98:	4813      	ldr	r0, [pc, #76]	; (8020be8 <CheckProtocol_UART5+0x160>)
 8020b9a:	f008 fc27 	bl	80293ec <printf_>
                    Print2Hex("", rsp_U5.Buff, packetLen_U5);
 8020b9e:	4b0c      	ldr	r3, [pc, #48]	; (8020bd0 <CheckProtocol_UART5+0x148>)
 8020ba0:	681b      	ldr	r3, [r3, #0]
 8020ba2:	461a      	mov	r2, r3
 8020ba4:	490e      	ldr	r1, [pc, #56]	; (8020be0 <CheckProtocol_UART5+0x158>)
 8020ba6:	4811      	ldr	r0, [pc, #68]	; (8020bec <CheckProtocol_UART5+0x164>)
 8020ba8:	f00f fc36 	bl	8030418 <Print2Hex>
                    }

                    return ERR_BCC;
 8020bac:	2305      	movs	r3, #5
 8020bae:	e00a      	b.n	8020bc6 <CheckProtocol_UART5+0x13e>
    while (IUart_RecvByte_check(COM5, &rcvData))
 8020bb0:	1dfb      	adds	r3, r7, #7
 8020bb2:	4619      	mov	r1, r3
 8020bb4:	2004      	movs	r0, #4
 8020bb6:	f005 f8f7 	bl	8025da8 <IUart_RecvByte_check>
 8020bba:	4603      	mov	r3, r0
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	f47f af67 	bne.w	8020a90 <CheckProtocol_UART5+0x8>
                }
            }
        }
    }

    return FAIL;
 8020bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020bc6:	4618      	mov	r0, r3
 8020bc8:	3708      	adds	r7, #8
 8020bca:	46bd      	mov	sp, r7
 8020bcc:	bd80      	pop	{r7, pc}
 8020bce:	bf00      	nop
 8020bd0:	24000128 	.word	0x24000128
 8020bd4:	2400012c 	.word	0x2400012c
 8020bd8:	24000130 	.word	0x24000130
 8020bdc:	24000131 	.word	0x24000131
 8020be0:	240000e8 	.word	0x240000e8
 8020be4:	08031aa4 	.word	0x08031aa4
 8020be8:	08031ac0 	.word	0x08031ac0
 8020bec:	08031aa0 	.word	0x08031aa0

08020bf0 <ProcessCommand_Barrier>:
 *			- ERR_ILLEGAL_CMD  : command code is not defined
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/
int ProcessCommand_Barrier(bool isMain)
{
 8020bf0:	b580      	push	{r7, lr}
 8020bf2:	b084      	sub	sp, #16
 8020bf4:	af00      	add	r7, sp, #0
 8020bf6:	4603      	mov	r3, r0
 8020bf8:	71fb      	strb	r3, [r7, #7]
    BYTE cmd;
    if (isMain == TRUE)
 8020bfa:	79fb      	ldrb	r3, [r7, #7]
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	d003      	beq.n	8020c08 <ProcessCommand_Barrier+0x18>
    {
        cmd = rsp_U4.d.command;
 8020c00:	4b2d      	ldr	r3, [pc, #180]	; (8020cb8 <ProcessCommand_Barrier+0xc8>)
 8020c02:	781b      	ldrb	r3, [r3, #0]
 8020c04:	73fb      	strb	r3, [r7, #15]
 8020c06:	e002      	b.n	8020c0e <ProcessCommand_Barrier+0x1e>
    }
    else
    {
        cmd = rsp_U5.d.command;
 8020c08:	4b2c      	ldr	r3, [pc, #176]	; (8020cbc <ProcessCommand_Barrier+0xcc>)
 8020c0a:	781b      	ldrb	r3, [r3, #0]
 8020c0c:	73fb      	strb	r3, [r7, #15]
    }
    switch (cmd) // command
 8020c0e:	7bfb      	ldrb	r3, [r7, #15]
 8020c10:	2b04      	cmp	r3, #4
 8020c12:	dc37      	bgt.n	8020c84 <ProcessCommand_Barrier+0x94>
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	dc27      	bgt.n	8020c68 <ProcessCommand_Barrier+0x78>
 8020c18:	e046      	b.n	8020ca8 <ProcessCommand_Barrier+0xb8>
 8020c1a:	3b90      	subs	r3, #144	; 0x90
 8020c1c:	2b0f      	cmp	r3, #15
 8020c1e:	d843      	bhi.n	8020ca8 <ProcessCommand_Barrier+0xb8>
 8020c20:	a201      	add	r2, pc, #4	; (adr r2, 8020c28 <ProcessCommand_Barrier+0x38>)
 8020c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020c26:	bf00      	nop
 8020c28:	08020cad 	.word	0x08020cad
 8020c2c:	08020cad 	.word	0x08020cad
 8020c30:	08020c8f 	.word	0x08020c8f
 8020c34:	08020cad 	.word	0x08020cad
 8020c38:	08020cad 	.word	0x08020cad
 8020c3c:	08020cad 	.word	0x08020cad
 8020c40:	08020ca9 	.word	0x08020ca9
 8020c44:	08020ca9 	.word	0x08020ca9
 8020c48:	08020ca9 	.word	0x08020ca9
 8020c4c:	08020ca9 	.word	0x08020ca9
 8020c50:	08020ca9 	.word	0x08020ca9
 8020c54:	08020ca9 	.word	0x08020ca9
 8020c58:	08020cad 	.word	0x08020cad
 8020c5c:	08020cad 	.word	0x08020cad
 8020c60:	08020cad 	.word	0x08020cad
 8020c64:	08020cad 	.word	0x08020cad
 8020c68:	3b01      	subs	r3, #1
 8020c6a:	2b03      	cmp	r3, #3
 8020c6c:	d81c      	bhi.n	8020ca8 <ProcessCommand_Barrier+0xb8>
 8020c6e:	a201      	add	r2, pc, #4	; (adr r2, 8020c74 <ProcessCommand_Barrier+0x84>)
 8020c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020c74:	08020c99 	.word	0x08020c99
 8020c78:	08020c9d 	.word	0x08020c9d
 8020c7c:	08020ca1 	.word	0x08020ca1
 8020c80:	08020ca5 	.word	0x08020ca5
 8020c84:	2b9f      	cmp	r3, #159	; 0x9f
 8020c86:	dc0f      	bgt.n	8020ca8 <ProcessCommand_Barrier+0xb8>
 8020c88:	2b90      	cmp	r3, #144	; 0x90
 8020c8a:	dac6      	bge.n	8020c1a <ProcessCommand_Barrier+0x2a>
 8020c8c:	e00c      	b.n	8020ca8 <ProcessCommand_Barrier+0xb8>
        break;
    case CMD_GET_PARAM_SUB:
        // CMDGetGCUOpMode();
        break;
    case CMD_GET_STATUS_MAIN:
        Brr_Res_Status(isMain);
 8020c8e:	79fb      	ldrb	r3, [r7, #7]
 8020c90:	4618      	mov	r0, r3
 8020c92:	f7ff fd95 	bl	80207c0 <Brr_Res_Status>
        break;
 8020c96:	e00a      	b.n	8020cae <ProcessCommand_Barrier+0xbe>
        break;
    case CMD_GET_IAP_VERSION_SUB:
        // CMDGetGCUOpMode();
        break;
    case CMD_ACK:
        return SUCCESS;
 8020c98:	2300      	movs	r3, #0
 8020c9a:	e009      	b.n	8020cb0 <ProcessCommand_Barrier+0xc0>
    case CMD_NAK:
        return SUCCESS;
 8020c9c:	2300      	movs	r3, #0
 8020c9e:	e007      	b.n	8020cb0 <ProcessCommand_Barrier+0xc0>
    case CMD_MSG_ERR:
        return SUCCESS;
 8020ca0:	2300      	movs	r3, #0
 8020ca2:	e005      	b.n	8020cb0 <ProcessCommand_Barrier+0xc0>
    case CMD_MSG_DUP:
        return SUCCESS;
 8020ca4:	2300      	movs	r3, #0
 8020ca6:	e003      	b.n	8020cb0 <ProcessCommand_Barrier+0xc0>
    default:
        return SUCCESS;
 8020ca8:	2300      	movs	r3, #0
 8020caa:	e001      	b.n	8020cb0 <ProcessCommand_Barrier+0xc0>
        break;
 8020cac:	bf00      	nop
    }

    return SUCCESS;
 8020cae:	2300      	movs	r3, #0
}
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	3710      	adds	r7, #16
 8020cb4:	46bd      	mov	sp, r7
 8020cb6:	bd80      	pop	{r7, pc}
 8020cb8:	240000d4 	.word	0x240000d4
 8020cbc:	240000e8 	.word	0x240000e8

08020cc0 <ProcessComm_Barrier>:
 * comments: it checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it makes action refer to the command
 *           from Host.
 *******************************************************************************/
void ProcessComm_Barrier(void)
{
 8020cc0:	b580      	push	{r7, lr}
 8020cc2:	b082      	sub	sp, #8
 8020cc4:	af00      	add	r7, sp, #0
    // Changed an order. Slave barrier first.
    int nError = CheckProtocol_UART5();
 8020cc6:	f7ff fedf 	bl	8020a88 <CheckProtocol_UART5>
 8020cca:	6078      	str	r0, [r7, #4]
    if (nError == SUCCESS)
 8020ccc:	687b      	ldr	r3, [r7, #4]
 8020cce:	2b00      	cmp	r3, #0
 8020cd0:	d108      	bne.n	8020ce4 <ProcessComm_Barrier+0x24>
    {
        if (ProcessCommand_Barrier(FALSE) != SUCCESS)
 8020cd2:	2000      	movs	r0, #0
 8020cd4:	f7ff ff8c 	bl	8020bf0 <ProcessCommand_Barrier>
 8020cd8:	4603      	mov	r3, r0
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d002      	beq.n	8020ce4 <ProcessComm_Barrier+0x24>
        {
        	printf("UART5 ERR  \n");
 8020cde:	480b      	ldr	r0, [pc, #44]	; (8020d0c <ProcessComm_Barrier+0x4c>)
 8020ce0:	f008 fb84 	bl	80293ec <printf_>
        }
    }

    nError = CheckProtocol_UART4();
 8020ce4:	f7ff fe1c 	bl	8020920 <CheckProtocol_UART4>
 8020ce8:	6078      	str	r0, [r7, #4]
    if (nError == SUCCESS)
 8020cea:	687b      	ldr	r3, [r7, #4]
 8020cec:	2b00      	cmp	r3, #0
 8020cee:	d108      	bne.n	8020d02 <ProcessComm_Barrier+0x42>
    {
        if (ProcessCommand_Barrier(TRUE) != SUCCESS)
 8020cf0:	2001      	movs	r0, #1
 8020cf2:	f7ff ff7d 	bl	8020bf0 <ProcessCommand_Barrier>
 8020cf6:	4603      	mov	r3, r0
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	d002      	beq.n	8020d02 <ProcessComm_Barrier+0x42>
        {
            // TODO: Do we need the retry logic?
        	printf("UART4 ERR  \n");
 8020cfc:	4804      	ldr	r0, [pc, #16]	; (8020d10 <ProcessComm_Barrier+0x50>)
 8020cfe:	f008 fb75 	bl	80293ec <printf_>
        }
    }
}
 8020d02:	bf00      	nop
 8020d04:	3708      	adds	r7, #8
 8020d06:	46bd      	mov	sp, r7
 8020d08:	bd80      	pop	{r7, pc}
 8020d0a:	bf00      	nop
 8020d0c:	08031af0 	.word	0x08031af0
 8020d10:	08031b00 	.word	0x08031b00

08020d14 <U4_TxWait>:
	  LL_USART_TransmitData8(UART5, c);
}
*/

void U4_TxWait(void)
{
 8020d14:	b480      	push	{r7}
 8020d16:	af00      	add	r7, sp, #0
	while ((iUartTable[COM4].hUart->Instance->ISR & UART_FLAG_TXE) == RESET)
 8020d18:	bf00      	nop
 8020d1a:	4b07      	ldr	r3, [pc, #28]	; (8020d38 <U4_TxWait+0x24>)
 8020d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020d1e:	681b      	ldr	r3, [r3, #0]
 8020d20:	69db      	ldr	r3, [r3, #28]
 8020d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	d0f7      	beq.n	8020d1a <U4_TxWait+0x6>
		;
}
 8020d2a:	bf00      	nop
 8020d2c:	bf00      	nop
 8020d2e:	46bd      	mov	sp, r7
 8020d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d34:	4770      	bx	lr
 8020d36:	bf00      	nop
 8020d38:	24001940 	.word	0x24001940

08020d3c <U5_TxWait>:

void U5_TxWait(void)
{
 8020d3c:	b480      	push	{r7}
 8020d3e:	af00      	add	r7, sp, #0
	while ((iUartTable[COM5].hUart->Instance->ISR & UART_FLAG_TXE) == RESET)
 8020d40:	bf00      	nop
 8020d42:	4b07      	ldr	r3, [pc, #28]	; (8020d60 <U5_TxWait+0x24>)
 8020d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020d46:	681b      	ldr	r3, [r3, #0]
 8020d48:	69db      	ldr	r3, [r3, #28]
 8020d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	d0f7      	beq.n	8020d42 <U5_TxWait+0x6>
		;
}
 8020d52:	bf00      	nop
 8020d54:	bf00      	nop
 8020d56:	46bd      	mov	sp, r7
 8020d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d5c:	4770      	bx	lr
 8020d5e:	bf00      	nop
 8020d60:	24001940 	.word	0x24001940

08020d64 <U4_Putch>:

void U4_Putch(BYTE c)
{
 8020d64:	b580      	push	{r7, lr}
 8020d66:	b082      	sub	sp, #8
 8020d68:	af00      	add	r7, sp, #0
 8020d6a:	4603      	mov	r3, r0
 8020d6c:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM4, (uint8_t)c);
 8020d6e:	79fb      	ldrb	r3, [r7, #7]
 8020d70:	4619      	mov	r1, r3
 8020d72:	2003      	movs	r0, #3
 8020d74:	f004 ff86 	bl	8025c84 <IUart_SendByte>
}
 8020d78:	bf00      	nop
 8020d7a:	3708      	adds	r7, #8
 8020d7c:	46bd      	mov	sp, r7
 8020d7e:	bd80      	pop	{r7, pc}

08020d80 <U5_Putch>:

void U5_Putch(BYTE c)
{
 8020d80:	b580      	push	{r7, lr}
 8020d82:	b082      	sub	sp, #8
 8020d84:	af00      	add	r7, sp, #0
 8020d86:	4603      	mov	r3, r0
 8020d88:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM5, (uint8_t)c);
 8020d8a:	79fb      	ldrb	r3, [r7, #7]
 8020d8c:	4619      	mov	r1, r3
 8020d8e:	2004      	movs	r0, #4
 8020d90:	f004 ff78 	bl	8025c84 <IUart_SendByte>
}
 8020d94:	bf00      	nop
 8020d96:	3708      	adds	r7, #8
 8020d98:	46bd      	mov	sp, r7
 8020d9a:	bd80      	pop	{r7, pc}

08020d9c <SetDefaultOpMode>:
TTIMER timerBarrierCmdWait;

extern T_PASS_SEN_SWING psenNewSwing;
/* Setting Functions ------------------------------------------------------*/
void SetDefaultOpMode(void)
{
 8020d9c:	b480      	push	{r7}
 8020d9e:	af00      	add	r7, sp, #0
    gCurGCUOpMode.bServiceMode_EN = NO_SERVICE;
 8020da0:	4b0a      	ldr	r3, [pc, #40]	; (8020dcc <SetDefaultOpMode+0x30>)
 8020da2:	2200      	movs	r2, #0
 8020da4:	701a      	strb	r2, [r3, #0]
    gCurGCUOpMode.bServiceMode_EX = NO_SERVICE;
 8020da6:	4b09      	ldr	r3, [pc, #36]	; (8020dcc <SetDefaultOpMode+0x30>)
 8020da8:	2200      	movs	r2, #0
 8020daa:	705a      	strb	r2, [r3, #1]
    gCurGCUOpMode.bEmergencyMaint = MODE_NONE;
 8020dac:	4b07      	ldr	r3, [pc, #28]	; (8020dcc <SetDefaultOpMode+0x30>)
 8020dae:	2200      	movs	r2, #0
 8020db0:	709a      	strb	r2, [r3, #2]
    gCurGCUOpMode.bFlapDoorMode = FD_MODE_OPEN;
 8020db2:	4b06      	ldr	r3, [pc, #24]	; (8020dcc <SetDefaultOpMode+0x30>)
 8020db4:	2201      	movs	r2, #1
 8020db6:	70da      	strb	r2, [r3, #3]
 8020db8:	4b04      	ldr	r3, [pc, #16]	; (8020dcc <SetDefaultOpMode+0x30>)
 8020dba:	681b      	ldr	r3, [r3, #0]
 8020dbc:	461a      	mov	r2, r3

    memcpy(&gNewGCUOpMode, &gCurGCUOpMode, sizeof(T_GCU_OP_MODE));
 8020dbe:	4b04      	ldr	r3, [pc, #16]	; (8020dd0 <SetDefaultOpMode+0x34>)
 8020dc0:	601a      	str	r2, [r3, #0]
}
 8020dc2:	bf00      	nop
 8020dc4:	46bd      	mov	sp, r7
 8020dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dca:	4770      	bx	lr
 8020dcc:	240004b4 	.word	0x240004b4
 8020dd0:	240004b8 	.word	0x240004b8

08020dd4 <SetDefaultParameter>:

void SetDefaultParameter(void)
{
 8020dd4:	b480      	push	{r7}
 8020dd6:	af00      	add	r7, sp, #0
    gGCUParameter.bPassageType = PASSAGE_TYPE_S;
 8020dd8:	4b1a      	ldr	r3, [pc, #104]	; (8020e44 <SetDefaultParameter+0x70>)
 8020dda:	2253      	movs	r2, #83	; 0x53
 8020ddc:	701a      	strb	r2, [r3, #0]
    gGCUParameter.bPassageMode = PASS_MODE_EASY;
 8020dde:	4b19      	ldr	r3, [pc, #100]	; (8020e44 <SetDefaultParameter+0x70>)
 8020de0:	2201      	movs	r2, #1
 8020de2:	705a      	strb	r2, [r3, #1]
    gGCUParameter.bAlarmMode = ALARM_MODE_POLL;
 8020de4:	4b17      	ldr	r3, [pc, #92]	; (8020e44 <SetDefaultParameter+0x70>)
 8020de6:	2200      	movs	r2, #0
 8020de8:	709a      	strb	r2, [r3, #2]
    gGCUParameter.bAuthType = AUTH_TYPE_TTL;
 8020dea:	4b16      	ldr	r3, [pc, #88]	; (8020e44 <SetDefaultParameter+0x70>)
 8020dec:	2201      	movs	r2, #1
 8020dee:	70da      	strb	r2, [r3, #3]
    gGCUParameter.bAuthTimeOut = DEFAULT_AUTH_TIMEOUT;
 8020df0:	4b14      	ldr	r3, [pc, #80]	; (8020e44 <SetDefaultParameter+0x70>)
 8020df2:	2214      	movs	r2, #20
 8020df4:	711a      	strb	r2, [r3, #4]
    gGCUParameter.bCriticalZone = ALARM_ZONE_NONE;
 8020df6:	4b13      	ldr	r3, [pc, #76]	; (8020e44 <SetDefaultParameter+0x70>)
 8020df8:	2200      	movs	r2, #0
 8020dfa:	715a      	strb	r2, [r3, #5]
    gGCUParameter.bCounterZone = ALARM_ZONE_NONE;
 8020dfc:	4b11      	ldr	r3, [pc, #68]	; (8020e44 <SetDefaultParameter+0x70>)
 8020dfe:	2200      	movs	r2, #0
 8020e00:	719a      	strb	r2, [r3, #6]
    gGCUParameter.bEMGTimeout = DEFAULT_EMG_TIMEOUT;
 8020e02:	4b10      	ldr	r3, [pc, #64]	; (8020e44 <SetDefaultParameter+0x70>)
 8020e04:	222d      	movs	r2, #45	; 0x2d
 8020e06:	71da      	strb	r2, [r3, #7]
    gGCUParameter.bSensorBlockTimeout = DEFAULT_SENSOR_BLOCK_TIMEOUT;
 8020e08:	4b0e      	ldr	r3, [pc, #56]	; (8020e44 <SetDefaultParameter+0x70>)
 8020e0a:	22b4      	movs	r2, #180	; 0xb4
 8020e0c:	721a      	strb	r2, [r3, #8]
    gGCUParameter.bBarrierOpenTimeout = DEFAULT_BARRIER_OPEN_TIMEOUT;
 8020e0e:	4b0d      	ldr	r3, [pc, #52]	; (8020e44 <SetDefaultParameter+0x70>)
 8020e10:	2203      	movs	r2, #3
 8020e12:	725a      	strb	r2, [r3, #9]
    gGCUParameter.bAutoEmergency = ON;
 8020e14:	4b0b      	ldr	r3, [pc, #44]	; (8020e44 <SetDefaultParameter+0x70>)
 8020e16:	2201      	movs	r2, #1
 8020e18:	731a      	strb	r2, [r3, #12]
    gGCUParameter.bCheckChild = ON;
 8020e1a:	4b0a      	ldr	r3, [pc, #40]	; (8020e44 <SetDefaultParameter+0x70>)
 8020e1c:	2201      	movs	r2, #1
 8020e1e:	735a      	strb	r2, [r3, #13]
    gGCUParameter.bAlarmTimeout = DEFAULT_ALARM_TIMEOUT;
 8020e20:	4b08      	ldr	r3, [pc, #32]	; (8020e44 <SetDefaultParameter+0x70>)
 8020e22:	2205      	movs	r2, #5
 8020e24:	729a      	strb	r2, [r3, #10]
    gGCUParameter.bGateType = STANDARD;
 8020e26:	4b07      	ldr	r3, [pc, #28]	; (8020e44 <SetDefaultParameter+0x70>)
 8020e28:	2200      	movs	r2, #0
 8020e2a:	739a      	strb	r2, [r3, #14]

    gdwTimeoutSafety = SAFETY_TIMEOUT_STD;
 8020e2c:	4b06      	ldr	r3, [pc, #24]	; (8020e48 <SetDefaultParameter+0x74>)
 8020e2e:	220a      	movs	r2, #10
 8020e30:	601a      	str	r2, [r3, #0]
    gdwTimeoutLuggage = LUGGAGE_LIMIT_STD;
 8020e32:	4b06      	ldr	r3, [pc, #24]	; (8020e4c <SetDefaultParameter+0x78>)
 8020e34:	2296      	movs	r2, #150	; 0x96
 8020e36:	601a      	str	r2, [r3, #0]
}
 8020e38:	bf00      	nop
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e40:	4770      	bx	lr
 8020e42:	bf00      	nop
 8020e44:	24000480 	.word	0x24000480
 8020e48:	24000148 	.word	0x24000148
 8020e4c:	2400014c 	.word	0x2400014c

08020e50 <SetDefaultStatus>:

void SetDefaultStatus(void)
{
 8020e50:	b480      	push	{r7}
 8020e52:	af00      	add	r7, sp, #0
    gGCUStatus.bAuthCount_EN = 0;
 8020e54:	4b0d      	ldr	r3, [pc, #52]	; (8020e8c <SetDefaultStatus+0x3c>)
 8020e56:	2200      	movs	r2, #0
 8020e58:	711a      	strb	r2, [r3, #4]
    gGCUStatus.bAuthCount_EX = 0;
 8020e5a:	4b0c      	ldr	r3, [pc, #48]	; (8020e8c <SetDefaultStatus+0x3c>)
 8020e5c:	2200      	movs	r2, #0
 8020e5e:	715a      	strb	r2, [r3, #5]
    gGCUStatus.PassageAlarm.bAlarm = 0;
 8020e60:	4b0a      	ldr	r3, [pc, #40]	; (8020e8c <SetDefaultStatus+0x3c>)
 8020e62:	2200      	movs	r2, #0
 8020e64:	721a      	strb	r2, [r3, #8]
    gGCUStatus.ModuleAlarm.bAlarm = 0;
 8020e66:	4b09      	ldr	r3, [pc, #36]	; (8020e8c <SetDefaultStatus+0x3c>)
 8020e68:	2200      	movs	r2, #0
 8020e6a:	731a      	strb	r2, [r3, #12]
    gGCUStatus.bMaintenanceDoorSw = (RD_SWITCH & MASK_SDOOR); // door mask 0xff
 8020e6c:	4b08      	ldr	r3, [pc, #32]	; (8020e90 <SetDefaultStatus+0x40>)
 8020e6e:	781b      	ldrb	r3, [r3, #0]
 8020e70:	b2da      	uxtb	r2, r3
 8020e72:	4b06      	ldr	r3, [pc, #24]	; (8020e8c <SetDefaultStatus+0x3c>)
 8020e74:	745a      	strb	r2, [r3, #17]
    gGCUStatus.bUPSStatus = 0x06;
 8020e76:	4b05      	ldr	r3, [pc, #20]	; (8020e8c <SetDefaultStatus+0x3c>)
 8020e78:	2206      	movs	r2, #6
 8020e7a:	749a      	strb	r2, [r3, #18]
    gGCUStatus.bDoorForcedOpen = OFF;
 8020e7c:	4b03      	ldr	r3, [pc, #12]	; (8020e8c <SetDefaultStatus+0x3c>)
 8020e7e:	2200      	movs	r2, #0
 8020e80:	755a      	strb	r2, [r3, #21]
}
 8020e82:	bf00      	nop
 8020e84:	46bd      	mov	sp, r7
 8020e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e8a:	4770      	bx	lr
 8020e8c:	24000490 	.word	0x24000490
 8020e90:	60000300 	.word	0x60000300

08020e94 <ApplyStatusMode>:

void ApplyStatusMode(void)
{
 8020e94:	b480      	push	{r7}
 8020e96:	af00      	add	r7, sp, #0
    gGCUStatus.ModeStatus.b.nServiceMode_EN = gCurGCUOpMode.bServiceMode_EN;
 8020e98:	4b18      	ldr	r3, [pc, #96]	; (8020efc <ApplyStatusMode+0x68>)
 8020e9a:	781b      	ldrb	r3, [r3, #0]
 8020e9c:	f003 0303 	and.w	r3, r3, #3
 8020ea0:	b2d9      	uxtb	r1, r3
 8020ea2:	4a17      	ldr	r2, [pc, #92]	; (8020f00 <ApplyStatusMode+0x6c>)
 8020ea4:	7813      	ldrb	r3, [r2, #0]
 8020ea6:	f361 0301 	bfi	r3, r1, #0, #2
 8020eaa:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nServiceMode_EX = gCurGCUOpMode.bServiceMode_EX;
 8020eac:	4b13      	ldr	r3, [pc, #76]	; (8020efc <ApplyStatusMode+0x68>)
 8020eae:	785b      	ldrb	r3, [r3, #1]
 8020eb0:	f003 0303 	and.w	r3, r3, #3
 8020eb4:	b2d9      	uxtb	r1, r3
 8020eb6:	4a12      	ldr	r2, [pc, #72]	; (8020f00 <ApplyStatusMode+0x6c>)
 8020eb8:	7813      	ldrb	r3, [r2, #0]
 8020eba:	f361 0383 	bfi	r3, r1, #2, #2
 8020ebe:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nEmergencyMode = (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY);
 8020ec0:	4b0e      	ldr	r3, [pc, #56]	; (8020efc <ApplyStatusMode+0x68>)
 8020ec2:	789b      	ldrb	r3, [r3, #2]
 8020ec4:	f003 0303 	and.w	r3, r3, #3
 8020ec8:	b2d9      	uxtb	r1, r3
 8020eca:	4a0d      	ldr	r2, [pc, #52]	; (8020f00 <ApplyStatusMode+0x6c>)
 8020ecc:	7813      	ldrb	r3, [r2, #0]
 8020ece:	f361 1305 	bfi	r3, r1, #4, #2
 8020ed2:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nMaintenanceMode = (gCurGCUOpMode.bEmergencyMaint << 7) & 1;
 8020ed4:	4a0a      	ldr	r2, [pc, #40]	; (8020f00 <ApplyStatusMode+0x6c>)
 8020ed6:	7813      	ldrb	r3, [r2, #0]
 8020ed8:	f36f 1386 	bfc	r3, #6, #1
 8020edc:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nFlapDoorMode = gCurGCUOpMode.bFlapDoorMode;
 8020ede:	4b07      	ldr	r3, [pc, #28]	; (8020efc <ApplyStatusMode+0x68>)
 8020ee0:	78db      	ldrb	r3, [r3, #3]
 8020ee2:	f003 0301 	and.w	r3, r3, #1
 8020ee6:	b2d9      	uxtb	r1, r3
 8020ee8:	4a05      	ldr	r2, [pc, #20]	; (8020f00 <ApplyStatusMode+0x6c>)
 8020eea:	7813      	ldrb	r3, [r2, #0]
 8020eec:	f361 13c7 	bfi	r3, r1, #7, #1
 8020ef0:	7013      	strb	r3, [r2, #0]
}
 8020ef2:	bf00      	nop
 8020ef4:	46bd      	mov	sp, r7
 8020ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020efa:	4770      	bx	lr
 8020efc:	240004b4 	.word	0x240004b4
 8020f00:	24000490 	.word	0x24000490

08020f04 <SetNewOpMode>:

void SetNewOpMode(T_GCU_OP_MODE *pNewMode)
{
 8020f04:	b580      	push	{r7, lr}
 8020f06:	b082      	sub	sp, #8
 8020f08:	af00      	add	r7, sp, #0
 8020f0a:	6078      	str	r0, [r7, #4]
    printf(" [SetNewOpMode] Req mode EX:%02X/EN:%02X/EMG:%02X\n", pNewMode->bServiceMode_EX, pNewMode->bServiceMode_EN, pNewMode->bEmergencyMaint);
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	785b      	ldrb	r3, [r3, #1]
 8020f10:	4619      	mov	r1, r3
 8020f12:	687b      	ldr	r3, [r7, #4]
 8020f14:	781b      	ldrb	r3, [r3, #0]
 8020f16:	461a      	mov	r2, r3
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	789b      	ldrb	r3, [r3, #2]
 8020f1c:	481b      	ldr	r0, [pc, #108]	; (8020f8c <SetNewOpMode+0x88>)
 8020f1e:	f008 fa65 	bl	80293ec <printf_>

    if (pNewMode->bServiceMode_EN > FREE_SERVICE)
 8020f22:	687b      	ldr	r3, [r7, #4]
 8020f24:	781b      	ldrb	r3, [r3, #0]
 8020f26:	2b02      	cmp	r3, #2
 8020f28:	d903      	bls.n	8020f32 <SetNewOpMode+0x2e>
        pNewMode->bServiceMode_EN = gCurGCUOpMode.bServiceMode_EN;
 8020f2a:	4b19      	ldr	r3, [pc, #100]	; (8020f90 <SetNewOpMode+0x8c>)
 8020f2c:	781a      	ldrb	r2, [r3, #0]
 8020f2e:	687b      	ldr	r3, [r7, #4]
 8020f30:	701a      	strb	r2, [r3, #0]

    if (pNewMode->bServiceMode_EX > FREE_SERVICE)
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	785b      	ldrb	r3, [r3, #1]
 8020f36:	2b02      	cmp	r3, #2
 8020f38:	d903      	bls.n	8020f42 <SetNewOpMode+0x3e>
        pNewMode->bServiceMode_EX = gCurGCUOpMode.bServiceMode_EX;
 8020f3a:	4b15      	ldr	r3, [pc, #84]	; (8020f90 <SetNewOpMode+0x8c>)
 8020f3c:	785a      	ldrb	r2, [r3, #1]
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	705a      	strb	r2, [r3, #1]

    if (pNewMode->bFlapDoorMode > FD_MODE_OPEN)
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	78db      	ldrb	r3, [r3, #3]
 8020f46:	2b01      	cmp	r3, #1
 8020f48:	d903      	bls.n	8020f52 <SetNewOpMode+0x4e>
        pNewMode->bFlapDoorMode = gCurGCUOpMode.bFlapDoorMode;
 8020f4a:	4b11      	ldr	r3, [pc, #68]	; (8020f90 <SetNewOpMode+0x8c>)
 8020f4c:	78da      	ldrb	r2, [r3, #3]
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	70da      	strb	r2, [r3, #3]
 8020f52:	687b      	ldr	r3, [r7, #4]
 8020f54:	681b      	ldr	r3, [r3, #0]
 8020f56:	461a      	mov	r2, r3

    memcpy(&gNewGCUOpMode, pNewMode, sizeof(T_GCU_OP_MODE));
 8020f58:	4b0e      	ldr	r3, [pc, #56]	; (8020f94 <SetNewOpMode+0x90>)
 8020f5a:	601a      	str	r2, [r3, #0]

    if (gNewGCUOpMode.bEmergencyMaint)
 8020f5c:	4b0d      	ldr	r3, [pc, #52]	; (8020f94 <SetNewOpMode+0x90>)
 8020f5e:	789b      	ldrb	r3, [r3, #2]
 8020f60:	2b00      	cmp	r3, #0
 8020f62:	d00c      	beq.n	8020f7e <SetNewOpMode+0x7a>
 8020f64:	4b0b      	ldr	r3, [pc, #44]	; (8020f94 <SetNewOpMode+0x90>)
 8020f66:	681b      	ldr	r3, [r3, #0]
 8020f68:	461a      	mov	r2, r3
    {
        // If emergency or maint mode, apply new mode immediately.
        memcpy(&gCurGCUOpMode, &gNewGCUOpMode, sizeof(T_GCU_OP_MODE));
 8020f6a:	4b09      	ldr	r3, [pc, #36]	; (8020f90 <SetNewOpMode+0x8c>)
 8020f6c:	601a      	str	r2, [r3, #0]
        ApplyStatusMode();
 8020f6e:	f7ff ff91 	bl	8020e94 <ApplyStatusMode>
        InitPassageMode();
 8020f72:	f001 f9e1 	bl	8022338 <InitPassageMode>
        gfModeChanged = FALSE;
 8020f76:	4b08      	ldr	r3, [pc, #32]	; (8020f98 <SetNewOpMode+0x94>)
 8020f78:	2200      	movs	r2, #0
 8020f7a:	701a      	strb	r2, [r3, #0]
    else
    {
        // If in service mode, decide to apply new mode by passenger check logic (refer to CheckModeChange()).
        gfModeChanged = TRUE;
    }
}
 8020f7c:	e002      	b.n	8020f84 <SetNewOpMode+0x80>
        gfModeChanged = TRUE;
 8020f7e:	4b06      	ldr	r3, [pc, #24]	; (8020f98 <SetNewOpMode+0x94>)
 8020f80:	2201      	movs	r2, #1
 8020f82:	701a      	strb	r2, [r3, #0]
}
 8020f84:	bf00      	nop
 8020f86:	3708      	adds	r7, #8
 8020f88:	46bd      	mov	sp, r7
 8020f8a:	bd80      	pop	{r7, pc}
 8020f8c:	08031b10 	.word	0x08031b10
 8020f90:	240004b4 	.word	0x240004b4
 8020f94:	240004b8 	.word	0x240004b8
 8020f98:	2400013c 	.word	0x2400013c

08020f9c <CheckModeChange>:

void CheckModeChange(void)
{
 8020f9c:	b580      	push	{r7, lr}
 8020f9e:	af00      	add	r7, sp, #0
    if (gfModeChanged == TRUE && (gGCUStatus.bAuthCount_EN == 0) && (gGCUStatus.bAuthCount_EX == 0))
 8020fa0:	4b16      	ldr	r3, [pc, #88]	; (8020ffc <CheckModeChange+0x60>)
 8020fa2:	781b      	ldrb	r3, [r3, #0]
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	d027      	beq.n	8020ff8 <CheckModeChange+0x5c>
 8020fa8:	4b15      	ldr	r3, [pc, #84]	; (8021000 <CheckModeChange+0x64>)
 8020faa:	791b      	ldrb	r3, [r3, #4]
 8020fac:	b2db      	uxtb	r3, r3
 8020fae:	2b00      	cmp	r3, #0
 8020fb0:	d122      	bne.n	8020ff8 <CheckModeChange+0x5c>
 8020fb2:	4b13      	ldr	r3, [pc, #76]	; (8021000 <CheckModeChange+0x64>)
 8020fb4:	795b      	ldrb	r3, [r3, #5]
 8020fb6:	b2db      	uxtb	r3, r3
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	d11d      	bne.n	8020ff8 <CheckModeChange+0x5c>
    {
        printf(" [CheckModeChange] Old mode EX:%02X/EN:%02X \n", gCurGCUOpMode.bServiceMode_EX, gCurGCUOpMode.bServiceMode_EN);
 8020fbc:	4b11      	ldr	r3, [pc, #68]	; (8021004 <CheckModeChange+0x68>)
 8020fbe:	785b      	ldrb	r3, [r3, #1]
 8020fc0:	4619      	mov	r1, r3
 8020fc2:	4b10      	ldr	r3, [pc, #64]	; (8021004 <CheckModeChange+0x68>)
 8020fc4:	781b      	ldrb	r3, [r3, #0]
 8020fc6:	461a      	mov	r2, r3
 8020fc8:	480f      	ldr	r0, [pc, #60]	; (8021008 <CheckModeChange+0x6c>)
 8020fca:	f008 fa0f 	bl	80293ec <printf_>
        printf(" [CheckModeChange] New mode EX:%02X/EN:%02X \n", gNewGCUOpMode.bServiceMode_EX, gNewGCUOpMode.bServiceMode_EN);
 8020fce:	4b0f      	ldr	r3, [pc, #60]	; (802100c <CheckModeChange+0x70>)
 8020fd0:	785b      	ldrb	r3, [r3, #1]
 8020fd2:	4619      	mov	r1, r3
 8020fd4:	4b0d      	ldr	r3, [pc, #52]	; (802100c <CheckModeChange+0x70>)
 8020fd6:	781b      	ldrb	r3, [r3, #0]
 8020fd8:	461a      	mov	r2, r3
 8020fda:	480d      	ldr	r0, [pc, #52]	; (8021010 <CheckModeChange+0x74>)
 8020fdc:	f008 fa06 	bl	80293ec <printf_>
    	gfModeChanged = FALSE;
 8020fe0:	4b06      	ldr	r3, [pc, #24]	; (8020ffc <CheckModeChange+0x60>)
 8020fe2:	2200      	movs	r2, #0
 8020fe4:	701a      	strb	r2, [r3, #0]
 8020fe6:	4b09      	ldr	r3, [pc, #36]	; (802100c <CheckModeChange+0x70>)
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	461a      	mov	r2, r3
        memcpy(&gCurGCUOpMode, &gNewGCUOpMode, sizeof(T_GCU_OP_MODE));
 8020fec:	4b05      	ldr	r3, [pc, #20]	; (8021004 <CheckModeChange+0x68>)
 8020fee:	601a      	str	r2, [r3, #0]
        ApplyStatusMode();
 8020ff0:	f7ff ff50 	bl	8020e94 <ApplyStatusMode>
        InitPassageMode();
 8020ff4:	f001 f9a0 	bl	8022338 <InitPassageMode>
    }
}
 8020ff8:	bf00      	nop
 8020ffa:	bd80      	pop	{r7, pc}
 8020ffc:	2400013c 	.word	0x2400013c
 8021000:	24000490 	.word	0x24000490
 8021004:	240004b4 	.word	0x240004b4
 8021008:	08031b44 	.word	0x08031b44
 802100c:	240004b8 	.word	0x240004b8
 8021010:	08031b74 	.word	0x08031b74

08021014 <GetCurrentOpMode>:

void GetCurrentOpMode(T_GCU_OP_MODE *pCurMode)
{
 8021014:	b480      	push	{r7}
 8021016:	b083      	sub	sp, #12
 8021018:	af00      	add	r7, sp, #0
 802101a:	6078      	str	r0, [r7, #4]
 802101c:	4b05      	ldr	r3, [pc, #20]	; (8021034 <GetCurrentOpMode+0x20>)
 802101e:	681b      	ldr	r3, [r3, #0]
 8021020:	461a      	mov	r2, r3
    memcpy(pCurMode, &gCurGCUOpMode, sizeof(T_GCU_OP_MODE));
 8021022:	687b      	ldr	r3, [r7, #4]
 8021024:	601a      	str	r2, [r3, #0]
}
 8021026:	bf00      	nop
 8021028:	370c      	adds	r7, #12
 802102a:	46bd      	mov	sp, r7
 802102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021030:	4770      	bx	lr
 8021032:	bf00      	nop
 8021034:	240004b4 	.word	0x240004b4

08021038 <SetGCUParameter>:

void SetGCUParameter(T_GCU_PARAMETER *pNewParameter, int nLen)
{
 8021038:	b5b0      	push	{r4, r5, r7, lr}
 802103a:	b086      	sub	sp, #24
 802103c:	af04      	add	r7, sp, #16
 802103e:	6078      	str	r0, [r7, #4]
 8021040:	6039      	str	r1, [r7, #0]
    pNewParameter->bPassageType = PASSAGE_TYPE_S;
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	2253      	movs	r2, #83	; 0x53
 8021046:	701a      	strb	r2, [r3, #0]

    if (pNewParameter->bPassageMode > PASS_MODE_EASY)
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	785b      	ldrb	r3, [r3, #1]
 802104c:	2b01      	cmp	r3, #1
 802104e:	d903      	bls.n	8021058 <SetGCUParameter+0x20>
        pNewParameter->bPassageMode = gGCUParameter.bPassageMode;
 8021050:	4b29      	ldr	r3, [pc, #164]	; (80210f8 <SetGCUParameter+0xc0>)
 8021052:	785a      	ldrb	r2, [r3, #1]
 8021054:	687b      	ldr	r3, [r7, #4]
 8021056:	705a      	strb	r2, [r3, #1]

    if (pNewParameter->bAlarmMode > ALARM_MODE_ACTIVE)
 8021058:	687b      	ldr	r3, [r7, #4]
 802105a:	789b      	ldrb	r3, [r3, #2]
 802105c:	2b01      	cmp	r3, #1
 802105e:	d903      	bls.n	8021068 <SetGCUParameter+0x30>
        pNewParameter->bAlarmMode = gGCUParameter.bAlarmMode;
 8021060:	4b25      	ldr	r3, [pc, #148]	; (80210f8 <SetGCUParameter+0xc0>)
 8021062:	789a      	ldrb	r2, [r3, #2]
 8021064:	687b      	ldr	r3, [r7, #4]
 8021066:	709a      	strb	r2, [r3, #2]

    if (pNewParameter->bAuthType > AUTH_TYPE_TTL)
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	78db      	ldrb	r3, [r3, #3]
 802106c:	2b01      	cmp	r3, #1
 802106e:	d903      	bls.n	8021078 <SetGCUParameter+0x40>
        pNewParameter->bAuthType = gGCUParameter.bAuthType;
 8021070:	4b21      	ldr	r3, [pc, #132]	; (80210f8 <SetGCUParameter+0xc0>)
 8021072:	78da      	ldrb	r2, [r3, #3]
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	70da      	strb	r2, [r3, #3]

    if (pNewParameter->bCriticalZone > ALARM_ZONE3)
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	795b      	ldrb	r3, [r3, #5]
 802107c:	2b03      	cmp	r3, #3
 802107e:	d903      	bls.n	8021088 <SetGCUParameter+0x50>
        pNewParameter->bCriticalZone = gGCUParameter.bCriticalZone;
 8021080:	4b1d      	ldr	r3, [pc, #116]	; (80210f8 <SetGCUParameter+0xc0>)
 8021082:	795a      	ldrb	r2, [r3, #5]
 8021084:	687b      	ldr	r3, [r7, #4]
 8021086:	715a      	strb	r2, [r3, #5]

    if (pNewParameter->bCounterZone > ALARM_ZONE3)
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	799b      	ldrb	r3, [r3, #6]
 802108c:	2b03      	cmp	r3, #3
 802108e:	d903      	bls.n	8021098 <SetGCUParameter+0x60>
        pNewParameter->bCounterZone = gGCUParameter.bCounterZone;
 8021090:	4b19      	ldr	r3, [pc, #100]	; (80210f8 <SetGCUParameter+0xc0>)
 8021092:	799a      	ldrb	r2, [r3, #6]
 8021094:	687b      	ldr	r3, [r7, #4]
 8021096:	719a      	strb	r2, [r3, #6]

    gdwTimeoutSafety = SAFETY_TIMEOUT_STD;
 8021098:	4b18      	ldr	r3, [pc, #96]	; (80210fc <SetGCUParameter+0xc4>)
 802109a:	220a      	movs	r2, #10
 802109c:	601a      	str	r2, [r3, #0]
    gdwTimeoutLuggage = LUGGAGE_LIMIT_STD;
 802109e:	4b18      	ldr	r3, [pc, #96]	; (8021100 <SetGCUParameter+0xc8>)
 80210a0:	2296      	movs	r2, #150	; 0x96
 80210a2:	601a      	str	r2, [r3, #0]

    printf(" SetGCUParameter = %d/%d/%d/%d/%d/%d \n", pNewParameter->bAlarmMode, pNewParameter->bAlarmTimeout, pNewParameter->bAuthTimeOut, pNewParameter->bBarrierOpenTimeout, pNewParameter->bEMGTimeout, pNewParameter->bIllegalEntryTimeout);
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	789b      	ldrb	r3, [r3, #2]
 80210a8:	4618      	mov	r0, r3
 80210aa:	687b      	ldr	r3, [r7, #4]
 80210ac:	7a9b      	ldrb	r3, [r3, #10]
 80210ae:	461c      	mov	r4, r3
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	791b      	ldrb	r3, [r3, #4]
 80210b4:	461d      	mov	r5, r3
 80210b6:	687b      	ldr	r3, [r7, #4]
 80210b8:	7a5b      	ldrb	r3, [r3, #9]
 80210ba:	461a      	mov	r2, r3
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	79db      	ldrb	r3, [r3, #7]
 80210c0:	4619      	mov	r1, r3
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	7adb      	ldrb	r3, [r3, #11]
 80210c6:	9302      	str	r3, [sp, #8]
 80210c8:	9101      	str	r1, [sp, #4]
 80210ca:	9200      	str	r2, [sp, #0]
 80210cc:	462b      	mov	r3, r5
 80210ce:	4622      	mov	r2, r4
 80210d0:	4601      	mov	r1, r0
 80210d2:	480c      	ldr	r0, [pc, #48]	; (8021104 <SetGCUParameter+0xcc>)
 80210d4:	f008 f98a 	bl	80293ec <printf_>

    memcpy(&gGCUParameter, pNewParameter, sizeof(T_GCU_PARAMETER));
 80210d8:	4b07      	ldr	r3, [pc, #28]	; (80210f8 <SetGCUParameter+0xc0>)
 80210da:	687a      	ldr	r2, [r7, #4]
 80210dc:	6814      	ldr	r4, [r2, #0]
 80210de:	6850      	ldr	r0, [r2, #4]
 80210e0:	6891      	ldr	r1, [r2, #8]
 80210e2:	601c      	str	r4, [r3, #0]
 80210e4:	6058      	str	r0, [r3, #4]
 80210e6:	6099      	str	r1, [r3, #8]
 80210e8:	8991      	ldrh	r1, [r2, #12]
 80210ea:	7b92      	ldrb	r2, [r2, #14]
 80210ec:	8199      	strh	r1, [r3, #12]
 80210ee:	739a      	strb	r2, [r3, #14]
}
 80210f0:	bf00      	nop
 80210f2:	3708      	adds	r7, #8
 80210f4:	46bd      	mov	sp, r7
 80210f6:	bdb0      	pop	{r4, r5, r7, pc}
 80210f8:	24000480 	.word	0x24000480
 80210fc:	24000148 	.word	0x24000148
 8021100:	2400014c 	.word	0x2400014c
 8021104:	08031ba4 	.word	0x08031ba4

08021108 <GetGCUParameter>:

void GetGCUParameter(T_GCU_PARAMETER *pCurParameter)
{
 8021108:	b490      	push	{r4, r7}
 802110a:	b082      	sub	sp, #8
 802110c:	af00      	add	r7, sp, #0
 802110e:	6078      	str	r0, [r7, #4]
    memcpy(pCurParameter, &gGCUParameter, sizeof(T_GCU_PARAMETER));
 8021110:	687b      	ldr	r3, [r7, #4]
 8021112:	4a08      	ldr	r2, [pc, #32]	; (8021134 <GetGCUParameter+0x2c>)
 8021114:	6814      	ldr	r4, [r2, #0]
 8021116:	6850      	ldr	r0, [r2, #4]
 8021118:	6891      	ldr	r1, [r2, #8]
 802111a:	601c      	str	r4, [r3, #0]
 802111c:	6058      	str	r0, [r3, #4]
 802111e:	6099      	str	r1, [r3, #8]
 8021120:	8991      	ldrh	r1, [r2, #12]
 8021122:	7b92      	ldrb	r2, [r2, #14]
 8021124:	8199      	strh	r1, [r3, #12]
 8021126:	739a      	strb	r2, [r3, #14]
}
 8021128:	bf00      	nop
 802112a:	3708      	adds	r7, #8
 802112c:	46bd      	mov	sp, r7
 802112e:	bc90      	pop	{r4, r7}
 8021130:	4770      	bx	lr
 8021132:	bf00      	nop
 8021134:	24000480 	.word	0x24000480

08021138 <GetGCUStatus>:

void GetGCUStatus(T_GCU_STATUS_RES *pCurStatus)
{
 8021138:	b580      	push	{r7, lr}
 802113a:	b084      	sub	sp, #16
 802113c:	af00      	add	r7, sp, #0
 802113e:	6078      	str	r0, [r7, #4]
    T_MODE_STATUS ModeStatus;
	DWORD	dwSpareSenserValue  = 0;
 8021140:	2300      	movs	r3, #0
 8021142:	60fb      	str	r3, [r7, #12]

    // mode status
    ModeStatus.b.nServiceMode_EN = (int)gCurGCUOpMode.bServiceMode_EN;
 8021144:	4b52      	ldr	r3, [pc, #328]	; (8021290 <GetGCUStatus+0x158>)
 8021146:	781b      	ldrb	r3, [r3, #0]
 8021148:	f003 0303 	and.w	r3, r3, #3
 802114c:	b2da      	uxtb	r2, r3
 802114e:	7a3b      	ldrb	r3, [r7, #8]
 8021150:	f362 0301 	bfi	r3, r2, #0, #2
 8021154:	723b      	strb	r3, [r7, #8]
    ModeStatus.b.nServiceMode_EX = (int)gCurGCUOpMode.bServiceMode_EX;
 8021156:	4b4e      	ldr	r3, [pc, #312]	; (8021290 <GetGCUStatus+0x158>)
 8021158:	785b      	ldrb	r3, [r3, #1]
 802115a:	f003 0303 	and.w	r3, r3, #3
 802115e:	b2da      	uxtb	r2, r3
 8021160:	7a3b      	ldrb	r3, [r7, #8]
 8021162:	f362 0383 	bfi	r3, r2, #2, #2
 8021166:	723b      	strb	r3, [r7, #8]
    ModeStatus.b.nEmergencyMode = (int)(gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY);
 8021168:	4b49      	ldr	r3, [pc, #292]	; (8021290 <GetGCUStatus+0x158>)
 802116a:	789b      	ldrb	r3, [r3, #2]
 802116c:	f003 0303 	and.w	r3, r3, #3
 8021170:	b2da      	uxtb	r2, r3
 8021172:	7a3b      	ldrb	r3, [r7, #8]
 8021174:	f362 1305 	bfi	r3, r2, #4, #2
 8021178:	723b      	strb	r3, [r7, #8]

    if (gCurGCUOpMode.bEmergencyMaint & MAINTENANCE_MODE)
 802117a:	4b45      	ldr	r3, [pc, #276]	; (8021290 <GetGCUStatus+0x158>)
 802117c:	789b      	ldrb	r3, [r3, #2]
 802117e:	f003 0310 	and.w	r3, r3, #16
 8021182:	2b00      	cmp	r3, #0
 8021184:	d004      	beq.n	8021190 <GetGCUStatus+0x58>
        ModeStatus.b.nMaintenanceMode = ON;
 8021186:	7a3b      	ldrb	r3, [r7, #8]
 8021188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802118c:	723b      	strb	r3, [r7, #8]
 802118e:	e003      	b.n	8021198 <GetGCUStatus+0x60>
    else
        ModeStatus.b.nMaintenanceMode = OFF;
 8021190:	7a3b      	ldrb	r3, [r7, #8]
 8021192:	f36f 1386 	bfc	r3, #6, #1
 8021196:	723b      	strb	r3, [r7, #8]

    ModeStatus.b.nFlapDoorMode = (int)gCurGCUOpMode.bFlapDoorMode;
 8021198:	4b3d      	ldr	r3, [pc, #244]	; (8021290 <GetGCUStatus+0x158>)
 802119a:	78db      	ldrb	r3, [r3, #3]
 802119c:	f003 0301 	and.w	r3, r3, #1
 80211a0:	b2da      	uxtb	r2, r3
 80211a2:	7a3b      	ldrb	r3, [r7, #8]
 80211a4:	f362 13c7 	bfi	r3, r2, #7, #1
 80211a8:	723b      	strb	r3, [r7, #8]

    // passage alarm
    pCurStatus->bModeStatus = ModeStatus.bMode;
 80211aa:	7a3a      	ldrb	r2, [r7, #8]
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	701a      	strb	r2, [r3, #0]
    pCurStatus->bAuthCount_EN = gGCUStatus.bAuthCount_EN;
 80211b0:	4b38      	ldr	r3, [pc, #224]	; (8021294 <GetGCUStatus+0x15c>)
 80211b2:	791b      	ldrb	r3, [r3, #4]
 80211b4:	b2da      	uxtb	r2, r3
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	705a      	strb	r2, [r3, #1]
    pCurStatus->bAuthCount_EX = gGCUStatus.bAuthCount_EX;
 80211ba:	4b36      	ldr	r3, [pc, #216]	; (8021294 <GetGCUStatus+0x15c>)
 80211bc:	795b      	ldrb	r3, [r3, #5]
 80211be:	b2da      	uxtb	r2, r3
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	709a      	strb	r2, [r3, #2]
    pCurStatus->bPassageAlarm = gGCUStatus.PassageAlarm.bAlarm;
 80211c4:	4b33      	ldr	r3, [pc, #204]	; (8021294 <GetGCUStatus+0x15c>)
 80211c6:	7a1a      	ldrb	r2, [r3, #8]
 80211c8:	687b      	ldr	r3, [r7, #4]
 80211ca:	70da      	strb	r2, [r3, #3]
    pCurStatus->bModuleAlarm = gGCUStatus.ModuleAlarm.bAlarm;
 80211cc:	4b31      	ldr	r3, [pc, #196]	; (8021294 <GetGCUStatus+0x15c>)
 80211ce:	7b1a      	ldrb	r2, [r3, #12]
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	711a      	strb	r2, [r3, #4]
    pCurStatus->bBarrierSw = gGCUStatus.bBarrierSw;
 80211d4:	4b2f      	ldr	r3, [pc, #188]	; (8021294 <GetGCUStatus+0x15c>)
 80211d6:	7c1b      	ldrb	r3, [r3, #16]
 80211d8:	b2da      	uxtb	r2, r3
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	715a      	strb	r2, [r3, #5]

    pCurStatus->bMaintenanceDoorSw = (RD_SWITCH & MASK_SDOOR);
 80211de:	4b2e      	ldr	r3, [pc, #184]	; (8021298 <GetGCUStatus+0x160>)
 80211e0:	781b      	ldrb	r3, [r3, #0]
 80211e2:	b2da      	uxtb	r2, r3
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	719a      	strb	r2, [r3, #6]
    pCurStatus->bUPSStatus = gGCUStatus.bUPSStatus;
 80211e8:	4b2a      	ldr	r3, [pc, #168]	; (8021294 <GetGCUStatus+0x15c>)
 80211ea:	7c9b      	ldrb	r3, [r3, #18]
 80211ec:	b2da      	uxtb	r2, r3
 80211ee:	687b      	ldr	r3, [r7, #4]
 80211f0:	71da      	strb	r2, [r3, #7]
    pCurStatus->bSafetySen = gGCUStatus.bSafetyDetection;
 80211f2:	4b28      	ldr	r3, [pc, #160]	; (8021294 <GetGCUStatus+0x15c>)
 80211f4:	7cdb      	ldrb	r3, [r3, #19]
 80211f6:	b2da      	uxtb	r2, r3
 80211f8:	687b      	ldr	r3, [r7, #4]
 80211fa:	721a      	strb	r2, [r3, #8]
    pCurStatus->bSCADA = gGCUStatus.bSCADA;
 80211fc:	4b25      	ldr	r3, [pc, #148]	; (8021294 <GetGCUStatus+0x15c>)
 80211fe:	7d1b      	ldrb	r3, [r3, #20]
 8021200:	b2da      	uxtb	r2, r3
 8021202:	687b      	ldr	r3, [r7, #4]
 8021204:	725a      	strb	r2, [r3, #9]
    pCurStatus->bDoorForcedOpen = gGCUStatus.bDoorForcedOpen;
 8021206:	4b23      	ldr	r3, [pc, #140]	; (8021294 <GetGCUStatus+0x15c>)
 8021208:	7d5b      	ldrb	r3, [r3, #21]
 802120a:	b2da      	uxtb	r2, r3
 802120c:	687b      	ldr	r3, [r7, #4]
 802120e:	729a      	strb	r2, [r3, #10]

    // Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기)
    dwSpareSenserValue = (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port, SP_SEN1_Pin)) ? 0x01 : 0x00;
 8021210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021214:	4821      	ldr	r0, [pc, #132]	; (802129c <GetGCUStatus+0x164>)
 8021216:	f009 fe37 	bl	802ae88 <HAL_GPIO_ReadPin>
 802121a:	4603      	mov	r3, r0
 802121c:	2b00      	cmp	r3, #0
 802121e:	bf14      	ite	ne
 8021220:	2301      	movne	r3, #1
 8021222:	2300      	moveq	r3, #0
 8021224:	b2db      	uxtb	r3, r3
 8021226:	60fb      	str	r3, [r7, #12]
    dwSpareSenserValue |= (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port, SP_SEN2_Pin)) ? 0x02 : 0x00;
 8021228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 802122c:	481b      	ldr	r0, [pc, #108]	; (802129c <GetGCUStatus+0x164>)
 802122e:	f009 fe2b 	bl	802ae88 <HAL_GPIO_ReadPin>
 8021232:	4603      	mov	r3, r0
 8021234:	2b00      	cmp	r3, #0
 8021236:	d001      	beq.n	802123c <GetGCUStatus+0x104>
 8021238:	2302      	movs	r3, #2
 802123a:	e000      	b.n	802123e <GetGCUStatus+0x106>
 802123c:	2300      	movs	r3, #0
 802123e:	461a      	mov	r2, r3
 8021240:	68fb      	ldr	r3, [r7, #12]
 8021242:	4313      	orrs	r3, r2
 8021244:	60fb      	str	r3, [r7, #12]

    pCurStatus->bPassengerSensor1 = RD_PASSSEN1;
 8021246:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 802124a:	781b      	ldrb	r3, [r3, #0]
 802124c:	b2da      	uxtb	r2, r3
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	72da      	strb	r2, [r3, #11]
    pCurStatus->bPassengerSensor2 = RD_PASSSEN2;
 8021252:	4b13      	ldr	r3, [pc, #76]	; (80212a0 <GetGCUStatus+0x168>)
 8021254:	781b      	ldrb	r3, [r3, #0]
 8021256:	b2da      	uxtb	r2, r3
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	731a      	strb	r2, [r3, #12]
    pCurStatus->bPassengerSensor3 = dwSpareSenserValue;
 802125c:	68fb      	ldr	r3, [r7, #12]
 802125e:	b2da      	uxtb	r2, r3
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	735a      	strb	r2, [r3, #13]

    pCurStatus->bIllegalPass = gGCUStatus.IllegalPass.bIllegalPass;
 8021264:	4b0b      	ldr	r3, [pc, #44]	; (8021294 <GetGCUStatus+0x15c>)
 8021266:	7f1a      	ldrb	r2, [r3, #28]
 8021268:	687b      	ldr	r3, [r7, #4]
 802126a:	739a      	strb	r2, [r3, #14]
    pCurStatus->bDipSwitchValue = ReadDipSwitch();
 802126c:	4b0d      	ldr	r3, [pc, #52]	; (80212a4 <GetGCUStatus+0x16c>)
 802126e:	691b      	ldr	r3, [r3, #16]
 8021270:	b2db      	uxtb	r3, r3
 8021272:	43db      	mvns	r3, r3
 8021274:	b2da      	uxtb	r2, r3
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	73da      	strb	r2, [r3, #15]
    pCurStatus->bPeopleCount = gGCUStatus.bPeopleCount;
 802127a:	4b06      	ldr	r3, [pc, #24]	; (8021294 <GetGCUStatus+0x15c>)
 802127c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8021280:	b2da      	uxtb	r2, r3
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	745a      	strb	r2, [r3, #17]
}
 8021286:	bf00      	nop
 8021288:	3710      	adds	r7, #16
 802128a:	46bd      	mov	sp, r7
 802128c:	bd80      	pop	{r7, pc}
 802128e:	bf00      	nop
 8021290:	240004b4 	.word	0x240004b4
 8021294:	24000490 	.word	0x24000490
 8021298:	60000300 	.word	0x60000300
 802129c:	58020000 	.word	0x58020000
 80212a0:	60000100 	.word	0x60000100
 80212a4:	58020400 	.word	0x58020400

080212a8 <GetAuthCount>:

/* Auth Functions ------------------------------------------------------*/
void GetAuthCount(T_GCU_AUTH_COUNT *pAuthCount)
{
 80212a8:	b480      	push	{r7}
 80212aa:	b083      	sub	sp, #12
 80212ac:	af00      	add	r7, sp, #0
 80212ae:	6078      	str	r0, [r7, #4]
    pAuthCount->bAuthCount_EN = gGCUStatus.bAuthCount_EN;
 80212b0:	4b07      	ldr	r3, [pc, #28]	; (80212d0 <GetAuthCount+0x28>)
 80212b2:	791b      	ldrb	r3, [r3, #4]
 80212b4:	b2da      	uxtb	r2, r3
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	701a      	strb	r2, [r3, #0]
    pAuthCount->bAuthCount_EX = gGCUStatus.bAuthCount_EX;
 80212ba:	4b05      	ldr	r3, [pc, #20]	; (80212d0 <GetAuthCount+0x28>)
 80212bc:	795b      	ldrb	r3, [r3, #5]
 80212be:	b2da      	uxtb	r2, r3
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	705a      	strb	r2, [r3, #1]
}
 80212c4:	bf00      	nop
 80212c6:	370c      	adds	r7, #12
 80212c8:	46bd      	mov	sp, r7
 80212ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212ce:	4770      	bx	lr
 80212d0:	24000490 	.word	0x24000490

080212d4 <IncreaseAuthCount>:

void IncreaseAuthCount(BYTE bDir)
{
 80212d4:	b580      	push	{r7, lr}
 80212d6:	b082      	sub	sp, #8
 80212d8:	af00      	add	r7, sp, #0
 80212da:	4603      	mov	r3, r0
 80212dc:	71fb      	strb	r3, [r7, #7]
    printf(" [IncreaseAuthCount] Dir:%d \n", bDir);
 80212de:	79fb      	ldrb	r3, [r7, #7]
 80212e0:	4619      	mov	r1, r3
 80212e2:	482c      	ldr	r0, [pc, #176]	; (8021394 <IncreaseAuthCount+0xc0>)
 80212e4:	f008 f882 	bl	80293ec <printf_>

    if (bDir == FROM_ENTRY)
 80212e8:	79fb      	ldrb	r3, [r7, #7]
 80212ea:	2b01      	cmp	r3, #1
 80212ec:	d113      	bne.n	8021316 <IncreaseAuthCount+0x42>
    {
        gGCUStatus.bAuthCount_EN = (gGCUStatus.bAuthCount_EN < AUTHORIZE_MAX_COUNT) ? gGCUStatus.bAuthCount_EN + 1 : AUTHORIZE_MAX_COUNT;
 80212ee:	4b2a      	ldr	r3, [pc, #168]	; (8021398 <IncreaseAuthCount+0xc4>)
 80212f0:	791b      	ldrb	r3, [r3, #4]
 80212f2:	b2db      	uxtb	r3, r3
 80212f4:	2bff      	cmp	r3, #255	; 0xff
 80212f6:	d005      	beq.n	8021304 <IncreaseAuthCount+0x30>
 80212f8:	4b27      	ldr	r3, [pc, #156]	; (8021398 <IncreaseAuthCount+0xc4>)
 80212fa:	791b      	ldrb	r3, [r3, #4]
 80212fc:	b2db      	uxtb	r3, r3
 80212fe:	3301      	adds	r3, #1
 8021300:	b2db      	uxtb	r3, r3
 8021302:	e000      	b.n	8021306 <IncreaseAuthCount+0x32>
 8021304:	23ff      	movs	r3, #255	; 0xff
 8021306:	4a24      	ldr	r2, [pc, #144]	; (8021398 <IncreaseAuthCount+0xc4>)
 8021308:	7113      	strb	r3, [r2, #4]
        gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
 802130a:	4a23      	ldr	r2, [pc, #140]	; (8021398 <IncreaseAuthCount+0xc4>)
 802130c:	7f13      	ldrb	r3, [r2, #28]
 802130e:	f36f 0382 	bfc	r3, #2, #1
 8021312:	7713      	strb	r3, [r2, #28]
 8021314:	e015      	b.n	8021342 <IncreaseAuthCount+0x6e>
    }
    else if (bDir == FROM_EXIT)
 8021316:	79fb      	ldrb	r3, [r7, #7]
 8021318:	2b02      	cmp	r3, #2
 802131a:	d112      	bne.n	8021342 <IncreaseAuthCount+0x6e>
    {
        gGCUStatus.bAuthCount_EX = (gGCUStatus.bAuthCount_EX < AUTHORIZE_MAX_COUNT) ? gGCUStatus.bAuthCount_EX + 1 : AUTHORIZE_MAX_COUNT;
 802131c:	4b1e      	ldr	r3, [pc, #120]	; (8021398 <IncreaseAuthCount+0xc4>)
 802131e:	795b      	ldrb	r3, [r3, #5]
 8021320:	b2db      	uxtb	r3, r3
 8021322:	2bff      	cmp	r3, #255	; 0xff
 8021324:	d005      	beq.n	8021332 <IncreaseAuthCount+0x5e>
 8021326:	4b1c      	ldr	r3, [pc, #112]	; (8021398 <IncreaseAuthCount+0xc4>)
 8021328:	795b      	ldrb	r3, [r3, #5]
 802132a:	b2db      	uxtb	r3, r3
 802132c:	3301      	adds	r3, #1
 802132e:	b2db      	uxtb	r3, r3
 8021330:	e000      	b.n	8021334 <IncreaseAuthCount+0x60>
 8021332:	23ff      	movs	r3, #255	; 0xff
 8021334:	4a18      	ldr	r2, [pc, #96]	; (8021398 <IncreaseAuthCount+0xc4>)
 8021336:	7153      	strb	r3, [r2, #5]
        gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
 8021338:	4a17      	ldr	r2, [pc, #92]	; (8021398 <IncreaseAuthCount+0xc4>)
 802133a:	7f13      	ldrb	r3, [r2, #28]
 802133c:	f36f 1386 	bfc	r3, #6, #1
 8021340:	7713      	strb	r3, [r2, #28]
    }

    if (gbPrevDir != bDir)
 8021342:	4b16      	ldr	r3, [pc, #88]	; (802139c <IncreaseAuthCount+0xc8>)
 8021344:	781b      	ldrb	r3, [r3, #0]
 8021346:	79fa      	ldrb	r2, [r7, #7]
 8021348:	429a      	cmp	r2, r3
 802134a:	d004      	beq.n	8021356 <IncreaseAuthCount+0x82>
    {
        ClearPassageAlarm();
 802134c:	f000 fd38 	bl	8021dc0 <ClearPassageAlarm>
        gbPrevDir = bDir;
 8021350:	4a12      	ldr	r2, [pc, #72]	; (802139c <IncreaseAuthCount+0xc8>)
 8021352:	79fb      	ldrb	r3, [r7, #7]
 8021354:	7013      	strb	r3, [r2, #0]
    }

    ControlBarrier(bDir);
 8021356:	79fb      	ldrb	r3, [r7, #7]
 8021358:	4618      	mov	r0, r3
 802135a:	f000 f853 	bl	8021404 <ControlBarrier>
    ResetTimer(&timerLuggageWait);
 802135e:	4810      	ldr	r0, [pc, #64]	; (80213a0 <IncreaseAuthCount+0xcc>)
 8021360:	f00f f8a2 	bl	80304a8 <ResetTimer>
    ResetTimer(&timerSafety);
 8021364:	480f      	ldr	r0, [pc, #60]	; (80213a4 <IncreaseAuthCount+0xd0>)
 8021366:	f00f f89f 	bl	80304a8 <ResetTimer>
    ControlBuzzer(BUZZER_OFF, 0);
 802136a:	2100      	movs	r1, #0
 802136c:	2000      	movs	r0, #0
 802136e:	f000 f881 	bl	8021474 <ControlBuzzer>
    SetAuthTimer();
 8021372:	f000 ffb5 	bl	80222e0 <SetAuthTimer>

    printf(" [IncreaseAuthCount] auth cnt EN:%d, EX:%d  \n", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
 8021376:	4b08      	ldr	r3, [pc, #32]	; (8021398 <IncreaseAuthCount+0xc4>)
 8021378:	791b      	ldrb	r3, [r3, #4]
 802137a:	b2db      	uxtb	r3, r3
 802137c:	4619      	mov	r1, r3
 802137e:	4b06      	ldr	r3, [pc, #24]	; (8021398 <IncreaseAuthCount+0xc4>)
 8021380:	795b      	ldrb	r3, [r3, #5]
 8021382:	b2db      	uxtb	r3, r3
 8021384:	461a      	mov	r2, r3
 8021386:	4808      	ldr	r0, [pc, #32]	; (80213a8 <IncreaseAuthCount+0xd4>)
 8021388:	f008 f830 	bl	80293ec <printf_>
}
 802138c:	bf00      	nop
 802138e:	3708      	adds	r7, #8
 8021390:	46bd      	mov	sp, r7
 8021392:	bd80      	pop	{r7, pc}
 8021394:	08031bcc 	.word	0x08031bcc
 8021398:	24000490 	.word	0x24000490
 802139c:	24000418 	.word	0x24000418
 80213a0:	240001d8 	.word	0x240001d8
 80213a4:	240001e4 	.word	0x240001e4
 80213a8:	08031bec 	.word	0x08031bec

080213ac <ClearAuthCount>:

void ClearAuthCount(void)
{
 80213ac:	b580      	push	{r7, lr}
 80213ae:	af00      	add	r7, sp, #0
    gGCUStatus.bAuthCount_EN = 0;
 80213b0:	4b12      	ldr	r3, [pc, #72]	; (80213fc <ClearAuthCount+0x50>)
 80213b2:	2200      	movs	r2, #0
 80213b4:	711a      	strb	r2, [r3, #4]
    gGCUStatus.bAuthCount_EX = 0;
 80213b6:	4b11      	ldr	r3, [pc, #68]	; (80213fc <ClearAuthCount+0x50>)
 80213b8:	2200      	movs	r2, #0
 80213ba:	715a      	strb	r2, [r3, #5]
    gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 80213bc:	4a0f      	ldr	r2, [pc, #60]	; (80213fc <ClearAuthCount+0x50>)
 80213be:	7a13      	ldrb	r3, [r2, #8]
 80213c0:	f36f 03c3 	bfc	r3, #3, #1
 80213c4:	7213      	strb	r3, [r2, #8]
    gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 80213c6:	4a0d      	ldr	r2, [pc, #52]	; (80213fc <ClearAuthCount+0x50>)
 80213c8:	7a13      	ldrb	r3, [r2, #8]
 80213ca:	f36f 13c7 	bfc	r3, #7, #1
 80213ce:	7213      	strb	r3, [r2, #8]
    ResetTimer(&timerAuthorize);
 80213d0:	480b      	ldr	r0, [pc, #44]	; (8021400 <ClearAuthCount+0x54>)
 80213d2:	f00f f869 	bl	80304a8 <ResetTimer>

    if (!gGCUStatus.PassageAlarm.b.nFromEN && !gGCUStatus.PassageAlarm.b.nFromEX)
 80213d6:	4b09      	ldr	r3, [pc, #36]	; (80213fc <ClearAuthCount+0x50>)
 80213d8:	7a1b      	ldrb	r3, [r3, #8]
 80213da:	f003 0307 	and.w	r3, r3, #7
 80213de:	b2db      	uxtb	r3, r3
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d108      	bne.n	80213f6 <ClearAuthCount+0x4a>
 80213e4:	4b05      	ldr	r3, [pc, #20]	; (80213fc <ClearAuthCount+0x50>)
 80213e6:	7a1b      	ldrb	r3, [r3, #8]
 80213e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80213ec:	b2db      	uxtb	r3, r3
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d101      	bne.n	80213f6 <ClearAuthCount+0x4a>
        InitPassageMode();
 80213f2:	f000 ffa1 	bl	8022338 <InitPassageMode>
}
 80213f6:	bf00      	nop
 80213f8:	bd80      	pop	{r7, pc}
 80213fa:	bf00      	nop
 80213fc:	24000490 	.word	0x24000490
 8021400:	24000160 	.word	0x24000160

08021404 <ControlBarrier>:

void ControlBarrier(BYTE bFDoorControl)
{
 8021404:	b580      	push	{r7, lr}
 8021406:	b082      	sub	sp, #8
 8021408:	af00      	add	r7, sp, #0
 802140a:	4603      	mov	r3, r0
 802140c:	71fb      	strb	r3, [r7, #7]
    gbBarrierCmd = bFDoorControl;
 802140e:	4a16      	ldr	r2, [pc, #88]	; (8021468 <ControlBarrier+0x64>)
 8021410:	79fb      	ldrb	r3, [r7, #7]
 8021412:	7013      	strb	r3, [r2, #0]

    if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX)
 8021414:	4b14      	ldr	r3, [pc, #80]	; (8021468 <ControlBarrier+0x64>)
 8021416:	781b      	ldrb	r3, [r3, #0]
 8021418:	2b01      	cmp	r3, #1
 802141a:	d003      	beq.n	8021424 <ControlBarrier+0x20>
 802141c:	4b12      	ldr	r3, [pc, #72]	; (8021468 <ControlBarrier+0x64>)
 802141e:	781b      	ldrb	r3, [r3, #0]
 8021420:	2b02      	cmp	r3, #2
 8021422:	d108      	bne.n	8021436 <ControlBarrier+0x32>
    {
        ResetTimer(&timerSafety);
 8021424:	4811      	ldr	r0, [pc, #68]	; (802146c <ControlBarrier+0x68>)
 8021426:	f00f f83f 	bl	80304a8 <ResetTimer>
        OpenBarrierForSwing(gbBarrierCmd);
 802142a:	4b0f      	ldr	r3, [pc, #60]	; (8021468 <ControlBarrier+0x64>)
 802142c:	781b      	ldrb	r3, [r3, #0]
 802142e:	4618      	mov	r0, r3
 8021430:	f002 f9d8 	bl	80237e4 <OpenBarrierForSwing>
    {
        SetTimer(&timerSafety);
    }
        }
    }
}
 8021434:	e014      	b.n	8021460 <ControlBarrier+0x5c>
    else if (gbBarrierCmd == BARRIER_CLOSE)
 8021436:	4b0c      	ldr	r3, [pc, #48]	; (8021468 <ControlBarrier+0x64>)
 8021438:	781b      	ldrb	r3, [r3, #0]
 802143a:	2b03      	cmp	r3, #3
 802143c:	d110      	bne.n	8021460 <ControlBarrier+0x5c>
        if (gfTestMode == TRUE)
 802143e:	4b0c      	ldr	r3, [pc, #48]	; (8021470 <ControlBarrier+0x6c>)
 8021440:	781b      	ldrb	r3, [r3, #0]
 8021442:	2b00      	cmp	r3, #0
 8021444:	d002      	beq.n	802144c <ControlBarrier+0x48>
            CloseBarrierForSwing();
 8021446:	f002 fa1f 	bl	8023888 <CloseBarrierForSwing>
}
 802144a:	e009      	b.n	8021460 <ControlBarrier+0x5c>
            if (!timerSafety.fStart)
 802144c:	4b07      	ldr	r3, [pc, #28]	; (802146c <ControlBarrier+0x68>)
 802144e:	781b      	ldrb	r3, [r3, #0]
 8021450:	f083 0301 	eor.w	r3, r3, #1
 8021454:	b2db      	uxtb	r3, r3
 8021456:	2b00      	cmp	r3, #0
 8021458:	d002      	beq.n	8021460 <ControlBarrier+0x5c>
        SetTimer(&timerSafety);
 802145a:	4804      	ldr	r0, [pc, #16]	; (802146c <ControlBarrier+0x68>)
 802145c:	f00f f810 	bl	8030480 <SetTimer>
}
 8021460:	bf00      	nop
 8021462:	3708      	adds	r7, #8
 8021464:	46bd      	mov	sp, r7
 8021466:	bd80      	pop	{r7, pc}
 8021468:	24000028 	.word	0x24000028
 802146c:	240001e4 	.word	0x240001e4
 8021470:	2400041c 	.word	0x2400041c

08021474 <ControlBuzzer>:

void ControlBuzzer(BYTE bBuzzerControl, BYTE bDuration)
{
 8021474:	b580      	push	{r7, lr}
 8021476:	b082      	sub	sp, #8
 8021478:	af00      	add	r7, sp, #0
 802147a:	4603      	mov	r3, r0
 802147c:	460a      	mov	r2, r1
 802147e:	71fb      	strb	r3, [r7, #7]
 8021480:	4613      	mov	r3, r2
 8021482:	71bb      	strb	r3, [r7, #6]
    ResetTimer(&timerBuzzer);
 8021484:	480e      	ldr	r0, [pc, #56]	; (80214c0 <ControlBuzzer+0x4c>)
 8021486:	f00f f80f 	bl	80304a8 <ResetTimer>

    if (bBuzzerControl == BUZZER_OFF || bDuration == 0)
 802148a:	79fb      	ldrb	r3, [r7, #7]
 802148c:	2b00      	cmp	r3, #0
 802148e:	d002      	beq.n	8021496 <ControlBuzzer+0x22>
 8021490:	79bb      	ldrb	r3, [r7, #6]
 8021492:	2b00      	cmp	r3, #0
 8021494:	d102      	bne.n	802149c <ControlBuzzer+0x28>
    {
        BuzzerOff();
 8021496:	f003 ffab 	bl	80253f0 <BuzzerOff>
 802149a:	e00d      	b.n	80214b8 <ControlBuzzer+0x44>
    }
    else
    {
        BuzzerOn();
 802149c:	f003 ff9c 	bl	80253d8 <BuzzerOn>
        gdwBuzzerTimeout = bDuration * TICK_COUNT_1SEC;
 80214a0:	79bb      	ldrb	r3, [r7, #6]
 80214a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80214a6:	fb02 f303 	mul.w	r3, r2, r3
 80214aa:	461a      	mov	r2, r3
 80214ac:	4b05      	ldr	r3, [pc, #20]	; (80214c4 <ControlBuzzer+0x50>)
 80214ae:	601a      	str	r2, [r3, #0]
        SetTimer(&timerBuzzer);
 80214b0:	4803      	ldr	r0, [pc, #12]	; (80214c0 <ControlBuzzer+0x4c>)
 80214b2:	f00e ffe5 	bl	8030480 <SetTimer>
    }
}
 80214b6:	bf00      	nop
 80214b8:	bf00      	nop
 80214ba:	3708      	adds	r7, #8
 80214bc:	46bd      	mov	sp, r7
 80214be:	bd80      	pop	{r7, pc}
 80214c0:	24000250 	.word	0x24000250
 80214c4:	24000140 	.word	0x24000140

080214c8 <ControlDirectionLED>:

void ControlDirectionLED(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 80214c8:	b580      	push	{r7, lr}
 80214ca:	b082      	sub	sp, #8
 80214cc:	af00      	add	r7, sp, #0
 80214ce:	4603      	mov	r3, r0
 80214d0:	460a      	mov	r2, r1
 80214d2:	71fb      	strb	r3, [r7, #7]
 80214d4:	4613      	mov	r3, r2
 80214d6:	71bb      	strb	r3, [r7, #6]
    if (gbLampCMD_EN != bLEDControl_EN)
 80214d8:	4b13      	ldr	r3, [pc, #76]	; (8021528 <ControlDirectionLED+0x60>)
 80214da:	781b      	ldrb	r3, [r3, #0]
 80214dc:	79fa      	ldrb	r2, [r7, #7]
 80214de:	429a      	cmp	r2, r3
 80214e0:	d002      	beq.n	80214e8 <ControlDirectionLED+0x20>
        gbLampCMD_EN = bLEDControl_EN;
 80214e2:	4a11      	ldr	r2, [pc, #68]	; (8021528 <ControlDirectionLED+0x60>)
 80214e4:	79fb      	ldrb	r3, [r7, #7]
 80214e6:	7013      	strb	r3, [r2, #0]
    if (gbLampCMD_EX != bLEDControl_EX)
 80214e8:	4b10      	ldr	r3, [pc, #64]	; (802152c <ControlDirectionLED+0x64>)
 80214ea:	781b      	ldrb	r3, [r3, #0]
 80214ec:	79ba      	ldrb	r2, [r7, #6]
 80214ee:	429a      	cmp	r2, r3
 80214f0:	d002      	beq.n	80214f8 <ControlDirectionLED+0x30>
        gbLampCMD_EX = bLEDControl_EX;
 80214f2:	4a0e      	ldr	r2, [pc, #56]	; (802152c <ControlDirectionLED+0x64>)
 80214f4:	79bb      	ldrb	r3, [r7, #6]
 80214f6:	7013      	strb	r3, [r2, #0]

    ControlStatusLED_En(gbLampCMD_EN);
 80214f8:	4b0b      	ldr	r3, [pc, #44]	; (8021528 <ControlDirectionLED+0x60>)
 80214fa:	781b      	ldrb	r3, [r3, #0]
 80214fc:	4618      	mov	r0, r3
 80214fe:	f003 ff83 	bl	8025408 <ControlStatusLED_En>
    ControlStatusLED_Ex(gbLampCMD_EX);
 8021502:	4b0a      	ldr	r3, [pc, #40]	; (802152c <ControlDirectionLED+0x64>)
 8021504:	781b      	ldrb	r3, [r3, #0]
 8021506:	4618      	mov	r0, r3
 8021508:	f003 ffae 	bl	8025468 <ControlStatusLED_Ex>
    ControlOverHeadDisplay_En(gbLampCMD_EN);
 802150c:	4b06      	ldr	r3, [pc, #24]	; (8021528 <ControlDirectionLED+0x60>)
 802150e:	781b      	ldrb	r3, [r3, #0]
 8021510:	4618      	mov	r0, r3
 8021512:	f003 ffd9 	bl	80254c8 <ControlOverHeadDisplay_En>
    ControlOverHeadDisplay_Ex(gbLampCMD_EX);
 8021516:	4b05      	ldr	r3, [pc, #20]	; (802152c <ControlDirectionLED+0x64>)
 8021518:	781b      	ldrb	r3, [r3, #0]
 802151a:	4618      	mov	r0, r3
 802151c:	f004 f804 	bl	8025528 <ControlOverHeadDisplay_Ex>
}
 8021520:	bf00      	nop
 8021522:	3708      	adds	r7, #8
 8021524:	46bd      	mov	sp, r7
 8021526:	bd80      	pop	{r7, pc}
 8021528:	24000135 	.word	0x24000135
 802152c:	24000136 	.word	0x24000136

08021530 <ControlStatusLED>:

void ControlStatusLED(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8021530:	b580      	push	{r7, lr}
 8021532:	b082      	sub	sp, #8
 8021534:	af00      	add	r7, sp, #0
 8021536:	4603      	mov	r3, r0
 8021538:	460a      	mov	r2, r1
 802153a:	71fb      	strb	r3, [r7, #7]
 802153c:	4613      	mov	r3, r2
 802153e:	71bb      	strb	r3, [r7, #6]
    ControlStatusLED_En(bLEDControl_EN);
 8021540:	79fb      	ldrb	r3, [r7, #7]
 8021542:	4618      	mov	r0, r3
 8021544:	f003 ff60 	bl	8025408 <ControlStatusLED_En>
    ControlStatusLED_Ex(bLEDControl_EX);
 8021548:	79bb      	ldrb	r3, [r7, #6]
 802154a:	4618      	mov	r0, r3
 802154c:	f003 ff8c 	bl	8025468 <ControlStatusLED_Ex>
}
 8021550:	bf00      	nop
 8021552:	3708      	adds	r7, #8
 8021554:	46bd      	mov	sp, r7
 8021556:	bd80      	pop	{r7, pc}

08021558 <ControlOverheadDisplay>:

void ControlOverheadDisplay(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8021558:	b580      	push	{r7, lr}
 802155a:	b082      	sub	sp, #8
 802155c:	af00      	add	r7, sp, #0
 802155e:	4603      	mov	r3, r0
 8021560:	460a      	mov	r2, r1
 8021562:	71fb      	strb	r3, [r7, #7]
 8021564:	4613      	mov	r3, r2
 8021566:	71bb      	strb	r3, [r7, #6]
    ControlOverHeadDisplay_En(bLEDControl_EN);
 8021568:	79fb      	ldrb	r3, [r7, #7]
 802156a:	4618      	mov	r0, r3
 802156c:	f003 ffac 	bl	80254c8 <ControlOverHeadDisplay_En>
    ControlOverHeadDisplay_Ex(bLEDControl_EX);
 8021570:	79bb      	ldrb	r3, [r7, #6]
 8021572:	4618      	mov	r0, r3
 8021574:	f003 ffd8 	bl	8025528 <ControlOverHeadDisplay_Ex>
}
 8021578:	bf00      	nop
 802157a:	3708      	adds	r7, #8
 802157c:	46bd      	mov	sp, r7
 802157e:	bd80      	pop	{r7, pc}

08021580 <ControlIndicator>:

void ControlIndicator(BYTE bLEDControl_EN, BYTE bLEDControl_EX, BYTE bDuration, bool isOneTime)
{
 8021580:	b590      	push	{r4, r7, lr}
 8021582:	b083      	sub	sp, #12
 8021584:	af00      	add	r7, sp, #0
 8021586:	4604      	mov	r4, r0
 8021588:	4608      	mov	r0, r1
 802158a:	4611      	mov	r1, r2
 802158c:	461a      	mov	r2, r3
 802158e:	4623      	mov	r3, r4
 8021590:	71fb      	strb	r3, [r7, #7]
 8021592:	4603      	mov	r3, r0
 8021594:	71bb      	strb	r3, [r7, #6]
 8021596:	460b      	mov	r3, r1
 8021598:	717b      	strb	r3, [r7, #5]
 802159a:	4613      	mov	r3, r2
 802159c:	713b      	strb	r3, [r7, #4]
    if (isOneTime == FALSE)
 802159e:	793b      	ldrb	r3, [r7, #4]
 80215a0:	f083 0301 	eor.w	r3, r3, #1
 80215a4:	b2db      	uxtb	r3, r3
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	d00f      	beq.n	80215ca <ControlIndicator+0x4a>
    {
        if (gbIndicatorCMD_EN != bLEDControl_EN)
 80215aa:	4b2a      	ldr	r3, [pc, #168]	; (8021654 <ControlIndicator+0xd4>)
 80215ac:	781b      	ldrb	r3, [r3, #0]
 80215ae:	79fa      	ldrb	r2, [r7, #7]
 80215b0:	429a      	cmp	r2, r3
 80215b2:	d002      	beq.n	80215ba <ControlIndicator+0x3a>
            gbIndicatorCMD_EN = bLEDControl_EN;
 80215b4:	4a27      	ldr	r2, [pc, #156]	; (8021654 <ControlIndicator+0xd4>)
 80215b6:	79fb      	ldrb	r3, [r7, #7]
 80215b8:	7013      	strb	r3, [r2, #0]
        if (gbIndicatorCMD_EX != bLEDControl_EX)
 80215ba:	4b27      	ldr	r3, [pc, #156]	; (8021658 <ControlIndicator+0xd8>)
 80215bc:	781b      	ldrb	r3, [r3, #0]
 80215be:	79ba      	ldrb	r2, [r7, #6]
 80215c0:	429a      	cmp	r2, r3
 80215c2:	d002      	beq.n	80215ca <ControlIndicator+0x4a>
            gbIndicatorCMD_EX = bLEDControl_EX;
 80215c4:	4a24      	ldr	r2, [pc, #144]	; (8021658 <ControlIndicator+0xd8>)
 80215c6:	79bb      	ldrb	r3, [r7, #6]
 80215c8:	7013      	strb	r3, [r2, #0]
    }

    if (gCurGCUOpMode.bServiceMode_EN != NO_SERVICE || gCurGCUOpMode.bEmergencyMaint == EMERGENCY_MODE || gCurGCUOpMode.bEmergencyMaint == FREE_MODE)
 80215ca:	4b24      	ldr	r3, [pc, #144]	; (802165c <ControlIndicator+0xdc>)
 80215cc:	781b      	ldrb	r3, [r3, #0]
 80215ce:	2b00      	cmp	r3, #0
 80215d0:	d107      	bne.n	80215e2 <ControlIndicator+0x62>
 80215d2:	4b22      	ldr	r3, [pc, #136]	; (802165c <ControlIndicator+0xdc>)
 80215d4:	789b      	ldrb	r3, [r3, #2]
 80215d6:	2b01      	cmp	r3, #1
 80215d8:	d003      	beq.n	80215e2 <ControlIndicator+0x62>
 80215da:	4b20      	ldr	r3, [pc, #128]	; (802165c <ControlIndicator+0xdc>)
 80215dc:	789b      	ldrb	r3, [r3, #2]
 80215de:	2b20      	cmp	r3, #32
 80215e0:	d104      	bne.n	80215ec <ControlIndicator+0x6c>
    {
        ControlIndicatorLight_En(bLEDControl_EN);
 80215e2:	79fb      	ldrb	r3, [r7, #7]
 80215e4:	4618      	mov	r0, r3
 80215e6:	f003 ffcf 	bl	8025588 <ControlIndicatorLight_En>
 80215ea:	e002      	b.n	80215f2 <ControlIndicator+0x72>
    }
    else
    {
        ControlIndicatorLight_En(LAMP_RED_ON);
 80215ec:	2001      	movs	r0, #1
 80215ee:	f003 ffcb 	bl	8025588 <ControlIndicatorLight_En>
    }

    if (gCurGCUOpMode.bServiceMode_EX != NO_SERVICE || gCurGCUOpMode.bEmergencyMaint == EMERGENCY_MODE || gCurGCUOpMode.bEmergencyMaint == FREE_MODE)
 80215f2:	4b1a      	ldr	r3, [pc, #104]	; (802165c <ControlIndicator+0xdc>)
 80215f4:	785b      	ldrb	r3, [r3, #1]
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d107      	bne.n	802160a <ControlIndicator+0x8a>
 80215fa:	4b18      	ldr	r3, [pc, #96]	; (802165c <ControlIndicator+0xdc>)
 80215fc:	789b      	ldrb	r3, [r3, #2]
 80215fe:	2b01      	cmp	r3, #1
 8021600:	d003      	beq.n	802160a <ControlIndicator+0x8a>
 8021602:	4b16      	ldr	r3, [pc, #88]	; (802165c <ControlIndicator+0xdc>)
 8021604:	789b      	ldrb	r3, [r3, #2]
 8021606:	2b20      	cmp	r3, #32
 8021608:	d104      	bne.n	8021614 <ControlIndicator+0x94>
    {
        ControlIndicatorLight_Ex(bLEDControl_EX);
 802160a:	79bb      	ldrb	r3, [r7, #6]
 802160c:	4618      	mov	r0, r3
 802160e:	f003 ffe9 	bl	80255e4 <ControlIndicatorLight_Ex>
 8021612:	e002      	b.n	802161a <ControlIndicator+0x9a>
    }
    else
    {
        ControlIndicatorLight_Ex(LAMP_RED_ON);
 8021614:	2001      	movs	r0, #1
 8021616:	f003 ffe5 	bl	80255e4 <ControlIndicatorLight_Ex>
    }

    if (bDuration && (bLEDControl_EN || bLEDControl_EX))
 802161a:	797b      	ldrb	r3, [r7, #5]
 802161c:	2b00      	cmp	r3, #0
 802161e:	d011      	beq.n	8021644 <ControlIndicator+0xc4>
 8021620:	79fb      	ldrb	r3, [r7, #7]
 8021622:	2b00      	cmp	r3, #0
 8021624:	d102      	bne.n	802162c <ControlIndicator+0xac>
 8021626:	79bb      	ldrb	r3, [r7, #6]
 8021628:	2b00      	cmp	r3, #0
 802162a:	d00b      	beq.n	8021644 <ControlIndicator+0xc4>
    {
        gdwTimeoutIndicator = bDuration * TICK_COUNT_1SEC;
 802162c:	797b      	ldrb	r3, [r7, #5]
 802162e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8021632:	fb02 f303 	mul.w	r3, r2, r3
 8021636:	461a      	mov	r2, r3
 8021638:	4b09      	ldr	r3, [pc, #36]	; (8021660 <ControlIndicator+0xe0>)
 802163a:	601a      	str	r2, [r3, #0]
        SetTimer(&timerIndicator);
 802163c:	4809      	ldr	r0, [pc, #36]	; (8021664 <ControlIndicator+0xe4>)
 802163e:	f00e ff1f 	bl	8030480 <SetTimer>
 8021642:	e003      	b.n	802164c <ControlIndicator+0xcc>
    }
    else
        ResetTimer(&timerIndicator);
 8021644:	4807      	ldr	r0, [pc, #28]	; (8021664 <ControlIndicator+0xe4>)
 8021646:	f00e ff2f 	bl	80304a8 <ResetTimer>
}
 802164a:	bf00      	nop
 802164c:	bf00      	nop
 802164e:	370c      	adds	r7, #12
 8021650:	46bd      	mov	sp, r7
 8021652:	bd90      	pop	{r4, r7, pc}
 8021654:	24000133 	.word	0x24000133
 8021658:	24000134 	.word	0x24000134
 802165c:	240004b4 	.word	0x240004b4
 8021660:	24000144 	.word	0x24000144
 8021664:	240001cc 	.word	0x240001cc

08021668 <ControlIndicator4Test>:

void ControlIndicator4Test(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8021668:	b580      	push	{r7, lr}
 802166a:	b082      	sub	sp, #8
 802166c:	af00      	add	r7, sp, #0
 802166e:	4603      	mov	r3, r0
 8021670:	460a      	mov	r2, r1
 8021672:	71fb      	strb	r3, [r7, #7]
 8021674:	4613      	mov	r3, r2
 8021676:	71bb      	strb	r3, [r7, #6]
    ControlIndicatorLight_En(bLEDControl_EN);
 8021678:	79fb      	ldrb	r3, [r7, #7]
 802167a:	4618      	mov	r0, r3
 802167c:	f003 ff84 	bl	8025588 <ControlIndicatorLight_En>
    ControlIndicatorLight_Ex(bLEDControl_EX);
 8021680:	79bb      	ldrb	r3, [r7, #6]
 8021682:	4618      	mov	r0, r3
 8021684:	f003 ffae 	bl	80255e4 <ControlIndicatorLight_Ex>
}
 8021688:	bf00      	nop
 802168a:	3708      	adds	r7, #8
 802168c:	46bd      	mov	sp, r7
 802168e:	bd80      	pop	{r7, pc}

08021690 <ControlIndicatorBlink>:

void ControlIndicatorBlink(BYTE isSet)
{
 8021690:	b580      	push	{r7, lr}
 8021692:	b082      	sub	sp, #8
 8021694:	af00      	add	r7, sp, #0
 8021696:	4603      	mov	r3, r0
 8021698:	71fb      	strb	r3, [r7, #7]
    if (FLG_SET == isSet)
 802169a:	79fb      	ldrb	r3, [r7, #7]
 802169c:	2b01      	cmp	r3, #1
 802169e:	d10d      	bne.n	80216bc <ControlIndicatorBlink+0x2c>
    {
        gbIndicatorBlink = FLG_SET;
 80216a0:	4b10      	ldr	r3, [pc, #64]	; (80216e4 <ControlIndicatorBlink+0x54>)
 80216a2:	2201      	movs	r2, #1
 80216a4:	701a      	strb	r2, [r3, #0]
        gbIndicatorFlag = FLG_OFF;
 80216a6:	4b10      	ldr	r3, [pc, #64]	; (80216e8 <ControlIndicatorBlink+0x58>)
 80216a8:	2200      	movs	r2, #0
 80216aa:	701a      	strb	r2, [r3, #0]
        gdwTimeoutBlink = 5 * TICK_COUNT_100MS;
 80216ac:	4b0f      	ldr	r3, [pc, #60]	; (80216ec <ControlIndicatorBlink+0x5c>)
 80216ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80216b2:	601a      	str	r2, [r3, #0]
        SetTimer(&timerBlink);
 80216b4:	480e      	ldr	r0, [pc, #56]	; (80216f0 <ControlIndicatorBlink+0x60>)
 80216b6:	f00e fee3 	bl	8030480 <SetTimer>
        ResetTimer(&timerBlink);

        gbIndicatorFlag = FLG_OFF;
        ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
    }
}
 80216ba:	e00e      	b.n	80216da <ControlIndicatorBlink+0x4a>
        gbIndicatorBlink = FLG_OFF;
 80216bc:	4b09      	ldr	r3, [pc, #36]	; (80216e4 <ControlIndicatorBlink+0x54>)
 80216be:	2200      	movs	r2, #0
 80216c0:	701a      	strb	r2, [r3, #0]
        ResetTimer(&timerBlink);
 80216c2:	480b      	ldr	r0, [pc, #44]	; (80216f0 <ControlIndicatorBlink+0x60>)
 80216c4:	f00e fef0 	bl	80304a8 <ResetTimer>
        gbIndicatorFlag = FLG_OFF;
 80216c8:	4b07      	ldr	r3, [pc, #28]	; (80216e8 <ControlIndicatorBlink+0x58>)
 80216ca:	2200      	movs	r2, #0
 80216cc:	701a      	strb	r2, [r3, #0]
        ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 80216ce:	2300      	movs	r3, #0
 80216d0:	2200      	movs	r2, #0
 80216d2:	2100      	movs	r1, #0
 80216d4:	2000      	movs	r0, #0
 80216d6:	f7ff ff53 	bl	8021580 <ControlIndicator>
}
 80216da:	bf00      	nop
 80216dc:	3708      	adds	r7, #8
 80216de:	46bd      	mov	sp, r7
 80216e0:	bd80      	pop	{r7, pc}
 80216e2:	bf00      	nop
 80216e4:	24000132 	.word	0x24000132
 80216e8:	24000138 	.word	0x24000138
 80216ec:	24000150 	.word	0x24000150
 80216f0:	240001b4 	.word	0x240001b4

080216f4 <CheckUPSStatus>:

void CheckUPSStatus(void)
{
 80216f4:	b580      	push	{r7, lr}
 80216f6:	b082      	sub	sp, #8
 80216f8:	af00      	add	r7, sp, #0
    BYTE bUPSStatus = 0;
 80216fa:	2300      	movs	r3, #0
 80216fc:	71fb      	strb	r3, [r7, #7]

    bUPSStatus = (HAL_GPIO_ReadPin(nUPS_GPIO_Port, nUPS_CONN_Pin)) ? 0x01 : 0x00;       // Connection Failure, High active
 80216fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021702:	486f      	ldr	r0, [pc, #444]	; (80218c0 <CheckUPSStatus+0x1cc>)
 8021704:	f009 fbc0 	bl	802ae88 <HAL_GPIO_ReadPin>
 8021708:	4603      	mov	r3, r0
 802170a:	2b00      	cmp	r3, #0
 802170c:	bf14      	ite	ne
 802170e:	2301      	movne	r3, #1
 8021710:	2300      	moveq	r3, #0
 8021712:	b2db      	uxtb	r3, r3
 8021714:	71fb      	strb	r3, [r7, #7]
    bUPSStatus |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port, nUPS_PWR_FAIL_Pin)) ? 0x02 : 0x00; // Power Failure, Low active
 8021716:	f44f 7180 	mov.w	r1, #256	; 0x100
 802171a:	4869      	ldr	r0, [pc, #420]	; (80218c0 <CheckUPSStatus+0x1cc>)
 802171c:	f009 fbb4 	bl	802ae88 <HAL_GPIO_ReadPin>
 8021720:	4603      	mov	r3, r0
 8021722:	2b00      	cmp	r3, #0
 8021724:	d001      	beq.n	802172a <CheckUPSStatus+0x36>
 8021726:	2302      	movs	r3, #2
 8021728:	e000      	b.n	802172c <CheckUPSStatus+0x38>
 802172a:	2300      	movs	r3, #0
 802172c:	b25a      	sxtb	r2, r3
 802172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021732:	4313      	orrs	r3, r2
 8021734:	b25b      	sxtb	r3, r3
 8021736:	71fb      	strb	r3, [r7, #7]
    bUPSStatus |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port, nUPS_LOW_BAT_Pin)) ? 0x04 : 0x00;   // Low battery, Low active
 8021738:	f44f 7100 	mov.w	r1, #512	; 0x200
 802173c:	4860      	ldr	r0, [pc, #384]	; (80218c0 <CheckUPSStatus+0x1cc>)
 802173e:	f009 fba3 	bl	802ae88 <HAL_GPIO_ReadPin>
 8021742:	4603      	mov	r3, r0
 8021744:	2b00      	cmp	r3, #0
 8021746:	d001      	beq.n	802174c <CheckUPSStatus+0x58>
 8021748:	2304      	movs	r3, #4
 802174a:	e000      	b.n	802174e <CheckUPSStatus+0x5a>
 802174c:	2300      	movs	r3, #0
 802174e:	b25a      	sxtb	r2, r3
 8021750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021754:	4313      	orrs	r3, r2
 8021756:	b25b      	sxtb	r3, r3
 8021758:	71fb      	strb	r3, [r7, #7]

    switch (bUPSStatus)
 802175a:	79fb      	ldrb	r3, [r7, #7]
 802175c:	2b06      	cmp	r3, #6
 802175e:	f200 80aa 	bhi.w	80218b6 <CheckUPSStatus+0x1c2>
 8021762:	a201      	add	r2, pc, #4	; (adr r2, 8021768 <CheckUPSStatus+0x74>)
 8021764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021768:	08021793 	.word	0x08021793
 802176c:	08021785 	.word	0x08021785
 8021770:	080218b7 	.word	0x080218b7
 8021774:	080218b7 	.word	0x080218b7
 8021778:	08021793 	.word	0x08021793
 802177c:	080218b7 	.word	0x080218b7
 8021780:	080217f9 	.word	0x080217f9
    {
    case 0x01:
        gGCUStatus.bUPSStatus = bUPSStatus;
 8021784:	4a4f      	ldr	r2, [pc, #316]	; (80218c4 <CheckUPSStatus+0x1d0>)
 8021786:	79fb      	ldrb	r3, [r7, #7]
 8021788:	7493      	strb	r3, [r2, #18]
        printf(" [CheckUPSStatus] UPS Comm failure  \n");
 802178a:	484f      	ldr	r0, [pc, #316]	; (80218c8 <CheckUPSStatus+0x1d4>)
 802178c:	f007 fe2e 	bl	80293ec <printf_>
        break;
 8021790:	e091      	b.n	80218b6 <CheckUPSStatus+0x1c2>
    case 0x00:
    case 0x04:
        if (gbPowerFailFlag == FLG_OFF)
 8021792:	4b4e      	ldr	r3, [pc, #312]	; (80218cc <CheckUPSStatus+0x1d8>)
 8021794:	781b      	ldrb	r3, [r3, #0]
 8021796:	2b00      	cmp	r3, #0
 8021798:	d126      	bne.n	80217e8 <CheckUPSStatus+0xf4>
        {
            if (timerPowerFailureCheck.fStart)
 802179a:	4b4d      	ldr	r3, [pc, #308]	; (80218d0 <CheckUPSStatus+0x1dc>)
 802179c:	781b      	ldrb	r3, [r3, #0]
 802179e:	2b00      	cmp	r3, #0
 80217a0:	d01b      	beq.n	80217da <CheckUPSStatus+0xe6>
            {
                if (IsTimeout(&timerPowerFailureCheck, DEFAULT_POWER_FAIL_TIMEOUT * TICK_COUNT_1SEC))
 80217a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80217a6:	484a      	ldr	r0, [pc, #296]	; (80218d0 <CheckUPSStatus+0x1dc>)
 80217a8:	f00e fe8c 	bl	80304c4 <IsTimeout>
 80217ac:	4603      	mov	r3, r0
 80217ae:	2b00      	cmp	r3, #0
 80217b0:	d07e      	beq.n	80218b0 <CheckUPSStatus+0x1bc>
                {
                    ResetTimer(&timerPowerFailureCheck);
 80217b2:	4847      	ldr	r0, [pc, #284]	; (80218d0 <CheckUPSStatus+0x1dc>)
 80217b4:	f00e fe78 	bl	80304a8 <ResetTimer>
                    gbPowerFailFlag = FLG_SET;
 80217b8:	4b44      	ldr	r3, [pc, #272]	; (80218cc <CheckUPSStatus+0x1d8>)
 80217ba:	2201      	movs	r2, #1
 80217bc:	701a      	strb	r2, [r3, #0]
                    ControlBarrier(BARRIER_OPEN_FOR_EX);
 80217be:	2002      	movs	r0, #2
 80217c0:	f7ff fe20 	bl	8021404 <ControlBarrier>
                    gGCUStatus.bUPSStatus = bUPSStatus;
 80217c4:	4a3f      	ldr	r2, [pc, #252]	; (80218c4 <CheckUPSStatus+0x1d0>)
 80217c6:	79fb      	ldrb	r3, [r7, #7]
 80217c8:	7493      	strb	r3, [r2, #18]
                    ControlDirectionLED(DIR_RED, DIR_RED);
 80217ca:	2102      	movs	r1, #2
 80217cc:	2002      	movs	r0, #2
 80217ce:	f7ff fe7b 	bl	80214c8 <ControlDirectionLED>
                    printf(" [CheckUPSStatus] Power failure  \n");
 80217d2:	4840      	ldr	r0, [pc, #256]	; (80218d4 <CheckUPSStatus+0x1e0>)
 80217d4:	f007 fe0a 	bl	80293ec <printf_>
            if (timerPowerRecoveryCheck.fStart)
            {
                ResetTimer(&timerPowerRecoveryCheck);
            }
        }
        break;
 80217d8:	e06a      	b.n	80218b0 <CheckUPSStatus+0x1bc>
                SetTimer(&timerPowerFailureCheck);
 80217da:	483d      	ldr	r0, [pc, #244]	; (80218d0 <CheckUPSStatus+0x1dc>)
 80217dc:	f00e fe50 	bl	8030480 <SetTimer>
                ResetTimer(&timerPowerRecoveryCheck);
 80217e0:	483d      	ldr	r0, [pc, #244]	; (80218d8 <CheckUPSStatus+0x1e4>)
 80217e2:	f00e fe61 	bl	80304a8 <ResetTimer>
        break;
 80217e6:	e063      	b.n	80218b0 <CheckUPSStatus+0x1bc>
            if (timerPowerRecoveryCheck.fStart)
 80217e8:	4b3b      	ldr	r3, [pc, #236]	; (80218d8 <CheckUPSStatus+0x1e4>)
 80217ea:	781b      	ldrb	r3, [r3, #0]
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d05f      	beq.n	80218b0 <CheckUPSStatus+0x1bc>
                ResetTimer(&timerPowerRecoveryCheck);
 80217f0:	4839      	ldr	r0, [pc, #228]	; (80218d8 <CheckUPSStatus+0x1e4>)
 80217f2:	f00e fe59 	bl	80304a8 <ResetTimer>
        break;
 80217f6:	e05b      	b.n	80218b0 <CheckUPSStatus+0x1bc>
    case 0x06:
        if (gbPowerFailFlag == FLG_SET)
 80217f8:	4b34      	ldr	r3, [pc, #208]	; (80218cc <CheckUPSStatus+0x1d8>)
 80217fa:	781b      	ldrb	r3, [r3, #0]
 80217fc:	2b01      	cmp	r3, #1
 80217fe:	d14c      	bne.n	802189a <CheckUPSStatus+0x1a6>
        {
            if (timerPowerRecoveryCheck.fStart)
 8021800:	4b35      	ldr	r3, [pc, #212]	; (80218d8 <CheckUPSStatus+0x1e4>)
 8021802:	781b      	ldrb	r3, [r3, #0]
 8021804:	2b00      	cmp	r3, #0
 8021806:	d041      	beq.n	802188c <CheckUPSStatus+0x198>
            {
                if (IsTimeout(&timerPowerRecoveryCheck, DEFAULT_POWER_FAIL_TIMEOUT * TICK_COUNT_1SEC))
 8021808:	f241 3188 	movw	r1, #5000	; 0x1388
 802180c:	4832      	ldr	r0, [pc, #200]	; (80218d8 <CheckUPSStatus+0x1e4>)
 802180e:	f00e fe59 	bl	80304c4 <IsTimeout>
 8021812:	4603      	mov	r3, r0
 8021814:	2b00      	cmp	r3, #0
 8021816:	d04d      	beq.n	80218b4 <CheckUPSStatus+0x1c0>
                {
                    if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 8021818:	4b30      	ldr	r3, [pc, #192]	; (80218dc <CheckUPSStatus+0x1e8>)
 802181a:	781b      	ldrb	r3, [r3, #0]
 802181c:	2b00      	cmp	r3, #0
 802181e:	d008      	beq.n	8021832 <CheckUPSStatus+0x13e>
                        (gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 8021820:	4b28      	ldr	r3, [pc, #160]	; (80218c4 <CheckUPSStatus+0x1d0>)
 8021822:	795b      	ldrb	r3, [r3, #5]
 8021824:	b2db      	uxtb	r3, r3
                    if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 8021826:	2b00      	cmp	r3, #0
 8021828:	d007      	beq.n	802183a <CheckUPSStatus+0x146>
                        (gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 802182a:	4b2c      	ldr	r3, [pc, #176]	; (80218dc <CheckUPSStatus+0x1e8>)
 802182c:	781b      	ldrb	r3, [r3, #0]
 802182e:	2b01      	cmp	r3, #1
 8021830:	d103      	bne.n	802183a <CheckUPSStatus+0x146>
                        gbLampCMD_EN = DIR_RED;
 8021832:	4b2b      	ldr	r3, [pc, #172]	; (80218e0 <CheckUPSStatus+0x1ec>)
 8021834:	2202      	movs	r2, #2
 8021836:	701a      	strb	r2, [r3, #0]
 8021838:	e002      	b.n	8021840 <CheckUPSStatus+0x14c>
                    else
                        gbLampCMD_EN = DIR_GREEN;
 802183a:	4b29      	ldr	r3, [pc, #164]	; (80218e0 <CheckUPSStatus+0x1ec>)
 802183c:	2201      	movs	r2, #1
 802183e:	701a      	strb	r2, [r3, #0]

                    if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 8021840:	4b26      	ldr	r3, [pc, #152]	; (80218dc <CheckUPSStatus+0x1e8>)
 8021842:	785b      	ldrb	r3, [r3, #1]
 8021844:	2b00      	cmp	r3, #0
 8021846:	d008      	beq.n	802185a <CheckUPSStatus+0x166>
                        (gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 8021848:	4b1e      	ldr	r3, [pc, #120]	; (80218c4 <CheckUPSStatus+0x1d0>)
 802184a:	791b      	ldrb	r3, [r3, #4]
 802184c:	b2db      	uxtb	r3, r3
                    if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 802184e:	2b00      	cmp	r3, #0
 8021850:	d007      	beq.n	8021862 <CheckUPSStatus+0x16e>
                        (gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 8021852:	4b22      	ldr	r3, [pc, #136]	; (80218dc <CheckUPSStatus+0x1e8>)
 8021854:	785b      	ldrb	r3, [r3, #1]
 8021856:	2b01      	cmp	r3, #1
 8021858:	d103      	bne.n	8021862 <CheckUPSStatus+0x16e>
                        gbLampCMD_EX = DIR_RED;
 802185a:	4b22      	ldr	r3, [pc, #136]	; (80218e4 <CheckUPSStatus+0x1f0>)
 802185c:	2202      	movs	r2, #2
 802185e:	701a      	strb	r2, [r3, #0]
 8021860:	e002      	b.n	8021868 <CheckUPSStatus+0x174>
                    else
                        gbLampCMD_EX = DIR_GREEN;
 8021862:	4b20      	ldr	r3, [pc, #128]	; (80218e4 <CheckUPSStatus+0x1f0>)
 8021864:	2201      	movs	r2, #1
 8021866:	701a      	strb	r2, [r3, #0]

                    gbPowerFailFlag = FLG_OFF;
 8021868:	4b18      	ldr	r3, [pc, #96]	; (80218cc <CheckUPSStatus+0x1d8>)
 802186a:	2200      	movs	r2, #0
 802186c:	701a      	strb	r2, [r3, #0]
                    gGCUStatus.bUPSStatus = bUPSStatus;
 802186e:	4a15      	ldr	r2, [pc, #84]	; (80218c4 <CheckUPSStatus+0x1d0>)
 8021870:	79fb      	ldrb	r3, [r7, #7]
 8021872:	7493      	strb	r3, [r2, #18]
                    ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 8021874:	4b1a      	ldr	r3, [pc, #104]	; (80218e0 <CheckUPSStatus+0x1ec>)
 8021876:	781b      	ldrb	r3, [r3, #0]
 8021878:	4a1a      	ldr	r2, [pc, #104]	; (80218e4 <CheckUPSStatus+0x1f0>)
 802187a:	7812      	ldrb	r2, [r2, #0]
 802187c:	4611      	mov	r1, r2
 802187e:	4618      	mov	r0, r3
 8021880:	f7ff fe22 	bl	80214c8 <ControlDirectionLED>
                    printf(" [CheckUPSStatus] Power recovered  \n");
 8021884:	4818      	ldr	r0, [pc, #96]	; (80218e8 <CheckUPSStatus+0x1f4>)
 8021886:	f007 fdb1 	bl	80293ec <printf_>
            {
                ResetTimer(&timerPowerFailureCheck);
            }
        }

        break;
 802188a:	e013      	b.n	80218b4 <CheckUPSStatus+0x1c0>
                SetTimer(&timerPowerRecoveryCheck);
 802188c:	4812      	ldr	r0, [pc, #72]	; (80218d8 <CheckUPSStatus+0x1e4>)
 802188e:	f00e fdf7 	bl	8030480 <SetTimer>
                ResetTimer(&timerPowerFailureCheck);
 8021892:	480f      	ldr	r0, [pc, #60]	; (80218d0 <CheckUPSStatus+0x1dc>)
 8021894:	f00e fe08 	bl	80304a8 <ResetTimer>
        break;
 8021898:	e00c      	b.n	80218b4 <CheckUPSStatus+0x1c0>
            gGCUStatus.bUPSStatus = bUPSStatus;
 802189a:	4a0a      	ldr	r2, [pc, #40]	; (80218c4 <CheckUPSStatus+0x1d0>)
 802189c:	79fb      	ldrb	r3, [r7, #7]
 802189e:	7493      	strb	r3, [r2, #18]
            if (timerPowerFailureCheck.fStart)
 80218a0:	4b0b      	ldr	r3, [pc, #44]	; (80218d0 <CheckUPSStatus+0x1dc>)
 80218a2:	781b      	ldrb	r3, [r3, #0]
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d005      	beq.n	80218b4 <CheckUPSStatus+0x1c0>
                ResetTimer(&timerPowerFailureCheck);
 80218a8:	4809      	ldr	r0, [pc, #36]	; (80218d0 <CheckUPSStatus+0x1dc>)
 80218aa:	f00e fdfd 	bl	80304a8 <ResetTimer>
        break;
 80218ae:	e001      	b.n	80218b4 <CheckUPSStatus+0x1c0>
        break;
 80218b0:	bf00      	nop
 80218b2:	e000      	b.n	80218b6 <CheckUPSStatus+0x1c2>
        break;
 80218b4:	bf00      	nop
    }
}
 80218b6:	bf00      	nop
 80218b8:	3708      	adds	r7, #8
 80218ba:	46bd      	mov	sp, r7
 80218bc:	bd80      	pop	{r7, pc}
 80218be:	bf00      	nop
 80218c0:	58021400 	.word	0x58021400
 80218c4:	24000490 	.word	0x24000490
 80218c8:	08031c1c 	.word	0x08031c1c
 80218cc:	24000137 	.word	0x24000137
 80218d0:	24000184 	.word	0x24000184
 80218d4:	08031c44 	.word	0x08031c44
 80218d8:	24000190 	.word	0x24000190
 80218dc:	240004b4 	.word	0x240004b4
 80218e0:	24000135 	.word	0x24000135
 80218e4:	24000136 	.word	0x24000136
 80218e8:	08031c68 	.word	0x08031c68

080218ec <CheckEmergencySignal>:

void CheckEmergencySignal(void)
{
 80218ec:	b580      	push	{r7, lr}
 80218ee:	b084      	sub	sp, #16
 80218f0:	af00      	add	r7, sp, #0
    BYTE bNewEmergencySignal = OFF;
 80218f2:	2300      	movs	r3, #0
 80218f4:	73fb      	strb	r3, [r7, #15]
    BYTE bDipSwitch4 = ReadDipSwitch() & MASK_EMG_SIGNAL;
 80218f6:	4b52      	ldr	r3, [pc, #328]	; (8021a40 <CheckEmergencySignal+0x154>)
 80218f8:	691b      	ldr	r3, [r3, #16]
 80218fa:	b2db      	uxtb	r3, r3
 80218fc:	43db      	mvns	r3, r3
 80218fe:	b2db      	uxtb	r3, r3
 8021900:	f003 0308 	and.w	r3, r3, #8
 8021904:	71fb      	strb	r3, [r7, #7]
    T_GCU_OP_MODE newMode;
    int nTriggerCount;

    if (bDipSwitch4)
 8021906:	79fb      	ldrb	r3, [r7, #7]
 8021908:	2b00      	cmp	r3, #0
 802190a:	d002      	beq.n	8021912 <CheckEmergencySignal+0x26>
        bNewEmergencySignal = OFF;
 802190c:	2300      	movs	r3, #0
 802190e:	73fb      	strb	r3, [r7, #15]
 8021910:	e006      	b.n	8021920 <CheckEmergencySignal+0x34>
    else
        bNewEmergencySignal = (BYTE)IsEMGSignalOn();     //dip4가 low 일때 bNewEmergencySignal 가 1인지 0인지 판단. active high 이므로 emg가 들어올때 1로 들어옴
 8021912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8021916:	484a      	ldr	r0, [pc, #296]	; (8021a40 <CheckEmergencySignal+0x154>)
 8021918:	f009 fab6 	bl	802ae88 <HAL_GPIO_ReadPin>
 802191c:	4603      	mov	r3, r0
 802191e:	73fb      	strb	r3, [r7, #15]
    //else
    //    gGCUStatus.ModeStatus.b.nEmergencyMode = OFF;

    // Prod Board - High active (EMG) - Should check whether the board itself convert signal.
     //if (!bNewEmergencySignal)
    if (bNewEmergencySignal)								// cross check 가 필요해 보입니다. 20231127 pms
 8021920:	7bfb      	ldrb	r3, [r7, #15]
 8021922:	2b00      	cmp	r3, #0
 8021924:	d006      	beq.n	8021934 <CheckEmergencySignal+0x48>
         gGCUStatus.ModeStatus.b.nEmergencyMode = ON;		//nEmergencyMode -> EmergencyMode 로 이름 변경이 여부 체크
 8021926:	4a47      	ldr	r2, [pc, #284]	; (8021a44 <CheckEmergencySignal+0x158>)
 8021928:	7813      	ldrb	r3, [r2, #0]
 802192a:	2101      	movs	r1, #1
 802192c:	f361 1305 	bfi	r3, r1, #4, #2
 8021930:	7013      	strb	r3, [r2, #0]
 8021932:	e004      	b.n	802193e <CheckEmergencySignal+0x52>
     else
         gGCUStatus.ModeStatus.b.nEmergencyMode = OFF;
 8021934:	4a43      	ldr	r2, [pc, #268]	; (8021a44 <CheckEmergencySignal+0x158>)
 8021936:	7813      	ldrb	r3, [r2, #0]
 8021938:	f36f 1305 	bfc	r3, #4, #2
 802193c:	7013      	strb	r3, [r2, #0]

    if (gbPrevEmgSignal != bNewEmergencySignal)		//gbPrevEmgSignal의 초기 상태는 0. //bNewEmergencySignal의 상태가 1이라면 해당 루트 진입
 802193e:	4b42      	ldr	r3, [pc, #264]	; (8021a48 <CheckEmergencySignal+0x15c>)
 8021940:	781b      	ldrb	r3, [r3, #0]
 8021942:	7bfa      	ldrb	r2, [r7, #15]
 8021944:	429a      	cmp	r2, r3
 8021946:	d00b      	beq.n	8021960 <CheckEmergencySignal+0x74>
    {
        gnSignalCount = 1;
 8021948:	4b40      	ldr	r3, [pc, #256]	; (8021a4c <CheckEmergencySignal+0x160>)
 802194a:	2201      	movs	r2, #1
 802194c:	601a      	str	r2, [r3, #0]
        gbPrevEmgSignal = bNewEmergencySignal;
 802194e:	4a3e      	ldr	r2, [pc, #248]	; (8021a48 <CheckEmergencySignal+0x15c>)
 8021950:	7bfb      	ldrb	r3, [r7, #15]
 8021952:	7013      	strb	r3, [r2, #0]
        printf(" [CheckEmergencySignal] bNewEmergencySignal: %d \n", bNewEmergencySignal);
 8021954:	7bfb      	ldrb	r3, [r7, #15]
 8021956:	4619      	mov	r1, r3
 8021958:	483d      	ldr	r0, [pc, #244]	; (8021a50 <CheckEmergencySignal+0x164>)
 802195a:	f007 fd47 	bl	80293ec <printf_>
                    }
                }
            }
        }
    }
}
 802195e:	e06b      	b.n	8021a38 <CheckEmergencySignal+0x14c>
        if (gnSignalCount)
 8021960:	4b3a      	ldr	r3, [pc, #232]	; (8021a4c <CheckEmergencySignal+0x160>)
 8021962:	681b      	ldr	r3, [r3, #0]
 8021964:	2b00      	cmp	r3, #0
 8021966:	d067      	beq.n	8021a38 <CheckEmergencySignal+0x14c>
            nTriggerCount = gGCUParameter.bEMGTimeout * TICK_COUNT_1SEC;
 8021968:	4b3a      	ldr	r3, [pc, #232]	; (8021a54 <CheckEmergencySignal+0x168>)
 802196a:	79db      	ldrb	r3, [r3, #7]
 802196c:	461a      	mov	r2, r3
 802196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021972:	fb02 f303 	mul.w	r3, r2, r3
 8021976:	60bb      	str	r3, [r7, #8]
            if (!nTriggerCount)
 8021978:	68bb      	ldr	r3, [r7, #8]
 802197a:	2b00      	cmp	r3, #0
 802197c:	d101      	bne.n	8021982 <CheckEmergencySignal+0x96>
                nTriggerCount = 1;
 802197e:	2301      	movs	r3, #1
 8021980:	60bb      	str	r3, [r7, #8]
            if (gnSignalCount++ == nTriggerCount)
 8021982:	4b32      	ldr	r3, [pc, #200]	; (8021a4c <CheckEmergencySignal+0x160>)
 8021984:	681b      	ldr	r3, [r3, #0]
 8021986:	1c5a      	adds	r2, r3, #1
 8021988:	4930      	ldr	r1, [pc, #192]	; (8021a4c <CheckEmergencySignal+0x160>)
 802198a:	600a      	str	r2, [r1, #0]
 802198c:	68ba      	ldr	r2, [r7, #8]
 802198e:	429a      	cmp	r2, r3
 8021990:	d152      	bne.n	8021a38 <CheckEmergencySignal+0x14c>
                gnSignalCount = 0;
 8021992:	4b2e      	ldr	r3, [pc, #184]	; (8021a4c <CheckEmergencySignal+0x160>)
 8021994:	2200      	movs	r2, #0
 8021996:	601a      	str	r2, [r3, #0]
                if (gGCUStatus.ModeStatus.b.nEmergencyMode == ON)
 8021998:	4b2a      	ldr	r3, [pc, #168]	; (8021a44 <CheckEmergencySignal+0x158>)
 802199a:	781b      	ldrb	r3, [r3, #0]
 802199c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80219a0:	b2db      	uxtb	r3, r3
 80219a2:	2b10      	cmp	r3, #16
 80219a4:	d11f      	bne.n	80219e6 <CheckEmergencySignal+0xfa>
                    if (gGCUStatus.ModuleAlarm.b.nEMGSignal == OFF)
 80219a6:	4b27      	ldr	r3, [pc, #156]	; (8021a44 <CheckEmergencySignal+0x158>)
 80219a8:	7b1b      	ldrb	r3, [r3, #12]
 80219aa:	f003 0310 	and.w	r3, r3, #16
 80219ae:	b2db      	uxtb	r3, r3
 80219b0:	2b00      	cmp	r3, #0
 80219b2:	d141      	bne.n	8021a38 <CheckEmergencySignal+0x14c>
                    	 printf(" [CheckEmergencySignal] EMG on!  \n");
 80219b4:	4828      	ldr	r0, [pc, #160]	; (8021a58 <CheckEmergencySignal+0x16c>)
 80219b6:	f007 fd19 	bl	80293ec <printf_>
                        gGCUStatus.ModuleAlarm.b.nEMGSignal = ON;
 80219ba:	4a22      	ldr	r2, [pc, #136]	; (8021a44 <CheckEmergencySignal+0x158>)
 80219bc:	7b13      	ldrb	r3, [r2, #12]
 80219be:	f043 0310 	orr.w	r3, r3, #16
 80219c2:	7313      	strb	r3, [r2, #12]
                        newMode.bServiceMode_EN = NO_SERVICE;
 80219c4:	2300      	movs	r3, #0
 80219c6:	703b      	strb	r3, [r7, #0]
                        newMode.bServiceMode_EX = NO_SERVICE;
 80219c8:	2300      	movs	r3, #0
 80219ca:	707b      	strb	r3, [r7, #1]
                        newMode.bEmergencyMaint = gCurGCUOpMode.bEmergencyMaint | EMERGENCY_MODE;
 80219cc:	4b23      	ldr	r3, [pc, #140]	; (8021a5c <CheckEmergencySignal+0x170>)
 80219ce:	789b      	ldrb	r3, [r3, #2]
 80219d0:	f043 0301 	orr.w	r3, r3, #1
 80219d4:	b2db      	uxtb	r3, r3
 80219d6:	70bb      	strb	r3, [r7, #2]
                        newMode.bFlapDoorMode = FD_MODE_OPEN;
 80219d8:	2301      	movs	r3, #1
 80219da:	70fb      	strb	r3, [r7, #3]
                        SetNewOpMode(&newMode);
 80219dc:	463b      	mov	r3, r7
 80219de:	4618      	mov	r0, r3
 80219e0:	f7ff fa90 	bl	8020f04 <SetNewOpMode>
}
 80219e4:	e028      	b.n	8021a38 <CheckEmergencySignal+0x14c>
                    if (gGCUStatus.ModuleAlarm.b.nEMGSignal == ON)
 80219e6:	4b17      	ldr	r3, [pc, #92]	; (8021a44 <CheckEmergencySignal+0x158>)
 80219e8:	7b1b      	ldrb	r3, [r3, #12]
 80219ea:	f003 0310 	and.w	r3, r3, #16
 80219ee:	b2db      	uxtb	r3, r3
 80219f0:	2b00      	cmp	r3, #0
 80219f2:	d021      	beq.n	8021a38 <CheckEmergencySignal+0x14c>
                    	printf(" [CheckEmergencySignal] EMG off!  \n");
 80219f4:	481a      	ldr	r0, [pc, #104]	; (8021a60 <CheckEmergencySignal+0x174>)
 80219f6:	f007 fcf9 	bl	80293ec <printf_>
                        gGCUStatus.ModuleAlarm.b.nEMGSignal = OFF;
 80219fa:	4a12      	ldr	r2, [pc, #72]	; (8021a44 <CheckEmergencySignal+0x158>)
 80219fc:	7b13      	ldrb	r3, [r2, #12]
 80219fe:	f36f 1304 	bfc	r3, #4, #1
 8021a02:	7313      	strb	r3, [r2, #12]
                        newMode.bServiceMode_EN = gCurGCUOpMode.bServiceMode_EN;
 8021a04:	4b15      	ldr	r3, [pc, #84]	; (8021a5c <CheckEmergencySignal+0x170>)
 8021a06:	781b      	ldrb	r3, [r3, #0]
 8021a08:	703b      	strb	r3, [r7, #0]
                        newMode.bServiceMode_EX = gCurGCUOpMode.bServiceMode_EN;
 8021a0a:	4b14      	ldr	r3, [pc, #80]	; (8021a5c <CheckEmergencySignal+0x170>)
 8021a0c:	781b      	ldrb	r3, [r3, #0]
 8021a0e:	707b      	strb	r3, [r7, #1]
                        newMode.bEmergencyMaint = gCurGCUOpMode.bEmergencyMaint & (BYTE)(~EMERGENCY_MODE);
 8021a10:	4b12      	ldr	r3, [pc, #72]	; (8021a5c <CheckEmergencySignal+0x170>)
 8021a12:	789b      	ldrb	r3, [r3, #2]
 8021a14:	f023 0301 	bic.w	r3, r3, #1
 8021a18:	b2db      	uxtb	r3, r3
 8021a1a:	70bb      	strb	r3, [r7, #2]
                        if (newMode.bEmergencyMaint & MAINTENANCE_MODE)
 8021a1c:	78bb      	ldrb	r3, [r7, #2]
 8021a1e:	f003 0310 	and.w	r3, r3, #16
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d002      	beq.n	8021a2c <CheckEmergencySignal+0x140>
                            newMode.bFlapDoorMode = FD_MODE_OPEN;
 8021a26:	2301      	movs	r3, #1
 8021a28:	70fb      	strb	r3, [r7, #3]
 8021a2a:	e001      	b.n	8021a30 <CheckEmergencySignal+0x144>
                            newMode.bFlapDoorMode = FD_MODE_CLOSE;
 8021a2c:	2300      	movs	r3, #0
 8021a2e:	70fb      	strb	r3, [r7, #3]
                        SetNewOpMode(&newMode);
 8021a30:	463b      	mov	r3, r7
 8021a32:	4618      	mov	r0, r3
 8021a34:	f7ff fa66 	bl	8020f04 <SetNewOpMode>
}
 8021a38:	bf00      	nop
 8021a3a:	3710      	adds	r7, #16
 8021a3c:	46bd      	mov	sp, r7
 8021a3e:	bd80      	pop	{r7, pc}
 8021a40:	58020400 	.word	0x58020400
 8021a44:	24000490 	.word	0x24000490
 8021a48:	2400013b 	.word	0x2400013b
 8021a4c:	24000424 	.word	0x24000424
 8021a50:	08031c90 	.word	0x08031c90
 8021a54:	24000480 	.word	0x24000480
 8021a58:	08031cc4 	.word	0x08031cc4
 8021a5c:	240004b4 	.word	0x240004b4
 8021a60:	08031ce8 	.word	0x08031ce8

08021a64 <CheckBuzzerTimer>:

void CheckBuzzerTimer(void)
{
 8021a64:	b580      	push	{r7, lr}
 8021a66:	af00      	add	r7, sp, #0
    if (timerBuzzer.fStart)
 8021a68:	4b09      	ldr	r3, [pc, #36]	; (8021a90 <CheckBuzzerTimer+0x2c>)
 8021a6a:	781b      	ldrb	r3, [r3, #0]
 8021a6c:	2b00      	cmp	r3, #0
 8021a6e:	d00d      	beq.n	8021a8c <CheckBuzzerTimer+0x28>
        {
        if (IsTimeout(&timerBuzzer, gdwBuzzerTimeout))
 8021a70:	4b08      	ldr	r3, [pc, #32]	; (8021a94 <CheckBuzzerTimer+0x30>)
 8021a72:	681b      	ldr	r3, [r3, #0]
 8021a74:	4619      	mov	r1, r3
 8021a76:	4806      	ldr	r0, [pc, #24]	; (8021a90 <CheckBuzzerTimer+0x2c>)
 8021a78:	f00e fd24 	bl	80304c4 <IsTimeout>
 8021a7c:	4603      	mov	r3, r0
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d004      	beq.n	8021a8c <CheckBuzzerTimer+0x28>
            {
            ResetTimer(&timerBuzzer);
 8021a82:	4803      	ldr	r0, [pc, #12]	; (8021a90 <CheckBuzzerTimer+0x2c>)
 8021a84:	f00e fd10 	bl	80304a8 <ResetTimer>
            	 BuzzerOff();
 8021a88:	f003 fcb2 	bl	80253f0 <BuzzerOff>
            }
    }
}
 8021a8c:	bf00      	nop
 8021a8e:	bd80      	pop	{r7, pc}
 8021a90:	24000250 	.word	0x24000250
 8021a94:	24000140 	.word	0x24000140

08021a98 <CheckIndicatorTimer>:

void CheckIndicatorTimer(void)
{
 8021a98:	b580      	push	{r7, lr}
 8021a9a:	af00      	add	r7, sp, #0
    if (timerIndicator.fStart)
 8021a9c:	4b0d      	ldr	r3, [pc, #52]	; (8021ad4 <CheckIndicatorTimer+0x3c>)
 8021a9e:	781b      	ldrb	r3, [r3, #0]
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	d014      	beq.n	8021ace <CheckIndicatorTimer+0x36>
    {
        if (IsTimeout(&timerIndicator, gdwTimeoutIndicator))
 8021aa4:	4b0c      	ldr	r3, [pc, #48]	; (8021ad8 <CheckIndicatorTimer+0x40>)
 8021aa6:	681b      	ldr	r3, [r3, #0]
 8021aa8:	4619      	mov	r1, r3
 8021aaa:	480a      	ldr	r0, [pc, #40]	; (8021ad4 <CheckIndicatorTimer+0x3c>)
 8021aac:	f00e fd0a 	bl	80304c4 <IsTimeout>
 8021ab0:	4603      	mov	r3, r0
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	d00b      	beq.n	8021ace <CheckIndicatorTimer+0x36>
        {
            printf(" [CheckIndicatorTimer] Indicator time out!!  \n");
 8021ab6:	4809      	ldr	r0, [pc, #36]	; (8021adc <CheckIndicatorTimer+0x44>)
 8021ab8:	f007 fc98 	bl	80293ec <printf_>
            ResetTimer(&timerIndicator);
 8021abc:	4805      	ldr	r0, [pc, #20]	; (8021ad4 <CheckIndicatorTimer+0x3c>)
 8021abe:	f00e fcf3 	bl	80304a8 <ResetTimer>
            ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 8021ac2:	2300      	movs	r3, #0
 8021ac4:	2200      	movs	r2, #0
 8021ac6:	2100      	movs	r1, #0
 8021ac8:	2000      	movs	r0, #0
 8021aca:	f7ff fd59 	bl	8021580 <ControlIndicator>
        }
    }
}
 8021ace:	bf00      	nop
 8021ad0:	bd80      	pop	{r7, pc}
 8021ad2:	bf00      	nop
 8021ad4:	240001cc 	.word	0x240001cc
 8021ad8:	24000144 	.word	0x24000144
 8021adc:	08031d0c 	.word	0x08031d0c

08021ae0 <CheckPassSenError>:
        }
    }
}

void CheckPassSenError(bool isSwing)
{
 8021ae0:	b580      	push	{r7, lr}
 8021ae2:	b084      	sub	sp, #16
 8021ae4:	af00      	add	r7, sp, #0
 8021ae6:	4603      	mov	r3, r0
 8021ae8:	71fb      	strb	r3, [r7, #7]
    int i;
    BYTE bSensorData = RD_PASSSEN1;
 8021aea:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8021aee:	781b      	ldrb	r3, [r3, #0]
 8021af0:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < 16; i++)
 8021af2:	2300      	movs	r3, #0
 8021af4:	60fb      	str	r3, [r7, #12]
 8021af6:	e0de      	b.n	8021cb6 <CheckPassSenError+0x1d6>
    {
        if (i == 8)
 8021af8:	68fb      	ldr	r3, [r7, #12]
 8021afa:	2b08      	cmp	r3, #8
 8021afc:	d102      	bne.n	8021b04 <CheckPassSenError+0x24>
            bSensorData = RD_PASSSEN2;
 8021afe:	4b8d      	ldr	r3, [pc, #564]	; (8021d34 <CheckPassSenError+0x254>)
 8021b00:	781b      	ldrb	r3, [r3, #0]
 8021b02:	72fb      	strb	r3, [r7, #11]

        if (bSensorData & (1 << (i % 8)))
 8021b04:	7afa      	ldrb	r2, [r7, #11]
 8021b06:	68fb      	ldr	r3, [r7, #12]
 8021b08:	4259      	negs	r1, r3
 8021b0a:	f003 0307 	and.w	r3, r3, #7
 8021b0e:	f001 0107 	and.w	r1, r1, #7
 8021b12:	bf58      	it	pl
 8021b14:	424b      	negpl	r3, r1
 8021b16:	fa42 f303 	asr.w	r3, r2, r3
 8021b1a:	f003 0301 	and.w	r3, r3, #1
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	f000 808a 	beq.w	8021c38 <CheckPassSenError+0x158>
        {
            if (mdwTickPSensorBlock[i] == (gGCUParameter.bSensorBlockTimeout * TICK_COUNT_1SEC * 10))
 8021b24:	4a84      	ldr	r2, [pc, #528]	; (8021d38 <CheckPassSenError+0x258>)
 8021b26:	68fb      	ldr	r3, [r7, #12]
 8021b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021b2c:	4a83      	ldr	r2, [pc, #524]	; (8021d3c <CheckPassSenError+0x25c>)
 8021b2e:	7a12      	ldrb	r2, [r2, #8]
 8021b30:	4611      	mov	r1, r2
 8021b32:	f242 7210 	movw	r2, #10000	; 0x2710
 8021b36:	fb01 f202 	mul.w	r2, r1, r2
 8021b3a:	4293      	cmp	r3, r2
 8021b3c:	d165      	bne.n	8021c0a <CheckPassSenError+0x12a>
            {
                gdwPSensorError |= (1 << i);
 8021b3e:	2201      	movs	r2, #1
 8021b40:	68fb      	ldr	r3, [r7, #12]
 8021b42:	fa02 f303 	lsl.w	r3, r2, r3
 8021b46:	461a      	mov	r2, r3
 8021b48:	4b7d      	ldr	r3, [pc, #500]	; (8021d40 <CheckPassSenError+0x260>)
 8021b4a:	681b      	ldr	r3, [r3, #0]
 8021b4c:	4313      	orrs	r3, r2
 8021b4e:	4a7c      	ldr	r2, [pc, #496]	; (8021d40 <CheckPassSenError+0x260>)
 8021b50:	6013      	str	r3, [r2, #0]

                if (gGCUStatus.ModuleAlarm.b.nPSensor == OFF)
 8021b52:	4b7c      	ldr	r3, [pc, #496]	; (8021d44 <CheckPassSenError+0x264>)
 8021b54:	7b1b      	ldrb	r3, [r3, #12]
 8021b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021b5a:	b2db      	uxtb	r3, r3
 8021b5c:	2b00      	cmp	r3, #0
 8021b5e:	d10b      	bne.n	8021b78 <CheckPassSenError+0x98>
                {
                    if (gCurGCUOpMode.bEmergencyMaint == MODE_NONE)
 8021b60:	4b79      	ldr	r3, [pc, #484]	; (8021d48 <CheckPassSenError+0x268>)
 8021b62:	789b      	ldrb	r3, [r3, #2]
 8021b64:	2b00      	cmp	r3, #0
 8021b66:	d104      	bne.n	8021b72 <CheckPassSenError+0x92>
                        gGCUStatus.ModuleAlarm.b.nPSensor = ON;
 8021b68:	4a76      	ldr	r2, [pc, #472]	; (8021d44 <CheckPassSenError+0x264>)
 8021b6a:	7b13      	ldrb	r3, [r2, #12]
 8021b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b70:	7313      	strb	r3, [r2, #12]

                    printf(" [CheckPassSenError] Sensor Error Detected!!  \n");
 8021b72:	4876      	ldr	r0, [pc, #472]	; (8021d4c <CheckPassSenError+0x26c>)
 8021b74:	f007 fc3a 	bl	80293ec <printf_>
                }

                if (i >= 0 && i < 8)
 8021b78:	68fb      	ldr	r3, [r7, #12]
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	db10      	blt.n	8021ba0 <CheckPassSenError+0xc0>
 8021b7e:	68fb      	ldr	r3, [r7, #12]
 8021b80:	2b07      	cmp	r3, #7
 8021b82:	dc0d      	bgt.n	8021ba0 <CheckPassSenError+0xc0>
                    psenError.B.bSen1 |= (1 << i);
 8021b84:	4b72      	ldr	r3, [pc, #456]	; (8021d50 <CheckPassSenError+0x270>)
 8021b86:	781b      	ldrb	r3, [r3, #0]
 8021b88:	b25a      	sxtb	r2, r3
 8021b8a:	2101      	movs	r1, #1
 8021b8c:	68fb      	ldr	r3, [r7, #12]
 8021b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8021b92:	b25b      	sxtb	r3, r3
 8021b94:	4313      	orrs	r3, r2
 8021b96:	b25b      	sxtb	r3, r3
 8021b98:	b2da      	uxtb	r2, r3
 8021b9a:	4b6d      	ldr	r3, [pc, #436]	; (8021d50 <CheckPassSenError+0x270>)
 8021b9c:	701a      	strb	r2, [r3, #0]
 8021b9e:	e013      	b.n	8021bc8 <CheckPassSenError+0xe8>
                else if (i >= 8 && i < 16)
 8021ba0:	68fb      	ldr	r3, [r7, #12]
 8021ba2:	2b07      	cmp	r3, #7
 8021ba4:	dd10      	ble.n	8021bc8 <CheckPassSenError+0xe8>
 8021ba6:	68fb      	ldr	r3, [r7, #12]
 8021ba8:	2b0f      	cmp	r3, #15
 8021baa:	dc0d      	bgt.n	8021bc8 <CheckPassSenError+0xe8>
                    psenError.B.bSen2 |= (1 << (i - 8));
 8021bac:	4b68      	ldr	r3, [pc, #416]	; (8021d50 <CheckPassSenError+0x270>)
 8021bae:	785b      	ldrb	r3, [r3, #1]
 8021bb0:	b25a      	sxtb	r2, r3
 8021bb2:	68fb      	ldr	r3, [r7, #12]
 8021bb4:	3b08      	subs	r3, #8
 8021bb6:	2101      	movs	r1, #1
 8021bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8021bbc:	b25b      	sxtb	r3, r3
 8021bbe:	4313      	orrs	r3, r2
 8021bc0:	b25b      	sxtb	r3, r3
 8021bc2:	b2da      	uxtb	r2, r3
 8021bc4:	4b62      	ldr	r3, [pc, #392]	; (8021d50 <CheckPassSenError+0x270>)
 8021bc6:	705a      	strb	r2, [r3, #1]

                if (gCurGCUOpMode.bEmergencyMaint == MODE_NONE)
 8021bc8:	4b5f      	ldr	r3, [pc, #380]	; (8021d48 <CheckPassSenError+0x268>)
 8021bca:	789b      	ldrb	r3, [r3, #2]
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	d112      	bne.n	8021bf6 <CheckPassSenError+0x116>
                {
                    if (psenError.swing.safety_EN || psenError.swing.safety_EX)
 8021bd0:	4b5f      	ldr	r3, [pc, #380]	; (8021d50 <CheckPassSenError+0x270>)
 8021bd2:	781b      	ldrb	r3, [r3, #0]
 8021bd4:	f023 030f 	bic.w	r3, r3, #15
 8021bd8:	b2db      	uxtb	r3, r3
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	d106      	bne.n	8021bec <CheckPassSenError+0x10c>
 8021bde:	4b5c      	ldr	r3, [pc, #368]	; (8021d50 <CheckPassSenError+0x270>)
 8021be0:	785b      	ldrb	r3, [r3, #1]
 8021be2:	f023 030f 	bic.w	r3, r3, #15
 8021be6:	b2db      	uxtb	r3, r3
 8021be8:	2b00      	cmp	r3, #0
 8021bea:	d004      	beq.n	8021bf6 <CheckPassSenError+0x116>
                        gGCUStatus.ModuleAlarm.b.nSafetyErr = ON;
 8021bec:	4a55      	ldr	r2, [pc, #340]	; (8021d44 <CheckPassSenError+0x264>)
 8021bee:	7b13      	ldrb	r3, [r2, #12]
 8021bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021bf4:	7313      	strb	r3, [r2, #12]
                }

                mdwTickPSensorBlock[i]++;
 8021bf6:	4a50      	ldr	r2, [pc, #320]	; (8021d38 <CheckPassSenError+0x258>)
 8021bf8:	68fb      	ldr	r3, [r7, #12]
 8021bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021bfe:	1c5a      	adds	r2, r3, #1
 8021c00:	494d      	ldr	r1, [pc, #308]	; (8021d38 <CheckPassSenError+0x258>)
 8021c02:	68fb      	ldr	r3, [r7, #12]
 8021c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021c08:	e052      	b.n	8021cb0 <CheckPassSenError+0x1d0>
            }
            else if (mdwTickPSensorBlock[i] < (gGCUParameter.bSensorBlockTimeout * TICK_COUNT_1SEC * 10))
 8021c0a:	4a4b      	ldr	r2, [pc, #300]	; (8021d38 <CheckPassSenError+0x258>)
 8021c0c:	68fb      	ldr	r3, [r7, #12]
 8021c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021c12:	4a4a      	ldr	r2, [pc, #296]	; (8021d3c <CheckPassSenError+0x25c>)
 8021c14:	7a12      	ldrb	r2, [r2, #8]
 8021c16:	4611      	mov	r1, r2
 8021c18:	f242 7210 	movw	r2, #10000	; 0x2710
 8021c1c:	fb01 f202 	mul.w	r2, r1, r2
 8021c20:	4293      	cmp	r3, r2
 8021c22:	d245      	bcs.n	8021cb0 <CheckPassSenError+0x1d0>
            {
                mdwTickPSensorBlock[i]++;
 8021c24:	4a44      	ldr	r2, [pc, #272]	; (8021d38 <CheckPassSenError+0x258>)
 8021c26:	68fb      	ldr	r3, [r7, #12]
 8021c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021c2c:	1c5a      	adds	r2, r3, #1
 8021c2e:	4942      	ldr	r1, [pc, #264]	; (8021d38 <CheckPassSenError+0x258>)
 8021c30:	68fb      	ldr	r3, [r7, #12]
 8021c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021c36:	e03b      	b.n	8021cb0 <CheckPassSenError+0x1d0>
            }
        }
        else
        {
            mdwTickPSensorBlock[i] = 0;
 8021c38:	4a3f      	ldr	r2, [pc, #252]	; (8021d38 <CheckPassSenError+0x258>)
 8021c3a:	68fb      	ldr	r3, [r7, #12]
 8021c3c:	2100      	movs	r1, #0
 8021c3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            gdwPSensorError &= ~(1 << i);
 8021c42:	2201      	movs	r2, #1
 8021c44:	68fb      	ldr	r3, [r7, #12]
 8021c46:	fa02 f303 	lsl.w	r3, r2, r3
 8021c4a:	43db      	mvns	r3, r3
 8021c4c:	461a      	mov	r2, r3
 8021c4e:	4b3c      	ldr	r3, [pc, #240]	; (8021d40 <CheckPassSenError+0x260>)
 8021c50:	681b      	ldr	r3, [r3, #0]
 8021c52:	4013      	ands	r3, r2
 8021c54:	4a3a      	ldr	r2, [pc, #232]	; (8021d40 <CheckPassSenError+0x260>)
 8021c56:	6013      	str	r3, [r2, #0]

            if (i >= 0 && i < 8)
 8021c58:	68fb      	ldr	r3, [r7, #12]
 8021c5a:	2b00      	cmp	r3, #0
 8021c5c:	db12      	blt.n	8021c84 <CheckPassSenError+0x1a4>
 8021c5e:	68fb      	ldr	r3, [r7, #12]
 8021c60:	2b07      	cmp	r3, #7
 8021c62:	dc0f      	bgt.n	8021c84 <CheckPassSenError+0x1a4>
                psenError.B.bSen1 &= ~(1 << i);
 8021c64:	4b3a      	ldr	r3, [pc, #232]	; (8021d50 <CheckPassSenError+0x270>)
 8021c66:	781b      	ldrb	r3, [r3, #0]
 8021c68:	b25a      	sxtb	r2, r3
 8021c6a:	2101      	movs	r1, #1
 8021c6c:	68fb      	ldr	r3, [r7, #12]
 8021c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8021c72:	b25b      	sxtb	r3, r3
 8021c74:	43db      	mvns	r3, r3
 8021c76:	b25b      	sxtb	r3, r3
 8021c78:	4013      	ands	r3, r2
 8021c7a:	b25b      	sxtb	r3, r3
 8021c7c:	b2da      	uxtb	r2, r3
 8021c7e:	4b34      	ldr	r3, [pc, #208]	; (8021d50 <CheckPassSenError+0x270>)
 8021c80:	701a      	strb	r2, [r3, #0]
 8021c82:	e015      	b.n	8021cb0 <CheckPassSenError+0x1d0>
            else if (i >= 8 && i < 16)
 8021c84:	68fb      	ldr	r3, [r7, #12]
 8021c86:	2b07      	cmp	r3, #7
 8021c88:	dd12      	ble.n	8021cb0 <CheckPassSenError+0x1d0>
 8021c8a:	68fb      	ldr	r3, [r7, #12]
 8021c8c:	2b0f      	cmp	r3, #15
 8021c8e:	dc0f      	bgt.n	8021cb0 <CheckPassSenError+0x1d0>
                psenError.B.bSen2 &= ~(1 << (i - 8));
 8021c90:	4b2f      	ldr	r3, [pc, #188]	; (8021d50 <CheckPassSenError+0x270>)
 8021c92:	785b      	ldrb	r3, [r3, #1]
 8021c94:	b25a      	sxtb	r2, r3
 8021c96:	68fb      	ldr	r3, [r7, #12]
 8021c98:	3b08      	subs	r3, #8
 8021c9a:	2101      	movs	r1, #1
 8021c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8021ca0:	b25b      	sxtb	r3, r3
 8021ca2:	43db      	mvns	r3, r3
 8021ca4:	b25b      	sxtb	r3, r3
 8021ca6:	4013      	ands	r3, r2
 8021ca8:	b25b      	sxtb	r3, r3
 8021caa:	b2da      	uxtb	r2, r3
 8021cac:	4b28      	ldr	r3, [pc, #160]	; (8021d50 <CheckPassSenError+0x270>)
 8021cae:	705a      	strb	r2, [r3, #1]
    for (i = 0; i < 16; i++)
 8021cb0:	68fb      	ldr	r3, [r7, #12]
 8021cb2:	3301      	adds	r3, #1
 8021cb4:	60fb      	str	r3, [r7, #12]
 8021cb6:	68fb      	ldr	r3, [r7, #12]
 8021cb8:	2b0f      	cmp	r3, #15
 8021cba:	f77f af1d 	ble.w	8021af8 <CheckPassSenError+0x18>
        }
    }

    if (!gdwPSensorError)
 8021cbe:	4b20      	ldr	r3, [pc, #128]	; (8021d40 <CheckPassSenError+0x260>)
 8021cc0:	681b      	ldr	r3, [r3, #0]
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d118      	bne.n	8021cf8 <CheckPassSenError+0x218>
    {
        if (gGCUStatus.ModuleAlarm.b.nPSensor == ON)
 8021cc6:	4b1f      	ldr	r3, [pc, #124]	; (8021d44 <CheckPassSenError+0x264>)
 8021cc8:	7b1b      	ldrb	r3, [r3, #12]
 8021cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021cce:	b2db      	uxtb	r3, r3
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d004      	beq.n	8021cde <CheckPassSenError+0x1fe>
            gGCUStatus.ModuleAlarm.b.nPSensor = OFF;
 8021cd4:	4a1b      	ldr	r2, [pc, #108]	; (8021d44 <CheckPassSenError+0x264>)
 8021cd6:	7b13      	ldrb	r3, [r2, #12]
 8021cd8:	f36f 1386 	bfc	r3, #6, #1
 8021cdc:	7313      	strb	r3, [r2, #12]
        if (gGCUStatus.ModuleAlarm.b.nSafetyErr == ON)
 8021cde:	4b19      	ldr	r3, [pc, #100]	; (8021d44 <CheckPassSenError+0x264>)
 8021ce0:	7b1b      	ldrb	r3, [r3, #12]
 8021ce2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021ce6:	b2db      	uxtb	r3, r3
 8021ce8:	2b00      	cmp	r3, #0
 8021cea:	d01f      	beq.n	8021d2c <CheckPassSenError+0x24c>
            gGCUStatus.ModuleAlarm.b.nSafetyErr = OFF;
 8021cec:	4a15      	ldr	r2, [pc, #84]	; (8021d44 <CheckPassSenError+0x264>)
 8021cee:	7b13      	ldrb	r3, [r2, #12]
 8021cf0:	f36f 13c7 	bfc	r3, #7, #1
 8021cf4:	7313      	strb	r3, [r2, #12]
        {
            if (!psenError.swing.safety_EN && !psenError.swing.safety_EX)
                gGCUStatus.ModuleAlarm.b.nSafetyErr = OFF;
        }
    }
}
 8021cf6:	e019      	b.n	8021d2c <CheckPassSenError+0x24c>
        if (gGCUStatus.ModuleAlarm.b.nSafetyErr == ON)
 8021cf8:	4b12      	ldr	r3, [pc, #72]	; (8021d44 <CheckPassSenError+0x264>)
 8021cfa:	7b1b      	ldrb	r3, [r3, #12]
 8021cfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021d00:	b2db      	uxtb	r3, r3
 8021d02:	2b00      	cmp	r3, #0
 8021d04:	d012      	beq.n	8021d2c <CheckPassSenError+0x24c>
            if (!psenError.swing.safety_EN && !psenError.swing.safety_EX)
 8021d06:	4b12      	ldr	r3, [pc, #72]	; (8021d50 <CheckPassSenError+0x270>)
 8021d08:	781b      	ldrb	r3, [r3, #0]
 8021d0a:	f023 030f 	bic.w	r3, r3, #15
 8021d0e:	b2db      	uxtb	r3, r3
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	d10b      	bne.n	8021d2c <CheckPassSenError+0x24c>
 8021d14:	4b0e      	ldr	r3, [pc, #56]	; (8021d50 <CheckPassSenError+0x270>)
 8021d16:	785b      	ldrb	r3, [r3, #1]
 8021d18:	f023 030f 	bic.w	r3, r3, #15
 8021d1c:	b2db      	uxtb	r3, r3
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	d104      	bne.n	8021d2c <CheckPassSenError+0x24c>
                gGCUStatus.ModuleAlarm.b.nSafetyErr = OFF;
 8021d22:	4a08      	ldr	r2, [pc, #32]	; (8021d44 <CheckPassSenError+0x264>)
 8021d24:	7b13      	ldrb	r3, [r2, #12]
 8021d26:	f36f 13c7 	bfc	r3, #7, #1
 8021d2a:	7313      	strb	r3, [r2, #12]
}
 8021d2c:	bf00      	nop
 8021d2e:	3710      	adds	r7, #16
 8021d30:	46bd      	mov	sp, r7
 8021d32:	bd80      	pop	{r7, pc}
 8021d34:	60000100 	.word	0x60000100
 8021d38:	2400042c 	.word	0x2400042c
 8021d3c:	24000480 	.word	0x24000480
 8021d40:	24000428 	.word	0x24000428
 8021d44:	24000490 	.word	0x24000490
 8021d48:	240004b4 	.word	0x240004b4
 8021d4c:	08031d3c 	.word	0x08031d3c
 8021d50:	2400047c 	.word	0x2400047c

08021d54 <InhibitPass>:
void InhibitPass(int nDir)
{
 8021d54:	b580      	push	{r7, lr}
 8021d56:	b082      	sub	sp, #8
 8021d58:	af00      	add	r7, sp, #0
 8021d5a:	6078      	str	r0, [r7, #4]
	printf(" [InhibitPass] Dir:%d  \n", nDir);
 8021d5c:	6879      	ldr	r1, [r7, #4]
 8021d5e:	4814      	ldr	r0, [pc, #80]	; (8021db0 <InhibitPass+0x5c>)
 8021d60:	f007 fb44 	bl	80293ec <printf_>
    ControlBuzzer(BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8021d64:	4b13      	ldr	r3, [pc, #76]	; (8021db4 <InhibitPass+0x60>)
 8021d66:	7a9b      	ldrb	r3, [r3, #10]
 8021d68:	4619      	mov	r1, r3
 8021d6a:	2001      	movs	r0, #1
 8021d6c:	f7ff fb82 	bl	8021474 <ControlBuzzer>
    ControlDirectionLED(DIR_RED, DIR_RED);
 8021d70:	2102      	movs	r1, #2
 8021d72:	2002      	movs	r0, #2
 8021d74:	f7ff fba8 	bl	80214c8 <ControlDirectionLED>

    if (nDir == FROM_ENTRY)
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	2b01      	cmp	r3, #1
 8021d7c:	d108      	bne.n	8021d90 <InhibitPass+0x3c>
    {
        ControlIndicator(LAMP_RED_ON, gbIndicatorCMD_EX, gGCUParameter.bAlarmTimeout, TRUE);
 8021d7e:	4b0e      	ldr	r3, [pc, #56]	; (8021db8 <InhibitPass+0x64>)
 8021d80:	7819      	ldrb	r1, [r3, #0]
 8021d82:	4b0c      	ldr	r3, [pc, #48]	; (8021db4 <InhibitPass+0x60>)
 8021d84:	7a9a      	ldrb	r2, [r3, #10]
 8021d86:	2301      	movs	r3, #1
 8021d88:	2001      	movs	r0, #1
 8021d8a:	f7ff fbf9 	bl	8021580 <ControlIndicator>
    }
    else if (nDir == FROM_EXIT)
    {
        ControlIndicator(gbIndicatorCMD_EN, LAMP_RED_ON, gGCUParameter.bAlarmTimeout, TRUE);
    }
}
 8021d8e:	e00a      	b.n	8021da6 <InhibitPass+0x52>
    else if (nDir == FROM_EXIT)
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	2b02      	cmp	r3, #2
 8021d94:	d107      	bne.n	8021da6 <InhibitPass+0x52>
        ControlIndicator(gbIndicatorCMD_EN, LAMP_RED_ON, gGCUParameter.bAlarmTimeout, TRUE);
 8021d96:	4b09      	ldr	r3, [pc, #36]	; (8021dbc <InhibitPass+0x68>)
 8021d98:	7818      	ldrb	r0, [r3, #0]
 8021d9a:	4b06      	ldr	r3, [pc, #24]	; (8021db4 <InhibitPass+0x60>)
 8021d9c:	7a9a      	ldrb	r2, [r3, #10]
 8021d9e:	2301      	movs	r3, #1
 8021da0:	2101      	movs	r1, #1
 8021da2:	f7ff fbed 	bl	8021580 <ControlIndicator>
}
 8021da6:	bf00      	nop
 8021da8:	3708      	adds	r7, #8
 8021daa:	46bd      	mov	sp, r7
 8021dac:	bd80      	pop	{r7, pc}
 8021dae:	bf00      	nop
 8021db0:	08031d6c 	.word	0x08031d6c
 8021db4:	24000480 	.word	0x24000480
 8021db8:	24000134 	.word	0x24000134
 8021dbc:	24000133 	.word	0x24000133

08021dc0 <ClearPassageAlarm>:

void ClearPassageAlarm()
{
 8021dc0:	b580      	push	{r7, lr}
 8021dc2:	af00      	add	r7, sp, #0
    ResetTimer(&timerIllegalEnterEN);
 8021dc4:	482b      	ldr	r0, [pc, #172]	; (8021e74 <ClearPassageAlarm+0xb4>)
 8021dc6:	f00e fb6f 	bl	80304a8 <ResetTimer>
    ResetTimer(&timerIllegalEnterEX);
 8021dca:	482b      	ldr	r0, [pc, #172]	; (8021e78 <ClearPassageAlarm+0xb8>)
 8021dcc:	f00e fb6c 	bl	80304a8 <ResetTimer>
    ResetTimer(&timerLuggageWait);
 8021dd0:	482a      	ldr	r0, [pc, #168]	; (8021e7c <ClearPassageAlarm+0xbc>)
 8021dd2:	f00e fb69 	bl	80304a8 <ResetTimer>

    // Passage clear timeout is reached, clear passage
    if (gGCUStatus.PassageAlarm.b.nFromEN)
 8021dd6:	4b2a      	ldr	r3, [pc, #168]	; (8021e80 <ClearPassageAlarm+0xc0>)
 8021dd8:	7a1b      	ldrb	r3, [r3, #8]
 8021dda:	f003 0307 	and.w	r3, r3, #7
 8021dde:	b2db      	uxtb	r3, r3
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d004      	beq.n	8021dee <ClearPassageAlarm+0x2e>
        gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8021de4:	4a26      	ldr	r2, [pc, #152]	; (8021e80 <ClearPassageAlarm+0xc0>)
 8021de6:	7a13      	ldrb	r3, [r2, #8]
 8021de8:	f36f 0302 	bfc	r3, #0, #3
 8021dec:	7213      	strb	r3, [r2, #8]

    if (gGCUStatus.PassageAlarm.b.nFromEX)
 8021dee:	4b24      	ldr	r3, [pc, #144]	; (8021e80 <ClearPassageAlarm+0xc0>)
 8021df0:	7a1b      	ldrb	r3, [r3, #8]
 8021df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8021df6:	b2db      	uxtb	r3, r3
 8021df8:	2b00      	cmp	r3, #0
 8021dfa:	d004      	beq.n	8021e06 <ClearPassageAlarm+0x46>
        gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8021dfc:	4a20      	ldr	r2, [pc, #128]	; (8021e80 <ClearPassageAlarm+0xc0>)
 8021dfe:	7a13      	ldrb	r3, [r2, #8]
 8021e00:	f36f 1306 	bfc	r3, #4, #3
 8021e04:	7213      	strb	r3, [r2, #8]

    if (gGCUStatus.PassageAlarm.b.nPassOverFromEN || gGCUStatus.PassageAlarm.b.nPassOverFromEX)
 8021e06:	4b1e      	ldr	r3, [pc, #120]	; (8021e80 <ClearPassageAlarm+0xc0>)
 8021e08:	7a1b      	ldrb	r3, [r3, #8]
 8021e0a:	f003 0308 	and.w	r3, r3, #8
 8021e0e:	b2db      	uxtb	r3, r3
 8021e10:	2b00      	cmp	r3, #0
 8021e12:	d106      	bne.n	8021e22 <ClearPassageAlarm+0x62>
 8021e14:	4b1a      	ldr	r3, [pc, #104]	; (8021e80 <ClearPassageAlarm+0xc0>)
 8021e16:	7a1b      	ldrb	r3, [r3, #8]
 8021e18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021e1c:	b2db      	uxtb	r3, r3
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	d009      	beq.n	8021e36 <ClearPassageAlarm+0x76>
    {
        gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8021e22:	4a17      	ldr	r2, [pc, #92]	; (8021e80 <ClearPassageAlarm+0xc0>)
 8021e24:	7a13      	ldrb	r3, [r2, #8]
 8021e26:	f36f 03c3 	bfc	r3, #3, #1
 8021e2a:	7213      	strb	r3, [r2, #8]
        gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8021e2c:	4a14      	ldr	r2, [pc, #80]	; (8021e80 <ClearPassageAlarm+0xc0>)
 8021e2e:	7a13      	ldrb	r3, [r2, #8]
 8021e30:	f36f 13c7 	bfc	r3, #7, #1
 8021e34:	7213      	strb	r3, [r2, #8]
    }

    if (!psenNewSwing.side.entry && (0 == gGCUStatus.bAuthCount_EN))
 8021e36:	4b13      	ldr	r3, [pc, #76]	; (8021e84 <ClearPassageAlarm+0xc4>)
 8021e38:	781b      	ldrb	r3, [r3, #0]
 8021e3a:	2b00      	cmp	r3, #0
 8021e3c:	d107      	bne.n	8021e4e <ClearPassageAlarm+0x8e>
 8021e3e:	4b10      	ldr	r3, [pc, #64]	; (8021e80 <ClearPassageAlarm+0xc0>)
 8021e40:	791b      	ldrb	r3, [r3, #4]
 8021e42:	b2db      	uxtb	r3, r3
 8021e44:	2b00      	cmp	r3, #0
 8021e46:	d102      	bne.n	8021e4e <ClearPassageAlarm+0x8e>
    {
        gisEntryPassenger = FALSE;
 8021e48:	4b0f      	ldr	r3, [pc, #60]	; (8021e88 <ClearPassageAlarm+0xc8>)
 8021e4a:	2200      	movs	r2, #0
 8021e4c:	701a      	strb	r2, [r3, #0]
    }

    if (!psenNewSwing.side.exit && (0 == gGCUStatus.bAuthCount_EX))
 8021e4e:	4b0d      	ldr	r3, [pc, #52]	; (8021e84 <ClearPassageAlarm+0xc4>)
 8021e50:	785b      	ldrb	r3, [r3, #1]
 8021e52:	2b00      	cmp	r3, #0
 8021e54:	d107      	bne.n	8021e66 <ClearPassageAlarm+0xa6>
 8021e56:	4b0a      	ldr	r3, [pc, #40]	; (8021e80 <ClearPassageAlarm+0xc0>)
 8021e58:	795b      	ldrb	r3, [r3, #5]
 8021e5a:	b2db      	uxtb	r3, r3
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	d102      	bne.n	8021e66 <ClearPassageAlarm+0xa6>
    {
        gisExitPassenger = FALSE;
 8021e60:	4b0a      	ldr	r3, [pc, #40]	; (8021e8c <ClearPassageAlarm+0xcc>)
 8021e62:	2200      	movs	r2, #0
 8021e64:	701a      	strb	r2, [r3, #0]
    }

    gGCUStatus.IllegalPass.bIllegalPass = FLG_OFF;
 8021e66:	4b06      	ldr	r3, [pc, #24]	; (8021e80 <ClearPassageAlarm+0xc0>)
 8021e68:	2200      	movs	r2, #0
 8021e6a:	771a      	strb	r2, [r3, #28]

    ClearIllegalPass();
 8021e6c:	f000 f810 	bl	8021e90 <ClearIllegalPass>
}
 8021e70:	bf00      	nop
 8021e72:	bd80      	pop	{r7, pc}
 8021e74:	2400019c 	.word	0x2400019c
 8021e78:	240001a8 	.word	0x240001a8
 8021e7c:	240001d8 	.word	0x240001d8
 8021e80:	24000490 	.word	0x24000490
 8021e84:	240003f4 	.word	0x240003f4
 8021e88:	24000419 	.word	0x24000419
 8021e8c:	2400041a 	.word	0x2400041a

08021e90 <ClearIllegalPass>:

void ClearIllegalPass(void)
{
 8021e90:	b580      	push	{r7, lr}
 8021e92:	af00      	add	r7, sp, #0
    if (gGCUStatus.PassageAlarm.b.nFromEN)
 8021e94:	4b44      	ldr	r3, [pc, #272]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021e96:	7a1b      	ldrb	r3, [r3, #8]
 8021e98:	f003 0307 	and.w	r3, r3, #7
 8021e9c:	b2db      	uxtb	r3, r3
 8021e9e:	2b00      	cmp	r3, #0
 8021ea0:	d03c      	beq.n	8021f1c <ClearIllegalPass+0x8c>
    {
        if (!psenNewSwing.side.entry)
 8021ea2:	4b42      	ldr	r3, [pc, #264]	; (8021fac <ClearIllegalPass+0x11c>)
 8021ea4:	781b      	ldrb	r3, [r3, #0]
 8021ea6:	2b00      	cmp	r3, #0
 8021ea8:	d138      	bne.n	8021f1c <ClearIllegalPass+0x8c>
        {
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8021eaa:	4a3f      	ldr	r2, [pc, #252]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021eac:	7a13      	ldrb	r3, [r2, #8]
 8021eae:	f36f 0302 	bfc	r3, #0, #3
 8021eb2:	7213      	strb	r3, [r2, #8]

            if (gGCUStatus.IllegalPass.b.nCounter_EN == FLG_SET)
 8021eb4:	4b3c      	ldr	r3, [pc, #240]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021eb6:	7f1b      	ldrb	r3, [r3, #28]
 8021eb8:	f003 0308 	and.w	r3, r3, #8
 8021ebc:	b2db      	uxtb	r3, r3
 8021ebe:	2b00      	cmp	r3, #0
 8021ec0:	d007      	beq.n	8021ed2 <ClearIllegalPass+0x42>
            {
                gGCUStatus.IllegalPass.b.nCounter_EN = FLG_OFF;
 8021ec2:	4a39      	ldr	r2, [pc, #228]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021ec4:	7f13      	ldrb	r3, [r2, #28]
 8021ec6:	f36f 03c3 	bfc	r3, #3, #1
 8021eca:	7713      	strb	r3, [r2, #28]
                printf(" [EN] Clear Counter Enter  \n");
 8021ecc:	4838      	ldr	r0, [pc, #224]	; (8021fb0 <ClearIllegalPass+0x120>)
 8021ece:	f007 fa8d 	bl	80293ec <printf_>
            }

            if (gGCUStatus.IllegalPass.b.nIllegal_EN == FLG_SET)
 8021ed2:	4b35      	ldr	r3, [pc, #212]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021ed4:	7f1b      	ldrb	r3, [r3, #28]
 8021ed6:	f003 0304 	and.w	r3, r3, #4
 8021eda:	b2db      	uxtb	r3, r3
 8021edc:	2b00      	cmp	r3, #0
 8021ede:	d007      	beq.n	8021ef0 <ClearIllegalPass+0x60>
            {
                gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
 8021ee0:	4a31      	ldr	r2, [pc, #196]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021ee2:	7f13      	ldrb	r3, [r2, #28]
 8021ee4:	f36f 0382 	bfc	r3, #2, #1
 8021ee8:	7713      	strb	r3, [r2, #28]
                printf(" [EN] Clear Illegal Enter  \n");
 8021eea:	4832      	ldr	r0, [pc, #200]	; (8021fb4 <ClearIllegalPass+0x124>)
 8021eec:	f007 fa7e 	bl	80293ec <printf_>
            }
            ResetTimer(&timerIllegalEnterEN);
 8021ef0:	4831      	ldr	r0, [pc, #196]	; (8021fb8 <ClearIllegalPass+0x128>)
 8021ef2:	f00e fad9 	bl	80304a8 <ResetTimer>

            if (timerJumping.fStart == FALSE && timerTailgating.fStart == FALSE)
 8021ef6:	4b31      	ldr	r3, [pc, #196]	; (8021fbc <ClearIllegalPass+0x12c>)
 8021ef8:	781b      	ldrb	r3, [r3, #0]
 8021efa:	f083 0301 	eor.w	r3, r3, #1
 8021efe:	b2db      	uxtb	r3, r3
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	d00b      	beq.n	8021f1c <ClearIllegalPass+0x8c>
 8021f04:	4b2e      	ldr	r3, [pc, #184]	; (8021fc0 <ClearIllegalPass+0x130>)
 8021f06:	781b      	ldrb	r3, [r3, #0]
 8021f08:	f083 0301 	eor.w	r3, r3, #1
 8021f0c:	b2db      	uxtb	r3, r3
 8021f0e:	2b00      	cmp	r3, #0
 8021f10:	d004      	beq.n	8021f1c <ClearIllegalPass+0x8c>
            {
                InitPassageMode();
 8021f12:	f000 fa11 	bl	8022338 <InitPassageMode>
                printf(" [EN] ClearIllegalPass - InitPassageMode  \n");
 8021f16:	482b      	ldr	r0, [pc, #172]	; (8021fc4 <ClearIllegalPass+0x134>)
 8021f18:	f007 fa68 	bl	80293ec <printf_>
            }
        }
    }

    if (gGCUStatus.PassageAlarm.b.nFromEX)
 8021f1c:	4b22      	ldr	r3, [pc, #136]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021f1e:	7a1b      	ldrb	r3, [r3, #8]
 8021f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8021f24:	b2db      	uxtb	r3, r3
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	d03c      	beq.n	8021fa4 <ClearIllegalPass+0x114>
    {
        if (!psenNewSwing.side.exit)
 8021f2a:	4b20      	ldr	r3, [pc, #128]	; (8021fac <ClearIllegalPass+0x11c>)
 8021f2c:	785b      	ldrb	r3, [r3, #1]
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d138      	bne.n	8021fa4 <ClearIllegalPass+0x114>
        {
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8021f32:	4a1d      	ldr	r2, [pc, #116]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021f34:	7a13      	ldrb	r3, [r2, #8]
 8021f36:	f36f 1306 	bfc	r3, #4, #3
 8021f3a:	7213      	strb	r3, [r2, #8]

            if (gGCUStatus.IllegalPass.b.nCounter_EX == FLG_SET)
 8021f3c:	4b1a      	ldr	r3, [pc, #104]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021f3e:	7f1b      	ldrb	r3, [r3, #28]
 8021f40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021f44:	b2db      	uxtb	r3, r3
 8021f46:	2b00      	cmp	r3, #0
 8021f48:	d007      	beq.n	8021f5a <ClearIllegalPass+0xca>
            {
                gGCUStatus.IllegalPass.b.nCounter_EX = FLG_OFF;
 8021f4a:	4a17      	ldr	r2, [pc, #92]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021f4c:	7f13      	ldrb	r3, [r2, #28]
 8021f4e:	f36f 13c7 	bfc	r3, #7, #1
 8021f52:	7713      	strb	r3, [r2, #28]
                printf(" [EX] Clear Counter Enter  \n");
 8021f54:	481c      	ldr	r0, [pc, #112]	; (8021fc8 <ClearIllegalPass+0x138>)
 8021f56:	f007 fa49 	bl	80293ec <printf_>
            }

            if (gGCUStatus.IllegalPass.b.nIllegal_EX == FLG_SET)
 8021f5a:	4b13      	ldr	r3, [pc, #76]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021f5c:	7f1b      	ldrb	r3, [r3, #28]
 8021f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021f62:	b2db      	uxtb	r3, r3
 8021f64:	2b00      	cmp	r3, #0
 8021f66:	d007      	beq.n	8021f78 <ClearIllegalPass+0xe8>
            {
                gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
 8021f68:	4a0f      	ldr	r2, [pc, #60]	; (8021fa8 <ClearIllegalPass+0x118>)
 8021f6a:	7f13      	ldrb	r3, [r2, #28]
 8021f6c:	f36f 1386 	bfc	r3, #6, #1
 8021f70:	7713      	strb	r3, [r2, #28]
                printf(" [EX] Clear Illegal Enter  \n");
 8021f72:	4816      	ldr	r0, [pc, #88]	; (8021fcc <ClearIllegalPass+0x13c>)
 8021f74:	f007 fa3a 	bl	80293ec <printf_>
            }
            ResetTimer(&timerIllegalEnterEX);
 8021f78:	4815      	ldr	r0, [pc, #84]	; (8021fd0 <ClearIllegalPass+0x140>)
 8021f7a:	f00e fa95 	bl	80304a8 <ResetTimer>

            if (timerJumping.fStart == FALSE && timerTailgating.fStart == FALSE)
 8021f7e:	4b0f      	ldr	r3, [pc, #60]	; (8021fbc <ClearIllegalPass+0x12c>)
 8021f80:	781b      	ldrb	r3, [r3, #0]
 8021f82:	f083 0301 	eor.w	r3, r3, #1
 8021f86:	b2db      	uxtb	r3, r3
 8021f88:	2b00      	cmp	r3, #0
 8021f8a:	d00b      	beq.n	8021fa4 <ClearIllegalPass+0x114>
 8021f8c:	4b0c      	ldr	r3, [pc, #48]	; (8021fc0 <ClearIllegalPass+0x130>)
 8021f8e:	781b      	ldrb	r3, [r3, #0]
 8021f90:	f083 0301 	eor.w	r3, r3, #1
 8021f94:	b2db      	uxtb	r3, r3
 8021f96:	2b00      	cmp	r3, #0
 8021f98:	d004      	beq.n	8021fa4 <ClearIllegalPass+0x114>
            {
                InitPassageMode();
 8021f9a:	f000 f9cd 	bl	8022338 <InitPassageMode>
                printf(" [EX] ClearIllegalPass - InitPassageMode  \n");
 8021f9e:	480d      	ldr	r0, [pc, #52]	; (8021fd4 <ClearIllegalPass+0x144>)
 8021fa0:	f007 fa24 	bl	80293ec <printf_>
            }
        }
    }
}
 8021fa4:	bf00      	nop
 8021fa6:	bd80      	pop	{r7, pc}
 8021fa8:	24000490 	.word	0x24000490
 8021fac:	240003f4 	.word	0x240003f4
 8021fb0:	08031d88 	.word	0x08031d88
 8021fb4:	08031da8 	.word	0x08031da8
 8021fb8:	2400019c 	.word	0x2400019c
 8021fbc:	240001f0 	.word	0x240001f0
 8021fc0:	240001fc 	.word	0x240001fc
 8021fc4:	08031dc8 	.word	0x08031dc8
 8021fc8:	08031df4 	.word	0x08031df4
 8021fcc:	08031e14 	.word	0x08031e14
 8021fd0:	240001a8 	.word	0x240001a8
 8021fd4:	08031e34 	.word	0x08031e34

08021fd8 <CheckAuthTimeout>:

void CheckAuthTimeout(void)
{
 8021fd8:	b580      	push	{r7, lr}
 8021fda:	af00      	add	r7, sp, #0
    if (timerAuthorize.fStart)
 8021fdc:	4b1a      	ldr	r3, [pc, #104]	; (8022048 <CheckAuthTimeout+0x70>)
 8021fde:	781b      	ldrb	r3, [r3, #0]
 8021fe0:	2b00      	cmp	r3, #0
 8021fe2:	d02f      	beq.n	8022044 <CheckAuthTimeout+0x6c>
    {
        if (IsTimeout(&timerAuthorize, (gdwTimeoutAuthorize * TICK_COUNT_1SEC)))
 8021fe4:	4b19      	ldr	r3, [pc, #100]	; (802204c <CheckAuthTimeout+0x74>)
 8021fe6:	681b      	ldr	r3, [r3, #0]
 8021fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8021fec:	fb02 f303 	mul.w	r3, r2, r3
 8021ff0:	4619      	mov	r1, r3
 8021ff2:	4815      	ldr	r0, [pc, #84]	; (8022048 <CheckAuthTimeout+0x70>)
 8021ff4:	f00e fa66 	bl	80304c4 <IsTimeout>
 8021ff8:	4603      	mov	r3, r0
 8021ffa:	2b00      	cmp	r3, #0
 8021ffc:	d022      	beq.n	8022044 <CheckAuthTimeout+0x6c>
        {
        	printf(" [CheckAuthTimeout] ElapsedTime:%d  \n", gdwTimeoutAuthorize);
 8021ffe:	4b13      	ldr	r3, [pc, #76]	; (802204c <CheckAuthTimeout+0x74>)
 8022000:	681b      	ldr	r3, [r3, #0]
 8022002:	4619      	mov	r1, r3
 8022004:	4812      	ldr	r0, [pc, #72]	; (8022050 <CheckAuthTimeout+0x78>)
 8022006:	f007 f9f1 	bl	80293ec <printf_>
            ResetTimer(&timerAuthorize);
 802200a:	480f      	ldr	r0, [pc, #60]	; (8022048 <CheckAuthTimeout+0x70>)
 802200c:	f00e fa4c 	bl	80304a8 <ResetTimer>
            gGCUStatus.bAuthCount_EN = 0;
 8022010:	4b10      	ldr	r3, [pc, #64]	; (8022054 <CheckAuthTimeout+0x7c>)
 8022012:	2200      	movs	r2, #0
 8022014:	711a      	strb	r2, [r3, #4]
            gGCUStatus.bAuthCount_EX = 0;
 8022016:	4b0f      	ldr	r3, [pc, #60]	; (8022054 <CheckAuthTimeout+0x7c>)
 8022018:	2200      	movs	r2, #0
 802201a:	715a      	strb	r2, [r3, #5]
            gfisAuthTimeout = TRUE;
 802201c:	4b0e      	ldr	r3, [pc, #56]	; (8022058 <CheckAuthTimeout+0x80>)
 802201e:	2201      	movs	r2, #1
 8022020:	701a      	strb	r2, [r3, #0]
            ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 8022022:	2300      	movs	r3, #0
 8022024:	2200      	movs	r2, #0
 8022026:	2100      	movs	r1, #0
 8022028:	2000      	movs	r0, #0
 802202a:	f7ff faa9 	bl	8021580 <ControlIndicator>
            if (gGCUStatus.PassageAlarm.bAlarm != 0)
 802202e:	4b09      	ldr	r3, [pc, #36]	; (8022054 <CheckAuthTimeout+0x7c>)
 8022030:	7a1b      	ldrb	r3, [r3, #8]
 8022032:	2b00      	cmp	r3, #0
 8022034:	d004      	beq.n	8022040 <CheckAuthTimeout+0x68>
            {
                ClearIllegalPass();
 8022036:	f7ff ff2b 	bl	8021e90 <ClearIllegalPass>
                gGCUStatus.PassageAlarm.bAlarm = 0;
 802203a:	4b06      	ldr	r3, [pc, #24]	; (8022054 <CheckAuthTimeout+0x7c>)
 802203c:	2200      	movs	r2, #0
 802203e:	721a      	strb	r2, [r3, #8]
            }

            InitPassageMode();
 8022040:	f000 f97a 	bl	8022338 <InitPassageMode>
        }
    }
}
 8022044:	bf00      	nop
 8022046:	bd80      	pop	{r7, pc}
 8022048:	24000160 	.word	0x24000160
 802204c:	24000154 	.word	0x24000154
 8022050:	08031e60 	.word	0x08031e60
 8022054:	24000490 	.word	0x24000490
 8022058:	2400013d 	.word	0x2400013d

0802205c <CheckIllegalAlarmTimer>:

void CheckIllegalAlarmTimer(void)
{
 802205c:	b580      	push	{r7, lr}
 802205e:	af00      	add	r7, sp, #0
    if (timerJumping.fStart)
 8022060:	4b33      	ldr	r3, [pc, #204]	; (8022130 <CheckIllegalAlarmTimer+0xd4>)
 8022062:	781b      	ldrb	r3, [r3, #0]
 8022064:	2b00      	cmp	r3, #0
 8022066:	d02e      	beq.n	80220c6 <CheckIllegalAlarmTimer+0x6a>
    {
        if (IsTimeout(&timerJumping, gdwTimeoutJumping))
 8022068:	4b32      	ldr	r3, [pc, #200]	; (8022134 <CheckIllegalAlarmTimer+0xd8>)
 802206a:	681b      	ldr	r3, [r3, #0]
 802206c:	4619      	mov	r1, r3
 802206e:	4830      	ldr	r0, [pc, #192]	; (8022130 <CheckIllegalAlarmTimer+0xd4>)
 8022070:	f00e fa28 	bl	80304c4 <IsTimeout>
 8022074:	4603      	mov	r3, r0
 8022076:	2b00      	cmp	r3, #0
 8022078:	d025      	beq.n	80220c6 <CheckIllegalAlarmTimer+0x6a>
        {
            gGCUStatus.IllegalPass.b.nJumping_EN = FLG_OFF;
 802207a:	4a2f      	ldr	r2, [pc, #188]	; (8022138 <CheckIllegalAlarmTimer+0xdc>)
 802207c:	7f13      	ldrb	r3, [r2, #28]
 802207e:	f36f 0341 	bfc	r3, #1, #1
 8022082:	7713      	strb	r3, [r2, #28]
            gGCUStatus.IllegalPass.b.nJumping_EX = FLG_OFF;
 8022084:	4a2c      	ldr	r2, [pc, #176]	; (8022138 <CheckIllegalAlarmTimer+0xdc>)
 8022086:	7f13      	ldrb	r3, [r2, #28]
 8022088:	f36f 1345 	bfc	r3, #5, #1
 802208c:	7713      	strb	r3, [r2, #28]
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 802208e:	4a2a      	ldr	r2, [pc, #168]	; (8022138 <CheckIllegalAlarmTimer+0xdc>)
 8022090:	7a13      	ldrb	r3, [r2, #8]
 8022092:	f36f 0302 	bfc	r3, #0, #3
 8022096:	7213      	strb	r3, [r2, #8]
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8022098:	4a27      	ldr	r2, [pc, #156]	; (8022138 <CheckIllegalAlarmTimer+0xdc>)
 802209a:	7a13      	ldrb	r3, [r2, #8]
 802209c:	f36f 1306 	bfc	r3, #4, #3
 80220a0:	7213      	strb	r3, [r2, #8]
            ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 80220a2:	4b26      	ldr	r3, [pc, #152]	; (802213c <CheckIllegalAlarmTimer+0xe0>)
 80220a4:	781b      	ldrb	r3, [r3, #0]
 80220a6:	4a26      	ldr	r2, [pc, #152]	; (8022140 <CheckIllegalAlarmTimer+0xe4>)
 80220a8:	7812      	ldrb	r2, [r2, #0]
 80220aa:	4611      	mov	r1, r2
 80220ac:	4618      	mov	r0, r3
 80220ae:	f7ff fa0b 	bl	80214c8 <ControlDirectionLED>
            ControlIndicatorBlink(FLG_OFF);
 80220b2:	2000      	movs	r0, #0
 80220b4:	f7ff faec 	bl	8021690 <ControlIndicatorBlink>
            ControlBuzzer(BUZZER_OFF, 0);
 80220b8:	2100      	movs	r1, #0
 80220ba:	2000      	movs	r0, #0
 80220bc:	f7ff f9da 	bl	8021474 <ControlBuzzer>
            ResetTimer(&timerJumping);
 80220c0:	481b      	ldr	r0, [pc, #108]	; (8022130 <CheckIllegalAlarmTimer+0xd4>)
 80220c2:	f00e f9f1 	bl	80304a8 <ResetTimer>
        }
    }

    if (timerTailgating.fStart)
 80220c6:	4b1f      	ldr	r3, [pc, #124]	; (8022144 <CheckIllegalAlarmTimer+0xe8>)
 80220c8:	781b      	ldrb	r3, [r3, #0]
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	d02d      	beq.n	802212a <CheckIllegalAlarmTimer+0xce>
    {
        if (IsTimeout(&timerTailgating, DEFAULT_TAILGATING_TIMEOUT * TICK_COUNT_1SEC))
 80220ce:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80220d2:	481c      	ldr	r0, [pc, #112]	; (8022144 <CheckIllegalAlarmTimer+0xe8>)
 80220d4:	f00e f9f6 	bl	80304c4 <IsTimeout>
 80220d8:	4603      	mov	r3, r0
 80220da:	2b00      	cmp	r3, #0
 80220dc:	d025      	beq.n	802212a <CheckIllegalAlarmTimer+0xce>
        {
            gGCUStatus.IllegalPass.b.nTailgating_EN = FLG_OFF;
 80220de:	4a16      	ldr	r2, [pc, #88]	; (8022138 <CheckIllegalAlarmTimer+0xdc>)
 80220e0:	7f13      	ldrb	r3, [r2, #28]
 80220e2:	f36f 0300 	bfc	r3, #0, #1
 80220e6:	7713      	strb	r3, [r2, #28]
            gGCUStatus.IllegalPass.b.nTailgating_EX = FLG_OFF;
 80220e8:	4a13      	ldr	r2, [pc, #76]	; (8022138 <CheckIllegalAlarmTimer+0xdc>)
 80220ea:	7f13      	ldrb	r3, [r2, #28]
 80220ec:	f36f 1304 	bfc	r3, #4, #1
 80220f0:	7713      	strb	r3, [r2, #28]
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 80220f2:	4a11      	ldr	r2, [pc, #68]	; (8022138 <CheckIllegalAlarmTimer+0xdc>)
 80220f4:	7a13      	ldrb	r3, [r2, #8]
 80220f6:	f36f 0302 	bfc	r3, #0, #3
 80220fa:	7213      	strb	r3, [r2, #8]
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 80220fc:	4a0e      	ldr	r2, [pc, #56]	; (8022138 <CheckIllegalAlarmTimer+0xdc>)
 80220fe:	7a13      	ldrb	r3, [r2, #8]
 8022100:	f36f 1306 	bfc	r3, #4, #3
 8022104:	7213      	strb	r3, [r2, #8]
            ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 8022106:	4b0d      	ldr	r3, [pc, #52]	; (802213c <CheckIllegalAlarmTimer+0xe0>)
 8022108:	781b      	ldrb	r3, [r3, #0]
 802210a:	4a0d      	ldr	r2, [pc, #52]	; (8022140 <CheckIllegalAlarmTimer+0xe4>)
 802210c:	7812      	ldrb	r2, [r2, #0]
 802210e:	4611      	mov	r1, r2
 8022110:	4618      	mov	r0, r3
 8022112:	f7ff f9d9 	bl	80214c8 <ControlDirectionLED>
            ControlIndicatorBlink(FLG_OFF);
 8022116:	2000      	movs	r0, #0
 8022118:	f7ff faba 	bl	8021690 <ControlIndicatorBlink>
            ControlBuzzer(BUZZER_OFF, 0);
 802211c:	2100      	movs	r1, #0
 802211e:	2000      	movs	r0, #0
 8022120:	f7ff f9a8 	bl	8021474 <ControlBuzzer>
            ResetTimer(&timerTailgating);
 8022124:	4807      	ldr	r0, [pc, #28]	; (8022144 <CheckIllegalAlarmTimer+0xe8>)
 8022126:	f00e f9bf 	bl	80304a8 <ResetTimer>
        }
    }
}
 802212a:	bf00      	nop
 802212c:	bd80      	pop	{r7, pc}
 802212e:	bf00      	nop
 8022130:	240001f0 	.word	0x240001f0
 8022134:	24000158 	.word	0x24000158
 8022138:	24000490 	.word	0x24000490
 802213c:	24000135 	.word	0x24000135
 8022140:	24000136 	.word	0x24000136
 8022144:	240001fc 	.word	0x240001fc

08022148 <CheckBlinkTimer>:

void CheckBlinkTimer(void)
{
 8022148:	b580      	push	{r7, lr}
 802214a:	af00      	add	r7, sp, #0
    if (timerBlink.fStart)
 802214c:	4b17      	ldr	r3, [pc, #92]	; (80221ac <CheckBlinkTimer+0x64>)
 802214e:	781b      	ldrb	r3, [r3, #0]
 8022150:	2b00      	cmp	r3, #0
 8022152:	d029      	beq.n	80221a8 <CheckBlinkTimer+0x60>
    {
        if (IsTimeout(&timerBlink, gdwTimeoutBlink))
 8022154:	4b16      	ldr	r3, [pc, #88]	; (80221b0 <CheckBlinkTimer+0x68>)
 8022156:	681b      	ldr	r3, [r3, #0]
 8022158:	4619      	mov	r1, r3
 802215a:	4814      	ldr	r0, [pc, #80]	; (80221ac <CheckBlinkTimer+0x64>)
 802215c:	f00e f9b2 	bl	80304c4 <IsTimeout>
 8022160:	4603      	mov	r3, r0
 8022162:	2b00      	cmp	r3, #0
 8022164:	d020      	beq.n	80221a8 <CheckBlinkTimer+0x60>
        {
            if (FLG_SET == gbIndicatorBlink)
 8022166:	4b13      	ldr	r3, [pc, #76]	; (80221b4 <CheckBlinkTimer+0x6c>)
 8022168:	781b      	ldrb	r3, [r3, #0]
 802216a:	2b01      	cmp	r3, #1
 802216c:	d116      	bne.n	802219c <CheckBlinkTimer+0x54>
            {
                if (gbIndicatorFlag)
 802216e:	4b12      	ldr	r3, [pc, #72]	; (80221b8 <CheckBlinkTimer+0x70>)
 8022170:	781b      	ldrb	r3, [r3, #0]
 8022172:	2b00      	cmp	r3, #0
 8022174:	d009      	beq.n	802218a <CheckBlinkTimer+0x42>
                {
                    gbIndicatorFlag = FLG_OFF;
 8022176:	4b10      	ldr	r3, [pc, #64]	; (80221b8 <CheckBlinkTimer+0x70>)
 8022178:	2200      	movs	r2, #0
 802217a:	701a      	strb	r2, [r3, #0]
                    ControlIndicator(LAMP_OFF, LAMP_OFF, 0, TRUE);
 802217c:	2301      	movs	r3, #1
 802217e:	2200      	movs	r2, #0
 8022180:	2100      	movs	r1, #0
 8022182:	2000      	movs	r0, #0
 8022184:	f7ff f9fc 	bl	8021580 <ControlIndicator>
 8022188:	e008      	b.n	802219c <CheckBlinkTimer+0x54>
                }
                else
                {
                    gbIndicatorFlag = FLG_SET;
 802218a:	4b0b      	ldr	r3, [pc, #44]	; (80221b8 <CheckBlinkTimer+0x70>)
 802218c:	2201      	movs	r2, #1
 802218e:	701a      	strb	r2, [r3, #0]
                    ControlIndicator(LAMP_RED_ON, LAMP_RED_ON, 0, TRUE);
 8022190:	2301      	movs	r3, #1
 8022192:	2200      	movs	r2, #0
 8022194:	2101      	movs	r1, #1
 8022196:	2001      	movs	r0, #1
 8022198:	f7ff f9f2 	bl	8021580 <ControlIndicator>
                }
            }
            ResetTimer(&timerBlink);
 802219c:	4803      	ldr	r0, [pc, #12]	; (80221ac <CheckBlinkTimer+0x64>)
 802219e:	f00e f983 	bl	80304a8 <ResetTimer>
            SetTimer(&timerBlink);
 80221a2:	4802      	ldr	r0, [pc, #8]	; (80221ac <CheckBlinkTimer+0x64>)
 80221a4:	f00e f96c 	bl	8030480 <SetTimer>
        }
    }
}
 80221a8:	bf00      	nop
 80221aa:	bd80      	pop	{r7, pc}
 80221ac:	240001b4 	.word	0x240001b4
 80221b0:	24000150 	.word	0x24000150
 80221b4:	24000132 	.word	0x24000132
 80221b8:	24000138 	.word	0x24000138

080221bc <CheckIllegalEnterTimer>:

void CheckIllegalEnterTimer(BYTE dir)
{
 80221bc:	b580      	push	{r7, lr}
 80221be:	b082      	sub	sp, #8
 80221c0:	af00      	add	r7, sp, #0
 80221c2:	4603      	mov	r3, r0
 80221c4:	71fb      	strb	r3, [r7, #7]
    if (FROM_ENTRY == dir)
 80221c6:	79fb      	ldrb	r3, [r7, #7]
 80221c8:	2b01      	cmp	r3, #1
 80221ca:	d13a      	bne.n	8022242 <CheckIllegalEnterTimer+0x86>
    {
        if (timerIllegalEnterEN.fStart)
 80221cc:	4b3d      	ldr	r3, [pc, #244]	; (80222c4 <CheckIllegalEnterTimer+0x108>)
 80221ce:	781b      	ldrb	r3, [r3, #0]
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	d01d      	beq.n	8022210 <CheckIllegalEnterTimer+0x54>
        {
            if (IsTimeout(&timerIllegalEnterEN, gdwTimeoutUnauthorize))
 80221d4:	4b3c      	ldr	r3, [pc, #240]	; (80222c8 <CheckIllegalEnterTimer+0x10c>)
 80221d6:	681b      	ldr	r3, [r3, #0]
 80221d8:	4619      	mov	r1, r3
 80221da:	483a      	ldr	r0, [pc, #232]	; (80222c4 <CheckIllegalEnterTimer+0x108>)
 80221dc:	f00e f972 	bl	80304c4 <IsTimeout>
 80221e0:	4603      	mov	r3, r0
 80221e2:	2b00      	cmp	r3, #0
 80221e4:	d06a      	beq.n	80222bc <CheckIllegalEnterTimer+0x100>
            {
                ResetTimer(&timerIllegalEnterEN);
 80221e6:	4837      	ldr	r0, [pc, #220]	; (80222c4 <CheckIllegalEnterTimer+0x108>)
 80221e8:	f00e f95e 	bl	80304a8 <ResetTimer>
                gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_SET;
 80221ec:	4a37      	ldr	r2, [pc, #220]	; (80222cc <CheckIllegalEnterTimer+0x110>)
 80221ee:	7f13      	ldrb	r3, [r2, #28]
 80221f0:	f043 0304 	orr.w	r3, r3, #4
 80221f4:	7713      	strb	r3, [r2, #28]
                gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_ILLEGAL_ENTER;
 80221f6:	4a35      	ldr	r2, [pc, #212]	; (80222cc <CheckIllegalEnterTimer+0x110>)
 80221f8:	7a13      	ldrb	r3, [r2, #8]
 80221fa:	2101      	movs	r1, #1
 80221fc:	f361 0302 	bfi	r3, r1, #0, #3
 8022200:	7213      	strb	r3, [r2, #8]
                InhibitPass(FROM_ENTRY);
 8022202:	2001      	movs	r0, #1
 8022204:	f7ff fda6 	bl	8021d54 <InhibitPass>
                printf(" [EN] Inhibit Pass - Illegal Enter  \n");
 8022208:	4831      	ldr	r0, [pc, #196]	; (80222d0 <CheckIllegalEnterTimer+0x114>)
 802220a:	f007 f8ef 	bl	80293ec <printf_>
                    SetTimer(&timerIllegalEnterEX);
                }
            }
        }
    }
}
 802220e:	e055      	b.n	80222bc <CheckIllegalEnterTimer+0x100>
            if (gGCUStatus.IllegalPass.b.nIllegal_EN == FLG_OFF)
 8022210:	4b2e      	ldr	r3, [pc, #184]	; (80222cc <CheckIllegalEnterTimer+0x110>)
 8022212:	7f1b      	ldrb	r3, [r3, #28]
 8022214:	f003 0304 	and.w	r3, r3, #4
 8022218:	b2db      	uxtb	r3, r3
 802221a:	2b00      	cmp	r3, #0
 802221c:	d14e      	bne.n	80222bc <CheckIllegalEnterTimer+0x100>
                if (gGCUParameter.bIllegalEntryTimeout)
 802221e:	4b2d      	ldr	r3, [pc, #180]	; (80222d4 <CheckIllegalEnterTimer+0x118>)
 8022220:	7adb      	ldrb	r3, [r3, #11]
 8022222:	2b00      	cmp	r3, #0
 8022224:	d04a      	beq.n	80222bc <CheckIllegalEnterTimer+0x100>
                    gdwTimeoutUnauthorize = gGCUParameter.bIllegalEntryTimeout * TICK_COUNT_1SEC;
 8022226:	4b2b      	ldr	r3, [pc, #172]	; (80222d4 <CheckIllegalEnterTimer+0x118>)
 8022228:	7adb      	ldrb	r3, [r3, #11]
 802222a:	461a      	mov	r2, r3
 802222c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8022230:	fb02 f303 	mul.w	r3, r2, r3
 8022234:	461a      	mov	r2, r3
 8022236:	4b24      	ldr	r3, [pc, #144]	; (80222c8 <CheckIllegalEnterTimer+0x10c>)
 8022238:	601a      	str	r2, [r3, #0]
                    SetTimer(&timerIllegalEnterEN);
 802223a:	4822      	ldr	r0, [pc, #136]	; (80222c4 <CheckIllegalEnterTimer+0x108>)
 802223c:	f00e f920 	bl	8030480 <SetTimer>
}
 8022240:	e03c      	b.n	80222bc <CheckIllegalEnterTimer+0x100>
    else if (FROM_EXIT == dir)
 8022242:	79fb      	ldrb	r3, [r7, #7]
 8022244:	2b02      	cmp	r3, #2
 8022246:	d139      	bne.n	80222bc <CheckIllegalEnterTimer+0x100>
        if (timerIllegalEnterEX.fStart)
 8022248:	4b23      	ldr	r3, [pc, #140]	; (80222d8 <CheckIllegalEnterTimer+0x11c>)
 802224a:	781b      	ldrb	r3, [r3, #0]
 802224c:	2b00      	cmp	r3, #0
 802224e:	d01d      	beq.n	802228c <CheckIllegalEnterTimer+0xd0>
            if (IsTimeout(&timerIllegalEnterEX, gdwTimeoutUnauthorize))
 8022250:	4b1d      	ldr	r3, [pc, #116]	; (80222c8 <CheckIllegalEnterTimer+0x10c>)
 8022252:	681b      	ldr	r3, [r3, #0]
 8022254:	4619      	mov	r1, r3
 8022256:	4820      	ldr	r0, [pc, #128]	; (80222d8 <CheckIllegalEnterTimer+0x11c>)
 8022258:	f00e f934 	bl	80304c4 <IsTimeout>
 802225c:	4603      	mov	r3, r0
 802225e:	2b00      	cmp	r3, #0
 8022260:	d02c      	beq.n	80222bc <CheckIllegalEnterTimer+0x100>
                ResetTimer(&timerIllegalEnterEX);
 8022262:	481d      	ldr	r0, [pc, #116]	; (80222d8 <CheckIllegalEnterTimer+0x11c>)
 8022264:	f00e f920 	bl	80304a8 <ResetTimer>
                gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_SET;
 8022268:	4a18      	ldr	r2, [pc, #96]	; (80222cc <CheckIllegalEnterTimer+0x110>)
 802226a:	7f13      	ldrb	r3, [r2, #28]
 802226c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022270:	7713      	strb	r3, [r2, #28]
                gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_ILLEGAL_ENTER;
 8022272:	4a16      	ldr	r2, [pc, #88]	; (80222cc <CheckIllegalEnterTimer+0x110>)
 8022274:	7a13      	ldrb	r3, [r2, #8]
 8022276:	2101      	movs	r1, #1
 8022278:	f361 1306 	bfi	r3, r1, #4, #3
 802227c:	7213      	strb	r3, [r2, #8]
                InhibitPass(FROM_EXIT);
 802227e:	2002      	movs	r0, #2
 8022280:	f7ff fd68 	bl	8021d54 <InhibitPass>
                printf(" [EX] Inhibit Pass - Illegal Enter  \n");
 8022284:	4815      	ldr	r0, [pc, #84]	; (80222dc <CheckIllegalEnterTimer+0x120>)
 8022286:	f007 f8b1 	bl	80293ec <printf_>
}
 802228a:	e017      	b.n	80222bc <CheckIllegalEnterTimer+0x100>
            if (gGCUStatus.IllegalPass.b.nIllegal_EX == FLG_OFF)
 802228c:	4b0f      	ldr	r3, [pc, #60]	; (80222cc <CheckIllegalEnterTimer+0x110>)
 802228e:	7f1b      	ldrb	r3, [r3, #28]
 8022290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022294:	b2db      	uxtb	r3, r3
 8022296:	2b00      	cmp	r3, #0
 8022298:	d110      	bne.n	80222bc <CheckIllegalEnterTimer+0x100>
                if (gGCUParameter.bIllegalEntryTimeout)
 802229a:	4b0e      	ldr	r3, [pc, #56]	; (80222d4 <CheckIllegalEnterTimer+0x118>)
 802229c:	7adb      	ldrb	r3, [r3, #11]
 802229e:	2b00      	cmp	r3, #0
 80222a0:	d00c      	beq.n	80222bc <CheckIllegalEnterTimer+0x100>
                    gdwTimeoutUnauthorize = gGCUParameter.bIllegalEntryTimeout * TICK_COUNT_1SEC;
 80222a2:	4b0c      	ldr	r3, [pc, #48]	; (80222d4 <CheckIllegalEnterTimer+0x118>)
 80222a4:	7adb      	ldrb	r3, [r3, #11]
 80222a6:	461a      	mov	r2, r3
 80222a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80222ac:	fb02 f303 	mul.w	r3, r2, r3
 80222b0:	461a      	mov	r2, r3
 80222b2:	4b05      	ldr	r3, [pc, #20]	; (80222c8 <CheckIllegalEnterTimer+0x10c>)
 80222b4:	601a      	str	r2, [r3, #0]
                    SetTimer(&timerIllegalEnterEX);
 80222b6:	4808      	ldr	r0, [pc, #32]	; (80222d8 <CheckIllegalEnterTimer+0x11c>)
 80222b8:	f00e f8e2 	bl	8030480 <SetTimer>
}
 80222bc:	bf00      	nop
 80222be:	3708      	adds	r7, #8
 80222c0:	46bd      	mov	sp, r7
 80222c2:	bd80      	pop	{r7, pc}
 80222c4:	2400019c 	.word	0x2400019c
 80222c8:	2400015c 	.word	0x2400015c
 80222cc:	24000490 	.word	0x24000490
 80222d0:	08031e88 	.word	0x08031e88
 80222d4:	24000480 	.word	0x24000480
 80222d8:	240001a8 	.word	0x240001a8
 80222dc:	08031eb0 	.word	0x08031eb0

080222e0 <SetAuthTimer>:

void SetAuthTimer(void)
{
 80222e0:	b580      	push	{r7, lr}
 80222e2:	af00      	add	r7, sp, #0
    gdwTimeoutAuthorize = gGCUParameter.bAuthTimeOut;
 80222e4:	4b09      	ldr	r3, [pc, #36]	; (802230c <SetAuthTimer+0x2c>)
 80222e6:	791b      	ldrb	r3, [r3, #4]
 80222e8:	461a      	mov	r2, r3
 80222ea:	4b09      	ldr	r3, [pc, #36]	; (8022310 <SetAuthTimer+0x30>)
 80222ec:	601a      	str	r2, [r3, #0]
    gfisAuthTimeout = FALSE;
 80222ee:	4b09      	ldr	r3, [pc, #36]	; (8022314 <SetAuthTimer+0x34>)
 80222f0:	2200      	movs	r2, #0
 80222f2:	701a      	strb	r2, [r3, #0]
    if (gdwTimeoutAuthorize > MAX_AUTH_TIMEOUT)
 80222f4:	4b06      	ldr	r3, [pc, #24]	; (8022310 <SetAuthTimer+0x30>)
 80222f6:	681b      	ldr	r3, [r3, #0]
 80222f8:	2b3c      	cmp	r3, #60	; 0x3c
 80222fa:	d902      	bls.n	8022302 <SetAuthTimer+0x22>
        gdwTimeoutAuthorize = MAX_AUTH_TIMEOUT;
 80222fc:	4b04      	ldr	r3, [pc, #16]	; (8022310 <SetAuthTimer+0x30>)
 80222fe:	223c      	movs	r2, #60	; 0x3c
 8022300:	601a      	str	r2, [r3, #0]

    SetTimer(&timerAuthorize);
 8022302:	4805      	ldr	r0, [pc, #20]	; (8022318 <SetAuthTimer+0x38>)
 8022304:	f00e f8bc 	bl	8030480 <SetTimer>
}
 8022308:	bf00      	nop
 802230a:	bd80      	pop	{r7, pc}
 802230c:	24000480 	.word	0x24000480
 8022310:	24000154 	.word	0x24000154
 8022314:	2400013d 	.word	0x2400013d
 8022318:	24000160 	.word	0x24000160

0802231c <SetTailgatingTimer>:

void SetTailgatingTimer(void)
{
 802231c:	b580      	push	{r7, lr}
 802231e:	af00      	add	r7, sp, #0
    SetTimer(&timerTailgatingDetection);
 8022320:	4803      	ldr	r0, [pc, #12]	; (8022330 <SetTailgatingTimer+0x14>)
 8022322:	f00e f8ad 	bl	8030480 <SetTimer>
    SetTimer(&timerTailgating);
 8022326:	4803      	ldr	r0, [pc, #12]	; (8022334 <SetTailgatingTimer+0x18>)
 8022328:	f00e f8aa 	bl	8030480 <SetTimer>
}
 802232c:	bf00      	nop
 802232e:	bd80      	pop	{r7, pc}
 8022330:	24000178 	.word	0x24000178
 8022334:	240001fc 	.word	0x240001fc

08022338 <InitPassageMode>:

void InitPassageMode(void)
{
 8022338:	b580      	push	{r7, lr}
 802233a:	af00      	add	r7, sp, #0
    InitPassageModeForSwing();
 802233c:	f001 f900 	bl	8023540 <InitPassageModeForSwing>
}
 8022340:	bf00      	nop
 8022342:	bd80      	pop	{r7, pc}

08022344 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8022344:	b480      	push	{r7}
 8022346:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8022348:	f3bf 8f4f 	dsb	sy
}
 802234c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 802234e:	4b06      	ldr	r3, [pc, #24]	; (8022368 <__NVIC_SystemReset+0x24>)
 8022350:	68db      	ldr	r3, [r3, #12]
 8022352:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8022356:	4904      	ldr	r1, [pc, #16]	; (8022368 <__NVIC_SystemReset+0x24>)
 8022358:	4b04      	ldr	r3, [pc, #16]	; (802236c <__NVIC_SystemReset+0x28>)
 802235a:	4313      	orrs	r3, r2
 802235c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 802235e:	f3bf 8f4f 	dsb	sy
}
 8022362:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8022364:	bf00      	nop
 8022366:	e7fd      	b.n	8022364 <__NVIC_SystemReset+0x20>
 8022368:	e000ed00 	.word	0xe000ed00
 802236c:	05fa0004 	.word	0x05fa0004

08022370 <SetDoorControl>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SetDoorControl(BYTE bCMDOption)
{
 8022370:	b580      	push	{r7, lr}
 8022372:	b082      	sub	sp, #8
 8022374:	af00      	add	r7, sp, #0
 8022376:	4603      	mov	r3, r0
 8022378:	71fb      	strb	r3, [r7, #7]
	if (bCMDOption == 0)
 802237a:	79fb      	ldrb	r3, [r7, #7]
 802237c:	2b00      	cmp	r3, #0
 802237e:	d10d      	bne.n	802239c <SetDoorControl+0x2c>
	{
		if (gfTestMode == TRUE)
 8022380:	4b1d      	ldr	r3, [pc, #116]	; (80223f8 <SetDoorControl+0x88>)
 8022382:	781b      	ldrb	r3, [r3, #0]
 8022384:	2b00      	cmp	r3, #0
 8022386:	d003      	beq.n	8022390 <SetDoorControl+0x20>
		{
			gfFreeMode = TRUE;
 8022388:	4b1c      	ldr	r3, [pc, #112]	; (80223fc <SetDoorControl+0x8c>)
 802238a:	2201      	movs	r2, #1
 802238c:	701a      	strb	r2, [r3, #0]
 802238e:	e002      	b.n	8022396 <SetDoorControl+0x26>
		}
		else
		{
			gfFreeMode = FALSE;
 8022390:	4b1a      	ldr	r3, [pc, #104]	; (80223fc <SetDoorControl+0x8c>)
 8022392:	2200      	movs	r2, #0
 8022394:	701a      	strb	r2, [r3, #0]
		}
		Brr_CloseBarrier();
 8022396:	f7fe f9cb 	bl	8020730 <Brr_CloseBarrier>
	{
		gfTestMode = FALSE;
		gfFreeMode = FALSE;
		Brr_SetEmergency(TRUE);
	}
}
 802239a:	e029      	b.n	80223f0 <SetDoorControl+0x80>
	else if (bCMDOption == 1)
 802239c:	79fb      	ldrb	r3, [r7, #7]
 802239e:	2b01      	cmp	r3, #1
 80223a0:	d106      	bne.n	80223b0 <SetDoorControl+0x40>
		gfFreeMode = TRUE;
 80223a2:	4b16      	ldr	r3, [pc, #88]	; (80223fc <SetDoorControl+0x8c>)
 80223a4:	2201      	movs	r2, #1
 80223a6:	701a      	strb	r2, [r3, #0]
		Brr_OpenBarrier(BARRIER_OPEN_FOR_EX);
 80223a8:	2002      	movs	r0, #2
 80223aa:	f7fe f991 	bl	80206d0 <Brr_OpenBarrier>
}
 80223ae:	e01f      	b.n	80223f0 <SetDoorControl+0x80>
	else if (bCMDOption == 2)
 80223b0:	79fb      	ldrb	r3, [r7, #7]
 80223b2:	2b02      	cmp	r3, #2
 80223b4:	d106      	bne.n	80223c4 <SetDoorControl+0x54>
		gfFreeMode = TRUE;
 80223b6:	4b11      	ldr	r3, [pc, #68]	; (80223fc <SetDoorControl+0x8c>)
 80223b8:	2201      	movs	r2, #1
 80223ba:	701a      	strb	r2, [r3, #0]
		Brr_OpenBarrier(BARRIER_OPEN_FOR_EN);
 80223bc:	2001      	movs	r0, #1
 80223be:	f7fe f987 	bl	80206d0 <Brr_OpenBarrier>
}
 80223c2:	e015      	b.n	80223f0 <SetDoorControl+0x80>
	else if (bCMDOption == 3)
 80223c4:	79fb      	ldrb	r3, [r7, #7]
 80223c6:	2b03      	cmp	r3, #3
 80223c8:	d106      	bne.n	80223d8 <SetDoorControl+0x68>
		gfTestMode = TRUE;
 80223ca:	4b0b      	ldr	r3, [pc, #44]	; (80223f8 <SetDoorControl+0x88>)
 80223cc:	2201      	movs	r2, #1
 80223ce:	701a      	strb	r2, [r3, #0]
		Brr_SetEmergency(FALSE);
 80223d0:	2000      	movs	r0, #0
 80223d2:	f7fe f957 	bl	8020684 <Brr_SetEmergency>
}
 80223d6:	e00b      	b.n	80223f0 <SetDoorControl+0x80>
	else if (bCMDOption == 4)
 80223d8:	79fb      	ldrb	r3, [r7, #7]
 80223da:	2b04      	cmp	r3, #4
 80223dc:	d108      	bne.n	80223f0 <SetDoorControl+0x80>
		gfTestMode = FALSE;
 80223de:	4b06      	ldr	r3, [pc, #24]	; (80223f8 <SetDoorControl+0x88>)
 80223e0:	2200      	movs	r2, #0
 80223e2:	701a      	strb	r2, [r3, #0]
		gfFreeMode = FALSE;
 80223e4:	4b05      	ldr	r3, [pc, #20]	; (80223fc <SetDoorControl+0x8c>)
 80223e6:	2200      	movs	r2, #0
 80223e8:	701a      	strb	r2, [r3, #0]
		Brr_SetEmergency(TRUE);
 80223ea:	2001      	movs	r0, #1
 80223ec:	f7fe f94a 	bl	8020684 <Brr_SetEmergency>
}
 80223f0:	bf00      	nop
 80223f2:	3708      	adds	r7, #8
 80223f4:	46bd      	mov	sp, r7
 80223f6:	bd80      	pop	{r7, pc}
 80223f8:	2400041c 	.word	0x2400041c
 80223fc:	2400041b 	.word	0x2400041b

08022400 <SendACK>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendACK(void)
{
 8022400:	b580      	push	{r7, lr}
 8022402:	af00      	add	r7, sp, #0
	U3_Putch(ACK);
 8022404:	2006      	movs	r0, #6
 8022406:	f004 fa9a 	bl	802693e <U3_Putch>
}
 802240a:	bf00      	nop
 802240c:	bd80      	pop	{r7, pc}

0802240e <SendNAK>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendNAK(void)
{
 802240e:	b580      	push	{r7, lr}
 8022410:	af00      	add	r7, sp, #0
	U3_Putch(NAK);
 8022412:	2015      	movs	r0, #21
 8022414:	f004 fa93 	bl	802693e <U3_Putch>
}
 8022418:	bf00      	nop
 802241a:	bd80      	pop	{r7, pc}

0802241c <IsCommandNeedResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
bool IsCommandNeedResponse(BYTE bCMDCode)
{
 802241c:	b480      	push	{r7}
 802241e:	b087      	sub	sp, #28
 8022420:	af00      	add	r7, sp, #0
 8022422:	4603      	mov	r3, r0
 8022424:	71fb      	strb	r3, [r7, #7]
	int i;
	BYTE no_response_code[] = {
 8022426:	4a10      	ldr	r2, [pc, #64]	; (8022468 <IsCommandNeedResponse+0x4c>)
 8022428:	f107 0308 	add.w	r3, r7, #8
 802242c:	ca07      	ldmia	r2, {r0, r1, r2}
 802242e:	c303      	stmia	r3!, {r0, r1}
 8022430:	801a      	strh	r2, [r3, #0]
		CMD_CONTROL_BUZZER,
		CMD_SAFETY_STOP,
		CMD_WRITE_REGISTER,
		CMD_SET_UPS_COMMAND};

	for (i = 0; i < sizeof(no_response_code); i++)
 8022432:	2300      	movs	r3, #0
 8022434:	617b      	str	r3, [r7, #20]
 8022436:	e00c      	b.n	8022452 <IsCommandNeedResponse+0x36>
	{
		if (no_response_code[i] == bCMDCode)
 8022438:	f107 0208 	add.w	r2, r7, #8
 802243c:	697b      	ldr	r3, [r7, #20]
 802243e:	4413      	add	r3, r2
 8022440:	781b      	ldrb	r3, [r3, #0]
 8022442:	79fa      	ldrb	r2, [r7, #7]
 8022444:	429a      	cmp	r2, r3
 8022446:	d101      	bne.n	802244c <IsCommandNeedResponse+0x30>
		{
			return FALSE;
 8022448:	2300      	movs	r3, #0
 802244a:	e006      	b.n	802245a <IsCommandNeedResponse+0x3e>
	for (i = 0; i < sizeof(no_response_code); i++)
 802244c:	697b      	ldr	r3, [r7, #20]
 802244e:	3301      	adds	r3, #1
 8022450:	617b      	str	r3, [r7, #20]
 8022452:	697b      	ldr	r3, [r7, #20]
 8022454:	2b09      	cmp	r3, #9
 8022456:	d9ef      	bls.n	8022438 <IsCommandNeedResponse+0x1c>
		}
	}

	return TRUE;
 8022458:	2301      	movs	r3, #1
}
 802245a:	4618      	mov	r0, r3
 802245c:	371c      	adds	r7, #28
 802245e:	46bd      	mov	sp, r7
 8022460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022464:	4770      	bx	lr
 8022466:	bf00      	nop
 8022468:	08031ed8 	.word	0x08031ed8

0802246c <MakeResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void MakeResponse(BYTE *pbResOption, int nOptionLen)
{
 802246c:	b580      	push	{r7, lr}
 802246e:	b082      	sub	sp, #8
 8022470:	af00      	add	r7, sp, #0
 8022472:	6078      	str	r0, [r7, #4]
 8022474:	6039      	str	r1, [r7, #0]
	GCUResponse.d.bMainSeq = GCUCommand.d.bMainSeq;
 8022476:	4b14      	ldr	r3, [pc, #80]	; (80224c8 <MakeResponse+0x5c>)
 8022478:	781a      	ldrb	r2, [r3, #0]
 802247a:	4b14      	ldr	r3, [pc, #80]	; (80224cc <MakeResponse+0x60>)
 802247c:	701a      	strb	r2, [r3, #0]

	if (GCUCommand.d.bMouleSeq == MAX_SEQUENCE)
 802247e:	4b12      	ldr	r3, [pc, #72]	; (80224c8 <MakeResponse+0x5c>)
 8022480:	785b      	ldrb	r3, [r3, #1]
 8022482:	2bff      	cmp	r3, #255	; 0xff
 8022484:	d103      	bne.n	802248e <MakeResponse+0x22>
		GCUResponse.d.bMouleSeq = 0;
 8022486:	4b11      	ldr	r3, [pc, #68]	; (80224cc <MakeResponse+0x60>)
 8022488:	2200      	movs	r2, #0
 802248a:	705a      	strb	r2, [r3, #1]
 802248c:	e005      	b.n	802249a <MakeResponse+0x2e>
	else
		GCUResponse.d.bMouleSeq = (GCUCommand.d.bMouleSeq+1);
 802248e:	4b0e      	ldr	r3, [pc, #56]	; (80224c8 <MakeResponse+0x5c>)
 8022490:	785b      	ldrb	r3, [r3, #1]
 8022492:	3301      	adds	r3, #1
 8022494:	b2da      	uxtb	r2, r3
 8022496:	4b0d      	ldr	r3, [pc, #52]	; (80224cc <MakeResponse+0x60>)
 8022498:	705a      	strb	r2, [r3, #1]

	GCUResponse.d.bCmdCode = GCUCommand.d.bCmdCode;
 802249a:	4b0b      	ldr	r3, [pc, #44]	; (80224c8 <MakeResponse+0x5c>)
 802249c:	78da      	ldrb	r2, [r3, #3]
 802249e:	4b0b      	ldr	r3, [pc, #44]	; (80224cc <MakeResponse+0x60>)
 80224a0:	70da      	strb	r2, [r3, #3]
	GCUResponse.d.bDataLen = nOptionLen+sizeof(GCUResponse.d.bCmdCode);	// add command length
 80224a2:	683b      	ldr	r3, [r7, #0]
 80224a4:	b2db      	uxtb	r3, r3
 80224a6:	3301      	adds	r3, #1
 80224a8:	b2da      	uxtb	r2, r3
 80224aa:	4b08      	ldr	r3, [pc, #32]	; (80224cc <MakeResponse+0x60>)
 80224ac:	709a      	strb	r2, [r3, #2]

	if (nOptionLen)
 80224ae:	683b      	ldr	r3, [r7, #0]
 80224b0:	2b00      	cmp	r3, #0
 80224b2:	d005      	beq.n	80224c0 <MakeResponse+0x54>
		memcpy(GCUResponse.d.mbOptionData, pbResOption, nOptionLen);
 80224b4:	683b      	ldr	r3, [r7, #0]
 80224b6:	461a      	mov	r2, r3
 80224b8:	6879      	ldr	r1, [r7, #4]
 80224ba:	4805      	ldr	r0, [pc, #20]	; (80224d0 <MakeResponse+0x64>)
 80224bc:	f00e f86c 	bl	8030598 <memcpy>
}
 80224c0:	bf00      	nop
 80224c2:	3708      	adds	r7, #8
 80224c4:	46bd      	mov	sp, r7
 80224c6:	bd80      	pop	{r7, pc}
 80224c8:	24000268 	.word	0x24000268
 80224cc:	240002ec 	.word	0x240002ec
 80224d0:	240002f0 	.word	0x240002f0

080224d4 <SendResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendResponse(void)
{
 80224d4:	b580      	push	{r7, lr}
 80224d6:	b084      	sub	sp, #16
 80224d8:	af00      	add	r7, sp, #0
	BYTE	bBCC;
	BYTE	*pbResBuff;
	int		nResLen;

	pbResBuff	= GCUResponse.Buff;
 80224da:	4b2a      	ldr	r3, [pc, #168]	; (8022584 <SendResponse+0xb0>)
 80224dc:	60bb      	str	r3, [r7, #8]
	nResLen		= GCUResponse.d.bDataLen+FRAME_HEADER_LEN;
 80224de:	4b29      	ldr	r3, [pc, #164]	; (8022584 <SendResponse+0xb0>)
 80224e0:	789b      	ldrb	r3, [r3, #2]
 80224e2:	3303      	adds	r3, #3
 80224e4:	607b      	str	r3, [r7, #4]

	// send STX
	U3_Putch(STX);
 80224e6:	2002      	movs	r0, #2
 80224e8:	f004 fa29 	bl	802693e <U3_Putch>
	bBCC = STX;				// BCC calculation
 80224ec:	2302      	movs	r3, #2
 80224ee:	73fb      	strb	r3, [r7, #15]

	// send data
	while (nResLen--)
 80224f0:	e034      	b.n	802255c <SendResponse+0x88>
	{
		// DLE processing
		if ((*pbResBuff == STX) || (*pbResBuff == ETX) || (*pbResBuff == DLE))
 80224f2:	68bb      	ldr	r3, [r7, #8]
 80224f4:	781b      	ldrb	r3, [r3, #0]
 80224f6:	2b02      	cmp	r3, #2
 80224f8:	d007      	beq.n	802250a <SendResponse+0x36>
 80224fa:	68bb      	ldr	r3, [r7, #8]
 80224fc:	781b      	ldrb	r3, [r3, #0]
 80224fe:	2b03      	cmp	r3, #3
 8022500:	d003      	beq.n	802250a <SendResponse+0x36>
 8022502:	68bb      	ldr	r3, [r7, #8]
 8022504:	781b      	ldrb	r3, [r3, #0]
 8022506:	2b10      	cmp	r3, #16
 8022508:	d11b      	bne.n	8022542 <SendResponse+0x6e>
		{
			U3_Putch(DLE);
 802250a:	2010      	movs	r0, #16
 802250c:	f004 fa17 	bl	802693e <U3_Putch>
			bBCC ^= DLE;				// BCC calculation
 8022510:	7bfb      	ldrb	r3, [r7, #15]
 8022512:	f083 0310 	eor.w	r3, r3, #16
 8022516:	73fb      	strb	r3, [r7, #15]

			U3_Putch((*pbResBuff+DLE_OP));
 8022518:	68bb      	ldr	r3, [r7, #8]
 802251a:	781b      	ldrb	r3, [r3, #0]
 802251c:	3340      	adds	r3, #64	; 0x40
 802251e:	b2db      	uxtb	r3, r3
 8022520:	4618      	mov	r0, r3
 8022522:	f004 fa0c 	bl	802693e <U3_Putch>
			bBCC ^= (*pbResBuff+DLE_OP);	// BCC calculation
 8022526:	68bb      	ldr	r3, [r7, #8]
 8022528:	781b      	ldrb	r3, [r3, #0]
 802252a:	3340      	adds	r3, #64	; 0x40
 802252c:	b2db      	uxtb	r3, r3
 802252e:	b25a      	sxtb	r2, r3
 8022530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022534:	4053      	eors	r3, r2
 8022536:	b25b      	sxtb	r3, r3
 8022538:	73fb      	strb	r3, [r7, #15]
			pbResBuff++;
 802253a:	68bb      	ldr	r3, [r7, #8]
 802253c:	3301      	adds	r3, #1
 802253e:	60bb      	str	r3, [r7, #8]
 8022540:	e00c      	b.n	802255c <SendResponse+0x88>
		}
		else
		{
			U3_Putch(*pbResBuff);
 8022542:	68bb      	ldr	r3, [r7, #8]
 8022544:	781b      	ldrb	r3, [r3, #0]
 8022546:	4618      	mov	r0, r3
 8022548:	f004 f9f9 	bl	802693e <U3_Putch>
			bBCC ^= *pbResBuff;			// BCC calculation
 802254c:	68bb      	ldr	r3, [r7, #8]
 802254e:	781a      	ldrb	r2, [r3, #0]
 8022550:	7bfb      	ldrb	r3, [r7, #15]
 8022552:	4053      	eors	r3, r2
 8022554:	73fb      	strb	r3, [r7, #15]
			pbResBuff++;
 8022556:	68bb      	ldr	r3, [r7, #8]
 8022558:	3301      	adds	r3, #1
 802255a:	60bb      	str	r3, [r7, #8]
	while (nResLen--)
 802255c:	687b      	ldr	r3, [r7, #4]
 802255e:	1e5a      	subs	r2, r3, #1
 8022560:	607a      	str	r2, [r7, #4]
 8022562:	2b00      	cmp	r3, #0
 8022564:	d1c5      	bne.n	80224f2 <SendResponse+0x1e>
		}
	}

	// send ETX
	U3_Putch(ETX);
 8022566:	2003      	movs	r0, #3
 8022568:	f004 f9e9 	bl	802693e <U3_Putch>
	bBCC ^= ETX;
 802256c:	7bfb      	ldrb	r3, [r7, #15]
 802256e:	f083 0303 	eor.w	r3, r3, #3
 8022572:	73fb      	strb	r3, [r7, #15]

	// send BCC
	U3_Putch(bBCC);
 8022574:	7bfb      	ldrb	r3, [r7, #15]
 8022576:	4618      	mov	r0, r3
 8022578:	f004 f9e1 	bl	802693e <U3_Putch>

#if _RES_DUMP_
	PRINT("\nRES %02X Data", GCUResponse.d.bCmdCode);
	Print2Hex("", GCUResponse.Buff, GCUResponse.d.bDataLen+FRAME_HEADER_LEN);
#endif
}
 802257c:	bf00      	nop
 802257e:	3710      	adds	r7, #16
 8022580:	46bd      	mov	sp, r7
 8022582:	bd80      	pop	{r7, pc}
 8022584:	240002ec 	.word	0x240002ec

08022588 <CMDSetGCUOpMode>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetGCUOpMode(void)
{
 8022588:	b580      	push	{r7, lr}
 802258a:	af00      	add	r7, sp, #0
	SetNewOpMode((T_GCU_OP_MODE *)GCUCommand.d.mbOptionData);
 802258c:	4804      	ldr	r0, [pc, #16]	; (80225a0 <CMDSetGCUOpMode+0x18>)
 802258e:	f7fe fcb9 	bl	8020f04 <SetNewOpMode>
	MakeResponse(GCUCommand.d.mbOptionData, sizeof(T_GCU_OP_MODE));
 8022592:	2104      	movs	r1, #4
 8022594:	4802      	ldr	r0, [pc, #8]	; (80225a0 <CMDSetGCUOpMode+0x18>)
 8022596:	f7ff ff69 	bl	802246c <MakeResponse>
}
 802259a:	bf00      	nop
 802259c:	bd80      	pop	{r7, pc}
 802259e:	bf00      	nop
 80225a0:	2400026c 	.word	0x2400026c

080225a4 <CMDGetGCUOpMode>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetGCUOpMode(void)
{
 80225a4:	b580      	push	{r7, lr}
 80225a6:	b082      	sub	sp, #8
 80225a8:	af00      	add	r7, sp, #0
	T_GCU_OP_MODE CurMode;

	GetCurrentOpMode(&CurMode);
 80225aa:	1d3b      	adds	r3, r7, #4
 80225ac:	4618      	mov	r0, r3
 80225ae:	f7fe fd31 	bl	8021014 <GetCurrentOpMode>
	MakeResponse((BYTE*)&CurMode, sizeof(T_GCU_OP_MODE));
 80225b2:	1d3b      	adds	r3, r7, #4
 80225b4:	2104      	movs	r1, #4
 80225b6:	4618      	mov	r0, r3
 80225b8:	f7ff ff58 	bl	802246c <MakeResponse>
}
 80225bc:	bf00      	nop
 80225be:	3708      	adds	r7, #8
 80225c0:	46bd      	mov	sp, r7
 80225c2:	bd80      	pop	{r7, pc}

080225c4 <CMDSetGCUParameter>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetGCUParameter(void)
{
 80225c4:	b580      	push	{r7, lr}
 80225c6:	af00      	add	r7, sp, #0
	gnParameterLength = GCUCommand.d.bDataLen-1;
 80225c8:	4b09      	ldr	r3, [pc, #36]	; (80225f0 <CMDSetGCUParameter+0x2c>)
 80225ca:	789b      	ldrb	r3, [r3, #2]
 80225cc:	3b01      	subs	r3, #1
 80225ce:	4a09      	ldr	r2, [pc, #36]	; (80225f4 <CMDSetGCUParameter+0x30>)
 80225d0:	6013      	str	r3, [r2, #0]

	SetGCUParameter((T_GCU_PARAMETER*)GCUCommand.d.mbOptionData, gnParameterLength);
 80225d2:	4b08      	ldr	r3, [pc, #32]	; (80225f4 <CMDSetGCUParameter+0x30>)
 80225d4:	681b      	ldr	r3, [r3, #0]
 80225d6:	4619      	mov	r1, r3
 80225d8:	4807      	ldr	r0, [pc, #28]	; (80225f8 <CMDSetGCUParameter+0x34>)
 80225da:	f7fe fd2d 	bl	8021038 <SetGCUParameter>
	MakeResponse(GCUCommand.d.mbOptionData, gnParameterLength);
 80225de:	4b05      	ldr	r3, [pc, #20]	; (80225f4 <CMDSetGCUParameter+0x30>)
 80225e0:	681b      	ldr	r3, [r3, #0]
 80225e2:	4619      	mov	r1, r3
 80225e4:	4804      	ldr	r0, [pc, #16]	; (80225f8 <CMDSetGCUParameter+0x34>)
 80225e6:	f7ff ff41 	bl	802246c <MakeResponse>
}
 80225ea:	bf00      	nop
 80225ec:	bd80      	pop	{r7, pc}
 80225ee:	bf00      	nop
 80225f0:	24000268 	.word	0x24000268
 80225f4:	24000000 	.word	0x24000000
 80225f8:	2400026c 	.word	0x2400026c

080225fc <CMDGetGCUParameter>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetGCUParameter(void)
{
 80225fc:	b580      	push	{r7, lr}
 80225fe:	b084      	sub	sp, #16
 8022600:	af00      	add	r7, sp, #0
	T_GCU_PARAMETER	GurGCUParameter;

	GetGCUParameter(&GurGCUParameter);
 8022602:	463b      	mov	r3, r7
 8022604:	4618      	mov	r0, r3
 8022606:	f7fe fd7f 	bl	8021108 <GetGCUParameter>

	MakeResponse((BYTE*)&GurGCUParameter, gnParameterLength);
 802260a:	4b05      	ldr	r3, [pc, #20]	; (8022620 <CMDGetGCUParameter+0x24>)
 802260c:	681a      	ldr	r2, [r3, #0]
 802260e:	463b      	mov	r3, r7
 8022610:	4611      	mov	r1, r2
 8022612:	4618      	mov	r0, r3
 8022614:	f7ff ff2a 	bl	802246c <MakeResponse>
}
 8022618:	bf00      	nop
 802261a:	3710      	adds	r7, #16
 802261c:	46bd      	mov	sp, r7
 802261e:	bd80      	pop	{r7, pc}
 8022620:	24000000 	.word	0x24000000

08022624 <CMDGetVersion>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetVersion(void)
{
 8022624:	b580      	push	{r7, lr}
 8022626:	af00      	add	r7, sp, #0
	// Brr_SetSerialComm(TRUE);
	MakeResponse((BYTE*)GCU_FW_VERSION, sizeof(GCU_FW_VERSION));
 8022628:	210a      	movs	r1, #10
 802262a:	4802      	ldr	r0, [pc, #8]	; (8022634 <CMDGetVersion+0x10>)
 802262c:	f7ff ff1e 	bl	802246c <MakeResponse>
}
 8022630:	bf00      	nop
 8022632:	bd80      	pop	{r7, pc}
 8022634:	08031ee4 	.word	0x08031ee4

08022638 <CMDSetScadaOut>:
* Return:   void
* comments: 
*******************************************************************************/

void CMDSetScadaOut(void)
{
 8022638:	b480      	push	{r7}
 802263a:	b083      	sub	sp, #12
 802263c:	af00      	add	r7, sp, #0
	T_CMD_SCADA_OUT *pScadaOut = (T_CMD_SCADA_OUT *)GCUCommand.d.mbOptionData;
 802263e:	4b07      	ldr	r3, [pc, #28]	; (802265c <CMDSetScadaOut+0x24>)
 8022640:	607b      	str	r3, [r7, #4]

	outb(WRITE03_ADR, pScadaOut->bSCADA_Out & 0x0F);
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	781b      	ldrb	r3, [r3, #0]
 8022646:	4a06      	ldr	r2, [pc, #24]	; (8022660 <CMDSetScadaOut+0x28>)
 8022648:	f003 030f 	and.w	r3, r3, #15
 802264c:	b2db      	uxtb	r3, r3
 802264e:	7013      	strb	r3, [r2, #0]
}
 8022650:	bf00      	nop
 8022652:	370c      	adds	r7, #12
 8022654:	46bd      	mov	sp, r7
 8022656:	f85d 7b04 	ldr.w	r7, [sp], #4
 802265a:	4770      	bx	lr
 802265c:	2400026c 	.word	0x2400026c
 8022660:	64000400 	.word	0x64000400

08022664 <CMDResetGCU>:
* comments: 
*******************************************************************************/
BYTE ResetCMD = 0;

void CMDResetGCU(void)
{
 8022664:	b580      	push	{r7, lr}
 8022666:	af00      	add	r7, sp, #0
	MakeResponse(NULL, 0);
 8022668:	2100      	movs	r1, #0
 802266a:	2000      	movs	r0, #0
 802266c:	f7ff fefe 	bl	802246c <MakeResponse>
	SendResponse();
 8022670:	f7ff ff30 	bl	80224d4 <SendResponse>
	ResetCMD = 0x1;
 8022674:	4b06      	ldr	r3, [pc, #24]	; (8022690 <CMDResetGCU+0x2c>)
 8022676:	2201      	movs	r2, #1
 8022678:	701a      	strb	r2, [r3, #0]
	flash_write(0x4000, (byte *)&ResetCMD, 1);
 802267a:	2201      	movs	r2, #1
 802267c:	4904      	ldr	r1, [pc, #16]	; (8022690 <CMDResetGCU+0x2c>)
 802267e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8022682:	f005 f937 	bl	80278f4 <flash_write>
	HAL_Delay(50);
 8022686:	2032      	movs	r0, #50	; 0x32
 8022688:	f007 fd42 	bl	802a110 <HAL_Delay>
	NVIC_SystemReset();
 802268c:	f7ff fe5a 	bl	8022344 <__NVIC_SystemReset>
 8022690:	240003ee 	.word	0x240003ee

08022694 <CMDAuthorizePass>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDAuthorizePass(void)
{
 8022694:	b580      	push	{r7, lr}
 8022696:	b082      	sub	sp, #8
 8022698:	af00      	add	r7, sp, #0
	T_CMD_AUTH_PASS *pcmdAuthPass = (T_CMD_AUTH_PASS*)GCUCommand.d.mbOptionData;
 802269a:	4b26      	ldr	r3, [pc, #152]	; (8022734 <CMDAuthorizePass+0xa0>)
 802269c:	607b      	str	r3, [r7, #4]
	T_GCU_AUTH_COUNT resAuthCount;

	if (pcmdAuthPass->bAuthCount == 0)
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	785b      	ldrb	r3, [r3, #1]
 80226a2:	2b00      	cmp	r3, #0
 80226a4:	d114      	bne.n	80226d0 <CMDAuthorizePass+0x3c>
	{		
		printf(" [CMDAuthorizePass] zero count! - A:%d, D:%d \n", pcmdAuthPass->bAuthCount, pcmdAuthPass->bDirection);
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	785b      	ldrb	r3, [r3, #1]
 80226aa:	4619      	mov	r1, r3
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	781b      	ldrb	r3, [r3, #0]
 80226b0:	461a      	mov	r2, r3
 80226b2:	4821      	ldr	r0, [pc, #132]	; (8022738 <CMDAuthorizePass+0xa4>)
 80226b4:	f006 fe9a 	bl	80293ec <printf_>
		printf(" [CMDAuthorizePass] org data. - A:%d, D:%d \n", GCUCommand.d.mbOptionData[1], GCUCommand.d.mbOptionData[0]);
 80226b8:	4b20      	ldr	r3, [pc, #128]	; (802273c <CMDAuthorizePass+0xa8>)
 80226ba:	795b      	ldrb	r3, [r3, #5]
 80226bc:	4619      	mov	r1, r3
 80226be:	4b1f      	ldr	r3, [pc, #124]	; (802273c <CMDAuthorizePass+0xa8>)
 80226c0:	791b      	ldrb	r3, [r3, #4]
 80226c2:	461a      	mov	r2, r3
 80226c4:	481e      	ldr	r0, [pc, #120]	; (8022740 <CMDAuthorizePass+0xac>)
 80226c6:	f006 fe91 	bl	80293ec <printf_>
		pcmdAuthPass->bAuthCount = 1;
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	2201      	movs	r2, #1
 80226ce:	705a      	strb	r2, [r3, #1]
	}

	IncreaseAuthCount(pcmdAuthPass->bDirection);
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	781b      	ldrb	r3, [r3, #0]
 80226d4:	4618      	mov	r0, r3
 80226d6:	f7fe fdfd 	bl	80212d4 <IncreaseAuthCount>

	if (pcmdAuthPass->bDirection == FROM_ENTRY)
 80226da:	687b      	ldr	r3, [r7, #4]
 80226dc:	781b      	ldrb	r3, [r3, #0]
 80226de:	2b01      	cmp	r3, #1
 80226e0:	d10d      	bne.n	80226fe <CMDAuthorizePass+0x6a>
	{
		ControlIndicator(pcmdAuthPass->bLamp, LAMP_OFF, 0, FALSE);
 80226e2:	687b      	ldr	r3, [r7, #4]
 80226e4:	7898      	ldrb	r0, [r3, #2]
 80226e6:	2300      	movs	r3, #0
 80226e8:	2200      	movs	r2, #0
 80226ea:	2100      	movs	r1, #0
 80226ec:	f7fe ff48 	bl	8021580 <ControlIndicator>
		ControlDirectionLED(pcmdAuthPass->bLampBar, DIR_RED);
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	78db      	ldrb	r3, [r3, #3]
 80226f4:	2102      	movs	r1, #2
 80226f6:	4618      	mov	r0, r3
 80226f8:	f7fe fee6 	bl	80214c8 <ControlDirectionLED>
 80226fc:	e00c      	b.n	8022718 <CMDAuthorizePass+0x84>
	}
	else
	{
		ControlIndicator(LAMP_OFF, pcmdAuthPass->bLamp, 0, FALSE);
 80226fe:	687b      	ldr	r3, [r7, #4]
 8022700:	7899      	ldrb	r1, [r3, #2]
 8022702:	2300      	movs	r3, #0
 8022704:	2200      	movs	r2, #0
 8022706:	2000      	movs	r0, #0
 8022708:	f7fe ff3a 	bl	8021580 <ControlIndicator>
		ControlDirectionLED(DIR_RED, pcmdAuthPass->bLampBar);
 802270c:	687b      	ldr	r3, [r7, #4]
 802270e:	78db      	ldrb	r3, [r3, #3]
 8022710:	4619      	mov	r1, r3
 8022712:	2002      	movs	r0, #2
 8022714:	f7fe fed8 	bl	80214c8 <ControlDirectionLED>
	}

	GetAuthCount(&resAuthCount);
 8022718:	463b      	mov	r3, r7
 802271a:	4618      	mov	r0, r3
 802271c:	f7fe fdc4 	bl	80212a8 <GetAuthCount>
	MakeResponse((BYTE*)&resAuthCount, sizeof(T_GCU_AUTH_COUNT));
 8022720:	463b      	mov	r3, r7
 8022722:	2102      	movs	r1, #2
 8022724:	4618      	mov	r0, r3
 8022726:	f7ff fea1 	bl	802246c <MakeResponse>
}
 802272a:	bf00      	nop
 802272c:	3708      	adds	r7, #8
 802272e:	46bd      	mov	sp, r7
 8022730:	bd80      	pop	{r7, pc}
 8022732:	bf00      	nop
 8022734:	2400026c 	.word	0x2400026c
 8022738:	08031ef0 	.word	0x08031ef0
 802273c:	24000268 	.word	0x24000268
 8022740:	08031f20 	.word	0x08031f20

08022744 <CMDClearAuthorization>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDClearAuthorization(void)
{
 8022744:	b580      	push	{r7, lr}
 8022746:	b082      	sub	sp, #8
 8022748:	af00      	add	r7, sp, #0
	T_GCU_AUTH_COUNT resAuthCount;

	ClearAuthCount();
 802274a:	f7fe fe2f 	bl	80213ac <ClearAuthCount>
	GetAuthCount(&resAuthCount);
 802274e:	1d3b      	adds	r3, r7, #4
 8022750:	4618      	mov	r0, r3
 8022752:	f7fe fda9 	bl	80212a8 <GetAuthCount>

	MakeResponse((BYTE*)&resAuthCount, sizeof(T_GCU_AUTH_COUNT));
 8022756:	1d3b      	adds	r3, r7, #4
 8022758:	2102      	movs	r1, #2
 802275a:	4618      	mov	r0, r3
 802275c:	f7ff fe86 	bl	802246c <MakeResponse>
}
 8022760:	bf00      	nop
 8022762:	3708      	adds	r7, #8
 8022764:	46bd      	mov	sp, r7
 8022766:	bd80      	pop	{r7, pc}

08022768 <CMDGetStatus>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetStatus(void)
{
 8022768:	b580      	push	{r7, lr}
 802276a:	b086      	sub	sp, #24
 802276c:	af00      	add	r7, sp, #0
	T_GCU_STATUS_RES GurStatus;

	GetGCUStatus(&GurStatus);
 802276e:	1d3b      	adds	r3, r7, #4
 8022770:	4618      	mov	r0, r3
 8022772:	f7fe fce1 	bl	8021138 <GetGCUStatus>

	MakeResponse((BYTE*)&GurStatus, sizeof(T_GCU_STATUS_RES));
 8022776:	1d3b      	adds	r3, r7, #4
 8022778:	2112      	movs	r1, #18
 802277a:	4618      	mov	r0, r3
 802277c:	f7ff fe76 	bl	802246c <MakeResponse>
}
 8022780:	bf00      	nop
 8022782:	3718      	adds	r7, #24
 8022784:	46bd      	mov	sp, r7
 8022786:	bd80      	pop	{r7, pc}

08022788 <CMDGetSensorSwitch>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetSensorSwitch(void)
{
 8022788:	b480      	push	{r7}
 802278a:	af00      	add	r7, sp, #0
	// not used
}
 802278c:	bf00      	nop
 802278e:	46bd      	mov	sp, r7
 8022790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022794:	4770      	bx	lr
	...

08022798 <CMDControlAllLED>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlAllLED(void)
{
 8022798:	b580      	push	{r7, lr}
 802279a:	b082      	sub	sp, #8
 802279c:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_ALL_LED *pcmdControlAll = (T_CMD_CONTROL_ALL_LED *)GCUCommand.d.mbOptionData;
 802279e:	4b19      	ldr	r3, [pc, #100]	; (8022804 <CMDControlAllLED+0x6c>)
 80227a0:	607b      	str	r3, [r7, #4]

	// printf(" CMDControlAllLED = %d/%d/%d/%d/%d/%d \n", pcmdControlAll->bLamp_EN, pcmdControlAll->bLamp_EX, pcmdControlAll->bOverhead_EN, pcmdControlAll->bOverhead_EX, pcmdControlAll->bIndicator_EN, pcmdControlAll->bIndicator_EX);
	
	if (pcmdControlAll->test_flag == SET)
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	781b      	ldrb	r3, [r3, #0]
 80227a6:	2b01      	cmp	r3, #1
 80227a8:	d118      	bne.n	80227dc <CMDControlAllLED+0x44>
	{
		ControlStatusLED(pcmdControlAll->bLamp_EN, pcmdControlAll->bLamp_EX);
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	785a      	ldrb	r2, [r3, #1]
 80227ae:	687b      	ldr	r3, [r7, #4]
 80227b0:	789b      	ldrb	r3, [r3, #2]
 80227b2:	4619      	mov	r1, r3
 80227b4:	4610      	mov	r0, r2
 80227b6:	f7fe febb 	bl	8021530 <ControlStatusLED>
		ControlOverheadDisplay(pcmdControlAll->bOverhead_EN, pcmdControlAll->bOverhead_EX);
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	795a      	ldrb	r2, [r3, #5]
 80227be:	687b      	ldr	r3, [r7, #4]
 80227c0:	799b      	ldrb	r3, [r3, #6]
 80227c2:	4619      	mov	r1, r3
 80227c4:	4610      	mov	r0, r2
 80227c6:	f7fe fec7 	bl	8021558 <ControlOverheadDisplay>
		ControlIndicator4Test(pcmdControlAll->bIndicator_EN, pcmdControlAll->bIndicator_EX);
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	78da      	ldrb	r2, [r3, #3]
 80227ce:	687b      	ldr	r3, [r7, #4]
 80227d0:	791b      	ldrb	r3, [r3, #4]
 80227d2:	4619      	mov	r1, r3
 80227d4:	4610      	mov	r0, r2
 80227d6:	f7fe ff47 	bl	8021668 <ControlIndicator4Test>
	else
	{
		ControlDirectionLED(pcmdControlAll->bLamp_EN, pcmdControlAll->bLamp_EN);
		ControlIndicator(pcmdControlAll->bIndicator_EN, pcmdControlAll->bIndicator_EX, 0, FALSE);
	}
}
 80227da:	e00f      	b.n	80227fc <CMDControlAllLED+0x64>
		ControlDirectionLED(pcmdControlAll->bLamp_EN, pcmdControlAll->bLamp_EN);
 80227dc:	687b      	ldr	r3, [r7, #4]
 80227de:	785a      	ldrb	r2, [r3, #1]
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	785b      	ldrb	r3, [r3, #1]
 80227e4:	4619      	mov	r1, r3
 80227e6:	4610      	mov	r0, r2
 80227e8:	f7fe fe6e 	bl	80214c8 <ControlDirectionLED>
		ControlIndicator(pcmdControlAll->bIndicator_EN, pcmdControlAll->bIndicator_EX, 0, FALSE);
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	78d8      	ldrb	r0, [r3, #3]
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	7919      	ldrb	r1, [r3, #4]
 80227f4:	2300      	movs	r3, #0
 80227f6:	2200      	movs	r2, #0
 80227f8:	f7fe fec2 	bl	8021580 <ControlIndicator>
}
 80227fc:	bf00      	nop
 80227fe:	3708      	adds	r7, #8
 8022800:	46bd      	mov	sp, r7
 8022802:	bd80      	pop	{r7, pc}
 8022804:	2400026c 	.word	0x2400026c

08022808 <CMDControlBarrier>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlBarrier(void)
{
 8022808:	b580      	push	{r7, lr}
 802280a:	af00      	add	r7, sp, #0
	SetDoorControl(GCUCommand.d.mbOptionData[0]);
 802280c:	4b03      	ldr	r3, [pc, #12]	; (802281c <CMDControlBarrier+0x14>)
 802280e:	791b      	ldrb	r3, [r3, #4]
 8022810:	4618      	mov	r0, r3
 8022812:	f7ff fdad 	bl	8022370 <SetDoorControl>
}
 8022816:	bf00      	nop
 8022818:	bd80      	pop	{r7, pc}
 802281a:	bf00      	nop
 802281c:	24000268 	.word	0x24000268

08022820 <CMDControlIndicator>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlIndicator(void)
{
 8022820:	b580      	push	{r7, lr}
 8022822:	b082      	sub	sp, #8
 8022824:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_INDICATOR *pcmdIndicator = (T_CMD_CONTROL_INDICATOR *)GCUCommand.d.mbOptionData;
 8022826:	4b07      	ldr	r3, [pc, #28]	; (8022844 <CMDControlIndicator+0x24>)
 8022828:	607b      	str	r3, [r7, #4]
	ControlIndicator4Test(pcmdIndicator->bIndicator_EN, pcmdIndicator->bIndicator_EX);	
 802282a:	687b      	ldr	r3, [r7, #4]
 802282c:	781a      	ldrb	r2, [r3, #0]
 802282e:	687b      	ldr	r3, [r7, #4]
 8022830:	785b      	ldrb	r3, [r3, #1]
 8022832:	4619      	mov	r1, r3
 8022834:	4610      	mov	r0, r2
 8022836:	f7fe ff17 	bl	8021668 <ControlIndicator4Test>
}
 802283a:	bf00      	nop
 802283c:	3708      	adds	r7, #8
 802283e:	46bd      	mov	sp, r7
 8022840:	bd80      	pop	{r7, pc}
 8022842:	bf00      	nop
 8022844:	2400026c 	.word	0x2400026c

08022848 <CMDControlLamp>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlLamp(void)
{
 8022848:	b580      	push	{r7, lr}
 802284a:	b082      	sub	sp, #8
 802284c:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_LAMP *pcmdLamp = (T_CMD_CONTROL_LAMP *)GCUCommand.d.mbOptionData;
 802284e:	4b07      	ldr	r3, [pc, #28]	; (802286c <CMDControlLamp+0x24>)
 8022850:	607b      	str	r3, [r7, #4]
	ControlStatusLED(pcmdLamp->bLamp_EN, pcmdLamp->bLamp_EX);
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	781a      	ldrb	r2, [r3, #0]
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	785b      	ldrb	r3, [r3, #1]
 802285a:	4619      	mov	r1, r3
 802285c:	4610      	mov	r0, r2
 802285e:	f7fe fe67 	bl	8021530 <ControlStatusLED>
}
 8022862:	bf00      	nop
 8022864:	3708      	adds	r7, #8
 8022866:	46bd      	mov	sp, r7
 8022868:	bd80      	pop	{r7, pc}
 802286a:	bf00      	nop
 802286c:	2400026c 	.word	0x2400026c

08022870 <CMDControlBuzzer>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlBuzzer(void)
{
 8022870:	b580      	push	{r7, lr}
 8022872:	b082      	sub	sp, #8
 8022874:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_BUZZER *pcmdBuzzer = (T_CMD_CONTROL_BUZZER *)GCUCommand.d.mbOptionData;
 8022876:	4b10      	ldr	r3, [pc, #64]	; (80228b8 <CMDControlBuzzer+0x48>)
 8022878:	607b      	str	r3, [r7, #4]

	if (GCUCommand.d.bDataLen == (sizeof(T_CMD_CONTROL_BUZZER)+1))
 802287a:	4b10      	ldr	r3, [pc, #64]	; (80228bc <CMDControlBuzzer+0x4c>)
 802287c:	789b      	ldrb	r3, [r3, #2]
 802287e:	2b04      	cmp	r3, #4
 8022880:	d10e      	bne.n	80228a0 <CMDControlBuzzer+0x30>
	{
		if (pcmdBuzzer->bBuzzerNo & MASK_TEST_BUZZER_MAIN)
 8022882:	687b      	ldr	r3, [r7, #4]
 8022884:	789b      	ldrb	r3, [r3, #2]
 8022886:	f003 0301 	and.w	r3, r3, #1
 802288a:	2b00      	cmp	r3, #0
 802288c:	d010      	beq.n	80228b0 <CMDControlBuzzer+0x40>
			ControlBuzzer(pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 802288e:	687b      	ldr	r3, [r7, #4]
 8022890:	781a      	ldrb	r2, [r3, #0]
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	785b      	ldrb	r3, [r3, #1]
 8022896:	4619      	mov	r1, r3
 8022898:	4610      	mov	r0, r2
 802289a:	f7fe fdeb 	bl	8021474 <ControlBuzzer>
	}
	else
	{
		ControlBuzzer(pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
	}	
}
 802289e:	e007      	b.n	80228b0 <CMDControlBuzzer+0x40>
		ControlBuzzer(pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	781a      	ldrb	r2, [r3, #0]
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	785b      	ldrb	r3, [r3, #1]
 80228a8:	4619      	mov	r1, r3
 80228aa:	4610      	mov	r0, r2
 80228ac:	f7fe fde2 	bl	8021474 <ControlBuzzer>
}
 80228b0:	bf00      	nop
 80228b2:	3708      	adds	r7, #8
 80228b4:	46bd      	mov	sp, r7
 80228b6:	bd80      	pop	{r7, pc}
 80228b8:	2400026c 	.word	0x2400026c
 80228bc:	24000268 	.word	0x24000268

080228c0 <CMDSafetyStop>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSafetyStop(void)
{
 80228c0:	b480      	push	{r7}
 80228c2:	b083      	sub	sp, #12
 80228c4:	af00      	add	r7, sp, #0
	T_CMD_SAFETY_STOP *pcmdSafetyStop = (T_CMD_SAFETY_STOP *)GCUCommand.d.mbOptionData;
 80228c6:	4b08      	ldr	r3, [pc, #32]	; (80228e8 <CMDSafetyStop+0x28>)
 80228c8:	607b      	str	r3, [r7, #4]
	gfAISafetyOn = pcmdSafetyStop->bSafety;
 80228ca:	687b      	ldr	r3, [r7, #4]
 80228cc:	781b      	ldrb	r3, [r3, #0]
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	bf14      	ite	ne
 80228d2:	2301      	movne	r3, #1
 80228d4:	2300      	moveq	r3, #0
 80228d6:	b2da      	uxtb	r2, r3
 80228d8:	4b04      	ldr	r3, [pc, #16]	; (80228ec <CMDSafetyStop+0x2c>)
 80228da:	701a      	strb	r2, [r3, #0]
}
 80228dc:	bf00      	nop
 80228de:	370c      	adds	r7, #12
 80228e0:	46bd      	mov	sp, r7
 80228e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228e6:	4770      	bx	lr
 80228e8:	2400026c 	.word	0x2400026c
 80228ec:	2400041d 	.word	0x2400041d

080228f0 <CMDWriteRegister>:
* Return:   void
* comments: 
*******************************************************************************/

void CMDWriteRegister(void)
{
 80228f0:	b580      	push	{r7, lr}
 80228f2:	b084      	sub	sp, #16
 80228f4:	af00      	add	r7, sp, #0
	BYTE	*pbControl = (BYTE *)GCUCommand.d.mbOptionData;
 80228f6:	4bb6      	ldr	r3, [pc, #728]	; (8022bd0 <CMDWriteRegister+0x2e0>)
 80228f8:	60fb      	str	r3, [r7, #12]
	BYTE	dwPrimaryLEDValue 		= 0;
 80228fa:	2300      	movs	r3, #0
 80228fc:	72fb      	strb	r3, [r7, #11]
	BYTE	dwSecondaryLEDValue 	= 0;
 80228fe:	2300      	movs	r3, #0
 8022900:	72bb      	strb	r3, [r7, #10]
	BYTE	dwBarrierValue 			= 0;
 8022902:	2300      	movs	r3, #0
 8022904:	727b      	strb	r3, [r7, #9]
	BYTE	dwScadaValue 			= 0;
 8022906:	2300      	movs	r3, #0
 8022908:	723b      	strb	r3, [r7, #8]
	BYTE	dwUPSCHKValue 			= 0;
 802290a:	2300      	movs	r3, #0
 802290c:	71fb      	strb	r3, [r7, #7]
	BYTE	dwUPSSHDNKValue 		= 0;
 802290e:	2300      	movs	r3, #0
 8022910:	71bb      	strb	r3, [r7, #6]

	printf("pbControl[0] = [%d] \n",pbControl[0]);        //Barrier, S_EMG = [0x80], S_DIR = [0x40], S_BRAKE = [0x20], S_OPEN = [0x10], P_EMG = [0x08], P_DIR = [0x04], P_BRAKE = [0x02], P_OPEN = [0x01]
 8022912:	68fb      	ldr	r3, [r7, #12]
 8022914:	781b      	ldrb	r3, [r3, #0]
 8022916:	4619      	mov	r1, r3
 8022918:	48ae      	ldr	r0, [pc, #696]	; (8022bd4 <CMDWriteRegister+0x2e4>)
 802291a:	f006 fd67 	bl	80293ec <printf_>
	printf("pbControl[1] = [%d] \n",pbControl[1]);		//SCADA OUT, NXO = [0x8], TDO = [0x4], EBO = [0x2], OOS = [0x1]
 802291e:	68fb      	ldr	r3, [r7, #12]
 8022920:	3301      	adds	r3, #1
 8022922:	781b      	ldrb	r3, [r3, #0]
 8022924:	4619      	mov	r1, r3
 8022926:	48ac      	ldr	r0, [pc, #688]	; (8022bd8 <CMDWriteRegister+0x2e8>)
 8022928:	f006 fd60 	bl	80293ec <printf_>
	printf("pbControl[2] = [%d] \n",pbControl[2]);
 802292c:	68fb      	ldr	r3, [r7, #12]
 802292e:	3302      	adds	r3, #2
 8022930:	781b      	ldrb	r3, [r3, #0]
 8022932:	4619      	mov	r1, r3
 8022934:	48a9      	ldr	r0, [pc, #676]	; (8022bdc <CMDWriteRegister+0x2ec>)
 8022936:	f006 fd59 	bl	80293ec <printf_>
	printf("pbControl[3] = [%d] \n",pbControl[3]);		//jig master dir green = [0x4], red = [0x2], yellow = [0x1]
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	3303      	adds	r3, #3
 802293e:	781b      	ldrb	r3, [r3, #0]
 8022940:	4619      	mov	r1, r3
 8022942:	48a7      	ldr	r0, [pc, #668]	; (8022be0 <CMDWriteRegister+0x2f0>)
 8022944:	f006 fd52 	bl	80293ec <printf_>
	printf("pbControl[4] = [%d] \n",pbControl[4]);		//jig slave dir green = [0x4], red = [0x2], yellow = [0x1]
 8022948:	68fb      	ldr	r3, [r7, #12]
 802294a:	3304      	adds	r3, #4
 802294c:	781b      	ldrb	r3, [r3, #0]
 802294e:	4619      	mov	r1, r3
 8022950:	48a4      	ldr	r0, [pc, #656]	; (8022be4 <CMDWriteRegister+0x2f4>)
 8022952:	f006 fd4b 	bl	80293ec <printf_>
	printf("pbControl[5] = [%d] \n",pbControl[5]);
 8022956:	68fb      	ldr	r3, [r7, #12]
 8022958:	3305      	adds	r3, #5
 802295a:	781b      	ldrb	r3, [r3, #0]
 802295c:	4619      	mov	r1, r3
 802295e:	48a2      	ldr	r0, [pc, #648]	; (8022be8 <CMDWriteRegister+0x2f8>)
 8022960:	f006 fd44 	bl	80293ec <printf_>
	printf("pbControl[6] = [%d] \n",pbControl[6]);		//jig master alm green = [0x4], blue = [0x2], red = [0x1]
 8022964:	68fb      	ldr	r3, [r7, #12]
 8022966:	3306      	adds	r3, #6
 8022968:	781b      	ldrb	r3, [r3, #0]
 802296a:	4619      	mov	r1, r3
 802296c:	489f      	ldr	r0, [pc, #636]	; (8022bec <CMDWriteRegister+0x2fc>)
 802296e:	f006 fd3d 	bl	80293ec <printf_>
	printf("pbControl[7] = [%d] \n",pbControl[7]);		//jig slave alm green = [0x4], blue = [0x2], red = [0x1]
 8022972:	68fb      	ldr	r3, [r7, #12]
 8022974:	3307      	adds	r3, #7
 8022976:	781b      	ldrb	r3, [r3, #0]
 8022978:	4619      	mov	r1, r3
 802297a:	489d      	ldr	r0, [pc, #628]	; (8022bf0 <CMDWriteRegister+0x300>)
 802297c:	f006 fd36 	bl	80293ec <printf_>
	printf("pbControl[8] = [%d] \n",pbControl[8]);		//default 0x33 SHDN button 0x01 CHK 0x02 reverse
 8022980:	68fb      	ldr	r3, [r7, #12]
 8022982:	3308      	adds	r3, #8
 8022984:	781b      	ldrb	r3, [r3, #0]
 8022986:	4619      	mov	r1, r3
 8022988:	489a      	ldr	r0, [pc, #616]	; (8022bf4 <CMDWriteRegister+0x304>)
 802298a:	f006 fd2f 	bl	80293ec <printf_>

	// Barrier - Primary
	dwBarrierValue =  (pbControl[0] & 0x01)? 0x01: 0x00;			// output Primary Barrier - Open/Close
 802298e:	68fb      	ldr	r3, [r7, #12]
 8022990:	781b      	ldrb	r3, [r3, #0]
 8022992:	f003 0301 	and.w	r3, r3, #1
 8022996:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x02)? 0x02: 0x00;			// output Primary Barrier - Emg(Free)
 8022998:	68fb      	ldr	r3, [r7, #12]
 802299a:	781b      	ldrb	r3, [r3, #0]
 802299c:	b25b      	sxtb	r3, r3
 802299e:	f003 0302 	and.w	r3, r3, #2
 80229a2:	b25a      	sxtb	r2, r3
 80229a4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80229a8:	4313      	orrs	r3, r2
 80229aa:	b25b      	sxtb	r3, r3
 80229ac:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x04)? 0x04: 0x00;			// output Primary Barrier - Direction
 80229ae:	68fb      	ldr	r3, [r7, #12]
 80229b0:	781b      	ldrb	r3, [r3, #0]
 80229b2:	b25b      	sxtb	r3, r3
 80229b4:	f003 0304 	and.w	r3, r3, #4
 80229b8:	b25a      	sxtb	r2, r3
 80229ba:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80229be:	4313      	orrs	r3, r2
 80229c0:	b25b      	sxtb	r3, r3
 80229c2:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x08)? 0x08: 0x00;			// output Primary Barrier - Brake(Stop)
 80229c4:	68fb      	ldr	r3, [r7, #12]
 80229c6:	781b      	ldrb	r3, [r3, #0]
 80229c8:	b25b      	sxtb	r3, r3
 80229ca:	f003 0308 	and.w	r3, r3, #8
 80229ce:	b25a      	sxtb	r2, r3
 80229d0:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80229d4:	4313      	orrs	r3, r2
 80229d6:	b25b      	sxtb	r3, r3
 80229d8:	727b      	strb	r3, [r7, #9]

	// Barrier - Secondary
	dwBarrierValue |= (pbControl[0] & 0x10)? 0x10: 0x00;			// output Secondary Barrier - Open/Close
 80229da:	68fb      	ldr	r3, [r7, #12]
 80229dc:	781b      	ldrb	r3, [r3, #0]
 80229de:	b25b      	sxtb	r3, r3
 80229e0:	f003 0310 	and.w	r3, r3, #16
 80229e4:	b25a      	sxtb	r2, r3
 80229e6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80229ea:	4313      	orrs	r3, r2
 80229ec:	b25b      	sxtb	r3, r3
 80229ee:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x20)? 0x20: 0x00;			// output Secondary Barrier - Emg(Free)
 80229f0:	68fb      	ldr	r3, [r7, #12]
 80229f2:	781b      	ldrb	r3, [r3, #0]
 80229f4:	b25b      	sxtb	r3, r3
 80229f6:	f003 0320 	and.w	r3, r3, #32
 80229fa:	b25a      	sxtb	r2, r3
 80229fc:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a00:	4313      	orrs	r3, r2
 8022a02:	b25b      	sxtb	r3, r3
 8022a04:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x40)? 0x40: 0x00;			// output Secondary Barrier - Direction
 8022a06:	68fb      	ldr	r3, [r7, #12]
 8022a08:	781b      	ldrb	r3, [r3, #0]
 8022a0a:	b25b      	sxtb	r3, r3
 8022a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022a10:	b25a      	sxtb	r2, r3
 8022a12:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a16:	4313      	orrs	r3, r2
 8022a18:	b25b      	sxtb	r3, r3
 8022a1a:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x80)? 0x80: 0x00;			// output Secondary Barrier - Brake(Stop)
 8022a1c:	68fb      	ldr	r3, [r7, #12]
 8022a1e:	781b      	ldrb	r3, [r3, #0]
 8022a20:	b25b      	sxtb	r3, r3
 8022a22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8022a26:	b25a      	sxtb	r2, r3
 8022a28:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8022a2c:	4313      	orrs	r3, r2
 8022a2e:	b25b      	sxtb	r3, r3
 8022a30:	727b      	strb	r3, [r7, #9]
	
	outb(WRITE02_ADR, dwBarrierValue);
 8022a32:	4a71      	ldr	r2, [pc, #452]	; (8022bf8 <CMDWriteRegister+0x308>)
 8022a34:	7a7b      	ldrb	r3, [r7, #9]
 8022a36:	7013      	strb	r3, [r2, #0]

	// SCADA
	dwScadaValue =  (pbControl[1] & 0x01)? 0x01: 0x00;				// output SCADA - OOS
 8022a38:	68fb      	ldr	r3, [r7, #12]
 8022a3a:	3301      	adds	r3, #1
 8022a3c:	781b      	ldrb	r3, [r3, #0]
 8022a3e:	f003 0301 	and.w	r3, r3, #1
 8022a42:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x02)? 0x02: 0x00;				// output SCADA - EBO
 8022a44:	68fb      	ldr	r3, [r7, #12]
 8022a46:	3301      	adds	r3, #1
 8022a48:	781b      	ldrb	r3, [r3, #0]
 8022a4a:	b25b      	sxtb	r3, r3
 8022a4c:	f003 0302 	and.w	r3, r3, #2
 8022a50:	b25a      	sxtb	r2, r3
 8022a52:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8022a56:	4313      	orrs	r3, r2
 8022a58:	b25b      	sxtb	r3, r3
 8022a5a:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x04)? 0x04: 0x00;				// output SCADA - TDO
 8022a5c:	68fb      	ldr	r3, [r7, #12]
 8022a5e:	3301      	adds	r3, #1
 8022a60:	781b      	ldrb	r3, [r3, #0]
 8022a62:	b25b      	sxtb	r3, r3
 8022a64:	f003 0304 	and.w	r3, r3, #4
 8022a68:	b25a      	sxtb	r2, r3
 8022a6a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8022a6e:	4313      	orrs	r3, r2
 8022a70:	b25b      	sxtb	r3, r3
 8022a72:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x08)? 0x08: 0x00;				// output SCADA - NXO
 8022a74:	68fb      	ldr	r3, [r7, #12]
 8022a76:	3301      	adds	r3, #1
 8022a78:	781b      	ldrb	r3, [r3, #0]
 8022a7a:	b25b      	sxtb	r3, r3
 8022a7c:	f003 0308 	and.w	r3, r3, #8
 8022a80:	b25a      	sxtb	r2, r3
 8022a82:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8022a86:	4313      	orrs	r3, r2
 8022a88:	b25b      	sxtb	r3, r3
 8022a8a:	723b      	strb	r3, [r7, #8]

	outb(WRITE03_ADR, dwScadaValue);
 8022a8c:	4a5b      	ldr	r2, [pc, #364]	; (8022bfc <CMDWriteRegister+0x30c>)
 8022a8e:	7a3b      	ldrb	r3, [r7, #8]
 8022a90:	7013      	strb	r3, [r2, #0]

	// Status Display - Primary
	dwPrimaryLEDValue =  (pbControl[3] & 0x01)? 0x01: 0x00;			//Status display - green
 8022a92:	68fb      	ldr	r3, [r7, #12]
 8022a94:	3303      	adds	r3, #3
 8022a96:	781b      	ldrb	r3, [r3, #0]
 8022a98:	f003 0301 	and.w	r3, r3, #1
 8022a9c:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[3] & 0x02)? 0x02: 0x00;			//Status display - red
 8022a9e:	68fb      	ldr	r3, [r7, #12]
 8022aa0:	3303      	adds	r3, #3
 8022aa2:	781b      	ldrb	r3, [r3, #0]
 8022aa4:	b25b      	sxtb	r3, r3
 8022aa6:	f003 0302 	and.w	r3, r3, #2
 8022aaa:	b25a      	sxtb	r2, r3
 8022aac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022ab0:	4313      	orrs	r3, r2
 8022ab2:	b25b      	sxtb	r3, r3
 8022ab4:	72fb      	strb	r3, [r7, #11]

	// Overhead Display - Primary
	dwPrimaryLEDValue |= (pbControl[3] & 0x04)? 0x04: 0x00;			//Overhead display - green
 8022ab6:	68fb      	ldr	r3, [r7, #12]
 8022ab8:	3303      	adds	r3, #3
 8022aba:	781b      	ldrb	r3, [r3, #0]
 8022abc:	b25b      	sxtb	r3, r3
 8022abe:	f003 0304 	and.w	r3, r3, #4
 8022ac2:	b25a      	sxtb	r2, r3
 8022ac4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022ac8:	4313      	orrs	r3, r2
 8022aca:	b25b      	sxtb	r3, r3
 8022acc:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[3] & 0x08)? 0x08: 0x00;			//Overhead display - red
 8022ace:	68fb      	ldr	r3, [r7, #12]
 8022ad0:	3303      	adds	r3, #3
 8022ad2:	781b      	ldrb	r3, [r3, #0]
 8022ad4:	b25b      	sxtb	r3, r3
 8022ad6:	f003 0308 	and.w	r3, r3, #8
 8022ada:	b25a      	sxtb	r2, r3
 8022adc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022ae0:	4313      	orrs	r3, r2
 8022ae2:	b25b      	sxtb	r3, r3
 8022ae4:	72fb      	strb	r3, [r7, #11]

	// Status Display - Secondary
	dwPrimaryLEDValue |= (pbControl[4] & 0x01)? 0x10: 0x00;		//Status display - green
 8022ae6:	68fb      	ldr	r3, [r7, #12]
 8022ae8:	3304      	adds	r3, #4
 8022aea:	781b      	ldrb	r3, [r3, #0]
 8022aec:	011b      	lsls	r3, r3, #4
 8022aee:	b25b      	sxtb	r3, r3
 8022af0:	f003 0310 	and.w	r3, r3, #16
 8022af4:	b25a      	sxtb	r2, r3
 8022af6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022afa:	4313      	orrs	r3, r2
 8022afc:	b25b      	sxtb	r3, r3
 8022afe:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[4] & 0x02)? 0x20: 0x00;		//Status display - red
 8022b00:	68fb      	ldr	r3, [r7, #12]
 8022b02:	3304      	adds	r3, #4
 8022b04:	781b      	ldrb	r3, [r3, #0]
 8022b06:	011b      	lsls	r3, r3, #4
 8022b08:	b25b      	sxtb	r3, r3
 8022b0a:	f003 0320 	and.w	r3, r3, #32
 8022b0e:	b25a      	sxtb	r2, r3
 8022b10:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b14:	4313      	orrs	r3, r2
 8022b16:	b25b      	sxtb	r3, r3
 8022b18:	72fb      	strb	r3, [r7, #11]

	// Overhead Display - Secondary
	dwPrimaryLEDValue |= (pbControl[4] & 0x04)? 0x40: 0x00;		//Overhead display - green
 8022b1a:	68fb      	ldr	r3, [r7, #12]
 8022b1c:	3304      	adds	r3, #4
 8022b1e:	781b      	ldrb	r3, [r3, #0]
 8022b20:	011b      	lsls	r3, r3, #4
 8022b22:	b25b      	sxtb	r3, r3
 8022b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022b28:	b25a      	sxtb	r2, r3
 8022b2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b2e:	4313      	orrs	r3, r2
 8022b30:	b25b      	sxtb	r3, r3
 8022b32:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[4] & 0x08)? 0x80: 0x00;		//Overhead display - red
 8022b34:	68fb      	ldr	r3, [r7, #12]
 8022b36:	3304      	adds	r3, #4
 8022b38:	781b      	ldrb	r3, [r3, #0]
 8022b3a:	011b      	lsls	r3, r3, #4
 8022b3c:	b25b      	sxtb	r3, r3
 8022b3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8022b42:	b25a      	sxtb	r2, r3
 8022b44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022b48:	4313      	orrs	r3, r2
 8022b4a:	b25b      	sxtb	r3, r3
 8022b4c:	72fb      	strb	r3, [r7, #11]

	outb(WRITE00_ADR, dwPrimaryLEDValue);
 8022b4e:	f04f 42c8 	mov.w	r2, #1677721600	; 0x64000000
 8022b52:	7afb      	ldrb	r3, [r7, #11]
 8022b54:	7013      	strb	r3, [r2, #0]


	// Indicator Light - Primary
	dwSecondaryLEDValue  = (pbControl[6] & 0x01)? 0x01: 0x00;			//red
 8022b56:	68fb      	ldr	r3, [r7, #12]
 8022b58:	3306      	adds	r3, #6
 8022b5a:	781b      	ldrb	r3, [r3, #0]
 8022b5c:	f003 0301 	and.w	r3, r3, #1
 8022b60:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[6] & 0x04)? 0x02: 0x00;			//green
 8022b62:	68fb      	ldr	r3, [r7, #12]
 8022b64:	3306      	adds	r3, #6
 8022b66:	781b      	ldrb	r3, [r3, #0]
 8022b68:	105b      	asrs	r3, r3, #1
 8022b6a:	b25b      	sxtb	r3, r3
 8022b6c:	f003 0302 	and.w	r3, r3, #2
 8022b70:	b25a      	sxtb	r2, r3
 8022b72:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022b76:	4313      	orrs	r3, r2
 8022b78:	b25b      	sxtb	r3, r3
 8022b7a:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[6] & 0x02)? 0x04: 0x00;			//blue
 8022b7c:	68fb      	ldr	r3, [r7, #12]
 8022b7e:	3306      	adds	r3, #6
 8022b80:	781b      	ldrb	r3, [r3, #0]
 8022b82:	005b      	lsls	r3, r3, #1
 8022b84:	b25b      	sxtb	r3, r3
 8022b86:	f003 0304 	and.w	r3, r3, #4
 8022b8a:	b25a      	sxtb	r2, r3
 8022b8c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022b90:	4313      	orrs	r3, r2
 8022b92:	b25b      	sxtb	r3, r3
 8022b94:	72bb      	strb	r3, [r7, #10]

	// Indicator Light - Secondary
	dwSecondaryLEDValue |= (pbControl[7] & 0x01)? 0x10: 0x00;		//red
 8022b96:	68fb      	ldr	r3, [r7, #12]
 8022b98:	3307      	adds	r3, #7
 8022b9a:	781b      	ldrb	r3, [r3, #0]
 8022b9c:	011b      	lsls	r3, r3, #4
 8022b9e:	b25b      	sxtb	r3, r3
 8022ba0:	f003 0310 	and.w	r3, r3, #16
 8022ba4:	b25a      	sxtb	r2, r3
 8022ba6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022baa:	4313      	orrs	r3, r2
 8022bac:	b25b      	sxtb	r3, r3
 8022bae:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[7] & 0x04)? 0x20: 0x00;		//green
 8022bb0:	68fb      	ldr	r3, [r7, #12]
 8022bb2:	3307      	adds	r3, #7
 8022bb4:	781b      	ldrb	r3, [r3, #0]
 8022bb6:	00db      	lsls	r3, r3, #3
 8022bb8:	b25b      	sxtb	r3, r3
 8022bba:	f003 0320 	and.w	r3, r3, #32
 8022bbe:	b25a      	sxtb	r2, r3
 8022bc0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022bc4:	4313      	orrs	r3, r2
 8022bc6:	b25b      	sxtb	r3, r3
 8022bc8:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[7] & 0x02)? 0x40: 0x00;		//blue
 8022bca:	68fb      	ldr	r3, [r7, #12]
 8022bcc:	e018      	b.n	8022c00 <CMDWriteRegister+0x310>
 8022bce:	bf00      	nop
 8022bd0:	2400026c 	.word	0x2400026c
 8022bd4:	08031f50 	.word	0x08031f50
 8022bd8:	08031f68 	.word	0x08031f68
 8022bdc:	08031f80 	.word	0x08031f80
 8022be0:	08031f98 	.word	0x08031f98
 8022be4:	08031fb0 	.word	0x08031fb0
 8022be8:	08031fc8 	.word	0x08031fc8
 8022bec:	08031fe0 	.word	0x08031fe0
 8022bf0:	08031ff8 	.word	0x08031ff8
 8022bf4:	08032010 	.word	0x08032010
 8022bf8:	64000200 	.word	0x64000200
 8022bfc:	64000400 	.word	0x64000400
 8022c00:	3307      	adds	r3, #7
 8022c02:	781b      	ldrb	r3, [r3, #0]
 8022c04:	015b      	lsls	r3, r3, #5
 8022c06:	b25b      	sxtb	r3, r3
 8022c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022c0c:	b25a      	sxtb	r2, r3
 8022c0e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8022c12:	4313      	orrs	r3, r2
 8022c14:	b25b      	sxtb	r3, r3
 8022c16:	72bb      	strb	r3, [r7, #10]


	// Write Register

	outb(WRITE01_ADR, dwSecondaryLEDValue);	
 8022c18:	4a1d      	ldr	r2, [pc, #116]	; (8022c90 <CMDWriteRegister+0x3a0>)
 8022c1a:	7abb      	ldrb	r3, [r7, #10]
 8022c1c:	7013      	strb	r3, [r2, #0]


	if (pbControl[8] == 0x33)
 8022c1e:	68fb      	ldr	r3, [r7, #12]
 8022c20:	3308      	adds	r3, #8
 8022c22:	781b      	ldrb	r3, [r3, #0]
 8022c24:	2b33      	cmp	r3, #51	; 0x33
 8022c26:	d10a      	bne.n	8022c3e <CMDWriteRegister+0x34e>
	{
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_CHK_Pin, GPIO_PIN_RESET);			//Default Low / Active High	 New Board
 8022c28:	2200      	movs	r2, #0
 8022c2a:	2140      	movs	r1, #64	; 0x40
 8022c2c:	4819      	ldr	r0, [pc, #100]	; (8022c94 <CMDWriteRegister+0x3a4>)
 8022c2e:	f008 f943 	bl	802aeb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_SHDN_Pin, GPIO_PIN_RESET);		//Default High / Active Low	 New Board
 8022c32:	2200      	movs	r2, #0
 8022c34:	2180      	movs	r1, #128	; 0x80
 8022c36:	4817      	ldr	r0, [pc, #92]	; (8022c94 <CMDWriteRegister+0x3a4>)
 8022c38:	f008 f93e 	bl	802aeb8 <HAL_GPIO_WritePin>
 8022c3c:	e019      	b.n	8022c72 <CMDWriteRegister+0x382>
		//add comment Shut down 이 Default High 이므로 GPIO_PIN_RESET -> GPIO_PIN_SET 이어야 하나 jig 프로그램 check box 가 불이 꺼진 상황이라 동일하게 동작되게 설정		20231127_pms
	}
	else
	{
		dwUPSCHKValue  = (pbControl[8] & 0x02)? 0x01: 0x00;						//CHK	High / Low
 8022c3e:	68fb      	ldr	r3, [r7, #12]
 8022c40:	3308      	adds	r3, #8
 8022c42:	781b      	ldrb	r3, [r3, #0]
 8022c44:	105b      	asrs	r3, r3, #1
 8022c46:	b2db      	uxtb	r3, r3
 8022c48:	f003 0301 	and.w	r3, r3, #1
 8022c4c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_CHK_Pin, dwUPSCHKValue);
 8022c4e:	79fb      	ldrb	r3, [r7, #7]
 8022c50:	461a      	mov	r2, r3
 8022c52:	2140      	movs	r1, #64	; 0x40
 8022c54:	480f      	ldr	r0, [pc, #60]	; (8022c94 <CMDWriteRegister+0x3a4>)
 8022c56:	f008 f92f 	bl	802aeb8 <HAL_GPIO_WritePin>

		dwUPSSHDNKValue = (pbControl[8] & 0x01)? 0x01: 0x00;					//SHDN	Low / High
 8022c5a:	68fb      	ldr	r3, [r7, #12]
 8022c5c:	3308      	adds	r3, #8
 8022c5e:	781b      	ldrb	r3, [r3, #0]
 8022c60:	f003 0301 	and.w	r3, r3, #1
 8022c64:	71bb      	strb	r3, [r7, #6]
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_SHDN_Pin, dwUPSSHDNKValue);
 8022c66:	79bb      	ldrb	r3, [r7, #6]
 8022c68:	461a      	mov	r2, r3
 8022c6a:	2180      	movs	r1, #128	; 0x80
 8022c6c:	4809      	ldr	r0, [pc, #36]	; (8022c94 <CMDWriteRegister+0x3a4>)
 8022c6e:	f008 f923 	bl	802aeb8 <HAL_GPIO_WritePin>
*/
	//pbControl[5] =  0;						// Control dummy direction display (WMATA not used)
	//pbControl[8] => UPS Shuddown On [0x00], UPS Shuddown Off [0x01] / UPS Check On [0x02], UPS Check Off [0x00] 
	//pbControl[8] =  0;						// UPS Command - BART도 UPS I/F 사용 (Out: 2EA) - 현재 SHDN 1EA만 구현되어 있으나 CHK신호 추가예정 -> Jig Program 에서는 UPS Write 시그널 줌. 20231002 by Joseph

	if (pbControl[10])	
 8022c72:	68fb      	ldr	r3, [r7, #12]
 8022c74:	330a      	adds	r3, #10
 8022c76:	781b      	ldrb	r3, [r3, #0]
 8022c78:	2b00      	cmp	r3, #0
 8022c7a:	d002      	beq.n	8022c82 <CMDWriteRegister+0x392>
		BuzzerOn();			//buzzer 한개만 사용
 8022c7c:	f002 fbac 	bl	80253d8 <BuzzerOn>
	else										
		BuzzerOff();
}
 8022c80:	e001      	b.n	8022c86 <CMDWriteRegister+0x396>
		BuzzerOff();
 8022c82:	f002 fbb5 	bl	80253f0 <BuzzerOff>
}
 8022c86:	bf00      	nop
 8022c88:	3710      	adds	r7, #16
 8022c8a:	46bd      	mov	sp, r7
 8022c8c:	bd80      	pop	{r7, pc}
 8022c8e:	bf00      	nop
 8022c90:	64000100 	.word	0x64000100
 8022c94:	58021400 	.word	0x58021400

08022c98 <CMDReadRegister>:
* Out:      Values of current register
* Return:   void
* comments: 
*******************************************************************************/
void CMDReadRegister(void)			//pms		이 함수 모두 확인 필요
{
 8022c98:	b580      	push	{r7, lr}
 8022c9a:	b086      	sub	sp, #24
 8022c9c:	af00      	add	r7, sp, #0
	BYTE	mbReadData[MAX_READ_REG];			//0 ~ 10 = Total 11 0x6400000B 까지 read
	DWORD	dwSpareSenserValue  = 0;
 8022c9e:	2300      	movs	r3, #0
 8022ca0:	617b      	str	r3, [r7, #20]
	DWORD	dwUPSValue = 0;
 8022ca2:	2300      	movs	r3, #0
 8022ca4:	613b      	str	r3, [r7, #16]

	dwUPSValue = (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_CONN_Pin))? 0x01: 0x00;			// Connection Failure, High active //stm32L496 적용 보드에서는 conn이 없었음
 8022ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022caa:	483d      	ldr	r0, [pc, #244]	; (8022da0 <CMDReadRegister+0x108>)
 8022cac:	f008 f8ec 	bl	802ae88 <HAL_GPIO_ReadPin>
 8022cb0:	4603      	mov	r3, r0
 8022cb2:	2b00      	cmp	r3, #0
 8022cb4:	bf14      	ite	ne
 8022cb6:	2301      	movne	r3, #1
 8022cb8:	2300      	moveq	r3, #0
 8022cba:	b2db      	uxtb	r3, r3
 8022cbc:	613b      	str	r3, [r7, #16]
	dwUPSValue |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_PWR_FAIL_Pin))? 0x02: 0x00;		// Power Failure, Low active
 8022cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022cc2:	4837      	ldr	r0, [pc, #220]	; (8022da0 <CMDReadRegister+0x108>)
 8022cc4:	f008 f8e0 	bl	802ae88 <HAL_GPIO_ReadPin>
 8022cc8:	4603      	mov	r3, r0
 8022cca:	2b00      	cmp	r3, #0
 8022ccc:	d001      	beq.n	8022cd2 <CMDReadRegister+0x3a>
 8022cce:	2302      	movs	r3, #2
 8022cd0:	e000      	b.n	8022cd4 <CMDReadRegister+0x3c>
 8022cd2:	2300      	movs	r3, #0
 8022cd4:	461a      	mov	r2, r3
 8022cd6:	693b      	ldr	r3, [r7, #16]
 8022cd8:	4313      	orrs	r3, r2
 8022cda:	613b      	str	r3, [r7, #16]
	dwUPSValue |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_LOW_BAT_Pin))? 0x04: 0x00;		// Low battery, Low active
 8022cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8022ce0:	482f      	ldr	r0, [pc, #188]	; (8022da0 <CMDReadRegister+0x108>)
 8022ce2:	f008 f8d1 	bl	802ae88 <HAL_GPIO_ReadPin>
 8022ce6:	4603      	mov	r3, r0
 8022ce8:	2b00      	cmp	r3, #0
 8022cea:	d001      	beq.n	8022cf0 <CMDReadRegister+0x58>
 8022cec:	2304      	movs	r3, #4
 8022cee:	e000      	b.n	8022cf2 <CMDReadRegister+0x5a>
 8022cf0:	2300      	movs	r3, #0
 8022cf2:	461a      	mov	r2, r3
 8022cf4:	693b      	ldr	r3, [r7, #16]
 8022cf6:	4313      	orrs	r3, r2
 8022cf8:	613b      	str	r3, [r7, #16]

	// BART 에서는 Passenger sensor 01 ~ 16(2 bytes) 만 사용
	dwSpareSenserValue = (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN1_Pin))? 0x01: 0x00;  	// Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기)
 8022cfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022cfe:	4829      	ldr	r0, [pc, #164]	; (8022da4 <CMDReadRegister+0x10c>)
 8022d00:	f008 f8c2 	bl	802ae88 <HAL_GPIO_ReadPin>
 8022d04:	4603      	mov	r3, r0
 8022d06:	2b00      	cmp	r3, #0
 8022d08:	bf14      	ite	ne
 8022d0a:	2301      	movne	r3, #1
 8022d0c:	2300      	moveq	r3, #0
 8022d0e:	b2db      	uxtb	r3, r3
 8022d10:	617b      	str	r3, [r7, #20]
	dwSpareSenserValue |= (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN2_Pin))? 0x02: 0x00;
 8022d12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8022d16:	4823      	ldr	r0, [pc, #140]	; (8022da4 <CMDReadRegister+0x10c>)
 8022d18:	f008 f8b6 	bl	802ae88 <HAL_GPIO_ReadPin>
 8022d1c:	4603      	mov	r3, r0
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	d001      	beq.n	8022d26 <CMDReadRegister+0x8e>
 8022d22:	2302      	movs	r3, #2
 8022d24:	e000      	b.n	8022d28 <CMDReadRegister+0x90>
 8022d26:	2300      	movs	r3, #0
 8022d28:	461a      	mov	r2, r3
 8022d2a:	697b      	ldr	r3, [r7, #20]
 8022d2c:	4313      	orrs	r3, r2
 8022d2e:	617b      	str	r3, [r7, #20]

	mbReadData[0] =  RD_SWITCH & 0x0F;			// Door/Module switch 1 - BART는 Door Switch 1~4만 사용, High - detected, Low - not detected
 8022d30:	4b1d      	ldr	r3, [pc, #116]	; (8022da8 <CMDReadRegister+0x110>)
 8022d32:	781b      	ldrb	r3, [r3, #0]
 8022d34:	b2db      	uxtb	r3, r3
 8022d36:	f003 030f 	and.w	r3, r3, #15
 8022d3a:	b2db      	uxtb	r3, r3
 8022d3c:	713b      	strb	r3, [r7, #4]
	mbReadData[1] =  (RD_SWITCH >> 4) & 0x0F;	// Door/Module switch 2 - BART는 Door Switch 5~8만 사용, High - detected, Low - not detected
 8022d3e:	4b1a      	ldr	r3, [pc, #104]	; (8022da8 <CMDReadRegister+0x110>)
 8022d40:	781b      	ldrb	r3, [r3, #0]
 8022d42:	b2db      	uxtb	r3, r3
 8022d44:	091b      	lsrs	r3, r3, #4
 8022d46:	b2db      	uxtb	r3, r3
 8022d48:	f003 030f 	and.w	r3, r3, #15
 8022d4c:	b2db      	uxtb	r3, r3
 8022d4e:	717b      	strb	r3, [r7, #5]
	mbReadData[2] =  0;							// Token capture unit sensor - Token box 없음
 8022d50:	2300      	movs	r3, #0
 8022d52:	71bb      	strb	r3, [r7, #6]
	mbReadData[3] =  (*(BYTE*)READ00_ADR);		// Passenger sensor 1 - BART는 Passenger sensor 1~8사용, High - detected, Low - not detected
 8022d54:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8022d58:	781b      	ldrb	r3, [r3, #0]
 8022d5a:	71fb      	strb	r3, [r7, #7]
	mbReadData[4] =  (*(BYTE*)READ01_ADR);		// Passenger sensor 2 - BART는 Passenger sensor 9~16사용(회로상엔 11~18로 표기) -> 회로상에도 9~16으로 표기 바랍니다 20230927 by Joseph, High - detected, Low - not detected
 8022d5c:	4b13      	ldr	r3, [pc, #76]	; (8022dac <CMDReadRegister+0x114>)
 8022d5e:	781b      	ldrb	r3, [r3, #0]
 8022d60:	723b      	strb	r3, [r7, #8]
	mbReadData[5] =  dwSpareSenserValue;		// Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기) -> 회로상에도 스페어는 17,18 로 표기 바랍니다 20230927 by Joseph
 8022d62:	697b      	ldr	r3, [r7, #20]
 8022d64:	b2db      	uxtb	r3, r3
 8022d66:	727b      	strb	r3, [r7, #9]
												// add - jig test에서는 17 18 할당 -> JIG 에서는 17,18 sensor 체크는 뺄 예정입니다. 20230927 by Joseph
	mbReadData[6] =  0;							// Spare sensor (WMATA not used) -> JIG 에서는 Spare sensor 체크는 뺄 예정입니다. 20230927 by Joseph
 8022d68:	2300      	movs	r3, #0
 8022d6a:	72bb      	strb	r3, [r7, #10]
	mbReadData[7] =  (*(BYTE*)READ04_ADR);		// Barrier status, High active
 8022d6c:	4b10      	ldr	r3, [pc, #64]	; (8022db0 <CMDReadRegister+0x118>)
 8022d6e:	781b      	ldrb	r3, [r3, #0]
 8022d70:	72fb      	strb	r3, [r7, #11]
	mbReadData[8] =  (*(BYTE*)READ03_ADR);		// SCADA, High active
 8022d72:	4b10      	ldr	r3, [pc, #64]	; (8022db4 <CMDReadRegister+0x11c>)
 8022d74:	781b      	ldrb	r3, [r3, #0]
 8022d76:	733b      	strb	r3, [r7, #12]
	mbReadData[9] =  IsEMGSignalOn();			// External IRQ source  - 인터럽트 신호 BART에서 사용여부는 첨부 GCU_IO Specification 참조 -> EBO (Emergency) Signal 값으로 변경. 20231002 by Joseph
 8022d78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8022d7c:	480e      	ldr	r0, [pc, #56]	; (8022db8 <CMDReadRegister+0x120>)
 8022d7e:	f008 f883 	bl	802ae88 <HAL_GPIO_ReadPin>
 8022d82:	4603      	mov	r3, r0
 8022d84:	737b      	strb	r3, [r7, #13]
	mbReadData[10] =  dwUPSValue;				// UPS Status - BART도 UPS I/F 사용 (In: 3EA) 
 8022d86:	693b      	ldr	r3, [r7, #16]
 8022d88:	b2db      	uxtb	r3, r3
 8022d8a:	73bb      	strb	r3, [r7, #14]

	MakeResponse(mbReadData, sizeof(mbReadData));
 8022d8c:	1d3b      	adds	r3, r7, #4
 8022d8e:	210b      	movs	r1, #11
 8022d90:	4618      	mov	r0, r3
 8022d92:	f7ff fb6b 	bl	802246c <MakeResponse>
}
 8022d96:	bf00      	nop
 8022d98:	3718      	adds	r7, #24
 8022d9a:	46bd      	mov	sp, r7
 8022d9c:	bd80      	pop	{r7, pc}
 8022d9e:	bf00      	nop
 8022da0:	58021400 	.word	0x58021400
 8022da4:	58020000 	.word	0x58020000
 8022da8:	60000300 	.word	0x60000300
 8022dac:	60000100 	.word	0x60000100
 8022db0:	60000600 	.word	0x60000600
 8022db4:	60000500 	.word	0x60000500
 8022db8:	58020400 	.word	0x58020400

08022dbc <CMDGetCPLDVersion>:
* Out:      Current CPLD version
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetCPLDVersion(void)
{
 8022dbc:	b580      	push	{r7, lr}
 8022dbe:	b082      	sub	sp, #8
 8022dc0:	af00      	add	r7, sp, #0
	BYTE	bCPLDVersion = RD_CPLDVER;
 8022dc2:	2300      	movs	r3, #0
 8022dc4:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&bCPLDVersion, sizeof(bCPLDVersion));
 8022dc6:	1dfb      	adds	r3, r7, #7
 8022dc8:	2101      	movs	r1, #1
 8022dca:	4618      	mov	r0, r3
 8022dcc:	f7ff fb4e 	bl	802246c <MakeResponse>
}
 8022dd0:	bf00      	nop
 8022dd2:	3708      	adds	r7, #8
 8022dd4:	46bd      	mov	sp, r7
 8022dd6:	bd80      	pop	{r7, pc}

08022dd8 <CMDGetDipSwitch>:
* Out:      Value of current dip switch 
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetDipSwitch(void)
{
 8022dd8:	b580      	push	{r7, lr}
 8022dda:	b082      	sub	sp, #8
 8022ddc:	af00      	add	r7, sp, #0
	BYTE dipSwitch = ReadDipSwitch();
 8022dde:	4b07      	ldr	r3, [pc, #28]	; (8022dfc <CMDGetDipSwitch+0x24>)
 8022de0:	691b      	ldr	r3, [r3, #16]
 8022de2:	b2db      	uxtb	r3, r3
 8022de4:	43db      	mvns	r3, r3
 8022de6:	b2db      	uxtb	r3, r3
 8022de8:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&dipSwitch, sizeof(dipSwitch));
 8022dea:	1dfb      	adds	r3, r7, #7
 8022dec:	2101      	movs	r1, #1
 8022dee:	4618      	mov	r0, r3
 8022df0:	f7ff fb3c 	bl	802246c <MakeResponse>
}
 8022df4:	bf00      	nop
 8022df6:	3708      	adds	r7, #8
 8022df8:	46bd      	mov	sp, r7
 8022dfa:	bd80      	pop	{r7, pc}
 8022dfc:	58020400 	.word	0x58020400

08022e00 <CMDSetUPSCommand>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetUPSCommand(void)
{
 8022e00:	b580      	push	{r7, lr}
 8022e02:	b082      	sub	sp, #8
 8022e04:	af00      	add	r7, sp, #0
	// Set UPS command
	BYTE bUPSCommand = GCUCommand.d.mbOptionData[0];
 8022e06:	4b17      	ldr	r3, [pc, #92]	; (8022e64 <CMDSetUPSCommand+0x64>)
 8022e08:	791b      	ldrb	r3, [r3, #4]
 8022e0a:	71fb      	strb	r3, [r7, #7]

	printf(" [CMDSetUPSCommand] %d \n", bUPSCommand);	
 8022e0c:	79fb      	ldrb	r3, [r7, #7]
 8022e0e:	4619      	mov	r1, r3
 8022e10:	4815      	ldr	r0, [pc, #84]	; (8022e68 <CMDSetUPSCommand+0x68>)
 8022e12:	f006 faeb 	bl	80293ec <printf_>

	switch (bUPSCommand)
 8022e16:	79fb      	ldrb	r3, [r7, #7]
 8022e18:	2b01      	cmp	r3, #1
 8022e1a:	d002      	beq.n	8022e22 <CMDSetUPSCommand+0x22>
 8022e1c:	2b02      	cmp	r3, #2
 8022e1e:	d00b      	beq.n	8022e38 <CMDSetUPSCommand+0x38>
 8022e20:	e010      	b.n	8022e44 <CMDSetUPSCommand+0x44>
	{
	case UPS_CMD_CHECK_ON:
		ControlUPS_CheckOn();
 8022e22:	2201      	movs	r2, #1
 8022e24:	2140      	movs	r1, #64	; 0x40
 8022e26:	4811      	ldr	r0, [pc, #68]	; (8022e6c <CMDSetUPSCommand+0x6c>)
 8022e28:	f008 f846 	bl	802aeb8 <HAL_GPIO_WritePin>
		ControlUPS_ShutDownOff();
 8022e2c:	2201      	movs	r2, #1
 8022e2e:	2180      	movs	r1, #128	; 0x80
 8022e30:	480e      	ldr	r0, [pc, #56]	; (8022e6c <CMDSetUPSCommand+0x6c>)
 8022e32:	f008 f841 	bl	802aeb8 <HAL_GPIO_WritePin>
		break;
 8022e36:	e010      	b.n	8022e5a <CMDSetUPSCommand+0x5a>
	case UPS_CMD_SHUTDOWN:
		ControlUPS_ShutDownOn();
 8022e38:	2200      	movs	r2, #0
 8022e3a:	2180      	movs	r1, #128	; 0x80
 8022e3c:	480b      	ldr	r0, [pc, #44]	; (8022e6c <CMDSetUPSCommand+0x6c>)
 8022e3e:	f008 f83b 	bl	802aeb8 <HAL_GPIO_WritePin>
		break;	
 8022e42:	e00a      	b.n	8022e5a <CMDSetUPSCommand+0x5a>
	default:
		ControlUPS_CheckOn();
 8022e44:	2201      	movs	r2, #1
 8022e46:	2140      	movs	r1, #64	; 0x40
 8022e48:	4808      	ldr	r0, [pc, #32]	; (8022e6c <CMDSetUPSCommand+0x6c>)
 8022e4a:	f008 f835 	bl	802aeb8 <HAL_GPIO_WritePin>
		ControlUPS_ShutDownOff();
 8022e4e:	2201      	movs	r2, #1
 8022e50:	2180      	movs	r1, #128	; 0x80
 8022e52:	4806      	ldr	r0, [pc, #24]	; (8022e6c <CMDSetUPSCommand+0x6c>)
 8022e54:	f008 f830 	bl	802aeb8 <HAL_GPIO_WritePin>
		break;
 8022e58:	bf00      	nop
	}
}
 8022e5a:	bf00      	nop
 8022e5c:	3708      	adds	r7, #8
 8022e5e:	46bd      	mov	sp, r7
 8022e60:	bd80      	pop	{r7, pc}
 8022e62:	bf00      	nop
 8022e64:	24000268 	.word	0x24000268
 8022e68:	08032028 	.word	0x08032028
 8022e6c:	58021400 	.word	0x58021400

08022e70 <CMDGetUPSStatus>:
* Out:      Current UPS Status
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetUPSStatus(void)
{
 8022e70:	b580      	push	{r7, lr}
 8022e72:	b082      	sub	sp, #8
 8022e74:	af00      	add	r7, sp, #0
	BYTE bUPSStatus = 0;
 8022e76:	2300      	movs	r3, #0
 8022e78:	71fb      	strb	r3, [r7, #7]

	bUPSStatus = (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_CONN_Pin))? 0x01: 0x00;			// Connection Failure, High active
 8022e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022e7e:	481b      	ldr	r0, [pc, #108]	; (8022eec <CMDGetUPSStatus+0x7c>)
 8022e80:	f008 f802 	bl	802ae88 <HAL_GPIO_ReadPin>
 8022e84:	4603      	mov	r3, r0
 8022e86:	2b00      	cmp	r3, #0
 8022e88:	bf14      	ite	ne
 8022e8a:	2301      	movne	r3, #1
 8022e8c:	2300      	moveq	r3, #0
 8022e8e:	b2db      	uxtb	r3, r3
 8022e90:	71fb      	strb	r3, [r7, #7]
	bUPSStatus |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_PWR_FAIL_Pin))? 0x02: 0x00;	// Power Failure, Low active
 8022e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022e96:	4815      	ldr	r0, [pc, #84]	; (8022eec <CMDGetUPSStatus+0x7c>)
 8022e98:	f007 fff6 	bl	802ae88 <HAL_GPIO_ReadPin>
 8022e9c:	4603      	mov	r3, r0
 8022e9e:	2b00      	cmp	r3, #0
 8022ea0:	d001      	beq.n	8022ea6 <CMDGetUPSStatus+0x36>
 8022ea2:	2302      	movs	r3, #2
 8022ea4:	e000      	b.n	8022ea8 <CMDGetUPSStatus+0x38>
 8022ea6:	2300      	movs	r3, #0
 8022ea8:	b25a      	sxtb	r2, r3
 8022eaa:	79fb      	ldrb	r3, [r7, #7]
 8022eac:	b25b      	sxtb	r3, r3
 8022eae:	4313      	orrs	r3, r2
 8022eb0:	b25b      	sxtb	r3, r3
 8022eb2:	b2db      	uxtb	r3, r3
 8022eb4:	71fb      	strb	r3, [r7, #7]
	bUPSStatus |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_LOW_BAT_Pin))? 0x04: 0x00;		// Low battery, Low active
 8022eb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8022eba:	480c      	ldr	r0, [pc, #48]	; (8022eec <CMDGetUPSStatus+0x7c>)
 8022ebc:	f007 ffe4 	bl	802ae88 <HAL_GPIO_ReadPin>
 8022ec0:	4603      	mov	r3, r0
 8022ec2:	2b00      	cmp	r3, #0
 8022ec4:	d001      	beq.n	8022eca <CMDGetUPSStatus+0x5a>
 8022ec6:	2304      	movs	r3, #4
 8022ec8:	e000      	b.n	8022ecc <CMDGetUPSStatus+0x5c>
 8022eca:	2300      	movs	r3, #0
 8022ecc:	b25a      	sxtb	r2, r3
 8022ece:	79fb      	ldrb	r3, [r7, #7]
 8022ed0:	b25b      	sxtb	r3, r3
 8022ed2:	4313      	orrs	r3, r2
 8022ed4:	b25b      	sxtb	r3, r3
 8022ed6:	b2db      	uxtb	r3, r3
 8022ed8:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&bUPSStatus, sizeof(bUPSStatus));
 8022eda:	1dfb      	adds	r3, r7, #7
 8022edc:	2101      	movs	r1, #1
 8022ede:	4618      	mov	r0, r3
 8022ee0:	f7ff fac4 	bl	802246c <MakeResponse>
}
 8022ee4:	bf00      	nop
 8022ee6:	3708      	adds	r7, #8
 8022ee8:	46bd      	mov	sp, r7
 8022eea:	bd80      	pop	{r7, pc}
 8022eec:	58021400 	.word	0x58021400

08022ef0 <CheckProtocol_UART3>:
* comments: It checks serial data from Host and protocol format of data received.
*           If the protocol format is correct, it returns SUCCESS result.
*******************************************************************************/

int CheckProtocol_UART3(void)
{
 8022ef0:	b580      	push	{r7, lr}
 8022ef2:	af00      	add	r7, sp, #0
	static BYTE bRcvState = STATE_STX_WAIT;
	static BYTE bBCC;
	static BYTE bRcvData;

	while (IUart_RecvByte_check(COM3, &bRcvData))
 8022ef4:	e0d5      	b.n	80230a2 <CheckProtocol_UART3+0x1b2>
	{
		if (bRcvState == STATE_DATA_BCC)
 8022ef6:	4b70      	ldr	r3, [pc, #448]	; (80230b8 <CheckProtocol_UART3+0x1c8>)
 8022ef8:	781b      	ldrb	r3, [r3, #0]
 8022efa:	2b02      	cmp	r3, #2
 8022efc:	d138      	bne.n	8022f70 <CheckProtocol_UART3+0x80>
		{
			bRcvState = STATE_STX_WAIT;
 8022efe:	4b6e      	ldr	r3, [pc, #440]	; (80230b8 <CheckProtocol_UART3+0x1c8>)
 8022f00:	2200      	movs	r2, #0
 8022f02:	701a      	strb	r2, [r3, #0]

			if (bBCC == bRcvData)
 8022f04:	4b6d      	ldr	r3, [pc, #436]	; (80230bc <CheckProtocol_UART3+0x1cc>)
 8022f06:	781a      	ldrb	r2, [r3, #0]
 8022f08:	4b6d      	ldr	r3, [pc, #436]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8022f0a:	781b      	ldrb	r3, [r3, #0]
 8022f0c:	429a      	cmp	r2, r3
 8022f0e:	d119      	bne.n	8022f44 <CheckProtocol_UART3+0x54>
			{
				if (GCUCommand.d.bDataLen != (BYTE)(gnFrameLen - FRAME_HEADER_LEN))
 8022f10:	4b6c      	ldr	r3, [pc, #432]	; (80230c4 <CheckProtocol_UART3+0x1d4>)
 8022f12:	789a      	ldrb	r2, [r3, #2]
 8022f14:	4b6c      	ldr	r3, [pc, #432]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8022f16:	681b      	ldr	r3, [r3, #0]
 8022f18:	b2db      	uxtb	r3, r3
 8022f1a:	3b03      	subs	r3, #3
 8022f1c:	b2db      	uxtb	r3, r3
 8022f1e:	429a      	cmp	r2, r3
 8022f20:	d00e      	beq.n	8022f40 <CheckProtocol_UART3+0x50>
				{
					printf("LENGTH ERR: %d - %d \n", GCUCommand.d.bDataLen, (gnFrameLen - FRAME_HEADER_LEN));
 8022f22:	4b68      	ldr	r3, [pc, #416]	; (80230c4 <CheckProtocol_UART3+0x1d4>)
 8022f24:	789b      	ldrb	r3, [r3, #2]
 8022f26:	4619      	mov	r1, r3
 8022f28:	4b67      	ldr	r3, [pc, #412]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8022f2a:	681b      	ldr	r3, [r3, #0]
 8022f2c:	3b03      	subs	r3, #3
 8022f2e:	461a      	mov	r2, r3
 8022f30:	4866      	ldr	r0, [pc, #408]	; (80230cc <CheckProtocol_UART3+0x1dc>)
 8022f32:	f006 fa5b 	bl	80293ec <printf_>
					gnFrameLen = 0;
 8022f36:	4b64      	ldr	r3, [pc, #400]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8022f38:	2200      	movs	r2, #0
 8022f3a:	601a      	str	r2, [r3, #0]
					return ERR_WRONG_CMD_LEN;
 8022f3c:	230a      	movs	r3, #10
 8022f3e:	e0b9      	b.n	80230b4 <CheckProtocol_UART3+0x1c4>
				}
				else
					return SUCCESS;
 8022f40:	2300      	movs	r3, #0
 8022f42:	e0b7      	b.n	80230b4 <CheckProtocol_UART3+0x1c4>
			}
			else
			{
				printf("len: %d, BCC: %d, rcv: %d \n", gnFrameLen, bBCC, bRcvData);
 8022f44:	4b60      	ldr	r3, [pc, #384]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8022f46:	6819      	ldr	r1, [r3, #0]
 8022f48:	4b5c      	ldr	r3, [pc, #368]	; (80230bc <CheckProtocol_UART3+0x1cc>)
 8022f4a:	781b      	ldrb	r3, [r3, #0]
 8022f4c:	461a      	mov	r2, r3
 8022f4e:	4b5c      	ldr	r3, [pc, #368]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8022f50:	781b      	ldrb	r3, [r3, #0]
 8022f52:	485f      	ldr	r0, [pc, #380]	; (80230d0 <CheckProtocol_UART3+0x1e0>)
 8022f54:	f006 fa4a 	bl	80293ec <printf_>
				Print2Hex("", GCUCommand.Buff, gnFrameLen);
 8022f58:	4b5b      	ldr	r3, [pc, #364]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8022f5a:	681b      	ldr	r3, [r3, #0]
 8022f5c:	461a      	mov	r2, r3
 8022f5e:	4959      	ldr	r1, [pc, #356]	; (80230c4 <CheckProtocol_UART3+0x1d4>)
 8022f60:	485c      	ldr	r0, [pc, #368]	; (80230d4 <CheckProtocol_UART3+0x1e4>)
 8022f62:	f00d fa59 	bl	8030418 <Print2Hex>
				gnFrameLen = 0;
 8022f66:	4b58      	ldr	r3, [pc, #352]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8022f68:	2200      	movs	r2, #0
 8022f6a:	601a      	str	r2, [r3, #0]
				return ERR_BCC;
 8022f6c:	2305      	movs	r3, #5
 8022f6e:	e0a1      	b.n	80230b4 <CheckProtocol_UART3+0x1c4>
			}
		}
		else
		{
			switch (bRcvData)
 8022f70:	4b53      	ldr	r3, [pc, #332]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8022f72:	781b      	ldrb	r3, [r3, #0]
 8022f74:	2b10      	cmp	r3, #16
 8022f76:	d01d      	beq.n	8022fb4 <CheckProtocol_UART3+0xc4>
 8022f78:	2b10      	cmp	r3, #16
 8022f7a:	dc2b      	bgt.n	8022fd4 <CheckProtocol_UART3+0xe4>
 8022f7c:	2b02      	cmp	r3, #2
 8022f7e:	d002      	beq.n	8022f86 <CheckProtocol_UART3+0x96>
 8022f80:	2b03      	cmp	r3, #3
 8022f82:	d00b      	beq.n	8022f9c <CheckProtocol_UART3+0xac>
 8022f84:	e026      	b.n	8022fd4 <CheckProtocol_UART3+0xe4>
			{
			case STX:
				bRcvState = STATE_DATA_RCV;
 8022f86:	4b4c      	ldr	r3, [pc, #304]	; (80230b8 <CheckProtocol_UART3+0x1c8>)
 8022f88:	2201      	movs	r2, #1
 8022f8a:	701a      	strb	r2, [r3, #0]
				bBCC = bRcvData;
 8022f8c:	4b4c      	ldr	r3, [pc, #304]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8022f8e:	781a      	ldrb	r2, [r3, #0]
 8022f90:	4b4a      	ldr	r3, [pc, #296]	; (80230bc <CheckProtocol_UART3+0x1cc>)
 8022f92:	701a      	strb	r2, [r3, #0]
				gnFrameLen = 0;
 8022f94:	4b4c      	ldr	r3, [pc, #304]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8022f96:	2200      	movs	r2, #0
 8022f98:	601a      	str	r2, [r3, #0]
				break;
 8022f9a:	e073      	b.n	8023084 <CheckProtocol_UART3+0x194>
			case ETX:
				bRcvState = STATE_DATA_BCC;
 8022f9c:	4b46      	ldr	r3, [pc, #280]	; (80230b8 <CheckProtocol_UART3+0x1c8>)
 8022f9e:	2202      	movs	r2, #2
 8022fa0:	701a      	strb	r2, [r3, #0]
				bBCC ^= bRcvData;
 8022fa2:	4b46      	ldr	r3, [pc, #280]	; (80230bc <CheckProtocol_UART3+0x1cc>)
 8022fa4:	781a      	ldrb	r2, [r3, #0]
 8022fa6:	4b46      	ldr	r3, [pc, #280]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8022fa8:	781b      	ldrb	r3, [r3, #0]
 8022faa:	4053      	eors	r3, r2
 8022fac:	b2da      	uxtb	r2, r3
 8022fae:	4b43      	ldr	r3, [pc, #268]	; (80230bc <CheckProtocol_UART3+0x1cc>)
 8022fb0:	701a      	strb	r2, [r3, #0]
				break;
 8022fb2:	e067      	b.n	8023084 <CheckProtocol_UART3+0x194>
			case DLE:
				if (bRcvState == STATE_DATA_RCV)
 8022fb4:	4b40      	ldr	r3, [pc, #256]	; (80230b8 <CheckProtocol_UART3+0x1c8>)
 8022fb6:	781b      	ldrb	r3, [r3, #0]
 8022fb8:	2b01      	cmp	r3, #1
 8022fba:	d160      	bne.n	802307e <CheckProtocol_UART3+0x18e>
				{
					bRcvState = STATE_DATA_DLE;
 8022fbc:	4b3e      	ldr	r3, [pc, #248]	; (80230b8 <CheckProtocol_UART3+0x1c8>)
 8022fbe:	2203      	movs	r2, #3
 8022fc0:	701a      	strb	r2, [r3, #0]
					bBCC ^= bRcvData;
 8022fc2:	4b3e      	ldr	r3, [pc, #248]	; (80230bc <CheckProtocol_UART3+0x1cc>)
 8022fc4:	781a      	ldrb	r2, [r3, #0]
 8022fc6:	4b3e      	ldr	r3, [pc, #248]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8022fc8:	781b      	ldrb	r3, [r3, #0]
 8022fca:	4053      	eors	r3, r2
 8022fcc:	b2da      	uxtb	r2, r3
 8022fce:	4b3b      	ldr	r3, [pc, #236]	; (80230bc <CheckProtocol_UART3+0x1cc>)
 8022fd0:	701a      	strb	r2, [r3, #0]
				}
				break;
 8022fd2:	e054      	b.n	802307e <CheckProtocol_UART3+0x18e>
			default:
				if (bRcvState == STATE_DATA_RCV)
 8022fd4:	4b38      	ldr	r3, [pc, #224]	; (80230b8 <CheckProtocol_UART3+0x1c8>)
 8022fd6:	781b      	ldrb	r3, [r3, #0]
 8022fd8:	2b01      	cmp	r3, #1
 8022fda:	d111      	bne.n	8023000 <CheckProtocol_UART3+0x110>
				{
					GCUCommand.Buff[gnFrameLen++] = bRcvData;
 8022fdc:	4b3a      	ldr	r3, [pc, #232]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8022fde:	681b      	ldr	r3, [r3, #0]
 8022fe0:	1c5a      	adds	r2, r3, #1
 8022fe2:	4939      	ldr	r1, [pc, #228]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8022fe4:	600a      	str	r2, [r1, #0]
 8022fe6:	4a36      	ldr	r2, [pc, #216]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8022fe8:	7811      	ldrb	r1, [r2, #0]
 8022fea:	4a36      	ldr	r2, [pc, #216]	; (80230c4 <CheckProtocol_UART3+0x1d4>)
 8022fec:	54d1      	strb	r1, [r2, r3]
					bBCC ^= bRcvData;
 8022fee:	4b33      	ldr	r3, [pc, #204]	; (80230bc <CheckProtocol_UART3+0x1cc>)
 8022ff0:	781a      	ldrb	r2, [r3, #0]
 8022ff2:	4b33      	ldr	r3, [pc, #204]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8022ff4:	781b      	ldrb	r3, [r3, #0]
 8022ff6:	4053      	eors	r3, r2
 8022ff8:	b2da      	uxtb	r2, r3
 8022ffa:	4b30      	ldr	r3, [pc, #192]	; (80230bc <CheckProtocol_UART3+0x1cc>)
 8022ffc:	701a      	strb	r2, [r3, #0]
					if (bRcvData == ACK)
						return ACK_RECEIVED;
					else if (bRcvData == NAK)
						return NAK_RECEIVED;
				}
				break;
 8022ffe:	e040      	b.n	8023082 <CheckProtocol_UART3+0x192>
				else if (bRcvState == STATE_DATA_DLE)
 8023000:	4b2d      	ldr	r3, [pc, #180]	; (80230b8 <CheckProtocol_UART3+0x1c8>)
 8023002:	781b      	ldrb	r3, [r3, #0]
 8023004:	2b03      	cmp	r3, #3
 8023006:	d12e      	bne.n	8023066 <CheckProtocol_UART3+0x176>
					if ((bRcvData == DLE_STX) || (bRcvData == DLE_ETX) || (bRcvData == DLE_DLE))
 8023008:	4b2d      	ldr	r3, [pc, #180]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 802300a:	781b      	ldrb	r3, [r3, #0]
 802300c:	2b42      	cmp	r3, #66	; 0x42
 802300e:	d007      	beq.n	8023020 <CheckProtocol_UART3+0x130>
 8023010:	4b2b      	ldr	r3, [pc, #172]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8023012:	781b      	ldrb	r3, [r3, #0]
 8023014:	2b43      	cmp	r3, #67	; 0x43
 8023016:	d003      	beq.n	8023020 <CheckProtocol_UART3+0x130>
 8023018:	4b29      	ldr	r3, [pc, #164]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 802301a:	781b      	ldrb	r3, [r3, #0]
 802301c:	2b50      	cmp	r3, #80	; 0x50
 802301e:	d117      	bne.n	8023050 <CheckProtocol_UART3+0x160>
						bRcvState = STATE_DATA_RCV;
 8023020:	4b25      	ldr	r3, [pc, #148]	; (80230b8 <CheckProtocol_UART3+0x1c8>)
 8023022:	2201      	movs	r2, #1
 8023024:	701a      	strb	r2, [r3, #0]
						GCUCommand.Buff[gnFrameLen++] = (bRcvData ^ DLE_OP);
 8023026:	4b26      	ldr	r3, [pc, #152]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8023028:	781a      	ldrb	r2, [r3, #0]
 802302a:	4b27      	ldr	r3, [pc, #156]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 802302c:	681b      	ldr	r3, [r3, #0]
 802302e:	1c59      	adds	r1, r3, #1
 8023030:	4825      	ldr	r0, [pc, #148]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8023032:	6001      	str	r1, [r0, #0]
 8023034:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8023038:	b2d1      	uxtb	r1, r2
 802303a:	4a22      	ldr	r2, [pc, #136]	; (80230c4 <CheckProtocol_UART3+0x1d4>)
 802303c:	54d1      	strb	r1, [r2, r3]
						bBCC ^= bRcvData;
 802303e:	4b1f      	ldr	r3, [pc, #124]	; (80230bc <CheckProtocol_UART3+0x1cc>)
 8023040:	781a      	ldrb	r2, [r3, #0]
 8023042:	4b1f      	ldr	r3, [pc, #124]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8023044:	781b      	ldrb	r3, [r3, #0]
 8023046:	4053      	eors	r3, r2
 8023048:	b2da      	uxtb	r2, r3
 802304a:	4b1c      	ldr	r3, [pc, #112]	; (80230bc <CheckProtocol_UART3+0x1cc>)
 802304c:	701a      	strb	r2, [r3, #0]
				break;
 802304e:	e018      	b.n	8023082 <CheckProtocol_UART3+0x192>
						bRcvState = STATE_STX_WAIT;
 8023050:	4b19      	ldr	r3, [pc, #100]	; (80230b8 <CheckProtocol_UART3+0x1c8>)
 8023052:	2200      	movs	r2, #0
 8023054:	701a      	strb	r2, [r3, #0]
						gnFrameLen = 0;
 8023056:	4b1c      	ldr	r3, [pc, #112]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8023058:	2200      	movs	r2, #0
 802305a:	601a      	str	r2, [r3, #0]
						printf("ERR_DLE_PROCESS \n");
 802305c:	481e      	ldr	r0, [pc, #120]	; (80230d8 <CheckProtocol_UART3+0x1e8>)
 802305e:	f006 f9c5 	bl	80293ec <printf_>
						return ERR_DLE_PROCESS;
 8023062:	230d      	movs	r3, #13
 8023064:	e026      	b.n	80230b4 <CheckProtocol_UART3+0x1c4>
					if (bRcvData == ACK)
 8023066:	4b16      	ldr	r3, [pc, #88]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8023068:	781b      	ldrb	r3, [r3, #0]
 802306a:	2b06      	cmp	r3, #6
 802306c:	d101      	bne.n	8023072 <CheckProtocol_UART3+0x182>
						return ACK_RECEIVED;
 802306e:	2306      	movs	r3, #6
 8023070:	e020      	b.n	80230b4 <CheckProtocol_UART3+0x1c4>
					else if (bRcvData == NAK)
 8023072:	4b13      	ldr	r3, [pc, #76]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 8023074:	781b      	ldrb	r3, [r3, #0]
 8023076:	2b15      	cmp	r3, #21
 8023078:	d103      	bne.n	8023082 <CheckProtocol_UART3+0x192>
						return NAK_RECEIVED;
 802307a:	2307      	movs	r3, #7
 802307c:	e01a      	b.n	80230b4 <CheckProtocol_UART3+0x1c4>
				break;
 802307e:	bf00      	nop
 8023080:	e000      	b.n	8023084 <CheckProtocol_UART3+0x194>
				break;
 8023082:	bf00      	nop
			}
		}

		if (gnFrameLen >= FRAME_LEN_RET)
 8023084:	4b10      	ldr	r3, [pc, #64]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8023086:	681b      	ldr	r3, [r3, #0]
 8023088:	2b7f      	cmp	r3, #127	; 0x7f
 802308a:	dd0a      	ble.n	80230a2 <CheckProtocol_UART3+0x1b2>
		{
			bRcvState = STATE_STX_WAIT;
 802308c:	4b0a      	ldr	r3, [pc, #40]	; (80230b8 <CheckProtocol_UART3+0x1c8>)
 802308e:	2200      	movs	r2, #0
 8023090:	701a      	strb	r2, [r3, #0]
			gnFrameLen = 0;
 8023092:	4b0d      	ldr	r3, [pc, #52]	; (80230c8 <CheckProtocol_UART3+0x1d8>)
 8023094:	2200      	movs	r2, #0
 8023096:	601a      	str	r2, [r3, #0]
			printf("ERR_FRAME_LENGTH \n");
 8023098:	4810      	ldr	r0, [pc, #64]	; (80230dc <CheckProtocol_UART3+0x1ec>)
 802309a:	f006 f9a7 	bl	80293ec <printf_>
			return ERR_FRAME_LENGTH;
 802309e:	230c      	movs	r3, #12
 80230a0:	e008      	b.n	80230b4 <CheckProtocol_UART3+0x1c4>
	while (IUart_RecvByte_check(COM3, &bRcvData))
 80230a2:	4907      	ldr	r1, [pc, #28]	; (80230c0 <CheckProtocol_UART3+0x1d0>)
 80230a4:	2002      	movs	r0, #2
 80230a6:	f002 fe7f 	bl	8025da8 <IUart_RecvByte_check>
 80230aa:	4603      	mov	r3, r0
 80230ac:	2b00      	cmp	r3, #0
 80230ae:	f47f af22 	bne.w	8022ef6 <CheckProtocol_UART3+0x6>
		}
	}

	return ERR_NO_DATA;
 80230b2:	23ff      	movs	r3, #255	; 0xff
}
 80230b4:	4618      	mov	r0, r3
 80230b6:	bd80      	pop	{r7, pc}
 80230b8:	240003ef 	.word	0x240003ef
 80230bc:	240003f0 	.word	0x240003f0
 80230c0:	240003f1 	.word	0x240003f1
 80230c4:	24000268 	.word	0x24000268
 80230c8:	240002e8 	.word	0x240002e8
 80230cc:	08032044 	.word	0x08032044
 80230d0:	0803205c 	.word	0x0803205c
 80230d4:	08032078 	.word	0x08032078
 80230d8:	0803207c 	.word	0x0803207c
 80230dc:	08032090 	.word	0x08032090

080230e0 <ProcessCommand>:
*			- ERR_ILLEGAL_CMD  : command code is not defined
* comments: It checks serial data from Host and protocol format of data received.
*           If the protocol format is correct, it returns SUCCESS result.
*******************************************************************************/
int ProcessCommand(void)
{
 80230e0:	b580      	push	{r7, lr}
 80230e2:	af00      	add	r7, sp, #0
	if (GCUCommand.d.bMainSeq == gbLastMainSeq)	// Same main sequence
 80230e4:	4baa      	ldr	r3, [pc, #680]	; (8023390 <ProcessCommand+0x2b0>)
 80230e6:	781a      	ldrb	r2, [r3, #0]
 80230e8:	4baa      	ldr	r3, [pc, #680]	; (8023394 <ProcessCommand+0x2b4>)
 80230ea:	781b      	ldrb	r3, [r3, #0]
 80230ec:	429a      	cmp	r2, r3
 80230ee:	d12a      	bne.n	8023146 <ProcessCommand+0x66>
	{
		if (GCUCommand.d.bCmdCode == GCUResponse.d.bCmdCode)	// command code is same with that of the last response
 80230f0:	4ba7      	ldr	r3, [pc, #668]	; (8023390 <ProcessCommand+0x2b0>)
 80230f2:	78da      	ldrb	r2, [r3, #3]
 80230f4:	4ba8      	ldr	r3, [pc, #672]	; (8023398 <ProcessCommand+0x2b8>)
 80230f6:	78db      	ldrb	r3, [r3, #3]
 80230f8:	429a      	cmp	r2, r3
 80230fa:	d101      	bne.n	8023100 <ProcessCommand+0x20>
			return ERR_OLD_SEQUENCE;
 80230fc:	2308      	movs	r3, #8
 80230fe:	e145      	b.n	802338c <ProcessCommand+0x2ac>
		else if (GCUCommand.d.bCmdCode == gbLastHostCMD)		// command code is same with last host command code
 8023100:	4ba3      	ldr	r3, [pc, #652]	; (8023390 <ProcessCommand+0x2b0>)
 8023102:	78da      	ldrb	r2, [r3, #3]
 8023104:	4ba5      	ldr	r3, [pc, #660]	; (802339c <ProcessCommand+0x2bc>)
 8023106:	781b      	ldrb	r3, [r3, #0]
 8023108:	429a      	cmp	r2, r3
 802310a:	d11c      	bne.n	8023146 <ProcessCommand+0x66>
		{
			if (!IsCommandNeedResponse(GCUCommand.d.bCmdCode))
 802310c:	4ba0      	ldr	r3, [pc, #640]	; (8023390 <ProcessCommand+0x2b0>)
 802310e:	78db      	ldrb	r3, [r3, #3]
 8023110:	4618      	mov	r0, r3
 8023112:	f7ff f983 	bl	802241c <IsCommandNeedResponse>
 8023116:	4603      	mov	r3, r0
 8023118:	f083 0301 	eor.w	r3, r3, #1
 802311c:	b2db      	uxtb	r3, r3
 802311e:	2b00      	cmp	r3, #0
 8023120:	d001      	beq.n	8023126 <ProcessCommand+0x46>
			{
				return ERR_OLD_SEQ_NO_RESPONSE;
 8023122:	2309      	movs	r3, #9
 8023124:	e132      	b.n	802338c <ProcessCommand+0x2ac>
			}
			else if (GCUCommand.d.bCmdCode == LastHostCMDResponse.d.bCmdCode)
 8023126:	4b9a      	ldr	r3, [pc, #616]	; (8023390 <ProcessCommand+0x2b0>)
 8023128:	78da      	ldrb	r2, [r3, #3]
 802312a:	4b9d      	ldr	r3, [pc, #628]	; (80233a0 <ProcessCommand+0x2c0>)
 802312c:	78db      	ldrb	r3, [r3, #3]
 802312e:	429a      	cmp	r2, r3
 8023130:	d109      	bne.n	8023146 <ProcessCommand+0x66>
			{// command code is same with that of the stored response for the last host command.
				memcpy(&GCUResponse, &LastHostCMDResponse, (LastHostCMDResponse.d.bDataLen+FRAME_HEADER_LEN));
 8023132:	4b9b      	ldr	r3, [pc, #620]	; (80233a0 <ProcessCommand+0x2c0>)
 8023134:	789b      	ldrb	r3, [r3, #2]
 8023136:	3303      	adds	r3, #3
 8023138:	461a      	mov	r2, r3
 802313a:	4999      	ldr	r1, [pc, #612]	; (80233a0 <ProcessCommand+0x2c0>)
 802313c:	4896      	ldr	r0, [pc, #600]	; (8023398 <ProcessCommand+0x2b8>)
 802313e:	f00d fa2b 	bl	8030598 <memcpy>
				return ERR_OLD_SEQUENCE;
 8023142:	2308      	movs	r3, #8
 8023144:	e122      	b.n	802338c <ProcessCommand+0x2ac>
			}
		}
		// except above case, process the command from Host 
	}
	
	SendACK();
 8023146:	f7ff f95b 	bl	8022400 <SendACK>

	gbLastHostCMD = GCUCommand.d.bCmdCode;
 802314a:	4b91      	ldr	r3, [pc, #580]	; (8023390 <ProcessCommand+0x2b0>)
 802314c:	78da      	ldrb	r2, [r3, #3]
 802314e:	4b93      	ldr	r3, [pc, #588]	; (802339c <ProcessCommand+0x2bc>)
 8023150:	701a      	strb	r2, [r3, #0]

	switch (GCUCommand.d.bCmdCode)	// command
 8023152:	4b8f      	ldr	r3, [pc, #572]	; (8023390 <ProcessCommand+0x2b0>)
 8023154:	78db      	ldrb	r3, [r3, #3]
 8023156:	3b30      	subs	r3, #48	; 0x30
 8023158:	2b65      	cmp	r3, #101	; 0x65
 802315a:	f200 8114 	bhi.w	8023386 <ProcessCommand+0x2a6>
 802315e:	a201      	add	r2, pc, #4	; (adr r2, 8023164 <ProcessCommand+0x84>)
 8023160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023164:	080232fd 	.word	0x080232fd
 8023168:	08023303 	.word	0x08023303
 802316c:	08023309 	.word	0x08023309
 8023170:	0802330f 	.word	0x0802330f
 8023174:	08023315 	.word	0x08023315
 8023178:	0802331b 	.word	0x0802331b
 802317c:	08023387 	.word	0x08023387
 8023180:	08023387 	.word	0x08023387
 8023184:	08023321 	.word	0x08023321
 8023188:	08023387 	.word	0x08023387
 802318c:	08023387 	.word	0x08023387
 8023190:	08023387 	.word	0x08023387
 8023194:	08023387 	.word	0x08023387
 8023198:	08023387 	.word	0x08023387
 802319c:	08023387 	.word	0x08023387
 80231a0:	08023387 	.word	0x08023387
 80231a4:	08023327 	.word	0x08023327
 80231a8:	0802332d 	.word	0x0802332d
 80231ac:	08023333 	.word	0x08023333
 80231b0:	08023387 	.word	0x08023387
 80231b4:	08023387 	.word	0x08023387
 80231b8:	08023387 	.word	0x08023387
 80231bc:	08023387 	.word	0x08023387
 80231c0:	08023387 	.word	0x08023387
 80231c4:	08023339 	.word	0x08023339
 80231c8:	08023387 	.word	0x08023387
 80231cc:	08023387 	.word	0x08023387
 80231d0:	08023387 	.word	0x08023387
 80231d4:	08023387 	.word	0x08023387
 80231d8:	08023387 	.word	0x08023387
 80231dc:	08023387 	.word	0x08023387
 80231e0:	08023387 	.word	0x08023387
 80231e4:	08023387 	.word	0x08023387
 80231e8:	08023387 	.word	0x08023387
 80231ec:	08023387 	.word	0x08023387
 80231f0:	08023387 	.word	0x08023387
 80231f4:	08023387 	.word	0x08023387
 80231f8:	08023387 	.word	0x08023387
 80231fc:	08023387 	.word	0x08023387
 8023200:	08023387 	.word	0x08023387
 8023204:	08023387 	.word	0x08023387
 8023208:	08023387 	.word	0x08023387
 802320c:	08023387 	.word	0x08023387
 8023210:	08023387 	.word	0x08023387
 8023214:	08023387 	.word	0x08023387
 8023218:	08023387 	.word	0x08023387
 802321c:	08023387 	.word	0x08023387
 8023220:	08023387 	.word	0x08023387
 8023224:	0802333f 	.word	0x0802333f
 8023228:	08023345 	.word	0x08023345
 802322c:	0802334b 	.word	0x0802334b
 8023230:	08023351 	.word	0x08023351
 8023234:	08023357 	.word	0x08023357
 8023238:	0802335d 	.word	0x0802335d
 802323c:	08023387 	.word	0x08023387
 8023240:	08023387 	.word	0x08023387
 8023244:	08023387 	.word	0x08023387
 8023248:	08023387 	.word	0x08023387
 802324c:	08023387 	.word	0x08023387
 8023250:	08023387 	.word	0x08023387
 8023254:	08023387 	.word	0x08023387
 8023258:	08023387 	.word	0x08023387
 802325c:	08023387 	.word	0x08023387
 8023260:	08023387 	.word	0x08023387
 8023264:	08023387 	.word	0x08023387
 8023268:	08023387 	.word	0x08023387
 802326c:	08023387 	.word	0x08023387
 8023270:	08023387 	.word	0x08023387
 8023274:	08023387 	.word	0x08023387
 8023278:	08023387 	.word	0x08023387
 802327c:	08023387 	.word	0x08023387
 8023280:	08023387 	.word	0x08023387
 8023284:	08023387 	.word	0x08023387
 8023288:	08023387 	.word	0x08023387
 802328c:	08023387 	.word	0x08023387
 8023290:	08023387 	.word	0x08023387
 8023294:	08023387 	.word	0x08023387
 8023298:	08023387 	.word	0x08023387
 802329c:	08023387 	.word	0x08023387
 80232a0:	08023387 	.word	0x08023387
 80232a4:	08023387 	.word	0x08023387
 80232a8:	08023387 	.word	0x08023387
 80232ac:	08023387 	.word	0x08023387
 80232b0:	08023387 	.word	0x08023387
 80232b4:	08023387 	.word	0x08023387
 80232b8:	08023387 	.word	0x08023387
 80232bc:	08023387 	.word	0x08023387
 80232c0:	08023387 	.word	0x08023387
 80232c4:	08023387 	.word	0x08023387
 80232c8:	08023387 	.word	0x08023387
 80232cc:	08023387 	.word	0x08023387
 80232d0:	08023387 	.word	0x08023387
 80232d4:	08023387 	.word	0x08023387
 80232d8:	08023387 	.word	0x08023387
 80232dc:	08023387 	.word	0x08023387
 80232e0:	08023387 	.word	0x08023387
 80232e4:	08023363 	.word	0x08023363
 80232e8:	08023369 	.word	0x08023369
 80232ec:	0802336f 	.word	0x0802336f
 80232f0:	08023375 	.word	0x08023375
 80232f4:	0802337b 	.word	0x0802337b
 80232f8:	08023381 	.word	0x08023381
	{
	case CMD_SET_MODE:			CMDSetGCUOpMode();		break;
 80232fc:	f7ff f944 	bl	8022588 <CMDSetGCUOpMode>
 8023300:	e043      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_GET_MODE:			CMDGetGCUOpMode();		break;
 8023302:	f7ff f94f 	bl	80225a4 <CMDGetGCUOpMode>
 8023306:	e040      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_SET_PARAMETER:		CMDSetGCUParameter();	break;
 8023308:	f7ff f95c 	bl	80225c4 <CMDSetGCUParameter>
 802330c:	e03d      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_GET_PARAMETER:		CMDGetGCUParameter();	break;
 802330e:	f7ff f975 	bl	80225fc <CMDGetGCUParameter>
 8023312:	e03a      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_GET_VERSION:		CMDGetVersion();		break;
 8023314:	f7ff f986 	bl	8022624 <CMDGetVersion>
 8023318:	e037      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_SET_SCADA_OUT:		CMDSetScadaOut();		break;
 802331a:	f7ff f98d 	bl	8022638 <CMDSetScadaOut>
 802331e:	e034      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_SW_RESET:			CMDResetGCU();			break;
 8023320:	f7ff f9a0 	bl	8022664 <CMDResetGCU>
 8023324:	e031      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_AUTHORIZE:			CMDAuthorizePass();		break;
 8023326:	f7ff f9b5 	bl	8022694 <CMDAuthorizePass>
 802332a:	e02e      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_CLEAR_AUTH:		CMDClearAuthorization();break;
 802332c:	f7ff fa0a 	bl	8022744 <CMDClearAuthorization>
 8023330:	e02b      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_GET_STATUS:		CMDGetStatus();			break;
 8023332:	f7ff fa19 	bl	8022768 <CMDGetStatus>
 8023336:	e028      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_GET_SENSOR_SWITCH:	CMDGetSensorSwitch();	break;
 8023338:	f7ff fa26 	bl	8022788 <CMDGetSensorSwitch>
 802333c:	e025      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_CONTROL_ALL:		CMDControlAllLED();		break;
 802333e:	f7ff fa2b 	bl	8022798 <CMDControlAllLED>
 8023342:	e022      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_CONTROL_DOOR:		CMDControlBarrier();	break;
 8023344:	f7ff fa60 	bl	8022808 <CMDControlBarrier>
 8023348:	e01f      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_CONTROL_LAMP:		CMDControlLamp();		break;
 802334a:	f7ff fa7d 	bl	8022848 <CMDControlLamp>
 802334e:	e01c      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_CONTROL_INDICATOR:	CMDControlIndicator();	break;
 8023350:	f7ff fa66 	bl	8022820 <CMDControlIndicator>
 8023354:	e019      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_CONTROL_BUZZER:	CMDControlBuzzer();		break;
 8023356:	f7ff fa8b 	bl	8022870 <CMDControlBuzzer>
 802335a:	e016      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_SAFETY_STOP:		CMDSafetyStop();		break;
 802335c:	f7ff fab0 	bl	80228c0 <CMDSafetyStop>
 8023360:	e013      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_WRITE_REGISTER:	CMDWriteRegister();		break;
 8023362:	f7ff fac5 	bl	80228f0 <CMDWriteRegister>
 8023366:	e010      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_READ_REGISTER:		CMDReadRegister();		break;
 8023368:	f7ff fc96 	bl	8022c98 <CMDReadRegister>
 802336c:	e00d      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_GET_CPLD_VERSION:	CMDGetCPLDVersion();	break;
 802336e:	f7ff fd25 	bl	8022dbc <CMDGetCPLDVersion>
 8023372:	e00a      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_GET_DIP_SWITCH:	CMDGetDipSwitch();		break;
 8023374:	f7ff fd30 	bl	8022dd8 <CMDGetDipSwitch>
 8023378:	e007      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_SET_UPS_COMMAND:	CMDSetUPSCommand();		break;
 802337a:	f7ff fd41 	bl	8022e00 <CMDSetUPSCommand>
 802337e:	e004      	b.n	802338a <ProcessCommand+0x2aa>
	case CMD_GET_UPS_STATUS:	CMDGetUPSStatus();		break;
 8023380:	f7ff fd76 	bl	8022e70 <CMDGetUPSStatus>
 8023384:	e001      	b.n	802338a <ProcessCommand+0x2aa>
	default:
		return ERR_ILLEGAL_CMD;
 8023386:	230b      	movs	r3, #11
 8023388:	e000      	b.n	802338c <ProcessCommand+0x2ac>
	}

	return SUCCESS;
 802338a:	2300      	movs	r3, #0
}
 802338c:	4618      	mov	r0, r3
 802338e:	bd80      	pop	{r7, pc}
 8023390:	24000268 	.word	0x24000268
 8023394:	240003ec 	.word	0x240003ec
 8023398:	240002ec 	.word	0x240002ec
 802339c:	240003ed 	.word	0x240003ed
 80233a0:	2400036c 	.word	0x2400036c

080233a4 <ProcessComm_ECU>:
 * comments: it checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it makes action refer to the command
 *           from Host.
 *******************************************************************************/
void ProcessComm_ECU(void)
{
 80233a4:	b580      	push	{r7, lr}
 80233a6:	b082      	sub	sp, #8
 80233a8:	af00      	add	r7, sp, #0
	int nError = CheckProtocol_UART3();
 80233aa:	f7ff fda1 	bl	8022ef0 <CheckProtocol_UART3>
 80233ae:	6078      	str	r0, [r7, #4]
	if (nError == SUCCESS)
 80233b0:	687b      	ldr	r3, [r7, #4]
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d124      	bne.n	8023400 <ProcessComm_ECU+0x5c>
	{
		nError = ProcessCommand();
 80233b6:	f7ff fe93 	bl	80230e0 <ProcessCommand>
 80233ba:	6078      	str	r0, [r7, #4]
		if (nError == SUCCESS)
 80233bc:	687b      	ldr	r3, [r7, #4]
 80233be:	2b00      	cmp	r3, #0
 80233c0:	d112      	bne.n	80233e8 <ProcessComm_ECU+0x44>
		{
			if (IsCommandNeedResponse(GCUCommand.d.bCmdCode))
 80233c2:	4b1a      	ldr	r3, [pc, #104]	; (802342c <ProcessComm_ECU+0x88>)
 80233c4:	78db      	ldrb	r3, [r3, #3]
 80233c6:	4618      	mov	r0, r3
 80233c8:	f7ff f828 	bl	802241c <IsCommandNeedResponse>
 80233cc:	4603      	mov	r3, r0
 80233ce:	2b00      	cmp	r3, #0
 80233d0:	d027      	beq.n	8023422 <ProcessComm_ECU+0x7e>
			{
				SendResponse();
 80233d2:	f7ff f87f 	bl	80224d4 <SendResponse>
				memcpy(&LastHostCMDResponse, &GCUResponse, (GCUResponse.d.bDataLen + FRAME_HEADER_LEN));
 80233d6:	4b16      	ldr	r3, [pc, #88]	; (8023430 <ProcessComm_ECU+0x8c>)
 80233d8:	789b      	ldrb	r3, [r3, #2]
 80233da:	3303      	adds	r3, #3
 80233dc:	461a      	mov	r2, r3
 80233de:	4914      	ldr	r1, [pc, #80]	; (8023430 <ProcessComm_ECU+0x8c>)
 80233e0:	4814      	ldr	r0, [pc, #80]	; (8023434 <ProcessComm_ECU+0x90>)
 80233e2:	f00d f8d9 	bl	8030598 <memcpy>
		if ((nError == ERR_BCC) || (nError == ERR_WRONG_CMD_LEN) || (nError == ERR_DLE_PROCESS))
			SendNAK();
		else if (nError == NAK_RECEIVED)
			SendResponse();
	}
}
 80233e6:	e01c      	b.n	8023422 <ProcessComm_ECU+0x7e>
		else if (nError == ERR_OLD_SEQUENCE)
 80233e8:	687b      	ldr	r3, [r7, #4]
 80233ea:	2b08      	cmp	r3, #8
 80233ec:	d102      	bne.n	80233f4 <ProcessComm_ECU+0x50>
			SendResponse();
 80233ee:	f7ff f871 	bl	80224d4 <SendResponse>
}
 80233f2:	e016      	b.n	8023422 <ProcessComm_ECU+0x7e>
		else if (nError == ERR_ILLEGAL_CMD)
 80233f4:	687b      	ldr	r3, [r7, #4]
 80233f6:	2b0b      	cmp	r3, #11
 80233f8:	d113      	bne.n	8023422 <ProcessComm_ECU+0x7e>
			SendNAK();
 80233fa:	f7ff f808 	bl	802240e <SendNAK>
}
 80233fe:	e010      	b.n	8023422 <ProcessComm_ECU+0x7e>
		if ((nError == ERR_BCC) || (nError == ERR_WRONG_CMD_LEN) || (nError == ERR_DLE_PROCESS))
 8023400:	687b      	ldr	r3, [r7, #4]
 8023402:	2b05      	cmp	r3, #5
 8023404:	d005      	beq.n	8023412 <ProcessComm_ECU+0x6e>
 8023406:	687b      	ldr	r3, [r7, #4]
 8023408:	2b0a      	cmp	r3, #10
 802340a:	d002      	beq.n	8023412 <ProcessComm_ECU+0x6e>
 802340c:	687b      	ldr	r3, [r7, #4]
 802340e:	2b0d      	cmp	r3, #13
 8023410:	d102      	bne.n	8023418 <ProcessComm_ECU+0x74>
			SendNAK();
 8023412:	f7fe fffc 	bl	802240e <SendNAK>
}
 8023416:	e004      	b.n	8023422 <ProcessComm_ECU+0x7e>
		else if (nError == NAK_RECEIVED)
 8023418:	687b      	ldr	r3, [r7, #4]
 802341a:	2b07      	cmp	r3, #7
 802341c:	d101      	bne.n	8023422 <ProcessComm_ECU+0x7e>
			SendResponse();
 802341e:	f7ff f859 	bl	80224d4 <SendResponse>
}
 8023422:	bf00      	nop
 8023424:	3708      	adds	r7, #8
 8023426:	46bd      	mov	sp, r7
 8023428:	bd80      	pop	{r7, pc}
 802342a:	bf00      	nop
 802342c:	24000268 	.word	0x24000268
 8023430:	240002ec 	.word	0x240002ec
 8023434:	2400036c 	.word	0x2400036c

08023438 <CheckBarrierClosedStatus>:

/*******************************************************************************
 * Passenger Service Functions
 *******************************************************************************/
bool CheckBarrierClosedStatus()
{
 8023438:	b480      	push	{r7}
 802343a:	af00      	add	r7, sp, #0
	if (gbPowerFailFlag == FLG_OFF && gbEmergencyFlag == FLG_OFF && gfFreeMode == FALSE)
 802343c:	4b0b      	ldr	r3, [pc, #44]	; (802346c <CheckBarrierClosedStatus+0x34>)
 802343e:	781b      	ldrb	r3, [r3, #0]
 8023440:	2b00      	cmp	r3, #0
 8023442:	d10c      	bne.n	802345e <CheckBarrierClosedStatus+0x26>
 8023444:	4b0a      	ldr	r3, [pc, #40]	; (8023470 <CheckBarrierClosedStatus+0x38>)
 8023446:	781b      	ldrb	r3, [r3, #0]
 8023448:	2b00      	cmp	r3, #0
 802344a:	d108      	bne.n	802345e <CheckBarrierClosedStatus+0x26>
 802344c:	4b09      	ldr	r3, [pc, #36]	; (8023474 <CheckBarrierClosedStatus+0x3c>)
 802344e:	781b      	ldrb	r3, [r3, #0]
 8023450:	f083 0301 	eor.w	r3, r3, #1
 8023454:	b2db      	uxtb	r3, r3
 8023456:	2b00      	cmp	r3, #0
 8023458:	d001      	beq.n	802345e <CheckBarrierClosedStatus+0x26>
	{
		return TRUE;
 802345a:	2301      	movs	r3, #1
 802345c:	e000      	b.n	8023460 <CheckBarrierClosedStatus+0x28>
	}
	else
	{
		return FALSE;
 802345e:	2300      	movs	r3, #0
	}
}
 8023460:	4618      	mov	r0, r3
 8023462:	46bd      	mov	sp, r7
 8023464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023468:	4770      	bx	lr
 802346a:	bf00      	nop
 802346c:	24000137 	.word	0x24000137
 8023470:	24000139 	.word	0x24000139
 8023474:	2400041b 	.word	0x2400041b

08023478 <CheckZeroAuthCount>:

bool CheckZeroAuthCount()
{
 8023478:	b480      	push	{r7}
 802347a:	af00      	add	r7, sp, #0
	if (gGCUStatus.bAuthCount_EN == 0 && gGCUStatus.bAuthCount_EX == 0)
 802347c:	4b08      	ldr	r3, [pc, #32]	; (80234a0 <CheckZeroAuthCount+0x28>)
 802347e:	791b      	ldrb	r3, [r3, #4]
 8023480:	b2db      	uxtb	r3, r3
 8023482:	2b00      	cmp	r3, #0
 8023484:	d106      	bne.n	8023494 <CheckZeroAuthCount+0x1c>
 8023486:	4b06      	ldr	r3, [pc, #24]	; (80234a0 <CheckZeroAuthCount+0x28>)
 8023488:	795b      	ldrb	r3, [r3, #5]
 802348a:	b2db      	uxtb	r3, r3
 802348c:	2b00      	cmp	r3, #0
 802348e:	d101      	bne.n	8023494 <CheckZeroAuthCount+0x1c>
	{
		return TRUE;
 8023490:	2301      	movs	r3, #1
 8023492:	e000      	b.n	8023496 <CheckZeroAuthCount+0x1e>
	}
	else
	{
		return FALSE;
 8023494:	2300      	movs	r3, #0
	}
}
 8023496:	4618      	mov	r0, r3
 8023498:	46bd      	mov	sp, r7
 802349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802349e:	4770      	bx	lr
 80234a0:	24000490 	.word	0x24000490

080234a4 <UpdateSensorData>:

	return FALSE;
}

void UpdateSensorData()
{
 80234a4:	b480      	push	{r7}
 80234a6:	af00      	add	r7, sp, #0
	psenNewSwing.B.bSen1 = RD_PASSSEN1 & (~psenError.B.bSen1);
 80234a8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80234ac:	781b      	ldrb	r3, [r3, #0]
 80234ae:	b2db      	uxtb	r3, r3
 80234b0:	b25a      	sxtb	r2, r3
 80234b2:	4b0e      	ldr	r3, [pc, #56]	; (80234ec <UpdateSensorData+0x48>)
 80234b4:	781b      	ldrb	r3, [r3, #0]
 80234b6:	b25b      	sxtb	r3, r3
 80234b8:	43db      	mvns	r3, r3
 80234ba:	b25b      	sxtb	r3, r3
 80234bc:	4013      	ands	r3, r2
 80234be:	b25b      	sxtb	r3, r3
 80234c0:	b2da      	uxtb	r2, r3
 80234c2:	4b0b      	ldr	r3, [pc, #44]	; (80234f0 <UpdateSensorData+0x4c>)
 80234c4:	701a      	strb	r2, [r3, #0]
	psenNewSwing.B.bSen2 = RD_PASSSEN2 & (~psenError.B.bSen2);
 80234c6:	4b0b      	ldr	r3, [pc, #44]	; (80234f4 <UpdateSensorData+0x50>)
 80234c8:	781b      	ldrb	r3, [r3, #0]
 80234ca:	b2db      	uxtb	r3, r3
 80234cc:	b25a      	sxtb	r2, r3
 80234ce:	4b07      	ldr	r3, [pc, #28]	; (80234ec <UpdateSensorData+0x48>)
 80234d0:	785b      	ldrb	r3, [r3, #1]
 80234d2:	b25b      	sxtb	r3, r3
 80234d4:	43db      	mvns	r3, r3
 80234d6:	b25b      	sxtb	r3, r3
 80234d8:	4013      	ands	r3, r2
 80234da:	b25b      	sxtb	r3, r3
 80234dc:	b2da      	uxtb	r2, r3
 80234de:	4b04      	ldr	r3, [pc, #16]	; (80234f0 <UpdateSensorData+0x4c>)
 80234e0:	705a      	strb	r2, [r3, #1]
}
 80234e2:	bf00      	nop
 80234e4:	46bd      	mov	sp, r7
 80234e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234ea:	4770      	bx	lr
 80234ec:	2400047c 	.word	0x2400047c
 80234f0:	240003f4 	.word	0x240003f4
 80234f4:	60000100 	.word	0x60000100

080234f8 <StopBarrierForSwing>:

void StopBarrierForSwing(bool isStop)
{
 80234f8:	b580      	push	{r7, lr}
 80234fa:	b082      	sub	sp, #8
 80234fc:	af00      	add	r7, sp, #0
 80234fe:	4603      	mov	r3, r0
 8023500:	71fb      	strb	r3, [r7, #7]
	if (isBarrierStop != isStop)
 8023502:	4b0d      	ldr	r3, [pc, #52]	; (8023538 <StopBarrierForSwing+0x40>)
 8023504:	781b      	ldrb	r3, [r3, #0]
 8023506:	79fa      	ldrb	r2, [r7, #7]
 8023508:	429a      	cmp	r2, r3
 802350a:	d011      	beq.n	8023530 <StopBarrierForSwing+0x38>
	{
	isBarrierStop = isStop;
 802350c:	4a0a      	ldr	r2, [pc, #40]	; (8023538 <StopBarrierForSwing+0x40>)
 802350e:	79fb      	ldrb	r3, [r7, #7]
 8023510:	7013      	strb	r3, [r2, #0]

		if (isBarrierStop == TRUE)
 8023512:	4b09      	ldr	r3, [pc, #36]	; (8023538 <StopBarrierForSwing+0x40>)
 8023514:	781b      	ldrb	r3, [r3, #0]
 8023516:	2b00      	cmp	r3, #0
 8023518:	d003      	beq.n	8023522 <StopBarrierForSwing+0x2a>
		{
			SetTimer(&timerStopHolding);
 802351a:	4808      	ldr	r0, [pc, #32]	; (802353c <StopBarrierForSwing+0x44>)
 802351c:	f00c ffb0 	bl	8030480 <SetTimer>
 8023520:	e002      	b.n	8023528 <StopBarrierForSwing+0x30>
		}
		else
		{
			ResetTimer(&timerStopHolding);
 8023522:	4806      	ldr	r0, [pc, #24]	; (802353c <StopBarrierForSwing+0x44>)
 8023524:	f00c ffc0 	bl	80304a8 <ResetTimer>
		}

	Brr_StopBarrier(isStop);
 8023528:	79fb      	ldrb	r3, [r7, #7]
 802352a:	4618      	mov	r0, r3
 802352c:	f7fd f91e 	bl	802076c <Brr_StopBarrier>
	}
}
 8023530:	bf00      	nop
 8023532:	3708      	adds	r7, #8
 8023534:	46bd      	mov	sp, r7
 8023536:	bd80      	pop	{r7, pc}
 8023538:	24000404 	.word	0x24000404
 802353c:	24000238 	.word	0x24000238

08023540 <InitPassageModeForSwing>:

void InitPassageModeForSwing(void)
{
 8023540:	b580      	push	{r7, lr}
 8023542:	af00      	add	r7, sp, #0
	if (isBarrierStop == TRUE)
 8023544:	4b8d      	ldr	r3, [pc, #564]	; (802377c <InitPassageModeForSwing+0x23c>)
 8023546:	781b      	ldrb	r3, [r3, #0]
 8023548:	2b00      	cmp	r3, #0
 802354a:	d005      	beq.n	8023558 <InitPassageModeForSwing+0x18>
	{
		printf(" [InitPassageMode] Release the barrier stop \n");
 802354c:	488c      	ldr	r0, [pc, #560]	; (8023780 <InitPassageModeForSwing+0x240>)
 802354e:	f005 ff4d 	bl	80293ec <printf_>
		StopBarrierForSwing(FALSE);
 8023552:	2000      	movs	r0, #0
 8023554:	f7ff ffd0 	bl	80234f8 <StopBarrierForSwing>
	}

	if (gCurGCUOpMode.bEmergencyMaint && gfTestMode == FALSE)
 8023558:	4b8a      	ldr	r3, [pc, #552]	; (8023784 <InitPassageModeForSwing+0x244>)
 802355a:	789b      	ldrb	r3, [r3, #2]
 802355c:	2b00      	cmp	r3, #0
 802355e:	d061      	beq.n	8023624 <InitPassageModeForSwing+0xe4>
 8023560:	4b89      	ldr	r3, [pc, #548]	; (8023788 <InitPassageModeForSwing+0x248>)
 8023562:	781b      	ldrb	r3, [r3, #0]
 8023564:	f083 0301 	eor.w	r3, r3, #1
 8023568:	b2db      	uxtb	r3, r3
 802356a:	2b00      	cmp	r3, #0
 802356c:	d05a      	beq.n	8023624 <InitPassageModeForSwing+0xe4>
	{
		ResetTimer(&timerReset);
 802356e:	4887      	ldr	r0, [pc, #540]	; (802378c <InitPassageModeForSwing+0x24c>)
 8023570:	f00c ff9a 	bl	80304a8 <ResetTimer>
		gbEmergencyFlag = FLG_SET;
 8023574:	4b86      	ldr	r3, [pc, #536]	; (8023790 <InitPassageModeForSwing+0x250>)
 8023576:	2201      	movs	r2, #1
 8023578:	701a      	strb	r2, [r3, #0]
		gGCUStatus.bAuthCount_EN = 0;
 802357a:	4b86      	ldr	r3, [pc, #536]	; (8023794 <InitPassageModeForSwing+0x254>)
 802357c:	2200      	movs	r2, #0
 802357e:	711a      	strb	r2, [r3, #4]
		gGCUStatus.bAuthCount_EX = 0;
 8023580:	4b84      	ldr	r3, [pc, #528]	; (8023794 <InitPassageModeForSwing+0x254>)
 8023582:	2200      	movs	r2, #0
 8023584:	715a      	strb	r2, [r3, #5]
		gbAuthDirection = FROM_NONE;
 8023586:	4b84      	ldr	r3, [pc, #528]	; (8023798 <InitPassageModeForSwing+0x258>)
 8023588:	2200      	movs	r2, #0
 802358a:	701a      	strb	r2, [r3, #0]
		gisEntryPassenger = FALSE;
 802358c:	4b83      	ldr	r3, [pc, #524]	; (802379c <InitPassageModeForSwing+0x25c>)
 802358e:	2200      	movs	r2, #0
 8023590:	701a      	strb	r2, [r3, #0]
		gisExitPassenger = FALSE;
 8023592:	4b83      	ldr	r3, [pc, #524]	; (80237a0 <InitPassageModeForSwing+0x260>)
 8023594:	2200      	movs	r2, #0
 8023596:	701a      	strb	r2, [r3, #0]
		gnPassPattern = PASS_PATN_NONE;
 8023598:	4b82      	ldr	r3, [pc, #520]	; (80237a4 <InitPassageModeForSwing+0x264>)
 802359a:	2200      	movs	r2, #0
 802359c:	601a      	str	r2, [r3, #0]
		isPassOver_EN = FALSE;
 802359e:	4b82      	ldr	r3, [pc, #520]	; (80237a8 <InitPassageModeForSwing+0x268>)
 80235a0:	2200      	movs	r2, #0
 80235a2:	701a      	strb	r2, [r3, #0]
		isPassOver_EX = FALSE;
 80235a4:	4b81      	ldr	r3, [pc, #516]	; (80237ac <InitPassageModeForSwing+0x26c>)
 80235a6:	2200      	movs	r2, #0
 80235a8:	701a      	strb	r2, [r3, #0]
		timerAuthorize.fStart = FALSE;
 80235aa:	4b81      	ldr	r3, [pc, #516]	; (80237b0 <InitPassageModeForSwing+0x270>)
 80235ac:	2200      	movs	r2, #0
 80235ae:	701a      	strb	r2, [r3, #0]
		timerPassageClear.fStart = FALSE;
 80235b0:	4b80      	ldr	r3, [pc, #512]	; (80237b4 <InitPassageModeForSwing+0x274>)
 80235b2:	2200      	movs	r2, #0
 80235b4:	701a      	strb	r2, [r3, #0]
		timerSafety.fStart = FALSE;
 80235b6:	4b80      	ldr	r3, [pc, #512]	; (80237b8 <InitPassageModeForSwing+0x278>)
 80235b8:	2200      	movs	r2, #0
 80235ba:	701a      	strb	r2, [r3, #0]

		printf(" [InitPassageMode] bEmergencyMaint: %02X \n", gCurGCUOpMode.bEmergencyMaint);
 80235bc:	4b71      	ldr	r3, [pc, #452]	; (8023784 <InitPassageModeForSwing+0x244>)
 80235be:	789b      	ldrb	r3, [r3, #2]
 80235c0:	4619      	mov	r1, r3
 80235c2:	487e      	ldr	r0, [pc, #504]	; (80237bc <InitPassageModeForSwing+0x27c>)
 80235c4:	f005 ff12 	bl	80293ec <printf_>

		Brr_SetEmergency(TRUE);
 80235c8:	2001      	movs	r0, #1
 80235ca:	f7fd f85b 	bl	8020684 <Brr_SetEmergency>

		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 80235ce:	4b6d      	ldr	r3, [pc, #436]	; (8023784 <InitPassageModeForSwing+0x244>)
 80235d0:	789b      	ldrb	r3, [r3, #2]
 80235d2:	f003 0303 	and.w	r3, r3, #3
 80235d6:	2b00      	cmp	r3, #0
 80235d8:	d007      	beq.n	80235ea <InitPassageModeForSwing+0xaa>
		{
			ControlDirectionLED(DIR_RED, DIR_GREEN);
 80235da:	2101      	movs	r1, #1
 80235dc:	2002      	movs	r0, #2
 80235de:	f7fd ff73 	bl	80214c8 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_SET);
 80235e2:	2001      	movs	r0, #1
 80235e4:	f7fe f854 	bl	8021690 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 80235e8:	e0c4      	b.n	8023774 <InitPassageModeForSwing+0x234>
		}
		else if (gCurGCUOpMode.bEmergencyMaint & MAINTENANCE_MODE)
 80235ea:	4b66      	ldr	r3, [pc, #408]	; (8023784 <InitPassageModeForSwing+0x244>)
 80235ec:	789b      	ldrb	r3, [r3, #2]
 80235ee:	f003 0310 	and.w	r3, r3, #16
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	d007      	beq.n	8023606 <InitPassageModeForSwing+0xc6>
		{
			ControlDirectionLED(DIR_RED, DIR_RED);
 80235f6:	2102      	movs	r1, #2
 80235f8:	2002      	movs	r0, #2
 80235fa:	f7fd ff65 	bl	80214c8 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_OFF);
 80235fe:	2000      	movs	r0, #0
 8023600:	f7fe f846 	bl	8021690 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 8023604:	e0b6      	b.n	8023774 <InitPassageModeForSwing+0x234>
		}
		else if (gCurGCUOpMode.bEmergencyMaint & FREE_MODE)
 8023606:	4b5f      	ldr	r3, [pc, #380]	; (8023784 <InitPassageModeForSwing+0x244>)
 8023608:	789b      	ldrb	r3, [r3, #2]
 802360a:	f003 0320 	and.w	r3, r3, #32
 802360e:	2b00      	cmp	r3, #0
 8023610:	f000 80b0 	beq.w	8023774 <InitPassageModeForSwing+0x234>
		{
			ControlDirectionLED(DIR_GREEN, DIR_GREEN);
 8023614:	2101      	movs	r1, #1
 8023616:	2001      	movs	r0, #1
 8023618:	f7fd ff56 	bl	80214c8 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_OFF);
 802361c:	2000      	movs	r0, #0
 802361e:	f7fe f837 	bl	8021690 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 8023622:	e0a7      	b.n	8023774 <InitPassageModeForSwing+0x234>
		}
	}
	else
	{
		if (FLG_SET == gbEmergencyFlag && gfTestMode == FALSE)
 8023624:	4b5a      	ldr	r3, [pc, #360]	; (8023790 <InitPassageModeForSwing+0x250>)
 8023626:	781b      	ldrb	r3, [r3, #0]
 8023628:	2b01      	cmp	r3, #1
 802362a:	d114      	bne.n	8023656 <InitPassageModeForSwing+0x116>
 802362c:	4b56      	ldr	r3, [pc, #344]	; (8023788 <InitPassageModeForSwing+0x248>)
 802362e:	781b      	ldrb	r3, [r3, #0]
 8023630:	f083 0301 	eor.w	r3, r3, #1
 8023634:	b2db      	uxtb	r3, r3
 8023636:	2b00      	cmp	r3, #0
 8023638:	d00d      	beq.n	8023656 <InitPassageModeForSwing+0x116>
		{
			printf(" [InitPassageMode] Safety Check for mode change!! \n");
 802363a:	4861      	ldr	r0, [pc, #388]	; (80237c0 <InitPassageModeForSwing+0x280>)
 802363c:	f005 fed6 	bl	80293ec <printf_>
			ControlBuzzer(BUZZER_ON, 2);
 8023640:	2102      	movs	r1, #2
 8023642:	2001      	movs	r0, #1
 8023644:	f7fd ff16 	bl	8021474 <ControlBuzzer>
			dwResetTime = 30;
 8023648:	4b5e      	ldr	r3, [pc, #376]	; (80237c4 <InitPassageModeForSwing+0x284>)
 802364a:	221e      	movs	r2, #30
 802364c:	601a      	str	r2, [r3, #0]
			SetTimer(&timerReset);
 802364e:	484f      	ldr	r0, [pc, #316]	; (802378c <InitPassageModeForSwing+0x24c>)
 8023650:	f00c ff16 	bl	8030480 <SetTimer>
 8023654:	e08f      	b.n	8023776 <InitPassageModeForSwing+0x236>
		}
		else
		{
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 8023656:	4b4b      	ldr	r3, [pc, #300]	; (8023784 <InitPassageModeForSwing+0x244>)
 8023658:	781b      	ldrb	r3, [r3, #0]
 802365a:	2b00      	cmp	r3, #0
 802365c:	d007      	beq.n	802366e <InitPassageModeForSwing+0x12e>
				((gCurGCUOpMode.bServiceMode_EN == FREE_SERVICE) && !psenNewSwing.side.entry))
 802365e:	4b49      	ldr	r3, [pc, #292]	; (8023784 <InitPassageModeForSwing+0x244>)
 8023660:	781b      	ldrb	r3, [r3, #0]
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 8023662:	2b02      	cmp	r3, #2
 8023664:	d106      	bne.n	8023674 <InitPassageModeForSwing+0x134>
				((gCurGCUOpMode.bServiceMode_EN == FREE_SERVICE) && !psenNewSwing.side.entry))
 8023666:	4b58      	ldr	r3, [pc, #352]	; (80237c8 <InitPassageModeForSwing+0x288>)
 8023668:	781b      	ldrb	r3, [r3, #0]
 802366a:	2b00      	cmp	r3, #0
 802366c:	d102      	bne.n	8023674 <InitPassageModeForSwing+0x134>
				gGCUStatus.bAuthCount_EN = 0;
 802366e:	4b49      	ldr	r3, [pc, #292]	; (8023794 <InitPassageModeForSwing+0x254>)
 8023670:	2200      	movs	r2, #0
 8023672:	711a      	strb	r2, [r3, #4]

			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 8023674:	4b43      	ldr	r3, [pc, #268]	; (8023784 <InitPassageModeForSwing+0x244>)
 8023676:	785b      	ldrb	r3, [r3, #1]
 8023678:	2b00      	cmp	r3, #0
 802367a:	d007      	beq.n	802368c <InitPassageModeForSwing+0x14c>
				((gCurGCUOpMode.bServiceMode_EX == FREE_SERVICE) && !psenNewSwing.side.exit))
 802367c:	4b41      	ldr	r3, [pc, #260]	; (8023784 <InitPassageModeForSwing+0x244>)
 802367e:	785b      	ldrb	r3, [r3, #1]
			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 8023680:	2b02      	cmp	r3, #2
 8023682:	d106      	bne.n	8023692 <InitPassageModeForSwing+0x152>
				((gCurGCUOpMode.bServiceMode_EX == FREE_SERVICE) && !psenNewSwing.side.exit))
 8023684:	4b50      	ldr	r3, [pc, #320]	; (80237c8 <InitPassageModeForSwing+0x288>)
 8023686:	785b      	ldrb	r3, [r3, #1]
 8023688:	2b00      	cmp	r3, #0
 802368a:	d102      	bne.n	8023692 <InitPassageModeForSwing+0x152>
				gGCUStatus.bAuthCount_EX = 0;
 802368c:	4b41      	ldr	r3, [pc, #260]	; (8023794 <InitPassageModeForSwing+0x254>)
 802368e:	2200      	movs	r2, #0
 8023690:	715a      	strb	r2, [r3, #5]

			if (gGCUStatus.bAuthCount_EN || gGCUStatus.bAuthCount_EX)
 8023692:	4b40      	ldr	r3, [pc, #256]	; (8023794 <InitPassageModeForSwing+0x254>)
 8023694:	791b      	ldrb	r3, [r3, #4]
 8023696:	b2db      	uxtb	r3, r3
 8023698:	2b00      	cmp	r3, #0
 802369a:	d104      	bne.n	80236a6 <InitPassageModeForSwing+0x166>
 802369c:	4b3d      	ldr	r3, [pc, #244]	; (8023794 <InitPassageModeForSwing+0x254>)
 802369e:	795b      	ldrb	r3, [r3, #5]
 80236a0:	b2db      	uxtb	r3, r3
 80236a2:	2b00      	cmp	r3, #0
 80236a4:	d011      	beq.n	80236ca <InitPassageModeForSwing+0x18a>
			{
				if (gGCUStatus.bAuthCount_EN)
 80236a6:	4b3b      	ldr	r3, [pc, #236]	; (8023794 <InitPassageModeForSwing+0x254>)
 80236a8:	791b      	ldrb	r3, [r3, #4]
 80236aa:	b2db      	uxtb	r3, r3
 80236ac:	2b00      	cmp	r3, #0
 80236ae:	d003      	beq.n	80236b8 <InitPassageModeForSwing+0x178>
					ControlBarrier(BARRIER_OPEN_FOR_EN);
 80236b0:	2001      	movs	r0, #1
 80236b2:	f7fd fea7 	bl	8021404 <ControlBarrier>
				if (gGCUStatus.bAuthCount_EN)
 80236b6:	e014      	b.n	80236e2 <InitPassageModeForSwing+0x1a2>
				else if (gGCUStatus.bAuthCount_EX)
 80236b8:	4b36      	ldr	r3, [pc, #216]	; (8023794 <InitPassageModeForSwing+0x254>)
 80236ba:	795b      	ldrb	r3, [r3, #5]
 80236bc:	b2db      	uxtb	r3, r3
 80236be:	2b00      	cmp	r3, #0
 80236c0:	d00f      	beq.n	80236e2 <InitPassageModeForSwing+0x1a2>
					ControlBarrier(BARRIER_OPEN_FOR_EX);
 80236c2:	2002      	movs	r0, #2
 80236c4:	f7fd fe9e 	bl	8021404 <ControlBarrier>
				if (gGCUStatus.bAuthCount_EN)
 80236c8:	e00b      	b.n	80236e2 <InitPassageModeForSwing+0x1a2>
			}
			else
			{
				if (gbPowerFailFlag == FLG_SET)
 80236ca:	4b40      	ldr	r3, [pc, #256]	; (80237cc <InitPassageModeForSwing+0x28c>)
 80236cc:	781b      	ldrb	r3, [r3, #0]
 80236ce:	2b01      	cmp	r3, #1
 80236d0:	d103      	bne.n	80236da <InitPassageModeForSwing+0x19a>
					ControlBarrier(BARRIER_OPEN_FOR_EX);
 80236d2:	2002      	movs	r0, #2
 80236d4:	f7fd fe96 	bl	8021404 <ControlBarrier>
 80236d8:	e004      	b.n	80236e4 <InitPassageModeForSwing+0x1a4>
				else
					ControlBarrier(BARRIER_CLOSE);
 80236da:	2003      	movs	r0, #3
 80236dc:	f7fd fe92 	bl	8021404 <ControlBarrier>
 80236e0:	e000      	b.n	80236e4 <InitPassageModeForSwing+0x1a4>
				if (gGCUStatus.bAuthCount_EN)
 80236e2:	bf00      	nop
			}

			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 80236e4:	4b27      	ldr	r3, [pc, #156]	; (8023784 <InitPassageModeForSwing+0x244>)
 80236e6:	781b      	ldrb	r3, [r3, #0]
 80236e8:	2b00      	cmp	r3, #0
 80236ea:	d008      	beq.n	80236fe <InitPassageModeForSwing+0x1be>
				(gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 80236ec:	4b29      	ldr	r3, [pc, #164]	; (8023794 <InitPassageModeForSwing+0x254>)
 80236ee:	795b      	ldrb	r3, [r3, #5]
 80236f0:	b2db      	uxtb	r3, r3
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 80236f2:	2b00      	cmp	r3, #0
 80236f4:	d007      	beq.n	8023706 <InitPassageModeForSwing+0x1c6>
				(gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 80236f6:	4b23      	ldr	r3, [pc, #140]	; (8023784 <InitPassageModeForSwing+0x244>)
 80236f8:	781b      	ldrb	r3, [r3, #0]
 80236fa:	2b01      	cmp	r3, #1
 80236fc:	d103      	bne.n	8023706 <InitPassageModeForSwing+0x1c6>
				gbLampCMD_EN = DIR_RED;
 80236fe:	4b34      	ldr	r3, [pc, #208]	; (80237d0 <InitPassageModeForSwing+0x290>)
 8023700:	2202      	movs	r2, #2
 8023702:	701a      	strb	r2, [r3, #0]
 8023704:	e002      	b.n	802370c <InitPassageModeForSwing+0x1cc>
			else
				gbLampCMD_EN = DIR_GREEN;
 8023706:	4b32      	ldr	r3, [pc, #200]	; (80237d0 <InitPassageModeForSwing+0x290>)
 8023708:	2201      	movs	r2, #1
 802370a:	701a      	strb	r2, [r3, #0]

			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 802370c:	4b1d      	ldr	r3, [pc, #116]	; (8023784 <InitPassageModeForSwing+0x244>)
 802370e:	785b      	ldrb	r3, [r3, #1]
 8023710:	2b00      	cmp	r3, #0
 8023712:	d008      	beq.n	8023726 <InitPassageModeForSwing+0x1e6>
				(gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 8023714:	4b1f      	ldr	r3, [pc, #124]	; (8023794 <InitPassageModeForSwing+0x254>)
 8023716:	791b      	ldrb	r3, [r3, #4]
 8023718:	b2db      	uxtb	r3, r3
			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 802371a:	2b00      	cmp	r3, #0
 802371c:	d007      	beq.n	802372e <InitPassageModeForSwing+0x1ee>
				(gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 802371e:	4b19      	ldr	r3, [pc, #100]	; (8023784 <InitPassageModeForSwing+0x244>)
 8023720:	785b      	ldrb	r3, [r3, #1]
 8023722:	2b01      	cmp	r3, #1
 8023724:	d103      	bne.n	802372e <InitPassageModeForSwing+0x1ee>
				gbLampCMD_EX = DIR_RED;
 8023726:	4b2b      	ldr	r3, [pc, #172]	; (80237d4 <InitPassageModeForSwing+0x294>)
 8023728:	2202      	movs	r2, #2
 802372a:	701a      	strb	r2, [r3, #0]
 802372c:	e002      	b.n	8023734 <InitPassageModeForSwing+0x1f4>
			else
				gbLampCMD_EX = DIR_GREEN;
 802372e:	4b29      	ldr	r3, [pc, #164]	; (80237d4 <InitPassageModeForSwing+0x294>)
 8023730:	2201      	movs	r2, #1
 8023732:	701a      	strb	r2, [r3, #0]

			ControlBuzzer(BUZZER_OFF, 0);
 8023734:	2100      	movs	r1, #0
 8023736:	2000      	movs	r0, #0
 8023738:	f7fd fe9c 	bl	8021474 <ControlBuzzer>
			ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 802373c:	4b24      	ldr	r3, [pc, #144]	; (80237d0 <InitPassageModeForSwing+0x290>)
 802373e:	781b      	ldrb	r3, [r3, #0]
 8023740:	4a24      	ldr	r2, [pc, #144]	; (80237d4 <InitPassageModeForSwing+0x294>)
 8023742:	7812      	ldrb	r2, [r2, #0]
 8023744:	4611      	mov	r1, r2
 8023746:	4618      	mov	r0, r3
 8023748:	f7fd febe 	bl	80214c8 <ControlDirectionLED>
			ControlIndicator(gbIndicatorCMD_EN, gbIndicatorCMD_EX, 0, FALSE);
 802374c:	4b22      	ldr	r3, [pc, #136]	; (80237d8 <InitPassageModeForSwing+0x298>)
 802374e:	7818      	ldrb	r0, [r3, #0]
 8023750:	4b22      	ldr	r3, [pc, #136]	; (80237dc <InitPassageModeForSwing+0x29c>)
 8023752:	7819      	ldrb	r1, [r3, #0]
 8023754:	2300      	movs	r3, #0
 8023756:	2200      	movs	r2, #0
 8023758:	f7fd ff12 	bl	8021580 <ControlIndicator>

			if (CheckZeroAuthCount())
 802375c:	f7ff fe8c 	bl	8023478 <CheckZeroAuthCount>
 8023760:	4603      	mov	r3, r0
 8023762:	2b00      	cmp	r3, #0
 8023764:	d007      	beq.n	8023776 <InitPassageModeForSwing+0x236>
			{
				printf(" [InitPassageMode] ResetAuthTimer!! \n");
 8023766:	481e      	ldr	r0, [pc, #120]	; (80237e0 <InitPassageModeForSwing+0x2a0>)
 8023768:	f005 fe40 	bl	80293ec <printf_>
				ResetTimer(&timerAuthorize);
 802376c:	4810      	ldr	r0, [pc, #64]	; (80237b0 <InitPassageModeForSwing+0x270>)
 802376e:	f00c fe9b 	bl	80304a8 <ResetTimer>
			}
		}
	}
}
 8023772:	e000      	b.n	8023776 <InitPassageModeForSwing+0x236>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 8023774:	bf00      	nop
}
 8023776:	bf00      	nop
 8023778:	bd80      	pop	{r7, pc}
 802377a:	bf00      	nop
 802377c:	24000404 	.word	0x24000404
 8023780:	080320a4 	.word	0x080320a4
 8023784:	240004b4 	.word	0x240004b4
 8023788:	2400041c 	.word	0x2400041c
 802378c:	24000220 	.word	0x24000220
 8023790:	24000139 	.word	0x24000139
 8023794:	24000490 	.word	0x24000490
 8023798:	2400013a 	.word	0x2400013a
 802379c:	24000419 	.word	0x24000419
 80237a0:	2400041a 	.word	0x2400041a
 80237a4:	24000420 	.word	0x24000420
 80237a8:	24000400 	.word	0x24000400
 80237ac:	24000401 	.word	0x24000401
 80237b0:	24000160 	.word	0x24000160
 80237b4:	2400016c 	.word	0x2400016c
 80237b8:	240001e4 	.word	0x240001e4
 80237bc:	080320d4 	.word	0x080320d4
 80237c0:	08032100 	.word	0x08032100
 80237c4:	24000008 	.word	0x24000008
 80237c8:	240003f4 	.word	0x240003f4
 80237cc:	24000137 	.word	0x24000137
 80237d0:	24000135 	.word	0x24000135
 80237d4:	24000136 	.word	0x24000136
 80237d8:	24000133 	.word	0x24000133
 80237dc:	24000134 	.word	0x24000134
 80237e0:	08032134 	.word	0x08032134

080237e4 <OpenBarrierForSwing>:

void OpenBarrierForSwing(BYTE bDir)
{
 80237e4:	b580      	push	{r7, lr}
 80237e6:	b082      	sub	sp, #8
 80237e8:	af00      	add	r7, sp, #0
 80237ea:	4603      	mov	r3, r0
 80237ec:	71fb      	strb	r3, [r7, #7]
	if (isBarrierStop == TRUE)
 80237ee:	4b1d      	ldr	r3, [pc, #116]	; (8023864 <OpenBarrierForSwing+0x80>)
 80237f0:	781b      	ldrb	r3, [r3, #0]
 80237f2:	2b00      	cmp	r3, #0
 80237f4:	d002      	beq.n	80237fc <OpenBarrierForSwing+0x18>
	{
		StopBarrierForSwing(FALSE);
 80237f6:	2000      	movs	r0, #0
 80237f8:	f7ff fe7e 	bl	80234f8 <StopBarrierForSwing>
	}

	if (gfTestMode == TRUE)
 80237fc:	4b1a      	ldr	r3, [pc, #104]	; (8023868 <OpenBarrierForSwing+0x84>)
 80237fe:	781b      	ldrb	r3, [r3, #0]
 8023800:	2b00      	cmp	r3, #0
 8023802:	d004      	beq.n	802380e <OpenBarrierForSwing+0x2a>
	{
		Brr_OpenBarrier(bDir);
 8023804:	79fb      	ldrb	r3, [r7, #7]
 8023806:	4618      	mov	r0, r3
 8023808:	f7fc ff62 	bl	80206d0 <Brr_OpenBarrier>
 802380c:	e023      	b.n	8023856 <OpenBarrierForSwing+0x72>
	}
	else
	{
		gbAuthDirection = bDir;
 802380e:	4a17      	ldr	r2, [pc, #92]	; (802386c <OpenBarrierForSwing+0x88>)
 8023810:	79fb      	ldrb	r3, [r7, #7]
 8023812:	7013      	strb	r3, [r2, #0]

		if (bDir == BARRIER_OPEN_FOR_EN)
 8023814:	79fb      	ldrb	r3, [r7, #7]
 8023816:	2b01      	cmp	r3, #1
 8023818:	d10d      	bne.n	8023836 <OpenBarrierForSwing+0x52>
		{
			isPassReady_EX = FALSE;
 802381a:	4b15      	ldr	r3, [pc, #84]	; (8023870 <OpenBarrierForSwing+0x8c>)
 802381c:	2200      	movs	r2, #0
 802381e:	701a      	strb	r2, [r3, #0]
			isPassOver_EX = FALSE;
 8023820:	4b14      	ldr	r3, [pc, #80]	; (8023874 <OpenBarrierForSwing+0x90>)
 8023822:	2200      	movs	r2, #0
 8023824:	701a      	strb	r2, [r3, #0]
			if (!psenNewSwing.side.exit)
 8023826:	4b14      	ldr	r3, [pc, #80]	; (8023878 <OpenBarrierForSwing+0x94>)
 8023828:	785b      	ldrb	r3, [r3, #1]
 802382a:	2b00      	cmp	r3, #0
 802382c:	d113      	bne.n	8023856 <OpenBarrierForSwing+0x72>
				Brr_OpenBarrier(BARRIER_OPEN_FOR_EN);
 802382e:	2001      	movs	r0, #1
 8023830:	f7fc ff4e 	bl	80206d0 <Brr_OpenBarrier>
 8023834:	e00f      	b.n	8023856 <OpenBarrierForSwing+0x72>
		}
		else if (bDir == BARRIER_OPEN_FOR_EX)
 8023836:	79fb      	ldrb	r3, [r7, #7]
 8023838:	2b02      	cmp	r3, #2
 802383a:	d10c      	bne.n	8023856 <OpenBarrierForSwing+0x72>
		{
			isPassReady_EN = FALSE;
 802383c:	4b0f      	ldr	r3, [pc, #60]	; (802387c <OpenBarrierForSwing+0x98>)
 802383e:	2200      	movs	r2, #0
 8023840:	701a      	strb	r2, [r3, #0]
			isPassOver_EN = FALSE;
 8023842:	4b0f      	ldr	r3, [pc, #60]	; (8023880 <OpenBarrierForSwing+0x9c>)
 8023844:	2200      	movs	r2, #0
 8023846:	701a      	strb	r2, [r3, #0]
			if (!psenNewSwing.side.entry)
 8023848:	4b0b      	ldr	r3, [pc, #44]	; (8023878 <OpenBarrierForSwing+0x94>)
 802384a:	781b      	ldrb	r3, [r3, #0]
 802384c:	2b00      	cmp	r3, #0
 802384e:	d102      	bne.n	8023856 <OpenBarrierForSwing+0x72>
				Brr_OpenBarrier(BARRIER_OPEN_FOR_EX);
 8023850:	2002      	movs	r0, #2
 8023852:	f7fc ff3d 	bl	80206d0 <Brr_OpenBarrier>
		}
	}

	SetTimer(&timerBarrierCmdWait);
 8023856:	480b      	ldr	r0, [pc, #44]	; (8023884 <OpenBarrierForSwing+0xa0>)
 8023858:	f00c fe12 	bl	8030480 <SetTimer>
}
 802385c:	bf00      	nop
 802385e:	3708      	adds	r7, #8
 8023860:	46bd      	mov	sp, r7
 8023862:	bd80      	pop	{r7, pc}
 8023864:	24000404 	.word	0x24000404
 8023868:	2400041c 	.word	0x2400041c
 802386c:	2400013a 	.word	0x2400013a
 8023870:	240003ff 	.word	0x240003ff
 8023874:	24000401 	.word	0x24000401
 8023878:	240003f4 	.word	0x240003f4
 802387c:	240003fe 	.word	0x240003fe
 8023880:	24000400 	.word	0x24000400
 8023884:	2400025c 	.word	0x2400025c

08023888 <CloseBarrierForSwing>:

void CloseBarrierForSwing(void)
{
 8023888:	b580      	push	{r7, lr}
 802388a:	af00      	add	r7, sp, #0
	if (gGCUStatus.ModuleAlarm.b.nSafetyErr == OFF && (gfTestMode == TRUE || CheckBarrierClosedStatus()))
 802388c:	4b0e      	ldr	r3, [pc, #56]	; (80238c8 <CloseBarrierForSwing+0x40>)
 802388e:	7b1b      	ldrb	r3, [r3, #12]
 8023890:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8023894:	b2db      	uxtb	r3, r3
 8023896:	2b00      	cmp	r3, #0
 8023898:	d114      	bne.n	80238c4 <CloseBarrierForSwing+0x3c>
 802389a:	4b0c      	ldr	r3, [pc, #48]	; (80238cc <CloseBarrierForSwing+0x44>)
 802389c:	781b      	ldrb	r3, [r3, #0]
 802389e:	2b00      	cmp	r3, #0
 80238a0:	d104      	bne.n	80238ac <CloseBarrierForSwing+0x24>
 80238a2:	f7ff fdc9 	bl	8023438 <CheckBarrierClosedStatus>
 80238a6:	4603      	mov	r3, r0
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	d00b      	beq.n	80238c4 <CloseBarrierForSwing+0x3c>
	{
		if (isBarrierStop == TRUE)
 80238ac:	4b08      	ldr	r3, [pc, #32]	; (80238d0 <CloseBarrierForSwing+0x48>)
 80238ae:	781b      	ldrb	r3, [r3, #0]
 80238b0:	2b00      	cmp	r3, #0
 80238b2:	d002      	beq.n	80238ba <CloseBarrierForSwing+0x32>
		{
			StopBarrierForSwing(FALSE);
 80238b4:	2000      	movs	r0, #0
 80238b6:	f7ff fe1f 	bl	80234f8 <StopBarrierForSwing>
		}

		Brr_CloseBarrier();
 80238ba:	f7fc ff39 	bl	8020730 <Brr_CloseBarrier>
		SetTimer(&timerBarrierCmdWait);
 80238be:	4805      	ldr	r0, [pc, #20]	; (80238d4 <CloseBarrierForSwing+0x4c>)
 80238c0:	f00c fdde 	bl	8030480 <SetTimer>
	}
}
 80238c4:	bf00      	nop
 80238c6:	bd80      	pop	{r7, pc}
 80238c8:	24000490 	.word	0x24000490
 80238cc:	2400041c 	.word	0x2400041c
 80238d0:	24000404 	.word	0x24000404
 80238d4:	2400025c 	.word	0x2400025c

080238d8 <CheckBarrierOperation>:

void CheckBarrierOperation(void)
{
 80238d8:	b580      	push	{r7, lr}
 80238da:	af00      	add	r7, sp, #0
	if (timerBarrierCmdWait.fStart)
 80238dc:	4ba2      	ldr	r3, [pc, #648]	; (8023b68 <CheckBarrierOperation+0x290>)
 80238de:	781b      	ldrb	r3, [r3, #0]
 80238e0:	2b00      	cmp	r3, #0
 80238e2:	d010      	beq.n	8023906 <CheckBarrierOperation+0x2e>
	{
		if (IsTimeout(&timerBarrierCmdWait, dwBarrierCmdWaitTime * TICK_COUNT_100MS))
 80238e4:	4ba1      	ldr	r3, [pc, #644]	; (8023b6c <CheckBarrierOperation+0x294>)
 80238e6:	681b      	ldr	r3, [r3, #0]
 80238e8:	2264      	movs	r2, #100	; 0x64
 80238ea:	fb02 f303 	mul.w	r3, r2, r3
 80238ee:	4619      	mov	r1, r3
 80238f0:	489d      	ldr	r0, [pc, #628]	; (8023b68 <CheckBarrierOperation+0x290>)
 80238f2:	f00c fde7 	bl	80304c4 <IsTimeout>
 80238f6:	4603      	mov	r3, r0
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	f000 81b9 	beq.w	8023c70 <CheckBarrierOperation+0x398>
		{
			ResetTimer(&timerBarrierCmdWait);
 80238fe:	489a      	ldr	r0, [pc, #616]	; (8023b68 <CheckBarrierOperation+0x290>)
 8023900:	f00c fdd2 	bl	80304a8 <ResetTimer>
	}
	else
	{
		SetTimer(&timerBarrierCheck);
	}
}
 8023904:	e1b4      	b.n	8023c70 <CheckBarrierOperation+0x398>
	else if (gfTestMode == FALSE && timerBarrierCheck.fStart)
 8023906:	4b9a      	ldr	r3, [pc, #616]	; (8023b70 <CheckBarrierOperation+0x298>)
 8023908:	781b      	ldrb	r3, [r3, #0]
 802390a:	f083 0301 	eor.w	r3, r3, #1
 802390e:	b2db      	uxtb	r3, r3
 8023910:	2b00      	cmp	r3, #0
 8023912:	f000 81a9 	beq.w	8023c68 <CheckBarrierOperation+0x390>
 8023916:	4b97      	ldr	r3, [pc, #604]	; (8023b74 <CheckBarrierOperation+0x29c>)
 8023918:	781b      	ldrb	r3, [r3, #0]
 802391a:	2b00      	cmp	r3, #0
 802391c:	f000 81a4 	beq.w	8023c68 <CheckBarrierOperation+0x390>
		if (IsTimeout(&timerBarrierCheck, dwBarrierCheckTime * TICK_COUNT_100MS))
 8023920:	4b95      	ldr	r3, [pc, #596]	; (8023b78 <CheckBarrierOperation+0x2a0>)
 8023922:	681b      	ldr	r3, [r3, #0]
 8023924:	2264      	movs	r2, #100	; 0x64
 8023926:	fb02 f303 	mul.w	r3, r2, r3
 802392a:	4619      	mov	r1, r3
 802392c:	4891      	ldr	r0, [pc, #580]	; (8023b74 <CheckBarrierOperation+0x29c>)
 802392e:	f00c fdc9 	bl	80304c4 <IsTimeout>
 8023932:	4603      	mov	r3, r0
 8023934:	2b00      	cmp	r3, #0
 8023936:	f000 819b 	beq.w	8023c70 <CheckBarrierOperation+0x398>
			ResetTimer(&timerBarrierCheck);
 802393a:	488e      	ldr	r0, [pc, #568]	; (8023b74 <CheckBarrierOperation+0x29c>)
 802393c:	f00c fdb4 	bl	80304a8 <ResetTimer>
			if (gMainBarrierStatus.param.actStatus == 0 && gSubBarrierStatus.param.actStatus == 0)
 8023940:	4b8e      	ldr	r3, [pc, #568]	; (8023b7c <CheckBarrierOperation+0x2a4>)
 8023942:	791b      	ldrb	r3, [r3, #4]
 8023944:	f003 0308 	and.w	r3, r3, #8
 8023948:	b2db      	uxtb	r3, r3
 802394a:	2b00      	cmp	r3, #0
 802394c:	f040 816e 	bne.w	8023c2c <CheckBarrierOperation+0x354>
 8023950:	4b8b      	ldr	r3, [pc, #556]	; (8023b80 <CheckBarrierOperation+0x2a8>)
 8023952:	791b      	ldrb	r3, [r3, #4]
 8023954:	f003 0308 	and.w	r3, r3, #8
 8023958:	b2db      	uxtb	r3, r3
 802395a:	2b00      	cmp	r3, #0
 802395c:	f040 8166 	bne.w	8023c2c <CheckBarrierOperation+0x354>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023960:	4b88      	ldr	r3, [pc, #544]	; (8023b84 <CheckBarrierOperation+0x2ac>)
 8023962:	781b      	ldrb	r3, [r3, #0]
 8023964:	2b01      	cmp	r3, #1
 8023966:	d007      	beq.n	8023978 <CheckBarrierOperation+0xa0>
 8023968:	4b86      	ldr	r3, [pc, #536]	; (8023b84 <CheckBarrierOperation+0x2ac>)
 802396a:	781b      	ldrb	r3, [r3, #0]
 802396c:	2b02      	cmp	r3, #2
 802396e:	d003      	beq.n	8023978 <CheckBarrierOperation+0xa0>
 8023970:	4b85      	ldr	r3, [pc, #532]	; (8023b88 <CheckBarrierOperation+0x2b0>)
 8023972:	781b      	ldrb	r3, [r3, #0]
 8023974:	2b01      	cmp	r3, #1
 8023976:	d146      	bne.n	8023a06 <CheckBarrierOperation+0x12e>
					if (gMainBarrierStatus.param.posStatus != SDOOR_OPEN || gSubBarrierStatus.param.posStatus != SDOOR_OPEN)
 8023978:	4b80      	ldr	r3, [pc, #512]	; (8023b7c <CheckBarrierOperation+0x2a4>)
 802397a:	791b      	ldrb	r3, [r3, #4]
 802397c:	f003 0307 	and.w	r3, r3, #7
 8023980:	b2db      	uxtb	r3, r3
 8023982:	2b05      	cmp	r3, #5
 8023984:	d106      	bne.n	8023994 <CheckBarrierOperation+0xbc>
 8023986:	4b7e      	ldr	r3, [pc, #504]	; (8023b80 <CheckBarrierOperation+0x2a8>)
 8023988:	791b      	ldrb	r3, [r3, #4]
 802398a:	f003 0307 	and.w	r3, r3, #7
 802398e:	b2db      	uxtb	r3, r3
 8023990:	2b05      	cmp	r3, #5
 8023992:	d00c      	beq.n	80239ae <CheckBarrierOperation+0xd6>
						if (isCounterEnter == FALSE)
 8023994:	4b7d      	ldr	r3, [pc, #500]	; (8023b8c <CheckBarrierOperation+0x2b4>)
 8023996:	781b      	ldrb	r3, [r3, #0]
 8023998:	f083 0301 	eor.w	r3, r3, #1
 802399c:	b2db      	uxtb	r3, r3
 802399e:	2b00      	cmp	r3, #0
 80239a0:	d030      	beq.n	8023a04 <CheckBarrierOperation+0x12c>
							ControlBarrier(gbBarrierCmd);
 80239a2:	4b78      	ldr	r3, [pc, #480]	; (8023b84 <CheckBarrierOperation+0x2ac>)
 80239a4:	781b      	ldrb	r3, [r3, #0]
 80239a6:	4618      	mov	r0, r3
 80239a8:	f7fd fd2c 	bl	8021404 <ControlBarrier>
						if (isCounterEnter == FALSE)
 80239ac:	e02a      	b.n	8023a04 <CheckBarrierOperation+0x12c>
					else if (isSafetyOn4Init == FALSE)
 80239ae:	4b78      	ldr	r3, [pc, #480]	; (8023b90 <CheckBarrierOperation+0x2b8>)
 80239b0:	781b      	ldrb	r3, [r3, #0]
 80239b2:	f083 0301 	eor.w	r3, r3, #1
 80239b6:	b2db      	uxtb	r3, r3
 80239b8:	2b00      	cmp	r3, #0
 80239ba:	f000 8133 	beq.w	8023c24 <CheckBarrierOperation+0x34c>
						nBarrierErrorCnt = 0;
 80239be:	4b75      	ldr	r3, [pc, #468]	; (8023b94 <CheckBarrierOperation+0x2bc>)
 80239c0:	2200      	movs	r2, #0
 80239c2:	601a      	str	r2, [r3, #0]
						gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_NONE;
 80239c4:	4a74      	ldr	r2, [pc, #464]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 80239c6:	7b13      	ldrb	r3, [r2, #12]
 80239c8:	f36f 0301 	bfc	r3, #0, #2
 80239cc:	7313      	strb	r3, [r2, #12]
						gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_NONE;
 80239ce:	4a72      	ldr	r2, [pc, #456]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 80239d0:	7b13      	ldrb	r3, [r2, #12]
 80239d2:	f36f 0383 	bfc	r3, #2, #2
 80239d6:	7313      	strb	r3, [r2, #12]
						gGCUStatus.bBarrierSw = 0x11;
 80239d8:	4b6f      	ldr	r3, [pc, #444]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 80239da:	2211      	movs	r2, #17
 80239dc:	741a      	strb	r2, [r3, #16]
						if (CheckBarrierClosedStatus() && CheckZeroAuthCount())
 80239de:	f7ff fd2b 	bl	8023438 <CheckBarrierClosedStatus>
 80239e2:	4603      	mov	r3, r0
 80239e4:	2b00      	cmp	r3, #0
 80239e6:	f000 811d 	beq.w	8023c24 <CheckBarrierOperation+0x34c>
 80239ea:	f7ff fd45 	bl	8023478 <CheckZeroAuthCount>
 80239ee:	4603      	mov	r3, r0
 80239f0:	2b00      	cmp	r3, #0
 80239f2:	f000 8117 	beq.w	8023c24 <CheckBarrierOperation+0x34c>
							printf(" [CheckBarrier] Current Status is open \n");
 80239f6:	4869      	ldr	r0, [pc, #420]	; (8023b9c <CheckBarrierOperation+0x2c4>)
 80239f8:	f005 fcf8 	bl	80293ec <printf_>
							ControlBarrier(BARRIER_CLOSE);
 80239fc:	2003      	movs	r0, #3
 80239fe:	f7fd fd01 	bl	8021404 <ControlBarrier>
					if (gMainBarrierStatus.param.posStatus != SDOOR_OPEN || gSubBarrierStatus.param.posStatus != SDOOR_OPEN)
 8023a02:	e10f      	b.n	8023c24 <CheckBarrierOperation+0x34c>
 8023a04:	e10e      	b.n	8023c24 <CheckBarrierOperation+0x34c>
				else if (gbBarrierCmd == BARRIER_CLOSE)
 8023a06:	4b5f      	ldr	r3, [pc, #380]	; (8023b84 <CheckBarrierOperation+0x2ac>)
 8023a08:	781b      	ldrb	r3, [r3, #0]
 8023a0a:	2b03      	cmp	r3, #3
 8023a0c:	f040 8128 	bne.w	8023c60 <CheckBarrierOperation+0x388>
					if (gMainBarrierStatus.param.posStatus != SDOOR_CLOSE || gSubBarrierStatus.param.posStatus != SDOOR_CLOSE)
 8023a10:	4b5a      	ldr	r3, [pc, #360]	; (8023b7c <CheckBarrierOperation+0x2a4>)
 8023a12:	791b      	ldrb	r3, [r3, #4]
 8023a14:	f003 0307 	and.w	r3, r3, #7
 8023a18:	b2db      	uxtb	r3, r3
 8023a1a:	2b02      	cmp	r3, #2
 8023a1c:	d106      	bne.n	8023a2c <CheckBarrierOperation+0x154>
 8023a1e:	4b58      	ldr	r3, [pc, #352]	; (8023b80 <CheckBarrierOperation+0x2a8>)
 8023a20:	791b      	ldrb	r3, [r3, #4]
 8023a22:	f003 0307 	and.w	r3, r3, #7
 8023a26:	b2db      	uxtb	r3, r3
 8023a28:	2b02      	cmp	r3, #2
 8023a2a:	d06a      	beq.n	8023b02 <CheckBarrierOperation+0x22a>
						if (CheckBarrierClosedStatus())
 8023a2c:	f7ff fd04 	bl	8023438 <CheckBarrierClosedStatus>
 8023a30:	4603      	mov	r3, r0
 8023a32:	2b00      	cmp	r3, #0
 8023a34:	f000 80f8 	beq.w	8023c28 <CheckBarrierOperation+0x350>
							printf(" [CheckBarrier] pos:%02X/%02X \n", gMainBarrierStatus.param.posStatus, gSubBarrierStatus.param.posStatus);
 8023a38:	4b50      	ldr	r3, [pc, #320]	; (8023b7c <CheckBarrierOperation+0x2a4>)
 8023a3a:	791b      	ldrb	r3, [r3, #4]
 8023a3c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8023a40:	b2db      	uxtb	r3, r3
 8023a42:	4619      	mov	r1, r3
 8023a44:	4b4e      	ldr	r3, [pc, #312]	; (8023b80 <CheckBarrierOperation+0x2a8>)
 8023a46:	791b      	ldrb	r3, [r3, #4]
 8023a48:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8023a4c:	b2db      	uxtb	r3, r3
 8023a4e:	461a      	mov	r2, r3
 8023a50:	4853      	ldr	r0, [pc, #332]	; (8023ba0 <CheckBarrierOperation+0x2c8>)
 8023a52:	f005 fccb 	bl	80293ec <printf_>
							if (isCalibrationStart == FALSE && (isSafetyOn == FALSE || gfisAuthTimeout == TRUE))
 8023a56:	4b53      	ldr	r3, [pc, #332]	; (8023ba4 <CheckBarrierOperation+0x2cc>)
 8023a58:	781b      	ldrb	r3, [r3, #0]
 8023a5a:	f083 0301 	eor.w	r3, r3, #1
 8023a5e:	b2db      	uxtb	r3, r3
 8023a60:	2b00      	cmp	r3, #0
 8023a62:	f000 80e1 	beq.w	8023c28 <CheckBarrierOperation+0x350>
 8023a66:	4b50      	ldr	r3, [pc, #320]	; (8023ba8 <CheckBarrierOperation+0x2d0>)
 8023a68:	781b      	ldrb	r3, [r3, #0]
 8023a6a:	f083 0301 	eor.w	r3, r3, #1
 8023a6e:	b2db      	uxtb	r3, r3
 8023a70:	2b00      	cmp	r3, #0
 8023a72:	d104      	bne.n	8023a7e <CheckBarrierOperation+0x1a6>
 8023a74:	4b4d      	ldr	r3, [pc, #308]	; (8023bac <CheckBarrierOperation+0x2d4>)
 8023a76:	781b      	ldrb	r3, [r3, #0]
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	f000 80d5 	beq.w	8023c28 <CheckBarrierOperation+0x350>
								nBarrierErrorCnt++;
 8023a7e:	4b45      	ldr	r3, [pc, #276]	; (8023b94 <CheckBarrierOperation+0x2bc>)
 8023a80:	681b      	ldr	r3, [r3, #0]
 8023a82:	3301      	adds	r3, #1
 8023a84:	4a43      	ldr	r2, [pc, #268]	; (8023b94 <CheckBarrierOperation+0x2bc>)
 8023a86:	6013      	str	r3, [r2, #0]
								if (nBarrierErrorCnt == 8) // After 4 sec, Barrier fault is generated.
 8023a88:	4b42      	ldr	r3, [pc, #264]	; (8023b94 <CheckBarrierOperation+0x2bc>)
 8023a8a:	681b      	ldr	r3, [r3, #0]
 8023a8c:	2b08      	cmp	r3, #8
 8023a8e:	f040 80cb 	bne.w	8023c28 <CheckBarrierOperation+0x350>
									if (gGCUStatus.ModuleAlarm.b.nFDoor1 == FDOOR_ALARM_NONE && gGCUStatus.ModuleAlarm.b.nFDoor2 == FDOOR_ALARM_NONE)
 8023a92:	4b41      	ldr	r3, [pc, #260]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 8023a94:	7b1b      	ldrb	r3, [r3, #12]
 8023a96:	f003 0303 	and.w	r3, r3, #3
 8023a9a:	b2db      	uxtb	r3, r3
 8023a9c:	2b00      	cmp	r3, #0
 8023a9e:	d10c      	bne.n	8023aba <CheckBarrierOperation+0x1e2>
 8023aa0:	4b3d      	ldr	r3, [pc, #244]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 8023aa2:	7b1b      	ldrb	r3, [r3, #12]
 8023aa4:	f003 030c 	and.w	r3, r3, #12
 8023aa8:	b2db      	uxtb	r3, r3
 8023aaa:	2b00      	cmp	r3, #0
 8023aac:	d105      	bne.n	8023aba <CheckBarrierOperation+0x1e2>
										ControlBuzzer(BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8023aae:	4b40      	ldr	r3, [pc, #256]	; (8023bb0 <CheckBarrierOperation+0x2d8>)
 8023ab0:	7a9b      	ldrb	r3, [r3, #10]
 8023ab2:	4619      	mov	r1, r3
 8023ab4:	2001      	movs	r0, #1
 8023ab6:	f7fd fcdd 	bl	8021474 <ControlBuzzer>
									if (gMainBarrierStatus.param.posStatus != SDOOR_CLOSE)
 8023aba:	4b30      	ldr	r3, [pc, #192]	; (8023b7c <CheckBarrierOperation+0x2a4>)
 8023abc:	791b      	ldrb	r3, [r3, #4]
 8023abe:	f003 0307 	and.w	r3, r3, #7
 8023ac2:	b2db      	uxtb	r3, r3
 8023ac4:	2b02      	cmp	r3, #2
 8023ac6:	d005      	beq.n	8023ad4 <CheckBarrierOperation+0x1fc>
										gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_CLOSE_FAULT;
 8023ac8:	4a33      	ldr	r2, [pc, #204]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 8023aca:	7b13      	ldrb	r3, [r2, #12]
 8023acc:	2102      	movs	r1, #2
 8023ace:	f361 0301 	bfi	r3, r1, #0, #2
 8023ad2:	7313      	strb	r3, [r2, #12]
									if (gSubBarrierStatus.param.posStatus != SDOOR_CLOSE)
 8023ad4:	4b2a      	ldr	r3, [pc, #168]	; (8023b80 <CheckBarrierOperation+0x2a8>)
 8023ad6:	791b      	ldrb	r3, [r3, #4]
 8023ad8:	f003 0307 	and.w	r3, r3, #7
 8023adc:	b2db      	uxtb	r3, r3
 8023ade:	2b02      	cmp	r3, #2
 8023ae0:	d005      	beq.n	8023aee <CheckBarrierOperation+0x216>
										gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_CLOSE_FAULT;
 8023ae2:	4a2d      	ldr	r2, [pc, #180]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 8023ae4:	7b13      	ldrb	r3, [r2, #12]
 8023ae6:	2102      	movs	r1, #2
 8023ae8:	f361 0383 	bfi	r3, r1, #2, #2
 8023aec:	7313      	strb	r3, [r2, #12]
									nBarrierErrorCnt = 0;
 8023aee:	4b29      	ldr	r3, [pc, #164]	; (8023b94 <CheckBarrierOperation+0x2bc>)
 8023af0:	2200      	movs	r2, #0
 8023af2:	601a      	str	r2, [r3, #0]
									StopBarrierForSwing(FALSE);
 8023af4:	2000      	movs	r0, #0
 8023af6:	f7ff fcff 	bl	80234f8 <StopBarrierForSwing>
									ControlBarrier(BARRIER_CLOSE);
 8023afa:	2003      	movs	r0, #3
 8023afc:	f7fd fc82 	bl	8021404 <ControlBarrier>
						if (CheckBarrierClosedStatus())
 8023b00:	e092      	b.n	8023c28 <CheckBarrierOperation+0x350>
					else if (isSafetyOn4Init == FALSE)
 8023b02:	4b23      	ldr	r3, [pc, #140]	; (8023b90 <CheckBarrierOperation+0x2b8>)
 8023b04:	781b      	ldrb	r3, [r3, #0]
 8023b06:	f083 0301 	eor.w	r3, r3, #1
 8023b0a:	b2db      	uxtb	r3, r3
 8023b0c:	2b00      	cmp	r3, #0
 8023b0e:	f000 80a7 	beq.w	8023c60 <CheckBarrierOperation+0x388>
						nBarrierErrorCnt = 0;
 8023b12:	4b20      	ldr	r3, [pc, #128]	; (8023b94 <CheckBarrierOperation+0x2bc>)
 8023b14:	2200      	movs	r2, #0
 8023b16:	601a      	str	r2, [r3, #0]
						gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_NONE;
 8023b18:	4a1f      	ldr	r2, [pc, #124]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 8023b1a:	7b13      	ldrb	r3, [r2, #12]
 8023b1c:	f36f 0301 	bfc	r3, #0, #2
 8023b20:	7313      	strb	r3, [r2, #12]
						gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_NONE;
 8023b22:	4a1d      	ldr	r2, [pc, #116]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 8023b24:	7b13      	ldrb	r3, [r2, #12]
 8023b26:	f36f 0383 	bfc	r3, #2, #2
 8023b2a:	7313      	strb	r3, [r2, #12]
						gGCUStatus.bBarrierSw = 0x22;
 8023b2c:	4b1a      	ldr	r3, [pc, #104]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 8023b2e:	2222      	movs	r2, #34	; 0x22
 8023b30:	741a      	strb	r2, [r3, #16]
						if (gGCUStatus.bAuthCount_EN)
 8023b32:	4b19      	ldr	r3, [pc, #100]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 8023b34:	791b      	ldrb	r3, [r3, #4]
 8023b36:	b2db      	uxtb	r3, r3
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	d003      	beq.n	8023b44 <CheckBarrierOperation+0x26c>
							ControlBarrier(BARRIER_OPEN_FOR_EN);
 8023b3c:	2001      	movs	r0, #1
 8023b3e:	f7fd fc61 	bl	8021404 <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023b42:	e08d      	b.n	8023c60 <CheckBarrierOperation+0x388>
						else if (gGCUStatus.bAuthCount_EX)
 8023b44:	4b14      	ldr	r3, [pc, #80]	; (8023b98 <CheckBarrierOperation+0x2c0>)
 8023b46:	795b      	ldrb	r3, [r3, #5]
 8023b48:	b2db      	uxtb	r3, r3
 8023b4a:	2b00      	cmp	r3, #0
 8023b4c:	d003      	beq.n	8023b56 <CheckBarrierOperation+0x27e>
							ControlBarrier(BARRIER_OPEN_FOR_EX);
 8023b4e:	2002      	movs	r0, #2
 8023b50:	f7fd fc58 	bl	8021404 <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023b54:	e084      	b.n	8023c60 <CheckBarrierOperation+0x388>
						else if (gbPowerFailFlag == FLG_SET)
 8023b56:	4b17      	ldr	r3, [pc, #92]	; (8023bb4 <CheckBarrierOperation+0x2dc>)
 8023b58:	781b      	ldrb	r3, [r3, #0]
 8023b5a:	2b01      	cmp	r3, #1
 8023b5c:	d12c      	bne.n	8023bb8 <CheckBarrierOperation+0x2e0>
							ControlBarrier(BARRIER_OPEN_FOR_EX);
 8023b5e:	2002      	movs	r0, #2
 8023b60:	f7fd fc50 	bl	8021404 <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023b64:	e07c      	b.n	8023c60 <CheckBarrierOperation+0x388>
 8023b66:	bf00      	nop
 8023b68:	2400025c 	.word	0x2400025c
 8023b6c:	24000020 	.word	0x24000020
 8023b70:	2400041c 	.word	0x2400041c
 8023b74:	240001c0 	.word	0x240001c0
 8023b78:	24000018 	.word	0x24000018
 8023b7c:	240004bc 	.word	0x240004bc
 8023b80:	240004c4 	.word	0x240004c4
 8023b84:	24000028 	.word	0x24000028
 8023b88:	24000139 	.word	0x24000139
 8023b8c:	24000406 	.word	0x24000406
 8023b90:	24000407 	.word	0x24000407
 8023b94:	24000410 	.word	0x24000410
 8023b98:	24000490 	.word	0x24000490
 8023b9c:	0803215c 	.word	0x0803215c
 8023ba0:	08032188 	.word	0x08032188
 8023ba4:	24000409 	.word	0x24000409
 8023ba8:	24000405 	.word	0x24000405
 8023bac:	2400013d 	.word	0x2400013d
 8023bb0:	24000480 	.word	0x24000480
 8023bb4:	24000137 	.word	0x24000137
							if (gGCUParameter.bGateType == WIDE)
 8023bb8:	4b2e      	ldr	r3, [pc, #184]	; (8023c74 <CheckBarrierOperation+0x39c>)
 8023bba:	7b9b      	ldrb	r3, [r3, #14]
 8023bbc:	2b01      	cmp	r3, #1
 8023bbe:	d118      	bne.n	8023bf2 <CheckBarrierOperation+0x31a>
								if (!psenNewSwing.dirExit.lower && !psenNewSwing.dirEntry.lower)
 8023bc0:	4b2d      	ldr	r3, [pc, #180]	; (8023c78 <CheckBarrierOperation+0x3a0>)
 8023bc2:	781b      	ldrb	r3, [r3, #0]
 8023bc4:	f023 030f 	bic.w	r3, r3, #15
 8023bc8:	b2db      	uxtb	r3, r3
 8023bca:	2b00      	cmp	r3, #0
 8023bcc:	d10a      	bne.n	8023be4 <CheckBarrierOperation+0x30c>
 8023bce:	4b2a      	ldr	r3, [pc, #168]	; (8023c78 <CheckBarrierOperation+0x3a0>)
 8023bd0:	785b      	ldrb	r3, [r3, #1]
 8023bd2:	f023 030f 	bic.w	r3, r3, #15
 8023bd6:	b2db      	uxtb	r3, r3
 8023bd8:	2b00      	cmp	r3, #0
 8023bda:	d103      	bne.n	8023be4 <CheckBarrierOperation+0x30c>
									StopBarrierForSwing(FALSE);
 8023bdc:	2000      	movs	r0, #0
 8023bde:	f7ff fc8b 	bl	80234f8 <StopBarrierForSwing>
 8023be2:	e022      	b.n	8023c2a <CheckBarrierOperation+0x352>
									printf(" [CheckBarrier] Total Locking - 1!!! \n");
 8023be4:	4825      	ldr	r0, [pc, #148]	; (8023c7c <CheckBarrierOperation+0x3a4>)
 8023be6:	f005 fc01 	bl	80293ec <printf_>
									StopBarrierForSwing(TRUE);
 8023bea:	2001      	movs	r0, #1
 8023bec:	f7ff fc84 	bl	80234f8 <StopBarrierForSwing>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023bf0:	e036      	b.n	8023c60 <CheckBarrierOperation+0x388>
								if (!psenNewSwing.dirExit.lower && !psenNewSwing.dirEntry.lower)
 8023bf2:	4b21      	ldr	r3, [pc, #132]	; (8023c78 <CheckBarrierOperation+0x3a0>)
 8023bf4:	781b      	ldrb	r3, [r3, #0]
 8023bf6:	f023 030f 	bic.w	r3, r3, #15
 8023bfa:	b2db      	uxtb	r3, r3
 8023bfc:	2b00      	cmp	r3, #0
 8023bfe:	d10a      	bne.n	8023c16 <CheckBarrierOperation+0x33e>
 8023c00:	4b1d      	ldr	r3, [pc, #116]	; (8023c78 <CheckBarrierOperation+0x3a0>)
 8023c02:	785b      	ldrb	r3, [r3, #1]
 8023c04:	f023 030f 	bic.w	r3, r3, #15
 8023c08:	b2db      	uxtb	r3, r3
 8023c0a:	2b00      	cmp	r3, #0
 8023c0c:	d103      	bne.n	8023c16 <CheckBarrierOperation+0x33e>
									StopBarrierForSwing(FALSE);
 8023c0e:	2000      	movs	r0, #0
 8023c10:	f7ff fc72 	bl	80234f8 <StopBarrierForSwing>
 8023c14:	e009      	b.n	8023c2a <CheckBarrierOperation+0x352>
									printf(" [CheckBarrier] Total Locking - 2!!! \n");
 8023c16:	481a      	ldr	r0, [pc, #104]	; (8023c80 <CheckBarrierOperation+0x3a8>)
 8023c18:	f005 fbe8 	bl	80293ec <printf_>
									StopBarrierForSwing(TRUE);
 8023c1c:	2001      	movs	r0, #1
 8023c1e:	f7ff fc6b 	bl	80234f8 <StopBarrierForSwing>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023c22:	e01d      	b.n	8023c60 <CheckBarrierOperation+0x388>
					if (gMainBarrierStatus.param.posStatus != SDOOR_OPEN || gSubBarrierStatus.param.posStatus != SDOOR_OPEN)
 8023c24:	bf00      	nop
 8023c26:	e01b      	b.n	8023c60 <CheckBarrierOperation+0x388>
						if (CheckBarrierClosedStatus())
 8023c28:	bf00      	nop
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023c2a:	e019      	b.n	8023c60 <CheckBarrierOperation+0x388>
				if (!timerTailgating.fStart && gGCUStatus.bAuthCount_EN == 0 && gGCUStatus.bAuthCount_EX == 0 && CheckBarrierClosedStatus())
 8023c2c:	4b15      	ldr	r3, [pc, #84]	; (8023c84 <CheckBarrierOperation+0x3ac>)
 8023c2e:	781b      	ldrb	r3, [r3, #0]
 8023c30:	f083 0301 	eor.w	r3, r3, #1
 8023c34:	b2db      	uxtb	r3, r3
 8023c36:	2b00      	cmp	r3, #0
 8023c38:	d00e      	beq.n	8023c58 <CheckBarrierOperation+0x380>
 8023c3a:	4b13      	ldr	r3, [pc, #76]	; (8023c88 <CheckBarrierOperation+0x3b0>)
 8023c3c:	791b      	ldrb	r3, [r3, #4]
 8023c3e:	b2db      	uxtb	r3, r3
 8023c40:	2b00      	cmp	r3, #0
 8023c42:	d109      	bne.n	8023c58 <CheckBarrierOperation+0x380>
 8023c44:	4b10      	ldr	r3, [pc, #64]	; (8023c88 <CheckBarrierOperation+0x3b0>)
 8023c46:	795b      	ldrb	r3, [r3, #5]
 8023c48:	b2db      	uxtb	r3, r3
 8023c4a:	2b00      	cmp	r3, #0
 8023c4c:	d104      	bne.n	8023c58 <CheckBarrierOperation+0x380>
 8023c4e:	f7ff fbf3 	bl	8023438 <CheckBarrierClosedStatus>
 8023c52:	4603      	mov	r3, r0
 8023c54:	2b00      	cmp	r3, #0
 8023c56:	d104      	bne.n	8023c62 <CheckBarrierOperation+0x38a>
					nBarrierErrorCnt = 0;
 8023c58:	4b0c      	ldr	r3, [pc, #48]	; (8023c8c <CheckBarrierOperation+0x3b4>)
 8023c5a:	2200      	movs	r2, #0
 8023c5c:	601a      	str	r2, [r3, #0]
 8023c5e:	e000      	b.n	8023c62 <CheckBarrierOperation+0x38a>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8023c60:	bf00      	nop
			Brr_Inq_Status();
 8023c62:	f7fc fda3 	bl	80207ac <Brr_Inq_Status>
		if (IsTimeout(&timerBarrierCheck, dwBarrierCheckTime * TICK_COUNT_100MS))
 8023c66:	e003      	b.n	8023c70 <CheckBarrierOperation+0x398>
		SetTimer(&timerBarrierCheck);
 8023c68:	4809      	ldr	r0, [pc, #36]	; (8023c90 <CheckBarrierOperation+0x3b8>)
 8023c6a:	f00c fc09 	bl	8030480 <SetTimer>
}
 8023c6e:	e7ff      	b.n	8023c70 <CheckBarrierOperation+0x398>
 8023c70:	bf00      	nop
 8023c72:	bd80      	pop	{r7, pc}
 8023c74:	24000480 	.word	0x24000480
 8023c78:	240003f4 	.word	0x240003f4
 8023c7c:	080321a8 	.word	0x080321a8
 8023c80:	080321d0 	.word	0x080321d0
 8023c84:	240001fc 	.word	0x240001fc
 8023c88:	24000490 	.word	0x24000490
 8023c8c:	24000410 	.word	0x24000410
 8023c90:	240001c0 	.word	0x240001c0

08023c94 <ClearPassHistory>:

void ClearPassHistory(void)
{
 8023c94:	b580      	push	{r7, lr}
 8023c96:	af00      	add	r7, sp, #0
	if (gGCUStatus.PassageAlarm.b.nFromEN)
 8023c98:	4b57      	ldr	r3, [pc, #348]	; (8023df8 <ClearPassHistory+0x164>)
 8023c9a:	7a1b      	ldrb	r3, [r3, #8]
 8023c9c:	f003 0307 	and.w	r3, r3, #7
 8023ca0:	b2db      	uxtb	r3, r3
 8023ca2:	2b00      	cmp	r3, #0
 8023ca4:	d029      	beq.n	8023cfa <ClearPassHistory+0x66>
	{
		if (!psenNewSwing.side.entry)
 8023ca6:	4b55      	ldr	r3, [pc, #340]	; (8023dfc <ClearPassHistory+0x168>)
 8023ca8:	781b      	ldrb	r3, [r3, #0]
 8023caa:	2b00      	cmp	r3, #0
 8023cac:	d125      	bne.n	8023cfa <ClearPassHistory+0x66>
		{
			gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8023cae:	4a52      	ldr	r2, [pc, #328]	; (8023df8 <ClearPassHistory+0x164>)
 8023cb0:	7a13      	ldrb	r3, [r2, #8]
 8023cb2:	f36f 0302 	bfc	r3, #0, #3
 8023cb6:	7213      	strb	r3, [r2, #8]

			if (gGCUStatus.IllegalPass.b.nCounter_EN == FLG_SET)
 8023cb8:	4b4f      	ldr	r3, [pc, #316]	; (8023df8 <ClearPassHistory+0x164>)
 8023cba:	7f1b      	ldrb	r3, [r3, #28]
 8023cbc:	f003 0308 	and.w	r3, r3, #8
 8023cc0:	b2db      	uxtb	r3, r3
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	d007      	beq.n	8023cd6 <ClearPassHistory+0x42>
			{
				gGCUStatus.IllegalPass.b.nCounter_EN = FLG_OFF;
 8023cc6:	4a4c      	ldr	r2, [pc, #304]	; (8023df8 <ClearPassHistory+0x164>)
 8023cc8:	7f13      	ldrb	r3, [r2, #28]
 8023cca:	f36f 03c3 	bfc	r3, #3, #1
 8023cce:	7713      	strb	r3, [r2, #28]
				printf(" [EN] Clear Counter Enter \n");
 8023cd0:	484b      	ldr	r0, [pc, #300]	; (8023e00 <ClearPassHistory+0x16c>)
 8023cd2:	f005 fb8b 	bl	80293ec <printf_>
			}

			if (gGCUStatus.IllegalPass.b.nIllegal_EN == FLG_SET)
 8023cd6:	4b48      	ldr	r3, [pc, #288]	; (8023df8 <ClearPassHistory+0x164>)
 8023cd8:	7f1b      	ldrb	r3, [r3, #28]
 8023cda:	f003 0304 	and.w	r3, r3, #4
 8023cde:	b2db      	uxtb	r3, r3
 8023ce0:	2b00      	cmp	r3, #0
 8023ce2:	d007      	beq.n	8023cf4 <ClearPassHistory+0x60>
			{
				gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
 8023ce4:	4a44      	ldr	r2, [pc, #272]	; (8023df8 <ClearPassHistory+0x164>)
 8023ce6:	7f13      	ldrb	r3, [r2, #28]
 8023ce8:	f36f 0382 	bfc	r3, #2, #1
 8023cec:	7713      	strb	r3, [r2, #28]
				printf(" [EN] Clear Illegal Enter \n");
 8023cee:	4845      	ldr	r0, [pc, #276]	; (8023e04 <ClearPassHistory+0x170>)
 8023cf0:	f005 fb7c 	bl	80293ec <printf_>
			}
			ResetTimer(&timerIllegalEnterEN);
 8023cf4:	4844      	ldr	r0, [pc, #272]	; (8023e08 <ClearPassHistory+0x174>)
 8023cf6:	f00c fbd7 	bl	80304a8 <ResetTimer>
		}
	}

	if (gGCUStatus.PassageAlarm.b.nFromEX)
 8023cfa:	4b3f      	ldr	r3, [pc, #252]	; (8023df8 <ClearPassHistory+0x164>)
 8023cfc:	7a1b      	ldrb	r3, [r3, #8]
 8023cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8023d02:	b2db      	uxtb	r3, r3
 8023d04:	2b00      	cmp	r3, #0
 8023d06:	d029      	beq.n	8023d5c <ClearPassHistory+0xc8>
	{
		if (!psenNewSwing.side.exit)
 8023d08:	4b3c      	ldr	r3, [pc, #240]	; (8023dfc <ClearPassHistory+0x168>)
 8023d0a:	785b      	ldrb	r3, [r3, #1]
 8023d0c:	2b00      	cmp	r3, #0
 8023d0e:	d125      	bne.n	8023d5c <ClearPassHistory+0xc8>
		{
			gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8023d10:	4a39      	ldr	r2, [pc, #228]	; (8023df8 <ClearPassHistory+0x164>)
 8023d12:	7a13      	ldrb	r3, [r2, #8]
 8023d14:	f36f 1306 	bfc	r3, #4, #3
 8023d18:	7213      	strb	r3, [r2, #8]

			if (gGCUStatus.IllegalPass.b.nCounter_EX == FLG_SET)
 8023d1a:	4b37      	ldr	r3, [pc, #220]	; (8023df8 <ClearPassHistory+0x164>)
 8023d1c:	7f1b      	ldrb	r3, [r3, #28]
 8023d1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8023d22:	b2db      	uxtb	r3, r3
 8023d24:	2b00      	cmp	r3, #0
 8023d26:	d007      	beq.n	8023d38 <ClearPassHistory+0xa4>
			{
				gGCUStatus.IllegalPass.b.nCounter_EX = FLG_OFF;
 8023d28:	4a33      	ldr	r2, [pc, #204]	; (8023df8 <ClearPassHistory+0x164>)
 8023d2a:	7f13      	ldrb	r3, [r2, #28]
 8023d2c:	f36f 13c7 	bfc	r3, #7, #1
 8023d30:	7713      	strb	r3, [r2, #28]
				printf(" [EX] Clear Counter Enter \n");
 8023d32:	4836      	ldr	r0, [pc, #216]	; (8023e0c <ClearPassHistory+0x178>)
 8023d34:	f005 fb5a 	bl	80293ec <printf_>
			}

			if (gGCUStatus.IllegalPass.b.nIllegal_EX == FLG_SET)
 8023d38:	4b2f      	ldr	r3, [pc, #188]	; (8023df8 <ClearPassHistory+0x164>)
 8023d3a:	7f1b      	ldrb	r3, [r3, #28]
 8023d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023d40:	b2db      	uxtb	r3, r3
 8023d42:	2b00      	cmp	r3, #0
 8023d44:	d007      	beq.n	8023d56 <ClearPassHistory+0xc2>
			{
				gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
 8023d46:	4a2c      	ldr	r2, [pc, #176]	; (8023df8 <ClearPassHistory+0x164>)
 8023d48:	7f13      	ldrb	r3, [r2, #28]
 8023d4a:	f36f 1386 	bfc	r3, #6, #1
 8023d4e:	7713      	strb	r3, [r2, #28]
				printf(" [EX] Clear Illegal Enter \n");
 8023d50:	482f      	ldr	r0, [pc, #188]	; (8023e10 <ClearPassHistory+0x17c>)
 8023d52:	f005 fb4b 	bl	80293ec <printf_>
			}
			ResetTimer(&timerIllegalEnterEN);
 8023d56:	482c      	ldr	r0, [pc, #176]	; (8023e08 <ClearPassHistory+0x174>)
 8023d58:	f00c fba6 	bl	80304a8 <ResetTimer>
		}
	}

	if (FLG_OFF == gbEmergencyFlag)
 8023d5c:	4b2d      	ldr	r3, [pc, #180]	; (8023e14 <ClearPassHistory+0x180>)
 8023d5e:	781b      	ldrb	r3, [r3, #0]
 8023d60:	2b00      	cmp	r3, #0
 8023d62:	d147      	bne.n	8023df4 <ClearPassHistory+0x160>
	{
		if (gCurGCUOpMode.bServiceMode_EN == NO_SERVICE || (gGCUStatus.bAuthCount_EX && gCurGCUOpMode.bServiceMode_EN == IN_SERVICE))
 8023d64:	4b2c      	ldr	r3, [pc, #176]	; (8023e18 <ClearPassHistory+0x184>)
 8023d66:	781b      	ldrb	r3, [r3, #0]
 8023d68:	2b00      	cmp	r3, #0
 8023d6a:	d008      	beq.n	8023d7e <ClearPassHistory+0xea>
 8023d6c:	4b22      	ldr	r3, [pc, #136]	; (8023df8 <ClearPassHistory+0x164>)
 8023d6e:	795b      	ldrb	r3, [r3, #5]
 8023d70:	b2db      	uxtb	r3, r3
 8023d72:	2b00      	cmp	r3, #0
 8023d74:	d00a      	beq.n	8023d8c <ClearPassHistory+0xf8>
 8023d76:	4b28      	ldr	r3, [pc, #160]	; (8023e18 <ClearPassHistory+0x184>)
 8023d78:	781b      	ldrb	r3, [r3, #0]
 8023d7a:	2b01      	cmp	r3, #1
 8023d7c:	d106      	bne.n	8023d8c <ClearPassHistory+0xf8>
		{
			gbLampCMD_EN = DIR_RED;
 8023d7e:	4b27      	ldr	r3, [pc, #156]	; (8023e1c <ClearPassHistory+0x188>)
 8023d80:	2202      	movs	r2, #2
 8023d82:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EN = LAMP_OFF;
 8023d84:	4b26      	ldr	r3, [pc, #152]	; (8023e20 <ClearPassHistory+0x18c>)
 8023d86:	2200      	movs	r2, #0
 8023d88:	701a      	strb	r2, [r3, #0]
 8023d8a:	e005      	b.n	8023d98 <ClearPassHistory+0x104>
		}
		else
		{
			gbLampCMD_EN = DIR_GREEN;
 8023d8c:	4b23      	ldr	r3, [pc, #140]	; (8023e1c <ClearPassHistory+0x188>)
 8023d8e:	2201      	movs	r2, #1
 8023d90:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EX = LAMP_OFF;
 8023d92:	4b24      	ldr	r3, [pc, #144]	; (8023e24 <ClearPassHistory+0x190>)
 8023d94:	2200      	movs	r2, #0
 8023d96:	701a      	strb	r2, [r3, #0]
		}

		if (gCurGCUOpMode.bServiceMode_EX == NO_SERVICE || (gGCUStatus.bAuthCount_EN && gCurGCUOpMode.bServiceMode_EX == IN_SERVICE))
 8023d98:	4b1f      	ldr	r3, [pc, #124]	; (8023e18 <ClearPassHistory+0x184>)
 8023d9a:	785b      	ldrb	r3, [r3, #1]
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	d008      	beq.n	8023db2 <ClearPassHistory+0x11e>
 8023da0:	4b15      	ldr	r3, [pc, #84]	; (8023df8 <ClearPassHistory+0x164>)
 8023da2:	791b      	ldrb	r3, [r3, #4]
 8023da4:	b2db      	uxtb	r3, r3
 8023da6:	2b00      	cmp	r3, #0
 8023da8:	d00a      	beq.n	8023dc0 <ClearPassHistory+0x12c>
 8023daa:	4b1b      	ldr	r3, [pc, #108]	; (8023e18 <ClearPassHistory+0x184>)
 8023dac:	785b      	ldrb	r3, [r3, #1]
 8023dae:	2b01      	cmp	r3, #1
 8023db0:	d106      	bne.n	8023dc0 <ClearPassHistory+0x12c>
		{
			gbLampCMD_EX = DIR_RED;
 8023db2:	4b1d      	ldr	r3, [pc, #116]	; (8023e28 <ClearPassHistory+0x194>)
 8023db4:	2202      	movs	r2, #2
 8023db6:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EX = LAMP_OFF;
 8023db8:	4b1a      	ldr	r3, [pc, #104]	; (8023e24 <ClearPassHistory+0x190>)
 8023dba:	2200      	movs	r2, #0
 8023dbc:	701a      	strb	r2, [r3, #0]
 8023dbe:	e005      	b.n	8023dcc <ClearPassHistory+0x138>
		}
		else
		{
			gbLampCMD_EX = DIR_GREEN;
 8023dc0:	4b19      	ldr	r3, [pc, #100]	; (8023e28 <ClearPassHistory+0x194>)
 8023dc2:	2201      	movs	r2, #1
 8023dc4:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EN = LAMP_OFF;
 8023dc6:	4b16      	ldr	r3, [pc, #88]	; (8023e20 <ClearPassHistory+0x18c>)
 8023dc8:	2200      	movs	r2, #0
 8023dca:	701a      	strb	r2, [r3, #0]
		}

		ControlBuzzer(BUZZER_OFF, 0);
 8023dcc:	2100      	movs	r1, #0
 8023dce:	2000      	movs	r0, #0
 8023dd0:	f7fd fb50 	bl	8021474 <ControlBuzzer>
		ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 8023dd4:	4b11      	ldr	r3, [pc, #68]	; (8023e1c <ClearPassHistory+0x188>)
 8023dd6:	781b      	ldrb	r3, [r3, #0]
 8023dd8:	4a13      	ldr	r2, [pc, #76]	; (8023e28 <ClearPassHistory+0x194>)
 8023dda:	7812      	ldrb	r2, [r2, #0]
 8023ddc:	4611      	mov	r1, r2
 8023dde:	4618      	mov	r0, r3
 8023de0:	f7fd fb72 	bl	80214c8 <ControlDirectionLED>
		ControlIndicator(gbIndicatorCMD_EN, gbIndicatorCMD_EX, 0, FALSE);
 8023de4:	4b0e      	ldr	r3, [pc, #56]	; (8023e20 <ClearPassHistory+0x18c>)
 8023de6:	7818      	ldrb	r0, [r3, #0]
 8023de8:	4b0e      	ldr	r3, [pc, #56]	; (8023e24 <ClearPassHistory+0x190>)
 8023dea:	7819      	ldrb	r1, [r3, #0]
 8023dec:	2300      	movs	r3, #0
 8023dee:	2200      	movs	r2, #0
 8023df0:	f7fd fbc6 	bl	8021580 <ControlIndicator>
	}
}
 8023df4:	bf00      	nop
 8023df6:	bd80      	pop	{r7, pc}
 8023df8:	24000490 	.word	0x24000490
 8023dfc:	240003f4 	.word	0x240003f4
 8023e00:	080321f8 	.word	0x080321f8
 8023e04:	08032214 	.word	0x08032214
 8023e08:	2400019c 	.word	0x2400019c
 8023e0c:	08032230 	.word	0x08032230
 8023e10:	0803224c 	.word	0x0803224c
 8023e14:	24000139 	.word	0x24000139
 8023e18:	240004b4 	.word	0x240004b4
 8023e1c:	24000135 	.word	0x24000135
 8023e20:	24000133 	.word	0x24000133
 8023e24:	24000134 	.word	0x24000134
 8023e28:	24000136 	.word	0x24000136

08023e2c <CheckEntranceSwing>:

void CheckEntranceSwing(void)
{
 8023e2c:	b580      	push	{r7, lr}
 8023e2e:	af00      	add	r7, sp, #0
	if (gisEntryPassenger)
 8023e30:	4b70      	ldr	r3, [pc, #448]	; (8023ff4 <CheckEntranceSwing+0x1c8>)
 8023e32:	781b      	ldrb	r3, [r3, #0]
 8023e34:	2b00      	cmp	r3, #0
 8023e36:	d044      	beq.n	8023ec2 <CheckEntranceSwing+0x96>
	{
		if (gGCUStatus.bAuthCount_EX)
 8023e38:	4b6f      	ldr	r3, [pc, #444]	; (8023ff8 <CheckEntranceSwing+0x1cc>)
 8023e3a:	795b      	ldrb	r3, [r3, #5]
 8023e3c:	b2db      	uxtb	r3, r3
 8023e3e:	2b00      	cmp	r3, #0
 8023e40:	d024      	beq.n	8023e8c <CheckEntranceSwing+0x60>
		{
			if (!psenNewSwing.section.enter_EN && !psenNewSwing.section.lower_EN)
 8023e42:	4b6e      	ldr	r3, [pc, #440]	; (8023ffc <CheckEntranceSwing+0x1d0>)
 8023e44:	781b      	ldrb	r3, [r3, #0]
 8023e46:	f003 0303 	and.w	r3, r3, #3
 8023e4a:	b2db      	uxtb	r3, r3
 8023e4c:	2b00      	cmp	r3, #0
 8023e4e:	d15f      	bne.n	8023f10 <CheckEntranceSwing+0xe4>
 8023e50:	4b6a      	ldr	r3, [pc, #424]	; (8023ffc <CheckEntranceSwing+0x1d0>)
 8023e52:	781b      	ldrb	r3, [r3, #0]
 8023e54:	f023 030f 	bic.w	r3, r3, #15
 8023e58:	b2db      	uxtb	r3, r3
 8023e5a:	2b00      	cmp	r3, #0
 8023e5c:	d158      	bne.n	8023f10 <CheckEntranceSwing+0xe4>
			{
				ResetTimer(&timerIllegalEnterEN);
 8023e5e:	4868      	ldr	r0, [pc, #416]	; (8024000 <CheckEntranceSwing+0x1d4>)
 8023e60:	f00c fb22 	bl	80304a8 <ResetTimer>
				isPassReady_EN = FALSE;
 8023e64:	4b67      	ldr	r3, [pc, #412]	; (8024004 <CheckEntranceSwing+0x1d8>)
 8023e66:	2200      	movs	r2, #0
 8023e68:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EN = PASS_PATN_NONE;
 8023e6a:	4b67      	ldr	r3, [pc, #412]	; (8024008 <CheckEntranceSwing+0x1dc>)
 8023e6c:	2200      	movs	r2, #0
 8023e6e:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8023e70:	4a61      	ldr	r2, [pc, #388]	; (8023ff8 <CheckEntranceSwing+0x1cc>)
 8023e72:	7a13      	ldrb	r3, [r2, #8]
 8023e74:	f36f 13c7 	bfc	r3, #7, #1
 8023e78:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023e7a:	4b64      	ldr	r3, [pc, #400]	; (802400c <CheckEntranceSwing+0x1e0>)
 8023e7c:	2200      	movs	r2, #0
 8023e7e:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023e80:	f7ff ff08 	bl	8023c94 <ClearPassHistory>
				// ControlBarrier(BARRIER_OPEN_FOR_EX);
				printf(" [EN] Enter Clear - Inverse entering\n");
 8023e84:	4862      	ldr	r0, [pc, #392]	; (8024010 <CheckEntranceSwing+0x1e4>)
 8023e86:	f005 fab1 	bl	80293ec <printf_>
 8023e8a:	e041      	b.n	8023f10 <CheckEntranceSwing+0xe4>
			}
		}
		else
		{
			if (!psenNewSwing.side.entry)
 8023e8c:	4b5b      	ldr	r3, [pc, #364]	; (8023ffc <CheckEntranceSwing+0x1d0>)
 8023e8e:	781b      	ldrb	r3, [r3, #0]
 8023e90:	2b00      	cmp	r3, #0
 8023e92:	d13d      	bne.n	8023f10 <CheckEntranceSwing+0xe4>
			{
				ResetTimer(&timerIllegalEnterEN);
 8023e94:	485a      	ldr	r0, [pc, #360]	; (8024000 <CheckEntranceSwing+0x1d4>)
 8023e96:	f00c fb07 	bl	80304a8 <ResetTimer>
				isPassReady_EN = FALSE;
 8023e9a:	4b5a      	ldr	r3, [pc, #360]	; (8024004 <CheckEntranceSwing+0x1d8>)
 8023e9c:	2200      	movs	r2, #0
 8023e9e:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EN = PASS_PATN_NONE;
 8023ea0:	4b59      	ldr	r3, [pc, #356]	; (8024008 <CheckEntranceSwing+0x1dc>)
 8023ea2:	2200      	movs	r2, #0
 8023ea4:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8023ea6:	4a54      	ldr	r2, [pc, #336]	; (8023ff8 <CheckEntranceSwing+0x1cc>)
 8023ea8:	7a13      	ldrb	r3, [r2, #8]
 8023eaa:	f36f 13c7 	bfc	r3, #7, #1
 8023eae:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023eb0:	4b56      	ldr	r3, [pc, #344]	; (802400c <CheckEntranceSwing+0x1e0>)
 8023eb2:	2200      	movs	r2, #0
 8023eb4:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023eb6:	f7ff feed 	bl	8023c94 <ClearPassHistory>
				printf(" [EN] Enter Clear - Normal \n");
 8023eba:	4856      	ldr	r0, [pc, #344]	; (8024014 <CheckEntranceSwing+0x1e8>)
 8023ebc:	f005 fa96 	bl	80293ec <printf_>
 8023ec0:	e026      	b.n	8023f10 <CheckEntranceSwing+0xe4>
		}
	}
	else
	{
		// TODO: Check needs of this alarm
		if (gGCUStatus.PassageAlarm.b.nPassOverFromEX != ON)
 8023ec2:	4b4d      	ldr	r3, [pc, #308]	; (8023ff8 <CheckEntranceSwing+0x1cc>)
 8023ec4:	7a1b      	ldrb	r3, [r3, #8]
 8023ec6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8023eca:	b2db      	uxtb	r3, r3
 8023ecc:	2b00      	cmp	r3, #0
 8023ece:	d11f      	bne.n	8023f10 <CheckEntranceSwing+0xe4>
		{
			if (psenNewSwing.dirEntry.enter)
 8023ed0:	4b4a      	ldr	r3, [pc, #296]	; (8023ffc <CheckEntranceSwing+0x1d0>)
 8023ed2:	781b      	ldrb	r3, [r3, #0]
 8023ed4:	f003 0303 	and.w	r3, r3, #3
 8023ed8:	b2db      	uxtb	r3, r3
 8023eda:	2b00      	cmp	r3, #0
 8023edc:	d018      	beq.n	8023f10 <CheckEntranceSwing+0xe4>
			{
				bEnterPattern_EN |= psenNewSwing.dirEntry.enter;
 8023ede:	4b47      	ldr	r3, [pc, #284]	; (8023ffc <CheckEntranceSwing+0x1d0>)
 8023ee0:	781b      	ldrb	r3, [r3, #0]
 8023ee2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8023ee6:	b2db      	uxtb	r3, r3
 8023ee8:	461a      	mov	r2, r3
 8023eea:	4b47      	ldr	r3, [pc, #284]	; (8024008 <CheckEntranceSwing+0x1dc>)
 8023eec:	781b      	ldrb	r3, [r3, #0]
 8023eee:	4313      	orrs	r3, r2
 8023ef0:	b2da      	uxtb	r2, r3
 8023ef2:	4b45      	ldr	r3, [pc, #276]	; (8024008 <CheckEntranceSwing+0x1dc>)
 8023ef4:	701a      	strb	r2, [r3, #0]

				if (bEnterPattern_EN >= PASS_PATN_ENTER)
 8023ef6:	4b44      	ldr	r3, [pc, #272]	; (8024008 <CheckEntranceSwing+0x1dc>)
 8023ef8:	781b      	ldrb	r3, [r3, #0]
 8023efa:	2b01      	cmp	r3, #1
 8023efc:	d908      	bls.n	8023f10 <CheckEntranceSwing+0xe4>
				{
					gisEntryPassenger = TRUE;
 8023efe:	4b3d      	ldr	r3, [pc, #244]	; (8023ff4 <CheckEntranceSwing+0x1c8>)
 8023f00:	2201      	movs	r2, #1
 8023f02:	701a      	strb	r2, [r3, #0]

					printf(" [EN] Enter - [%02X]\n", bEnterPattern_EN);
 8023f04:	4b40      	ldr	r3, [pc, #256]	; (8024008 <CheckEntranceSwing+0x1dc>)
 8023f06:	781b      	ldrb	r3, [r3, #0]
 8023f08:	4619      	mov	r1, r3
 8023f0a:	4843      	ldr	r0, [pc, #268]	; (8024018 <CheckEntranceSwing+0x1ec>)
 8023f0c:	f005 fa6e 	bl	80293ec <printf_>
				}
			}
		}
	}

	if (gisExitPassenger)
 8023f10:	4b42      	ldr	r3, [pc, #264]	; (802401c <CheckEntranceSwing+0x1f0>)
 8023f12:	781b      	ldrb	r3, [r3, #0]
 8023f14:	2b00      	cmp	r3, #0
 8023f16:	d044      	beq.n	8023fa2 <CheckEntranceSwing+0x176>
	{
		if (gGCUStatus.bAuthCount_EN)
 8023f18:	4b37      	ldr	r3, [pc, #220]	; (8023ff8 <CheckEntranceSwing+0x1cc>)
 8023f1a:	791b      	ldrb	r3, [r3, #4]
 8023f1c:	b2db      	uxtb	r3, r3
 8023f1e:	2b00      	cmp	r3, #0
 8023f20:	d024      	beq.n	8023f6c <CheckEntranceSwing+0x140>
		{
			if (!psenNewSwing.section.enter_EX && !psenNewSwing.section.lower_EX)
 8023f22:	4b36      	ldr	r3, [pc, #216]	; (8023ffc <CheckEntranceSwing+0x1d0>)
 8023f24:	785b      	ldrb	r3, [r3, #1]
 8023f26:	f003 0303 	and.w	r3, r3, #3
 8023f2a:	b2db      	uxtb	r3, r3
 8023f2c:	2b00      	cmp	r3, #0
 8023f2e:	d15f      	bne.n	8023ff0 <CheckEntranceSwing+0x1c4>
 8023f30:	4b32      	ldr	r3, [pc, #200]	; (8023ffc <CheckEntranceSwing+0x1d0>)
 8023f32:	785b      	ldrb	r3, [r3, #1]
 8023f34:	f023 030f 	bic.w	r3, r3, #15
 8023f38:	b2db      	uxtb	r3, r3
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	d158      	bne.n	8023ff0 <CheckEntranceSwing+0x1c4>
			{
				ResetTimer(&timerIllegalEnterEX);
 8023f3e:	4838      	ldr	r0, [pc, #224]	; (8024020 <CheckEntranceSwing+0x1f4>)
 8023f40:	f00c fab2 	bl	80304a8 <ResetTimer>
				isPassReady_EX = FALSE;
 8023f44:	4b37      	ldr	r3, [pc, #220]	; (8024024 <CheckEntranceSwing+0x1f8>)
 8023f46:	2200      	movs	r2, #0
 8023f48:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EX = PASS_PATN_NONE;
 8023f4a:	4b37      	ldr	r3, [pc, #220]	; (8024028 <CheckEntranceSwing+0x1fc>)
 8023f4c:	2200      	movs	r2, #0
 8023f4e:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8023f50:	4a29      	ldr	r2, [pc, #164]	; (8023ff8 <CheckEntranceSwing+0x1cc>)
 8023f52:	7a13      	ldrb	r3, [r2, #8]
 8023f54:	f36f 03c3 	bfc	r3, #3, #1
 8023f58:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023f5a:	4b2c      	ldr	r3, [pc, #176]	; (802400c <CheckEntranceSwing+0x1e0>)
 8023f5c:	2200      	movs	r2, #0
 8023f5e:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023f60:	f7ff fe98 	bl	8023c94 <ClearPassHistory>
				// ControlBarrier(BARRIER_OPEN_FOR_EN);
				printf(" [EX] Enter Clear - Inverse entering \n");
 8023f64:	4831      	ldr	r0, [pc, #196]	; (802402c <CheckEntranceSwing+0x200>)
 8023f66:	f005 fa41 	bl	80293ec <printf_>
					printf(" [EX] Enter - [%02X]\n", bEnterPattern_EX);
				}
			}
		}
	}
}
 8023f6a:	e041      	b.n	8023ff0 <CheckEntranceSwing+0x1c4>
			if (!psenNewSwing.side.exit)
 8023f6c:	4b23      	ldr	r3, [pc, #140]	; (8023ffc <CheckEntranceSwing+0x1d0>)
 8023f6e:	785b      	ldrb	r3, [r3, #1]
 8023f70:	2b00      	cmp	r3, #0
 8023f72:	d13d      	bne.n	8023ff0 <CheckEntranceSwing+0x1c4>
				ResetTimer(&timerIllegalEnterEX);
 8023f74:	482a      	ldr	r0, [pc, #168]	; (8024020 <CheckEntranceSwing+0x1f4>)
 8023f76:	f00c fa97 	bl	80304a8 <ResetTimer>
				isPassReady_EX = FALSE;
 8023f7a:	4b2a      	ldr	r3, [pc, #168]	; (8024024 <CheckEntranceSwing+0x1f8>)
 8023f7c:	2200      	movs	r2, #0
 8023f7e:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EX = PASS_PATN_NONE;
 8023f80:	4b29      	ldr	r3, [pc, #164]	; (8024028 <CheckEntranceSwing+0x1fc>)
 8023f82:	2200      	movs	r2, #0
 8023f84:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8023f86:	4a1c      	ldr	r2, [pc, #112]	; (8023ff8 <CheckEntranceSwing+0x1cc>)
 8023f88:	7a13      	ldrb	r3, [r2, #8]
 8023f8a:	f36f 03c3 	bfc	r3, #3, #1
 8023f8e:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8023f90:	4b1e      	ldr	r3, [pc, #120]	; (802400c <CheckEntranceSwing+0x1e0>)
 8023f92:	2200      	movs	r2, #0
 8023f94:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8023f96:	f7ff fe7d 	bl	8023c94 <ClearPassHistory>
				printf(" [EX] Enter Clear - Normal \n");
 8023f9a:	4825      	ldr	r0, [pc, #148]	; (8024030 <CheckEntranceSwing+0x204>)
 8023f9c:	f005 fa26 	bl	80293ec <printf_>
}
 8023fa0:	e026      	b.n	8023ff0 <CheckEntranceSwing+0x1c4>
		if (gGCUStatus.PassageAlarm.b.nPassOverFromEN != ON)
 8023fa2:	4b15      	ldr	r3, [pc, #84]	; (8023ff8 <CheckEntranceSwing+0x1cc>)
 8023fa4:	7a1b      	ldrb	r3, [r3, #8]
 8023fa6:	f003 0308 	and.w	r3, r3, #8
 8023faa:	b2db      	uxtb	r3, r3
 8023fac:	2b00      	cmp	r3, #0
 8023fae:	d11f      	bne.n	8023ff0 <CheckEntranceSwing+0x1c4>
			if (psenNewSwing.dirExit.enter)
 8023fb0:	4b12      	ldr	r3, [pc, #72]	; (8023ffc <CheckEntranceSwing+0x1d0>)
 8023fb2:	785b      	ldrb	r3, [r3, #1]
 8023fb4:	f003 0303 	and.w	r3, r3, #3
 8023fb8:	b2db      	uxtb	r3, r3
 8023fba:	2b00      	cmp	r3, #0
 8023fbc:	d018      	beq.n	8023ff0 <CheckEntranceSwing+0x1c4>
				bEnterPattern_EX |= psenNewSwing.dirExit.enter;
 8023fbe:	4b0f      	ldr	r3, [pc, #60]	; (8023ffc <CheckEntranceSwing+0x1d0>)
 8023fc0:	785b      	ldrb	r3, [r3, #1]
 8023fc2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8023fc6:	b2db      	uxtb	r3, r3
 8023fc8:	461a      	mov	r2, r3
 8023fca:	4b17      	ldr	r3, [pc, #92]	; (8024028 <CheckEntranceSwing+0x1fc>)
 8023fcc:	781b      	ldrb	r3, [r3, #0]
 8023fce:	4313      	orrs	r3, r2
 8023fd0:	b2da      	uxtb	r2, r3
 8023fd2:	4b15      	ldr	r3, [pc, #84]	; (8024028 <CheckEntranceSwing+0x1fc>)
 8023fd4:	701a      	strb	r2, [r3, #0]
				if (bEnterPattern_EX >= PASS_PATN_ENTER)
 8023fd6:	4b14      	ldr	r3, [pc, #80]	; (8024028 <CheckEntranceSwing+0x1fc>)
 8023fd8:	781b      	ldrb	r3, [r3, #0]
 8023fda:	2b01      	cmp	r3, #1
 8023fdc:	d908      	bls.n	8023ff0 <CheckEntranceSwing+0x1c4>
					gisExitPassenger = TRUE;
 8023fde:	4b0f      	ldr	r3, [pc, #60]	; (802401c <CheckEntranceSwing+0x1f0>)
 8023fe0:	2201      	movs	r2, #1
 8023fe2:	701a      	strb	r2, [r3, #0]
					printf(" [EX] Enter - [%02X]\n", bEnterPattern_EX);
 8023fe4:	4b10      	ldr	r3, [pc, #64]	; (8024028 <CheckEntranceSwing+0x1fc>)
 8023fe6:	781b      	ldrb	r3, [r3, #0]
 8023fe8:	4619      	mov	r1, r3
 8023fea:	4812      	ldr	r0, [pc, #72]	; (8024034 <CheckEntranceSwing+0x208>)
 8023fec:	f005 f9fe 	bl	80293ec <printf_>
}
 8023ff0:	bf00      	nop
 8023ff2:	bd80      	pop	{r7, pc}
 8023ff4:	24000419 	.word	0x24000419
 8023ff8:	24000490 	.word	0x24000490
 8023ffc:	240003f4 	.word	0x240003f4
 8024000:	2400019c 	.word	0x2400019c
 8024004:	240003fe 	.word	0x240003fe
 8024008:	240003fc 	.word	0x240003fc
 802400c:	24000406 	.word	0x24000406
 8024010:	08032268 	.word	0x08032268
 8024014:	08032290 	.word	0x08032290
 8024018:	080322b0 	.word	0x080322b0
 802401c:	2400041a 	.word	0x2400041a
 8024020:	240001a8 	.word	0x240001a8
 8024024:	240003ff 	.word	0x240003ff
 8024028:	240003fd 	.word	0x240003fd
 802402c:	080322c8 	.word	0x080322c8
 8024030:	080322f0 	.word	0x080322f0
 8024034:	08032310 	.word	0x08032310

08024038 <CheckPassReadySwing>:

void CheckPassReadySwing(void)
{
 8024038:	b580      	push	{r7, lr}
 802403a:	af00      	add	r7, sp, #0
	if (gisExitPassenger == TRUE && gGCUStatus.bAuthCount_EX)
 802403c:	4b55      	ldr	r3, [pc, #340]	; (8024194 <CheckPassReadySwing+0x15c>)
 802403e:	781b      	ldrb	r3, [r3, #0]
 8024040:	2b00      	cmp	r3, #0
 8024042:	d050      	beq.n	80240e6 <CheckPassReadySwing+0xae>
 8024044:	4b54      	ldr	r3, [pc, #336]	; (8024198 <CheckPassReadySwing+0x160>)
 8024046:	795b      	ldrb	r3, [r3, #5]
 8024048:	b2db      	uxtb	r3, r3
 802404a:	2b00      	cmp	r3, #0
 802404c:	d04b      	beq.n	80240e6 <CheckPassReadySwing+0xae>
	{
		if (isPassReady_EN == FALSE)
 802404e:	4b53      	ldr	r3, [pc, #332]	; (802419c <CheckPassReadySwing+0x164>)
 8024050:	781b      	ldrb	r3, [r3, #0]
 8024052:	f083 0301 	eor.w	r3, r3, #1
 8024056:	b2db      	uxtb	r3, r3
 8024058:	2b00      	cmp	r3, #0
 802405a:	d01d      	beq.n	8024098 <CheckPassReadySwing+0x60>
		{
			if (psenNewSwing.b.s12 || psenNewSwing.b.s15 || psenNewSwing.b.s16)
 802405c:	4b50      	ldr	r3, [pc, #320]	; (80241a0 <CheckPassReadySwing+0x168>)
 802405e:	785b      	ldrb	r3, [r3, #1]
 8024060:	f003 0308 	and.w	r3, r3, #8
 8024064:	b2db      	uxtb	r3, r3
 8024066:	2b00      	cmp	r3, #0
 8024068:	d10d      	bne.n	8024086 <CheckPassReadySwing+0x4e>
 802406a:	4b4d      	ldr	r3, [pc, #308]	; (80241a0 <CheckPassReadySwing+0x168>)
 802406c:	785b      	ldrb	r3, [r3, #1]
 802406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024072:	b2db      	uxtb	r3, r3
 8024074:	2b00      	cmp	r3, #0
 8024076:	d106      	bne.n	8024086 <CheckPassReadySwing+0x4e>
 8024078:	4b49      	ldr	r3, [pc, #292]	; (80241a0 <CheckPassReadySwing+0x168>)
 802407a:	785b      	ldrb	r3, [r3, #1]
 802407c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8024080:	b2db      	uxtb	r3, r3
 8024082:	2b00      	cmp	r3, #0
 8024084:	d008      	beq.n	8024098 <CheckPassReadySwing+0x60>
			{
				printf(" [EX] Pass Ready \n");
 8024086:	4847      	ldr	r0, [pc, #284]	; (80241a4 <CheckPassReadySwing+0x16c>)
 8024088:	f005 f9b0 	bl	80293ec <printf_>
				isPassReady_EX = TRUE;
 802408c:	4b46      	ldr	r3, [pc, #280]	; (80241a8 <CheckPassReadySwing+0x170>)
 802408e:	2201      	movs	r2, #1
 8024090:	701a      	strb	r2, [r3, #0]
					gisExitPassenger = FALSE;
 8024092:	4b40      	ldr	r3, [pc, #256]	; (8024194 <CheckPassReadySwing+0x15c>)
 8024094:	2200      	movs	r2, #0
 8024096:	701a      	strb	r2, [r3, #0]
				}
		}

		// Luggage check (Stroller, Bicycle, Luggage)
		if (gGCUStatus.bAuthCount_EX && psenNewSwing.dirExit.enter && psenNewSwing.b.s13 && psenNewSwing.b.s14 && !psenNewSwing.b.s11)
 8024098:	4b3f      	ldr	r3, [pc, #252]	; (8024198 <CheckPassReadySwing+0x160>)
 802409a:	795b      	ldrb	r3, [r3, #5]
 802409c:	b2db      	uxtb	r3, r3
 802409e:	2b00      	cmp	r3, #0
 80240a0:	d021      	beq.n	80240e6 <CheckPassReadySwing+0xae>
 80240a2:	4b3f      	ldr	r3, [pc, #252]	; (80241a0 <CheckPassReadySwing+0x168>)
 80240a4:	785b      	ldrb	r3, [r3, #1]
 80240a6:	f003 0303 	and.w	r3, r3, #3
 80240aa:	b2db      	uxtb	r3, r3
 80240ac:	2b00      	cmp	r3, #0
 80240ae:	d01a      	beq.n	80240e6 <CheckPassReadySwing+0xae>
 80240b0:	4b3b      	ldr	r3, [pc, #236]	; (80241a0 <CheckPassReadySwing+0x168>)
 80240b2:	785b      	ldrb	r3, [r3, #1]
 80240b4:	f003 0310 	and.w	r3, r3, #16
 80240b8:	b2db      	uxtb	r3, r3
 80240ba:	2b00      	cmp	r3, #0
 80240bc:	d013      	beq.n	80240e6 <CheckPassReadySwing+0xae>
 80240be:	4b38      	ldr	r3, [pc, #224]	; (80241a0 <CheckPassReadySwing+0x168>)
 80240c0:	785b      	ldrb	r3, [r3, #1]
 80240c2:	f003 0320 	and.w	r3, r3, #32
 80240c6:	b2db      	uxtb	r3, r3
 80240c8:	2b00      	cmp	r3, #0
 80240ca:	d00c      	beq.n	80240e6 <CheckPassReadySwing+0xae>
 80240cc:	4b34      	ldr	r3, [pc, #208]	; (80241a0 <CheckPassReadySwing+0x168>)
 80240ce:	785b      	ldrb	r3, [r3, #1]
 80240d0:	f003 0304 	and.w	r3, r3, #4
 80240d4:	b2db      	uxtb	r3, r3
 80240d6:	2b00      	cmp	r3, #0
 80240d8:	d105      	bne.n	80240e6 <CheckPassReadySwing+0xae>
		{
			isLuggageSet_EX = TRUE;
 80240da:	4b34      	ldr	r3, [pc, #208]	; (80241ac <CheckPassReadySwing+0x174>)
 80240dc:	2201      	movs	r2, #1
 80240de:	701a      	strb	r2, [r3, #0]
			printf(" [EX] Set Luggage Flag\n");
 80240e0:	4833      	ldr	r0, [pc, #204]	; (80241b0 <CheckPassReadySwing+0x178>)
 80240e2:	f005 f983 	bl	80293ec <printf_>
		}
	}
	
	if (gisEntryPassenger == TRUE && gGCUStatus.bAuthCount_EN)
 80240e6:	4b33      	ldr	r3, [pc, #204]	; (80241b4 <CheckPassReadySwing+0x17c>)
 80240e8:	781b      	ldrb	r3, [r3, #0]
 80240ea:	2b00      	cmp	r3, #0
 80240ec:	d050      	beq.n	8024190 <CheckPassReadySwing+0x158>
 80240ee:	4b2a      	ldr	r3, [pc, #168]	; (8024198 <CheckPassReadySwing+0x160>)
 80240f0:	791b      	ldrb	r3, [r3, #4]
 80240f2:	b2db      	uxtb	r3, r3
 80240f4:	2b00      	cmp	r3, #0
 80240f6:	d04b      	beq.n	8024190 <CheckPassReadySwing+0x158>
	{
		if (isPassReady_EX == FALSE)
 80240f8:	4b2b      	ldr	r3, [pc, #172]	; (80241a8 <CheckPassReadySwing+0x170>)
 80240fa:	781b      	ldrb	r3, [r3, #0]
 80240fc:	f083 0301 	eor.w	r3, r3, #1
 8024100:	b2db      	uxtb	r3, r3
 8024102:	2b00      	cmp	r3, #0
 8024104:	d01d      	beq.n	8024142 <CheckPassReadySwing+0x10a>
		{
			if (psenNewSwing.b.s04 || psenNewSwing.b.s07 || psenNewSwing.b.s08)
 8024106:	4b26      	ldr	r3, [pc, #152]	; (80241a0 <CheckPassReadySwing+0x168>)
 8024108:	781b      	ldrb	r3, [r3, #0]
 802410a:	f003 0308 	and.w	r3, r3, #8
 802410e:	b2db      	uxtb	r3, r3
 8024110:	2b00      	cmp	r3, #0
 8024112:	d10d      	bne.n	8024130 <CheckPassReadySwing+0xf8>
 8024114:	4b22      	ldr	r3, [pc, #136]	; (80241a0 <CheckPassReadySwing+0x168>)
 8024116:	781b      	ldrb	r3, [r3, #0]
 8024118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802411c:	b2db      	uxtb	r3, r3
 802411e:	2b00      	cmp	r3, #0
 8024120:	d106      	bne.n	8024130 <CheckPassReadySwing+0xf8>
 8024122:	4b1f      	ldr	r3, [pc, #124]	; (80241a0 <CheckPassReadySwing+0x168>)
 8024124:	781b      	ldrb	r3, [r3, #0]
 8024126:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802412a:	b2db      	uxtb	r3, r3
 802412c:	2b00      	cmp	r3, #0
 802412e:	d008      	beq.n	8024142 <CheckPassReadySwing+0x10a>
			{
				printf(" [EN] Pass Ready \n");
 8024130:	4821      	ldr	r0, [pc, #132]	; (80241b8 <CheckPassReadySwing+0x180>)
 8024132:	f005 f95b 	bl	80293ec <printf_>
				isPassReady_EN = TRUE;
 8024136:	4b19      	ldr	r3, [pc, #100]	; (802419c <CheckPassReadySwing+0x164>)
 8024138:	2201      	movs	r2, #1
 802413a:	701a      	strb	r2, [r3, #0]
					gisEntryPassenger = FALSE;
 802413c:	4b1d      	ldr	r3, [pc, #116]	; (80241b4 <CheckPassReadySwing+0x17c>)
 802413e:	2200      	movs	r2, #0
 8024140:	701a      	strb	r2, [r3, #0]
			}
		}

		// Luggage check (Stroller, Bicycle, Luggage)
		if (gGCUStatus.bAuthCount_EN && psenNewSwing.dirEntry.enter && psenNewSwing.b.s03 && psenNewSwing.b.s04 && !psenNewSwing.b.s01)
 8024142:	4b15      	ldr	r3, [pc, #84]	; (8024198 <CheckPassReadySwing+0x160>)
 8024144:	791b      	ldrb	r3, [r3, #4]
 8024146:	b2db      	uxtb	r3, r3
 8024148:	2b00      	cmp	r3, #0
 802414a:	d021      	beq.n	8024190 <CheckPassReadySwing+0x158>
 802414c:	4b14      	ldr	r3, [pc, #80]	; (80241a0 <CheckPassReadySwing+0x168>)
 802414e:	781b      	ldrb	r3, [r3, #0]
 8024150:	f003 0303 	and.w	r3, r3, #3
 8024154:	b2db      	uxtb	r3, r3
 8024156:	2b00      	cmp	r3, #0
 8024158:	d01a      	beq.n	8024190 <CheckPassReadySwing+0x158>
 802415a:	4b11      	ldr	r3, [pc, #68]	; (80241a0 <CheckPassReadySwing+0x168>)
 802415c:	781b      	ldrb	r3, [r3, #0]
 802415e:	f003 0304 	and.w	r3, r3, #4
 8024162:	b2db      	uxtb	r3, r3
 8024164:	2b00      	cmp	r3, #0
 8024166:	d013      	beq.n	8024190 <CheckPassReadySwing+0x158>
 8024168:	4b0d      	ldr	r3, [pc, #52]	; (80241a0 <CheckPassReadySwing+0x168>)
 802416a:	781b      	ldrb	r3, [r3, #0]
 802416c:	f003 0308 	and.w	r3, r3, #8
 8024170:	b2db      	uxtb	r3, r3
 8024172:	2b00      	cmp	r3, #0
 8024174:	d00c      	beq.n	8024190 <CheckPassReadySwing+0x158>
 8024176:	4b0a      	ldr	r3, [pc, #40]	; (80241a0 <CheckPassReadySwing+0x168>)
 8024178:	781b      	ldrb	r3, [r3, #0]
 802417a:	f003 0301 	and.w	r3, r3, #1
 802417e:	b2db      	uxtb	r3, r3
 8024180:	2b00      	cmp	r3, #0
 8024182:	d105      	bne.n	8024190 <CheckPassReadySwing+0x158>
		{
			isLuggageSet_EN = TRUE;
 8024184:	4b0d      	ldr	r3, [pc, #52]	; (80241bc <CheckPassReadySwing+0x184>)
 8024186:	2201      	movs	r2, #1
 8024188:	701a      	strb	r2, [r3, #0]
			printf(" [EN] Set Luggage Flag  \n");
 802418a:	480d      	ldr	r0, [pc, #52]	; (80241c0 <CheckPassReadySwing+0x188>)
 802418c:	f005 f92e 	bl	80293ec <printf_>
		}
	}
}
 8024190:	bf00      	nop
 8024192:	bd80      	pop	{r7, pc}
 8024194:	2400041a 	.word	0x2400041a
 8024198:	24000490 	.word	0x24000490
 802419c:	240003fe 	.word	0x240003fe
 80241a0:	240003f4 	.word	0x240003f4
 80241a4:	08032328 	.word	0x08032328
 80241a8:	240003ff 	.word	0x240003ff
 80241ac:	24000403 	.word	0x24000403
 80241b0:	0803233c 	.word	0x0803233c
 80241b4:	24000419 	.word	0x24000419
 80241b8:	08032354 	.word	0x08032354
 80241bc:	24000402 	.word	0x24000402
 80241c0:	08032368 	.word	0x08032368

080241c4 <CheckPassingSwing>:

void CheckPassingSwing(void)
{
 80241c4:	b580      	push	{r7, lr}
 80241c6:	af00      	add	r7, sp, #0
	// To prevent the counter-enter, I utilize two boolean variable "isPassReady" and "isPassOver"
	if (isPassReady_EN)
 80241c8:	4b97      	ldr	r3, [pc, #604]	; (8024428 <CheckPassingSwing+0x264>)
 80241ca:	781b      	ldrb	r3, [r3, #0]
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	f000 80a5 	beq.w	802431c <CheckPassingSwing+0x158>
	{
		if (isPassOver_EN)
 80241d2:	4b96      	ldr	r3, [pc, #600]	; (802442c <CheckPassingSwing+0x268>)
 80241d4:	781b      	ldrb	r3, [r3, #0]
 80241d6:	2b00      	cmp	r3, #0
 80241d8:	d078      	beq.n	80242cc <CheckPassingSwing+0x108>
		{
			if (psenNewSwing.b.s09 && psenNewSwing.b.s10)
 80241da:	4b95      	ldr	r3, [pc, #596]	; (8024430 <CheckPassingSwing+0x26c>)
 80241dc:	785b      	ldrb	r3, [r3, #1]
 80241de:	f003 0301 	and.w	r3, r3, #1
 80241e2:	b2db      	uxtb	r3, r3
 80241e4:	2b00      	cmp	r3, #0
 80241e6:	f000 8099 	beq.w	802431c <CheckPassingSwing+0x158>
 80241ea:	4b91      	ldr	r3, [pc, #580]	; (8024430 <CheckPassingSwing+0x26c>)
 80241ec:	785b      	ldrb	r3, [r3, #1]
 80241ee:	f003 0302 	and.w	r3, r3, #2
 80241f2:	b2db      	uxtb	r3, r3
 80241f4:	2b00      	cmp	r3, #0
 80241f6:	f000 8091 	beq.w	802431c <CheckPassingSwing+0x158>
			{
				printf(" [EN] Pass over [%d]\n", gGCUStatus.bAuthCount_EN);
 80241fa:	4b8e      	ldr	r3, [pc, #568]	; (8024434 <CheckPassingSwing+0x270>)
 80241fc:	791b      	ldrb	r3, [r3, #4]
 80241fe:	b2db      	uxtb	r3, r3
 8024200:	4619      	mov	r1, r3
 8024202:	488d      	ldr	r0, [pc, #564]	; (8024438 <CheckPassingSwing+0x274>)
 8024204:	f005 f8f2 	bl	80293ec <printf_>
				isPassReady_EN = FALSE;
 8024208:	4b87      	ldr	r3, [pc, #540]	; (8024428 <CheckPassingSwing+0x264>)
 802420a:	2200      	movs	r2, #0
 802420c:	701a      	strb	r2, [r3, #0]
				isPassOver_EN = FALSE;
 802420e:	4b87      	ldr	r3, [pc, #540]	; (802442c <CheckPassingSwing+0x268>)
 8024210:	2200      	movs	r2, #0
 8024212:	701a      	strb	r2, [r3, #0]

				if (gGCUStatus.bAuthCount_EN == 1)
 8024214:	4b87      	ldr	r3, [pc, #540]	; (8024434 <CheckPassingSwing+0x270>)
 8024216:	791b      	ldrb	r3, [r3, #4]
 8024218:	b2db      	uxtb	r3, r3
 802421a:	2b01      	cmp	r3, #1
 802421c:	d144      	bne.n	80242a8 <CheckPassingSwing+0xe4>
				{
					if (psenNewSwing.section.upper_EN)
 802421e:	4b84      	ldr	r3, [pc, #528]	; (8024430 <CheckPassingSwing+0x26c>)
 8024220:	781b      	ldrb	r3, [r3, #0]
 8024222:	f003 030c 	and.w	r3, r3, #12
 8024226:	b2db      	uxtb	r3, r3
 8024228:	2b00      	cmp	r3, #0
 802422a:	d02c      	beq.n	8024286 <CheckPassingSwing+0xc2>
					{
						isPassReady_EN = TRUE;
 802422c:	4b7e      	ldr	r3, [pc, #504]	; (8024428 <CheckPassingSwing+0x264>)
 802422e:	2201      	movs	r2, #1
 8024230:	701a      	strb	r2, [r3, #0]
						isPassOver_EN = TRUE;
 8024232:	4b7e      	ldr	r3, [pc, #504]	; (802442c <CheckPassingSwing+0x268>)
 8024234:	2201      	movs	r2, #1
 8024236:	701a      	strb	r2, [r3, #0]

						if (!psenNewSwing.b.s13 && !psenNewSwing.b.s14 && !psenNewSwing.b.s15)
 8024238:	4b7d      	ldr	r3, [pc, #500]	; (8024430 <CheckPassingSwing+0x26c>)
 802423a:	785b      	ldrb	r3, [r3, #1]
 802423c:	f003 0310 	and.w	r3, r3, #16
 8024240:	b2db      	uxtb	r3, r3
 8024242:	2b00      	cmp	r3, #0
 8024244:	d16a      	bne.n	802431c <CheckPassingSwing+0x158>
 8024246:	4b7a      	ldr	r3, [pc, #488]	; (8024430 <CheckPassingSwing+0x26c>)
 8024248:	785b      	ldrb	r3, [r3, #1]
 802424a:	f003 0320 	and.w	r3, r3, #32
 802424e:	b2db      	uxtb	r3, r3
 8024250:	2b00      	cmp	r3, #0
 8024252:	d163      	bne.n	802431c <CheckPassingSwing+0x158>
 8024254:	4b76      	ldr	r3, [pc, #472]	; (8024430 <CheckPassingSwing+0x26c>)
 8024256:	785b      	ldrb	r3, [r3, #1]
 8024258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802425c:	b2db      	uxtb	r3, r3
 802425e:	2b00      	cmp	r3, #0
 8024260:	d15c      	bne.n	802431c <CheckPassingSwing+0x158>
						{
							if (gGCUStatus.IllegalPass.b.nTailgating_EN == FLG_OFF && timerTgFilter.fStart == FALSE)
 8024262:	4b74      	ldr	r3, [pc, #464]	; (8024434 <CheckPassingSwing+0x270>)
 8024264:	7f1b      	ldrb	r3, [r3, #28]
 8024266:	f003 0301 	and.w	r3, r3, #1
 802426a:	b2db      	uxtb	r3, r3
 802426c:	2b00      	cmp	r3, #0
 802426e:	d155      	bne.n	802431c <CheckPassingSwing+0x158>
 8024270:	4b72      	ldr	r3, [pc, #456]	; (802443c <CheckPassingSwing+0x278>)
 8024272:	781b      	ldrb	r3, [r3, #0]
 8024274:	f083 0301 	eor.w	r3, r3, #1
 8024278:	b2db      	uxtb	r3, r3
 802427a:	2b00      	cmp	r3, #0
 802427c:	d04e      	beq.n	802431c <CheckPassingSwing+0x158>
							{
								SetTimer(&timerTgFilter);
 802427e:	486f      	ldr	r0, [pc, #444]	; (802443c <CheckPassingSwing+0x278>)
 8024280:	f00c f8fe 	bl	8030480 <SetTimer>
 8024284:	e04a      	b.n	802431c <CheckPassingSwing+0x158>
							}
						}
					}
					else
					{
						gGCUStatus.bAuthCount_EN--;
 8024286:	4b6b      	ldr	r3, [pc, #428]	; (8024434 <CheckPassingSwing+0x270>)
 8024288:	791b      	ldrb	r3, [r3, #4]
 802428a:	b2db      	uxtb	r3, r3
 802428c:	3b01      	subs	r3, #1
 802428e:	b2da      	uxtb	r2, r3
 8024290:	4b68      	ldr	r3, [pc, #416]	; (8024434 <CheckPassingSwing+0x270>)
 8024292:	711a      	strb	r2, [r3, #4]
						SetTimer(&timerCloseWait);
 8024294:	486a      	ldr	r0, [pc, #424]	; (8024440 <CheckPassingSwing+0x27c>)
 8024296:	f00c f8f3 	bl	8030480 <SetTimer>
						ResetTimer(&timerAuthorize);
 802429a:	486a      	ldr	r0, [pc, #424]	; (8024444 <CheckPassingSwing+0x280>)
 802429c:	f00c f904 	bl	80304a8 <ResetTimer>
						printf(" [EN] Barrier close \n");
 80242a0:	4869      	ldr	r0, [pc, #420]	; (8024448 <CheckPassingSwing+0x284>)
 80242a2:	f005 f8a3 	bl	80293ec <printf_>
 80242a6:	e039      	b.n	802431c <CheckPassingSwing+0x158>
					}
				}
				else if (gGCUStatus.bAuthCount_EN > 1)
 80242a8:	4b62      	ldr	r3, [pc, #392]	; (8024434 <CheckPassingSwing+0x270>)
 80242aa:	791b      	ldrb	r3, [r3, #4]
 80242ac:	b2db      	uxtb	r3, r3
 80242ae:	2b01      	cmp	r3, #1
 80242b0:	d934      	bls.n	802431c <CheckPassingSwing+0x158>
				{
					gGCUStatus.bAuthCount_EN--;
 80242b2:	4b60      	ldr	r3, [pc, #384]	; (8024434 <CheckPassingSwing+0x270>)
 80242b4:	791b      	ldrb	r3, [r3, #4]
 80242b6:	b2db      	uxtb	r3, r3
 80242b8:	3b01      	subs	r3, #1
 80242ba:	b2da      	uxtb	r2, r3
 80242bc:	4b5d      	ldr	r3, [pc, #372]	; (8024434 <CheckPassingSwing+0x270>)
 80242be:	711a      	strb	r2, [r3, #4]
					SetAuthTimer();
 80242c0:	f7fe f80e 	bl	80222e0 <SetAuthTimer>
					isPassReady_EN = TRUE;
 80242c4:	4b58      	ldr	r3, [pc, #352]	; (8024428 <CheckPassingSwing+0x264>)
 80242c6:	2201      	movs	r2, #1
 80242c8:	701a      	strb	r2, [r3, #0]
 80242ca:	e027      	b.n	802431c <CheckPassingSwing+0x158>
				}
			}
		}
		else
		{
			if (!psenNewSwing.b.s13 && psenNewSwing.dirEntry.lower)
 80242cc:	4b58      	ldr	r3, [pc, #352]	; (8024430 <CheckPassingSwing+0x26c>)
 80242ce:	785b      	ldrb	r3, [r3, #1]
 80242d0:	f003 0310 	and.w	r3, r3, #16
 80242d4:	b2db      	uxtb	r3, r3
 80242d6:	2b00      	cmp	r3, #0
 80242d8:	d120      	bne.n	802431c <CheckPassingSwing+0x158>
 80242da:	4b55      	ldr	r3, [pc, #340]	; (8024430 <CheckPassingSwing+0x26c>)
 80242dc:	785b      	ldrb	r3, [r3, #1]
 80242de:	f023 030f 	bic.w	r3, r3, #15
 80242e2:	b2db      	uxtb	r3, r3
 80242e4:	2b00      	cmp	r3, #0
 80242e6:	d019      	beq.n	802431c <CheckPassingSwing+0x158>
			{
				printf(" [EN] passing before \n");
 80242e8:	4858      	ldr	r0, [pc, #352]	; (802444c <CheckPassingSwing+0x288>)
 80242ea:	f005 f87f 	bl	80293ec <printf_>

				if (gGCUStatus.bAuthCount_EN || gGCUStatus.IllegalPass.b.nTailgating_EN == FLG_SET)
 80242ee:	4b51      	ldr	r3, [pc, #324]	; (8024434 <CheckPassingSwing+0x270>)
 80242f0:	791b      	ldrb	r3, [r3, #4]
 80242f2:	b2db      	uxtb	r3, r3
 80242f4:	2b00      	cmp	r3, #0
 80242f6:	d106      	bne.n	8024306 <CheckPassingSwing+0x142>
 80242f8:	4b4e      	ldr	r3, [pc, #312]	; (8024434 <CheckPassingSwing+0x270>)
 80242fa:	7f1b      	ldrb	r3, [r3, #28]
 80242fc:	f003 0301 	and.w	r3, r3, #1
 8024300:	b2db      	uxtb	r3, r3
 8024302:	2b00      	cmp	r3, #0
 8024304:	d00a      	beq.n	802431c <CheckPassingSwing+0x158>
				{
					isPassOver_EN = TRUE;
 8024306:	4b49      	ldr	r3, [pc, #292]	; (802442c <CheckPassingSwing+0x268>)
 8024308:	2201      	movs	r2, #1
 802430a:	701a      	strb	r2, [r3, #0]
					gGCUStatus.PassageAlarm.b.nPassOverFromEN = ON;
 802430c:	4a49      	ldr	r2, [pc, #292]	; (8024434 <CheckPassingSwing+0x270>)
 802430e:	7a13      	ldrb	r3, [r2, #8]
 8024310:	f043 0308 	orr.w	r3, r3, #8
 8024314:	7213      	strb	r3, [r2, #8]
					printf(" [EN] passing \n");
 8024316:	484e      	ldr	r0, [pc, #312]	; (8024450 <CheckPassingSwing+0x28c>)
 8024318:	f005 f868 	bl	80293ec <printf_>
				}
			}
		}
	}

	if (isPassReady_EX)
 802431c:	4b4d      	ldr	r3, [pc, #308]	; (8024454 <CheckPassingSwing+0x290>)
 802431e:	781b      	ldrb	r3, [r3, #0]
 8024320:	2b00      	cmp	r3, #0
 8024322:	f000 80c7 	beq.w	80244b4 <CheckPassingSwing+0x2f0>
	{
		if (isPassOver_EX)
 8024326:	4b4c      	ldr	r3, [pc, #304]	; (8024458 <CheckPassingSwing+0x294>)
 8024328:	781b      	ldrb	r3, [r3, #0]
 802432a:	2b00      	cmp	r3, #0
 802432c:	f000 809a 	beq.w	8024464 <CheckPassingSwing+0x2a0>
		{
			if (psenNewSwing.b.s01 && psenNewSwing.b.s02)
 8024330:	4b3f      	ldr	r3, [pc, #252]	; (8024430 <CheckPassingSwing+0x26c>)
 8024332:	781b      	ldrb	r3, [r3, #0]
 8024334:	f003 0301 	and.w	r3, r3, #1
 8024338:	b2db      	uxtb	r3, r3
 802433a:	2b00      	cmp	r3, #0
 802433c:	f000 80ba 	beq.w	80244b4 <CheckPassingSwing+0x2f0>
 8024340:	4b3b      	ldr	r3, [pc, #236]	; (8024430 <CheckPassingSwing+0x26c>)
 8024342:	781b      	ldrb	r3, [r3, #0]
 8024344:	f003 0302 	and.w	r3, r3, #2
 8024348:	b2db      	uxtb	r3, r3
 802434a:	2b00      	cmp	r3, #0
 802434c:	f000 80b2 	beq.w	80244b4 <CheckPassingSwing+0x2f0>
			{
				printf(" [EX] Pass over [%d]\n", gGCUStatus.bAuthCount_EX);
 8024350:	4b38      	ldr	r3, [pc, #224]	; (8024434 <CheckPassingSwing+0x270>)
 8024352:	795b      	ldrb	r3, [r3, #5]
 8024354:	b2db      	uxtb	r3, r3
 8024356:	4619      	mov	r1, r3
 8024358:	4840      	ldr	r0, [pc, #256]	; (802445c <CheckPassingSwing+0x298>)
 802435a:	f005 f847 	bl	80293ec <printf_>
				isPassReady_EX = FALSE;
 802435e:	4b3d      	ldr	r3, [pc, #244]	; (8024454 <CheckPassingSwing+0x290>)
 8024360:	2200      	movs	r2, #0
 8024362:	701a      	strb	r2, [r3, #0]
				isPassOver_EX = FALSE;
 8024364:	4b3c      	ldr	r3, [pc, #240]	; (8024458 <CheckPassingSwing+0x294>)
 8024366:	2200      	movs	r2, #0
 8024368:	701a      	strb	r2, [r3, #0]

				if (gGCUStatus.bAuthCount_EX == 1)
 802436a:	4b32      	ldr	r3, [pc, #200]	; (8024434 <CheckPassingSwing+0x270>)
 802436c:	795b      	ldrb	r3, [r3, #5]
 802436e:	b2db      	uxtb	r3, r3
 8024370:	2b01      	cmp	r3, #1
 8024372:	d146      	bne.n	8024402 <CheckPassingSwing+0x23e>
				{
					if (psenNewSwing.section.upper_EX)
 8024374:	4b2e      	ldr	r3, [pc, #184]	; (8024430 <CheckPassingSwing+0x26c>)
 8024376:	785b      	ldrb	r3, [r3, #1]
 8024378:	f003 030c 	and.w	r3, r3, #12
 802437c:	b2db      	uxtb	r3, r3
 802437e:	2b00      	cmp	r3, #0
 8024380:	d02e      	beq.n	80243e0 <CheckPassingSwing+0x21c>
					{
						isPassReady_EX = TRUE;
 8024382:	4b34      	ldr	r3, [pc, #208]	; (8024454 <CheckPassingSwing+0x290>)
 8024384:	2201      	movs	r2, #1
 8024386:	701a      	strb	r2, [r3, #0]
						isPassOver_EX = TRUE;
 8024388:	4b33      	ldr	r3, [pc, #204]	; (8024458 <CheckPassingSwing+0x294>)
 802438a:	2201      	movs	r2, #1
 802438c:	701a      	strb	r2, [r3, #0]

						if (!psenNewSwing.b.s05 && !psenNewSwing.b.s06 && !psenNewSwing.b.s07)
 802438e:	4b28      	ldr	r3, [pc, #160]	; (8024430 <CheckPassingSwing+0x26c>)
 8024390:	781b      	ldrb	r3, [r3, #0]
 8024392:	f003 0310 	and.w	r3, r3, #16
 8024396:	b2db      	uxtb	r3, r3
 8024398:	2b00      	cmp	r3, #0
 802439a:	f040 808b 	bne.w	80244b4 <CheckPassingSwing+0x2f0>
 802439e:	4b24      	ldr	r3, [pc, #144]	; (8024430 <CheckPassingSwing+0x26c>)
 80243a0:	781b      	ldrb	r3, [r3, #0]
 80243a2:	f003 0320 	and.w	r3, r3, #32
 80243a6:	b2db      	uxtb	r3, r3
 80243a8:	2b00      	cmp	r3, #0
 80243aa:	f040 8083 	bne.w	80244b4 <CheckPassingSwing+0x2f0>
 80243ae:	4b20      	ldr	r3, [pc, #128]	; (8024430 <CheckPassingSwing+0x26c>)
 80243b0:	781b      	ldrb	r3, [r3, #0]
 80243b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80243b6:	b2db      	uxtb	r3, r3
 80243b8:	2b00      	cmp	r3, #0
 80243ba:	d17b      	bne.n	80244b4 <CheckPassingSwing+0x2f0>
						{ // If not detected on the upper sensors, no tailgating
							if (gGCUStatus.IllegalPass.b.nTailgating_EX == FLG_OFF && timerTgFilter.fStart == FALSE)
 80243bc:	4b1d      	ldr	r3, [pc, #116]	; (8024434 <CheckPassingSwing+0x270>)
 80243be:	7f1b      	ldrb	r3, [r3, #28]
 80243c0:	f003 0310 	and.w	r3, r3, #16
 80243c4:	b2db      	uxtb	r3, r3
 80243c6:	2b00      	cmp	r3, #0
 80243c8:	d174      	bne.n	80244b4 <CheckPassingSwing+0x2f0>
 80243ca:	4b1c      	ldr	r3, [pc, #112]	; (802443c <CheckPassingSwing+0x278>)
 80243cc:	781b      	ldrb	r3, [r3, #0]
 80243ce:	f083 0301 	eor.w	r3, r3, #1
 80243d2:	b2db      	uxtb	r3, r3
 80243d4:	2b00      	cmp	r3, #0
 80243d6:	d06d      	beq.n	80244b4 <CheckPassingSwing+0x2f0>
							{
								SetTimer(&timerTgFilter);
 80243d8:	4818      	ldr	r0, [pc, #96]	; (802443c <CheckPassingSwing+0x278>)
 80243da:	f00c f851 	bl	8030480 <SetTimer>
					printf(" [EX] passing\n");
				}
			}
		}
	}
}
 80243de:	e069      	b.n	80244b4 <CheckPassingSwing+0x2f0>
						gGCUStatus.bAuthCount_EX--;
 80243e0:	4b14      	ldr	r3, [pc, #80]	; (8024434 <CheckPassingSwing+0x270>)
 80243e2:	795b      	ldrb	r3, [r3, #5]
 80243e4:	b2db      	uxtb	r3, r3
 80243e6:	3b01      	subs	r3, #1
 80243e8:	b2da      	uxtb	r2, r3
 80243ea:	4b12      	ldr	r3, [pc, #72]	; (8024434 <CheckPassingSwing+0x270>)
 80243ec:	715a      	strb	r2, [r3, #5]
						SetTimer(&timerCloseWait);
 80243ee:	4814      	ldr	r0, [pc, #80]	; (8024440 <CheckPassingSwing+0x27c>)
 80243f0:	f00c f846 	bl	8030480 <SetTimer>
						ResetTimer(&timerAuthorize);
 80243f4:	4813      	ldr	r0, [pc, #76]	; (8024444 <CheckPassingSwing+0x280>)
 80243f6:	f00c f857 	bl	80304a8 <ResetTimer>
						printf(" [EX] Barrier close \n");
 80243fa:	4819      	ldr	r0, [pc, #100]	; (8024460 <CheckPassingSwing+0x29c>)
 80243fc:	f004 fff6 	bl	80293ec <printf_>
}
 8024400:	e058      	b.n	80244b4 <CheckPassingSwing+0x2f0>
				else if (gGCUStatus.bAuthCount_EX > 1)
 8024402:	4b0c      	ldr	r3, [pc, #48]	; (8024434 <CheckPassingSwing+0x270>)
 8024404:	795b      	ldrb	r3, [r3, #5]
 8024406:	b2db      	uxtb	r3, r3
 8024408:	2b01      	cmp	r3, #1
 802440a:	d953      	bls.n	80244b4 <CheckPassingSwing+0x2f0>
					gGCUStatus.bAuthCount_EX--;
 802440c:	4b09      	ldr	r3, [pc, #36]	; (8024434 <CheckPassingSwing+0x270>)
 802440e:	795b      	ldrb	r3, [r3, #5]
 8024410:	b2db      	uxtb	r3, r3
 8024412:	3b01      	subs	r3, #1
 8024414:	b2da      	uxtb	r2, r3
 8024416:	4b07      	ldr	r3, [pc, #28]	; (8024434 <CheckPassingSwing+0x270>)
 8024418:	715a      	strb	r2, [r3, #5]
					SetAuthTimer();
 802441a:	f7fd ff61 	bl	80222e0 <SetAuthTimer>
					isPassReady_EX = TRUE;
 802441e:	4b0d      	ldr	r3, [pc, #52]	; (8024454 <CheckPassingSwing+0x290>)
 8024420:	2201      	movs	r2, #1
 8024422:	701a      	strb	r2, [r3, #0]
}
 8024424:	e046      	b.n	80244b4 <CheckPassingSwing+0x2f0>
 8024426:	bf00      	nop
 8024428:	240003fe 	.word	0x240003fe
 802442c:	24000400 	.word	0x24000400
 8024430:	240003f4 	.word	0x240003f4
 8024434:	24000490 	.word	0x24000490
 8024438:	08032384 	.word	0x08032384
 802443c:	24000244 	.word	0x24000244
 8024440:	2400022c 	.word	0x2400022c
 8024444:	24000160 	.word	0x24000160
 8024448:	0803239c 	.word	0x0803239c
 802444c:	080323b4 	.word	0x080323b4
 8024450:	080323cc 	.word	0x080323cc
 8024454:	240003ff 	.word	0x240003ff
 8024458:	24000401 	.word	0x24000401
 802445c:	080323dc 	.word	0x080323dc
 8024460:	080323f4 	.word	0x080323f4
			if (!psenNewSwing.b.s05 && psenNewSwing.dirExit.lower)
 8024464:	4b14      	ldr	r3, [pc, #80]	; (80244b8 <CheckPassingSwing+0x2f4>)
 8024466:	781b      	ldrb	r3, [r3, #0]
 8024468:	f003 0310 	and.w	r3, r3, #16
 802446c:	b2db      	uxtb	r3, r3
 802446e:	2b00      	cmp	r3, #0
 8024470:	d120      	bne.n	80244b4 <CheckPassingSwing+0x2f0>
 8024472:	4b11      	ldr	r3, [pc, #68]	; (80244b8 <CheckPassingSwing+0x2f4>)
 8024474:	781b      	ldrb	r3, [r3, #0]
 8024476:	f023 030f 	bic.w	r3, r3, #15
 802447a:	b2db      	uxtb	r3, r3
 802447c:	2b00      	cmp	r3, #0
 802447e:	d019      	beq.n	80244b4 <CheckPassingSwing+0x2f0>
				printf(" [EX] passing before \n");
 8024480:	480e      	ldr	r0, [pc, #56]	; (80244bc <CheckPassingSwing+0x2f8>)
 8024482:	f004 ffb3 	bl	80293ec <printf_>
				if (gGCUStatus.bAuthCount_EX || gGCUStatus.IllegalPass.b.nTailgating_EX == FLG_SET)
 8024486:	4b0e      	ldr	r3, [pc, #56]	; (80244c0 <CheckPassingSwing+0x2fc>)
 8024488:	795b      	ldrb	r3, [r3, #5]
 802448a:	b2db      	uxtb	r3, r3
 802448c:	2b00      	cmp	r3, #0
 802448e:	d106      	bne.n	802449e <CheckPassingSwing+0x2da>
 8024490:	4b0b      	ldr	r3, [pc, #44]	; (80244c0 <CheckPassingSwing+0x2fc>)
 8024492:	7f1b      	ldrb	r3, [r3, #28]
 8024494:	f003 0310 	and.w	r3, r3, #16
 8024498:	b2db      	uxtb	r3, r3
 802449a:	2b00      	cmp	r3, #0
 802449c:	d00a      	beq.n	80244b4 <CheckPassingSwing+0x2f0>
					isPassOver_EX = TRUE;
 802449e:	4b09      	ldr	r3, [pc, #36]	; (80244c4 <CheckPassingSwing+0x300>)
 80244a0:	2201      	movs	r2, #1
 80244a2:	701a      	strb	r2, [r3, #0]
					gGCUStatus.PassageAlarm.b.nPassOverFromEX = ON;
 80244a4:	4a06      	ldr	r2, [pc, #24]	; (80244c0 <CheckPassingSwing+0x2fc>)
 80244a6:	7a13      	ldrb	r3, [r2, #8]
 80244a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80244ac:	7213      	strb	r3, [r2, #8]
					printf(" [EX] passing\n");
 80244ae:	4806      	ldr	r0, [pc, #24]	; (80244c8 <CheckPassingSwing+0x304>)
 80244b0:	f004 ff9c 	bl	80293ec <printf_>
}
 80244b4:	bf00      	nop
 80244b6:	bd80      	pop	{r7, pc}
 80244b8:	240003f4 	.word	0x240003f4
 80244bc:	0803240c 	.word	0x0803240c
 80244c0:	24000490 	.word	0x24000490
 80244c4:	24000401 	.word	0x24000401
 80244c8:	08032424 	.word	0x08032424

080244cc <CheckCounterEnterTimer>:

void CheckCounterEnterTimer(void)
{
 80244cc:	b580      	push	{r7, lr}
 80244ce:	af00      	add	r7, sp, #0
	if (timerInverseEnter.fStart)
 80244d0:	4b2f      	ldr	r3, [pc, #188]	; (8024590 <CheckCounterEnterTimer+0xc4>)
 80244d2:	781b      	ldrb	r3, [r3, #0]
 80244d4:	2b00      	cmp	r3, #0
 80244d6:	d058      	beq.n	802458a <CheckCounterEnterTimer+0xbe>
	{
		if (IsTimeout(&timerInverseEnter, dwInverseCloseTime * TICK_COUNT_100MS))
 80244d8:	4b2e      	ldr	r3, [pc, #184]	; (8024594 <CheckCounterEnterTimer+0xc8>)
 80244da:	681b      	ldr	r3, [r3, #0]
 80244dc:	2264      	movs	r2, #100	; 0x64
 80244de:	fb02 f303 	mul.w	r3, r2, r3
 80244e2:	4619      	mov	r1, r3
 80244e4:	482a      	ldr	r0, [pc, #168]	; (8024590 <CheckCounterEnterTimer+0xc4>)
 80244e6:	f00b ffed 	bl	80304c4 <IsTimeout>
 80244ea:	4603      	mov	r3, r0
 80244ec:	2b00      	cmp	r3, #0
 80244ee:	d04c      	beq.n	802458a <CheckCounterEnterTimer+0xbe>
		{
			ResetTimer(&timerInverseEnter);
 80244f0:	4827      	ldr	r0, [pc, #156]	; (8024590 <CheckCounterEnterTimer+0xc4>)
 80244f2:	f00b ffd9 	bl	80304a8 <ResetTimer>

			if (gGCUStatus.IllegalPass.b.nCounter_EN == FLG_SET)
 80244f6:	4b28      	ldr	r3, [pc, #160]	; (8024598 <CheckCounterEnterTimer+0xcc>)
 80244f8:	7f1b      	ldrb	r3, [r3, #28]
 80244fa:	f003 0308 	and.w	r3, r3, #8
 80244fe:	b2db      	uxtb	r3, r3
 8024500:	2b00      	cmp	r3, #0
 8024502:	d01d      	beq.n	8024540 <CheckCounterEnterTimer+0x74>
			{
				if (psenNewSwing.section.enter_EX || psenNewSwing.section.lower_EX)
 8024504:	4b25      	ldr	r3, [pc, #148]	; (802459c <CheckCounterEnterTimer+0xd0>)
 8024506:	785b      	ldrb	r3, [r3, #1]
 8024508:	f003 0303 	and.w	r3, r3, #3
 802450c:	b2db      	uxtb	r3, r3
 802450e:	2b00      	cmp	r3, #0
 8024510:	d106      	bne.n	8024520 <CheckCounterEnterTimer+0x54>
 8024512:	4b22      	ldr	r3, [pc, #136]	; (802459c <CheckCounterEnterTimer+0xd0>)
 8024514:	785b      	ldrb	r3, [r3, #1]
 8024516:	f023 030f 	bic.w	r3, r3, #15
 802451a:	b2db      	uxtb	r3, r3
 802451c:	2b00      	cmp	r3, #0
 802451e:	d006      	beq.n	802452e <CheckCounterEnterTimer+0x62>
				{
					StopBarrierForSwing(TRUE);
 8024520:	2001      	movs	r0, #1
 8024522:	f7fe ffe9 	bl	80234f8 <StopBarrierForSwing>
					SetTimer(&timerInverseEnter);
 8024526:	481a      	ldr	r0, [pc, #104]	; (8024590 <CheckCounterEnterTimer+0xc4>)
 8024528:	f00b ffaa 	bl	8030480 <SetTimer>
 802452c:	e02d      	b.n	802458a <CheckCounterEnterTimer+0xbe>
				}
				else
				{
					StopBarrierForSwing(FALSE);
 802452e:	2000      	movs	r0, #0
 8024530:	f7fe ffe2 	bl	80234f8 <StopBarrierForSwing>
					Brr_CloseBarrier();
 8024534:	f7fc f8fc 	bl	8020730 <Brr_CloseBarrier>
					isCounterEnter = FALSE;
 8024538:	4b19      	ldr	r3, [pc, #100]	; (80245a0 <CheckCounterEnterTimer+0xd4>)
 802453a:	2200      	movs	r2, #0
 802453c:	701a      	strb	r2, [r3, #0]
					isCounterEnter = FALSE;
				}
			}
		}
	}
}
 802453e:	e024      	b.n	802458a <CheckCounterEnterTimer+0xbe>
			else if (gGCUStatus.IllegalPass.b.nCounter_EX == FLG_SET)
 8024540:	4b15      	ldr	r3, [pc, #84]	; (8024598 <CheckCounterEnterTimer+0xcc>)
 8024542:	7f1b      	ldrb	r3, [r3, #28]
 8024544:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8024548:	b2db      	uxtb	r3, r3
 802454a:	2b00      	cmp	r3, #0
 802454c:	d01d      	beq.n	802458a <CheckCounterEnterTimer+0xbe>
				if (psenNewSwing.section.enter_EN || psenNewSwing.section.lower_EN)
 802454e:	4b13      	ldr	r3, [pc, #76]	; (802459c <CheckCounterEnterTimer+0xd0>)
 8024550:	781b      	ldrb	r3, [r3, #0]
 8024552:	f003 0303 	and.w	r3, r3, #3
 8024556:	b2db      	uxtb	r3, r3
 8024558:	2b00      	cmp	r3, #0
 802455a:	d106      	bne.n	802456a <CheckCounterEnterTimer+0x9e>
 802455c:	4b0f      	ldr	r3, [pc, #60]	; (802459c <CheckCounterEnterTimer+0xd0>)
 802455e:	781b      	ldrb	r3, [r3, #0]
 8024560:	f023 030f 	bic.w	r3, r3, #15
 8024564:	b2db      	uxtb	r3, r3
 8024566:	2b00      	cmp	r3, #0
 8024568:	d006      	beq.n	8024578 <CheckCounterEnterTimer+0xac>
					StopBarrierForSwing(TRUE);
 802456a:	2001      	movs	r0, #1
 802456c:	f7fe ffc4 	bl	80234f8 <StopBarrierForSwing>
					SetTimer(&timerInverseEnter);
 8024570:	4807      	ldr	r0, [pc, #28]	; (8024590 <CheckCounterEnterTimer+0xc4>)
 8024572:	f00b ff85 	bl	8030480 <SetTimer>
 8024576:	e008      	b.n	802458a <CheckCounterEnterTimer+0xbe>
					StopBarrierForSwing(FALSE);
 8024578:	2000      	movs	r0, #0
 802457a:	f7fe ffbd 	bl	80234f8 <StopBarrierForSwing>
					Brr_CloseBarrier();
 802457e:	f7fc f8d7 	bl	8020730 <Brr_CloseBarrier>
					isCounterEnter = FALSE;
 8024582:	4b07      	ldr	r3, [pc, #28]	; (80245a0 <CheckCounterEnterTimer+0xd4>)
 8024584:	2200      	movs	r2, #0
 8024586:	701a      	strb	r2, [r3, #0]
}
 8024588:	e7ff      	b.n	802458a <CheckCounterEnterTimer+0xbe>
 802458a:	bf00      	nop
 802458c:	bd80      	pop	{r7, pc}
 802458e:	bf00      	nop
 8024590:	24000214 	.word	0x24000214
 8024594:	24000014 	.word	0x24000014
 8024598:	24000490 	.word	0x24000490
 802459c:	240003f4 	.word	0x240003f4
 80245a0:	24000406 	.word	0x24000406

080245a4 <CheckIllegalEnter>:

void CheckIllegalEnter(void)
{
 80245a4:	b580      	push	{r7, lr}
 80245a6:	af00      	add	r7, sp, #0
	if (gisEntryPassenger && gGCUStatus.PassageAlarm.b.nPassOverFromEX != ON)
 80245a8:	4b4d      	ldr	r3, [pc, #308]	; (80246e0 <CheckIllegalEnter+0x13c>)
 80245aa:	781b      	ldrb	r3, [r3, #0]
 80245ac:	2b00      	cmp	r3, #0
 80245ae:	d048      	beq.n	8024642 <CheckIllegalEnter+0x9e>
 80245b0:	4b4c      	ldr	r3, [pc, #304]	; (80246e4 <CheckIllegalEnter+0x140>)
 80245b2:	7a1b      	ldrb	r3, [r3, #8]
 80245b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80245b8:	b2db      	uxtb	r3, r3
 80245ba:	2b00      	cmp	r3, #0
 80245bc:	d141      	bne.n	8024642 <CheckIllegalEnter+0x9e>
	{
		if (gGCUStatus.bAuthCount_EX)
 80245be:	4b49      	ldr	r3, [pc, #292]	; (80246e4 <CheckIllegalEnter+0x140>)
 80245c0:	795b      	ldrb	r3, [r3, #5]
 80245c2:	b2db      	uxtb	r3, r3
 80245c4:	2b00      	cmp	r3, #0
 80245c6:	d034      	beq.n	8024632 <CheckIllegalEnter+0x8e>
		{
			if (gGCUStatus.IllegalPass.b.nCounter_EX == FLG_OFF && isPassReady_EX == FALSE && psenNewSwing.b.s02)
 80245c8:	4b46      	ldr	r3, [pc, #280]	; (80246e4 <CheckIllegalEnter+0x140>)
 80245ca:	7f1b      	ldrb	r3, [r3, #28]
 80245cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80245d0:	b2db      	uxtb	r3, r3
 80245d2:	2b00      	cmp	r3, #0
 80245d4:	d135      	bne.n	8024642 <CheckIllegalEnter+0x9e>
 80245d6:	4b44      	ldr	r3, [pc, #272]	; (80246e8 <CheckIllegalEnter+0x144>)
 80245d8:	781b      	ldrb	r3, [r3, #0]
 80245da:	f083 0301 	eor.w	r3, r3, #1
 80245de:	b2db      	uxtb	r3, r3
 80245e0:	2b00      	cmp	r3, #0
 80245e2:	d02e      	beq.n	8024642 <CheckIllegalEnter+0x9e>
 80245e4:	4b41      	ldr	r3, [pc, #260]	; (80246ec <CheckIllegalEnter+0x148>)
 80245e6:	781b      	ldrb	r3, [r3, #0]
 80245e8:	f003 0302 	and.w	r3, r3, #2
 80245ec:	b2db      	uxtb	r3, r3
 80245ee:	2b00      	cmp	r3, #0
 80245f0:	d027      	beq.n	8024642 <CheckIllegalEnter+0x9e>
			{
				if (isCounterEnter == FALSE)
 80245f2:	4b3f      	ldr	r3, [pc, #252]	; (80246f0 <CheckIllegalEnter+0x14c>)
 80245f4:	781b      	ldrb	r3, [r3, #0]
 80245f6:	f083 0301 	eor.w	r3, r3, #1
 80245fa:	b2db      	uxtb	r3, r3
 80245fc:	2b00      	cmp	r3, #0
 80245fe:	d020      	beq.n	8024642 <CheckIllegalEnter+0x9e>
				{
					// SetTimer(&timerInverseEnter);
					// CloseBarrierForSwing();
					isCounterEnter = TRUE;
 8024600:	4b3b      	ldr	r3, [pc, #236]	; (80246f0 <CheckIllegalEnter+0x14c>)
 8024602:	2201      	movs	r2, #1
 8024604:	701a      	strb	r2, [r3, #0]
					InhibitPass(FROM_ENTRY);
 8024606:	2001      	movs	r0, #1
 8024608:	f7fd fba4 	bl	8021d54 <InhibitPass>
					gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_COUNTER_ENTER;
 802460c:	4a35      	ldr	r2, [pc, #212]	; (80246e4 <CheckIllegalEnter+0x140>)
 802460e:	7a13      	ldrb	r3, [r2, #8]
 8024610:	2102      	movs	r1, #2
 8024612:	f361 1306 	bfi	r3, r1, #4, #3
 8024616:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nCounter_EX = FLG_SET;
 8024618:	4a32      	ldr	r2, [pc, #200]	; (80246e4 <CheckIllegalEnter+0x140>)
 802461a:	7f13      	ldrb	r3, [r2, #28]
 802461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024620:	7713      	strb	r3, [r2, #28]
					printf(" [EX] Inhibit Pass - Inverse Enter: %d \n", gGCUStatus.bAuthCount_EX);
 8024622:	4b30      	ldr	r3, [pc, #192]	; (80246e4 <CheckIllegalEnter+0x140>)
 8024624:	795b      	ldrb	r3, [r3, #5]
 8024626:	b2db      	uxtb	r3, r3
 8024628:	4619      	mov	r1, r3
 802462a:	4832      	ldr	r0, [pc, #200]	; (80246f4 <CheckIllegalEnter+0x150>)
 802462c:	f004 fede 	bl	80293ec <printf_>
 8024630:	e007      	b.n	8024642 <CheckIllegalEnter+0x9e>
				}
			}
		}
		else if (!gGCUStatus.bAuthCount_EN)
 8024632:	4b2c      	ldr	r3, [pc, #176]	; (80246e4 <CheckIllegalEnter+0x140>)
 8024634:	791b      	ldrb	r3, [r3, #4]
 8024636:	b2db      	uxtb	r3, r3
 8024638:	2b00      	cmp	r3, #0
 802463a:	d102      	bne.n	8024642 <CheckIllegalEnter+0x9e>
		{
				CheckIllegalEnterTimer(FROM_ENTRY);
 802463c:	2001      	movs	r0, #1
 802463e:	f7fd fdbd 	bl	80221bc <CheckIllegalEnterTimer>
			}
		}

	if (gisExitPassenger && gGCUStatus.PassageAlarm.b.nPassOverFromEN != ON)
 8024642:	4b2d      	ldr	r3, [pc, #180]	; (80246f8 <CheckIllegalEnter+0x154>)
 8024644:	781b      	ldrb	r3, [r3, #0]
 8024646:	2b00      	cmp	r3, #0
 8024648:	d048      	beq.n	80246dc <CheckIllegalEnter+0x138>
 802464a:	4b26      	ldr	r3, [pc, #152]	; (80246e4 <CheckIllegalEnter+0x140>)
 802464c:	7a1b      	ldrb	r3, [r3, #8]
 802464e:	f003 0308 	and.w	r3, r3, #8
 8024652:	b2db      	uxtb	r3, r3
 8024654:	2b00      	cmp	r3, #0
 8024656:	d141      	bne.n	80246dc <CheckIllegalEnter+0x138>
	{
		if (gGCUStatus.bAuthCount_EN)
 8024658:	4b22      	ldr	r3, [pc, #136]	; (80246e4 <CheckIllegalEnter+0x140>)
 802465a:	791b      	ldrb	r3, [r3, #4]
 802465c:	b2db      	uxtb	r3, r3
 802465e:	2b00      	cmp	r3, #0
 8024660:	d034      	beq.n	80246cc <CheckIllegalEnter+0x128>
		{
			if (gGCUStatus.IllegalPass.b.nCounter_EN == FLG_OFF && isPassReady_EN == FALSE && psenNewSwing.b.s12)
 8024662:	4b20      	ldr	r3, [pc, #128]	; (80246e4 <CheckIllegalEnter+0x140>)
 8024664:	7f1b      	ldrb	r3, [r3, #28]
 8024666:	f003 0308 	and.w	r3, r3, #8
 802466a:	b2db      	uxtb	r3, r3
 802466c:	2b00      	cmp	r3, #0
 802466e:	d135      	bne.n	80246dc <CheckIllegalEnter+0x138>
 8024670:	4b22      	ldr	r3, [pc, #136]	; (80246fc <CheckIllegalEnter+0x158>)
 8024672:	781b      	ldrb	r3, [r3, #0]
 8024674:	f083 0301 	eor.w	r3, r3, #1
 8024678:	b2db      	uxtb	r3, r3
 802467a:	2b00      	cmp	r3, #0
 802467c:	d02e      	beq.n	80246dc <CheckIllegalEnter+0x138>
 802467e:	4b1b      	ldr	r3, [pc, #108]	; (80246ec <CheckIllegalEnter+0x148>)
 8024680:	785b      	ldrb	r3, [r3, #1]
 8024682:	f003 0308 	and.w	r3, r3, #8
 8024686:	b2db      	uxtb	r3, r3
 8024688:	2b00      	cmp	r3, #0
 802468a:	d027      	beq.n	80246dc <CheckIllegalEnter+0x138>
			{
				if (isCounterEnter == FALSE)
 802468c:	4b18      	ldr	r3, [pc, #96]	; (80246f0 <CheckIllegalEnter+0x14c>)
 802468e:	781b      	ldrb	r3, [r3, #0]
 8024690:	f083 0301 	eor.w	r3, r3, #1
 8024694:	b2db      	uxtb	r3, r3
 8024696:	2b00      	cmp	r3, #0
 8024698:	d020      	beq.n	80246dc <CheckIllegalEnter+0x138>
				{
					// SetTimer(&timerInverseEnter);
					// CloseBarrierForSwing();
					isCounterEnter = TRUE;
 802469a:	4b15      	ldr	r3, [pc, #84]	; (80246f0 <CheckIllegalEnter+0x14c>)
 802469c:	2201      	movs	r2, #1
 802469e:	701a      	strb	r2, [r3, #0]
					InhibitPass(FROM_EXIT);
 80246a0:	2002      	movs	r0, #2
 80246a2:	f7fd fb57 	bl	8021d54 <InhibitPass>
					gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_COUNTER_ENTER;
 80246a6:	4a0f      	ldr	r2, [pc, #60]	; (80246e4 <CheckIllegalEnter+0x140>)
 80246a8:	7a13      	ldrb	r3, [r2, #8]
 80246aa:	2102      	movs	r1, #2
 80246ac:	f361 0302 	bfi	r3, r1, #0, #3
 80246b0:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nCounter_EN = FLG_SET;
 80246b2:	4a0c      	ldr	r2, [pc, #48]	; (80246e4 <CheckIllegalEnter+0x140>)
 80246b4:	7f13      	ldrb	r3, [r2, #28]
 80246b6:	f043 0308 	orr.w	r3, r3, #8
 80246ba:	7713      	strb	r3, [r2, #28]
					printf(" [EN] Inhibit Pass - Inverse Enter: %d \n", gGCUStatus.bAuthCount_EN);
 80246bc:	4b09      	ldr	r3, [pc, #36]	; (80246e4 <CheckIllegalEnter+0x140>)
 80246be:	791b      	ldrb	r3, [r3, #4]
 80246c0:	b2db      	uxtb	r3, r3
 80246c2:	4619      	mov	r1, r3
 80246c4:	480e      	ldr	r0, [pc, #56]	; (8024700 <CheckIllegalEnter+0x15c>)
 80246c6:	f004 fe91 	bl	80293ec <printf_>
		else if (!gGCUStatus.bAuthCount_EX)
		{
				CheckIllegalEnterTimer(FROM_EXIT);
			}
		}
}
 80246ca:	e007      	b.n	80246dc <CheckIllegalEnter+0x138>
		else if (!gGCUStatus.bAuthCount_EX)
 80246cc:	4b05      	ldr	r3, [pc, #20]	; (80246e4 <CheckIllegalEnter+0x140>)
 80246ce:	795b      	ldrb	r3, [r3, #5]
 80246d0:	b2db      	uxtb	r3, r3
 80246d2:	2b00      	cmp	r3, #0
 80246d4:	d102      	bne.n	80246dc <CheckIllegalEnter+0x138>
				CheckIllegalEnterTimer(FROM_EXIT);
 80246d6:	2002      	movs	r0, #2
 80246d8:	f7fd fd70 	bl	80221bc <CheckIllegalEnterTimer>
}
 80246dc:	bf00      	nop
 80246de:	bd80      	pop	{r7, pc}
 80246e0:	24000419 	.word	0x24000419
 80246e4:	24000490 	.word	0x24000490
 80246e8:	240003ff 	.word	0x240003ff
 80246ec:	240003f4 	.word	0x240003f4
 80246f0:	24000406 	.word	0x24000406
 80246f4:	08032434 	.word	0x08032434
 80246f8:	2400041a 	.word	0x2400041a
 80246fc:	240003fe 	.word	0x240003fe
 8024700:	08032460 	.word	0x08032460

08024704 <CheckTGTimerForSwing>:

void CheckTGTimerForSwing(void)
{
 8024704:	b580      	push	{r7, lr}
 8024706:	af00      	add	r7, sp, #0
	if (timerTailgatingDetection.fStart)
 8024708:	4b31      	ldr	r3, [pc, #196]	; (80247d0 <CheckTGTimerForSwing+0xcc>)
 802470a:	781b      	ldrb	r3, [r3, #0]
 802470c:	2b00      	cmp	r3, #0
 802470e:	d05c      	beq.n	80247ca <CheckTGTimerForSwing+0xc6>
	{
		if (IsTimeout(&timerTailgatingDetection, dwTgDetectionTime * TICK_COUNT_100MS)) // 1.5 s
 8024710:	4b30      	ldr	r3, [pc, #192]	; (80247d4 <CheckTGTimerForSwing+0xd0>)
 8024712:	681b      	ldr	r3, [r3, #0]
 8024714:	2264      	movs	r2, #100	; 0x64
 8024716:	fb02 f303 	mul.w	r3, r2, r3
 802471a:	4619      	mov	r1, r3
 802471c:	482c      	ldr	r0, [pc, #176]	; (80247d0 <CheckTGTimerForSwing+0xcc>)
 802471e:	f00b fed1 	bl	80304c4 <IsTimeout>
 8024722:	4603      	mov	r3, r0
 8024724:	2b00      	cmp	r3, #0
 8024726:	d050      	beq.n	80247ca <CheckTGTimerForSwing+0xc6>
		{
			ResetTimer(&timerTailgatingDetection);
 8024728:	4829      	ldr	r0, [pc, #164]	; (80247d0 <CheckTGTimerForSwing+0xcc>)
 802472a:	f00b febd 	bl	80304a8 <ResetTimer>

			if (gGCUStatus.bAuthCount_EN || gGCUStatus.bAuthCount_EX)
 802472e:	4b2a      	ldr	r3, [pc, #168]	; (80247d8 <CheckTGTimerForSwing+0xd4>)
 8024730:	791b      	ldrb	r3, [r3, #4]
 8024732:	b2db      	uxtb	r3, r3
 8024734:	2b00      	cmp	r3, #0
 8024736:	d104      	bne.n	8024742 <CheckTGTimerForSwing+0x3e>
 8024738:	4b27      	ldr	r3, [pc, #156]	; (80247d8 <CheckTGTimerForSwing+0xd4>)
 802473a:	795b      	ldrb	r3, [r3, #5]
 802473c:	b2db      	uxtb	r3, r3
 802473e:	2b00      	cmp	r3, #0
 8024740:	d043      	beq.n	80247ca <CheckTGTimerForSwing+0xc6>
			{
				if (!psenNewSwing.section.lower_EN && !psenNewSwing.section.lower_EX)
 8024742:	4b26      	ldr	r3, [pc, #152]	; (80247dc <CheckTGTimerForSwing+0xd8>)
 8024744:	781b      	ldrb	r3, [r3, #0]
 8024746:	f023 030f 	bic.w	r3, r3, #15
 802474a:	b2db      	uxtb	r3, r3
 802474c:	2b00      	cmp	r3, #0
 802474e:	d135      	bne.n	80247bc <CheckTGTimerForSwing+0xb8>
 8024750:	4b22      	ldr	r3, [pc, #136]	; (80247dc <CheckTGTimerForSwing+0xd8>)
 8024752:	785b      	ldrb	r3, [r3, #1]
 8024754:	f023 030f 	bic.w	r3, r3, #15
 8024758:	b2db      	uxtb	r3, r3
 802475a:	2b00      	cmp	r3, #0
 802475c:	d12e      	bne.n	80247bc <CheckTGTimerForSwing+0xb8>
				{
					printf(" [CheckTGTimerForSwing] No follower [%d/%d] \n", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
 802475e:	4b1e      	ldr	r3, [pc, #120]	; (80247d8 <CheckTGTimerForSwing+0xd4>)
 8024760:	791b      	ldrb	r3, [r3, #4]
 8024762:	b2db      	uxtb	r3, r3
 8024764:	4619      	mov	r1, r3
 8024766:	4b1c      	ldr	r3, [pc, #112]	; (80247d8 <CheckTGTimerForSwing+0xd4>)
 8024768:	795b      	ldrb	r3, [r3, #5]
 802476a:	b2db      	uxtb	r3, r3
 802476c:	461a      	mov	r2, r3
 802476e:	481c      	ldr	r0, [pc, #112]	; (80247e0 <CheckTGTimerForSwing+0xdc>)
 8024770:	f004 fe3c 	bl	80293ec <printf_>

					if (gGCUStatus.bAuthCount_EN > 0)
 8024774:	4b18      	ldr	r3, [pc, #96]	; (80247d8 <CheckTGTimerForSwing+0xd4>)
 8024776:	791b      	ldrb	r3, [r3, #4]
 8024778:	b2db      	uxtb	r3, r3
 802477a:	2b00      	cmp	r3, #0
 802477c:	d007      	beq.n	802478e <CheckTGTimerForSwing+0x8a>
					{
						gGCUStatus.bAuthCount_EN--;
 802477e:	4b16      	ldr	r3, [pc, #88]	; (80247d8 <CheckTGTimerForSwing+0xd4>)
 8024780:	791b      	ldrb	r3, [r3, #4]
 8024782:	b2db      	uxtb	r3, r3
 8024784:	3b01      	subs	r3, #1
 8024786:	b2da      	uxtb	r2, r3
 8024788:	4b13      	ldr	r3, [pc, #76]	; (80247d8 <CheckTGTimerForSwing+0xd4>)
 802478a:	711a      	strb	r2, [r3, #4]
 802478c:	e00b      	b.n	80247a6 <CheckTGTimerForSwing+0xa2>
					}
					else if (gGCUStatus.bAuthCount_EX > 0)
 802478e:	4b12      	ldr	r3, [pc, #72]	; (80247d8 <CheckTGTimerForSwing+0xd4>)
 8024790:	795b      	ldrb	r3, [r3, #5]
 8024792:	b2db      	uxtb	r3, r3
 8024794:	2b00      	cmp	r3, #0
 8024796:	d006      	beq.n	80247a6 <CheckTGTimerForSwing+0xa2>
					{
						gGCUStatus.bAuthCount_EX--;
 8024798:	4b0f      	ldr	r3, [pc, #60]	; (80247d8 <CheckTGTimerForSwing+0xd4>)
 802479a:	795b      	ldrb	r3, [r3, #5]
 802479c:	b2db      	uxtb	r3, r3
 802479e:	3b01      	subs	r3, #1
 80247a0:	b2da      	uxtb	r2, r3
 80247a2:	4b0d      	ldr	r3, [pc, #52]	; (80247d8 <CheckTGTimerForSwing+0xd4>)
 80247a4:	715a      	strb	r2, [r3, #5]
					}

					if (CheckZeroAuthCount())
 80247a6:	f7fe fe67 	bl	8023478 <CheckZeroAuthCount>
 80247aa:	4603      	mov	r3, r0
 80247ac:	2b00      	cmp	r3, #0
 80247ae:	d00c      	beq.n	80247ca <CheckTGTimerForSwing+0xc6>
					{
						CloseBarrierForSwing();
 80247b0:	f7ff f86a 	bl	8023888 <CloseBarrierForSwing>
						printf(" [CheckTGTimerForSwing] Close barrier! \n");
 80247b4:	480b      	ldr	r0, [pc, #44]	; (80247e4 <CheckTGTimerForSwing+0xe0>)
 80247b6:	f004 fe19 	bl	80293ec <printf_>
					if (CheckZeroAuthCount())
 80247ba:	e006      	b.n	80247ca <CheckTGTimerForSwing+0xc6>
					}
				}
				else
				{
					printf(" [CheckTGTimerForSwing] Something still detected.\n");
 80247bc:	480a      	ldr	r0, [pc, #40]	; (80247e8 <CheckTGTimerForSwing+0xe4>)
 80247be:	f004 fe15 	bl	80293ec <printf_>
					SetTimer(&timerTailgatingDetection);
 80247c2:	4803      	ldr	r0, [pc, #12]	; (80247d0 <CheckTGTimerForSwing+0xcc>)
 80247c4:	f00b fe5c 	bl	8030480 <SetTimer>
				}
			}
		}
	}
}
 80247c8:	e7ff      	b.n	80247ca <CheckTGTimerForSwing+0xc6>
 80247ca:	bf00      	nop
 80247cc:	bd80      	pop	{r7, pc}
 80247ce:	bf00      	nop
 80247d0:	24000178 	.word	0x24000178
 80247d4:	24000010 	.word	0x24000010
 80247d8:	24000490 	.word	0x24000490
 80247dc:	240003f4 	.word	0x240003f4
 80247e0:	0803248c 	.word	0x0803248c
 80247e4:	080324bc 	.word	0x080324bc
 80247e8:	080324e8 	.word	0x080324e8

080247ec <CheckSafetyTimerForSwing>:

void CheckSafetyTimerForSwing(void)
{
 80247ec:	b580      	push	{r7, lr}
 80247ee:	af00      	add	r7, sp, #0
	if (timerBarrierStop.fStart)
 80247f0:	4ba1      	ldr	r3, [pc, #644]	; (8024a78 <CheckSafetyTimerForSwing+0x28c>)
 80247f2:	781b      	ldrb	r3, [r3, #0]
 80247f4:	2b00      	cmp	r3, #0
 80247f6:	d019      	beq.n	802482c <CheckSafetyTimerForSwing+0x40>
	{
		if (IsTimeout(&timerBarrierStop, dwBarrierStopTime * TICK_COUNT_100MS))
 80247f8:	4ba0      	ldr	r3, [pc, #640]	; (8024a7c <CheckSafetyTimerForSwing+0x290>)
 80247fa:	681b      	ldr	r3, [r3, #0]
 80247fc:	2264      	movs	r2, #100	; 0x64
 80247fe:	fb02 f303 	mul.w	r3, r2, r3
 8024802:	4619      	mov	r1, r3
 8024804:	489c      	ldr	r0, [pc, #624]	; (8024a78 <CheckSafetyTimerForSwing+0x28c>)
 8024806:	f00b fe5d 	bl	80304c4 <IsTimeout>
 802480a:	4603      	mov	r3, r0
 802480c:	2b00      	cmp	r3, #0
 802480e:	f000 8130 	beq.w	8024a72 <CheckSafetyTimerForSwing+0x286>
		{
			printf(" [CheckSafetyTimerForSwing] Safety Stop Expired \n");
 8024812:	489b      	ldr	r0, [pc, #620]	; (8024a80 <CheckSafetyTimerForSwing+0x294>)
 8024814:	f004 fdea 	bl	80293ec <printf_>
			StopBarrierForSwing(FALSE);
 8024818:	2000      	movs	r0, #0
 802481a:	f7fe fe6d 	bl	80234f8 <StopBarrierForSwing>
			ResetTimer(&timerBarrierStop);
 802481e:	4896      	ldr	r0, [pc, #600]	; (8024a78 <CheckSafetyTimerForSwing+0x28c>)
 8024820:	f00b fe42 	bl	80304a8 <ResetTimer>
			SetTimer(&timerSafety);
 8024824:	4897      	ldr	r0, [pc, #604]	; (8024a84 <CheckSafetyTimerForSwing+0x298>)
 8024826:	f00b fe2b 	bl	8030480 <SetTimer>
					}
				}
			}
		}
	}
}
 802482a:	e122      	b.n	8024a72 <CheckSafetyTimerForSwing+0x286>
	else if (timerSafety.fStart)
 802482c:	4b95      	ldr	r3, [pc, #596]	; (8024a84 <CheckSafetyTimerForSwing+0x298>)
 802482e:	781b      	ldrb	r3, [r3, #0]
 8024830:	2b00      	cmp	r3, #0
 8024832:	f000 811e 	beq.w	8024a72 <CheckSafetyTimerForSwing+0x286>
		if (IsTimeout(&timerSafety, gdwTimeoutSafety * TICK_COUNT_100MS))
 8024836:	4b94      	ldr	r3, [pc, #592]	; (8024a88 <CheckSafetyTimerForSwing+0x29c>)
 8024838:	681b      	ldr	r3, [r3, #0]
 802483a:	2264      	movs	r2, #100	; 0x64
 802483c:	fb02 f303 	mul.w	r3, r2, r3
 8024840:	4619      	mov	r1, r3
 8024842:	4890      	ldr	r0, [pc, #576]	; (8024a84 <CheckSafetyTimerForSwing+0x298>)
 8024844:	f00b fe3e 	bl	80304c4 <IsTimeout>
 8024848:	4603      	mov	r3, r0
 802484a:	2b00      	cmp	r3, #0
 802484c:	d00f      	beq.n	802486e <CheckSafetyTimerForSwing+0x82>
			printf(" [CheckSafetyTimerForSwing] Safety Time Out! \n");
 802484e:	488f      	ldr	r0, [pc, #572]	; (8024a8c <CheckSafetyTimerForSwing+0x2a0>)
 8024850:	f004 fdcc 	bl	80293ec <printf_>
			ResetTimer(&timerSafety);
 8024854:	488b      	ldr	r0, [pc, #556]	; (8024a84 <CheckSafetyTimerForSwing+0x298>)
 8024856:	f00b fe27 	bl	80304a8 <ResetTimer>
			gbAuthDirection = FROM_NONE;
 802485a:	4b8d      	ldr	r3, [pc, #564]	; (8024a90 <CheckSafetyTimerForSwing+0x2a4>)
 802485c:	2200      	movs	r2, #0
 802485e:	701a      	strb	r2, [r3, #0]
			isSafetyOn = FALSE;
 8024860:	4b8c      	ldr	r3, [pc, #560]	; (8024a94 <CheckSafetyTimerForSwing+0x2a8>)
 8024862:	2200      	movs	r2, #0
 8024864:	701a      	strb	r2, [r3, #0]
			isSentClose = FALSE;
 8024866:	4b8c      	ldr	r3, [pc, #560]	; (8024a98 <CheckSafetyTimerForSwing+0x2ac>)
 8024868:	2200      	movs	r2, #0
 802486a:	701a      	strb	r2, [r3, #0]
}
 802486c:	e101      	b.n	8024a72 <CheckSafetyTimerForSwing+0x286>
			if (gbEmergencyFlag == FLG_OFF || gfTestMode == TRUE)
 802486e:	4b8b      	ldr	r3, [pc, #556]	; (8024a9c <CheckSafetyTimerForSwing+0x2b0>)
 8024870:	781b      	ldrb	r3, [r3, #0]
 8024872:	2b00      	cmp	r3, #0
 8024874:	d004      	beq.n	8024880 <CheckSafetyTimerForSwing+0x94>
 8024876:	4b8a      	ldr	r3, [pc, #552]	; (8024aa0 <CheckSafetyTimerForSwing+0x2b4>)
 8024878:	781b      	ldrb	r3, [r3, #0]
 802487a:	2b00      	cmp	r3, #0
 802487c:	f000 80f9 	beq.w	8024a72 <CheckSafetyTimerForSwing+0x286>
				if (gbAuthDirection == FROM_ENTRY)
 8024880:	4b83      	ldr	r3, [pc, #524]	; (8024a90 <CheckSafetyTimerForSwing+0x2a4>)
 8024882:	781b      	ldrb	r3, [r3, #0]
 8024884:	2b01      	cmp	r3, #1
 8024886:	d154      	bne.n	8024932 <CheckSafetyTimerForSwing+0x146>
					gGCUStatus.bSafetyDetection = FLG_SET;
 8024888:	4b86      	ldr	r3, [pc, #536]	; (8024aa4 <CheckSafetyTimerForSwing+0x2b8>)
 802488a:	2201      	movs	r2, #1
 802488c:	74da      	strb	r2, [r3, #19]
					if (psenNewSwing.section.lower_EX || psenNewSwing.b.s04 || psenNewSwing.b.s08)
 802488e:	4b86      	ldr	r3, [pc, #536]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 8024890:	785b      	ldrb	r3, [r3, #1]
 8024892:	f023 030f 	bic.w	r3, r3, #15
 8024896:	b2db      	uxtb	r3, r3
 8024898:	2b00      	cmp	r3, #0
 802489a:	d10d      	bne.n	80248b8 <CheckSafetyTimerForSwing+0xcc>
 802489c:	4b82      	ldr	r3, [pc, #520]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 802489e:	781b      	ldrb	r3, [r3, #0]
 80248a0:	f003 0308 	and.w	r3, r3, #8
 80248a4:	b2db      	uxtb	r3, r3
 80248a6:	2b00      	cmp	r3, #0
 80248a8:	d106      	bne.n	80248b8 <CheckSafetyTimerForSwing+0xcc>
 80248aa:	4b7f      	ldr	r3, [pc, #508]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 80248ac:	781b      	ldrb	r3, [r3, #0]
 80248ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80248b2:	b2db      	uxtb	r3, r3
 80248b4:	2b00      	cmp	r3, #0
 80248b6:	d023      	beq.n	8024900 <CheckSafetyTimerForSwing+0x114>
						printf(" [EN] Safety Activation [%02X/%02X/%02X] \n", psenNewSwing.section.lower_EX, psenNewSwing.b.s04, psenNewSwing.b.s08);
 80248b8:	4b7b      	ldr	r3, [pc, #492]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 80248ba:	785b      	ldrb	r3, [r3, #1]
 80248bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80248c0:	b2db      	uxtb	r3, r3
 80248c2:	4619      	mov	r1, r3
 80248c4:	4b78      	ldr	r3, [pc, #480]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 80248c6:	781b      	ldrb	r3, [r3, #0]
 80248c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80248cc:	b2db      	uxtb	r3, r3
 80248ce:	461a      	mov	r2, r3
 80248d0:	4b75      	ldr	r3, [pc, #468]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 80248d2:	781b      	ldrb	r3, [r3, #0]
 80248d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80248d8:	b2db      	uxtb	r3, r3
 80248da:	4874      	ldr	r0, [pc, #464]	; (8024aac <CheckSafetyTimerForSwing+0x2c0>)
 80248dc:	f004 fd86 	bl	80293ec <printf_>
						StopBarrierForSwing(TRUE);
 80248e0:	2001      	movs	r0, #1
 80248e2:	f7fe fe09 	bl	80234f8 <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 80248e6:	4867      	ldr	r0, [pc, #412]	; (8024a84 <CheckSafetyTimerForSwing+0x298>)
 80248e8:	f00b fdde 	bl	80304a8 <ResetTimer>
						SetTimer(&timerBarrierStop);
 80248ec:	4862      	ldr	r0, [pc, #392]	; (8024a78 <CheckSafetyTimerForSwing+0x28c>)
 80248ee:	f00b fdc7 	bl	8030480 <SetTimer>
						isSafetyOn = TRUE;
 80248f2:	4b68      	ldr	r3, [pc, #416]	; (8024a94 <CheckSafetyTimerForSwing+0x2a8>)
 80248f4:	2201      	movs	r2, #1
 80248f6:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 80248f8:	4b67      	ldr	r3, [pc, #412]	; (8024a98 <CheckSafetyTimerForSwing+0x2ac>)
 80248fa:	2200      	movs	r2, #0
 80248fc:	701a      	strb	r2, [r3, #0]
 80248fe:	e0b8      	b.n	8024a72 <CheckSafetyTimerForSwing+0x286>
					else if (gfAISafetyOn == FALSE && isSentClose == FALSE)
 8024900:	4b6b      	ldr	r3, [pc, #428]	; (8024ab0 <CheckSafetyTimerForSwing+0x2c4>)
 8024902:	781b      	ldrb	r3, [r3, #0]
 8024904:	f083 0301 	eor.w	r3, r3, #1
 8024908:	b2db      	uxtb	r3, r3
 802490a:	2b00      	cmp	r3, #0
 802490c:	f000 80b1 	beq.w	8024a72 <CheckSafetyTimerForSwing+0x286>
 8024910:	4b61      	ldr	r3, [pc, #388]	; (8024a98 <CheckSafetyTimerForSwing+0x2ac>)
 8024912:	781b      	ldrb	r3, [r3, #0]
 8024914:	f083 0301 	eor.w	r3, r3, #1
 8024918:	b2db      	uxtb	r3, r3
 802491a:	2b00      	cmp	r3, #0
 802491c:	f000 80a9 	beq.w	8024a72 <CheckSafetyTimerForSwing+0x286>
							gGCUStatus.bSafetyDetection = FLG_OFF;
 8024920:	4b60      	ldr	r3, [pc, #384]	; (8024aa4 <CheckSafetyTimerForSwing+0x2b8>)
 8024922:	2200      	movs	r2, #0
 8024924:	74da      	strb	r2, [r3, #19]
							isSentClose = TRUE;
 8024926:	4b5c      	ldr	r3, [pc, #368]	; (8024a98 <CheckSafetyTimerForSwing+0x2ac>)
 8024928:	2201      	movs	r2, #1
 802492a:	701a      	strb	r2, [r3, #0]
							CloseBarrierForSwing();
 802492c:	f7fe ffac 	bl	8023888 <CloseBarrierForSwing>
}
 8024930:	e09f      	b.n	8024a72 <CheckSafetyTimerForSwing+0x286>
				else if (gbAuthDirection == FROM_EXIT)
 8024932:	4b57      	ldr	r3, [pc, #348]	; (8024a90 <CheckSafetyTimerForSwing+0x2a4>)
 8024934:	781b      	ldrb	r3, [r3, #0]
 8024936:	2b02      	cmp	r3, #2
 8024938:	d152      	bne.n	80249e0 <CheckSafetyTimerForSwing+0x1f4>
					gGCUStatus.bSafetyDetection = FLG_SET;
 802493a:	4b5a      	ldr	r3, [pc, #360]	; (8024aa4 <CheckSafetyTimerForSwing+0x2b8>)
 802493c:	2201      	movs	r2, #1
 802493e:	74da      	strb	r2, [r3, #19]
					if (psenNewSwing.section.lower_EN || psenNewSwing.b.s12 || psenNewSwing.b.s16)
 8024940:	4b59      	ldr	r3, [pc, #356]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 8024942:	781b      	ldrb	r3, [r3, #0]
 8024944:	f023 030f 	bic.w	r3, r3, #15
 8024948:	b2db      	uxtb	r3, r3
 802494a:	2b00      	cmp	r3, #0
 802494c:	d10d      	bne.n	802496a <CheckSafetyTimerForSwing+0x17e>
 802494e:	4b56      	ldr	r3, [pc, #344]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 8024950:	785b      	ldrb	r3, [r3, #1]
 8024952:	f003 0308 	and.w	r3, r3, #8
 8024956:	b2db      	uxtb	r3, r3
 8024958:	2b00      	cmp	r3, #0
 802495a:	d106      	bne.n	802496a <CheckSafetyTimerForSwing+0x17e>
 802495c:	4b52      	ldr	r3, [pc, #328]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 802495e:	785b      	ldrb	r3, [r3, #1]
 8024960:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8024964:	b2db      	uxtb	r3, r3
 8024966:	2b00      	cmp	r3, #0
 8024968:	d023      	beq.n	80249b2 <CheckSafetyTimerForSwing+0x1c6>
						printf(" [EX] Safety Activation [%02X/%02X/%02X] \n", psenNewSwing.section.lower_EN, psenNewSwing.b.s12, psenNewSwing.b.s16);
 802496a:	4b4f      	ldr	r3, [pc, #316]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 802496c:	781b      	ldrb	r3, [r3, #0]
 802496e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8024972:	b2db      	uxtb	r3, r3
 8024974:	4619      	mov	r1, r3
 8024976:	4b4c      	ldr	r3, [pc, #304]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 8024978:	785b      	ldrb	r3, [r3, #1]
 802497a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 802497e:	b2db      	uxtb	r3, r3
 8024980:	461a      	mov	r2, r3
 8024982:	4b49      	ldr	r3, [pc, #292]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 8024984:	785b      	ldrb	r3, [r3, #1]
 8024986:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 802498a:	b2db      	uxtb	r3, r3
 802498c:	4849      	ldr	r0, [pc, #292]	; (8024ab4 <CheckSafetyTimerForSwing+0x2c8>)
 802498e:	f004 fd2d 	bl	80293ec <printf_>
						StopBarrierForSwing(TRUE);
 8024992:	2001      	movs	r0, #1
 8024994:	f7fe fdb0 	bl	80234f8 <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 8024998:	483a      	ldr	r0, [pc, #232]	; (8024a84 <CheckSafetyTimerForSwing+0x298>)
 802499a:	f00b fd85 	bl	80304a8 <ResetTimer>
						SetTimer(&timerBarrierStop);
 802499e:	4836      	ldr	r0, [pc, #216]	; (8024a78 <CheckSafetyTimerForSwing+0x28c>)
 80249a0:	f00b fd6e 	bl	8030480 <SetTimer>
						isSafetyOn = TRUE;
 80249a4:	4b3b      	ldr	r3, [pc, #236]	; (8024a94 <CheckSafetyTimerForSwing+0x2a8>)
 80249a6:	2201      	movs	r2, #1
 80249a8:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 80249aa:	4b3b      	ldr	r3, [pc, #236]	; (8024a98 <CheckSafetyTimerForSwing+0x2ac>)
 80249ac:	2200      	movs	r2, #0
 80249ae:	701a      	strb	r2, [r3, #0]
 80249b0:	e05f      	b.n	8024a72 <CheckSafetyTimerForSwing+0x286>
					else if (gfAISafetyOn == FALSE && isSentClose == FALSE)
 80249b2:	4b3f      	ldr	r3, [pc, #252]	; (8024ab0 <CheckSafetyTimerForSwing+0x2c4>)
 80249b4:	781b      	ldrb	r3, [r3, #0]
 80249b6:	f083 0301 	eor.w	r3, r3, #1
 80249ba:	b2db      	uxtb	r3, r3
 80249bc:	2b00      	cmp	r3, #0
 80249be:	d058      	beq.n	8024a72 <CheckSafetyTimerForSwing+0x286>
 80249c0:	4b35      	ldr	r3, [pc, #212]	; (8024a98 <CheckSafetyTimerForSwing+0x2ac>)
 80249c2:	781b      	ldrb	r3, [r3, #0]
 80249c4:	f083 0301 	eor.w	r3, r3, #1
 80249c8:	b2db      	uxtb	r3, r3
 80249ca:	2b00      	cmp	r3, #0
 80249cc:	d051      	beq.n	8024a72 <CheckSafetyTimerForSwing+0x286>
							gGCUStatus.bSafetyDetection = FLG_OFF;
 80249ce:	4b35      	ldr	r3, [pc, #212]	; (8024aa4 <CheckSafetyTimerForSwing+0x2b8>)
 80249d0:	2200      	movs	r2, #0
 80249d2:	74da      	strb	r2, [r3, #19]
							isSentClose = TRUE;
 80249d4:	4b30      	ldr	r3, [pc, #192]	; (8024a98 <CheckSafetyTimerForSwing+0x2ac>)
 80249d6:	2201      	movs	r2, #1
 80249d8:	701a      	strb	r2, [r3, #0]
							CloseBarrierForSwing();
 80249da:	f7fe ff55 	bl	8023888 <CloseBarrierForSwing>
}
 80249de:	e048      	b.n	8024a72 <CheckSafetyTimerForSwing+0x286>
					if (psenNewSwing.section.lower_EN || psenNewSwing.section.lower_EN || psenNewSwing.b.s02 || psenNewSwing.b.s10)
 80249e0:	4b31      	ldr	r3, [pc, #196]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 80249e2:	781b      	ldrb	r3, [r3, #0]
 80249e4:	f023 030f 	bic.w	r3, r3, #15
 80249e8:	b2db      	uxtb	r3, r3
 80249ea:	2b00      	cmp	r3, #0
 80249ec:	d114      	bne.n	8024a18 <CheckSafetyTimerForSwing+0x22c>
 80249ee:	4b2e      	ldr	r3, [pc, #184]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 80249f0:	781b      	ldrb	r3, [r3, #0]
 80249f2:	f023 030f 	bic.w	r3, r3, #15
 80249f6:	b2db      	uxtb	r3, r3
 80249f8:	2b00      	cmp	r3, #0
 80249fa:	d10d      	bne.n	8024a18 <CheckSafetyTimerForSwing+0x22c>
 80249fc:	4b2a      	ldr	r3, [pc, #168]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 80249fe:	781b      	ldrb	r3, [r3, #0]
 8024a00:	f003 0302 	and.w	r3, r3, #2
 8024a04:	b2db      	uxtb	r3, r3
 8024a06:	2b00      	cmp	r3, #0
 8024a08:	d106      	bne.n	8024a18 <CheckSafetyTimerForSwing+0x22c>
 8024a0a:	4b27      	ldr	r3, [pc, #156]	; (8024aa8 <CheckSafetyTimerForSwing+0x2bc>)
 8024a0c:	785b      	ldrb	r3, [r3, #1]
 8024a0e:	f003 0302 	and.w	r3, r3, #2
 8024a12:	b2db      	uxtb	r3, r3
 8024a14:	2b00      	cmp	r3, #0
 8024a16:	d015      	beq.n	8024a44 <CheckSafetyTimerForSwing+0x258>
						printf(" [EN/EX] Safety Activation \n");
 8024a18:	4827      	ldr	r0, [pc, #156]	; (8024ab8 <CheckSafetyTimerForSwing+0x2cc>)
 8024a1a:	f004 fce7 	bl	80293ec <printf_>
						gGCUStatus.bSafetyDetection = FLG_SET;
 8024a1e:	4b21      	ldr	r3, [pc, #132]	; (8024aa4 <CheckSafetyTimerForSwing+0x2b8>)
 8024a20:	2201      	movs	r2, #1
 8024a22:	74da      	strb	r2, [r3, #19]
						StopBarrierForSwing(TRUE);
 8024a24:	2001      	movs	r0, #1
 8024a26:	f7fe fd67 	bl	80234f8 <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 8024a2a:	4816      	ldr	r0, [pc, #88]	; (8024a84 <CheckSafetyTimerForSwing+0x298>)
 8024a2c:	f00b fd3c 	bl	80304a8 <ResetTimer>
						SetTimer(&timerBarrierStop);
 8024a30:	4811      	ldr	r0, [pc, #68]	; (8024a78 <CheckSafetyTimerForSwing+0x28c>)
 8024a32:	f00b fd25 	bl	8030480 <SetTimer>
						isSafetyOn = TRUE;
 8024a36:	4b17      	ldr	r3, [pc, #92]	; (8024a94 <CheckSafetyTimerForSwing+0x2a8>)
 8024a38:	2201      	movs	r2, #1
 8024a3a:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 8024a3c:	4b16      	ldr	r3, [pc, #88]	; (8024a98 <CheckSafetyTimerForSwing+0x2ac>)
 8024a3e:	2200      	movs	r2, #0
 8024a40:	701a      	strb	r2, [r3, #0]
 8024a42:	e016      	b.n	8024a72 <CheckSafetyTimerForSwing+0x286>
					else if (gfAISafetyOn == FALSE && isSentClose == FALSE)
 8024a44:	4b1a      	ldr	r3, [pc, #104]	; (8024ab0 <CheckSafetyTimerForSwing+0x2c4>)
 8024a46:	781b      	ldrb	r3, [r3, #0]
 8024a48:	f083 0301 	eor.w	r3, r3, #1
 8024a4c:	b2db      	uxtb	r3, r3
 8024a4e:	2b00      	cmp	r3, #0
 8024a50:	d00f      	beq.n	8024a72 <CheckSafetyTimerForSwing+0x286>
 8024a52:	4b11      	ldr	r3, [pc, #68]	; (8024a98 <CheckSafetyTimerForSwing+0x2ac>)
 8024a54:	781b      	ldrb	r3, [r3, #0]
 8024a56:	f083 0301 	eor.w	r3, r3, #1
 8024a5a:	b2db      	uxtb	r3, r3
 8024a5c:	2b00      	cmp	r3, #0
 8024a5e:	d008      	beq.n	8024a72 <CheckSafetyTimerForSwing+0x286>
						gGCUStatus.bSafetyDetection = FLG_OFF;
 8024a60:	4b10      	ldr	r3, [pc, #64]	; (8024aa4 <CheckSafetyTimerForSwing+0x2b8>)
 8024a62:	2200      	movs	r2, #0
 8024a64:	74da      	strb	r2, [r3, #19]
						isSentClose = TRUE;
 8024a66:	4b0c      	ldr	r3, [pc, #48]	; (8024a98 <CheckSafetyTimerForSwing+0x2ac>)
 8024a68:	2201      	movs	r2, #1
 8024a6a:	701a      	strb	r2, [r3, #0]
						CloseBarrierForSwing();
 8024a6c:	f7fe ff0c 	bl	8023888 <CloseBarrierForSwing>
}
 8024a70:	e7ff      	b.n	8024a72 <CheckSafetyTimerForSwing+0x286>
 8024a72:	bf00      	nop
 8024a74:	bd80      	pop	{r7, pc}
 8024a76:	bf00      	nop
 8024a78:	24000208 	.word	0x24000208
 8024a7c:	2400001c 	.word	0x2400001c
 8024a80:	0803251c 	.word	0x0803251c
 8024a84:	240001e4 	.word	0x240001e4
 8024a88:	24000148 	.word	0x24000148
 8024a8c:	08032550 	.word	0x08032550
 8024a90:	2400013a 	.word	0x2400013a
 8024a94:	24000405 	.word	0x24000405
 8024a98:	2400040a 	.word	0x2400040a
 8024a9c:	24000139 	.word	0x24000139
 8024aa0:	2400041c 	.word	0x2400041c
 8024aa4:	24000490 	.word	0x24000490
 8024aa8:	240003f4 	.word	0x240003f4
 8024aac:	08032580 	.word	0x08032580
 8024ab0:	2400041d 	.word	0x2400041d
 8024ab4:	080325ac 	.word	0x080325ac
 8024ab8:	080325d8 	.word	0x080325d8

08024abc <CheckResetTimer>:

void CheckResetTimer(void)
{
 8024abc:	b580      	push	{r7, lr}
 8024abe:	af00      	add	r7, sp, #0
	static clock_t ms1;

	if (timerReset.fStart)
 8024ac0:	4b4d      	ldr	r3, [pc, #308]	; (8024bf8 <CheckResetTimer+0x13c>)
 8024ac2:	781b      	ldrb	r3, [r3, #0]
 8024ac4:	2b00      	cmp	r3, #0
 8024ac6:	d069      	beq.n	8024b9c <CheckResetTimer+0xe0>
	{
		if (!mstimeout(&ms1, 1000))
 8024ac8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8024acc:	484b      	ldr	r0, [pc, #300]	; (8024bfc <CheckResetTimer+0x140>)
 8024ace:	f005 fa31 	bl	8029f34 <mstimeout>
 8024ad2:	4603      	mov	r3, r0
 8024ad4:	2b00      	cmp	r3, #0
 8024ad6:	f000 808d 	beq.w	8024bf4 <CheckResetTimer+0x138>
			return;

		if (IsTimeout(&timerReset, dwResetTime * TICK_COUNT_100MS))
 8024ada:	4b49      	ldr	r3, [pc, #292]	; (8024c00 <CheckResetTimer+0x144>)
 8024adc:	681b      	ldr	r3, [r3, #0]
 8024ade:	2264      	movs	r2, #100	; 0x64
 8024ae0:	fb02 f303 	mul.w	r3, r2, r3
 8024ae4:	4619      	mov	r1, r3
 8024ae6:	4844      	ldr	r0, [pc, #272]	; (8024bf8 <CheckResetTimer+0x13c>)
 8024ae8:	f00b fcec 	bl	80304c4 <IsTimeout>
 8024aec:	4603      	mov	r3, r0
 8024aee:	2b00      	cmp	r3, #0
 8024af0:	f000 8081 	beq.w	8024bf6 <CheckResetTimer+0x13a>
		{
			ResetTimer(&timerReset);
 8024af4:	4840      	ldr	r0, [pc, #256]	; (8024bf8 <CheckResetTimer+0x13c>)
 8024af6:	f00b fcd7 	bl	80304a8 <ResetTimer>

			if (gbEmergencyFlag == FLG_SET)
 8024afa:	4b42      	ldr	r3, [pc, #264]	; (8024c04 <CheckResetTimer+0x148>)
 8024afc:	781b      	ldrb	r3, [r3, #0]
 8024afe:	2b01      	cmp	r3, #1
 8024b00:	d142      	bne.n	8024b88 <CheckResetTimer+0xcc>
			{
				if (!psenNewSwing.dirEntry.enter && !psenNewSwing.section.lower_EN && !psenNewSwing.side.exit)
 8024b02:	4b41      	ldr	r3, [pc, #260]	; (8024c08 <CheckResetTimer+0x14c>)
 8024b04:	781b      	ldrb	r3, [r3, #0]
 8024b06:	f003 0303 	and.w	r3, r3, #3
 8024b0a:	b2db      	uxtb	r3, r3
 8024b0c:	2b00      	cmp	r3, #0
 8024b0e:	d126      	bne.n	8024b5e <CheckResetTimer+0xa2>
 8024b10:	4b3d      	ldr	r3, [pc, #244]	; (8024c08 <CheckResetTimer+0x14c>)
 8024b12:	781b      	ldrb	r3, [r3, #0]
 8024b14:	f023 030f 	bic.w	r3, r3, #15
 8024b18:	b2db      	uxtb	r3, r3
 8024b1a:	2b00      	cmp	r3, #0
 8024b1c:	d11f      	bne.n	8024b5e <CheckResetTimer+0xa2>
 8024b1e:	4b3a      	ldr	r3, [pc, #232]	; (8024c08 <CheckResetTimer+0x14c>)
 8024b20:	785b      	ldrb	r3, [r3, #1]
 8024b22:	2b00      	cmp	r3, #0
 8024b24:	d11b      	bne.n	8024b5e <CheckResetTimer+0xa2>
				{
					printf(" [CheckResetTimer] Check point 1 \n");
 8024b26:	4839      	ldr	r0, [pc, #228]	; (8024c0c <CheckResetTimer+0x150>)
 8024b28:	f004 fc60 	bl	80293ec <printf_>
					isCalibrationStart = TRUE;
 8024b2c:	4b38      	ldr	r3, [pc, #224]	; (8024c10 <CheckResetTimer+0x154>)
 8024b2e:	2201      	movs	r2, #1
 8024b30:	701a      	strb	r2, [r3, #0]
					isSafetyOn4Init = FALSE;
 8024b32:	4b38      	ldr	r3, [pc, #224]	; (8024c14 <CheckResetTimer+0x158>)
 8024b34:	2200      	movs	r2, #0
 8024b36:	701a      	strb	r2, [r3, #0]
					Brr_SetEmergency(FALSE);
 8024b38:	2000      	movs	r0, #0
 8024b3a:	f7fb fda3 	bl	8020684 <Brr_SetEmergency>
					gbEmergencyFlag = FLG_OFF;
 8024b3e:	4b31      	ldr	r3, [pc, #196]	; (8024c04 <CheckResetTimer+0x148>)
 8024b40:	2200      	movs	r2, #0
 8024b42:	701a      	strb	r2, [r3, #0]
					ControlIndicatorBlink(FLG_OFF);
 8024b44:	2000      	movs	r0, #0
 8024b46:	f7fc fda3 	bl	8021690 <ControlIndicatorBlink>
					gbBarrierCmd = BARRIER_CLOSE;
 8024b4a:	4b33      	ldr	r3, [pc, #204]	; (8024c18 <CheckResetTimer+0x15c>)
 8024b4c:	2203      	movs	r2, #3
 8024b4e:	701a      	strb	r2, [r3, #0]
					dwResetTime = 90;
 8024b50:	4b2b      	ldr	r3, [pc, #172]	; (8024c00 <CheckResetTimer+0x144>)
 8024b52:	225a      	movs	r2, #90	; 0x5a
 8024b54:	601a      	str	r2, [r3, #0]
					SetTimer(&timerReset);
 8024b56:	4828      	ldr	r0, [pc, #160]	; (8024bf8 <CheckResetTimer+0x13c>)
 8024b58:	f00b fc92 	bl	8030480 <SetTimer>
 8024b5c:	e04b      	b.n	8024bf6 <CheckResetTimer+0x13a>
				}
				else
				{
					printf(" [CheckResetTimer] Check point 2 \n");
 8024b5e:	482f      	ldr	r0, [pc, #188]	; (8024c1c <CheckResetTimer+0x160>)
 8024b60:	f004 fc44 	bl	80293ec <printf_>

					isSafetyOn4Init = TRUE;
 8024b64:	4b2b      	ldr	r3, [pc, #172]	; (8024c14 <CheckResetTimer+0x158>)
 8024b66:	2201      	movs	r2, #1
 8024b68:	701a      	strb	r2, [r3, #0]
					gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_CLOSE_FAULT;
 8024b6a:	4a2d      	ldr	r2, [pc, #180]	; (8024c20 <CheckResetTimer+0x164>)
 8024b6c:	7b13      	ldrb	r3, [r2, #12]
 8024b6e:	2102      	movs	r1, #2
 8024b70:	f361 0301 	bfi	r3, r1, #0, #2
 8024b74:	7313      	strb	r3, [r2, #12]
					gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_CLOSE_FAULT;
 8024b76:	4a2a      	ldr	r2, [pc, #168]	; (8024c20 <CheckResetTimer+0x164>)
 8024b78:	7b13      	ldrb	r3, [r2, #12]
 8024b7a:	2102      	movs	r1, #2
 8024b7c:	f361 0383 	bfi	r3, r1, #2, #2
 8024b80:	7313      	strb	r3, [r2, #12]
					InitPassageModeForSwing();
 8024b82:	f7fe fcdd 	bl	8023540 <InitPassageModeForSwing>
 8024b86:	e036      	b.n	8024bf6 <CheckResetTimer+0x13a>
				}
			}
			else
			{
				printf(" [CheckResetTimer] Check point 3 \n");
 8024b88:	4826      	ldr	r0, [pc, #152]	; (8024c24 <CheckResetTimer+0x168>)
 8024b8a:	f004 fc2f 	bl	80293ec <printf_>

				// Brr_SetSerialComm(TRUE);
				isCalibration = TRUE;
 8024b8e:	4b26      	ldr	r3, [pc, #152]	; (8024c28 <CheckResetTimer+0x16c>)
 8024b90:	2201      	movs	r2, #1
 8024b92:	701a      	strb	r2, [r3, #0]
				nCalibrationCnt = 0;
 8024b94:	4b25      	ldr	r3, [pc, #148]	; (8024c2c <CheckResetTimer+0x170>)
 8024b96:	2200      	movs	r2, #0
 8024b98:	601a      	str	r2, [r3, #0]
 8024b9a:	e02c      	b.n	8024bf6 <CheckResetTimer+0x13a>
			}
		}
	}
	else
	{
		if (isCalibration == TRUE)
 8024b9c:	4b22      	ldr	r3, [pc, #136]	; (8024c28 <CheckResetTimer+0x16c>)
 8024b9e:	781b      	ldrb	r3, [r3, #0]
 8024ba0:	2b00      	cmp	r3, #0
 8024ba2:	d028      	beq.n	8024bf6 <CheckResetTimer+0x13a>
		{
			if (nCalibrationCnt <= 300)
 8024ba4:	4b21      	ldr	r3, [pc, #132]	; (8024c2c <CheckResetTimer+0x170>)
 8024ba6:	681b      	ldr	r3, [r3, #0]
 8024ba8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8024bac:	dc16      	bgt.n	8024bdc <CheckResetTimer+0x120>
			{
				if (nCalibrationCnt % 20 == 0)
 8024bae:	4b1f      	ldr	r3, [pc, #124]	; (8024c2c <CheckResetTimer+0x170>)
 8024bb0:	6819      	ldr	r1, [r3, #0]
 8024bb2:	4b1f      	ldr	r3, [pc, #124]	; (8024c30 <CheckResetTimer+0x174>)
 8024bb4:	fb83 2301 	smull	r2, r3, r3, r1
 8024bb8:	10da      	asrs	r2, r3, #3
 8024bba:	17cb      	asrs	r3, r1, #31
 8024bbc:	1ad2      	subs	r2, r2, r3
 8024bbe:	4613      	mov	r3, r2
 8024bc0:	009b      	lsls	r3, r3, #2
 8024bc2:	4413      	add	r3, r2
 8024bc4:	009b      	lsls	r3, r3, #2
 8024bc6:	1aca      	subs	r2, r1, r3
 8024bc8:	2a00      	cmp	r2, #0
 8024bca:	d101      	bne.n	8024bd0 <CheckResetTimer+0x114>
					Brr_CloseBarrier();
 8024bcc:	f7fb fdb0 	bl	8020730 <Brr_CloseBarrier>
				nCalibrationCnt++;
 8024bd0:	4b16      	ldr	r3, [pc, #88]	; (8024c2c <CheckResetTimer+0x170>)
 8024bd2:	681b      	ldr	r3, [r3, #0]
 8024bd4:	3301      	adds	r3, #1
 8024bd6:	4a15      	ldr	r2, [pc, #84]	; (8024c2c <CheckResetTimer+0x170>)
 8024bd8:	6013      	str	r3, [r2, #0]
 8024bda:	e00c      	b.n	8024bf6 <CheckResetTimer+0x13a>
			}
			else
			{
				nCalibrationCnt = 0;
 8024bdc:	4b13      	ldr	r3, [pc, #76]	; (8024c2c <CheckResetTimer+0x170>)
 8024bde:	2200      	movs	r2, #0
 8024be0:	601a      	str	r2, [r3, #0]
				isCalibration = FALSE;
 8024be2:	4b11      	ldr	r3, [pc, #68]	; (8024c28 <CheckResetTimer+0x16c>)
 8024be4:	2200      	movs	r2, #0
 8024be6:	701a      	strb	r2, [r3, #0]
				isCalibrationStart = FALSE;
 8024be8:	4b09      	ldr	r3, [pc, #36]	; (8024c10 <CheckResetTimer+0x154>)
 8024bea:	2200      	movs	r2, #0
 8024bec:	701a      	strb	r2, [r3, #0]
				InitPassageModeForSwing();
 8024bee:	f7fe fca7 	bl	8023540 <InitPassageModeForSwing>
 8024bf2:	e000      	b.n	8024bf6 <CheckResetTimer+0x13a>
			return;
 8024bf4:	bf00      	nop
			}
		}
	}
}
 8024bf6:	bd80      	pop	{r7, pc}
 8024bf8:	24000220 	.word	0x24000220
 8024bfc:	24000414 	.word	0x24000414
 8024c00:	24000008 	.word	0x24000008
 8024c04:	24000139 	.word	0x24000139
 8024c08:	240003f4 	.word	0x240003f4
 8024c0c:	080325f8 	.word	0x080325f8
 8024c10:	24000409 	.word	0x24000409
 8024c14:	24000407 	.word	0x24000407
 8024c18:	24000028 	.word	0x24000028
 8024c1c:	0803261c 	.word	0x0803261c
 8024c20:	24000490 	.word	0x24000490
 8024c24:	08032640 	.word	0x08032640
 8024c28:	24000408 	.word	0x24000408
 8024c2c:	2400040c 	.word	0x2400040c
 8024c30:	66666667 	.word	0x66666667

08024c34 <CheckTailgateFilterTimer>:
		}
	}
}

void CheckTailgateFilterTimer(void)
{
 8024c34:	b580      	push	{r7, lr}
 8024c36:	af00      	add	r7, sp, #0
	if (timerTgFilter.fStart)
 8024c38:	4b40      	ldr	r3, [pc, #256]	; (8024d3c <CheckTailgateFilterTimer+0x108>)
 8024c3a:	781b      	ldrb	r3, [r3, #0]
 8024c3c:	2b00      	cmp	r3, #0
 8024c3e:	d07a      	beq.n	8024d36 <CheckTailgateFilterTimer+0x102>
	{
		if (IsTimeout(&timerTgFilter, dwTgFilterTime * TICK_COUNT_100MS))
 8024c40:	4b3f      	ldr	r3, [pc, #252]	; (8024d40 <CheckTailgateFilterTimer+0x10c>)
 8024c42:	681b      	ldr	r3, [r3, #0]
 8024c44:	2264      	movs	r2, #100	; 0x64
 8024c46:	fb02 f303 	mul.w	r3, r2, r3
 8024c4a:	4619      	mov	r1, r3
 8024c4c:	483b      	ldr	r0, [pc, #236]	; (8024d3c <CheckTailgateFilterTimer+0x108>)
 8024c4e:	f00b fc39 	bl	80304c4 <IsTimeout>
 8024c52:	4603      	mov	r3, r0
 8024c54:	2b00      	cmp	r3, #0
 8024c56:	d049      	beq.n	8024cec <CheckTailgateFilterTimer+0xb8>
		{
			ResetTimer(&timerTgFilter);
 8024c58:	4838      	ldr	r0, [pc, #224]	; (8024d3c <CheckTailgateFilterTimer+0x108>)
 8024c5a:	f00b fc25 	bl	80304a8 <ResetTimer>

			if (isLuggageSet_EN == TRUE)
 8024c5e:	4b39      	ldr	r3, [pc, #228]	; (8024d44 <CheckTailgateFilterTimer+0x110>)
 8024c60:	781b      	ldrb	r3, [r3, #0]
 8024c62:	2b00      	cmp	r3, #0
 8024c64:	d003      	beq.n	8024c6e <CheckTailgateFilterTimer+0x3a>
			{
				printf(" [CheckTailgateFilterTimer] Luggage sensors detected. No EN TG!! \n");
 8024c66:	4838      	ldr	r0, [pc, #224]	; (8024d48 <CheckTailgateFilterTimer+0x114>)
 8024c68:	f004 fbc0 	bl	80293ec <printf_>
				printf(" [CheckTailgateFilterTimer] Something detected. No EX TG!! \n");
				ResetTimer(&timerTgFilter);
			}
		}
	}
}
 8024c6c:	e063      	b.n	8024d36 <CheckTailgateFilterTimer+0x102>
			else if (isLuggageSet_EX == TRUE)
 8024c6e:	4b37      	ldr	r3, [pc, #220]	; (8024d4c <CheckTailgateFilterTimer+0x118>)
 8024c70:	781b      	ldrb	r3, [r3, #0]
 8024c72:	2b00      	cmp	r3, #0
 8024c74:	d003      	beq.n	8024c7e <CheckTailgateFilterTimer+0x4a>
				printf(" [CheckTailgateFilterTimer] Luggage sensors detected. No EX TG!! \n");
 8024c76:	4836      	ldr	r0, [pc, #216]	; (8024d50 <CheckTailgateFilterTimer+0x11c>)
 8024c78:	f004 fbb8 	bl	80293ec <printf_>
}
 8024c7c:	e05b      	b.n	8024d36 <CheckTailgateFilterTimer+0x102>
				ControlDirectionLED(DIR_RED, DIR_RED);
 8024c7e:	2102      	movs	r1, #2
 8024c80:	2002      	movs	r0, #2
 8024c82:	f7fc fc21 	bl	80214c8 <ControlDirectionLED>
				ControlIndicatorBlink(FLG_SET);
 8024c86:	2001      	movs	r0, #1
 8024c88:	f7fc fd02 	bl	8021690 <ControlIndicatorBlink>
				ControlBuzzer(BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8024c8c:	4b31      	ldr	r3, [pc, #196]	; (8024d54 <CheckTailgateFilterTimer+0x120>)
 8024c8e:	7a9b      	ldrb	r3, [r3, #10]
 8024c90:	4619      	mov	r1, r3
 8024c92:	2001      	movs	r0, #1
 8024c94:	f7fc fbee 	bl	8021474 <ControlBuzzer>
				SetTailgatingTimer();
 8024c98:	f7fd fb40 	bl	802231c <SetTailgatingTimer>
				if (gGCUStatus.bAuthCount_EN)
 8024c9c:	4b2e      	ldr	r3, [pc, #184]	; (8024d58 <CheckTailgateFilterTimer+0x124>)
 8024c9e:	791b      	ldrb	r3, [r3, #4]
 8024ca0:	b2db      	uxtb	r3, r3
 8024ca2:	2b00      	cmp	r3, #0
 8024ca4:	d00e      	beq.n	8024cc4 <CheckTailgateFilterTimer+0x90>
					gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_TAILGATING;
 8024ca6:	4a2c      	ldr	r2, [pc, #176]	; (8024d58 <CheckTailgateFilterTimer+0x124>)
 8024ca8:	7a13      	ldrb	r3, [r2, #8]
 8024caa:	2103      	movs	r1, #3
 8024cac:	f361 0302 	bfi	r3, r1, #0, #3
 8024cb0:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nTailgating_EN = FLG_SET;
 8024cb2:	4a29      	ldr	r2, [pc, #164]	; (8024d58 <CheckTailgateFilterTimer+0x124>)
 8024cb4:	7f13      	ldrb	r3, [r2, #28]
 8024cb6:	f043 0301 	orr.w	r3, r3, #1
 8024cba:	7713      	strb	r3, [r2, #28]
					printf(" [EN] Tailgating detected! \n");
 8024cbc:	4827      	ldr	r0, [pc, #156]	; (8024d5c <CheckTailgateFilterTimer+0x128>)
 8024cbe:	f004 fb95 	bl	80293ec <printf_>
}
 8024cc2:	e038      	b.n	8024d36 <CheckTailgateFilterTimer+0x102>
				else if (gGCUStatus.bAuthCount_EX)
 8024cc4:	4b24      	ldr	r3, [pc, #144]	; (8024d58 <CheckTailgateFilterTimer+0x124>)
 8024cc6:	795b      	ldrb	r3, [r3, #5]
 8024cc8:	b2db      	uxtb	r3, r3
 8024cca:	2b00      	cmp	r3, #0
 8024ccc:	d033      	beq.n	8024d36 <CheckTailgateFilterTimer+0x102>
					gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_TAILGATING;
 8024cce:	4a22      	ldr	r2, [pc, #136]	; (8024d58 <CheckTailgateFilterTimer+0x124>)
 8024cd0:	7a13      	ldrb	r3, [r2, #8]
 8024cd2:	2103      	movs	r1, #3
 8024cd4:	f361 1306 	bfi	r3, r1, #4, #3
 8024cd8:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nTailgating_EX = FLG_SET;
 8024cda:	4a1f      	ldr	r2, [pc, #124]	; (8024d58 <CheckTailgateFilterTimer+0x124>)
 8024cdc:	7f13      	ldrb	r3, [r2, #28]
 8024cde:	f043 0310 	orr.w	r3, r3, #16
 8024ce2:	7713      	strb	r3, [r2, #28]
					printf(" [EX] Tailgating detected! \n");
 8024ce4:	481e      	ldr	r0, [pc, #120]	; (8024d60 <CheckTailgateFilterTimer+0x12c>)
 8024ce6:	f004 fb81 	bl	80293ec <printf_>
}
 8024cea:	e024      	b.n	8024d36 <CheckTailgateFilterTimer+0x102>
			if (gGCUStatus.bAuthCount_EN && psenNewSwing.b.s13)
 8024cec:	4b1a      	ldr	r3, [pc, #104]	; (8024d58 <CheckTailgateFilterTimer+0x124>)
 8024cee:	791b      	ldrb	r3, [r3, #4]
 8024cf0:	b2db      	uxtb	r3, r3
 8024cf2:	2b00      	cmp	r3, #0
 8024cf4:	d00d      	beq.n	8024d12 <CheckTailgateFilterTimer+0xde>
 8024cf6:	4b1b      	ldr	r3, [pc, #108]	; (8024d64 <CheckTailgateFilterTimer+0x130>)
 8024cf8:	785b      	ldrb	r3, [r3, #1]
 8024cfa:	f003 0310 	and.w	r3, r3, #16
 8024cfe:	b2db      	uxtb	r3, r3
 8024d00:	2b00      	cmp	r3, #0
 8024d02:	d006      	beq.n	8024d12 <CheckTailgateFilterTimer+0xde>
				printf(" [CheckTailgateFilterTimer] Something detected. No EN TG!!\n");
 8024d04:	4818      	ldr	r0, [pc, #96]	; (8024d68 <CheckTailgateFilterTimer+0x134>)
 8024d06:	f004 fb71 	bl	80293ec <printf_>
				ResetTimer(&timerTgFilter);
 8024d0a:	480c      	ldr	r0, [pc, #48]	; (8024d3c <CheckTailgateFilterTimer+0x108>)
 8024d0c:	f00b fbcc 	bl	80304a8 <ResetTimer>
}
 8024d10:	e011      	b.n	8024d36 <CheckTailgateFilterTimer+0x102>
			else if (gGCUStatus.bAuthCount_EX && psenNewSwing.b.s05)
 8024d12:	4b11      	ldr	r3, [pc, #68]	; (8024d58 <CheckTailgateFilterTimer+0x124>)
 8024d14:	795b      	ldrb	r3, [r3, #5]
 8024d16:	b2db      	uxtb	r3, r3
 8024d18:	2b00      	cmp	r3, #0
 8024d1a:	d00c      	beq.n	8024d36 <CheckTailgateFilterTimer+0x102>
 8024d1c:	4b11      	ldr	r3, [pc, #68]	; (8024d64 <CheckTailgateFilterTimer+0x130>)
 8024d1e:	781b      	ldrb	r3, [r3, #0]
 8024d20:	f003 0310 	and.w	r3, r3, #16
 8024d24:	b2db      	uxtb	r3, r3
 8024d26:	2b00      	cmp	r3, #0
 8024d28:	d005      	beq.n	8024d36 <CheckTailgateFilterTimer+0x102>
				printf(" [CheckTailgateFilterTimer] Something detected. No EX TG!! \n");
 8024d2a:	4810      	ldr	r0, [pc, #64]	; (8024d6c <CheckTailgateFilterTimer+0x138>)
 8024d2c:	f004 fb5e 	bl	80293ec <printf_>
				ResetTimer(&timerTgFilter);
 8024d30:	4802      	ldr	r0, [pc, #8]	; (8024d3c <CheckTailgateFilterTimer+0x108>)
 8024d32:	f00b fbb9 	bl	80304a8 <ResetTimer>
}
 8024d36:	bf00      	nop
 8024d38:	bd80      	pop	{r7, pc}
 8024d3a:	bf00      	nop
 8024d3c:	24000244 	.word	0x24000244
 8024d40:	2400000c 	.word	0x2400000c
 8024d44:	24000402 	.word	0x24000402
 8024d48:	080326ec 	.word	0x080326ec
 8024d4c:	24000403 	.word	0x24000403
 8024d50:	08032730 	.word	0x08032730
 8024d54:	24000480 	.word	0x24000480
 8024d58:	24000490 	.word	0x24000490
 8024d5c:	08032774 	.word	0x08032774
 8024d60:	08032794 	.word	0x08032794
 8024d64:	240003f4 	.word	0x240003f4
 8024d68:	080327b4 	.word	0x080327b4
 8024d6c:	080327f0 	.word	0x080327f0

08024d70 <CheckCloseWaitTimer>:

void CheckCloseWaitTimer(void)
{
 8024d70:	b580      	push	{r7, lr}
 8024d72:	af00      	add	r7, sp, #0
	if (IsTimeout(&timerCloseWait, dwCloseWaitTime * TICK_COUNT_100MS))
 8024d74:	4b09      	ldr	r3, [pc, #36]	; (8024d9c <CheckCloseWaitTimer+0x2c>)
 8024d76:	681b      	ldr	r3, [r3, #0]
 8024d78:	2264      	movs	r2, #100	; 0x64
 8024d7a:	fb02 f303 	mul.w	r3, r2, r3
 8024d7e:	4619      	mov	r1, r3
 8024d80:	4807      	ldr	r0, [pc, #28]	; (8024da0 <CheckCloseWaitTimer+0x30>)
 8024d82:	f00b fb9f 	bl	80304c4 <IsTimeout>
 8024d86:	4603      	mov	r3, r0
 8024d88:	2b00      	cmp	r3, #0
 8024d8a:	d005      	beq.n	8024d98 <CheckCloseWaitTimer+0x28>
	{
		ResetTimer(&timerCloseWait);
 8024d8c:	4804      	ldr	r0, [pc, #16]	; (8024da0 <CheckCloseWaitTimer+0x30>)
 8024d8e:	f00b fb8b 	bl	80304a8 <ResetTimer>
		ControlBarrier(BARRIER_CLOSE);
 8024d92:	2003      	movs	r0, #3
 8024d94:	f7fc fb36 	bl	8021404 <ControlBarrier>
	}
}
 8024d98:	bf00      	nop
 8024d9a:	bd80      	pop	{r7, pc}
 8024d9c:	24000004 	.word	0x24000004
 8024da0:	2400022c 	.word	0x2400022c

08024da4 <CheckStopHoldingTimer>:

void CheckStopHoldingTimer(void)
{
 8024da4:	b580      	push	{r7, lr}
 8024da6:	af00      	add	r7, sp, #0
	if (IsTimeout(&timerStopHolding, dwStopHoldingTime * TICK_COUNT_10SEC))
 8024da8:	4b0a      	ldr	r3, [pc, #40]	; (8024dd4 <CheckStopHoldingTimer+0x30>)
 8024daa:	681b      	ldr	r3, [r3, #0]
 8024dac:	f242 7210 	movw	r2, #10000	; 0x2710
 8024db0:	fb02 f303 	mul.w	r3, r2, r3
 8024db4:	4619      	mov	r1, r3
 8024db6:	4808      	ldr	r0, [pc, #32]	; (8024dd8 <CheckStopHoldingTimer+0x34>)
 8024db8:	f00b fb84 	bl	80304c4 <IsTimeout>
 8024dbc:	4603      	mov	r3, r0
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	d005      	beq.n	8024dce <CheckStopHoldingTimer+0x2a>
	{
		ResetTimer(&timerStopHolding);
 8024dc2:	4805      	ldr	r0, [pc, #20]	; (8024dd8 <CheckStopHoldingTimer+0x34>)
 8024dc4:	f00b fb70 	bl	80304a8 <ResetTimer>
		Brr_StopBarrier(FALSE);
 8024dc8:	2000      	movs	r0, #0
 8024dca:	f7fb fccf 	bl	802076c <Brr_StopBarrier>
	}
}
 8024dce:	bf00      	nop
 8024dd0:	bd80      	pop	{r7, pc}
 8024dd2:	bf00      	nop
 8024dd4:	24000024 	.word	0x24000024
 8024dd8:	24000238 	.word	0x24000238

08024ddc <PassageProcessForSwing>:
/*******************************************************************************
 * Main Passage Process for swing gate
 *******************************************************************************/

void PassageProcessForSwing()
{
 8024ddc:	b580      	push	{r7, lr}
 8024dde:	af00      	add	r7, sp, #0
	UpdateSensorData();
 8024de0:	f7fe fb60 	bl	80234a4 <UpdateSensorData>

	// SCADA data
	gGCUStatus.bSCADA = (*(BYTE *)READ03_ADR);
 8024de4:	4b47      	ldr	r3, [pc, #284]	; (8024f04 <PassageProcessForSwing+0x128>)
 8024de6:	781a      	ldrb	r2, [r3, #0]
 8024de8:	4b47      	ldr	r3, [pc, #284]	; (8024f08 <PassageProcessForSwing+0x12c>)
 8024dea:	751a      	strb	r2, [r3, #20]

	CheckBarrierOperation();
 8024dec:	f7fe fd74 	bl	80238d8 <CheckBarrierOperation>
	CheckSafetyTimerForSwing();
 8024df0:	f7ff fcfc 	bl	80247ec <CheckSafetyTimerForSwing>
	CheckIndicatorTimer();
 8024df4:	f7fc fe50 	bl	8021a98 <CheckIndicatorTimer>
	CheckBlinkTimer();
 8024df8:	f7fd f9a6 	bl	8022148 <CheckBlinkTimer>
	CheckBuzzerTimer();
 8024dfc:	f7fc fe32 	bl	8021a64 <CheckBuzzerTimer>
	CheckEmergencySignal();
 8024e00:	f7fc fd74 	bl	80218ec <CheckEmergencySignal>
	CheckUPSStatus();
 8024e04:	f7fc fc76 	bl	80216f4 <CheckUPSStatus>
	CheckResetTimer();
 8024e08:	f7ff fe58 	bl	8024abc <CheckResetTimer>
	CheckCloseWaitTimer();
 8024e0c:	f7ff ffb0 	bl	8024d70 <CheckCloseWaitTimer>
	CheckStopHoldingTimer();
 8024e10:	f7ff ffc8 	bl	8024da4 <CheckStopHoldingTimer>

	if (memcmp(&psenNewSwing, &psenOldSwing, sizeof(T_PASS_SEN_SWING)))
 8024e14:	2204      	movs	r2, #4
 8024e16:	493d      	ldr	r1, [pc, #244]	; (8024f0c <PassageProcessForSwing+0x130>)
 8024e18:	483d      	ldr	r0, [pc, #244]	; (8024f10 <PassageProcessForSwing+0x134>)
 8024e1a:	f00b fbad 	bl	8030578 <memcmp>
 8024e1e:	4603      	mov	r3, r0
 8024e20:	2b00      	cmp	r3, #0
 8024e22:	d01c      	beq.n	8024e5e <PassageProcessForSwing+0x82>
	{
		// check timers
		ResetTimer(&timerPassageClear);
 8024e24:	483b      	ldr	r0, [pc, #236]	; (8024f14 <PassageProcessForSwing+0x138>)
 8024e26:	f00b fb3f 	bl	80304a8 <ResetTimer>

		if (!gCurGCUOpMode.bEmergencyMaint && gfFreeMode == FALSE)
 8024e2a:	4b3b      	ldr	r3, [pc, #236]	; (8024f18 <PassageProcessForSwing+0x13c>)
 8024e2c:	789b      	ldrb	r3, [r3, #2]
 8024e2e:	2b00      	cmp	r3, #0
 8024e30:	d150      	bne.n	8024ed4 <PassageProcessForSwing+0xf8>
 8024e32:	4b3a      	ldr	r3, [pc, #232]	; (8024f1c <PassageProcessForSwing+0x140>)
 8024e34:	781b      	ldrb	r3, [r3, #0]
 8024e36:	f083 0301 	eor.w	r3, r3, #1
 8024e3a:	b2db      	uxtb	r3, r3
 8024e3c:	2b00      	cmp	r3, #0
 8024e3e:	d049      	beq.n	8024ed4 <PassageProcessForSwing+0xf8>
		{
			if ((gCurGCUOpMode.bServiceMode_EN != NO_SERVICE) || (gCurGCUOpMode.bServiceMode_EX != NO_SERVICE))
 8024e40:	4b35      	ldr	r3, [pc, #212]	; (8024f18 <PassageProcessForSwing+0x13c>)
 8024e42:	781b      	ldrb	r3, [r3, #0]
 8024e44:	2b00      	cmp	r3, #0
 8024e46:	d103      	bne.n	8024e50 <PassageProcessForSwing+0x74>
 8024e48:	4b33      	ldr	r3, [pc, #204]	; (8024f18 <PassageProcessForSwing+0x13c>)
 8024e4a:	785b      	ldrb	r3, [r3, #1]
 8024e4c:	2b00      	cmp	r3, #0
 8024e4e:	d041      	beq.n	8024ed4 <PassageProcessForSwing+0xf8>
			{
				CheckEntranceSwing();
 8024e50:	f7fe ffec 	bl	8023e2c <CheckEntranceSwing>
				CheckPassReadySwing();
 8024e54:	f7ff f8f0 	bl	8024038 <CheckPassReadySwing>
				CheckPassingSwing();
 8024e58:	f7ff f9b4 	bl	80241c4 <CheckPassingSwing>
 8024e5c:	e03a      	b.n	8024ed4 <PassageProcessForSwing+0xf8>
			}
		}
	}
	else
	{
		if (psenNewSwing.dirEntry.enter || psenNewSwing.section.lower_EN || psenNewSwing.side.exit)
 8024e5e:	4b2c      	ldr	r3, [pc, #176]	; (8024f10 <PassageProcessForSwing+0x134>)
 8024e60:	781b      	ldrb	r3, [r3, #0]
 8024e62:	f003 0303 	and.w	r3, r3, #3
 8024e66:	b2db      	uxtb	r3, r3
 8024e68:	2b00      	cmp	r3, #0
 8024e6a:	d10a      	bne.n	8024e82 <PassageProcessForSwing+0xa6>
 8024e6c:	4b28      	ldr	r3, [pc, #160]	; (8024f10 <PassageProcessForSwing+0x134>)
 8024e6e:	781b      	ldrb	r3, [r3, #0]
 8024e70:	f023 030f 	bic.w	r3, r3, #15
 8024e74:	b2db      	uxtb	r3, r3
 8024e76:	2b00      	cmp	r3, #0
 8024e78:	d103      	bne.n	8024e82 <PassageProcessForSwing+0xa6>
 8024e7a:	4b25      	ldr	r3, [pc, #148]	; (8024f10 <PassageProcessForSwing+0x134>)
 8024e7c:	785b      	ldrb	r3, [r3, #1]
 8024e7e:	2b00      	cmp	r3, #0
 8024e80:	d003      	beq.n	8024e8a <PassageProcessForSwing+0xae>
		{
			// Update Timer
			ResetTimer(&timerPassageClear);
 8024e82:	4824      	ldr	r0, [pc, #144]	; (8024f14 <PassageProcessForSwing+0x138>)
 8024e84:	f00b fb10 	bl	80304a8 <ResetTimer>
 8024e88:	e020      	b.n	8024ecc <PassageProcessForSwing+0xf0>
		}
		else
		{
			if (timerPassageClear.fStart)
 8024e8a:	4b22      	ldr	r3, [pc, #136]	; (8024f14 <PassageProcessForSwing+0x138>)
 8024e8c:	781b      	ldrb	r3, [r3, #0]
 8024e8e:	2b00      	cmp	r3, #0
 8024e90:	d019      	beq.n	8024ec6 <PassageProcessForSwing+0xea>
			{
				if (IsTimeout(&timerPassageClear, (DEFAULT_PASSAGE_CLEAR_TIMEOUT * TICK_COUNT_1SEC)))
 8024e92:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8024e96:	481f      	ldr	r0, [pc, #124]	; (8024f14 <PassageProcessForSwing+0x138>)
 8024e98:	f00b fb14 	bl	80304c4 <IsTimeout>
 8024e9c:	4603      	mov	r3, r0
 8024e9e:	2b00      	cmp	r3, #0
 8024ea0:	d014      	beq.n	8024ecc <PassageProcessForSwing+0xf0>
				{
					isPassReady_EN = FALSE;
 8024ea2:	4b1f      	ldr	r3, [pc, #124]	; (8024f20 <PassageProcessForSwing+0x144>)
 8024ea4:	2200      	movs	r2, #0
 8024ea6:	701a      	strb	r2, [r3, #0]
					isPassReady_EX = FALSE;
 8024ea8:	4b1e      	ldr	r3, [pc, #120]	; (8024f24 <PassageProcessForSwing+0x148>)
 8024eaa:	2200      	movs	r2, #0
 8024eac:	701a      	strb	r2, [r3, #0]
					isLuggageSet_EN = FALSE;
 8024eae:	4b1e      	ldr	r3, [pc, #120]	; (8024f28 <PassageProcessForSwing+0x14c>)
 8024eb0:	2200      	movs	r2, #0
 8024eb2:	701a      	strb	r2, [r3, #0]
					isLuggageSet_EX = FALSE;
 8024eb4:	4b1d      	ldr	r3, [pc, #116]	; (8024f2c <PassageProcessForSwing+0x150>)
 8024eb6:	2200      	movs	r2, #0
 8024eb8:	701a      	strb	r2, [r3, #0]
					ClearPassageAlarm();
 8024eba:	f7fc ff81 	bl	8021dc0 <ClearPassageAlarm>
					ResetTimer(&timerPassageClear);
 8024ebe:	4815      	ldr	r0, [pc, #84]	; (8024f14 <PassageProcessForSwing+0x138>)
 8024ec0:	f00b faf2 	bl	80304a8 <ResetTimer>
 8024ec4:	e002      	b.n	8024ecc <PassageProcessForSwing+0xf0>
			}
			else
			{
				// Last update 20230107
				// if (gGCUStatus.PassageAlarm.b.nFromEN || gGCUStatus.PassageAlarm.b.nFromEX )
				SetTimer(&timerPassageClear);
 8024ec6:	4813      	ldr	r0, [pc, #76]	; (8024f14 <PassageProcessForSwing+0x138>)
 8024ec8:	f00b fada 	bl	8030480 <SetTimer>
			}
		}

		CheckAuthTimeout();
 8024ecc:	f7fd f884 	bl	8021fd8 <CheckAuthTimeout>
		CheckModeChange();
 8024ed0:	f7fc f864 	bl	8020f9c <CheckModeChange>
	}

	if (!gCurGCUOpMode.bEmergencyMaint)
 8024ed4:	4b10      	ldr	r3, [pc, #64]	; (8024f18 <PassageProcessForSwing+0x13c>)
 8024ed6:	789b      	ldrb	r3, [r3, #2]
 8024ed8:	2b00      	cmp	r3, #0
 8024eda:	d109      	bne.n	8024ef0 <PassageProcessForSwing+0x114>
	{
		CheckTailgateFilterTimer();
 8024edc:	f7ff feaa 	bl	8024c34 <CheckTailgateFilterTimer>
		CheckCounterEnterTimer();
 8024ee0:	f7ff faf4 	bl	80244cc <CheckCounterEnterTimer>
		CheckIllegalEnter();
 8024ee4:	f7ff fb5e 	bl	80245a4 <CheckIllegalEnter>
		CheckTGTimerForSwing();
 8024ee8:	f7ff fc0c 	bl	8024704 <CheckTGTimerForSwing>
		CheckIllegalAlarmTimer();
 8024eec:	f7fd f8b6 	bl	802205c <CheckIllegalAlarmTimer>
 8024ef0:	4b07      	ldr	r3, [pc, #28]	; (8024f10 <PassageProcessForSwing+0x134>)
 8024ef2:	681b      	ldr	r3, [r3, #0]
	}

	// update sensor state
	memcpy(&psenOldSwing, &psenNewSwing, sizeof(T_PASS_SEN_SWING));
 8024ef4:	4a05      	ldr	r2, [pc, #20]	; (8024f0c <PassageProcessForSwing+0x130>)
 8024ef6:	6013      	str	r3, [r2, #0]

	CheckPassSenError(TRUE);
 8024ef8:	2001      	movs	r0, #1
 8024efa:	f7fc fdf1 	bl	8021ae0 <CheckPassSenError>
}
 8024efe:	bf00      	nop
 8024f00:	bd80      	pop	{r7, pc}
 8024f02:	bf00      	nop
 8024f04:	60000500 	.word	0x60000500
 8024f08:	24000490 	.word	0x24000490
 8024f0c:	240003f8 	.word	0x240003f8
 8024f10:	240003f4 	.word	0x240003f4
 8024f14:	2400016c 	.word	0x2400016c
 8024f18:	240004b4 	.word	0x240004b4
 8024f1c:	2400041b 	.word	0x2400041b
 8024f20:	240003fe 	.word	0x240003fe
 8024f24:	240003ff 	.word	0x240003ff
 8024f28:	24000402 	.word	0x24000402
 8024f2c:	24000403 	.word	0x24000403

08024f30 <TestDirection>:
	if (U0_Getch(&testData))
		U0_Putch(testData);
}

void TestDirection(void)
{
 8024f30:	b580      	push	{r7, lr}
 8024f32:	b082      	sub	sp, #8
 8024f34:	af00      	add	r7, sp, #0
	BYTE bColor = DIR_OFF;
 8024f36:	2300      	movs	r3, #0
 8024f38:	71fb      	strb	r3, [r7, #7]

	if (nDirOpSeq)
 8024f3a:	4b24      	ldr	r3, [pc, #144]	; (8024fcc <TestDirection+0x9c>)
 8024f3c:	681b      	ldr	r3, [r3, #0]
 8024f3e:	2b00      	cmp	r3, #0
 8024f40:	d036      	beq.n	8024fb0 <TestDirection+0x80>
	{
		if (!TestOption.b.fTestDir)
 8024f42:	4b23      	ldr	r3, [pc, #140]	; (8024fd0 <TestDirection+0xa0>)
 8024f44:	681b      	ldr	r3, [r3, #0]
 8024f46:	f343 0340 	sbfx	r3, r3, #1, #1
 8024f4a:	b25b      	sxtb	r3, r3
 8024f4c:	2b00      	cmp	r3, #0
 8024f4e:	d105      	bne.n	8024f5c <TestDirection+0x2c>
		{
			nDirOpSeq = 0;
 8024f50:	4b1e      	ldr	r3, [pc, #120]	; (8024fcc <TestDirection+0x9c>)
 8024f52:	2200      	movs	r2, #0
 8024f54:	601a      	str	r2, [r3, #0]
			bColor = DIR_OFF;
 8024f56:	2300      	movs	r3, #0
 8024f58:	71fb      	strb	r3, [r7, #7]
 8024f5a:	e020      	b.n	8024f9e <TestDirection+0x6e>
		}
		else
		{
			switch (nDirOpSeq)
 8024f5c:	4b1b      	ldr	r3, [pc, #108]	; (8024fcc <TestDirection+0x9c>)
 8024f5e:	681b      	ldr	r3, [r3, #0]
 8024f60:	2b03      	cmp	r3, #3
 8024f62:	d016      	beq.n	8024f92 <TestDirection+0x62>
 8024f64:	2b03      	cmp	r3, #3
 8024f66:	dc1a      	bgt.n	8024f9e <TestDirection+0x6e>
 8024f68:	2b01      	cmp	r3, #1
 8024f6a:	d002      	beq.n	8024f72 <TestDirection+0x42>
 8024f6c:	2b02      	cmp	r3, #2
 8024f6e:	d008      	beq.n	8024f82 <TestDirection+0x52>
 8024f70:	e015      	b.n	8024f9e <TestDirection+0x6e>
			{
			case 1:
				bColor = STATE_ALLOW;
 8024f72:	2301      	movs	r3, #1
 8024f74:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq++;
 8024f76:	4b15      	ldr	r3, [pc, #84]	; (8024fcc <TestDirection+0x9c>)
 8024f78:	681b      	ldr	r3, [r3, #0]
 8024f7a:	3301      	adds	r3, #1
 8024f7c:	4a13      	ldr	r2, [pc, #76]	; (8024fcc <TestDirection+0x9c>)
 8024f7e:	6013      	str	r3, [r2, #0]
				break;
 8024f80:	e00d      	b.n	8024f9e <TestDirection+0x6e>
			case 2:
				bColor = STATE_STOP;
 8024f82:	2302      	movs	r3, #2
 8024f84:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq++;
 8024f86:	4b11      	ldr	r3, [pc, #68]	; (8024fcc <TestDirection+0x9c>)
 8024f88:	681b      	ldr	r3, [r3, #0]
 8024f8a:	3301      	adds	r3, #1
 8024f8c:	4a0f      	ldr	r2, [pc, #60]	; (8024fcc <TestDirection+0x9c>)
 8024f8e:	6013      	str	r3, [r2, #0]
				break;
 8024f90:	e005      	b.n	8024f9e <TestDirection+0x6e>
			case 3:
				bColor = DIR_OFF;
 8024f92:	2300      	movs	r3, #0
 8024f94:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq = 1;
 8024f96:	4b0d      	ldr	r3, [pc, #52]	; (8024fcc <TestDirection+0x9c>)
 8024f98:	2201      	movs	r2, #1
 8024f9a:	601a      	str	r2, [r3, #0]
				break;
 8024f9c:	bf00      	nop
			}
		}
		ControlStatusLED_Ex(bColor);
 8024f9e:	79fb      	ldrb	r3, [r7, #7]
 8024fa0:	4618      	mov	r0, r3
 8024fa2:	f000 fa61 	bl	8025468 <ControlStatusLED_Ex>
		ControlStatusLED_En(bColor);
 8024fa6:	79fb      	ldrb	r3, [r7, #7]
 8024fa8:	4618      	mov	r0, r3
 8024faa:	f000 fa2d 	bl	8025408 <ControlStatusLED_En>
	}
	else if (TestOption.b.fTestDir)
	{
		nDirOpSeq = 1;
	}
}
 8024fae:	e009      	b.n	8024fc4 <TestDirection+0x94>
	else if (TestOption.b.fTestDir)
 8024fb0:	4b07      	ldr	r3, [pc, #28]	; (8024fd0 <TestDirection+0xa0>)
 8024fb2:	681b      	ldr	r3, [r3, #0]
 8024fb4:	f343 0340 	sbfx	r3, r3, #1, #1
 8024fb8:	b25b      	sxtb	r3, r3
 8024fba:	2b00      	cmp	r3, #0
 8024fbc:	d002      	beq.n	8024fc4 <TestDirection+0x94>
		nDirOpSeq = 1;
 8024fbe:	4b03      	ldr	r3, [pc, #12]	; (8024fcc <TestDirection+0x9c>)
 8024fc0:	2201      	movs	r2, #1
 8024fc2:	601a      	str	r2, [r3, #0]
}
 8024fc4:	bf00      	nop
 8024fc6:	3708      	adds	r7, #8
 8024fc8:	46bd      	mov	sp, r7
 8024fca:	bd80      	pop	{r7, pc}
 8024fcc:	240004e0 	.word	0x240004e0
 8024fd0:	240004cc 	.word	0x240004cc

08024fd4 <TestOverHeadDirection>:

void TestOverHeadDirection(void)
{
 8024fd4:	b580      	push	{r7, lr}
 8024fd6:	b082      	sub	sp, #8
 8024fd8:	af00      	add	r7, sp, #0
	BYTE bColor = DIR_OFF;
 8024fda:	2300      	movs	r3, #0
 8024fdc:	71fb      	strb	r3, [r7, #7]

	if (nOverOpSeq)
 8024fde:	4b24      	ldr	r3, [pc, #144]	; (8025070 <TestOverHeadDirection+0x9c>)
 8024fe0:	681b      	ldr	r3, [r3, #0]
 8024fe2:	2b00      	cmp	r3, #0
 8024fe4:	d036      	beq.n	8025054 <TestOverHeadDirection+0x80>
	{
		if (!TestOption.b.fTestOverHeadLamp)
 8024fe6:	4b23      	ldr	r3, [pc, #140]	; (8025074 <TestOverHeadDirection+0xa0>)
 8024fe8:	681b      	ldr	r3, [r3, #0]
 8024fea:	f343 1300 	sbfx	r3, r3, #4, #1
 8024fee:	b25b      	sxtb	r3, r3
 8024ff0:	2b00      	cmp	r3, #0
 8024ff2:	d105      	bne.n	8025000 <TestOverHeadDirection+0x2c>
		{
			nOverOpSeq = 0;
 8024ff4:	4b1e      	ldr	r3, [pc, #120]	; (8025070 <TestOverHeadDirection+0x9c>)
 8024ff6:	2200      	movs	r2, #0
 8024ff8:	601a      	str	r2, [r3, #0]
			bColor = DIR_OFF;
 8024ffa:	2300      	movs	r3, #0
 8024ffc:	71fb      	strb	r3, [r7, #7]
 8024ffe:	e020      	b.n	8025042 <TestOverHeadDirection+0x6e>
		}
		else
		{
			switch (nOverOpSeq)
 8025000:	4b1b      	ldr	r3, [pc, #108]	; (8025070 <TestOverHeadDirection+0x9c>)
 8025002:	681b      	ldr	r3, [r3, #0]
 8025004:	2b03      	cmp	r3, #3
 8025006:	d016      	beq.n	8025036 <TestOverHeadDirection+0x62>
 8025008:	2b03      	cmp	r3, #3
 802500a:	dc1a      	bgt.n	8025042 <TestOverHeadDirection+0x6e>
 802500c:	2b01      	cmp	r3, #1
 802500e:	d002      	beq.n	8025016 <TestOverHeadDirection+0x42>
 8025010:	2b02      	cmp	r3, #2
 8025012:	d008      	beq.n	8025026 <TestOverHeadDirection+0x52>
 8025014:	e015      	b.n	8025042 <TestOverHeadDirection+0x6e>
			{
			case 1:
				bColor = STATE_ALLOW;
 8025016:	2301      	movs	r3, #1
 8025018:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq++;
 802501a:	4b15      	ldr	r3, [pc, #84]	; (8025070 <TestOverHeadDirection+0x9c>)
 802501c:	681b      	ldr	r3, [r3, #0]
 802501e:	3301      	adds	r3, #1
 8025020:	4a13      	ldr	r2, [pc, #76]	; (8025070 <TestOverHeadDirection+0x9c>)
 8025022:	6013      	str	r3, [r2, #0]
				break;
 8025024:	e00d      	b.n	8025042 <TestOverHeadDirection+0x6e>
			case 2:
				bColor = STATE_STOP;
 8025026:	2302      	movs	r3, #2
 8025028:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq++;
 802502a:	4b11      	ldr	r3, [pc, #68]	; (8025070 <TestOverHeadDirection+0x9c>)
 802502c:	681b      	ldr	r3, [r3, #0]
 802502e:	3301      	adds	r3, #1
 8025030:	4a0f      	ldr	r2, [pc, #60]	; (8025070 <TestOverHeadDirection+0x9c>)
 8025032:	6013      	str	r3, [r2, #0]
				break;
 8025034:	e005      	b.n	8025042 <TestOverHeadDirection+0x6e>
			case 3:
				bColor = DIR_OFF;
 8025036:	2300      	movs	r3, #0
 8025038:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq = 1;
 802503a:	4b0d      	ldr	r3, [pc, #52]	; (8025070 <TestOverHeadDirection+0x9c>)
 802503c:	2201      	movs	r2, #1
 802503e:	601a      	str	r2, [r3, #0]
				break;
 8025040:	bf00      	nop
			}
		}
		ControlOverHeadDisplay_Ex(bColor);
 8025042:	79fb      	ldrb	r3, [r7, #7]
 8025044:	4618      	mov	r0, r3
 8025046:	f000 fa6f 	bl	8025528 <ControlOverHeadDisplay_Ex>
		ControlOverHeadDisplay_En(bColor);
 802504a:	79fb      	ldrb	r3, [r7, #7]
 802504c:	4618      	mov	r0, r3
 802504e:	f000 fa3b 	bl	80254c8 <ControlOverHeadDisplay_En>
	}
	else if (TestOption.b.fTestOverHeadLamp)
	{
		nOverOpSeq = 1;
	}
}
 8025052:	e009      	b.n	8025068 <TestOverHeadDirection+0x94>
	else if (TestOption.b.fTestOverHeadLamp)
 8025054:	4b07      	ldr	r3, [pc, #28]	; (8025074 <TestOverHeadDirection+0xa0>)
 8025056:	681b      	ldr	r3, [r3, #0]
 8025058:	f343 1300 	sbfx	r3, r3, #4, #1
 802505c:	b25b      	sxtb	r3, r3
 802505e:	2b00      	cmp	r3, #0
 8025060:	d002      	beq.n	8025068 <TestOverHeadDirection+0x94>
		nOverOpSeq = 1;
 8025062:	4b03      	ldr	r3, [pc, #12]	; (8025070 <TestOverHeadDirection+0x9c>)
 8025064:	2201      	movs	r2, #1
 8025066:	601a      	str	r2, [r3, #0]
}
 8025068:	bf00      	nop
 802506a:	3708      	adds	r7, #8
 802506c:	46bd      	mov	sp, r7
 802506e:	bd80      	pop	{r7, pc}
 8025070:	240004e4 	.word	0x240004e4
 8025074:	240004cc 	.word	0x240004cc

08025078 <TestLamp>:

void TestLamp(void)
{
 8025078:	b580      	push	{r7, lr}
 802507a:	b082      	sub	sp, #8
 802507c:	af00      	add	r7, sp, #0

	BYTE bColor = LAMP_OFF;
 802507e:	2300      	movs	r3, #0
 8025080:	71fb      	strb	r3, [r7, #7]
	if (nLampOpSeq)
 8025082:	4b3a      	ldr	r3, [pc, #232]	; (802516c <TestLamp+0xf4>)
 8025084:	681b      	ldr	r3, [r3, #0]
 8025086:	2b00      	cmp	r3, #0
 8025088:	d061      	beq.n	802514e <TestLamp+0xd6>
	{
		if (!TestOption.b.fTestLamp)
 802508a:	4b39      	ldr	r3, [pc, #228]	; (8025170 <TestLamp+0xf8>)
 802508c:	681b      	ldr	r3, [r3, #0]
 802508e:	f343 0380 	sbfx	r3, r3, #2, #1
 8025092:	b25b      	sxtb	r3, r3
 8025094:	2b00      	cmp	r3, #0
 8025096:	d105      	bne.n	80250a4 <TestLamp+0x2c>
		{
			nLampOpSeq = 0;
 8025098:	4b34      	ldr	r3, [pc, #208]	; (802516c <TestLamp+0xf4>)
 802509a:	2200      	movs	r2, #0
 802509c:	601a      	str	r2, [r3, #0]
			bColor = LAMP_OFF;
 802509e:	2300      	movs	r3, #0
 80250a0:	71fb      	strb	r3, [r7, #7]
 80250a2:	e04b      	b.n	802513c <TestLamp+0xc4>
		}
		else
		{
			switch (nLampOpSeq)
 80250a4:	4b31      	ldr	r3, [pc, #196]	; (802516c <TestLamp+0xf4>)
 80250a6:	681b      	ldr	r3, [r3, #0]
 80250a8:	3b01      	subs	r3, #1
 80250aa:	2b06      	cmp	r3, #6
 80250ac:	d846      	bhi.n	802513c <TestLamp+0xc4>
 80250ae:	a201      	add	r2, pc, #4	; (adr r2, 80250b4 <TestLamp+0x3c>)
 80250b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80250b4:	080250d1 	.word	0x080250d1
 80250b8:	080250e1 	.word	0x080250e1
 80250bc:	080250f1 	.word	0x080250f1
 80250c0:	08025101 	.word	0x08025101
 80250c4:	08025111 	.word	0x08025111
 80250c8:	08025121 	.word	0x08025121
 80250cc:	08025131 	.word	0x08025131
			{
			case 1:
				bColor = LAMP_RED_ON;
 80250d0:	2301      	movs	r3, #1
 80250d2:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80250d4:	4b25      	ldr	r3, [pc, #148]	; (802516c <TestLamp+0xf4>)
 80250d6:	681b      	ldr	r3, [r3, #0]
 80250d8:	3301      	adds	r3, #1
 80250da:	4a24      	ldr	r2, [pc, #144]	; (802516c <TestLamp+0xf4>)
 80250dc:	6013      	str	r3, [r2, #0]
				break;
 80250de:	e02d      	b.n	802513c <TestLamp+0xc4>
			case 2:
				bColor = LAMP_GREEN_ON;
 80250e0:	2302      	movs	r3, #2
 80250e2:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80250e4:	4b21      	ldr	r3, [pc, #132]	; (802516c <TestLamp+0xf4>)
 80250e6:	681b      	ldr	r3, [r3, #0]
 80250e8:	3301      	adds	r3, #1
 80250ea:	4a20      	ldr	r2, [pc, #128]	; (802516c <TestLamp+0xf4>)
 80250ec:	6013      	str	r3, [r2, #0]
				break;
 80250ee:	e025      	b.n	802513c <TestLamp+0xc4>
			case 3:
				bColor = LAMP_BLUE_ON;
 80250f0:	2304      	movs	r3, #4
 80250f2:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80250f4:	4b1d      	ldr	r3, [pc, #116]	; (802516c <TestLamp+0xf4>)
 80250f6:	681b      	ldr	r3, [r3, #0]
 80250f8:	3301      	adds	r3, #1
 80250fa:	4a1c      	ldr	r2, [pc, #112]	; (802516c <TestLamp+0xf4>)
 80250fc:	6013      	str	r3, [r2, #0]
				break;
 80250fe:	e01d      	b.n	802513c <TestLamp+0xc4>
			case 4:
				bColor = LAMP_RED_ON + LAMP_GREEN_ON;
 8025100:	2303      	movs	r3, #3
 8025102:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 8025104:	4b19      	ldr	r3, [pc, #100]	; (802516c <TestLamp+0xf4>)
 8025106:	681b      	ldr	r3, [r3, #0]
 8025108:	3301      	adds	r3, #1
 802510a:	4a18      	ldr	r2, [pc, #96]	; (802516c <TestLamp+0xf4>)
 802510c:	6013      	str	r3, [r2, #0]
				break;
 802510e:	e015      	b.n	802513c <TestLamp+0xc4>
			case 5:
				bColor = LAMP_RED_ON + LAMP_BLUE_ON;
 8025110:	2305      	movs	r3, #5
 8025112:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 8025114:	4b15      	ldr	r3, [pc, #84]	; (802516c <TestLamp+0xf4>)
 8025116:	681b      	ldr	r3, [r3, #0]
 8025118:	3301      	adds	r3, #1
 802511a:	4a14      	ldr	r2, [pc, #80]	; (802516c <TestLamp+0xf4>)
 802511c:	6013      	str	r3, [r2, #0]
				break;
 802511e:	e00d      	b.n	802513c <TestLamp+0xc4>
			case 6:
				bColor = LAMP_BLUE_ON + LAMP_GREEN_ON;
 8025120:	2306      	movs	r3, #6
 8025122:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 8025124:	4b11      	ldr	r3, [pc, #68]	; (802516c <TestLamp+0xf4>)
 8025126:	681b      	ldr	r3, [r3, #0]
 8025128:	3301      	adds	r3, #1
 802512a:	4a10      	ldr	r2, [pc, #64]	; (802516c <TestLamp+0xf4>)
 802512c:	6013      	str	r3, [r2, #0]
				break;
 802512e:	e005      	b.n	802513c <TestLamp+0xc4>
			case 7:
				bColor = LAMP_RED_ON + LAMP_BLUE_ON + LAMP_GREEN_ON;
 8025130:	2307      	movs	r3, #7
 8025132:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq = 1;
 8025134:	4b0d      	ldr	r3, [pc, #52]	; (802516c <TestLamp+0xf4>)
 8025136:	2201      	movs	r2, #1
 8025138:	601a      	str	r2, [r3, #0]
				break;
 802513a:	bf00      	nop
			}
		}
		ControlIndicatorLight_En(bColor);
 802513c:	79fb      	ldrb	r3, [r7, #7]
 802513e:	4618      	mov	r0, r3
 8025140:	f000 fa22 	bl	8025588 <ControlIndicatorLight_En>
		ControlIndicatorLight_Ex(bColor);
 8025144:	79fb      	ldrb	r3, [r7, #7]
 8025146:	4618      	mov	r0, r3
 8025148:	f000 fa4c 	bl	80255e4 <ControlIndicatorLight_Ex>
	}
	else if (TestOption.b.fTestLamp)
	{
		nLampOpSeq = 1;
	}
}
 802514c:	e009      	b.n	8025162 <TestLamp+0xea>
	else if (TestOption.b.fTestLamp)
 802514e:	4b08      	ldr	r3, [pc, #32]	; (8025170 <TestLamp+0xf8>)
 8025150:	681b      	ldr	r3, [r3, #0]
 8025152:	f343 0380 	sbfx	r3, r3, #2, #1
 8025156:	b25b      	sxtb	r3, r3
 8025158:	2b00      	cmp	r3, #0
 802515a:	d002      	beq.n	8025162 <TestLamp+0xea>
		nLampOpSeq = 1;
 802515c:	4b03      	ldr	r3, [pc, #12]	; (802516c <TestLamp+0xf4>)
 802515e:	2201      	movs	r2, #1
 8025160:	601a      	str	r2, [r3, #0]
}
 8025162:	bf00      	nop
 8025164:	3708      	adds	r7, #8
 8025166:	46bd      	mov	sp, r7
 8025168:	bd80      	pop	{r7, pc}
 802516a:	bf00      	nop
 802516c:	240004dc 	.word	0x240004dc
 8025170:	240004cc 	.word	0x240004cc

08025174 <TestDoor_P>:

void TestDoor_P(void)
{
 8025174:	b580      	push	{r7, lr}
 8025176:	b082      	sub	sp, #8
 8025178:	af00      	add	r7, sp, #0
	BYTE bDir = ENTRY_OPEN;
 802517a:	2300      	movs	r3, #0
 802517c:	71fb      	strb	r3, [r7, #7]

	if (nPDoorOpSeq)
 802517e:	4b2c      	ldr	r3, [pc, #176]	; (8025230 <TestDoor_P+0xbc>)
 8025180:	681b      	ldr	r3, [r3, #0]
 8025182:	2b00      	cmp	r3, #0
 8025184:	d043      	beq.n	802520e <TestDoor_P+0x9a>
	{
		if (!TestOption.b.fTestBarrier)
 8025186:	4b2b      	ldr	r3, [pc, #172]	; (8025234 <TestDoor_P+0xc0>)
 8025188:	681b      	ldr	r3, [r3, #0]
 802518a:	f343 1340 	sbfx	r3, r3, #5, #1
 802518e:	b25b      	sxtb	r3, r3
 8025190:	2b00      	cmp	r3, #0
 8025192:	d108      	bne.n	80251a6 <TestDoor_P+0x32>
		{
			nPDoorOpSeq = 0;
 8025194:	4b26      	ldr	r3, [pc, #152]	; (8025230 <TestDoor_P+0xbc>)
 8025196:	2200      	movs	r2, #0
 8025198:	601a      	str	r2, [r3, #0]
			Brr_SetEmergency_P(TRUE);
 802519a:	2001      	movs	r0, #1
 802519c:	f000 fa50 	bl	8025640 <Brr_SetEmergency_P>
			bDir = ENTRY_OPEN;
 80251a0:	2300      	movs	r3, #0
 80251a2:	71fb      	strb	r3, [r7, #7]
 80251a4:	e02e      	b.n	8025204 <TestDoor_P+0x90>
		}
		else
		{
			switch (nPDoorOpSeq)
 80251a6:	4b22      	ldr	r3, [pc, #136]	; (8025230 <TestDoor_P+0xbc>)
 80251a8:	681b      	ldr	r3, [r3, #0]
 80251aa:	3b01      	subs	r3, #1
 80251ac:	2b03      	cmp	r3, #3
 80251ae:	d829      	bhi.n	8025204 <TestDoor_P+0x90>
 80251b0:	a201      	add	r2, pc, #4	; (adr r2, 80251b8 <TestDoor_P+0x44>)
 80251b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80251b6:	bf00      	nop
 80251b8:	080251c9 	.word	0x080251c9
 80251bc:	080251d9 	.word	0x080251d9
 80251c0:	080251e9 	.word	0x080251e9
 80251c4:	080251f9 	.word	0x080251f9
			{
			case 1:
				bDir = ENTRY_OPEN;
 80251c8:	2300      	movs	r3, #0
 80251ca:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 80251cc:	4b18      	ldr	r3, [pc, #96]	; (8025230 <TestDoor_P+0xbc>)
 80251ce:	681b      	ldr	r3, [r3, #0]
 80251d0:	3301      	adds	r3, #1
 80251d2:	4a17      	ldr	r2, [pc, #92]	; (8025230 <TestDoor_P+0xbc>)
 80251d4:	6013      	str	r3, [r2, #0]
				break;
 80251d6:	e015      	b.n	8025204 <TestDoor_P+0x90>
			case 2:
				bDir = CLOSE;
 80251d8:	2301      	movs	r3, #1
 80251da:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 80251dc:	4b14      	ldr	r3, [pc, #80]	; (8025230 <TestDoor_P+0xbc>)
 80251de:	681b      	ldr	r3, [r3, #0]
 80251e0:	3301      	adds	r3, #1
 80251e2:	4a13      	ldr	r2, [pc, #76]	; (8025230 <TestDoor_P+0xbc>)
 80251e4:	6013      	str	r3, [r2, #0]
				break;
 80251e6:	e00d      	b.n	8025204 <TestDoor_P+0x90>
			case 3:
				bDir = EXIT_OPEN;
 80251e8:	2302      	movs	r3, #2
 80251ea:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 80251ec:	4b10      	ldr	r3, [pc, #64]	; (8025230 <TestDoor_P+0xbc>)
 80251ee:	681b      	ldr	r3, [r3, #0]
 80251f0:	3301      	adds	r3, #1
 80251f2:	4a0f      	ldr	r2, [pc, #60]	; (8025230 <TestDoor_P+0xbc>)
 80251f4:	6013      	str	r3, [r2, #0]
				break;
 80251f6:	e005      	b.n	8025204 <TestDoor_P+0x90>
			case 4:
				bDir = CLOSE;
 80251f8:	2301      	movs	r3, #1
 80251fa:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq = 1;
 80251fc:	4b0c      	ldr	r3, [pc, #48]	; (8025230 <TestDoor_P+0xbc>)
 80251fe:	2201      	movs	r2, #1
 8025200:	601a      	str	r2, [r3, #0]
				break;
 8025202:	bf00      	nop
			}
		}
		Brr_ControlBarrier_P(bDir);
 8025204:	79fb      	ldrb	r3, [r7, #7]
 8025206:	4618      	mov	r0, r3
 8025208:	f000 fac2 	bl	8025790 <Brr_ControlBarrier_P>
	else if (TestOption.b.fTestBarrier)
	{
		nPDoorOpSeq = 1;
		Brr_SetEmergency_P(FALSE);
	}
}
 802520c:	e00c      	b.n	8025228 <TestDoor_P+0xb4>
	else if (TestOption.b.fTestBarrier)
 802520e:	4b09      	ldr	r3, [pc, #36]	; (8025234 <TestDoor_P+0xc0>)
 8025210:	681b      	ldr	r3, [r3, #0]
 8025212:	f343 1340 	sbfx	r3, r3, #5, #1
 8025216:	b25b      	sxtb	r3, r3
 8025218:	2b00      	cmp	r3, #0
 802521a:	d005      	beq.n	8025228 <TestDoor_P+0xb4>
		nPDoorOpSeq = 1;
 802521c:	4b04      	ldr	r3, [pc, #16]	; (8025230 <TestDoor_P+0xbc>)
 802521e:	2201      	movs	r2, #1
 8025220:	601a      	str	r2, [r3, #0]
		Brr_SetEmergency_P(FALSE);
 8025222:	2000      	movs	r0, #0
 8025224:	f000 fa0c 	bl	8025640 <Brr_SetEmergency_P>
}
 8025228:	bf00      	nop
 802522a:	3708      	adds	r7, #8
 802522c:	46bd      	mov	sp, r7
 802522e:	bd80      	pop	{r7, pc}
 8025230:	240004d8 	.word	0x240004d8
 8025234:	240004cc 	.word	0x240004cc

08025238 <TestDoor_S>:

void TestDoor_S(void)
{
 8025238:	b580      	push	{r7, lr}
 802523a:	b082      	sub	sp, #8
 802523c:	af00      	add	r7, sp, #0
	BYTE bDir = ENTRY_OPEN;
 802523e:	2300      	movs	r3, #0
 8025240:	71fb      	strb	r3, [r7, #7]

	if (nSDoorOpSeq)
 8025242:	4b2c      	ldr	r3, [pc, #176]	; (80252f4 <TestDoor_S+0xbc>)
 8025244:	681b      	ldr	r3, [r3, #0]
 8025246:	2b00      	cmp	r3, #0
 8025248:	d043      	beq.n	80252d2 <TestDoor_S+0x9a>
	{
		if (!TestOption.b.fTestBarrier)
 802524a:	4b2b      	ldr	r3, [pc, #172]	; (80252f8 <TestDoor_S+0xc0>)
 802524c:	681b      	ldr	r3, [r3, #0]
 802524e:	f343 1340 	sbfx	r3, r3, #5, #1
 8025252:	b25b      	sxtb	r3, r3
 8025254:	2b00      	cmp	r3, #0
 8025256:	d108      	bne.n	802526a <TestDoor_S+0x32>
		{
			nSDoorOpSeq = 0;
 8025258:	4b26      	ldr	r3, [pc, #152]	; (80252f4 <TestDoor_S+0xbc>)
 802525a:	2200      	movs	r2, #0
 802525c:	601a      	str	r2, [r3, #0]
			Brr_SetEmergency_S(TRUE);
 802525e:	2001      	movs	r0, #1
 8025260:	f000 fa18 	bl	8025694 <Brr_SetEmergency_S>
			bDir = ENTRY_OPEN;
 8025264:	2300      	movs	r3, #0
 8025266:	71fb      	strb	r3, [r7, #7]
 8025268:	e02e      	b.n	80252c8 <TestDoor_S+0x90>
		}
		else
		{
			switch (nSDoorOpSeq)
 802526a:	4b22      	ldr	r3, [pc, #136]	; (80252f4 <TestDoor_S+0xbc>)
 802526c:	681b      	ldr	r3, [r3, #0]
 802526e:	3b01      	subs	r3, #1
 8025270:	2b03      	cmp	r3, #3
 8025272:	d829      	bhi.n	80252c8 <TestDoor_S+0x90>
 8025274:	a201      	add	r2, pc, #4	; (adr r2, 802527c <TestDoor_S+0x44>)
 8025276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802527a:	bf00      	nop
 802527c:	0802528d 	.word	0x0802528d
 8025280:	0802529d 	.word	0x0802529d
 8025284:	080252ad 	.word	0x080252ad
 8025288:	080252bd 	.word	0x080252bd
			{
			case 1:
				bDir = ENTRY_OPEN;
 802528c:	2300      	movs	r3, #0
 802528e:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 8025290:	4b18      	ldr	r3, [pc, #96]	; (80252f4 <TestDoor_S+0xbc>)
 8025292:	681b      	ldr	r3, [r3, #0]
 8025294:	3301      	adds	r3, #1
 8025296:	4a17      	ldr	r2, [pc, #92]	; (80252f4 <TestDoor_S+0xbc>)
 8025298:	6013      	str	r3, [r2, #0]
				break;
 802529a:	e015      	b.n	80252c8 <TestDoor_S+0x90>
			case 2:
				bDir = CLOSE;
 802529c:	2301      	movs	r3, #1
 802529e:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 80252a0:	4b14      	ldr	r3, [pc, #80]	; (80252f4 <TestDoor_S+0xbc>)
 80252a2:	681b      	ldr	r3, [r3, #0]
 80252a4:	3301      	adds	r3, #1
 80252a6:	4a13      	ldr	r2, [pc, #76]	; (80252f4 <TestDoor_S+0xbc>)
 80252a8:	6013      	str	r3, [r2, #0]
				break;
 80252aa:	e00d      	b.n	80252c8 <TestDoor_S+0x90>
			case 3:
				bDir = EXIT_OPEN;
 80252ac:	2302      	movs	r3, #2
 80252ae:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 80252b0:	4b10      	ldr	r3, [pc, #64]	; (80252f4 <TestDoor_S+0xbc>)
 80252b2:	681b      	ldr	r3, [r3, #0]
 80252b4:	3301      	adds	r3, #1
 80252b6:	4a0f      	ldr	r2, [pc, #60]	; (80252f4 <TestDoor_S+0xbc>)
 80252b8:	6013      	str	r3, [r2, #0]
				break;
 80252ba:	e005      	b.n	80252c8 <TestDoor_S+0x90>
			case 4:
				bDir = CLOSE;
 80252bc:	2301      	movs	r3, #1
 80252be:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq = 1;
 80252c0:	4b0c      	ldr	r3, [pc, #48]	; (80252f4 <TestDoor_S+0xbc>)
 80252c2:	2201      	movs	r2, #1
 80252c4:	601a      	str	r2, [r3, #0]
				break;
 80252c6:	bf00      	nop
			}
		}
		Brr_ControlBarrier_S(bDir);
 80252c8:	79fb      	ldrb	r3, [r7, #7]
 80252ca:	4618      	mov	r0, r3
 80252cc:	f000 faae 	bl	802582c <Brr_ControlBarrier_S>
	else if (TestOption.b.fTestBarrier)
	{
		nSDoorOpSeq = 1;
		Brr_SetEmergency_S(FALSE);
	}
}
 80252d0:	e00c      	b.n	80252ec <TestDoor_S+0xb4>
	else if (TestOption.b.fTestBarrier)
 80252d2:	4b09      	ldr	r3, [pc, #36]	; (80252f8 <TestDoor_S+0xc0>)
 80252d4:	681b      	ldr	r3, [r3, #0]
 80252d6:	f343 1340 	sbfx	r3, r3, #5, #1
 80252da:	b25b      	sxtb	r3, r3
 80252dc:	2b00      	cmp	r3, #0
 80252de:	d005      	beq.n	80252ec <TestDoor_S+0xb4>
		nSDoorOpSeq = 1;
 80252e0:	4b04      	ldr	r3, [pc, #16]	; (80252f4 <TestDoor_S+0xbc>)
 80252e2:	2201      	movs	r2, #1
 80252e4:	601a      	str	r2, [r3, #0]
		Brr_SetEmergency_S(FALSE);
 80252e6:	2000      	movs	r0, #0
 80252e8:	f000 f9d4 	bl	8025694 <Brr_SetEmergency_S>
}
 80252ec:	bf00      	nop
 80252ee:	3708      	adds	r7, #8
 80252f0:	46bd      	mov	sp, r7
 80252f2:	bd80      	pop	{r7, pc}
 80252f4:	240004d4 	.word	0x240004d4
 80252f8:	240004cc 	.word	0x240004cc

080252fc <TestBuzzer>:

void TestBuzzer(void)
{
 80252fc:	b580      	push	{r7, lr}
 80252fe:	af00      	add	r7, sp, #0

	if (nBuzzOpSeq)
 8025300:	4b1b      	ldr	r3, [pc, #108]	; (8025370 <TestBuzzer+0x74>)
 8025302:	681b      	ldr	r3, [r3, #0]
 8025304:	2b00      	cmp	r3, #0
 8025306:	d027      	beq.n	8025358 <TestBuzzer+0x5c>
	{
		if (!TestOption.b.fTestBuzzer)
 8025308:	4b1a      	ldr	r3, [pc, #104]	; (8025374 <TestBuzzer+0x78>)
 802530a:	681b      	ldr	r3, [r3, #0]
 802530c:	f343 1380 	sbfx	r3, r3, #6, #1
 8025310:	b25b      	sxtb	r3, r3
 8025312:	2b00      	cmp	r3, #0
 8025314:	d103      	bne.n	802531e <TestBuzzer+0x22>
		{
			nBuzzOpSeq = 0;
 8025316:	4b16      	ldr	r3, [pc, #88]	; (8025370 <TestBuzzer+0x74>)
 8025318:	2200      	movs	r2, #0
 802531a:	601a      	str	r2, [r3, #0]
 802531c:	e012      	b.n	8025344 <TestBuzzer+0x48>
		}
		else
		{
			switch (nBuzzOpSeq)
 802531e:	4b14      	ldr	r3, [pc, #80]	; (8025370 <TestBuzzer+0x74>)
 8025320:	681b      	ldr	r3, [r3, #0]
 8025322:	2b01      	cmp	r3, #1
 8025324:	d002      	beq.n	802532c <TestBuzzer+0x30>
 8025326:	2b02      	cmp	r3, #2
 8025328:	d006      	beq.n	8025338 <TestBuzzer+0x3c>
 802532a:	e00b      	b.n	8025344 <TestBuzzer+0x48>
			{
			case 1:
				nBuzzOpSeq++;
 802532c:	4b10      	ldr	r3, [pc, #64]	; (8025370 <TestBuzzer+0x74>)
 802532e:	681b      	ldr	r3, [r3, #0]
 8025330:	3301      	adds	r3, #1
 8025332:	4a0f      	ldr	r2, [pc, #60]	; (8025370 <TestBuzzer+0x74>)
 8025334:	6013      	str	r3, [r2, #0]
				break;
 8025336:	e005      	b.n	8025344 <TestBuzzer+0x48>
			case 2:
				nBuzzOpSeq--;
 8025338:	4b0d      	ldr	r3, [pc, #52]	; (8025370 <TestBuzzer+0x74>)
 802533a:	681b      	ldr	r3, [r3, #0]
 802533c:	3b01      	subs	r3, #1
 802533e:	4a0c      	ldr	r2, [pc, #48]	; (8025370 <TestBuzzer+0x74>)
 8025340:	6013      	str	r3, [r2, #0]
				break;
 8025342:	bf00      	nop
			}
		}

		if (nBuzzOpSeq == 1)
 8025344:	4b0a      	ldr	r3, [pc, #40]	; (8025370 <TestBuzzer+0x74>)
 8025346:	681b      	ldr	r3, [r3, #0]
 8025348:	2b01      	cmp	r3, #1
 802534a:	d102      	bne.n	8025352 <TestBuzzer+0x56>
		{
			BuzzerOn();
 802534c:	f000 f844 	bl	80253d8 <BuzzerOn>
	}
	else if (TestOption.b.fTestBuzzer)
	{
		nBuzzOpSeq = 1;
	}
}
 8025350:	e00c      	b.n	802536c <TestBuzzer+0x70>
			BuzzerOff();
 8025352:	f000 f84d 	bl	80253f0 <BuzzerOff>
}
 8025356:	e009      	b.n	802536c <TestBuzzer+0x70>
	else if (TestOption.b.fTestBuzzer)
 8025358:	4b06      	ldr	r3, [pc, #24]	; (8025374 <TestBuzzer+0x78>)
 802535a:	681b      	ldr	r3, [r3, #0]
 802535c:	f343 1380 	sbfx	r3, r3, #6, #1
 8025360:	b25b      	sxtb	r3, r3
 8025362:	2b00      	cmp	r3, #0
 8025364:	d002      	beq.n	802536c <TestBuzzer+0x70>
		nBuzzOpSeq = 1;
 8025366:	4b02      	ldr	r3, [pc, #8]	; (8025370 <TestBuzzer+0x74>)
 8025368:	2201      	movs	r2, #1
 802536a:	601a      	str	r2, [r3, #0]
}
 802536c:	bf00      	nop
 802536e:	bd80      	pop	{r7, pc}
 8025370:	240004d0 	.word	0x240004d0
 8025374:	240004cc 	.word	0x240004cc

08025378 <TestAging>:
	nDirOpSeq 	= 0;
	nOverOpSeq 	= 0;
}

void TestAging(void)
{
 8025378:	b580      	push	{r7, lr}
 802537a:	af00      	add	r7, sp, #0
	static DWORD loop = 0;	// 1 loop = 10ms

	// Every 2 seconds, the test function will run.
	if (!loop)
 802537c:	4b13      	ldr	r3, [pc, #76]	; (80253cc <TestAging+0x54>)
 802537e:	681b      	ldr	r3, [r3, #0]
 8025380:	2b00      	cmp	r3, #0
 8025382:	d112      	bne.n	80253aa <TestAging+0x32>
	{
		TestOption.bVal = ReadDipSwitch();
 8025384:	4b12      	ldr	r3, [pc, #72]	; (80253d0 <TestAging+0x58>)
 8025386:	691b      	ldr	r3, [r3, #16]
 8025388:	b2db      	uxtb	r3, r3
 802538a:	43db      	mvns	r3, r3
 802538c:	b2da      	uxtb	r2, r3
 802538e:	4b11      	ldr	r3, [pc, #68]	; (80253d4 <TestAging+0x5c>)
 8025390:	701a      	strb	r2, [r3, #0]
		TestDirection();
 8025392:	f7ff fdcd 	bl	8024f30 <TestDirection>
		TestOverHeadDirection();
 8025396:	f7ff fe1d 	bl	8024fd4 <TestOverHeadDirection>
		TestLamp();
 802539a:	f7ff fe6d 	bl	8025078 <TestLamp>
		TestDoor_P();
 802539e:	f7ff fee9 	bl	8025174 <TestDoor_P>
		TestDoor_S();
 80253a2:	f7ff ff49 	bl	8025238 <TestDoor_S>
		TestBuzzer();
 80253a6:	f7ff ffa9 	bl	80252fc <TestBuzzer>
	}

	loop++;
 80253aa:	4b08      	ldr	r3, [pc, #32]	; (80253cc <TestAging+0x54>)
 80253ac:	681b      	ldr	r3, [r3, #0]
 80253ae:	3301      	adds	r3, #1
 80253b0:	4a06      	ldr	r2, [pc, #24]	; (80253cc <TestAging+0x54>)
 80253b2:	6013      	str	r3, [r2, #0]
	if (loop >= 3000)
 80253b4:	4b05      	ldr	r3, [pc, #20]	; (80253cc <TestAging+0x54>)
 80253b6:	681b      	ldr	r3, [r3, #0]
 80253b8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80253bc:	4293      	cmp	r3, r2
 80253be:	d902      	bls.n	80253c6 <TestAging+0x4e>
		loop = 0;
 80253c0:	4b02      	ldr	r3, [pc, #8]	; (80253cc <TestAging+0x54>)
 80253c2:	2200      	movs	r2, #0
 80253c4:	601a      	str	r2, [r3, #0]
}
 80253c6:	bf00      	nop
 80253c8:	bd80      	pop	{r7, pc}
 80253ca:	bf00      	nop
 80253cc:	240004e8 	.word	0x240004e8
 80253d0:	58020400 	.word	0x58020400
 80253d4:	240004cc 	.word	0x240004cc

080253d8 <BuzzerOn>:
uint8_t Add_100_Value = 0;
uint8_t Add_200_Value = 0;
uint8_t Add_400_Value = 0;

void BuzzerOn(void)
{
 80253d8:	b580      	push	{r7, lr}
 80253da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZ_CON_GPIO_Port,BUZZ_CON_Pin,GPIO_PIN_SET);
 80253dc:	2201      	movs	r2, #1
 80253de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80253e2:	4802      	ldr	r0, [pc, #8]	; (80253ec <BuzzerOn+0x14>)
 80253e4:	f005 fd68 	bl	802aeb8 <HAL_GPIO_WritePin>
}
 80253e8:	bf00      	nop
 80253ea:	bd80      	pop	{r7, pc}
 80253ec:	58020000 	.word	0x58020000

080253f0 <BuzzerOff>:

void BuzzerOff(void)
{
 80253f0:	b580      	push	{r7, lr}
 80253f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZ_CON_GPIO_Port,BUZZ_CON_Pin,GPIO_PIN_RESET);
 80253f4:	2200      	movs	r2, #0
 80253f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80253fa:	4802      	ldr	r0, [pc, #8]	; (8025404 <BuzzerOff+0x14>)
 80253fc:	f005 fd5c 	bl	802aeb8 <HAL_GPIO_WritePin>
}
 8025400:	bf00      	nop
 8025402:	bd80      	pop	{r7, pc}
 8025404:	58020000 	.word	0x58020000

08025408 <ControlStatusLED_En>:

void ControlStatusLED_En(UINT8 nValue)
{
 8025408:	b480      	push	{r7}
 802540a:	b083      	sub	sp, #12
 802540c:	af00      	add	r7, sp, #0
 802540e:	4603      	mov	r3, r0
 8025410:	71fb      	strb	r3, [r7, #7]
	Add_000_Value &= 0xFC;			//1111 1100
 8025412:	4b14      	ldr	r3, [pc, #80]	; (8025464 <ControlStatusLED_En+0x5c>)
 8025414:	781b      	ldrb	r3, [r3, #0]
 8025416:	f023 0303 	bic.w	r3, r3, #3
 802541a:	b2da      	uxtb	r2, r3
 802541c:	4b11      	ldr	r3, [pc, #68]	; (8025464 <ControlStatusLED_En+0x5c>)
 802541e:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8025420:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025424:	4a0f      	ldr	r2, [pc, #60]	; (8025464 <ControlStatusLED_En+0x5c>)
 8025426:	7812      	ldrb	r2, [r2, #0]
 8025428:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= (UINT8)(nValue & 0x03);
 802542a:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 802542e:	781b      	ldrb	r3, [r3, #0]
 8025430:	b2db      	uxtb	r3, r3
 8025432:	b25a      	sxtb	r2, r3
 8025434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025438:	f003 0303 	and.w	r3, r3, #3
 802543c:	b25b      	sxtb	r3, r3
 802543e:	4313      	orrs	r3, r2
 8025440:	b25a      	sxtb	r2, r3
 8025442:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025446:	b2d2      	uxtb	r2, r2
 8025448:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 802544a:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 802544e:	781b      	ldrb	r3, [r3, #0]
 8025450:	b2da      	uxtb	r2, r3
 8025452:	4b04      	ldr	r3, [pc, #16]	; (8025464 <ControlStatusLED_En+0x5c>)
 8025454:	701a      	strb	r2, [r3, #0]
}
 8025456:	bf00      	nop
 8025458:	370c      	adds	r7, #12
 802545a:	46bd      	mov	sp, r7
 802545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025460:	4770      	bx	lr
 8025462:	bf00      	nop
 8025464:	240004ec 	.word	0x240004ec

08025468 <ControlStatusLED_Ex>:

void ControlStatusLED_Ex(UINT8 nValue)
{
 8025468:	b480      	push	{r7}
 802546a:	b083      	sub	sp, #12
 802546c:	af00      	add	r7, sp, #0
 802546e:	4603      	mov	r3, r0
 8025470:	71fb      	strb	r3, [r7, #7]
	Add_000_Value &= 0xCF;				//1100 1111
 8025472:	4b14      	ldr	r3, [pc, #80]	; (80254c4 <ControlStatusLED_Ex+0x5c>)
 8025474:	781b      	ldrb	r3, [r3, #0]
 8025476:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 802547a:	b2da      	uxtb	r2, r3
 802547c:	4b11      	ldr	r3, [pc, #68]	; (80254c4 <ControlStatusLED_Ex+0x5c>)
 802547e:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8025480:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025484:	4a0f      	ldr	r2, [pc, #60]	; (80254c4 <ControlStatusLED_Ex+0x5c>)
 8025486:	7812      	ldrb	r2, [r2, #0]
 8025488:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= (UINT8)((nValue << 4) & 0x30);
 802548a:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 802548e:	781b      	ldrb	r3, [r3, #0]
 8025490:	b2db      	uxtb	r3, r3
 8025492:	b25a      	sxtb	r2, r3
 8025494:	79fb      	ldrb	r3, [r7, #7]
 8025496:	011b      	lsls	r3, r3, #4
 8025498:	b25b      	sxtb	r3, r3
 802549a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 802549e:	b25b      	sxtb	r3, r3
 80254a0:	4313      	orrs	r3, r2
 80254a2:	b25a      	sxtb	r2, r3
 80254a4:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80254a8:	b2d2      	uxtb	r2, r2
 80254aa:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 80254ac:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80254b0:	781b      	ldrb	r3, [r3, #0]
 80254b2:	b2da      	uxtb	r2, r3
 80254b4:	4b03      	ldr	r3, [pc, #12]	; (80254c4 <ControlStatusLED_Ex+0x5c>)
 80254b6:	701a      	strb	r2, [r3, #0]
}
 80254b8:	bf00      	nop
 80254ba:	370c      	adds	r7, #12
 80254bc:	46bd      	mov	sp, r7
 80254be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254c2:	4770      	bx	lr
 80254c4:	240004ec 	.word	0x240004ec

080254c8 <ControlOverHeadDisplay_En>:

void ControlOverHeadDisplay_En(UINT8 nValue)
{
 80254c8:	b480      	push	{r7}
 80254ca:	b083      	sub	sp, #12
 80254cc:	af00      	add	r7, sp, #0
 80254ce:	4603      	mov	r3, r0
 80254d0:	71fb      	strb	r3, [r7, #7]
	Add_000_Value &= 0xF3;	// 1111 0011
 80254d2:	4b14      	ldr	r3, [pc, #80]	; (8025524 <ControlOverHeadDisplay_En+0x5c>)
 80254d4:	781b      	ldrb	r3, [r3, #0]
 80254d6:	f023 030c 	bic.w	r3, r3, #12
 80254da:	b2da      	uxtb	r2, r3
 80254dc:	4b11      	ldr	r3, [pc, #68]	; (8025524 <ControlOverHeadDisplay_En+0x5c>)
 80254de:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 80254e0:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80254e4:	4a0f      	ldr	r2, [pc, #60]	; (8025524 <ControlOverHeadDisplay_En+0x5c>)
 80254e6:	7812      	ldrb	r2, [r2, #0]
 80254e8:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= (UINT8)((nValue << 2) & 0x0C);
 80254ea:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80254ee:	781b      	ldrb	r3, [r3, #0]
 80254f0:	b2db      	uxtb	r3, r3
 80254f2:	b25a      	sxtb	r2, r3
 80254f4:	79fb      	ldrb	r3, [r7, #7]
 80254f6:	009b      	lsls	r3, r3, #2
 80254f8:	b25b      	sxtb	r3, r3
 80254fa:	f003 030c 	and.w	r3, r3, #12
 80254fe:	b25b      	sxtb	r3, r3
 8025500:	4313      	orrs	r3, r2
 8025502:	b25a      	sxtb	r2, r3
 8025504:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025508:	b2d2      	uxtb	r2, r2
 802550a:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 802550c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025510:	781b      	ldrb	r3, [r3, #0]
 8025512:	b2da      	uxtb	r2, r3
 8025514:	4b03      	ldr	r3, [pc, #12]	; (8025524 <ControlOverHeadDisplay_En+0x5c>)
 8025516:	701a      	strb	r2, [r3, #0]
}
 8025518:	bf00      	nop
 802551a:	370c      	adds	r7, #12
 802551c:	46bd      	mov	sp, r7
 802551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025522:	4770      	bx	lr
 8025524:	240004ec 	.word	0x240004ec

08025528 <ControlOverHeadDisplay_Ex>:

void ControlOverHeadDisplay_Ex(UINT8 nValue)
{
 8025528:	b480      	push	{r7}
 802552a:	b083      	sub	sp, #12
 802552c:	af00      	add	r7, sp, #0
 802552e:	4603      	mov	r3, r0
 8025530:	71fb      	strb	r3, [r7, #7]
	Add_000_Value &= 0x3F; // 0011 1111
 8025532:	4b14      	ldr	r3, [pc, #80]	; (8025584 <ControlOverHeadDisplay_Ex+0x5c>)
 8025534:	781b      	ldrb	r3, [r3, #0]
 8025536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802553a:	b2da      	uxtb	r2, r3
 802553c:	4b11      	ldr	r3, [pc, #68]	; (8025584 <ControlOverHeadDisplay_Ex+0x5c>)
 802553e:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8025540:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025544:	4a0f      	ldr	r2, [pc, #60]	; (8025584 <ControlOverHeadDisplay_Ex+0x5c>)
 8025546:	7812      	ldrb	r2, [r2, #0]
 8025548:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= (UINT8)((nValue << 6) & 0xC0);
 802554a:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 802554e:	781b      	ldrb	r3, [r3, #0]
 8025550:	b2db      	uxtb	r3, r3
 8025552:	b25a      	sxtb	r2, r3
 8025554:	79fb      	ldrb	r3, [r7, #7]
 8025556:	019b      	lsls	r3, r3, #6
 8025558:	b25b      	sxtb	r3, r3
 802555a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802555e:	b25b      	sxtb	r3, r3
 8025560:	4313      	orrs	r3, r2
 8025562:	b25a      	sxtb	r2, r3
 8025564:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025568:	b2d2      	uxtb	r2, r2
 802556a:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 802556c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8025570:	781b      	ldrb	r3, [r3, #0]
 8025572:	b2da      	uxtb	r2, r3
 8025574:	4b03      	ldr	r3, [pc, #12]	; (8025584 <ControlOverHeadDisplay_Ex+0x5c>)
 8025576:	701a      	strb	r2, [r3, #0]
}
 8025578:	bf00      	nop
 802557a:	370c      	adds	r7, #12
 802557c:	46bd      	mov	sp, r7
 802557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025582:	4770      	bx	lr
 8025584:	240004ec 	.word	0x240004ec

08025588 <ControlIndicatorLight_En>:


void ControlIndicatorLight_En(UINT8 nValue)
{
 8025588:	b480      	push	{r7}
 802558a:	b083      	sub	sp, #12
 802558c:	af00      	add	r7, sp, #0
 802558e:	4603      	mov	r3, r0
 8025590:	71fb      	strb	r3, [r7, #7]
	Add_100_Value &= 0xF8; // 1111 1000
 8025592:	4b12      	ldr	r3, [pc, #72]	; (80255dc <ControlIndicatorLight_En+0x54>)
 8025594:	781b      	ldrb	r3, [r3, #0]
 8025596:	f023 0307 	bic.w	r3, r3, #7
 802559a:	b2da      	uxtb	r2, r3
 802559c:	4b0f      	ldr	r3, [pc, #60]	; (80255dc <ControlIndicatorLight_En+0x54>)
 802559e:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR = Add_100_Value;
 80255a0:	4b0f      	ldr	r3, [pc, #60]	; (80255e0 <ControlIndicatorLight_En+0x58>)
 80255a2:	4a0e      	ldr	r2, [pc, #56]	; (80255dc <ControlIndicatorLight_En+0x54>)
 80255a4:	7812      	ldrb	r2, [r2, #0]
 80255a6:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR |= (UINT8)(nValue & 0x07);
 80255a8:	4b0d      	ldr	r3, [pc, #52]	; (80255e0 <ControlIndicatorLight_En+0x58>)
 80255aa:	781b      	ldrb	r3, [r3, #0]
 80255ac:	b2db      	uxtb	r3, r3
 80255ae:	b25a      	sxtb	r2, r3
 80255b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80255b4:	f003 0307 	and.w	r3, r3, #7
 80255b8:	b25b      	sxtb	r3, r3
 80255ba:	4313      	orrs	r3, r2
 80255bc:	b25a      	sxtb	r2, r3
 80255be:	4b08      	ldr	r3, [pc, #32]	; (80255e0 <ControlIndicatorLight_En+0x58>)
 80255c0:	b2d2      	uxtb	r2, r2
 80255c2:	701a      	strb	r2, [r3, #0]

	Add_100_Value = wnS_LED_CS_ADDR;
 80255c4:	4b06      	ldr	r3, [pc, #24]	; (80255e0 <ControlIndicatorLight_En+0x58>)
 80255c6:	781b      	ldrb	r3, [r3, #0]
 80255c8:	b2da      	uxtb	r2, r3
 80255ca:	4b04      	ldr	r3, [pc, #16]	; (80255dc <ControlIndicatorLight_En+0x54>)
 80255cc:	701a      	strb	r2, [r3, #0]
}
 80255ce:	bf00      	nop
 80255d0:	370c      	adds	r7, #12
 80255d2:	46bd      	mov	sp, r7
 80255d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255d8:	4770      	bx	lr
 80255da:	bf00      	nop
 80255dc:	240004ed 	.word	0x240004ed
 80255e0:	64000100 	.word	0x64000100

080255e4 <ControlIndicatorLight_Ex>:

void ControlIndicatorLight_Ex(UINT8 nValue)
{
 80255e4:	b480      	push	{r7}
 80255e6:	b083      	sub	sp, #12
 80255e8:	af00      	add	r7, sp, #0
 80255ea:	4603      	mov	r3, r0
 80255ec:	71fb      	strb	r3, [r7, #7]
	Add_100_Value &= 0x8F;
 80255ee:	4b12      	ldr	r3, [pc, #72]	; (8025638 <ControlIndicatorLight_Ex+0x54>)
 80255f0:	781b      	ldrb	r3, [r3, #0]
 80255f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80255f6:	b2da      	uxtb	r2, r3
 80255f8:	4b0f      	ldr	r3, [pc, #60]	; (8025638 <ControlIndicatorLight_Ex+0x54>)
 80255fa:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR = Add_100_Value;
 80255fc:	4b0f      	ldr	r3, [pc, #60]	; (802563c <ControlIndicatorLight_Ex+0x58>)
 80255fe:	4a0e      	ldr	r2, [pc, #56]	; (8025638 <ControlIndicatorLight_Ex+0x54>)
 8025600:	7812      	ldrb	r2, [r2, #0]
 8025602:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR |= (UINT8)((nValue << 4) & 0x70);
 8025604:	4b0d      	ldr	r3, [pc, #52]	; (802563c <ControlIndicatorLight_Ex+0x58>)
 8025606:	781b      	ldrb	r3, [r3, #0]
 8025608:	b2db      	uxtb	r3, r3
 802560a:	b25a      	sxtb	r2, r3
 802560c:	79fb      	ldrb	r3, [r7, #7]
 802560e:	011b      	lsls	r3, r3, #4
 8025610:	b25b      	sxtb	r3, r3
 8025612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8025616:	b25b      	sxtb	r3, r3
 8025618:	4313      	orrs	r3, r2
 802561a:	b25a      	sxtb	r2, r3
 802561c:	4b07      	ldr	r3, [pc, #28]	; (802563c <ControlIndicatorLight_Ex+0x58>)
 802561e:	b2d2      	uxtb	r2, r2
 8025620:	701a      	strb	r2, [r3, #0]

	Add_100_Value = wnS_LED_CS_ADDR;
 8025622:	4b06      	ldr	r3, [pc, #24]	; (802563c <ControlIndicatorLight_Ex+0x58>)
 8025624:	781b      	ldrb	r3, [r3, #0]
 8025626:	b2da      	uxtb	r2, r3
 8025628:	4b03      	ldr	r3, [pc, #12]	; (8025638 <ControlIndicatorLight_Ex+0x54>)
 802562a:	701a      	strb	r2, [r3, #0]
}
 802562c:	bf00      	nop
 802562e:	370c      	adds	r7, #12
 8025630:	46bd      	mov	sp, r7
 8025632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025636:	4770      	bx	lr
 8025638:	240004ed 	.word	0x240004ed
 802563c:	64000100 	.word	0x64000100

08025640 <Brr_SetEmergency_P>:

void Brr_SetEmergency_P(bool isActive)
{
 8025640:	b480      	push	{r7}
 8025642:	b083      	sub	sp, #12
 8025644:	af00      	add	r7, sp, #0
 8025646:	4603      	mov	r3, r0
 8025648:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 802564a:	4b10      	ldr	r3, [pc, #64]	; (802568c <Brr_SetEmergency_P+0x4c>)
 802564c:	781a      	ldrb	r2, [r3, #0]
 802564e:	4b0f      	ldr	r3, [pc, #60]	; (802568c <Brr_SetEmergency_P+0x4c>)
 8025650:	701a      	strb	r2, [r3, #0]

	switch(isActive)
 8025652:	79fb      	ldrb	r3, [r7, #7]
 8025654:	2b01      	cmp	r3, #1
 8025656:	d107      	bne.n	8025668 <Brr_SetEmergency_P+0x28>
	{
	case TRUE:
		Add_200_Value |= ((UINT8) ON << 1);
 8025658:	4b0c      	ldr	r3, [pc, #48]	; (802568c <Brr_SetEmergency_P+0x4c>)
 802565a:	781b      	ldrb	r3, [r3, #0]
 802565c:	f043 0302 	orr.w	r3, r3, #2
 8025660:	b2da      	uxtb	r2, r3
 8025662:	4b0a      	ldr	r3, [pc, #40]	; (802568c <Brr_SetEmergency_P+0x4c>)
 8025664:	701a      	strb	r2, [r3, #0]
		break;
 8025666:	e007      	b.n	8025678 <Brr_SetEmergency_P+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 1) & 0xFF));
 8025668:	4b08      	ldr	r3, [pc, #32]	; (802568c <Brr_SetEmergency_P+0x4c>)
 802566a:	781b      	ldrb	r3, [r3, #0]
 802566c:	f023 0302 	bic.w	r3, r3, #2
 8025670:	b2da      	uxtb	r2, r3
 8025672:	4b06      	ldr	r3, [pc, #24]	; (802568c <Brr_SetEmergency_P+0x4c>)
 8025674:	701a      	strb	r2, [r3, #0]
		break;
 8025676:	bf00      	nop
	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8025678:	4b05      	ldr	r3, [pc, #20]	; (8025690 <Brr_SetEmergency_P+0x50>)
 802567a:	4a04      	ldr	r2, [pc, #16]	; (802568c <Brr_SetEmergency_P+0x4c>)
 802567c:	7812      	ldrb	r2, [r2, #0]
 802567e:	701a      	strb	r2, [r3, #0]
}
 8025680:	bf00      	nop
 8025682:	370c      	adds	r7, #12
 8025684:	46bd      	mov	sp, r7
 8025686:	f85d 7b04 	ldr.w	r7, [sp], #4
 802568a:	4770      	bx	lr
 802568c:	240004ee 	.word	0x240004ee
 8025690:	64000200 	.word	0x64000200

08025694 <Brr_SetEmergency_S>:


void Brr_SetEmergency_S(bool isActive)
{
 8025694:	b480      	push	{r7}
 8025696:	b083      	sub	sp, #12
 8025698:	af00      	add	r7, sp, #0
 802569a:	4603      	mov	r3, r0
 802569c:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 802569e:	4b10      	ldr	r3, [pc, #64]	; (80256e0 <Brr_SetEmergency_S+0x4c>)
 80256a0:	781a      	ldrb	r2, [r3, #0]
 80256a2:	4b0f      	ldr	r3, [pc, #60]	; (80256e0 <Brr_SetEmergency_S+0x4c>)
 80256a4:	701a      	strb	r2, [r3, #0]
	switch(isActive)
 80256a6:	79fb      	ldrb	r3, [r7, #7]
 80256a8:	2b01      	cmp	r3, #1
 80256aa:	d107      	bne.n	80256bc <Brr_SetEmergency_S+0x28>
	{
	case TRUE:
		Add_200_Value  |= ((UINT8) ON << 5);
 80256ac:	4b0c      	ldr	r3, [pc, #48]	; (80256e0 <Brr_SetEmergency_S+0x4c>)
 80256ae:	781b      	ldrb	r3, [r3, #0]
 80256b0:	f043 0320 	orr.w	r3, r3, #32
 80256b4:	b2da      	uxtb	r2, r3
 80256b6:	4b0a      	ldr	r3, [pc, #40]	; (80256e0 <Brr_SetEmergency_S+0x4c>)
 80256b8:	701a      	strb	r2, [r3, #0]
		break;
 80256ba:	e007      	b.n	80256cc <Brr_SetEmergency_S+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 5) & 0xFF));
 80256bc:	4b08      	ldr	r3, [pc, #32]	; (80256e0 <Brr_SetEmergency_S+0x4c>)
 80256be:	781b      	ldrb	r3, [r3, #0]
 80256c0:	f023 0320 	bic.w	r3, r3, #32
 80256c4:	b2da      	uxtb	r2, r3
 80256c6:	4b06      	ldr	r3, [pc, #24]	; (80256e0 <Brr_SetEmergency_S+0x4c>)
 80256c8:	701a      	strb	r2, [r3, #0]
		break;
 80256ca:	bf00      	nop
	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 80256cc:	4b05      	ldr	r3, [pc, #20]	; (80256e4 <Brr_SetEmergency_S+0x50>)
 80256ce:	4a04      	ldr	r2, [pc, #16]	; (80256e0 <Brr_SetEmergency_S+0x4c>)
 80256d0:	7812      	ldrb	r2, [r2, #0]
 80256d2:	701a      	strb	r2, [r3, #0]
}
 80256d4:	bf00      	nop
 80256d6:	370c      	adds	r7, #12
 80256d8:	46bd      	mov	sp, r7
 80256da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256de:	4770      	bx	lr
 80256e0:	240004ee 	.word	0x240004ee
 80256e4:	64000200 	.word	0x64000200

080256e8 <Brr_SetBreak_P>:

void Brr_SetBreak_P(bool isActive)
{
 80256e8:	b480      	push	{r7}
 80256ea:	b083      	sub	sp, #12
 80256ec:	af00      	add	r7, sp, #0
 80256ee:	4603      	mov	r3, r0
 80256f0:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 80256f2:	4b10      	ldr	r3, [pc, #64]	; (8025734 <Brr_SetBreak_P+0x4c>)
 80256f4:	781a      	ldrb	r2, [r3, #0]
 80256f6:	4b0f      	ldr	r3, [pc, #60]	; (8025734 <Brr_SetBreak_P+0x4c>)
 80256f8:	701a      	strb	r2, [r3, #0]

	switch(isActive)
 80256fa:	79fb      	ldrb	r3, [r7, #7]
 80256fc:	2b01      	cmp	r3, #1
 80256fe:	d107      	bne.n	8025710 <Brr_SetBreak_P+0x28>
	{
	case TRUE:
		Add_200_Value |= ((UINT8) ON << 3);
 8025700:	4b0c      	ldr	r3, [pc, #48]	; (8025734 <Brr_SetBreak_P+0x4c>)
 8025702:	781b      	ldrb	r3, [r3, #0]
 8025704:	f043 0308 	orr.w	r3, r3, #8
 8025708:	b2da      	uxtb	r2, r3
 802570a:	4b0a      	ldr	r3, [pc, #40]	; (8025734 <Brr_SetBreak_P+0x4c>)
 802570c:	701a      	strb	r2, [r3, #0]
		break;
 802570e:	e007      	b.n	8025720 <Brr_SetBreak_P+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 3) & 0xFF));
 8025710:	4b08      	ldr	r3, [pc, #32]	; (8025734 <Brr_SetBreak_P+0x4c>)
 8025712:	781b      	ldrb	r3, [r3, #0]
 8025714:	f023 0308 	bic.w	r3, r3, #8
 8025718:	b2da      	uxtb	r2, r3
 802571a:	4b06      	ldr	r3, [pc, #24]	; (8025734 <Brr_SetBreak_P+0x4c>)
 802571c:	701a      	strb	r2, [r3, #0]
		break;
 802571e:	bf00      	nop
	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8025720:	4b05      	ldr	r3, [pc, #20]	; (8025738 <Brr_SetBreak_P+0x50>)
 8025722:	4a04      	ldr	r2, [pc, #16]	; (8025734 <Brr_SetBreak_P+0x4c>)
 8025724:	7812      	ldrb	r2, [r2, #0]
 8025726:	701a      	strb	r2, [r3, #0]
}
 8025728:	bf00      	nop
 802572a:	370c      	adds	r7, #12
 802572c:	46bd      	mov	sp, r7
 802572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025732:	4770      	bx	lr
 8025734:	240004ee 	.word	0x240004ee
 8025738:	64000200 	.word	0x64000200

0802573c <Brr_SetBreak_S>:

void Brr_SetBreak_S(bool isActive)
{
 802573c:	b480      	push	{r7}
 802573e:	b083      	sub	sp, #12
 8025740:	af00      	add	r7, sp, #0
 8025742:	4603      	mov	r3, r0
 8025744:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 8025746:	4b10      	ldr	r3, [pc, #64]	; (8025788 <Brr_SetBreak_S+0x4c>)
 8025748:	781a      	ldrb	r2, [r3, #0]
 802574a:	4b0f      	ldr	r3, [pc, #60]	; (8025788 <Brr_SetBreak_S+0x4c>)
 802574c:	701a      	strb	r2, [r3, #0]
	switch(isActive)
 802574e:	79fb      	ldrb	r3, [r7, #7]
 8025750:	2b01      	cmp	r3, #1
 8025752:	d107      	bne.n	8025764 <Brr_SetBreak_S+0x28>
	{
	case TRUE:
		Add_200_Value  |= ((UINT8) ON << 7);
 8025754:	4b0c      	ldr	r3, [pc, #48]	; (8025788 <Brr_SetBreak_S+0x4c>)
 8025756:	781b      	ldrb	r3, [r3, #0]
 8025758:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802575c:	b2da      	uxtb	r2, r3
 802575e:	4b0a      	ldr	r3, [pc, #40]	; (8025788 <Brr_SetBreak_S+0x4c>)
 8025760:	701a      	strb	r2, [r3, #0]
		break;
 8025762:	e007      	b.n	8025774 <Brr_SetBreak_S+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 7) & 0xFF));
 8025764:	4b08      	ldr	r3, [pc, #32]	; (8025788 <Brr_SetBreak_S+0x4c>)
 8025766:	781b      	ldrb	r3, [r3, #0]
 8025768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802576c:	b2da      	uxtb	r2, r3
 802576e:	4b06      	ldr	r3, [pc, #24]	; (8025788 <Brr_SetBreak_S+0x4c>)
 8025770:	701a      	strb	r2, [r3, #0]
		break;
 8025772:	bf00      	nop
	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8025774:	4b05      	ldr	r3, [pc, #20]	; (802578c <Brr_SetBreak_S+0x50>)
 8025776:	4a04      	ldr	r2, [pc, #16]	; (8025788 <Brr_SetBreak_S+0x4c>)
 8025778:	7812      	ldrb	r2, [r2, #0]
 802577a:	701a      	strb	r2, [r3, #0]
}
 802577c:	bf00      	nop
 802577e:	370c      	adds	r7, #12
 8025780:	46bd      	mov	sp, r7
 8025782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025786:	4770      	bx	lr
 8025788:	240004ee 	.word	0x240004ee
 802578c:	64000200 	.word	0x64000200

08025790 <Brr_ControlBarrier_P>:

void Brr_ControlBarrier_P(UINT8 nValue)
{
 8025790:	b480      	push	{r7}
 8025792:	b083      	sub	sp, #12
 8025794:	af00      	add	r7, sp, #0
 8025796:	4603      	mov	r3, r0
 8025798:	71fb      	strb	r3, [r7, #7]
	wnBRR_OUT_CS_ADDR = Add_200_Value;
 802579a:	4b22      	ldr	r3, [pc, #136]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 802579c:	4a22      	ldr	r2, [pc, #136]	; (8025828 <Brr_ControlBarrier_P+0x98>)
 802579e:	7812      	ldrb	r2, [r2, #0]
 80257a0:	701a      	strb	r2, [r3, #0]

	switch(nValue)
 80257a2:	79fb      	ldrb	r3, [r7, #7]
 80257a4:	2b02      	cmp	r3, #2
 80257a6:	d020      	beq.n	80257ea <Brr_ControlBarrier_P+0x5a>
 80257a8:	2b02      	cmp	r3, #2
 80257aa:	dc2f      	bgt.n	802580c <Brr_ControlBarrier_P+0x7c>
 80257ac:	2b00      	cmp	r3, #0
 80257ae:	d002      	beq.n	80257b6 <Brr_ControlBarrier_P+0x26>
 80257b0:	2b01      	cmp	r3, #1
 80257b2:	d011      	beq.n	80257d8 <Brr_ControlBarrier_P+0x48>
 80257b4:	e02a      	b.n	802580c <Brr_ControlBarrier_P+0x7c>
	{
	case ENTRY_OPEN :
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 2) & 0xFF));
 80257b6:	4b1b      	ldr	r3, [pc, #108]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 80257b8:	781b      	ldrb	r3, [r3, #0]
 80257ba:	b2db      	uxtb	r3, r3
 80257bc:	4a19      	ldr	r2, [pc, #100]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 80257be:	f023 0304 	bic.w	r3, r3, #4
 80257c2:	b2db      	uxtb	r3, r3
 80257c4:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 0) & 0xFF));
 80257c6:	4b17      	ldr	r3, [pc, #92]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 80257c8:	781b      	ldrb	r3, [r3, #0]
 80257ca:	b2db      	uxtb	r3, r3
 80257cc:	4a15      	ldr	r2, [pc, #84]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 80257ce:	f023 0301 	bic.w	r3, r3, #1
 80257d2:	b2db      	uxtb	r3, r3
 80257d4:	7013      	strb	r3, [r2, #0]
		break;
 80257d6:	e019      	b.n	802580c <Brr_ControlBarrier_P+0x7c>
	case CLOSE :
		wnBRR_OUT_CS_ADDR |= (UINT8)(1 << 0);
 80257d8:	4b12      	ldr	r3, [pc, #72]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 80257da:	781b      	ldrb	r3, [r3, #0]
 80257dc:	b2db      	uxtb	r3, r3
 80257de:	4a11      	ldr	r2, [pc, #68]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 80257e0:	f043 0301 	orr.w	r3, r3, #1
 80257e4:	b2db      	uxtb	r3, r3
 80257e6:	7013      	strb	r3, [r2, #0]
		break;
 80257e8:	e010      	b.n	802580c <Brr_ControlBarrier_P+0x7c>
	case EXIT_OPEN :
		wnBRR_OUT_CS_ADDR |= (UINT8)(((1 << 2) & 0xFF));
 80257ea:	4b0e      	ldr	r3, [pc, #56]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 80257ec:	781b      	ldrb	r3, [r3, #0]
 80257ee:	b2db      	uxtb	r3, r3
 80257f0:	4a0c      	ldr	r2, [pc, #48]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 80257f2:	f043 0304 	orr.w	r3, r3, #4
 80257f6:	b2db      	uxtb	r3, r3
 80257f8:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR  &= (UINT8)((~(1 << 0) & 0xFF));
 80257fa:	4b0a      	ldr	r3, [pc, #40]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 80257fc:	781b      	ldrb	r3, [r3, #0]
 80257fe:	b2db      	uxtb	r3, r3
 8025800:	4a08      	ldr	r2, [pc, #32]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 8025802:	f023 0301 	bic.w	r3, r3, #1
 8025806:	b2db      	uxtb	r3, r3
 8025808:	7013      	strb	r3, [r2, #0]
		break;
 802580a:	bf00      	nop
	}

	Add_200_Value = wnBRR_OUT_CS_ADDR;
 802580c:	4b05      	ldr	r3, [pc, #20]	; (8025824 <Brr_ControlBarrier_P+0x94>)
 802580e:	781b      	ldrb	r3, [r3, #0]
 8025810:	b2da      	uxtb	r2, r3
 8025812:	4b05      	ldr	r3, [pc, #20]	; (8025828 <Brr_ControlBarrier_P+0x98>)
 8025814:	701a      	strb	r2, [r3, #0]
}
 8025816:	bf00      	nop
 8025818:	370c      	adds	r7, #12
 802581a:	46bd      	mov	sp, r7
 802581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025820:	4770      	bx	lr
 8025822:	bf00      	nop
 8025824:	64000200 	.word	0x64000200
 8025828:	240004ee 	.word	0x240004ee

0802582c <Brr_ControlBarrier_S>:

void Brr_ControlBarrier_S(UINT8 nValue)
{
 802582c:	b480      	push	{r7}
 802582e:	b083      	sub	sp, #12
 8025830:	af00      	add	r7, sp, #0
 8025832:	4603      	mov	r3, r0
 8025834:	71fb      	strb	r3, [r7, #7]
    wnBRR_OUT_CS_ADDR = Add_200_Value;
 8025836:	4b22      	ldr	r3, [pc, #136]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 8025838:	4a22      	ldr	r2, [pc, #136]	; (80258c4 <Brr_ControlBarrier_S+0x98>)
 802583a:	7812      	ldrb	r2, [r2, #0]
 802583c:	701a      	strb	r2, [r3, #0]

	switch(nValue)
 802583e:	79fb      	ldrb	r3, [r7, #7]
 8025840:	2b02      	cmp	r3, #2
 8025842:	d020      	beq.n	8025886 <Brr_ControlBarrier_S+0x5a>
 8025844:	2b02      	cmp	r3, #2
 8025846:	dc2f      	bgt.n	80258a8 <Brr_ControlBarrier_S+0x7c>
 8025848:	2b00      	cmp	r3, #0
 802584a:	d002      	beq.n	8025852 <Brr_ControlBarrier_S+0x26>
 802584c:	2b01      	cmp	r3, #1
 802584e:	d011      	beq.n	8025874 <Brr_ControlBarrier_S+0x48>
 8025850:	e02a      	b.n	80258a8 <Brr_ControlBarrier_S+0x7c>
	{
	case ENTRY_OPEN :
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 6) & 0xFF));
 8025852:	4b1b      	ldr	r3, [pc, #108]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 8025854:	781b      	ldrb	r3, [r3, #0]
 8025856:	b2db      	uxtb	r3, r3
 8025858:	4a19      	ldr	r2, [pc, #100]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 802585a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802585e:	b2db      	uxtb	r3, r3
 8025860:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 4) & 0xFF));
 8025862:	4b17      	ldr	r3, [pc, #92]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 8025864:	781b      	ldrb	r3, [r3, #0]
 8025866:	b2db      	uxtb	r3, r3
 8025868:	4a15      	ldr	r2, [pc, #84]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 802586a:	f023 0310 	bic.w	r3, r3, #16
 802586e:	b2db      	uxtb	r3, r3
 8025870:	7013      	strb	r3, [r2, #0]
		break;
 8025872:	e019      	b.n	80258a8 <Brr_ControlBarrier_S+0x7c>
	case CLOSE :
		wnBRR_OUT_CS_ADDR |= (UINT8)(1 << 4);
 8025874:	4b12      	ldr	r3, [pc, #72]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 8025876:	781b      	ldrb	r3, [r3, #0]
 8025878:	b2db      	uxtb	r3, r3
 802587a:	4a11      	ldr	r2, [pc, #68]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 802587c:	f043 0310 	orr.w	r3, r3, #16
 8025880:	b2db      	uxtb	r3, r3
 8025882:	7013      	strb	r3, [r2, #0]
		break;
 8025884:	e010      	b.n	80258a8 <Brr_ControlBarrier_S+0x7c>
	case EXIT_OPEN :
		wnBRR_OUT_CS_ADDR |= (UINT8)(((1 << 6) & 0xFF));
 8025886:	4b0e      	ldr	r3, [pc, #56]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 8025888:	781b      	ldrb	r3, [r3, #0]
 802588a:	b2db      	uxtb	r3, r3
 802588c:	4a0c      	ldr	r2, [pc, #48]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 802588e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025892:	b2db      	uxtb	r3, r3
 8025894:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR  &= (UINT8)((~(1 << 4) & 0xFF));
 8025896:	4b0a      	ldr	r3, [pc, #40]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 8025898:	781b      	ldrb	r3, [r3, #0]
 802589a:	b2db      	uxtb	r3, r3
 802589c:	4a08      	ldr	r2, [pc, #32]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 802589e:	f023 0310 	bic.w	r3, r3, #16
 80258a2:	b2db      	uxtb	r3, r3
 80258a4:	7013      	strb	r3, [r2, #0]
		break;
 80258a6:	bf00      	nop
	}

	Add_200_Value = wnBRR_OUT_CS_ADDR;
 80258a8:	4b05      	ldr	r3, [pc, #20]	; (80258c0 <Brr_ControlBarrier_S+0x94>)
 80258aa:	781b      	ldrb	r3, [r3, #0]
 80258ac:	b2da      	uxtb	r2, r3
 80258ae:	4b05      	ldr	r3, [pc, #20]	; (80258c4 <Brr_ControlBarrier_S+0x98>)
 80258b0:	701a      	strb	r2, [r3, #0]
}
 80258b2:	bf00      	nop
 80258b4:	370c      	adds	r7, #12
 80258b6:	46bd      	mov	sp, r7
 80258b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258bc:	4770      	bx	lr
 80258be:	bf00      	nop
 80258c0:	64000200 	.word	0x64000200
 80258c4:	240004ee 	.word	0x240004ee

080258c8 <bsp_InitIUart>:
	iUartTable[2].hUart = NULL;
	IUart_Open(COM3, iUartTable[COM3].nBaud);
}

void bsp_InitIUart()
{
 80258c8:	b580      	push	{r7, lr}
 80258ca:	b082      	sub	sp, #8
 80258cc:	af00      	add	r7, sp, #0
	UINT32 	i;

	HAL_UART_DeInit(&huart1);
 80258ce:	485d      	ldr	r0, [pc, #372]	; (8025a44 <bsp_InitIUart+0x17c>)
 80258d0:	f009 fbc4 	bl	802f05c <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart2);
 80258d4:	485c      	ldr	r0, [pc, #368]	; (8025a48 <bsp_InitIUart+0x180>)
 80258d6:	f009 fbc1 	bl	802f05c <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart3);
 80258da:	485c      	ldr	r0, [pc, #368]	; (8025a4c <bsp_InitIUart+0x184>)
 80258dc:	f009 fbbe 	bl	802f05c <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart4);
 80258e0:	485b      	ldr	r0, [pc, #364]	; (8025a50 <bsp_InitIUart+0x188>)
 80258e2:	f009 fbbb 	bl	802f05c <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart5);
 80258e6:	485b      	ldr	r0, [pc, #364]	; (8025a54 <bsp_InitIUart+0x18c>)
 80258e8:	f009 fbb8 	bl	802f05c <HAL_UART_DeInit>

	for ( i = 0; i < IUART_MAXPORT; i++)
 80258ec:	2300      	movs	r3, #0
 80258ee:	607b      	str	r3, [r7, #4]
 80258f0:	e086      	b.n	8025a00 <bsp_InitIUart+0x138>
	{
		if(i == COM3)			//
 80258f2:	687b      	ldr	r3, [r7, #4]
 80258f4:	2b02      	cmp	r3, #2
 80258f6:	d11e      	bne.n	8025936 <bsp_InitIUart+0x6e>
		{
			iUartTable[i].fIsOpen = FALSE;
 80258f8:	4957      	ldr	r1, [pc, #348]	; (8025a58 <bsp_InitIUart+0x190>)
 80258fa:	687a      	ldr	r2, [r7, #4]
 80258fc:	4613      	mov	r3, r2
 80258fe:	009b      	lsls	r3, r3, #2
 8025900:	4413      	add	r3, r2
 8025902:	009b      	lsls	r3, r3, #2
 8025904:	440b      	add	r3, r1
 8025906:	2200      	movs	r2, #0
 8025908:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 57600;
 802590a:	4953      	ldr	r1, [pc, #332]	; (8025a58 <bsp_InitIUart+0x190>)
 802590c:	687a      	ldr	r2, [r7, #4]
 802590e:	4613      	mov	r3, r2
 8025910:	009b      	lsls	r3, r3, #2
 8025912:	4413      	add	r3, r2
 8025914:	009b      	lsls	r3, r3, #2
 8025916:	440b      	add	r3, r1
 8025918:	3304      	adds	r3, #4
 802591a:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 802591e:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8025920:	494d      	ldr	r1, [pc, #308]	; (8025a58 <bsp_InitIUart+0x190>)
 8025922:	687a      	ldr	r2, [r7, #4]
 8025924:	4613      	mov	r3, r2
 8025926:	009b      	lsls	r3, r3, #2
 8025928:	4413      	add	r3, r2
 802592a:	009b      	lsls	r3, r3, #2
 802592c:	440b      	add	r3, r1
 802592e:	3310      	adds	r3, #16
 8025930:	2200      	movs	r2, #0
 8025932:	601a      	str	r2, [r3, #0]
 8025934:	e061      	b.n	80259fa <bsp_InitIUart+0x132>

		}
		else if(i == COM4)
 8025936:	687b      	ldr	r3, [r7, #4]
 8025938:	2b03      	cmp	r3, #3
 802593a:	d11e      	bne.n	802597a <bsp_InitIUart+0xb2>
		{
			iUartTable[i].fIsOpen = FALSE;
 802593c:	4946      	ldr	r1, [pc, #280]	; (8025a58 <bsp_InitIUart+0x190>)
 802593e:	687a      	ldr	r2, [r7, #4]
 8025940:	4613      	mov	r3, r2
 8025942:	009b      	lsls	r3, r3, #2
 8025944:	4413      	add	r3, r2
 8025946:	009b      	lsls	r3, r3, #2
 8025948:	440b      	add	r3, r1
 802594a:	2200      	movs	r2, #0
 802594c:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 38400;
 802594e:	4942      	ldr	r1, [pc, #264]	; (8025a58 <bsp_InitIUart+0x190>)
 8025950:	687a      	ldr	r2, [r7, #4]
 8025952:	4613      	mov	r3, r2
 8025954:	009b      	lsls	r3, r3, #2
 8025956:	4413      	add	r3, r2
 8025958:	009b      	lsls	r3, r3, #2
 802595a:	440b      	add	r3, r1
 802595c:	3304      	adds	r3, #4
 802595e:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8025962:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8025964:	493c      	ldr	r1, [pc, #240]	; (8025a58 <bsp_InitIUart+0x190>)
 8025966:	687a      	ldr	r2, [r7, #4]
 8025968:	4613      	mov	r3, r2
 802596a:	009b      	lsls	r3, r3, #2
 802596c:	4413      	add	r3, r2
 802596e:	009b      	lsls	r3, r3, #2
 8025970:	440b      	add	r3, r1
 8025972:	3310      	adds	r3, #16
 8025974:	2200      	movs	r2, #0
 8025976:	601a      	str	r2, [r3, #0]
 8025978:	e03f      	b.n	80259fa <bsp_InitIUart+0x132>
		}
		else if(i == COM5)
 802597a:	687b      	ldr	r3, [r7, #4]
 802597c:	2b04      	cmp	r3, #4
 802597e:	d11e      	bne.n	80259be <bsp_InitIUart+0xf6>
		{
			iUartTable[i].fIsOpen = FALSE;
 8025980:	4935      	ldr	r1, [pc, #212]	; (8025a58 <bsp_InitIUart+0x190>)
 8025982:	687a      	ldr	r2, [r7, #4]
 8025984:	4613      	mov	r3, r2
 8025986:	009b      	lsls	r3, r3, #2
 8025988:	4413      	add	r3, r2
 802598a:	009b      	lsls	r3, r3, #2
 802598c:	440b      	add	r3, r1
 802598e:	2200      	movs	r2, #0
 8025990:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 38400;
 8025992:	4931      	ldr	r1, [pc, #196]	; (8025a58 <bsp_InitIUart+0x190>)
 8025994:	687a      	ldr	r2, [r7, #4]
 8025996:	4613      	mov	r3, r2
 8025998:	009b      	lsls	r3, r3, #2
 802599a:	4413      	add	r3, r2
 802599c:	009b      	lsls	r3, r3, #2
 802599e:	440b      	add	r3, r1
 80259a0:	3304      	adds	r3, #4
 80259a2:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80259a6:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 80259a8:	492b      	ldr	r1, [pc, #172]	; (8025a58 <bsp_InitIUart+0x190>)
 80259aa:	687a      	ldr	r2, [r7, #4]
 80259ac:	4613      	mov	r3, r2
 80259ae:	009b      	lsls	r3, r3, #2
 80259b0:	4413      	add	r3, r2
 80259b2:	009b      	lsls	r3, r3, #2
 80259b4:	440b      	add	r3, r1
 80259b6:	3310      	adds	r3, #16
 80259b8:	2200      	movs	r2, #0
 80259ba:	601a      	str	r2, [r3, #0]
 80259bc:	e01d      	b.n	80259fa <bsp_InitIUart+0x132>
		}
		else
		{
			iUartTable[i].fIsOpen = FALSE;
 80259be:	4926      	ldr	r1, [pc, #152]	; (8025a58 <bsp_InitIUart+0x190>)
 80259c0:	687a      	ldr	r2, [r7, #4]
 80259c2:	4613      	mov	r3, r2
 80259c4:	009b      	lsls	r3, r3, #2
 80259c6:	4413      	add	r3, r2
 80259c8:	009b      	lsls	r3, r3, #2
 80259ca:	440b      	add	r3, r1
 80259cc:	2200      	movs	r2, #0
 80259ce:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 115200;
 80259d0:	4921      	ldr	r1, [pc, #132]	; (8025a58 <bsp_InitIUart+0x190>)
 80259d2:	687a      	ldr	r2, [r7, #4]
 80259d4:	4613      	mov	r3, r2
 80259d6:	009b      	lsls	r3, r3, #2
 80259d8:	4413      	add	r3, r2
 80259da:	009b      	lsls	r3, r3, #2
 80259dc:	440b      	add	r3, r1
 80259de:	3304      	adds	r3, #4
 80259e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80259e4:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 80259e6:	491c      	ldr	r1, [pc, #112]	; (8025a58 <bsp_InitIUart+0x190>)
 80259e8:	687a      	ldr	r2, [r7, #4]
 80259ea:	4613      	mov	r3, r2
 80259ec:	009b      	lsls	r3, r3, #2
 80259ee:	4413      	add	r3, r2
 80259f0:	009b      	lsls	r3, r3, #2
 80259f2:	440b      	add	r3, r1
 80259f4:	3310      	adds	r3, #16
 80259f6:	2200      	movs	r2, #0
 80259f8:	601a      	str	r2, [r3, #0]
	for ( i = 0; i < IUART_MAXPORT; i++)
 80259fa:	687b      	ldr	r3, [r7, #4]
 80259fc:	3301      	adds	r3, #1
 80259fe:	607b      	str	r3, [r7, #4]
 8025a00:	687b      	ldr	r3, [r7, #4]
 8025a02:	2b04      	cmp	r3, #4
 8025a04:	f67f af75 	bls.w	80258f2 <bsp_InitIUart+0x2a>
		}
	}

	IUart_Open(COM1, IUART1_BAUD);
 8025a08:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8025a0c:	2000      	movs	r0, #0
 8025a0e:	f000 f825 	bl	8025a5c <IUart_Open>
	IUart_Open(COM2, IUART2_BAUD);
 8025a12:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8025a16:	2001      	movs	r0, #1
 8025a18:	f000 f820 	bl	8025a5c <IUart_Open>
	IUart_Open(COM3, IUART3_BAUD);
 8025a1c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8025a20:	2002      	movs	r0, #2
 8025a22:	f000 f81b 	bl	8025a5c <IUart_Open>
	IUart_Open(COM4, IUART4_BAUD);
 8025a26:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8025a2a:	2003      	movs	r0, #3
 8025a2c:	f000 f816 	bl	8025a5c <IUart_Open>
	IUart_Open(COM5, IUART5_BAUD);
 8025a30:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8025a34:	2004      	movs	r0, #4
 8025a36:	f000 f811 	bl	8025a5c <IUart_Open>
}
 8025a3a:	bf00      	nop
 8025a3c:	3708      	adds	r7, #8
 8025a3e:	46bd      	mov	sp, r7
 8025a40:	bd80      	pop	{r7, pc}
 8025a42:	bf00      	nop
 8025a44:	24001bd0 	.word	0x24001bd0
 8025a48:	24001c64 	.word	0x24001c64
 8025a4c:	24001cf8 	.word	0x24001cf8
 8025a50:	24001aa8 	.word	0x24001aa8
 8025a54:	24001b3c 	.word	0x24001b3c
 8025a58:	24001940 	.word	0x24001940

08025a5c <IUart_Open>:


BOOL IUart_Open(int nComPort, UINT32 nBaud)
{
 8025a5c:	b580      	push	{r7, lr}
 8025a5e:	b08a      	sub	sp, #40	; 0x28
 8025a60:	af00      	add	r7, sp, #0
 8025a62:	6078      	str	r0, [r7, #4]
 8025a64:	6039      	str	r1, [r7, #0]
	IUART_T* pIUart = NULL;
 8025a66:	2300      	movs	r3, #0
 8025a68:	623b      	str	r3, [r7, #32]
	IRQn_Type	irqNType = USART1_IRQn;
 8025a6a:	2325      	movs	r3, #37	; 0x25
 8025a6c:	84fb      	strh	r3, [r7, #38]	; 0x26

	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 8025a6e:	687b      	ldr	r3, [r7, #4]
 8025a70:	2b00      	cmp	r3, #0
 8025a72:	db02      	blt.n	8025a7a <IUart_Open+0x1e>
 8025a74:	687b      	ldr	r3, [r7, #4]
 8025a76:	2b04      	cmp	r3, #4
 8025a78:	dd01      	ble.n	8025a7e <IUart_Open+0x22>
		return FALSE;
 8025a7a:	2300      	movs	r3, #0
 8025a7c:	e0dd      	b.n	8025c3a <IUart_Open+0x1de>

	pIUart = &iUartTable[nComPort];
 8025a7e:	687a      	ldr	r2, [r7, #4]
 8025a80:	4613      	mov	r3, r2
 8025a82:	009b      	lsls	r3, r3, #2
 8025a84:	4413      	add	r3, r2
 8025a86:	009b      	lsls	r3, r3, #2
 8025a88:	4a6e      	ldr	r2, [pc, #440]	; (8025c44 <IUart_Open+0x1e8>)
 8025a8a:	4413      	add	r3, r2
 8025a8c:	623b      	str	r3, [r7, #32]

	if (nComPort == COM1)
 8025a8e:	687b      	ldr	r3, [r7, #4]
 8025a90:	2b00      	cmp	r3, #0
 8025a92:	d110      	bne.n	8025ab6 <IUart_Open+0x5a>
	{
		pIUart->hUart = &huart1;
 8025a94:	6a3b      	ldr	r3, [r7, #32]
 8025a96:	4a6c      	ldr	r2, [pc, #432]	; (8025c48 <IUart_Open+0x1ec>)
 8025a98:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf1;
 8025a9a:	6a3b      	ldr	r3, [r7, #32]
 8025a9c:	4a6b      	ldr	r2, [pc, #428]	; (8025c4c <IUart_Open+0x1f0>)
 8025a9e:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf1, IUART1_RX_BUF_SIZE);
 8025aa0:	6a3b      	ldr	r3, [r7, #32]
 8025aa2:	68db      	ldr	r3, [r3, #12]
 8025aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025aa8:	4969      	ldr	r1, [pc, #420]	; (8025c50 <IUart_Open+0x1f4>)
 8025aaa:	4618      	mov	r0, r3
 8025aac:	f000 fa9c 	bl	8025fe8 <RBuf_Init>
		irqNType = USART1_IRQn;
 8025ab0:	2325      	movs	r3, #37	; 0x25
 8025ab2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025ab4:	e051      	b.n	8025b5a <IUart_Open+0xfe>
	}
	else if (nComPort == COM2)
 8025ab6:	687b      	ldr	r3, [r7, #4]
 8025ab8:	2b01      	cmp	r3, #1
 8025aba:	d110      	bne.n	8025ade <IUart_Open+0x82>
	{
		pIUart->hUart = &huart2;
 8025abc:	6a3b      	ldr	r3, [r7, #32]
 8025abe:	4a65      	ldr	r2, [pc, #404]	; (8025c54 <IUart_Open+0x1f8>)
 8025ac0:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf2;
 8025ac2:	6a3b      	ldr	r3, [r7, #32]
 8025ac4:	4a64      	ldr	r2, [pc, #400]	; (8025c58 <IUart_Open+0x1fc>)
 8025ac6:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf2, IUART2_RX_BUF_SIZE);
 8025ac8:	6a3b      	ldr	r3, [r7, #32]
 8025aca:	68db      	ldr	r3, [r3, #12]
 8025acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025ad0:	4962      	ldr	r1, [pc, #392]	; (8025c5c <IUart_Open+0x200>)
 8025ad2:	4618      	mov	r0, r3
 8025ad4:	f000 fa88 	bl	8025fe8 <RBuf_Init>
		irqNType = USART2_IRQn;
 8025ad8:	2326      	movs	r3, #38	; 0x26
 8025ada:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025adc:	e03d      	b.n	8025b5a <IUart_Open+0xfe>
	}
	else if (nComPort == COM3)
 8025ade:	687b      	ldr	r3, [r7, #4]
 8025ae0:	2b02      	cmp	r3, #2
 8025ae2:	d110      	bne.n	8025b06 <IUart_Open+0xaa>
	{
		pIUart->hUart = &huart3;
 8025ae4:	6a3b      	ldr	r3, [r7, #32]
 8025ae6:	4a5e      	ldr	r2, [pc, #376]	; (8025c60 <IUart_Open+0x204>)
 8025ae8:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf3;
 8025aea:	6a3b      	ldr	r3, [r7, #32]
 8025aec:	4a5d      	ldr	r2, [pc, #372]	; (8025c64 <IUart_Open+0x208>)
 8025aee:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf3, IUART3_RX_BUF_SIZE);
 8025af0:	6a3b      	ldr	r3, [r7, #32]
 8025af2:	68db      	ldr	r3, [r3, #12]
 8025af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025af8:	495b      	ldr	r1, [pc, #364]	; (8025c68 <IUart_Open+0x20c>)
 8025afa:	4618      	mov	r0, r3
 8025afc:	f000 fa74 	bl	8025fe8 <RBuf_Init>
		irqNType = USART3_IRQn;
 8025b00:	2327      	movs	r3, #39	; 0x27
 8025b02:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025b04:	e029      	b.n	8025b5a <IUart_Open+0xfe>
	}
	else if (nComPort == COM4)
 8025b06:	687b      	ldr	r3, [r7, #4]
 8025b08:	2b03      	cmp	r3, #3
 8025b0a:	d110      	bne.n	8025b2e <IUart_Open+0xd2>
	{
		pIUart->hUart = &huart4;
 8025b0c:	6a3b      	ldr	r3, [r7, #32]
 8025b0e:	4a57      	ldr	r2, [pc, #348]	; (8025c6c <IUart_Open+0x210>)
 8025b10:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf4;
 8025b12:	6a3b      	ldr	r3, [r7, #32]
 8025b14:	4a56      	ldr	r2, [pc, #344]	; (8025c70 <IUart_Open+0x214>)
 8025b16:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf4, IUART4_RX_BUF_SIZE);
 8025b18:	6a3b      	ldr	r3, [r7, #32]
 8025b1a:	68db      	ldr	r3, [r3, #12]
 8025b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025b20:	4954      	ldr	r1, [pc, #336]	; (8025c74 <IUart_Open+0x218>)
 8025b22:	4618      	mov	r0, r3
 8025b24:	f000 fa60 	bl	8025fe8 <RBuf_Init>
		irqNType = UART4_IRQn;
 8025b28:	2334      	movs	r3, #52	; 0x34
 8025b2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025b2c:	e015      	b.n	8025b5a <IUart_Open+0xfe>
	}
	else if (nComPort == COM5)
 8025b2e:	687b      	ldr	r3, [r7, #4]
 8025b30:	2b04      	cmp	r3, #4
 8025b32:	d110      	bne.n	8025b56 <IUart_Open+0xfa>
	{
		pIUart->hUart = &huart5;
 8025b34:	6a3b      	ldr	r3, [r7, #32]
 8025b36:	4a50      	ldr	r2, [pc, #320]	; (8025c78 <IUart_Open+0x21c>)
 8025b38:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf5;
 8025b3a:	6a3b      	ldr	r3, [r7, #32]
 8025b3c:	4a4f      	ldr	r2, [pc, #316]	; (8025c7c <IUart_Open+0x220>)
 8025b3e:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf5, IUART5_RX_BUF_SIZE);
 8025b40:	6a3b      	ldr	r3, [r7, #32]
 8025b42:	68db      	ldr	r3, [r3, #12]
 8025b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025b48:	494d      	ldr	r1, [pc, #308]	; (8025c80 <IUart_Open+0x224>)
 8025b4a:	4618      	mov	r0, r3
 8025b4c:	f000 fa4c 	bl	8025fe8 <RBuf_Init>
		irqNType = UART5_IRQn;
 8025b50:	2335      	movs	r3, #53	; 0x35
 8025b52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8025b54:	e001      	b.n	8025b5a <IUart_Open+0xfe>

	}
	else
	{
		return FALSE;
 8025b56:	2300      	movs	r3, #0
 8025b58:	e06f      	b.n	8025c3a <IUart_Open+0x1de>
	}

	pIUart->hUart->Init.BaudRate 		= nBaud;
 8025b5a:	6a3b      	ldr	r3, [r7, #32]
 8025b5c:	691b      	ldr	r3, [r3, #16]
 8025b5e:	683a      	ldr	r2, [r7, #0]
 8025b60:	605a      	str	r2, [r3, #4]
	pIUart->hUart->Init.WordLength   	= UART_WORDLENGTH_8B;
 8025b62:	6a3b      	ldr	r3, [r7, #32]
 8025b64:	691b      	ldr	r3, [r3, #16]
 8025b66:	2200      	movs	r2, #0
 8025b68:	609a      	str	r2, [r3, #8]
	pIUart->hUart->Init.StopBits     	= UART_STOPBITS_1;
 8025b6a:	6a3b      	ldr	r3, [r7, #32]
 8025b6c:	691b      	ldr	r3, [r3, #16]
 8025b6e:	2200      	movs	r2, #0
 8025b70:	60da      	str	r2, [r3, #12]
	pIUart->hUart->Init.Parity       	= UART_PARITY_NONE;
 8025b72:	6a3b      	ldr	r3, [r7, #32]
 8025b74:	691b      	ldr	r3, [r3, #16]
 8025b76:	2200      	movs	r2, #0
 8025b78:	611a      	str	r2, [r3, #16]
	pIUart->hUart->Init.Mode         	= UART_MODE_TX_RX;
 8025b7a:	6a3b      	ldr	r3, [r7, #32]
 8025b7c:	691b      	ldr	r3, [r3, #16]
 8025b7e:	220c      	movs	r2, #12
 8025b80:	615a      	str	r2, [r3, #20]
	pIUart->hUart->Init.HwFlowCtl    	= UART_HWCONTROL_NONE;
 8025b82:	6a3b      	ldr	r3, [r7, #32]
 8025b84:	691b      	ldr	r3, [r3, #16]
 8025b86:	2200      	movs	r2, #0
 8025b88:	619a      	str	r2, [r3, #24]
	pIUart->hUart->Init.OverSampling 	= UART_OVERSAMPLING_16;
 8025b8a:	6a3b      	ldr	r3, [r7, #32]
 8025b8c:	691b      	ldr	r3, [r3, #16]
 8025b8e:	2200      	movs	r2, #0
 8025b90:	61da      	str	r2, [r3, #28]
	pIUart->hUart->Init.OneBitSampling 	= UART_ONE_BIT_SAMPLE_DISABLE;
 8025b92:	6a3b      	ldr	r3, [r7, #32]
 8025b94:	691b      	ldr	r3, [r3, #16]
 8025b96:	2200      	movs	r2, #0
 8025b98:	621a      	str	r2, [r3, #32]
	pIUart->hUart->Init.ClockPrescaler 	= UART_PRESCALER_DIV1;
 8025b9a:	6a3b      	ldr	r3, [r7, #32]
 8025b9c:	691b      	ldr	r3, [r3, #16]
 8025b9e:	2200      	movs	r2, #0
 8025ba0:	625a      	str	r2, [r3, #36]	; 0x24
	pIUart->hUart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8025ba2:	6a3b      	ldr	r3, [r7, #32]
 8025ba4:	691b      	ldr	r3, [r3, #16]
 8025ba6:	2200      	movs	r2, #0
 8025ba8:	629a      	str	r2, [r3, #40]	; 0x28
	pIUart->hUart->AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_DISABLE;
 8025baa:	6a3b      	ldr	r3, [r7, #32]
 8025bac:	691b      	ldr	r3, [r3, #16]
 8025bae:	2200      	movs	r2, #0
 8025bb0:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_UART_Init(pIUart->hUart);
 8025bb2:	6a3b      	ldr	r3, [r7, #32]
 8025bb4:	691b      	ldr	r3, [r3, #16]
 8025bb6:	4618      	mov	r0, r3
 8025bb8:	f009 fa00 	bl	802efbc <HAL_UART_Init>

    HAL_NVIC_SetPriority(irqNType, 0, 1);
 8025bbc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8025bc0:	2201      	movs	r2, #1
 8025bc2:	2100      	movs	r1, #0
 8025bc4:	4618      	mov	r0, r3
 8025bc6:	f004 fbae 	bl	802a326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNType);
 8025bca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8025bce:	4618      	mov	r0, r3
 8025bd0:	f004 fbc3 	bl	802a35a <HAL_NVIC_EnableIRQ>
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR3, USART_CR3_RXFTIE);
    // Enable the UART Parity Error interrupt and Data Register Not Empty interrupt
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
	*/

    SET_BIT(pIUart->hUart->Instance->ICR, USART_ICR_TCCF);   // Set Clear transfer complete flag
 8025bd4:	6a3b      	ldr	r3, [r7, #32]
 8025bd6:	691b      	ldr	r3, [r3, #16]
 8025bd8:	681b      	ldr	r3, [r3, #0]
 8025bda:	6a1a      	ldr	r2, [r3, #32]
 8025bdc:	6a3b      	ldr	r3, [r7, #32]
 8025bde:	691b      	ldr	r3, [r3, #16]
 8025be0:	681b      	ldr	r3, [r3, #0]
 8025be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025be6:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->RQR, USART_RQR_RXFRQ);  // Set Receive Data flush Request
 8025be8:	6a3b      	ldr	r3, [r7, #32]
 8025bea:	691b      	ldr	r3, [r3, #16]
 8025bec:	681b      	ldr	r3, [r3, #0]
 8025bee:	699a      	ldr	r2, [r3, #24]
 8025bf0:	6a3b      	ldr	r3, [r7, #32]
 8025bf2:	691b      	ldr	r3, [r3, #16]
 8025bf4:	681b      	ldr	r3, [r3, #0]
 8025bf6:	f042 0208 	orr.w	r2, r2, #8
 8025bfa:	619a      	str	r2, [r3, #24]
    // USART_CR1_PEIE | USART_CR1_RXNEIE
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR1, USART_CR1_RXNEIE); // Set RX 수신 인터럽트
 8025bfc:	6a3b      	ldr	r3, [r7, #32]
 8025bfe:	691b      	ldr	r3, [r3, #16]
 8025c00:	681b      	ldr	r3, [r3, #0]
 8025c02:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025c04:	68fb      	ldr	r3, [r7, #12]
 8025c06:	e853 3f00 	ldrex	r3, [r3]
 8025c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8025c0c:	68bb      	ldr	r3, [r7, #8]
 8025c0e:	f043 0320 	orr.w	r3, r3, #32
 8025c12:	61fb      	str	r3, [r7, #28]
 8025c14:	6a3b      	ldr	r3, [r7, #32]
 8025c16:	691b      	ldr	r3, [r3, #16]
 8025c18:	681b      	ldr	r3, [r3, #0]
 8025c1a:	461a      	mov	r2, r3
 8025c1c:	69fb      	ldr	r3, [r7, #28]
 8025c1e:	61bb      	str	r3, [r7, #24]
 8025c20:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025c22:	6979      	ldr	r1, [r7, #20]
 8025c24:	69ba      	ldr	r2, [r7, #24]
 8025c26:	e841 2300 	strex	r3, r2, [r1]
 8025c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8025c2c:	693b      	ldr	r3, [r7, #16]
 8025c2e:	2b00      	cmp	r3, #0
 8025c30:	d1e4      	bne.n	8025bfc <IUart_Open+0x1a0>

    pIUart->fIsOpen = TRUE;
 8025c32:	6a3b      	ldr	r3, [r7, #32]
 8025c34:	2201      	movs	r2, #1
 8025c36:	701a      	strb	r2, [r3, #0]


	return TRUE;
 8025c38:	2301      	movs	r3, #1
}
 8025c3a:	4618      	mov	r0, r3
 8025c3c:	3728      	adds	r7, #40	; 0x28
 8025c3e:	46bd      	mov	sp, r7
 8025c40:	bd80      	pop	{r7, pc}
 8025c42:	bf00      	nop
 8025c44:	24001940 	.word	0x24001940
 8025c48:	24001bd0 	.word	0x24001bd0
 8025c4c:	240008f0 	.word	0x240008f0
 8025c50:	240004f0 	.word	0x240004f0
 8025c54:	24001c64 	.word	0x24001c64
 8025c58:	24000d00 	.word	0x24000d00
 8025c5c:	24000900 	.word	0x24000900
 8025c60:	24001cf8 	.word	0x24001cf8
 8025c64:	24001110 	.word	0x24001110
 8025c68:	24000d10 	.word	0x24000d10
 8025c6c:	24001aa8 	.word	0x24001aa8
 8025c70:	24001520 	.word	0x24001520
 8025c74:	24001120 	.word	0x24001120
 8025c78:	24001b3c 	.word	0x24001b3c
 8025c7c:	24001930 	.word	0x24001930
 8025c80:	24001530 	.word	0x24001530

08025c84 <IUart_SendByte>:
	}
}


int IUart_SendByte(int nComPort, BYTE bCh)
{
 8025c84:	b480      	push	{r7}
 8025c86:	b083      	sub	sp, #12
 8025c88:	af00      	add	r7, sp, #0
 8025c8a:	6078      	str	r0, [r7, #4]
 8025c8c:	460b      	mov	r3, r1
 8025c8e:	70fb      	strb	r3, [r7, #3]
	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 8025c90:	687b      	ldr	r3, [r7, #4]
 8025c92:	2b00      	cmp	r3, #0
 8025c94:	db02      	blt.n	8025c9c <IUart_SendByte+0x18>
 8025c96:	687b      	ldr	r3, [r7, #4]
 8025c98:	2b04      	cmp	r3, #4
 8025c9a:	dd02      	ble.n	8025ca2 <IUart_SendByte+0x1e>
		return -1;
 8025c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8025ca0:	e01c      	b.n	8025cdc <IUart_SendByte+0x58>

	while ((iUartTable[nComPort].hUart->Instance->ISR & UART_FLAG_TXE) == RESET);
 8025ca2:	bf00      	nop
 8025ca4:	4910      	ldr	r1, [pc, #64]	; (8025ce8 <IUart_SendByte+0x64>)
 8025ca6:	687a      	ldr	r2, [r7, #4]
 8025ca8:	4613      	mov	r3, r2
 8025caa:	009b      	lsls	r3, r3, #2
 8025cac:	4413      	add	r3, r2
 8025cae:	009b      	lsls	r3, r3, #2
 8025cb0:	440b      	add	r3, r1
 8025cb2:	3310      	adds	r3, #16
 8025cb4:	681b      	ldr	r3, [r3, #0]
 8025cb6:	681b      	ldr	r3, [r3, #0]
 8025cb8:	69db      	ldr	r3, [r3, #28]
 8025cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025cbe:	2b00      	cmp	r3, #0
 8025cc0:	d0f0      	beq.n	8025ca4 <IUart_SendByte+0x20>
	iUartTable[nComPort].hUart->Instance->TDR = bCh;
 8025cc2:	4909      	ldr	r1, [pc, #36]	; (8025ce8 <IUart_SendByte+0x64>)
 8025cc4:	687a      	ldr	r2, [r7, #4]
 8025cc6:	4613      	mov	r3, r2
 8025cc8:	009b      	lsls	r3, r3, #2
 8025cca:	4413      	add	r3, r2
 8025ccc:	009b      	lsls	r3, r3, #2
 8025cce:	440b      	add	r3, r1
 8025cd0:	3310      	adds	r3, #16
 8025cd2:	681b      	ldr	r3, [r3, #0]
 8025cd4:	681b      	ldr	r3, [r3, #0]
 8025cd6:	78fa      	ldrb	r2, [r7, #3]
 8025cd8:	629a      	str	r2, [r3, #40]	; 0x28

	return bCh;
 8025cda:	78fb      	ldrb	r3, [r7, #3]
}
 8025cdc:	4618      	mov	r0, r3
 8025cde:	370c      	adds	r7, #12
 8025ce0:	46bd      	mov	sp, r7
 8025ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ce6:	4770      	bx	lr
 8025ce8:	24001940 	.word	0x24001940

08025cec <IUart_SendBuffer>:



int IUart_SendBuffer(int nComPort, PUCHAR pBuf, UINT16 usLen)
{
 8025cec:	b580      	push	{r7, lr}
 8025cee:	b086      	sub	sp, #24
 8025cf0:	af00      	add	r7, sp, #0
 8025cf2:	60f8      	str	r0, [r7, #12]
 8025cf4:	60b9      	str	r1, [r7, #8]
 8025cf6:	4613      	mov	r3, r2
 8025cf8:	80fb      	strh	r3, [r7, #6]
	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 8025cfa:	68fb      	ldr	r3, [r7, #12]
 8025cfc:	2b00      	cmp	r3, #0
 8025cfe:	db02      	blt.n	8025d06 <IUart_SendBuffer+0x1a>
 8025d00:	68fb      	ldr	r3, [r7, #12]
 8025d02:	2b04      	cmp	r3, #4
 8025d04:	dd02      	ble.n	8025d0c <IUart_SendBuffer+0x20>
		return -1;
 8025d06:	f04f 33ff 	mov.w	r3, #4294967295
 8025d0a:	e012      	b.n	8025d32 <IUart_SendBuffer+0x46>

	for (int i = 0; i < usLen; i++)
 8025d0c:	2300      	movs	r3, #0
 8025d0e:	617b      	str	r3, [r7, #20]
 8025d10:	e00a      	b.n	8025d28 <IUart_SendBuffer+0x3c>
		IUart_SendByte(nComPort, pBuf[i]);
 8025d12:	697b      	ldr	r3, [r7, #20]
 8025d14:	68ba      	ldr	r2, [r7, #8]
 8025d16:	4413      	add	r3, r2
 8025d18:	781b      	ldrb	r3, [r3, #0]
 8025d1a:	4619      	mov	r1, r3
 8025d1c:	68f8      	ldr	r0, [r7, #12]
 8025d1e:	f7ff ffb1 	bl	8025c84 <IUart_SendByte>
	for (int i = 0; i < usLen; i++)
 8025d22:	697b      	ldr	r3, [r7, #20]
 8025d24:	3301      	adds	r3, #1
 8025d26:	617b      	str	r3, [r7, #20]
 8025d28:	88fb      	ldrh	r3, [r7, #6]
 8025d2a:	697a      	ldr	r2, [r7, #20]
 8025d2c:	429a      	cmp	r2, r3
 8025d2e:	dbf0      	blt.n	8025d12 <IUart_SendBuffer+0x26>

	return usLen;
 8025d30:	88fb      	ldrh	r3, [r7, #6]
}
 8025d32:	4618      	mov	r0, r3
 8025d34:	3718      	adds	r7, #24
 8025d36:	46bd      	mov	sp, r7
 8025d38:	bd80      	pop	{r7, pc}
	...

08025d3c <IUart_RecvByte>:



int IUart_RecvByte(int nComPort)
{
 8025d3c:	b580      	push	{r7, lr}
 8025d3e:	b084      	sub	sp, #16
 8025d40:	af00      	add	r7, sp, #0
 8025d42:	6078      	str	r0, [r7, #4]
	BYTE	bRecvByte;

	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 8025d44:	687b      	ldr	r3, [r7, #4]
 8025d46:	2b00      	cmp	r3, #0
 8025d48:	db02      	blt.n	8025d50 <IUart_RecvByte+0x14>
 8025d4a:	687b      	ldr	r3, [r7, #4]
 8025d4c:	2b04      	cmp	r3, #4
 8025d4e:	dd02      	ble.n	8025d56 <IUart_RecvByte+0x1a>
		return -1;
 8025d50:	f04f 33ff 	mov.w	r3, #4294967295
 8025d54:	e021      	b.n	8025d9a <IUart_RecvByte+0x5e>

	if (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) > 0)
 8025d56:	4913      	ldr	r1, [pc, #76]	; (8025da4 <IUart_RecvByte+0x68>)
 8025d58:	687a      	ldr	r2, [r7, #4]
 8025d5a:	4613      	mov	r3, r2
 8025d5c:	009b      	lsls	r3, r3, #2
 8025d5e:	4413      	add	r3, r2
 8025d60:	009b      	lsls	r3, r3, #2
 8025d62:	440b      	add	r3, r1
 8025d64:	330c      	adds	r3, #12
 8025d66:	681b      	ldr	r3, [r3, #0]
 8025d68:	4618      	mov	r0, r3
 8025d6a:	f000 fa6b 	bl	8026244 <RBuf_Get_Full>
 8025d6e:	4603      	mov	r3, r0
 8025d70:	2b00      	cmp	r3, #0
 8025d72:	d010      	beq.n	8025d96 <IUart_RecvByte+0x5a>
	{
		RBuf_Read(iUartTable[nComPort].pRxRingBuf, &bRecvByte, 1);
 8025d74:	490b      	ldr	r1, [pc, #44]	; (8025da4 <IUart_RecvByte+0x68>)
 8025d76:	687a      	ldr	r2, [r7, #4]
 8025d78:	4613      	mov	r3, r2
 8025d7a:	009b      	lsls	r3, r3, #2
 8025d7c:	4413      	add	r3, r2
 8025d7e:	009b      	lsls	r3, r3, #2
 8025d80:	440b      	add	r3, r1
 8025d82:	330c      	adds	r3, #12
 8025d84:	681b      	ldr	r3, [r3, #0]
 8025d86:	f107 010f 	add.w	r1, r7, #15
 8025d8a:	2201      	movs	r2, #1
 8025d8c:	4618      	mov	r0, r3
 8025d8e:	f000 f9b7 	bl	8026100 <RBuf_Read>
	else
	{
		return -1;
	}

	return bRecvByte;
 8025d92:	7bfb      	ldrb	r3, [r7, #15]
 8025d94:	e001      	b.n	8025d9a <IUart_RecvByte+0x5e>
		return -1;
 8025d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8025d9a:	4618      	mov	r0, r3
 8025d9c:	3710      	adds	r7, #16
 8025d9e:	46bd      	mov	sp, r7
 8025da0:	bd80      	pop	{r7, pc}
 8025da2:	bf00      	nop
 8025da4:	24001940 	.word	0x24001940

08025da8 <IUart_RecvByte_check>:


int IUart_RecvByte_check(int nComPort, BYTE *pData)
{
 8025da8:	b580      	push	{r7, lr}
 8025daa:	b084      	sub	sp, #16
 8025dac:	af00      	add	r7, sp, #0
 8025dae:	6078      	str	r0, [r7, #4]
 8025db0:	6039      	str	r1, [r7, #0]
    BYTE    bRecvByte;

	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 8025db2:	687b      	ldr	r3, [r7, #4]
 8025db4:	2b00      	cmp	r3, #0
 8025db6:	db02      	blt.n	8025dbe <IUart_RecvByte_check+0x16>
 8025db8:	687b      	ldr	r3, [r7, #4]
 8025dba:	2b04      	cmp	r3, #4
 8025dbc:	dd02      	ble.n	8025dc4 <IUart_RecvByte_check+0x1c>
		return -1;
 8025dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8025dc2:	e023      	b.n	8025e0c <IUart_RecvByte_check+0x64>

	if (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) > 0)
 8025dc4:	4913      	ldr	r1, [pc, #76]	; (8025e14 <IUart_RecvByte_check+0x6c>)
 8025dc6:	687a      	ldr	r2, [r7, #4]
 8025dc8:	4613      	mov	r3, r2
 8025dca:	009b      	lsls	r3, r3, #2
 8025dcc:	4413      	add	r3, r2
 8025dce:	009b      	lsls	r3, r3, #2
 8025dd0:	440b      	add	r3, r1
 8025dd2:	330c      	adds	r3, #12
 8025dd4:	681b      	ldr	r3, [r3, #0]
 8025dd6:	4618      	mov	r0, r3
 8025dd8:	f000 fa34 	bl	8026244 <RBuf_Get_Full>
 8025ddc:	4603      	mov	r3, r0
 8025dde:	2b00      	cmp	r3, #0
 8025de0:	d013      	beq.n	8025e0a <IUart_RecvByte_check+0x62>
    {
    	RBuf_Read(iUartTable[nComPort].pRxRingBuf, &bRecvByte, 1);
 8025de2:	490c      	ldr	r1, [pc, #48]	; (8025e14 <IUart_RecvByte_check+0x6c>)
 8025de4:	687a      	ldr	r2, [r7, #4]
 8025de6:	4613      	mov	r3, r2
 8025de8:	009b      	lsls	r3, r3, #2
 8025dea:	4413      	add	r3, r2
 8025dec:	009b      	lsls	r3, r3, #2
 8025dee:	440b      	add	r3, r1
 8025df0:	330c      	adds	r3, #12
 8025df2:	681b      	ldr	r3, [r3, #0]
 8025df4:	f107 010f 	add.w	r1, r7, #15
 8025df8:	2201      	movs	r2, #1
 8025dfa:	4618      	mov	r0, r3
 8025dfc:	f000 f980 	bl	8026100 <RBuf_Read>

        *pData = bRecvByte;
 8025e00:	7bfa      	ldrb	r2, [r7, #15]
 8025e02:	683b      	ldr	r3, [r7, #0]
 8025e04:	701a      	strb	r2, [r3, #0]
    else
    {
        return FALSE;
    }

    return TRUE;
 8025e06:	2301      	movs	r3, #1
 8025e08:	e000      	b.n	8025e0c <IUart_RecvByte_check+0x64>
        return FALSE;
 8025e0a:	2300      	movs	r3, #0
}
 8025e0c:	4618      	mov	r0, r3
 8025e0e:	3710      	adds	r7, #16
 8025e10:	46bd      	mov	sp, r7
 8025e12:	bd80      	pop	{r7, pc}
 8025e14:	24001940 	.word	0x24001940

08025e18 <IUart_RecvByteBlocked>:
	return nReaded;
}


int IUart_RecvByteBlocked(int nComPort)
{
 8025e18:	b580      	push	{r7, lr}
 8025e1a:	b082      	sub	sp, #8
 8025e1c:	af00      	add	r7, sp, #0
 8025e1e:	6078      	str	r0, [r7, #4]
	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 8025e20:	687b      	ldr	r3, [r7, #4]
 8025e22:	2b00      	cmp	r3, #0
 8025e24:	db02      	blt.n	8025e2c <IUart_RecvByteBlocked+0x14>
 8025e26:	687b      	ldr	r3, [r7, #4]
 8025e28:	2b04      	cmp	r3, #4
 8025e2a:	dd02      	ble.n	8025e32 <IUart_RecvByteBlocked+0x1a>
		return -1;
 8025e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8025e30:	e013      	b.n	8025e5a <IUart_RecvByteBlocked+0x42>

   // while (RBuf_Available(iUartTable[nComPort].pRxRingBuf) == 0)
    while (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) == 0)
 8025e32:	bf00      	nop
 8025e34:	490b      	ldr	r1, [pc, #44]	; (8025e64 <IUart_RecvByteBlocked+0x4c>)
 8025e36:	687a      	ldr	r2, [r7, #4]
 8025e38:	4613      	mov	r3, r2
 8025e3a:	009b      	lsls	r3, r3, #2
 8025e3c:	4413      	add	r3, r2
 8025e3e:	009b      	lsls	r3, r3, #2
 8025e40:	440b      	add	r3, r1
 8025e42:	330c      	adds	r3, #12
 8025e44:	681b      	ldr	r3, [r3, #0]
 8025e46:	4618      	mov	r0, r3
 8025e48:	f000 f9fc 	bl	8026244 <RBuf_Get_Full>
 8025e4c:	4603      	mov	r3, r0
 8025e4e:	2b00      	cmp	r3, #0
 8025e50:	d0f0      	beq.n	8025e34 <IUart_RecvByteBlocked+0x1c>
        ;

    return IUart_RecvByte(nComPort);
 8025e52:	6878      	ldr	r0, [r7, #4]
 8025e54:	f7ff ff72 	bl	8025d3c <IUart_RecvByte>
 8025e58:	4603      	mov	r3, r0
}
 8025e5a:	4618      	mov	r0, r3
 8025e5c:	3708      	adds	r7, #8
 8025e5e:	46bd      	mov	sp, r7
 8025e60:	bd80      	pop	{r7, pc}
 8025e62:	bf00      	nop
 8025e64:	24001940 	.word	0x24001940

08025e68 <IUartISR>:
** ==========================================================================
*/

// 내부 USART/UART 인터럽트 서비스 처리 루틴
void IUartISR(IUART_T* pIUart)
{
 8025e68:	b580      	push	{r7, lr}
 8025e6a:	b084      	sub	sp, #16
 8025e6c:	af00      	add	r7, sp, #0
 8025e6e:	6078      	str	r0, [r7, #4]
    uint32_t isrflags   = READ_REG(pIUart->hUart->Instance->ISR);
 8025e70:	687b      	ldr	r3, [r7, #4]
 8025e72:	691b      	ldr	r3, [r3, #16]
 8025e74:	681b      	ldr	r3, [r3, #0]
 8025e76:	69db      	ldr	r3, [r3, #28]
 8025e78:	60fb      	str	r3, [r7, #12]

    // 수신 인터럽트 처리
    if ((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 8025e7a:	68fb      	ldr	r3, [r7, #12]
 8025e7c:	f003 0320 	and.w	r3, r3, #32
 8025e80:	2b00      	cmp	r3, #0
 8025e82:	d00d      	beq.n	8025ea0 <IUartISR+0x38>
    {
        uint8_t ch;

        ch = (uint8_t)(READ_REG(pIUart->hUart->Instance->RDR) & 0x00FF);
 8025e84:	687b      	ldr	r3, [r7, #4]
 8025e86:	691b      	ldr	r3, [r3, #16]
 8025e88:	681b      	ldr	r3, [r3, #0]
 8025e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025e8c:	b2db      	uxtb	r3, r3
 8025e8e:	72fb      	strb	r3, [r7, #11]
        RBuf_Write(pIUart->pRxRingBuf, &ch, 1);
 8025e90:	687b      	ldr	r3, [r7, #4]
 8025e92:	68db      	ldr	r3, [r3, #12]
 8025e94:	f107 010b 	add.w	r1, r7, #11
 8025e98:	2201      	movs	r2, #1
 8025e9a:	4618      	mov	r0, r3
 8025e9c:	f000 f8c5 	bl	802602a <RBuf_Write>
    }

    // Clear Interrupt Flag
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_PEF);     // Parity Error Clear Flag
 8025ea0:	687b      	ldr	r3, [r7, #4]
 8025ea2:	691b      	ldr	r3, [r3, #16]
 8025ea4:	681b      	ldr	r3, [r3, #0]
 8025ea6:	6a1a      	ldr	r2, [r3, #32]
 8025ea8:	687b      	ldr	r3, [r7, #4]
 8025eaa:	691b      	ldr	r3, [r3, #16]
 8025eac:	681b      	ldr	r3, [r3, #0]
 8025eae:	f042 0201 	orr.w	r2, r2, #1
 8025eb2:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_FEF);     // Framing Error Clear Flag
 8025eb4:	687b      	ldr	r3, [r7, #4]
 8025eb6:	691b      	ldr	r3, [r3, #16]
 8025eb8:	681b      	ldr	r3, [r3, #0]
 8025eba:	6a1a      	ldr	r2, [r3, #32]
 8025ebc:	687b      	ldr	r3, [r7, #4]
 8025ebe:	691b      	ldr	r3, [r3, #16]
 8025ec0:	681b      	ldr	r3, [r3, #0]
 8025ec2:	f042 0202 	orr.w	r2, r2, #2
 8025ec6:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_NEF);     // Noise detected Clear Flag
 8025ec8:	687b      	ldr	r3, [r7, #4]
 8025eca:	691b      	ldr	r3, [r3, #16]
 8025ecc:	681b      	ldr	r3, [r3, #0]
 8025ece:	6a1a      	ldr	r2, [r3, #32]
 8025ed0:	687b      	ldr	r3, [r7, #4]
 8025ed2:	691b      	ldr	r3, [r3, #16]
 8025ed4:	681b      	ldr	r3, [r3, #0]
 8025ed6:	f042 0204 	orr.w	r2, r2, #4
 8025eda:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_OREF);    // OverRun Error Clear Flag
 8025edc:	687b      	ldr	r3, [r7, #4]
 8025ede:	691b      	ldr	r3, [r3, #16]
 8025ee0:	681b      	ldr	r3, [r3, #0]
 8025ee2:	6a1a      	ldr	r2, [r3, #32]
 8025ee4:	687b      	ldr	r3, [r7, #4]
 8025ee6:	691b      	ldr	r3, [r3, #16]
 8025ee8:	681b      	ldr	r3, [r3, #0]
 8025eea:	f042 0208 	orr.w	r2, r2, #8
 8025eee:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_IDLEF);   // IDLE line detected Clear Flag
 8025ef0:	687b      	ldr	r3, [r7, #4]
 8025ef2:	691b      	ldr	r3, [r3, #16]
 8025ef4:	681b      	ldr	r3, [r3, #0]
 8025ef6:	6a1a      	ldr	r2, [r3, #32]
 8025ef8:	687b      	ldr	r3, [r7, #4]
 8025efa:	691b      	ldr	r3, [r3, #16]
 8025efc:	681b      	ldr	r3, [r3, #0]
 8025efe:	f042 0210 	orr.w	r2, r2, #16
 8025f02:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_TCF);     // Transmission Complete Clear Flag
 8025f04:	687b      	ldr	r3, [r7, #4]
 8025f06:	691b      	ldr	r3, [r3, #16]
 8025f08:	681b      	ldr	r3, [r3, #0]
 8025f0a:	6a1a      	ldr	r2, [r3, #32]
 8025f0c:	687b      	ldr	r3, [r7, #4]
 8025f0e:	691b      	ldr	r3, [r3, #16]
 8025f10:	681b      	ldr	r3, [r3, #0]
 8025f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025f16:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_LBDF);    // LIN Break Detection Clear Flag
 8025f18:	687b      	ldr	r3, [r7, #4]
 8025f1a:	691b      	ldr	r3, [r3, #16]
 8025f1c:	681b      	ldr	r3, [r3, #0]
 8025f1e:	6a1a      	ldr	r2, [r3, #32]
 8025f20:	687b      	ldr	r3, [r7, #4]
 8025f22:	691b      	ldr	r3, [r3, #16]
 8025f24:	681b      	ldr	r3, [r3, #0]
 8025f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8025f2a:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_CTSF);    // CTS Interrupt Clear Flag
 8025f2c:	687b      	ldr	r3, [r7, #4]
 8025f2e:	691b      	ldr	r3, [r3, #16]
 8025f30:	681b      	ldr	r3, [r3, #0]
 8025f32:	6a1a      	ldr	r2, [r3, #32]
 8025f34:	687b      	ldr	r3, [r7, #4]
 8025f36:	691b      	ldr	r3, [r3, #16]
 8025f38:	681b      	ldr	r3, [r3, #0]
 8025f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8025f3e:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_CMF);     // Character Match Clear Flag
 8025f40:	687b      	ldr	r3, [r7, #4]
 8025f42:	691b      	ldr	r3, [r3, #16]
 8025f44:	681b      	ldr	r3, [r3, #0]
 8025f46:	6a1a      	ldr	r2, [r3, #32]
 8025f48:	687b      	ldr	r3, [r7, #4]
 8025f4a:	691b      	ldr	r3, [r3, #16]
 8025f4c:	681b      	ldr	r3, [r3, #0]
 8025f4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8025f52:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_WUF);     // Wake Up from stop mode Clear Flag
 8025f54:	687b      	ldr	r3, [r7, #4]
 8025f56:	691b      	ldr	r3, [r3, #16]
 8025f58:	681b      	ldr	r3, [r3, #0]
 8025f5a:	6a1a      	ldr	r2, [r3, #32]
 8025f5c:	687b      	ldr	r3, [r7, #4]
 8025f5e:	691b      	ldr	r3, [r3, #16]
 8025f60:	681b      	ldr	r3, [r3, #0]
 8025f62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8025f66:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_TXFECF);  // TXFIFO empty Clear Flag
 8025f68:	687b      	ldr	r3, [r7, #4]
 8025f6a:	691b      	ldr	r3, [r3, #16]
 8025f6c:	681b      	ldr	r3, [r3, #0]
 8025f6e:	6a1a      	ldr	r2, [r3, #32]
 8025f70:	687b      	ldr	r3, [r7, #4]
 8025f72:	691b      	ldr	r3, [r3, #16]
 8025f74:	681b      	ldr	r3, [r3, #0]
 8025f76:	f042 0220 	orr.w	r2, r2, #32
 8025f7a:	621a      	str	r2, [r3, #32]
}
 8025f7c:	bf00      	nop
 8025f7e:	3710      	adds	r7, #16
 8025f80:	46bd      	mov	sp, r7
 8025f82:	bd80      	pop	{r7, pc}

08025f84 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8025f84:	b580      	push	{r7, lr}
 8025f86:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM1]);
 8025f88:	4802      	ldr	r0, [pc, #8]	; (8025f94 <USART1_IRQHandler+0x10>)
 8025f8a:	f7ff ff6d 	bl	8025e68 <IUartISR>
}
 8025f8e:	bf00      	nop
 8025f90:	bd80      	pop	{r7, pc}
 8025f92:	bf00      	nop
 8025f94:	24001940 	.word	0x24001940

08025f98 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8025f98:	b580      	push	{r7, lr}
 8025f9a:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM2]);
 8025f9c:	4802      	ldr	r0, [pc, #8]	; (8025fa8 <USART2_IRQHandler+0x10>)
 8025f9e:	f7ff ff63 	bl	8025e68 <IUartISR>
}
 8025fa2:	bf00      	nop
 8025fa4:	bd80      	pop	{r7, pc}
 8025fa6:	bf00      	nop
 8025fa8:	24001954 	.word	0x24001954

08025fac <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8025fac:	b580      	push	{r7, lr}
 8025fae:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM3]);
 8025fb0:	4802      	ldr	r0, [pc, #8]	; (8025fbc <USART3_IRQHandler+0x10>)
 8025fb2:	f7ff ff59 	bl	8025e68 <IUartISR>
}
 8025fb6:	bf00      	nop
 8025fb8:	bd80      	pop	{r7, pc}
 8025fba:	bf00      	nop
 8025fbc:	24001968 	.word	0x24001968

08025fc0 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8025fc0:	b580      	push	{r7, lr}
 8025fc2:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM4]);
 8025fc4:	4802      	ldr	r0, [pc, #8]	; (8025fd0 <UART4_IRQHandler+0x10>)
 8025fc6:	f7ff ff4f 	bl	8025e68 <IUartISR>
}
 8025fca:	bf00      	nop
 8025fcc:	bd80      	pop	{r7, pc}
 8025fce:	bf00      	nop
 8025fd0:	2400197c 	.word	0x2400197c

08025fd4 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8025fd4:	b580      	push	{r7, lr}
 8025fd6:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM5]);
 8025fd8:	4802      	ldr	r0, [pc, #8]	; (8025fe4 <UART5_IRQHandler+0x10>)
 8025fda:	f7ff ff45 	bl	8025e68 <IUartISR>
}
 8025fde:	bf00      	nop
 8025fe0:	bd80      	pop	{r7, pc}
 8025fe2:	bf00      	nop
 8025fe4:	24001990 	.word	0x24001990

08025fe8 <RBuf_Init>:
#define BUF_MIN(x, y)                   ((x) < (y) ? (x) : (y))
#define BUF_MAX(x, y)                   ((x) > (y) ? (x) : (y))


uint8_t RBuf_Init(RBUF_T* pRBuf, void* buffer, size_t size)
{
 8025fe8:	b580      	push	{r7, lr}
 8025fea:	b084      	sub	sp, #16
 8025fec:	af00      	add	r7, sp, #0
 8025fee:	60f8      	str	r0, [r7, #12]
 8025ff0:	60b9      	str	r1, [r7, #8]
 8025ff2:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || buffer == NULL || size == 0)
 8025ff4:	68bb      	ldr	r3, [r7, #8]
 8025ff6:	2b00      	cmp	r3, #0
 8025ff8:	d005      	beq.n	8026006 <RBuf_Init+0x1e>
 8025ffa:	68bb      	ldr	r3, [r7, #8]
 8025ffc:	2b00      	cmp	r3, #0
 8025ffe:	d002      	beq.n	8026006 <RBuf_Init+0x1e>
 8026000:	687b      	ldr	r3, [r7, #4]
 8026002:	2b00      	cmp	r3, #0
 8026004:	d101      	bne.n	802600a <RBuf_Init+0x22>
    {
        return 0;
 8026006:	2300      	movs	r3, #0
 8026008:	e00b      	b.n	8026022 <RBuf_Init+0x3a>
    }

    BUF_MEMSET((void*)buffer, 0x00, sizeof(*buffer));
 802600a:	2201      	movs	r2, #1
 802600c:	2100      	movs	r1, #0
 802600e:	68b8      	ldr	r0, [r7, #8]
 8026010:	f00a fad0 	bl	80305b4 <memset>

    pRBuf->size = size;
 8026014:	68fb      	ldr	r3, [r7, #12]
 8026016:	687a      	ldr	r2, [r7, #4]
 8026018:	605a      	str	r2, [r3, #4]
    pRBuf->buff = buffer;
 802601a:	68fb      	ldr	r3, [r7, #12]
 802601c:	68ba      	ldr	r2, [r7, #8]
 802601e:	601a      	str	r2, [r3, #0]

    return 1;
 8026020:	2301      	movs	r3, #1
}
 8026022:	4618      	mov	r0, r3
 8026024:	3710      	adds	r7, #16
 8026026:	46bd      	mov	sp, r7
 8026028:	bd80      	pop	{r7, pc}

0802602a <RBuf_Write>:
 *  btw : 기록할 데이터 크기(Bytes of write)
 *
 *  return : 기록한 데이터 크기, btw 보다 작으면 링버퍼에 공간이 없음을 의미
 */
size_t RBuf_Write(RBUF_T* pRBuf, const void* data, size_t btw)
{
 802602a:	b580      	push	{r7, lr}
 802602c:	b088      	sub	sp, #32
 802602e:	af00      	add	r7, sp, #0
 8026030:	60f8      	str	r0, [r7, #12]
 8026032:	60b9      	str	r1, [r7, #8]
 8026034:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    volatile size_t buff_w_ptr;
    const uint8_t* d = data;
 8026036:	68bb      	ldr	r3, [r7, #8]
 8026038:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(pRBuf) || data == NULL || btw == 0)
 802603a:	68fb      	ldr	r3, [r7, #12]
 802603c:	2b00      	cmp	r3, #0
 802603e:	d00d      	beq.n	802605c <RBuf_Write+0x32>
 8026040:	68fb      	ldr	r3, [r7, #12]
 8026042:	681b      	ldr	r3, [r3, #0]
 8026044:	2b00      	cmp	r3, #0
 8026046:	d009      	beq.n	802605c <RBuf_Write+0x32>
 8026048:	68fb      	ldr	r3, [r7, #12]
 802604a:	685b      	ldr	r3, [r3, #4]
 802604c:	2b00      	cmp	r3, #0
 802604e:	d005      	beq.n	802605c <RBuf_Write+0x32>
 8026050:	68bb      	ldr	r3, [r7, #8]
 8026052:	2b00      	cmp	r3, #0
 8026054:	d002      	beq.n	802605c <RBuf_Write+0x32>
 8026056:	687b      	ldr	r3, [r7, #4]
 8026058:	2b00      	cmp	r3, #0
 802605a:	d101      	bne.n	8026060 <RBuf_Write+0x36>
    {
        return 0;
 802605c:	2300      	movs	r3, #0
 802605e:	e04b      	b.n	80260f8 <RBuf_Write+0xce>
    }

    /* Calculate maximum number of bytes available to write */
    free = RBuf_Get_Free(pRBuf);
 8026060:	68f8      	ldr	r0, [r7, #12]
 8026062:	f000 f8b8 	bl	80261d6 <RBuf_Get_Free>
 8026066:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8026068:	687a      	ldr	r2, [r7, #4]
 802606a:	69bb      	ldr	r3, [r7, #24]
 802606c:	4293      	cmp	r3, r2
 802606e:	bf28      	it	cs
 8026070:	4613      	movcs	r3, r2
 8026072:	607b      	str	r3, [r7, #4]
    if (btw == 0)
 8026074:	687b      	ldr	r3, [r7, #4]
 8026076:	2b00      	cmp	r3, #0
 8026078:	d101      	bne.n	802607e <RBuf_Write+0x54>
    {
        return 0;
 802607a:	2300      	movs	r3, #0
 802607c:	e03c      	b.n	80260f8 <RBuf_Write+0xce>
    }

    /* Step 1: Write data to linear part of buffer */
    buff_w_ptr = pRBuf->w;
 802607e:	68fb      	ldr	r3, [r7, #12]
 8026080:	68db      	ldr	r3, [r3, #12]
 8026082:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(pRBuf->size - buff_w_ptr, btw);
 8026084:	68fb      	ldr	r3, [r7, #12]
 8026086:	685a      	ldr	r2, [r3, #4]
 8026088:	693b      	ldr	r3, [r7, #16]
 802608a:	1ad3      	subs	r3, r2, r3
 802608c:	687a      	ldr	r2, [r7, #4]
 802608e:	429a      	cmp	r2, r3
 8026090:	d904      	bls.n	802609c <RBuf_Write+0x72>
 8026092:	68fb      	ldr	r3, [r7, #12]
 8026094:	685a      	ldr	r2, [r3, #4]
 8026096:	693b      	ldr	r3, [r7, #16]
 8026098:	1ad3      	subs	r3, r2, r3
 802609a:	e000      	b.n	802609e <RBuf_Write+0x74>
 802609c:	687b      	ldr	r3, [r7, #4]
 802609e:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&pRBuf->buff[buff_w_ptr], d, tocopy);
 80260a0:	68fb      	ldr	r3, [r7, #12]
 80260a2:	681a      	ldr	r2, [r3, #0]
 80260a4:	693b      	ldr	r3, [r7, #16]
 80260a6:	4413      	add	r3, r2
 80260a8:	697a      	ldr	r2, [r7, #20]
 80260aa:	69f9      	ldr	r1, [r7, #28]
 80260ac:	4618      	mov	r0, r3
 80260ae:	f00a fa73 	bl	8030598 <memcpy>
    buff_w_ptr += tocopy;
 80260b2:	693a      	ldr	r2, [r7, #16]
 80260b4:	697b      	ldr	r3, [r7, #20]
 80260b6:	4413      	add	r3, r2
 80260b8:	613b      	str	r3, [r7, #16]
    btw -= tocopy;
 80260ba:	687a      	ldr	r2, [r7, #4]
 80260bc:	697b      	ldr	r3, [r7, #20]
 80260be:	1ad3      	subs	r3, r2, r3
 80260c0:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0)
 80260c2:	687b      	ldr	r3, [r7, #4]
 80260c4:	2b00      	cmp	r3, #0
 80260c6:	d00a      	beq.n	80260de <RBuf_Write+0xb4>
    {
        BUF_MEMCPY(pRBuf->buff, &d[tocopy], btw);
 80260c8:	68fb      	ldr	r3, [r7, #12]
 80260ca:	6818      	ldr	r0, [r3, #0]
 80260cc:	69fa      	ldr	r2, [r7, #28]
 80260ce:	697b      	ldr	r3, [r7, #20]
 80260d0:	4413      	add	r3, r2
 80260d2:	687a      	ldr	r2, [r7, #4]
 80260d4:	4619      	mov	r1, r3
 80260d6:	f00a fa5f 	bl	8030598 <memcpy>
        buff_w_ptr = btw;
 80260da:	687b      	ldr	r3, [r7, #4]
 80260dc:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= pRBuf->size)
 80260de:	68fb      	ldr	r3, [r7, #12]
 80260e0:	685a      	ldr	r2, [r3, #4]
 80260e2:	693b      	ldr	r3, [r7, #16]
 80260e4:	429a      	cmp	r2, r3
 80260e6:	d801      	bhi.n	80260ec <RBuf_Write+0xc2>
    {
        buff_w_ptr = 0;
 80260e8:	2300      	movs	r3, #0
 80260ea:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    pRBuf->w = buff_w_ptr;
 80260ec:	693a      	ldr	r2, [r7, #16]
 80260ee:	68fb      	ldr	r3, [r7, #12]
 80260f0:	60da      	str	r2, [r3, #12]

    return tocopy + btw;
 80260f2:	697a      	ldr	r2, [r7, #20]
 80260f4:	687b      	ldr	r3, [r7, #4]
 80260f6:	4413      	add	r3, r2
}
 80260f8:	4618      	mov	r0, r3
 80260fa:	3720      	adds	r7, #32
 80260fc:	46bd      	mov	sp, r7
 80260fe:	bd80      	pop	{r7, pc}

08026100 <RBuf_Read>:
 *  btr	 : 읽을 데이터 크기(Bytes of read)
 *
 *  return : 실제 읽어온 데이터 크기
 */
size_t RBuf_Read(RBUF_T* pRBuf, void* data, size_t btr)
{
 8026100:	b580      	push	{r7, lr}
 8026102:	b088      	sub	sp, #32
 8026104:	af00      	add	r7, sp, #0
 8026106:	60f8      	str	r0, [r7, #12]
 8026108:	60b9      	str	r1, [r7, #8]
 802610a:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    volatile size_t buff_r_ptr;
    uint8_t* d = data;
 802610c:	68bb      	ldr	r3, [r7, #8]
 802610e:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(pRBuf) || data == NULL || btr == 0)
 8026110:	68fb      	ldr	r3, [r7, #12]
 8026112:	2b00      	cmp	r3, #0
 8026114:	d00d      	beq.n	8026132 <RBuf_Read+0x32>
 8026116:	68fb      	ldr	r3, [r7, #12]
 8026118:	681b      	ldr	r3, [r3, #0]
 802611a:	2b00      	cmp	r3, #0
 802611c:	d009      	beq.n	8026132 <RBuf_Read+0x32>
 802611e:	68fb      	ldr	r3, [r7, #12]
 8026120:	685b      	ldr	r3, [r3, #4]
 8026122:	2b00      	cmp	r3, #0
 8026124:	d005      	beq.n	8026132 <RBuf_Read+0x32>
 8026126:	68bb      	ldr	r3, [r7, #8]
 8026128:	2b00      	cmp	r3, #0
 802612a:	d002      	beq.n	8026132 <RBuf_Read+0x32>
 802612c:	687b      	ldr	r3, [r7, #4]
 802612e:	2b00      	cmp	r3, #0
 8026130:	d101      	bne.n	8026136 <RBuf_Read+0x36>
    {
        return 0;
 8026132:	2300      	movs	r3, #0
 8026134:	e04b      	b.n	80261ce <RBuf_Read+0xce>
    }

    /* Calculate maximum number of bytes available to read */
    full = RBuf_Get_Full(pRBuf);
 8026136:	68f8      	ldr	r0, [r7, #12]
 8026138:	f000 f884 	bl	8026244 <RBuf_Get_Full>
 802613c:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 802613e:	687a      	ldr	r2, [r7, #4]
 8026140:	69bb      	ldr	r3, [r7, #24]
 8026142:	4293      	cmp	r3, r2
 8026144:	bf28      	it	cs
 8026146:	4613      	movcs	r3, r2
 8026148:	607b      	str	r3, [r7, #4]
    if (btr == 0)
 802614a:	687b      	ldr	r3, [r7, #4]
 802614c:	2b00      	cmp	r3, #0
 802614e:	d101      	bne.n	8026154 <RBuf_Read+0x54>
    {
        return 0;
 8026150:	2300      	movs	r3, #0
 8026152:	e03c      	b.n	80261ce <RBuf_Read+0xce>
    }

    /* Step 1: Read data from linear part of buffer */
    buff_r_ptr = pRBuf->r;
 8026154:	68fb      	ldr	r3, [r7, #12]
 8026156:	689b      	ldr	r3, [r3, #8]
 8026158:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(pRBuf->size - buff_r_ptr, btr);
 802615a:	68fb      	ldr	r3, [r7, #12]
 802615c:	685a      	ldr	r2, [r3, #4]
 802615e:	693b      	ldr	r3, [r7, #16]
 8026160:	1ad3      	subs	r3, r2, r3
 8026162:	687a      	ldr	r2, [r7, #4]
 8026164:	429a      	cmp	r2, r3
 8026166:	d904      	bls.n	8026172 <RBuf_Read+0x72>
 8026168:	68fb      	ldr	r3, [r7, #12]
 802616a:	685a      	ldr	r2, [r3, #4]
 802616c:	693b      	ldr	r3, [r7, #16]
 802616e:	1ad3      	subs	r3, r2, r3
 8026170:	e000      	b.n	8026174 <RBuf_Read+0x74>
 8026172:	687b      	ldr	r3, [r7, #4]
 8026174:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &pRBuf->buff[buff_r_ptr], tocopy);
 8026176:	68fb      	ldr	r3, [r7, #12]
 8026178:	681a      	ldr	r2, [r3, #0]
 802617a:	693b      	ldr	r3, [r7, #16]
 802617c:	4413      	add	r3, r2
 802617e:	697a      	ldr	r2, [r7, #20]
 8026180:	4619      	mov	r1, r3
 8026182:	69f8      	ldr	r0, [r7, #28]
 8026184:	f00a fa08 	bl	8030598 <memcpy>
    buff_r_ptr += tocopy;
 8026188:	693a      	ldr	r2, [r7, #16]
 802618a:	697b      	ldr	r3, [r7, #20]
 802618c:	4413      	add	r3, r2
 802618e:	613b      	str	r3, [r7, #16]
    btr -= tocopy;
 8026190:	687a      	ldr	r2, [r7, #4]
 8026192:	697b      	ldr	r3, [r7, #20]
 8026194:	1ad3      	subs	r3, r2, r3
 8026196:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0)
 8026198:	687b      	ldr	r3, [r7, #4]
 802619a:	2b00      	cmp	r3, #0
 802619c:	d00a      	beq.n	80261b4 <RBuf_Read+0xb4>
    {
        BUF_MEMCPY(&d[tocopy], pRBuf->buff, btr);
 802619e:	69fa      	ldr	r2, [r7, #28]
 80261a0:	697b      	ldr	r3, [r7, #20]
 80261a2:	18d0      	adds	r0, r2, r3
 80261a4:	68fb      	ldr	r3, [r7, #12]
 80261a6:	681b      	ldr	r3, [r3, #0]
 80261a8:	687a      	ldr	r2, [r7, #4]
 80261aa:	4619      	mov	r1, r3
 80261ac:	f00a f9f4 	bl	8030598 <memcpy>
        buff_r_ptr = btr;
 80261b0:	687b      	ldr	r3, [r7, #4]
 80261b2:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= pRBuf->size)
 80261b4:	68fb      	ldr	r3, [r7, #12]
 80261b6:	685a      	ldr	r2, [r3, #4]
 80261b8:	693b      	ldr	r3, [r7, #16]
 80261ba:	429a      	cmp	r2, r3
 80261bc:	d801      	bhi.n	80261c2 <RBuf_Read+0xc2>
    {
        buff_r_ptr = 0;
 80261be:	2300      	movs	r3, #0
 80261c0:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    pRBuf->r = buff_r_ptr;
 80261c2:	693a      	ldr	r2, [r7, #16]
 80261c4:	68fb      	ldr	r3, [r7, #12]
 80261c6:	609a      	str	r2, [r3, #8]

    return tocopy + btr;
 80261c8:	697a      	ldr	r2, [r7, #20]
 80261ca:	687b      	ldr	r3, [r7, #4]
 80261cc:	4413      	add	r3, r2
}
 80261ce:	4618      	mov	r0, r3
 80261d0:	3720      	adds	r7, #32
 80261d2:	46bd      	mov	sp, r7
 80261d4:	bd80      	pop	{r7, pc}

080261d6 <RBuf_Get_Free>:

/**
 * 	링버퍼의 기록 가용 크기를 리턴한다.
 */
size_t RBuf_Get_Free(RBUF_T* pRBuf)
{
 80261d6:	b480      	push	{r7}
 80261d8:	b087      	sub	sp, #28
 80261da:	af00      	add	r7, sp, #0
 80261dc:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(pRBuf))
 80261de:	687b      	ldr	r3, [r7, #4]
 80261e0:	2b00      	cmp	r3, #0
 80261e2:	d007      	beq.n	80261f4 <RBuf_Get_Free+0x1e>
 80261e4:	687b      	ldr	r3, [r7, #4]
 80261e6:	681b      	ldr	r3, [r3, #0]
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	d003      	beq.n	80261f4 <RBuf_Get_Free+0x1e>
 80261ec:	687b      	ldr	r3, [r7, #4]
 80261ee:	685b      	ldr	r3, [r3, #4]
 80261f0:	2b00      	cmp	r3, #0
 80261f2:	d101      	bne.n	80261f8 <RBuf_Get_Free+0x22>
    {
        return 0;
 80261f4:	2300      	movs	r3, #0
 80261f6:	e01f      	b.n	8026238 <RBuf_Get_Free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = pRBuf->w;
 80261f8:	687b      	ldr	r3, [r7, #4]
 80261fa:	68db      	ldr	r3, [r3, #12]
 80261fc:	613b      	str	r3, [r7, #16]
    r = pRBuf->r;
 80261fe:	687b      	ldr	r3, [r7, #4]
 8026200:	689b      	ldr	r3, [r3, #8]
 8026202:	60fb      	str	r3, [r7, #12]
    if (w == r)		// empty
 8026204:	693a      	ldr	r2, [r7, #16]
 8026206:	68fb      	ldr	r3, [r7, #12]
 8026208:	429a      	cmp	r2, r3
 802620a:	d103      	bne.n	8026214 <RBuf_Get_Free+0x3e>
    {
        size = pRBuf->size;
 802620c:	687b      	ldr	r3, [r7, #4]
 802620e:	685b      	ldr	r3, [r3, #4]
 8026210:	617b      	str	r3, [r7, #20]
 8026212:	e00f      	b.n	8026234 <RBuf_Get_Free+0x5e>
    }
    else if (r > w)
 8026214:	68fa      	ldr	r2, [r7, #12]
 8026216:	693b      	ldr	r3, [r7, #16]
 8026218:	429a      	cmp	r2, r3
 802621a:	d904      	bls.n	8026226 <RBuf_Get_Free+0x50>
    {
        size = r - w;
 802621c:	68fa      	ldr	r2, [r7, #12]
 802621e:	693b      	ldr	r3, [r7, #16]
 8026220:	1ad3      	subs	r3, r2, r3
 8026222:	617b      	str	r3, [r7, #20]
 8026224:	e006      	b.n	8026234 <RBuf_Get_Free+0x5e>
    }
    else
    {
        size = pRBuf->size - (w - r);
 8026226:	687b      	ldr	r3, [r7, #4]
 8026228:	685a      	ldr	r2, [r3, #4]
 802622a:	68f9      	ldr	r1, [r7, #12]
 802622c:	693b      	ldr	r3, [r7, #16]
 802622e:	1acb      	subs	r3, r1, r3
 8026230:	4413      	add	r3, r2
 8026232:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8026234:	697b      	ldr	r3, [r7, #20]
 8026236:	3b01      	subs	r3, #1
}
 8026238:	4618      	mov	r0, r3
 802623a:	371c      	adds	r7, #28
 802623c:	46bd      	mov	sp, r7
 802623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026242:	4770      	bx	lr

08026244 <RBuf_Get_Full>:

/**
 * 	링버퍼에 저장되어 있는 데이터 크기를 리턴(읽기용)
 */
size_t RBuf_Get_Full(RBUF_T* pRBuf)
{
 8026244:	b480      	push	{r7}
 8026246:	b087      	sub	sp, #28
 8026248:	af00      	add	r7, sp, #0
 802624a:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(pRBuf))
 802624c:	687b      	ldr	r3, [r7, #4]
 802624e:	2b00      	cmp	r3, #0
 8026250:	d007      	beq.n	8026262 <RBuf_Get_Full+0x1e>
 8026252:	687b      	ldr	r3, [r7, #4]
 8026254:	681b      	ldr	r3, [r3, #0]
 8026256:	2b00      	cmp	r3, #0
 8026258:	d003      	beq.n	8026262 <RBuf_Get_Full+0x1e>
 802625a:	687b      	ldr	r3, [r7, #4]
 802625c:	685b      	ldr	r3, [r3, #4]
 802625e:	2b00      	cmp	r3, #0
 8026260:	d101      	bne.n	8026266 <RBuf_Get_Full+0x22>
    {
        return 0;
 8026262:	2300      	movs	r3, #0
 8026264:	e01d      	b.n	80262a2 <RBuf_Get_Full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = pRBuf->w;
 8026266:	687b      	ldr	r3, [r7, #4]
 8026268:	68db      	ldr	r3, [r3, #12]
 802626a:	613b      	str	r3, [r7, #16]
    r = pRBuf->r;
 802626c:	687b      	ldr	r3, [r7, #4]
 802626e:	689b      	ldr	r3, [r3, #8]
 8026270:	60fb      	str	r3, [r7, #12]
    if (w == r)		// buffer is empty
 8026272:	693a      	ldr	r2, [r7, #16]
 8026274:	68fb      	ldr	r3, [r7, #12]
 8026276:	429a      	cmp	r2, r3
 8026278:	d102      	bne.n	8026280 <RBuf_Get_Full+0x3c>
    {
        size = 0;
 802627a:	2300      	movs	r3, #0
 802627c:	617b      	str	r3, [r7, #20]
 802627e:	e00f      	b.n	80262a0 <RBuf_Get_Full+0x5c>
    }
    else if (w > r)
 8026280:	693a      	ldr	r2, [r7, #16]
 8026282:	68fb      	ldr	r3, [r7, #12]
 8026284:	429a      	cmp	r2, r3
 8026286:	d904      	bls.n	8026292 <RBuf_Get_Full+0x4e>
    {
        size = w - r;
 8026288:	693a      	ldr	r2, [r7, #16]
 802628a:	68fb      	ldr	r3, [r7, #12]
 802628c:	1ad3      	subs	r3, r2, r3
 802628e:	617b      	str	r3, [r7, #20]
 8026290:	e006      	b.n	80262a0 <RBuf_Get_Full+0x5c>
    }
    else
    {
        size = pRBuf->size - (r - w);
 8026292:	687b      	ldr	r3, [r7, #4]
 8026294:	685a      	ldr	r2, [r3, #4]
 8026296:	6939      	ldr	r1, [r7, #16]
 8026298:	68fb      	ldr	r3, [r7, #12]
 802629a:	1acb      	subs	r3, r1, r3
 802629c:	4413      	add	r3, r2
 802629e:	617b      	str	r3, [r7, #20]
    }
    return size;
 80262a0:	697b      	ldr	r3, [r7, #20]
}
 80262a2:	4618      	mov	r0, r3
 80262a4:	371c      	adds	r7, #28
 80262a6:	46bd      	mov	sp, r7
 80262a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262ac:	4770      	bx	lr
	...

080262b0 <SF_RW_Byte>:
BOOL g_fDumpSF = TRUE;



uint8_t SF_RW_Byte(BYTE data)
{
 80262b0:	b580      	push	{r7, lr}
 80262b2:	b086      	sub	sp, #24
 80262b4:	af02      	add	r7, sp, #8
 80262b6:	4603      	mov	r3, r0
 80262b8:	71fb      	strb	r3, [r7, #7]
    BYTE read;
    HAL_SPI_TransmitReceive(SF_HANDLE, &data, &read, 1, 100);
 80262ba:	f107 020f 	add.w	r2, r7, #15
 80262be:	1df9      	adds	r1, r7, #7
 80262c0:	2364      	movs	r3, #100	; 0x64
 80262c2:	9300      	str	r3, [sp, #0]
 80262c4:	2301      	movs	r3, #1
 80262c6:	4804      	ldr	r0, [pc, #16]	; (80262d8 <SF_RW_Byte+0x28>)
 80262c8:	f007 fdaa 	bl	802de20 <HAL_SPI_TransmitReceive>
    return read;
 80262cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80262ce:	4618      	mov	r0, r3
 80262d0:	3710      	adds	r7, #16
 80262d2:	46bd      	mov	sp, r7
 80262d4:	bd80      	pop	{r7, pc}
 80262d6:	bf00      	nop
 80262d8:	240019d4 	.word	0x240019d4

080262dc <SF_CommandAndReadN>:


void SF_CommandAndReadN(BYTE cmd, BYTE* buffer, int n)
{
 80262dc:	b590      	push	{r4, r7, lr}
 80262de:	b087      	sub	sp, #28
 80262e0:	af00      	add	r7, sp, #0
 80262e2:	4603      	mov	r3, r0
 80262e4:	60b9      	str	r1, [r7, #8]
 80262e6:	607a      	str	r2, [r7, #4]
 80262e8:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    SF_ENABLE();
 80262ea:	2200      	movs	r2, #0
 80262ec:	2110      	movs	r1, #16
 80262ee:	4811      	ldr	r0, [pc, #68]	; (8026334 <SF_CommandAndReadN+0x58>)
 80262f0:	f004 fde2 	bl	802aeb8 <HAL_GPIO_WritePin>

    SF_RW_Byte(cmd);
 80262f4:	7bfb      	ldrb	r3, [r7, #15]
 80262f6:	4618      	mov	r0, r3
 80262f8:	f7ff ffda 	bl	80262b0 <SF_RW_Byte>
    for (i = 0; i < n; i++)
 80262fc:	2300      	movs	r3, #0
 80262fe:	75fb      	strb	r3, [r7, #23]
 8026300:	e00a      	b.n	8026318 <SF_CommandAndReadN+0x3c>
        buffer[i] = SF_RW_Byte(AT25DF_DUMMY_BYTE);
 8026302:	7dfb      	ldrb	r3, [r7, #23]
 8026304:	68ba      	ldr	r2, [r7, #8]
 8026306:	18d4      	adds	r4, r2, r3
 8026308:	2000      	movs	r0, #0
 802630a:	f7ff ffd1 	bl	80262b0 <SF_RW_Byte>
 802630e:	4603      	mov	r3, r0
 8026310:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < n; i++)
 8026312:	7dfb      	ldrb	r3, [r7, #23]
 8026314:	3301      	adds	r3, #1
 8026316:	75fb      	strb	r3, [r7, #23]
 8026318:	7dfb      	ldrb	r3, [r7, #23]
 802631a:	687a      	ldr	r2, [r7, #4]
 802631c:	429a      	cmp	r2, r3
 802631e:	dcf0      	bgt.n	8026302 <SF_CommandAndReadN+0x26>

    SF_DISABLE();
 8026320:	2201      	movs	r2, #1
 8026322:	2110      	movs	r1, #16
 8026324:	4803      	ldr	r0, [pc, #12]	; (8026334 <SF_CommandAndReadN+0x58>)
 8026326:	f004 fdc7 	bl	802aeb8 <HAL_GPIO_WritePin>
}
 802632a:	bf00      	nop
 802632c:	371c      	adds	r7, #28
 802632e:	46bd      	mov	sp, r7
 8026330:	bd90      	pop	{r4, r7, pc}
 8026332:	bf00      	nop
 8026334:	58020000 	.word	0x58020000

08026338 <SpiFlash_WriteEnable>:
    SF_DISABLE();
}


void SpiFlash_WriteEnable(void)
{
 8026338:	b580      	push	{r7, lr}
 802633a:	af00      	add	r7, sp, #0
    SF_ENABLE();
 802633c:	2200      	movs	r2, #0
 802633e:	2110      	movs	r1, #16
 8026340:	4806      	ldr	r0, [pc, #24]	; (802635c <SpiFlash_WriteEnable+0x24>)
 8026342:	f004 fdb9 	bl	802aeb8 <HAL_GPIO_WritePin>
    SF_RW_Byte(AT25DF_WRITE_ENABLE);
 8026346:	2006      	movs	r0, #6
 8026348:	f7ff ffb2 	bl	80262b0 <SF_RW_Byte>
    SF_DISABLE();
 802634c:	2201      	movs	r2, #1
 802634e:	2110      	movs	r1, #16
 8026350:	4802      	ldr	r0, [pc, #8]	; (802635c <SpiFlash_WriteEnable+0x24>)
 8026352:	f004 fdb1 	bl	802aeb8 <HAL_GPIO_WritePin>
}
 8026356:	bf00      	nop
 8026358:	bd80      	pop	{r7, pc}
 802635a:	bf00      	nop
 802635c:	58020000 	.word	0x58020000

08026360 <SpiFlash_GlobalUnprotectSector>:
    SF_DISABLE();
}


void SpiFlash_GlobalUnprotectSector(void)
{
 8026360:	b580      	push	{r7, lr}
 8026362:	af00      	add	r7, sp, #0
    SF_ENABLE();
 8026364:	2200      	movs	r2, #0
 8026366:	2110      	movs	r1, #16
 8026368:	4807      	ldr	r0, [pc, #28]	; (8026388 <SpiFlash_GlobalUnprotectSector+0x28>)
 802636a:	f004 fda5 	bl	802aeb8 <HAL_GPIO_WritePin>

    SF_RW_Byte(AT25DF_WRITE_STATUS_BYTE1);
 802636e:	2001      	movs	r0, #1
 8026370:	f7ff ff9e 	bl	80262b0 <SF_RW_Byte>
    SF_RW_Byte(0x00);
 8026374:	2000      	movs	r0, #0
 8026376:	f7ff ff9b 	bl	80262b0 <SF_RW_Byte>

    SF_DISABLE();
 802637a:	2201      	movs	r2, #1
 802637c:	2110      	movs	r1, #16
 802637e:	4802      	ldr	r0, [pc, #8]	; (8026388 <SpiFlash_GlobalUnprotectSector+0x28>)
 8026380:	f004 fd9a 	bl	802aeb8 <HAL_GPIO_WritePin>
}
 8026384:	bf00      	nop
 8026386:	bd80      	pop	{r7, pc}
 8026388:	58020000 	.word	0x58020000

0802638c <SpiFlash_Ready>:
    return ((status2 << 8) | status1);
}


BOOL SpiFlash_Ready(DWORD dwTimeout)
{
 802638c:	b580      	push	{r7, lr}
 802638e:	b086      	sub	sp, #24
 8026390:	af00      	add	r7, sp, #0
 8026392:	6078      	str	r0, [r7, #4]
    BOOL  fTimeout = TRUE;
 8026394:	2301      	movs	r3, #1
 8026396:	617b      	str	r3, [r7, #20]
    DWORD   dwCurTick = bsp_GetTickCount();
 8026398:	f000 f8e2 	bl	8026560 <bsp_GetTickCount>
 802639c:	4603      	mov	r3, r0
 802639e:	60fb      	str	r3, [r7, #12]
    BYTE    status;

    SF_ENABLE();
 80263a0:	2200      	movs	r2, #0
 80263a2:	2110      	movs	r1, #16
 80263a4:	4815      	ldr	r0, [pc, #84]	; (80263fc <SpiFlash_Ready+0x70>)
 80263a6:	f004 fd87 	bl	802aeb8 <HAL_GPIO_WritePin>
    SF_RW_Byte(AT25DF_READ_STATUS);
 80263aa:	2005      	movs	r0, #5
 80263ac:	f7ff ff80 	bl	80262b0 <SF_RW_Byte>
    do
    {
        status = SF_RW_Byte(0xFF);
 80263b0:	20ff      	movs	r0, #255	; 0xff
 80263b2:	f7ff ff7d 	bl	80262b0 <SF_RW_Byte>
 80263b6:	4603      	mov	r3, r0
 80263b8:	74fb      	strb	r3, [r7, #19]
        if (!(status & 0x01))   // device is ready
 80263ba:	7cfb      	ldrb	r3, [r7, #19]
 80263bc:	f003 0301 	and.w	r3, r3, #1
 80263c0:	2b00      	cmp	r3, #0
 80263c2:	d102      	bne.n	80263ca <SpiFlash_Ready+0x3e>
        {
            // printf("SPI Flash : Status[%02X]\n", status);
            fTimeout = FALSE;
 80263c4:	2300      	movs	r3, #0
 80263c6:	617b      	str	r3, [r7, #20]
            break;
 80263c8:	e008      	b.n	80263dc <SpiFlash_Ready+0x50>
        }

    } while (!IsTimeoutMs(&dwCurTick, dwTimeout));
 80263ca:	f107 030c 	add.w	r3, r7, #12
 80263ce:	6879      	ldr	r1, [r7, #4]
 80263d0:	4618      	mov	r0, r3
 80263d2:	f000 f97d 	bl	80266d0 <IsTimeoutMs>
 80263d6:	4603      	mov	r3, r0
 80263d8:	2b00      	cmp	r3, #0
 80263da:	d0e9      	beq.n	80263b0 <SpiFlash_Ready+0x24>
    SF_DISABLE();
 80263dc:	2201      	movs	r2, #1
 80263de:	2110      	movs	r1, #16
 80263e0:	4806      	ldr	r0, [pc, #24]	; (80263fc <SpiFlash_Ready+0x70>)
 80263e2:	f004 fd69 	bl	802aeb8 <HAL_GPIO_WritePin>

    return (fTimeout == FALSE);
 80263e6:	697b      	ldr	r3, [r7, #20]
 80263e8:	2b00      	cmp	r3, #0
 80263ea:	bf0c      	ite	eq
 80263ec:	2301      	moveq	r3, #1
 80263ee:	2300      	movne	r3, #0
 80263f0:	b2db      	uxtb	r3, r3
}
 80263f2:	4618      	mov	r0, r3
 80263f4:	3718      	adds	r7, #24
 80263f6:	46bd      	mov	sp, r7
 80263f8:	bd80      	pop	{r7, pc}
 80263fa:	bf00      	nop
 80263fc:	58020000 	.word	0x58020000

08026400 <SpiFlash_ReadInfo>:
}



DWORD SpiFlash_ReadInfo(void)
{
 8026400:	b580      	push	{r7, lr}
 8026402:	b082      	sub	sp, #8
 8026404:	af00      	add	r7, sp, #0
    BYTE    bInfo[4];
    DWORD   retInfo;

    SF_CommandAndReadN(AT25DF_READ_INFO, bInfo, 3);
 8026406:	463b      	mov	r3, r7
 8026408:	2203      	movs	r2, #3
 802640a:	4619      	mov	r1, r3
 802640c:	209f      	movs	r0, #159	; 0x9f
 802640e:	f7ff ff65 	bl	80262dc <SF_CommandAndReadN>

    retInfo = ((bInfo[0] << 16) | (bInfo[1] << 8) | bInfo[2]);
 8026412:	783b      	ldrb	r3, [r7, #0]
 8026414:	041a      	lsls	r2, r3, #16
 8026416:	787b      	ldrb	r3, [r7, #1]
 8026418:	021b      	lsls	r3, r3, #8
 802641a:	4313      	orrs	r3, r2
 802641c:	78ba      	ldrb	r2, [r7, #2]
 802641e:	4313      	orrs	r3, r2
 8026420:	607b      	str	r3, [r7, #4]

    printf("SpiFlash Info %#lx\n", retInfo);
 8026422:	6879      	ldr	r1, [r7, #4]
 8026424:	4805      	ldr	r0, [pc, #20]	; (802643c <SpiFlash_ReadInfo+0x3c>)
 8026426:	f00a f9ad 	bl	8030784 <iprintf>

    g_FlashId = retInfo;
 802642a:	4a05      	ldr	r2, [pc, #20]	; (8026440 <SpiFlash_ReadInfo+0x40>)
 802642c:	687b      	ldr	r3, [r7, #4]
 802642e:	6013      	str	r3, [r2, #0]

    return (retInfo);
 8026430:	687b      	ldr	r3, [r7, #4]
}
 8026432:	4618      	mov	r0, r3
 8026434:	3708      	adds	r7, #8
 8026436:	46bd      	mov	sp, r7
 8026438:	bd80      	pop	{r7, pc}
 802643a:	bf00      	nop
 802643c:	08032830 	.word	0x08032830
 8026440:	240019a4 	.word	0x240019a4

08026444 <SpiFlash_Init>:


BOOL SpiFlash_Init(void)
{
 8026444:	b580      	push	{r7, lr}
 8026446:	b082      	sub	sp, #8
 8026448:	af00      	add	r7, sp, #0
    DWORD info;

    // SpiFlash_ResetAndResume();
    SpiFlash_WriteEnable();
 802644a:	f7ff ff75 	bl	8026338 <SpiFlash_WriteEnable>
    SpiFlash_GlobalUnprotectSector();
 802644e:	f7ff ff87 	bl	8026360 <SpiFlash_GlobalUnprotectSector>
    SpiFlash_Ready(5);
 8026452:	2005      	movs	r0, #5
 8026454:	f7ff ff9a 	bl	802638c <SpiFlash_Ready>

    info = SpiFlash_ReadInfo();
 8026458:	f7ff ffd2 	bl	8026400 <SpiFlash_ReadInfo>
 802645c:	6078      	str	r0, [r7, #4]
    if (info == ID_AT25DF641)
 802645e:	687b      	ldr	r3, [r7, #4]
 8026460:	4a07      	ldr	r2, [pc, #28]	; (8026480 <SpiFlash_Init+0x3c>)
 8026462:	4293      	cmp	r3, r2
 8026464:	d104      	bne.n	8026470 <SpiFlash_Init+0x2c>
    {
        printf("SPI Flash is normal\n");
 8026466:	4807      	ldr	r0, [pc, #28]	; (8026484 <SpiFlash_Init+0x40>)
 8026468:	f00a fa28 	bl	80308bc <puts>
        return (TRUE);
 802646c:	2301      	movs	r3, #1
 802646e:	e003      	b.n	8026478 <SpiFlash_Init+0x34>
    }
    else
    {
        printf("SPI Flash is Abnormal\n");
 8026470:	4805      	ldr	r0, [pc, #20]	; (8026488 <SpiFlash_Init+0x44>)
 8026472:	f00a fa23 	bl	80308bc <puts>
        return (FALSE);
 8026476:	2300      	movs	r3, #0
    }
}
 8026478:	4618      	mov	r0, r3
 802647a:	3708      	adds	r7, #8
 802647c:	46bd      	mov	sp, r7
 802647e:	bd80      	pop	{r7, pc}
 8026480:	001f4800 	.word	0x001f4800
 8026484:	08032844 	.word	0x08032844
 8026488:	08032858 	.word	0x08032858

0802648c <bsp_InitSpiFlash>:
    return (0);
}


BOOL bsp_InitSpiFlash(void)
{
 802648c:	b580      	push	{r7, lr}
 802648e:	af00      	add	r7, sp, #0
    SF_DISABLE();
 8026490:	2201      	movs	r2, #1
 8026492:	2110      	movs	r1, #16
 8026494:	482a      	ldr	r0, [pc, #168]	; (8026540 <bsp_InitSpiFlash+0xb4>)
 8026496:	f004 fd0f 	bl	802aeb8 <HAL_GPIO_WritePin>

    hspi1.Instance = SPI1;
 802649a:	4b2a      	ldr	r3, [pc, #168]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 802649c:	4a2a      	ldr	r2, [pc, #168]	; (8026548 <bsp_InitSpiFlash+0xbc>)
 802649e:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80264a0:	4b28      	ldr	r3, [pc, #160]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80264a6:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80264a8:	4b26      	ldr	r3, [pc, #152]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264aa:	2200      	movs	r2, #0
 80264ac:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80264ae:	4b25      	ldr	r3, [pc, #148]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264b0:	2207      	movs	r2, #7
 80264b2:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80264b4:	4b23      	ldr	r3, [pc, #140]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264b6:	2200      	movs	r2, #0
 80264b8:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80264ba:	4b22      	ldr	r3, [pc, #136]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264bc:	2200      	movs	r2, #0
 80264be:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80264c0:	4b20      	ldr	r3, [pc, #128]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80264c6:	619a      	str	r2, [r3, #24]
    // hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;     // 60Mhz
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80264c8:	4b1e      	ldr	r3, [pc, #120]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80264ce:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80264d0:	4b1c      	ldr	r3, [pc, #112]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264d2:	2200      	movs	r2, #0
 80264d4:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80264d6:	4b1b      	ldr	r3, [pc, #108]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264d8:	2200      	movs	r2, #0
 80264da:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80264dc:	4b19      	ldr	r3, [pc, #100]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264de:	2200      	movs	r2, #0
 80264e0:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 0x0;
 80264e2:	4b18      	ldr	r3, [pc, #96]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264e4:	2200      	movs	r2, #0
 80264e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80264e8:	4b16      	ldr	r3, [pc, #88]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264ea:	2200      	movs	r2, #0
 80264ec:	635a      	str	r2, [r3, #52]	; 0x34
    hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80264ee:	4b15      	ldr	r3, [pc, #84]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264f0:	2200      	movs	r2, #0
 80264f2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80264f4:	4b13      	ldr	r3, [pc, #76]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264f6:	2200      	movs	r2, #0
 80264f8:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80264fa:	4b12      	ldr	r3, [pc, #72]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 80264fc:	2200      	movs	r2, #0
 80264fe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8026500:	4b10      	ldr	r3, [pc, #64]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 8026502:	2200      	movs	r2, #0
 8026504:	645a      	str	r2, [r3, #68]	; 0x44
    hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_02CYCLE;
 8026506:	4b0f      	ldr	r3, [pc, #60]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 8026508:	2202      	movs	r2, #2
 802650a:	649a      	str	r2, [r3, #72]	; 0x48
    hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 802650c:	4b0d      	ldr	r3, [pc, #52]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 802650e:	2220      	movs	r2, #32
 8026510:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_ENABLE;
 8026512:	4b0c      	ldr	r3, [pc, #48]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 8026514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8026518:	651a      	str	r2, [r3, #80]	; 0x50
    hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 802651a:	4b0a      	ldr	r3, [pc, #40]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 802651c:	2200      	movs	r2, #0
 802651e:	655a      	str	r2, [r3, #84]	; 0x54
    hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8026520:	4b08      	ldr	r3, [pc, #32]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 8026522:	2200      	movs	r2, #0
 8026524:	659a      	str	r2, [r3, #88]	; 0x58
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8026526:	4807      	ldr	r0, [pc, #28]	; (8026544 <bsp_InitSpiFlash+0xb8>)
 8026528:	f007 fb56 	bl	802dbd8 <HAL_SPI_Init>
 802652c:	4603      	mov	r3, r0
 802652e:	2b00      	cmp	r3, #0
 8026530:	d001      	beq.n	8026536 <bsp_InitSpiFlash+0xaa>
    {
        return FALSE;
 8026532:	2300      	movs	r3, #0
 8026534:	e002      	b.n	802653c <bsp_InitSpiFlash+0xb0>
    }

    return (SpiFlash_Init());
 8026536:	f7ff ff85 	bl	8026444 <SpiFlash_Init>
 802653a:	4603      	mov	r3, r0
}
 802653c:	4618      	mov	r0, r3
 802653e:	bd80      	pop	{r7, pc}
 8026540:	58020000 	.word	0x58020000
 8026544:	240019d4 	.word	0x240019d4
 8026548:	40013000 	.word	0x40013000

0802654c <bsp_InitTimer>:
extern bool bDip_SW_Flag;

extern dword exiAddr[5];

void bsp_InitTimer(void)
{
 802654c:	b580      	push	{r7, lr}
 802654e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim7);
 8026550:	4802      	ldr	r0, [pc, #8]	; (802655c <bsp_InitTimer+0x10>)
 8026552:	f008 fa2d 	bl	802e9b0 <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start_IT(&htim1);
}
 8026556:	bf00      	nop
 8026558:	bd80      	pop	{r7, pc}
 802655a:	bf00      	nop
 802655c:	24001a5c 	.word	0x24001a5c

08026560 <bsp_GetTickCount>:

DWORD bsp_GetTickCount(void)
{
 8026560:	b480      	push	{r7}
 8026562:	af00      	add	r7, sp, #0
    return g_TickCount;
 8026564:	4b03      	ldr	r3, [pc, #12]	; (8026574 <bsp_GetTickCount+0x14>)
 8026566:	681b      	ldr	r3, [r3, #0]
}
 8026568:	4618      	mov	r0, r3
 802656a:	46bd      	mov	sp, r7
 802656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026570:	4770      	bx	lr
 8026572:	bf00      	nop
 8026574:	240019a8 	.word	0x240019a8

08026578 <bsp_TimCallback>:
**
*/
//BYTE gbDipSW, gbOldDipSW;

void bsp_TimCallback(void)
{
 8026578:	b5b0      	push	{r4, r5, r7, lr}
 802657a:	af00      	add	r7, sp, #0
    static UINT16   sCount = 0;
    static UINT32   s5Count = 0;

    g_TickCount++;
 802657c:	4b3f      	ldr	r3, [pc, #252]	; (802667c <bsp_TimCallback+0x104>)
 802657e:	681b      	ldr	r3, [r3, #0]
 8026580:	3301      	adds	r3, #1
 8026582:	4a3e      	ldr	r2, [pc, #248]	; (802667c <bsp_TimCallback+0x104>)
 8026584:	6013      	str	r3, [r2, #0]
    g_exTimeTick++;
 8026586:	4b3e      	ldr	r3, [pc, #248]	; (8026680 <bsp_TimCallback+0x108>)
 8026588:	e9d3 2300 	ldrd	r2, r3, [r3]
 802658c:	1c50      	adds	r0, r2, #1
 802658e:	f143 0100 	adc.w	r1, r3, #0
 8026592:	4b3b      	ldr	r3, [pc, #236]	; (8026680 <bsp_TimCallback+0x108>)
 8026594:	e9c3 0100 	strd	r0, r1, [r3]
    if (s_Per1msCallBack != NULL)
 8026598:	4b3a      	ldr	r3, [pc, #232]	; (8026684 <bsp_TimCallback+0x10c>)
 802659a:	681b      	ldr	r3, [r3, #0]
 802659c:	2b00      	cmp	r3, #0
 802659e:	d002      	beq.n	80265a6 <bsp_TimCallback+0x2e>
        s_Per1msCallBack();
 80265a0:	4b38      	ldr	r3, [pc, #224]	; (8026684 <bsp_TimCallback+0x10c>)
 80265a2:	681b      	ldr	r3, [r3, #0]
 80265a4:	4798      	blx	r3

    sCount++;
 80265a6:	4b38      	ldr	r3, [pc, #224]	; (8026688 <bsp_TimCallback+0x110>)
 80265a8:	881b      	ldrh	r3, [r3, #0]
 80265aa:	3301      	adds	r3, #1
 80265ac:	b29a      	uxth	r2, r3
 80265ae:	4b36      	ldr	r3, [pc, #216]	; (8026688 <bsp_TimCallback+0x110>)
 80265b0:	801a      	strh	r2, [r3, #0]
    s5Count++;
 80265b2:	4b36      	ldr	r3, [pc, #216]	; (802668c <bsp_TimCallback+0x114>)
 80265b4:	681b      	ldr	r3, [r3, #0]
 80265b6:	3301      	adds	r3, #1
 80265b8:	4a34      	ldr	r2, [pc, #208]	; (802668c <bsp_TimCallback+0x114>)
 80265ba:	6013      	str	r3, [r2, #0]

    if (sCount % 10 == 0)   // per 10ms
 80265bc:	4b32      	ldr	r3, [pc, #200]	; (8026688 <bsp_TimCallback+0x110>)
 80265be:	881a      	ldrh	r2, [r3, #0]
 80265c0:	4b33      	ldr	r3, [pc, #204]	; (8026690 <bsp_TimCallback+0x118>)
 80265c2:	fba3 1302 	umull	r1, r3, r3, r2
 80265c6:	08d9      	lsrs	r1, r3, #3
 80265c8:	460b      	mov	r3, r1
 80265ca:	009b      	lsls	r3, r3, #2
 80265cc:	440b      	add	r3, r1
 80265ce:	005b      	lsls	r3, r3, #1
 80265d0:	1ad3      	subs	r3, r2, r3
 80265d2:	b29b      	uxth	r3, r3
 80265d4:	2b00      	cmp	r3, #0
 80265d6:	d106      	bne.n	80265e6 <bsp_TimCallback+0x6e>
    {
        if (s_Per10msCallBack != NULL)
 80265d8:	4b2e      	ldr	r3, [pc, #184]	; (8026694 <bsp_TimCallback+0x11c>)
 80265da:	681b      	ldr	r3, [r3, #0]
 80265dc:	2b00      	cmp	r3, #0
 80265de:	d002      	beq.n	80265e6 <bsp_TimCallback+0x6e>
            s_Per10msCallBack();
 80265e0:	4b2c      	ldr	r3, [pc, #176]	; (8026694 <bsp_TimCallback+0x11c>)
 80265e2:	681b      	ldr	r3, [r3, #0]
 80265e4:	4798      	blx	r3
    }
    if (sCount % 100 == 0)   // per 100ms
    {
    }
    if (sCount % 500 == 0)  // per 0.5 sec : WDT & STS Led toggle
 80265e6:	4b28      	ldr	r3, [pc, #160]	; (8026688 <bsp_TimCallback+0x110>)
 80265e8:	881b      	ldrh	r3, [r3, #0]
 80265ea:	4a2b      	ldr	r2, [pc, #172]	; (8026698 <bsp_TimCallback+0x120>)
 80265ec:	fba2 1203 	umull	r1, r2, r2, r3
 80265f0:	0952      	lsrs	r2, r2, #5
 80265f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80265f6:	fb01 f202 	mul.w	r2, r1, r2
 80265fa:	1a9b      	subs	r3, r3, r2
 80265fc:	b29b      	uxth	r3, r3
 80265fe:	2b00      	cmp	r3, #0
 8026600:	d107      	bne.n	8026612 <bsp_TimCallback+0x9a>
    {
 		HAL_GPIO_TogglePin(WDT_GPIO_Port, WDT_Pin);
 8026602:	2104      	movs	r1, #4
 8026604:	4825      	ldr	r0, [pc, #148]	; (802669c <bsp_TimCallback+0x124>)
 8026606:	f004 fc70 	bl	802aeea <HAL_GPIO_TogglePin>
 		HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED1_Pin);
 802660a:	2110      	movs	r1, #16
 802660c:	4824      	ldr	r0, [pc, #144]	; (80266a0 <bsp_TimCallback+0x128>)
 802660e:	f004 fc6c 	bl	802aeea <HAL_GPIO_TogglePin>
    }
    if (sCount >= 1000)     // per 1sec
 8026612:	4b1d      	ldr	r3, [pc, #116]	; (8026688 <bsp_TimCallback+0x110>)
 8026614:	881b      	ldrh	r3, [r3, #0]
 8026616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802661a:	d323      	bcc.n	8026664 <bsp_TimCallback+0xec>
    {
        sCount = 0;
 802661c:	4b1a      	ldr	r3, [pc, #104]	; (8026688 <bsp_TimCallback+0x110>)
 802661e:	2200      	movs	r2, #0
 8026620:	801a      	strh	r2, [r3, #0]
        g_Epoch++;
 8026622:	4b20      	ldr	r3, [pc, #128]	; (80266a4 <bsp_TimCallback+0x12c>)
 8026624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026628:	1c54      	adds	r4, r2, #1
 802662a:	f143 0500 	adc.w	r5, r3, #0
 802662e:	4b1d      	ldr	r3, [pc, #116]	; (80266a4 <bsp_TimCallback+0x12c>)
 8026630:	e9c3 4500 	strd	r4, r5, [r3]
        //printf("%s\n",strmtime());
        //printf("in [0x%x]\n",inb(exiAddr[0]));
        //printf("in [0x%x][0x%x][0x%x][0x%x][0x%x]\n",inb(exiAddr[0]),inb(exiAddr[1]),inb(exiAddr[2]),inb(exiAddr[3]),inb(exiAddr[4]));

       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED1_Pin);
 8026634:	2110      	movs	r1, #16
 8026636:	481a      	ldr	r0, [pc, #104]	; (80266a0 <bsp_TimCallback+0x128>)
 8026638:	f004 fc57 	bl	802aeea <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED2_Pin);
 802663c:	2120      	movs	r1, #32
 802663e:	4818      	ldr	r0, [pc, #96]	; (80266a0 <bsp_TimCallback+0x128>)
 8026640:	f004 fc53 	bl	802aeea <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED3_Pin);
 8026644:	2140      	movs	r1, #64	; 0x40
 8026646:	4816      	ldr	r0, [pc, #88]	; (80266a0 <bsp_TimCallback+0x128>)
 8026648:	f004 fc4f 	bl	802aeea <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED4_Pin);
 802664c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8026650:	4813      	ldr	r0, [pc, #76]	; (80266a0 <bsp_TimCallback+0x128>)
 8026652:	f004 fc4a 	bl	802aeea <HAL_GPIO_TogglePin>



       //outb(WRITE00_ADR,test2);

        if (s_Per1SecCallBack != NULL)
 8026656:	4b14      	ldr	r3, [pc, #80]	; (80266a8 <bsp_TimCallback+0x130>)
 8026658:	681b      	ldr	r3, [r3, #0]
 802665a:	2b00      	cmp	r3, #0
 802665c:	d002      	beq.n	8026664 <bsp_TimCallback+0xec>
            s_Per1SecCallBack();
 802665e:	4b12      	ldr	r3, [pc, #72]	; (80266a8 <bsp_TimCallback+0x130>)
 8026660:	681b      	ldr	r3, [r3, #0]
 8026662:	4798      	blx	r3

    }

    if (s5Count >= 5000)     // per 5sec
 8026664:	4b09      	ldr	r3, [pc, #36]	; (802668c <bsp_TimCallback+0x114>)
 8026666:	681b      	ldr	r3, [r3, #0]
 8026668:	f241 3287 	movw	r2, #4999	; 0x1387
 802666c:	4293      	cmp	r3, r2
 802666e:	d902      	bls.n	8026676 <bsp_TimCallback+0xfe>
    {
    	s5Count = 0;
 8026670:	4b06      	ldr	r3, [pc, #24]	; (802668c <bsp_TimCallback+0x114>)
 8026672:	2200      	movs	r2, #0
 8026674:	601a      	str	r2, [r3, #0]

    }
}
 8026676:	bf00      	nop
 8026678:	bdb0      	pop	{r4, r5, r7, pc}
 802667a:	bf00      	nop
 802667c:	240019a8 	.word	0x240019a8
 8026680:	240019b8 	.word	0x240019b8
 8026684:	240019c0 	.word	0x240019c0
 8026688:	240019cc 	.word	0x240019cc
 802668c:	240019d0 	.word	0x240019d0
 8026690:	cccccccd 	.word	0xcccccccd
 8026694:	240019c4 	.word	0x240019c4
 8026698:	10624dd3 	.word	0x10624dd3
 802669c:	58020c00 	.word	0x58020c00
 80266a0:	58020800 	.word	0x58020800
 80266a4:	240019b0 	.word	0x240019b0
 80266a8:	240019c8 	.word	0x240019c8

080266ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80266ac:	b580      	push	{r7, lr}
 80266ae:	b082      	sub	sp, #8
 80266b0:	af00      	add	r7, sp, #0
 80266b2:	6078      	str	r0, [r7, #4]

    if (htim->Instance == htim7.Instance)
 80266b4:	687b      	ldr	r3, [r7, #4]
 80266b6:	681a      	ldr	r2, [r3, #0]
 80266b8:	4b04      	ldr	r3, [pc, #16]	; (80266cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80266ba:	681b      	ldr	r3, [r3, #0]
 80266bc:	429a      	cmp	r2, r3
 80266be:	d101      	bne.n	80266c4 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        bsp_TimCallback();
 80266c0:	f7ff ff5a 	bl	8026578 <bsp_TimCallback>
    }
}
 80266c4:	bf00      	nop
 80266c6:	3708      	adds	r7, #8
 80266c8:	46bd      	mov	sp, r7
 80266ca:	bd80      	pop	{r7, pc}
 80266cc:	24001a5c 	.word	0x24001a5c

080266d0 <IsTimeoutMs>:
    while (__HAL_TIM_GET_COUNTER(&htim1) < us);
}


BOOL IsTimeoutMs(DWORD *base, DWORD toMs)
{
 80266d0:	b580      	push	{r7, lr}
 80266d2:	b084      	sub	sp, #16
 80266d4:	af00      	add	r7, sp, #0
 80266d6:	6078      	str	r0, [r7, #4]
 80266d8:	6039      	str	r1, [r7, #0]
    DWORD   tim;
    DWORD   diff;

    if (toMs == TIMEOUT_INFINITE)
 80266da:	683b      	ldr	r3, [r7, #0]
 80266dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80266e0:	d101      	bne.n	80266e6 <IsTimeoutMs+0x16>
        return (FALSE);
 80266e2:	2300      	movs	r3, #0
 80266e4:	e027      	b.n	8026736 <IsTimeoutMs+0x66>

    tim = bsp_GetTickCount();
 80266e6:	f7ff ff3b 	bl	8026560 <bsp_GetTickCount>
 80266ea:	60b8      	str	r0, [r7, #8]
    if (toMs == 0)
 80266ec:	683b      	ldr	r3, [r7, #0]
 80266ee:	2b00      	cmp	r3, #0
 80266f0:	d104      	bne.n	80266fc <IsTimeoutMs+0x2c>
    {
        *base = tim;
 80266f2:	687b      	ldr	r3, [r7, #4]
 80266f4:	68ba      	ldr	r2, [r7, #8]
 80266f6:	601a      	str	r2, [r3, #0]
        return (TRUE);
 80266f8:	2301      	movs	r3, #1
 80266fa:	e01c      	b.n	8026736 <IsTimeoutMs+0x66>
    }

    if (tim >= *base)
 80266fc:	687b      	ldr	r3, [r7, #4]
 80266fe:	681b      	ldr	r3, [r3, #0]
 8026700:	68ba      	ldr	r2, [r7, #8]
 8026702:	429a      	cmp	r2, r3
 8026704:	d305      	bcc.n	8026712 <IsTimeoutMs+0x42>
        diff = tim - *base;
 8026706:	687b      	ldr	r3, [r7, #4]
 8026708:	681b      	ldr	r3, [r3, #0]
 802670a:	68ba      	ldr	r2, [r7, #8]
 802670c:	1ad3      	subs	r3, r2, r3
 802670e:	60fb      	str	r3, [r7, #12]
 8026710:	e007      	b.n	8026722 <IsTimeoutMs+0x52>
    else
    {
        diff = (0xffffffffUL - *base) + 1;
 8026712:	687b      	ldr	r3, [r7, #4]
 8026714:	681b      	ldr	r3, [r3, #0]
 8026716:	425b      	negs	r3, r3
 8026718:	60fb      	str	r3, [r7, #12]
        diff += tim;
 802671a:	68fa      	ldr	r2, [r7, #12]
 802671c:	68bb      	ldr	r3, [r7, #8]
 802671e:	4413      	add	r3, r2
 8026720:	60fb      	str	r3, [r7, #12]
    }

    if(diff >= toMs)
 8026722:	68fa      	ldr	r2, [r7, #12]
 8026724:	683b      	ldr	r3, [r7, #0]
 8026726:	429a      	cmp	r2, r3
 8026728:	d304      	bcc.n	8026734 <IsTimeoutMs+0x64>
    {
        *base  = tim;
 802672a:	687b      	ldr	r3, [r7, #4]
 802672c:	68ba      	ldr	r2, [r7, #8]
 802672e:	601a      	str	r2, [r3, #0]
        return (TRUE);
 8026730:	2301      	movs	r3, #1
 8026732:	e000      	b.n	8026736 <IsTimeoutMs+0x66>
    }

    return (FALSE);
 8026734:	2300      	movs	r3, #0
}
 8026736:	4618      	mov	r0, r3
 8026738:	3710      	adds	r7, #16
 802673a:	46bd      	mov	sp, r7
 802673c:	bd80      	pop	{r7, pc}

0802673e <bsp_InitUart>:
#include "bsp.h"
#include <stdio.h>
#include <stdarg.h>

void bsp_InitUart()
{
 802673e:	b580      	push	{r7, lr}
 8026740:	af00      	add	r7, sp, #0
	bsp_InitIUart();
 8026742:	f7ff f8c1 	bl	80258c8 <bsp_InitIUart>
}
 8026746:	bf00      	nop
 8026748:	bd80      	pop	{r7, pc}

0802674a <Uart_SendByte>:
}



int Uart_SendByte(int nComPort, BYTE c)
{
 802674a:	b580      	push	{r7, lr}
 802674c:	b082      	sub	sp, #8
 802674e:	af00      	add	r7, sp, #0
 8026750:	6078      	str	r0, [r7, #4]
 8026752:	460b      	mov	r3, r1
 8026754:	70fb      	strb	r3, [r7, #3]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 8026756:	687b      	ldr	r3, [r7, #4]
 8026758:	2b00      	cmp	r3, #0
 802675a:	db09      	blt.n	8026770 <Uart_SendByte+0x26>
 802675c:	687b      	ldr	r3, [r7, #4]
 802675e:	2b04      	cmp	r3, #4
 8026760:	dc06      	bgt.n	8026770 <Uart_SendByte+0x26>
		return (IUart_SendByte(nComPort, c));
 8026762:	78fb      	ldrb	r3, [r7, #3]
 8026764:	4619      	mov	r1, r3
 8026766:	6878      	ldr	r0, [r7, #4]
 8026768:	f7ff fa8c 	bl	8025c84 <IUart_SendByte>
 802676c:	4603      	mov	r3, r0
 802676e:	e001      	b.n	8026774 <Uart_SendByte+0x2a>

	return -1;
 8026770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8026774:	4618      	mov	r0, r3
 8026776:	3708      	adds	r7, #8
 8026778:	46bd      	mov	sp, r7
 802677a:	bd80      	pop	{r7, pc}

0802677c <Uart_SendBuffer>:



int Uart_SendBuffer(int nComPort, PUCHAR pBuf, UINT16 usLen)
{
 802677c:	b580      	push	{r7, lr}
 802677e:	b084      	sub	sp, #16
 8026780:	af00      	add	r7, sp, #0
 8026782:	60f8      	str	r0, [r7, #12]
 8026784:	60b9      	str	r1, [r7, #8]
 8026786:	4613      	mov	r3, r2
 8026788:	80fb      	strh	r3, [r7, #6]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 802678a:	68fb      	ldr	r3, [r7, #12]
 802678c:	2b00      	cmp	r3, #0
 802678e:	db0a      	blt.n	80267a6 <Uart_SendBuffer+0x2a>
 8026790:	68fb      	ldr	r3, [r7, #12]
 8026792:	2b04      	cmp	r3, #4
 8026794:	dc07      	bgt.n	80267a6 <Uart_SendBuffer+0x2a>
		return (IUart_SendBuffer(nComPort, pBuf, usLen));
 8026796:	88fb      	ldrh	r3, [r7, #6]
 8026798:	461a      	mov	r2, r3
 802679a:	68b9      	ldr	r1, [r7, #8]
 802679c:	68f8      	ldr	r0, [r7, #12]
 802679e:	f7ff faa5 	bl	8025cec <IUart_SendBuffer>
 80267a2:	4603      	mov	r3, r0
 80267a4:	e001      	b.n	80267aa <Uart_SendBuffer+0x2e>

	return -1;
 80267a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80267aa:	4618      	mov	r0, r3
 80267ac:	3710      	adds	r7, #16
 80267ae:	46bd      	mov	sp, r7
 80267b0:	bd80      	pop	{r7, pc}

080267b2 <Uart_RecvByteBlocked>:
    return -1;
}


int Uart_RecvByteBlocked(int nComPort)
{
 80267b2:	b580      	push	{r7, lr}
 80267b4:	b082      	sub	sp, #8
 80267b6:	af00      	add	r7, sp, #0
 80267b8:	6078      	str	r0, [r7, #4]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 80267ba:	687b      	ldr	r3, [r7, #4]
 80267bc:	2b00      	cmp	r3, #0
 80267be:	db07      	blt.n	80267d0 <Uart_RecvByteBlocked+0x1e>
 80267c0:	687b      	ldr	r3, [r7, #4]
 80267c2:	2b04      	cmp	r3, #4
 80267c4:	dc04      	bgt.n	80267d0 <Uart_RecvByteBlocked+0x1e>
        return (IUart_RecvByteBlocked(nComPort));
 80267c6:	6878      	ldr	r0, [r7, #4]
 80267c8:	f7ff fb26 	bl	8025e18 <IUart_RecvByteBlocked>
 80267cc:	4603      	mov	r3, r0
 80267ce:	e001      	b.n	80267d4 <Uart_RecvByteBlocked+0x22>

    return -1;
 80267d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80267d4:	4618      	mov	r0, r3
 80267d6:	3708      	adds	r7, #8
 80267d8:	46bd      	mov	sp, r7
 80267da:	bd80      	pop	{r7, pc}

080267dc <__io_putchar>:

/*
**	CubeIde 호환 함수
 */
int __io_putchar(int ch)
{
 80267dc:	b580      	push	{r7, lr}
 80267de:	b082      	sub	sp, #8
 80267e0:	af00      	add	r7, sp, #0
 80267e2:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 80267e4:	687b      	ldr	r3, [r7, #4]
 80267e6:	2b0a      	cmp	r3, #10
 80267e8:	d102      	bne.n	80267f0 <__io_putchar+0x14>
		_low_level_put('\r');
 80267ea:	200d      	movs	r0, #13
 80267ec:	f000 f84a 	bl	8026884 <_low_level_put>
	_low_level_put((char)ch);
 80267f0:	687b      	ldr	r3, [r7, #4]
 80267f2:	b2db      	uxtb	r3, r3
 80267f4:	4618      	mov	r0, r3
 80267f6:	f000 f845 	bl	8026884 <_low_level_put>

	return ch;
 80267fa:	687b      	ldr	r3, [r7, #4]
}
 80267fc:	4618      	mov	r0, r3
 80267fe:	3708      	adds	r7, #8
 8026800:	46bd      	mov	sp, r7
 8026802:	bd80      	pop	{r7, pc}

08026804 <__io_getchar>:


// scanf 사용시 필요
int __io_getchar(void)
{
 8026804:	b580      	push	{r7, lr}
 8026806:	b082      	sub	sp, #8
 8026808:	af00      	add	r7, sp, #0
    char data[4];
    uint8_t ch, len = 1;
 802680a:	2301      	movs	r3, #1
 802680c:	71fb      	strb	r3, [r7, #7]

    ch = (uint8_t)Uart_RecvByteBlocked(DEBUG_PORT);
 802680e:	2000      	movs	r0, #0
 8026810:	f7ff ffcf 	bl	80267b2 <Uart_RecvByteBlocked>
 8026814:	4603      	mov	r3, r0
 8026816:	71bb      	strb	r3, [r7, #6]

    memset(data, 0x00, 4);
 8026818:	463b      	mov	r3, r7
 802681a:	2204      	movs	r2, #4
 802681c:	2100      	movs	r1, #0
 802681e:	4618      	mov	r0, r3
 8026820:	f009 fec8 	bl	80305b4 <memset>
    switch(ch)
 8026824:	79bb      	ldrb	r3, [r7, #6]
 8026826:	2b7f      	cmp	r3, #127	; 0x7f
 8026828:	d011      	beq.n	802684e <__io_getchar+0x4a>
 802682a:	2b7f      	cmp	r3, #127	; 0x7f
 802682c:	dc17      	bgt.n	802685e <__io_getchar+0x5a>
 802682e:	2b0d      	cmp	r3, #13
 8026830:	d005      	beq.n	802683e <__io_getchar+0x3a>
 8026832:	2b0d      	cmp	r3, #13
 8026834:	dc13      	bgt.n	802685e <__io_getchar+0x5a>
 8026836:	2b08      	cmp	r3, #8
 8026838:	d009      	beq.n	802684e <__io_getchar+0x4a>
 802683a:	2b0a      	cmp	r3, #10
 802683c:	d10f      	bne.n	802685e <__io_getchar+0x5a>
    {
        case '\r':
        case '\n':
            len = 2;
 802683e:	2302      	movs	r3, #2
 8026840:	71fb      	strb	r3, [r7, #7]
            sprintf(data, "\r\n");
 8026842:	463b      	mov	r3, r7
 8026844:	490d      	ldr	r1, [pc, #52]	; (802687c <__io_getchar+0x78>)
 8026846:	4618      	mov	r0, r3
 8026848:	f00a f850 	bl	80308ec <siprintf>
            break;
 802684c:	e00a      	b.n	8026864 <__io_getchar+0x60>

        case '\b':
        case 0x7F:
            len = 3;
 802684e:	2303      	movs	r3, #3
 8026850:	71fb      	strb	r3, [r7, #7]
            sprintf(data, "\b \b");
 8026852:	463b      	mov	r3, r7
 8026854:	490a      	ldr	r1, [pc, #40]	; (8026880 <__io_getchar+0x7c>)
 8026856:	4618      	mov	r0, r3
 8026858:	f00a f848 	bl	80308ec <siprintf>
            break;
 802685c:	e002      	b.n	8026864 <__io_getchar+0x60>

        default:
            data[0] = ch;
 802685e:	79bb      	ldrb	r3, [r7, #6]
 8026860:	703b      	strb	r3, [r7, #0]
            break;
 8026862:	bf00      	nop
    }
    Uart_SendBuffer(DEBUG_PORT, (uint8_t *)data, len);
 8026864:	79fb      	ldrb	r3, [r7, #7]
 8026866:	b29a      	uxth	r2, r3
 8026868:	463b      	mov	r3, r7
 802686a:	4619      	mov	r1, r3
 802686c:	2000      	movs	r0, #0
 802686e:	f7ff ff85 	bl	802677c <Uart_SendBuffer>

    return ch;
 8026872:	79bb      	ldrb	r3, [r7, #6]
}
 8026874:	4618      	mov	r0, r3
 8026876:	3708      	adds	r7, #8
 8026878:	46bd      	mov	sp, r7
 802687a:	bd80      	pop	{r7, pc}
 802687c:	08032a00 	.word	0x08032a00
 8026880:	08032a04 	.word	0x08032a04

08026884 <_low_level_put>:



void _low_level_put(char c)
{
 8026884:	b580      	push	{r7, lr}
 8026886:	b082      	sub	sp, #8
 8026888:	af00      	add	r7, sp, #0
 802688a:	4603      	mov	r3, r0
 802688c:	71fb      	strb	r3, [r7, #7]
    Uart_SendByte(DEBUG_PORT, c);
 802688e:	79fb      	ldrb	r3, [r7, #7]
 8026890:	4619      	mov	r1, r3
 8026892:	2000      	movs	r0, #0
 8026894:	f7ff ff59 	bl	802674a <Uart_SendByte>

//	USART1->TDR = c;
//
//	while((USART1->ISR & USART_ISR_TC) == 0)
//	{}
}
 8026898:	bf00      	nop
 802689a:	3708      	adds	r7, #8
 802689c:	46bd      	mov	sp, r7
 802689e:	bd80      	pop	{r7, pc}

080268a0 <_putchar>:
}



int _putchar(int c)
{
 80268a0:	b580      	push	{r7, lr}
 80268a2:	b082      	sub	sp, #8
 80268a4:	af00      	add	r7, sp, #0
 80268a6:	6078      	str	r0, [r7, #4]
    if ( c == '\n' )
 80268a8:	687b      	ldr	r3, [r7, #4]
 80268aa:	2b0a      	cmp	r3, #10
 80268ac:	d102      	bne.n	80268b4 <_putchar+0x14>
        _low_level_put((char)'\r');
 80268ae:	200d      	movs	r0, #13
 80268b0:	f7ff ffe8 	bl	8026884 <_low_level_put>
    _low_level_put((char)c);
 80268b4:	687b      	ldr	r3, [r7, #4]
 80268b6:	b2db      	uxtb	r3, r3
 80268b8:	4618      	mov	r0, r3
 80268ba:	f7ff ffe3 	bl	8026884 <_low_level_put>

    return(c);
 80268be:	687b      	ldr	r3, [r7, #4]
}
 80268c0:	4618      	mov	r0, r3
 80268c2:	3708      	adds	r7, #8
 80268c4:	46bd      	mov	sp, r7
 80268c6:	bd80      	pop	{r7, pc}

080268c8 <putstr>:
}



void putstr(char *s)
{
 80268c8:	b580      	push	{r7, lr}
 80268ca:	b082      	sub	sp, #8
 80268cc:	af00      	add	r7, sp, #0
 80268ce:	6078      	str	r0, [r7, #4]
    while (*s != '\0')
 80268d0:	e006      	b.n	80268e0 <putstr+0x18>
        _putchar(*s++);
 80268d2:	687b      	ldr	r3, [r7, #4]
 80268d4:	1c5a      	adds	r2, r3, #1
 80268d6:	607a      	str	r2, [r7, #4]
 80268d8:	781b      	ldrb	r3, [r3, #0]
 80268da:	4618      	mov	r0, r3
 80268dc:	f7ff ffe0 	bl	80268a0 <_putchar>
    while (*s != '\0')
 80268e0:	687b      	ldr	r3, [r7, #4]
 80268e2:	781b      	ldrb	r3, [r3, #0]
 80268e4:	2b00      	cmp	r3, #0
 80268e6:	d1f4      	bne.n	80268d2 <putstr+0xa>
}
 80268e8:	bf00      	nop
 80268ea:	bf00      	nop
 80268ec:	3708      	adds	r7, #8
 80268ee:	46bd      	mov	sp, r7
 80268f0:	bd80      	pop	{r7, pc}

080268f2 <HexPrint>:
}


/* printf("%0?x", h) */
void HexPrint(WORD h, uint8_t n)
{
 80268f2:	b580      	push	{r7, lr}
 80268f4:	b084      	sub	sp, #16
 80268f6:	af00      	add	r7, sp, #0
 80268f8:	4603      	mov	r3, r0
 80268fa:	460a      	mov	r2, r1
 80268fc:	80fb      	strh	r3, [r7, #6]
 80268fe:	4613      	mov	r3, r2
 8026900:	717b      	strb	r3, [r7, #5]
    char    s[8];

    htoa(h, s);
 8026902:	f107 0208 	add.w	r2, r7, #8
 8026906:	88fb      	ldrh	r3, [r7, #6]
 8026908:	4611      	mov	r1, r2
 802690a:	4618      	mov	r0, r3
 802690c:	f000 f826 	bl	802695c <htoa>
    n = 4 - n;
 8026910:	797b      	ldrb	r3, [r7, #5]
 8026912:	f1c3 0304 	rsb	r3, r3, #4
 8026916:	717b      	strb	r3, [r7, #5]
    while ( n < 4 )
 8026918:	e009      	b.n	802692e <HexPrint+0x3c>
        putchar(s[n++]);
 802691a:	797b      	ldrb	r3, [r7, #5]
 802691c:	1c5a      	adds	r2, r3, #1
 802691e:	717a      	strb	r2, [r7, #5]
 8026920:	3310      	adds	r3, #16
 8026922:	443b      	add	r3, r7
 8026924:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8026928:	4618      	mov	r0, r3
 802692a:	f009 ff43 	bl	80307b4 <putchar>
    while ( n < 4 )
 802692e:	797b      	ldrb	r3, [r7, #5]
 8026930:	2b03      	cmp	r3, #3
 8026932:	d9f2      	bls.n	802691a <HexPrint+0x28>
}
 8026934:	bf00      	nop
 8026936:	bf00      	nop
 8026938:	3710      	adds	r7, #16
 802693a:	46bd      	mov	sp, r7
 802693c:	bd80      	pop	{r7, pc}

0802693e <U3_Putch>:
    Uart_Printf(nComPort, "\r\n");
}


void U3_Putch(BYTE c)
{
 802693e:	b580      	push	{r7, lr}
 8026940:	b082      	sub	sp, #8
 8026942:	af00      	add	r7, sp, #0
 8026944:	4603      	mov	r3, r0
 8026946:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM3, (uint8_t)c);
 8026948:	79fb      	ldrb	r3, [r7, #7]
 802694a:	4619      	mov	r1, r3
 802694c:	2002      	movs	r0, #2
 802694e:	f7ff f999 	bl	8025c84 <IUart_SendByte>
}
 8026952:	bf00      	nop
 8026954:	3708      	adds	r7, #8
 8026956:	46bd      	mov	sp, r7
 8026958:	bd80      	pop	{r7, pc}
	...

0802695c <htoa>:
** ============================================================================
*/

/* hexdecimal unsigned int to ascii */
void htoa(word h, char *s)
{
 802695c:	b480      	push	{r7}
 802695e:	b085      	sub	sp, #20
 8026960:	af00      	add	r7, sp, #0
 8026962:	4603      	mov	r3, r0
 8026964:	6039      	str	r1, [r7, #0]
 8026966:	80fb      	strh	r3, [r7, #6]
	int	cnt;

	for ( cnt = 12; cnt >= 0; cnt -= 4 )
 8026968:	230c      	movs	r3, #12
 802696a:	60fb      	str	r3, [r7, #12]
 802696c:	e00e      	b.n	802698c <htoa+0x30>
		*s++ = HexTbl[(h >> cnt) & 0x0f];
 802696e:	88fa      	ldrh	r2, [r7, #6]
 8026970:	68fb      	ldr	r3, [r7, #12]
 8026972:	fa42 f303 	asr.w	r3, r2, r3
 8026976:	f003 020f 	and.w	r2, r3, #15
 802697a:	683b      	ldr	r3, [r7, #0]
 802697c:	1c59      	adds	r1, r3, #1
 802697e:	6039      	str	r1, [r7, #0]
 8026980:	4908      	ldr	r1, [pc, #32]	; (80269a4 <htoa+0x48>)
 8026982:	5c8a      	ldrb	r2, [r1, r2]
 8026984:	701a      	strb	r2, [r3, #0]
	for ( cnt = 12; cnt >= 0; cnt -= 4 )
 8026986:	68fb      	ldr	r3, [r7, #12]
 8026988:	3b04      	subs	r3, #4
 802698a:	60fb      	str	r3, [r7, #12]
 802698c:	68fb      	ldr	r3, [r7, #12]
 802698e:	2b00      	cmp	r3, #0
 8026990:	daed      	bge.n	802696e <htoa+0x12>
	*s = '\0';
 8026992:	683b      	ldr	r3, [r7, #0]
 8026994:	2200      	movs	r2, #0
 8026996:	701a      	strb	r2, [r3, #0]
}
 8026998:	bf00      	nop
 802699a:	3714      	adds	r7, #20
 802699c:	46bd      	mov	sp, r7
 802699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269a2:	4770      	bx	lr
 80269a4:	2400002c 	.word	0x2400002c

080269a8 <dump>:
		return(atoh(&str[2]));
	return(atoi(str));
}

static	void dump(long adr, byte *m, char n)
{
 80269a8:	b580      	push	{r7, lr}
 80269aa:	b086      	sub	sp, #24
 80269ac:	af00      	add	r7, sp, #0
 80269ae:	60f8      	str	r0, [r7, #12]
 80269b0:	60b9      	str	r1, [r7, #8]
 80269b2:	4613      	mov	r3, r2
 80269b4:	71fb      	strb	r3, [r7, #7]
#define isdump(c)	(isprint(c) ? (c) : ('.'))
	byte	cnt, i, j;

	printf("%06lX:", adr & 0xfffff0L);
 80269b6:	68fa      	ldr	r2, [r7, #12]
 80269b8:	4b3c      	ldr	r3, [pc, #240]	; (8026aac <dump+0x104>)
 80269ba:	4013      	ands	r3, r2
 80269bc:	4619      	mov	r1, r3
 80269be:	483c      	ldr	r0, [pc, #240]	; (8026ab0 <dump+0x108>)
 80269c0:	f009 fee0 	bl	8030784 <iprintf>
	cnt = (byte)adr & 0x0f;
 80269c4:	68fb      	ldr	r3, [r7, #12]
 80269c6:	b2db      	uxtb	r3, r3
 80269c8:	f003 030f 	and.w	r3, r3, #15
 80269cc:	757b      	strb	r3, [r7, #21]
	for ( i = 0, j = 0; i < 16; i++ ) {
 80269ce:	2300      	movs	r3, #0
 80269d0:	75fb      	strb	r3, [r7, #23]
 80269d2:	2300      	movs	r3, #0
 80269d4:	75bb      	strb	r3, [r7, #22]
 80269d6:	e024      	b.n	8026a22 <dump+0x7a>
		if ( i == 8 )
 80269d8:	7dfb      	ldrb	r3, [r7, #23]
 80269da:	2b08      	cmp	r3, #8
 80269dc:	d103      	bne.n	80269e6 <dump+0x3e>
			putchar('-');
 80269de:	202d      	movs	r0, #45	; 0x2d
 80269e0:	f009 fee8 	bl	80307b4 <putchar>
 80269e4:	e002      	b.n	80269ec <dump+0x44>
		else
			putchar(' ');
 80269e6:	2020      	movs	r0, #32
 80269e8:	f009 fee4 	bl	80307b4 <putchar>
		if ( i < cnt || j >= n )
 80269ec:	7dfa      	ldrb	r2, [r7, #23]
 80269ee:	7d7b      	ldrb	r3, [r7, #21]
 80269f0:	429a      	cmp	r2, r3
 80269f2:	d303      	bcc.n	80269fc <dump+0x54>
 80269f4:	7dba      	ldrb	r2, [r7, #22]
 80269f6:	79fb      	ldrb	r3, [r7, #7]
 80269f8:	429a      	cmp	r2, r3
 80269fa:	d303      	bcc.n	8026a04 <dump+0x5c>
			putstr("  ");
 80269fc:	482d      	ldr	r0, [pc, #180]	; (8026ab4 <dump+0x10c>)
 80269fe:	f7ff ff63 	bl	80268c8 <putstr>
 8026a02:	e00b      	b.n	8026a1c <dump+0x74>
		else {
			HexPrint(m[j], 2);
 8026a04:	7dbb      	ldrb	r3, [r7, #22]
 8026a06:	68ba      	ldr	r2, [r7, #8]
 8026a08:	4413      	add	r3, r2
 8026a0a:	781b      	ldrb	r3, [r3, #0]
 8026a0c:	b29b      	uxth	r3, r3
 8026a0e:	2102      	movs	r1, #2
 8026a10:	4618      	mov	r0, r3
 8026a12:	f7ff ff6e 	bl	80268f2 <HexPrint>
			j++;
 8026a16:	7dbb      	ldrb	r3, [r7, #22]
 8026a18:	3301      	adds	r3, #1
 8026a1a:	75bb      	strb	r3, [r7, #22]
	for ( i = 0, j = 0; i < 16; i++ ) {
 8026a1c:	7dfb      	ldrb	r3, [r7, #23]
 8026a1e:	3301      	adds	r3, #1
 8026a20:	75fb      	strb	r3, [r7, #23]
 8026a22:	7dfb      	ldrb	r3, [r7, #23]
 8026a24:	2b0f      	cmp	r3, #15
 8026a26:	d9d7      	bls.n	80269d8 <dump+0x30>
		}
	}
	putstr("  ");
 8026a28:	4822      	ldr	r0, [pc, #136]	; (8026ab4 <dump+0x10c>)
 8026a2a:	f7ff ff4d 	bl	80268c8 <putstr>
	for ( i = 0; i < cnt; i++ )
 8026a2e:	2300      	movs	r3, #0
 8026a30:	75fb      	strb	r3, [r7, #23]
 8026a32:	e005      	b.n	8026a40 <dump+0x98>
		putchar(' ');
 8026a34:	2020      	movs	r0, #32
 8026a36:	f009 febd 	bl	80307b4 <putchar>
	for ( i = 0; i < cnt; i++ )
 8026a3a:	7dfb      	ldrb	r3, [r7, #23]
 8026a3c:	3301      	adds	r3, #1
 8026a3e:	75fb      	strb	r3, [r7, #23]
 8026a40:	7dfa      	ldrb	r2, [r7, #23]
 8026a42:	7d7b      	ldrb	r3, [r7, #21]
 8026a44:	429a      	cmp	r2, r3
 8026a46:	d3f5      	bcc.n	8026a34 <dump+0x8c>
	for ( i = 0; i < n; i++ )
 8026a48:	2300      	movs	r3, #0
 8026a4a:	75fb      	strb	r3, [r7, #23]
 8026a4c:	e017      	b.n	8026a7e <dump+0xd6>
		putchar(isdump(m[i]));
 8026a4e:	7dfb      	ldrb	r3, [r7, #23]
 8026a50:	68ba      	ldr	r2, [r7, #8]
 8026a52:	4413      	add	r3, r2
 8026a54:	781b      	ldrb	r3, [r3, #0]
 8026a56:	3301      	adds	r3, #1
 8026a58:	4a17      	ldr	r2, [pc, #92]	; (8026ab8 <dump+0x110>)
 8026a5a:	4413      	add	r3, r2
 8026a5c:	781b      	ldrb	r3, [r3, #0]
 8026a5e:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8026a62:	2b00      	cmp	r3, #0
 8026a64:	d004      	beq.n	8026a70 <dump+0xc8>
 8026a66:	7dfb      	ldrb	r3, [r7, #23]
 8026a68:	68ba      	ldr	r2, [r7, #8]
 8026a6a:	4413      	add	r3, r2
 8026a6c:	781b      	ldrb	r3, [r3, #0]
 8026a6e:	e000      	b.n	8026a72 <dump+0xca>
 8026a70:	232e      	movs	r3, #46	; 0x2e
 8026a72:	4618      	mov	r0, r3
 8026a74:	f009 fe9e 	bl	80307b4 <putchar>
	for ( i = 0; i < n; i++ )
 8026a78:	7dfb      	ldrb	r3, [r7, #23]
 8026a7a:	3301      	adds	r3, #1
 8026a7c:	75fb      	strb	r3, [r7, #23]
 8026a7e:	7dfa      	ldrb	r2, [r7, #23]
 8026a80:	79fb      	ldrb	r3, [r7, #7]
 8026a82:	429a      	cmp	r2, r3
 8026a84:	d3e3      	bcc.n	8026a4e <dump+0xa6>
	while ( (cnt + i++) < 16 )
 8026a86:	e002      	b.n	8026a8e <dump+0xe6>
		putchar(' ');
 8026a88:	2020      	movs	r0, #32
 8026a8a:	f009 fe93 	bl	80307b4 <putchar>
	while ( (cnt + i++) < 16 )
 8026a8e:	7d7a      	ldrb	r2, [r7, #21]
 8026a90:	7dfb      	ldrb	r3, [r7, #23]
 8026a92:	1c59      	adds	r1, r3, #1
 8026a94:	75f9      	strb	r1, [r7, #23]
 8026a96:	4413      	add	r3, r2
 8026a98:	2b0f      	cmp	r3, #15
 8026a9a:	ddf5      	ble.n	8026a88 <dump+0xe0>

	putchar('\n');
 8026a9c:	200a      	movs	r0, #10
 8026a9e:	f009 fe89 	bl	80307b4 <putchar>
}
 8026aa2:	bf00      	nop
 8026aa4:	3718      	adds	r7, #24
 8026aa6:	46bd      	mov	sp, r7
 8026aa8:	bd80      	pop	{r7, pc}
 8026aaa:	bf00      	nop
 8026aac:	00fffff0 	.word	0x00fffff0
 8026ab0:	08032a9c 	.word	0x08032a9c
 8026ab4:	08032aa4 	.word	0x08032aa4
 8026ab8:	08032dd8 	.word	0x08032dd8

08026abc <hexdump>:

void hexdump(long adr, byte *pbuf, int siz)
{
 8026abc:	b580      	push	{r7, lr}
 8026abe:	b088      	sub	sp, #32
 8026ac0:	af00      	add	r7, sp, #0
 8026ac2:	60f8      	str	r0, [r7, #12]
 8026ac4:	60b9      	str	r1, [r7, #8]
 8026ac6:	607a      	str	r2, [r7, #4]
	int 	i, n, l, d;

	if(siz == 0)
 8026ac8:	687b      	ldr	r3, [r7, #4]
 8026aca:	2b00      	cmp	r3, #0
 8026acc:	d045      	beq.n	8026b5a <hexdump+0x9e>
		return;

	for(i = 0 ; i < siz ;  ) {
 8026ace:	2300      	movs	r3, #0
 8026ad0:	61fb      	str	r3, [r7, #28]
 8026ad2:	e03d      	b.n	8026b50 <hexdump+0x94>
		n = adr % 16;
 8026ad4:	68fb      	ldr	r3, [r7, #12]
 8026ad6:	425a      	negs	r2, r3
 8026ad8:	f003 030f 	and.w	r3, r3, #15
 8026adc:	f002 020f 	and.w	r2, r2, #15
 8026ae0:	bf58      	it	pl
 8026ae2:	4253      	negpl	r3, r2
 8026ae4:	61bb      	str	r3, [r7, #24]
		if(n == 0) {
 8026ae6:	69bb      	ldr	r3, [r7, #24]
 8026ae8:	2b00      	cmp	r3, #0
 8026aea:	d112      	bne.n	8026b12 <hexdump+0x56>
			d = siz - i;
 8026aec:	687a      	ldr	r2, [r7, #4]
 8026aee:	69fb      	ldr	r3, [r7, #28]
 8026af0:	1ad3      	subs	r3, r2, r3
 8026af2:	613b      	str	r3, [r7, #16]
			n = min(16, d);
 8026af4:	693b      	ldr	r3, [r7, #16]
 8026af6:	2b10      	cmp	r3, #16
 8026af8:	bfa8      	it	ge
 8026afa:	2310      	movge	r3, #16
 8026afc:	61bb      	str	r3, [r7, #24]
			dump(adr, &pbuf[i], n);
 8026afe:	69fb      	ldr	r3, [r7, #28]
 8026b00:	68ba      	ldr	r2, [r7, #8]
 8026b02:	4413      	add	r3, r2
 8026b04:	69ba      	ldr	r2, [r7, #24]
 8026b06:	b2d2      	uxtb	r2, r2
 8026b08:	4619      	mov	r1, r3
 8026b0a:	68f8      	ldr	r0, [r7, #12]
 8026b0c:	f7ff ff4c 	bl	80269a8 <dump>
 8026b10:	e016      	b.n	8026b40 <hexdump+0x84>
		}
		else {
			l = 16 - n;
 8026b12:	69bb      	ldr	r3, [r7, #24]
 8026b14:	f1c3 0310 	rsb	r3, r3, #16
 8026b18:	617b      	str	r3, [r7, #20]
			d = siz - i;
 8026b1a:	687a      	ldr	r2, [r7, #4]
 8026b1c:	69fb      	ldr	r3, [r7, #28]
 8026b1e:	1ad3      	subs	r3, r2, r3
 8026b20:	613b      	str	r3, [r7, #16]
			n = min(l, d);
 8026b22:	697a      	ldr	r2, [r7, #20]
 8026b24:	693b      	ldr	r3, [r7, #16]
 8026b26:	4293      	cmp	r3, r2
 8026b28:	bfa8      	it	ge
 8026b2a:	4613      	movge	r3, r2
 8026b2c:	61bb      	str	r3, [r7, #24]
			dump(adr, &pbuf[i], n);
 8026b2e:	69fb      	ldr	r3, [r7, #28]
 8026b30:	68ba      	ldr	r2, [r7, #8]
 8026b32:	4413      	add	r3, r2
 8026b34:	69ba      	ldr	r2, [r7, #24]
 8026b36:	b2d2      	uxtb	r2, r2
 8026b38:	4619      	mov	r1, r3
 8026b3a:	68f8      	ldr	r0, [r7, #12]
 8026b3c:	f7ff ff34 	bl	80269a8 <dump>
		}
		i += n;
 8026b40:	69fa      	ldr	r2, [r7, #28]
 8026b42:	69bb      	ldr	r3, [r7, #24]
 8026b44:	4413      	add	r3, r2
 8026b46:	61fb      	str	r3, [r7, #28]
		adr += n;
 8026b48:	68fa      	ldr	r2, [r7, #12]
 8026b4a:	69bb      	ldr	r3, [r7, #24]
 8026b4c:	4413      	add	r3, r2
 8026b4e:	60fb      	str	r3, [r7, #12]
	for(i = 0 ; i < siz ;  ) {
 8026b50:	69fa      	ldr	r2, [r7, #28]
 8026b52:	687b      	ldr	r3, [r7, #4]
 8026b54:	429a      	cmp	r2, r3
 8026b56:	dbbd      	blt.n	8026ad4 <hexdump+0x18>
 8026b58:	e000      	b.n	8026b5c <hexdump+0xa0>
		return;
 8026b5a:	bf00      	nop
	}
}
 8026b5c:	3720      	adds	r7, #32
 8026b5e:	46bd      	mov	sp, r7
 8026b60:	bd80      	pop	{r7, pc}

08026b62 <MPU_Config>:
CRC_HandleTypeDef hcrc;



void MPU_Config(void)
{
 8026b62:	b580      	push	{r7, lr}
 8026b64:	b084      	sub	sp, #16
 8026b66:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8026b68:	463b      	mov	r3, r7
 8026b6a:	2200      	movs	r2, #0
 8026b6c:	601a      	str	r2, [r3, #0]
 8026b6e:	605a      	str	r2, [r3, #4]
 8026b70:	609a      	str	r2, [r3, #8]
 8026b72:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 8026b74:	f003 fc0c 	bl	802a390 <HAL_MPU_Disable>

    /** 전체 메모리 영역 설정 - 기본설정[0x60000000~0xDFFFFFFF:Strongly ordered]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8026b78:	2301      	movs	r3, #1
 8026b7a:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8026b7c:	2300      	movs	r3, #0
 8026b7e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x00;
 8026b80:	2300      	movs	r3, #0
 8026b82:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8026b84:	231f      	movs	r3, #31
 8026b86:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x87;
 8026b88:	2387      	movs	r3, #135	; 0x87
 8026b8a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8026b8c:	2303      	movs	r3, #3
 8026b8e:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8026b90:	2300      	movs	r3, #0
 8026b92:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8026b94:	2301      	movs	r3, #1
 8026b96:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8026b98:	2301      	movs	r3, #1
 8026b9a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8026b9c:	2300      	movs	r3, #0
 8026b9e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8026ba0:	2300      	movs	r3, #0
 8026ba2:	73fb      	strb	r3, [r7, #15]


    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8026ba4:	463b      	mov	r3, r7
 8026ba6:	4618      	mov	r0, r3
 8026ba8:	f003 fc2a 	bl	802a400 <HAL_MPU_ConfigRegion>

    /** FPGA[0x60000000, 1K]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8026bac:	2301      	movs	r3, #1
 8026bae:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8026bb0:	2301      	movs	r3, #1
 8026bb2:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x60000000;
 8026bb4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8026bb8:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8026bba:	2309      	movs	r3, #9
 8026bbc:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8026bbe:	2300      	movs	r3, #0
 8026bc0:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8026bc2:	2300      	movs	r3, #0
 8026bc4:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8026bc6:	2303      	movs	r3, #3
 8026bc8:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8026bca:	2301      	movs	r3, #1
 8026bcc:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8026bce:	2301      	movs	r3, #1
 8026bd0:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8026bd2:	2300      	movs	r3, #0
 8026bd4:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8026bd6:	2300      	movs	r3, #0
 8026bd8:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8026bda:	463b      	mov	r3, r7
 8026bdc:	4618      	mov	r0, r3
 8026bde:	f003 fc0f 	bl	802a400 <HAL_MPU_ConfigRegion>

    /** NAND[0x80000000, 128M]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8026be2:	2301      	movs	r3, #1
 8026be4:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8026be6:	2302      	movs	r3, #2
 8026be8:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x80000000;
 8026bea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8026bee:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8026bf0:	231a      	movs	r3, #26
 8026bf2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8026bf4:	2300      	movs	r3, #0
 8026bf6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8026bf8:	2300      	movs	r3, #0
 8026bfa:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8026bfc:	2303      	movs	r3, #3
 8026bfe:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8026c00:	2301      	movs	r3, #1
 8026c02:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8026c04:	2301      	movs	r3, #1
 8026c06:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8026c08:	2300      	movs	r3, #0
 8026c0a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8026c0c:	2300      	movs	r3, #0
 8026c0e:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8026c10:	463b      	mov	r3, r7
 8026c12:	4618      	mov	r0, r3
 8026c14:	f003 fbf4 	bl	802a400 <HAL_MPU_ConfigRegion>

    /** SDRAM[0xD0000000] - IS45S16400J : 1 Mega Bits x 16 Bits x 4 Banks(64MBit)
     **  TEX:1, C:1, B:1, S:0 - MemType:Normal -> Write back, write and read allocate
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8026c18:	2301      	movs	r3, #1
 8026c1a:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8026c1c:	2303      	movs	r3, #3
 8026c1e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0xD0000000;
 8026c20:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8026c24:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8026c26:	2316      	movs	r3, #22
 8026c28:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8026c2a:	2300      	movs	r3, #0
 8026c2c:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8026c2e:	2301      	movs	r3, #1
 8026c30:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8026c32:	2303      	movs	r3, #3
 8026c34:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8026c36:	2301      	movs	r3, #1
 8026c38:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8026c3a:	2300      	movs	r3, #0
 8026c3c:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8026c3e:	2301      	movs	r3, #1
 8026c40:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8026c42:	2301      	movs	r3, #1
 8026c44:	73fb      	strb	r3, [r7, #15]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8026c46:	463b      	mov	r3, r7
 8026c48:	4618      	mov	r0, r3
 8026c4a:	f003 fbd9 	bl	802a400 <HAL_MPU_ConfigRegion>

    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8026c4e:	2004      	movs	r0, #4
 8026c50:	f003 fbb6 	bl	802a3c0 <HAL_MPU_Enable>
}
 8026c54:	bf00      	nop
 8026c56:	3710      	adds	r7, #16
 8026c58:	46bd      	mov	sp, r7
 8026c5a:	bd80      	pop	{r7, pc}

08026c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8026c5c:	b580      	push	{r7, lr}
 8026c5e:	b09e      	sub	sp, #120	; 0x78
 8026c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8026c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8026c66:	224c      	movs	r2, #76	; 0x4c
 8026c68:	2100      	movs	r1, #0
 8026c6a:	4618      	mov	r0, r3
 8026c6c:	f009 fca2 	bl	80305b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8026c70:	f107 030c 	add.w	r3, r7, #12
 8026c74:	2220      	movs	r2, #32
 8026c76:	2100      	movs	r1, #0
 8026c78:	4618      	mov	r0, r3
 8026c7a:	f009 fc9b 	bl	80305b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8026c7e:	2002      	movs	r0, #2
 8026c80:	f004 f95e 	bl	802af40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8026c84:	2300      	movs	r3, #0
 8026c86:	60bb      	str	r3, [r7, #8]
 8026c88:	4b4e      	ldr	r3, [pc, #312]	; (8026dc4 <SystemClock_Config+0x168>)
 8026c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026c8c:	4a4d      	ldr	r2, [pc, #308]	; (8026dc4 <SystemClock_Config+0x168>)
 8026c8e:	f023 0301 	bic.w	r3, r3, #1
 8026c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8026c94:	4b4b      	ldr	r3, [pc, #300]	; (8026dc4 <SystemClock_Config+0x168>)
 8026c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026c98:	f003 0301 	and.w	r3, r3, #1
 8026c9c:	60bb      	str	r3, [r7, #8]
 8026c9e:	4b4a      	ldr	r3, [pc, #296]	; (8026dc8 <SystemClock_Config+0x16c>)
 8026ca0:	699b      	ldr	r3, [r3, #24]
 8026ca2:	4a49      	ldr	r2, [pc, #292]	; (8026dc8 <SystemClock_Config+0x16c>)
 8026ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8026ca8:	6193      	str	r3, [r2, #24]
 8026caa:	4b47      	ldr	r3, [pc, #284]	; (8026dc8 <SystemClock_Config+0x16c>)
 8026cac:	699b      	ldr	r3, [r3, #24]
 8026cae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8026cb2:	60bb      	str	r3, [r7, #8]
 8026cb4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8026cb6:	bf00      	nop
 8026cb8:	4b43      	ldr	r3, [pc, #268]	; (8026dc8 <SystemClock_Config+0x16c>)
 8026cba:	699b      	ldr	r3, [r3, #24]
 8026cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026cc4:	d1f8      	bne.n	8026cb8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8026cc6:	4b41      	ldr	r3, [pc, #260]	; (8026dcc <SystemClock_Config+0x170>)
 8026cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8026ccc:	4a3f      	ldr	r2, [pc, #252]	; (8026dcc <SystemClock_Config+0x170>)
 8026cce:	f043 0302 	orr.w	r3, r3, #2
 8026cd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8026cd6:	4b3d      	ldr	r3, [pc, #244]	; (8026dcc <SystemClock_Config+0x170>)
 8026cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8026cdc:	f003 0302 	and.w	r3, r3, #2
 8026ce0:	607b      	str	r3, [r7, #4]
 8026ce2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8026ce4:	2300      	movs	r3, #0
 8026ce6:	603b      	str	r3, [r7, #0]
 8026ce8:	4b37      	ldr	r3, [pc, #220]	; (8026dc8 <SystemClock_Config+0x16c>)
 8026cea:	699b      	ldr	r3, [r3, #24]
 8026cec:	4a36      	ldr	r2, [pc, #216]	; (8026dc8 <SystemClock_Config+0x16c>)
 8026cee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8026cf2:	6193      	str	r3, [r2, #24]
 8026cf4:	4b34      	ldr	r3, [pc, #208]	; (8026dc8 <SystemClock_Config+0x16c>)
 8026cf6:	699b      	ldr	r3, [r3, #24]
 8026cf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8026cfc:	603b      	str	r3, [r7, #0]
 8026cfe:	4b31      	ldr	r3, [pc, #196]	; (8026dc4 <SystemClock_Config+0x168>)
 8026d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d02:	4a30      	ldr	r2, [pc, #192]	; (8026dc4 <SystemClock_Config+0x168>)
 8026d04:	f043 0301 	orr.w	r3, r3, #1
 8026d08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8026d0a:	4b2e      	ldr	r3, [pc, #184]	; (8026dc4 <SystemClock_Config+0x168>)
 8026d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d0e:	f003 0301 	and.w	r3, r3, #1
 8026d12:	603b      	str	r3, [r7, #0]
 8026d14:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8026d16:	bf00      	nop
 8026d18:	4b2b      	ldr	r3, [pc, #172]	; (8026dc8 <SystemClock_Config+0x16c>)
 8026d1a:	699b      	ldr	r3, [r3, #24]
 8026d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026d24:	d1f8      	bne.n	8026d18 <SystemClock_Config+0xbc>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8026d26:	f004 f8fb 	bl	802af20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8026d2a:	f003 fa15 	bl	802a158 <HAL_GetREVID>
 8026d2e:	4b27      	ldr	r3, [pc, #156]	; (8026dcc <SystemClock_Config+0x170>)
 8026d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026d32:	4a26      	ldr	r2, [pc, #152]	; (8026dcc <SystemClock_Config+0x170>)
 8026d34:	f023 0318 	bic.w	r3, r3, #24
 8026d38:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8026d3a:	2305      	movs	r3, #5
 8026d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8026d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8026d42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8026d44:	2301      	movs	r3, #1
 8026d46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8026d48:	2302      	movs	r3, #2
 8026d4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8026d4c:	2302      	movs	r3, #2
 8026d4e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8026d50:	2305      	movs	r3, #5
 8026d52:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8026d54:	23c0      	movs	r3, #192	; 0xc0
 8026d56:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8026d58:	2302      	movs	r3, #2
 8026d5a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8026d5c:	2301      	movs	r3, #1
 8026d5e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8026d60:	2302      	movs	r3, #2
 8026d62:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8026d64:	2308      	movs	r3, #8
 8026d66:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8026d68:	2300      	movs	r3, #0
 8026d6a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8026d6c:	2300      	movs	r3, #0
 8026d6e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8026d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8026d74:	4618      	mov	r0, r3
 8026d76:	f004 f91d 	bl	802afb4 <HAL_RCC_OscConfig>
 8026d7a:	4603      	mov	r3, r0
 8026d7c:	2b00      	cmp	r3, #0
 8026d7e:	d001      	beq.n	8026d84 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8026d80:	f000 ff8f 	bl	8027ca2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8026d84:	233f      	movs	r3, #63	; 0x3f
 8026d86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8026d88:	2303      	movs	r3, #3
 8026d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8026d8c:	2300      	movs	r3, #0
 8026d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8026d90:	2308      	movs	r3, #8
 8026d92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8026d94:	2340      	movs	r3, #64	; 0x40
 8026d96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8026d98:	2340      	movs	r3, #64	; 0x40
 8026d9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8026d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8026da2:	2340      	movs	r3, #64	; 0x40
 8026da4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8026da6:	f107 030c 	add.w	r3, r7, #12
 8026daa:	2104      	movs	r1, #4
 8026dac:	4618      	mov	r0, r3
 8026dae:	f004 fd5b 	bl	802b868 <HAL_RCC_ClockConfig>
 8026db2:	4603      	mov	r3, r0
 8026db4:	2b00      	cmp	r3, #0
 8026db6:	d001      	beq.n	8026dbc <SystemClock_Config+0x160>
  {
    Error_Handler();
 8026db8:	f000 ff73 	bl	8027ca2 <Error_Handler>
  }
}
 8026dbc:	bf00      	nop
 8026dbe:	3778      	adds	r7, #120	; 0x78
 8026dc0:	46bd      	mov	sp, r7
 8026dc2:	bd80      	pop	{r7, pc}
 8026dc4:	58000400 	.word	0x58000400
 8026dc8:	58024800 	.word	0x58024800
 8026dcc:	58024400 	.word	0x58024400

08026dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8026dd0:	b580      	push	{r7, lr}
 8026dd2:	b08e      	sub	sp, #56	; 0x38
 8026dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026dda:	2200      	movs	r2, #0
 8026ddc:	601a      	str	r2, [r3, #0]
 8026dde:	605a      	str	r2, [r3, #4]
 8026de0:	609a      	str	r2, [r3, #8]
 8026de2:	60da      	str	r2, [r3, #12]
 8026de4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8026de6:	4b95      	ldr	r3, [pc, #596]	; (802703c <MX_GPIO_Init+0x26c>)
 8026de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026dec:	4a93      	ldr	r2, [pc, #588]	; (802703c <MX_GPIO_Init+0x26c>)
 8026dee:	f043 0304 	orr.w	r3, r3, #4
 8026df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026df6:	4b91      	ldr	r3, [pc, #580]	; (802703c <MX_GPIO_Init+0x26c>)
 8026df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026dfc:	f003 0304 	and.w	r3, r3, #4
 8026e00:	623b      	str	r3, [r7, #32]
 8026e02:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8026e04:	4b8d      	ldr	r3, [pc, #564]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026e0a:	4a8c      	ldr	r2, [pc, #560]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e0c:	f043 0320 	orr.w	r3, r3, #32
 8026e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026e14:	4b89      	ldr	r3, [pc, #548]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026e1a:	f003 0320 	and.w	r3, r3, #32
 8026e1e:	61fb      	str	r3, [r7, #28]
 8026e20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8026e22:	4b86      	ldr	r3, [pc, #536]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026e28:	4a84      	ldr	r2, [pc, #528]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026e32:	4b82      	ldr	r3, [pc, #520]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026e3c:	61bb      	str	r3, [r7, #24]
 8026e3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8026e40:	4b7e      	ldr	r3, [pc, #504]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026e46:	4a7d      	ldr	r2, [pc, #500]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e48:	f043 0301 	orr.w	r3, r3, #1
 8026e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026e50:	4b7a      	ldr	r3, [pc, #488]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026e56:	f003 0301 	and.w	r3, r3, #1
 8026e5a:	617b      	str	r3, [r7, #20]
 8026e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8026e5e:	4b77      	ldr	r3, [pc, #476]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026e64:	4a75      	ldr	r2, [pc, #468]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e66:	f043 0302 	orr.w	r3, r3, #2
 8026e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026e6e:	4b73      	ldr	r3, [pc, #460]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026e74:	f003 0302 	and.w	r3, r3, #2
 8026e78:	613b      	str	r3, [r7, #16]
 8026e7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8026e7c:	4b6f      	ldr	r3, [pc, #444]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026e82:	4a6e      	ldr	r2, [pc, #440]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026e8c:	4b6b      	ldr	r3, [pc, #428]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026e96:	60fb      	str	r3, [r7, #12]
 8026e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8026e9a:	4b68      	ldr	r3, [pc, #416]	; (802703c <MX_GPIO_Init+0x26c>)
 8026e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026ea0:	4a66      	ldr	r2, [pc, #408]	; (802703c <MX_GPIO_Init+0x26c>)
 8026ea2:	f043 0310 	orr.w	r3, r3, #16
 8026ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026eaa:	4b64      	ldr	r3, [pc, #400]	; (802703c <MX_GPIO_Init+0x26c>)
 8026eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026eb0:	f003 0310 	and.w	r3, r3, #16
 8026eb4:	60bb      	str	r3, [r7, #8]
 8026eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8026eb8:	4b60      	ldr	r3, [pc, #384]	; (802703c <MX_GPIO_Init+0x26c>)
 8026eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026ebe:	4a5f      	ldr	r2, [pc, #380]	; (802703c <MX_GPIO_Init+0x26c>)
 8026ec0:	f043 0308 	orr.w	r3, r3, #8
 8026ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8026ec8:	4b5c      	ldr	r3, [pc, #368]	; (802703c <MX_GPIO_Init+0x26c>)
 8026eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8026ece:	f003 0308 	and.w	r3, r3, #8
 8026ed2:	607b      	str	r3, [r7, #4]
 8026ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, UPS_CHK_Pin, GPIO_PIN_RESET);									//Default Low / Active High	 New Board
 8026ed6:	2200      	movs	r2, #0
 8026ed8:	2140      	movs	r1, #64	; 0x40
 8026eda:	4859      	ldr	r0, [pc, #356]	; (8027040 <MX_GPIO_Init+0x270>)
 8026edc:	f003 ffec 	bl	802aeb8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOF, UPS_SHDN_Pin, GPIO_PIN_SET);										//Default High / Active Low	 New Board
 8026ee0:	2201      	movs	r2, #1
 8026ee2:	2180      	movs	r1, #128	; 0x80
 8026ee4:	4856      	ldr	r0, [pc, #344]	; (8027040 <MX_GPIO_Init+0x270>)
 8026ee6:	f003 ffe7 	bl	802aeb8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(WDT_CONTROL_GPIO_Port, WDT_CONTROL_Pin, GPIO_PIN_RESET);				//WDT Enalbe   New Board
 8026eea:	2200      	movs	r2, #0
 8026eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8026ef0:	4854      	ldr	r0, [pc, #336]	; (8027044 <MX_GPIO_Init+0x274>)
 8026ef2:	f003 ffe1 	bl	802aeb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Serial_flash_CS_Pin|BUZZ_CON_Pin, GPIO_PIN_RESET);
 8026ef6:	2200      	movs	r2, #0
 8026ef8:	f241 0110 	movw	r1, #4112	; 0x1010
 8026efc:	4851      	ldr	r0, [pc, #324]	; (8027044 <MX_GPIO_Init+0x274>)
 8026efe:	f003 ffdb 	bl	802aeb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, STS_LED1_Pin|STS_LED2_Pin|STS_LED3_Pin|STS_LED4_Pin, GPIO_PIN_RESET);
 8026f02:	2200      	movs	r2, #0
 8026f04:	f44f 711c 	mov.w	r1, #624	; 0x270
 8026f08:	484f      	ldr	r0, [pc, #316]	; (8027048 <MX_GPIO_Init+0x278>)
 8026f0a:	f003 ffd5 	bl	802aeb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EMG_GPIO_Port, EMG_Pin, GPIO_PIN_RESET);
 8026f0e:	2200      	movs	r2, #0
 8026f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8026f14:	484d      	ldr	r0, [pc, #308]	; (802704c <MX_GPIO_Init+0x27c>)
 8026f16:	f003 ffcf 	bl	802aeb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WDT_GPIO_Port, WDT_Pin, GPIO_PIN_SET);
 8026f1a:	2201      	movs	r2, #1
 8026f1c:	2104      	movs	r1, #4
 8026f1e:	484c      	ldr	r0, [pc, #304]	; (8027050 <MX_GPIO_Init+0x280>)
 8026f20:	f003 ffca 	bl	802aeb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UPS_CHK_Pin UPS_SHDN_Pin */
  GPIO_InitStruct.Pin = UPS_CHK_Pin|UPS_SHDN_Pin;
 8026f24:	23c0      	movs	r3, #192	; 0xc0
 8026f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026f28:	2301      	movs	r3, #1
 8026f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026f2c:	2300      	movs	r3, #0
 8026f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026f30:	2300      	movs	r3, #0
 8026f32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8026f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026f38:	4619      	mov	r1, r3
 8026f3a:	4841      	ldr	r0, [pc, #260]	; (8027040 <MX_GPIO_Init+0x270>)
 8026f3c:	f003 fcea 	bl	802a914 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = WDT_CONTROL_Pin;
 8026f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8026f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026f46:	2301      	movs	r3, #1
 8026f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026f4a:	2300      	movs	r3, #0
 8026f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026f4e:	2300      	movs	r3, #0
 8026f50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WDT_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8026f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026f56:	4619      	mov	r1, r3
 8026f58:	483a      	ldr	r0, [pc, #232]	; (8027044 <MX_GPIO_Init+0x274>)
 8026f5a:	f003 fcdb 	bl	802a914 <HAL_GPIO_Init>

  /*Configure GPIO pins : nUPS_PWR_FAIL_Pin nUPS_LOW_BAT_Pin nUPS_CONN_Pin */
  GPIO_InitStruct.Pin = nUPS_PWR_FAIL_Pin|nUPS_LOW_BAT_Pin|nUPS_CONN_Pin;
 8026f5e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8026f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026f64:	2300      	movs	r3, #0
 8026f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026f68:	2301      	movs	r3, #1
 8026f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8026f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026f70:	4619      	mov	r1, r3
 8026f72:	4833      	ldr	r0, [pc, #204]	; (8027040 <MX_GPIO_Init+0x270>)
 8026f74:	f003 fcce 	bl	802a914 <HAL_GPIO_Init>

  /*Configure GPIO pins : SP_SW1_Pin SP_SW2_Pin */
  GPIO_InitStruct.Pin = SP_SW1_Pin|SP_SW2_Pin;
 8026f78:	2303      	movs	r3, #3
 8026f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026f7c:	2300      	movs	r3, #0
 8026f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026f80:	2301      	movs	r3, #1
 8026f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8026f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026f88:	4619      	mov	r1, r3
 8026f8a:	482f      	ldr	r0, [pc, #188]	; (8027048 <MX_GPIO_Init+0x278>)
 8026f8c:	f003 fcc2 	bl	802a914 <HAL_GPIO_Init>

  /*Configure GPIO pins : Serial_flash_CS_Pin BUZZ_CON_Pin */
  GPIO_InitStruct.Pin = Serial_flash_CS_Pin|BUZZ_CON_Pin;
 8026f90:	f241 0310 	movw	r3, #4112	; 0x1010
 8026f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026f96:	2301      	movs	r3, #1
 8026f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026f9a:	2300      	movs	r3, #0
 8026f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026f9e:	2300      	movs	r3, #0
 8026fa0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026fa6:	4619      	mov	r1, r3
 8026fa8:	4826      	ldr	r0, [pc, #152]	; (8027044 <MX_GPIO_Init+0x274>)
 8026faa:	f003 fcb3 	bl	802a914 <HAL_GPIO_Init>

  /*Configure GPIO pins : STS_LED1_Pin STS_LED2_Pin STS_LED3_Pin STS_LED4_Pin */
  GPIO_InitStruct.Pin = STS_LED1_Pin|STS_LED2_Pin|STS_LED3_Pin|STS_LED4_Pin;
 8026fae:	f44f 731c 	mov.w	r3, #624	; 0x270
 8026fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026fb4:	2301      	movs	r3, #1
 8026fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026fb8:	2300      	movs	r3, #0
 8026fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026fbc:	2300      	movs	r3, #0
 8026fbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8026fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026fc4:	4619      	mov	r1, r3
 8026fc6:	4820      	ldr	r0, [pc, #128]	; (8027048 <MX_GPIO_Init+0x278>)
 8026fc8:	f003 fca4 	bl	802a914 <HAL_GPIO_Init>

  /*Configure GPIO pins : DipSW1_Pin DipSW2_Pin DipSW3_Pin DipSW4_Pin
                           DipSW5_Pin DipSW6_Pin DipSW7_Pin DipSW8_Pin */
  GPIO_InitStruct.Pin = DipSW1_Pin|DipSW2_Pin|DipSW3_Pin|DipSW4_Pin
 8026fcc:	23ff      	movs	r3, #255	; 0xff
 8026fce:	627b      	str	r3, [r7, #36]	; 0x24
                          |DipSW5_Pin|DipSW6_Pin|DipSW7_Pin|DipSW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026fd0:	2300      	movs	r3, #0
 8026fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026fd4:	2301      	movs	r3, #1
 8026fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DipSW_GPIO_Port, &GPIO_InitStruct);
 8026fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026fdc:	4619      	mov	r1, r3
 8026fde:	481b      	ldr	r0, [pc, #108]	; (802704c <MX_GPIO_Init+0x27c>)
 8026fe0:	f003 fc98 	bl	802a914 <HAL_GPIO_Init>

  /*Configure GPIO pins : SP_SEN1_Pin SP_SEN2_Pin */
  GPIO_InitStruct.Pin = SP_SEN1_Pin|SP_SEN2_Pin;
 8026fe4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8026fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026fea:	2300      	movs	r3, #0
 8026fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026fee:	2301      	movs	r3, #1
 8026ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026ff6:	4619      	mov	r1, r3
 8026ff8:	4812      	ldr	r0, [pc, #72]	; (8027044 <MX_GPIO_Init+0x274>)
 8026ffa:	f003 fc8b 	bl	802a914 <HAL_GPIO_Init>

  /*Configure GPIO pin : WDT_Pin */
  GPIO_InitStruct.Pin = WDT_Pin;
 8026ffe:	2304      	movs	r3, #4
 8027000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8027002:	2301      	movs	r3, #1
 8027004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027006:	2300      	movs	r3, #0
 8027008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802700a:	2300      	movs	r3, #0
 802700c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WDT_GPIO_Port, &GPIO_InitStruct);
 802700e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027012:	4619      	mov	r1, r3
 8027014:	480e      	ldr	r0, [pc, #56]	; (8027050 <MX_GPIO_Init+0x280>)
 8027016:	f003 fc7d 	bl	802a914 <HAL_GPIO_Init>


  /*Configure GPIO pin : EMG_Pin */
  GPIO_InitStruct.Pin = EMG_Pin;
 802701a:	f44f 7300 	mov.w	r3, #512	; 0x200
 802701e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8027020:	2300      	movs	r3, #0
 8027022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8027024:	2301      	movs	r3, #1
 8027026:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EMG_GPIO_Port, &GPIO_InitStruct);
 8027028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802702c:	4619      	mov	r1, r3
 802702e:	4807      	ldr	r0, [pc, #28]	; (802704c <MX_GPIO_Init+0x27c>)
 8027030:	f003 fc70 	bl	802a914 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8027034:	bf00      	nop
 8027036:	3738      	adds	r7, #56	; 0x38
 8027038:	46bd      	mov	sp, r7
 802703a:	bd80      	pop	{r7, pc}
 802703c:	58024400 	.word	0x58024400
 8027040:	58021400 	.word	0x58021400
 8027044:	58020000 	.word	0x58020000
 8027048:	58020800 	.word	0x58020800
 802704c:	58020400 	.word	0x58020400
 8027050:	58020c00 	.word	0x58020c00

08027054 <MX_FMC_Init>:
 * @retval None
 */


static void MX_FMC_Init(void)
{
 8027054:	b580      	push	{r7, lr}
 8027056:	b088      	sub	sp, #32
 8027058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 802705a:	1d3b      	adds	r3, r7, #4
 802705c:	2200      	movs	r2, #0
 802705e:	601a      	str	r2, [r3, #0]
 8027060:	605a      	str	r2, [r3, #4]
 8027062:	609a      	str	r2, [r3, #8]
 8027064:	60da      	str	r2, [r3, #12]
 8027066:	611a      	str	r2, [r3, #16]
 8027068:	615a      	str	r2, [r3, #20]
 802706a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 802706c:	4b4f      	ldr	r3, [pc, #316]	; (80271ac <MX_FMC_Init+0x158>)
 802706e:	4a50      	ldr	r2, [pc, #320]	; (80271b0 <MX_FMC_Init+0x15c>)
 8027070:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8027072:	4b4e      	ldr	r3, [pc, #312]	; (80271ac <MX_FMC_Init+0x158>)
 8027074:	4a4f      	ldr	r2, [pc, #316]	; (80271b4 <MX_FMC_Init+0x160>)
 8027076:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8027078:	4b4c      	ldr	r3, [pc, #304]	; (80271ac <MX_FMC_Init+0x158>)
 802707a:	2200      	movs	r2, #0
 802707c:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 802707e:	4b4b      	ldr	r3, [pc, #300]	; (80271ac <MX_FMC_Init+0x158>)
 8027080:	2200      	movs	r2, #0
 8027082:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8027084:	4b49      	ldr	r3, [pc, #292]	; (80271ac <MX_FMC_Init+0x158>)
 8027086:	2200      	movs	r2, #0
 8027088:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 802708a:	4b48      	ldr	r3, [pc, #288]	; (80271ac <MX_FMC_Init+0x158>)
 802708c:	2200      	movs	r2, #0
 802708e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8027090:	4b46      	ldr	r3, [pc, #280]	; (80271ac <MX_FMC_Init+0x158>)
 8027092:	2200      	movs	r2, #0
 8027094:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8027096:	4b45      	ldr	r3, [pc, #276]	; (80271ac <MX_FMC_Init+0x158>)
 8027098:	2200      	movs	r2, #0
 802709a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 802709c:	4b43      	ldr	r3, [pc, #268]	; (80271ac <MX_FMC_Init+0x158>)
 802709e:	2200      	movs	r2, #0
 80270a0:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80270a2:	4b42      	ldr	r3, [pc, #264]	; (80271ac <MX_FMC_Init+0x158>)
 80270a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80270a8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80270aa:	4b40      	ldr	r3, [pc, #256]	; (80271ac <MX_FMC_Init+0x158>)
 80270ac:	2200      	movs	r2, #0
 80270ae:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80270b0:	4b3e      	ldr	r3, [pc, #248]	; (80271ac <MX_FMC_Init+0x158>)
 80270b2:	2200      	movs	r2, #0
 80270b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80270b6:	4b3d      	ldr	r3, [pc, #244]	; (80271ac <MX_FMC_Init+0x158>)
 80270b8:	2200      	movs	r2, #0
 80270ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80270bc:	4b3b      	ldr	r3, [pc, #236]	; (80271ac <MX_FMC_Init+0x158>)
 80270be:	2200      	movs	r2, #0
 80270c0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 80270c2:	4b3a      	ldr	r3, [pc, #232]	; (80271ac <MX_FMC_Init+0x158>)
 80270c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80270c8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80270ca:	4b38      	ldr	r3, [pc, #224]	; (80271ac <MX_FMC_Init+0x158>)
 80270cc:	2200      	movs	r2, #0
 80270ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80270d0:	4b36      	ldr	r3, [pc, #216]	; (80271ac <MX_FMC_Init+0x158>)
 80270d2:	2200      	movs	r2, #0
 80270d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80270d6:	230f      	movs	r3, #15
 80270d8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80270da:	230f      	movs	r3, #15
 80270dc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80270de:	23ff      	movs	r3, #255	; 0xff
 80270e0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80270e2:	230f      	movs	r3, #15
 80270e4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80270e6:	2310      	movs	r3, #16
 80270e8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80270ea:	2311      	movs	r3, #17
 80270ec:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80270ee:	2300      	movs	r3, #0
 80270f0:	61fb      	str	r3, [r7, #28]


  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80270f2:	1d3b      	adds	r3, r7, #4
 80270f4:	2200      	movs	r2, #0
 80270f6:	4619      	mov	r1, r3
 80270f8:	482c      	ldr	r0, [pc, #176]	; (80271ac <MX_FMC_Init+0x158>)
 80270fa:	f007 fbb1 	bl	802e860 <HAL_SRAM_Init>
 80270fe:	4603      	mov	r3, r0
 8027100:	2b00      	cmp	r3, #0
 8027102:	d001      	beq.n	8027108 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8027104:	f000 fdcd 	bl	8027ca2 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8027108:	4b2b      	ldr	r3, [pc, #172]	; (80271b8 <MX_FMC_Init+0x164>)
 802710a:	4a29      	ldr	r2, [pc, #164]	; (80271b0 <MX_FMC_Init+0x15c>)
 802710c:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 802710e:	4b2a      	ldr	r3, [pc, #168]	; (80271b8 <MX_FMC_Init+0x164>)
 8027110:	4a28      	ldr	r2, [pc, #160]	; (80271b4 <MX_FMC_Init+0x160>)
 8027112:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK2;
 8027114:	4b28      	ldr	r3, [pc, #160]	; (80271b8 <MX_FMC_Init+0x164>)
 8027116:	2202      	movs	r2, #2
 8027118:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 802711a:	4b27      	ldr	r3, [pc, #156]	; (80271b8 <MX_FMC_Init+0x164>)
 802711c:	2200      	movs	r2, #0
 802711e:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8027120:	4b25      	ldr	r3, [pc, #148]	; (80271b8 <MX_FMC_Init+0x164>)
 8027122:	2200      	movs	r2, #0
 8027124:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8027126:	4b24      	ldr	r3, [pc, #144]	; (80271b8 <MX_FMC_Init+0x164>)
 8027128:	2200      	movs	r2, #0
 802712a:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 802712c:	4b22      	ldr	r3, [pc, #136]	; (80271b8 <MX_FMC_Init+0x164>)
 802712e:	2200      	movs	r2, #0
 8027130:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8027132:	4b21      	ldr	r3, [pc, #132]	; (80271b8 <MX_FMC_Init+0x164>)
 8027134:	2200      	movs	r2, #0
 8027136:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8027138:	4b1f      	ldr	r3, [pc, #124]	; (80271b8 <MX_FMC_Init+0x164>)
 802713a:	2200      	movs	r2, #0
 802713c:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 802713e:	4b1e      	ldr	r3, [pc, #120]	; (80271b8 <MX_FMC_Init+0x164>)
 8027140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8027144:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8027146:	4b1c      	ldr	r3, [pc, #112]	; (80271b8 <MX_FMC_Init+0x164>)
 8027148:	2200      	movs	r2, #0
 802714a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 802714c:	4b1a      	ldr	r3, [pc, #104]	; (80271b8 <MX_FMC_Init+0x164>)
 802714e:	2200      	movs	r2, #0
 8027150:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8027152:	4b19      	ldr	r3, [pc, #100]	; (80271b8 <MX_FMC_Init+0x164>)
 8027154:	2200      	movs	r2, #0
 8027156:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8027158:	4b17      	ldr	r3, [pc, #92]	; (80271b8 <MX_FMC_Init+0x164>)
 802715a:	2200      	movs	r2, #0
 802715c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 802715e:	4b16      	ldr	r3, [pc, #88]	; (80271b8 <MX_FMC_Init+0x164>)
 8027160:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8027164:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8027166:	4b14      	ldr	r3, [pc, #80]	; (80271b8 <MX_FMC_Init+0x164>)
 8027168:	2200      	movs	r2, #0
 802716a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 802716c:	4b12      	ldr	r3, [pc, #72]	; (80271b8 <MX_FMC_Init+0x164>)
 802716e:	2200      	movs	r2, #0
 8027170:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8027172:	230f      	movs	r3, #15
 8027174:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8027176:	230f      	movs	r3, #15
 8027178:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 802717a:	23ff      	movs	r3, #255	; 0xff
 802717c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 802717e:	230f      	movs	r3, #15
 8027180:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8027182:	2310      	movs	r3, #16
 8027184:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8027186:	2311      	movs	r3, #17
 8027188:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 802718a:	2300      	movs	r3, #0
 802718c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 802718e:	1d3b      	adds	r3, r7, #4
 8027190:	2200      	movs	r2, #0
 8027192:	4619      	mov	r1, r3
 8027194:	4808      	ldr	r0, [pc, #32]	; (80271b8 <MX_FMC_Init+0x164>)
 8027196:	f007 fb63 	bl	802e860 <HAL_SRAM_Init>
 802719a:	4603      	mov	r3, r0
 802719c:	2b00      	cmp	r3, #0
 802719e:	d001      	beq.n	80271a4 <MX_FMC_Init+0x150>
  {
    Error_Handler( );
 80271a0:	f000 fd7f 	bl	8027ca2 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80271a4:	bf00      	nop
 80271a6:	3720      	adds	r7, #32
 80271a8:	46bd      	mov	sp, r7
 80271aa:	bd80      	pop	{r7, pc}
 80271ac:	24001d8c 	.word	0x24001d8c
 80271b0:	52004000 	.word	0x52004000
 80271b4:	52004104 	.word	0x52004104
 80271b8:	24001dd8 	.word	0x24001dd8

080271bc <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 80271bc:	b580      	push	{r7, lr}
 80271be:	b084      	sub	sp, #16
 80271c0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM7_Init 0 */

    /* USER CODE END TIM7_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80271c2:	1d3b      	adds	r3, r7, #4
 80271c4:	2200      	movs	r2, #0
 80271c6:	601a      	str	r2, [r3, #0]
 80271c8:	605a      	str	r2, [r3, #4]
 80271ca:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM7_Init 1 */

    /* USER CODE END TIM7_Init 1 */
    htim7.Instance = TIM7;
 80271cc:	4b14      	ldr	r3, [pc, #80]	; (8027220 <MX_TIM7_Init+0x64>)
 80271ce:	4a15      	ldr	r2, [pc, #84]	; (8027224 <MX_TIM7_Init+0x68>)
 80271d0:	601a      	str	r2, [r3, #0]
    htim7.Init.Prescaler = 239;
 80271d2:	4b13      	ldr	r3, [pc, #76]	; (8027220 <MX_TIM7_Init+0x64>)
 80271d4:	22ef      	movs	r2, #239	; 0xef
 80271d6:	605a      	str	r2, [r3, #4]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80271d8:	4b11      	ldr	r3, [pc, #68]	; (8027220 <MX_TIM7_Init+0x64>)
 80271da:	2200      	movs	r2, #0
 80271dc:	609a      	str	r2, [r3, #8]
    htim7.Init.Period = 999;
 80271de:	4b10      	ldr	r3, [pc, #64]	; (8027220 <MX_TIM7_Init+0x64>)
 80271e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80271e4:	60da      	str	r2, [r3, #12]
    htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80271e6:	4b0e      	ldr	r3, [pc, #56]	; (8027220 <MX_TIM7_Init+0x64>)
 80271e8:	2200      	movs	r2, #0
 80271ea:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80271ec:	480c      	ldr	r0, [pc, #48]	; (8027220 <MX_TIM7_Init+0x64>)
 80271ee:	f007 fb87 	bl	802e900 <HAL_TIM_Base_Init>
 80271f2:	4603      	mov	r3, r0
 80271f4:	2b00      	cmp	r3, #0
 80271f6:	d001      	beq.n	80271fc <MX_TIM7_Init+0x40>
    {
        Error_Handler();
 80271f8:	f000 fd53 	bl	8027ca2 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80271fc:	2300      	movs	r3, #0
 80271fe:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8027200:	2300      	movs	r3, #0
 8027202:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8027204:	1d3b      	adds	r3, r7, #4
 8027206:	4619      	mov	r1, r3
 8027208:	4805      	ldr	r0, [pc, #20]	; (8027220 <MX_TIM7_Init+0x64>)
 802720a:	f007 fe2b 	bl	802ee64 <HAL_TIMEx_MasterConfigSynchronization>
 802720e:	4603      	mov	r3, r0
 8027210:	2b00      	cmp	r3, #0
 8027212:	d001      	beq.n	8027218 <MX_TIM7_Init+0x5c>
    {
        Error_Handler();
 8027214:	f000 fd45 	bl	8027ca2 <Error_Handler>
    }
    /* USER CODE BEGIN TIM7_Init 2 */

    /* USER CODE END TIM7_Init 2 */

}
 8027218:	bf00      	nop
 802721a:	3710      	adds	r7, #16
 802721c:	46bd      	mov	sp, r7
 802721e:	bd80      	pop	{r7, pc}
 8027220:	24001a5c 	.word	0x24001a5c
 8027224:	40001400 	.word	0x40001400

08027228 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8027228:	b580      	push	{r7, lr}
 802722a:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 802722c:	4b22      	ldr	r3, [pc, #136]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 802722e:	4a23      	ldr	r2, [pc, #140]	; (80272bc <MX_USART1_UART_Init+0x94>)
 8027230:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8027232:	4b21      	ldr	r3, [pc, #132]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 8027234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8027238:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 802723a:	4b1f      	ldr	r3, [pc, #124]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 802723c:	2200      	movs	r2, #0
 802723e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8027240:	4b1d      	ldr	r3, [pc, #116]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 8027242:	2200      	movs	r2, #0
 8027244:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8027246:	4b1c      	ldr	r3, [pc, #112]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 8027248:	2200      	movs	r2, #0
 802724a:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 802724c:	4b1a      	ldr	r3, [pc, #104]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 802724e:	220c      	movs	r2, #12
 8027250:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8027252:	4b19      	ldr	r3, [pc, #100]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 8027254:	2200      	movs	r2, #0
 8027256:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8027258:	4b17      	ldr	r3, [pc, #92]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 802725a:	2200      	movs	r2, #0
 802725c:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802725e:	4b16      	ldr	r3, [pc, #88]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 8027260:	2200      	movs	r2, #0
 8027262:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8027264:	4b14      	ldr	r3, [pc, #80]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 8027266:	2200      	movs	r2, #0
 8027268:	625a      	str	r2, [r3, #36]	; 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802726a:	4b13      	ldr	r3, [pc, #76]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 802726c:	2200      	movs	r2, #0
 802726e:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8027270:	4811      	ldr	r0, [pc, #68]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 8027272:	f007 fea3 	bl	802efbc <HAL_UART_Init>
 8027276:	4603      	mov	r3, r0
 8027278:	2b00      	cmp	r3, #0
 802727a:	d001      	beq.n	8027280 <MX_USART1_UART_Init+0x58>
    {
        Error_Handler();
 802727c:	f000 fd11 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8027280:	2100      	movs	r1, #0
 8027282:	480d      	ldr	r0, [pc, #52]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 8027284:	f008 fee5 	bl	8030052 <HAL_UARTEx_SetTxFifoThreshold>
 8027288:	4603      	mov	r3, r0
 802728a:	2b00      	cmp	r3, #0
 802728c:	d001      	beq.n	8027292 <MX_USART1_UART_Init+0x6a>
    {
        Error_Handler();
 802728e:	f000 fd08 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8027292:	2100      	movs	r1, #0
 8027294:	4808      	ldr	r0, [pc, #32]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 8027296:	f008 ff1a 	bl	80300ce <HAL_UARTEx_SetRxFifoThreshold>
 802729a:	4603      	mov	r3, r0
 802729c:	2b00      	cmp	r3, #0
 802729e:	d001      	beq.n	80272a4 <MX_USART1_UART_Init+0x7c>
    {
        Error_Handler();
 80272a0:	f000 fcff 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80272a4:	4804      	ldr	r0, [pc, #16]	; (80272b8 <MX_USART1_UART_Init+0x90>)
 80272a6:	f008 fe9b 	bl	802ffe0 <HAL_UARTEx_DisableFifoMode>
 80272aa:	4603      	mov	r3, r0
 80272ac:	2b00      	cmp	r3, #0
 80272ae:	d001      	beq.n	80272b4 <MX_USART1_UART_Init+0x8c>
    {
        Error_Handler();
 80272b0:	f000 fcf7 	bl	8027ca2 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 80272b4:	bf00      	nop
 80272b6:	bd80      	pop	{r7, pc}
 80272b8:	24001bd0 	.word	0x24001bd0
 80272bc:	40011000 	.word	0x40011000

080272c0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80272c0:	b580      	push	{r7, lr}
 80272c2:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80272c4:	4b22      	ldr	r3, [pc, #136]	; (8027350 <MX_USART2_UART_Init+0x90>)
 80272c6:	4a23      	ldr	r2, [pc, #140]	; (8027354 <MX_USART2_UART_Init+0x94>)
 80272c8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80272ca:	4b21      	ldr	r3, [pc, #132]	; (8027350 <MX_USART2_UART_Init+0x90>)
 80272cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80272d0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80272d2:	4b1f      	ldr	r3, [pc, #124]	; (8027350 <MX_USART2_UART_Init+0x90>)
 80272d4:	2200      	movs	r2, #0
 80272d6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80272d8:	4b1d      	ldr	r3, [pc, #116]	; (8027350 <MX_USART2_UART_Init+0x90>)
 80272da:	2200      	movs	r2, #0
 80272dc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80272de:	4b1c      	ldr	r3, [pc, #112]	; (8027350 <MX_USART2_UART_Init+0x90>)
 80272e0:	2200      	movs	r2, #0
 80272e2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80272e4:	4b1a      	ldr	r3, [pc, #104]	; (8027350 <MX_USART2_UART_Init+0x90>)
 80272e6:	220c      	movs	r2, #12
 80272e8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80272ea:	4b19      	ldr	r3, [pc, #100]	; (8027350 <MX_USART2_UART_Init+0x90>)
 80272ec:	2200      	movs	r2, #0
 80272ee:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80272f0:	4b17      	ldr	r3, [pc, #92]	; (8027350 <MX_USART2_UART_Init+0x90>)
 80272f2:	2200      	movs	r2, #0
 80272f4:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80272f6:	4b16      	ldr	r3, [pc, #88]	; (8027350 <MX_USART2_UART_Init+0x90>)
 80272f8:	2200      	movs	r2, #0
 80272fa:	621a      	str	r2, [r3, #32]
    huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80272fc:	4b14      	ldr	r3, [pc, #80]	; (8027350 <MX_USART2_UART_Init+0x90>)
 80272fe:	2200      	movs	r2, #0
 8027300:	625a      	str	r2, [r3, #36]	; 0x24
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8027302:	4b13      	ldr	r3, [pc, #76]	; (8027350 <MX_USART2_UART_Init+0x90>)
 8027304:	2200      	movs	r2, #0
 8027306:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8027308:	4811      	ldr	r0, [pc, #68]	; (8027350 <MX_USART2_UART_Init+0x90>)
 802730a:	f007 fe57 	bl	802efbc <HAL_UART_Init>
 802730e:	4603      	mov	r3, r0
 8027310:	2b00      	cmp	r3, #0
 8027312:	d001      	beq.n	8027318 <MX_USART2_UART_Init+0x58>
    {
        Error_Handler();
 8027314:	f000 fcc5 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8027318:	2100      	movs	r1, #0
 802731a:	480d      	ldr	r0, [pc, #52]	; (8027350 <MX_USART2_UART_Init+0x90>)
 802731c:	f008 fe99 	bl	8030052 <HAL_UARTEx_SetTxFifoThreshold>
 8027320:	4603      	mov	r3, r0
 8027322:	2b00      	cmp	r3, #0
 8027324:	d001      	beq.n	802732a <MX_USART2_UART_Init+0x6a>
    {
        Error_Handler();
 8027326:	f000 fcbc 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802732a:	2100      	movs	r1, #0
 802732c:	4808      	ldr	r0, [pc, #32]	; (8027350 <MX_USART2_UART_Init+0x90>)
 802732e:	f008 fece 	bl	80300ce <HAL_UARTEx_SetRxFifoThreshold>
 8027332:	4603      	mov	r3, r0
 8027334:	2b00      	cmp	r3, #0
 8027336:	d001      	beq.n	802733c <MX_USART2_UART_Init+0x7c>
    {
        Error_Handler();
 8027338:	f000 fcb3 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802733c:	4804      	ldr	r0, [pc, #16]	; (8027350 <MX_USART2_UART_Init+0x90>)
 802733e:	f008 fe4f 	bl	802ffe0 <HAL_UARTEx_DisableFifoMode>
 8027342:	4603      	mov	r3, r0
 8027344:	2b00      	cmp	r3, #0
 8027346:	d001      	beq.n	802734c <MX_USART2_UART_Init+0x8c>
    {
        Error_Handler();
 8027348:	f000 fcab 	bl	8027ca2 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 802734c:	bf00      	nop
 802734e:	bd80      	pop	{r7, pc}
 8027350:	24001c64 	.word	0x24001c64
 8027354:	40004400 	.word	0x40004400

08027358 <MX_USART3_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8027358:	b580      	push	{r7, lr}
 802735a:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart3.Instance = USART3;
 802735c:	4b22      	ldr	r3, [pc, #136]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 802735e:	4a23      	ldr	r2, [pc, #140]	; (80273ec <MX_USART3_UART_Init+0x94>)
 8027360:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 57600;
 8027362:	4b21      	ldr	r3, [pc, #132]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 8027364:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8027368:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 802736a:	4b1f      	ldr	r3, [pc, #124]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 802736c:	2200      	movs	r2, #0
 802736e:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8027370:	4b1d      	ldr	r3, [pc, #116]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 8027372:	2200      	movs	r2, #0
 8027374:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8027376:	4b1c      	ldr	r3, [pc, #112]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 8027378:	2200      	movs	r2, #0
 802737a:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 802737c:	4b1a      	ldr	r3, [pc, #104]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 802737e:	220c      	movs	r2, #12
 8027380:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8027382:	4b19      	ldr	r3, [pc, #100]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 8027384:	2200      	movs	r2, #0
 8027386:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8027388:	4b17      	ldr	r3, [pc, #92]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 802738a:	2200      	movs	r2, #0
 802738c:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802738e:	4b16      	ldr	r3, [pc, #88]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 8027390:	2200      	movs	r2, #0
 8027392:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8027394:	4b14      	ldr	r3, [pc, #80]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 8027396:	2200      	movs	r2, #0
 8027398:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802739a:	4b13      	ldr	r3, [pc, #76]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 802739c:	2200      	movs	r2, #0
 802739e:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK)
 80273a0:	4811      	ldr	r0, [pc, #68]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 80273a2:	f007 fe0b 	bl	802efbc <HAL_UART_Init>
 80273a6:	4603      	mov	r3, r0
 80273a8:	2b00      	cmp	r3, #0
 80273aa:	d001      	beq.n	80273b0 <MX_USART3_UART_Init+0x58>
    {
        Error_Handler();
 80273ac:	f000 fc79 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80273b0:	2100      	movs	r1, #0
 80273b2:	480d      	ldr	r0, [pc, #52]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 80273b4:	f008 fe4d 	bl	8030052 <HAL_UARTEx_SetTxFifoThreshold>
 80273b8:	4603      	mov	r3, r0
 80273ba:	2b00      	cmp	r3, #0
 80273bc:	d001      	beq.n	80273c2 <MX_USART3_UART_Init+0x6a>
    {
        Error_Handler();
 80273be:	f000 fc70 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80273c2:	2100      	movs	r1, #0
 80273c4:	4808      	ldr	r0, [pc, #32]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 80273c6:	f008 fe82 	bl	80300ce <HAL_UARTEx_SetRxFifoThreshold>
 80273ca:	4603      	mov	r3, r0
 80273cc:	2b00      	cmp	r3, #0
 80273ce:	d001      	beq.n	80273d4 <MX_USART3_UART_Init+0x7c>
    {
        Error_Handler();
 80273d0:	f000 fc67 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80273d4:	4804      	ldr	r0, [pc, #16]	; (80273e8 <MX_USART3_UART_Init+0x90>)
 80273d6:	f008 fe03 	bl	802ffe0 <HAL_UARTEx_DisableFifoMode>
 80273da:	4603      	mov	r3, r0
 80273dc:	2b00      	cmp	r3, #0
 80273de:	d001      	beq.n	80273e4 <MX_USART3_UART_Init+0x8c>
    {
        Error_Handler();
 80273e0:	f000 fc5f 	bl	8027ca2 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */

}
 80273e4:	bf00      	nop
 80273e6:	bd80      	pop	{r7, pc}
 80273e8:	24001cf8 	.word	0x24001cf8
 80273ec:	40004800 	.word	0x40004800

080273f0 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80273f0:	b580      	push	{r7, lr}
 80273f2:	af00      	add	r7, sp, #0
    /* USER CODE END UART4_Init 0 */

    /* USER CODE BEGIN UART4_Init 1 */

    /* USER CODE END UART4_Init 1 */
    huart4.Instance = UART4;
 80273f4:	4b22      	ldr	r3, [pc, #136]	; (8027480 <MX_UART4_Init+0x90>)
 80273f6:	4a23      	ldr	r2, [pc, #140]	; (8027484 <MX_UART4_Init+0x94>)
 80273f8:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 38400;
 80273fa:	4b21      	ldr	r3, [pc, #132]	; (8027480 <MX_UART4_Init+0x90>)
 80273fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8027400:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8027402:	4b1f      	ldr	r3, [pc, #124]	; (8027480 <MX_UART4_Init+0x90>)
 8027404:	2200      	movs	r2, #0
 8027406:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 8027408:	4b1d      	ldr	r3, [pc, #116]	; (8027480 <MX_UART4_Init+0x90>)
 802740a:	2200      	movs	r2, #0
 802740c:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 802740e:	4b1c      	ldr	r3, [pc, #112]	; (8027480 <MX_UART4_Init+0x90>)
 8027410:	2200      	movs	r2, #0
 8027412:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 8027414:	4b1a      	ldr	r3, [pc, #104]	; (8027480 <MX_UART4_Init+0x90>)
 8027416:	220c      	movs	r2, #12
 8027418:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802741a:	4b19      	ldr	r3, [pc, #100]	; (8027480 <MX_UART4_Init+0x90>)
 802741c:	2200      	movs	r2, #0
 802741e:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8027420:	4b17      	ldr	r3, [pc, #92]	; (8027480 <MX_UART4_Init+0x90>)
 8027422:	2200      	movs	r2, #0
 8027424:	61da      	str	r2, [r3, #28]
    huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8027426:	4b16      	ldr	r3, [pc, #88]	; (8027480 <MX_UART4_Init+0x90>)
 8027428:	2200      	movs	r2, #0
 802742a:	621a      	str	r2, [r3, #32]
    huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802742c:	4b14      	ldr	r3, [pc, #80]	; (8027480 <MX_UART4_Init+0x90>)
 802742e:	2200      	movs	r2, #0
 8027430:	625a      	str	r2, [r3, #36]	; 0x24
    huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8027432:	4b13      	ldr	r3, [pc, #76]	; (8027480 <MX_UART4_Init+0x90>)
 8027434:	2200      	movs	r2, #0
 8027436:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart4) != HAL_OK)
 8027438:	4811      	ldr	r0, [pc, #68]	; (8027480 <MX_UART4_Init+0x90>)
 802743a:	f007 fdbf 	bl	802efbc <HAL_UART_Init>
 802743e:	4603      	mov	r3, r0
 8027440:	2b00      	cmp	r3, #0
 8027442:	d001      	beq.n	8027448 <MX_UART4_Init+0x58>
    {
        Error_Handler();
 8027444:	f000 fc2d 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8027448:	2100      	movs	r1, #0
 802744a:	480d      	ldr	r0, [pc, #52]	; (8027480 <MX_UART4_Init+0x90>)
 802744c:	f008 fe01 	bl	8030052 <HAL_UARTEx_SetTxFifoThreshold>
 8027450:	4603      	mov	r3, r0
 8027452:	2b00      	cmp	r3, #0
 8027454:	d001      	beq.n	802745a <MX_UART4_Init+0x6a>
    {
        Error_Handler();
 8027456:	f000 fc24 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802745a:	2100      	movs	r1, #0
 802745c:	4808      	ldr	r0, [pc, #32]	; (8027480 <MX_UART4_Init+0x90>)
 802745e:	f008 fe36 	bl	80300ce <HAL_UARTEx_SetRxFifoThreshold>
 8027462:	4603      	mov	r3, r0
 8027464:	2b00      	cmp	r3, #0
 8027466:	d001      	beq.n	802746c <MX_UART4_Init+0x7c>
    {
        Error_Handler();
 8027468:	f000 fc1b 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 802746c:	4804      	ldr	r0, [pc, #16]	; (8027480 <MX_UART4_Init+0x90>)
 802746e:	f008 fdb7 	bl	802ffe0 <HAL_UARTEx_DisableFifoMode>
 8027472:	4603      	mov	r3, r0
 8027474:	2b00      	cmp	r3, #0
 8027476:	d001      	beq.n	802747c <MX_UART4_Init+0x8c>
    {
        Error_Handler();
 8027478:	f000 fc13 	bl	8027ca2 <Error_Handler>
    }
    /* USER CODE BEGIN UART4_Init 2 */

    /* USER CODE END UART4_Init 2 */

}
 802747c:	bf00      	nop
 802747e:	bd80      	pop	{r7, pc}
 8027480:	24001aa8 	.word	0x24001aa8
 8027484:	40004c00 	.word	0x40004c00

08027488 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8027488:	b580      	push	{r7, lr}
 802748a:	af00      	add	r7, sp, #0
    /* USER CODE END UART5_Init 0 */

    /* USER CODE BEGIN UART5_Init 1 */

    /* USER CODE END UART5_Init 1 */
    huart5.Instance = UART5;
 802748c:	4b22      	ldr	r3, [pc, #136]	; (8027518 <MX_UART5_Init+0x90>)
 802748e:	4a23      	ldr	r2, [pc, #140]	; (802751c <MX_UART5_Init+0x94>)
 8027490:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate = 38400;
 8027492:	4b21      	ldr	r3, [pc, #132]	; (8027518 <MX_UART5_Init+0x90>)
 8027494:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8027498:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
 802749a:	4b1f      	ldr	r3, [pc, #124]	; (8027518 <MX_UART5_Init+0x90>)
 802749c:	2200      	movs	r2, #0
 802749e:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits = UART_STOPBITS_1;
 80274a0:	4b1d      	ldr	r3, [pc, #116]	; (8027518 <MX_UART5_Init+0x90>)
 80274a2:	2200      	movs	r2, #0
 80274a4:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity = UART_PARITY_NONE;
 80274a6:	4b1c      	ldr	r3, [pc, #112]	; (8027518 <MX_UART5_Init+0x90>)
 80274a8:	2200      	movs	r2, #0
 80274aa:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode = UART_MODE_TX_RX;
 80274ac:	4b1a      	ldr	r3, [pc, #104]	; (8027518 <MX_UART5_Init+0x90>)
 80274ae:	220c      	movs	r2, #12
 80274b0:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80274b2:	4b19      	ldr	r3, [pc, #100]	; (8027518 <MX_UART5_Init+0x90>)
 80274b4:	2200      	movs	r2, #0
 80274b6:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80274b8:	4b17      	ldr	r3, [pc, #92]	; (8027518 <MX_UART5_Init+0x90>)
 80274ba:	2200      	movs	r2, #0
 80274bc:	61da      	str	r2, [r3, #28]
    huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80274be:	4b16      	ldr	r3, [pc, #88]	; (8027518 <MX_UART5_Init+0x90>)
 80274c0:	2200      	movs	r2, #0
 80274c2:	621a      	str	r2, [r3, #32]
    huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80274c4:	4b14      	ldr	r3, [pc, #80]	; (8027518 <MX_UART5_Init+0x90>)
 80274c6:	2200      	movs	r2, #0
 80274c8:	625a      	str	r2, [r3, #36]	; 0x24
    huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80274ca:	4b13      	ldr	r3, [pc, #76]	; (8027518 <MX_UART5_Init+0x90>)
 80274cc:	2200      	movs	r2, #0
 80274ce:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart5) != HAL_OK)
 80274d0:	4811      	ldr	r0, [pc, #68]	; (8027518 <MX_UART5_Init+0x90>)
 80274d2:	f007 fd73 	bl	802efbc <HAL_UART_Init>
 80274d6:	4603      	mov	r3, r0
 80274d8:	2b00      	cmp	r3, #0
 80274da:	d001      	beq.n	80274e0 <MX_UART5_Init+0x58>
    {
        Error_Handler();
 80274dc:	f000 fbe1 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80274e0:	2100      	movs	r1, #0
 80274e2:	480d      	ldr	r0, [pc, #52]	; (8027518 <MX_UART5_Init+0x90>)
 80274e4:	f008 fdb5 	bl	8030052 <HAL_UARTEx_SetTxFifoThreshold>
 80274e8:	4603      	mov	r3, r0
 80274ea:	2b00      	cmp	r3, #0
 80274ec:	d001      	beq.n	80274f2 <MX_UART5_Init+0x6a>
    {
        Error_Handler();
 80274ee:	f000 fbd8 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80274f2:	2100      	movs	r1, #0
 80274f4:	4808      	ldr	r0, [pc, #32]	; (8027518 <MX_UART5_Init+0x90>)
 80274f6:	f008 fdea 	bl	80300ce <HAL_UARTEx_SetRxFifoThreshold>
 80274fa:	4603      	mov	r3, r0
 80274fc:	2b00      	cmp	r3, #0
 80274fe:	d001      	beq.n	8027504 <MX_UART5_Init+0x7c>
    {
        Error_Handler();
 8027500:	f000 fbcf 	bl	8027ca2 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8027504:	4804      	ldr	r0, [pc, #16]	; (8027518 <MX_UART5_Init+0x90>)
 8027506:	f008 fd6b 	bl	802ffe0 <HAL_UARTEx_DisableFifoMode>
 802750a:	4603      	mov	r3, r0
 802750c:	2b00      	cmp	r3, #0
 802750e:	d001      	beq.n	8027514 <MX_UART5_Init+0x8c>
    {
        Error_Handler();
 8027510:	f000 fbc7 	bl	8027ca2 <Error_Handler>
    }
    /* USER CODE BEGIN UART5_Init 2 */

    /* USER CODE END UART5_Init 2 */

}
 8027514:	bf00      	nop
 8027516:	bd80      	pop	{r7, pc}
 8027518:	24001b3c 	.word	0x24001b3c
 802751c:	40005000 	.word	0x40005000

08027520 <InitPeripherals>:

}


void InitPeripherals(void)
{
 8027520:	b580      	push	{r7, lr}
 8027522:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 8027524:	f7ff fc54 	bl	8026dd0 <MX_GPIO_Init>
    MX_FMC_Init();
 8027528:	f7ff fd94 	bl	8027054 <MX_FMC_Init>
    MX_TIM7_Init();
 802752c:	f7ff fe46 	bl	80271bc <MX_TIM7_Init>

    //MX_RTC_Init();

    MX_USART1_UART_Init();
 8027530:	f7ff fe7a 	bl	8027228 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 8027534:	f7ff fec4 	bl	80272c0 <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8027538:	f7ff ff0e 	bl	8027358 <MX_USART3_UART_Init>
    MX_UART4_Init();
 802753c:	f7ff ff58 	bl	80273f0 <MX_UART4_Init>
    MX_UART5_Init();
 8027540:	f7ff ffa2 	bl	8027488 <MX_UART5_Init>
   // MX_SPI1_Init();
    //MX_CRC_Init();

}
 8027544:	bf00      	nop
 8027546:	bd80      	pop	{r7, pc}

08027548 <flash_ready>:
 * Block Erase Time 64-Kbyte : Typ(400 ms), Max(950 ms)
 * Chip Erase Time 	     : Typ(25 sec), Max(40 sec)
 * Write Status Register Time: Typ(200 ns)
 */
int flash_ready(int ms)
{
 8027548:	b580      	push	{r7, lr}
 802754a:	b084      	sub	sp, #16
 802754c:	af00      	add	r7, sp, #0
 802754e:	6078      	str	r0, [r7, #4]
	clock_t mst;
	byte    temp;

	SF_EN();
 8027550:	2200      	movs	r2, #0
 8027552:	2110      	movs	r1, #16
 8027554:	4819      	ldr	r0, [pc, #100]	; (80275bc <flash_ready+0x74>)
 8027556:	f003 fcaf 	bl	802aeb8 <HAL_GPIO_WritePin>
	putch_SF(SF_RDSR);
 802755a:	2005      	movs	r0, #5
 802755c:	f000 fac8 	bl	8027af0 <SF_RW_Byte_FLASH>
	mstimeout(&mst, 0);
 8027560:	f107 0308 	add.w	r3, r7, #8
 8027564:	2100      	movs	r1, #0
 8027566:	4618      	mov	r0, r3
 8027568:	f002 fce4 	bl	8029f34 <mstimeout>
	do {
		temp = putch_SF(0xFF);
 802756c:	20ff      	movs	r0, #255	; 0xff
 802756e:	f000 fabf 	bl	8027af0 <SF_RW_Byte_FLASH>
 8027572:	4603      	mov	r3, r0
 8027574:	73fb      	strb	r3, [r7, #15]
		if(!(temp & 0x01))
 8027576:	7bfb      	ldrb	r3, [r7, #15]
 8027578:	f003 0301 	and.w	r3, r3, #1
 802757c:	2b00      	cmp	r3, #0
 802757e:	d009      	beq.n	8027594 <flash_ready+0x4c>
			break;
	}while(!mstimeout(&mst, ms));
 8027580:	f107 0308 	add.w	r3, r7, #8
 8027584:	6879      	ldr	r1, [r7, #4]
 8027586:	4618      	mov	r0, r3
 8027588:	f002 fcd4 	bl	8029f34 <mstimeout>
 802758c:	4603      	mov	r3, r0
 802758e:	2b00      	cmp	r3, #0
 8027590:	d0ec      	beq.n	802756c <flash_ready+0x24>
 8027592:	e000      	b.n	8027596 <flash_ready+0x4e>
			break;
 8027594:	bf00      	nop
	SF_DE();
 8027596:	2201      	movs	r2, #1
 8027598:	2110      	movs	r1, #16
 802759a:	4808      	ldr	r0, [pc, #32]	; (80275bc <flash_ready+0x74>)
 802759c:	f003 fc8c 	bl	802aeb8 <HAL_GPIO_WritePin>

	if(sfT) printf("flash ready %#x\n", temp);
 80275a0:	4b07      	ldr	r3, [pc, #28]	; (80275c0 <flash_ready+0x78>)
 80275a2:	781b      	ldrb	r3, [r3, #0]
 80275a4:	2b00      	cmp	r3, #0
 80275a6:	d004      	beq.n	80275b2 <flash_ready+0x6a>
 80275a8:	7bfb      	ldrb	r3, [r7, #15]
 80275aa:	4619      	mov	r1, r3
 80275ac:	4805      	ldr	r0, [pc, #20]	; (80275c4 <flash_ready+0x7c>)
 80275ae:	f001 ff1d 	bl	80293ec <printf_>
	return(temp);
 80275b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80275b4:	4618      	mov	r0, r3
 80275b6:	3710      	adds	r7, #16
 80275b8:	46bd      	mov	sp, r7
 80275ba:	bd80      	pop	{r7, pc}
 80275bc:	58020000 	.word	0x58020000
 80275c0:	24001f24 	.word	0x24001f24
 80275c4:	08032ab8 	.word	0x08032ab8

080275c8 <write_enable>:

/*This is function Definition for Enable the write operatations on the Flash Memory*/
void write_enable(void)
{
 80275c8:	b580      	push	{r7, lr}
 80275ca:	af00      	add	r7, sp, #0
	//SF_EN();
	//putch_SF(SF_WREN);    // enable write operations
	//SF_DE();
	SF_EN();
 80275cc:	2200      	movs	r2, #0
 80275ce:	2110      	movs	r1, #16
 80275d0:	4806      	ldr	r0, [pc, #24]	; (80275ec <write_enable+0x24>)
 80275d2:	f003 fc71 	bl	802aeb8 <HAL_GPIO_WritePin>
    putch_SF(AT25DF_WRITE_ENABLE);
 80275d6:	2006      	movs	r0, #6
 80275d8:	f000 fa8a 	bl	8027af0 <SF_RW_Byte_FLASH>
    SF_DE();
 80275dc:	2201      	movs	r2, #1
 80275de:	2110      	movs	r1, #16
 80275e0:	4802      	ldr	r0, [pc, #8]	; (80275ec <write_enable+0x24>)
 80275e2:	f003 fc69 	bl	802aeb8 <HAL_GPIO_WritePin>
}
 80275e6:	bf00      	nop
 80275e8:	bd80      	pop	{r7, pc}
 80275ea:	bf00      	nop
 80275ec:	58020000 	.word	0x58020000

080275f0 <flash_size>:
	if(sfT) printf("flash stat %#x\n", stat);
	return(stat);
}

siz_t flash_size(int force)
{
 80275f0:	b580      	push	{r7, lr}
 80275f2:	b084      	sub	sp, #16
 80275f4:	af00      	add	r7, sp, #0
 80275f6:	6078      	str	r0, [r7, #4]
	static 	siz_t  flsize = 0;
	siz_t 	siz;

	if (flsize == 0 || force) {
 80275f8:	4b11      	ldr	r3, [pc, #68]	; (8027640 <flash_size+0x50>)
 80275fa:	681b      	ldr	r3, [r3, #0]
 80275fc:	2b00      	cmp	r3, #0
 80275fe:	d002      	beq.n	8027606 <flash_size+0x16>
 8027600:	687b      	ldr	r3, [r7, #4]
 8027602:	2b00      	cmp	r3, #0
 8027604:	d00c      	beq.n	8027620 <flash_size+0x30>
		siz = 0L;
 8027606:	2300      	movs	r3, #0
 8027608:	60fb      	str	r3, [r7, #12]
		if(SpiFlash_ReadInfo())
 802760a:	f7fe fef9 	bl	8026400 <SpiFlash_ReadInfo>
 802760e:	4603      	mov	r3, r0
 8027610:	2b00      	cmp	r3, #0
 8027612:	d002      	beq.n	802761a <flash_size+0x2a>
			siz = BANKSIZ;
 8027614:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8027618:	60fb      	str	r3, [r7, #12]

		flsize = siz;
 802761a:	4a09      	ldr	r2, [pc, #36]	; (8027640 <flash_size+0x50>)
 802761c:	68fb      	ldr	r3, [r7, #12]
 802761e:	6013      	str	r3, [r2, #0]
	}

	if(sfT == 1) printf("flash size %#lx\n", flsize);
 8027620:	4b08      	ldr	r3, [pc, #32]	; (8027644 <flash_size+0x54>)
 8027622:	781b      	ldrb	r3, [r3, #0]
 8027624:	2b01      	cmp	r3, #1
 8027626:	d105      	bne.n	8027634 <flash_size+0x44>
 8027628:	4b05      	ldr	r3, [pc, #20]	; (8027640 <flash_size+0x50>)
 802762a:	681b      	ldr	r3, [r3, #0]
 802762c:	4619      	mov	r1, r3
 802762e:	4806      	ldr	r0, [pc, #24]	; (8027648 <flash_size+0x58>)
 8027630:	f001 fedc 	bl	80293ec <printf_>
	return(flsize);
 8027634:	4b02      	ldr	r3, [pc, #8]	; (8027640 <flash_size+0x50>)
 8027636:	681b      	ldr	r3, [r3, #0]
}
 8027638:	4618      	mov	r0, r3
 802763a:	3710      	adds	r7, #16
 802763c:	46bd      	mov	sp, r7
 802763e:	bd80      	pop	{r7, pc}
 8027640:	24001f28 	.word	0x24001f28
 8027644:	24001f24 	.word	0x24001f24
 8027648:	08032b10 	.word	0x08032b10

0802764c <flash_read>:

/*
 *	Allow random access
 */
int flash_read(siz_t addr, byte *buf, siz_t size)
{
 802764c:	b590      	push	{r4, r7, lr}
 802764e:	b08f      	sub	sp, #60	; 0x3c
 8027650:	af02      	add	r7, sp, #8
 8027652:	60f8      	str	r0, [r7, #12]
 8027654:	60b9      	str	r1, [r7, #8]
 8027656:	607a      	str	r2, [r7, #4]
	siz_t	ad, siz;
	int	page, i, n;
	byte 	oadr;
	byte 	*pb = buf;
 8027658:	68bb      	ldr	r3, [r7, #8]
 802765a:	62bb      	str	r3, [r7, #40]	; 0x28

	if (addr < 0 || (addr+size) > flash_size(0)) { /* check range validity */
 802765c:	68fb      	ldr	r3, [r7, #12]
 802765e:	2b00      	cmp	r3, #0
 8027660:	db08      	blt.n	8027674 <flash_read+0x28>
 8027662:	68fa      	ldr	r2, [r7, #12]
 8027664:	687b      	ldr	r3, [r7, #4]
 8027666:	18d4      	adds	r4, r2, r3
 8027668:	2000      	movs	r0, #0
 802766a:	f7ff ffc1 	bl	80275f0 <flash_size>
 802766e:	4603      	mov	r3, r0
 8027670:	429c      	cmp	r4, r3
 8027672:	dd0a      	ble.n	802768a <flash_read+0x3e>
		//syserr("flash_read(a:%#x, s:%#x, m:%#x) - invalid range\n", addr, size, flash_size(0));
		printf("flash_read(a:%#lx, s:%#lx, m:%#lx) - invalid range\n", addr, size, flash_size(0));
 8027674:	2000      	movs	r0, #0
 8027676:	f7ff ffbb 	bl	80275f0 <flash_size>
 802767a:	4603      	mov	r3, r0
 802767c:	687a      	ldr	r2, [r7, #4]
 802767e:	68f9      	ldr	r1, [r7, #12]
 8027680:	4842      	ldr	r0, [pc, #264]	; (802778c <flash_read+0x140>)
 8027682:	f001 feb3 	bl	80293ec <printf_>
		return(E_ADDR);
 8027686:	2301      	movs	r3, #1
 8027688:	e07c      	b.n	8027784 <flash_read+0x138>
	}

	ad = addr;	// debug backup
 802768a:	68fb      	ldr	r3, [r7, #12]
 802768c:	627b      	str	r3, [r7, #36]	; 0x24
	siz = size;	// debug backup
 802768e:	687b      	ldr	r3, [r7, #4]
 8027690:	623b      	str	r3, [r7, #32]
	while (size > 0) {
 8027692:	e061      	b.n	8027758 <flash_read+0x10c>
		page = addr / PAGESIZ;			/* page addr in the bank  */
 8027694:	68fb      	ldr	r3, [r7, #12]
 8027696:	2b00      	cmp	r3, #0
 8027698:	da00      	bge.n	802769c <flash_read+0x50>
 802769a:	33ff      	adds	r3, #255	; 0xff
 802769c:	121b      	asrs	r3, r3, #8
 802769e:	61fb      	str	r3, [r7, #28]
		oadr = addr % PAGESIZ;			/* offset addr in the bank */
 80276a0:	68fb      	ldr	r3, [r7, #12]
 80276a2:	425a      	negs	r2, r3
 80276a4:	b2db      	uxtb	r3, r3
 80276a6:	b2d2      	uxtb	r2, r2
 80276a8:	bf58      	it	pl
 80276aa:	4253      	negpl	r3, r2
 80276ac:	76fb      	strb	r3, [r7, #27]
		SF_EN();
 80276ae:	2200      	movs	r2, #0
 80276b0:	2110      	movs	r1, #16
 80276b2:	4837      	ldr	r0, [pc, #220]	; (8027790 <flash_read+0x144>)
 80276b4:	f003 fc00 	bl	802aeb8 <HAL_GPIO_WritePin>
		putch_SF(SF_READ_LOW);			// Max Frq 50MHz
 80276b8:	2003      	movs	r0, #3
 80276ba:	f000 fa19 	bl	8027af0 <SF_RW_Byte_FLASH>
		//putch_SF(SF_READ);			// Max Frq 85MHz
		putch_SF((byte)(page >> 8));		// address 23-16
 80276be:	69fb      	ldr	r3, [r7, #28]
 80276c0:	121b      	asrs	r3, r3, #8
 80276c2:	b2db      	uxtb	r3, r3
 80276c4:	4618      	mov	r0, r3
 80276c6:	f000 fa13 	bl	8027af0 <SF_RW_Byte_FLASH>
		putch_SF((byte)(page));			// address 15-8
 80276ca:	69fb      	ldr	r3, [r7, #28]
 80276cc:	b2db      	uxtb	r3, r3
 80276ce:	4618      	mov	r0, r3
 80276d0:	f000 fa0e 	bl	8027af0 <SF_RW_Byte_FLASH>
		putch_SF(oadr);				// address 7-0
 80276d4:	7efb      	ldrb	r3, [r7, #27]
 80276d6:	4618      	mov	r0, r3
 80276d8:	f000 fa0a 	bl	8027af0 <SF_RW_Byte_FLASH>
		//putch_SF(0xff);			// SF_READ dumy data
		n = PAGESIZ - oadr;
 80276dc:	7efb      	ldrb	r3, [r7, #27]
 80276de:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80276e2:	617b      	str	r3, [r7, #20]
		n = min(n, size);
 80276e4:	697a      	ldr	r2, [r7, #20]
 80276e6:	687b      	ldr	r3, [r7, #4]
 80276e8:	4293      	cmp	r3, r2
 80276ea:	bfa8      	it	ge
 80276ec:	4613      	movge	r3, r2
 80276ee:	617b      	str	r3, [r7, #20]
		for(i = 0 ; i < n ; i++, pb++)
 80276f0:	2300      	movs	r3, #0
 80276f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80276f4:	e00c      	b.n	8027710 <flash_read+0xc4>
			*pb = putch_SF(0xff);
 80276f6:	20ff      	movs	r0, #255	; 0xff
 80276f8:	f000 f9fa 	bl	8027af0 <SF_RW_Byte_FLASH>
 80276fc:	4603      	mov	r3, r0
 80276fe:	461a      	mov	r2, r3
 8027700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027702:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < n ; i++, pb++)
 8027704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027706:	3301      	adds	r3, #1
 8027708:	62fb      	str	r3, [r7, #44]	; 0x2c
 802770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802770c:	3301      	adds	r3, #1
 802770e:	62bb      	str	r3, [r7, #40]	; 0x28
 8027710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027712:	697b      	ldr	r3, [r7, #20]
 8027714:	429a      	cmp	r2, r3
 8027716:	dbee      	blt.n	80276f6 <flash_read+0xaa>
		SF_DE();
 8027718:	2201      	movs	r2, #1
 802771a:	2110      	movs	r1, #16
 802771c:	481c      	ldr	r0, [pc, #112]	; (8027790 <flash_read+0x144>)
 802771e:	f003 fbcb 	bl	802aeb8 <HAL_GPIO_WritePin>

		if(sfT > 1) printf("flash_read a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027722:	4b1c      	ldr	r3, [pc, #112]	; (8027794 <flash_read+0x148>)
 8027724:	781b      	ldrb	r3, [r3, #0]
 8027726:	2b01      	cmp	r3, #1
 8027728:	d90e      	bls.n	8027748 <flash_read+0xfc>
				(byte)(page >> 8), (byte)(page), oadr, n);
 802772a:	69fb      	ldr	r3, [r7, #28]
 802772c:	121b      	asrs	r3, r3, #8
 802772e:	b2db      	uxtb	r3, r3
		if(sfT > 1) printf("flash_read a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027730:	4619      	mov	r1, r3
				(byte)(page >> 8), (byte)(page), oadr, n);
 8027732:	69fb      	ldr	r3, [r7, #28]
 8027734:	b2db      	uxtb	r3, r3
		if(sfT > 1) printf("flash_read a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027736:	4618      	mov	r0, r3
 8027738:	7efa      	ldrb	r2, [r7, #27]
 802773a:	697b      	ldr	r3, [r7, #20]
 802773c:	9300      	str	r3, [sp, #0]
 802773e:	4613      	mov	r3, r2
 8027740:	4602      	mov	r2, r0
 8027742:	4815      	ldr	r0, [pc, #84]	; (8027798 <flash_read+0x14c>)
 8027744:	f001 fe52 	bl	80293ec <printf_>
		addr += n;
 8027748:	68fa      	ldr	r2, [r7, #12]
 802774a:	697b      	ldr	r3, [r7, #20]
 802774c:	4413      	add	r3, r2
 802774e:	60fb      	str	r3, [r7, #12]
		size -= n;
 8027750:	687a      	ldr	r2, [r7, #4]
 8027752:	697b      	ldr	r3, [r7, #20]
 8027754:	1ad3      	subs	r3, r2, r3
 8027756:	607b      	str	r3, [r7, #4]
	while (size > 0) {
 8027758:	687b      	ldr	r3, [r7, #4]
 802775a:	2b00      	cmp	r3, #0
 802775c:	dc9a      	bgt.n	8027694 <flash_read+0x48>
	}
	if(sfT > 1) printf("flash_read(addr %#lx, size %#lx)\n", ad, siz);
 802775e:	4b0d      	ldr	r3, [pc, #52]	; (8027794 <flash_read+0x148>)
 8027760:	781b      	ldrb	r3, [r3, #0]
 8027762:	2b01      	cmp	r3, #1
 8027764:	d904      	bls.n	8027770 <flash_read+0x124>
 8027766:	6a3a      	ldr	r2, [r7, #32]
 8027768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802776a:	480c      	ldr	r0, [pc, #48]	; (802779c <flash_read+0x150>)
 802776c:	f001 fe3e 	bl	80293ec <printf_>
	if(sfT > 2) hexdump(ad, (byte *)buf, siz);
 8027770:	4b08      	ldr	r3, [pc, #32]	; (8027794 <flash_read+0x148>)
 8027772:	781b      	ldrb	r3, [r3, #0]
 8027774:	2b02      	cmp	r3, #2
 8027776:	d904      	bls.n	8027782 <flash_read+0x136>
 8027778:	6a3a      	ldr	r2, [r7, #32]
 802777a:	68b9      	ldr	r1, [r7, #8]
 802777c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802777e:	f7ff f99d 	bl	8026abc <hexdump>
	return(0);
 8027782:	2300      	movs	r3, #0
}
 8027784:	4618      	mov	r0, r3
 8027786:	3734      	adds	r7, #52	; 0x34
 8027788:	46bd      	mov	sp, r7
 802778a:	bd90      	pop	{r4, r7, pc}
 802778c:	08032b24 	.word	0x08032b24
 8027790:	58020000 	.word	0x58020000
 8027794:	24001f24 	.word	0x24001f24
 8027798:	08032b58 	.word	0x08032b58
 802779c:	08032b90 	.word	0x08032b90

080277a0 <flash_erase>:
/*
 *	Erase the corresponding blocks.
 */

int flash_erase(siz_t addr, siz_t size)
{
 80277a0:	b590      	push	{r4, r7, lr}
 80277a2:	b089      	sub	sp, #36	; 0x24
 80277a4:	af00      	add	r7, sp, #0
 80277a6:	6078      	str	r0, [r7, #4]
 80277a8:	6039      	str	r1, [r7, #0]
	siz_t	ad, siz;
	int	page, i, err = 0;
 80277aa:	2300      	movs	r3, #0
 80277ac:	617b      	str	r3, [r7, #20]

	if(addr == 0 && size == 0) {		// full domain erase
 80277ae:	687b      	ldr	r3, [r7, #4]
 80277b0:	2b00      	cmp	r3, #0
 80277b2:	d121      	bne.n	80277f8 <flash_erase+0x58>
 80277b4:	683b      	ldr	r3, [r7, #0]
 80277b6:	2b00      	cmp	r3, #0
 80277b8:	d11e      	bne.n	80277f8 <flash_erase+0x58>
		size = flash_size(0);
 80277ba:	2000      	movs	r0, #0
 80277bc:	f7ff ff18 	bl	80275f0 <flash_size>
 80277c0:	6038      	str	r0, [r7, #0]
		write_enable();
 80277c2:	f7ff ff01 	bl	80275c8 <write_enable>
		SF_EN();
 80277c6:	2200      	movs	r2, #0
 80277c8:	2110      	movs	r1, #16
 80277ca:	4845      	ldr	r0, [pc, #276]	; (80278e0 <flash_erase+0x140>)
 80277cc:	f003 fb74 	bl	802aeb8 <HAL_GPIO_WritePin>
		putch_SF(SF_CHIP_ERASE);
 80277d0:	2060      	movs	r0, #96	; 0x60
 80277d2:	f000 f98d 	bl	8027af0 <SF_RW_Byte_FLASH>
		SF_DE();
 80277d6:	2201      	movs	r2, #1
 80277d8:	2110      	movs	r1, #16
 80277da:	4841      	ldr	r0, [pc, #260]	; (80278e0 <flash_erase+0x140>)
 80277dc:	f003 fb6c 	bl	802aeb8 <HAL_GPIO_WritePin>
		printf("Waiting... Chip erase time is 36 ~ 56 sec\n");
 80277e0:	4840      	ldr	r0, [pc, #256]	; (80278e4 <flash_erase+0x144>)
 80277e2:	f001 fe03 	bl	80293ec <printf_>
		flash_ready(57 * CLOCKS_PER_SEC); // Chip Erase Time : Typ(36 sec), Max(56 sec)
 80277e6:	f241 6044 	movw	r0, #5700	; 0x1644
 80277ea:	f7ff fead 	bl	8027548 <flash_ready>
		ad = addr;
 80277ee:	687b      	ldr	r3, [r7, #4]
 80277f0:	61fb      	str	r3, [r7, #28]
		siz = size;
 80277f2:	683b      	ldr	r3, [r7, #0]
 80277f4:	61bb      	str	r3, [r7, #24]
		goto RESULT;
 80277f6:	e05e      	b.n	80278b6 <flash_erase+0x116>
	}

	if(addr < 0 || (addr+size) > flash_size(0)) { /* check range validity */
 80277f8:	687b      	ldr	r3, [r7, #4]
 80277fa:	2b00      	cmp	r3, #0
 80277fc:	db08      	blt.n	8027810 <flash_erase+0x70>
 80277fe:	687a      	ldr	r2, [r7, #4]
 8027800:	683b      	ldr	r3, [r7, #0]
 8027802:	18d4      	adds	r4, r2, r3
 8027804:	2000      	movs	r0, #0
 8027806:	f7ff fef3 	bl	80275f0 <flash_size>
 802780a:	4603      	mov	r3, r0
 802780c:	429c      	cmp	r4, r3
 802780e:	dd0a      	ble.n	8027826 <flash_erase+0x86>
		//syserr("flash_erase(a:%#x, s:%#x, m:%#x) - invalid range\n", addr, size, flash_size(0));
		printf("flash_erase(a:%#lx, s:%#lx, m:%#lx) - invalid range\n", addr, size, flash_size(0));
 8027810:	2000      	movs	r0, #0
 8027812:	f7ff feed 	bl	80275f0 <flash_size>
 8027816:	4603      	mov	r3, r0
 8027818:	683a      	ldr	r2, [r7, #0]
 802781a:	6879      	ldr	r1, [r7, #4]
 802781c:	4832      	ldr	r0, [pc, #200]	; (80278e8 <flash_erase+0x148>)
 802781e:	f001 fde5 	bl	80293ec <printf_>
		return(E_ADDR);
 8027822:	2301      	movs	r3, #1
 8027824:	e057      	b.n	80278d6 <flash_erase+0x136>
	}

	/*
	 * adjust addr to the start of block.
	 */
	i = addr % BLOCKSIZ;
 8027826:	687b      	ldr	r3, [r7, #4]
 8027828:	425a      	negs	r2, r3
 802782a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802782e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8027832:	bf58      	it	pl
 8027834:	4253      	negpl	r3, r2
 8027836:	613b      	str	r3, [r7, #16]
	addr -= i;
 8027838:	687a      	ldr	r2, [r7, #4]
 802783a:	693b      	ldr	r3, [r7, #16]
 802783c:	1ad3      	subs	r3, r2, r3
 802783e:	607b      	str	r3, [r7, #4]
	size += i;
 8027840:	683a      	ldr	r2, [r7, #0]
 8027842:	693b      	ldr	r3, [r7, #16]
 8027844:	4413      	add	r3, r2
 8027846:	603b      	str	r3, [r7, #0]

	ad = addr;
 8027848:	687b      	ldr	r3, [r7, #4]
 802784a:	61fb      	str	r3, [r7, #28]
	siz = size;
 802784c:	683b      	ldr	r3, [r7, #0]
 802784e:	61bb      	str	r3, [r7, #24]
	while (size > 0) {
 8027850:	e02d      	b.n	80278ae <flash_erase+0x10e>
		page = addr / PAGESIZ; 		/* page addr in device(0~) */
 8027852:	687b      	ldr	r3, [r7, #4]
 8027854:	2b00      	cmp	r3, #0
 8027856:	da00      	bge.n	802785a <flash_erase+0xba>
 8027858:	33ff      	adds	r3, #255	; 0xff
 802785a:	121b      	asrs	r3, r3, #8
 802785c:	60fb      	str	r3, [r7, #12]
		write_enable();
 802785e:	f7ff feb3 	bl	80275c8 <write_enable>
		SF_EN();
 8027862:	2200      	movs	r2, #0
 8027864:	2110      	movs	r1, #16
 8027866:	481e      	ldr	r0, [pc, #120]	; (80278e0 <flash_erase+0x140>)
 8027868:	f003 fb26 	bl	802aeb8 <HAL_GPIO_WritePin>
		putch_SF(SF_BLK_ERASE_4K);	// Block Erase (4KBytes)
 802786c:	2020      	movs	r0, #32
 802786e:	f000 f93f 	bl	8027af0 <SF_RW_Byte_FLASH>
		putch_SF((byte)(page >> 8));	// address 23-16
 8027872:	68fb      	ldr	r3, [r7, #12]
 8027874:	121b      	asrs	r3, r3, #8
 8027876:	b2db      	uxtb	r3, r3
 8027878:	4618      	mov	r0, r3
 802787a:	f000 f939 	bl	8027af0 <SF_RW_Byte_FLASH>
		putch_SF((byte)(page));		// address 15-8
 802787e:	68fb      	ldr	r3, [r7, #12]
 8027880:	b2db      	uxtb	r3, r3
 8027882:	4618      	mov	r0, r3
 8027884:	f000 f934 	bl	8027af0 <SF_RW_Byte_FLASH>
		putch_SF(0x00);			// address 7-0
 8027888:	2000      	movs	r0, #0
 802788a:	f000 f931 	bl	8027af0 <SF_RW_Byte_FLASH>
		SF_DE();
 802788e:	2201      	movs	r2, #1
 8027890:	2110      	movs	r1, #16
 8027892:	4813      	ldr	r0, [pc, #76]	; (80278e0 <flash_erase+0x140>)
 8027894:	f003 fb10 	bl	802aeb8 <HAL_GPIO_WritePin>
		flash_ready(210);		// Block Erase Time 4-Kbyte : Typ(50 ms) , Max(200 ms)
 8027898:	20d2      	movs	r0, #210	; 0xd2
 802789a:	f7ff fe55 	bl	8027548 <flash_ready>
		addr += BLOCKSIZ;
 802789e:	687b      	ldr	r3, [r7, #4]
 80278a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80278a4:	607b      	str	r3, [r7, #4]
		size -= BLOCKSIZ;
 80278a6:	683b      	ldr	r3, [r7, #0]
 80278a8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80278ac:	603b      	str	r3, [r7, #0]
	while (size > 0) {
 80278ae:	683b      	ldr	r3, [r7, #0]
 80278b0:	2b00      	cmp	r3, #0
 80278b2:	dcce      	bgt.n	8027852 <flash_erase+0xb2>
	}
RESULT :
 80278b4:	bf00      	nop
	if(sfT > 1) printf("flash_erase(addr %#lx, size %#lx) - errcode %#x\n", ad, siz, err);
 80278b6:	4b0d      	ldr	r3, [pc, #52]	; (80278ec <flash_erase+0x14c>)
 80278b8:	781b      	ldrb	r3, [r3, #0]
 80278ba:	2b01      	cmp	r3, #1
 80278bc:	d905      	bls.n	80278ca <flash_erase+0x12a>
 80278be:	697b      	ldr	r3, [r7, #20]
 80278c0:	69ba      	ldr	r2, [r7, #24]
 80278c2:	69f9      	ldr	r1, [r7, #28]
 80278c4:	480a      	ldr	r0, [pc, #40]	; (80278f0 <flash_erase+0x150>)
 80278c6:	f001 fd91 	bl	80293ec <printf_>
	if(err)
 80278ca:	697b      	ldr	r3, [r7, #20]
 80278cc:	2b00      	cmp	r3, #0
 80278ce:	d001      	beq.n	80278d4 <flash_erase+0x134>
		err = E_FAIL;
 80278d0:	2303      	movs	r3, #3
 80278d2:	617b      	str	r3, [r7, #20]
	return(err);
 80278d4:	697b      	ldr	r3, [r7, #20]
}
 80278d6:	4618      	mov	r0, r3
 80278d8:	3724      	adds	r7, #36	; 0x24
 80278da:	46bd      	mov	sp, r7
 80278dc:	bd90      	pop	{r4, r7, pc}
 80278de:	bf00      	nop
 80278e0:	58020000 	.word	0x58020000
 80278e4:	08032bb4 	.word	0x08032bb4
 80278e8:	08032be0 	.word	0x08032be0
 80278ec:	24001f24 	.word	0x24001f24
 80278f0:	08032c18 	.word	0x08032c18

080278f4 <flash_write>:

/*
 *	Assume sequential write.
 */
int flash_write(siz_t addr, byte *buf, siz_t size)
{
 80278f4:	b590      	push	{r4, r7, lr}
 80278f6:	b091      	sub	sp, #68	; 0x44
 80278f8:	af02      	add	r7, sp, #8
 80278fa:	60f8      	str	r0, [r7, #12]
 80278fc:	60b9      	str	r1, [r7, #8]
 80278fe:	607a      	str	r2, [r7, #4]
	siz_t	ad, siz;
	int	page, i, n, err, nerr;
	byte 	oadr;
	byte 	*pb = buf;
 8027900:	68bb      	ldr	r3, [r7, #8]
 8027902:	62bb      	str	r3, [r7, #40]	; 0x28

	if (addr < 0 || (addr+size) > flash_size(0)) {
 8027904:	68fb      	ldr	r3, [r7, #12]
 8027906:	2b00      	cmp	r3, #0
 8027908:	db08      	blt.n	802791c <flash_write+0x28>
 802790a:	68fa      	ldr	r2, [r7, #12]
 802790c:	687b      	ldr	r3, [r7, #4]
 802790e:	18d4      	adds	r4, r2, r3
 8027910:	2000      	movs	r0, #0
 8027912:	f7ff fe6d 	bl	80275f0 <flash_size>
 8027916:	4603      	mov	r3, r0
 8027918:	429c      	cmp	r4, r3
 802791a:	dd0a      	ble.n	8027932 <flash_write+0x3e>
		//syserr("flash_write(a:%#x, s:%#x, m:%#x) - invalid range\n", addr, size, flash_size(0));
		printf("flash_write(a:%#lx, s:%#lx, m:%#lx) - invalid range\n", addr, size, flash_size(0));
 802791c:	2000      	movs	r0, #0
 802791e:	f7ff fe67 	bl	80275f0 <flash_size>
 8027922:	4603      	mov	r3, r0
 8027924:	687a      	ldr	r2, [r7, #4]
 8027926:	68f9      	ldr	r1, [r7, #12]
 8027928:	4869      	ldr	r0, [pc, #420]	; (8027ad0 <flash_write+0x1dc>)
 802792a:	f001 fd5f 	bl	80293ec <printf_>
		return(E_ADDR);
 802792e:	2301      	movs	r3, #1
 8027930:	e0ca      	b.n	8027ac8 <flash_write+0x1d4>
	}

	ad = addr;
 8027932:	68fb      	ldr	r3, [r7, #12]
 8027934:	627b      	str	r3, [r7, #36]	; 0x24
	siz = size;
 8027936:	687b      	ldr	r3, [r7, #4]
 8027938:	623b      	str	r3, [r7, #32]
	nerr = err = 0;
 802793a:	2300      	movs	r3, #0
 802793c:	633b      	str	r3, [r7, #48]	; 0x30
 802793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027940:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(size > 0 ) {
 8027942:	e0a9      	b.n	8027a98 <flash_write+0x1a4>
		if((addr%BLOCKSIZ) == 0) {
 8027944:	68fb      	ldr	r3, [r7, #12]
 8027946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802794a:	2b00      	cmp	r3, #0
 802794c:	d10b      	bne.n	8027966 <flash_write+0x72>
			err = flash_erase(addr, (siz_t)1);
 802794e:	2101      	movs	r1, #1
 8027950:	68f8      	ldr	r0, [r7, #12]
 8027952:	f7ff ff25 	bl	80277a0 <flash_erase>
 8027956:	6338      	str	r0, [r7, #48]	; 0x30
			if(err)
 8027958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802795a:	2b00      	cmp	r3, #0
 802795c:	d003      	beq.n	8027966 <flash_write+0x72>
				return(err|0x8);
 802795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027960:	f043 0308 	orr.w	r3, r3, #8
 8027964:	e0b0      	b.n	8027ac8 <flash_write+0x1d4>
		}
		page = addr / PAGESIZ;			/* page addr in the bank 	*/
 8027966:	68fb      	ldr	r3, [r7, #12]
 8027968:	2b00      	cmp	r3, #0
 802796a:	da00      	bge.n	802796e <flash_write+0x7a>
 802796c:	33ff      	adds	r3, #255	; 0xff
 802796e:	121b      	asrs	r3, r3, #8
 8027970:	61fb      	str	r3, [r7, #28]
		oadr = addr % PAGESIZ;			/* offset addr in the bank */
 8027972:	68fb      	ldr	r3, [r7, #12]
 8027974:	425a      	negs	r2, r3
 8027976:	b2db      	uxtb	r3, r3
 8027978:	b2d2      	uxtb	r2, r2
 802797a:	bf58      	it	pl
 802797c:	4253      	negpl	r3, r2
 802797e:	76fb      	strb	r3, [r7, #27]
		write_enable();
 8027980:	f7ff fe22 	bl	80275c8 <write_enable>
		SF_EN();
 8027984:	2200      	movs	r2, #0
 8027986:	2110      	movs	r1, #16
 8027988:	4852      	ldr	r0, [pc, #328]	; (8027ad4 <flash_write+0x1e0>)
 802798a:	f003 fa95 	bl	802aeb8 <HAL_GPIO_WritePin>
		putch_SF(SF_PROGRAM);  		//write command
 802798e:	2002      	movs	r0, #2
 8027990:	f000 f8ae 	bl	8027af0 <SF_RW_Byte_FLASH>
		putch_SF((byte)(page >> 8));	// address 23-16
 8027994:	69fb      	ldr	r3, [r7, #28]
 8027996:	121b      	asrs	r3, r3, #8
 8027998:	b2db      	uxtb	r3, r3
 802799a:	4618      	mov	r0, r3
 802799c:	f000 f8a8 	bl	8027af0 <SF_RW_Byte_FLASH>
		putch_SF((byte)(page));		// address 15-8
 80279a0:	69fb      	ldr	r3, [r7, #28]
 80279a2:	b2db      	uxtb	r3, r3
 80279a4:	4618      	mov	r0, r3
 80279a6:	f000 f8a3 	bl	8027af0 <SF_RW_Byte_FLASH>
		putch_SF(oadr);			// address 7-0
 80279aa:	7efb      	ldrb	r3, [r7, #27]
 80279ac:	4618      	mov	r0, r3
 80279ae:	f000 f89f 	bl	8027af0 <SF_RW_Byte_FLASH>
		n = PAGESIZ - oadr;
 80279b2:	7efb      	ldrb	r3, [r7, #27]
 80279b4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80279b8:	617b      	str	r3, [r7, #20]
		n = min(n, size);
 80279ba:	697a      	ldr	r2, [r7, #20]
 80279bc:	687b      	ldr	r3, [r7, #4]
 80279be:	4293      	cmp	r3, r2
 80279c0:	bfa8      	it	ge
 80279c2:	4613      	movge	r3, r2
 80279c4:	617b      	str	r3, [r7, #20]
		for(i = 0 ; i < n ; i++, pb++ )
 80279c6:	2300      	movs	r3, #0
 80279c8:	637b      	str	r3, [r7, #52]	; 0x34
 80279ca:	e00a      	b.n	80279e2 <flash_write+0xee>
			putch_SF(*pb);
 80279cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80279ce:	781b      	ldrb	r3, [r3, #0]
 80279d0:	4618      	mov	r0, r3
 80279d2:	f000 f88d 	bl	8027af0 <SF_RW_Byte_FLASH>
		for(i = 0 ; i < n ; i++, pb++ )
 80279d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80279d8:	3301      	adds	r3, #1
 80279da:	637b      	str	r3, [r7, #52]	; 0x34
 80279dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80279de:	3301      	adds	r3, #1
 80279e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80279e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80279e4:	697b      	ldr	r3, [r7, #20]
 80279e6:	429a      	cmp	r2, r3
 80279e8:	dbf0      	blt.n	80279cc <flash_write+0xd8>
		SF_DE();
 80279ea:	2201      	movs	r2, #1
 80279ec:	2110      	movs	r1, #16
 80279ee:	4839      	ldr	r0, [pc, #228]	; (8027ad4 <flash_write+0x1e0>)
 80279f0:	f003 fa62 	bl	802aeb8 <HAL_GPIO_WritePin>
		flash_ready(7);			// Page Program Time 256byte : Typ(1.5 ms), Max(5.0 ms)
 80279f4:	2007      	movs	r0, #7
 80279f6:	f7ff fda7 	bl	8027548 <flash_ready>
		flash_read(addr, verifBuf, (siz_t)n);
 80279fa:	697a      	ldr	r2, [r7, #20]
 80279fc:	4936      	ldr	r1, [pc, #216]	; (8027ad8 <flash_write+0x1e4>)
 80279fe:	68f8      	ldr	r0, [r7, #12]
 8027a00:	f7ff fe24 	bl	802764c <flash_read>
		if(memcmp(verifBuf, pb-n, n) == 0)
 8027a04:	697b      	ldr	r3, [r7, #20]
 8027a06:	425b      	negs	r3, r3
 8027a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027a0a:	4413      	add	r3, r2
 8027a0c:	697a      	ldr	r2, [r7, #20]
 8027a0e:	4619      	mov	r1, r3
 8027a10:	4831      	ldr	r0, [pc, #196]	; (8027ad8 <flash_write+0x1e4>)
 8027a12:	f008 fdb1 	bl	8030578 <memcmp>
 8027a16:	4603      	mov	r3, r0
 8027a18:	2b00      	cmp	r3, #0
 8027a1a:	d102      	bne.n	8027a22 <flash_write+0x12e>
			nerr=0;
 8027a1c:	2300      	movs	r3, #0
 8027a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027a20:	e018      	b.n	8027a54 <flash_write+0x160>
		else {
			nerr++;
 8027a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a24:	3301      	adds	r3, #1
 8027a26:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(sfT > 1) printf("write retry count[%d]\n", nerr);
 8027a28:	4b2c      	ldr	r3, [pc, #176]	; (8027adc <flash_write+0x1e8>)
 8027a2a:	781b      	ldrb	r3, [r3, #0]
 8027a2c:	2b01      	cmp	r3, #1
 8027a2e:	d903      	bls.n	8027a38 <flash_write+0x144>
 8027a30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8027a32:	482b      	ldr	r0, [pc, #172]	; (8027ae0 <flash_write+0x1ec>)
 8027a34:	f001 fcda 	bl	80293ec <printf_>
			if (nerr < 3) {
 8027a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a3a:	2b02      	cmp	r3, #2
 8027a3c:	dc08      	bgt.n	8027a50 <flash_write+0x15c>
				msleep(2);
 8027a3e:	2002      	movs	r0, #2
 8027a40:	f002 fa48 	bl	8029ed4 <msleep>
				pb -= n;
 8027a44:	697b      	ldr	r3, [r7, #20]
 8027a46:	425b      	negs	r3, r3
 8027a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027a4a:	4413      	add	r3, r2
 8027a4c:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8027a4e:	e023      	b.n	8027a98 <flash_write+0x1a4>
			}
			err = E_VERF;
 8027a50:	2304      	movs	r3, #4
 8027a52:	633b      	str	r3, [r7, #48]	; 0x30
		}

		if(sfT > 1) printf("flash_write a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027a54:	4b21      	ldr	r3, [pc, #132]	; (8027adc <flash_write+0x1e8>)
 8027a56:	781b      	ldrb	r3, [r3, #0]
 8027a58:	2b01      	cmp	r3, #1
 8027a5a:	d90e      	bls.n	8027a7a <flash_write+0x186>
				(byte)(page >> 8), (byte)(page), oadr, n);
 8027a5c:	69fb      	ldr	r3, [r7, #28]
 8027a5e:	121b      	asrs	r3, r3, #8
 8027a60:	b2db      	uxtb	r3, r3
		if(sfT > 1) printf("flash_write a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027a62:	4619      	mov	r1, r3
				(byte)(page >> 8), (byte)(page), oadr, n);
 8027a64:	69fb      	ldr	r3, [r7, #28]
 8027a66:	b2db      	uxtb	r3, r3
		if(sfT > 1) printf("flash_write a23-16[%#x] a15-8[%#x] a7-0[%#x] size[%#x]\n",
 8027a68:	4618      	mov	r0, r3
 8027a6a:	7efa      	ldrb	r2, [r7, #27]
 8027a6c:	697b      	ldr	r3, [r7, #20]
 8027a6e:	9300      	str	r3, [sp, #0]
 8027a70:	4613      	mov	r3, r2
 8027a72:	4602      	mov	r2, r0
 8027a74:	481b      	ldr	r0, [pc, #108]	; (8027ae4 <flash_write+0x1f0>)
 8027a76:	f001 fcb9 	bl	80293ec <printf_>

		if(err) {
 8027a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027a7c:	2b00      	cmp	r3, #0
 8027a7e:	d003      	beq.n	8027a88 <flash_write+0x194>
			printf("flash write error\n");
 8027a80:	4819      	ldr	r0, [pc, #100]	; (8027ae8 <flash_write+0x1f4>)
 8027a82:	f001 fcb3 	bl	80293ec <printf_>
			break;
 8027a86:	e00b      	b.n	8027aa0 <flash_write+0x1ac>
		}

		addr += n;
 8027a88:	68fa      	ldr	r2, [r7, #12]
 8027a8a:	697b      	ldr	r3, [r7, #20]
 8027a8c:	4413      	add	r3, r2
 8027a8e:	60fb      	str	r3, [r7, #12]
		size -= n;
 8027a90:	687a      	ldr	r2, [r7, #4]
 8027a92:	697b      	ldr	r3, [r7, #20]
 8027a94:	1ad3      	subs	r3, r2, r3
 8027a96:	607b      	str	r3, [r7, #4]
	while(size > 0 ) {
 8027a98:	687b      	ldr	r3, [r7, #4]
 8027a9a:	2b00      	cmp	r3, #0
 8027a9c:	f73f af52 	bgt.w	8027944 <flash_write+0x50>
	}
	if(sfT > 1) printf("flash_write(addr %#lx, size %#lx) - errcode %#x\n", ad, siz, err);
 8027aa0:	4b0e      	ldr	r3, [pc, #56]	; (8027adc <flash_write+0x1e8>)
 8027aa2:	781b      	ldrb	r3, [r3, #0]
 8027aa4:	2b01      	cmp	r3, #1
 8027aa6:	d905      	bls.n	8027ab4 <flash_write+0x1c0>
 8027aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027aaa:	6a3a      	ldr	r2, [r7, #32]
 8027aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8027aae:	480f      	ldr	r0, [pc, #60]	; (8027aec <flash_write+0x1f8>)
 8027ab0:	f001 fc9c 	bl	80293ec <printf_>
	if(sfT > 2) hexdump(ad, (byte *)buf, siz);
 8027ab4:	4b09      	ldr	r3, [pc, #36]	; (8027adc <flash_write+0x1e8>)
 8027ab6:	781b      	ldrb	r3, [r3, #0]
 8027ab8:	2b02      	cmp	r3, #2
 8027aba:	d904      	bls.n	8027ac6 <flash_write+0x1d2>
 8027abc:	6a3a      	ldr	r2, [r7, #32]
 8027abe:	68b9      	ldr	r1, [r7, #8]
 8027ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027ac2:	f7fe fffb 	bl	8026abc <hexdump>
	return(err);
 8027ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8027ac8:	4618      	mov	r0, r3
 8027aca:	373c      	adds	r7, #60	; 0x3c
 8027acc:	46bd      	mov	sp, r7
 8027ace:	bd90      	pop	{r4, r7, pc}
 8027ad0:	08032c4c 	.word	0x08032c4c
 8027ad4:	58020000 	.word	0x58020000
 8027ad8:	24001e24 	.word	0x24001e24
 8027adc:	24001f24 	.word	0x24001f24
 8027ae0:	08032c84 	.word	0x08032c84
 8027ae4:	08032c9c 	.word	0x08032c9c
 8027ae8:	08032cd4 	.word	0x08032cd4
 8027aec:	08032ce8 	.word	0x08032ce8

08027af0 <SF_RW_Byte_FLASH>:


BYTE SF_RW_Byte_FLASH(BYTE data)
{
 8027af0:	b580      	push	{r7, lr}
 8027af2:	b086      	sub	sp, #24
 8027af4:	af02      	add	r7, sp, #8
 8027af6:	4603      	mov	r3, r0
 8027af8:	71fb      	strb	r3, [r7, #7]
   BYTE read, test = 0;
 8027afa:	2300      	movs	r3, #0
 8027afc:	73fb      	strb	r3, [r7, #15]
   HAL_SPI_TransmitReceive(SF_HANDLE, &data, &read, 1, 100);
 8027afe:	f107 020e 	add.w	r2, r7, #14
 8027b02:	1df9      	adds	r1, r7, #7
 8027b04:	2364      	movs	r3, #100	; 0x64
 8027b06:	9300      	str	r3, [sp, #0]
 8027b08:	2301      	movs	r3, #1
 8027b0a:	4806      	ldr	r0, [pc, #24]	; (8027b24 <SF_RW_Byte_FLASH+0x34>)
 8027b0c:	f006 f988 	bl	802de20 <HAL_SPI_TransmitReceive>
   if(read != 0)
 8027b10:	7bbb      	ldrb	r3, [r7, #14]
 8027b12:	2b00      	cmp	r3, #0
 8027b14:	d001      	beq.n	8027b1a <SF_RW_Byte_FLASH+0x2a>
	   test = 1;
 8027b16:	2301      	movs	r3, #1
 8027b18:	73fb      	strb	r3, [r7, #15]
   return read;
 8027b1a:	7bbb      	ldrb	r3, [r7, #14]



}
 8027b1c:	4618      	mov	r0, r3
 8027b1e:	3710      	adds	r7, #16
 8027b20:	46bd      	mov	sp, r7
 8027b22:	bd80      	pop	{r7, pc}
 8027b24:	240019d4 	.word	0x240019d4

08027b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8027b28:	b580      	push	{r7, lr}
 8027b2a:	b084      	sub	sp, #16
 8027b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  MPU_Config();
 8027b2e:	f7ff f818 	bl	8026b62 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8027b32:	4b3b      	ldr	r3, [pc, #236]	; (8027c20 <main+0xf8>)
 8027b34:	695b      	ldr	r3, [r3, #20]
 8027b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027b3a:	2b00      	cmp	r3, #0
 8027b3c:	d11b      	bne.n	8027b76 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8027b3e:	f3bf 8f4f 	dsb	sy
}
 8027b42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8027b44:	f3bf 8f6f 	isb	sy
}
 8027b48:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8027b4a:	4b35      	ldr	r3, [pc, #212]	; (8027c20 <main+0xf8>)
 8027b4c:	2200      	movs	r2, #0
 8027b4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8027b52:	f3bf 8f4f 	dsb	sy
}
 8027b56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8027b58:	f3bf 8f6f 	isb	sy
}
 8027b5c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8027b5e:	4b30      	ldr	r3, [pc, #192]	; (8027c20 <main+0xf8>)
 8027b60:	695b      	ldr	r3, [r3, #20]
 8027b62:	4a2f      	ldr	r2, [pc, #188]	; (8027c20 <main+0xf8>)
 8027b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027b68:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8027b6a:	f3bf 8f4f 	dsb	sy
}
 8027b6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8027b70:	f3bf 8f6f 	isb	sy
}
 8027b74:	e000      	b.n	8027b78 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8027b76:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8027b78:	4b29      	ldr	r3, [pc, #164]	; (8027c20 <main+0xf8>)
 8027b7a:	695b      	ldr	r3, [r3, #20]
 8027b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027b80:	2b00      	cmp	r3, #0
 8027b82:	d138      	bne.n	8027bf6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8027b84:	4b26      	ldr	r3, [pc, #152]	; (8027c20 <main+0xf8>)
 8027b86:	2200      	movs	r2, #0
 8027b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8027b8c:	f3bf 8f4f 	dsb	sy
}
 8027b90:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8027b92:	4b23      	ldr	r3, [pc, #140]	; (8027c20 <main+0xf8>)
 8027b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8027b98:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8027b9a:	68fb      	ldr	r3, [r7, #12]
 8027b9c:	0b5b      	lsrs	r3, r3, #13
 8027b9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8027ba2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8027ba4:	68fb      	ldr	r3, [r7, #12]
 8027ba6:	08db      	lsrs	r3, r3, #3
 8027ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8027bac:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8027bae:	68bb      	ldr	r3, [r7, #8]
 8027bb0:	015a      	lsls	r2, r3, #5
 8027bb2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8027bb6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8027bb8:	687a      	ldr	r2, [r7, #4]
 8027bba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8027bbc:	4918      	ldr	r1, [pc, #96]	; (8027c20 <main+0xf8>)
 8027bbe:	4313      	orrs	r3, r2
 8027bc0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8027bc4:	687b      	ldr	r3, [r7, #4]
 8027bc6:	1e5a      	subs	r2, r3, #1
 8027bc8:	607a      	str	r2, [r7, #4]
 8027bca:	2b00      	cmp	r3, #0
 8027bcc:	d1ef      	bne.n	8027bae <main+0x86>
    } while(sets-- != 0U);
 8027bce:	68bb      	ldr	r3, [r7, #8]
 8027bd0:	1e5a      	subs	r2, r3, #1
 8027bd2:	60ba      	str	r2, [r7, #8]
 8027bd4:	2b00      	cmp	r3, #0
 8027bd6:	d1e5      	bne.n	8027ba4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8027bd8:	f3bf 8f4f 	dsb	sy
}
 8027bdc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8027bde:	4b10      	ldr	r3, [pc, #64]	; (8027c20 <main+0xf8>)
 8027be0:	695b      	ldr	r3, [r3, #20]
 8027be2:	4a0f      	ldr	r2, [pc, #60]	; (8027c20 <main+0xf8>)
 8027be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027be8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8027bea:	f3bf 8f4f 	dsb	sy
}
 8027bee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8027bf0:	f3bf 8f6f 	isb	sy
}
 8027bf4:	e000      	b.n	8027bf8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8027bf6:	bf00      	nop

  SCB_EnableICache();
  SCB_EnableDCache();

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8027bf8:	f002 f9f8 	bl	8029fec <HAL_Init>
  SystemClock_Config();
 8027bfc:	f7ff f82e 	bl	8026c5c <SystemClock_Config>

  /* USER CODE BEGIN Init */
  InitPeripherals();
 8027c00:	f7ff fc8e 	bl	8027520 <InitPeripherals>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_InitTimer();
 8027c04:	f7fe fca2 	bl	802654c <bsp_InitTimer>
  bsp_InitUart();
 8027c08:	f7fe fd99 	bl	802673e <bsp_InitUart>
  bsp_InitSpiFlash();
 8027c0c:	f7fe fc3e 	bl	802648c <bsp_InitSpiFlash>
  bDip_SW_Flag = TRUE;
 8027c10:	4b04      	ldr	r3, [pc, #16]	; (8027c24 <main+0xfc>)
 8027c12:	2201      	movs	r2, #1
 8027c14:	701a      	strb	r2, [r3, #0]
  GCUInitialize();
 8027c16:	f000 f81b 	bl	8027c50 <GCUInitialize>
  SerialProcess();
 8027c1a:	f000 f83b 	bl	8027c94 <SerialProcess>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8027c1e:	e7fe      	b.n	8027c1e <main+0xf6>
 8027c20:	e000ed00 	.word	0xe000ed00
 8027c24:	24001f2c 	.word	0x24001f2c

08027c28 <dip_sw>:
}



word dip_sw(void)
{
 8027c28:	b480      	push	{r7}
 8027c2a:	b083      	sub	sp, #12
 8027c2c:	af00      	add	r7, sp, #0
	word	idata;

	idata = (GPIOB->IDR)^0xff;
 8027c2e:	4b07      	ldr	r3, [pc, #28]	; (8027c4c <dip_sw+0x24>)
 8027c30:	691b      	ldr	r3, [r3, #16]
 8027c32:	b29b      	uxth	r3, r3
 8027c34:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8027c38:	80fb      	strh	r3, [r7, #6]

	return(idata & 0xff);
 8027c3a:	88fb      	ldrh	r3, [r7, #6]
 8027c3c:	b2db      	uxtb	r3, r3
 8027c3e:	b29b      	uxth	r3, r3
}
 8027c40:	4618      	mov	r0, r3
 8027c42:	370c      	adds	r7, #12
 8027c44:	46bd      	mov	sp, r7
 8027c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c4a:	4770      	bx	lr
 8027c4c:	58020400 	.word	0x58020400

08027c50 <GCUInitialize>:
* Return:   void
* comments:
*******************************************************************************/

void GCUInitialize(void)
{
 8027c50:	b580      	push	{r7, lr}
 8027c52:	af00      	add	r7, sp, #0
	//EcuEmergencyOff();
	BuzzerOff();
 8027c54:	f7fd fbcc 	bl	80253f0 <BuzzerOff>

	//ControlStatusLED_En(DIR_RED);
	//ControlStatusLED_Ex(DIR_RED);
	ControlIndicatorLight_En(LAMP_OFF);
 8027c58:	2000      	movs	r0, #0
 8027c5a:	f7fd fc95 	bl	8025588 <ControlIndicatorLight_En>
	ControlIndicatorLight_Ex(LAMP_OFF);
 8027c5e:	2000      	movs	r0, #0
 8027c60:	f7fd fcc0 	bl	80255e4 <ControlIndicatorLight_Ex>
	ControlUPS_CheckOn();
 8027c64:	2201      	movs	r2, #1
 8027c66:	2140      	movs	r1, #64	; 0x40
 8027c68:	4809      	ldr	r0, [pc, #36]	; (8027c90 <GCUInitialize+0x40>)
 8027c6a:	f003 f925 	bl	802aeb8 <HAL_GPIO_WritePin>
	ControlUPS_ShutDownOff();
 8027c6e:	2201      	movs	r2, #1
 8027c70:	2180      	movs	r1, #128	; 0x80
 8027c72:	4807      	ldr	r0, [pc, #28]	; (8027c90 <GCUInitialize+0x40>)
 8027c74:	f003 f920 	bl	802aeb8 <HAL_GPIO_WritePin>
	SetDefaultOpMode();
 8027c78:	f7f9 f890 	bl	8020d9c <SetDefaultOpMode>
	SetDefaultParameter();
 8027c7c:	f7f9 f8aa 	bl	8020dd4 <SetDefaultParameter>
	SetDefaultStatus();
 8027c80:	f7f9 f8e6 	bl	8020e50 <SetDefaultStatus>
	// Brr_SetSerialComm(TRUE);
	Brr_OpenBarrier(BARRIER_OPEN_FOR_EX);
 8027c84:	2002      	movs	r0, #2
 8027c86:	f7f8 fd23 	bl	80206d0 <Brr_OpenBarrier>
}
 8027c8a:	bf00      	nop
 8027c8c:	bd80      	pop	{r7, pc}
 8027c8e:	bf00      	nop
 8027c90:	58021400 	.word	0x58021400

08027c94 <SerialProcess>:


inline void SerialProcess(void)
{
 8027c94:	b580      	push	{r7, lr}
 8027c96:	af00      	add	r7, sp, #0
	for (;;)
	{
		ProcessComm_Barrier();
 8027c98:	f7f9 f812 	bl	8020cc0 <ProcessComm_Barrier>
		ProcessComm_ECU();
 8027c9c:	f7fb fb82 	bl	80233a4 <ProcessComm_ECU>
		ProcessComm_Barrier();
 8027ca0:	e7fa      	b.n	8027c98 <SerialProcess+0x4>

08027ca2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8027ca2:	b480      	push	{r7}
 8027ca4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8027ca6:	b672      	cpsid	i
}
 8027ca8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8027caa:	e7fe      	b.n	8027caa <Error_Handler+0x8>

08027cac <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8027cac:	b480      	push	{r7}
 8027cae:	b085      	sub	sp, #20
 8027cb0:	af00      	add	r7, sp, #0
 8027cb2:	60b9      	str	r1, [r7, #8]
 8027cb4:	607a      	str	r2, [r7, #4]
 8027cb6:	603b      	str	r3, [r7, #0]
 8027cb8:	4603      	mov	r3, r0
 8027cba:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8027cbc:	bf00      	nop
 8027cbe:	3714      	adds	r7, #20
 8027cc0:	46bd      	mov	sp, r7
 8027cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cc6:	4770      	bx	lr

08027cc8 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8027cc8:	b580      	push	{r7, lr}
 8027cca:	b084      	sub	sp, #16
 8027ccc:	af00      	add	r7, sp, #0
 8027cce:	60b9      	str	r1, [r7, #8]
 8027cd0:	607a      	str	r2, [r7, #4]
 8027cd2:	603b      	str	r3, [r7, #0]
 8027cd4:	4603      	mov	r3, r0
 8027cd6:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8027cd8:	7bfb      	ldrb	r3, [r7, #15]
 8027cda:	2b00      	cmp	r3, #0
 8027cdc:	d003      	beq.n	8027ce6 <_out_char+0x1e>
    _putchar(character);
 8027cde:	7bfb      	ldrb	r3, [r7, #15]
 8027ce0:	4618      	mov	r0, r3
 8027ce2:	f7fe fddd 	bl	80268a0 <_putchar>
  }
}
 8027ce6:	bf00      	nop
 8027ce8:	3710      	adds	r7, #16
 8027cea:	46bd      	mov	sp, r7
 8027cec:	bd80      	pop	{r7, pc}

08027cee <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8027cee:	b480      	push	{r7}
 8027cf0:	b085      	sub	sp, #20
 8027cf2:	af00      	add	r7, sp, #0
 8027cf4:	6078      	str	r0, [r7, #4]
 8027cf6:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8027cf8:	687b      	ldr	r3, [r7, #4]
 8027cfa:	60fb      	str	r3, [r7, #12]
 8027cfc:	e002      	b.n	8027d04 <_strnlen_s+0x16>
 8027cfe:	68fb      	ldr	r3, [r7, #12]
 8027d00:	3301      	adds	r3, #1
 8027d02:	60fb      	str	r3, [r7, #12]
 8027d04:	68fb      	ldr	r3, [r7, #12]
 8027d06:	781b      	ldrb	r3, [r3, #0]
 8027d08:	2b00      	cmp	r3, #0
 8027d0a:	d004      	beq.n	8027d16 <_strnlen_s+0x28>
 8027d0c:	683b      	ldr	r3, [r7, #0]
 8027d0e:	1e5a      	subs	r2, r3, #1
 8027d10:	603a      	str	r2, [r7, #0]
 8027d12:	2b00      	cmp	r3, #0
 8027d14:	d1f3      	bne.n	8027cfe <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8027d16:	68fa      	ldr	r2, [r7, #12]
 8027d18:	687b      	ldr	r3, [r7, #4]
 8027d1a:	1ad3      	subs	r3, r2, r3
}
 8027d1c:	4618      	mov	r0, r3
 8027d1e:	3714      	adds	r7, #20
 8027d20:	46bd      	mov	sp, r7
 8027d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d26:	4770      	bx	lr

08027d28 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8027d28:	b480      	push	{r7}
 8027d2a:	b083      	sub	sp, #12
 8027d2c:	af00      	add	r7, sp, #0
 8027d2e:	4603      	mov	r3, r0
 8027d30:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8027d32:	79fb      	ldrb	r3, [r7, #7]
 8027d34:	2b2f      	cmp	r3, #47	; 0x2f
 8027d36:	d904      	bls.n	8027d42 <_is_digit+0x1a>
 8027d38:	79fb      	ldrb	r3, [r7, #7]
 8027d3a:	2b39      	cmp	r3, #57	; 0x39
 8027d3c:	d801      	bhi.n	8027d42 <_is_digit+0x1a>
 8027d3e:	2301      	movs	r3, #1
 8027d40:	e000      	b.n	8027d44 <_is_digit+0x1c>
 8027d42:	2300      	movs	r3, #0
 8027d44:	f003 0301 	and.w	r3, r3, #1
 8027d48:	b2db      	uxtb	r3, r3
}
 8027d4a:	4618      	mov	r0, r3
 8027d4c:	370c      	adds	r7, #12
 8027d4e:	46bd      	mov	sp, r7
 8027d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d54:	4770      	bx	lr

08027d56 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8027d56:	b580      	push	{r7, lr}
 8027d58:	b084      	sub	sp, #16
 8027d5a:	af00      	add	r7, sp, #0
 8027d5c:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8027d5e:	2300      	movs	r3, #0
 8027d60:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8027d62:	e00e      	b.n	8027d82 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8027d64:	68fa      	ldr	r2, [r7, #12]
 8027d66:	4613      	mov	r3, r2
 8027d68:	009b      	lsls	r3, r3, #2
 8027d6a:	4413      	add	r3, r2
 8027d6c:	005b      	lsls	r3, r3, #1
 8027d6e:	4618      	mov	r0, r3
 8027d70:	687b      	ldr	r3, [r7, #4]
 8027d72:	681b      	ldr	r3, [r3, #0]
 8027d74:	1c59      	adds	r1, r3, #1
 8027d76:	687a      	ldr	r2, [r7, #4]
 8027d78:	6011      	str	r1, [r2, #0]
 8027d7a:	781b      	ldrb	r3, [r3, #0]
 8027d7c:	4403      	add	r3, r0
 8027d7e:	3b30      	subs	r3, #48	; 0x30
 8027d80:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8027d82:	687b      	ldr	r3, [r7, #4]
 8027d84:	681b      	ldr	r3, [r3, #0]
 8027d86:	781b      	ldrb	r3, [r3, #0]
 8027d88:	4618      	mov	r0, r3
 8027d8a:	f7ff ffcd 	bl	8027d28 <_is_digit>
 8027d8e:	4603      	mov	r3, r0
 8027d90:	2b00      	cmp	r3, #0
 8027d92:	d1e7      	bne.n	8027d64 <_atoi+0xe>
  }
  return i;
 8027d94:	68fb      	ldr	r3, [r7, #12]
}
 8027d96:	4618      	mov	r0, r3
 8027d98:	3710      	adds	r7, #16
 8027d9a:	46bd      	mov	sp, r7
 8027d9c:	bd80      	pop	{r7, pc}

08027d9e <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8027d9e:	b590      	push	{r4, r7, lr}
 8027da0:	b087      	sub	sp, #28
 8027da2:	af00      	add	r7, sp, #0
 8027da4:	60f8      	str	r0, [r7, #12]
 8027da6:	60b9      	str	r1, [r7, #8]
 8027da8:	607a      	str	r2, [r7, #4]
 8027daa:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8027dac:	687b      	ldr	r3, [r7, #4]
 8027dae:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8027db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027db2:	f003 0302 	and.w	r3, r3, #2
 8027db6:	2b00      	cmp	r3, #0
 8027db8:	d125      	bne.n	8027e06 <_out_rev+0x68>
 8027dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027dbc:	f003 0301 	and.w	r3, r3, #1
 8027dc0:	2b00      	cmp	r3, #0
 8027dc2:	d120      	bne.n	8027e06 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8027dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027dc6:	617b      	str	r3, [r7, #20]
 8027dc8:	e00a      	b.n	8027de0 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8027dca:	687a      	ldr	r2, [r7, #4]
 8027dcc:	1c53      	adds	r3, r2, #1
 8027dce:	607b      	str	r3, [r7, #4]
 8027dd0:	68fc      	ldr	r4, [r7, #12]
 8027dd2:	683b      	ldr	r3, [r7, #0]
 8027dd4:	68b9      	ldr	r1, [r7, #8]
 8027dd6:	2020      	movs	r0, #32
 8027dd8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8027dda:	697b      	ldr	r3, [r7, #20]
 8027ddc:	3301      	adds	r3, #1
 8027dde:	617b      	str	r3, [r7, #20]
 8027de0:	697a      	ldr	r2, [r7, #20]
 8027de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027de4:	429a      	cmp	r2, r3
 8027de6:	d3f0      	bcc.n	8027dca <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8027de8:	e00d      	b.n	8027e06 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8027dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027dec:	3b01      	subs	r3, #1
 8027dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027df4:	4413      	add	r3, r2
 8027df6:	7818      	ldrb	r0, [r3, #0]
 8027df8:	687a      	ldr	r2, [r7, #4]
 8027dfa:	1c53      	adds	r3, r2, #1
 8027dfc:	607b      	str	r3, [r7, #4]
 8027dfe:	68fc      	ldr	r4, [r7, #12]
 8027e00:	683b      	ldr	r3, [r7, #0]
 8027e02:	68b9      	ldr	r1, [r7, #8]
 8027e04:	47a0      	blx	r4
  while (len) {
 8027e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e08:	2b00      	cmp	r3, #0
 8027e0a:	d1ee      	bne.n	8027dea <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8027e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027e0e:	f003 0302 	and.w	r3, r3, #2
 8027e12:	2b00      	cmp	r3, #0
 8027e14:	d00e      	beq.n	8027e34 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8027e16:	e007      	b.n	8027e28 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8027e18:	687a      	ldr	r2, [r7, #4]
 8027e1a:	1c53      	adds	r3, r2, #1
 8027e1c:	607b      	str	r3, [r7, #4]
 8027e1e:	68fc      	ldr	r4, [r7, #12]
 8027e20:	683b      	ldr	r3, [r7, #0]
 8027e22:	68b9      	ldr	r1, [r7, #8]
 8027e24:	2020      	movs	r0, #32
 8027e26:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8027e28:	687a      	ldr	r2, [r7, #4]
 8027e2a:	693b      	ldr	r3, [r7, #16]
 8027e2c:	1ad3      	subs	r3, r2, r3
 8027e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027e30:	429a      	cmp	r2, r3
 8027e32:	d8f1      	bhi.n	8027e18 <_out_rev+0x7a>
    }
  }

  return idx;
 8027e34:	687b      	ldr	r3, [r7, #4]
}
 8027e36:	4618      	mov	r0, r3
 8027e38:	371c      	adds	r7, #28
 8027e3a:	46bd      	mov	sp, r7
 8027e3c:	bd90      	pop	{r4, r7, pc}

08027e3e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8027e3e:	b580      	push	{r7, lr}
 8027e40:	b088      	sub	sp, #32
 8027e42:	af04      	add	r7, sp, #16
 8027e44:	60f8      	str	r0, [r7, #12]
 8027e46:	60b9      	str	r1, [r7, #8]
 8027e48:	607a      	str	r2, [r7, #4]
 8027e4a:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8027e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027e4e:	f003 0302 	and.w	r3, r3, #2
 8027e52:	2b00      	cmp	r3, #0
 8027e54:	d136      	bne.n	8027ec4 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8027e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e58:	2b00      	cmp	r3, #0
 8027e5a:	d018      	beq.n	8027e8e <_ntoa_format+0x50>
 8027e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027e5e:	f003 0301 	and.w	r3, r3, #1
 8027e62:	2b00      	cmp	r3, #0
 8027e64:	d013      	beq.n	8027e8e <_ntoa_format+0x50>
 8027e66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8027e6a:	2b00      	cmp	r3, #0
 8027e6c:	d104      	bne.n	8027e78 <_ntoa_format+0x3a>
 8027e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027e70:	f003 030c 	and.w	r3, r3, #12
 8027e74:	2b00      	cmp	r3, #0
 8027e76:	d00a      	beq.n	8027e8e <_ntoa_format+0x50>
      width--;
 8027e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e7a:	3b01      	subs	r3, #1
 8027e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8027e7e:	e006      	b.n	8027e8e <_ntoa_format+0x50>
      buf[len++] = '0';
 8027e80:	69fb      	ldr	r3, [r7, #28]
 8027e82:	1c5a      	adds	r2, r3, #1
 8027e84:	61fa      	str	r2, [r7, #28]
 8027e86:	69ba      	ldr	r2, [r7, #24]
 8027e88:	4413      	add	r3, r2
 8027e8a:	2230      	movs	r2, #48	; 0x30
 8027e8c:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8027e8e:	69fa      	ldr	r2, [r7, #28]
 8027e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027e92:	429a      	cmp	r2, r3
 8027e94:	d20a      	bcs.n	8027eac <_ntoa_format+0x6e>
 8027e96:	69fb      	ldr	r3, [r7, #28]
 8027e98:	2b1f      	cmp	r3, #31
 8027e9a:	d9f1      	bls.n	8027e80 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8027e9c:	e006      	b.n	8027eac <_ntoa_format+0x6e>
      buf[len++] = '0';
 8027e9e:	69fb      	ldr	r3, [r7, #28]
 8027ea0:	1c5a      	adds	r2, r3, #1
 8027ea2:	61fa      	str	r2, [r7, #28]
 8027ea4:	69ba      	ldr	r2, [r7, #24]
 8027ea6:	4413      	add	r3, r2
 8027ea8:	2230      	movs	r2, #48	; 0x30
 8027eaa:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8027eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027eae:	f003 0301 	and.w	r3, r3, #1
 8027eb2:	2b00      	cmp	r3, #0
 8027eb4:	d006      	beq.n	8027ec4 <_ntoa_format+0x86>
 8027eb6:	69fa      	ldr	r2, [r7, #28]
 8027eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027eba:	429a      	cmp	r2, r3
 8027ebc:	d202      	bcs.n	8027ec4 <_ntoa_format+0x86>
 8027ebe:	69fb      	ldr	r3, [r7, #28]
 8027ec0:	2b1f      	cmp	r3, #31
 8027ec2:	d9ec      	bls.n	8027e9e <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8027ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027ec6:	f003 0310 	and.w	r3, r3, #16
 8027eca:	2b00      	cmp	r3, #0
 8027ecc:	d058      	beq.n	8027f80 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8027ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027ed4:	2b00      	cmp	r3, #0
 8027ed6:	d116      	bne.n	8027f06 <_ntoa_format+0xc8>
 8027ed8:	69fb      	ldr	r3, [r7, #28]
 8027eda:	2b00      	cmp	r3, #0
 8027edc:	d013      	beq.n	8027f06 <_ntoa_format+0xc8>
 8027ede:	69fa      	ldr	r2, [r7, #28]
 8027ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027ee2:	429a      	cmp	r2, r3
 8027ee4:	d003      	beq.n	8027eee <_ntoa_format+0xb0>
 8027ee6:	69fa      	ldr	r2, [r7, #28]
 8027ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027eea:	429a      	cmp	r2, r3
 8027eec:	d10b      	bne.n	8027f06 <_ntoa_format+0xc8>
      len--;
 8027eee:	69fb      	ldr	r3, [r7, #28]
 8027ef0:	3b01      	subs	r3, #1
 8027ef2:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8027ef4:	69fb      	ldr	r3, [r7, #28]
 8027ef6:	2b00      	cmp	r3, #0
 8027ef8:	d005      	beq.n	8027f06 <_ntoa_format+0xc8>
 8027efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027efc:	2b10      	cmp	r3, #16
 8027efe:	d102      	bne.n	8027f06 <_ntoa_format+0xc8>
        len--;
 8027f00:	69fb      	ldr	r3, [r7, #28]
 8027f02:	3b01      	subs	r3, #1
 8027f04:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8027f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f08:	2b10      	cmp	r3, #16
 8027f0a:	d10f      	bne.n	8027f2c <_ntoa_format+0xee>
 8027f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f0e:	f003 0320 	and.w	r3, r3, #32
 8027f12:	2b00      	cmp	r3, #0
 8027f14:	d10a      	bne.n	8027f2c <_ntoa_format+0xee>
 8027f16:	69fb      	ldr	r3, [r7, #28]
 8027f18:	2b1f      	cmp	r3, #31
 8027f1a:	d807      	bhi.n	8027f2c <_ntoa_format+0xee>
      buf[len++] = 'x';
 8027f1c:	69fb      	ldr	r3, [r7, #28]
 8027f1e:	1c5a      	adds	r2, r3, #1
 8027f20:	61fa      	str	r2, [r7, #28]
 8027f22:	69ba      	ldr	r2, [r7, #24]
 8027f24:	4413      	add	r3, r2
 8027f26:	2278      	movs	r2, #120	; 0x78
 8027f28:	701a      	strb	r2, [r3, #0]
 8027f2a:	e01f      	b.n	8027f6c <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8027f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f2e:	2b10      	cmp	r3, #16
 8027f30:	d10f      	bne.n	8027f52 <_ntoa_format+0x114>
 8027f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f34:	f003 0320 	and.w	r3, r3, #32
 8027f38:	2b00      	cmp	r3, #0
 8027f3a:	d00a      	beq.n	8027f52 <_ntoa_format+0x114>
 8027f3c:	69fb      	ldr	r3, [r7, #28]
 8027f3e:	2b1f      	cmp	r3, #31
 8027f40:	d807      	bhi.n	8027f52 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8027f42:	69fb      	ldr	r3, [r7, #28]
 8027f44:	1c5a      	adds	r2, r3, #1
 8027f46:	61fa      	str	r2, [r7, #28]
 8027f48:	69ba      	ldr	r2, [r7, #24]
 8027f4a:	4413      	add	r3, r2
 8027f4c:	2258      	movs	r2, #88	; 0x58
 8027f4e:	701a      	strb	r2, [r3, #0]
 8027f50:	e00c      	b.n	8027f6c <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8027f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f54:	2b02      	cmp	r3, #2
 8027f56:	d109      	bne.n	8027f6c <_ntoa_format+0x12e>
 8027f58:	69fb      	ldr	r3, [r7, #28]
 8027f5a:	2b1f      	cmp	r3, #31
 8027f5c:	d806      	bhi.n	8027f6c <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8027f5e:	69fb      	ldr	r3, [r7, #28]
 8027f60:	1c5a      	adds	r2, r3, #1
 8027f62:	61fa      	str	r2, [r7, #28]
 8027f64:	69ba      	ldr	r2, [r7, #24]
 8027f66:	4413      	add	r3, r2
 8027f68:	2262      	movs	r2, #98	; 0x62
 8027f6a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8027f6c:	69fb      	ldr	r3, [r7, #28]
 8027f6e:	2b1f      	cmp	r3, #31
 8027f70:	d806      	bhi.n	8027f80 <_ntoa_format+0x142>
      buf[len++] = '0';
 8027f72:	69fb      	ldr	r3, [r7, #28]
 8027f74:	1c5a      	adds	r2, r3, #1
 8027f76:	61fa      	str	r2, [r7, #28]
 8027f78:	69ba      	ldr	r2, [r7, #24]
 8027f7a:	4413      	add	r3, r2
 8027f7c:	2230      	movs	r2, #48	; 0x30
 8027f7e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8027f80:	69fb      	ldr	r3, [r7, #28]
 8027f82:	2b1f      	cmp	r3, #31
 8027f84:	d824      	bhi.n	8027fd0 <_ntoa_format+0x192>
    if (negative) {
 8027f86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8027f8a:	2b00      	cmp	r3, #0
 8027f8c:	d007      	beq.n	8027f9e <_ntoa_format+0x160>
      buf[len++] = '-';
 8027f8e:	69fb      	ldr	r3, [r7, #28]
 8027f90:	1c5a      	adds	r2, r3, #1
 8027f92:	61fa      	str	r2, [r7, #28]
 8027f94:	69ba      	ldr	r2, [r7, #24]
 8027f96:	4413      	add	r3, r2
 8027f98:	222d      	movs	r2, #45	; 0x2d
 8027f9a:	701a      	strb	r2, [r3, #0]
 8027f9c:	e018      	b.n	8027fd0 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8027f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027fa0:	f003 0304 	and.w	r3, r3, #4
 8027fa4:	2b00      	cmp	r3, #0
 8027fa6:	d007      	beq.n	8027fb8 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8027fa8:	69fb      	ldr	r3, [r7, #28]
 8027faa:	1c5a      	adds	r2, r3, #1
 8027fac:	61fa      	str	r2, [r7, #28]
 8027fae:	69ba      	ldr	r2, [r7, #24]
 8027fb0:	4413      	add	r3, r2
 8027fb2:	222b      	movs	r2, #43	; 0x2b
 8027fb4:	701a      	strb	r2, [r3, #0]
 8027fb6:	e00b      	b.n	8027fd0 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8027fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027fba:	f003 0308 	and.w	r3, r3, #8
 8027fbe:	2b00      	cmp	r3, #0
 8027fc0:	d006      	beq.n	8027fd0 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8027fc2:	69fb      	ldr	r3, [r7, #28]
 8027fc4:	1c5a      	adds	r2, r3, #1
 8027fc6:	61fa      	str	r2, [r7, #28]
 8027fc8:	69ba      	ldr	r2, [r7, #24]
 8027fca:	4413      	add	r3, r2
 8027fcc:	2220      	movs	r2, #32
 8027fce:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8027fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027fd2:	9303      	str	r3, [sp, #12]
 8027fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fd6:	9302      	str	r3, [sp, #8]
 8027fd8:	69fb      	ldr	r3, [r7, #28]
 8027fda:	9301      	str	r3, [sp, #4]
 8027fdc:	69bb      	ldr	r3, [r7, #24]
 8027fde:	9300      	str	r3, [sp, #0]
 8027fe0:	683b      	ldr	r3, [r7, #0]
 8027fe2:	687a      	ldr	r2, [r7, #4]
 8027fe4:	68b9      	ldr	r1, [r7, #8]
 8027fe6:	68f8      	ldr	r0, [r7, #12]
 8027fe8:	f7ff fed9 	bl	8027d9e <_out_rev>
 8027fec:	4603      	mov	r3, r0
}
 8027fee:	4618      	mov	r0, r3
 8027ff0:	3710      	adds	r7, #16
 8027ff2:	46bd      	mov	sp, r7
 8027ff4:	bd80      	pop	{r7, pc}

08027ff6 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8027ff6:	b580      	push	{r7, lr}
 8027ff8:	b096      	sub	sp, #88	; 0x58
 8027ffa:	af08      	add	r7, sp, #32
 8027ffc:	60f8      	str	r0, [r7, #12]
 8027ffe:	60b9      	str	r1, [r7, #8]
 8028000:	607a      	str	r2, [r7, #4]
 8028002:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8028004:	2300      	movs	r3, #0
 8028006:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8028008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802800a:	2b00      	cmp	r3, #0
 802800c:	d103      	bne.n	8028016 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 802800e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028010:	f023 0310 	bic.w	r3, r3, #16
 8028014:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8028016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802801c:	2b00      	cmp	r3, #0
 802801e:	d002      	beq.n	8028026 <_ntoa_long+0x30>
 8028020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028022:	2b00      	cmp	r3, #0
 8028024:	d032      	beq.n	802808c <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8028026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802802a:	fbb3 f2f2 	udiv	r2, r3, r2
 802802e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8028030:	fb01 f202 	mul.w	r2, r1, r2
 8028034:	1a9b      	subs	r3, r3, r2
 8028036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 802803a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802803e:	2b09      	cmp	r3, #9
 8028040:	d804      	bhi.n	802804c <_ntoa_long+0x56>
 8028042:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8028046:	3330      	adds	r3, #48	; 0x30
 8028048:	b2da      	uxtb	r2, r3
 802804a:	e00d      	b.n	8028068 <_ntoa_long+0x72>
 802804c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802804e:	f003 0320 	and.w	r3, r3, #32
 8028052:	2b00      	cmp	r3, #0
 8028054:	d001      	beq.n	802805a <_ntoa_long+0x64>
 8028056:	2241      	movs	r2, #65	; 0x41
 8028058:	e000      	b.n	802805c <_ntoa_long+0x66>
 802805a:	2261      	movs	r2, #97	; 0x61
 802805c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8028060:	4413      	add	r3, r2
 8028062:	b2db      	uxtb	r3, r3
 8028064:	3b0a      	subs	r3, #10
 8028066:	b2da      	uxtb	r2, r3
 8028068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802806a:	1c59      	adds	r1, r3, #1
 802806c:	6379      	str	r1, [r7, #52]	; 0x34
 802806e:	3338      	adds	r3, #56	; 0x38
 8028070:	443b      	add	r3, r7
 8028072:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8028076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8028078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802807a:	fbb2 f3f3 	udiv	r3, r2, r3
 802807e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8028080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028082:	2b00      	cmp	r3, #0
 8028084:	d002      	beq.n	802808c <_ntoa_long+0x96>
 8028086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028088:	2b1f      	cmp	r3, #31
 802808a:	d9cc      	bls.n	8028026 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 802808c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802808e:	9306      	str	r3, [sp, #24]
 8028090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028092:	9305      	str	r3, [sp, #20]
 8028094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028096:	9304      	str	r3, [sp, #16]
 8028098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802809a:	9303      	str	r3, [sp, #12]
 802809c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80280a0:	9302      	str	r3, [sp, #8]
 80280a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80280a4:	9301      	str	r3, [sp, #4]
 80280a6:	f107 0310 	add.w	r3, r7, #16
 80280aa:	9300      	str	r3, [sp, #0]
 80280ac:	683b      	ldr	r3, [r7, #0]
 80280ae:	687a      	ldr	r2, [r7, #4]
 80280b0:	68b9      	ldr	r1, [r7, #8]
 80280b2:	68f8      	ldr	r0, [r7, #12]
 80280b4:	f7ff fec3 	bl	8027e3e <_ntoa_format>
 80280b8:	4603      	mov	r3, r0
}
 80280ba:	4618      	mov	r0, r3
 80280bc:	3738      	adds	r7, #56	; 0x38
 80280be:	46bd      	mov	sp, r7
 80280c0:	bd80      	pop	{r7, pc}

080280c2 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80280c2:	b580      	push	{r7, lr}
 80280c4:	b096      	sub	sp, #88	; 0x58
 80280c6:	af08      	add	r7, sp, #32
 80280c8:	60f8      	str	r0, [r7, #12]
 80280ca:	60b9      	str	r1, [r7, #8]
 80280cc:	607a      	str	r2, [r7, #4]
 80280ce:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80280d0:	2300      	movs	r3, #0
 80280d2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80280d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80280d8:	4313      	orrs	r3, r2
 80280da:	d103      	bne.n	80280e4 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80280dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80280de:	f023 0310 	bic.w	r3, r3, #16
 80280e2:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80280e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80280e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80280ea:	2b00      	cmp	r3, #0
 80280ec:	d003      	beq.n	80280f6 <_ntoa_long_long+0x34>
 80280ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80280f2:	4313      	orrs	r3, r2
 80280f4:	d037      	beq.n	8028166 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80280f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80280fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80280fe:	f7f8 f93f 	bl	8020380 <__aeabi_uldivmod>
 8028102:	4613      	mov	r3, r2
 8028104:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8028108:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802810c:	2b09      	cmp	r3, #9
 802810e:	d804      	bhi.n	802811a <_ntoa_long_long+0x58>
 8028110:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8028114:	3330      	adds	r3, #48	; 0x30
 8028116:	b2da      	uxtb	r2, r3
 8028118:	e00d      	b.n	8028136 <_ntoa_long_long+0x74>
 802811a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802811c:	f003 0320 	and.w	r3, r3, #32
 8028120:	2b00      	cmp	r3, #0
 8028122:	d001      	beq.n	8028128 <_ntoa_long_long+0x66>
 8028124:	2241      	movs	r2, #65	; 0x41
 8028126:	e000      	b.n	802812a <_ntoa_long_long+0x68>
 8028128:	2261      	movs	r2, #97	; 0x61
 802812a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802812e:	4413      	add	r3, r2
 8028130:	b2db      	uxtb	r3, r3
 8028132:	3b0a      	subs	r3, #10
 8028134:	b2da      	uxtb	r2, r3
 8028136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028138:	1c59      	adds	r1, r3, #1
 802813a:	6379      	str	r1, [r7, #52]	; 0x34
 802813c:	3338      	adds	r3, #56	; 0x38
 802813e:	443b      	add	r3, r7
 8028140:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8028144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8028148:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 802814c:	f7f8 f918 	bl	8020380 <__aeabi_uldivmod>
 8028150:	4602      	mov	r2, r0
 8028152:	460b      	mov	r3, r1
 8028154:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8028158:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802815c:	4313      	orrs	r3, r2
 802815e:	d002      	beq.n	8028166 <_ntoa_long_long+0xa4>
 8028160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028162:	2b1f      	cmp	r3, #31
 8028164:	d9c7      	bls.n	80280f6 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8028166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028168:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802816a:	9206      	str	r2, [sp, #24]
 802816c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802816e:	9205      	str	r2, [sp, #20]
 8028170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8028172:	9204      	str	r2, [sp, #16]
 8028174:	9303      	str	r3, [sp, #12]
 8028176:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 802817a:	9302      	str	r3, [sp, #8]
 802817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802817e:	9301      	str	r3, [sp, #4]
 8028180:	f107 0310 	add.w	r3, r7, #16
 8028184:	9300      	str	r3, [sp, #0]
 8028186:	683b      	ldr	r3, [r7, #0]
 8028188:	687a      	ldr	r2, [r7, #4]
 802818a:	68b9      	ldr	r1, [r7, #8]
 802818c:	68f8      	ldr	r0, [r7, #12]
 802818e:	f7ff fe56 	bl	8027e3e <_ntoa_format>
 8028192:	4603      	mov	r3, r0
}
 8028194:	4618      	mov	r0, r3
 8028196:	3738      	adds	r7, #56	; 0x38
 8028198:	46bd      	mov	sp, r7
 802819a:	bd80      	pop	{r7, pc}
 802819c:	0000      	movs	r0, r0
	...

080281a0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80281a0:	b580      	push	{r7, lr}
 80281a2:	b09c      	sub	sp, #112	; 0x70
 80281a4:	af04      	add	r7, sp, #16
 80281a6:	6178      	str	r0, [r7, #20]
 80281a8:	6139      	str	r1, [r7, #16]
 80281aa:	60fa      	str	r2, [r7, #12]
 80281ac:	60bb      	str	r3, [r7, #8]
 80281ae:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80281b2:	2300      	movs	r3, #0
 80281b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80281b6:	f04f 0200 	mov.w	r2, #0
 80281ba:	f04f 0300 	mov.w	r3, #0
 80281be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80281c2:	ed97 6b00 	vldr	d6, [r7]
 80281c6:	ed97 7b00 	vldr	d7, [r7]
 80281ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80281ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281d2:	d00f      	beq.n	80281f4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80281d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80281d6:	9303      	str	r3, [sp, #12]
 80281d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80281da:	9302      	str	r3, [sp, #8]
 80281dc:	2303      	movs	r3, #3
 80281de:	9301      	str	r3, [sp, #4]
 80281e0:	4bb5      	ldr	r3, [pc, #724]	; (80284b8 <_ftoa+0x318>)
 80281e2:	9300      	str	r3, [sp, #0]
 80281e4:	68bb      	ldr	r3, [r7, #8]
 80281e6:	68fa      	ldr	r2, [r7, #12]
 80281e8:	6939      	ldr	r1, [r7, #16]
 80281ea:	6978      	ldr	r0, [r7, #20]
 80281ec:	f7ff fdd7 	bl	8027d9e <_out_rev>
 80281f0:	4603      	mov	r3, r0
 80281f2:	e215      	b.n	8028620 <_ftoa+0x480>
  if (value < -DBL_MAX)
 80281f4:	ed97 7b00 	vldr	d7, [r7]
 80281f8:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8028490 <_ftoa+0x2f0>
 80281fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028204:	d50f      	bpl.n	8028226 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8028206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028208:	9303      	str	r3, [sp, #12]
 802820a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802820c:	9302      	str	r3, [sp, #8]
 802820e:	2304      	movs	r3, #4
 8028210:	9301      	str	r3, [sp, #4]
 8028212:	4baa      	ldr	r3, [pc, #680]	; (80284bc <_ftoa+0x31c>)
 8028214:	9300      	str	r3, [sp, #0]
 8028216:	68bb      	ldr	r3, [r7, #8]
 8028218:	68fa      	ldr	r2, [r7, #12]
 802821a:	6939      	ldr	r1, [r7, #16]
 802821c:	6978      	ldr	r0, [r7, #20]
 802821e:	f7ff fdbe 	bl	8027d9e <_out_rev>
 8028222:	4603      	mov	r3, r0
 8028224:	e1fc      	b.n	8028620 <_ftoa+0x480>
  if (value > DBL_MAX)
 8028226:	ed97 7b00 	vldr	d7, [r7]
 802822a:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8028498 <_ftoa+0x2f8>
 802822e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028236:	dd1d      	ble.n	8028274 <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8028238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802823a:	f003 0304 	and.w	r3, r3, #4
 802823e:	2b00      	cmp	r3, #0
 8028240:	d001      	beq.n	8028246 <_ftoa+0xa6>
 8028242:	4b9f      	ldr	r3, [pc, #636]	; (80284c0 <_ftoa+0x320>)
 8028244:	e000      	b.n	8028248 <_ftoa+0xa8>
 8028246:	4b9f      	ldr	r3, [pc, #636]	; (80284c4 <_ftoa+0x324>)
 8028248:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802824a:	f002 0204 	and.w	r2, r2, #4
 802824e:	2a00      	cmp	r2, #0
 8028250:	d001      	beq.n	8028256 <_ftoa+0xb6>
 8028252:	2204      	movs	r2, #4
 8028254:	e000      	b.n	8028258 <_ftoa+0xb8>
 8028256:	2203      	movs	r2, #3
 8028258:	6f39      	ldr	r1, [r7, #112]	; 0x70
 802825a:	9103      	str	r1, [sp, #12]
 802825c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 802825e:	9102      	str	r1, [sp, #8]
 8028260:	9201      	str	r2, [sp, #4]
 8028262:	9300      	str	r3, [sp, #0]
 8028264:	68bb      	ldr	r3, [r7, #8]
 8028266:	68fa      	ldr	r2, [r7, #12]
 8028268:	6939      	ldr	r1, [r7, #16]
 802826a:	6978      	ldr	r0, [r7, #20]
 802826c:	f7ff fd97 	bl	8027d9e <_out_rev>
 8028270:	4603      	mov	r3, r0
 8028272:	e1d5      	b.n	8028620 <_ftoa+0x480>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8028274:	ed97 7b00 	vldr	d7, [r7]
 8028278:	ed9f 6b89 	vldr	d6, [pc, #548]	; 80284a0 <_ftoa+0x300>
 802827c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028284:	dc08      	bgt.n	8028298 <_ftoa+0xf8>
 8028286:	ed97 7b00 	vldr	d7, [r7]
 802828a:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80284a8 <_ftoa+0x308>
 802828e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028296:	d50f      	bpl.n	80282b8 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8028298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802829a:	9302      	str	r3, [sp, #8]
 802829c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802829e:	9301      	str	r3, [sp, #4]
 80282a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80282a2:	9300      	str	r3, [sp, #0]
 80282a4:	ed97 0b00 	vldr	d0, [r7]
 80282a8:	68bb      	ldr	r3, [r7, #8]
 80282aa:	68fa      	ldr	r2, [r7, #12]
 80282ac:	6939      	ldr	r1, [r7, #16]
 80282ae:	6978      	ldr	r0, [r7, #20]
 80282b0:	f000 f9be 	bl	8028630 <_etoa>
 80282b4:	4603      	mov	r3, r0
 80282b6:	e1b3      	b.n	8028620 <_ftoa+0x480>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80282b8:	2300      	movs	r3, #0
 80282ba:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80282be:	ed97 7b00 	vldr	d7, [r7]
 80282c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80282c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282ca:	d50a      	bpl.n	80282e2 <_ftoa+0x142>
    negative = true;
 80282cc:	2301      	movs	r3, #1
 80282ce:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80282d2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80284b0 <_ftoa+0x310>
 80282d6:	ed97 7b00 	vldr	d7, [r7]
 80282da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80282de:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80282e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80282e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80282e8:	2b00      	cmp	r3, #0
 80282ea:	d10d      	bne.n	8028308 <_ftoa+0x168>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80282ec:	2306      	movs	r3, #6
 80282ee:	66bb      	str	r3, [r7, #104]	; 0x68
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80282f0:	e00a      	b.n	8028308 <_ftoa+0x168>
    buf[len++] = '0';
 80282f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80282f4:	1c5a      	adds	r2, r3, #1
 80282f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80282f8:	3360      	adds	r3, #96	; 0x60
 80282fa:	443b      	add	r3, r7
 80282fc:	2230      	movs	r2, #48	; 0x30
 80282fe:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8028302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028304:	3b01      	subs	r3, #1
 8028306:	66bb      	str	r3, [r7, #104]	; 0x68
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8028308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802830a:	2b1f      	cmp	r3, #31
 802830c:	d802      	bhi.n	8028314 <_ftoa+0x174>
 802830e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028310:	2b09      	cmp	r3, #9
 8028312:	d8ee      	bhi.n	80282f2 <_ftoa+0x152>
  }

  int whole = (int)value;
 8028314:	ed97 7b00 	vldr	d7, [r7]
 8028318:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802831c:	ee17 3a90 	vmov	r3, s15
 8028320:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8028322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028324:	ee07 3a90 	vmov	s15, r3
 8028328:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802832c:	ed97 6b00 	vldr	d6, [r7]
 8028330:	ee36 6b47 	vsub.f64	d6, d6, d7
 8028334:	4a64      	ldr	r2, [pc, #400]	; (80284c8 <_ftoa+0x328>)
 8028336:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028338:	00db      	lsls	r3, r3, #3
 802833a:	4413      	add	r3, r2
 802833c:	ed93 7b00 	vldr	d7, [r3]
 8028340:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028344:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8028348:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 802834c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8028350:	ee17 3a90 	vmov	r3, s15
 8028354:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8028356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028358:	ee07 3a90 	vmov	s15, r3
 802835c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8028360:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8028364:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028368:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 802836c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8028370:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8028374:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802837c:	dd18      	ble.n	80283b0 <_ftoa+0x210>
    ++frac;
 802837e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028380:	3301      	adds	r3, #1
 8028382:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8028384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028386:	ee07 3a90 	vmov	s15, r3
 802838a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 802838e:	4a4e      	ldr	r2, [pc, #312]	; (80284c8 <_ftoa+0x328>)
 8028390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028392:	00db      	lsls	r3, r3, #3
 8028394:	4413      	add	r3, r2
 8028396:	ed93 7b00 	vldr	d7, [r3]
 802839a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802839e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283a2:	db19      	blt.n	80283d8 <_ftoa+0x238>
      frac = 0;
 80283a4:	2300      	movs	r3, #0
 80283a6:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80283a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80283aa:	3301      	adds	r3, #1
 80283ac:	657b      	str	r3, [r7, #84]	; 0x54
 80283ae:	e013      	b.n	80283d8 <_ftoa+0x238>
    }
  }
  else if (diff < 0.5) {
 80283b0:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80283b4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80283b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80283bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283c0:	d40a      	bmi.n	80283d8 <_ftoa+0x238>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80283c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80283c4:	2b00      	cmp	r3, #0
 80283c6:	d004      	beq.n	80283d2 <_ftoa+0x232>
 80283c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80283ca:	f003 0301 	and.w	r3, r3, #1
 80283ce:	2b00      	cmp	r3, #0
 80283d0:	d002      	beq.n	80283d8 <_ftoa+0x238>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80283d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80283d4:	3301      	adds	r3, #1
 80283d6:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80283d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80283da:	2b00      	cmp	r3, #0
 80283dc:	d12e      	bne.n	802843c <_ftoa+0x29c>
    diff = value - (double)whole;
 80283de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80283e0:	ee07 3a90 	vmov	s15, r3
 80283e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80283e8:	ed97 6b00 	vldr	d6, [r7]
 80283ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80283f0:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80283f4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80283f8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80283fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028404:	bf4c      	ite	mi
 8028406:	2301      	movmi	r3, #1
 8028408:	2300      	movpl	r3, #0
 802840a:	b2db      	uxtb	r3, r3
 802840c:	f083 0301 	eor.w	r3, r3, #1
 8028410:	b2db      	uxtb	r3, r3
 8028412:	2b00      	cmp	r3, #0
 8028414:	d108      	bne.n	8028428 <_ftoa+0x288>
 8028416:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 802841a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 802841e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028426:	dd70      	ble.n	802850a <_ftoa+0x36a>
 8028428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802842a:	f003 0301 	and.w	r3, r3, #1
 802842e:	2b00      	cmp	r3, #0
 8028430:	f000 808d 	beq.w	802854e <_ftoa+0x3ae>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8028434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028436:	3301      	adds	r3, #1
 8028438:	657b      	str	r3, [r7, #84]	; 0x54
 802843a:	e088      	b.n	802854e <_ftoa+0x3ae>
    }
  }
  else {
    unsigned int count = prec;
 802843c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802843e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8028440:	e01f      	b.n	8028482 <_ftoa+0x2e2>
      --count;
 8028442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028444:	3b01      	subs	r3, #1
 8028446:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8028448:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802844a:	4b20      	ldr	r3, [pc, #128]	; (80284cc <_ftoa+0x32c>)
 802844c:	fba3 2301 	umull	r2, r3, r3, r1
 8028450:	08da      	lsrs	r2, r3, #3
 8028452:	4613      	mov	r3, r2
 8028454:	009b      	lsls	r3, r3, #2
 8028456:	4413      	add	r3, r2
 8028458:	005b      	lsls	r3, r3, #1
 802845a:	1aca      	subs	r2, r1, r3
 802845c:	b2d2      	uxtb	r2, r2
 802845e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028460:	1c59      	adds	r1, r3, #1
 8028462:	65f9      	str	r1, [r7, #92]	; 0x5c
 8028464:	3230      	adds	r2, #48	; 0x30
 8028466:	b2d2      	uxtb	r2, r2
 8028468:	3360      	adds	r3, #96	; 0x60
 802846a:	443b      	add	r3, r7
 802846c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8028470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028472:	4a16      	ldr	r2, [pc, #88]	; (80284cc <_ftoa+0x32c>)
 8028474:	fba2 2303 	umull	r2, r3, r2, r3
 8028478:	08db      	lsrs	r3, r3, #3
 802847a:	653b      	str	r3, [r7, #80]	; 0x50
 802847c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802847e:	2b00      	cmp	r3, #0
 8028480:	d026      	beq.n	80284d0 <_ftoa+0x330>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8028482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028484:	2b1f      	cmp	r3, #31
 8028486:	d9dc      	bls.n	8028442 <_ftoa+0x2a2>
 8028488:	e02c      	b.n	80284e4 <_ftoa+0x344>
 802848a:	bf00      	nop
 802848c:	f3af 8000 	nop.w
 8028490:	ffffffff 	.word	0xffffffff
 8028494:	ffefffff 	.word	0xffefffff
 8028498:	ffffffff 	.word	0xffffffff
 802849c:	7fefffff 	.word	0x7fefffff
 80284a0:	00000000 	.word	0x00000000
 80284a4:	41cdcd65 	.word	0x41cdcd65
 80284a8:	00000000 	.word	0x00000000
 80284ac:	c1cdcd65 	.word	0xc1cdcd65
	...
 80284b8:	08032d1c 	.word	0x08032d1c
 80284bc:	08032d20 	.word	0x08032d20
 80284c0:	08032d28 	.word	0x08032d28
 80284c4:	08032d30 	.word	0x08032d30
 80284c8:	08032d50 	.word	0x08032d50
 80284cc:	cccccccd 	.word	0xcccccccd
        break;
 80284d0:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80284d2:	e007      	b.n	80284e4 <_ftoa+0x344>
      buf[len++] = '0';
 80284d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80284d6:	1c5a      	adds	r2, r3, #1
 80284d8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80284da:	3360      	adds	r3, #96	; 0x60
 80284dc:	443b      	add	r3, r7
 80284de:	2230      	movs	r2, #48	; 0x30
 80284e0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80284e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80284e6:	2b1f      	cmp	r3, #31
 80284e8:	d804      	bhi.n	80284f4 <_ftoa+0x354>
 80284ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80284ec:	1e5a      	subs	r2, r3, #1
 80284ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80284f0:	2b00      	cmp	r3, #0
 80284f2:	d1ef      	bne.n	80284d4 <_ftoa+0x334>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80284f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80284f6:	2b1f      	cmp	r3, #31
 80284f8:	d829      	bhi.n	802854e <_ftoa+0x3ae>
      // add decimal
      buf[len++] = '.';
 80284fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80284fc:	1c5a      	adds	r2, r3, #1
 80284fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8028500:	3360      	adds	r3, #96	; 0x60
 8028502:	443b      	add	r3, r7
 8028504:	222e      	movs	r2, #46	; 0x2e
 8028506:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 802850a:	e020      	b.n	802854e <_ftoa+0x3ae>
    buf[len++] = (char)(48 + (whole % 10));
 802850c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802850e:	4b46      	ldr	r3, [pc, #280]	; (8028628 <_ftoa+0x488>)
 8028510:	fb83 1302 	smull	r1, r3, r3, r2
 8028514:	1099      	asrs	r1, r3, #2
 8028516:	17d3      	asrs	r3, r2, #31
 8028518:	1ac9      	subs	r1, r1, r3
 802851a:	460b      	mov	r3, r1
 802851c:	009b      	lsls	r3, r3, #2
 802851e:	440b      	add	r3, r1
 8028520:	005b      	lsls	r3, r3, #1
 8028522:	1ad1      	subs	r1, r2, r3
 8028524:	b2ca      	uxtb	r2, r1
 8028526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028528:	1c59      	adds	r1, r3, #1
 802852a:	65f9      	str	r1, [r7, #92]	; 0x5c
 802852c:	3230      	adds	r2, #48	; 0x30
 802852e:	b2d2      	uxtb	r2, r2
 8028530:	3360      	adds	r3, #96	; 0x60
 8028532:	443b      	add	r3, r7
 8028534:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8028538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802853a:	4a3b      	ldr	r2, [pc, #236]	; (8028628 <_ftoa+0x488>)
 802853c:	fb82 1203 	smull	r1, r2, r2, r3
 8028540:	1092      	asrs	r2, r2, #2
 8028542:	17db      	asrs	r3, r3, #31
 8028544:	1ad3      	subs	r3, r2, r3
 8028546:	657b      	str	r3, [r7, #84]	; 0x54
 8028548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802854a:	2b00      	cmp	r3, #0
 802854c:	d003      	beq.n	8028556 <_ftoa+0x3b6>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 802854e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028550:	2b1f      	cmp	r3, #31
 8028552:	d9db      	bls.n	802850c <_ftoa+0x36c>
 8028554:	e000      	b.n	8028558 <_ftoa+0x3b8>
      break;
 8028556:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8028558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802855a:	f003 0302 	and.w	r3, r3, #2
 802855e:	2b00      	cmp	r3, #0
 8028560:	d123      	bne.n	80285aa <_ftoa+0x40a>
 8028562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028564:	f003 0301 	and.w	r3, r3, #1
 8028568:	2b00      	cmp	r3, #0
 802856a:	d01e      	beq.n	80285aa <_ftoa+0x40a>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 802856c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802856e:	2b00      	cmp	r3, #0
 8028570:	d014      	beq.n	802859c <_ftoa+0x3fc>
 8028572:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8028576:	2b00      	cmp	r3, #0
 8028578:	d104      	bne.n	8028584 <_ftoa+0x3e4>
 802857a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802857c:	f003 030c 	and.w	r3, r3, #12
 8028580:	2b00      	cmp	r3, #0
 8028582:	d00b      	beq.n	802859c <_ftoa+0x3fc>
      width--;
 8028584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028586:	3b01      	subs	r3, #1
 8028588:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 802858a:	e007      	b.n	802859c <_ftoa+0x3fc>
      buf[len++] = '0';
 802858c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802858e:	1c5a      	adds	r2, r3, #1
 8028590:	65fa      	str	r2, [r7, #92]	; 0x5c
 8028592:	3360      	adds	r3, #96	; 0x60
 8028594:	443b      	add	r3, r7
 8028596:	2230      	movs	r2, #48	; 0x30
 8028598:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 802859c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802859e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80285a0:	429a      	cmp	r2, r3
 80285a2:	d202      	bcs.n	80285aa <_ftoa+0x40a>
 80285a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80285a6:	2b1f      	cmp	r3, #31
 80285a8:	d9f0      	bls.n	802858c <_ftoa+0x3ec>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80285aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80285ac:	2b1f      	cmp	r3, #31
 80285ae:	d827      	bhi.n	8028600 <_ftoa+0x460>
    if (negative) {
 80285b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80285b4:	2b00      	cmp	r3, #0
 80285b6:	d008      	beq.n	80285ca <_ftoa+0x42a>
      buf[len++] = '-';
 80285b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80285ba:	1c5a      	adds	r2, r3, #1
 80285bc:	65fa      	str	r2, [r7, #92]	; 0x5c
 80285be:	3360      	adds	r3, #96	; 0x60
 80285c0:	443b      	add	r3, r7
 80285c2:	222d      	movs	r2, #45	; 0x2d
 80285c4:	f803 2c48 	strb.w	r2, [r3, #-72]
 80285c8:	e01a      	b.n	8028600 <_ftoa+0x460>
    }
    else if (flags & FLAGS_PLUS) {
 80285ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80285cc:	f003 0304 	and.w	r3, r3, #4
 80285d0:	2b00      	cmp	r3, #0
 80285d2:	d008      	beq.n	80285e6 <_ftoa+0x446>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80285d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80285d6:	1c5a      	adds	r2, r3, #1
 80285d8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80285da:	3360      	adds	r3, #96	; 0x60
 80285dc:	443b      	add	r3, r7
 80285de:	222b      	movs	r2, #43	; 0x2b
 80285e0:	f803 2c48 	strb.w	r2, [r3, #-72]
 80285e4:	e00c      	b.n	8028600 <_ftoa+0x460>
    }
    else if (flags & FLAGS_SPACE) {
 80285e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80285e8:	f003 0308 	and.w	r3, r3, #8
 80285ec:	2b00      	cmp	r3, #0
 80285ee:	d007      	beq.n	8028600 <_ftoa+0x460>
      buf[len++] = ' ';
 80285f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80285f2:	1c5a      	adds	r2, r3, #1
 80285f4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80285f6:	3360      	adds	r3, #96	; 0x60
 80285f8:	443b      	add	r3, r7
 80285fa:	2220      	movs	r2, #32
 80285fc:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8028600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028602:	9303      	str	r3, [sp, #12]
 8028604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028606:	9302      	str	r3, [sp, #8]
 8028608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802860a:	9301      	str	r3, [sp, #4]
 802860c:	f107 0318 	add.w	r3, r7, #24
 8028610:	9300      	str	r3, [sp, #0]
 8028612:	68bb      	ldr	r3, [r7, #8]
 8028614:	68fa      	ldr	r2, [r7, #12]
 8028616:	6939      	ldr	r1, [r7, #16]
 8028618:	6978      	ldr	r0, [r7, #20]
 802861a:	f7ff fbc0 	bl	8027d9e <_out_rev>
 802861e:	4603      	mov	r3, r0
}
 8028620:	4618      	mov	r0, r3
 8028622:	3760      	adds	r7, #96	; 0x60
 8028624:	46bd      	mov	sp, r7
 8028626:	bd80      	pop	{r7, pc}
 8028628:	66666667 	.word	0x66666667
 802862c:	00000000 	.word	0x00000000

08028630 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8028630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8028634:	b09a      	sub	sp, #104	; 0x68
 8028636:	af06      	add	r7, sp, #24
 8028638:	6178      	str	r0, [r7, #20]
 802863a:	6139      	str	r1, [r7, #16]
 802863c:	60fa      	str	r2, [r7, #12]
 802863e:	60bb      	str	r3, [r7, #8]
 8028640:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8028644:	ed97 6b00 	vldr	d6, [r7]
 8028648:	ed97 7b00 	vldr	d7, [r7]
 802864c:	eeb4 6b47 	vcmp.f64	d6, d7
 8028650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028654:	d111      	bne.n	802867a <_etoa+0x4a>
 8028656:	ed97 7b00 	vldr	d7, [r7]
 802865a:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8028928 <_etoa+0x2f8>
 802865e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028666:	dc08      	bgt.n	802867a <_etoa+0x4a>
 8028668:	ed97 7b00 	vldr	d7, [r7]
 802866c:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8028930 <_etoa+0x300>
 8028670:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028678:	d50f      	bpl.n	802869a <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 802867a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802867c:	9302      	str	r3, [sp, #8]
 802867e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028680:	9301      	str	r3, [sp, #4]
 8028682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028684:	9300      	str	r3, [sp, #0]
 8028686:	ed97 0b00 	vldr	d0, [r7]
 802868a:	68bb      	ldr	r3, [r7, #8]
 802868c:	68fa      	ldr	r2, [r7, #12]
 802868e:	6939      	ldr	r1, [r7, #16]
 8028690:	6978      	ldr	r0, [r7, #20]
 8028692:	f7ff fd85 	bl	80281a0 <_ftoa>
 8028696:	4603      	mov	r3, r0
 8028698:	e1c2      	b.n	8028a20 <_etoa+0x3f0>
  }

  // determine the sign
  const bool negative = value < 0;
 802869a:	ed97 7b00 	vldr	d7, [r7]
 802869e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80286a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286a6:	bf4c      	ite	mi
 80286a8:	2301      	movmi	r3, #1
 80286aa:	2300      	movpl	r3, #0
 80286ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 80286b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80286b4:	2b00      	cmp	r3, #0
 80286b6:	d005      	beq.n	80286c4 <_etoa+0x94>
    value = -value;
 80286b8:	ed97 7b00 	vldr	d7, [r7]
 80286bc:	eeb1 7b47 	vneg.f64	d7, d7
 80286c0:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80286c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80286c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80286ca:	2b00      	cmp	r3, #0
 80286cc:	d101      	bne.n	80286d2 <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80286ce:	2306      	movs	r3, #6
 80286d0:	673b      	str	r3, [r7, #112]	; 0x70
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80286d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80286d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80286da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80286de:	f04f 0200 	mov.w	r2, #0
 80286e2:	f04f 0300 	mov.w	r3, #0
 80286e6:	0d0a      	lsrs	r2, r1, #20
 80286e8:	2300      	movs	r3, #0
 80286ea:	4613      	mov	r3, r2
 80286ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80286f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80286f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80286f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80286fa:	4690      	mov	r8, r2
 80286fc:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8028700:	4644      	mov	r4, r8
 8028702:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8028706:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802870a:	e9c7 4506 	strd	r4, r5, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 802870e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028710:	ee07 3a90 	vmov	s15, r3
 8028714:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028718:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8028938 <_etoa+0x308>
 802871c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028720:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8028940 <_etoa+0x310>
 8028724:	ee37 6b06 	vadd.f64	d6, d7, d6
 8028728:	ed97 7b06 	vldr	d7, [r7, #24]
 802872c:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 8028730:	ee37 7b45 	vsub.f64	d7, d7, d5
 8028734:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8028948 <_etoa+0x318>
 8028738:	ee27 7b05 	vmul.f64	d7, d7, d5
 802873c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8028740:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8028744:	ee17 3a90 	vmov	r3, s15
 8028748:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 802874a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802874c:	ee07 3a90 	vmov	s15, r3
 8028750:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028754:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8028950 <_etoa+0x320>
 8028758:	ee27 7b06 	vmul.f64	d7, d7, d6
 802875c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8028760:	ee37 7b06 	vadd.f64	d7, d7, d6
 8028764:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8028768:	ee17 3a90 	vmov	r3, s15
 802876c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 802876e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028770:	ee07 3a90 	vmov	s15, r3
 8028774:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028778:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8028958 <_etoa+0x328>
 802877c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8028780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028782:	ee07 3a90 	vmov	s15, r3
 8028786:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802878a:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8028960 <_etoa+0x330>
 802878e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8028792:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028796:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 802879a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 802879e:	ee27 7b07 	vmul.f64	d7, d7, d7
 80287a2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80287a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80287a8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80287ac:	17da      	asrs	r2, r3, #31
 80287ae:	469a      	mov	sl, r3
 80287b0:	4693      	mov	fp, r2
 80287b2:	f04f 0200 	mov.w	r2, #0
 80287b6:	f04f 0300 	mov.w	r3, #0
 80287ba:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80287be:	2200      	movs	r2, #0
 80287c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80287c4:	ed97 6b06 	vldr	d6, [r7, #24]
 80287c8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80287cc:	ee37 4b07 	vadd.f64	d4, d7, d7
 80287d0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80287d4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80287d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80287dc:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 80287e0:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 80287e4:	ee83 7b02 	vdiv.f64	d7, d3, d2
 80287e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80287ec:	ee37 3b03 	vadd.f64	d3, d7, d3
 80287f0:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80287f4:	ee82 7b03 	vdiv.f64	d7, d2, d3
 80287f8:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 80287fc:	ee37 3b03 	vadd.f64	d3, d7, d3
 8028800:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8028804:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8028808:	ee35 5b07 	vadd.f64	d5, d5, d7
 802880c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8028810:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8028814:	ee37 7b05 	vadd.f64	d7, d7, d5
 8028818:	ee26 7b07 	vmul.f64	d7, d6, d7
 802881c:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 8028820:	ed97 7b06 	vldr	d7, [r7, #24]
 8028824:	ed97 6b00 	vldr	d6, [r7]
 8028828:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802882c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028830:	d50a      	bpl.n	8028848 <_etoa+0x218>
    expval--;
 8028832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028834:	3b01      	subs	r3, #1
 8028836:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 8028838:	ed97 6b06 	vldr	d6, [r7, #24]
 802883c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8028840:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8028844:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8028848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802884a:	2b63      	cmp	r3, #99	; 0x63
 802884c:	dc05      	bgt.n	802885a <_etoa+0x22a>
 802884e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028850:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8028854:	db01      	blt.n	802885a <_etoa+0x22a>
 8028856:	2304      	movs	r3, #4
 8028858:	e000      	b.n	802885c <_etoa+0x22c>
 802885a:	2305      	movs	r3, #5
 802885c:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 802885e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028864:	2b00      	cmp	r3, #0
 8028866:	d031      	beq.n	80288cc <_etoa+0x29c>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8028868:	ed97 7b00 	vldr	d7, [r7]
 802886c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8028968 <_etoa+0x338>
 8028870:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028878:	db1d      	blt.n	80288b6 <_etoa+0x286>
 802887a:	ed97 7b00 	vldr	d7, [r7]
 802887e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8028970 <_etoa+0x340>
 8028882:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802888a:	d514      	bpl.n	80288b6 <_etoa+0x286>
      if ((int)prec > expval) {
 802888c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802888e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028890:	429a      	cmp	r2, r3
 8028892:	da05      	bge.n	80288a0 <_etoa+0x270>
        prec = (unsigned)((int)prec - expval - 1);
 8028894:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8028896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028898:	1ad3      	subs	r3, r2, r3
 802889a:	3b01      	subs	r3, #1
 802889c:	673b      	str	r3, [r7, #112]	; 0x70
 802889e:	e001      	b.n	80288a4 <_etoa+0x274>
      }
      else {
        prec = 0;
 80288a0:	2300      	movs	r3, #0
 80288a2:	673b      	str	r3, [r7, #112]	; 0x70
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80288a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80288a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80288aa:	67bb      	str	r3, [r7, #120]	; 0x78
      // no characters in exponent
      minwidth = 0U;
 80288ac:	2300      	movs	r3, #0
 80288ae:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 80288b0:	2300      	movs	r3, #0
 80288b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80288b4:	e00a      	b.n	80288cc <_etoa+0x29c>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80288b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80288b8:	2b00      	cmp	r3, #0
 80288ba:	d007      	beq.n	80288cc <_etoa+0x29c>
 80288bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80288be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80288c2:	2b00      	cmp	r3, #0
 80288c4:	d002      	beq.n	80288cc <_etoa+0x29c>
        --prec;
 80288c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80288c8:	3b01      	subs	r3, #1
 80288ca:	673b      	str	r3, [r7, #112]	; 0x70
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80288cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80288ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 80288d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80288d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80288d4:	429a      	cmp	r2, r3
 80288d6:	d904      	bls.n	80288e2 <_etoa+0x2b2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80288d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80288da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80288dc:	1ad3      	subs	r3, r2, r3
 80288de:	647b      	str	r3, [r7, #68]	; 0x44
 80288e0:	e001      	b.n	80288e6 <_etoa+0x2b6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80288e2:	2300      	movs	r3, #0
 80288e4:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80288e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80288e8:	f003 0302 	and.w	r3, r3, #2
 80288ec:	2b00      	cmp	r3, #0
 80288ee:	d004      	beq.n	80288fa <_etoa+0x2ca>
 80288f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80288f2:	2b00      	cmp	r3, #0
 80288f4:	d001      	beq.n	80288fa <_etoa+0x2ca>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80288f6:	2300      	movs	r3, #0
 80288f8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 80288fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80288fc:	2b00      	cmp	r3, #0
 80288fe:	d007      	beq.n	8028910 <_etoa+0x2e0>
    value /= conv.F;
 8028900:	ed97 6b06 	vldr	d6, [r7, #24]
 8028904:	ed97 5b00 	vldr	d5, [r7]
 8028908:	ee85 7b06 	vdiv.f64	d7, d5, d6
 802890c:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 8028910:	68fb      	ldr	r3, [r7, #12]
 8028912:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8028914:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8028918:	2b00      	cmp	r3, #0
 802891a:	d02d      	beq.n	8028978 <_etoa+0x348>
 802891c:	ed97 7b00 	vldr	d7, [r7]
 8028920:	eeb1 7b47 	vneg.f64	d7, d7
 8028924:	e02a      	b.n	802897c <_etoa+0x34c>
 8028926:	bf00      	nop
 8028928:	ffffffff 	.word	0xffffffff
 802892c:	7fefffff 	.word	0x7fefffff
 8028930:	ffffffff 	.word	0xffffffff
 8028934:	ffefffff 	.word	0xffefffff
 8028938:	509f79fb 	.word	0x509f79fb
 802893c:	3fd34413 	.word	0x3fd34413
 8028940:	8b60c8b3 	.word	0x8b60c8b3
 8028944:	3fc68a28 	.word	0x3fc68a28
 8028948:	636f4361 	.word	0x636f4361
 802894c:	3fd287a7 	.word	0x3fd287a7
 8028950:	0979a371 	.word	0x0979a371
 8028954:	400a934f 	.word	0x400a934f
 8028958:	bbb55516 	.word	0xbbb55516
 802895c:	40026bb1 	.word	0x40026bb1
 8028960:	fefa39ef 	.word	0xfefa39ef
 8028964:	3fe62e42 	.word	0x3fe62e42
 8028968:	eb1c432d 	.word	0xeb1c432d
 802896c:	3f1a36e2 	.word	0x3f1a36e2
 8028970:	00000000 	.word	0x00000000
 8028974:	412e8480 	.word	0x412e8480
 8028978:	ed97 7b00 	vldr	d7, [r7]
 802897c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802897e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8028982:	9302      	str	r3, [sp, #8]
 8028984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028986:	9301      	str	r3, [sp, #4]
 8028988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802898a:	9300      	str	r3, [sp, #0]
 802898c:	eeb0 0b47 	vmov.f64	d0, d7
 8028990:	68bb      	ldr	r3, [r7, #8]
 8028992:	68fa      	ldr	r2, [r7, #12]
 8028994:	6939      	ldr	r1, [r7, #16]
 8028996:	6978      	ldr	r0, [r7, #20]
 8028998:	f7ff fc02 	bl	80281a0 <_ftoa>
 802899c:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 802899e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80289a0:	2b00      	cmp	r3, #0
 80289a2:	d03c      	beq.n	8028a1e <_etoa+0x3ee>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80289a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80289a6:	f003 0320 	and.w	r3, r3, #32
 80289aa:	2b00      	cmp	r3, #0
 80289ac:	d001      	beq.n	80289b2 <_etoa+0x382>
 80289ae:	2045      	movs	r0, #69	; 0x45
 80289b0:	e000      	b.n	80289b4 <_etoa+0x384>
 80289b2:	2065      	movs	r0, #101	; 0x65
 80289b4:	68fa      	ldr	r2, [r7, #12]
 80289b6:	1c53      	adds	r3, r2, #1
 80289b8:	60fb      	str	r3, [r7, #12]
 80289ba:	697c      	ldr	r4, [r7, #20]
 80289bc:	68bb      	ldr	r3, [r7, #8]
 80289be:	6939      	ldr	r1, [r7, #16]
 80289c0:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80289c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80289c4:	2b00      	cmp	r3, #0
 80289c6:	bfb8      	it	lt
 80289c8:	425b      	neglt	r3, r3
 80289ca:	4618      	mov	r0, r3
 80289cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80289ce:	0fdb      	lsrs	r3, r3, #31
 80289d0:	b2db      	uxtb	r3, r3
 80289d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80289d4:	3a01      	subs	r2, #1
 80289d6:	2105      	movs	r1, #5
 80289d8:	9105      	str	r1, [sp, #20]
 80289da:	9204      	str	r2, [sp, #16]
 80289dc:	2200      	movs	r2, #0
 80289de:	9203      	str	r2, [sp, #12]
 80289e0:	220a      	movs	r2, #10
 80289e2:	9202      	str	r2, [sp, #8]
 80289e4:	9301      	str	r3, [sp, #4]
 80289e6:	9000      	str	r0, [sp, #0]
 80289e8:	68bb      	ldr	r3, [r7, #8]
 80289ea:	68fa      	ldr	r2, [r7, #12]
 80289ec:	6939      	ldr	r1, [r7, #16]
 80289ee:	6978      	ldr	r0, [r7, #20]
 80289f0:	f7ff fb01 	bl	8027ff6 <_ntoa_long>
 80289f4:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80289f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80289f8:	f003 0302 	and.w	r3, r3, #2
 80289fc:	2b00      	cmp	r3, #0
 80289fe:	d00e      	beq.n	8028a1e <_etoa+0x3ee>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8028a00:	e007      	b.n	8028a12 <_etoa+0x3e2>
 8028a02:	68fa      	ldr	r2, [r7, #12]
 8028a04:	1c53      	adds	r3, r2, #1
 8028a06:	60fb      	str	r3, [r7, #12]
 8028a08:	697c      	ldr	r4, [r7, #20]
 8028a0a:	68bb      	ldr	r3, [r7, #8]
 8028a0c:	6939      	ldr	r1, [r7, #16]
 8028a0e:	2020      	movs	r0, #32
 8028a10:	47a0      	blx	r4
 8028a12:	68fa      	ldr	r2, [r7, #12]
 8028a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028a16:	1ad3      	subs	r3, r2, r3
 8028a18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8028a1a:	429a      	cmp	r2, r3
 8028a1c:	d8f1      	bhi.n	8028a02 <_etoa+0x3d2>
    }
  }
  return idx;
 8028a1e:	68fb      	ldr	r3, [r7, #12]
}
 8028a20:	4618      	mov	r0, r3
 8028a22:	3750      	adds	r7, #80	; 0x50
 8028a24:	46bd      	mov	sp, r7
 8028a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8028a2a:	bf00      	nop

08028a2c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8028a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a30:	b0a3      	sub	sp, #140	; 0x8c
 8028a32:	af0a      	add	r7, sp, #40	; 0x28
 8028a34:	6178      	str	r0, [r7, #20]
 8028a36:	6139      	str	r1, [r7, #16]
 8028a38:	60fa      	str	r2, [r7, #12]
 8028a3a:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8028a3c:	2300      	movs	r3, #0
 8028a3e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8028a40:	693b      	ldr	r3, [r7, #16]
 8028a42:	2b00      	cmp	r3, #0
 8028a44:	f040 84ba 	bne.w	80293bc <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8028a48:	4ba3      	ldr	r3, [pc, #652]	; (8028cd8 <_vsnprintf+0x2ac>)
 8028a4a:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8028a4c:	f000 bcb6 	b.w	80293bc <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8028a50:	68bb      	ldr	r3, [r7, #8]
 8028a52:	781b      	ldrb	r3, [r3, #0]
 8028a54:	2b25      	cmp	r3, #37	; 0x25
 8028a56:	d00d      	beq.n	8028a74 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8028a58:	68bb      	ldr	r3, [r7, #8]
 8028a5a:	7818      	ldrb	r0, [r3, #0]
 8028a5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028a5e:	1c53      	adds	r3, r2, #1
 8028a60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8028a62:	697c      	ldr	r4, [r7, #20]
 8028a64:	68fb      	ldr	r3, [r7, #12]
 8028a66:	6939      	ldr	r1, [r7, #16]
 8028a68:	47a0      	blx	r4
      format++;
 8028a6a:	68bb      	ldr	r3, [r7, #8]
 8028a6c:	3301      	adds	r3, #1
 8028a6e:	60bb      	str	r3, [r7, #8]
      continue;
 8028a70:	f000 bca4 	b.w	80293bc <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8028a74:	68bb      	ldr	r3, [r7, #8]
 8028a76:	3301      	adds	r3, #1
 8028a78:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8028a7a:	2300      	movs	r3, #0
 8028a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8028a7e:	68bb      	ldr	r3, [r7, #8]
 8028a80:	781b      	ldrb	r3, [r3, #0]
 8028a82:	3b20      	subs	r3, #32
 8028a84:	2b10      	cmp	r3, #16
 8028a86:	d857      	bhi.n	8028b38 <_vsnprintf+0x10c>
 8028a88:	a201      	add	r2, pc, #4	; (adr r2, 8028a90 <_vsnprintf+0x64>)
 8028a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028a8e:	bf00      	nop
 8028a90:	08028b11 	.word	0x08028b11
 8028a94:	08028b39 	.word	0x08028b39
 8028a98:	08028b39 	.word	0x08028b39
 8028a9c:	08028b25 	.word	0x08028b25
 8028aa0:	08028b39 	.word	0x08028b39
 8028aa4:	08028b39 	.word	0x08028b39
 8028aa8:	08028b39 	.word	0x08028b39
 8028aac:	08028b39 	.word	0x08028b39
 8028ab0:	08028b39 	.word	0x08028b39
 8028ab4:	08028b39 	.word	0x08028b39
 8028ab8:	08028b39 	.word	0x08028b39
 8028abc:	08028afd 	.word	0x08028afd
 8028ac0:	08028b39 	.word	0x08028b39
 8028ac4:	08028ae9 	.word	0x08028ae9
 8028ac8:	08028b39 	.word	0x08028b39
 8028acc:	08028b39 	.word	0x08028b39
 8028ad0:	08028ad5 	.word	0x08028ad5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8028ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028ad6:	f043 0301 	orr.w	r3, r3, #1
 8028ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028adc:	68bb      	ldr	r3, [r7, #8]
 8028ade:	3301      	adds	r3, #1
 8028ae0:	60bb      	str	r3, [r7, #8]
 8028ae2:	2301      	movs	r3, #1
 8028ae4:	653b      	str	r3, [r7, #80]	; 0x50
 8028ae6:	e02a      	b.n	8028b3e <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8028ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028aea:	f043 0302 	orr.w	r3, r3, #2
 8028aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028af0:	68bb      	ldr	r3, [r7, #8]
 8028af2:	3301      	adds	r3, #1
 8028af4:	60bb      	str	r3, [r7, #8]
 8028af6:	2301      	movs	r3, #1
 8028af8:	653b      	str	r3, [r7, #80]	; 0x50
 8028afa:	e020      	b.n	8028b3e <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8028afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028afe:	f043 0304 	orr.w	r3, r3, #4
 8028b02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028b04:	68bb      	ldr	r3, [r7, #8]
 8028b06:	3301      	adds	r3, #1
 8028b08:	60bb      	str	r3, [r7, #8]
 8028b0a:	2301      	movs	r3, #1
 8028b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8028b0e:	e016      	b.n	8028b3e <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8028b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028b12:	f043 0308 	orr.w	r3, r3, #8
 8028b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028b18:	68bb      	ldr	r3, [r7, #8]
 8028b1a:	3301      	adds	r3, #1
 8028b1c:	60bb      	str	r3, [r7, #8]
 8028b1e:	2301      	movs	r3, #1
 8028b20:	653b      	str	r3, [r7, #80]	; 0x50
 8028b22:	e00c      	b.n	8028b3e <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8028b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028b26:	f043 0310 	orr.w	r3, r3, #16
 8028b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028b2c:	68bb      	ldr	r3, [r7, #8]
 8028b2e:	3301      	adds	r3, #1
 8028b30:	60bb      	str	r3, [r7, #8]
 8028b32:	2301      	movs	r3, #1
 8028b34:	653b      	str	r3, [r7, #80]	; 0x50
 8028b36:	e002      	b.n	8028b3e <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8028b38:	2300      	movs	r3, #0
 8028b3a:	653b      	str	r3, [r7, #80]	; 0x50
 8028b3c:	bf00      	nop
      }
    } while (n);
 8028b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028b40:	2b00      	cmp	r3, #0
 8028b42:	d19c      	bne.n	8028a7e <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8028b44:	2300      	movs	r3, #0
 8028b46:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8028b48:	68bb      	ldr	r3, [r7, #8]
 8028b4a:	781b      	ldrb	r3, [r3, #0]
 8028b4c:	4618      	mov	r0, r3
 8028b4e:	f7ff f8eb 	bl	8027d28 <_is_digit>
 8028b52:	4603      	mov	r3, r0
 8028b54:	2b00      	cmp	r3, #0
 8028b56:	d006      	beq.n	8028b66 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8028b58:	f107 0308 	add.w	r3, r7, #8
 8028b5c:	4618      	mov	r0, r3
 8028b5e:	f7ff f8fa 	bl	8027d56 <_atoi>
 8028b62:	65b8      	str	r0, [r7, #88]	; 0x58
 8028b64:	e01a      	b.n	8028b9c <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8028b66:	68bb      	ldr	r3, [r7, #8]
 8028b68:	781b      	ldrb	r3, [r3, #0]
 8028b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8028b6c:	d116      	bne.n	8028b9c <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8028b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028b72:	1d1a      	adds	r2, r3, #4
 8028b74:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028b78:	681b      	ldr	r3, [r3, #0]
 8028b7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8028b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028b7e:	2b00      	cmp	r3, #0
 8028b80:	da07      	bge.n	8028b92 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8028b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028b84:	f043 0302 	orr.w	r3, r3, #2
 8028b88:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8028b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028b8c:	425b      	negs	r3, r3
 8028b8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8028b90:	e001      	b.n	8028b96 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8028b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028b94:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8028b96:	68bb      	ldr	r3, [r7, #8]
 8028b98:	3301      	adds	r3, #1
 8028b9a:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8028b9c:	2300      	movs	r3, #0
 8028b9e:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8028ba0:	68bb      	ldr	r3, [r7, #8]
 8028ba2:	781b      	ldrb	r3, [r3, #0]
 8028ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8028ba6:	d127      	bne.n	8028bf8 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8028ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8028bae:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8028bb0:	68bb      	ldr	r3, [r7, #8]
 8028bb2:	3301      	adds	r3, #1
 8028bb4:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8028bb6:	68bb      	ldr	r3, [r7, #8]
 8028bb8:	781b      	ldrb	r3, [r3, #0]
 8028bba:	4618      	mov	r0, r3
 8028bbc:	f7ff f8b4 	bl	8027d28 <_is_digit>
 8028bc0:	4603      	mov	r3, r0
 8028bc2:	2b00      	cmp	r3, #0
 8028bc4:	d006      	beq.n	8028bd4 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8028bc6:	f107 0308 	add.w	r3, r7, #8
 8028bca:	4618      	mov	r0, r3
 8028bcc:	f7ff f8c3 	bl	8027d56 <_atoi>
 8028bd0:	6578      	str	r0, [r7, #84]	; 0x54
 8028bd2:	e011      	b.n	8028bf8 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8028bd4:	68bb      	ldr	r3, [r7, #8]
 8028bd6:	781b      	ldrb	r3, [r3, #0]
 8028bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8028bda:	d10d      	bne.n	8028bf8 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8028bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028be0:	1d1a      	adds	r2, r3, #4
 8028be2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028be6:	681b      	ldr	r3, [r3, #0]
 8028be8:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8028bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028bec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028bf0:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8028bf2:	68bb      	ldr	r3, [r7, #8]
 8028bf4:	3301      	adds	r3, #1
 8028bf6:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8028bf8:	68bb      	ldr	r3, [r7, #8]
 8028bfa:	781b      	ldrb	r3, [r3, #0]
 8028bfc:	3b68      	subs	r3, #104	; 0x68
 8028bfe:	2b12      	cmp	r3, #18
 8028c00:	d866      	bhi.n	8028cd0 <_vsnprintf+0x2a4>
 8028c02:	a201      	add	r2, pc, #4	; (adr r2, 8028c08 <_vsnprintf+0x1dc>)
 8028c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028c08:	08028c7b 	.word	0x08028c7b
 8028c0c:	08028cd1 	.word	0x08028cd1
 8028c10:	08028cb1 	.word	0x08028cb1
 8028c14:	08028cd1 	.word	0x08028cd1
 8028c18:	08028c55 	.word	0x08028c55
 8028c1c:	08028cd1 	.word	0x08028cd1
 8028c20:	08028cd1 	.word	0x08028cd1
 8028c24:	08028cd1 	.word	0x08028cd1
 8028c28:	08028cd1 	.word	0x08028cd1
 8028c2c:	08028cd1 	.word	0x08028cd1
 8028c30:	08028cd1 	.word	0x08028cd1
 8028c34:	08028cd1 	.word	0x08028cd1
 8028c38:	08028ca1 	.word	0x08028ca1
 8028c3c:	08028cd1 	.word	0x08028cd1
 8028c40:	08028cd1 	.word	0x08028cd1
 8028c44:	08028cd1 	.word	0x08028cd1
 8028c48:	08028cd1 	.word	0x08028cd1
 8028c4c:	08028cd1 	.word	0x08028cd1
 8028c50:	08028cc1 	.word	0x08028cc1
      case 'l' :
        flags |= FLAGS_LONG;
 8028c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8028c5c:	68bb      	ldr	r3, [r7, #8]
 8028c5e:	3301      	adds	r3, #1
 8028c60:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8028c62:	68bb      	ldr	r3, [r7, #8]
 8028c64:	781b      	ldrb	r3, [r3, #0]
 8028c66:	2b6c      	cmp	r3, #108	; 0x6c
 8028c68:	d134      	bne.n	8028cd4 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8028c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8028c70:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8028c72:	68bb      	ldr	r3, [r7, #8]
 8028c74:	3301      	adds	r3, #1
 8028c76:	60bb      	str	r3, [r7, #8]
        }
        break;
 8028c78:	e02c      	b.n	8028cd4 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8028c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028c80:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8028c82:	68bb      	ldr	r3, [r7, #8]
 8028c84:	3301      	adds	r3, #1
 8028c86:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8028c88:	68bb      	ldr	r3, [r7, #8]
 8028c8a:	781b      	ldrb	r3, [r3, #0]
 8028c8c:	2b68      	cmp	r3, #104	; 0x68
 8028c8e:	d125      	bne.n	8028cdc <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8028c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028c96:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8028c98:	68bb      	ldr	r3, [r7, #8]
 8028c9a:	3301      	adds	r3, #1
 8028c9c:	60bb      	str	r3, [r7, #8]
        }
        break;
 8028c9e:	e01d      	b.n	8028cdc <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8028ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8028ca8:	68bb      	ldr	r3, [r7, #8]
 8028caa:	3301      	adds	r3, #1
 8028cac:	60bb      	str	r3, [r7, #8]
        break;
 8028cae:	e016      	b.n	8028cde <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8028cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8028cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8028cb8:	68bb      	ldr	r3, [r7, #8]
 8028cba:	3301      	adds	r3, #1
 8028cbc:	60bb      	str	r3, [r7, #8]
        break;
 8028cbe:	e00e      	b.n	8028cde <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8028cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8028cc8:	68bb      	ldr	r3, [r7, #8]
 8028cca:	3301      	adds	r3, #1
 8028ccc:	60bb      	str	r3, [r7, #8]
        break;
 8028cce:	e006      	b.n	8028cde <_vsnprintf+0x2b2>
      default :
        break;
 8028cd0:	bf00      	nop
 8028cd2:	e004      	b.n	8028cde <_vsnprintf+0x2b2>
        break;
 8028cd4:	bf00      	nop
 8028cd6:	e002      	b.n	8028cde <_vsnprintf+0x2b2>
 8028cd8:	08027cad 	.word	0x08027cad
        break;
 8028cdc:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8028cde:	68bb      	ldr	r3, [r7, #8]
 8028ce0:	781b      	ldrb	r3, [r3, #0]
 8028ce2:	3b25      	subs	r3, #37	; 0x25
 8028ce4:	2b53      	cmp	r3, #83	; 0x53
 8028ce6:	f200 835c 	bhi.w	80293a2 <_vsnprintf+0x976>
 8028cea:	a201      	add	r2, pc, #4	; (adr r2, 8028cf0 <_vsnprintf+0x2c4>)
 8028cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028cf0:	0802938b 	.word	0x0802938b
 8028cf4:	080293a3 	.word	0x080293a3
 8028cf8:	080293a3 	.word	0x080293a3
 8028cfc:	080293a3 	.word	0x080293a3
 8028d00:	080293a3 	.word	0x080293a3
 8028d04:	080293a3 	.word	0x080293a3
 8028d08:	080293a3 	.word	0x080293a3
 8028d0c:	080293a3 	.word	0x080293a3
 8028d10:	080293a3 	.word	0x080293a3
 8028d14:	080293a3 	.word	0x080293a3
 8028d18:	080293a3 	.word	0x080293a3
 8028d1c:	080293a3 	.word	0x080293a3
 8028d20:	080293a3 	.word	0x080293a3
 8028d24:	080293a3 	.word	0x080293a3
 8028d28:	080293a3 	.word	0x080293a3
 8028d2c:	080293a3 	.word	0x080293a3
 8028d30:	080293a3 	.word	0x080293a3
 8028d34:	080293a3 	.word	0x080293a3
 8028d38:	080293a3 	.word	0x080293a3
 8028d3c:	080293a3 	.word	0x080293a3
 8028d40:	080293a3 	.word	0x080293a3
 8028d44:	080293a3 	.word	0x080293a3
 8028d48:	080293a3 	.word	0x080293a3
 8028d4c:	080293a3 	.word	0x080293a3
 8028d50:	080293a3 	.word	0x080293a3
 8028d54:	080293a3 	.word	0x080293a3
 8028d58:	080293a3 	.word	0x080293a3
 8028d5c:	080293a3 	.word	0x080293a3
 8028d60:	080293a3 	.word	0x080293a3
 8028d64:	080293a3 	.word	0x080293a3
 8028d68:	080293a3 	.word	0x080293a3
 8028d6c:	080293a3 	.word	0x080293a3
 8028d70:	08029143 	.word	0x08029143
 8028d74:	080290f7 	.word	0x080290f7
 8028d78:	08029143 	.word	0x08029143
 8028d7c:	080293a3 	.word	0x080293a3
 8028d80:	080293a3 	.word	0x080293a3
 8028d84:	080293a3 	.word	0x080293a3
 8028d88:	080293a3 	.word	0x080293a3
 8028d8c:	080293a3 	.word	0x080293a3
 8028d90:	080293a3 	.word	0x080293a3
 8028d94:	080293a3 	.word	0x080293a3
 8028d98:	080293a3 	.word	0x080293a3
 8028d9c:	080293a3 	.word	0x080293a3
 8028da0:	080293a3 	.word	0x080293a3
 8028da4:	080293a3 	.word	0x080293a3
 8028da8:	080293a3 	.word	0x080293a3
 8028dac:	080293a3 	.word	0x080293a3
 8028db0:	080293a3 	.word	0x080293a3
 8028db4:	080293a3 	.word	0x080293a3
 8028db8:	080293a3 	.word	0x080293a3
 8028dbc:	08028e41 	.word	0x08028e41
 8028dc0:	080293a3 	.word	0x080293a3
 8028dc4:	080293a3 	.word	0x080293a3
 8028dc8:	080293a3 	.word	0x080293a3
 8028dcc:	080293a3 	.word	0x080293a3
 8028dd0:	080293a3 	.word	0x080293a3
 8028dd4:	080293a3 	.word	0x080293a3
 8028dd8:	080293a3 	.word	0x080293a3
 8028ddc:	080293a3 	.word	0x080293a3
 8028de0:	080293a3 	.word	0x080293a3
 8028de4:	08028e41 	.word	0x08028e41
 8028de8:	080291af 	.word	0x080291af
 8028dec:	08028e41 	.word	0x08028e41
 8028df0:	08029143 	.word	0x08029143
 8028df4:	080290f7 	.word	0x080290f7
 8028df8:	08029143 	.word	0x08029143
 8028dfc:	080293a3 	.word	0x080293a3
 8028e00:	08028e41 	.word	0x08028e41
 8028e04:	080293a3 	.word	0x080293a3
 8028e08:	080293a3 	.word	0x080293a3
 8028e0c:	080293a3 	.word	0x080293a3
 8028e10:	080293a3 	.word	0x080293a3
 8028e14:	080293a3 	.word	0x080293a3
 8028e18:	08028e41 	.word	0x08028e41
 8028e1c:	080292ef 	.word	0x080292ef
 8028e20:	080293a3 	.word	0x080293a3
 8028e24:	080293a3 	.word	0x080293a3
 8028e28:	08029227 	.word	0x08029227
 8028e2c:	080293a3 	.word	0x080293a3
 8028e30:	08028e41 	.word	0x08028e41
 8028e34:	080293a3 	.word	0x080293a3
 8028e38:	080293a3 	.word	0x080293a3
 8028e3c:	08028e41 	.word	0x08028e41
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8028e40:	68bb      	ldr	r3, [r7, #8]
 8028e42:	781b      	ldrb	r3, [r3, #0]
 8028e44:	2b78      	cmp	r3, #120	; 0x78
 8028e46:	d003      	beq.n	8028e50 <_vsnprintf+0x424>
 8028e48:	68bb      	ldr	r3, [r7, #8]
 8028e4a:	781b      	ldrb	r3, [r3, #0]
 8028e4c:	2b58      	cmp	r3, #88	; 0x58
 8028e4e:	d102      	bne.n	8028e56 <_vsnprintf+0x42a>
          base = 16U;
 8028e50:	2310      	movs	r3, #16
 8028e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8028e54:	e013      	b.n	8028e7e <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8028e56:	68bb      	ldr	r3, [r7, #8]
 8028e58:	781b      	ldrb	r3, [r3, #0]
 8028e5a:	2b6f      	cmp	r3, #111	; 0x6f
 8028e5c:	d102      	bne.n	8028e64 <_vsnprintf+0x438>
          base =  8U;
 8028e5e:	2308      	movs	r3, #8
 8028e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8028e62:	e00c      	b.n	8028e7e <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8028e64:	68bb      	ldr	r3, [r7, #8]
 8028e66:	781b      	ldrb	r3, [r3, #0]
 8028e68:	2b62      	cmp	r3, #98	; 0x62
 8028e6a:	d102      	bne.n	8028e72 <_vsnprintf+0x446>
          base =  2U;
 8028e6c:	2302      	movs	r3, #2
 8028e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8028e70:	e005      	b.n	8028e7e <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8028e72:	230a      	movs	r3, #10
 8028e74:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8028e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028e78:	f023 0310 	bic.w	r3, r3, #16
 8028e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8028e7e:	68bb      	ldr	r3, [r7, #8]
 8028e80:	781b      	ldrb	r3, [r3, #0]
 8028e82:	2b58      	cmp	r3, #88	; 0x58
 8028e84:	d103      	bne.n	8028e8e <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8028e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028e88:	f043 0320 	orr.w	r3, r3, #32
 8028e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8028e8e:	68bb      	ldr	r3, [r7, #8]
 8028e90:	781b      	ldrb	r3, [r3, #0]
 8028e92:	2b69      	cmp	r3, #105	; 0x69
 8028e94:	d007      	beq.n	8028ea6 <_vsnprintf+0x47a>
 8028e96:	68bb      	ldr	r3, [r7, #8]
 8028e98:	781b      	ldrb	r3, [r3, #0]
 8028e9a:	2b64      	cmp	r3, #100	; 0x64
 8028e9c:	d003      	beq.n	8028ea6 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8028e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028ea0:	f023 030c 	bic.w	r3, r3, #12
 8028ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8028ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028eac:	2b00      	cmp	r3, #0
 8028eae:	d003      	beq.n	8028eb8 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8028eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028eb2:	f023 0301 	bic.w	r3, r3, #1
 8028eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8028eb8:	68bb      	ldr	r3, [r7, #8]
 8028eba:	781b      	ldrb	r3, [r3, #0]
 8028ebc:	2b69      	cmp	r3, #105	; 0x69
 8028ebe:	d004      	beq.n	8028eca <_vsnprintf+0x49e>
 8028ec0:	68bb      	ldr	r3, [r7, #8]
 8028ec2:	781b      	ldrb	r3, [r3, #0]
 8028ec4:	2b64      	cmp	r3, #100	; 0x64
 8028ec6:	f040 8098 	bne.w	8028ffa <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8028eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028ed0:	2b00      	cmp	r3, #0
 8028ed2:	d031      	beq.n	8028f38 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8028ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028ed8:	3307      	adds	r3, #7
 8028eda:	f023 0307 	bic.w	r3, r3, #7
 8028ede:	f103 0208 	add.w	r2, r3, #8
 8028ee2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028eea:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8028eee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8028ef2:	2b00      	cmp	r3, #0
 8028ef4:	da06      	bge.n	8028f04 <_vsnprintf+0x4d8>
 8028ef6:	2100      	movs	r1, #0
 8028ef8:	f1d2 0800 	rsbs	r8, r2, #0
 8028efc:	eb61 0903 	sbc.w	r9, r1, r3
 8028f00:	4642      	mov	r2, r8
 8028f02:	464b      	mov	r3, r9
 8028f04:	69f9      	ldr	r1, [r7, #28]
 8028f06:	0fc9      	lsrs	r1, r1, #31
 8028f08:	b2c9      	uxtb	r1, r1
 8028f0a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8028f0c:	2400      	movs	r4, #0
 8028f0e:	4682      	mov	sl, r0
 8028f10:	46a3      	mov	fp, r4
 8028f12:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8028f14:	9008      	str	r0, [sp, #32]
 8028f16:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8028f18:	9007      	str	r0, [sp, #28]
 8028f1a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8028f1c:	9006      	str	r0, [sp, #24]
 8028f1e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8028f22:	9102      	str	r1, [sp, #8]
 8028f24:	e9cd 2300 	strd	r2, r3, [sp]
 8028f28:	68fb      	ldr	r3, [r7, #12]
 8028f2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028f2c:	6939      	ldr	r1, [r7, #16]
 8028f2e:	6978      	ldr	r0, [r7, #20]
 8028f30:	f7ff f8c7 	bl	80280c2 <_ntoa_long_long>
 8028f34:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8028f36:	e0da      	b.n	80290ee <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8028f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028f3e:	2b00      	cmp	r3, #0
 8028f40:	d020      	beq.n	8028f84 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8028f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028f46:	1d1a      	adds	r2, r3, #4
 8028f48:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028f4c:	681b      	ldr	r3, [r3, #0]
 8028f4e:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8028f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f52:	2b00      	cmp	r3, #0
 8028f54:	bfb8      	it	lt
 8028f56:	425b      	neglt	r3, r3
 8028f58:	4619      	mov	r1, r3
 8028f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f5c:	0fdb      	lsrs	r3, r3, #31
 8028f5e:	b2db      	uxtb	r3, r3
 8028f60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8028f62:	9205      	str	r2, [sp, #20]
 8028f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8028f66:	9204      	str	r2, [sp, #16]
 8028f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028f6a:	9203      	str	r2, [sp, #12]
 8028f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8028f6e:	9202      	str	r2, [sp, #8]
 8028f70:	9301      	str	r3, [sp, #4]
 8028f72:	9100      	str	r1, [sp, #0]
 8028f74:	68fb      	ldr	r3, [r7, #12]
 8028f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028f78:	6939      	ldr	r1, [r7, #16]
 8028f7a:	6978      	ldr	r0, [r7, #20]
 8028f7c:	f7ff f83b 	bl	8027ff6 <_ntoa_long>
 8028f80:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8028f82:	e0b4      	b.n	80290ee <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8028f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f8a:	2b00      	cmp	r3, #0
 8028f8c:	d007      	beq.n	8028f9e <_vsnprintf+0x572>
 8028f8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028f92:	1d1a      	adds	r2, r3, #4
 8028f94:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028f98:	681b      	ldr	r3, [r3, #0]
 8028f9a:	b2db      	uxtb	r3, r3
 8028f9c:	e012      	b.n	8028fc4 <_vsnprintf+0x598>
 8028f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028fa4:	2b00      	cmp	r3, #0
 8028fa6:	d007      	beq.n	8028fb8 <_vsnprintf+0x58c>
 8028fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028fac:	1d1a      	adds	r2, r3, #4
 8028fae:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028fb2:	681b      	ldr	r3, [r3, #0]
 8028fb4:	b21b      	sxth	r3, r3
 8028fb6:	e005      	b.n	8028fc4 <_vsnprintf+0x598>
 8028fb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028fbc:	1d1a      	adds	r2, r3, #4
 8028fbe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8028fc2:	681b      	ldr	r3, [r3, #0]
 8028fc4:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8028fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028fc8:	2b00      	cmp	r3, #0
 8028fca:	bfb8      	it	lt
 8028fcc:	425b      	neglt	r3, r3
 8028fce:	4619      	mov	r1, r3
 8028fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028fd2:	0fdb      	lsrs	r3, r3, #31
 8028fd4:	b2db      	uxtb	r3, r3
 8028fd6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8028fd8:	9205      	str	r2, [sp, #20]
 8028fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8028fdc:	9204      	str	r2, [sp, #16]
 8028fde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028fe0:	9203      	str	r2, [sp, #12]
 8028fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8028fe4:	9202      	str	r2, [sp, #8]
 8028fe6:	9301      	str	r3, [sp, #4]
 8028fe8:	9100      	str	r1, [sp, #0]
 8028fea:	68fb      	ldr	r3, [r7, #12]
 8028fec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028fee:	6939      	ldr	r1, [r7, #16]
 8028ff0:	6978      	ldr	r0, [r7, #20]
 8028ff2:	f7ff f800 	bl	8027ff6 <_ntoa_long>
 8028ff6:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8028ff8:	e079      	b.n	80290ee <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8028ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8029000:	2b00      	cmp	r3, #0
 8029002:	d022      	beq.n	802904a <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8029004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029008:	3307      	adds	r3, #7
 802900a:	f023 0307 	bic.w	r3, r3, #7
 802900e:	f103 0208 	add.w	r2, r3, #8
 8029012:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8029016:	e9d3 2300 	ldrd	r2, r3, [r3]
 802901a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 802901c:	2000      	movs	r0, #0
 802901e:	460d      	mov	r5, r1
 8029020:	4606      	mov	r6, r0
 8029022:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8029024:	9108      	str	r1, [sp, #32]
 8029026:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8029028:	9107      	str	r1, [sp, #28]
 802902a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802902c:	9106      	str	r1, [sp, #24]
 802902e:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8029032:	2100      	movs	r1, #0
 8029034:	9102      	str	r1, [sp, #8]
 8029036:	e9cd 2300 	strd	r2, r3, [sp]
 802903a:	68fb      	ldr	r3, [r7, #12]
 802903c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802903e:	6939      	ldr	r1, [r7, #16]
 8029040:	6978      	ldr	r0, [r7, #20]
 8029042:	f7ff f83e 	bl	80280c2 <_ntoa_long_long>
 8029046:	64f8      	str	r0, [r7, #76]	; 0x4c
 8029048:	e051      	b.n	80290ee <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 802904a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802904c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029050:	2b00      	cmp	r3, #0
 8029052:	d018      	beq.n	8029086 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8029054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029058:	1d1a      	adds	r2, r3, #4
 802905a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802905e:	681b      	ldr	r3, [r3, #0]
 8029060:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029062:	9205      	str	r2, [sp, #20]
 8029064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029066:	9204      	str	r2, [sp, #16]
 8029068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802906a:	9203      	str	r2, [sp, #12]
 802906c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802906e:	9202      	str	r2, [sp, #8]
 8029070:	2200      	movs	r2, #0
 8029072:	9201      	str	r2, [sp, #4]
 8029074:	9300      	str	r3, [sp, #0]
 8029076:	68fb      	ldr	r3, [r7, #12]
 8029078:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802907a:	6939      	ldr	r1, [r7, #16]
 802907c:	6978      	ldr	r0, [r7, #20]
 802907e:	f7fe ffba 	bl	8027ff6 <_ntoa_long>
 8029082:	64f8      	str	r0, [r7, #76]	; 0x4c
 8029084:	e033      	b.n	80290ee <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8029086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802908c:	2b00      	cmp	r3, #0
 802908e:	d007      	beq.n	80290a0 <_vsnprintf+0x674>
 8029090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029094:	1d1a      	adds	r2, r3, #4
 8029096:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802909a:	681b      	ldr	r3, [r3, #0]
 802909c:	b2db      	uxtb	r3, r3
 802909e:	e012      	b.n	80290c6 <_vsnprintf+0x69a>
 80290a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80290a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	d007      	beq.n	80290ba <_vsnprintf+0x68e>
 80290aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80290ae:	1d1a      	adds	r2, r3, #4
 80290b0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80290b4:	681b      	ldr	r3, [r3, #0]
 80290b6:	b29b      	uxth	r3, r3
 80290b8:	e005      	b.n	80290c6 <_vsnprintf+0x69a>
 80290ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80290be:	1d1a      	adds	r2, r3, #4
 80290c0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80290c4:	681b      	ldr	r3, [r3, #0]
 80290c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80290c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80290ca:	9305      	str	r3, [sp, #20]
 80290cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80290ce:	9304      	str	r3, [sp, #16]
 80290d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80290d2:	9303      	str	r3, [sp, #12]
 80290d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80290d6:	9302      	str	r3, [sp, #8]
 80290d8:	2300      	movs	r3, #0
 80290da:	9301      	str	r3, [sp, #4]
 80290dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80290de:	9300      	str	r3, [sp, #0]
 80290e0:	68fb      	ldr	r3, [r7, #12]
 80290e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80290e4:	6939      	ldr	r1, [r7, #16]
 80290e6:	6978      	ldr	r0, [r7, #20]
 80290e8:	f7fe ff85 	bl	8027ff6 <_ntoa_long>
 80290ec:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 80290ee:	68bb      	ldr	r3, [r7, #8]
 80290f0:	3301      	adds	r3, #1
 80290f2:	60bb      	str	r3, [r7, #8]
        break;
 80290f4:	e162      	b.n	80293bc <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80290f6:	68bb      	ldr	r3, [r7, #8]
 80290f8:	781b      	ldrb	r3, [r3, #0]
 80290fa:	2b46      	cmp	r3, #70	; 0x46
 80290fc:	d103      	bne.n	8029106 <_vsnprintf+0x6da>
 80290fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029100:	f043 0320 	orr.w	r3, r3, #32
 8029104:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8029106:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802910a:	3307      	adds	r3, #7
 802910c:	f023 0307 	bic.w	r3, r3, #7
 8029110:	f103 0208 	add.w	r2, r3, #8
 8029114:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8029118:	ed93 7b00 	vldr	d7, [r3]
 802911c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802911e:	9302      	str	r3, [sp, #8]
 8029120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029122:	9301      	str	r3, [sp, #4]
 8029124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029126:	9300      	str	r3, [sp, #0]
 8029128:	eeb0 0b47 	vmov.f64	d0, d7
 802912c:	68fb      	ldr	r3, [r7, #12]
 802912e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029130:	6939      	ldr	r1, [r7, #16]
 8029132:	6978      	ldr	r0, [r7, #20]
 8029134:	f7ff f834 	bl	80281a0 <_ftoa>
 8029138:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 802913a:	68bb      	ldr	r3, [r7, #8]
 802913c:	3301      	adds	r3, #1
 802913e:	60bb      	str	r3, [r7, #8]
        break;
 8029140:	e13c      	b.n	80293bc <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8029142:	68bb      	ldr	r3, [r7, #8]
 8029144:	781b      	ldrb	r3, [r3, #0]
 8029146:	2b67      	cmp	r3, #103	; 0x67
 8029148:	d003      	beq.n	8029152 <_vsnprintf+0x726>
 802914a:	68bb      	ldr	r3, [r7, #8]
 802914c:	781b      	ldrb	r3, [r3, #0]
 802914e:	2b47      	cmp	r3, #71	; 0x47
 8029150:	d103      	bne.n	802915a <_vsnprintf+0x72e>
 8029152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029154:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8029158:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 802915a:	68bb      	ldr	r3, [r7, #8]
 802915c:	781b      	ldrb	r3, [r3, #0]
 802915e:	2b45      	cmp	r3, #69	; 0x45
 8029160:	d003      	beq.n	802916a <_vsnprintf+0x73e>
 8029162:	68bb      	ldr	r3, [r7, #8]
 8029164:	781b      	ldrb	r3, [r3, #0]
 8029166:	2b47      	cmp	r3, #71	; 0x47
 8029168:	d103      	bne.n	8029172 <_vsnprintf+0x746>
 802916a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802916c:	f043 0320 	orr.w	r3, r3, #32
 8029170:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8029172:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029176:	3307      	adds	r3, #7
 8029178:	f023 0307 	bic.w	r3, r3, #7
 802917c:	f103 0208 	add.w	r2, r3, #8
 8029180:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8029184:	ed93 7b00 	vldr	d7, [r3]
 8029188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802918a:	9302      	str	r3, [sp, #8]
 802918c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802918e:	9301      	str	r3, [sp, #4]
 8029190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029192:	9300      	str	r3, [sp, #0]
 8029194:	eeb0 0b47 	vmov.f64	d0, d7
 8029198:	68fb      	ldr	r3, [r7, #12]
 802919a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802919c:	6939      	ldr	r1, [r7, #16]
 802919e:	6978      	ldr	r0, [r7, #20]
 80291a0:	f7ff fa46 	bl	8028630 <_etoa>
 80291a4:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80291a6:	68bb      	ldr	r3, [r7, #8]
 80291a8:	3301      	adds	r3, #1
 80291aa:	60bb      	str	r3, [r7, #8]
        break;
 80291ac:	e106      	b.n	80293bc <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80291ae:	2301      	movs	r3, #1
 80291b0:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80291b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80291b4:	f003 0302 	and.w	r3, r3, #2
 80291b8:	2b00      	cmp	r3, #0
 80291ba:	d10e      	bne.n	80291da <_vsnprintf+0x7ae>
          while (l++ < width) {
 80291bc:	e007      	b.n	80291ce <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 80291be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80291c0:	1c53      	adds	r3, r2, #1
 80291c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80291c4:	697c      	ldr	r4, [r7, #20]
 80291c6:	68fb      	ldr	r3, [r7, #12]
 80291c8:	6939      	ldr	r1, [r7, #16]
 80291ca:	2020      	movs	r0, #32
 80291cc:	47a0      	blx	r4
          while (l++ < width) {
 80291ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80291d0:	1c5a      	adds	r2, r3, #1
 80291d2:	647a      	str	r2, [r7, #68]	; 0x44
 80291d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80291d6:	429a      	cmp	r2, r3
 80291d8:	d8f1      	bhi.n	80291be <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80291da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80291de:	1d1a      	adds	r2, r3, #4
 80291e0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80291e4:	681b      	ldr	r3, [r3, #0]
 80291e6:	b2d8      	uxtb	r0, r3
 80291e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80291ea:	1c53      	adds	r3, r2, #1
 80291ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80291ee:	697c      	ldr	r4, [r7, #20]
 80291f0:	68fb      	ldr	r3, [r7, #12]
 80291f2:	6939      	ldr	r1, [r7, #16]
 80291f4:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80291f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80291f8:	f003 0302 	and.w	r3, r3, #2
 80291fc:	2b00      	cmp	r3, #0
 80291fe:	d00e      	beq.n	802921e <_vsnprintf+0x7f2>
          while (l++ < width) {
 8029200:	e007      	b.n	8029212 <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 8029202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029204:	1c53      	adds	r3, r2, #1
 8029206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029208:	697c      	ldr	r4, [r7, #20]
 802920a:	68fb      	ldr	r3, [r7, #12]
 802920c:	6939      	ldr	r1, [r7, #16]
 802920e:	2020      	movs	r0, #32
 8029210:	47a0      	blx	r4
          while (l++ < width) {
 8029212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029214:	1c5a      	adds	r2, r3, #1
 8029216:	647a      	str	r2, [r7, #68]	; 0x44
 8029218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802921a:	429a      	cmp	r2, r3
 802921c:	d8f1      	bhi.n	8029202 <_vsnprintf+0x7d6>
          }
        }
        format++;
 802921e:	68bb      	ldr	r3, [r7, #8]
 8029220:	3301      	adds	r3, #1
 8029222:	60bb      	str	r3, [r7, #8]
        break;
 8029224:	e0ca      	b.n	80293bc <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8029226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802922a:	1d1a      	adds	r2, r3, #4
 802922c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8029230:	681b      	ldr	r3, [r3, #0]
 8029232:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8029234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029236:	2b00      	cmp	r3, #0
 8029238:	d001      	beq.n	802923e <_vsnprintf+0x812>
 802923a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802923c:	e001      	b.n	8029242 <_vsnprintf+0x816>
 802923e:	f04f 33ff 	mov.w	r3, #4294967295
 8029242:	4619      	mov	r1, r3
 8029244:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8029246:	f7fe fd52 	bl	8027cee <_strnlen_s>
 802924a:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 802924c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802924e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8029252:	2b00      	cmp	r3, #0
 8029254:	d005      	beq.n	8029262 <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 8029256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802925a:	4293      	cmp	r3, r2
 802925c:	bf28      	it	cs
 802925e:	4613      	movcs	r3, r2
 8029260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8029262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029264:	f003 0302 	and.w	r3, r3, #2
 8029268:	2b00      	cmp	r3, #0
 802926a:	d11a      	bne.n	80292a2 <_vsnprintf+0x876>
          while (l++ < width) {
 802926c:	e007      	b.n	802927e <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 802926e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029270:	1c53      	adds	r3, r2, #1
 8029272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029274:	697c      	ldr	r4, [r7, #20]
 8029276:	68fb      	ldr	r3, [r7, #12]
 8029278:	6939      	ldr	r1, [r7, #16]
 802927a:	2020      	movs	r0, #32
 802927c:	47a0      	blx	r4
          while (l++ < width) {
 802927e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029280:	1c5a      	adds	r2, r3, #1
 8029282:	63fa      	str	r2, [r7, #60]	; 0x3c
 8029284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029286:	429a      	cmp	r2, r3
 8029288:	d8f1      	bhi.n	802926e <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 802928a:	e00a      	b.n	80292a2 <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 802928c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802928e:	1c5a      	adds	r2, r3, #1
 8029290:	643a      	str	r2, [r7, #64]	; 0x40
 8029292:	7818      	ldrb	r0, [r3, #0]
 8029294:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029296:	1c53      	adds	r3, r2, #1
 8029298:	64fb      	str	r3, [r7, #76]	; 0x4c
 802929a:	697c      	ldr	r4, [r7, #20]
 802929c:	68fb      	ldr	r3, [r7, #12]
 802929e:	6939      	ldr	r1, [r7, #16]
 80292a0:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80292a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80292a4:	781b      	ldrb	r3, [r3, #0]
 80292a6:	2b00      	cmp	r3, #0
 80292a8:	d009      	beq.n	80292be <_vsnprintf+0x892>
 80292aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80292ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80292b0:	2b00      	cmp	r3, #0
 80292b2:	d0eb      	beq.n	802928c <_vsnprintf+0x860>
 80292b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80292b6:	1e5a      	subs	r2, r3, #1
 80292b8:	657a      	str	r2, [r7, #84]	; 0x54
 80292ba:	2b00      	cmp	r3, #0
 80292bc:	d1e6      	bne.n	802928c <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80292be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80292c0:	f003 0302 	and.w	r3, r3, #2
 80292c4:	2b00      	cmp	r3, #0
 80292c6:	d00e      	beq.n	80292e6 <_vsnprintf+0x8ba>
          while (l++ < width) {
 80292c8:	e007      	b.n	80292da <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 80292ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80292cc:	1c53      	adds	r3, r2, #1
 80292ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80292d0:	697c      	ldr	r4, [r7, #20]
 80292d2:	68fb      	ldr	r3, [r7, #12]
 80292d4:	6939      	ldr	r1, [r7, #16]
 80292d6:	2020      	movs	r0, #32
 80292d8:	47a0      	blx	r4
          while (l++ < width) {
 80292da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80292dc:	1c5a      	adds	r2, r3, #1
 80292de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80292e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80292e2:	429a      	cmp	r2, r3
 80292e4:	d8f1      	bhi.n	80292ca <_vsnprintf+0x89e>
          }
        }
        format++;
 80292e6:	68bb      	ldr	r3, [r7, #8]
 80292e8:	3301      	adds	r3, #1
 80292ea:	60bb      	str	r3, [r7, #8]
        break;
 80292ec:	e066      	b.n	80293bc <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80292ee:	2308      	movs	r3, #8
 80292f0:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80292f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80292f4:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80292f8:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80292fa:	2300      	movs	r3, #0
 80292fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8029300:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8029304:	2b00      	cmp	r3, #0
 8029306:	d023      	beq.n	8029350 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8029308:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802930c:	1d1a      	adds	r2, r3, #4
 802930e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8029312:	681b      	ldr	r3, [r3, #0]
 8029314:	461a      	mov	r2, r3
 8029316:	2300      	movs	r3, #0
 8029318:	603a      	str	r2, [r7, #0]
 802931a:	607b      	str	r3, [r7, #4]
 802931c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802931e:	9308      	str	r3, [sp, #32]
 8029320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029322:	9307      	str	r3, [sp, #28]
 8029324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029326:	9306      	str	r3, [sp, #24]
 8029328:	f04f 0210 	mov.w	r2, #16
 802932c:	f04f 0300 	mov.w	r3, #0
 8029330:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8029334:	2300      	movs	r3, #0
 8029336:	9302      	str	r3, [sp, #8]
 8029338:	e9d7 3400 	ldrd	r3, r4, [r7]
 802933c:	e9cd 3400 	strd	r3, r4, [sp]
 8029340:	68fb      	ldr	r3, [r7, #12]
 8029342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029344:	6939      	ldr	r1, [r7, #16]
 8029346:	6978      	ldr	r0, [r7, #20]
 8029348:	f7fe febb 	bl	80280c2 <_ntoa_long_long>
 802934c:	64f8      	str	r0, [r7, #76]	; 0x4c
 802934e:	e018      	b.n	8029382 <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8029350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029354:	1d1a      	adds	r2, r3, #4
 8029356:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 802935a:	681b      	ldr	r3, [r3, #0]
 802935c:	461a      	mov	r2, r3
 802935e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029360:	9305      	str	r3, [sp, #20]
 8029362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029364:	9304      	str	r3, [sp, #16]
 8029366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029368:	9303      	str	r3, [sp, #12]
 802936a:	2310      	movs	r3, #16
 802936c:	9302      	str	r3, [sp, #8]
 802936e:	2300      	movs	r3, #0
 8029370:	9301      	str	r3, [sp, #4]
 8029372:	9200      	str	r2, [sp, #0]
 8029374:	68fb      	ldr	r3, [r7, #12]
 8029376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029378:	6939      	ldr	r1, [r7, #16]
 802937a:	6978      	ldr	r0, [r7, #20]
 802937c:	f7fe fe3b 	bl	8027ff6 <_ntoa_long>
 8029380:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8029382:	68bb      	ldr	r3, [r7, #8]
 8029384:	3301      	adds	r3, #1
 8029386:	60bb      	str	r3, [r7, #8]
        break;
 8029388:	e018      	b.n	80293bc <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 802938a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802938c:	1c53      	adds	r3, r2, #1
 802938e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029390:	697c      	ldr	r4, [r7, #20]
 8029392:	68fb      	ldr	r3, [r7, #12]
 8029394:	6939      	ldr	r1, [r7, #16]
 8029396:	2025      	movs	r0, #37	; 0x25
 8029398:	47a0      	blx	r4
        format++;
 802939a:	68bb      	ldr	r3, [r7, #8]
 802939c:	3301      	adds	r3, #1
 802939e:	60bb      	str	r3, [r7, #8]
        break;
 80293a0:	e00c      	b.n	80293bc <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 80293a2:	68bb      	ldr	r3, [r7, #8]
 80293a4:	7818      	ldrb	r0, [r3, #0]
 80293a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80293a8:	1c53      	adds	r3, r2, #1
 80293aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80293ac:	697c      	ldr	r4, [r7, #20]
 80293ae:	68fb      	ldr	r3, [r7, #12]
 80293b0:	6939      	ldr	r1, [r7, #16]
 80293b2:	47a0      	blx	r4
        format++;
 80293b4:	68bb      	ldr	r3, [r7, #8]
 80293b6:	3301      	adds	r3, #1
 80293b8:	60bb      	str	r3, [r7, #8]
        break;
 80293ba:	bf00      	nop
  while (*format)
 80293bc:	68bb      	ldr	r3, [r7, #8]
 80293be:	781b      	ldrb	r3, [r3, #0]
 80293c0:	2b00      	cmp	r3, #0
 80293c2:	f47f ab45 	bne.w	8028a50 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80293c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80293c8:	68fb      	ldr	r3, [r7, #12]
 80293ca:	429a      	cmp	r2, r3
 80293cc:	d302      	bcc.n	80293d4 <_vsnprintf+0x9a8>
 80293ce:	68fb      	ldr	r3, [r7, #12]
 80293d0:	1e5a      	subs	r2, r3, #1
 80293d2:	e000      	b.n	80293d6 <_vsnprintf+0x9aa>
 80293d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80293d6:	697c      	ldr	r4, [r7, #20]
 80293d8:	68fb      	ldr	r3, [r7, #12]
 80293da:	6939      	ldr	r1, [r7, #16]
 80293dc:	2000      	movs	r0, #0
 80293de:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80293e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80293e2:	4618      	mov	r0, r3
 80293e4:	3764      	adds	r7, #100	; 0x64
 80293e6:	46bd      	mov	sp, r7
 80293e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080293ec <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80293ec:	b40f      	push	{r0, r1, r2, r3}
 80293ee:	b580      	push	{r7, lr}
 80293f0:	b086      	sub	sp, #24
 80293f2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80293f4:	f107 031c 	add.w	r3, r7, #28
 80293f8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80293fa:	1d39      	adds	r1, r7, #4
 80293fc:	68bb      	ldr	r3, [r7, #8]
 80293fe:	9300      	str	r3, [sp, #0]
 8029400:	69bb      	ldr	r3, [r7, #24]
 8029402:	f04f 32ff 	mov.w	r2, #4294967295
 8029406:	4806      	ldr	r0, [pc, #24]	; (8029420 <printf_+0x34>)
 8029408:	f7ff fb10 	bl	8028a2c <_vsnprintf>
 802940c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 802940e:	68fb      	ldr	r3, [r7, #12]
}
 8029410:	4618      	mov	r0, r3
 8029412:	3710      	adds	r7, #16
 8029414:	46bd      	mov	sp, r7
 8029416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802941a:	b004      	add	sp, #16
 802941c:	4770      	bx	lr
 802941e:	bf00      	nop
 8029420:	08027cc9 	.word	0x08027cc9

08029424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8029424:	b480      	push	{r7}
 8029426:	b083      	sub	sp, #12
 8029428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802942a:	4b0a      	ldr	r3, [pc, #40]	; (8029454 <HAL_MspInit+0x30>)
 802942c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029430:	4a08      	ldr	r2, [pc, #32]	; (8029454 <HAL_MspInit+0x30>)
 8029432:	f043 0302 	orr.w	r3, r3, #2
 8029436:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802943a:	4b06      	ldr	r3, [pc, #24]	; (8029454 <HAL_MspInit+0x30>)
 802943c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029440:	f003 0302 	and.w	r3, r3, #2
 8029444:	607b      	str	r3, [r7, #4]
 8029446:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8029448:	bf00      	nop
 802944a:	370c      	adds	r7, #12
 802944c:	46bd      	mov	sp, r7
 802944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029452:	4770      	bx	lr
 8029454:	58024400 	.word	0x58024400

08029458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8029458:	b580      	push	{r7, lr}
 802945a:	b0ba      	sub	sp, #232	; 0xe8
 802945c:	af00      	add	r7, sp, #0
 802945e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029460:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8029464:	2200      	movs	r2, #0
 8029466:	601a      	str	r2, [r3, #0]
 8029468:	605a      	str	r2, [r3, #4]
 802946a:	609a      	str	r2, [r3, #8]
 802946c:	60da      	str	r2, [r3, #12]
 802946e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029470:	f107 0310 	add.w	r3, r7, #16
 8029474:	22c0      	movs	r2, #192	; 0xc0
 8029476:	2100      	movs	r1, #0
 8029478:	4618      	mov	r0, r3
 802947a:	f007 f89b 	bl	80305b4 <memset>
  if(hspi->Instance==SPI1)
 802947e:	687b      	ldr	r3, [r7, #4]
 8029480:	681b      	ldr	r3, [r3, #0]
 8029482:	4a2a      	ldr	r2, [pc, #168]	; (802952c <HAL_SPI_MspInit+0xd4>)
 8029484:	4293      	cmp	r3, r2
 8029486:	d14c      	bne.n	8029522 <HAL_SPI_MspInit+0xca>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8029488:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802948c:	f04f 0300 	mov.w	r3, #0
 8029490:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8029494:	2300      	movs	r3, #0
 8029496:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029498:	f107 0310 	add.w	r3, r7, #16
 802949c:	4618      	mov	r0, r3
 802949e:	f002 fd6f 	bl	802bf80 <HAL_RCCEx_PeriphCLKConfig>
 80294a2:	4603      	mov	r3, r0
 80294a4:	2b00      	cmp	r3, #0
 80294a6:	d001      	beq.n	80294ac <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80294a8:	f7fe fbfb 	bl	8027ca2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80294ac:	4b20      	ldr	r3, [pc, #128]	; (8029530 <HAL_SPI_MspInit+0xd8>)
 80294ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80294b2:	4a1f      	ldr	r2, [pc, #124]	; (8029530 <HAL_SPI_MspInit+0xd8>)
 80294b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80294b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80294bc:	4b1c      	ldr	r3, [pc, #112]	; (8029530 <HAL_SPI_MspInit+0xd8>)
 80294be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80294c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80294c6:	60fb      	str	r3, [r7, #12]
 80294c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80294ca:	4b19      	ldr	r3, [pc, #100]	; (8029530 <HAL_SPI_MspInit+0xd8>)
 80294cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294d0:	4a17      	ldr	r2, [pc, #92]	; (8029530 <HAL_SPI_MspInit+0xd8>)
 80294d2:	f043 0301 	orr.w	r3, r3, #1
 80294d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80294da:	4b15      	ldr	r3, [pc, #84]	; (8029530 <HAL_SPI_MspInit+0xd8>)
 80294dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294e0:	f003 0301 	and.w	r3, r3, #1
 80294e4:	60bb      	str	r3, [r7, #8]
 80294e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80294e8:	23e0      	movs	r3, #224	; 0xe0
 80294ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80294ee:	2302      	movs	r3, #2
 80294f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80294f4:	2300      	movs	r3, #0
 80294f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80294fa:	2300      	movs	r3, #0
 80294fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8029500:	2305      	movs	r3, #5
 8029502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8029506:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 802950a:	4619      	mov	r1, r3
 802950c:	4809      	ldr	r0, [pc, #36]	; (8029534 <HAL_SPI_MspInit+0xdc>)
 802950e:	f001 fa01 	bl	802a914 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8029512:	2200      	movs	r2, #0
 8029514:	2100      	movs	r1, #0
 8029516:	2023      	movs	r0, #35	; 0x23
 8029518:	f000 ff05 	bl	802a326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 802951c:	2023      	movs	r0, #35	; 0x23
 802951e:	f000 ff1c 	bl	802a35a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8029522:	bf00      	nop
 8029524:	37e8      	adds	r7, #232	; 0xe8
 8029526:	46bd      	mov	sp, r7
 8029528:	bd80      	pop	{r7, pc}
 802952a:	bf00      	nop
 802952c:	40013000 	.word	0x40013000
 8029530:	58024400 	.word	0x58024400
 8029534:	58020000 	.word	0x58020000

08029538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8029538:	b580      	push	{r7, lr}
 802953a:	b084      	sub	sp, #16
 802953c:	af00      	add	r7, sp, #0
 802953e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8029540:	687b      	ldr	r3, [r7, #4]
 8029542:	681b      	ldr	r3, [r3, #0]
 8029544:	4a0e      	ldr	r2, [pc, #56]	; (8029580 <HAL_TIM_Base_MspInit+0x48>)
 8029546:	4293      	cmp	r3, r2
 8029548:	d116      	bne.n	8029578 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 802954a:	4b0e      	ldr	r3, [pc, #56]	; (8029584 <HAL_TIM_Base_MspInit+0x4c>)
 802954c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029550:	4a0c      	ldr	r2, [pc, #48]	; (8029584 <HAL_TIM_Base_MspInit+0x4c>)
 8029552:	f043 0320 	orr.w	r3, r3, #32
 8029556:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802955a:	4b0a      	ldr	r3, [pc, #40]	; (8029584 <HAL_TIM_Base_MspInit+0x4c>)
 802955c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029560:	f003 0320 	and.w	r3, r3, #32
 8029564:	60fb      	str	r3, [r7, #12]
 8029566:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8029568:	2200      	movs	r2, #0
 802956a:	2100      	movs	r1, #0
 802956c:	2037      	movs	r0, #55	; 0x37
 802956e:	f000 feda 	bl	802a326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8029572:	2037      	movs	r0, #55	; 0x37
 8029574:	f000 fef1 	bl	802a35a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8029578:	bf00      	nop
 802957a:	3710      	adds	r7, #16
 802957c:	46bd      	mov	sp, r7
 802957e:	bd80      	pop	{r7, pc}
 8029580:	40001400 	.word	0x40001400
 8029584:	58024400 	.word	0x58024400

08029588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8029588:	b580      	push	{r7, lr}
 802958a:	b0c2      	sub	sp, #264	; 0x108
 802958c:	af00      	add	r7, sp, #0
 802958e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8029592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8029596:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029598:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 802959c:	2200      	movs	r2, #0
 802959e:	601a      	str	r2, [r3, #0]
 80295a0:	605a      	str	r2, [r3, #4]
 80295a2:	609a      	str	r2, [r3, #8]
 80295a4:	60da      	str	r2, [r3, #12]
 80295a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80295a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80295ac:	22c0      	movs	r2, #192	; 0xc0
 80295ae:	2100      	movs	r1, #0
 80295b0:	4618      	mov	r0, r3
 80295b2:	f006 ffff 	bl	80305b4 <memset>
  if(huart->Instance==UART4)
 80295b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80295ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80295be:	681b      	ldr	r3, [r3, #0]
 80295c0:	681b      	ldr	r3, [r3, #0]
 80295c2:	4acc      	ldr	r2, [pc, #816]	; (80298f4 <HAL_UART_MspInit+0x36c>)
 80295c4:	4293      	cmp	r3, r2
 80295c6:	d146      	bne.n	8029656 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80295c8:	f04f 0202 	mov.w	r2, #2
 80295cc:	f04f 0300 	mov.w	r3, #0
 80295d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80295d4:	2300      	movs	r3, #0
 80295d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80295da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80295de:	4618      	mov	r0, r3
 80295e0:	f002 fcce 	bl	802bf80 <HAL_RCCEx_PeriphCLKConfig>
 80295e4:	4603      	mov	r3, r0
 80295e6:	2b00      	cmp	r3, #0
 80295e8:	d001      	beq.n	80295ee <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80295ea:	f7fe fb5a 	bl	8027ca2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80295ee:	4bc2      	ldr	r3, [pc, #776]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80295f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80295f4:	4ac0      	ldr	r2, [pc, #768]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80295f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80295fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80295fe:	4bbe      	ldr	r3, [pc, #760]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8029608:	62fb      	str	r3, [r7, #44]	; 0x2c
 802960a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802960c:	4bba      	ldr	r3, [pc, #744]	; (80298f8 <HAL_UART_MspInit+0x370>)
 802960e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029612:	4ab9      	ldr	r2, [pc, #740]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029614:	f043 0301 	orr.w	r3, r3, #1
 8029618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802961c:	4bb6      	ldr	r3, [pc, #728]	; (80298f8 <HAL_UART_MspInit+0x370>)
 802961e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029622:	f003 0301 	and.w	r3, r3, #1
 8029626:	62bb      	str	r3, [r7, #40]	; 0x28
 8029628:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802962a:	2303      	movs	r3, #3
 802962c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029630:	2302      	movs	r3, #2
 8029632:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029636:	2300      	movs	r3, #0
 8029638:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802963c:	2300      	movs	r3, #0
 802963e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8029642:	2308      	movs	r3, #8
 8029644:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8029648:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 802964c:	4619      	mov	r1, r3
 802964e:	48ab      	ldr	r0, [pc, #684]	; (80298fc <HAL_UART_MspInit+0x374>)
 8029650:	f001 f960 	bl	802a914 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8029654:	e149      	b.n	80298ea <HAL_UART_MspInit+0x362>
  else if(huart->Instance==UART5)
 8029656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802965a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 802965e:	681b      	ldr	r3, [r3, #0]
 8029660:	681b      	ldr	r3, [r3, #0]
 8029662:	4aa7      	ldr	r2, [pc, #668]	; (8029900 <HAL_UART_MspInit+0x378>)
 8029664:	4293      	cmp	r3, r2
 8029666:	d147      	bne.n	80296f8 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8029668:	f04f 0202 	mov.w	r2, #2
 802966c:	f04f 0300 	mov.w	r3, #0
 8029670:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8029674:	2300      	movs	r3, #0
 8029676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802967a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802967e:	4618      	mov	r0, r3
 8029680:	f002 fc7e 	bl	802bf80 <HAL_RCCEx_PeriphCLKConfig>
 8029684:	4603      	mov	r3, r0
 8029686:	2b00      	cmp	r3, #0
 8029688:	d001      	beq.n	802968e <HAL_UART_MspInit+0x106>
      Error_Handler();
 802968a:	f7fe fb0a 	bl	8027ca2 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 802968e:	4b9a      	ldr	r3, [pc, #616]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029694:	4a98      	ldr	r2, [pc, #608]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802969a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802969e:	4b96      	ldr	r3, [pc, #600]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80296a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80296a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80296a8:	627b      	str	r3, [r7, #36]	; 0x24
 80296aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80296ac:	4b92      	ldr	r3, [pc, #584]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80296ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80296b2:	4a91      	ldr	r2, [pc, #580]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80296b4:	f043 0302 	orr.w	r3, r3, #2
 80296b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80296bc:	4b8e      	ldr	r3, [pc, #568]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80296be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80296c2:	f003 0302 	and.w	r3, r3, #2
 80296c6:	623b      	str	r3, [r7, #32]
 80296c8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80296ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80296ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80296d2:	2302      	movs	r3, #2
 80296d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80296d8:	2300      	movs	r3, #0
 80296da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80296de:	2300      	movs	r3, #0
 80296e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80296e4:	230e      	movs	r3, #14
 80296e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80296ea:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80296ee:	4619      	mov	r1, r3
 80296f0:	4884      	ldr	r0, [pc, #528]	; (8029904 <HAL_UART_MspInit+0x37c>)
 80296f2:	f001 f90f 	bl	802a914 <HAL_GPIO_Init>
}
 80296f6:	e0f8      	b.n	80298ea <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART1)
 80296f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80296fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8029700:	681b      	ldr	r3, [r3, #0]
 8029702:	681b      	ldr	r3, [r3, #0]
 8029704:	4a80      	ldr	r2, [pc, #512]	; (8029908 <HAL_UART_MspInit+0x380>)
 8029706:	4293      	cmp	r3, r2
 8029708:	d147      	bne.n	802979a <HAL_UART_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 802970a:	f04f 0201 	mov.w	r2, #1
 802970e:	f04f 0300 	mov.w	r3, #0
 8029712:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8029716:	2300      	movs	r3, #0
 8029718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802971c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029720:	4618      	mov	r0, r3
 8029722:	f002 fc2d 	bl	802bf80 <HAL_RCCEx_PeriphCLKConfig>
 8029726:	4603      	mov	r3, r0
 8029728:	2b00      	cmp	r3, #0
 802972a:	d001      	beq.n	8029730 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 802972c:	f7fe fab9 	bl	8027ca2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8029730:	4b71      	ldr	r3, [pc, #452]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029736:	4a70      	ldr	r2, [pc, #448]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029738:	f043 0310 	orr.w	r3, r3, #16
 802973c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8029740:	4b6d      	ldr	r3, [pc, #436]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029746:	f003 0310 	and.w	r3, r3, #16
 802974a:	61fb      	str	r3, [r7, #28]
 802974c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802974e:	4b6a      	ldr	r3, [pc, #424]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029754:	4a68      	ldr	r2, [pc, #416]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029756:	f043 0302 	orr.w	r3, r3, #2
 802975a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802975e:	4b66      	ldr	r3, [pc, #408]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029764:	f003 0302 	and.w	r3, r3, #2
 8029768:	61bb      	str	r3, [r7, #24]
 802976a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 802976c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8029770:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029774:	2302      	movs	r3, #2
 8029776:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802977a:	2300      	movs	r3, #0
 802977c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029780:	2300      	movs	r3, #0
 8029782:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8029786:	2304      	movs	r3, #4
 8029788:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802978c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8029790:	4619      	mov	r1, r3
 8029792:	485c      	ldr	r0, [pc, #368]	; (8029904 <HAL_UART_MspInit+0x37c>)
 8029794:	f001 f8be 	bl	802a914 <HAL_GPIO_Init>
}
 8029798:	e0a7      	b.n	80298ea <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART2)
 802979a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802979e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80297a2:	681b      	ldr	r3, [r3, #0]
 80297a4:	681b      	ldr	r3, [r3, #0]
 80297a6:	4a59      	ldr	r2, [pc, #356]	; (802990c <HAL_UART_MspInit+0x384>)
 80297a8:	4293      	cmp	r3, r2
 80297aa:	d146      	bne.n	802983a <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80297ac:	f04f 0202 	mov.w	r2, #2
 80297b0:	f04f 0300 	mov.w	r3, #0
 80297b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80297b8:	2300      	movs	r3, #0
 80297ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80297be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80297c2:	4618      	mov	r0, r3
 80297c4:	f002 fbdc 	bl	802bf80 <HAL_RCCEx_PeriphCLKConfig>
 80297c8:	4603      	mov	r3, r0
 80297ca:	2b00      	cmp	r3, #0
 80297cc:	d001      	beq.n	80297d2 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 80297ce:	f7fe fa68 	bl	8027ca2 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80297d2:	4b49      	ldr	r3, [pc, #292]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80297d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80297d8:	4a47      	ldr	r2, [pc, #284]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80297da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80297de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80297e2:	4b45      	ldr	r3, [pc, #276]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80297e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80297e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80297ec:	617b      	str	r3, [r7, #20]
 80297ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80297f0:	4b41      	ldr	r3, [pc, #260]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80297f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80297f6:	4a40      	ldr	r2, [pc, #256]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80297f8:	f043 0301 	orr.w	r3, r3, #1
 80297fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029800:	4b3d      	ldr	r3, [pc, #244]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029806:	f003 0301 	and.w	r3, r3, #1
 802980a:	613b      	str	r3, [r7, #16]
 802980c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802980e:	230c      	movs	r3, #12
 8029810:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029814:	2302      	movs	r3, #2
 8029816:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802981a:	2300      	movs	r3, #0
 802981c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029820:	2300      	movs	r3, #0
 8029822:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8029826:	2307      	movs	r3, #7
 8029828:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802982c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8029830:	4619      	mov	r1, r3
 8029832:	4832      	ldr	r0, [pc, #200]	; (80298fc <HAL_UART_MspInit+0x374>)
 8029834:	f001 f86e 	bl	802a914 <HAL_GPIO_Init>
}
 8029838:	e057      	b.n	80298ea <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART3)
 802983a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802983e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8029842:	681b      	ldr	r3, [r3, #0]
 8029844:	681b      	ldr	r3, [r3, #0]
 8029846:	4a32      	ldr	r2, [pc, #200]	; (8029910 <HAL_UART_MspInit+0x388>)
 8029848:	4293      	cmp	r3, r2
 802984a:	d14e      	bne.n	80298ea <HAL_UART_MspInit+0x362>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802984c:	f04f 0202 	mov.w	r2, #2
 8029850:	f04f 0300 	mov.w	r3, #0
 8029854:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8029858:	2300      	movs	r3, #0
 802985a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802985e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029862:	4618      	mov	r0, r3
 8029864:	f002 fb8c 	bl	802bf80 <HAL_RCCEx_PeriphCLKConfig>
 8029868:	4603      	mov	r3, r0
 802986a:	2b00      	cmp	r3, #0
 802986c:	d001      	beq.n	8029872 <HAL_UART_MspInit+0x2ea>
      Error_Handler();
 802986e:	f7fe fa18 	bl	8027ca2 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8029872:	4b21      	ldr	r3, [pc, #132]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029878:	4a1f      	ldr	r2, [pc, #124]	; (80298f8 <HAL_UART_MspInit+0x370>)
 802987a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802987e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8029882:	4b1d      	ldr	r3, [pc, #116]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802988c:	60fb      	str	r3, [r7, #12]
 802988e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8029890:	4b19      	ldr	r3, [pc, #100]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029896:	4a18      	ldr	r2, [pc, #96]	; (80298f8 <HAL_UART_MspInit+0x370>)
 8029898:	f043 0302 	orr.w	r3, r3, #2
 802989c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80298a0:	4b15      	ldr	r3, [pc, #84]	; (80298f8 <HAL_UART_MspInit+0x370>)
 80298a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80298a6:	f003 0202 	and.w	r2, r3, #2
 80298aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80298ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80298b2:	601a      	str	r2, [r3, #0]
 80298b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80298b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80298bc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80298be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80298c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80298c6:	2302      	movs	r3, #2
 80298c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80298cc:	2300      	movs	r3, #0
 80298ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80298d2:	2300      	movs	r3, #0
 80298d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80298d8:	2307      	movs	r3, #7
 80298da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80298de:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80298e2:	4619      	mov	r1, r3
 80298e4:	4807      	ldr	r0, [pc, #28]	; (8029904 <HAL_UART_MspInit+0x37c>)
 80298e6:	f001 f815 	bl	802a914 <HAL_GPIO_Init>
}
 80298ea:	bf00      	nop
 80298ec:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80298f0:	46bd      	mov	sp, r7
 80298f2:	bd80      	pop	{r7, pc}
 80298f4:	40004c00 	.word	0x40004c00
 80298f8:	58024400 	.word	0x58024400
 80298fc:	58020000 	.word	0x58020000
 8029900:	40005000 	.word	0x40005000
 8029904:	58020400 	.word	0x58020400
 8029908:	40011000 	.word	0x40011000
 802990c:	40004400 	.word	0x40004400
 8029910:	40004800 	.word	0x40004800

08029914 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8029914:	b580      	push	{r7, lr}
 8029916:	b082      	sub	sp, #8
 8029918:	af00      	add	r7, sp, #0
 802991a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 802991c:	687b      	ldr	r3, [r7, #4]
 802991e:	681b      	ldr	r3, [r3, #0]
 8029920:	4a2e      	ldr	r2, [pc, #184]	; (80299dc <HAL_UART_MspDeInit+0xc8>)
 8029922:	4293      	cmp	r3, r2
 8029924:	d10c      	bne.n	8029940 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8029926:	4b2e      	ldr	r3, [pc, #184]	; (80299e0 <HAL_UART_MspDeInit+0xcc>)
 8029928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802992c:	4a2c      	ldr	r2, [pc, #176]	; (80299e0 <HAL_UART_MspDeInit+0xcc>)
 802992e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8029932:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8029936:	2103      	movs	r1, #3
 8029938:	482a      	ldr	r0, [pc, #168]	; (80299e4 <HAL_UART_MspDeInit+0xd0>)
 802993a:	f001 f99b 	bl	802ac74 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 802993e:	e049      	b.n	80299d4 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==UART5)
 8029940:	687b      	ldr	r3, [r7, #4]
 8029942:	681b      	ldr	r3, [r3, #0]
 8029944:	4a28      	ldr	r2, [pc, #160]	; (80299e8 <HAL_UART_MspDeInit+0xd4>)
 8029946:	4293      	cmp	r3, r2
 8029948:	d10d      	bne.n	8029966 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_UART5_CLK_DISABLE();
 802994a:	4b25      	ldr	r3, [pc, #148]	; (80299e0 <HAL_UART_MspDeInit+0xcc>)
 802994c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029950:	4a23      	ldr	r2, [pc, #140]	; (80299e0 <HAL_UART_MspDeInit+0xcc>)
 8029952:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8029956:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 802995a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 802995e:	4823      	ldr	r0, [pc, #140]	; (80299ec <HAL_UART_MspDeInit+0xd8>)
 8029960:	f001 f988 	bl	802ac74 <HAL_GPIO_DeInit>
}
 8029964:	e036      	b.n	80299d4 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART1)
 8029966:	687b      	ldr	r3, [r7, #4]
 8029968:	681b      	ldr	r3, [r3, #0]
 802996a:	4a21      	ldr	r2, [pc, #132]	; (80299f0 <HAL_UART_MspDeInit+0xdc>)
 802996c:	4293      	cmp	r3, r2
 802996e:	d10d      	bne.n	802998c <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART1_CLK_DISABLE();
 8029970:	4b1b      	ldr	r3, [pc, #108]	; (80299e0 <HAL_UART_MspDeInit+0xcc>)
 8029972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029976:	4a1a      	ldr	r2, [pc, #104]	; (80299e0 <HAL_UART_MspDeInit+0xcc>)
 8029978:	f023 0310 	bic.w	r3, r3, #16
 802997c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14|GPIO_PIN_15);
 8029980:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8029984:	4819      	ldr	r0, [pc, #100]	; (80299ec <HAL_UART_MspDeInit+0xd8>)
 8029986:	f001 f975 	bl	802ac74 <HAL_GPIO_DeInit>
}
 802998a:	e023      	b.n	80299d4 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART2)
 802998c:	687b      	ldr	r3, [r7, #4]
 802998e:	681b      	ldr	r3, [r3, #0]
 8029990:	4a18      	ldr	r2, [pc, #96]	; (80299f4 <HAL_UART_MspDeInit+0xe0>)
 8029992:	4293      	cmp	r3, r2
 8029994:	d10c      	bne.n	80299b0 <HAL_UART_MspDeInit+0x9c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8029996:	4b12      	ldr	r3, [pc, #72]	; (80299e0 <HAL_UART_MspDeInit+0xcc>)
 8029998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802999c:	4a10      	ldr	r2, [pc, #64]	; (80299e0 <HAL_UART_MspDeInit+0xcc>)
 802999e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80299a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80299a6:	210c      	movs	r1, #12
 80299a8:	480e      	ldr	r0, [pc, #56]	; (80299e4 <HAL_UART_MspDeInit+0xd0>)
 80299aa:	f001 f963 	bl	802ac74 <HAL_GPIO_DeInit>
}
 80299ae:	e011      	b.n	80299d4 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART3)
 80299b0:	687b      	ldr	r3, [r7, #4]
 80299b2:	681b      	ldr	r3, [r3, #0]
 80299b4:	4a10      	ldr	r2, [pc, #64]	; (80299f8 <HAL_UART_MspDeInit+0xe4>)
 80299b6:	4293      	cmp	r3, r2
 80299b8:	d10c      	bne.n	80299d4 <HAL_UART_MspDeInit+0xc0>
    __HAL_RCC_USART3_CLK_DISABLE();
 80299ba:	4b09      	ldr	r3, [pc, #36]	; (80299e0 <HAL_UART_MspDeInit+0xcc>)
 80299bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80299c0:	4a07      	ldr	r2, [pc, #28]	; (80299e0 <HAL_UART_MspDeInit+0xcc>)
 80299c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80299c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80299ca:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80299ce:	4807      	ldr	r0, [pc, #28]	; (80299ec <HAL_UART_MspDeInit+0xd8>)
 80299d0:	f001 f950 	bl	802ac74 <HAL_GPIO_DeInit>
}
 80299d4:	bf00      	nop
 80299d6:	3708      	adds	r7, #8
 80299d8:	46bd      	mov	sp, r7
 80299da:	bd80      	pop	{r7, pc}
 80299dc:	40004c00 	.word	0x40004c00
 80299e0:	58024400 	.word	0x58024400
 80299e4:	58020000 	.word	0x58020000
 80299e8:	40005000 	.word	0x40005000
 80299ec:	58020400 	.word	0x58020400
 80299f0:	40011000 	.word	0x40011000
 80299f4:	40004400 	.word	0x40004400
 80299f8:	40004800 	.word	0x40004800

080299fc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80299fc:	b580      	push	{r7, lr}
 80299fe:	b0b8      	sub	sp, #224	; 0xe0
 8029a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8029a02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029a06:	2200      	movs	r2, #0
 8029a08:	601a      	str	r2, [r3, #0]
 8029a0a:	605a      	str	r2, [r3, #4]
 8029a0c:	609a      	str	r2, [r3, #8]
 8029a0e:	60da      	str	r2, [r3, #12]
 8029a10:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8029a12:	4b51      	ldr	r3, [pc, #324]	; (8029b58 <HAL_FMC_MspInit+0x15c>)
 8029a14:	681b      	ldr	r3, [r3, #0]
 8029a16:	2b00      	cmp	r3, #0
 8029a18:	f040 8099 	bne.w	8029b4e <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8029a1c:	4b4e      	ldr	r3, [pc, #312]	; (8029b58 <HAL_FMC_MspInit+0x15c>)
 8029a1e:	2201      	movs	r2, #1
 8029a20:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029a22:	f107 0308 	add.w	r3, r7, #8
 8029a26:	22c0      	movs	r2, #192	; 0xc0
 8029a28:	2100      	movs	r1, #0
 8029a2a:	4618      	mov	r0, r3
 8029a2c:	f006 fdc2 	bl	80305b4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8029a30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8029a34:	f04f 0300 	mov.w	r3, #0
 8029a38:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8029a3c:	2300      	movs	r3, #0
 8029a3e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029a40:	f107 0308 	add.w	r3, r7, #8
 8029a44:	4618      	mov	r0, r3
 8029a46:	f002 fa9b 	bl	802bf80 <HAL_RCCEx_PeriphCLKConfig>
 8029a4a:	4603      	mov	r3, r0
 8029a4c:	2b00      	cmp	r3, #0
 8029a4e:	d001      	beq.n	8029a54 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8029a50:	f7fe f927 	bl	8027ca2 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8029a54:	4b41      	ldr	r3, [pc, #260]	; (8029b5c <HAL_FMC_MspInit+0x160>)
 8029a56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8029a5a:	4a40      	ldr	r2, [pc, #256]	; (8029b5c <HAL_FMC_MspInit+0x160>)
 8029a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8029a60:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8029a64:	4b3d      	ldr	r3, [pc, #244]	; (8029b5c <HAL_FMC_MspInit+0x160>)
 8029a66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8029a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029a6e:	607b      	str	r3, [r7, #4]
 8029a70:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8029a72:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8029a76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029a7a:	2302      	movs	r3, #2
 8029a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029a80:	2300      	movs	r3, #0
 8029a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029a86:	2303      	movs	r3, #3
 8029a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8029a8c:	230c      	movs	r3, #12
 8029a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8029a92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029a96:	4619      	mov	r1, r3
 8029a98:	4831      	ldr	r0, [pc, #196]	; (8029b60 <HAL_FMC_MspInit+0x164>)
 8029a9a:	f000 ff3b 	bl	802a914 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8029a9e:	2303      	movs	r3, #3
 8029aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029aa4:	2302      	movs	r3, #2
 8029aa6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029aaa:	2300      	movs	r3, #0
 8029aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029ab0:	2303      	movs	r3, #3
 8029ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8029ab6:	230c      	movs	r3, #12
 8029ab8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8029abc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029ac0:	4619      	mov	r1, r3
 8029ac2:	4828      	ldr	r0, [pc, #160]	; (8029b64 <HAL_FMC_MspInit+0x168>)
 8029ac4:	f000 ff26 	bl	802a914 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8029ac8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8029acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029ad0:	2302      	movs	r3, #2
 8029ad2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029ad6:	2300      	movs	r3, #0
 8029ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029adc:	2303      	movs	r3, #3
 8029ade:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8029ae2:	230c      	movs	r3, #12
 8029ae4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8029ae8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029aec:	4619      	mov	r1, r3
 8029aee:	481e      	ldr	r0, [pc, #120]	; (8029b68 <HAL_FMC_MspInit+0x16c>)
 8029af0:	f000 ff10 	bl	802a914 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8029af4:	f24c 0333 	movw	r3, #49203	; 0xc033
 8029af8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029afc:	2302      	movs	r3, #2
 8029afe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029b02:	2300      	movs	r3, #0
 8029b04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029b08:	2303      	movs	r3, #3
 8029b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8029b0e:	230c      	movs	r3, #12
 8029b10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8029b14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029b18:	4619      	mov	r1, r3
 8029b1a:	4814      	ldr	r0, [pc, #80]	; (8029b6c <HAL_FMC_MspInit+0x170>)
 8029b1c:	f000 fefa 	bl	802a914 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8029b20:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8029b24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029b28:	2302      	movs	r3, #2
 8029b2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029b2e:	2300      	movs	r3, #0
 8029b30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029b34:	2303      	movs	r3, #3
 8029b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8029b3a:	2309      	movs	r3, #9
 8029b3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8029b40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029b44:	4619      	mov	r1, r3
 8029b46:	480a      	ldr	r0, [pc, #40]	; (8029b70 <HAL_FMC_MspInit+0x174>)
 8029b48:	f000 fee4 	bl	802a914 <HAL_GPIO_Init>
 8029b4c:	e000      	b.n	8029b50 <HAL_FMC_MspInit+0x154>
    return;
 8029b4e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8029b50:	37e0      	adds	r7, #224	; 0xe0
 8029b52:	46bd      	mov	sp, r7
 8029b54:	bd80      	pop	{r7, pc}
 8029b56:	bf00      	nop
 8029b58:	24001f30 	.word	0x24001f30
 8029b5c:	58024400 	.word	0x58024400
 8029b60:	58021400 	.word	0x58021400
 8029b64:	58021800 	.word	0x58021800
 8029b68:	58021000 	.word	0x58021000
 8029b6c:	58020c00 	.word	0x58020c00
 8029b70:	58020800 	.word	0x58020800

08029b74 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8029b74:	b580      	push	{r7, lr}
 8029b76:	b082      	sub	sp, #8
 8029b78:	af00      	add	r7, sp, #0
 8029b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8029b7c:	f7ff ff3e 	bl	80299fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8029b80:	bf00      	nop
 8029b82:	3708      	adds	r7, #8
 8029b84:	46bd      	mov	sp, r7
 8029b86:	bd80      	pop	{r7, pc}

08029b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8029b88:	b480      	push	{r7}
 8029b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8029b8c:	e7fe      	b.n	8029b8c <NMI_Handler+0x4>

08029b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8029b8e:	b480      	push	{r7}
 8029b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8029b92:	e7fe      	b.n	8029b92 <HardFault_Handler+0x4>

08029b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8029b94:	b480      	push	{r7}
 8029b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8029b98:	e7fe      	b.n	8029b98 <MemManage_Handler+0x4>

08029b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8029b9a:	b480      	push	{r7}
 8029b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8029b9e:	e7fe      	b.n	8029b9e <BusFault_Handler+0x4>

08029ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8029ba0:	b480      	push	{r7}
 8029ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8029ba4:	e7fe      	b.n	8029ba4 <UsageFault_Handler+0x4>

08029ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8029ba6:	b480      	push	{r7}
 8029ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8029baa:	bf00      	nop
 8029bac:	46bd      	mov	sp, r7
 8029bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bb2:	4770      	bx	lr

08029bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8029bb4:	b480      	push	{r7}
 8029bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8029bb8:	bf00      	nop
 8029bba:	46bd      	mov	sp, r7
 8029bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bc0:	4770      	bx	lr

08029bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8029bc2:	b480      	push	{r7}
 8029bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8029bc6:	bf00      	nop
 8029bc8:	46bd      	mov	sp, r7
 8029bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bce:	4770      	bx	lr

08029bd0 <SysTick_Handler>:
  */

BYTE ch =  0;

void SysTick_Handler(void)
{
 8029bd0:	b580      	push	{r7, lr}
 8029bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8029bd4:	f000 fa7c 	bl	802a0d0 <HAL_IncTick>
  gdwTick = HAL_GetTick();
 8029bd8:	f000 fa8e 	bl	802a0f8 <HAL_GetTick>
 8029bdc:	4603      	mov	r3, r0
 8029bde:	4a15      	ldr	r2, [pc, #84]	; (8029c34 <SysTick_Handler+0x64>)
 8029be0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(bDip_SW_Flag == TRUE)			//The hal tick works immediately after SystemClock_Config is enabled.
 8029be2:	4b15      	ldr	r3, [pc, #84]	; (8029c38 <SysTick_Handler+0x68>)
 8029be4:	781b      	ldrb	r3, [r3, #0]
 8029be6:	2b00      	cmp	r3, #0
 8029be8:	d022      	beq.n	8029c30 <SysTick_Handler+0x60>
	{									// The dipswitch should work after the FMC initialization.		pms
		gbDipSW = dip_sw();				//(BYTE)GPIO_ByteRead(GPIO1, GPIO_LSB)^0xFF;
 8029bea:	f7fe f81d 	bl	8027c28 <dip_sw>
 8029bee:	4603      	mov	r3, r0
 8029bf0:	b2da      	uxtb	r2, r3
 8029bf2:	4b12      	ldr	r3, [pc, #72]	; (8029c3c <SysTick_Handler+0x6c>)
 8029bf4:	701a      	strb	r2, [r3, #0]


		if (gbDipSW & MASK_SELF_TEST)					//Self 테스트 모드		temp
 8029bf6:	4b11      	ldr	r3, [pc, #68]	; (8029c3c <SysTick_Handler+0x6c>)
 8029bf8:	781b      	ldrb	r3, [r3, #0]
 8029bfa:	f003 0376 	and.w	r3, r3, #118	; 0x76
 8029bfe:	2b00      	cmp	r3, #0
 8029c00:	d004      	beq.n	8029c0c <SysTick_Handler+0x3c>
		{
			TestAging();
 8029c02:	f7fb fbb9 	bl	8025378 <TestAging>
			bDip_SW_Init = TRUE;
 8029c06:	4b0e      	ldr	r3, [pc, #56]	; (8029c40 <SysTick_Handler+0x70>)
 8029c08:	2201      	movs	r2, #1
 8029c0a:	701a      	strb	r2, [r3, #0]
			Write_IO_init();
		}

		*/

		if (!(gbDipSW & MASK_JIG_TEST) && (gbDipSW == gbOldDipSW))
 8029c0c:	4b0b      	ldr	r3, [pc, #44]	; (8029c3c <SysTick_Handler+0x6c>)
 8029c0e:	781b      	ldrb	r3, [r3, #0]
 8029c10:	f003 0301 	and.w	r3, r3, #1
 8029c14:	2b00      	cmp	r3, #0
 8029c16:	d107      	bne.n	8029c28 <SysTick_Handler+0x58>
 8029c18:	4b08      	ldr	r3, [pc, #32]	; (8029c3c <SysTick_Handler+0x6c>)
 8029c1a:	781a      	ldrb	r2, [r3, #0]
 8029c1c:	4b09      	ldr	r3, [pc, #36]	; (8029c44 <SysTick_Handler+0x74>)
 8029c1e:	781b      	ldrb	r3, [r3, #0]
 8029c20:	429a      	cmp	r2, r3
 8029c22:	d101      	bne.n	8029c28 <SysTick_Handler+0x58>
		{
			PassageProcessForSwing();
 8029c24:	f7fb f8da 	bl	8024ddc <PassageProcessForSwing>
		}
		gbOldDipSW = gbDipSW;
 8029c28:	4b04      	ldr	r3, [pc, #16]	; (8029c3c <SysTick_Handler+0x6c>)
 8029c2a:	781a      	ldrb	r2, [r3, #0]
 8029c2c:	4b05      	ldr	r3, [pc, #20]	; (8029c44 <SysTick_Handler+0x74>)
 8029c2e:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8029c30:	bf00      	nop
 8029c32:	bd80      	pop	{r7, pc}
 8029c34:	24001f40 	.word	0x24001f40
 8029c38:	24001f2c 	.word	0x24001f2c
 8029c3c:	24001f35 	.word	0x24001f35
 8029c40:	24001f34 	.word	0x24001f34
 8029c44:	24001f36 	.word	0x24001f36

08029c48 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8029c48:	b580      	push	{r7, lr}
 8029c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8029c4c:	4802      	ldr	r0, [pc, #8]	; (8029c58 <SPI1_IRQHandler+0x10>)
 8029c4e:	f004 fb03 	bl	802e258 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8029c52:	bf00      	nop
 8029c54:	bd80      	pop	{r7, pc}
 8029c56:	bf00      	nop
 8029c58:	240019d4 	.word	0x240019d4

08029c5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8029c5c:	b580      	push	{r7, lr}
 8029c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8029c60:	4802      	ldr	r0, [pc, #8]	; (8029c6c <TIM7_IRQHandler+0x10>)
 8029c62:	f004 ff1d 	bl	802eaa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8029c66:	bf00      	nop
 8029c68:	bd80      	pop	{r7, pc}
 8029c6a:	bf00      	nop
 8029c6c:	24001a5c 	.word	0x24001a5c

08029c70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8029c70:	b580      	push	{r7, lr}
 8029c72:	b086      	sub	sp, #24
 8029c74:	af00      	add	r7, sp, #0
 8029c76:	60f8      	str	r0, [r7, #12]
 8029c78:	60b9      	str	r1, [r7, #8]
 8029c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029c7c:	2300      	movs	r3, #0
 8029c7e:	617b      	str	r3, [r7, #20]
 8029c80:	e00a      	b.n	8029c98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8029c82:	f7fc fdbf 	bl	8026804 <__io_getchar>
 8029c86:	4601      	mov	r1, r0
 8029c88:	68bb      	ldr	r3, [r7, #8]
 8029c8a:	1c5a      	adds	r2, r3, #1
 8029c8c:	60ba      	str	r2, [r7, #8]
 8029c8e:	b2ca      	uxtb	r2, r1
 8029c90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029c92:	697b      	ldr	r3, [r7, #20]
 8029c94:	3301      	adds	r3, #1
 8029c96:	617b      	str	r3, [r7, #20]
 8029c98:	697a      	ldr	r2, [r7, #20]
 8029c9a:	687b      	ldr	r3, [r7, #4]
 8029c9c:	429a      	cmp	r2, r3
 8029c9e:	dbf0      	blt.n	8029c82 <_read+0x12>
  }

  return len;
 8029ca0:	687b      	ldr	r3, [r7, #4]
}
 8029ca2:	4618      	mov	r0, r3
 8029ca4:	3718      	adds	r7, #24
 8029ca6:	46bd      	mov	sp, r7
 8029ca8:	bd80      	pop	{r7, pc}

08029caa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8029caa:	b580      	push	{r7, lr}
 8029cac:	b086      	sub	sp, #24
 8029cae:	af00      	add	r7, sp, #0
 8029cb0:	60f8      	str	r0, [r7, #12]
 8029cb2:	60b9      	str	r1, [r7, #8]
 8029cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029cb6:	2300      	movs	r3, #0
 8029cb8:	617b      	str	r3, [r7, #20]
 8029cba:	e009      	b.n	8029cd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8029cbc:	68bb      	ldr	r3, [r7, #8]
 8029cbe:	1c5a      	adds	r2, r3, #1
 8029cc0:	60ba      	str	r2, [r7, #8]
 8029cc2:	781b      	ldrb	r3, [r3, #0]
 8029cc4:	4618      	mov	r0, r3
 8029cc6:	f7fc fd89 	bl	80267dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029cca:	697b      	ldr	r3, [r7, #20]
 8029ccc:	3301      	adds	r3, #1
 8029cce:	617b      	str	r3, [r7, #20]
 8029cd0:	697a      	ldr	r2, [r7, #20]
 8029cd2:	687b      	ldr	r3, [r7, #4]
 8029cd4:	429a      	cmp	r2, r3
 8029cd6:	dbf1      	blt.n	8029cbc <_write+0x12>
  }
  return len;
 8029cd8:	687b      	ldr	r3, [r7, #4]
}
 8029cda:	4618      	mov	r0, r3
 8029cdc:	3718      	adds	r7, #24
 8029cde:	46bd      	mov	sp, r7
 8029ce0:	bd80      	pop	{r7, pc}

08029ce2 <_close>:

int _close(int file)
{
 8029ce2:	b480      	push	{r7}
 8029ce4:	b083      	sub	sp, #12
 8029ce6:	af00      	add	r7, sp, #0
 8029ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8029cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8029cee:	4618      	mov	r0, r3
 8029cf0:	370c      	adds	r7, #12
 8029cf2:	46bd      	mov	sp, r7
 8029cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cf8:	4770      	bx	lr

08029cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8029cfa:	b480      	push	{r7}
 8029cfc:	b083      	sub	sp, #12
 8029cfe:	af00      	add	r7, sp, #0
 8029d00:	6078      	str	r0, [r7, #4]
 8029d02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8029d04:	683b      	ldr	r3, [r7, #0]
 8029d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8029d0a:	605a      	str	r2, [r3, #4]
  return 0;
 8029d0c:	2300      	movs	r3, #0
}
 8029d0e:	4618      	mov	r0, r3
 8029d10:	370c      	adds	r7, #12
 8029d12:	46bd      	mov	sp, r7
 8029d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d18:	4770      	bx	lr

08029d1a <_isatty>:

int _isatty(int file)
{
 8029d1a:	b480      	push	{r7}
 8029d1c:	b083      	sub	sp, #12
 8029d1e:	af00      	add	r7, sp, #0
 8029d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8029d22:	2301      	movs	r3, #1
}
 8029d24:	4618      	mov	r0, r3
 8029d26:	370c      	adds	r7, #12
 8029d28:	46bd      	mov	sp, r7
 8029d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d2e:	4770      	bx	lr

08029d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8029d30:	b480      	push	{r7}
 8029d32:	b085      	sub	sp, #20
 8029d34:	af00      	add	r7, sp, #0
 8029d36:	60f8      	str	r0, [r7, #12]
 8029d38:	60b9      	str	r1, [r7, #8]
 8029d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8029d3c:	2300      	movs	r3, #0
}
 8029d3e:	4618      	mov	r0, r3
 8029d40:	3714      	adds	r7, #20
 8029d42:	46bd      	mov	sp, r7
 8029d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d48:	4770      	bx	lr
	...

08029d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8029d4c:	b580      	push	{r7, lr}
 8029d4e:	b086      	sub	sp, #24
 8029d50:	af00      	add	r7, sp, #0
 8029d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8029d54:	4a14      	ldr	r2, [pc, #80]	; (8029da8 <_sbrk+0x5c>)
 8029d56:	4b15      	ldr	r3, [pc, #84]	; (8029dac <_sbrk+0x60>)
 8029d58:	1ad3      	subs	r3, r2, r3
 8029d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8029d5c:	697b      	ldr	r3, [r7, #20]
 8029d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8029d60:	4b13      	ldr	r3, [pc, #76]	; (8029db0 <_sbrk+0x64>)
 8029d62:	681b      	ldr	r3, [r3, #0]
 8029d64:	2b00      	cmp	r3, #0
 8029d66:	d102      	bne.n	8029d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8029d68:	4b11      	ldr	r3, [pc, #68]	; (8029db0 <_sbrk+0x64>)
 8029d6a:	4a12      	ldr	r2, [pc, #72]	; (8029db4 <_sbrk+0x68>)
 8029d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8029d6e:	4b10      	ldr	r3, [pc, #64]	; (8029db0 <_sbrk+0x64>)
 8029d70:	681a      	ldr	r2, [r3, #0]
 8029d72:	687b      	ldr	r3, [r7, #4]
 8029d74:	4413      	add	r3, r2
 8029d76:	693a      	ldr	r2, [r7, #16]
 8029d78:	429a      	cmp	r2, r3
 8029d7a:	d207      	bcs.n	8029d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8029d7c:	f006 fbd2 	bl	8030524 <__errno>
 8029d80:	4603      	mov	r3, r0
 8029d82:	220c      	movs	r2, #12
 8029d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8029d86:	f04f 33ff 	mov.w	r3, #4294967295
 8029d8a:	e009      	b.n	8029da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8029d8c:	4b08      	ldr	r3, [pc, #32]	; (8029db0 <_sbrk+0x64>)
 8029d8e:	681b      	ldr	r3, [r3, #0]
 8029d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8029d92:	4b07      	ldr	r3, [pc, #28]	; (8029db0 <_sbrk+0x64>)
 8029d94:	681a      	ldr	r2, [r3, #0]
 8029d96:	687b      	ldr	r3, [r7, #4]
 8029d98:	4413      	add	r3, r2
 8029d9a:	4a05      	ldr	r2, [pc, #20]	; (8029db0 <_sbrk+0x64>)
 8029d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8029d9e:	68fb      	ldr	r3, [r7, #12]
}
 8029da0:	4618      	mov	r0, r3
 8029da2:	3718      	adds	r7, #24
 8029da4:	46bd      	mov	sp, r7
 8029da6:	bd80      	pop	{r7, pc}
 8029da8:	24080000 	.word	0x24080000
 8029dac:	00000800 	.word	0x00000800
 8029db0:	24001f38 	.word	0x24001f38
 8029db4:	24001f58 	.word	0x24001f58

08029db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8029db8:	b480      	push	{r7}
 8029dba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8029dbc:	4b39      	ldr	r3, [pc, #228]	; (8029ea4 <SystemInit+0xec>)
 8029dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8029dc2:	4a38      	ldr	r2, [pc, #224]	; (8029ea4 <SystemInit+0xec>)
 8029dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8029dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8029dcc:	4b36      	ldr	r3, [pc, #216]	; (8029ea8 <SystemInit+0xf0>)
 8029dce:	681b      	ldr	r3, [r3, #0]
 8029dd0:	f003 030f 	and.w	r3, r3, #15
 8029dd4:	2b06      	cmp	r3, #6
 8029dd6:	d807      	bhi.n	8029de8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8029dd8:	4b33      	ldr	r3, [pc, #204]	; (8029ea8 <SystemInit+0xf0>)
 8029dda:	681b      	ldr	r3, [r3, #0]
 8029ddc:	f023 030f 	bic.w	r3, r3, #15
 8029de0:	4a31      	ldr	r2, [pc, #196]	; (8029ea8 <SystemInit+0xf0>)
 8029de2:	f043 0307 	orr.w	r3, r3, #7
 8029de6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8029de8:	4b30      	ldr	r3, [pc, #192]	; (8029eac <SystemInit+0xf4>)
 8029dea:	681b      	ldr	r3, [r3, #0]
 8029dec:	4a2f      	ldr	r2, [pc, #188]	; (8029eac <SystemInit+0xf4>)
 8029dee:	f043 0301 	orr.w	r3, r3, #1
 8029df2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8029df4:	4b2d      	ldr	r3, [pc, #180]	; (8029eac <SystemInit+0xf4>)
 8029df6:	2200      	movs	r2, #0
 8029df8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8029dfa:	4b2c      	ldr	r3, [pc, #176]	; (8029eac <SystemInit+0xf4>)
 8029dfc:	681a      	ldr	r2, [r3, #0]
 8029dfe:	492b      	ldr	r1, [pc, #172]	; (8029eac <SystemInit+0xf4>)
 8029e00:	4b2b      	ldr	r3, [pc, #172]	; (8029eb0 <SystemInit+0xf8>)
 8029e02:	4013      	ands	r3, r2
 8029e04:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8029e06:	4b28      	ldr	r3, [pc, #160]	; (8029ea8 <SystemInit+0xf0>)
 8029e08:	681b      	ldr	r3, [r3, #0]
 8029e0a:	f003 0308 	and.w	r3, r3, #8
 8029e0e:	2b00      	cmp	r3, #0
 8029e10:	d007      	beq.n	8029e22 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8029e12:	4b25      	ldr	r3, [pc, #148]	; (8029ea8 <SystemInit+0xf0>)
 8029e14:	681b      	ldr	r3, [r3, #0]
 8029e16:	f023 030f 	bic.w	r3, r3, #15
 8029e1a:	4a23      	ldr	r2, [pc, #140]	; (8029ea8 <SystemInit+0xf0>)
 8029e1c:	f043 0307 	orr.w	r3, r3, #7
 8029e20:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8029e22:	4b22      	ldr	r3, [pc, #136]	; (8029eac <SystemInit+0xf4>)
 8029e24:	2200      	movs	r2, #0
 8029e26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8029e28:	4b20      	ldr	r3, [pc, #128]	; (8029eac <SystemInit+0xf4>)
 8029e2a:	2200      	movs	r2, #0
 8029e2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8029e2e:	4b1f      	ldr	r3, [pc, #124]	; (8029eac <SystemInit+0xf4>)
 8029e30:	2200      	movs	r2, #0
 8029e32:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8029e34:	4b1d      	ldr	r3, [pc, #116]	; (8029eac <SystemInit+0xf4>)
 8029e36:	4a1f      	ldr	r2, [pc, #124]	; (8029eb4 <SystemInit+0xfc>)
 8029e38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8029e3a:	4b1c      	ldr	r3, [pc, #112]	; (8029eac <SystemInit+0xf4>)
 8029e3c:	4a1e      	ldr	r2, [pc, #120]	; (8029eb8 <SystemInit+0x100>)
 8029e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8029e40:	4b1a      	ldr	r3, [pc, #104]	; (8029eac <SystemInit+0xf4>)
 8029e42:	4a1e      	ldr	r2, [pc, #120]	; (8029ebc <SystemInit+0x104>)
 8029e44:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8029e46:	4b19      	ldr	r3, [pc, #100]	; (8029eac <SystemInit+0xf4>)
 8029e48:	2200      	movs	r2, #0
 8029e4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8029e4c:	4b17      	ldr	r3, [pc, #92]	; (8029eac <SystemInit+0xf4>)
 8029e4e:	4a1b      	ldr	r2, [pc, #108]	; (8029ebc <SystemInit+0x104>)
 8029e50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8029e52:	4b16      	ldr	r3, [pc, #88]	; (8029eac <SystemInit+0xf4>)
 8029e54:	2200      	movs	r2, #0
 8029e56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8029e58:	4b14      	ldr	r3, [pc, #80]	; (8029eac <SystemInit+0xf4>)
 8029e5a:	4a18      	ldr	r2, [pc, #96]	; (8029ebc <SystemInit+0x104>)
 8029e5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8029e5e:	4b13      	ldr	r3, [pc, #76]	; (8029eac <SystemInit+0xf4>)
 8029e60:	2200      	movs	r2, #0
 8029e62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8029e64:	4b11      	ldr	r3, [pc, #68]	; (8029eac <SystemInit+0xf4>)
 8029e66:	681b      	ldr	r3, [r3, #0]
 8029e68:	4a10      	ldr	r2, [pc, #64]	; (8029eac <SystemInit+0xf4>)
 8029e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8029e6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8029e70:	4b0e      	ldr	r3, [pc, #56]	; (8029eac <SystemInit+0xf4>)
 8029e72:	2200      	movs	r2, #0
 8029e74:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8029e76:	4b12      	ldr	r3, [pc, #72]	; (8029ec0 <SystemInit+0x108>)
 8029e78:	681a      	ldr	r2, [r3, #0]
 8029e7a:	4b12      	ldr	r3, [pc, #72]	; (8029ec4 <SystemInit+0x10c>)
 8029e7c:	4013      	ands	r3, r2
 8029e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8029e82:	d202      	bcs.n	8029e8a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8029e84:	4b10      	ldr	r3, [pc, #64]	; (8029ec8 <SystemInit+0x110>)
 8029e86:	2201      	movs	r2, #1
 8029e88:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8029e8a:	4b10      	ldr	r3, [pc, #64]	; (8029ecc <SystemInit+0x114>)
 8029e8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8029e90:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8029e92:	4b04      	ldr	r3, [pc, #16]	; (8029ea4 <SystemInit+0xec>)
 8029e94:	4a0e      	ldr	r2, [pc, #56]	; (8029ed0 <SystemInit+0x118>)
 8029e96:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8029e98:	bf00      	nop
 8029e9a:	46bd      	mov	sp, r7
 8029e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ea0:	4770      	bx	lr
 8029ea2:	bf00      	nop
 8029ea4:	e000ed00 	.word	0xe000ed00
 8029ea8:	52002000 	.word	0x52002000
 8029eac:	58024400 	.word	0x58024400
 8029eb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8029eb4:	02020200 	.word	0x02020200
 8029eb8:	01ff0000 	.word	0x01ff0000
 8029ebc:	01010280 	.word	0x01010280
 8029ec0:	5c001000 	.word	0x5c001000
 8029ec4:	ffff0000 	.word	0xffff0000
 8029ec8:	51008108 	.word	0x51008108
 8029ecc:	52004000 	.word	0x52004000
 8029ed0:	08020000 	.word	0x08020000

08029ed4 <msleep>:
		;
}

// ticktime(1ms unit) delay
void msleep(int t)
{
 8029ed4:	b580      	push	{r7, lr}
 8029ed6:	b084      	sub	sp, #16
 8029ed8:	af00      	add	r7, sp, #0
 8029eda:	6078      	str	r0, [r7, #4]
	clock_t ms;

	mstimeout(&ms,0);
 8029edc:	f107 030c 	add.w	r3, r7, #12
 8029ee0:	2100      	movs	r1, #0
 8029ee2:	4618      	mov	r0, r3
 8029ee4:	f000 f826 	bl	8029f34 <mstimeout>
	while (!mstimeout(&ms, t))
 8029ee8:	bf00      	nop
 8029eea:	f107 030c 	add.w	r3, r7, #12
 8029eee:	6879      	ldr	r1, [r7, #4]
 8029ef0:	4618      	mov	r0, r3
 8029ef2:	f000 f81f 	bl	8029f34 <mstimeout>
 8029ef6:	4603      	mov	r3, r0
 8029ef8:	2b00      	cmp	r3, #0
 8029efa:	d0f6      	beq.n	8029eea <msleep+0x16>
		;
}
 8029efc:	bf00      	nop
 8029efe:	bf00      	nop
 8029f00:	3710      	adds	r7, #16
 8029f02:	46bd      	mov	sp, r7
 8029f04:	bd80      	pop	{r7, pc}

08029f06 <mstime>:
	return diff;
}


clock_t mstime(clock_t *tp)
{
 8029f06:	b5b0      	push	{r4, r5, r7, lr}
 8029f08:	b084      	sub	sp, #16
 8029f0a:	af00      	add	r7, sp, #0
 8029f0c:	6078      	str	r0, [r7, #4]
	time_t cur = bsp_GetTickCount();
 8029f0e:	f7fc fb27 	bl	8026560 <bsp_GetTickCount>
 8029f12:	4603      	mov	r3, r0
 8029f14:	2200      	movs	r2, #0
 8029f16:	461c      	mov	r4, r3
 8029f18:	4615      	mov	r5, r2
 8029f1a:	e9c7 4502 	strd	r4, r5, [r7, #8]

	if(tp != NULL)
 8029f1e:	687b      	ldr	r3, [r7, #4]
 8029f20:	2b00      	cmp	r3, #0
 8029f22:	d002      	beq.n	8029f2a <mstime+0x24>
		*tp = cur;
 8029f24:	68ba      	ldr	r2, [r7, #8]
 8029f26:	687b      	ldr	r3, [r7, #4]
 8029f28:	601a      	str	r2, [r3, #0]

	return cur;
 8029f2a:	68bb      	ldr	r3, [r7, #8]
}
 8029f2c:	4618      	mov	r0, r3
 8029f2e:	3710      	adds	r7, #16
 8029f30:	46bd      	mov	sp, r7
 8029f32:	bdb0      	pop	{r4, r5, r7, pc}

08029f34 <mstimeout>:
	return(tout);
}


int mstimeout(clock_t *cp, int msec)
{
 8029f34:	b580      	push	{r7, lr}
 8029f36:	b084      	sub	sp, #16
 8029f38:	af00      	add	r7, sp, #0
 8029f3a:	6078      	str	r0, [r7, #4]
 8029f3c:	6039      	str	r1, [r7, #0]
	clock_t tim;
	DWORD   diff;

	tim = mstime(0);
 8029f3e:	2000      	movs	r0, #0
 8029f40:	f7ff ffe1 	bl	8029f06 <mstime>
 8029f44:	60b8      	str	r0, [r7, #8]
	if(msec == 0)
 8029f46:	683b      	ldr	r3, [r7, #0]
 8029f48:	2b00      	cmp	r3, #0
 8029f4a:	d104      	bne.n	8029f56 <mstimeout+0x22>
	{
		*cp = tim;
 8029f4c:	687b      	ldr	r3, [r7, #4]
 8029f4e:	68ba      	ldr	r2, [r7, #8]
 8029f50:	601a      	str	r2, [r3, #0]
		return(1);
 8029f52:	2301      	movs	r3, #1
 8029f54:	e01c      	b.n	8029f90 <mstimeout+0x5c>
	}

	if(tim >= *cp)
 8029f56:	687b      	ldr	r3, [r7, #4]
 8029f58:	681b      	ldr	r3, [r3, #0]
 8029f5a:	68ba      	ldr	r2, [r7, #8]
 8029f5c:	429a      	cmp	r2, r3
 8029f5e:	d305      	bcc.n	8029f6c <mstimeout+0x38>
		diff = tim - *cp;
 8029f60:	687b      	ldr	r3, [r7, #4]
 8029f62:	681b      	ldr	r3, [r3, #0]
 8029f64:	68ba      	ldr	r2, [r7, #8]
 8029f66:	1ad3      	subs	r3, r2, r3
 8029f68:	60fb      	str	r3, [r7, #12]
 8029f6a:	e007      	b.n	8029f7c <mstimeout+0x48>
	else
	{
		diff = (0xffffffffUL - *cp) + 1;
 8029f6c:	687b      	ldr	r3, [r7, #4]
 8029f6e:	681b      	ldr	r3, [r3, #0]
 8029f70:	425b      	negs	r3, r3
 8029f72:	60fb      	str	r3, [r7, #12]
		diff += tim;
 8029f74:	68fa      	ldr	r2, [r7, #12]
 8029f76:	68bb      	ldr	r3, [r7, #8]
 8029f78:	4413      	add	r3, r2
 8029f7a:	60fb      	str	r3, [r7, #12]
	}

	if(diff >= msec)
 8029f7c:	683b      	ldr	r3, [r7, #0]
 8029f7e:	68fa      	ldr	r2, [r7, #12]
 8029f80:	429a      	cmp	r2, r3
 8029f82:	d304      	bcc.n	8029f8e <mstimeout+0x5a>
	{
		*cp  = tim;
 8029f84:	687b      	ldr	r3, [r7, #4]
 8029f86:	68ba      	ldr	r2, [r7, #8]
 8029f88:	601a      	str	r2, [r3, #0]
		return(1);
 8029f8a:	2301      	movs	r3, #1
 8029f8c:	e000      	b.n	8029f90 <mstimeout+0x5c>
	}

	return (0);
 8029f8e:	2300      	movs	r3, #0
}
 8029f90:	4618      	mov	r0, r3
 8029f92:	3710      	adds	r7, #16
 8029f94:	46bd      	mov	sp, r7
 8029f96:	bd80      	pop	{r7, pc}

08029f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8029f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8029fd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8029f9c:	f7ff ff0c 	bl	8029db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8029fa0:	480c      	ldr	r0, [pc, #48]	; (8029fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8029fa2:	490d      	ldr	r1, [pc, #52]	; (8029fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8029fa4:	4a0d      	ldr	r2, [pc, #52]	; (8029fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8029fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8029fa8:	e002      	b.n	8029fb0 <LoopCopyDataInit>

08029faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8029faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8029fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8029fae:	3304      	adds	r3, #4

08029fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8029fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8029fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8029fb4:	d3f9      	bcc.n	8029faa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8029fb6:	4a0a      	ldr	r2, [pc, #40]	; (8029fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8029fb8:	4c0a      	ldr	r4, [pc, #40]	; (8029fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8029fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8029fbc:	e001      	b.n	8029fc2 <LoopFillZerobss>

08029fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8029fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8029fc0:	3204      	adds	r2, #4

08029fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8029fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8029fc4:	d3fb      	bcc.n	8029fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8029fc6:	f006 fab3 	bl	8030530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8029fca:	f7fd fdad 	bl	8027b28 <main>
  bx  lr
 8029fce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8029fd0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8029fd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8029fd8:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 8029fdc:	08032f84 	.word	0x08032f84
  ldr r2, =_sbss
 8029fe0:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 8029fe4:	24001f54 	.word	0x24001f54

08029fe8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8029fe8:	e7fe      	b.n	8029fe8 <ADC3_IRQHandler>
	...

08029fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8029fec:	b580      	push	{r7, lr}
 8029fee:	b082      	sub	sp, #8
 8029ff0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8029ff2:	2003      	movs	r0, #3
 8029ff4:	f000 f98c 	bl	802a310 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8029ff8:	f001 fdec 	bl	802bbd4 <HAL_RCC_GetSysClockFreq>
 8029ffc:	4602      	mov	r2, r0
 8029ffe:	4b15      	ldr	r3, [pc, #84]	; (802a054 <HAL_Init+0x68>)
 802a000:	699b      	ldr	r3, [r3, #24]
 802a002:	0a1b      	lsrs	r3, r3, #8
 802a004:	f003 030f 	and.w	r3, r3, #15
 802a008:	4913      	ldr	r1, [pc, #76]	; (802a058 <HAL_Init+0x6c>)
 802a00a:	5ccb      	ldrb	r3, [r1, r3]
 802a00c:	f003 031f 	and.w	r3, r3, #31
 802a010:	fa22 f303 	lsr.w	r3, r2, r3
 802a014:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802a016:	4b0f      	ldr	r3, [pc, #60]	; (802a054 <HAL_Init+0x68>)
 802a018:	699b      	ldr	r3, [r3, #24]
 802a01a:	f003 030f 	and.w	r3, r3, #15
 802a01e:	4a0e      	ldr	r2, [pc, #56]	; (802a058 <HAL_Init+0x6c>)
 802a020:	5cd3      	ldrb	r3, [r2, r3]
 802a022:	f003 031f 	and.w	r3, r3, #31
 802a026:	687a      	ldr	r2, [r7, #4]
 802a028:	fa22 f303 	lsr.w	r3, r2, r3
 802a02c:	4a0b      	ldr	r2, [pc, #44]	; (802a05c <HAL_Init+0x70>)
 802a02e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802a030:	4a0b      	ldr	r2, [pc, #44]	; (802a060 <HAL_Init+0x74>)
 802a032:	687b      	ldr	r3, [r7, #4]
 802a034:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802a036:	200f      	movs	r0, #15
 802a038:	f000 f814 	bl	802a064 <HAL_InitTick>
 802a03c:	4603      	mov	r3, r0
 802a03e:	2b00      	cmp	r3, #0
 802a040:	d001      	beq.n	802a046 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802a042:	2301      	movs	r3, #1
 802a044:	e002      	b.n	802a04c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802a046:	f7ff f9ed 	bl	8029424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802a04a:	2300      	movs	r3, #0
}
 802a04c:	4618      	mov	r0, r3
 802a04e:	3708      	adds	r7, #8
 802a050:	46bd      	mov	sp, r7
 802a052:	bd80      	pop	{r7, pc}
 802a054:	58024400 	.word	0x58024400
 802a058:	08032da0 	.word	0x08032da0
 802a05c:	24000044 	.word	0x24000044
 802a060:	24000040 	.word	0x24000040

0802a064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802a064:	b580      	push	{r7, lr}
 802a066:	b082      	sub	sp, #8
 802a068:	af00      	add	r7, sp, #0
 802a06a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802a06c:	4b15      	ldr	r3, [pc, #84]	; (802a0c4 <HAL_InitTick+0x60>)
 802a06e:	781b      	ldrb	r3, [r3, #0]
 802a070:	2b00      	cmp	r3, #0
 802a072:	d101      	bne.n	802a078 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802a074:	2301      	movs	r3, #1
 802a076:	e021      	b.n	802a0bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802a078:	4b13      	ldr	r3, [pc, #76]	; (802a0c8 <HAL_InitTick+0x64>)
 802a07a:	681a      	ldr	r2, [r3, #0]
 802a07c:	4b11      	ldr	r3, [pc, #68]	; (802a0c4 <HAL_InitTick+0x60>)
 802a07e:	781b      	ldrb	r3, [r3, #0]
 802a080:	4619      	mov	r1, r3
 802a082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a086:	fbb3 f3f1 	udiv	r3, r3, r1
 802a08a:	fbb2 f3f3 	udiv	r3, r2, r3
 802a08e:	4618      	mov	r0, r3
 802a090:	f000 f971 	bl	802a376 <HAL_SYSTICK_Config>
 802a094:	4603      	mov	r3, r0
 802a096:	2b00      	cmp	r3, #0
 802a098:	d001      	beq.n	802a09e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802a09a:	2301      	movs	r3, #1
 802a09c:	e00e      	b.n	802a0bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802a09e:	687b      	ldr	r3, [r7, #4]
 802a0a0:	2b0f      	cmp	r3, #15
 802a0a2:	d80a      	bhi.n	802a0ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802a0a4:	2200      	movs	r2, #0
 802a0a6:	6879      	ldr	r1, [r7, #4]
 802a0a8:	f04f 30ff 	mov.w	r0, #4294967295
 802a0ac:	f000 f93b 	bl	802a326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802a0b0:	4a06      	ldr	r2, [pc, #24]	; (802a0cc <HAL_InitTick+0x68>)
 802a0b2:	687b      	ldr	r3, [r7, #4]
 802a0b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802a0b6:	2300      	movs	r3, #0
 802a0b8:	e000      	b.n	802a0bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 802a0ba:	2301      	movs	r3, #1
}
 802a0bc:	4618      	mov	r0, r3
 802a0be:	3708      	adds	r7, #8
 802a0c0:	46bd      	mov	sp, r7
 802a0c2:	bd80      	pop	{r7, pc}
 802a0c4:	2400004c 	.word	0x2400004c
 802a0c8:	24000040 	.word	0x24000040
 802a0cc:	24000048 	.word	0x24000048

0802a0d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802a0d0:	b480      	push	{r7}
 802a0d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802a0d4:	4b06      	ldr	r3, [pc, #24]	; (802a0f0 <HAL_IncTick+0x20>)
 802a0d6:	781b      	ldrb	r3, [r3, #0]
 802a0d8:	461a      	mov	r2, r3
 802a0da:	4b06      	ldr	r3, [pc, #24]	; (802a0f4 <HAL_IncTick+0x24>)
 802a0dc:	681b      	ldr	r3, [r3, #0]
 802a0de:	4413      	add	r3, r2
 802a0e0:	4a04      	ldr	r2, [pc, #16]	; (802a0f4 <HAL_IncTick+0x24>)
 802a0e2:	6013      	str	r3, [r2, #0]
}
 802a0e4:	bf00      	nop
 802a0e6:	46bd      	mov	sp, r7
 802a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0ec:	4770      	bx	lr
 802a0ee:	bf00      	nop
 802a0f0:	2400004c 	.word	0x2400004c
 802a0f4:	24001f3c 	.word	0x24001f3c

0802a0f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802a0f8:	b480      	push	{r7}
 802a0fa:	af00      	add	r7, sp, #0
  return uwTick;
 802a0fc:	4b03      	ldr	r3, [pc, #12]	; (802a10c <HAL_GetTick+0x14>)
 802a0fe:	681b      	ldr	r3, [r3, #0]
}
 802a100:	4618      	mov	r0, r3
 802a102:	46bd      	mov	sp, r7
 802a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a108:	4770      	bx	lr
 802a10a:	bf00      	nop
 802a10c:	24001f3c 	.word	0x24001f3c

0802a110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802a110:	b580      	push	{r7, lr}
 802a112:	b084      	sub	sp, #16
 802a114:	af00      	add	r7, sp, #0
 802a116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802a118:	f7ff ffee 	bl	802a0f8 <HAL_GetTick>
 802a11c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802a11e:	687b      	ldr	r3, [r7, #4]
 802a120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802a122:	68fb      	ldr	r3, [r7, #12]
 802a124:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a128:	d005      	beq.n	802a136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802a12a:	4b0a      	ldr	r3, [pc, #40]	; (802a154 <HAL_Delay+0x44>)
 802a12c:	781b      	ldrb	r3, [r3, #0]
 802a12e:	461a      	mov	r2, r3
 802a130:	68fb      	ldr	r3, [r7, #12]
 802a132:	4413      	add	r3, r2
 802a134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802a136:	bf00      	nop
 802a138:	f7ff ffde 	bl	802a0f8 <HAL_GetTick>
 802a13c:	4602      	mov	r2, r0
 802a13e:	68bb      	ldr	r3, [r7, #8]
 802a140:	1ad3      	subs	r3, r2, r3
 802a142:	68fa      	ldr	r2, [r7, #12]
 802a144:	429a      	cmp	r2, r3
 802a146:	d8f7      	bhi.n	802a138 <HAL_Delay+0x28>
  {
  }
}
 802a148:	bf00      	nop
 802a14a:	bf00      	nop
 802a14c:	3710      	adds	r7, #16
 802a14e:	46bd      	mov	sp, r7
 802a150:	bd80      	pop	{r7, pc}
 802a152:	bf00      	nop
 802a154:	2400004c 	.word	0x2400004c

0802a158 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802a158:	b480      	push	{r7}
 802a15a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802a15c:	4b03      	ldr	r3, [pc, #12]	; (802a16c <HAL_GetREVID+0x14>)
 802a15e:	681b      	ldr	r3, [r3, #0]
 802a160:	0c1b      	lsrs	r3, r3, #16
}
 802a162:	4618      	mov	r0, r3
 802a164:	46bd      	mov	sp, r7
 802a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a16a:	4770      	bx	lr
 802a16c:	5c001000 	.word	0x5c001000

0802a170 <__NVIC_SetPriorityGrouping>:
{
 802a170:	b480      	push	{r7}
 802a172:	b085      	sub	sp, #20
 802a174:	af00      	add	r7, sp, #0
 802a176:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802a178:	687b      	ldr	r3, [r7, #4]
 802a17a:	f003 0307 	and.w	r3, r3, #7
 802a17e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802a180:	4b0b      	ldr	r3, [pc, #44]	; (802a1b0 <__NVIC_SetPriorityGrouping+0x40>)
 802a182:	68db      	ldr	r3, [r3, #12]
 802a184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802a186:	68ba      	ldr	r2, [r7, #8]
 802a188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802a18c:	4013      	ands	r3, r2
 802a18e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802a190:	68fb      	ldr	r3, [r7, #12]
 802a192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802a194:	68bb      	ldr	r3, [r7, #8]
 802a196:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802a198:	4b06      	ldr	r3, [pc, #24]	; (802a1b4 <__NVIC_SetPriorityGrouping+0x44>)
 802a19a:	4313      	orrs	r3, r2
 802a19c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802a19e:	4a04      	ldr	r2, [pc, #16]	; (802a1b0 <__NVIC_SetPriorityGrouping+0x40>)
 802a1a0:	68bb      	ldr	r3, [r7, #8]
 802a1a2:	60d3      	str	r3, [r2, #12]
}
 802a1a4:	bf00      	nop
 802a1a6:	3714      	adds	r7, #20
 802a1a8:	46bd      	mov	sp, r7
 802a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1ae:	4770      	bx	lr
 802a1b0:	e000ed00 	.word	0xe000ed00
 802a1b4:	05fa0000 	.word	0x05fa0000

0802a1b8 <__NVIC_GetPriorityGrouping>:
{
 802a1b8:	b480      	push	{r7}
 802a1ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802a1bc:	4b04      	ldr	r3, [pc, #16]	; (802a1d0 <__NVIC_GetPriorityGrouping+0x18>)
 802a1be:	68db      	ldr	r3, [r3, #12]
 802a1c0:	0a1b      	lsrs	r3, r3, #8
 802a1c2:	f003 0307 	and.w	r3, r3, #7
}
 802a1c6:	4618      	mov	r0, r3
 802a1c8:	46bd      	mov	sp, r7
 802a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1ce:	4770      	bx	lr
 802a1d0:	e000ed00 	.word	0xe000ed00

0802a1d4 <__NVIC_EnableIRQ>:
{
 802a1d4:	b480      	push	{r7}
 802a1d6:	b083      	sub	sp, #12
 802a1d8:	af00      	add	r7, sp, #0
 802a1da:	4603      	mov	r3, r0
 802a1dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802a1de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802a1e2:	2b00      	cmp	r3, #0
 802a1e4:	db0b      	blt.n	802a1fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802a1e6:	88fb      	ldrh	r3, [r7, #6]
 802a1e8:	f003 021f 	and.w	r2, r3, #31
 802a1ec:	4907      	ldr	r1, [pc, #28]	; (802a20c <__NVIC_EnableIRQ+0x38>)
 802a1ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802a1f2:	095b      	lsrs	r3, r3, #5
 802a1f4:	2001      	movs	r0, #1
 802a1f6:	fa00 f202 	lsl.w	r2, r0, r2
 802a1fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802a1fe:	bf00      	nop
 802a200:	370c      	adds	r7, #12
 802a202:	46bd      	mov	sp, r7
 802a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a208:	4770      	bx	lr
 802a20a:	bf00      	nop
 802a20c:	e000e100 	.word	0xe000e100

0802a210 <__NVIC_SetPriority>:
{
 802a210:	b480      	push	{r7}
 802a212:	b083      	sub	sp, #12
 802a214:	af00      	add	r7, sp, #0
 802a216:	4603      	mov	r3, r0
 802a218:	6039      	str	r1, [r7, #0]
 802a21a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802a21c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802a220:	2b00      	cmp	r3, #0
 802a222:	db0a      	blt.n	802a23a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802a224:	683b      	ldr	r3, [r7, #0]
 802a226:	b2da      	uxtb	r2, r3
 802a228:	490c      	ldr	r1, [pc, #48]	; (802a25c <__NVIC_SetPriority+0x4c>)
 802a22a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802a22e:	0112      	lsls	r2, r2, #4
 802a230:	b2d2      	uxtb	r2, r2
 802a232:	440b      	add	r3, r1
 802a234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 802a238:	e00a      	b.n	802a250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802a23a:	683b      	ldr	r3, [r7, #0]
 802a23c:	b2da      	uxtb	r2, r3
 802a23e:	4908      	ldr	r1, [pc, #32]	; (802a260 <__NVIC_SetPriority+0x50>)
 802a240:	88fb      	ldrh	r3, [r7, #6]
 802a242:	f003 030f 	and.w	r3, r3, #15
 802a246:	3b04      	subs	r3, #4
 802a248:	0112      	lsls	r2, r2, #4
 802a24a:	b2d2      	uxtb	r2, r2
 802a24c:	440b      	add	r3, r1
 802a24e:	761a      	strb	r2, [r3, #24]
}
 802a250:	bf00      	nop
 802a252:	370c      	adds	r7, #12
 802a254:	46bd      	mov	sp, r7
 802a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a25a:	4770      	bx	lr
 802a25c:	e000e100 	.word	0xe000e100
 802a260:	e000ed00 	.word	0xe000ed00

0802a264 <NVIC_EncodePriority>:
{
 802a264:	b480      	push	{r7}
 802a266:	b089      	sub	sp, #36	; 0x24
 802a268:	af00      	add	r7, sp, #0
 802a26a:	60f8      	str	r0, [r7, #12]
 802a26c:	60b9      	str	r1, [r7, #8]
 802a26e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802a270:	68fb      	ldr	r3, [r7, #12]
 802a272:	f003 0307 	and.w	r3, r3, #7
 802a276:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802a278:	69fb      	ldr	r3, [r7, #28]
 802a27a:	f1c3 0307 	rsb	r3, r3, #7
 802a27e:	2b04      	cmp	r3, #4
 802a280:	bf28      	it	cs
 802a282:	2304      	movcs	r3, #4
 802a284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802a286:	69fb      	ldr	r3, [r7, #28]
 802a288:	3304      	adds	r3, #4
 802a28a:	2b06      	cmp	r3, #6
 802a28c:	d902      	bls.n	802a294 <NVIC_EncodePriority+0x30>
 802a28e:	69fb      	ldr	r3, [r7, #28]
 802a290:	3b03      	subs	r3, #3
 802a292:	e000      	b.n	802a296 <NVIC_EncodePriority+0x32>
 802a294:	2300      	movs	r3, #0
 802a296:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802a298:	f04f 32ff 	mov.w	r2, #4294967295
 802a29c:	69bb      	ldr	r3, [r7, #24]
 802a29e:	fa02 f303 	lsl.w	r3, r2, r3
 802a2a2:	43da      	mvns	r2, r3
 802a2a4:	68bb      	ldr	r3, [r7, #8]
 802a2a6:	401a      	ands	r2, r3
 802a2a8:	697b      	ldr	r3, [r7, #20]
 802a2aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802a2ac:	f04f 31ff 	mov.w	r1, #4294967295
 802a2b0:	697b      	ldr	r3, [r7, #20]
 802a2b2:	fa01 f303 	lsl.w	r3, r1, r3
 802a2b6:	43d9      	mvns	r1, r3
 802a2b8:	687b      	ldr	r3, [r7, #4]
 802a2ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802a2bc:	4313      	orrs	r3, r2
}
 802a2be:	4618      	mov	r0, r3
 802a2c0:	3724      	adds	r7, #36	; 0x24
 802a2c2:	46bd      	mov	sp, r7
 802a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2c8:	4770      	bx	lr
	...

0802a2cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802a2cc:	b580      	push	{r7, lr}
 802a2ce:	b082      	sub	sp, #8
 802a2d0:	af00      	add	r7, sp, #0
 802a2d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802a2d4:	687b      	ldr	r3, [r7, #4]
 802a2d6:	3b01      	subs	r3, #1
 802a2d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802a2dc:	d301      	bcc.n	802a2e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802a2de:	2301      	movs	r3, #1
 802a2e0:	e00f      	b.n	802a302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802a2e2:	4a0a      	ldr	r2, [pc, #40]	; (802a30c <SysTick_Config+0x40>)
 802a2e4:	687b      	ldr	r3, [r7, #4]
 802a2e6:	3b01      	subs	r3, #1
 802a2e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802a2ea:	210f      	movs	r1, #15
 802a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 802a2f0:	f7ff ff8e 	bl	802a210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802a2f4:	4b05      	ldr	r3, [pc, #20]	; (802a30c <SysTick_Config+0x40>)
 802a2f6:	2200      	movs	r2, #0
 802a2f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802a2fa:	4b04      	ldr	r3, [pc, #16]	; (802a30c <SysTick_Config+0x40>)
 802a2fc:	2207      	movs	r2, #7
 802a2fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802a300:	2300      	movs	r3, #0
}
 802a302:	4618      	mov	r0, r3
 802a304:	3708      	adds	r7, #8
 802a306:	46bd      	mov	sp, r7
 802a308:	bd80      	pop	{r7, pc}
 802a30a:	bf00      	nop
 802a30c:	e000e010 	.word	0xe000e010

0802a310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802a310:	b580      	push	{r7, lr}
 802a312:	b082      	sub	sp, #8
 802a314:	af00      	add	r7, sp, #0
 802a316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802a318:	6878      	ldr	r0, [r7, #4]
 802a31a:	f7ff ff29 	bl	802a170 <__NVIC_SetPriorityGrouping>
}
 802a31e:	bf00      	nop
 802a320:	3708      	adds	r7, #8
 802a322:	46bd      	mov	sp, r7
 802a324:	bd80      	pop	{r7, pc}

0802a326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802a326:	b580      	push	{r7, lr}
 802a328:	b086      	sub	sp, #24
 802a32a:	af00      	add	r7, sp, #0
 802a32c:	4603      	mov	r3, r0
 802a32e:	60b9      	str	r1, [r7, #8]
 802a330:	607a      	str	r2, [r7, #4]
 802a332:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802a334:	f7ff ff40 	bl	802a1b8 <__NVIC_GetPriorityGrouping>
 802a338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802a33a:	687a      	ldr	r2, [r7, #4]
 802a33c:	68b9      	ldr	r1, [r7, #8]
 802a33e:	6978      	ldr	r0, [r7, #20]
 802a340:	f7ff ff90 	bl	802a264 <NVIC_EncodePriority>
 802a344:	4602      	mov	r2, r0
 802a346:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802a34a:	4611      	mov	r1, r2
 802a34c:	4618      	mov	r0, r3
 802a34e:	f7ff ff5f 	bl	802a210 <__NVIC_SetPriority>
}
 802a352:	bf00      	nop
 802a354:	3718      	adds	r7, #24
 802a356:	46bd      	mov	sp, r7
 802a358:	bd80      	pop	{r7, pc}

0802a35a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802a35a:	b580      	push	{r7, lr}
 802a35c:	b082      	sub	sp, #8
 802a35e:	af00      	add	r7, sp, #0
 802a360:	4603      	mov	r3, r0
 802a362:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802a364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802a368:	4618      	mov	r0, r3
 802a36a:	f7ff ff33 	bl	802a1d4 <__NVIC_EnableIRQ>
}
 802a36e:	bf00      	nop
 802a370:	3708      	adds	r7, #8
 802a372:	46bd      	mov	sp, r7
 802a374:	bd80      	pop	{r7, pc}

0802a376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802a376:	b580      	push	{r7, lr}
 802a378:	b082      	sub	sp, #8
 802a37a:	af00      	add	r7, sp, #0
 802a37c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802a37e:	6878      	ldr	r0, [r7, #4]
 802a380:	f7ff ffa4 	bl	802a2cc <SysTick_Config>
 802a384:	4603      	mov	r3, r0
}
 802a386:	4618      	mov	r0, r3
 802a388:	3708      	adds	r7, #8
 802a38a:	46bd      	mov	sp, r7
 802a38c:	bd80      	pop	{r7, pc}
	...

0802a390 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 802a390:	b480      	push	{r7}
 802a392:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 802a394:	f3bf 8f5f 	dmb	sy
}
 802a398:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 802a39a:	4b07      	ldr	r3, [pc, #28]	; (802a3b8 <HAL_MPU_Disable+0x28>)
 802a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a39e:	4a06      	ldr	r2, [pc, #24]	; (802a3b8 <HAL_MPU_Disable+0x28>)
 802a3a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802a3a4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 802a3a6:	4b05      	ldr	r3, [pc, #20]	; (802a3bc <HAL_MPU_Disable+0x2c>)
 802a3a8:	2200      	movs	r2, #0
 802a3aa:	605a      	str	r2, [r3, #4]
}
 802a3ac:	bf00      	nop
 802a3ae:	46bd      	mov	sp, r7
 802a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3b4:	4770      	bx	lr
 802a3b6:	bf00      	nop
 802a3b8:	e000ed00 	.word	0xe000ed00
 802a3bc:	e000ed90 	.word	0xe000ed90

0802a3c0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 802a3c0:	b480      	push	{r7}
 802a3c2:	b083      	sub	sp, #12
 802a3c4:	af00      	add	r7, sp, #0
 802a3c6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 802a3c8:	4a0b      	ldr	r2, [pc, #44]	; (802a3f8 <HAL_MPU_Enable+0x38>)
 802a3ca:	687b      	ldr	r3, [r7, #4]
 802a3cc:	f043 0301 	orr.w	r3, r3, #1
 802a3d0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 802a3d2:	4b0a      	ldr	r3, [pc, #40]	; (802a3fc <HAL_MPU_Enable+0x3c>)
 802a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a3d6:	4a09      	ldr	r2, [pc, #36]	; (802a3fc <HAL_MPU_Enable+0x3c>)
 802a3d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a3dc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 802a3de:	f3bf 8f4f 	dsb	sy
}
 802a3e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802a3e4:	f3bf 8f6f 	isb	sy
}
 802a3e8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 802a3ea:	bf00      	nop
 802a3ec:	370c      	adds	r7, #12
 802a3ee:	46bd      	mov	sp, r7
 802a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3f4:	4770      	bx	lr
 802a3f6:	bf00      	nop
 802a3f8:	e000ed90 	.word	0xe000ed90
 802a3fc:	e000ed00 	.word	0xe000ed00

0802a400 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 802a400:	b480      	push	{r7}
 802a402:	b083      	sub	sp, #12
 802a404:	af00      	add	r7, sp, #0
 802a406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 802a408:	687b      	ldr	r3, [r7, #4]
 802a40a:	785a      	ldrb	r2, [r3, #1]
 802a40c:	4b1d      	ldr	r3, [pc, #116]	; (802a484 <HAL_MPU_ConfigRegion+0x84>)
 802a40e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 802a410:	687b      	ldr	r3, [r7, #4]
 802a412:	781b      	ldrb	r3, [r3, #0]
 802a414:	2b00      	cmp	r3, #0
 802a416:	d029      	beq.n	802a46c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 802a418:	4a1a      	ldr	r2, [pc, #104]	; (802a484 <HAL_MPU_ConfigRegion+0x84>)
 802a41a:	687b      	ldr	r3, [r7, #4]
 802a41c:	685b      	ldr	r3, [r3, #4]
 802a41e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 802a420:	687b      	ldr	r3, [r7, #4]
 802a422:	7b1b      	ldrb	r3, [r3, #12]
 802a424:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 802a426:	687b      	ldr	r3, [r7, #4]
 802a428:	7adb      	ldrb	r3, [r3, #11]
 802a42a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 802a42c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 802a42e:	687b      	ldr	r3, [r7, #4]
 802a430:	7a9b      	ldrb	r3, [r3, #10]
 802a432:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 802a434:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 802a436:	687b      	ldr	r3, [r7, #4]
 802a438:	7b5b      	ldrb	r3, [r3, #13]
 802a43a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 802a43c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 802a43e:	687b      	ldr	r3, [r7, #4]
 802a440:	7b9b      	ldrb	r3, [r3, #14]
 802a442:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 802a444:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 802a446:	687b      	ldr	r3, [r7, #4]
 802a448:	7bdb      	ldrb	r3, [r3, #15]
 802a44a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 802a44c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 802a44e:	687b      	ldr	r3, [r7, #4]
 802a450:	7a5b      	ldrb	r3, [r3, #9]
 802a452:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 802a454:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 802a456:	687b      	ldr	r3, [r7, #4]
 802a458:	7a1b      	ldrb	r3, [r3, #8]
 802a45a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 802a45c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 802a45e:	687a      	ldr	r2, [r7, #4]
 802a460:	7812      	ldrb	r2, [r2, #0]
 802a462:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 802a464:	4a07      	ldr	r2, [pc, #28]	; (802a484 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 802a466:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 802a468:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 802a46a:	e005      	b.n	802a478 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 802a46c:	4b05      	ldr	r3, [pc, #20]	; (802a484 <HAL_MPU_ConfigRegion+0x84>)
 802a46e:	2200      	movs	r2, #0
 802a470:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 802a472:	4b04      	ldr	r3, [pc, #16]	; (802a484 <HAL_MPU_ConfigRegion+0x84>)
 802a474:	2200      	movs	r2, #0
 802a476:	611a      	str	r2, [r3, #16]
}
 802a478:	bf00      	nop
 802a47a:	370c      	adds	r7, #12
 802a47c:	46bd      	mov	sp, r7
 802a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a482:	4770      	bx	lr
 802a484:	e000ed90 	.word	0xe000ed90

0802a488 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802a488:	b580      	push	{r7, lr}
 802a48a:	b084      	sub	sp, #16
 802a48c:	af00      	add	r7, sp, #0
 802a48e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802a490:	687b      	ldr	r3, [r7, #4]
 802a492:	2b00      	cmp	r3, #0
 802a494:	d101      	bne.n	802a49a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 802a496:	2301      	movs	r3, #1
 802a498:	e237      	b.n	802a90a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 802a49a:	687b      	ldr	r3, [r7, #4]
 802a49c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802a4a0:	b2db      	uxtb	r3, r3
 802a4a2:	2b02      	cmp	r3, #2
 802a4a4:	d004      	beq.n	802a4b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802a4a6:	687b      	ldr	r3, [r7, #4]
 802a4a8:	2280      	movs	r2, #128	; 0x80
 802a4aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802a4ac:	2301      	movs	r3, #1
 802a4ae:	e22c      	b.n	802a90a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802a4b0:	687b      	ldr	r3, [r7, #4]
 802a4b2:	681b      	ldr	r3, [r3, #0]
 802a4b4:	4a5c      	ldr	r2, [pc, #368]	; (802a628 <HAL_DMA_Abort_IT+0x1a0>)
 802a4b6:	4293      	cmp	r3, r2
 802a4b8:	d04a      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a4ba:	687b      	ldr	r3, [r7, #4]
 802a4bc:	681b      	ldr	r3, [r3, #0]
 802a4be:	4a5b      	ldr	r2, [pc, #364]	; (802a62c <HAL_DMA_Abort_IT+0x1a4>)
 802a4c0:	4293      	cmp	r3, r2
 802a4c2:	d045      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a4c4:	687b      	ldr	r3, [r7, #4]
 802a4c6:	681b      	ldr	r3, [r3, #0]
 802a4c8:	4a59      	ldr	r2, [pc, #356]	; (802a630 <HAL_DMA_Abort_IT+0x1a8>)
 802a4ca:	4293      	cmp	r3, r2
 802a4cc:	d040      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a4ce:	687b      	ldr	r3, [r7, #4]
 802a4d0:	681b      	ldr	r3, [r3, #0]
 802a4d2:	4a58      	ldr	r2, [pc, #352]	; (802a634 <HAL_DMA_Abort_IT+0x1ac>)
 802a4d4:	4293      	cmp	r3, r2
 802a4d6:	d03b      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a4d8:	687b      	ldr	r3, [r7, #4]
 802a4da:	681b      	ldr	r3, [r3, #0]
 802a4dc:	4a56      	ldr	r2, [pc, #344]	; (802a638 <HAL_DMA_Abort_IT+0x1b0>)
 802a4de:	4293      	cmp	r3, r2
 802a4e0:	d036      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a4e2:	687b      	ldr	r3, [r7, #4]
 802a4e4:	681b      	ldr	r3, [r3, #0]
 802a4e6:	4a55      	ldr	r2, [pc, #340]	; (802a63c <HAL_DMA_Abort_IT+0x1b4>)
 802a4e8:	4293      	cmp	r3, r2
 802a4ea:	d031      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a4ec:	687b      	ldr	r3, [r7, #4]
 802a4ee:	681b      	ldr	r3, [r3, #0]
 802a4f0:	4a53      	ldr	r2, [pc, #332]	; (802a640 <HAL_DMA_Abort_IT+0x1b8>)
 802a4f2:	4293      	cmp	r3, r2
 802a4f4:	d02c      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a4f6:	687b      	ldr	r3, [r7, #4]
 802a4f8:	681b      	ldr	r3, [r3, #0]
 802a4fa:	4a52      	ldr	r2, [pc, #328]	; (802a644 <HAL_DMA_Abort_IT+0x1bc>)
 802a4fc:	4293      	cmp	r3, r2
 802a4fe:	d027      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a500:	687b      	ldr	r3, [r7, #4]
 802a502:	681b      	ldr	r3, [r3, #0]
 802a504:	4a50      	ldr	r2, [pc, #320]	; (802a648 <HAL_DMA_Abort_IT+0x1c0>)
 802a506:	4293      	cmp	r3, r2
 802a508:	d022      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a50a:	687b      	ldr	r3, [r7, #4]
 802a50c:	681b      	ldr	r3, [r3, #0]
 802a50e:	4a4f      	ldr	r2, [pc, #316]	; (802a64c <HAL_DMA_Abort_IT+0x1c4>)
 802a510:	4293      	cmp	r3, r2
 802a512:	d01d      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a514:	687b      	ldr	r3, [r7, #4]
 802a516:	681b      	ldr	r3, [r3, #0]
 802a518:	4a4d      	ldr	r2, [pc, #308]	; (802a650 <HAL_DMA_Abort_IT+0x1c8>)
 802a51a:	4293      	cmp	r3, r2
 802a51c:	d018      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a51e:	687b      	ldr	r3, [r7, #4]
 802a520:	681b      	ldr	r3, [r3, #0]
 802a522:	4a4c      	ldr	r2, [pc, #304]	; (802a654 <HAL_DMA_Abort_IT+0x1cc>)
 802a524:	4293      	cmp	r3, r2
 802a526:	d013      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a528:	687b      	ldr	r3, [r7, #4]
 802a52a:	681b      	ldr	r3, [r3, #0]
 802a52c:	4a4a      	ldr	r2, [pc, #296]	; (802a658 <HAL_DMA_Abort_IT+0x1d0>)
 802a52e:	4293      	cmp	r3, r2
 802a530:	d00e      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a532:	687b      	ldr	r3, [r7, #4]
 802a534:	681b      	ldr	r3, [r3, #0]
 802a536:	4a49      	ldr	r2, [pc, #292]	; (802a65c <HAL_DMA_Abort_IT+0x1d4>)
 802a538:	4293      	cmp	r3, r2
 802a53a:	d009      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a53c:	687b      	ldr	r3, [r7, #4]
 802a53e:	681b      	ldr	r3, [r3, #0]
 802a540:	4a47      	ldr	r2, [pc, #284]	; (802a660 <HAL_DMA_Abort_IT+0x1d8>)
 802a542:	4293      	cmp	r3, r2
 802a544:	d004      	beq.n	802a550 <HAL_DMA_Abort_IT+0xc8>
 802a546:	687b      	ldr	r3, [r7, #4]
 802a548:	681b      	ldr	r3, [r3, #0]
 802a54a:	4a46      	ldr	r2, [pc, #280]	; (802a664 <HAL_DMA_Abort_IT+0x1dc>)
 802a54c:	4293      	cmp	r3, r2
 802a54e:	d101      	bne.n	802a554 <HAL_DMA_Abort_IT+0xcc>
 802a550:	2301      	movs	r3, #1
 802a552:	e000      	b.n	802a556 <HAL_DMA_Abort_IT+0xce>
 802a554:	2300      	movs	r3, #0
 802a556:	2b00      	cmp	r3, #0
 802a558:	f000 8086 	beq.w	802a668 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802a55c:	687b      	ldr	r3, [r7, #4]
 802a55e:	2204      	movs	r2, #4
 802a560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802a564:	687b      	ldr	r3, [r7, #4]
 802a566:	681b      	ldr	r3, [r3, #0]
 802a568:	4a2f      	ldr	r2, [pc, #188]	; (802a628 <HAL_DMA_Abort_IT+0x1a0>)
 802a56a:	4293      	cmp	r3, r2
 802a56c:	d04a      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a56e:	687b      	ldr	r3, [r7, #4]
 802a570:	681b      	ldr	r3, [r3, #0]
 802a572:	4a2e      	ldr	r2, [pc, #184]	; (802a62c <HAL_DMA_Abort_IT+0x1a4>)
 802a574:	4293      	cmp	r3, r2
 802a576:	d045      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a578:	687b      	ldr	r3, [r7, #4]
 802a57a:	681b      	ldr	r3, [r3, #0]
 802a57c:	4a2c      	ldr	r2, [pc, #176]	; (802a630 <HAL_DMA_Abort_IT+0x1a8>)
 802a57e:	4293      	cmp	r3, r2
 802a580:	d040      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a582:	687b      	ldr	r3, [r7, #4]
 802a584:	681b      	ldr	r3, [r3, #0]
 802a586:	4a2b      	ldr	r2, [pc, #172]	; (802a634 <HAL_DMA_Abort_IT+0x1ac>)
 802a588:	4293      	cmp	r3, r2
 802a58a:	d03b      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a58c:	687b      	ldr	r3, [r7, #4]
 802a58e:	681b      	ldr	r3, [r3, #0]
 802a590:	4a29      	ldr	r2, [pc, #164]	; (802a638 <HAL_DMA_Abort_IT+0x1b0>)
 802a592:	4293      	cmp	r3, r2
 802a594:	d036      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a596:	687b      	ldr	r3, [r7, #4]
 802a598:	681b      	ldr	r3, [r3, #0]
 802a59a:	4a28      	ldr	r2, [pc, #160]	; (802a63c <HAL_DMA_Abort_IT+0x1b4>)
 802a59c:	4293      	cmp	r3, r2
 802a59e:	d031      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a5a0:	687b      	ldr	r3, [r7, #4]
 802a5a2:	681b      	ldr	r3, [r3, #0]
 802a5a4:	4a26      	ldr	r2, [pc, #152]	; (802a640 <HAL_DMA_Abort_IT+0x1b8>)
 802a5a6:	4293      	cmp	r3, r2
 802a5a8:	d02c      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a5aa:	687b      	ldr	r3, [r7, #4]
 802a5ac:	681b      	ldr	r3, [r3, #0]
 802a5ae:	4a25      	ldr	r2, [pc, #148]	; (802a644 <HAL_DMA_Abort_IT+0x1bc>)
 802a5b0:	4293      	cmp	r3, r2
 802a5b2:	d027      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a5b4:	687b      	ldr	r3, [r7, #4]
 802a5b6:	681b      	ldr	r3, [r3, #0]
 802a5b8:	4a23      	ldr	r2, [pc, #140]	; (802a648 <HAL_DMA_Abort_IT+0x1c0>)
 802a5ba:	4293      	cmp	r3, r2
 802a5bc:	d022      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a5be:	687b      	ldr	r3, [r7, #4]
 802a5c0:	681b      	ldr	r3, [r3, #0]
 802a5c2:	4a22      	ldr	r2, [pc, #136]	; (802a64c <HAL_DMA_Abort_IT+0x1c4>)
 802a5c4:	4293      	cmp	r3, r2
 802a5c6:	d01d      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a5c8:	687b      	ldr	r3, [r7, #4]
 802a5ca:	681b      	ldr	r3, [r3, #0]
 802a5cc:	4a20      	ldr	r2, [pc, #128]	; (802a650 <HAL_DMA_Abort_IT+0x1c8>)
 802a5ce:	4293      	cmp	r3, r2
 802a5d0:	d018      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a5d2:	687b      	ldr	r3, [r7, #4]
 802a5d4:	681b      	ldr	r3, [r3, #0]
 802a5d6:	4a1f      	ldr	r2, [pc, #124]	; (802a654 <HAL_DMA_Abort_IT+0x1cc>)
 802a5d8:	4293      	cmp	r3, r2
 802a5da:	d013      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a5dc:	687b      	ldr	r3, [r7, #4]
 802a5de:	681b      	ldr	r3, [r3, #0]
 802a5e0:	4a1d      	ldr	r2, [pc, #116]	; (802a658 <HAL_DMA_Abort_IT+0x1d0>)
 802a5e2:	4293      	cmp	r3, r2
 802a5e4:	d00e      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a5e6:	687b      	ldr	r3, [r7, #4]
 802a5e8:	681b      	ldr	r3, [r3, #0]
 802a5ea:	4a1c      	ldr	r2, [pc, #112]	; (802a65c <HAL_DMA_Abort_IT+0x1d4>)
 802a5ec:	4293      	cmp	r3, r2
 802a5ee:	d009      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a5f0:	687b      	ldr	r3, [r7, #4]
 802a5f2:	681b      	ldr	r3, [r3, #0]
 802a5f4:	4a1a      	ldr	r2, [pc, #104]	; (802a660 <HAL_DMA_Abort_IT+0x1d8>)
 802a5f6:	4293      	cmp	r3, r2
 802a5f8:	d004      	beq.n	802a604 <HAL_DMA_Abort_IT+0x17c>
 802a5fa:	687b      	ldr	r3, [r7, #4]
 802a5fc:	681b      	ldr	r3, [r3, #0]
 802a5fe:	4a19      	ldr	r2, [pc, #100]	; (802a664 <HAL_DMA_Abort_IT+0x1dc>)
 802a600:	4293      	cmp	r3, r2
 802a602:	d108      	bne.n	802a616 <HAL_DMA_Abort_IT+0x18e>
 802a604:	687b      	ldr	r3, [r7, #4]
 802a606:	681b      	ldr	r3, [r3, #0]
 802a608:	681a      	ldr	r2, [r3, #0]
 802a60a:	687b      	ldr	r3, [r7, #4]
 802a60c:	681b      	ldr	r3, [r3, #0]
 802a60e:	f022 0201 	bic.w	r2, r2, #1
 802a612:	601a      	str	r2, [r3, #0]
 802a614:	e178      	b.n	802a908 <HAL_DMA_Abort_IT+0x480>
 802a616:	687b      	ldr	r3, [r7, #4]
 802a618:	681b      	ldr	r3, [r3, #0]
 802a61a:	681a      	ldr	r2, [r3, #0]
 802a61c:	687b      	ldr	r3, [r7, #4]
 802a61e:	681b      	ldr	r3, [r3, #0]
 802a620:	f022 0201 	bic.w	r2, r2, #1
 802a624:	601a      	str	r2, [r3, #0]
 802a626:	e16f      	b.n	802a908 <HAL_DMA_Abort_IT+0x480>
 802a628:	40020010 	.word	0x40020010
 802a62c:	40020028 	.word	0x40020028
 802a630:	40020040 	.word	0x40020040
 802a634:	40020058 	.word	0x40020058
 802a638:	40020070 	.word	0x40020070
 802a63c:	40020088 	.word	0x40020088
 802a640:	400200a0 	.word	0x400200a0
 802a644:	400200b8 	.word	0x400200b8
 802a648:	40020410 	.word	0x40020410
 802a64c:	40020428 	.word	0x40020428
 802a650:	40020440 	.word	0x40020440
 802a654:	40020458 	.word	0x40020458
 802a658:	40020470 	.word	0x40020470
 802a65c:	40020488 	.word	0x40020488
 802a660:	400204a0 	.word	0x400204a0
 802a664:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802a668:	687b      	ldr	r3, [r7, #4]
 802a66a:	681b      	ldr	r3, [r3, #0]
 802a66c:	681a      	ldr	r2, [r3, #0]
 802a66e:	687b      	ldr	r3, [r7, #4]
 802a670:	681b      	ldr	r3, [r3, #0]
 802a672:	f022 020e 	bic.w	r2, r2, #14
 802a676:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 802a678:	687b      	ldr	r3, [r7, #4]
 802a67a:	681b      	ldr	r3, [r3, #0]
 802a67c:	4a6c      	ldr	r2, [pc, #432]	; (802a830 <HAL_DMA_Abort_IT+0x3a8>)
 802a67e:	4293      	cmp	r3, r2
 802a680:	d04a      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a682:	687b      	ldr	r3, [r7, #4]
 802a684:	681b      	ldr	r3, [r3, #0]
 802a686:	4a6b      	ldr	r2, [pc, #428]	; (802a834 <HAL_DMA_Abort_IT+0x3ac>)
 802a688:	4293      	cmp	r3, r2
 802a68a:	d045      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a68c:	687b      	ldr	r3, [r7, #4]
 802a68e:	681b      	ldr	r3, [r3, #0]
 802a690:	4a69      	ldr	r2, [pc, #420]	; (802a838 <HAL_DMA_Abort_IT+0x3b0>)
 802a692:	4293      	cmp	r3, r2
 802a694:	d040      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a696:	687b      	ldr	r3, [r7, #4]
 802a698:	681b      	ldr	r3, [r3, #0]
 802a69a:	4a68      	ldr	r2, [pc, #416]	; (802a83c <HAL_DMA_Abort_IT+0x3b4>)
 802a69c:	4293      	cmp	r3, r2
 802a69e:	d03b      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a6a0:	687b      	ldr	r3, [r7, #4]
 802a6a2:	681b      	ldr	r3, [r3, #0]
 802a6a4:	4a66      	ldr	r2, [pc, #408]	; (802a840 <HAL_DMA_Abort_IT+0x3b8>)
 802a6a6:	4293      	cmp	r3, r2
 802a6a8:	d036      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a6aa:	687b      	ldr	r3, [r7, #4]
 802a6ac:	681b      	ldr	r3, [r3, #0]
 802a6ae:	4a65      	ldr	r2, [pc, #404]	; (802a844 <HAL_DMA_Abort_IT+0x3bc>)
 802a6b0:	4293      	cmp	r3, r2
 802a6b2:	d031      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a6b4:	687b      	ldr	r3, [r7, #4]
 802a6b6:	681b      	ldr	r3, [r3, #0]
 802a6b8:	4a63      	ldr	r2, [pc, #396]	; (802a848 <HAL_DMA_Abort_IT+0x3c0>)
 802a6ba:	4293      	cmp	r3, r2
 802a6bc:	d02c      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a6be:	687b      	ldr	r3, [r7, #4]
 802a6c0:	681b      	ldr	r3, [r3, #0]
 802a6c2:	4a62      	ldr	r2, [pc, #392]	; (802a84c <HAL_DMA_Abort_IT+0x3c4>)
 802a6c4:	4293      	cmp	r3, r2
 802a6c6:	d027      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a6c8:	687b      	ldr	r3, [r7, #4]
 802a6ca:	681b      	ldr	r3, [r3, #0]
 802a6cc:	4a60      	ldr	r2, [pc, #384]	; (802a850 <HAL_DMA_Abort_IT+0x3c8>)
 802a6ce:	4293      	cmp	r3, r2
 802a6d0:	d022      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a6d2:	687b      	ldr	r3, [r7, #4]
 802a6d4:	681b      	ldr	r3, [r3, #0]
 802a6d6:	4a5f      	ldr	r2, [pc, #380]	; (802a854 <HAL_DMA_Abort_IT+0x3cc>)
 802a6d8:	4293      	cmp	r3, r2
 802a6da:	d01d      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a6dc:	687b      	ldr	r3, [r7, #4]
 802a6de:	681b      	ldr	r3, [r3, #0]
 802a6e0:	4a5d      	ldr	r2, [pc, #372]	; (802a858 <HAL_DMA_Abort_IT+0x3d0>)
 802a6e2:	4293      	cmp	r3, r2
 802a6e4:	d018      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a6e6:	687b      	ldr	r3, [r7, #4]
 802a6e8:	681b      	ldr	r3, [r3, #0]
 802a6ea:	4a5c      	ldr	r2, [pc, #368]	; (802a85c <HAL_DMA_Abort_IT+0x3d4>)
 802a6ec:	4293      	cmp	r3, r2
 802a6ee:	d013      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a6f0:	687b      	ldr	r3, [r7, #4]
 802a6f2:	681b      	ldr	r3, [r3, #0]
 802a6f4:	4a5a      	ldr	r2, [pc, #360]	; (802a860 <HAL_DMA_Abort_IT+0x3d8>)
 802a6f6:	4293      	cmp	r3, r2
 802a6f8:	d00e      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a6fa:	687b      	ldr	r3, [r7, #4]
 802a6fc:	681b      	ldr	r3, [r3, #0]
 802a6fe:	4a59      	ldr	r2, [pc, #356]	; (802a864 <HAL_DMA_Abort_IT+0x3dc>)
 802a700:	4293      	cmp	r3, r2
 802a702:	d009      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a704:	687b      	ldr	r3, [r7, #4]
 802a706:	681b      	ldr	r3, [r3, #0]
 802a708:	4a57      	ldr	r2, [pc, #348]	; (802a868 <HAL_DMA_Abort_IT+0x3e0>)
 802a70a:	4293      	cmp	r3, r2
 802a70c:	d004      	beq.n	802a718 <HAL_DMA_Abort_IT+0x290>
 802a70e:	687b      	ldr	r3, [r7, #4]
 802a710:	681b      	ldr	r3, [r3, #0]
 802a712:	4a56      	ldr	r2, [pc, #344]	; (802a86c <HAL_DMA_Abort_IT+0x3e4>)
 802a714:	4293      	cmp	r3, r2
 802a716:	d108      	bne.n	802a72a <HAL_DMA_Abort_IT+0x2a2>
 802a718:	687b      	ldr	r3, [r7, #4]
 802a71a:	681b      	ldr	r3, [r3, #0]
 802a71c:	681a      	ldr	r2, [r3, #0]
 802a71e:	687b      	ldr	r3, [r7, #4]
 802a720:	681b      	ldr	r3, [r3, #0]
 802a722:	f022 0201 	bic.w	r2, r2, #1
 802a726:	601a      	str	r2, [r3, #0]
 802a728:	e007      	b.n	802a73a <HAL_DMA_Abort_IT+0x2b2>
 802a72a:	687b      	ldr	r3, [r7, #4]
 802a72c:	681b      	ldr	r3, [r3, #0]
 802a72e:	681a      	ldr	r2, [r3, #0]
 802a730:	687b      	ldr	r3, [r7, #4]
 802a732:	681b      	ldr	r3, [r3, #0]
 802a734:	f022 0201 	bic.w	r2, r2, #1
 802a738:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802a73a:	687b      	ldr	r3, [r7, #4]
 802a73c:	681b      	ldr	r3, [r3, #0]
 802a73e:	4a3c      	ldr	r2, [pc, #240]	; (802a830 <HAL_DMA_Abort_IT+0x3a8>)
 802a740:	4293      	cmp	r3, r2
 802a742:	d072      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a744:	687b      	ldr	r3, [r7, #4]
 802a746:	681b      	ldr	r3, [r3, #0]
 802a748:	4a3a      	ldr	r2, [pc, #232]	; (802a834 <HAL_DMA_Abort_IT+0x3ac>)
 802a74a:	4293      	cmp	r3, r2
 802a74c:	d06d      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a74e:	687b      	ldr	r3, [r7, #4]
 802a750:	681b      	ldr	r3, [r3, #0]
 802a752:	4a39      	ldr	r2, [pc, #228]	; (802a838 <HAL_DMA_Abort_IT+0x3b0>)
 802a754:	4293      	cmp	r3, r2
 802a756:	d068      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a758:	687b      	ldr	r3, [r7, #4]
 802a75a:	681b      	ldr	r3, [r3, #0]
 802a75c:	4a37      	ldr	r2, [pc, #220]	; (802a83c <HAL_DMA_Abort_IT+0x3b4>)
 802a75e:	4293      	cmp	r3, r2
 802a760:	d063      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a762:	687b      	ldr	r3, [r7, #4]
 802a764:	681b      	ldr	r3, [r3, #0]
 802a766:	4a36      	ldr	r2, [pc, #216]	; (802a840 <HAL_DMA_Abort_IT+0x3b8>)
 802a768:	4293      	cmp	r3, r2
 802a76a:	d05e      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a76c:	687b      	ldr	r3, [r7, #4]
 802a76e:	681b      	ldr	r3, [r3, #0]
 802a770:	4a34      	ldr	r2, [pc, #208]	; (802a844 <HAL_DMA_Abort_IT+0x3bc>)
 802a772:	4293      	cmp	r3, r2
 802a774:	d059      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a776:	687b      	ldr	r3, [r7, #4]
 802a778:	681b      	ldr	r3, [r3, #0]
 802a77a:	4a33      	ldr	r2, [pc, #204]	; (802a848 <HAL_DMA_Abort_IT+0x3c0>)
 802a77c:	4293      	cmp	r3, r2
 802a77e:	d054      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a780:	687b      	ldr	r3, [r7, #4]
 802a782:	681b      	ldr	r3, [r3, #0]
 802a784:	4a31      	ldr	r2, [pc, #196]	; (802a84c <HAL_DMA_Abort_IT+0x3c4>)
 802a786:	4293      	cmp	r3, r2
 802a788:	d04f      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a78a:	687b      	ldr	r3, [r7, #4]
 802a78c:	681b      	ldr	r3, [r3, #0]
 802a78e:	4a30      	ldr	r2, [pc, #192]	; (802a850 <HAL_DMA_Abort_IT+0x3c8>)
 802a790:	4293      	cmp	r3, r2
 802a792:	d04a      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a794:	687b      	ldr	r3, [r7, #4]
 802a796:	681b      	ldr	r3, [r3, #0]
 802a798:	4a2e      	ldr	r2, [pc, #184]	; (802a854 <HAL_DMA_Abort_IT+0x3cc>)
 802a79a:	4293      	cmp	r3, r2
 802a79c:	d045      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a79e:	687b      	ldr	r3, [r7, #4]
 802a7a0:	681b      	ldr	r3, [r3, #0]
 802a7a2:	4a2d      	ldr	r2, [pc, #180]	; (802a858 <HAL_DMA_Abort_IT+0x3d0>)
 802a7a4:	4293      	cmp	r3, r2
 802a7a6:	d040      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a7a8:	687b      	ldr	r3, [r7, #4]
 802a7aa:	681b      	ldr	r3, [r3, #0]
 802a7ac:	4a2b      	ldr	r2, [pc, #172]	; (802a85c <HAL_DMA_Abort_IT+0x3d4>)
 802a7ae:	4293      	cmp	r3, r2
 802a7b0:	d03b      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a7b2:	687b      	ldr	r3, [r7, #4]
 802a7b4:	681b      	ldr	r3, [r3, #0]
 802a7b6:	4a2a      	ldr	r2, [pc, #168]	; (802a860 <HAL_DMA_Abort_IT+0x3d8>)
 802a7b8:	4293      	cmp	r3, r2
 802a7ba:	d036      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a7bc:	687b      	ldr	r3, [r7, #4]
 802a7be:	681b      	ldr	r3, [r3, #0]
 802a7c0:	4a28      	ldr	r2, [pc, #160]	; (802a864 <HAL_DMA_Abort_IT+0x3dc>)
 802a7c2:	4293      	cmp	r3, r2
 802a7c4:	d031      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a7c6:	687b      	ldr	r3, [r7, #4]
 802a7c8:	681b      	ldr	r3, [r3, #0]
 802a7ca:	4a27      	ldr	r2, [pc, #156]	; (802a868 <HAL_DMA_Abort_IT+0x3e0>)
 802a7cc:	4293      	cmp	r3, r2
 802a7ce:	d02c      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a7d0:	687b      	ldr	r3, [r7, #4]
 802a7d2:	681b      	ldr	r3, [r3, #0]
 802a7d4:	4a25      	ldr	r2, [pc, #148]	; (802a86c <HAL_DMA_Abort_IT+0x3e4>)
 802a7d6:	4293      	cmp	r3, r2
 802a7d8:	d027      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a7da:	687b      	ldr	r3, [r7, #4]
 802a7dc:	681b      	ldr	r3, [r3, #0]
 802a7de:	4a24      	ldr	r2, [pc, #144]	; (802a870 <HAL_DMA_Abort_IT+0x3e8>)
 802a7e0:	4293      	cmp	r3, r2
 802a7e2:	d022      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a7e4:	687b      	ldr	r3, [r7, #4]
 802a7e6:	681b      	ldr	r3, [r3, #0]
 802a7e8:	4a22      	ldr	r2, [pc, #136]	; (802a874 <HAL_DMA_Abort_IT+0x3ec>)
 802a7ea:	4293      	cmp	r3, r2
 802a7ec:	d01d      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a7ee:	687b      	ldr	r3, [r7, #4]
 802a7f0:	681b      	ldr	r3, [r3, #0]
 802a7f2:	4a21      	ldr	r2, [pc, #132]	; (802a878 <HAL_DMA_Abort_IT+0x3f0>)
 802a7f4:	4293      	cmp	r3, r2
 802a7f6:	d018      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a7f8:	687b      	ldr	r3, [r7, #4]
 802a7fa:	681b      	ldr	r3, [r3, #0]
 802a7fc:	4a1f      	ldr	r2, [pc, #124]	; (802a87c <HAL_DMA_Abort_IT+0x3f4>)
 802a7fe:	4293      	cmp	r3, r2
 802a800:	d013      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a802:	687b      	ldr	r3, [r7, #4]
 802a804:	681b      	ldr	r3, [r3, #0]
 802a806:	4a1e      	ldr	r2, [pc, #120]	; (802a880 <HAL_DMA_Abort_IT+0x3f8>)
 802a808:	4293      	cmp	r3, r2
 802a80a:	d00e      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a80c:	687b      	ldr	r3, [r7, #4]
 802a80e:	681b      	ldr	r3, [r3, #0]
 802a810:	4a1c      	ldr	r2, [pc, #112]	; (802a884 <HAL_DMA_Abort_IT+0x3fc>)
 802a812:	4293      	cmp	r3, r2
 802a814:	d009      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a816:	687b      	ldr	r3, [r7, #4]
 802a818:	681b      	ldr	r3, [r3, #0]
 802a81a:	4a1b      	ldr	r2, [pc, #108]	; (802a888 <HAL_DMA_Abort_IT+0x400>)
 802a81c:	4293      	cmp	r3, r2
 802a81e:	d004      	beq.n	802a82a <HAL_DMA_Abort_IT+0x3a2>
 802a820:	687b      	ldr	r3, [r7, #4]
 802a822:	681b      	ldr	r3, [r3, #0]
 802a824:	4a19      	ldr	r2, [pc, #100]	; (802a88c <HAL_DMA_Abort_IT+0x404>)
 802a826:	4293      	cmp	r3, r2
 802a828:	d132      	bne.n	802a890 <HAL_DMA_Abort_IT+0x408>
 802a82a:	2301      	movs	r3, #1
 802a82c:	e031      	b.n	802a892 <HAL_DMA_Abort_IT+0x40a>
 802a82e:	bf00      	nop
 802a830:	40020010 	.word	0x40020010
 802a834:	40020028 	.word	0x40020028
 802a838:	40020040 	.word	0x40020040
 802a83c:	40020058 	.word	0x40020058
 802a840:	40020070 	.word	0x40020070
 802a844:	40020088 	.word	0x40020088
 802a848:	400200a0 	.word	0x400200a0
 802a84c:	400200b8 	.word	0x400200b8
 802a850:	40020410 	.word	0x40020410
 802a854:	40020428 	.word	0x40020428
 802a858:	40020440 	.word	0x40020440
 802a85c:	40020458 	.word	0x40020458
 802a860:	40020470 	.word	0x40020470
 802a864:	40020488 	.word	0x40020488
 802a868:	400204a0 	.word	0x400204a0
 802a86c:	400204b8 	.word	0x400204b8
 802a870:	58025408 	.word	0x58025408
 802a874:	5802541c 	.word	0x5802541c
 802a878:	58025430 	.word	0x58025430
 802a87c:	58025444 	.word	0x58025444
 802a880:	58025458 	.word	0x58025458
 802a884:	5802546c 	.word	0x5802546c
 802a888:	58025480 	.word	0x58025480
 802a88c:	58025494 	.word	0x58025494
 802a890:	2300      	movs	r3, #0
 802a892:	2b00      	cmp	r3, #0
 802a894:	d028      	beq.n	802a8e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802a896:	687b      	ldr	r3, [r7, #4]
 802a898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a89a:	681a      	ldr	r2, [r3, #0]
 802a89c:	687b      	ldr	r3, [r7, #4]
 802a89e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a8a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802a8a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802a8a6:	687b      	ldr	r3, [r7, #4]
 802a8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802a8aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802a8ac:	687b      	ldr	r3, [r7, #4]
 802a8ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802a8b0:	f003 031f 	and.w	r3, r3, #31
 802a8b4:	2201      	movs	r2, #1
 802a8b6:	409a      	lsls	r2, r3
 802a8b8:	68fb      	ldr	r3, [r7, #12]
 802a8ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802a8bc:	687b      	ldr	r3, [r7, #4]
 802a8be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802a8c0:	687a      	ldr	r2, [r7, #4]
 802a8c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802a8c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 802a8c6:	687b      	ldr	r3, [r7, #4]
 802a8c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802a8ca:	2b00      	cmp	r3, #0
 802a8cc:	d00c      	beq.n	802a8e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802a8ce:	687b      	ldr	r3, [r7, #4]
 802a8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802a8d2:	681a      	ldr	r2, [r3, #0]
 802a8d4:	687b      	ldr	r3, [r7, #4]
 802a8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802a8d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802a8dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802a8de:	687b      	ldr	r3, [r7, #4]
 802a8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a8e2:	687a      	ldr	r2, [r7, #4]
 802a8e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802a8e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802a8e8:	687b      	ldr	r3, [r7, #4]
 802a8ea:	2201      	movs	r2, #1
 802a8ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802a8f0:	687b      	ldr	r3, [r7, #4]
 802a8f2:	2200      	movs	r2, #0
 802a8f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 802a8f8:	687b      	ldr	r3, [r7, #4]
 802a8fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802a8fc:	2b00      	cmp	r3, #0
 802a8fe:	d003      	beq.n	802a908 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 802a900:	687b      	ldr	r3, [r7, #4]
 802a902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802a904:	6878      	ldr	r0, [r7, #4]
 802a906:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 802a908:	2300      	movs	r3, #0
}
 802a90a:	4618      	mov	r0, r3
 802a90c:	3710      	adds	r7, #16
 802a90e:	46bd      	mov	sp, r7
 802a910:	bd80      	pop	{r7, pc}
 802a912:	bf00      	nop

0802a914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802a914:	b480      	push	{r7}
 802a916:	b089      	sub	sp, #36	; 0x24
 802a918:	af00      	add	r7, sp, #0
 802a91a:	6078      	str	r0, [r7, #4]
 802a91c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 802a91e:	2300      	movs	r3, #0
 802a920:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 802a922:	4b89      	ldr	r3, [pc, #548]	; (802ab48 <HAL_GPIO_Init+0x234>)
 802a924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802a926:	e194      	b.n	802ac52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 802a928:	683b      	ldr	r3, [r7, #0]
 802a92a:	681a      	ldr	r2, [r3, #0]
 802a92c:	2101      	movs	r1, #1
 802a92e:	69fb      	ldr	r3, [r7, #28]
 802a930:	fa01 f303 	lsl.w	r3, r1, r3
 802a934:	4013      	ands	r3, r2
 802a936:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 802a938:	693b      	ldr	r3, [r7, #16]
 802a93a:	2b00      	cmp	r3, #0
 802a93c:	f000 8186 	beq.w	802ac4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 802a940:	683b      	ldr	r3, [r7, #0]
 802a942:	685b      	ldr	r3, [r3, #4]
 802a944:	f003 0303 	and.w	r3, r3, #3
 802a948:	2b01      	cmp	r3, #1
 802a94a:	d005      	beq.n	802a958 <HAL_GPIO_Init+0x44>
 802a94c:	683b      	ldr	r3, [r7, #0]
 802a94e:	685b      	ldr	r3, [r3, #4]
 802a950:	f003 0303 	and.w	r3, r3, #3
 802a954:	2b02      	cmp	r3, #2
 802a956:	d130      	bne.n	802a9ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 802a958:	687b      	ldr	r3, [r7, #4]
 802a95a:	689b      	ldr	r3, [r3, #8]
 802a95c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802a95e:	69fb      	ldr	r3, [r7, #28]
 802a960:	005b      	lsls	r3, r3, #1
 802a962:	2203      	movs	r2, #3
 802a964:	fa02 f303 	lsl.w	r3, r2, r3
 802a968:	43db      	mvns	r3, r3
 802a96a:	69ba      	ldr	r2, [r7, #24]
 802a96c:	4013      	ands	r3, r2
 802a96e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802a970:	683b      	ldr	r3, [r7, #0]
 802a972:	68da      	ldr	r2, [r3, #12]
 802a974:	69fb      	ldr	r3, [r7, #28]
 802a976:	005b      	lsls	r3, r3, #1
 802a978:	fa02 f303 	lsl.w	r3, r2, r3
 802a97c:	69ba      	ldr	r2, [r7, #24]
 802a97e:	4313      	orrs	r3, r2
 802a980:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802a982:	687b      	ldr	r3, [r7, #4]
 802a984:	69ba      	ldr	r2, [r7, #24]
 802a986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802a988:	687b      	ldr	r3, [r7, #4]
 802a98a:	685b      	ldr	r3, [r3, #4]
 802a98c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 802a98e:	2201      	movs	r2, #1
 802a990:	69fb      	ldr	r3, [r7, #28]
 802a992:	fa02 f303 	lsl.w	r3, r2, r3
 802a996:	43db      	mvns	r3, r3
 802a998:	69ba      	ldr	r2, [r7, #24]
 802a99a:	4013      	ands	r3, r2
 802a99c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802a99e:	683b      	ldr	r3, [r7, #0]
 802a9a0:	685b      	ldr	r3, [r3, #4]
 802a9a2:	091b      	lsrs	r3, r3, #4
 802a9a4:	f003 0201 	and.w	r2, r3, #1
 802a9a8:	69fb      	ldr	r3, [r7, #28]
 802a9aa:	fa02 f303 	lsl.w	r3, r2, r3
 802a9ae:	69ba      	ldr	r2, [r7, #24]
 802a9b0:	4313      	orrs	r3, r2
 802a9b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802a9b4:	687b      	ldr	r3, [r7, #4]
 802a9b6:	69ba      	ldr	r2, [r7, #24]
 802a9b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802a9ba:	683b      	ldr	r3, [r7, #0]
 802a9bc:	685b      	ldr	r3, [r3, #4]
 802a9be:	f003 0303 	and.w	r3, r3, #3
 802a9c2:	2b03      	cmp	r3, #3
 802a9c4:	d017      	beq.n	802a9f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802a9c6:	687b      	ldr	r3, [r7, #4]
 802a9c8:	68db      	ldr	r3, [r3, #12]
 802a9ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802a9cc:	69fb      	ldr	r3, [r7, #28]
 802a9ce:	005b      	lsls	r3, r3, #1
 802a9d0:	2203      	movs	r2, #3
 802a9d2:	fa02 f303 	lsl.w	r3, r2, r3
 802a9d6:	43db      	mvns	r3, r3
 802a9d8:	69ba      	ldr	r2, [r7, #24]
 802a9da:	4013      	ands	r3, r2
 802a9dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802a9de:	683b      	ldr	r3, [r7, #0]
 802a9e0:	689a      	ldr	r2, [r3, #8]
 802a9e2:	69fb      	ldr	r3, [r7, #28]
 802a9e4:	005b      	lsls	r3, r3, #1
 802a9e6:	fa02 f303 	lsl.w	r3, r2, r3
 802a9ea:	69ba      	ldr	r2, [r7, #24]
 802a9ec:	4313      	orrs	r3, r2
 802a9ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802a9f0:	687b      	ldr	r3, [r7, #4]
 802a9f2:	69ba      	ldr	r2, [r7, #24]
 802a9f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802a9f6:	683b      	ldr	r3, [r7, #0]
 802a9f8:	685b      	ldr	r3, [r3, #4]
 802a9fa:	f003 0303 	and.w	r3, r3, #3
 802a9fe:	2b02      	cmp	r3, #2
 802aa00:	d123      	bne.n	802aa4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802aa02:	69fb      	ldr	r3, [r7, #28]
 802aa04:	08da      	lsrs	r2, r3, #3
 802aa06:	687b      	ldr	r3, [r7, #4]
 802aa08:	3208      	adds	r2, #8
 802aa0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802aa0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 802aa10:	69fb      	ldr	r3, [r7, #28]
 802aa12:	f003 0307 	and.w	r3, r3, #7
 802aa16:	009b      	lsls	r3, r3, #2
 802aa18:	220f      	movs	r2, #15
 802aa1a:	fa02 f303 	lsl.w	r3, r2, r3
 802aa1e:	43db      	mvns	r3, r3
 802aa20:	69ba      	ldr	r2, [r7, #24]
 802aa22:	4013      	ands	r3, r2
 802aa24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 802aa26:	683b      	ldr	r3, [r7, #0]
 802aa28:	691a      	ldr	r2, [r3, #16]
 802aa2a:	69fb      	ldr	r3, [r7, #28]
 802aa2c:	f003 0307 	and.w	r3, r3, #7
 802aa30:	009b      	lsls	r3, r3, #2
 802aa32:	fa02 f303 	lsl.w	r3, r2, r3
 802aa36:	69ba      	ldr	r2, [r7, #24]
 802aa38:	4313      	orrs	r3, r2
 802aa3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802aa3c:	69fb      	ldr	r3, [r7, #28]
 802aa3e:	08da      	lsrs	r2, r3, #3
 802aa40:	687b      	ldr	r3, [r7, #4]
 802aa42:	3208      	adds	r2, #8
 802aa44:	69b9      	ldr	r1, [r7, #24]
 802aa46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802aa4a:	687b      	ldr	r3, [r7, #4]
 802aa4c:	681b      	ldr	r3, [r3, #0]
 802aa4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 802aa50:	69fb      	ldr	r3, [r7, #28]
 802aa52:	005b      	lsls	r3, r3, #1
 802aa54:	2203      	movs	r2, #3
 802aa56:	fa02 f303 	lsl.w	r3, r2, r3
 802aa5a:	43db      	mvns	r3, r3
 802aa5c:	69ba      	ldr	r2, [r7, #24]
 802aa5e:	4013      	ands	r3, r2
 802aa60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802aa62:	683b      	ldr	r3, [r7, #0]
 802aa64:	685b      	ldr	r3, [r3, #4]
 802aa66:	f003 0203 	and.w	r2, r3, #3
 802aa6a:	69fb      	ldr	r3, [r7, #28]
 802aa6c:	005b      	lsls	r3, r3, #1
 802aa6e:	fa02 f303 	lsl.w	r3, r2, r3
 802aa72:	69ba      	ldr	r2, [r7, #24]
 802aa74:	4313      	orrs	r3, r2
 802aa76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802aa78:	687b      	ldr	r3, [r7, #4]
 802aa7a:	69ba      	ldr	r2, [r7, #24]
 802aa7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802aa7e:	683b      	ldr	r3, [r7, #0]
 802aa80:	685b      	ldr	r3, [r3, #4]
 802aa82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802aa86:	2b00      	cmp	r3, #0
 802aa88:	f000 80e0 	beq.w	802ac4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802aa8c:	4b2f      	ldr	r3, [pc, #188]	; (802ab4c <HAL_GPIO_Init+0x238>)
 802aa8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802aa92:	4a2e      	ldr	r2, [pc, #184]	; (802ab4c <HAL_GPIO_Init+0x238>)
 802aa94:	f043 0302 	orr.w	r3, r3, #2
 802aa98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802aa9c:	4b2b      	ldr	r3, [pc, #172]	; (802ab4c <HAL_GPIO_Init+0x238>)
 802aa9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802aaa2:	f003 0302 	and.w	r3, r3, #2
 802aaa6:	60fb      	str	r3, [r7, #12]
 802aaa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802aaaa:	4a29      	ldr	r2, [pc, #164]	; (802ab50 <HAL_GPIO_Init+0x23c>)
 802aaac:	69fb      	ldr	r3, [r7, #28]
 802aaae:	089b      	lsrs	r3, r3, #2
 802aab0:	3302      	adds	r3, #2
 802aab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802aab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 802aab8:	69fb      	ldr	r3, [r7, #28]
 802aaba:	f003 0303 	and.w	r3, r3, #3
 802aabe:	009b      	lsls	r3, r3, #2
 802aac0:	220f      	movs	r2, #15
 802aac2:	fa02 f303 	lsl.w	r3, r2, r3
 802aac6:	43db      	mvns	r3, r3
 802aac8:	69ba      	ldr	r2, [r7, #24]
 802aaca:	4013      	ands	r3, r2
 802aacc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 802aace:	687b      	ldr	r3, [r7, #4]
 802aad0:	4a20      	ldr	r2, [pc, #128]	; (802ab54 <HAL_GPIO_Init+0x240>)
 802aad2:	4293      	cmp	r3, r2
 802aad4:	d052      	beq.n	802ab7c <HAL_GPIO_Init+0x268>
 802aad6:	687b      	ldr	r3, [r7, #4]
 802aad8:	4a1f      	ldr	r2, [pc, #124]	; (802ab58 <HAL_GPIO_Init+0x244>)
 802aada:	4293      	cmp	r3, r2
 802aadc:	d031      	beq.n	802ab42 <HAL_GPIO_Init+0x22e>
 802aade:	687b      	ldr	r3, [r7, #4]
 802aae0:	4a1e      	ldr	r2, [pc, #120]	; (802ab5c <HAL_GPIO_Init+0x248>)
 802aae2:	4293      	cmp	r3, r2
 802aae4:	d02b      	beq.n	802ab3e <HAL_GPIO_Init+0x22a>
 802aae6:	687b      	ldr	r3, [r7, #4]
 802aae8:	4a1d      	ldr	r2, [pc, #116]	; (802ab60 <HAL_GPIO_Init+0x24c>)
 802aaea:	4293      	cmp	r3, r2
 802aaec:	d025      	beq.n	802ab3a <HAL_GPIO_Init+0x226>
 802aaee:	687b      	ldr	r3, [r7, #4]
 802aaf0:	4a1c      	ldr	r2, [pc, #112]	; (802ab64 <HAL_GPIO_Init+0x250>)
 802aaf2:	4293      	cmp	r3, r2
 802aaf4:	d01f      	beq.n	802ab36 <HAL_GPIO_Init+0x222>
 802aaf6:	687b      	ldr	r3, [r7, #4]
 802aaf8:	4a1b      	ldr	r2, [pc, #108]	; (802ab68 <HAL_GPIO_Init+0x254>)
 802aafa:	4293      	cmp	r3, r2
 802aafc:	d019      	beq.n	802ab32 <HAL_GPIO_Init+0x21e>
 802aafe:	687b      	ldr	r3, [r7, #4]
 802ab00:	4a1a      	ldr	r2, [pc, #104]	; (802ab6c <HAL_GPIO_Init+0x258>)
 802ab02:	4293      	cmp	r3, r2
 802ab04:	d013      	beq.n	802ab2e <HAL_GPIO_Init+0x21a>
 802ab06:	687b      	ldr	r3, [r7, #4]
 802ab08:	4a19      	ldr	r2, [pc, #100]	; (802ab70 <HAL_GPIO_Init+0x25c>)
 802ab0a:	4293      	cmp	r3, r2
 802ab0c:	d00d      	beq.n	802ab2a <HAL_GPIO_Init+0x216>
 802ab0e:	687b      	ldr	r3, [r7, #4]
 802ab10:	4a18      	ldr	r2, [pc, #96]	; (802ab74 <HAL_GPIO_Init+0x260>)
 802ab12:	4293      	cmp	r3, r2
 802ab14:	d007      	beq.n	802ab26 <HAL_GPIO_Init+0x212>
 802ab16:	687b      	ldr	r3, [r7, #4]
 802ab18:	4a17      	ldr	r2, [pc, #92]	; (802ab78 <HAL_GPIO_Init+0x264>)
 802ab1a:	4293      	cmp	r3, r2
 802ab1c:	d101      	bne.n	802ab22 <HAL_GPIO_Init+0x20e>
 802ab1e:	2309      	movs	r3, #9
 802ab20:	e02d      	b.n	802ab7e <HAL_GPIO_Init+0x26a>
 802ab22:	230a      	movs	r3, #10
 802ab24:	e02b      	b.n	802ab7e <HAL_GPIO_Init+0x26a>
 802ab26:	2308      	movs	r3, #8
 802ab28:	e029      	b.n	802ab7e <HAL_GPIO_Init+0x26a>
 802ab2a:	2307      	movs	r3, #7
 802ab2c:	e027      	b.n	802ab7e <HAL_GPIO_Init+0x26a>
 802ab2e:	2306      	movs	r3, #6
 802ab30:	e025      	b.n	802ab7e <HAL_GPIO_Init+0x26a>
 802ab32:	2305      	movs	r3, #5
 802ab34:	e023      	b.n	802ab7e <HAL_GPIO_Init+0x26a>
 802ab36:	2304      	movs	r3, #4
 802ab38:	e021      	b.n	802ab7e <HAL_GPIO_Init+0x26a>
 802ab3a:	2303      	movs	r3, #3
 802ab3c:	e01f      	b.n	802ab7e <HAL_GPIO_Init+0x26a>
 802ab3e:	2302      	movs	r3, #2
 802ab40:	e01d      	b.n	802ab7e <HAL_GPIO_Init+0x26a>
 802ab42:	2301      	movs	r3, #1
 802ab44:	e01b      	b.n	802ab7e <HAL_GPIO_Init+0x26a>
 802ab46:	bf00      	nop
 802ab48:	58000080 	.word	0x58000080
 802ab4c:	58024400 	.word	0x58024400
 802ab50:	58000400 	.word	0x58000400
 802ab54:	58020000 	.word	0x58020000
 802ab58:	58020400 	.word	0x58020400
 802ab5c:	58020800 	.word	0x58020800
 802ab60:	58020c00 	.word	0x58020c00
 802ab64:	58021000 	.word	0x58021000
 802ab68:	58021400 	.word	0x58021400
 802ab6c:	58021800 	.word	0x58021800
 802ab70:	58021c00 	.word	0x58021c00
 802ab74:	58022000 	.word	0x58022000
 802ab78:	58022400 	.word	0x58022400
 802ab7c:	2300      	movs	r3, #0
 802ab7e:	69fa      	ldr	r2, [r7, #28]
 802ab80:	f002 0203 	and.w	r2, r2, #3
 802ab84:	0092      	lsls	r2, r2, #2
 802ab86:	4093      	lsls	r3, r2
 802ab88:	69ba      	ldr	r2, [r7, #24]
 802ab8a:	4313      	orrs	r3, r2
 802ab8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802ab8e:	4938      	ldr	r1, [pc, #224]	; (802ac70 <HAL_GPIO_Init+0x35c>)
 802ab90:	69fb      	ldr	r3, [r7, #28]
 802ab92:	089b      	lsrs	r3, r3, #2
 802ab94:	3302      	adds	r3, #2
 802ab96:	69ba      	ldr	r2, [r7, #24]
 802ab98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 802ab9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aba0:	681b      	ldr	r3, [r3, #0]
 802aba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802aba4:	693b      	ldr	r3, [r7, #16]
 802aba6:	43db      	mvns	r3, r3
 802aba8:	69ba      	ldr	r2, [r7, #24]
 802abaa:	4013      	ands	r3, r2
 802abac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802abae:	683b      	ldr	r3, [r7, #0]
 802abb0:	685b      	ldr	r3, [r3, #4]
 802abb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802abb6:	2b00      	cmp	r3, #0
 802abb8:	d003      	beq.n	802abc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 802abba:	69ba      	ldr	r2, [r7, #24]
 802abbc:	693b      	ldr	r3, [r7, #16]
 802abbe:	4313      	orrs	r3, r2
 802abc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 802abc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802abc6:	69bb      	ldr	r3, [r7, #24]
 802abc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 802abca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802abce:	685b      	ldr	r3, [r3, #4]
 802abd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802abd2:	693b      	ldr	r3, [r7, #16]
 802abd4:	43db      	mvns	r3, r3
 802abd6:	69ba      	ldr	r2, [r7, #24]
 802abd8:	4013      	ands	r3, r2
 802abda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802abdc:	683b      	ldr	r3, [r7, #0]
 802abde:	685b      	ldr	r3, [r3, #4]
 802abe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802abe4:	2b00      	cmp	r3, #0
 802abe6:	d003      	beq.n	802abf0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802abe8:	69ba      	ldr	r2, [r7, #24]
 802abea:	693b      	ldr	r3, [r7, #16]
 802abec:	4313      	orrs	r3, r2
 802abee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 802abf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802abf4:	69bb      	ldr	r3, [r7, #24]
 802abf6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 802abf8:	697b      	ldr	r3, [r7, #20]
 802abfa:	685b      	ldr	r3, [r3, #4]
 802abfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802abfe:	693b      	ldr	r3, [r7, #16]
 802ac00:	43db      	mvns	r3, r3
 802ac02:	69ba      	ldr	r2, [r7, #24]
 802ac04:	4013      	ands	r3, r2
 802ac06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802ac08:	683b      	ldr	r3, [r7, #0]
 802ac0a:	685b      	ldr	r3, [r3, #4]
 802ac0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802ac10:	2b00      	cmp	r3, #0
 802ac12:	d003      	beq.n	802ac1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 802ac14:	69ba      	ldr	r2, [r7, #24]
 802ac16:	693b      	ldr	r3, [r7, #16]
 802ac18:	4313      	orrs	r3, r2
 802ac1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 802ac1c:	697b      	ldr	r3, [r7, #20]
 802ac1e:	69ba      	ldr	r2, [r7, #24]
 802ac20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 802ac22:	697b      	ldr	r3, [r7, #20]
 802ac24:	681b      	ldr	r3, [r3, #0]
 802ac26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802ac28:	693b      	ldr	r3, [r7, #16]
 802ac2a:	43db      	mvns	r3, r3
 802ac2c:	69ba      	ldr	r2, [r7, #24]
 802ac2e:	4013      	ands	r3, r2
 802ac30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802ac32:	683b      	ldr	r3, [r7, #0]
 802ac34:	685b      	ldr	r3, [r3, #4]
 802ac36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802ac3a:	2b00      	cmp	r3, #0
 802ac3c:	d003      	beq.n	802ac46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 802ac3e:	69ba      	ldr	r2, [r7, #24]
 802ac40:	693b      	ldr	r3, [r7, #16]
 802ac42:	4313      	orrs	r3, r2
 802ac44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 802ac46:	697b      	ldr	r3, [r7, #20]
 802ac48:	69ba      	ldr	r2, [r7, #24]
 802ac4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 802ac4c:	69fb      	ldr	r3, [r7, #28]
 802ac4e:	3301      	adds	r3, #1
 802ac50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802ac52:	683b      	ldr	r3, [r7, #0]
 802ac54:	681a      	ldr	r2, [r3, #0]
 802ac56:	69fb      	ldr	r3, [r7, #28]
 802ac58:	fa22 f303 	lsr.w	r3, r2, r3
 802ac5c:	2b00      	cmp	r3, #0
 802ac5e:	f47f ae63 	bne.w	802a928 <HAL_GPIO_Init+0x14>
  }
}
 802ac62:	bf00      	nop
 802ac64:	bf00      	nop
 802ac66:	3724      	adds	r7, #36	; 0x24
 802ac68:	46bd      	mov	sp, r7
 802ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac6e:	4770      	bx	lr
 802ac70:	58000400 	.word	0x58000400

0802ac74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 802ac74:	b480      	push	{r7}
 802ac76:	b087      	sub	sp, #28
 802ac78:	af00      	add	r7, sp, #0
 802ac7a:	6078      	str	r0, [r7, #4]
 802ac7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 802ac7e:	2300      	movs	r3, #0
 802ac80:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 802ac82:	4b75      	ldr	r3, [pc, #468]	; (802ae58 <HAL_GPIO_DeInit+0x1e4>)
 802ac84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 802ac86:	e0d9      	b.n	802ae3c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 802ac88:	2201      	movs	r2, #1
 802ac8a:	697b      	ldr	r3, [r7, #20]
 802ac8c:	fa02 f303 	lsl.w	r3, r2, r3
 802ac90:	683a      	ldr	r2, [r7, #0]
 802ac92:	4013      	ands	r3, r2
 802ac94:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 802ac96:	68fb      	ldr	r3, [r7, #12]
 802ac98:	2b00      	cmp	r3, #0
 802ac9a:	f000 80cc 	beq.w	802ae36 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 802ac9e:	4a6f      	ldr	r2, [pc, #444]	; (802ae5c <HAL_GPIO_DeInit+0x1e8>)
 802aca0:	697b      	ldr	r3, [r7, #20]
 802aca2:	089b      	lsrs	r3, r3, #2
 802aca4:	3302      	adds	r3, #2
 802aca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802acaa:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 802acac:	697b      	ldr	r3, [r7, #20]
 802acae:	f003 0303 	and.w	r3, r3, #3
 802acb2:	009b      	lsls	r3, r3, #2
 802acb4:	220f      	movs	r2, #15
 802acb6:	fa02 f303 	lsl.w	r3, r2, r3
 802acba:	68ba      	ldr	r2, [r7, #8]
 802acbc:	4013      	ands	r3, r2
 802acbe:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 802acc0:	687b      	ldr	r3, [r7, #4]
 802acc2:	4a67      	ldr	r2, [pc, #412]	; (802ae60 <HAL_GPIO_DeInit+0x1ec>)
 802acc4:	4293      	cmp	r3, r2
 802acc6:	d037      	beq.n	802ad38 <HAL_GPIO_DeInit+0xc4>
 802acc8:	687b      	ldr	r3, [r7, #4]
 802acca:	4a66      	ldr	r2, [pc, #408]	; (802ae64 <HAL_GPIO_DeInit+0x1f0>)
 802accc:	4293      	cmp	r3, r2
 802acce:	d031      	beq.n	802ad34 <HAL_GPIO_DeInit+0xc0>
 802acd0:	687b      	ldr	r3, [r7, #4]
 802acd2:	4a65      	ldr	r2, [pc, #404]	; (802ae68 <HAL_GPIO_DeInit+0x1f4>)
 802acd4:	4293      	cmp	r3, r2
 802acd6:	d02b      	beq.n	802ad30 <HAL_GPIO_DeInit+0xbc>
 802acd8:	687b      	ldr	r3, [r7, #4]
 802acda:	4a64      	ldr	r2, [pc, #400]	; (802ae6c <HAL_GPIO_DeInit+0x1f8>)
 802acdc:	4293      	cmp	r3, r2
 802acde:	d025      	beq.n	802ad2c <HAL_GPIO_DeInit+0xb8>
 802ace0:	687b      	ldr	r3, [r7, #4]
 802ace2:	4a63      	ldr	r2, [pc, #396]	; (802ae70 <HAL_GPIO_DeInit+0x1fc>)
 802ace4:	4293      	cmp	r3, r2
 802ace6:	d01f      	beq.n	802ad28 <HAL_GPIO_DeInit+0xb4>
 802ace8:	687b      	ldr	r3, [r7, #4]
 802acea:	4a62      	ldr	r2, [pc, #392]	; (802ae74 <HAL_GPIO_DeInit+0x200>)
 802acec:	4293      	cmp	r3, r2
 802acee:	d019      	beq.n	802ad24 <HAL_GPIO_DeInit+0xb0>
 802acf0:	687b      	ldr	r3, [r7, #4]
 802acf2:	4a61      	ldr	r2, [pc, #388]	; (802ae78 <HAL_GPIO_DeInit+0x204>)
 802acf4:	4293      	cmp	r3, r2
 802acf6:	d013      	beq.n	802ad20 <HAL_GPIO_DeInit+0xac>
 802acf8:	687b      	ldr	r3, [r7, #4]
 802acfa:	4a60      	ldr	r2, [pc, #384]	; (802ae7c <HAL_GPIO_DeInit+0x208>)
 802acfc:	4293      	cmp	r3, r2
 802acfe:	d00d      	beq.n	802ad1c <HAL_GPIO_DeInit+0xa8>
 802ad00:	687b      	ldr	r3, [r7, #4]
 802ad02:	4a5f      	ldr	r2, [pc, #380]	; (802ae80 <HAL_GPIO_DeInit+0x20c>)
 802ad04:	4293      	cmp	r3, r2
 802ad06:	d007      	beq.n	802ad18 <HAL_GPIO_DeInit+0xa4>
 802ad08:	687b      	ldr	r3, [r7, #4]
 802ad0a:	4a5e      	ldr	r2, [pc, #376]	; (802ae84 <HAL_GPIO_DeInit+0x210>)
 802ad0c:	4293      	cmp	r3, r2
 802ad0e:	d101      	bne.n	802ad14 <HAL_GPIO_DeInit+0xa0>
 802ad10:	2309      	movs	r3, #9
 802ad12:	e012      	b.n	802ad3a <HAL_GPIO_DeInit+0xc6>
 802ad14:	230a      	movs	r3, #10
 802ad16:	e010      	b.n	802ad3a <HAL_GPIO_DeInit+0xc6>
 802ad18:	2308      	movs	r3, #8
 802ad1a:	e00e      	b.n	802ad3a <HAL_GPIO_DeInit+0xc6>
 802ad1c:	2307      	movs	r3, #7
 802ad1e:	e00c      	b.n	802ad3a <HAL_GPIO_DeInit+0xc6>
 802ad20:	2306      	movs	r3, #6
 802ad22:	e00a      	b.n	802ad3a <HAL_GPIO_DeInit+0xc6>
 802ad24:	2305      	movs	r3, #5
 802ad26:	e008      	b.n	802ad3a <HAL_GPIO_DeInit+0xc6>
 802ad28:	2304      	movs	r3, #4
 802ad2a:	e006      	b.n	802ad3a <HAL_GPIO_DeInit+0xc6>
 802ad2c:	2303      	movs	r3, #3
 802ad2e:	e004      	b.n	802ad3a <HAL_GPIO_DeInit+0xc6>
 802ad30:	2302      	movs	r3, #2
 802ad32:	e002      	b.n	802ad3a <HAL_GPIO_DeInit+0xc6>
 802ad34:	2301      	movs	r3, #1
 802ad36:	e000      	b.n	802ad3a <HAL_GPIO_DeInit+0xc6>
 802ad38:	2300      	movs	r3, #0
 802ad3a:	697a      	ldr	r2, [r7, #20]
 802ad3c:	f002 0203 	and.w	r2, r2, #3
 802ad40:	0092      	lsls	r2, r2, #2
 802ad42:	4093      	lsls	r3, r2
 802ad44:	68ba      	ldr	r2, [r7, #8]
 802ad46:	429a      	cmp	r2, r3
 802ad48:	d136      	bne.n	802adb8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 802ad4a:	693b      	ldr	r3, [r7, #16]
 802ad4c:	681a      	ldr	r2, [r3, #0]
 802ad4e:	68fb      	ldr	r3, [r7, #12]
 802ad50:	43db      	mvns	r3, r3
 802ad52:	401a      	ands	r2, r3
 802ad54:	693b      	ldr	r3, [r7, #16]
 802ad56:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 802ad58:	693b      	ldr	r3, [r7, #16]
 802ad5a:	685a      	ldr	r2, [r3, #4]
 802ad5c:	68fb      	ldr	r3, [r7, #12]
 802ad5e:	43db      	mvns	r3, r3
 802ad60:	401a      	ands	r2, r3
 802ad62:	693b      	ldr	r3, [r7, #16]
 802ad64:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 802ad66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ad6a:	685a      	ldr	r2, [r3, #4]
 802ad6c:	68fb      	ldr	r3, [r7, #12]
 802ad6e:	43db      	mvns	r3, r3
 802ad70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ad74:	4013      	ands	r3, r2
 802ad76:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 802ad78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ad7c:	681a      	ldr	r2, [r3, #0]
 802ad7e:	68fb      	ldr	r3, [r7, #12]
 802ad80:	43db      	mvns	r3, r3
 802ad82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ad86:	4013      	ands	r3, r2
 802ad88:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 802ad8a:	697b      	ldr	r3, [r7, #20]
 802ad8c:	f003 0303 	and.w	r3, r3, #3
 802ad90:	009b      	lsls	r3, r3, #2
 802ad92:	220f      	movs	r2, #15
 802ad94:	fa02 f303 	lsl.w	r3, r2, r3
 802ad98:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 802ad9a:	4a30      	ldr	r2, [pc, #192]	; (802ae5c <HAL_GPIO_DeInit+0x1e8>)
 802ad9c:	697b      	ldr	r3, [r7, #20]
 802ad9e:	089b      	lsrs	r3, r3, #2
 802ada0:	3302      	adds	r3, #2
 802ada2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802ada6:	68bb      	ldr	r3, [r7, #8]
 802ada8:	43da      	mvns	r2, r3
 802adaa:	482c      	ldr	r0, [pc, #176]	; (802ae5c <HAL_GPIO_DeInit+0x1e8>)
 802adac:	697b      	ldr	r3, [r7, #20]
 802adae:	089b      	lsrs	r3, r3, #2
 802adb0:	400a      	ands	r2, r1
 802adb2:	3302      	adds	r3, #2
 802adb4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 802adb8:	687b      	ldr	r3, [r7, #4]
 802adba:	681a      	ldr	r2, [r3, #0]
 802adbc:	697b      	ldr	r3, [r7, #20]
 802adbe:	005b      	lsls	r3, r3, #1
 802adc0:	2103      	movs	r1, #3
 802adc2:	fa01 f303 	lsl.w	r3, r1, r3
 802adc6:	431a      	orrs	r2, r3
 802adc8:	687b      	ldr	r3, [r7, #4]
 802adca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 802adcc:	697b      	ldr	r3, [r7, #20]
 802adce:	08da      	lsrs	r2, r3, #3
 802add0:	687b      	ldr	r3, [r7, #4]
 802add2:	3208      	adds	r2, #8
 802add4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802add8:	697b      	ldr	r3, [r7, #20]
 802adda:	f003 0307 	and.w	r3, r3, #7
 802adde:	009b      	lsls	r3, r3, #2
 802ade0:	220f      	movs	r2, #15
 802ade2:	fa02 f303 	lsl.w	r3, r2, r3
 802ade6:	43db      	mvns	r3, r3
 802ade8:	697a      	ldr	r2, [r7, #20]
 802adea:	08d2      	lsrs	r2, r2, #3
 802adec:	4019      	ands	r1, r3
 802adee:	687b      	ldr	r3, [r7, #4]
 802adf0:	3208      	adds	r2, #8
 802adf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802adf6:	687b      	ldr	r3, [r7, #4]
 802adf8:	68da      	ldr	r2, [r3, #12]
 802adfa:	697b      	ldr	r3, [r7, #20]
 802adfc:	005b      	lsls	r3, r3, #1
 802adfe:	2103      	movs	r1, #3
 802ae00:	fa01 f303 	lsl.w	r3, r1, r3
 802ae04:	43db      	mvns	r3, r3
 802ae06:	401a      	ands	r2, r3
 802ae08:	687b      	ldr	r3, [r7, #4]
 802ae0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 802ae0c:	687b      	ldr	r3, [r7, #4]
 802ae0e:	685a      	ldr	r2, [r3, #4]
 802ae10:	2101      	movs	r1, #1
 802ae12:	697b      	ldr	r3, [r7, #20]
 802ae14:	fa01 f303 	lsl.w	r3, r1, r3
 802ae18:	43db      	mvns	r3, r3
 802ae1a:	401a      	ands	r2, r3
 802ae1c:	687b      	ldr	r3, [r7, #4]
 802ae1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802ae20:	687b      	ldr	r3, [r7, #4]
 802ae22:	689a      	ldr	r2, [r3, #8]
 802ae24:	697b      	ldr	r3, [r7, #20]
 802ae26:	005b      	lsls	r3, r3, #1
 802ae28:	2103      	movs	r1, #3
 802ae2a:	fa01 f303 	lsl.w	r3, r1, r3
 802ae2e:	43db      	mvns	r3, r3
 802ae30:	401a      	ands	r2, r3
 802ae32:	687b      	ldr	r3, [r7, #4]
 802ae34:	609a      	str	r2, [r3, #8]
    }

    position++;
 802ae36:	697b      	ldr	r3, [r7, #20]
 802ae38:	3301      	adds	r3, #1
 802ae3a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 802ae3c:	683a      	ldr	r2, [r7, #0]
 802ae3e:	697b      	ldr	r3, [r7, #20]
 802ae40:	fa22 f303 	lsr.w	r3, r2, r3
 802ae44:	2b00      	cmp	r3, #0
 802ae46:	f47f af1f 	bne.w	802ac88 <HAL_GPIO_DeInit+0x14>
  }
}
 802ae4a:	bf00      	nop
 802ae4c:	bf00      	nop
 802ae4e:	371c      	adds	r7, #28
 802ae50:	46bd      	mov	sp, r7
 802ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae56:	4770      	bx	lr
 802ae58:	58000080 	.word	0x58000080
 802ae5c:	58000400 	.word	0x58000400
 802ae60:	58020000 	.word	0x58020000
 802ae64:	58020400 	.word	0x58020400
 802ae68:	58020800 	.word	0x58020800
 802ae6c:	58020c00 	.word	0x58020c00
 802ae70:	58021000 	.word	0x58021000
 802ae74:	58021400 	.word	0x58021400
 802ae78:	58021800 	.word	0x58021800
 802ae7c:	58021c00 	.word	0x58021c00
 802ae80:	58022000 	.word	0x58022000
 802ae84:	58022400 	.word	0x58022400

0802ae88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 802ae88:	b480      	push	{r7}
 802ae8a:	b085      	sub	sp, #20
 802ae8c:	af00      	add	r7, sp, #0
 802ae8e:	6078      	str	r0, [r7, #4]
 802ae90:	460b      	mov	r3, r1
 802ae92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 802ae94:	687b      	ldr	r3, [r7, #4]
 802ae96:	691a      	ldr	r2, [r3, #16]
 802ae98:	887b      	ldrh	r3, [r7, #2]
 802ae9a:	4013      	ands	r3, r2
 802ae9c:	2b00      	cmp	r3, #0
 802ae9e:	d002      	beq.n	802aea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 802aea0:	2301      	movs	r3, #1
 802aea2:	73fb      	strb	r3, [r7, #15]
 802aea4:	e001      	b.n	802aeaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 802aea6:	2300      	movs	r3, #0
 802aea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 802aeaa:	7bfb      	ldrb	r3, [r7, #15]
}
 802aeac:	4618      	mov	r0, r3
 802aeae:	3714      	adds	r7, #20
 802aeb0:	46bd      	mov	sp, r7
 802aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aeb6:	4770      	bx	lr

0802aeb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802aeb8:	b480      	push	{r7}
 802aeba:	b083      	sub	sp, #12
 802aebc:	af00      	add	r7, sp, #0
 802aebe:	6078      	str	r0, [r7, #4]
 802aec0:	460b      	mov	r3, r1
 802aec2:	807b      	strh	r3, [r7, #2]
 802aec4:	4613      	mov	r3, r2
 802aec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 802aec8:	787b      	ldrb	r3, [r7, #1]
 802aeca:	2b00      	cmp	r3, #0
 802aecc:	d003      	beq.n	802aed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802aece:	887a      	ldrh	r2, [r7, #2]
 802aed0:	687b      	ldr	r3, [r7, #4]
 802aed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 802aed4:	e003      	b.n	802aede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802aed6:	887b      	ldrh	r3, [r7, #2]
 802aed8:	041a      	lsls	r2, r3, #16
 802aeda:	687b      	ldr	r3, [r7, #4]
 802aedc:	619a      	str	r2, [r3, #24]
}
 802aede:	bf00      	nop
 802aee0:	370c      	adds	r7, #12
 802aee2:	46bd      	mov	sp, r7
 802aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aee8:	4770      	bx	lr

0802aeea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 802aeea:	b480      	push	{r7}
 802aeec:	b085      	sub	sp, #20
 802aeee:	af00      	add	r7, sp, #0
 802aef0:	6078      	str	r0, [r7, #4]
 802aef2:	460b      	mov	r3, r1
 802aef4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 802aef6:	687b      	ldr	r3, [r7, #4]
 802aef8:	695b      	ldr	r3, [r3, #20]
 802aefa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 802aefc:	887a      	ldrh	r2, [r7, #2]
 802aefe:	68fb      	ldr	r3, [r7, #12]
 802af00:	4013      	ands	r3, r2
 802af02:	041a      	lsls	r2, r3, #16
 802af04:	68fb      	ldr	r3, [r7, #12]
 802af06:	43d9      	mvns	r1, r3
 802af08:	887b      	ldrh	r3, [r7, #2]
 802af0a:	400b      	ands	r3, r1
 802af0c:	431a      	orrs	r2, r3
 802af0e:	687b      	ldr	r3, [r7, #4]
 802af10:	619a      	str	r2, [r3, #24]
}
 802af12:	bf00      	nop
 802af14:	3714      	adds	r7, #20
 802af16:	46bd      	mov	sp, r7
 802af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af1c:	4770      	bx	lr
	...

0802af20 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 802af20:	b480      	push	{r7}
 802af22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 802af24:	4b05      	ldr	r3, [pc, #20]	; (802af3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 802af26:	681b      	ldr	r3, [r3, #0]
 802af28:	4a04      	ldr	r2, [pc, #16]	; (802af3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 802af2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802af2e:	6013      	str	r3, [r2, #0]
}
 802af30:	bf00      	nop
 802af32:	46bd      	mov	sp, r7
 802af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af38:	4770      	bx	lr
 802af3a:	bf00      	nop
 802af3c:	58024800 	.word	0x58024800

0802af40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 802af40:	b580      	push	{r7, lr}
 802af42:	b084      	sub	sp, #16
 802af44:	af00      	add	r7, sp, #0
 802af46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 802af48:	4b19      	ldr	r3, [pc, #100]	; (802afb0 <HAL_PWREx_ConfigSupply+0x70>)
 802af4a:	68db      	ldr	r3, [r3, #12]
 802af4c:	f003 0304 	and.w	r3, r3, #4
 802af50:	2b04      	cmp	r3, #4
 802af52:	d00a      	beq.n	802af6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 802af54:	4b16      	ldr	r3, [pc, #88]	; (802afb0 <HAL_PWREx_ConfigSupply+0x70>)
 802af56:	68db      	ldr	r3, [r3, #12]
 802af58:	f003 0307 	and.w	r3, r3, #7
 802af5c:	687a      	ldr	r2, [r7, #4]
 802af5e:	429a      	cmp	r2, r3
 802af60:	d001      	beq.n	802af66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 802af62:	2301      	movs	r3, #1
 802af64:	e01f      	b.n	802afa6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 802af66:	2300      	movs	r3, #0
 802af68:	e01d      	b.n	802afa6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 802af6a:	4b11      	ldr	r3, [pc, #68]	; (802afb0 <HAL_PWREx_ConfigSupply+0x70>)
 802af6c:	68db      	ldr	r3, [r3, #12]
 802af6e:	f023 0207 	bic.w	r2, r3, #7
 802af72:	490f      	ldr	r1, [pc, #60]	; (802afb0 <HAL_PWREx_ConfigSupply+0x70>)
 802af74:	687b      	ldr	r3, [r7, #4]
 802af76:	4313      	orrs	r3, r2
 802af78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 802af7a:	f7ff f8bd 	bl	802a0f8 <HAL_GetTick>
 802af7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 802af80:	e009      	b.n	802af96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 802af82:	f7ff f8b9 	bl	802a0f8 <HAL_GetTick>
 802af86:	4602      	mov	r2, r0
 802af88:	68fb      	ldr	r3, [r7, #12]
 802af8a:	1ad3      	subs	r3, r2, r3
 802af8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802af90:	d901      	bls.n	802af96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 802af92:	2301      	movs	r3, #1
 802af94:	e007      	b.n	802afa6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 802af96:	4b06      	ldr	r3, [pc, #24]	; (802afb0 <HAL_PWREx_ConfigSupply+0x70>)
 802af98:	685b      	ldr	r3, [r3, #4]
 802af9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802af9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802afa2:	d1ee      	bne.n	802af82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 802afa4:	2300      	movs	r3, #0
}
 802afa6:	4618      	mov	r0, r3
 802afa8:	3710      	adds	r7, #16
 802afaa:	46bd      	mov	sp, r7
 802afac:	bd80      	pop	{r7, pc}
 802afae:	bf00      	nop
 802afb0:	58024800 	.word	0x58024800

0802afb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802afb4:	b580      	push	{r7, lr}
 802afb6:	b08c      	sub	sp, #48	; 0x30
 802afb8:	af00      	add	r7, sp, #0
 802afba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 802afbc:	687b      	ldr	r3, [r7, #4]
 802afbe:	2b00      	cmp	r3, #0
 802afc0:	d102      	bne.n	802afc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 802afc2:	2301      	movs	r3, #1
 802afc4:	f000 bc48 	b.w	802b858 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802afc8:	687b      	ldr	r3, [r7, #4]
 802afca:	681b      	ldr	r3, [r3, #0]
 802afcc:	f003 0301 	and.w	r3, r3, #1
 802afd0:	2b00      	cmp	r3, #0
 802afd2:	f000 8088 	beq.w	802b0e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802afd6:	4b99      	ldr	r3, [pc, #612]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802afd8:	691b      	ldr	r3, [r3, #16]
 802afda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802afde:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802afe0:	4b96      	ldr	r3, [pc, #600]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802afe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802afe4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 802afe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802afe8:	2b10      	cmp	r3, #16
 802afea:	d007      	beq.n	802affc <HAL_RCC_OscConfig+0x48>
 802afec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802afee:	2b18      	cmp	r3, #24
 802aff0:	d111      	bne.n	802b016 <HAL_RCC_OscConfig+0x62>
 802aff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aff4:	f003 0303 	and.w	r3, r3, #3
 802aff8:	2b02      	cmp	r3, #2
 802affa:	d10c      	bne.n	802b016 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802affc:	4b8f      	ldr	r3, [pc, #572]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802affe:	681b      	ldr	r3, [r3, #0]
 802b000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802b004:	2b00      	cmp	r3, #0
 802b006:	d06d      	beq.n	802b0e4 <HAL_RCC_OscConfig+0x130>
 802b008:	687b      	ldr	r3, [r7, #4]
 802b00a:	685b      	ldr	r3, [r3, #4]
 802b00c:	2b00      	cmp	r3, #0
 802b00e:	d169      	bne.n	802b0e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 802b010:	2301      	movs	r3, #1
 802b012:	f000 bc21 	b.w	802b858 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802b016:	687b      	ldr	r3, [r7, #4]
 802b018:	685b      	ldr	r3, [r3, #4]
 802b01a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802b01e:	d106      	bne.n	802b02e <HAL_RCC_OscConfig+0x7a>
 802b020:	4b86      	ldr	r3, [pc, #536]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b022:	681b      	ldr	r3, [r3, #0]
 802b024:	4a85      	ldr	r2, [pc, #532]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802b02a:	6013      	str	r3, [r2, #0]
 802b02c:	e02e      	b.n	802b08c <HAL_RCC_OscConfig+0xd8>
 802b02e:	687b      	ldr	r3, [r7, #4]
 802b030:	685b      	ldr	r3, [r3, #4]
 802b032:	2b00      	cmp	r3, #0
 802b034:	d10c      	bne.n	802b050 <HAL_RCC_OscConfig+0x9c>
 802b036:	4b81      	ldr	r3, [pc, #516]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b038:	681b      	ldr	r3, [r3, #0]
 802b03a:	4a80      	ldr	r2, [pc, #512]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b03c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802b040:	6013      	str	r3, [r2, #0]
 802b042:	4b7e      	ldr	r3, [pc, #504]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b044:	681b      	ldr	r3, [r3, #0]
 802b046:	4a7d      	ldr	r2, [pc, #500]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802b04c:	6013      	str	r3, [r2, #0]
 802b04e:	e01d      	b.n	802b08c <HAL_RCC_OscConfig+0xd8>
 802b050:	687b      	ldr	r3, [r7, #4]
 802b052:	685b      	ldr	r3, [r3, #4]
 802b054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802b058:	d10c      	bne.n	802b074 <HAL_RCC_OscConfig+0xc0>
 802b05a:	4b78      	ldr	r3, [pc, #480]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b05c:	681b      	ldr	r3, [r3, #0]
 802b05e:	4a77      	ldr	r2, [pc, #476]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802b064:	6013      	str	r3, [r2, #0]
 802b066:	4b75      	ldr	r3, [pc, #468]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b068:	681b      	ldr	r3, [r3, #0]
 802b06a:	4a74      	ldr	r2, [pc, #464]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b06c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802b070:	6013      	str	r3, [r2, #0]
 802b072:	e00b      	b.n	802b08c <HAL_RCC_OscConfig+0xd8>
 802b074:	4b71      	ldr	r3, [pc, #452]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b076:	681b      	ldr	r3, [r3, #0]
 802b078:	4a70      	ldr	r2, [pc, #448]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b07a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802b07e:	6013      	str	r3, [r2, #0]
 802b080:	4b6e      	ldr	r3, [pc, #440]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b082:	681b      	ldr	r3, [r3, #0]
 802b084:	4a6d      	ldr	r2, [pc, #436]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802b08a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 802b08c:	687b      	ldr	r3, [r7, #4]
 802b08e:	685b      	ldr	r3, [r3, #4]
 802b090:	2b00      	cmp	r3, #0
 802b092:	d013      	beq.n	802b0bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b094:	f7ff f830 	bl	802a0f8 <HAL_GetTick>
 802b098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802b09a:	e008      	b.n	802b0ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802b09c:	f7ff f82c 	bl	802a0f8 <HAL_GetTick>
 802b0a0:	4602      	mov	r2, r0
 802b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b0a4:	1ad3      	subs	r3, r2, r3
 802b0a6:	2b64      	cmp	r3, #100	; 0x64
 802b0a8:	d901      	bls.n	802b0ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802b0aa:	2303      	movs	r3, #3
 802b0ac:	e3d4      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802b0ae:	4b63      	ldr	r3, [pc, #396]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b0b0:	681b      	ldr	r3, [r3, #0]
 802b0b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802b0b6:	2b00      	cmp	r3, #0
 802b0b8:	d0f0      	beq.n	802b09c <HAL_RCC_OscConfig+0xe8>
 802b0ba:	e014      	b.n	802b0e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b0bc:	f7ff f81c 	bl	802a0f8 <HAL_GetTick>
 802b0c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 802b0c2:	e008      	b.n	802b0d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802b0c4:	f7ff f818 	bl	802a0f8 <HAL_GetTick>
 802b0c8:	4602      	mov	r2, r0
 802b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b0cc:	1ad3      	subs	r3, r2, r3
 802b0ce:	2b64      	cmp	r3, #100	; 0x64
 802b0d0:	d901      	bls.n	802b0d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 802b0d2:	2303      	movs	r3, #3
 802b0d4:	e3c0      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 802b0d6:	4b59      	ldr	r3, [pc, #356]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b0d8:	681b      	ldr	r3, [r3, #0]
 802b0da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802b0de:	2b00      	cmp	r3, #0
 802b0e0:	d1f0      	bne.n	802b0c4 <HAL_RCC_OscConfig+0x110>
 802b0e2:	e000      	b.n	802b0e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802b0e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802b0e6:	687b      	ldr	r3, [r7, #4]
 802b0e8:	681b      	ldr	r3, [r3, #0]
 802b0ea:	f003 0302 	and.w	r3, r3, #2
 802b0ee:	2b00      	cmp	r3, #0
 802b0f0:	f000 80ca 	beq.w	802b288 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802b0f4:	4b51      	ldr	r3, [pc, #324]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b0f6:	691b      	ldr	r3, [r3, #16]
 802b0f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802b0fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802b0fe:	4b4f      	ldr	r3, [pc, #316]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b102:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 802b104:	6a3b      	ldr	r3, [r7, #32]
 802b106:	2b00      	cmp	r3, #0
 802b108:	d007      	beq.n	802b11a <HAL_RCC_OscConfig+0x166>
 802b10a:	6a3b      	ldr	r3, [r7, #32]
 802b10c:	2b18      	cmp	r3, #24
 802b10e:	d156      	bne.n	802b1be <HAL_RCC_OscConfig+0x20a>
 802b110:	69fb      	ldr	r3, [r7, #28]
 802b112:	f003 0303 	and.w	r3, r3, #3
 802b116:	2b00      	cmp	r3, #0
 802b118:	d151      	bne.n	802b1be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802b11a:	4b48      	ldr	r3, [pc, #288]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b11c:	681b      	ldr	r3, [r3, #0]
 802b11e:	f003 0304 	and.w	r3, r3, #4
 802b122:	2b00      	cmp	r3, #0
 802b124:	d005      	beq.n	802b132 <HAL_RCC_OscConfig+0x17e>
 802b126:	687b      	ldr	r3, [r7, #4]
 802b128:	68db      	ldr	r3, [r3, #12]
 802b12a:	2b00      	cmp	r3, #0
 802b12c:	d101      	bne.n	802b132 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 802b12e:	2301      	movs	r3, #1
 802b130:	e392      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 802b132:	4b42      	ldr	r3, [pc, #264]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b134:	681b      	ldr	r3, [r3, #0]
 802b136:	f023 0219 	bic.w	r2, r3, #25
 802b13a:	687b      	ldr	r3, [r7, #4]
 802b13c:	68db      	ldr	r3, [r3, #12]
 802b13e:	493f      	ldr	r1, [pc, #252]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b140:	4313      	orrs	r3, r2
 802b142:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b144:	f7fe ffd8 	bl	802a0f8 <HAL_GetTick>
 802b148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802b14a:	e008      	b.n	802b15e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802b14c:	f7fe ffd4 	bl	802a0f8 <HAL_GetTick>
 802b150:	4602      	mov	r2, r0
 802b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b154:	1ad3      	subs	r3, r2, r3
 802b156:	2b02      	cmp	r3, #2
 802b158:	d901      	bls.n	802b15e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 802b15a:	2303      	movs	r3, #3
 802b15c:	e37c      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802b15e:	4b37      	ldr	r3, [pc, #220]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b160:	681b      	ldr	r3, [r3, #0]
 802b162:	f003 0304 	and.w	r3, r3, #4
 802b166:	2b00      	cmp	r3, #0
 802b168:	d0f0      	beq.n	802b14c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802b16a:	f7fe fff5 	bl	802a158 <HAL_GetREVID>
 802b16e:	4603      	mov	r3, r0
 802b170:	f241 0203 	movw	r2, #4099	; 0x1003
 802b174:	4293      	cmp	r3, r2
 802b176:	d817      	bhi.n	802b1a8 <HAL_RCC_OscConfig+0x1f4>
 802b178:	687b      	ldr	r3, [r7, #4]
 802b17a:	691b      	ldr	r3, [r3, #16]
 802b17c:	2b40      	cmp	r3, #64	; 0x40
 802b17e:	d108      	bne.n	802b192 <HAL_RCC_OscConfig+0x1de>
 802b180:	4b2e      	ldr	r3, [pc, #184]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b182:	685b      	ldr	r3, [r3, #4]
 802b184:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 802b188:	4a2c      	ldr	r2, [pc, #176]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b18a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b18e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802b190:	e07a      	b.n	802b288 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802b192:	4b2a      	ldr	r3, [pc, #168]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b194:	685b      	ldr	r3, [r3, #4]
 802b196:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802b19a:	687b      	ldr	r3, [r7, #4]
 802b19c:	691b      	ldr	r3, [r3, #16]
 802b19e:	031b      	lsls	r3, r3, #12
 802b1a0:	4926      	ldr	r1, [pc, #152]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b1a2:	4313      	orrs	r3, r2
 802b1a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802b1a6:	e06f      	b.n	802b288 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802b1a8:	4b24      	ldr	r3, [pc, #144]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b1aa:	685b      	ldr	r3, [r3, #4]
 802b1ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802b1b0:	687b      	ldr	r3, [r7, #4]
 802b1b2:	691b      	ldr	r3, [r3, #16]
 802b1b4:	061b      	lsls	r3, r3, #24
 802b1b6:	4921      	ldr	r1, [pc, #132]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b1b8:	4313      	orrs	r3, r2
 802b1ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802b1bc:	e064      	b.n	802b288 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 802b1be:	687b      	ldr	r3, [r7, #4]
 802b1c0:	68db      	ldr	r3, [r3, #12]
 802b1c2:	2b00      	cmp	r3, #0
 802b1c4:	d047      	beq.n	802b256 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 802b1c6:	4b1d      	ldr	r3, [pc, #116]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b1c8:	681b      	ldr	r3, [r3, #0]
 802b1ca:	f023 0219 	bic.w	r2, r3, #25
 802b1ce:	687b      	ldr	r3, [r7, #4]
 802b1d0:	68db      	ldr	r3, [r3, #12]
 802b1d2:	491a      	ldr	r1, [pc, #104]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b1d4:	4313      	orrs	r3, r2
 802b1d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b1d8:	f7fe ff8e 	bl	802a0f8 <HAL_GetTick>
 802b1dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802b1de:	e008      	b.n	802b1f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802b1e0:	f7fe ff8a 	bl	802a0f8 <HAL_GetTick>
 802b1e4:	4602      	mov	r2, r0
 802b1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1e8:	1ad3      	subs	r3, r2, r3
 802b1ea:	2b02      	cmp	r3, #2
 802b1ec:	d901      	bls.n	802b1f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 802b1ee:	2303      	movs	r3, #3
 802b1f0:	e332      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802b1f2:	4b12      	ldr	r3, [pc, #72]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b1f4:	681b      	ldr	r3, [r3, #0]
 802b1f6:	f003 0304 	and.w	r3, r3, #4
 802b1fa:	2b00      	cmp	r3, #0
 802b1fc:	d0f0      	beq.n	802b1e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802b1fe:	f7fe ffab 	bl	802a158 <HAL_GetREVID>
 802b202:	4603      	mov	r3, r0
 802b204:	f241 0203 	movw	r2, #4099	; 0x1003
 802b208:	4293      	cmp	r3, r2
 802b20a:	d819      	bhi.n	802b240 <HAL_RCC_OscConfig+0x28c>
 802b20c:	687b      	ldr	r3, [r7, #4]
 802b20e:	691b      	ldr	r3, [r3, #16]
 802b210:	2b40      	cmp	r3, #64	; 0x40
 802b212:	d108      	bne.n	802b226 <HAL_RCC_OscConfig+0x272>
 802b214:	4b09      	ldr	r3, [pc, #36]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b216:	685b      	ldr	r3, [r3, #4]
 802b218:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 802b21c:	4a07      	ldr	r2, [pc, #28]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b21e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b222:	6053      	str	r3, [r2, #4]
 802b224:	e030      	b.n	802b288 <HAL_RCC_OscConfig+0x2d4>
 802b226:	4b05      	ldr	r3, [pc, #20]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b228:	685b      	ldr	r3, [r3, #4]
 802b22a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802b22e:	687b      	ldr	r3, [r7, #4]
 802b230:	691b      	ldr	r3, [r3, #16]
 802b232:	031b      	lsls	r3, r3, #12
 802b234:	4901      	ldr	r1, [pc, #4]	; (802b23c <HAL_RCC_OscConfig+0x288>)
 802b236:	4313      	orrs	r3, r2
 802b238:	604b      	str	r3, [r1, #4]
 802b23a:	e025      	b.n	802b288 <HAL_RCC_OscConfig+0x2d4>
 802b23c:	58024400 	.word	0x58024400
 802b240:	4b9a      	ldr	r3, [pc, #616]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b242:	685b      	ldr	r3, [r3, #4]
 802b244:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 802b248:	687b      	ldr	r3, [r7, #4]
 802b24a:	691b      	ldr	r3, [r3, #16]
 802b24c:	061b      	lsls	r3, r3, #24
 802b24e:	4997      	ldr	r1, [pc, #604]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b250:	4313      	orrs	r3, r2
 802b252:	604b      	str	r3, [r1, #4]
 802b254:	e018      	b.n	802b288 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802b256:	4b95      	ldr	r3, [pc, #596]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b258:	681b      	ldr	r3, [r3, #0]
 802b25a:	4a94      	ldr	r2, [pc, #592]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b25c:	f023 0301 	bic.w	r3, r3, #1
 802b260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b262:	f7fe ff49 	bl	802a0f8 <HAL_GetTick>
 802b266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 802b268:	e008      	b.n	802b27c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802b26a:	f7fe ff45 	bl	802a0f8 <HAL_GetTick>
 802b26e:	4602      	mov	r2, r0
 802b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b272:	1ad3      	subs	r3, r2, r3
 802b274:	2b02      	cmp	r3, #2
 802b276:	d901      	bls.n	802b27c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 802b278:	2303      	movs	r3, #3
 802b27a:	e2ed      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 802b27c:	4b8b      	ldr	r3, [pc, #556]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b27e:	681b      	ldr	r3, [r3, #0]
 802b280:	f003 0304 	and.w	r3, r3, #4
 802b284:	2b00      	cmp	r3, #0
 802b286:	d1f0      	bne.n	802b26a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 802b288:	687b      	ldr	r3, [r7, #4]
 802b28a:	681b      	ldr	r3, [r3, #0]
 802b28c:	f003 0310 	and.w	r3, r3, #16
 802b290:	2b00      	cmp	r3, #0
 802b292:	f000 80a9 	beq.w	802b3e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802b296:	4b85      	ldr	r3, [pc, #532]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b298:	691b      	ldr	r3, [r3, #16]
 802b29a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802b29e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802b2a0:	4b82      	ldr	r3, [pc, #520]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b2a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 802b2a6:	69bb      	ldr	r3, [r7, #24]
 802b2a8:	2b08      	cmp	r3, #8
 802b2aa:	d007      	beq.n	802b2bc <HAL_RCC_OscConfig+0x308>
 802b2ac:	69bb      	ldr	r3, [r7, #24]
 802b2ae:	2b18      	cmp	r3, #24
 802b2b0:	d13a      	bne.n	802b328 <HAL_RCC_OscConfig+0x374>
 802b2b2:	697b      	ldr	r3, [r7, #20]
 802b2b4:	f003 0303 	and.w	r3, r3, #3
 802b2b8:	2b01      	cmp	r3, #1
 802b2ba:	d135      	bne.n	802b328 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802b2bc:	4b7b      	ldr	r3, [pc, #492]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b2be:	681b      	ldr	r3, [r3, #0]
 802b2c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b2c4:	2b00      	cmp	r3, #0
 802b2c6:	d005      	beq.n	802b2d4 <HAL_RCC_OscConfig+0x320>
 802b2c8:	687b      	ldr	r3, [r7, #4]
 802b2ca:	69db      	ldr	r3, [r3, #28]
 802b2cc:	2b80      	cmp	r3, #128	; 0x80
 802b2ce:	d001      	beq.n	802b2d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 802b2d0:	2301      	movs	r3, #1
 802b2d2:	e2c1      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802b2d4:	f7fe ff40 	bl	802a158 <HAL_GetREVID>
 802b2d8:	4603      	mov	r3, r0
 802b2da:	f241 0203 	movw	r2, #4099	; 0x1003
 802b2de:	4293      	cmp	r3, r2
 802b2e0:	d817      	bhi.n	802b312 <HAL_RCC_OscConfig+0x35e>
 802b2e2:	687b      	ldr	r3, [r7, #4]
 802b2e4:	6a1b      	ldr	r3, [r3, #32]
 802b2e6:	2b20      	cmp	r3, #32
 802b2e8:	d108      	bne.n	802b2fc <HAL_RCC_OscConfig+0x348>
 802b2ea:	4b70      	ldr	r3, [pc, #448]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b2ec:	685b      	ldr	r3, [r3, #4]
 802b2ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 802b2f2:	4a6e      	ldr	r2, [pc, #440]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b2f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b2f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802b2fa:	e075      	b.n	802b3e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802b2fc:	4b6b      	ldr	r3, [pc, #428]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b2fe:	685b      	ldr	r3, [r3, #4]
 802b300:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 802b304:	687b      	ldr	r3, [r7, #4]
 802b306:	6a1b      	ldr	r3, [r3, #32]
 802b308:	069b      	lsls	r3, r3, #26
 802b30a:	4968      	ldr	r1, [pc, #416]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b30c:	4313      	orrs	r3, r2
 802b30e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802b310:	e06a      	b.n	802b3e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802b312:	4b66      	ldr	r3, [pc, #408]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b314:	68db      	ldr	r3, [r3, #12]
 802b316:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 802b31a:	687b      	ldr	r3, [r7, #4]
 802b31c:	6a1b      	ldr	r3, [r3, #32]
 802b31e:	061b      	lsls	r3, r3, #24
 802b320:	4962      	ldr	r1, [pc, #392]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b322:	4313      	orrs	r3, r2
 802b324:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802b326:	e05f      	b.n	802b3e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 802b328:	687b      	ldr	r3, [r7, #4]
 802b32a:	69db      	ldr	r3, [r3, #28]
 802b32c:	2b00      	cmp	r3, #0
 802b32e:	d042      	beq.n	802b3b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 802b330:	4b5e      	ldr	r3, [pc, #376]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b332:	681b      	ldr	r3, [r3, #0]
 802b334:	4a5d      	ldr	r2, [pc, #372]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b33a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b33c:	f7fe fedc 	bl	802a0f8 <HAL_GetTick>
 802b340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802b342:	e008      	b.n	802b356 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 802b344:	f7fe fed8 	bl	802a0f8 <HAL_GetTick>
 802b348:	4602      	mov	r2, r0
 802b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b34c:	1ad3      	subs	r3, r2, r3
 802b34e:	2b02      	cmp	r3, #2
 802b350:	d901      	bls.n	802b356 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 802b352:	2303      	movs	r3, #3
 802b354:	e280      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802b356:	4b55      	ldr	r3, [pc, #340]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b358:	681b      	ldr	r3, [r3, #0]
 802b35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b35e:	2b00      	cmp	r3, #0
 802b360:	d0f0      	beq.n	802b344 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802b362:	f7fe fef9 	bl	802a158 <HAL_GetREVID>
 802b366:	4603      	mov	r3, r0
 802b368:	f241 0203 	movw	r2, #4099	; 0x1003
 802b36c:	4293      	cmp	r3, r2
 802b36e:	d817      	bhi.n	802b3a0 <HAL_RCC_OscConfig+0x3ec>
 802b370:	687b      	ldr	r3, [r7, #4]
 802b372:	6a1b      	ldr	r3, [r3, #32]
 802b374:	2b20      	cmp	r3, #32
 802b376:	d108      	bne.n	802b38a <HAL_RCC_OscConfig+0x3d6>
 802b378:	4b4c      	ldr	r3, [pc, #304]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b37a:	685b      	ldr	r3, [r3, #4]
 802b37c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 802b380:	4a4a      	ldr	r2, [pc, #296]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b382:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b386:	6053      	str	r3, [r2, #4]
 802b388:	e02e      	b.n	802b3e8 <HAL_RCC_OscConfig+0x434>
 802b38a:	4b48      	ldr	r3, [pc, #288]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b38c:	685b      	ldr	r3, [r3, #4]
 802b38e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 802b392:	687b      	ldr	r3, [r7, #4]
 802b394:	6a1b      	ldr	r3, [r3, #32]
 802b396:	069b      	lsls	r3, r3, #26
 802b398:	4944      	ldr	r1, [pc, #272]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b39a:	4313      	orrs	r3, r2
 802b39c:	604b      	str	r3, [r1, #4]
 802b39e:	e023      	b.n	802b3e8 <HAL_RCC_OscConfig+0x434>
 802b3a0:	4b42      	ldr	r3, [pc, #264]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b3a2:	68db      	ldr	r3, [r3, #12]
 802b3a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 802b3a8:	687b      	ldr	r3, [r7, #4]
 802b3aa:	6a1b      	ldr	r3, [r3, #32]
 802b3ac:	061b      	lsls	r3, r3, #24
 802b3ae:	493f      	ldr	r1, [pc, #252]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b3b0:	4313      	orrs	r3, r2
 802b3b2:	60cb      	str	r3, [r1, #12]
 802b3b4:	e018      	b.n	802b3e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 802b3b6:	4b3d      	ldr	r3, [pc, #244]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b3b8:	681b      	ldr	r3, [r3, #0]
 802b3ba:	4a3c      	ldr	r2, [pc, #240]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b3bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802b3c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b3c2:	f7fe fe99 	bl	802a0f8 <HAL_GetTick>
 802b3c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 802b3c8:	e008      	b.n	802b3dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 802b3ca:	f7fe fe95 	bl	802a0f8 <HAL_GetTick>
 802b3ce:	4602      	mov	r2, r0
 802b3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b3d2:	1ad3      	subs	r3, r2, r3
 802b3d4:	2b02      	cmp	r3, #2
 802b3d6:	d901      	bls.n	802b3dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802b3d8:	2303      	movs	r3, #3
 802b3da:	e23d      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 802b3dc:	4b33      	ldr	r3, [pc, #204]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b3de:	681b      	ldr	r3, [r3, #0]
 802b3e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b3e4:	2b00      	cmp	r3, #0
 802b3e6:	d1f0      	bne.n	802b3ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802b3e8:	687b      	ldr	r3, [r7, #4]
 802b3ea:	681b      	ldr	r3, [r3, #0]
 802b3ec:	f003 0308 	and.w	r3, r3, #8
 802b3f0:	2b00      	cmp	r3, #0
 802b3f2:	d036      	beq.n	802b462 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 802b3f4:	687b      	ldr	r3, [r7, #4]
 802b3f6:	695b      	ldr	r3, [r3, #20]
 802b3f8:	2b00      	cmp	r3, #0
 802b3fa:	d019      	beq.n	802b430 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802b3fc:	4b2b      	ldr	r3, [pc, #172]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b3fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b400:	4a2a      	ldr	r2, [pc, #168]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b402:	f043 0301 	orr.w	r3, r3, #1
 802b406:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802b408:	f7fe fe76 	bl	802a0f8 <HAL_GetTick>
 802b40c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802b40e:	e008      	b.n	802b422 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802b410:	f7fe fe72 	bl	802a0f8 <HAL_GetTick>
 802b414:	4602      	mov	r2, r0
 802b416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b418:	1ad3      	subs	r3, r2, r3
 802b41a:	2b02      	cmp	r3, #2
 802b41c:	d901      	bls.n	802b422 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 802b41e:	2303      	movs	r3, #3
 802b420:	e21a      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802b422:	4b22      	ldr	r3, [pc, #136]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b426:	f003 0302 	and.w	r3, r3, #2
 802b42a:	2b00      	cmp	r3, #0
 802b42c:	d0f0      	beq.n	802b410 <HAL_RCC_OscConfig+0x45c>
 802b42e:	e018      	b.n	802b462 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802b430:	4b1e      	ldr	r3, [pc, #120]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b434:	4a1d      	ldr	r2, [pc, #116]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b436:	f023 0301 	bic.w	r3, r3, #1
 802b43a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802b43c:	f7fe fe5c 	bl	802a0f8 <HAL_GetTick>
 802b440:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 802b442:	e008      	b.n	802b456 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802b444:	f7fe fe58 	bl	802a0f8 <HAL_GetTick>
 802b448:	4602      	mov	r2, r0
 802b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b44c:	1ad3      	subs	r3, r2, r3
 802b44e:	2b02      	cmp	r3, #2
 802b450:	d901      	bls.n	802b456 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 802b452:	2303      	movs	r3, #3
 802b454:	e200      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 802b456:	4b15      	ldr	r3, [pc, #84]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802b45a:	f003 0302 	and.w	r3, r3, #2
 802b45e:	2b00      	cmp	r3, #0
 802b460:	d1f0      	bne.n	802b444 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 802b462:	687b      	ldr	r3, [r7, #4]
 802b464:	681b      	ldr	r3, [r3, #0]
 802b466:	f003 0320 	and.w	r3, r3, #32
 802b46a:	2b00      	cmp	r3, #0
 802b46c:	d039      	beq.n	802b4e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 802b46e:	687b      	ldr	r3, [r7, #4]
 802b470:	699b      	ldr	r3, [r3, #24]
 802b472:	2b00      	cmp	r3, #0
 802b474:	d01c      	beq.n	802b4b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 802b476:	4b0d      	ldr	r3, [pc, #52]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b478:	681b      	ldr	r3, [r3, #0]
 802b47a:	4a0c      	ldr	r2, [pc, #48]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b47c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802b480:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 802b482:	f7fe fe39 	bl	802a0f8 <HAL_GetTick>
 802b486:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 802b488:	e008      	b.n	802b49c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802b48a:	f7fe fe35 	bl	802a0f8 <HAL_GetTick>
 802b48e:	4602      	mov	r2, r0
 802b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b492:	1ad3      	subs	r3, r2, r3
 802b494:	2b02      	cmp	r3, #2
 802b496:	d901      	bls.n	802b49c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 802b498:	2303      	movs	r3, #3
 802b49a:	e1dd      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 802b49c:	4b03      	ldr	r3, [pc, #12]	; (802b4ac <HAL_RCC_OscConfig+0x4f8>)
 802b49e:	681b      	ldr	r3, [r3, #0]
 802b4a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802b4a4:	2b00      	cmp	r3, #0
 802b4a6:	d0f0      	beq.n	802b48a <HAL_RCC_OscConfig+0x4d6>
 802b4a8:	e01b      	b.n	802b4e2 <HAL_RCC_OscConfig+0x52e>
 802b4aa:	bf00      	nop
 802b4ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 802b4b0:	4b9b      	ldr	r3, [pc, #620]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b4b2:	681b      	ldr	r3, [r3, #0]
 802b4b4:	4a9a      	ldr	r2, [pc, #616]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b4b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b4ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 802b4bc:	f7fe fe1c 	bl	802a0f8 <HAL_GetTick>
 802b4c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 802b4c2:	e008      	b.n	802b4d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802b4c4:	f7fe fe18 	bl	802a0f8 <HAL_GetTick>
 802b4c8:	4602      	mov	r2, r0
 802b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b4cc:	1ad3      	subs	r3, r2, r3
 802b4ce:	2b02      	cmp	r3, #2
 802b4d0:	d901      	bls.n	802b4d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 802b4d2:	2303      	movs	r3, #3
 802b4d4:	e1c0      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 802b4d6:	4b92      	ldr	r3, [pc, #584]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b4d8:	681b      	ldr	r3, [r3, #0]
 802b4da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802b4de:	2b00      	cmp	r3, #0
 802b4e0:	d1f0      	bne.n	802b4c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802b4e2:	687b      	ldr	r3, [r7, #4]
 802b4e4:	681b      	ldr	r3, [r3, #0]
 802b4e6:	f003 0304 	and.w	r3, r3, #4
 802b4ea:	2b00      	cmp	r3, #0
 802b4ec:	f000 8081 	beq.w	802b5f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 802b4f0:	4b8c      	ldr	r3, [pc, #560]	; (802b724 <HAL_RCC_OscConfig+0x770>)
 802b4f2:	681b      	ldr	r3, [r3, #0]
 802b4f4:	4a8b      	ldr	r2, [pc, #556]	; (802b724 <HAL_RCC_OscConfig+0x770>)
 802b4f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b4fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802b4fc:	f7fe fdfc 	bl	802a0f8 <HAL_GetTick>
 802b500:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802b502:	e008      	b.n	802b516 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802b504:	f7fe fdf8 	bl	802a0f8 <HAL_GetTick>
 802b508:	4602      	mov	r2, r0
 802b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b50c:	1ad3      	subs	r3, r2, r3
 802b50e:	2b64      	cmp	r3, #100	; 0x64
 802b510:	d901      	bls.n	802b516 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 802b512:	2303      	movs	r3, #3
 802b514:	e1a0      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802b516:	4b83      	ldr	r3, [pc, #524]	; (802b724 <HAL_RCC_OscConfig+0x770>)
 802b518:	681b      	ldr	r3, [r3, #0]
 802b51a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b51e:	2b00      	cmp	r3, #0
 802b520:	d0f0      	beq.n	802b504 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802b522:	687b      	ldr	r3, [r7, #4]
 802b524:	689b      	ldr	r3, [r3, #8]
 802b526:	2b01      	cmp	r3, #1
 802b528:	d106      	bne.n	802b538 <HAL_RCC_OscConfig+0x584>
 802b52a:	4b7d      	ldr	r3, [pc, #500]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b52e:	4a7c      	ldr	r2, [pc, #496]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b530:	f043 0301 	orr.w	r3, r3, #1
 802b534:	6713      	str	r3, [r2, #112]	; 0x70
 802b536:	e02d      	b.n	802b594 <HAL_RCC_OscConfig+0x5e0>
 802b538:	687b      	ldr	r3, [r7, #4]
 802b53a:	689b      	ldr	r3, [r3, #8]
 802b53c:	2b00      	cmp	r3, #0
 802b53e:	d10c      	bne.n	802b55a <HAL_RCC_OscConfig+0x5a6>
 802b540:	4b77      	ldr	r3, [pc, #476]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b544:	4a76      	ldr	r2, [pc, #472]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b546:	f023 0301 	bic.w	r3, r3, #1
 802b54a:	6713      	str	r3, [r2, #112]	; 0x70
 802b54c:	4b74      	ldr	r3, [pc, #464]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b550:	4a73      	ldr	r2, [pc, #460]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b552:	f023 0304 	bic.w	r3, r3, #4
 802b556:	6713      	str	r3, [r2, #112]	; 0x70
 802b558:	e01c      	b.n	802b594 <HAL_RCC_OscConfig+0x5e0>
 802b55a:	687b      	ldr	r3, [r7, #4]
 802b55c:	689b      	ldr	r3, [r3, #8]
 802b55e:	2b05      	cmp	r3, #5
 802b560:	d10c      	bne.n	802b57c <HAL_RCC_OscConfig+0x5c8>
 802b562:	4b6f      	ldr	r3, [pc, #444]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b566:	4a6e      	ldr	r2, [pc, #440]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b568:	f043 0304 	orr.w	r3, r3, #4
 802b56c:	6713      	str	r3, [r2, #112]	; 0x70
 802b56e:	4b6c      	ldr	r3, [pc, #432]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b572:	4a6b      	ldr	r2, [pc, #428]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b574:	f043 0301 	orr.w	r3, r3, #1
 802b578:	6713      	str	r3, [r2, #112]	; 0x70
 802b57a:	e00b      	b.n	802b594 <HAL_RCC_OscConfig+0x5e0>
 802b57c:	4b68      	ldr	r3, [pc, #416]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b57e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b580:	4a67      	ldr	r2, [pc, #412]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b582:	f023 0301 	bic.w	r3, r3, #1
 802b586:	6713      	str	r3, [r2, #112]	; 0x70
 802b588:	4b65      	ldr	r3, [pc, #404]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b58c:	4a64      	ldr	r2, [pc, #400]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b58e:	f023 0304 	bic.w	r3, r3, #4
 802b592:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802b594:	687b      	ldr	r3, [r7, #4]
 802b596:	689b      	ldr	r3, [r3, #8]
 802b598:	2b00      	cmp	r3, #0
 802b59a:	d015      	beq.n	802b5c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802b59c:	f7fe fdac 	bl	802a0f8 <HAL_GetTick>
 802b5a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802b5a2:	e00a      	b.n	802b5ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802b5a4:	f7fe fda8 	bl	802a0f8 <HAL_GetTick>
 802b5a8:	4602      	mov	r2, r0
 802b5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b5ac:	1ad3      	subs	r3, r2, r3
 802b5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 802b5b2:	4293      	cmp	r3, r2
 802b5b4:	d901      	bls.n	802b5ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 802b5b6:	2303      	movs	r3, #3
 802b5b8:	e14e      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802b5ba:	4b59      	ldr	r3, [pc, #356]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b5be:	f003 0302 	and.w	r3, r3, #2
 802b5c2:	2b00      	cmp	r3, #0
 802b5c4:	d0ee      	beq.n	802b5a4 <HAL_RCC_OscConfig+0x5f0>
 802b5c6:	e014      	b.n	802b5f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802b5c8:	f7fe fd96 	bl	802a0f8 <HAL_GetTick>
 802b5cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 802b5ce:	e00a      	b.n	802b5e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802b5d0:	f7fe fd92 	bl	802a0f8 <HAL_GetTick>
 802b5d4:	4602      	mov	r2, r0
 802b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b5d8:	1ad3      	subs	r3, r2, r3
 802b5da:	f241 3288 	movw	r2, #5000	; 0x1388
 802b5de:	4293      	cmp	r3, r2
 802b5e0:	d901      	bls.n	802b5e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 802b5e2:	2303      	movs	r3, #3
 802b5e4:	e138      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 802b5e6:	4b4e      	ldr	r3, [pc, #312]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b5ea:	f003 0302 	and.w	r3, r3, #2
 802b5ee:	2b00      	cmp	r3, #0
 802b5f0:	d1ee      	bne.n	802b5d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802b5f2:	687b      	ldr	r3, [r7, #4]
 802b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b5f6:	2b00      	cmp	r3, #0
 802b5f8:	f000 812d 	beq.w	802b856 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 802b5fc:	4b48      	ldr	r3, [pc, #288]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b5fe:	691b      	ldr	r3, [r3, #16]
 802b600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802b604:	2b18      	cmp	r3, #24
 802b606:	f000 80bd 	beq.w	802b784 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802b60a:	687b      	ldr	r3, [r7, #4]
 802b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b60e:	2b02      	cmp	r3, #2
 802b610:	f040 809e 	bne.w	802b750 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802b614:	4b42      	ldr	r3, [pc, #264]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b616:	681b      	ldr	r3, [r3, #0]
 802b618:	4a41      	ldr	r2, [pc, #260]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b61a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802b61e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b620:	f7fe fd6a 	bl	802a0f8 <HAL_GetTick>
 802b624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802b626:	e008      	b.n	802b63a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802b628:	f7fe fd66 	bl	802a0f8 <HAL_GetTick>
 802b62c:	4602      	mov	r2, r0
 802b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b630:	1ad3      	subs	r3, r2, r3
 802b632:	2b02      	cmp	r3, #2
 802b634:	d901      	bls.n	802b63a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 802b636:	2303      	movs	r3, #3
 802b638:	e10e      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802b63a:	4b39      	ldr	r3, [pc, #228]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b63c:	681b      	ldr	r3, [r3, #0]
 802b63e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802b642:	2b00      	cmp	r3, #0
 802b644:	d1f0      	bne.n	802b628 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 802b646:	4b36      	ldr	r3, [pc, #216]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802b64a:	4b37      	ldr	r3, [pc, #220]	; (802b728 <HAL_RCC_OscConfig+0x774>)
 802b64c:	4013      	ands	r3, r2
 802b64e:	687a      	ldr	r2, [r7, #4]
 802b650:	6a91      	ldr	r1, [r2, #40]	; 0x28
 802b652:	687a      	ldr	r2, [r7, #4]
 802b654:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 802b656:	0112      	lsls	r2, r2, #4
 802b658:	430a      	orrs	r2, r1
 802b65a:	4931      	ldr	r1, [pc, #196]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b65c:	4313      	orrs	r3, r2
 802b65e:	628b      	str	r3, [r1, #40]	; 0x28
 802b660:	687b      	ldr	r3, [r7, #4]
 802b662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b664:	3b01      	subs	r3, #1
 802b666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802b66a:	687b      	ldr	r3, [r7, #4]
 802b66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b66e:	3b01      	subs	r3, #1
 802b670:	025b      	lsls	r3, r3, #9
 802b672:	b29b      	uxth	r3, r3
 802b674:	431a      	orrs	r2, r3
 802b676:	687b      	ldr	r3, [r7, #4]
 802b678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b67a:	3b01      	subs	r3, #1
 802b67c:	041b      	lsls	r3, r3, #16
 802b67e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802b682:	431a      	orrs	r2, r3
 802b684:	687b      	ldr	r3, [r7, #4]
 802b686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b688:	3b01      	subs	r3, #1
 802b68a:	061b      	lsls	r3, r3, #24
 802b68c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 802b690:	4923      	ldr	r1, [pc, #140]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b692:	4313      	orrs	r3, r2
 802b694:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 802b696:	4b22      	ldr	r3, [pc, #136]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b69a:	4a21      	ldr	r2, [pc, #132]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b69c:	f023 0301 	bic.w	r3, r3, #1
 802b6a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 802b6a2:	4b1f      	ldr	r3, [pc, #124]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802b6a6:	4b21      	ldr	r3, [pc, #132]	; (802b72c <HAL_RCC_OscConfig+0x778>)
 802b6a8:	4013      	ands	r3, r2
 802b6aa:	687a      	ldr	r2, [r7, #4]
 802b6ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 802b6ae:	00d2      	lsls	r2, r2, #3
 802b6b0:	491b      	ldr	r1, [pc, #108]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6b2:	4313      	orrs	r3, r2
 802b6b4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 802b6b6:	4b1a      	ldr	r3, [pc, #104]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b6ba:	f023 020c 	bic.w	r2, r3, #12
 802b6be:	687b      	ldr	r3, [r7, #4]
 802b6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b6c2:	4917      	ldr	r1, [pc, #92]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6c4:	4313      	orrs	r3, r2
 802b6c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 802b6c8:	4b15      	ldr	r3, [pc, #84]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b6cc:	f023 0202 	bic.w	r2, r3, #2
 802b6d0:	687b      	ldr	r3, [r7, #4]
 802b6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b6d4:	4912      	ldr	r1, [pc, #72]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6d6:	4313      	orrs	r3, r2
 802b6d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 802b6da:	4b11      	ldr	r3, [pc, #68]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b6de:	4a10      	ldr	r2, [pc, #64]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802b6e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802b6e6:	4b0e      	ldr	r3, [pc, #56]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b6ea:	4a0d      	ldr	r2, [pc, #52]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802b6f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 802b6f2:	4b0b      	ldr	r3, [pc, #44]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b6f6:	4a0a      	ldr	r2, [pc, #40]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b6f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802b6fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 802b6fe:	4b08      	ldr	r3, [pc, #32]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b702:	4a07      	ldr	r2, [pc, #28]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b704:	f043 0301 	orr.w	r3, r3, #1
 802b708:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802b70a:	4b05      	ldr	r3, [pc, #20]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b70c:	681b      	ldr	r3, [r3, #0]
 802b70e:	4a04      	ldr	r2, [pc, #16]	; (802b720 <HAL_RCC_OscConfig+0x76c>)
 802b710:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802b714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b716:	f7fe fcef 	bl	802a0f8 <HAL_GetTick>
 802b71a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802b71c:	e011      	b.n	802b742 <HAL_RCC_OscConfig+0x78e>
 802b71e:	bf00      	nop
 802b720:	58024400 	.word	0x58024400
 802b724:	58024800 	.word	0x58024800
 802b728:	fffffc0c 	.word	0xfffffc0c
 802b72c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802b730:	f7fe fce2 	bl	802a0f8 <HAL_GetTick>
 802b734:	4602      	mov	r2, r0
 802b736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b738:	1ad3      	subs	r3, r2, r3
 802b73a:	2b02      	cmp	r3, #2
 802b73c:	d901      	bls.n	802b742 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 802b73e:	2303      	movs	r3, #3
 802b740:	e08a      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802b742:	4b47      	ldr	r3, [pc, #284]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b744:	681b      	ldr	r3, [r3, #0]
 802b746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802b74a:	2b00      	cmp	r3, #0
 802b74c:	d0f0      	beq.n	802b730 <HAL_RCC_OscConfig+0x77c>
 802b74e:	e082      	b.n	802b856 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802b750:	4b43      	ldr	r3, [pc, #268]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b752:	681b      	ldr	r3, [r3, #0]
 802b754:	4a42      	ldr	r2, [pc, #264]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802b75a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802b75c:	f7fe fccc 	bl	802a0f8 <HAL_GetTick>
 802b760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802b762:	e008      	b.n	802b776 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802b764:	f7fe fcc8 	bl	802a0f8 <HAL_GetTick>
 802b768:	4602      	mov	r2, r0
 802b76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b76c:	1ad3      	subs	r3, r2, r3
 802b76e:	2b02      	cmp	r3, #2
 802b770:	d901      	bls.n	802b776 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 802b772:	2303      	movs	r3, #3
 802b774:	e070      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802b776:	4b3a      	ldr	r3, [pc, #232]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b778:	681b      	ldr	r3, [r3, #0]
 802b77a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802b77e:	2b00      	cmp	r3, #0
 802b780:	d1f0      	bne.n	802b764 <HAL_RCC_OscConfig+0x7b0>
 802b782:	e068      	b.n	802b856 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 802b784:	4b36      	ldr	r3, [pc, #216]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b788:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 802b78a:	4b35      	ldr	r3, [pc, #212]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b78e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802b790:	687b      	ldr	r3, [r7, #4]
 802b792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b794:	2b01      	cmp	r3, #1
 802b796:	d031      	beq.n	802b7fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802b798:	693b      	ldr	r3, [r7, #16]
 802b79a:	f003 0203 	and.w	r2, r3, #3
 802b79e:	687b      	ldr	r3, [r7, #4]
 802b7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802b7a2:	429a      	cmp	r2, r3
 802b7a4:	d12a      	bne.n	802b7fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 802b7a6:	693b      	ldr	r3, [r7, #16]
 802b7a8:	091b      	lsrs	r3, r3, #4
 802b7aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802b7ae:	687b      	ldr	r3, [r7, #4]
 802b7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802b7b2:	429a      	cmp	r2, r3
 802b7b4:	d122      	bne.n	802b7fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 802b7b6:	68fb      	ldr	r3, [r7, #12]
 802b7b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802b7bc:	687b      	ldr	r3, [r7, #4]
 802b7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b7c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 802b7c2:	429a      	cmp	r2, r3
 802b7c4:	d11a      	bne.n	802b7fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 802b7c6:	68fb      	ldr	r3, [r7, #12]
 802b7c8:	0a5b      	lsrs	r3, r3, #9
 802b7ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802b7ce:	687b      	ldr	r3, [r7, #4]
 802b7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b7d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 802b7d4:	429a      	cmp	r2, r3
 802b7d6:	d111      	bne.n	802b7fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 802b7d8:	68fb      	ldr	r3, [r7, #12]
 802b7da:	0c1b      	lsrs	r3, r3, #16
 802b7dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802b7e0:	687b      	ldr	r3, [r7, #4]
 802b7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b7e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 802b7e6:	429a      	cmp	r2, r3
 802b7e8:	d108      	bne.n	802b7fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 802b7ea:	68fb      	ldr	r3, [r7, #12]
 802b7ec:	0e1b      	lsrs	r3, r3, #24
 802b7ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802b7f2:	687b      	ldr	r3, [r7, #4]
 802b7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b7f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 802b7f8:	429a      	cmp	r2, r3
 802b7fa:	d001      	beq.n	802b800 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 802b7fc:	2301      	movs	r3, #1
 802b7fe:	e02b      	b.n	802b858 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 802b800:	4b17      	ldr	r3, [pc, #92]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b804:	08db      	lsrs	r3, r3, #3
 802b806:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802b80a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 802b80c:	687b      	ldr	r3, [r7, #4]
 802b80e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b810:	693a      	ldr	r2, [r7, #16]
 802b812:	429a      	cmp	r2, r3
 802b814:	d01f      	beq.n	802b856 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 802b816:	4b12      	ldr	r3, [pc, #72]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b81a:	4a11      	ldr	r2, [pc, #68]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b81c:	f023 0301 	bic.w	r3, r3, #1
 802b820:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 802b822:	f7fe fc69 	bl	802a0f8 <HAL_GetTick>
 802b826:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 802b828:	bf00      	nop
 802b82a:	f7fe fc65 	bl	802a0f8 <HAL_GetTick>
 802b82e:	4602      	mov	r2, r0
 802b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b832:	4293      	cmp	r3, r2
 802b834:	d0f9      	beq.n	802b82a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 802b836:	4b0a      	ldr	r3, [pc, #40]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802b83a:	4b0a      	ldr	r3, [pc, #40]	; (802b864 <HAL_RCC_OscConfig+0x8b0>)
 802b83c:	4013      	ands	r3, r2
 802b83e:	687a      	ldr	r2, [r7, #4]
 802b840:	6c92      	ldr	r2, [r2, #72]	; 0x48
 802b842:	00d2      	lsls	r2, r2, #3
 802b844:	4906      	ldr	r1, [pc, #24]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b846:	4313      	orrs	r3, r2
 802b848:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 802b84a:	4b05      	ldr	r3, [pc, #20]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b84e:	4a04      	ldr	r2, [pc, #16]	; (802b860 <HAL_RCC_OscConfig+0x8ac>)
 802b850:	f043 0301 	orr.w	r3, r3, #1
 802b854:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 802b856:	2300      	movs	r3, #0
}
 802b858:	4618      	mov	r0, r3
 802b85a:	3730      	adds	r7, #48	; 0x30
 802b85c:	46bd      	mov	sp, r7
 802b85e:	bd80      	pop	{r7, pc}
 802b860:	58024400 	.word	0x58024400
 802b864:	ffff0007 	.word	0xffff0007

0802b868 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802b868:	b580      	push	{r7, lr}
 802b86a:	b086      	sub	sp, #24
 802b86c:	af00      	add	r7, sp, #0
 802b86e:	6078      	str	r0, [r7, #4]
 802b870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 802b872:	687b      	ldr	r3, [r7, #4]
 802b874:	2b00      	cmp	r3, #0
 802b876:	d101      	bne.n	802b87c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802b878:	2301      	movs	r3, #1
 802b87a:	e19c      	b.n	802bbb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 802b87c:	4b8a      	ldr	r3, [pc, #552]	; (802baa8 <HAL_RCC_ClockConfig+0x240>)
 802b87e:	681b      	ldr	r3, [r3, #0]
 802b880:	f003 030f 	and.w	r3, r3, #15
 802b884:	683a      	ldr	r2, [r7, #0]
 802b886:	429a      	cmp	r2, r3
 802b888:	d910      	bls.n	802b8ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802b88a:	4b87      	ldr	r3, [pc, #540]	; (802baa8 <HAL_RCC_ClockConfig+0x240>)
 802b88c:	681b      	ldr	r3, [r3, #0]
 802b88e:	f023 020f 	bic.w	r2, r3, #15
 802b892:	4985      	ldr	r1, [pc, #532]	; (802baa8 <HAL_RCC_ClockConfig+0x240>)
 802b894:	683b      	ldr	r3, [r7, #0]
 802b896:	4313      	orrs	r3, r2
 802b898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802b89a:	4b83      	ldr	r3, [pc, #524]	; (802baa8 <HAL_RCC_ClockConfig+0x240>)
 802b89c:	681b      	ldr	r3, [r3, #0]
 802b89e:	f003 030f 	and.w	r3, r3, #15
 802b8a2:	683a      	ldr	r2, [r7, #0]
 802b8a4:	429a      	cmp	r2, r3
 802b8a6:	d001      	beq.n	802b8ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 802b8a8:	2301      	movs	r3, #1
 802b8aa:	e184      	b.n	802bbb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 802b8ac:	687b      	ldr	r3, [r7, #4]
 802b8ae:	681b      	ldr	r3, [r3, #0]
 802b8b0:	f003 0304 	and.w	r3, r3, #4
 802b8b4:	2b00      	cmp	r3, #0
 802b8b6:	d010      	beq.n	802b8da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 802b8b8:	687b      	ldr	r3, [r7, #4]
 802b8ba:	691a      	ldr	r2, [r3, #16]
 802b8bc:	4b7b      	ldr	r3, [pc, #492]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b8be:	699b      	ldr	r3, [r3, #24]
 802b8c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802b8c4:	429a      	cmp	r2, r3
 802b8c6:	d908      	bls.n	802b8da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 802b8c8:	4b78      	ldr	r3, [pc, #480]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b8ca:	699b      	ldr	r3, [r3, #24]
 802b8cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802b8d0:	687b      	ldr	r3, [r7, #4]
 802b8d2:	691b      	ldr	r3, [r3, #16]
 802b8d4:	4975      	ldr	r1, [pc, #468]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b8d6:	4313      	orrs	r3, r2
 802b8d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802b8da:	687b      	ldr	r3, [r7, #4]
 802b8dc:	681b      	ldr	r3, [r3, #0]
 802b8de:	f003 0308 	and.w	r3, r3, #8
 802b8e2:	2b00      	cmp	r3, #0
 802b8e4:	d010      	beq.n	802b908 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 802b8e6:	687b      	ldr	r3, [r7, #4]
 802b8e8:	695a      	ldr	r2, [r3, #20]
 802b8ea:	4b70      	ldr	r3, [pc, #448]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b8ec:	69db      	ldr	r3, [r3, #28]
 802b8ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802b8f2:	429a      	cmp	r2, r3
 802b8f4:	d908      	bls.n	802b908 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 802b8f6:	4b6d      	ldr	r3, [pc, #436]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b8f8:	69db      	ldr	r3, [r3, #28]
 802b8fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802b8fe:	687b      	ldr	r3, [r7, #4]
 802b900:	695b      	ldr	r3, [r3, #20]
 802b902:	496a      	ldr	r1, [pc, #424]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b904:	4313      	orrs	r3, r2
 802b906:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802b908:	687b      	ldr	r3, [r7, #4]
 802b90a:	681b      	ldr	r3, [r3, #0]
 802b90c:	f003 0310 	and.w	r3, r3, #16
 802b910:	2b00      	cmp	r3, #0
 802b912:	d010      	beq.n	802b936 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 802b914:	687b      	ldr	r3, [r7, #4]
 802b916:	699a      	ldr	r2, [r3, #24]
 802b918:	4b64      	ldr	r3, [pc, #400]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b91a:	69db      	ldr	r3, [r3, #28]
 802b91c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802b920:	429a      	cmp	r2, r3
 802b922:	d908      	bls.n	802b936 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 802b924:	4b61      	ldr	r3, [pc, #388]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b926:	69db      	ldr	r3, [r3, #28]
 802b928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 802b92c:	687b      	ldr	r3, [r7, #4]
 802b92e:	699b      	ldr	r3, [r3, #24]
 802b930:	495e      	ldr	r1, [pc, #376]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b932:	4313      	orrs	r3, r2
 802b934:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 802b936:	687b      	ldr	r3, [r7, #4]
 802b938:	681b      	ldr	r3, [r3, #0]
 802b93a:	f003 0320 	and.w	r3, r3, #32
 802b93e:	2b00      	cmp	r3, #0
 802b940:	d010      	beq.n	802b964 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 802b942:	687b      	ldr	r3, [r7, #4]
 802b944:	69da      	ldr	r2, [r3, #28]
 802b946:	4b59      	ldr	r3, [pc, #356]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b948:	6a1b      	ldr	r3, [r3, #32]
 802b94a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802b94e:	429a      	cmp	r2, r3
 802b950:	d908      	bls.n	802b964 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 802b952:	4b56      	ldr	r3, [pc, #344]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b954:	6a1b      	ldr	r3, [r3, #32]
 802b956:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802b95a:	687b      	ldr	r3, [r7, #4]
 802b95c:	69db      	ldr	r3, [r3, #28]
 802b95e:	4953      	ldr	r1, [pc, #332]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b960:	4313      	orrs	r3, r2
 802b962:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802b964:	687b      	ldr	r3, [r7, #4]
 802b966:	681b      	ldr	r3, [r3, #0]
 802b968:	f003 0302 	and.w	r3, r3, #2
 802b96c:	2b00      	cmp	r3, #0
 802b96e:	d010      	beq.n	802b992 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 802b970:	687b      	ldr	r3, [r7, #4]
 802b972:	68da      	ldr	r2, [r3, #12]
 802b974:	4b4d      	ldr	r3, [pc, #308]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b976:	699b      	ldr	r3, [r3, #24]
 802b978:	f003 030f 	and.w	r3, r3, #15
 802b97c:	429a      	cmp	r2, r3
 802b97e:	d908      	bls.n	802b992 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802b980:	4b4a      	ldr	r3, [pc, #296]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b982:	699b      	ldr	r3, [r3, #24]
 802b984:	f023 020f 	bic.w	r2, r3, #15
 802b988:	687b      	ldr	r3, [r7, #4]
 802b98a:	68db      	ldr	r3, [r3, #12]
 802b98c:	4947      	ldr	r1, [pc, #284]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b98e:	4313      	orrs	r3, r2
 802b990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802b992:	687b      	ldr	r3, [r7, #4]
 802b994:	681b      	ldr	r3, [r3, #0]
 802b996:	f003 0301 	and.w	r3, r3, #1
 802b99a:	2b00      	cmp	r3, #0
 802b99c:	d055      	beq.n	802ba4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 802b99e:	4b43      	ldr	r3, [pc, #268]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b9a0:	699b      	ldr	r3, [r3, #24]
 802b9a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 802b9a6:	687b      	ldr	r3, [r7, #4]
 802b9a8:	689b      	ldr	r3, [r3, #8]
 802b9aa:	4940      	ldr	r1, [pc, #256]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b9ac:	4313      	orrs	r3, r2
 802b9ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802b9b0:	687b      	ldr	r3, [r7, #4]
 802b9b2:	685b      	ldr	r3, [r3, #4]
 802b9b4:	2b02      	cmp	r3, #2
 802b9b6:	d107      	bne.n	802b9c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802b9b8:	4b3c      	ldr	r3, [pc, #240]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b9ba:	681b      	ldr	r3, [r3, #0]
 802b9bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802b9c0:	2b00      	cmp	r3, #0
 802b9c2:	d121      	bne.n	802ba08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802b9c4:	2301      	movs	r3, #1
 802b9c6:	e0f6      	b.n	802bbb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802b9c8:	687b      	ldr	r3, [r7, #4]
 802b9ca:	685b      	ldr	r3, [r3, #4]
 802b9cc:	2b03      	cmp	r3, #3
 802b9ce:	d107      	bne.n	802b9e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802b9d0:	4b36      	ldr	r3, [pc, #216]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b9d2:	681b      	ldr	r3, [r3, #0]
 802b9d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802b9d8:	2b00      	cmp	r3, #0
 802b9da:	d115      	bne.n	802ba08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802b9dc:	2301      	movs	r3, #1
 802b9de:	e0ea      	b.n	802bbb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 802b9e0:	687b      	ldr	r3, [r7, #4]
 802b9e2:	685b      	ldr	r3, [r3, #4]
 802b9e4:	2b01      	cmp	r3, #1
 802b9e6:	d107      	bne.n	802b9f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802b9e8:	4b30      	ldr	r3, [pc, #192]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b9ea:	681b      	ldr	r3, [r3, #0]
 802b9ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b9f0:	2b00      	cmp	r3, #0
 802b9f2:	d109      	bne.n	802ba08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802b9f4:	2301      	movs	r3, #1
 802b9f6:	e0de      	b.n	802bbb6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802b9f8:	4b2c      	ldr	r3, [pc, #176]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802b9fa:	681b      	ldr	r3, [r3, #0]
 802b9fc:	f003 0304 	and.w	r3, r3, #4
 802ba00:	2b00      	cmp	r3, #0
 802ba02:	d101      	bne.n	802ba08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 802ba04:	2301      	movs	r3, #1
 802ba06:	e0d6      	b.n	802bbb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 802ba08:	4b28      	ldr	r3, [pc, #160]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802ba0a:	691b      	ldr	r3, [r3, #16]
 802ba0c:	f023 0207 	bic.w	r2, r3, #7
 802ba10:	687b      	ldr	r3, [r7, #4]
 802ba12:	685b      	ldr	r3, [r3, #4]
 802ba14:	4925      	ldr	r1, [pc, #148]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802ba16:	4313      	orrs	r3, r2
 802ba18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802ba1a:	f7fe fb6d 	bl	802a0f8 <HAL_GetTick>
 802ba1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802ba20:	e00a      	b.n	802ba38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802ba22:	f7fe fb69 	bl	802a0f8 <HAL_GetTick>
 802ba26:	4602      	mov	r2, r0
 802ba28:	697b      	ldr	r3, [r7, #20]
 802ba2a:	1ad3      	subs	r3, r2, r3
 802ba2c:	f241 3288 	movw	r2, #5000	; 0x1388
 802ba30:	4293      	cmp	r3, r2
 802ba32:	d901      	bls.n	802ba38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 802ba34:	2303      	movs	r3, #3
 802ba36:	e0be      	b.n	802bbb6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802ba38:	4b1c      	ldr	r3, [pc, #112]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802ba3a:	691b      	ldr	r3, [r3, #16]
 802ba3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 802ba40:	687b      	ldr	r3, [r7, #4]
 802ba42:	685b      	ldr	r3, [r3, #4]
 802ba44:	00db      	lsls	r3, r3, #3
 802ba46:	429a      	cmp	r2, r3
 802ba48:	d1eb      	bne.n	802ba22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802ba4a:	687b      	ldr	r3, [r7, #4]
 802ba4c:	681b      	ldr	r3, [r3, #0]
 802ba4e:	f003 0302 	and.w	r3, r3, #2
 802ba52:	2b00      	cmp	r3, #0
 802ba54:	d010      	beq.n	802ba78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 802ba56:	687b      	ldr	r3, [r7, #4]
 802ba58:	68da      	ldr	r2, [r3, #12]
 802ba5a:	4b14      	ldr	r3, [pc, #80]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802ba5c:	699b      	ldr	r3, [r3, #24]
 802ba5e:	f003 030f 	and.w	r3, r3, #15
 802ba62:	429a      	cmp	r2, r3
 802ba64:	d208      	bcs.n	802ba78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802ba66:	4b11      	ldr	r3, [pc, #68]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802ba68:	699b      	ldr	r3, [r3, #24]
 802ba6a:	f023 020f 	bic.w	r2, r3, #15
 802ba6e:	687b      	ldr	r3, [r7, #4]
 802ba70:	68db      	ldr	r3, [r3, #12]
 802ba72:	490e      	ldr	r1, [pc, #56]	; (802baac <HAL_RCC_ClockConfig+0x244>)
 802ba74:	4313      	orrs	r3, r2
 802ba76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 802ba78:	4b0b      	ldr	r3, [pc, #44]	; (802baa8 <HAL_RCC_ClockConfig+0x240>)
 802ba7a:	681b      	ldr	r3, [r3, #0]
 802ba7c:	f003 030f 	and.w	r3, r3, #15
 802ba80:	683a      	ldr	r2, [r7, #0]
 802ba82:	429a      	cmp	r2, r3
 802ba84:	d214      	bcs.n	802bab0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802ba86:	4b08      	ldr	r3, [pc, #32]	; (802baa8 <HAL_RCC_ClockConfig+0x240>)
 802ba88:	681b      	ldr	r3, [r3, #0]
 802ba8a:	f023 020f 	bic.w	r2, r3, #15
 802ba8e:	4906      	ldr	r1, [pc, #24]	; (802baa8 <HAL_RCC_ClockConfig+0x240>)
 802ba90:	683b      	ldr	r3, [r7, #0]
 802ba92:	4313      	orrs	r3, r2
 802ba94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802ba96:	4b04      	ldr	r3, [pc, #16]	; (802baa8 <HAL_RCC_ClockConfig+0x240>)
 802ba98:	681b      	ldr	r3, [r3, #0]
 802ba9a:	f003 030f 	and.w	r3, r3, #15
 802ba9e:	683a      	ldr	r2, [r7, #0]
 802baa0:	429a      	cmp	r2, r3
 802baa2:	d005      	beq.n	802bab0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 802baa4:	2301      	movs	r3, #1
 802baa6:	e086      	b.n	802bbb6 <HAL_RCC_ClockConfig+0x34e>
 802baa8:	52002000 	.word	0x52002000
 802baac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 802bab0:	687b      	ldr	r3, [r7, #4]
 802bab2:	681b      	ldr	r3, [r3, #0]
 802bab4:	f003 0304 	and.w	r3, r3, #4
 802bab8:	2b00      	cmp	r3, #0
 802baba:	d010      	beq.n	802bade <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 802babc:	687b      	ldr	r3, [r7, #4]
 802babe:	691a      	ldr	r2, [r3, #16]
 802bac0:	4b3f      	ldr	r3, [pc, #252]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bac2:	699b      	ldr	r3, [r3, #24]
 802bac4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802bac8:	429a      	cmp	r2, r3
 802baca:	d208      	bcs.n	802bade <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 802bacc:	4b3c      	ldr	r3, [pc, #240]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bace:	699b      	ldr	r3, [r3, #24]
 802bad0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802bad4:	687b      	ldr	r3, [r7, #4]
 802bad6:	691b      	ldr	r3, [r3, #16]
 802bad8:	4939      	ldr	r1, [pc, #228]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bada:	4313      	orrs	r3, r2
 802badc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802bade:	687b      	ldr	r3, [r7, #4]
 802bae0:	681b      	ldr	r3, [r3, #0]
 802bae2:	f003 0308 	and.w	r3, r3, #8
 802bae6:	2b00      	cmp	r3, #0
 802bae8:	d010      	beq.n	802bb0c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 802baea:	687b      	ldr	r3, [r7, #4]
 802baec:	695a      	ldr	r2, [r3, #20]
 802baee:	4b34      	ldr	r3, [pc, #208]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802baf0:	69db      	ldr	r3, [r3, #28]
 802baf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802baf6:	429a      	cmp	r2, r3
 802baf8:	d208      	bcs.n	802bb0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 802bafa:	4b31      	ldr	r3, [pc, #196]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bafc:	69db      	ldr	r3, [r3, #28]
 802bafe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802bb02:	687b      	ldr	r3, [r7, #4]
 802bb04:	695b      	ldr	r3, [r3, #20]
 802bb06:	492e      	ldr	r1, [pc, #184]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bb08:	4313      	orrs	r3, r2
 802bb0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802bb0c:	687b      	ldr	r3, [r7, #4]
 802bb0e:	681b      	ldr	r3, [r3, #0]
 802bb10:	f003 0310 	and.w	r3, r3, #16
 802bb14:	2b00      	cmp	r3, #0
 802bb16:	d010      	beq.n	802bb3a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 802bb18:	687b      	ldr	r3, [r7, #4]
 802bb1a:	699a      	ldr	r2, [r3, #24]
 802bb1c:	4b28      	ldr	r3, [pc, #160]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bb1e:	69db      	ldr	r3, [r3, #28]
 802bb20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802bb24:	429a      	cmp	r2, r3
 802bb26:	d208      	bcs.n	802bb3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 802bb28:	4b25      	ldr	r3, [pc, #148]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bb2a:	69db      	ldr	r3, [r3, #28]
 802bb2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 802bb30:	687b      	ldr	r3, [r7, #4]
 802bb32:	699b      	ldr	r3, [r3, #24]
 802bb34:	4922      	ldr	r1, [pc, #136]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bb36:	4313      	orrs	r3, r2
 802bb38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 802bb3a:	687b      	ldr	r3, [r7, #4]
 802bb3c:	681b      	ldr	r3, [r3, #0]
 802bb3e:	f003 0320 	and.w	r3, r3, #32
 802bb42:	2b00      	cmp	r3, #0
 802bb44:	d010      	beq.n	802bb68 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 802bb46:	687b      	ldr	r3, [r7, #4]
 802bb48:	69da      	ldr	r2, [r3, #28]
 802bb4a:	4b1d      	ldr	r3, [pc, #116]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bb4c:	6a1b      	ldr	r3, [r3, #32]
 802bb4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 802bb52:	429a      	cmp	r2, r3
 802bb54:	d208      	bcs.n	802bb68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 802bb56:	4b1a      	ldr	r3, [pc, #104]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bb58:	6a1b      	ldr	r3, [r3, #32]
 802bb5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802bb5e:	687b      	ldr	r3, [r7, #4]
 802bb60:	69db      	ldr	r3, [r3, #28]
 802bb62:	4917      	ldr	r1, [pc, #92]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bb64:	4313      	orrs	r3, r2
 802bb66:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802bb68:	f000 f834 	bl	802bbd4 <HAL_RCC_GetSysClockFreq>
 802bb6c:	4602      	mov	r2, r0
 802bb6e:	4b14      	ldr	r3, [pc, #80]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bb70:	699b      	ldr	r3, [r3, #24]
 802bb72:	0a1b      	lsrs	r3, r3, #8
 802bb74:	f003 030f 	and.w	r3, r3, #15
 802bb78:	4912      	ldr	r1, [pc, #72]	; (802bbc4 <HAL_RCC_ClockConfig+0x35c>)
 802bb7a:	5ccb      	ldrb	r3, [r1, r3]
 802bb7c:	f003 031f 	and.w	r3, r3, #31
 802bb80:	fa22 f303 	lsr.w	r3, r2, r3
 802bb84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802bb86:	4b0e      	ldr	r3, [pc, #56]	; (802bbc0 <HAL_RCC_ClockConfig+0x358>)
 802bb88:	699b      	ldr	r3, [r3, #24]
 802bb8a:	f003 030f 	and.w	r3, r3, #15
 802bb8e:	4a0d      	ldr	r2, [pc, #52]	; (802bbc4 <HAL_RCC_ClockConfig+0x35c>)
 802bb90:	5cd3      	ldrb	r3, [r2, r3]
 802bb92:	f003 031f 	and.w	r3, r3, #31
 802bb96:	693a      	ldr	r2, [r7, #16]
 802bb98:	fa22 f303 	lsr.w	r3, r2, r3
 802bb9c:	4a0a      	ldr	r2, [pc, #40]	; (802bbc8 <HAL_RCC_ClockConfig+0x360>)
 802bb9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802bba0:	4a0a      	ldr	r2, [pc, #40]	; (802bbcc <HAL_RCC_ClockConfig+0x364>)
 802bba2:	693b      	ldr	r3, [r7, #16]
 802bba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 802bba6:	4b0a      	ldr	r3, [pc, #40]	; (802bbd0 <HAL_RCC_ClockConfig+0x368>)
 802bba8:	681b      	ldr	r3, [r3, #0]
 802bbaa:	4618      	mov	r0, r3
 802bbac:	f7fe fa5a 	bl	802a064 <HAL_InitTick>
 802bbb0:	4603      	mov	r3, r0
 802bbb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 802bbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 802bbb6:	4618      	mov	r0, r3
 802bbb8:	3718      	adds	r7, #24
 802bbba:	46bd      	mov	sp, r7
 802bbbc:	bd80      	pop	{r7, pc}
 802bbbe:	bf00      	nop
 802bbc0:	58024400 	.word	0x58024400
 802bbc4:	08032da0 	.word	0x08032da0
 802bbc8:	24000044 	.word	0x24000044
 802bbcc:	24000040 	.word	0x24000040
 802bbd0:	24000048 	.word	0x24000048

0802bbd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802bbd4:	b480      	push	{r7}
 802bbd6:	b089      	sub	sp, #36	; 0x24
 802bbd8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 802bbda:	4bb3      	ldr	r3, [pc, #716]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bbdc:	691b      	ldr	r3, [r3, #16]
 802bbde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802bbe2:	2b18      	cmp	r3, #24
 802bbe4:	f200 8155 	bhi.w	802be92 <HAL_RCC_GetSysClockFreq+0x2be>
 802bbe8:	a201      	add	r2, pc, #4	; (adr r2, 802bbf0 <HAL_RCC_GetSysClockFreq+0x1c>)
 802bbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802bbee:	bf00      	nop
 802bbf0:	0802bc55 	.word	0x0802bc55
 802bbf4:	0802be93 	.word	0x0802be93
 802bbf8:	0802be93 	.word	0x0802be93
 802bbfc:	0802be93 	.word	0x0802be93
 802bc00:	0802be93 	.word	0x0802be93
 802bc04:	0802be93 	.word	0x0802be93
 802bc08:	0802be93 	.word	0x0802be93
 802bc0c:	0802be93 	.word	0x0802be93
 802bc10:	0802bc7b 	.word	0x0802bc7b
 802bc14:	0802be93 	.word	0x0802be93
 802bc18:	0802be93 	.word	0x0802be93
 802bc1c:	0802be93 	.word	0x0802be93
 802bc20:	0802be93 	.word	0x0802be93
 802bc24:	0802be93 	.word	0x0802be93
 802bc28:	0802be93 	.word	0x0802be93
 802bc2c:	0802be93 	.word	0x0802be93
 802bc30:	0802bc81 	.word	0x0802bc81
 802bc34:	0802be93 	.word	0x0802be93
 802bc38:	0802be93 	.word	0x0802be93
 802bc3c:	0802be93 	.word	0x0802be93
 802bc40:	0802be93 	.word	0x0802be93
 802bc44:	0802be93 	.word	0x0802be93
 802bc48:	0802be93 	.word	0x0802be93
 802bc4c:	0802be93 	.word	0x0802be93
 802bc50:	0802bc87 	.word	0x0802bc87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802bc54:	4b94      	ldr	r3, [pc, #592]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bc56:	681b      	ldr	r3, [r3, #0]
 802bc58:	f003 0320 	and.w	r3, r3, #32
 802bc5c:	2b00      	cmp	r3, #0
 802bc5e:	d009      	beq.n	802bc74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802bc60:	4b91      	ldr	r3, [pc, #580]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bc62:	681b      	ldr	r3, [r3, #0]
 802bc64:	08db      	lsrs	r3, r3, #3
 802bc66:	f003 0303 	and.w	r3, r3, #3
 802bc6a:	4a90      	ldr	r2, [pc, #576]	; (802beac <HAL_RCC_GetSysClockFreq+0x2d8>)
 802bc6c:	fa22 f303 	lsr.w	r3, r2, r3
 802bc70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 802bc72:	e111      	b.n	802be98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 802bc74:	4b8d      	ldr	r3, [pc, #564]	; (802beac <HAL_RCC_GetSysClockFreq+0x2d8>)
 802bc76:	61bb      	str	r3, [r7, #24]
      break;
 802bc78:	e10e      	b.n	802be98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 802bc7a:	4b8d      	ldr	r3, [pc, #564]	; (802beb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 802bc7c:	61bb      	str	r3, [r7, #24]
      break;
 802bc7e:	e10b      	b.n	802be98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 802bc80:	4b8c      	ldr	r3, [pc, #560]	; (802beb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 802bc82:	61bb      	str	r3, [r7, #24]
      break;
 802bc84:	e108      	b.n	802be98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802bc86:	4b88      	ldr	r3, [pc, #544]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bc8a:	f003 0303 	and.w	r3, r3, #3
 802bc8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 802bc90:	4b85      	ldr	r3, [pc, #532]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bc94:	091b      	lsrs	r3, r3, #4
 802bc96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802bc9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 802bc9c:	4b82      	ldr	r3, [pc, #520]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bca0:	f003 0301 	and.w	r3, r3, #1
 802bca4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 802bca6:	4b80      	ldr	r3, [pc, #512]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802bcaa:	08db      	lsrs	r3, r3, #3
 802bcac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802bcb0:	68fa      	ldr	r2, [r7, #12]
 802bcb2:	fb02 f303 	mul.w	r3, r2, r3
 802bcb6:	ee07 3a90 	vmov	s15, r3
 802bcba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802bcbe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 802bcc2:	693b      	ldr	r3, [r7, #16]
 802bcc4:	2b00      	cmp	r3, #0
 802bcc6:	f000 80e1 	beq.w	802be8c <HAL_RCC_GetSysClockFreq+0x2b8>
 802bcca:	697b      	ldr	r3, [r7, #20]
 802bccc:	2b02      	cmp	r3, #2
 802bcce:	f000 8083 	beq.w	802bdd8 <HAL_RCC_GetSysClockFreq+0x204>
 802bcd2:	697b      	ldr	r3, [r7, #20]
 802bcd4:	2b02      	cmp	r3, #2
 802bcd6:	f200 80a1 	bhi.w	802be1c <HAL_RCC_GetSysClockFreq+0x248>
 802bcda:	697b      	ldr	r3, [r7, #20]
 802bcdc:	2b00      	cmp	r3, #0
 802bcde:	d003      	beq.n	802bce8 <HAL_RCC_GetSysClockFreq+0x114>
 802bce0:	697b      	ldr	r3, [r7, #20]
 802bce2:	2b01      	cmp	r3, #1
 802bce4:	d056      	beq.n	802bd94 <HAL_RCC_GetSysClockFreq+0x1c0>
 802bce6:	e099      	b.n	802be1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802bce8:	4b6f      	ldr	r3, [pc, #444]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bcea:	681b      	ldr	r3, [r3, #0]
 802bcec:	f003 0320 	and.w	r3, r3, #32
 802bcf0:	2b00      	cmp	r3, #0
 802bcf2:	d02d      	beq.n	802bd50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802bcf4:	4b6c      	ldr	r3, [pc, #432]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bcf6:	681b      	ldr	r3, [r3, #0]
 802bcf8:	08db      	lsrs	r3, r3, #3
 802bcfa:	f003 0303 	and.w	r3, r3, #3
 802bcfe:	4a6b      	ldr	r2, [pc, #428]	; (802beac <HAL_RCC_GetSysClockFreq+0x2d8>)
 802bd00:	fa22 f303 	lsr.w	r3, r2, r3
 802bd04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802bd06:	687b      	ldr	r3, [r7, #4]
 802bd08:	ee07 3a90 	vmov	s15, r3
 802bd0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802bd10:	693b      	ldr	r3, [r7, #16]
 802bd12:	ee07 3a90 	vmov	s15, r3
 802bd16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802bd1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802bd1e:	4b62      	ldr	r3, [pc, #392]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bd22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802bd26:	ee07 3a90 	vmov	s15, r3
 802bd2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802bd2e:	ed97 6a02 	vldr	s12, [r7, #8]
 802bd32:	eddf 5a61 	vldr	s11, [pc, #388]	; 802beb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 802bd36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802bd3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802bd3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802bd42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802bd46:	ee67 7a27 	vmul.f32	s15, s14, s15
 802bd4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 802bd4e:	e087      	b.n	802be60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802bd50:	693b      	ldr	r3, [r7, #16]
 802bd52:	ee07 3a90 	vmov	s15, r3
 802bd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802bd5a:	eddf 6a58 	vldr	s13, [pc, #352]	; 802bebc <HAL_RCC_GetSysClockFreq+0x2e8>
 802bd5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802bd62:	4b51      	ldr	r3, [pc, #324]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802bd6a:	ee07 3a90 	vmov	s15, r3
 802bd6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802bd72:	ed97 6a02 	vldr	s12, [r7, #8]
 802bd76:	eddf 5a50 	vldr	s11, [pc, #320]	; 802beb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 802bd7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802bd7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802bd82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802bd86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802bd8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802bd8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802bd92:	e065      	b.n	802be60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802bd94:	693b      	ldr	r3, [r7, #16]
 802bd96:	ee07 3a90 	vmov	s15, r3
 802bd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802bd9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 802bec0 <HAL_RCC_GetSysClockFreq+0x2ec>
 802bda2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802bda6:	4b40      	ldr	r3, [pc, #256]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bdaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802bdae:	ee07 3a90 	vmov	s15, r3
 802bdb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802bdb6:	ed97 6a02 	vldr	s12, [r7, #8]
 802bdba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802beb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 802bdbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802bdc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802bdc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802bdca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802bdce:	ee67 7a27 	vmul.f32	s15, s14, s15
 802bdd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802bdd6:	e043      	b.n	802be60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802bdd8:	693b      	ldr	r3, [r7, #16]
 802bdda:	ee07 3a90 	vmov	s15, r3
 802bdde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802bde2:	eddf 6a38 	vldr	s13, [pc, #224]	; 802bec4 <HAL_RCC_GetSysClockFreq+0x2f0>
 802bde6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802bdea:	4b2f      	ldr	r3, [pc, #188]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802bdec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bdee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802bdf2:	ee07 3a90 	vmov	s15, r3
 802bdf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802bdfa:	ed97 6a02 	vldr	s12, [r7, #8]
 802bdfe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 802beb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 802be02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802be06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802be0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802be0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802be12:	ee67 7a27 	vmul.f32	s15, s14, s15
 802be16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802be1a:	e021      	b.n	802be60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802be1c:	693b      	ldr	r3, [r7, #16]
 802be1e:	ee07 3a90 	vmov	s15, r3
 802be22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802be26:	eddf 6a26 	vldr	s13, [pc, #152]	; 802bec0 <HAL_RCC_GetSysClockFreq+0x2ec>
 802be2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802be2e:	4b1e      	ldr	r3, [pc, #120]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802be30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802be32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802be36:	ee07 3a90 	vmov	s15, r3
 802be3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802be3e:	ed97 6a02 	vldr	s12, [r7, #8]
 802be42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 802beb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 802be46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802be4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802be4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802be52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802be56:	ee67 7a27 	vmul.f32	s15, s14, s15
 802be5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 802be5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 802be60:	4b11      	ldr	r3, [pc, #68]	; (802bea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 802be62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802be64:	0a5b      	lsrs	r3, r3, #9
 802be66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802be6a:	3301      	adds	r3, #1
 802be6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 802be6e:	683b      	ldr	r3, [r7, #0]
 802be70:	ee07 3a90 	vmov	s15, r3
 802be74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802be78:	edd7 6a07 	vldr	s13, [r7, #28]
 802be7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802be80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802be84:	ee17 3a90 	vmov	r3, s15
 802be88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 802be8a:	e005      	b.n	802be98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 802be8c:	2300      	movs	r3, #0
 802be8e:	61bb      	str	r3, [r7, #24]
      break;
 802be90:	e002      	b.n	802be98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 802be92:	4b07      	ldr	r3, [pc, #28]	; (802beb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 802be94:	61bb      	str	r3, [r7, #24]
      break;
 802be96:	bf00      	nop
  }

  return sysclockfreq;
 802be98:	69bb      	ldr	r3, [r7, #24]
}
 802be9a:	4618      	mov	r0, r3
 802be9c:	3724      	adds	r7, #36	; 0x24
 802be9e:	46bd      	mov	sp, r7
 802bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bea4:	4770      	bx	lr
 802bea6:	bf00      	nop
 802bea8:	58024400 	.word	0x58024400
 802beac:	03d09000 	.word	0x03d09000
 802beb0:	003d0900 	.word	0x003d0900
 802beb4:	017d7840 	.word	0x017d7840
 802beb8:	46000000 	.word	0x46000000
 802bebc:	4c742400 	.word	0x4c742400
 802bec0:	4a742400 	.word	0x4a742400
 802bec4:	4bbebc20 	.word	0x4bbebc20

0802bec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802bec8:	b580      	push	{r7, lr}
 802beca:	b082      	sub	sp, #8
 802becc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 802bece:	f7ff fe81 	bl	802bbd4 <HAL_RCC_GetSysClockFreq>
 802bed2:	4602      	mov	r2, r0
 802bed4:	4b10      	ldr	r3, [pc, #64]	; (802bf18 <HAL_RCC_GetHCLKFreq+0x50>)
 802bed6:	699b      	ldr	r3, [r3, #24]
 802bed8:	0a1b      	lsrs	r3, r3, #8
 802beda:	f003 030f 	and.w	r3, r3, #15
 802bede:	490f      	ldr	r1, [pc, #60]	; (802bf1c <HAL_RCC_GetHCLKFreq+0x54>)
 802bee0:	5ccb      	ldrb	r3, [r1, r3]
 802bee2:	f003 031f 	and.w	r3, r3, #31
 802bee6:	fa22 f303 	lsr.w	r3, r2, r3
 802beea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802beec:	4b0a      	ldr	r3, [pc, #40]	; (802bf18 <HAL_RCC_GetHCLKFreq+0x50>)
 802beee:	699b      	ldr	r3, [r3, #24]
 802bef0:	f003 030f 	and.w	r3, r3, #15
 802bef4:	4a09      	ldr	r2, [pc, #36]	; (802bf1c <HAL_RCC_GetHCLKFreq+0x54>)
 802bef6:	5cd3      	ldrb	r3, [r2, r3]
 802bef8:	f003 031f 	and.w	r3, r3, #31
 802befc:	687a      	ldr	r2, [r7, #4]
 802befe:	fa22 f303 	lsr.w	r3, r2, r3
 802bf02:	4a07      	ldr	r2, [pc, #28]	; (802bf20 <HAL_RCC_GetHCLKFreq+0x58>)
 802bf04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802bf06:	4a07      	ldr	r2, [pc, #28]	; (802bf24 <HAL_RCC_GetHCLKFreq+0x5c>)
 802bf08:	687b      	ldr	r3, [r7, #4]
 802bf0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 802bf0c:	4b04      	ldr	r3, [pc, #16]	; (802bf20 <HAL_RCC_GetHCLKFreq+0x58>)
 802bf0e:	681b      	ldr	r3, [r3, #0]
}
 802bf10:	4618      	mov	r0, r3
 802bf12:	3708      	adds	r7, #8
 802bf14:	46bd      	mov	sp, r7
 802bf16:	bd80      	pop	{r7, pc}
 802bf18:	58024400 	.word	0x58024400
 802bf1c:	08032da0 	.word	0x08032da0
 802bf20:	24000044 	.word	0x24000044
 802bf24:	24000040 	.word	0x24000040

0802bf28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802bf28:	b580      	push	{r7, lr}
 802bf2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 802bf2c:	f7ff ffcc 	bl	802bec8 <HAL_RCC_GetHCLKFreq>
 802bf30:	4602      	mov	r2, r0
 802bf32:	4b06      	ldr	r3, [pc, #24]	; (802bf4c <HAL_RCC_GetPCLK1Freq+0x24>)
 802bf34:	69db      	ldr	r3, [r3, #28]
 802bf36:	091b      	lsrs	r3, r3, #4
 802bf38:	f003 0307 	and.w	r3, r3, #7
 802bf3c:	4904      	ldr	r1, [pc, #16]	; (802bf50 <HAL_RCC_GetPCLK1Freq+0x28>)
 802bf3e:	5ccb      	ldrb	r3, [r1, r3]
 802bf40:	f003 031f 	and.w	r3, r3, #31
 802bf44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 802bf48:	4618      	mov	r0, r3
 802bf4a:	bd80      	pop	{r7, pc}
 802bf4c:	58024400 	.word	0x58024400
 802bf50:	08032da0 	.word	0x08032da0

0802bf54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802bf54:	b580      	push	{r7, lr}
 802bf56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 802bf58:	f7ff ffb6 	bl	802bec8 <HAL_RCC_GetHCLKFreq>
 802bf5c:	4602      	mov	r2, r0
 802bf5e:	4b06      	ldr	r3, [pc, #24]	; (802bf78 <HAL_RCC_GetPCLK2Freq+0x24>)
 802bf60:	69db      	ldr	r3, [r3, #28]
 802bf62:	0a1b      	lsrs	r3, r3, #8
 802bf64:	f003 0307 	and.w	r3, r3, #7
 802bf68:	4904      	ldr	r1, [pc, #16]	; (802bf7c <HAL_RCC_GetPCLK2Freq+0x28>)
 802bf6a:	5ccb      	ldrb	r3, [r1, r3]
 802bf6c:	f003 031f 	and.w	r3, r3, #31
 802bf70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 802bf74:	4618      	mov	r0, r3
 802bf76:	bd80      	pop	{r7, pc}
 802bf78:	58024400 	.word	0x58024400
 802bf7c:	08032da0 	.word	0x08032da0

0802bf80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 802bf80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802bf84:	b0ca      	sub	sp, #296	; 0x128
 802bf86:	af00      	add	r7, sp, #0
 802bf88:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 802bf8c:	2300      	movs	r3, #0
 802bf8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 802bf92:	2300      	movs	r3, #0
 802bf94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 802bf98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bfa0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 802bfa4:	2500      	movs	r5, #0
 802bfa6:	ea54 0305 	orrs.w	r3, r4, r5
 802bfaa:	d049      	beq.n	802c040 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 802bfac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bfb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802bfb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802bfb6:	d02f      	beq.n	802c018 <HAL_RCCEx_PeriphCLKConfig+0x98>
 802bfb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802bfbc:	d828      	bhi.n	802c010 <HAL_RCCEx_PeriphCLKConfig+0x90>
 802bfbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802bfc2:	d01a      	beq.n	802bffa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 802bfc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802bfc8:	d822      	bhi.n	802c010 <HAL_RCCEx_PeriphCLKConfig+0x90>
 802bfca:	2b00      	cmp	r3, #0
 802bfcc:	d003      	beq.n	802bfd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 802bfce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802bfd2:	d007      	beq.n	802bfe4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 802bfd4:	e01c      	b.n	802c010 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802bfd6:	4bb8      	ldr	r3, [pc, #736]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bfda:	4ab7      	ldr	r2, [pc, #732]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802bfdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802bfe0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 802bfe2:	e01a      	b.n	802c01a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802bfe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bfe8:	3308      	adds	r3, #8
 802bfea:	2102      	movs	r1, #2
 802bfec:	4618      	mov	r0, r3
 802bfee:	f001 fc8f 	bl	802d910 <RCCEx_PLL2_Config>
 802bff2:	4603      	mov	r3, r0
 802bff4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 802bff8:	e00f      	b.n	802c01a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802bffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bffe:	3328      	adds	r3, #40	; 0x28
 802c000:	2102      	movs	r1, #2
 802c002:	4618      	mov	r0, r3
 802c004:	f001 fd36 	bl	802da74 <RCCEx_PLL3_Config>
 802c008:	4603      	mov	r3, r0
 802c00a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 802c00e:	e004      	b.n	802c01a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c010:	2301      	movs	r3, #1
 802c012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c016:	e000      	b.n	802c01a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 802c018:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c01a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c01e:	2b00      	cmp	r3, #0
 802c020:	d10a      	bne.n	802c038 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 802c022:	4ba5      	ldr	r3, [pc, #660]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c026:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 802c02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c02e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c030:	4aa1      	ldr	r2, [pc, #644]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c032:	430b      	orrs	r3, r1
 802c034:	6513      	str	r3, [r2, #80]	; 0x50
 802c036:	e003      	b.n	802c040 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c03c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 802c040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c044:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c048:	f402 7880 	and.w	r8, r2, #256	; 0x100
 802c04c:	f04f 0900 	mov.w	r9, #0
 802c050:	ea58 0309 	orrs.w	r3, r8, r9
 802c054:	d047      	beq.n	802c0e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 802c056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c05a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c05c:	2b04      	cmp	r3, #4
 802c05e:	d82a      	bhi.n	802c0b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 802c060:	a201      	add	r2, pc, #4	; (adr r2, 802c068 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 802c062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c066:	bf00      	nop
 802c068:	0802c07d 	.word	0x0802c07d
 802c06c:	0802c08b 	.word	0x0802c08b
 802c070:	0802c0a1 	.word	0x0802c0a1
 802c074:	0802c0bf 	.word	0x0802c0bf
 802c078:	0802c0bf 	.word	0x0802c0bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c07c:	4b8e      	ldr	r3, [pc, #568]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c080:	4a8d      	ldr	r2, [pc, #564]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c088:	e01a      	b.n	802c0c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802c08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c08e:	3308      	adds	r3, #8
 802c090:	2100      	movs	r1, #0
 802c092:	4618      	mov	r0, r3
 802c094:	f001 fc3c 	bl	802d910 <RCCEx_PLL2_Config>
 802c098:	4603      	mov	r3, r0
 802c09a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c09e:	e00f      	b.n	802c0c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802c0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c0a4:	3328      	adds	r3, #40	; 0x28
 802c0a6:	2100      	movs	r1, #0
 802c0a8:	4618      	mov	r0, r3
 802c0aa:	f001 fce3 	bl	802da74 <RCCEx_PLL3_Config>
 802c0ae:	4603      	mov	r3, r0
 802c0b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c0b4:	e004      	b.n	802c0c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c0b6:	2301      	movs	r3, #1
 802c0b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c0bc:	e000      	b.n	802c0c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 802c0be:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c0c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c0c4:	2b00      	cmp	r3, #0
 802c0c6:	d10a      	bne.n	802c0de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802c0c8:	4b7b      	ldr	r3, [pc, #492]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c0cc:	f023 0107 	bic.w	r1, r3, #7
 802c0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c0d6:	4a78      	ldr	r2, [pc, #480]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c0d8:	430b      	orrs	r3, r1
 802c0da:	6513      	str	r3, [r2, #80]	; 0x50
 802c0dc:	e003      	b.n	802c0e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c0de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c0e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 802c0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c0ee:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 802c0f2:	f04f 0b00 	mov.w	fp, #0
 802c0f6:	ea5a 030b 	orrs.w	r3, sl, fp
 802c0fa:	d04c      	beq.n	802c196 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 802c0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c106:	d030      	beq.n	802c16a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 802c108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c10c:	d829      	bhi.n	802c162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 802c10e:	2bc0      	cmp	r3, #192	; 0xc0
 802c110:	d02d      	beq.n	802c16e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 802c112:	2bc0      	cmp	r3, #192	; 0xc0
 802c114:	d825      	bhi.n	802c162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 802c116:	2b80      	cmp	r3, #128	; 0x80
 802c118:	d018      	beq.n	802c14c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 802c11a:	2b80      	cmp	r3, #128	; 0x80
 802c11c:	d821      	bhi.n	802c162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 802c11e:	2b00      	cmp	r3, #0
 802c120:	d002      	beq.n	802c128 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 802c122:	2b40      	cmp	r3, #64	; 0x40
 802c124:	d007      	beq.n	802c136 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 802c126:	e01c      	b.n	802c162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c128:	4b63      	ldr	r3, [pc, #396]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c12c:	4a62      	ldr	r2, [pc, #392]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c12e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c132:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 802c134:	e01c      	b.n	802c170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802c136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c13a:	3308      	adds	r3, #8
 802c13c:	2100      	movs	r1, #0
 802c13e:	4618      	mov	r0, r3
 802c140:	f001 fbe6 	bl	802d910 <RCCEx_PLL2_Config>
 802c144:	4603      	mov	r3, r0
 802c146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 802c14a:	e011      	b.n	802c170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802c14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c150:	3328      	adds	r3, #40	; 0x28
 802c152:	2100      	movs	r1, #0
 802c154:	4618      	mov	r0, r3
 802c156:	f001 fc8d 	bl	802da74 <RCCEx_PLL3_Config>
 802c15a:	4603      	mov	r3, r0
 802c15c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 802c160:	e006      	b.n	802c170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c162:	2301      	movs	r3, #1
 802c164:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c168:	e002      	b.n	802c170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 802c16a:	bf00      	nop
 802c16c:	e000      	b.n	802c170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 802c16e:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c174:	2b00      	cmp	r3, #0
 802c176:	d10a      	bne.n	802c18e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 802c178:	4b4f      	ldr	r3, [pc, #316]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c17c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 802c180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c186:	4a4c      	ldr	r2, [pc, #304]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c188:	430b      	orrs	r3, r1
 802c18a:	6513      	str	r3, [r2, #80]	; 0x50
 802c18c:	e003      	b.n	802c196 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c18e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c192:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 802c196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c19e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 802c1a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 802c1a6:	2300      	movs	r3, #0
 802c1a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 802c1ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 802c1b0:	460b      	mov	r3, r1
 802c1b2:	4313      	orrs	r3, r2
 802c1b4:	d053      	beq.n	802c25e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 802c1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c1ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 802c1be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802c1c2:	d035      	beq.n	802c230 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 802c1c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802c1c8:	d82e      	bhi.n	802c228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 802c1ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 802c1ce:	d031      	beq.n	802c234 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 802c1d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 802c1d4:	d828      	bhi.n	802c228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 802c1d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802c1da:	d01a      	beq.n	802c212 <HAL_RCCEx_PeriphCLKConfig+0x292>
 802c1dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802c1e0:	d822      	bhi.n	802c228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 802c1e2:	2b00      	cmp	r3, #0
 802c1e4:	d003      	beq.n	802c1ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 802c1e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802c1ea:	d007      	beq.n	802c1fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 802c1ec:	e01c      	b.n	802c228 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c1ee:	4b32      	ldr	r3, [pc, #200]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c1f2:	4a31      	ldr	r2, [pc, #196]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c1f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c1f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c1fa:	e01c      	b.n	802c236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802c1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c200:	3308      	adds	r3, #8
 802c202:	2100      	movs	r1, #0
 802c204:	4618      	mov	r0, r3
 802c206:	f001 fb83 	bl	802d910 <RCCEx_PLL2_Config>
 802c20a:	4603      	mov	r3, r0
 802c20c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 802c210:	e011      	b.n	802c236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802c212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c216:	3328      	adds	r3, #40	; 0x28
 802c218:	2100      	movs	r1, #0
 802c21a:	4618      	mov	r0, r3
 802c21c:	f001 fc2a 	bl	802da74 <RCCEx_PLL3_Config>
 802c220:	4603      	mov	r3, r0
 802c222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c226:	e006      	b.n	802c236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 802c228:	2301      	movs	r3, #1
 802c22a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c22e:	e002      	b.n	802c236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 802c230:	bf00      	nop
 802c232:	e000      	b.n	802c236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 802c234:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c23a:	2b00      	cmp	r3, #0
 802c23c:	d10b      	bne.n	802c256 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 802c23e:	4b1e      	ldr	r3, [pc, #120]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c242:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 802c246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c24a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 802c24e:	4a1a      	ldr	r2, [pc, #104]	; (802c2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802c250:	430b      	orrs	r3, r1
 802c252:	6593      	str	r3, [r2, #88]	; 0x58
 802c254:	e003      	b.n	802c25e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c25a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 802c25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c266:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 802c26a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 802c26e:	2300      	movs	r3, #0
 802c270:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 802c274:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 802c278:	460b      	mov	r3, r1
 802c27a:	4313      	orrs	r3, r2
 802c27c:	d056      	beq.n	802c32c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 802c27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c282:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802c286:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802c28a:	d038      	beq.n	802c2fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 802c28c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802c290:	d831      	bhi.n	802c2f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 802c292:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 802c296:	d034      	beq.n	802c302 <HAL_RCCEx_PeriphCLKConfig+0x382>
 802c298:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 802c29c:	d82b      	bhi.n	802c2f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 802c29e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802c2a2:	d01d      	beq.n	802c2e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 802c2a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802c2a8:	d825      	bhi.n	802c2f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 802c2aa:	2b00      	cmp	r3, #0
 802c2ac:	d006      	beq.n	802c2bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 802c2ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802c2b2:	d00a      	beq.n	802c2ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 802c2b4:	e01f      	b.n	802c2f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 802c2b6:	bf00      	nop
 802c2b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c2bc:	4ba2      	ldr	r3, [pc, #648]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c2c0:	4aa1      	ldr	r2, [pc, #644]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c2c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c2c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c2c8:	e01c      	b.n	802c304 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802c2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c2ce:	3308      	adds	r3, #8
 802c2d0:	2100      	movs	r1, #0
 802c2d2:	4618      	mov	r0, r3
 802c2d4:	f001 fb1c 	bl	802d910 <RCCEx_PLL2_Config>
 802c2d8:	4603      	mov	r3, r0
 802c2da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 802c2de:	e011      	b.n	802c304 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802c2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c2e4:	3328      	adds	r3, #40	; 0x28
 802c2e6:	2100      	movs	r1, #0
 802c2e8:	4618      	mov	r0, r3
 802c2ea:	f001 fbc3 	bl	802da74 <RCCEx_PLL3_Config>
 802c2ee:	4603      	mov	r3, r0
 802c2f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802c2f4:	e006      	b.n	802c304 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 802c2f6:	2301      	movs	r3, #1
 802c2f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c2fc:	e002      	b.n	802c304 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 802c2fe:	bf00      	nop
 802c300:	e000      	b.n	802c304 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 802c302:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c308:	2b00      	cmp	r3, #0
 802c30a:	d10b      	bne.n	802c324 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 802c30c:	4b8e      	ldr	r3, [pc, #568]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c30e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c310:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 802c314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c318:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 802c31c:	4a8a      	ldr	r2, [pc, #552]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c31e:	430b      	orrs	r3, r1
 802c320:	6593      	str	r3, [r2, #88]	; 0x58
 802c322:	e003      	b.n	802c32c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c324:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c328:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 802c32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c334:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 802c338:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 802c33c:	2300      	movs	r3, #0
 802c33e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 802c342:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 802c346:	460b      	mov	r3, r1
 802c348:	4313      	orrs	r3, r2
 802c34a:	d03a      	beq.n	802c3c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 802c34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c352:	2b30      	cmp	r3, #48	; 0x30
 802c354:	d01f      	beq.n	802c396 <HAL_RCCEx_PeriphCLKConfig+0x416>
 802c356:	2b30      	cmp	r3, #48	; 0x30
 802c358:	d819      	bhi.n	802c38e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 802c35a:	2b20      	cmp	r3, #32
 802c35c:	d00c      	beq.n	802c378 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 802c35e:	2b20      	cmp	r3, #32
 802c360:	d815      	bhi.n	802c38e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 802c362:	2b00      	cmp	r3, #0
 802c364:	d019      	beq.n	802c39a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 802c366:	2b10      	cmp	r3, #16
 802c368:	d111      	bne.n	802c38e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c36a:	4b77      	ldr	r3, [pc, #476]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c36e:	4a76      	ldr	r2, [pc, #472]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c374:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 802c376:	e011      	b.n	802c39c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802c378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c37c:	3308      	adds	r3, #8
 802c37e:	2102      	movs	r1, #2
 802c380:	4618      	mov	r0, r3
 802c382:	f001 fac5 	bl	802d910 <RCCEx_PLL2_Config>
 802c386:	4603      	mov	r3, r0
 802c388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 802c38c:	e006      	b.n	802c39c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 802c38e:	2301      	movs	r3, #1
 802c390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c394:	e002      	b.n	802c39c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 802c396:	bf00      	nop
 802c398:	e000      	b.n	802c39c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 802c39a:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c39c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c3a0:	2b00      	cmp	r3, #0
 802c3a2:	d10a      	bne.n	802c3ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 802c3a4:	4b68      	ldr	r3, [pc, #416]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c3a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c3a8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 802c3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c3b2:	4a65      	ldr	r2, [pc, #404]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c3b4:	430b      	orrs	r3, r1
 802c3b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 802c3b8:	e003      	b.n	802c3c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c3ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c3be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 802c3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3ca:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 802c3ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 802c3d2:	2300      	movs	r3, #0
 802c3d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 802c3d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 802c3dc:	460b      	mov	r3, r1
 802c3de:	4313      	orrs	r3, r2
 802c3e0:	d051      	beq.n	802c486 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 802c3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c3e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802c3ec:	d035      	beq.n	802c45a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 802c3ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802c3f2:	d82e      	bhi.n	802c452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 802c3f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 802c3f8:	d031      	beq.n	802c45e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 802c3fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 802c3fe:	d828      	bhi.n	802c452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 802c400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802c404:	d01a      	beq.n	802c43c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 802c406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802c40a:	d822      	bhi.n	802c452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 802c40c:	2b00      	cmp	r3, #0
 802c40e:	d003      	beq.n	802c418 <HAL_RCCEx_PeriphCLKConfig+0x498>
 802c410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c414:	d007      	beq.n	802c426 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 802c416:	e01c      	b.n	802c452 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c418:	4b4b      	ldr	r3, [pc, #300]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c41c:	4a4a      	ldr	r2, [pc, #296]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c41e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c422:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 802c424:	e01c      	b.n	802c460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802c426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c42a:	3308      	adds	r3, #8
 802c42c:	2100      	movs	r1, #0
 802c42e:	4618      	mov	r0, r3
 802c430:	f001 fa6e 	bl	802d910 <RCCEx_PLL2_Config>
 802c434:	4603      	mov	r3, r0
 802c436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 802c43a:	e011      	b.n	802c460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802c43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c440:	3328      	adds	r3, #40	; 0x28
 802c442:	2100      	movs	r1, #0
 802c444:	4618      	mov	r0, r3
 802c446:	f001 fb15 	bl	802da74 <RCCEx_PLL3_Config>
 802c44a:	4603      	mov	r3, r0
 802c44c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 802c450:	e006      	b.n	802c460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c452:	2301      	movs	r3, #1
 802c454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c458:	e002      	b.n	802c460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 802c45a:	bf00      	nop
 802c45c:	e000      	b.n	802c460 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 802c45e:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c464:	2b00      	cmp	r3, #0
 802c466:	d10a      	bne.n	802c47e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 802c468:	4b37      	ldr	r3, [pc, #220]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c46a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c46c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 802c470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c476:	4a34      	ldr	r2, [pc, #208]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c478:	430b      	orrs	r3, r1
 802c47a:	6513      	str	r3, [r2, #80]	; 0x50
 802c47c:	e003      	b.n	802c486 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c47e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c482:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 802c486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c48e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 802c492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802c496:	2300      	movs	r3, #0
 802c498:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 802c49c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 802c4a0:	460b      	mov	r3, r1
 802c4a2:	4313      	orrs	r3, r2
 802c4a4:	d056      	beq.n	802c554 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 802c4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c4aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802c4ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802c4b0:	d033      	beq.n	802c51a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 802c4b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802c4b6:	d82c      	bhi.n	802c512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 802c4b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802c4bc:	d02f      	beq.n	802c51e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 802c4be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802c4c2:	d826      	bhi.n	802c512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 802c4c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 802c4c8:	d02b      	beq.n	802c522 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 802c4ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 802c4ce:	d820      	bhi.n	802c512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 802c4d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802c4d4:	d012      	beq.n	802c4fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 802c4d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802c4da:	d81a      	bhi.n	802c512 <HAL_RCCEx_PeriphCLKConfig+0x592>
 802c4dc:	2b00      	cmp	r3, #0
 802c4de:	d022      	beq.n	802c526 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 802c4e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802c4e4:	d115      	bne.n	802c512 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802c4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c4ea:	3308      	adds	r3, #8
 802c4ec:	2101      	movs	r1, #1
 802c4ee:	4618      	mov	r0, r3
 802c4f0:	f001 fa0e 	bl	802d910 <RCCEx_PLL2_Config>
 802c4f4:	4603      	mov	r3, r0
 802c4f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 802c4fa:	e015      	b.n	802c528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802c4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c500:	3328      	adds	r3, #40	; 0x28
 802c502:	2101      	movs	r1, #1
 802c504:	4618      	mov	r0, r3
 802c506:	f001 fab5 	bl	802da74 <RCCEx_PLL3_Config>
 802c50a:	4603      	mov	r3, r0
 802c50c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 802c510:	e00a      	b.n	802c528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c512:	2301      	movs	r3, #1
 802c514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c518:	e006      	b.n	802c528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802c51a:	bf00      	nop
 802c51c:	e004      	b.n	802c528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802c51e:	bf00      	nop
 802c520:	e002      	b.n	802c528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802c522:	bf00      	nop
 802c524:	e000      	b.n	802c528 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802c526:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c528:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c52c:	2b00      	cmp	r3, #0
 802c52e:	d10d      	bne.n	802c54c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 802c530:	4b05      	ldr	r3, [pc, #20]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c534:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 802c538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c53c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802c53e:	4a02      	ldr	r2, [pc, #8]	; (802c548 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802c540:	430b      	orrs	r3, r1
 802c542:	6513      	str	r3, [r2, #80]	; 0x50
 802c544:	e006      	b.n	802c554 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 802c546:	bf00      	nop
 802c548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c54c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c550:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 802c554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c55c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 802c560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802c564:	2300      	movs	r3, #0
 802c566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802c56a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 802c56e:	460b      	mov	r3, r1
 802c570:	4313      	orrs	r3, r2
 802c572:	d055      	beq.n	802c620 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 802c574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 802c57c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802c580:	d033      	beq.n	802c5ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 802c582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802c586:	d82c      	bhi.n	802c5e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 802c588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802c58c:	d02f      	beq.n	802c5ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 802c58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802c592:	d826      	bhi.n	802c5e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 802c594:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802c598:	d02b      	beq.n	802c5f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 802c59a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802c59e:	d820      	bhi.n	802c5e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 802c5a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802c5a4:	d012      	beq.n	802c5cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 802c5a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802c5aa:	d81a      	bhi.n	802c5e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 802c5ac:	2b00      	cmp	r3, #0
 802c5ae:	d022      	beq.n	802c5f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 802c5b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802c5b4:	d115      	bne.n	802c5e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802c5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c5ba:	3308      	adds	r3, #8
 802c5bc:	2101      	movs	r1, #1
 802c5be:	4618      	mov	r0, r3
 802c5c0:	f001 f9a6 	bl	802d910 <RCCEx_PLL2_Config>
 802c5c4:	4603      	mov	r3, r0
 802c5c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 802c5ca:	e015      	b.n	802c5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802c5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c5d0:	3328      	adds	r3, #40	; 0x28
 802c5d2:	2101      	movs	r1, #1
 802c5d4:	4618      	mov	r0, r3
 802c5d6:	f001 fa4d 	bl	802da74 <RCCEx_PLL3_Config>
 802c5da:	4603      	mov	r3, r0
 802c5dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 802c5e0:	e00a      	b.n	802c5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 802c5e2:	2301      	movs	r3, #1
 802c5e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c5e8:	e006      	b.n	802c5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802c5ea:	bf00      	nop
 802c5ec:	e004      	b.n	802c5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802c5ee:	bf00      	nop
 802c5f0:	e002      	b.n	802c5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802c5f2:	bf00      	nop
 802c5f4:	e000      	b.n	802c5f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802c5f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c5f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c5fc:	2b00      	cmp	r3, #0
 802c5fe:	d10b      	bne.n	802c618 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 802c600:	4ba3      	ldr	r3, [pc, #652]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c604:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 802c608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c60c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 802c610:	4a9f      	ldr	r2, [pc, #636]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c612:	430b      	orrs	r3, r1
 802c614:	6593      	str	r3, [r2, #88]	; 0x58
 802c616:	e003      	b.n	802c620 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c618:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c61c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 802c620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c628:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 802c62c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802c630:	2300      	movs	r3, #0
 802c632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 802c636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802c63a:	460b      	mov	r3, r1
 802c63c:	4313      	orrs	r3, r2
 802c63e:	d037      	beq.n	802c6b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 802c640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802c64a:	d00e      	beq.n	802c66a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 802c64c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802c650:	d816      	bhi.n	802c680 <HAL_RCCEx_PeriphCLKConfig+0x700>
 802c652:	2b00      	cmp	r3, #0
 802c654:	d018      	beq.n	802c688 <HAL_RCCEx_PeriphCLKConfig+0x708>
 802c656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802c65a:	d111      	bne.n	802c680 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c65c:	4b8c      	ldr	r3, [pc, #560]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c660:	4a8b      	ldr	r2, [pc, #556]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 802c668:	e00f      	b.n	802c68a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802c66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c66e:	3308      	adds	r3, #8
 802c670:	2101      	movs	r1, #1
 802c672:	4618      	mov	r0, r3
 802c674:	f001 f94c 	bl	802d910 <RCCEx_PLL2_Config>
 802c678:	4603      	mov	r3, r0
 802c67a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 802c67e:	e004      	b.n	802c68a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c680:	2301      	movs	r3, #1
 802c682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c686:	e000      	b.n	802c68a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 802c688:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c68a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c68e:	2b00      	cmp	r3, #0
 802c690:	d10a      	bne.n	802c6a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 802c692:	4b7f      	ldr	r3, [pc, #508]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c696:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 802c69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c6a0:	4a7b      	ldr	r2, [pc, #492]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c6a2:	430b      	orrs	r3, r1
 802c6a4:	6513      	str	r3, [r2, #80]	; 0x50
 802c6a6:	e003      	b.n	802c6b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c6a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c6ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 802c6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c6b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 802c6bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802c6c0:	2300      	movs	r3, #0
 802c6c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 802c6c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 802c6ca:	460b      	mov	r3, r1
 802c6cc:	4313      	orrs	r3, r2
 802c6ce:	d039      	beq.n	802c744 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 802c6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c6d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802c6d6:	2b03      	cmp	r3, #3
 802c6d8:	d81c      	bhi.n	802c714 <HAL_RCCEx_PeriphCLKConfig+0x794>
 802c6da:	a201      	add	r2, pc, #4	; (adr r2, 802c6e0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 802c6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c6e0:	0802c71d 	.word	0x0802c71d
 802c6e4:	0802c6f1 	.word	0x0802c6f1
 802c6e8:	0802c6ff 	.word	0x0802c6ff
 802c6ec:	0802c71d 	.word	0x0802c71d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802c6f0:	4b67      	ldr	r3, [pc, #412]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c6f4:	4a66      	ldr	r2, [pc, #408]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c6f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c6fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 802c6fc:	e00f      	b.n	802c71e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802c6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c702:	3308      	adds	r3, #8
 802c704:	2102      	movs	r1, #2
 802c706:	4618      	mov	r0, r3
 802c708:	f001 f902 	bl	802d910 <RCCEx_PLL2_Config>
 802c70c:	4603      	mov	r3, r0
 802c70e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 802c712:	e004      	b.n	802c71e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 802c714:	2301      	movs	r3, #1
 802c716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c71a:	e000      	b.n	802c71e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 802c71c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c71e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c722:	2b00      	cmp	r3, #0
 802c724:	d10a      	bne.n	802c73c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 802c726:	4b5a      	ldr	r3, [pc, #360]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802c72a:	f023 0103 	bic.w	r1, r3, #3
 802c72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802c734:	4a56      	ldr	r2, [pc, #344]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c736:	430b      	orrs	r3, r1
 802c738:	64d3      	str	r3, [r2, #76]	; 0x4c
 802c73a:	e003      	b.n	802c744 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c73c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c740:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 802c744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c748:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c74c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 802c750:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802c754:	2300      	movs	r3, #0
 802c756:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802c75a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 802c75e:	460b      	mov	r3, r1
 802c760:	4313      	orrs	r3, r2
 802c762:	f000 809f 	beq.w	802c8a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802c766:	4b4b      	ldr	r3, [pc, #300]	; (802c894 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802c768:	681b      	ldr	r3, [r3, #0]
 802c76a:	4a4a      	ldr	r2, [pc, #296]	; (802c894 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802c76c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802c770:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802c772:	f7fd fcc1 	bl	802a0f8 <HAL_GetTick>
 802c776:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802c77a:	e00b      	b.n	802c794 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802c77c:	f7fd fcbc 	bl	802a0f8 <HAL_GetTick>
 802c780:	4602      	mov	r2, r0
 802c782:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802c786:	1ad3      	subs	r3, r2, r3
 802c788:	2b64      	cmp	r3, #100	; 0x64
 802c78a:	d903      	bls.n	802c794 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 802c78c:	2303      	movs	r3, #3
 802c78e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c792:	e005      	b.n	802c7a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802c794:	4b3f      	ldr	r3, [pc, #252]	; (802c894 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802c796:	681b      	ldr	r3, [r3, #0]
 802c798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802c79c:	2b00      	cmp	r3, #0
 802c79e:	d0ed      	beq.n	802c77c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 802c7a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c7a4:	2b00      	cmp	r3, #0
 802c7a6:	d179      	bne.n	802c89c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 802c7a8:	4b39      	ldr	r3, [pc, #228]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c7aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802c7ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c7b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802c7b4:	4053      	eors	r3, r2
 802c7b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802c7ba:	2b00      	cmp	r3, #0
 802c7bc:	d015      	beq.n	802c7ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802c7be:	4b34      	ldr	r3, [pc, #208]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c7c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802c7c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 802c7ca:	4b31      	ldr	r3, [pc, #196]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c7ce:	4a30      	ldr	r2, [pc, #192]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c7d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802c7d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 802c7d6:	4b2e      	ldr	r3, [pc, #184]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c7da:	4a2d      	ldr	r2, [pc, #180]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c7dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802c7e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 802c7e2:	4a2b      	ldr	r2, [pc, #172]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c7e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802c7e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 802c7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c7ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802c7f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c7f6:	d118      	bne.n	802c82a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802c7f8:	f7fd fc7e 	bl	802a0f8 <HAL_GetTick>
 802c7fc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802c800:	e00d      	b.n	802c81e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802c802:	f7fd fc79 	bl	802a0f8 <HAL_GetTick>
 802c806:	4602      	mov	r2, r0
 802c808:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802c80c:	1ad2      	subs	r2, r2, r3
 802c80e:	f241 3388 	movw	r3, #5000	; 0x1388
 802c812:	429a      	cmp	r2, r3
 802c814:	d903      	bls.n	802c81e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 802c816:	2303      	movs	r3, #3
 802c818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 802c81c:	e005      	b.n	802c82a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802c81e:	4b1c      	ldr	r3, [pc, #112]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c822:	f003 0302 	and.w	r3, r3, #2
 802c826:	2b00      	cmp	r3, #0
 802c828:	d0eb      	beq.n	802c802 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 802c82a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c82e:	2b00      	cmp	r3, #0
 802c830:	d129      	bne.n	802c886 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802c832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c836:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802c83a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802c83e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802c842:	d10e      	bne.n	802c862 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 802c844:	4b12      	ldr	r3, [pc, #72]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c846:	691b      	ldr	r3, [r3, #16]
 802c848:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 802c84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c850:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802c854:	091a      	lsrs	r2, r3, #4
 802c856:	4b10      	ldr	r3, [pc, #64]	; (802c898 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 802c858:	4013      	ands	r3, r2
 802c85a:	4a0d      	ldr	r2, [pc, #52]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c85c:	430b      	orrs	r3, r1
 802c85e:	6113      	str	r3, [r2, #16]
 802c860:	e005      	b.n	802c86e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 802c862:	4b0b      	ldr	r3, [pc, #44]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c864:	691b      	ldr	r3, [r3, #16]
 802c866:	4a0a      	ldr	r2, [pc, #40]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c868:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802c86c:	6113      	str	r3, [r2, #16]
 802c86e:	4b08      	ldr	r3, [pc, #32]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c870:	6f19      	ldr	r1, [r3, #112]	; 0x70
 802c872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802c87a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802c87e:	4a04      	ldr	r2, [pc, #16]	; (802c890 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802c880:	430b      	orrs	r3, r1
 802c882:	6713      	str	r3, [r2, #112]	; 0x70
 802c884:	e00e      	b.n	802c8a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 802c886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c88a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 802c88e:	e009      	b.n	802c8a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 802c890:	58024400 	.word	0x58024400
 802c894:	58024800 	.word	0x58024800
 802c898:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c89c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c8a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 802c8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c8ac:	f002 0301 	and.w	r3, r2, #1
 802c8b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802c8b4:	2300      	movs	r3, #0
 802c8b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802c8ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802c8be:	460b      	mov	r3, r1
 802c8c0:	4313      	orrs	r3, r2
 802c8c2:	f000 8089 	beq.w	802c9d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 802c8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c8ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802c8cc:	2b28      	cmp	r3, #40	; 0x28
 802c8ce:	d86b      	bhi.n	802c9a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 802c8d0:	a201      	add	r2, pc, #4	; (adr r2, 802c8d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 802c8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c8d6:	bf00      	nop
 802c8d8:	0802c9b1 	.word	0x0802c9b1
 802c8dc:	0802c9a9 	.word	0x0802c9a9
 802c8e0:	0802c9a9 	.word	0x0802c9a9
 802c8e4:	0802c9a9 	.word	0x0802c9a9
 802c8e8:	0802c9a9 	.word	0x0802c9a9
 802c8ec:	0802c9a9 	.word	0x0802c9a9
 802c8f0:	0802c9a9 	.word	0x0802c9a9
 802c8f4:	0802c9a9 	.word	0x0802c9a9
 802c8f8:	0802c97d 	.word	0x0802c97d
 802c8fc:	0802c9a9 	.word	0x0802c9a9
 802c900:	0802c9a9 	.word	0x0802c9a9
 802c904:	0802c9a9 	.word	0x0802c9a9
 802c908:	0802c9a9 	.word	0x0802c9a9
 802c90c:	0802c9a9 	.word	0x0802c9a9
 802c910:	0802c9a9 	.word	0x0802c9a9
 802c914:	0802c9a9 	.word	0x0802c9a9
 802c918:	0802c993 	.word	0x0802c993
 802c91c:	0802c9a9 	.word	0x0802c9a9
 802c920:	0802c9a9 	.word	0x0802c9a9
 802c924:	0802c9a9 	.word	0x0802c9a9
 802c928:	0802c9a9 	.word	0x0802c9a9
 802c92c:	0802c9a9 	.word	0x0802c9a9
 802c930:	0802c9a9 	.word	0x0802c9a9
 802c934:	0802c9a9 	.word	0x0802c9a9
 802c938:	0802c9b1 	.word	0x0802c9b1
 802c93c:	0802c9a9 	.word	0x0802c9a9
 802c940:	0802c9a9 	.word	0x0802c9a9
 802c944:	0802c9a9 	.word	0x0802c9a9
 802c948:	0802c9a9 	.word	0x0802c9a9
 802c94c:	0802c9a9 	.word	0x0802c9a9
 802c950:	0802c9a9 	.word	0x0802c9a9
 802c954:	0802c9a9 	.word	0x0802c9a9
 802c958:	0802c9b1 	.word	0x0802c9b1
 802c95c:	0802c9a9 	.word	0x0802c9a9
 802c960:	0802c9a9 	.word	0x0802c9a9
 802c964:	0802c9a9 	.word	0x0802c9a9
 802c968:	0802c9a9 	.word	0x0802c9a9
 802c96c:	0802c9a9 	.word	0x0802c9a9
 802c970:	0802c9a9 	.word	0x0802c9a9
 802c974:	0802c9a9 	.word	0x0802c9a9
 802c978:	0802c9b1 	.word	0x0802c9b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802c97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c980:	3308      	adds	r3, #8
 802c982:	2101      	movs	r1, #1
 802c984:	4618      	mov	r0, r3
 802c986:	f000 ffc3 	bl	802d910 <RCCEx_PLL2_Config>
 802c98a:	4603      	mov	r3, r0
 802c98c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 802c990:	e00f      	b.n	802c9b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802c992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c996:	3328      	adds	r3, #40	; 0x28
 802c998:	2101      	movs	r1, #1
 802c99a:	4618      	mov	r0, r3
 802c99c:	f001 f86a 	bl	802da74 <RCCEx_PLL3_Config>
 802c9a0:	4603      	mov	r3, r0
 802c9a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 802c9a6:	e004      	b.n	802c9b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802c9a8:	2301      	movs	r3, #1
 802c9aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802c9ae:	e000      	b.n	802c9b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 802c9b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 802c9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c9b6:	2b00      	cmp	r3, #0
 802c9b8:	d10a      	bne.n	802c9d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 802c9ba:	4bbf      	ldr	r3, [pc, #764]	; (802ccb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802c9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802c9be:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 802c9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c9c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802c9c8:	4abb      	ldr	r2, [pc, #748]	; (802ccb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802c9ca:	430b      	orrs	r3, r1
 802c9cc:	6553      	str	r3, [r2, #84]	; 0x54
 802c9ce:	e003      	b.n	802c9d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802c9d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802c9d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 802c9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c9e0:	f002 0302 	and.w	r3, r2, #2
 802c9e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c9e8:	2300      	movs	r3, #0
 802c9ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802c9ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 802c9f2:	460b      	mov	r3, r1
 802c9f4:	4313      	orrs	r3, r2
 802c9f6:	d041      	beq.n	802ca7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 802c9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c9fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802c9fe:	2b05      	cmp	r3, #5
 802ca00:	d824      	bhi.n	802ca4c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 802ca02:	a201      	add	r2, pc, #4	; (adr r2, 802ca08 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 802ca04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ca08:	0802ca55 	.word	0x0802ca55
 802ca0c:	0802ca21 	.word	0x0802ca21
 802ca10:	0802ca37 	.word	0x0802ca37
 802ca14:	0802ca55 	.word	0x0802ca55
 802ca18:	0802ca55 	.word	0x0802ca55
 802ca1c:	0802ca55 	.word	0x0802ca55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802ca20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ca24:	3308      	adds	r3, #8
 802ca26:	2101      	movs	r1, #1
 802ca28:	4618      	mov	r0, r3
 802ca2a:	f000 ff71 	bl	802d910 <RCCEx_PLL2_Config>
 802ca2e:	4603      	mov	r3, r0
 802ca30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 802ca34:	e00f      	b.n	802ca56 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802ca36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ca3a:	3328      	adds	r3, #40	; 0x28
 802ca3c:	2101      	movs	r1, #1
 802ca3e:	4618      	mov	r0, r3
 802ca40:	f001 f818 	bl	802da74 <RCCEx_PLL3_Config>
 802ca44:	4603      	mov	r3, r0
 802ca46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 802ca4a:	e004      	b.n	802ca56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802ca4c:	2301      	movs	r3, #1
 802ca4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802ca52:	e000      	b.n	802ca56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 802ca54:	bf00      	nop
    }

    if (ret == HAL_OK)
 802ca56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802ca5a:	2b00      	cmp	r3, #0
 802ca5c:	d10a      	bne.n	802ca74 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 802ca5e:	4b96      	ldr	r3, [pc, #600]	; (802ccb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802ca60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ca62:	f023 0107 	bic.w	r1, r3, #7
 802ca66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ca6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802ca6c:	4a92      	ldr	r2, [pc, #584]	; (802ccb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802ca6e:	430b      	orrs	r3, r1
 802ca70:	6553      	str	r3, [r2, #84]	; 0x54
 802ca72:	e003      	b.n	802ca7c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802ca74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802ca78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 802ca7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ca80:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ca84:	f002 0304 	and.w	r3, r2, #4
 802ca88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802ca8c:	2300      	movs	r3, #0
 802ca8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802ca92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 802ca96:	460b      	mov	r3, r1
 802ca98:	4313      	orrs	r3, r2
 802ca9a:	d044      	beq.n	802cb26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 802ca9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802caa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802caa4:	2b05      	cmp	r3, #5
 802caa6:	d825      	bhi.n	802caf4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 802caa8:	a201      	add	r2, pc, #4	; (adr r2, 802cab0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 802caaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802caae:	bf00      	nop
 802cab0:	0802cafd 	.word	0x0802cafd
 802cab4:	0802cac9 	.word	0x0802cac9
 802cab8:	0802cadf 	.word	0x0802cadf
 802cabc:	0802cafd 	.word	0x0802cafd
 802cac0:	0802cafd 	.word	0x0802cafd
 802cac4:	0802cafd 	.word	0x0802cafd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802cac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cacc:	3308      	adds	r3, #8
 802cace:	2101      	movs	r1, #1
 802cad0:	4618      	mov	r0, r3
 802cad2:	f000 ff1d 	bl	802d910 <RCCEx_PLL2_Config>
 802cad6:	4603      	mov	r3, r0
 802cad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 802cadc:	e00f      	b.n	802cafe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802cade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cae2:	3328      	adds	r3, #40	; 0x28
 802cae4:	2101      	movs	r1, #1
 802cae6:	4618      	mov	r0, r3
 802cae8:	f000 ffc4 	bl	802da74 <RCCEx_PLL3_Config>
 802caec:	4603      	mov	r3, r0
 802caee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 802caf2:	e004      	b.n	802cafe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802caf4:	2301      	movs	r3, #1
 802caf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cafa:	e000      	b.n	802cafe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 802cafc:	bf00      	nop
    }

    if (ret == HAL_OK)
 802cafe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cb02:	2b00      	cmp	r3, #0
 802cb04:	d10b      	bne.n	802cb1e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 802cb06:	4b6c      	ldr	r3, [pc, #432]	; (802ccb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802cb08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cb0a:	f023 0107 	bic.w	r1, r3, #7
 802cb0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cb12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802cb16:	4a68      	ldr	r2, [pc, #416]	; (802ccb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802cb18:	430b      	orrs	r3, r1
 802cb1a:	6593      	str	r3, [r2, #88]	; 0x58
 802cb1c:	e003      	b.n	802cb26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802cb1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cb22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 802cb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb2e:	f002 0320 	and.w	r3, r2, #32
 802cb32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802cb36:	2300      	movs	r3, #0
 802cb38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802cb3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802cb40:	460b      	mov	r3, r1
 802cb42:	4313      	orrs	r3, r2
 802cb44:	d055      	beq.n	802cbf2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 802cb46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cb4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802cb4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802cb52:	d033      	beq.n	802cbbc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 802cb54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802cb58:	d82c      	bhi.n	802cbb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802cb5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802cb5e:	d02f      	beq.n	802cbc0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 802cb60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802cb64:	d826      	bhi.n	802cbb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802cb66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802cb6a:	d02b      	beq.n	802cbc4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 802cb6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802cb70:	d820      	bhi.n	802cbb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802cb72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802cb76:	d012      	beq.n	802cb9e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 802cb78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802cb7c:	d81a      	bhi.n	802cbb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802cb7e:	2b00      	cmp	r3, #0
 802cb80:	d022      	beq.n	802cbc8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 802cb82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802cb86:	d115      	bne.n	802cbb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802cb88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cb8c:	3308      	adds	r3, #8
 802cb8e:	2100      	movs	r1, #0
 802cb90:	4618      	mov	r0, r3
 802cb92:	f000 febd 	bl	802d910 <RCCEx_PLL2_Config>
 802cb96:	4603      	mov	r3, r0
 802cb98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 802cb9c:	e015      	b.n	802cbca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802cb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cba2:	3328      	adds	r3, #40	; 0x28
 802cba4:	2102      	movs	r1, #2
 802cba6:	4618      	mov	r0, r3
 802cba8:	f000 ff64 	bl	802da74 <RCCEx_PLL3_Config>
 802cbac:	4603      	mov	r3, r0
 802cbae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 802cbb2:	e00a      	b.n	802cbca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802cbb4:	2301      	movs	r3, #1
 802cbb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cbba:	e006      	b.n	802cbca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802cbbc:	bf00      	nop
 802cbbe:	e004      	b.n	802cbca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802cbc0:	bf00      	nop
 802cbc2:	e002      	b.n	802cbca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802cbc4:	bf00      	nop
 802cbc6:	e000      	b.n	802cbca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802cbc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 802cbca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cbce:	2b00      	cmp	r3, #0
 802cbd0:	d10b      	bne.n	802cbea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 802cbd2:	4b39      	ldr	r3, [pc, #228]	; (802ccb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802cbd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cbd6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 802cbda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802cbe2:	4a35      	ldr	r2, [pc, #212]	; (802ccb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802cbe4:	430b      	orrs	r3, r1
 802cbe6:	6553      	str	r3, [r2, #84]	; 0x54
 802cbe8:	e003      	b.n	802cbf2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802cbea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cbee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 802cbf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cbfa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 802cbfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802cc02:	2300      	movs	r3, #0
 802cc04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802cc08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 802cc0c:	460b      	mov	r3, r1
 802cc0e:	4313      	orrs	r3, r2
 802cc10:	d058      	beq.n	802ccc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 802cc12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cc16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802cc1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 802cc1e:	d033      	beq.n	802cc88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 802cc20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 802cc24:	d82c      	bhi.n	802cc80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802cc26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802cc2a:	d02f      	beq.n	802cc8c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 802cc2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802cc30:	d826      	bhi.n	802cc80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802cc32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802cc36:	d02b      	beq.n	802cc90 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 802cc38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802cc3c:	d820      	bhi.n	802cc80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802cc3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802cc42:	d012      	beq.n	802cc6a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 802cc44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802cc48:	d81a      	bhi.n	802cc80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802cc4a:	2b00      	cmp	r3, #0
 802cc4c:	d022      	beq.n	802cc94 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 802cc4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802cc52:	d115      	bne.n	802cc80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802cc54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cc58:	3308      	adds	r3, #8
 802cc5a:	2100      	movs	r1, #0
 802cc5c:	4618      	mov	r0, r3
 802cc5e:	f000 fe57 	bl	802d910 <RCCEx_PLL2_Config>
 802cc62:	4603      	mov	r3, r0
 802cc64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 802cc68:	e015      	b.n	802cc96 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802cc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cc6e:	3328      	adds	r3, #40	; 0x28
 802cc70:	2102      	movs	r1, #2
 802cc72:	4618      	mov	r0, r3
 802cc74:	f000 fefe 	bl	802da74 <RCCEx_PLL3_Config>
 802cc78:	4603      	mov	r3, r0
 802cc7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 802cc7e:	e00a      	b.n	802cc96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802cc80:	2301      	movs	r3, #1
 802cc82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cc86:	e006      	b.n	802cc96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802cc88:	bf00      	nop
 802cc8a:	e004      	b.n	802cc96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802cc8c:	bf00      	nop
 802cc8e:	e002      	b.n	802cc96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802cc90:	bf00      	nop
 802cc92:	e000      	b.n	802cc96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802cc94:	bf00      	nop
    }

    if (ret == HAL_OK)
 802cc96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cc9a:	2b00      	cmp	r3, #0
 802cc9c:	d10e      	bne.n	802ccbc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 802cc9e:	4b06      	ldr	r3, [pc, #24]	; (802ccb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802cca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cca2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 802cca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ccaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802ccae:	4a02      	ldr	r2, [pc, #8]	; (802ccb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802ccb0:	430b      	orrs	r3, r1
 802ccb2:	6593      	str	r3, [r2, #88]	; 0x58
 802ccb4:	e006      	b.n	802ccc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 802ccb6:	bf00      	nop
 802ccb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 802ccbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802ccc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 802ccc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ccc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cccc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 802ccd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802ccd4:	2300      	movs	r3, #0
 802ccd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802ccda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 802ccde:	460b      	mov	r3, r1
 802cce0:	4313      	orrs	r3, r2
 802cce2:	d055      	beq.n	802cd90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 802cce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cce8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 802ccec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 802ccf0:	d033      	beq.n	802cd5a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 802ccf2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 802ccf6:	d82c      	bhi.n	802cd52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802ccf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802ccfc:	d02f      	beq.n	802cd5e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 802ccfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802cd02:	d826      	bhi.n	802cd52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802cd04:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 802cd08:	d02b      	beq.n	802cd62 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 802cd0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 802cd0e:	d820      	bhi.n	802cd52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802cd10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802cd14:	d012      	beq.n	802cd3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 802cd16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802cd1a:	d81a      	bhi.n	802cd52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802cd1c:	2b00      	cmp	r3, #0
 802cd1e:	d022      	beq.n	802cd66 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 802cd20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802cd24:	d115      	bne.n	802cd52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802cd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cd2a:	3308      	adds	r3, #8
 802cd2c:	2100      	movs	r1, #0
 802cd2e:	4618      	mov	r0, r3
 802cd30:	f000 fdee 	bl	802d910 <RCCEx_PLL2_Config>
 802cd34:	4603      	mov	r3, r0
 802cd36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 802cd3a:	e015      	b.n	802cd68 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802cd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cd40:	3328      	adds	r3, #40	; 0x28
 802cd42:	2102      	movs	r1, #2
 802cd44:	4618      	mov	r0, r3
 802cd46:	f000 fe95 	bl	802da74 <RCCEx_PLL3_Config>
 802cd4a:	4603      	mov	r3, r0
 802cd4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 802cd50:	e00a      	b.n	802cd68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802cd52:	2301      	movs	r3, #1
 802cd54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cd58:	e006      	b.n	802cd68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802cd5a:	bf00      	nop
 802cd5c:	e004      	b.n	802cd68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802cd5e:	bf00      	nop
 802cd60:	e002      	b.n	802cd68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802cd62:	bf00      	nop
 802cd64:	e000      	b.n	802cd68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802cd66:	bf00      	nop
    }

    if (ret == HAL_OK)
 802cd68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cd6c:	2b00      	cmp	r3, #0
 802cd6e:	d10b      	bne.n	802cd88 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 802cd70:	4ba1      	ldr	r3, [pc, #644]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cd72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cd74:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 802cd78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cd7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 802cd80:	4a9d      	ldr	r2, [pc, #628]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cd82:	430b      	orrs	r3, r1
 802cd84:	6593      	str	r3, [r2, #88]	; 0x58
 802cd86:	e003      	b.n	802cd90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802cd88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cd8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 802cd90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cd98:	f002 0308 	and.w	r3, r2, #8
 802cd9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802cda0:	2300      	movs	r3, #0
 802cda2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802cda6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 802cdaa:	460b      	mov	r3, r1
 802cdac:	4313      	orrs	r3, r2
 802cdae:	d01e      	beq.n	802cdee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 802cdb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cdb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802cdb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802cdbc:	d10c      	bne.n	802cdd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 802cdbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cdc2:	3328      	adds	r3, #40	; 0x28
 802cdc4:	2102      	movs	r1, #2
 802cdc6:	4618      	mov	r0, r3
 802cdc8:	f000 fe54 	bl	802da74 <RCCEx_PLL3_Config>
 802cdcc:	4603      	mov	r3, r0
 802cdce:	2b00      	cmp	r3, #0
 802cdd0:	d002      	beq.n	802cdd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 802cdd2:	2301      	movs	r3, #1
 802cdd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 802cdd8:	4b87      	ldr	r3, [pc, #540]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cdda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cddc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802cde0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cde4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802cde8:	4a83      	ldr	r2, [pc, #524]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cdea:	430b      	orrs	r3, r1
 802cdec:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 802cdee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cdf6:	f002 0310 	and.w	r3, r2, #16
 802cdfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802cdfe:	2300      	movs	r3, #0
 802ce00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802ce04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 802ce08:	460b      	mov	r3, r1
 802ce0a:	4313      	orrs	r3, r2
 802ce0c:	d01e      	beq.n	802ce4c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 802ce0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ce12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802ce16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802ce1a:	d10c      	bne.n	802ce36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 802ce1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ce20:	3328      	adds	r3, #40	; 0x28
 802ce22:	2102      	movs	r1, #2
 802ce24:	4618      	mov	r0, r3
 802ce26:	f000 fe25 	bl	802da74 <RCCEx_PLL3_Config>
 802ce2a:	4603      	mov	r3, r0
 802ce2c:	2b00      	cmp	r3, #0
 802ce2e:	d002      	beq.n	802ce36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 802ce30:	2301      	movs	r3, #1
 802ce32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 802ce36:	4b70      	ldr	r3, [pc, #448]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802ce38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802ce3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 802ce3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ce42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802ce46:	4a6c      	ldr	r2, [pc, #432]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802ce48:	430b      	orrs	r3, r1
 802ce4a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 802ce4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce54:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 802ce58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802ce5c:	2300      	movs	r3, #0
 802ce5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802ce62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 802ce66:	460b      	mov	r3, r1
 802ce68:	4313      	orrs	r3, r2
 802ce6a:	d03e      	beq.n	802ceea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 802ce6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ce70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 802ce74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802ce78:	d022      	beq.n	802cec0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 802ce7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802ce7e:	d81b      	bhi.n	802ceb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 802ce80:	2b00      	cmp	r3, #0
 802ce82:	d003      	beq.n	802ce8c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 802ce84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802ce88:	d00b      	beq.n	802cea2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 802ce8a:	e015      	b.n	802ceb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802ce8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ce90:	3308      	adds	r3, #8
 802ce92:	2100      	movs	r1, #0
 802ce94:	4618      	mov	r0, r3
 802ce96:	f000 fd3b 	bl	802d910 <RCCEx_PLL2_Config>
 802ce9a:	4603      	mov	r3, r0
 802ce9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 802cea0:	e00f      	b.n	802cec2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802cea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cea6:	3328      	adds	r3, #40	; 0x28
 802cea8:	2102      	movs	r1, #2
 802ceaa:	4618      	mov	r0, r3
 802ceac:	f000 fde2 	bl	802da74 <RCCEx_PLL3_Config>
 802ceb0:	4603      	mov	r3, r0
 802ceb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 802ceb6:	e004      	b.n	802cec2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802ceb8:	2301      	movs	r3, #1
 802ceba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cebe:	e000      	b.n	802cec2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 802cec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 802cec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cec6:	2b00      	cmp	r3, #0
 802cec8:	d10b      	bne.n	802cee2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 802ceca:	4b4b      	ldr	r3, [pc, #300]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cece:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 802ced2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ced6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 802ceda:	4a47      	ldr	r2, [pc, #284]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cedc:	430b      	orrs	r3, r1
 802cede:	6593      	str	r3, [r2, #88]	; 0x58
 802cee0:	e003      	b.n	802ceea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802cee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cee6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 802ceea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cef2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 802cef6:	67bb      	str	r3, [r7, #120]	; 0x78
 802cef8:	2300      	movs	r3, #0
 802cefa:	67fb      	str	r3, [r7, #124]	; 0x7c
 802cefc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 802cf00:	460b      	mov	r3, r1
 802cf02:	4313      	orrs	r3, r2
 802cf04:	d03b      	beq.n	802cf7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 802cf06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cf0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802cf0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802cf12:	d01f      	beq.n	802cf54 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 802cf14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802cf18:	d818      	bhi.n	802cf4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 802cf1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802cf1e:	d003      	beq.n	802cf28 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 802cf20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802cf24:	d007      	beq.n	802cf36 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 802cf26:	e011      	b.n	802cf4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802cf28:	4b33      	ldr	r3, [pc, #204]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cf2c:	4a32      	ldr	r2, [pc, #200]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cf2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802cf32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 802cf34:	e00f      	b.n	802cf56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802cf36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cf3a:	3328      	adds	r3, #40	; 0x28
 802cf3c:	2101      	movs	r1, #1
 802cf3e:	4618      	mov	r0, r3
 802cf40:	f000 fd98 	bl	802da74 <RCCEx_PLL3_Config>
 802cf44:	4603      	mov	r3, r0
 802cf46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 802cf4a:	e004      	b.n	802cf56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802cf4c:	2301      	movs	r3, #1
 802cf4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cf52:	e000      	b.n	802cf56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 802cf54:	bf00      	nop
    }

    if (ret == HAL_OK)
 802cf56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cf5a:	2b00      	cmp	r3, #0
 802cf5c:	d10b      	bne.n	802cf76 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 802cf5e:	4b26      	ldr	r3, [pc, #152]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cf60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cf62:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 802cf66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cf6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802cf6e:	4a22      	ldr	r2, [pc, #136]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cf70:	430b      	orrs	r3, r1
 802cf72:	6553      	str	r3, [r2, #84]	; 0x54
 802cf74:	e003      	b.n	802cf7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802cf76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cf7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 802cf7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cf86:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 802cf8a:	673b      	str	r3, [r7, #112]	; 0x70
 802cf8c:	2300      	movs	r3, #0
 802cf8e:	677b      	str	r3, [r7, #116]	; 0x74
 802cf90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 802cf94:	460b      	mov	r3, r1
 802cf96:	4313      	orrs	r3, r2
 802cf98:	d034      	beq.n	802d004 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 802cf9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cf9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cfa0:	2b00      	cmp	r3, #0
 802cfa2:	d003      	beq.n	802cfac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 802cfa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802cfa8:	d007      	beq.n	802cfba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 802cfaa:	e011      	b.n	802cfd0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802cfac:	4b12      	ldr	r3, [pc, #72]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cfb0:	4a11      	ldr	r2, [pc, #68]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cfb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802cfb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 802cfb8:	e00e      	b.n	802cfd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802cfba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cfbe:	3308      	adds	r3, #8
 802cfc0:	2102      	movs	r1, #2
 802cfc2:	4618      	mov	r0, r3
 802cfc4:	f000 fca4 	bl	802d910 <RCCEx_PLL2_Config>
 802cfc8:	4603      	mov	r3, r0
 802cfca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 802cfce:	e003      	b.n	802cfd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 802cfd0:	2301      	movs	r3, #1
 802cfd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802cfd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 802cfd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802cfdc:	2b00      	cmp	r3, #0
 802cfde:	d10d      	bne.n	802cffc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 802cfe0:	4b05      	ldr	r3, [pc, #20]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cfe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802cfe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 802cfe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802cfec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cfee:	4a02      	ldr	r2, [pc, #8]	; (802cff8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802cff0:	430b      	orrs	r3, r1
 802cff2:	64d3      	str	r3, [r2, #76]	; 0x4c
 802cff4:	e006      	b.n	802d004 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 802cff6:	bf00      	nop
 802cff8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 802cffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d000:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 802d004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d008:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d00c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 802d010:	66bb      	str	r3, [r7, #104]	; 0x68
 802d012:	2300      	movs	r3, #0
 802d014:	66fb      	str	r3, [r7, #108]	; 0x6c
 802d016:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 802d01a:	460b      	mov	r3, r1
 802d01c:	4313      	orrs	r3, r2
 802d01e:	d00c      	beq.n	802d03a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 802d020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d024:	3328      	adds	r3, #40	; 0x28
 802d026:	2102      	movs	r1, #2
 802d028:	4618      	mov	r0, r3
 802d02a:	f000 fd23 	bl	802da74 <RCCEx_PLL3_Config>
 802d02e:	4603      	mov	r3, r0
 802d030:	2b00      	cmp	r3, #0
 802d032:	d002      	beq.n	802d03a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 802d034:	2301      	movs	r3, #1
 802d036:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 802d03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d042:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 802d046:	663b      	str	r3, [r7, #96]	; 0x60
 802d048:	2300      	movs	r3, #0
 802d04a:	667b      	str	r3, [r7, #100]	; 0x64
 802d04c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 802d050:	460b      	mov	r3, r1
 802d052:	4313      	orrs	r3, r2
 802d054:	d038      	beq.n	802d0c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 802d056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d05a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802d05e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802d062:	d018      	beq.n	802d096 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 802d064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802d068:	d811      	bhi.n	802d08e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 802d06a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d06e:	d014      	beq.n	802d09a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 802d070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d074:	d80b      	bhi.n	802d08e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 802d076:	2b00      	cmp	r3, #0
 802d078:	d011      	beq.n	802d09e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 802d07a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802d07e:	d106      	bne.n	802d08e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802d080:	4bc3      	ldr	r3, [pc, #780]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d084:	4ac2      	ldr	r2, [pc, #776]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802d08a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 802d08c:	e008      	b.n	802d0a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802d08e:	2301      	movs	r3, #1
 802d090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 802d094:	e004      	b.n	802d0a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 802d096:	bf00      	nop
 802d098:	e002      	b.n	802d0a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 802d09a:	bf00      	nop
 802d09c:	e000      	b.n	802d0a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 802d09e:	bf00      	nop
    }

    if (ret == HAL_OK)
 802d0a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d0a4:	2b00      	cmp	r3, #0
 802d0a6:	d10b      	bne.n	802d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 802d0a8:	4bb9      	ldr	r3, [pc, #740]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d0aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d0ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 802d0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802d0b8:	4ab5      	ldr	r2, [pc, #724]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d0ba:	430b      	orrs	r3, r1
 802d0bc:	6553      	str	r3, [r2, #84]	; 0x54
 802d0be:	e003      	b.n	802d0c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d0c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d0c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 802d0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d0d0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 802d0d4:	65bb      	str	r3, [r7, #88]	; 0x58
 802d0d6:	2300      	movs	r3, #0
 802d0d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 802d0da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 802d0de:	460b      	mov	r3, r1
 802d0e0:	4313      	orrs	r3, r2
 802d0e2:	d009      	beq.n	802d0f8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 802d0e4:	4baa      	ldr	r3, [pc, #680]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d0e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802d0f2:	4aa7      	ldr	r2, [pc, #668]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d0f4:	430b      	orrs	r3, r1
 802d0f6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 802d0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d100:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 802d104:	653b      	str	r3, [r7, #80]	; 0x50
 802d106:	2300      	movs	r3, #0
 802d108:	657b      	str	r3, [r7, #84]	; 0x54
 802d10a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 802d10e:	460b      	mov	r3, r1
 802d110:	4313      	orrs	r3, r2
 802d112:	d00a      	beq.n	802d12a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 802d114:	4b9e      	ldr	r3, [pc, #632]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d116:	691b      	ldr	r3, [r3, #16]
 802d118:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 802d11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d120:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 802d124:	4a9a      	ldr	r2, [pc, #616]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d126:	430b      	orrs	r3, r1
 802d128:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 802d12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d132:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 802d136:	64bb      	str	r3, [r7, #72]	; 0x48
 802d138:	2300      	movs	r3, #0
 802d13a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802d13c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 802d140:	460b      	mov	r3, r1
 802d142:	4313      	orrs	r3, r2
 802d144:	d009      	beq.n	802d15a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 802d146:	4b92      	ldr	r3, [pc, #584]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d14a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 802d14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d154:	4a8e      	ldr	r2, [pc, #568]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d156:	430b      	orrs	r3, r1
 802d158:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 802d15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d162:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 802d166:	643b      	str	r3, [r7, #64]	; 0x40
 802d168:	2300      	movs	r3, #0
 802d16a:	647b      	str	r3, [r7, #68]	; 0x44
 802d16c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 802d170:	460b      	mov	r3, r1
 802d172:	4313      	orrs	r3, r2
 802d174:	d00e      	beq.n	802d194 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 802d176:	4b86      	ldr	r3, [pc, #536]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d178:	691b      	ldr	r3, [r3, #16]
 802d17a:	4a85      	ldr	r2, [pc, #532]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d17c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802d180:	6113      	str	r3, [r2, #16]
 802d182:	4b83      	ldr	r3, [pc, #524]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d184:	6919      	ldr	r1, [r3, #16]
 802d186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d18a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 802d18e:	4a80      	ldr	r2, [pc, #512]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d190:	430b      	orrs	r3, r1
 802d192:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 802d194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d198:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d19c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 802d1a0:	63bb      	str	r3, [r7, #56]	; 0x38
 802d1a2:	2300      	movs	r3, #0
 802d1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 802d1a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 802d1aa:	460b      	mov	r3, r1
 802d1ac:	4313      	orrs	r3, r2
 802d1ae:	d009      	beq.n	802d1c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 802d1b0:	4b77      	ldr	r3, [pc, #476]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d1b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d1b4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 802d1b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d1be:	4a74      	ldr	r2, [pc, #464]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d1c0:	430b      	orrs	r3, r1
 802d1c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 802d1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d1cc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 802d1d0:	633b      	str	r3, [r7, #48]	; 0x30
 802d1d2:	2300      	movs	r3, #0
 802d1d4:	637b      	str	r3, [r7, #52]	; 0x34
 802d1d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 802d1da:	460b      	mov	r3, r1
 802d1dc:	4313      	orrs	r3, r2
 802d1de:	d00a      	beq.n	802d1f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 802d1e0:	4b6b      	ldr	r3, [pc, #428]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d1e4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 802d1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d1ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802d1f0:	4a67      	ldr	r2, [pc, #412]	; (802d390 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802d1f2:	430b      	orrs	r3, r1
 802d1f4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 802d1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d1fe:	2100      	movs	r1, #0
 802d200:	62b9      	str	r1, [r7, #40]	; 0x28
 802d202:	f003 0301 	and.w	r3, r3, #1
 802d206:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d208:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 802d20c:	460b      	mov	r3, r1
 802d20e:	4313      	orrs	r3, r2
 802d210:	d011      	beq.n	802d236 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802d212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d216:	3308      	adds	r3, #8
 802d218:	2100      	movs	r1, #0
 802d21a:	4618      	mov	r0, r3
 802d21c:	f000 fb78 	bl	802d910 <RCCEx_PLL2_Config>
 802d220:	4603      	mov	r3, r0
 802d222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802d226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d22a:	2b00      	cmp	r3, #0
 802d22c:	d003      	beq.n	802d236 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d22e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d232:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 802d236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d23e:	2100      	movs	r1, #0
 802d240:	6239      	str	r1, [r7, #32]
 802d242:	f003 0302 	and.w	r3, r3, #2
 802d246:	627b      	str	r3, [r7, #36]	; 0x24
 802d248:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 802d24c:	460b      	mov	r3, r1
 802d24e:	4313      	orrs	r3, r2
 802d250:	d011      	beq.n	802d276 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802d252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d256:	3308      	adds	r3, #8
 802d258:	2101      	movs	r1, #1
 802d25a:	4618      	mov	r0, r3
 802d25c:	f000 fb58 	bl	802d910 <RCCEx_PLL2_Config>
 802d260:	4603      	mov	r3, r0
 802d262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802d266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d26a:	2b00      	cmp	r3, #0
 802d26c:	d003      	beq.n	802d276 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d26e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 802d276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d27e:	2100      	movs	r1, #0
 802d280:	61b9      	str	r1, [r7, #24]
 802d282:	f003 0304 	and.w	r3, r3, #4
 802d286:	61fb      	str	r3, [r7, #28]
 802d288:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802d28c:	460b      	mov	r3, r1
 802d28e:	4313      	orrs	r3, r2
 802d290:	d011      	beq.n	802d2b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802d292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d296:	3308      	adds	r3, #8
 802d298:	2102      	movs	r1, #2
 802d29a:	4618      	mov	r0, r3
 802d29c:	f000 fb38 	bl	802d910 <RCCEx_PLL2_Config>
 802d2a0:	4603      	mov	r3, r0
 802d2a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802d2a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d2aa:	2b00      	cmp	r3, #0
 802d2ac:	d003      	beq.n	802d2b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d2ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d2b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 802d2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d2be:	2100      	movs	r1, #0
 802d2c0:	6139      	str	r1, [r7, #16]
 802d2c2:	f003 0308 	and.w	r3, r3, #8
 802d2c6:	617b      	str	r3, [r7, #20]
 802d2c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 802d2cc:	460b      	mov	r3, r1
 802d2ce:	4313      	orrs	r3, r2
 802d2d0:	d011      	beq.n	802d2f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802d2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d2d6:	3328      	adds	r3, #40	; 0x28
 802d2d8:	2100      	movs	r1, #0
 802d2da:	4618      	mov	r0, r3
 802d2dc:	f000 fbca 	bl	802da74 <RCCEx_PLL3_Config>
 802d2e0:	4603      	mov	r3, r0
 802d2e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 802d2e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d2ea:	2b00      	cmp	r3, #0
 802d2ec:	d003      	beq.n	802d2f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d2f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 802d2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d2fe:	2100      	movs	r1, #0
 802d300:	60b9      	str	r1, [r7, #8]
 802d302:	f003 0310 	and.w	r3, r3, #16
 802d306:	60fb      	str	r3, [r7, #12]
 802d308:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 802d30c:	460b      	mov	r3, r1
 802d30e:	4313      	orrs	r3, r2
 802d310:	d011      	beq.n	802d336 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802d312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d316:	3328      	adds	r3, #40	; 0x28
 802d318:	2101      	movs	r1, #1
 802d31a:	4618      	mov	r0, r3
 802d31c:	f000 fbaa 	bl	802da74 <RCCEx_PLL3_Config>
 802d320:	4603      	mov	r3, r0
 802d322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802d326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d32a:	2b00      	cmp	r3, #0
 802d32c:	d003      	beq.n	802d336 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d32e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 802d336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d33e:	2100      	movs	r1, #0
 802d340:	6039      	str	r1, [r7, #0]
 802d342:	f003 0320 	and.w	r3, r3, #32
 802d346:	607b      	str	r3, [r7, #4]
 802d348:	e9d7 1200 	ldrd	r1, r2, [r7]
 802d34c:	460b      	mov	r3, r1
 802d34e:	4313      	orrs	r3, r2
 802d350:	d011      	beq.n	802d376 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802d352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802d356:	3328      	adds	r3, #40	; 0x28
 802d358:	2102      	movs	r1, #2
 802d35a:	4618      	mov	r0, r3
 802d35c:	f000 fb8a 	bl	802da74 <RCCEx_PLL3_Config>
 802d360:	4603      	mov	r3, r0
 802d362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 802d366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d36a:	2b00      	cmp	r3, #0
 802d36c:	d003      	beq.n	802d376 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802d36e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 802d372:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 802d376:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 802d37a:	2b00      	cmp	r3, #0
 802d37c:	d101      	bne.n	802d382 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 802d37e:	2300      	movs	r3, #0
 802d380:	e000      	b.n	802d384 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 802d382:	2301      	movs	r3, #1
}
 802d384:	4618      	mov	r0, r3
 802d386:	f507 7794 	add.w	r7, r7, #296	; 0x128
 802d38a:	46bd      	mov	sp, r7
 802d38c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802d390:	58024400 	.word	0x58024400

0802d394 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 802d394:	b580      	push	{r7, lr}
 802d396:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 802d398:	f7fe fd96 	bl	802bec8 <HAL_RCC_GetHCLKFreq>
 802d39c:	4602      	mov	r2, r0
 802d39e:	4b06      	ldr	r3, [pc, #24]	; (802d3b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 802d3a0:	6a1b      	ldr	r3, [r3, #32]
 802d3a2:	091b      	lsrs	r3, r3, #4
 802d3a4:	f003 0307 	and.w	r3, r3, #7
 802d3a8:	4904      	ldr	r1, [pc, #16]	; (802d3bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 802d3aa:	5ccb      	ldrb	r3, [r1, r3]
 802d3ac:	f003 031f 	and.w	r3, r3, #31
 802d3b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 802d3b4:	4618      	mov	r0, r3
 802d3b6:	bd80      	pop	{r7, pc}
 802d3b8:	58024400 	.word	0x58024400
 802d3bc:	08032da0 	.word	0x08032da0

0802d3c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 802d3c0:	b480      	push	{r7}
 802d3c2:	b089      	sub	sp, #36	; 0x24
 802d3c4:	af00      	add	r7, sp, #0
 802d3c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802d3c8:	4ba1      	ldr	r3, [pc, #644]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d3cc:	f003 0303 	and.w	r3, r3, #3
 802d3d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 802d3d2:	4b9f      	ldr	r3, [pc, #636]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d3d6:	0b1b      	lsrs	r3, r3, #12
 802d3d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802d3dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 802d3de:	4b9c      	ldr	r3, [pc, #624]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d3e2:	091b      	lsrs	r3, r3, #4
 802d3e4:	f003 0301 	and.w	r3, r3, #1
 802d3e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 802d3ea:	4b99      	ldr	r3, [pc, #612]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d3ee:	08db      	lsrs	r3, r3, #3
 802d3f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802d3f4:	693a      	ldr	r2, [r7, #16]
 802d3f6:	fb02 f303 	mul.w	r3, r2, r3
 802d3fa:	ee07 3a90 	vmov	s15, r3
 802d3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d402:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 802d406:	697b      	ldr	r3, [r7, #20]
 802d408:	2b00      	cmp	r3, #0
 802d40a:	f000 8111 	beq.w	802d630 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 802d40e:	69bb      	ldr	r3, [r7, #24]
 802d410:	2b02      	cmp	r3, #2
 802d412:	f000 8083 	beq.w	802d51c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 802d416:	69bb      	ldr	r3, [r7, #24]
 802d418:	2b02      	cmp	r3, #2
 802d41a:	f200 80a1 	bhi.w	802d560 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 802d41e:	69bb      	ldr	r3, [r7, #24]
 802d420:	2b00      	cmp	r3, #0
 802d422:	d003      	beq.n	802d42c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 802d424:	69bb      	ldr	r3, [r7, #24]
 802d426:	2b01      	cmp	r3, #1
 802d428:	d056      	beq.n	802d4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 802d42a:	e099      	b.n	802d560 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802d42c:	4b88      	ldr	r3, [pc, #544]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d42e:	681b      	ldr	r3, [r3, #0]
 802d430:	f003 0320 	and.w	r3, r3, #32
 802d434:	2b00      	cmp	r3, #0
 802d436:	d02d      	beq.n	802d494 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802d438:	4b85      	ldr	r3, [pc, #532]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d43a:	681b      	ldr	r3, [r3, #0]
 802d43c:	08db      	lsrs	r3, r3, #3
 802d43e:	f003 0303 	and.w	r3, r3, #3
 802d442:	4a84      	ldr	r2, [pc, #528]	; (802d654 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 802d444:	fa22 f303 	lsr.w	r3, r2, r3
 802d448:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802d44a:	68bb      	ldr	r3, [r7, #8]
 802d44c:	ee07 3a90 	vmov	s15, r3
 802d450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d454:	697b      	ldr	r3, [r7, #20]
 802d456:	ee07 3a90 	vmov	s15, r3
 802d45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802d462:	4b7b      	ldr	r3, [pc, #492]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d46a:	ee07 3a90 	vmov	s15, r3
 802d46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d472:	ed97 6a03 	vldr	s12, [r7, #12]
 802d476:	eddf 5a78 	vldr	s11, [pc, #480]	; 802d658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802d47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802d47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802d482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802d486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d48e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 802d492:	e087      	b.n	802d5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802d494:	697b      	ldr	r3, [r7, #20]
 802d496:	ee07 3a90 	vmov	s15, r3
 802d49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d49e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 802d65c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 802d4a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802d4a6:	4b6a      	ldr	r3, [pc, #424]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d4ae:	ee07 3a90 	vmov	s15, r3
 802d4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d4b6:	ed97 6a03 	vldr	s12, [r7, #12]
 802d4ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 802d658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802d4be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802d4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802d4c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802d4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d4d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802d4d6:	e065      	b.n	802d5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802d4d8:	697b      	ldr	r3, [r7, #20]
 802d4da:	ee07 3a90 	vmov	s15, r3
 802d4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d4e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 802d660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 802d4e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802d4ea:	4b59      	ldr	r3, [pc, #356]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d4f2:	ee07 3a90 	vmov	s15, r3
 802d4f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d4fa:	ed97 6a03 	vldr	s12, [r7, #12]
 802d4fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 802d658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802d502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802d506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802d50a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802d50e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d512:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802d51a:	e043      	b.n	802d5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802d51c:	697b      	ldr	r3, [r7, #20]
 802d51e:	ee07 3a90 	vmov	s15, r3
 802d522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d526:	eddf 6a4f 	vldr	s13, [pc, #316]	; 802d664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 802d52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802d52e:	4b48      	ldr	r3, [pc, #288]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d536:	ee07 3a90 	vmov	s15, r3
 802d53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d53e:	ed97 6a03 	vldr	s12, [r7, #12]
 802d542:	eddf 5a45 	vldr	s11, [pc, #276]	; 802d658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802d546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802d54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802d54e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802d552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d556:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d55a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802d55e:	e021      	b.n	802d5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802d560:	697b      	ldr	r3, [r7, #20]
 802d562:	ee07 3a90 	vmov	s15, r3
 802d566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d56a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 802d660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 802d56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802d572:	4b37      	ldr	r3, [pc, #220]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d57a:	ee07 3a90 	vmov	s15, r3
 802d57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d582:	ed97 6a03 	vldr	s12, [r7, #12]
 802d586:	eddf 5a34 	vldr	s11, [pc, #208]	; 802d658 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802d58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802d58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802d592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802d596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d59e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802d5a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 802d5a4:	4b2a      	ldr	r3, [pc, #168]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d5a8:	0a5b      	lsrs	r3, r3, #9
 802d5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802d5ae:	ee07 3a90 	vmov	s15, r3
 802d5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d5b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802d5ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 802d5be:	edd7 6a07 	vldr	s13, [r7, #28]
 802d5c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802d5c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802d5ca:	ee17 2a90 	vmov	r2, s15
 802d5ce:	687b      	ldr	r3, [r7, #4]
 802d5d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 802d5d2:	4b1f      	ldr	r3, [pc, #124]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d5d6:	0c1b      	lsrs	r3, r3, #16
 802d5d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802d5dc:	ee07 3a90 	vmov	s15, r3
 802d5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d5e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802d5e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 802d5ec:	edd7 6a07 	vldr	s13, [r7, #28]
 802d5f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802d5f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802d5f8:	ee17 2a90 	vmov	r2, s15
 802d5fc:	687b      	ldr	r3, [r7, #4]
 802d5fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 802d600:	4b13      	ldr	r3, [pc, #76]	; (802d650 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802d602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d604:	0e1b      	lsrs	r3, r3, #24
 802d606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802d60a:	ee07 3a90 	vmov	s15, r3
 802d60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802d616:	ee37 7a87 	vadd.f32	s14, s15, s14
 802d61a:	edd7 6a07 	vldr	s13, [r7, #28]
 802d61e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802d622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802d626:	ee17 2a90 	vmov	r2, s15
 802d62a:	687b      	ldr	r3, [r7, #4]
 802d62c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 802d62e:	e008      	b.n	802d642 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 802d630:	687b      	ldr	r3, [r7, #4]
 802d632:	2200      	movs	r2, #0
 802d634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 802d636:	687b      	ldr	r3, [r7, #4]
 802d638:	2200      	movs	r2, #0
 802d63a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 802d63c:	687b      	ldr	r3, [r7, #4]
 802d63e:	2200      	movs	r2, #0
 802d640:	609a      	str	r2, [r3, #8]
}
 802d642:	bf00      	nop
 802d644:	3724      	adds	r7, #36	; 0x24
 802d646:	46bd      	mov	sp, r7
 802d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d64c:	4770      	bx	lr
 802d64e:	bf00      	nop
 802d650:	58024400 	.word	0x58024400
 802d654:	03d09000 	.word	0x03d09000
 802d658:	46000000 	.word	0x46000000
 802d65c:	4c742400 	.word	0x4c742400
 802d660:	4a742400 	.word	0x4a742400
 802d664:	4bbebc20 	.word	0x4bbebc20

0802d668 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 802d668:	b480      	push	{r7}
 802d66a:	b089      	sub	sp, #36	; 0x24
 802d66c:	af00      	add	r7, sp, #0
 802d66e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 802d670:	4ba1      	ldr	r3, [pc, #644]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d674:	f003 0303 	and.w	r3, r3, #3
 802d678:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 802d67a:	4b9f      	ldr	r3, [pc, #636]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d67e:	0d1b      	lsrs	r3, r3, #20
 802d680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802d684:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 802d686:	4b9c      	ldr	r3, [pc, #624]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d68a:	0a1b      	lsrs	r3, r3, #8
 802d68c:	f003 0301 	and.w	r3, r3, #1
 802d690:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 802d692:	4b99      	ldr	r3, [pc, #612]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d696:	08db      	lsrs	r3, r3, #3
 802d698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802d69c:	693a      	ldr	r2, [r7, #16]
 802d69e:	fb02 f303 	mul.w	r3, r2, r3
 802d6a2:	ee07 3a90 	vmov	s15, r3
 802d6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d6aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 802d6ae:	697b      	ldr	r3, [r7, #20]
 802d6b0:	2b00      	cmp	r3, #0
 802d6b2:	f000 8111 	beq.w	802d8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 802d6b6:	69bb      	ldr	r3, [r7, #24]
 802d6b8:	2b02      	cmp	r3, #2
 802d6ba:	f000 8083 	beq.w	802d7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 802d6be:	69bb      	ldr	r3, [r7, #24]
 802d6c0:	2b02      	cmp	r3, #2
 802d6c2:	f200 80a1 	bhi.w	802d808 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 802d6c6:	69bb      	ldr	r3, [r7, #24]
 802d6c8:	2b00      	cmp	r3, #0
 802d6ca:	d003      	beq.n	802d6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 802d6cc:	69bb      	ldr	r3, [r7, #24]
 802d6ce:	2b01      	cmp	r3, #1
 802d6d0:	d056      	beq.n	802d780 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 802d6d2:	e099      	b.n	802d808 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802d6d4:	4b88      	ldr	r3, [pc, #544]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d6d6:	681b      	ldr	r3, [r3, #0]
 802d6d8:	f003 0320 	and.w	r3, r3, #32
 802d6dc:	2b00      	cmp	r3, #0
 802d6de:	d02d      	beq.n	802d73c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802d6e0:	4b85      	ldr	r3, [pc, #532]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d6e2:	681b      	ldr	r3, [r3, #0]
 802d6e4:	08db      	lsrs	r3, r3, #3
 802d6e6:	f003 0303 	and.w	r3, r3, #3
 802d6ea:	4a84      	ldr	r2, [pc, #528]	; (802d8fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 802d6ec:	fa22 f303 	lsr.w	r3, r2, r3
 802d6f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802d6f2:	68bb      	ldr	r3, [r7, #8]
 802d6f4:	ee07 3a90 	vmov	s15, r3
 802d6f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d6fc:	697b      	ldr	r3, [r7, #20]
 802d6fe:	ee07 3a90 	vmov	s15, r3
 802d702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802d70a:	4b7b      	ldr	r3, [pc, #492]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d712:	ee07 3a90 	vmov	s15, r3
 802d716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d71a:	ed97 6a03 	vldr	s12, [r7, #12]
 802d71e:	eddf 5a78 	vldr	s11, [pc, #480]	; 802d900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802d722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802d726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802d72a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802d72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d732:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d736:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 802d73a:	e087      	b.n	802d84c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802d73c:	697b      	ldr	r3, [r7, #20]
 802d73e:	ee07 3a90 	vmov	s15, r3
 802d742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d746:	eddf 6a6f 	vldr	s13, [pc, #444]	; 802d904 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 802d74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802d74e:	4b6a      	ldr	r3, [pc, #424]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d756:	ee07 3a90 	vmov	s15, r3
 802d75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d75e:	ed97 6a03 	vldr	s12, [r7, #12]
 802d762:	eddf 5a67 	vldr	s11, [pc, #412]	; 802d900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802d766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802d76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802d76e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802d772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d776:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d77a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802d77e:	e065      	b.n	802d84c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802d780:	697b      	ldr	r3, [r7, #20]
 802d782:	ee07 3a90 	vmov	s15, r3
 802d786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d78a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 802d908 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 802d78e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802d792:	4b59      	ldr	r3, [pc, #356]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d79a:	ee07 3a90 	vmov	s15, r3
 802d79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d7a2:	ed97 6a03 	vldr	s12, [r7, #12]
 802d7a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 802d900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802d7aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802d7ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802d7b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802d7b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d7be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802d7c2:	e043      	b.n	802d84c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802d7c4:	697b      	ldr	r3, [r7, #20]
 802d7c6:	ee07 3a90 	vmov	s15, r3
 802d7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d7ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 802d90c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 802d7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802d7d6:	4b48      	ldr	r3, [pc, #288]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d7de:	ee07 3a90 	vmov	s15, r3
 802d7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 802d7ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 802d900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802d7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802d7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802d7f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802d7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802d806:	e021      	b.n	802d84c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 802d808:	697b      	ldr	r3, [r7, #20]
 802d80a:	ee07 3a90 	vmov	s15, r3
 802d80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d812:	eddf 6a3d 	vldr	s13, [pc, #244]	; 802d908 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 802d816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802d81a:	4b37      	ldr	r3, [pc, #220]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d822:	ee07 3a90 	vmov	s15, r3
 802d826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802d82a:	ed97 6a03 	vldr	s12, [r7, #12]
 802d82e:	eddf 5a34 	vldr	s11, [pc, #208]	; 802d900 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802d832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802d836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802d83a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802d83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d842:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802d84a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 802d84c:	4b2a      	ldr	r3, [pc, #168]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d850:	0a5b      	lsrs	r3, r3, #9
 802d852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802d856:	ee07 3a90 	vmov	s15, r3
 802d85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d85e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802d862:	ee37 7a87 	vadd.f32	s14, s15, s14
 802d866:	edd7 6a07 	vldr	s13, [r7, #28]
 802d86a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802d86e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802d872:	ee17 2a90 	vmov	r2, s15
 802d876:	687b      	ldr	r3, [r7, #4]
 802d878:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 802d87a:	4b1f      	ldr	r3, [pc, #124]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d87e:	0c1b      	lsrs	r3, r3, #16
 802d880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802d884:	ee07 3a90 	vmov	s15, r3
 802d888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d88c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802d890:	ee37 7a87 	vadd.f32	s14, s15, s14
 802d894:	edd7 6a07 	vldr	s13, [r7, #28]
 802d898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802d89c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802d8a0:	ee17 2a90 	vmov	r2, s15
 802d8a4:	687b      	ldr	r3, [r7, #4]
 802d8a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 802d8a8:	4b13      	ldr	r3, [pc, #76]	; (802d8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802d8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d8ac:	0e1b      	lsrs	r3, r3, #24
 802d8ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802d8b2:	ee07 3a90 	vmov	s15, r3
 802d8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802d8ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802d8be:	ee37 7a87 	vadd.f32	s14, s15, s14
 802d8c2:	edd7 6a07 	vldr	s13, [r7, #28]
 802d8c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802d8ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802d8ce:	ee17 2a90 	vmov	r2, s15
 802d8d2:	687b      	ldr	r3, [r7, #4]
 802d8d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 802d8d6:	e008      	b.n	802d8ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 802d8d8:	687b      	ldr	r3, [r7, #4]
 802d8da:	2200      	movs	r2, #0
 802d8dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 802d8de:	687b      	ldr	r3, [r7, #4]
 802d8e0:	2200      	movs	r2, #0
 802d8e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 802d8e4:	687b      	ldr	r3, [r7, #4]
 802d8e6:	2200      	movs	r2, #0
 802d8e8:	609a      	str	r2, [r3, #8]
}
 802d8ea:	bf00      	nop
 802d8ec:	3724      	adds	r7, #36	; 0x24
 802d8ee:	46bd      	mov	sp, r7
 802d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d8f4:	4770      	bx	lr
 802d8f6:	bf00      	nop
 802d8f8:	58024400 	.word	0x58024400
 802d8fc:	03d09000 	.word	0x03d09000
 802d900:	46000000 	.word	0x46000000
 802d904:	4c742400 	.word	0x4c742400
 802d908:	4a742400 	.word	0x4a742400
 802d90c:	4bbebc20 	.word	0x4bbebc20

0802d910 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 802d910:	b580      	push	{r7, lr}
 802d912:	b084      	sub	sp, #16
 802d914:	af00      	add	r7, sp, #0
 802d916:	6078      	str	r0, [r7, #4]
 802d918:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802d91a:	2300      	movs	r3, #0
 802d91c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802d91e:	4b53      	ldr	r3, [pc, #332]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d922:	f003 0303 	and.w	r3, r3, #3
 802d926:	2b03      	cmp	r3, #3
 802d928:	d101      	bne.n	802d92e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 802d92a:	2301      	movs	r3, #1
 802d92c:	e099      	b.n	802da62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 802d92e:	4b4f      	ldr	r3, [pc, #316]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d930:	681b      	ldr	r3, [r3, #0]
 802d932:	4a4e      	ldr	r2, [pc, #312]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d934:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 802d938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802d93a:	f7fc fbdd 	bl	802a0f8 <HAL_GetTick>
 802d93e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 802d940:	e008      	b.n	802d954 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 802d942:	f7fc fbd9 	bl	802a0f8 <HAL_GetTick>
 802d946:	4602      	mov	r2, r0
 802d948:	68bb      	ldr	r3, [r7, #8]
 802d94a:	1ad3      	subs	r3, r2, r3
 802d94c:	2b02      	cmp	r3, #2
 802d94e:	d901      	bls.n	802d954 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 802d950:	2303      	movs	r3, #3
 802d952:	e086      	b.n	802da62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 802d954:	4b45      	ldr	r3, [pc, #276]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d956:	681b      	ldr	r3, [r3, #0]
 802d958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802d95c:	2b00      	cmp	r3, #0
 802d95e:	d1f0      	bne.n	802d942 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 802d960:	4b42      	ldr	r3, [pc, #264]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d964:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802d968:	687b      	ldr	r3, [r7, #4]
 802d96a:	681b      	ldr	r3, [r3, #0]
 802d96c:	031b      	lsls	r3, r3, #12
 802d96e:	493f      	ldr	r1, [pc, #252]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d970:	4313      	orrs	r3, r2
 802d972:	628b      	str	r3, [r1, #40]	; 0x28
 802d974:	687b      	ldr	r3, [r7, #4]
 802d976:	685b      	ldr	r3, [r3, #4]
 802d978:	3b01      	subs	r3, #1
 802d97a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802d97e:	687b      	ldr	r3, [r7, #4]
 802d980:	689b      	ldr	r3, [r3, #8]
 802d982:	3b01      	subs	r3, #1
 802d984:	025b      	lsls	r3, r3, #9
 802d986:	b29b      	uxth	r3, r3
 802d988:	431a      	orrs	r2, r3
 802d98a:	687b      	ldr	r3, [r7, #4]
 802d98c:	68db      	ldr	r3, [r3, #12]
 802d98e:	3b01      	subs	r3, #1
 802d990:	041b      	lsls	r3, r3, #16
 802d992:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802d996:	431a      	orrs	r2, r3
 802d998:	687b      	ldr	r3, [r7, #4]
 802d99a:	691b      	ldr	r3, [r3, #16]
 802d99c:	3b01      	subs	r3, #1
 802d99e:	061b      	lsls	r3, r3, #24
 802d9a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 802d9a4:	4931      	ldr	r1, [pc, #196]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d9a6:	4313      	orrs	r3, r2
 802d9a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 802d9aa:	4b30      	ldr	r3, [pc, #192]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d9ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 802d9b2:	687b      	ldr	r3, [r7, #4]
 802d9b4:	695b      	ldr	r3, [r3, #20]
 802d9b6:	492d      	ldr	r1, [pc, #180]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d9b8:	4313      	orrs	r3, r2
 802d9ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 802d9bc:	4b2b      	ldr	r3, [pc, #172]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d9c0:	f023 0220 	bic.w	r2, r3, #32
 802d9c4:	687b      	ldr	r3, [r7, #4]
 802d9c6:	699b      	ldr	r3, [r3, #24]
 802d9c8:	4928      	ldr	r1, [pc, #160]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d9ca:	4313      	orrs	r3, r2
 802d9cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 802d9ce:	4b27      	ldr	r3, [pc, #156]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d9d2:	4a26      	ldr	r2, [pc, #152]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d9d4:	f023 0310 	bic.w	r3, r3, #16
 802d9d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 802d9da:	4b24      	ldr	r3, [pc, #144]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d9dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802d9de:	4b24      	ldr	r3, [pc, #144]	; (802da70 <RCCEx_PLL2_Config+0x160>)
 802d9e0:	4013      	ands	r3, r2
 802d9e2:	687a      	ldr	r2, [r7, #4]
 802d9e4:	69d2      	ldr	r2, [r2, #28]
 802d9e6:	00d2      	lsls	r2, r2, #3
 802d9e8:	4920      	ldr	r1, [pc, #128]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d9ea:	4313      	orrs	r3, r2
 802d9ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 802d9ee:	4b1f      	ldr	r3, [pc, #124]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d9f2:	4a1e      	ldr	r2, [pc, #120]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802d9f4:	f043 0310 	orr.w	r3, r3, #16
 802d9f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 802d9fa:	683b      	ldr	r3, [r7, #0]
 802d9fc:	2b00      	cmp	r3, #0
 802d9fe:	d106      	bne.n	802da0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 802da00:	4b1a      	ldr	r3, [pc, #104]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802da02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802da04:	4a19      	ldr	r2, [pc, #100]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802da06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802da0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 802da0c:	e00f      	b.n	802da2e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 802da0e:	683b      	ldr	r3, [r7, #0]
 802da10:	2b01      	cmp	r3, #1
 802da12:	d106      	bne.n	802da22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 802da14:	4b15      	ldr	r3, [pc, #84]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802da16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802da18:	4a14      	ldr	r2, [pc, #80]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802da1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802da1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 802da20:	e005      	b.n	802da2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 802da22:	4b12      	ldr	r3, [pc, #72]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802da24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802da26:	4a11      	ldr	r2, [pc, #68]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802da28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802da2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 802da2e:	4b0f      	ldr	r3, [pc, #60]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802da30:	681b      	ldr	r3, [r3, #0]
 802da32:	4a0e      	ldr	r2, [pc, #56]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802da34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802da38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802da3a:	f7fc fb5d 	bl	802a0f8 <HAL_GetTick>
 802da3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 802da40:	e008      	b.n	802da54 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 802da42:	f7fc fb59 	bl	802a0f8 <HAL_GetTick>
 802da46:	4602      	mov	r2, r0
 802da48:	68bb      	ldr	r3, [r7, #8]
 802da4a:	1ad3      	subs	r3, r2, r3
 802da4c:	2b02      	cmp	r3, #2
 802da4e:	d901      	bls.n	802da54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 802da50:	2303      	movs	r3, #3
 802da52:	e006      	b.n	802da62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 802da54:	4b05      	ldr	r3, [pc, #20]	; (802da6c <RCCEx_PLL2_Config+0x15c>)
 802da56:	681b      	ldr	r3, [r3, #0]
 802da58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802da5c:	2b00      	cmp	r3, #0
 802da5e:	d0f0      	beq.n	802da42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 802da60:	7bfb      	ldrb	r3, [r7, #15]
}
 802da62:	4618      	mov	r0, r3
 802da64:	3710      	adds	r7, #16
 802da66:	46bd      	mov	sp, r7
 802da68:	bd80      	pop	{r7, pc}
 802da6a:	bf00      	nop
 802da6c:	58024400 	.word	0x58024400
 802da70:	ffff0007 	.word	0xffff0007

0802da74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 802da74:	b580      	push	{r7, lr}
 802da76:	b084      	sub	sp, #16
 802da78:	af00      	add	r7, sp, #0
 802da7a:	6078      	str	r0, [r7, #4]
 802da7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802da7e:	2300      	movs	r3, #0
 802da80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802da82:	4b53      	ldr	r3, [pc, #332]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802da84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802da86:	f003 0303 	and.w	r3, r3, #3
 802da8a:	2b03      	cmp	r3, #3
 802da8c:	d101      	bne.n	802da92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 802da8e:	2301      	movs	r3, #1
 802da90:	e099      	b.n	802dbc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 802da92:	4b4f      	ldr	r3, [pc, #316]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802da94:	681b      	ldr	r3, [r3, #0]
 802da96:	4a4e      	ldr	r2, [pc, #312]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802da98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802da9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802da9e:	f7fc fb2b 	bl	802a0f8 <HAL_GetTick>
 802daa2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 802daa4:	e008      	b.n	802dab8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802daa6:	f7fc fb27 	bl	802a0f8 <HAL_GetTick>
 802daaa:	4602      	mov	r2, r0
 802daac:	68bb      	ldr	r3, [r7, #8]
 802daae:	1ad3      	subs	r3, r2, r3
 802dab0:	2b02      	cmp	r3, #2
 802dab2:	d901      	bls.n	802dab8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 802dab4:	2303      	movs	r3, #3
 802dab6:	e086      	b.n	802dbc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 802dab8:	4b45      	ldr	r3, [pc, #276]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802daba:	681b      	ldr	r3, [r3, #0]
 802dabc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802dac0:	2b00      	cmp	r3, #0
 802dac2:	d1f0      	bne.n	802daa6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 802dac4:	4b42      	ldr	r3, [pc, #264]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802dac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dac8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 802dacc:	687b      	ldr	r3, [r7, #4]
 802dace:	681b      	ldr	r3, [r3, #0]
 802dad0:	051b      	lsls	r3, r3, #20
 802dad2:	493f      	ldr	r1, [pc, #252]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802dad4:	4313      	orrs	r3, r2
 802dad6:	628b      	str	r3, [r1, #40]	; 0x28
 802dad8:	687b      	ldr	r3, [r7, #4]
 802dada:	685b      	ldr	r3, [r3, #4]
 802dadc:	3b01      	subs	r3, #1
 802dade:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802dae2:	687b      	ldr	r3, [r7, #4]
 802dae4:	689b      	ldr	r3, [r3, #8]
 802dae6:	3b01      	subs	r3, #1
 802dae8:	025b      	lsls	r3, r3, #9
 802daea:	b29b      	uxth	r3, r3
 802daec:	431a      	orrs	r2, r3
 802daee:	687b      	ldr	r3, [r7, #4]
 802daf0:	68db      	ldr	r3, [r3, #12]
 802daf2:	3b01      	subs	r3, #1
 802daf4:	041b      	lsls	r3, r3, #16
 802daf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802dafa:	431a      	orrs	r2, r3
 802dafc:	687b      	ldr	r3, [r7, #4]
 802dafe:	691b      	ldr	r3, [r3, #16]
 802db00:	3b01      	subs	r3, #1
 802db02:	061b      	lsls	r3, r3, #24
 802db04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 802db08:	4931      	ldr	r1, [pc, #196]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db0a:	4313      	orrs	r3, r2
 802db0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 802db0e:	4b30      	ldr	r3, [pc, #192]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802db12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 802db16:	687b      	ldr	r3, [r7, #4]
 802db18:	695b      	ldr	r3, [r3, #20]
 802db1a:	492d      	ldr	r1, [pc, #180]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db1c:	4313      	orrs	r3, r2
 802db1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 802db20:	4b2b      	ldr	r3, [pc, #172]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802db24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 802db28:	687b      	ldr	r3, [r7, #4]
 802db2a:	699b      	ldr	r3, [r3, #24]
 802db2c:	4928      	ldr	r1, [pc, #160]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db2e:	4313      	orrs	r3, r2
 802db30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 802db32:	4b27      	ldr	r3, [pc, #156]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802db36:	4a26      	ldr	r2, [pc, #152]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802db3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 802db3e:	4b24      	ldr	r3, [pc, #144]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802db42:	4b24      	ldr	r3, [pc, #144]	; (802dbd4 <RCCEx_PLL3_Config+0x160>)
 802db44:	4013      	ands	r3, r2
 802db46:	687a      	ldr	r2, [r7, #4]
 802db48:	69d2      	ldr	r2, [r2, #28]
 802db4a:	00d2      	lsls	r2, r2, #3
 802db4c:	4920      	ldr	r1, [pc, #128]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db4e:	4313      	orrs	r3, r2
 802db50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 802db52:	4b1f      	ldr	r3, [pc, #124]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802db56:	4a1e      	ldr	r2, [pc, #120]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802db5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 802db5e:	683b      	ldr	r3, [r7, #0]
 802db60:	2b00      	cmp	r3, #0
 802db62:	d106      	bne.n	802db72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 802db64:	4b1a      	ldr	r3, [pc, #104]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802db68:	4a19      	ldr	r2, [pc, #100]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802db6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 802db70:	e00f      	b.n	802db92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 802db72:	683b      	ldr	r3, [r7, #0]
 802db74:	2b01      	cmp	r3, #1
 802db76:	d106      	bne.n	802db86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 802db78:	4b15      	ldr	r3, [pc, #84]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802db7c:	4a14      	ldr	r2, [pc, #80]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802db82:	62d3      	str	r3, [r2, #44]	; 0x2c
 802db84:	e005      	b.n	802db92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 802db86:	4b12      	ldr	r3, [pc, #72]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802db8a:	4a11      	ldr	r2, [pc, #68]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802db90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 802db92:	4b0f      	ldr	r3, [pc, #60]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db94:	681b      	ldr	r3, [r3, #0]
 802db96:	4a0e      	ldr	r2, [pc, #56]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802db98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802db9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802db9e:	f7fc faab 	bl	802a0f8 <HAL_GetTick>
 802dba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 802dba4:	e008      	b.n	802dbb8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802dba6:	f7fc faa7 	bl	802a0f8 <HAL_GetTick>
 802dbaa:	4602      	mov	r2, r0
 802dbac:	68bb      	ldr	r3, [r7, #8]
 802dbae:	1ad3      	subs	r3, r2, r3
 802dbb0:	2b02      	cmp	r3, #2
 802dbb2:	d901      	bls.n	802dbb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 802dbb4:	2303      	movs	r3, #3
 802dbb6:	e006      	b.n	802dbc6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 802dbb8:	4b05      	ldr	r3, [pc, #20]	; (802dbd0 <RCCEx_PLL3_Config+0x15c>)
 802dbba:	681b      	ldr	r3, [r3, #0]
 802dbbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802dbc0:	2b00      	cmp	r3, #0
 802dbc2:	d0f0      	beq.n	802dba6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 802dbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 802dbc6:	4618      	mov	r0, r3
 802dbc8:	3710      	adds	r7, #16
 802dbca:	46bd      	mov	sp, r7
 802dbcc:	bd80      	pop	{r7, pc}
 802dbce:	bf00      	nop
 802dbd0:	58024400 	.word	0x58024400
 802dbd4:	ffff0007 	.word	0xffff0007

0802dbd8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802dbd8:	b580      	push	{r7, lr}
 802dbda:	b084      	sub	sp, #16
 802dbdc:	af00      	add	r7, sp, #0
 802dbde:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802dbe0:	687b      	ldr	r3, [r7, #4]
 802dbe2:	2b00      	cmp	r3, #0
 802dbe4:	d101      	bne.n	802dbea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802dbe6:	2301      	movs	r3, #1
 802dbe8:	e10f      	b.n	802de0a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802dbea:	687b      	ldr	r3, [r7, #4]
 802dbec:	2200      	movs	r2, #0
 802dbee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 802dbf0:	687b      	ldr	r3, [r7, #4]
 802dbf2:	681b      	ldr	r3, [r3, #0]
 802dbf4:	4a87      	ldr	r2, [pc, #540]	; (802de14 <HAL_SPI_Init+0x23c>)
 802dbf6:	4293      	cmp	r3, r2
 802dbf8:	d00f      	beq.n	802dc1a <HAL_SPI_Init+0x42>
 802dbfa:	687b      	ldr	r3, [r7, #4]
 802dbfc:	681b      	ldr	r3, [r3, #0]
 802dbfe:	4a86      	ldr	r2, [pc, #536]	; (802de18 <HAL_SPI_Init+0x240>)
 802dc00:	4293      	cmp	r3, r2
 802dc02:	d00a      	beq.n	802dc1a <HAL_SPI_Init+0x42>
 802dc04:	687b      	ldr	r3, [r7, #4]
 802dc06:	681b      	ldr	r3, [r3, #0]
 802dc08:	4a84      	ldr	r2, [pc, #528]	; (802de1c <HAL_SPI_Init+0x244>)
 802dc0a:	4293      	cmp	r3, r2
 802dc0c:	d005      	beq.n	802dc1a <HAL_SPI_Init+0x42>
 802dc0e:	687b      	ldr	r3, [r7, #4]
 802dc10:	68db      	ldr	r3, [r3, #12]
 802dc12:	2b0f      	cmp	r3, #15
 802dc14:	d901      	bls.n	802dc1a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 802dc16:	2301      	movs	r3, #1
 802dc18:	e0f7      	b.n	802de0a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 802dc1a:	6878      	ldr	r0, [r7, #4]
 802dc1c:	f000 fe04 	bl	802e828 <SPI_GetPacketSize>
 802dc20:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 802dc22:	687b      	ldr	r3, [r7, #4]
 802dc24:	681b      	ldr	r3, [r3, #0]
 802dc26:	4a7b      	ldr	r2, [pc, #492]	; (802de14 <HAL_SPI_Init+0x23c>)
 802dc28:	4293      	cmp	r3, r2
 802dc2a:	d00c      	beq.n	802dc46 <HAL_SPI_Init+0x6e>
 802dc2c:	687b      	ldr	r3, [r7, #4]
 802dc2e:	681b      	ldr	r3, [r3, #0]
 802dc30:	4a79      	ldr	r2, [pc, #484]	; (802de18 <HAL_SPI_Init+0x240>)
 802dc32:	4293      	cmp	r3, r2
 802dc34:	d007      	beq.n	802dc46 <HAL_SPI_Init+0x6e>
 802dc36:	687b      	ldr	r3, [r7, #4]
 802dc38:	681b      	ldr	r3, [r3, #0]
 802dc3a:	4a78      	ldr	r2, [pc, #480]	; (802de1c <HAL_SPI_Init+0x244>)
 802dc3c:	4293      	cmp	r3, r2
 802dc3e:	d002      	beq.n	802dc46 <HAL_SPI_Init+0x6e>
 802dc40:	68fb      	ldr	r3, [r7, #12]
 802dc42:	2b08      	cmp	r3, #8
 802dc44:	d811      	bhi.n	802dc6a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 802dc46:	687b      	ldr	r3, [r7, #4]
 802dc48:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 802dc4a:	4a72      	ldr	r2, [pc, #456]	; (802de14 <HAL_SPI_Init+0x23c>)
 802dc4c:	4293      	cmp	r3, r2
 802dc4e:	d009      	beq.n	802dc64 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 802dc50:	687b      	ldr	r3, [r7, #4]
 802dc52:	681b      	ldr	r3, [r3, #0]
 802dc54:	4a70      	ldr	r2, [pc, #448]	; (802de18 <HAL_SPI_Init+0x240>)
 802dc56:	4293      	cmp	r3, r2
 802dc58:	d004      	beq.n	802dc64 <HAL_SPI_Init+0x8c>
 802dc5a:	687b      	ldr	r3, [r7, #4]
 802dc5c:	681b      	ldr	r3, [r3, #0]
 802dc5e:	4a6f      	ldr	r2, [pc, #444]	; (802de1c <HAL_SPI_Init+0x244>)
 802dc60:	4293      	cmp	r3, r2
 802dc62:	d104      	bne.n	802dc6e <HAL_SPI_Init+0x96>
 802dc64:	68fb      	ldr	r3, [r7, #12]
 802dc66:	2b10      	cmp	r3, #16
 802dc68:	d901      	bls.n	802dc6e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 802dc6a:	2301      	movs	r3, #1
 802dc6c:	e0cd      	b.n	802de0a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802dc6e:	687b      	ldr	r3, [r7, #4]
 802dc70:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802dc74:	b2db      	uxtb	r3, r3
 802dc76:	2b00      	cmp	r3, #0
 802dc78:	d106      	bne.n	802dc88 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802dc7a:	687b      	ldr	r3, [r7, #4]
 802dc7c:	2200      	movs	r2, #0
 802dc7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802dc82:	6878      	ldr	r0, [r7, #4]
 802dc84:	f7fb fbe8 	bl	8029458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802dc88:	687b      	ldr	r3, [r7, #4]
 802dc8a:	2202      	movs	r2, #2
 802dc8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802dc90:	687b      	ldr	r3, [r7, #4]
 802dc92:	681b      	ldr	r3, [r3, #0]
 802dc94:	681a      	ldr	r2, [r3, #0]
 802dc96:	687b      	ldr	r3, [r7, #4]
 802dc98:	681b      	ldr	r3, [r3, #0]
 802dc9a:	f022 0201 	bic.w	r2, r2, #1
 802dc9e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 802dca0:	687b      	ldr	r3, [r7, #4]
 802dca2:	681b      	ldr	r3, [r3, #0]
 802dca4:	689b      	ldr	r3, [r3, #8]
 802dca6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 802dcaa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 802dcac:	687b      	ldr	r3, [r7, #4]
 802dcae:	699b      	ldr	r3, [r3, #24]
 802dcb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802dcb4:	d119      	bne.n	802dcea <HAL_SPI_Init+0x112>
 802dcb6:	687b      	ldr	r3, [r7, #4]
 802dcb8:	685b      	ldr	r3, [r3, #4]
 802dcba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802dcbe:	d103      	bne.n	802dcc8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 802dcc0:	687b      	ldr	r3, [r7, #4]
 802dcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 802dcc4:	2b00      	cmp	r3, #0
 802dcc6:	d008      	beq.n	802dcda <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 802dcc8:	687b      	ldr	r3, [r7, #4]
 802dcca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 802dccc:	2b00      	cmp	r3, #0
 802dcce:	d10c      	bne.n	802dcea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 802dcd0:	687b      	ldr	r3, [r7, #4]
 802dcd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 802dcd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802dcd8:	d107      	bne.n	802dcea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 802dcda:	687b      	ldr	r3, [r7, #4]
 802dcdc:	681b      	ldr	r3, [r3, #0]
 802dcde:	681a      	ldr	r2, [r3, #0]
 802dce0:	687b      	ldr	r3, [r7, #4]
 802dce2:	681b      	ldr	r3, [r3, #0]
 802dce4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802dce8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 802dcea:	687b      	ldr	r3, [r7, #4]
 802dcec:	685b      	ldr	r3, [r3, #4]
 802dcee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802dcf2:	2b00      	cmp	r3, #0
 802dcf4:	d00f      	beq.n	802dd16 <HAL_SPI_Init+0x13e>
 802dcf6:	687b      	ldr	r3, [r7, #4]
 802dcf8:	68db      	ldr	r3, [r3, #12]
 802dcfa:	2b06      	cmp	r3, #6
 802dcfc:	d90b      	bls.n	802dd16 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 802dcfe:	687b      	ldr	r3, [r7, #4]
 802dd00:	681b      	ldr	r3, [r3, #0]
 802dd02:	681b      	ldr	r3, [r3, #0]
 802dd04:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 802dd08:	687b      	ldr	r3, [r7, #4]
 802dd0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802dd0c:	687b      	ldr	r3, [r7, #4]
 802dd0e:	681b      	ldr	r3, [r3, #0]
 802dd10:	430a      	orrs	r2, r1
 802dd12:	601a      	str	r2, [r3, #0]
 802dd14:	e007      	b.n	802dd26 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 802dd16:	687b      	ldr	r3, [r7, #4]
 802dd18:	681b      	ldr	r3, [r3, #0]
 802dd1a:	681a      	ldr	r2, [r3, #0]
 802dd1c:	687b      	ldr	r3, [r7, #4]
 802dd1e:	681b      	ldr	r3, [r3, #0]
 802dd20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802dd24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 802dd26:	687b      	ldr	r3, [r7, #4]
 802dd28:	69da      	ldr	r2, [r3, #28]
 802dd2a:	687b      	ldr	r3, [r7, #4]
 802dd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dd2e:	431a      	orrs	r2, r3
 802dd30:	68bb      	ldr	r3, [r7, #8]
 802dd32:	431a      	orrs	r2, r3
 802dd34:	687b      	ldr	r3, [r7, #4]
 802dd36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802dd38:	ea42 0103 	orr.w	r1, r2, r3
 802dd3c:	687b      	ldr	r3, [r7, #4]
 802dd3e:	68da      	ldr	r2, [r3, #12]
 802dd40:	687b      	ldr	r3, [r7, #4]
 802dd42:	681b      	ldr	r3, [r3, #0]
 802dd44:	430a      	orrs	r2, r1
 802dd46:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 802dd48:	687b      	ldr	r3, [r7, #4]
 802dd4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802dd4c:	687b      	ldr	r3, [r7, #4]
 802dd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dd50:	431a      	orrs	r2, r3
 802dd52:	687b      	ldr	r3, [r7, #4]
 802dd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802dd56:	431a      	orrs	r2, r3
 802dd58:	687b      	ldr	r3, [r7, #4]
 802dd5a:	699b      	ldr	r3, [r3, #24]
 802dd5c:	431a      	orrs	r2, r3
 802dd5e:	687b      	ldr	r3, [r7, #4]
 802dd60:	691b      	ldr	r3, [r3, #16]
 802dd62:	431a      	orrs	r2, r3
 802dd64:	687b      	ldr	r3, [r7, #4]
 802dd66:	695b      	ldr	r3, [r3, #20]
 802dd68:	431a      	orrs	r2, r3
 802dd6a:	687b      	ldr	r3, [r7, #4]
 802dd6c:	6a1b      	ldr	r3, [r3, #32]
 802dd6e:	431a      	orrs	r2, r3
 802dd70:	687b      	ldr	r3, [r7, #4]
 802dd72:	685b      	ldr	r3, [r3, #4]
 802dd74:	431a      	orrs	r2, r3
 802dd76:	687b      	ldr	r3, [r7, #4]
 802dd78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802dd7a:	431a      	orrs	r2, r3
 802dd7c:	687b      	ldr	r3, [r7, #4]
 802dd7e:	689b      	ldr	r3, [r3, #8]
 802dd80:	431a      	orrs	r2, r3
 802dd82:	687b      	ldr	r3, [r7, #4]
 802dd84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802dd86:	ea42 0103 	orr.w	r1, r2, r3
 802dd8a:	687b      	ldr	r3, [r7, #4]
 802dd8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802dd8e:	687b      	ldr	r3, [r7, #4]
 802dd90:	681b      	ldr	r3, [r3, #0]
 802dd92:	430a      	orrs	r2, r1
 802dd94:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 802dd96:	687b      	ldr	r3, [r7, #4]
 802dd98:	685b      	ldr	r3, [r3, #4]
 802dd9a:	2b00      	cmp	r3, #0
 802dd9c:	d113      	bne.n	802ddc6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 802dd9e:	687b      	ldr	r3, [r7, #4]
 802dda0:	681b      	ldr	r3, [r3, #0]
 802dda2:	689b      	ldr	r3, [r3, #8]
 802dda4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 802dda8:	687b      	ldr	r3, [r7, #4]
 802ddaa:	681b      	ldr	r3, [r3, #0]
 802ddac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802ddb0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 802ddb2:	687b      	ldr	r3, [r7, #4]
 802ddb4:	681b      	ldr	r3, [r3, #0]
 802ddb6:	689b      	ldr	r3, [r3, #8]
 802ddb8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 802ddbc:	687b      	ldr	r3, [r7, #4]
 802ddbe:	681b      	ldr	r3, [r3, #0]
 802ddc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802ddc4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802ddc6:	687b      	ldr	r3, [r7, #4]
 802ddc8:	681b      	ldr	r3, [r3, #0]
 802ddca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802ddcc:	687b      	ldr	r3, [r7, #4]
 802ddce:	681b      	ldr	r3, [r3, #0]
 802ddd0:	f022 0201 	bic.w	r2, r2, #1
 802ddd4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 802ddd6:	687b      	ldr	r3, [r7, #4]
 802ddd8:	685b      	ldr	r3, [r3, #4]
 802ddda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802ddde:	2b00      	cmp	r3, #0
 802dde0:	d00a      	beq.n	802ddf8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 802dde2:	687b      	ldr	r3, [r7, #4]
 802dde4:	681b      	ldr	r3, [r3, #0]
 802dde6:	68db      	ldr	r3, [r3, #12]
 802dde8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802ddec:	687b      	ldr	r3, [r7, #4]
 802ddee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802ddf0:	687b      	ldr	r3, [r7, #4]
 802ddf2:	681b      	ldr	r3, [r3, #0]
 802ddf4:	430a      	orrs	r2, r1
 802ddf6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802ddf8:	687b      	ldr	r3, [r7, #4]
 802ddfa:	2200      	movs	r2, #0
 802ddfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 802de00:	687b      	ldr	r3, [r7, #4]
 802de02:	2201      	movs	r2, #1
 802de04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 802de08:	2300      	movs	r3, #0
}
 802de0a:	4618      	mov	r0, r3
 802de0c:	3710      	adds	r7, #16
 802de0e:	46bd      	mov	sp, r7
 802de10:	bd80      	pop	{r7, pc}
 802de12:	bf00      	nop
 802de14:	40013000 	.word	0x40013000
 802de18:	40003800 	.word	0x40003800
 802de1c:	40003c00 	.word	0x40003c00

0802de20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 802de20:	b580      	push	{r7, lr}
 802de22:	b08c      	sub	sp, #48	; 0x30
 802de24:	af02      	add	r7, sp, #8
 802de26:	60f8      	str	r0, [r7, #12]
 802de28:	60b9      	str	r1, [r7, #8]
 802de2a:	607a      	str	r2, [r7, #4]
 802de2c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 802de2e:	2300      	movs	r3, #0
 802de30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 802de34:	68fb      	ldr	r3, [r7, #12]
 802de36:	681b      	ldr	r3, [r3, #0]
 802de38:	3320      	adds	r3, #32
 802de3a:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 802de3c:	68fb      	ldr	r3, [r7, #12]
 802de3e:	681b      	ldr	r3, [r3, #0]
 802de40:	3330      	adds	r3, #48	; 0x30
 802de42:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 802de44:	68fb      	ldr	r3, [r7, #12]
 802de46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802de4a:	2b01      	cmp	r3, #1
 802de4c:	d101      	bne.n	802de52 <HAL_SPI_TransmitReceive+0x32>
 802de4e:	2302      	movs	r3, #2
 802de50:	e1fd      	b.n	802e24e <HAL_SPI_TransmitReceive+0x42e>
 802de52:	68fb      	ldr	r3, [r7, #12]
 802de54:	2201      	movs	r2, #1
 802de56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802de5a:	f7fc f94d 	bl	802a0f8 <HAL_GetTick>
 802de5e:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 802de60:	887b      	ldrh	r3, [r7, #2]
 802de62:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 802de64:	887b      	ldrh	r3, [r7, #2]
 802de66:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 802de68:	68fb      	ldr	r3, [r7, #12]
 802de6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802de6e:	b2db      	uxtb	r3, r3
 802de70:	2b01      	cmp	r3, #1
 802de72:	d009      	beq.n	802de88 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 802de74:	2302      	movs	r3, #2
 802de76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 802de7a:	68fb      	ldr	r3, [r7, #12]
 802de7c:	2200      	movs	r2, #0
 802de7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802de82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802de86:	e1e2      	b.n	802e24e <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 802de88:	68bb      	ldr	r3, [r7, #8]
 802de8a:	2b00      	cmp	r3, #0
 802de8c:	d005      	beq.n	802de9a <HAL_SPI_TransmitReceive+0x7a>
 802de8e:	687b      	ldr	r3, [r7, #4]
 802de90:	2b00      	cmp	r3, #0
 802de92:	d002      	beq.n	802de9a <HAL_SPI_TransmitReceive+0x7a>
 802de94:	887b      	ldrh	r3, [r7, #2]
 802de96:	2b00      	cmp	r3, #0
 802de98:	d109      	bne.n	802deae <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 802de9a:	2301      	movs	r3, #1
 802de9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 802dea0:	68fb      	ldr	r3, [r7, #12]
 802dea2:	2200      	movs	r2, #0
 802dea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 802dea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802deac:	e1cf      	b.n	802e24e <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 802deae:	68fb      	ldr	r3, [r7, #12]
 802deb0:	2205      	movs	r2, #5
 802deb2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802deb6:	68fb      	ldr	r3, [r7, #12]
 802deb8:	2200      	movs	r2, #0
 802deba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802debe:	68fb      	ldr	r3, [r7, #12]
 802dec0:	687a      	ldr	r2, [r7, #4]
 802dec2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 802dec4:	68fb      	ldr	r3, [r7, #12]
 802dec6:	887a      	ldrh	r2, [r7, #2]
 802dec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 802decc:	68fb      	ldr	r3, [r7, #12]
 802dece:	887a      	ldrh	r2, [r7, #2]
 802ded0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 802ded4:	68fb      	ldr	r3, [r7, #12]
 802ded6:	68ba      	ldr	r2, [r7, #8]
 802ded8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 802deda:	68fb      	ldr	r3, [r7, #12]
 802dedc:	887a      	ldrh	r2, [r7, #2]
 802dede:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 802dee2:	68fb      	ldr	r3, [r7, #12]
 802dee4:	887a      	ldrh	r2, [r7, #2]
 802dee6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802deea:	68fb      	ldr	r3, [r7, #12]
 802deec:	2200      	movs	r2, #0
 802deee:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 802def0:	68fb      	ldr	r3, [r7, #12]
 802def2:	2200      	movs	r2, #0
 802def4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 802def6:	68fb      	ldr	r3, [r7, #12]
 802def8:	681b      	ldr	r3, [r3, #0]
 802defa:	68da      	ldr	r2, [r3, #12]
 802defc:	68fb      	ldr	r3, [r7, #12]
 802defe:	681b      	ldr	r3, [r3, #0]
 802df00:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 802df04:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 802df06:	68fb      	ldr	r3, [r7, #12]
 802df08:	681b      	ldr	r3, [r3, #0]
 802df0a:	685a      	ldr	r2, [r3, #4]
 802df0c:	4b82      	ldr	r3, [pc, #520]	; (802e118 <HAL_SPI_TransmitReceive+0x2f8>)
 802df0e:	4013      	ands	r3, r2
 802df10:	8879      	ldrh	r1, [r7, #2]
 802df12:	68fa      	ldr	r2, [r7, #12]
 802df14:	6812      	ldr	r2, [r2, #0]
 802df16:	430b      	orrs	r3, r1
 802df18:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 802df1a:	68fb      	ldr	r3, [r7, #12]
 802df1c:	681b      	ldr	r3, [r3, #0]
 802df1e:	681a      	ldr	r2, [r3, #0]
 802df20:	68fb      	ldr	r3, [r7, #12]
 802df22:	681b      	ldr	r3, [r3, #0]
 802df24:	f042 0201 	orr.w	r2, r2, #1
 802df28:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802df2a:	68fb      	ldr	r3, [r7, #12]
 802df2c:	685b      	ldr	r3, [r3, #4]
 802df2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802df32:	d107      	bne.n	802df44 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 802df34:	68fb      	ldr	r3, [r7, #12]
 802df36:	681b      	ldr	r3, [r3, #0]
 802df38:	681a      	ldr	r2, [r3, #0]
 802df3a:	68fb      	ldr	r3, [r7, #12]
 802df3c:	681b      	ldr	r3, [r3, #0]
 802df3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802df42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 802df44:	68fb      	ldr	r3, [r7, #12]
 802df46:	68db      	ldr	r3, [r3, #12]
 802df48:	2b0f      	cmp	r3, #15
 802df4a:	d970      	bls.n	802e02e <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802df4c:	e068      	b.n	802e020 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 802df4e:	68fb      	ldr	r3, [r7, #12]
 802df50:	681b      	ldr	r3, [r3, #0]
 802df52:	695b      	ldr	r3, [r3, #20]
 802df54:	f003 0302 	and.w	r3, r3, #2
 802df58:	2b02      	cmp	r3, #2
 802df5a:	d11a      	bne.n	802df92 <HAL_SPI_TransmitReceive+0x172>
 802df5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802df5e:	2b00      	cmp	r3, #0
 802df60:	d017      	beq.n	802df92 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 802df62:	68fb      	ldr	r3, [r7, #12]
 802df64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802df66:	68fb      	ldr	r3, [r7, #12]
 802df68:	681b      	ldr	r3, [r3, #0]
 802df6a:	6812      	ldr	r2, [r2, #0]
 802df6c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 802df6e:	68fb      	ldr	r3, [r7, #12]
 802df70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802df72:	1d1a      	adds	r2, r3, #4
 802df74:	68fb      	ldr	r3, [r7, #12]
 802df76:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 802df78:	68fb      	ldr	r3, [r7, #12]
 802df7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802df7e:	b29b      	uxth	r3, r3
 802df80:	3b01      	subs	r3, #1
 802df82:	b29a      	uxth	r2, r3
 802df84:	68fb      	ldr	r3, [r7, #12]
 802df86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 802df8a:	68fb      	ldr	r3, [r7, #12]
 802df8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802df90:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 802df92:	68fb      	ldr	r3, [r7, #12]
 802df94:	681b      	ldr	r3, [r3, #0]
 802df96:	695a      	ldr	r2, [r3, #20]
 802df98:	f248 0308 	movw	r3, #32776	; 0x8008
 802df9c:	4013      	ands	r3, r2
 802df9e:	2b00      	cmp	r3, #0
 802dfa0:	d01a      	beq.n	802dfd8 <HAL_SPI_TransmitReceive+0x1b8>
 802dfa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802dfa4:	2b00      	cmp	r3, #0
 802dfa6:	d017      	beq.n	802dfd8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 802dfa8:	68fb      	ldr	r3, [r7, #12]
 802dfaa:	681a      	ldr	r2, [r3, #0]
 802dfac:	68fb      	ldr	r3, [r7, #12]
 802dfae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802dfb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 802dfb2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 802dfb4:	68fb      	ldr	r3, [r7, #12]
 802dfb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802dfb8:	1d1a      	adds	r2, r3, #4
 802dfba:	68fb      	ldr	r3, [r7, #12]
 802dfbc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 802dfbe:	68fb      	ldr	r3, [r7, #12]
 802dfc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802dfc4:	b29b      	uxth	r3, r3
 802dfc6:	3b01      	subs	r3, #1
 802dfc8:	b29a      	uxth	r2, r3
 802dfca:	68fb      	ldr	r3, [r7, #12]
 802dfcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 802dfd0:	68fb      	ldr	r3, [r7, #12]
 802dfd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802dfd6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802dfd8:	f7fc f88e 	bl	802a0f8 <HAL_GetTick>
 802dfdc:	4602      	mov	r2, r0
 802dfde:	697b      	ldr	r3, [r7, #20]
 802dfe0:	1ad3      	subs	r3, r2, r3
 802dfe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802dfe4:	429a      	cmp	r2, r3
 802dfe6:	d803      	bhi.n	802dff0 <HAL_SPI_TransmitReceive+0x1d0>
 802dfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dfea:	f1b3 3fff 	cmp.w	r3, #4294967295
 802dfee:	d102      	bne.n	802dff6 <HAL_SPI_TransmitReceive+0x1d6>
 802dff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802dff2:	2b00      	cmp	r3, #0
 802dff4:	d114      	bne.n	802e020 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 802dff6:	68f8      	ldr	r0, [r7, #12]
 802dff8:	f000 fb48 	bl	802e68c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 802dffc:	68fb      	ldr	r3, [r7, #12]
 802dffe:	2200      	movs	r2, #0
 802e000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 802e004:	68fb      	ldr	r3, [r7, #12]
 802e006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e00a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802e00e:	68fb      	ldr	r3, [r7, #12]
 802e010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 802e014:	68fb      	ldr	r3, [r7, #12]
 802e016:	2201      	movs	r2, #1
 802e018:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 802e01c:	2303      	movs	r3, #3
 802e01e:	e116      	b.n	802e24e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802e020:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e022:	2b00      	cmp	r3, #0
 802e024:	d193      	bne.n	802df4e <HAL_SPI_TransmitReceive+0x12e>
 802e026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802e028:	2b00      	cmp	r3, #0
 802e02a:	d190      	bne.n	802df4e <HAL_SPI_TransmitReceive+0x12e>
 802e02c:	e0e8      	b.n	802e200 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802e02e:	68fb      	ldr	r3, [r7, #12]
 802e030:	68db      	ldr	r3, [r3, #12]
 802e032:	2b07      	cmp	r3, #7
 802e034:	f240 80de 	bls.w	802e1f4 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802e038:	e066      	b.n	802e108 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 802e03a:	68fb      	ldr	r3, [r7, #12]
 802e03c:	681b      	ldr	r3, [r3, #0]
 802e03e:	695b      	ldr	r3, [r3, #20]
 802e040:	f003 0302 	and.w	r3, r3, #2
 802e044:	2b02      	cmp	r3, #2
 802e046:	d119      	bne.n	802e07c <HAL_SPI_TransmitReceive+0x25c>
 802e048:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e04a:	2b00      	cmp	r3, #0
 802e04c:	d016      	beq.n	802e07c <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 802e04e:	68fb      	ldr	r3, [r7, #12]
 802e050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e052:	881a      	ldrh	r2, [r3, #0]
 802e054:	69fb      	ldr	r3, [r7, #28]
 802e056:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802e058:	68fb      	ldr	r3, [r7, #12]
 802e05a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e05c:	1c9a      	adds	r2, r3, #2
 802e05e:	68fb      	ldr	r3, [r7, #12]
 802e060:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 802e062:	68fb      	ldr	r3, [r7, #12]
 802e064:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802e068:	b29b      	uxth	r3, r3
 802e06a:	3b01      	subs	r3, #1
 802e06c:	b29a      	uxth	r2, r3
 802e06e:	68fb      	ldr	r3, [r7, #12]
 802e070:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 802e074:	68fb      	ldr	r3, [r7, #12]
 802e076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802e07a:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 802e07c:	68fb      	ldr	r3, [r7, #12]
 802e07e:	681b      	ldr	r3, [r3, #0]
 802e080:	695b      	ldr	r3, [r3, #20]
 802e082:	f003 0301 	and.w	r3, r3, #1
 802e086:	2b01      	cmp	r3, #1
 802e088:	d11a      	bne.n	802e0c0 <HAL_SPI_TransmitReceive+0x2a0>
 802e08a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802e08c:	2b00      	cmp	r3, #0
 802e08e:	d017      	beq.n	802e0c0 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 802e090:	68fb      	ldr	r3, [r7, #12]
 802e092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e094:	69ba      	ldr	r2, [r7, #24]
 802e096:	8812      	ldrh	r2, [r2, #0]
 802e098:	b292      	uxth	r2, r2
 802e09a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802e09c:	68fb      	ldr	r3, [r7, #12]
 802e09e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e0a0:	1c9a      	adds	r2, r3, #2
 802e0a2:	68fb      	ldr	r3, [r7, #12]
 802e0a4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 802e0a6:	68fb      	ldr	r3, [r7, #12]
 802e0a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e0ac:	b29b      	uxth	r3, r3
 802e0ae:	3b01      	subs	r3, #1
 802e0b0:	b29a      	uxth	r2, r3
 802e0b2:	68fb      	ldr	r3, [r7, #12]
 802e0b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 802e0b8:	68fb      	ldr	r3, [r7, #12]
 802e0ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e0be:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802e0c0:	f7fc f81a 	bl	802a0f8 <HAL_GetTick>
 802e0c4:	4602      	mov	r2, r0
 802e0c6:	697b      	ldr	r3, [r7, #20]
 802e0c8:	1ad3      	subs	r3, r2, r3
 802e0ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802e0cc:	429a      	cmp	r2, r3
 802e0ce:	d803      	bhi.n	802e0d8 <HAL_SPI_TransmitReceive+0x2b8>
 802e0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 802e0d6:	d102      	bne.n	802e0de <HAL_SPI_TransmitReceive+0x2be>
 802e0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e0da:	2b00      	cmp	r3, #0
 802e0dc:	d114      	bne.n	802e108 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 802e0de:	68f8      	ldr	r0, [r7, #12]
 802e0e0:	f000 fad4 	bl	802e68c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 802e0e4:	68fb      	ldr	r3, [r7, #12]
 802e0e6:	2200      	movs	r2, #0
 802e0e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 802e0ec:	68fb      	ldr	r3, [r7, #12]
 802e0ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e0f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802e0f6:	68fb      	ldr	r3, [r7, #12]
 802e0f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 802e0fc:	68fb      	ldr	r3, [r7, #12]
 802e0fe:	2201      	movs	r2, #1
 802e100:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 802e104:	2303      	movs	r3, #3
 802e106:	e0a2      	b.n	802e24e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802e108:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e10a:	2b00      	cmp	r3, #0
 802e10c:	d195      	bne.n	802e03a <HAL_SPI_TransmitReceive+0x21a>
 802e10e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802e110:	2b00      	cmp	r3, #0
 802e112:	d192      	bne.n	802e03a <HAL_SPI_TransmitReceive+0x21a>
 802e114:	e074      	b.n	802e200 <HAL_SPI_TransmitReceive+0x3e0>
 802e116:	bf00      	nop
 802e118:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 802e11c:	68fb      	ldr	r3, [r7, #12]
 802e11e:	681b      	ldr	r3, [r3, #0]
 802e120:	695b      	ldr	r3, [r3, #20]
 802e122:	f003 0302 	and.w	r3, r3, #2
 802e126:	2b02      	cmp	r3, #2
 802e128:	d11b      	bne.n	802e162 <HAL_SPI_TransmitReceive+0x342>
 802e12a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e12c:	2b00      	cmp	r3, #0
 802e12e:	d018      	beq.n	802e162 <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 802e130:	68fb      	ldr	r3, [r7, #12]
 802e132:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802e134:	68fb      	ldr	r3, [r7, #12]
 802e136:	681b      	ldr	r3, [r3, #0]
 802e138:	3320      	adds	r3, #32
 802e13a:	7812      	ldrb	r2, [r2, #0]
 802e13c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802e13e:	68fb      	ldr	r3, [r7, #12]
 802e140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e142:	1c5a      	adds	r2, r3, #1
 802e144:	68fb      	ldr	r3, [r7, #12]
 802e146:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 802e148:	68fb      	ldr	r3, [r7, #12]
 802e14a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802e14e:	b29b      	uxth	r3, r3
 802e150:	3b01      	subs	r3, #1
 802e152:	b29a      	uxth	r2, r3
 802e154:	68fb      	ldr	r3, [r7, #12]
 802e156:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 802e15a:	68fb      	ldr	r3, [r7, #12]
 802e15c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802e160:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 802e162:	68fb      	ldr	r3, [r7, #12]
 802e164:	681b      	ldr	r3, [r3, #0]
 802e166:	695b      	ldr	r3, [r3, #20]
 802e168:	f003 0301 	and.w	r3, r3, #1
 802e16c:	2b01      	cmp	r3, #1
 802e16e:	d11d      	bne.n	802e1ac <HAL_SPI_TransmitReceive+0x38c>
 802e170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802e172:	2b00      	cmp	r3, #0
 802e174:	d01a      	beq.n	802e1ac <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 802e176:	68fb      	ldr	r3, [r7, #12]
 802e178:	681b      	ldr	r3, [r3, #0]
 802e17a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802e17e:	68fb      	ldr	r3, [r7, #12]
 802e180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e182:	7812      	ldrb	r2, [r2, #0]
 802e184:	b2d2      	uxtb	r2, r2
 802e186:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 802e188:	68fb      	ldr	r3, [r7, #12]
 802e18a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e18c:	1c5a      	adds	r2, r3, #1
 802e18e:	68fb      	ldr	r3, [r7, #12]
 802e190:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 802e192:	68fb      	ldr	r3, [r7, #12]
 802e194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e198:	b29b      	uxth	r3, r3
 802e19a:	3b01      	subs	r3, #1
 802e19c:	b29a      	uxth	r2, r3
 802e19e:	68fb      	ldr	r3, [r7, #12]
 802e1a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 802e1a4:	68fb      	ldr	r3, [r7, #12]
 802e1a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e1aa:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802e1ac:	f7fb ffa4 	bl	802a0f8 <HAL_GetTick>
 802e1b0:	4602      	mov	r2, r0
 802e1b2:	697b      	ldr	r3, [r7, #20]
 802e1b4:	1ad3      	subs	r3, r2, r3
 802e1b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802e1b8:	429a      	cmp	r2, r3
 802e1ba:	d803      	bhi.n	802e1c4 <HAL_SPI_TransmitReceive+0x3a4>
 802e1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 802e1c2:	d102      	bne.n	802e1ca <HAL_SPI_TransmitReceive+0x3aa>
 802e1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e1c6:	2b00      	cmp	r3, #0
 802e1c8:	d114      	bne.n	802e1f4 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 802e1ca:	68f8      	ldr	r0, [r7, #12]
 802e1cc:	f000 fa5e 	bl	802e68c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 802e1d0:	68fb      	ldr	r3, [r7, #12]
 802e1d2:	2200      	movs	r2, #0
 802e1d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 802e1d8:	68fb      	ldr	r3, [r7, #12]
 802e1da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e1de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802e1e2:	68fb      	ldr	r3, [r7, #12]
 802e1e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 802e1e8:	68fb      	ldr	r3, [r7, #12]
 802e1ea:	2201      	movs	r2, #1
 802e1ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 802e1f0:	2303      	movs	r3, #3
 802e1f2:	e02c      	b.n	802e24e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802e1f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802e1f6:	2b00      	cmp	r3, #0
 802e1f8:	d190      	bne.n	802e11c <HAL_SPI_TransmitReceive+0x2fc>
 802e1fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802e1fc:	2b00      	cmp	r3, #0
 802e1fe:	d18d      	bne.n	802e11c <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 802e200:	697b      	ldr	r3, [r7, #20]
 802e202:	9300      	str	r3, [sp, #0]
 802e204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802e206:	2200      	movs	r2, #0
 802e208:	2108      	movs	r1, #8
 802e20a:	68f8      	ldr	r0, [r7, #12]
 802e20c:	f000 fade 	bl	802e7cc <SPI_WaitOnFlagUntilTimeout>
 802e210:	4603      	mov	r3, r0
 802e212:	2b00      	cmp	r3, #0
 802e214:	d007      	beq.n	802e226 <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802e216:	68fb      	ldr	r3, [r7, #12]
 802e218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e21c:	f043 0220 	orr.w	r2, r3, #32
 802e220:	68fb      	ldr	r3, [r7, #12]
 802e222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 802e226:	68f8      	ldr	r0, [r7, #12]
 802e228:	f000 fa30 	bl	802e68c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 802e22c:	68fb      	ldr	r3, [r7, #12]
 802e22e:	2200      	movs	r2, #0
 802e230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 802e234:	68fb      	ldr	r3, [r7, #12]
 802e236:	2201      	movs	r2, #1
 802e238:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802e23c:	68fb      	ldr	r3, [r7, #12]
 802e23e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e242:	2b00      	cmp	r3, #0
 802e244:	d001      	beq.n	802e24a <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 802e246:	2301      	movs	r3, #1
 802e248:	e001      	b.n	802e24e <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 802e24a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 802e24e:	4618      	mov	r0, r3
 802e250:	3728      	adds	r7, #40	; 0x28
 802e252:	46bd      	mov	sp, r7
 802e254:	bd80      	pop	{r7, pc}
 802e256:	bf00      	nop

0802e258 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 802e258:	b580      	push	{r7, lr}
 802e25a:	b08a      	sub	sp, #40	; 0x28
 802e25c:	af00      	add	r7, sp, #0
 802e25e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 802e260:	687b      	ldr	r3, [r7, #4]
 802e262:	681b      	ldr	r3, [r3, #0]
 802e264:	691b      	ldr	r3, [r3, #16]
 802e266:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 802e268:	687b      	ldr	r3, [r7, #4]
 802e26a:	681b      	ldr	r3, [r3, #0]
 802e26c:	695b      	ldr	r3, [r3, #20]
 802e26e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 802e270:	6a3a      	ldr	r2, [r7, #32]
 802e272:	69fb      	ldr	r3, [r7, #28]
 802e274:	4013      	ands	r3, r2
 802e276:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 802e278:	687b      	ldr	r3, [r7, #4]
 802e27a:	681b      	ldr	r3, [r3, #0]
 802e27c:	689b      	ldr	r3, [r3, #8]
 802e27e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 802e280:	2300      	movs	r3, #0
 802e282:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 802e284:	687b      	ldr	r3, [r7, #4]
 802e286:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802e28a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 802e28c:	687b      	ldr	r3, [r7, #4]
 802e28e:	681b      	ldr	r3, [r3, #0]
 802e290:	3330      	adds	r3, #48	; 0x30
 802e292:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 802e294:	69fb      	ldr	r3, [r7, #28]
 802e296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802e29a:	2b00      	cmp	r3, #0
 802e29c:	d010      	beq.n	802e2c0 <HAL_SPI_IRQHandler+0x68>
 802e29e:	6a3b      	ldr	r3, [r7, #32]
 802e2a0:	f003 0308 	and.w	r3, r3, #8
 802e2a4:	2b00      	cmp	r3, #0
 802e2a6:	d00b      	beq.n	802e2c0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 802e2a8:	687b      	ldr	r3, [r7, #4]
 802e2aa:	681b      	ldr	r3, [r3, #0]
 802e2ac:	699a      	ldr	r2, [r3, #24]
 802e2ae:	687b      	ldr	r3, [r7, #4]
 802e2b0:	681b      	ldr	r3, [r3, #0]
 802e2b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802e2b6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 802e2b8:	6878      	ldr	r0, [r7, #4]
 802e2ba:	f000 f9c3 	bl	802e644 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 802e2be:	e192      	b.n	802e5e6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 802e2c0:	69bb      	ldr	r3, [r7, #24]
 802e2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e2c6:	2b00      	cmp	r3, #0
 802e2c8:	d113      	bne.n	802e2f2 <HAL_SPI_IRQHandler+0x9a>
 802e2ca:	69bb      	ldr	r3, [r7, #24]
 802e2cc:	f003 0320 	and.w	r3, r3, #32
 802e2d0:	2b00      	cmp	r3, #0
 802e2d2:	d10e      	bne.n	802e2f2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 802e2d4:	69bb      	ldr	r3, [r7, #24]
 802e2d6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 802e2da:	2b00      	cmp	r3, #0
 802e2dc:	d009      	beq.n	802e2f2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 802e2de:	687b      	ldr	r3, [r7, #4]
 802e2e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802e2e2:	6878      	ldr	r0, [r7, #4]
 802e2e4:	4798      	blx	r3
    hspi->RxISR(hspi);
 802e2e6:	687b      	ldr	r3, [r7, #4]
 802e2e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802e2ea:	6878      	ldr	r0, [r7, #4]
 802e2ec:	4798      	blx	r3
    handled = 1UL;
 802e2ee:	2301      	movs	r3, #1
 802e2f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 802e2f2:	69bb      	ldr	r3, [r7, #24]
 802e2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e2f8:	2b00      	cmp	r3, #0
 802e2fa:	d10f      	bne.n	802e31c <HAL_SPI_IRQHandler+0xc4>
 802e2fc:	69bb      	ldr	r3, [r7, #24]
 802e2fe:	f003 0301 	and.w	r3, r3, #1
 802e302:	2b00      	cmp	r3, #0
 802e304:	d00a      	beq.n	802e31c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 802e306:	69bb      	ldr	r3, [r7, #24]
 802e308:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 802e30c:	2b00      	cmp	r3, #0
 802e30e:	d105      	bne.n	802e31c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 802e310:	687b      	ldr	r3, [r7, #4]
 802e312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802e314:	6878      	ldr	r0, [r7, #4]
 802e316:	4798      	blx	r3
    handled = 1UL;
 802e318:	2301      	movs	r3, #1
 802e31a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 802e31c:	69bb      	ldr	r3, [r7, #24]
 802e31e:	f003 0320 	and.w	r3, r3, #32
 802e322:	2b00      	cmp	r3, #0
 802e324:	d10f      	bne.n	802e346 <HAL_SPI_IRQHandler+0xee>
 802e326:	69bb      	ldr	r3, [r7, #24]
 802e328:	f003 0302 	and.w	r3, r3, #2
 802e32c:	2b00      	cmp	r3, #0
 802e32e:	d00a      	beq.n	802e346 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 802e330:	69bb      	ldr	r3, [r7, #24]
 802e332:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 802e336:	2b00      	cmp	r3, #0
 802e338:	d105      	bne.n	802e346 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 802e33a:	687b      	ldr	r3, [r7, #4]
 802e33c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802e33e:	6878      	ldr	r0, [r7, #4]
 802e340:	4798      	blx	r3
    handled = 1UL;
 802e342:	2301      	movs	r3, #1
 802e344:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 802e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e348:	2b00      	cmp	r3, #0
 802e34a:	f040 8147 	bne.w	802e5dc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 802e34e:	69bb      	ldr	r3, [r7, #24]
 802e350:	f003 0308 	and.w	r3, r3, #8
 802e354:	2b00      	cmp	r3, #0
 802e356:	f000 808b 	beq.w	802e470 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 802e35a:	687b      	ldr	r3, [r7, #4]
 802e35c:	681b      	ldr	r3, [r3, #0]
 802e35e:	699a      	ldr	r2, [r3, #24]
 802e360:	687b      	ldr	r3, [r7, #4]
 802e362:	681b      	ldr	r3, [r3, #0]
 802e364:	f042 0208 	orr.w	r2, r2, #8
 802e368:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 802e36a:	687b      	ldr	r3, [r7, #4]
 802e36c:	681b      	ldr	r3, [r3, #0]
 802e36e:	699a      	ldr	r2, [r3, #24]
 802e370:	687b      	ldr	r3, [r7, #4]
 802e372:	681b      	ldr	r3, [r3, #0]
 802e374:	f042 0210 	orr.w	r2, r2, #16
 802e378:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 802e37a:	687b      	ldr	r3, [r7, #4]
 802e37c:	681b      	ldr	r3, [r3, #0]
 802e37e:	699a      	ldr	r2, [r3, #24]
 802e380:	687b      	ldr	r3, [r7, #4]
 802e382:	681b      	ldr	r3, [r3, #0]
 802e384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802e388:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 802e38a:	687b      	ldr	r3, [r7, #4]
 802e38c:	681b      	ldr	r3, [r3, #0]
 802e38e:	691a      	ldr	r2, [r3, #16]
 802e390:	687b      	ldr	r3, [r7, #4]
 802e392:	681b      	ldr	r3, [r3, #0]
 802e394:	f022 0208 	bic.w	r2, r2, #8
 802e398:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 802e39a:	687b      	ldr	r3, [r7, #4]
 802e39c:	681b      	ldr	r3, [r3, #0]
 802e39e:	689b      	ldr	r3, [r3, #8]
 802e3a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802e3a4:	2b00      	cmp	r3, #0
 802e3a6:	d13d      	bne.n	802e424 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 802e3a8:	e036      	b.n	802e418 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 802e3aa:	687b      	ldr	r3, [r7, #4]
 802e3ac:	68db      	ldr	r3, [r3, #12]
 802e3ae:	2b0f      	cmp	r3, #15
 802e3b0:	d90b      	bls.n	802e3ca <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 802e3b2:	687b      	ldr	r3, [r7, #4]
 802e3b4:	681a      	ldr	r2, [r3, #0]
 802e3b6:	687b      	ldr	r3, [r7, #4]
 802e3b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e3ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 802e3bc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 802e3be:	687b      	ldr	r3, [r7, #4]
 802e3c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e3c2:	1d1a      	adds	r2, r3, #4
 802e3c4:	687b      	ldr	r3, [r7, #4]
 802e3c6:	665a      	str	r2, [r3, #100]	; 0x64
 802e3c8:	e01d      	b.n	802e406 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802e3ca:	687b      	ldr	r3, [r7, #4]
 802e3cc:	68db      	ldr	r3, [r3, #12]
 802e3ce:	2b07      	cmp	r3, #7
 802e3d0:	d90b      	bls.n	802e3ea <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 802e3d2:	687b      	ldr	r3, [r7, #4]
 802e3d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e3d6:	68fa      	ldr	r2, [r7, #12]
 802e3d8:	8812      	ldrh	r2, [r2, #0]
 802e3da:	b292      	uxth	r2, r2
 802e3dc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 802e3de:	687b      	ldr	r3, [r7, #4]
 802e3e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e3e2:	1c9a      	adds	r2, r3, #2
 802e3e4:	687b      	ldr	r3, [r7, #4]
 802e3e6:	665a      	str	r2, [r3, #100]	; 0x64
 802e3e8:	e00d      	b.n	802e406 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 802e3ea:	687b      	ldr	r3, [r7, #4]
 802e3ec:	681b      	ldr	r3, [r3, #0]
 802e3ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802e3f2:	687b      	ldr	r3, [r7, #4]
 802e3f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e3f6:	7812      	ldrb	r2, [r2, #0]
 802e3f8:	b2d2      	uxtb	r2, r2
 802e3fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 802e3fc:	687b      	ldr	r3, [r7, #4]
 802e3fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e400:	1c5a      	adds	r2, r3, #1
 802e402:	687b      	ldr	r3, [r7, #4]
 802e404:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 802e406:	687b      	ldr	r3, [r7, #4]
 802e408:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e40c:	b29b      	uxth	r3, r3
 802e40e:	3b01      	subs	r3, #1
 802e410:	b29a      	uxth	r2, r3
 802e412:	687b      	ldr	r3, [r7, #4]
 802e414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 802e418:	687b      	ldr	r3, [r7, #4]
 802e41a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802e41e:	b29b      	uxth	r3, r3
 802e420:	2b00      	cmp	r3, #0
 802e422:	d1c2      	bne.n	802e3aa <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 802e424:	6878      	ldr	r0, [r7, #4]
 802e426:	f000 f931 	bl	802e68c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 802e42a:	687b      	ldr	r3, [r7, #4]
 802e42c:	2201      	movs	r2, #1
 802e42e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802e432:	687b      	ldr	r3, [r7, #4]
 802e434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e438:	2b00      	cmp	r3, #0
 802e43a:	d003      	beq.n	802e444 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 802e43c:	6878      	ldr	r0, [r7, #4]
 802e43e:	f000 f8f7 	bl	802e630 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 802e442:	e0d0      	b.n	802e5e6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 802e444:	7cfb      	ldrb	r3, [r7, #19]
 802e446:	2b05      	cmp	r3, #5
 802e448:	d103      	bne.n	802e452 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 802e44a:	6878      	ldr	r0, [r7, #4]
 802e44c:	f000 f8e6 	bl	802e61c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 802e450:	e0c6      	b.n	802e5e0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 802e452:	7cfb      	ldrb	r3, [r7, #19]
 802e454:	2b04      	cmp	r3, #4
 802e456:	d103      	bne.n	802e460 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 802e458:	6878      	ldr	r0, [r7, #4]
 802e45a:	f000 f8d5 	bl	802e608 <HAL_SPI_RxCpltCallback>
    return;
 802e45e:	e0bf      	b.n	802e5e0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 802e460:	7cfb      	ldrb	r3, [r7, #19]
 802e462:	2b03      	cmp	r3, #3
 802e464:	f040 80bc 	bne.w	802e5e0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 802e468:	6878      	ldr	r0, [r7, #4]
 802e46a:	f000 f8c3 	bl	802e5f4 <HAL_SPI_TxCpltCallback>
    return;
 802e46e:	e0b7      	b.n	802e5e0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 802e470:	69bb      	ldr	r3, [r7, #24]
 802e472:	f403 7358 	and.w	r3, r3, #864	; 0x360
 802e476:	2b00      	cmp	r3, #0
 802e478:	f000 80b5 	beq.w	802e5e6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 802e47c:	69bb      	ldr	r3, [r7, #24]
 802e47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e482:	2b00      	cmp	r3, #0
 802e484:	d00f      	beq.n	802e4a6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802e486:	687b      	ldr	r3, [r7, #4]
 802e488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e48c:	f043 0204 	orr.w	r2, r3, #4
 802e490:	687b      	ldr	r3, [r7, #4]
 802e492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802e496:	687b      	ldr	r3, [r7, #4]
 802e498:	681b      	ldr	r3, [r3, #0]
 802e49a:	699a      	ldr	r2, [r3, #24]
 802e49c:	687b      	ldr	r3, [r7, #4]
 802e49e:	681b      	ldr	r3, [r3, #0]
 802e4a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802e4a4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 802e4a6:	69bb      	ldr	r3, [r7, #24]
 802e4a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802e4ac:	2b00      	cmp	r3, #0
 802e4ae:	d00f      	beq.n	802e4d0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802e4b0:	687b      	ldr	r3, [r7, #4]
 802e4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e4b6:	f043 0201 	orr.w	r2, r3, #1
 802e4ba:	687b      	ldr	r3, [r7, #4]
 802e4bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802e4c0:	687b      	ldr	r3, [r7, #4]
 802e4c2:	681b      	ldr	r3, [r3, #0]
 802e4c4:	699a      	ldr	r2, [r3, #24]
 802e4c6:	687b      	ldr	r3, [r7, #4]
 802e4c8:	681b      	ldr	r3, [r3, #0]
 802e4ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802e4ce:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 802e4d0:	69bb      	ldr	r3, [r7, #24]
 802e4d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e4d6:	2b00      	cmp	r3, #0
 802e4d8:	d00f      	beq.n	802e4fa <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802e4da:	687b      	ldr	r3, [r7, #4]
 802e4dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e4e0:	f043 0208 	orr.w	r2, r3, #8
 802e4e4:	687b      	ldr	r3, [r7, #4]
 802e4e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 802e4ea:	687b      	ldr	r3, [r7, #4]
 802e4ec:	681b      	ldr	r3, [r3, #0]
 802e4ee:	699a      	ldr	r2, [r3, #24]
 802e4f0:	687b      	ldr	r3, [r7, #4]
 802e4f2:	681b      	ldr	r3, [r3, #0]
 802e4f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802e4f8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 802e4fa:	69bb      	ldr	r3, [r7, #24]
 802e4fc:	f003 0320 	and.w	r3, r3, #32
 802e500:	2b00      	cmp	r3, #0
 802e502:	d00f      	beq.n	802e524 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 802e504:	687b      	ldr	r3, [r7, #4]
 802e506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e50a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 802e50e:	687b      	ldr	r3, [r7, #4]
 802e510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 802e514:	687b      	ldr	r3, [r7, #4]
 802e516:	681b      	ldr	r3, [r3, #0]
 802e518:	699a      	ldr	r2, [r3, #24]
 802e51a:	687b      	ldr	r3, [r7, #4]
 802e51c:	681b      	ldr	r3, [r3, #0]
 802e51e:	f042 0220 	orr.w	r2, r2, #32
 802e522:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802e524:	687b      	ldr	r3, [r7, #4]
 802e526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e52a:	2b00      	cmp	r3, #0
 802e52c:	d05a      	beq.n	802e5e4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 802e52e:	687b      	ldr	r3, [r7, #4]
 802e530:	681b      	ldr	r3, [r3, #0]
 802e532:	681a      	ldr	r2, [r3, #0]
 802e534:	687b      	ldr	r3, [r7, #4]
 802e536:	681b      	ldr	r3, [r3, #0]
 802e538:	f022 0201 	bic.w	r2, r2, #1
 802e53c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 802e53e:	687b      	ldr	r3, [r7, #4]
 802e540:	681b      	ldr	r3, [r3, #0]
 802e542:	6919      	ldr	r1, [r3, #16]
 802e544:	687b      	ldr	r3, [r7, #4]
 802e546:	681a      	ldr	r2, [r3, #0]
 802e548:	4b28      	ldr	r3, [pc, #160]	; (802e5ec <HAL_SPI_IRQHandler+0x394>)
 802e54a:	400b      	ands	r3, r1
 802e54c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 802e54e:	697b      	ldr	r3, [r7, #20]
 802e550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802e554:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 802e558:	d138      	bne.n	802e5cc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 802e55a:	687b      	ldr	r3, [r7, #4]
 802e55c:	681b      	ldr	r3, [r3, #0]
 802e55e:	689a      	ldr	r2, [r3, #8]
 802e560:	687b      	ldr	r3, [r7, #4]
 802e562:	681b      	ldr	r3, [r3, #0]
 802e564:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 802e568:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 802e56a:	687b      	ldr	r3, [r7, #4]
 802e56c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802e56e:	2b00      	cmp	r3, #0
 802e570:	d013      	beq.n	802e59a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802e572:	687b      	ldr	r3, [r7, #4]
 802e574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802e576:	4a1e      	ldr	r2, [pc, #120]	; (802e5f0 <HAL_SPI_IRQHandler+0x398>)
 802e578:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802e57a:	687b      	ldr	r3, [r7, #4]
 802e57c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 802e57e:	4618      	mov	r0, r3
 802e580:	f7fb ff82 	bl	802a488 <HAL_DMA_Abort_IT>
 802e584:	4603      	mov	r3, r0
 802e586:	2b00      	cmp	r3, #0
 802e588:	d007      	beq.n	802e59a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802e58a:	687b      	ldr	r3, [r7, #4]
 802e58c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e590:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802e594:	687b      	ldr	r3, [r7, #4]
 802e596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 802e59a:	687b      	ldr	r3, [r7, #4]
 802e59c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802e59e:	2b00      	cmp	r3, #0
 802e5a0:	d020      	beq.n	802e5e4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802e5a2:	687b      	ldr	r3, [r7, #4]
 802e5a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802e5a6:	4a12      	ldr	r2, [pc, #72]	; (802e5f0 <HAL_SPI_IRQHandler+0x398>)
 802e5a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 802e5aa:	687b      	ldr	r3, [r7, #4]
 802e5ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802e5ae:	4618      	mov	r0, r3
 802e5b0:	f7fb ff6a 	bl	802a488 <HAL_DMA_Abort_IT>
 802e5b4:	4603      	mov	r3, r0
 802e5b6:	2b00      	cmp	r3, #0
 802e5b8:	d014      	beq.n	802e5e4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802e5ba:	687b      	ldr	r3, [r7, #4]
 802e5bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e5c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802e5c4:	687b      	ldr	r3, [r7, #4]
 802e5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 802e5ca:	e00b      	b.n	802e5e4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 802e5cc:	687b      	ldr	r3, [r7, #4]
 802e5ce:	2201      	movs	r2, #1
 802e5d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 802e5d4:	6878      	ldr	r0, [r7, #4]
 802e5d6:	f000 f82b 	bl	802e630 <HAL_SPI_ErrorCallback>
    return;
 802e5da:	e003      	b.n	802e5e4 <HAL_SPI_IRQHandler+0x38c>
    return;
 802e5dc:	bf00      	nop
 802e5de:	e002      	b.n	802e5e6 <HAL_SPI_IRQHandler+0x38e>
    return;
 802e5e0:	bf00      	nop
 802e5e2:	e000      	b.n	802e5e6 <HAL_SPI_IRQHandler+0x38e>
    return;
 802e5e4:	bf00      	nop
  }
}
 802e5e6:	3728      	adds	r7, #40	; 0x28
 802e5e8:	46bd      	mov	sp, r7
 802e5ea:	bd80      	pop	{r7, pc}
 802e5ec:	fffffc94 	.word	0xfffffc94
 802e5f0:	0802e659 	.word	0x0802e659

0802e5f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802e5f4:	b480      	push	{r7}
 802e5f6:	b083      	sub	sp, #12
 802e5f8:	af00      	add	r7, sp, #0
 802e5fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 802e5fc:	bf00      	nop
 802e5fe:	370c      	adds	r7, #12
 802e600:	46bd      	mov	sp, r7
 802e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e606:	4770      	bx	lr

0802e608 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802e608:	b480      	push	{r7}
 802e60a:	b083      	sub	sp, #12
 802e60c:	af00      	add	r7, sp, #0
 802e60e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 802e610:	bf00      	nop
 802e612:	370c      	adds	r7, #12
 802e614:	46bd      	mov	sp, r7
 802e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e61a:	4770      	bx	lr

0802e61c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802e61c:	b480      	push	{r7}
 802e61e:	b083      	sub	sp, #12
 802e620:	af00      	add	r7, sp, #0
 802e622:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 802e624:	bf00      	nop
 802e626:	370c      	adds	r7, #12
 802e628:	46bd      	mov	sp, r7
 802e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e62e:	4770      	bx	lr

0802e630 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 802e630:	b480      	push	{r7}
 802e632:	b083      	sub	sp, #12
 802e634:	af00      	add	r7, sp, #0
 802e636:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 802e638:	bf00      	nop
 802e63a:	370c      	adds	r7, #12
 802e63c:	46bd      	mov	sp, r7
 802e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e642:	4770      	bx	lr

0802e644 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 802e644:	b480      	push	{r7}
 802e646:	b083      	sub	sp, #12
 802e648:	af00      	add	r7, sp, #0
 802e64a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 802e64c:	bf00      	nop
 802e64e:	370c      	adds	r7, #12
 802e650:	46bd      	mov	sp, r7
 802e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e656:	4770      	bx	lr

0802e658 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802e658:	b580      	push	{r7, lr}
 802e65a:	b084      	sub	sp, #16
 802e65c:	af00      	add	r7, sp, #0
 802e65e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802e660:	687b      	ldr	r3, [r7, #4]
 802e662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e664:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 802e666:	68fb      	ldr	r3, [r7, #12]
 802e668:	2200      	movs	r2, #0
 802e66a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 802e66e:	68fb      	ldr	r3, [r7, #12]
 802e670:	2200      	movs	r2, #0
 802e672:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 802e676:	68fb      	ldr	r3, [r7, #12]
 802e678:	2201      	movs	r2, #1
 802e67a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802e67e:	68f8      	ldr	r0, [r7, #12]
 802e680:	f7ff ffd6 	bl	802e630 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802e684:	bf00      	nop
 802e686:	3710      	adds	r7, #16
 802e688:	46bd      	mov	sp, r7
 802e68a:	bd80      	pop	{r7, pc}

0802e68c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 802e68c:	b480      	push	{r7}
 802e68e:	b085      	sub	sp, #20
 802e690:	af00      	add	r7, sp, #0
 802e692:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 802e694:	687b      	ldr	r3, [r7, #4]
 802e696:	681b      	ldr	r3, [r3, #0]
 802e698:	695b      	ldr	r3, [r3, #20]
 802e69a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 802e69c:	687b      	ldr	r3, [r7, #4]
 802e69e:	681b      	ldr	r3, [r3, #0]
 802e6a0:	699a      	ldr	r2, [r3, #24]
 802e6a2:	687b      	ldr	r3, [r7, #4]
 802e6a4:	681b      	ldr	r3, [r3, #0]
 802e6a6:	f042 0208 	orr.w	r2, r2, #8
 802e6aa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 802e6ac:	687b      	ldr	r3, [r7, #4]
 802e6ae:	681b      	ldr	r3, [r3, #0]
 802e6b0:	699a      	ldr	r2, [r3, #24]
 802e6b2:	687b      	ldr	r3, [r7, #4]
 802e6b4:	681b      	ldr	r3, [r3, #0]
 802e6b6:	f042 0210 	orr.w	r2, r2, #16
 802e6ba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802e6bc:	687b      	ldr	r3, [r7, #4]
 802e6be:	681b      	ldr	r3, [r3, #0]
 802e6c0:	681a      	ldr	r2, [r3, #0]
 802e6c2:	687b      	ldr	r3, [r7, #4]
 802e6c4:	681b      	ldr	r3, [r3, #0]
 802e6c6:	f022 0201 	bic.w	r2, r2, #1
 802e6ca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 802e6cc:	687b      	ldr	r3, [r7, #4]
 802e6ce:	681b      	ldr	r3, [r3, #0]
 802e6d0:	6919      	ldr	r1, [r3, #16]
 802e6d2:	687b      	ldr	r3, [r7, #4]
 802e6d4:	681a      	ldr	r2, [r3, #0]
 802e6d6:	4b3c      	ldr	r3, [pc, #240]	; (802e7c8 <SPI_CloseTransfer+0x13c>)
 802e6d8:	400b      	ands	r3, r1
 802e6da:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 802e6dc:	687b      	ldr	r3, [r7, #4]
 802e6de:	681b      	ldr	r3, [r3, #0]
 802e6e0:	689a      	ldr	r2, [r3, #8]
 802e6e2:	687b      	ldr	r3, [r7, #4]
 802e6e4:	681b      	ldr	r3, [r3, #0]
 802e6e6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 802e6ea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802e6ec:	687b      	ldr	r3, [r7, #4]
 802e6ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802e6f2:	b2db      	uxtb	r3, r3
 802e6f4:	2b04      	cmp	r3, #4
 802e6f6:	d014      	beq.n	802e722 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 802e6f8:	68fb      	ldr	r3, [r7, #12]
 802e6fa:	f003 0320 	and.w	r3, r3, #32
 802e6fe:	2b00      	cmp	r3, #0
 802e700:	d00f      	beq.n	802e722 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 802e702:	687b      	ldr	r3, [r7, #4]
 802e704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e708:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 802e70c:	687b      	ldr	r3, [r7, #4]
 802e70e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 802e712:	687b      	ldr	r3, [r7, #4]
 802e714:	681b      	ldr	r3, [r3, #0]
 802e716:	699a      	ldr	r2, [r3, #24]
 802e718:	687b      	ldr	r3, [r7, #4]
 802e71a:	681b      	ldr	r3, [r3, #0]
 802e71c:	f042 0220 	orr.w	r2, r2, #32
 802e720:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802e722:	687b      	ldr	r3, [r7, #4]
 802e724:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802e728:	b2db      	uxtb	r3, r3
 802e72a:	2b03      	cmp	r3, #3
 802e72c:	d014      	beq.n	802e758 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 802e72e:	68fb      	ldr	r3, [r7, #12]
 802e730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e734:	2b00      	cmp	r3, #0
 802e736:	d00f      	beq.n	802e758 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802e738:	687b      	ldr	r3, [r7, #4]
 802e73a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e73e:	f043 0204 	orr.w	r2, r3, #4
 802e742:	687b      	ldr	r3, [r7, #4]
 802e744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802e748:	687b      	ldr	r3, [r7, #4]
 802e74a:	681b      	ldr	r3, [r3, #0]
 802e74c:	699a      	ldr	r2, [r3, #24]
 802e74e:	687b      	ldr	r3, [r7, #4]
 802e750:	681b      	ldr	r3, [r3, #0]
 802e752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802e756:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 802e758:	68fb      	ldr	r3, [r7, #12]
 802e75a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802e75e:	2b00      	cmp	r3, #0
 802e760:	d00f      	beq.n	802e782 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802e762:	687b      	ldr	r3, [r7, #4]
 802e764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e768:	f043 0201 	orr.w	r2, r3, #1
 802e76c:	687b      	ldr	r3, [r7, #4]
 802e76e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802e772:	687b      	ldr	r3, [r7, #4]
 802e774:	681b      	ldr	r3, [r3, #0]
 802e776:	699a      	ldr	r2, [r3, #24]
 802e778:	687b      	ldr	r3, [r7, #4]
 802e77a:	681b      	ldr	r3, [r3, #0]
 802e77c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802e780:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 802e782:	68fb      	ldr	r3, [r7, #12]
 802e784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e788:	2b00      	cmp	r3, #0
 802e78a:	d00f      	beq.n	802e7ac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802e78c:	687b      	ldr	r3, [r7, #4]
 802e78e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802e792:	f043 0208 	orr.w	r2, r3, #8
 802e796:	687b      	ldr	r3, [r7, #4]
 802e798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 802e79c:	687b      	ldr	r3, [r7, #4]
 802e79e:	681b      	ldr	r3, [r3, #0]
 802e7a0:	699a      	ldr	r2, [r3, #24]
 802e7a2:	687b      	ldr	r3, [r7, #4]
 802e7a4:	681b      	ldr	r3, [r3, #0]
 802e7a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802e7aa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 802e7ac:	687b      	ldr	r3, [r7, #4]
 802e7ae:	2200      	movs	r2, #0
 802e7b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 802e7b4:	687b      	ldr	r3, [r7, #4]
 802e7b6:	2200      	movs	r2, #0
 802e7b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 802e7bc:	bf00      	nop
 802e7be:	3714      	adds	r7, #20
 802e7c0:	46bd      	mov	sp, r7
 802e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e7c6:	4770      	bx	lr
 802e7c8:	fffffc90 	.word	0xfffffc90

0802e7cc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 802e7cc:	b580      	push	{r7, lr}
 802e7ce:	b084      	sub	sp, #16
 802e7d0:	af00      	add	r7, sp, #0
 802e7d2:	60f8      	str	r0, [r7, #12]
 802e7d4:	60b9      	str	r1, [r7, #8]
 802e7d6:	603b      	str	r3, [r7, #0]
 802e7d8:	4613      	mov	r3, r2
 802e7da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 802e7dc:	e010      	b.n	802e800 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802e7de:	f7fb fc8b 	bl	802a0f8 <HAL_GetTick>
 802e7e2:	4602      	mov	r2, r0
 802e7e4:	69bb      	ldr	r3, [r7, #24]
 802e7e6:	1ad3      	subs	r3, r2, r3
 802e7e8:	683a      	ldr	r2, [r7, #0]
 802e7ea:	429a      	cmp	r2, r3
 802e7ec:	d803      	bhi.n	802e7f6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 802e7ee:	683b      	ldr	r3, [r7, #0]
 802e7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 802e7f4:	d102      	bne.n	802e7fc <SPI_WaitOnFlagUntilTimeout+0x30>
 802e7f6:	683b      	ldr	r3, [r7, #0]
 802e7f8:	2b00      	cmp	r3, #0
 802e7fa:	d101      	bne.n	802e800 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 802e7fc:	2303      	movs	r3, #3
 802e7fe:	e00f      	b.n	802e820 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 802e800:	68fb      	ldr	r3, [r7, #12]
 802e802:	681b      	ldr	r3, [r3, #0]
 802e804:	695a      	ldr	r2, [r3, #20]
 802e806:	68bb      	ldr	r3, [r7, #8]
 802e808:	4013      	ands	r3, r2
 802e80a:	68ba      	ldr	r2, [r7, #8]
 802e80c:	429a      	cmp	r2, r3
 802e80e:	bf0c      	ite	eq
 802e810:	2301      	moveq	r3, #1
 802e812:	2300      	movne	r3, #0
 802e814:	b2db      	uxtb	r3, r3
 802e816:	461a      	mov	r2, r3
 802e818:	79fb      	ldrb	r3, [r7, #7]
 802e81a:	429a      	cmp	r2, r3
 802e81c:	d0df      	beq.n	802e7de <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 802e81e:	2300      	movs	r3, #0
}
 802e820:	4618      	mov	r0, r3
 802e822:	3710      	adds	r7, #16
 802e824:	46bd      	mov	sp, r7
 802e826:	bd80      	pop	{r7, pc}

0802e828 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 802e828:	b480      	push	{r7}
 802e82a:	b085      	sub	sp, #20
 802e82c:	af00      	add	r7, sp, #0
 802e82e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 802e830:	687b      	ldr	r3, [r7, #4]
 802e832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802e834:	095b      	lsrs	r3, r3, #5
 802e836:	3301      	adds	r3, #1
 802e838:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 802e83a:	687b      	ldr	r3, [r7, #4]
 802e83c:	68db      	ldr	r3, [r3, #12]
 802e83e:	3301      	adds	r3, #1
 802e840:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 802e842:	68bb      	ldr	r3, [r7, #8]
 802e844:	3307      	adds	r3, #7
 802e846:	08db      	lsrs	r3, r3, #3
 802e848:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 802e84a:	68bb      	ldr	r3, [r7, #8]
 802e84c:	68fa      	ldr	r2, [r7, #12]
 802e84e:	fb02 f303 	mul.w	r3, r2, r3
}
 802e852:	4618      	mov	r0, r3
 802e854:	3714      	adds	r7, #20
 802e856:	46bd      	mov	sp, r7
 802e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e85c:	4770      	bx	lr
	...

0802e860 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 802e860:	b580      	push	{r7, lr}
 802e862:	b084      	sub	sp, #16
 802e864:	af00      	add	r7, sp, #0
 802e866:	60f8      	str	r0, [r7, #12]
 802e868:	60b9      	str	r1, [r7, #8]
 802e86a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 802e86c:	68fb      	ldr	r3, [r7, #12]
 802e86e:	2b00      	cmp	r3, #0
 802e870:	d101      	bne.n	802e876 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 802e872:	2301      	movs	r3, #1
 802e874:	e03e      	b.n	802e8f4 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 802e876:	68fb      	ldr	r3, [r7, #12]
 802e878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802e87c:	b2db      	uxtb	r3, r3
 802e87e:	2b00      	cmp	r3, #0
 802e880:	d106      	bne.n	802e890 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 802e882:	68fb      	ldr	r3, [r7, #12]
 802e884:	2200      	movs	r2, #0
 802e886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 802e88a:	68f8      	ldr	r0, [r7, #12]
 802e88c:	f7fb f972 	bl	8029b74 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 802e890:	68fb      	ldr	r3, [r7, #12]
 802e892:	681a      	ldr	r2, [r3, #0]
 802e894:	68fb      	ldr	r3, [r7, #12]
 802e896:	3308      	adds	r3, #8
 802e898:	4619      	mov	r1, r3
 802e89a:	4610      	mov	r0, r2
 802e89c:	f001 fca4 	bl	80301e8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 802e8a0:	68fb      	ldr	r3, [r7, #12]
 802e8a2:	6818      	ldr	r0, [r3, #0]
 802e8a4:	68fb      	ldr	r3, [r7, #12]
 802e8a6:	689b      	ldr	r3, [r3, #8]
 802e8a8:	461a      	mov	r2, r3
 802e8aa:	68b9      	ldr	r1, [r7, #8]
 802e8ac:	f001 fd2c 	bl	8030308 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 802e8b0:	68fb      	ldr	r3, [r7, #12]
 802e8b2:	6858      	ldr	r0, [r3, #4]
 802e8b4:	68fb      	ldr	r3, [r7, #12]
 802e8b6:	689a      	ldr	r2, [r3, #8]
 802e8b8:	68fb      	ldr	r3, [r7, #12]
 802e8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e8bc:	6879      	ldr	r1, [r7, #4]
 802e8be:	f001 fd73 	bl	80303a8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 802e8c2:	68fb      	ldr	r3, [r7, #12]
 802e8c4:	681b      	ldr	r3, [r3, #0]
 802e8c6:	68fa      	ldr	r2, [r7, #12]
 802e8c8:	6892      	ldr	r2, [r2, #8]
 802e8ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802e8ce:	68fb      	ldr	r3, [r7, #12]
 802e8d0:	681b      	ldr	r3, [r3, #0]
 802e8d2:	68fa      	ldr	r2, [r7, #12]
 802e8d4:	6892      	ldr	r2, [r2, #8]
 802e8d6:	f041 0101 	orr.w	r1, r1, #1
 802e8da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 802e8de:	4b07      	ldr	r3, [pc, #28]	; (802e8fc <HAL_SRAM_Init+0x9c>)
 802e8e0:	681b      	ldr	r3, [r3, #0]
 802e8e2:	4a06      	ldr	r2, [pc, #24]	; (802e8fc <HAL_SRAM_Init+0x9c>)
 802e8e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802e8e8:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 802e8ea:	68fb      	ldr	r3, [r7, #12]
 802e8ec:	2201      	movs	r2, #1
 802e8ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 802e8f2:	2300      	movs	r3, #0
}
 802e8f4:	4618      	mov	r0, r3
 802e8f6:	3710      	adds	r7, #16
 802e8f8:	46bd      	mov	sp, r7
 802e8fa:	bd80      	pop	{r7, pc}
 802e8fc:	52004000 	.word	0x52004000

0802e900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802e900:	b580      	push	{r7, lr}
 802e902:	b082      	sub	sp, #8
 802e904:	af00      	add	r7, sp, #0
 802e906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802e908:	687b      	ldr	r3, [r7, #4]
 802e90a:	2b00      	cmp	r3, #0
 802e90c:	d101      	bne.n	802e912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802e90e:	2301      	movs	r3, #1
 802e910:	e049      	b.n	802e9a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802e912:	687b      	ldr	r3, [r7, #4]
 802e914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802e918:	b2db      	uxtb	r3, r3
 802e91a:	2b00      	cmp	r3, #0
 802e91c:	d106      	bne.n	802e92c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802e91e:	687b      	ldr	r3, [r7, #4]
 802e920:	2200      	movs	r2, #0
 802e922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802e926:	6878      	ldr	r0, [r7, #4]
 802e928:	f7fa fe06 	bl	8029538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802e92c:	687b      	ldr	r3, [r7, #4]
 802e92e:	2202      	movs	r2, #2
 802e930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802e934:	687b      	ldr	r3, [r7, #4]
 802e936:	681a      	ldr	r2, [r3, #0]
 802e938:	687b      	ldr	r3, [r7, #4]
 802e93a:	3304      	adds	r3, #4
 802e93c:	4619      	mov	r1, r3
 802e93e:	4610      	mov	r0, r2
 802e940:	f000 f9f6 	bl	802ed30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802e944:	687b      	ldr	r3, [r7, #4]
 802e946:	2201      	movs	r2, #1
 802e948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802e94c:	687b      	ldr	r3, [r7, #4]
 802e94e:	2201      	movs	r2, #1
 802e950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802e954:	687b      	ldr	r3, [r7, #4]
 802e956:	2201      	movs	r2, #1
 802e958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 802e95c:	687b      	ldr	r3, [r7, #4]
 802e95e:	2201      	movs	r2, #1
 802e960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802e964:	687b      	ldr	r3, [r7, #4]
 802e966:	2201      	movs	r2, #1
 802e968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 802e96c:	687b      	ldr	r3, [r7, #4]
 802e96e:	2201      	movs	r2, #1
 802e970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802e974:	687b      	ldr	r3, [r7, #4]
 802e976:	2201      	movs	r2, #1
 802e978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802e97c:	687b      	ldr	r3, [r7, #4]
 802e97e:	2201      	movs	r2, #1
 802e980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802e984:	687b      	ldr	r3, [r7, #4]
 802e986:	2201      	movs	r2, #1
 802e988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802e98c:	687b      	ldr	r3, [r7, #4]
 802e98e:	2201      	movs	r2, #1
 802e990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 802e994:	687b      	ldr	r3, [r7, #4]
 802e996:	2201      	movs	r2, #1
 802e998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802e99c:	687b      	ldr	r3, [r7, #4]
 802e99e:	2201      	movs	r2, #1
 802e9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802e9a4:	2300      	movs	r3, #0
}
 802e9a6:	4618      	mov	r0, r3
 802e9a8:	3708      	adds	r7, #8
 802e9aa:	46bd      	mov	sp, r7
 802e9ac:	bd80      	pop	{r7, pc}
	...

0802e9b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 802e9b0:	b480      	push	{r7}
 802e9b2:	b085      	sub	sp, #20
 802e9b4:	af00      	add	r7, sp, #0
 802e9b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 802e9b8:	687b      	ldr	r3, [r7, #4]
 802e9ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802e9be:	b2db      	uxtb	r3, r3
 802e9c0:	2b01      	cmp	r3, #1
 802e9c2:	d001      	beq.n	802e9c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802e9c4:	2301      	movs	r3, #1
 802e9c6:	e054      	b.n	802ea72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802e9c8:	687b      	ldr	r3, [r7, #4]
 802e9ca:	2202      	movs	r2, #2
 802e9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802e9d0:	687b      	ldr	r3, [r7, #4]
 802e9d2:	681b      	ldr	r3, [r3, #0]
 802e9d4:	68da      	ldr	r2, [r3, #12]
 802e9d6:	687b      	ldr	r3, [r7, #4]
 802e9d8:	681b      	ldr	r3, [r3, #0]
 802e9da:	f042 0201 	orr.w	r2, r2, #1
 802e9de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802e9e0:	687b      	ldr	r3, [r7, #4]
 802e9e2:	681b      	ldr	r3, [r3, #0]
 802e9e4:	4a26      	ldr	r2, [pc, #152]	; (802ea80 <HAL_TIM_Base_Start_IT+0xd0>)
 802e9e6:	4293      	cmp	r3, r2
 802e9e8:	d022      	beq.n	802ea30 <HAL_TIM_Base_Start_IT+0x80>
 802e9ea:	687b      	ldr	r3, [r7, #4]
 802e9ec:	681b      	ldr	r3, [r3, #0]
 802e9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802e9f2:	d01d      	beq.n	802ea30 <HAL_TIM_Base_Start_IT+0x80>
 802e9f4:	687b      	ldr	r3, [r7, #4]
 802e9f6:	681b      	ldr	r3, [r3, #0]
 802e9f8:	4a22      	ldr	r2, [pc, #136]	; (802ea84 <HAL_TIM_Base_Start_IT+0xd4>)
 802e9fa:	4293      	cmp	r3, r2
 802e9fc:	d018      	beq.n	802ea30 <HAL_TIM_Base_Start_IT+0x80>
 802e9fe:	687b      	ldr	r3, [r7, #4]
 802ea00:	681b      	ldr	r3, [r3, #0]
 802ea02:	4a21      	ldr	r2, [pc, #132]	; (802ea88 <HAL_TIM_Base_Start_IT+0xd8>)
 802ea04:	4293      	cmp	r3, r2
 802ea06:	d013      	beq.n	802ea30 <HAL_TIM_Base_Start_IT+0x80>
 802ea08:	687b      	ldr	r3, [r7, #4]
 802ea0a:	681b      	ldr	r3, [r3, #0]
 802ea0c:	4a1f      	ldr	r2, [pc, #124]	; (802ea8c <HAL_TIM_Base_Start_IT+0xdc>)
 802ea0e:	4293      	cmp	r3, r2
 802ea10:	d00e      	beq.n	802ea30 <HAL_TIM_Base_Start_IT+0x80>
 802ea12:	687b      	ldr	r3, [r7, #4]
 802ea14:	681b      	ldr	r3, [r3, #0]
 802ea16:	4a1e      	ldr	r2, [pc, #120]	; (802ea90 <HAL_TIM_Base_Start_IT+0xe0>)
 802ea18:	4293      	cmp	r3, r2
 802ea1a:	d009      	beq.n	802ea30 <HAL_TIM_Base_Start_IT+0x80>
 802ea1c:	687b      	ldr	r3, [r7, #4]
 802ea1e:	681b      	ldr	r3, [r3, #0]
 802ea20:	4a1c      	ldr	r2, [pc, #112]	; (802ea94 <HAL_TIM_Base_Start_IT+0xe4>)
 802ea22:	4293      	cmp	r3, r2
 802ea24:	d004      	beq.n	802ea30 <HAL_TIM_Base_Start_IT+0x80>
 802ea26:	687b      	ldr	r3, [r7, #4]
 802ea28:	681b      	ldr	r3, [r3, #0]
 802ea2a:	4a1b      	ldr	r2, [pc, #108]	; (802ea98 <HAL_TIM_Base_Start_IT+0xe8>)
 802ea2c:	4293      	cmp	r3, r2
 802ea2e:	d115      	bne.n	802ea5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802ea30:	687b      	ldr	r3, [r7, #4]
 802ea32:	681b      	ldr	r3, [r3, #0]
 802ea34:	689a      	ldr	r2, [r3, #8]
 802ea36:	4b19      	ldr	r3, [pc, #100]	; (802ea9c <HAL_TIM_Base_Start_IT+0xec>)
 802ea38:	4013      	ands	r3, r2
 802ea3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802ea3c:	68fb      	ldr	r3, [r7, #12]
 802ea3e:	2b06      	cmp	r3, #6
 802ea40:	d015      	beq.n	802ea6e <HAL_TIM_Base_Start_IT+0xbe>
 802ea42:	68fb      	ldr	r3, [r7, #12]
 802ea44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802ea48:	d011      	beq.n	802ea6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 802ea4a:	687b      	ldr	r3, [r7, #4]
 802ea4c:	681b      	ldr	r3, [r3, #0]
 802ea4e:	681a      	ldr	r2, [r3, #0]
 802ea50:	687b      	ldr	r3, [r7, #4]
 802ea52:	681b      	ldr	r3, [r3, #0]
 802ea54:	f042 0201 	orr.w	r2, r2, #1
 802ea58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802ea5a:	e008      	b.n	802ea6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802ea5c:	687b      	ldr	r3, [r7, #4]
 802ea5e:	681b      	ldr	r3, [r3, #0]
 802ea60:	681a      	ldr	r2, [r3, #0]
 802ea62:	687b      	ldr	r3, [r7, #4]
 802ea64:	681b      	ldr	r3, [r3, #0]
 802ea66:	f042 0201 	orr.w	r2, r2, #1
 802ea6a:	601a      	str	r2, [r3, #0]
 802ea6c:	e000      	b.n	802ea70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802ea6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 802ea70:	2300      	movs	r3, #0
}
 802ea72:	4618      	mov	r0, r3
 802ea74:	3714      	adds	r7, #20
 802ea76:	46bd      	mov	sp, r7
 802ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ea7c:	4770      	bx	lr
 802ea7e:	bf00      	nop
 802ea80:	40010000 	.word	0x40010000
 802ea84:	40000400 	.word	0x40000400
 802ea88:	40000800 	.word	0x40000800
 802ea8c:	40000c00 	.word	0x40000c00
 802ea90:	40010400 	.word	0x40010400
 802ea94:	40001800 	.word	0x40001800
 802ea98:	40014000 	.word	0x40014000
 802ea9c:	00010007 	.word	0x00010007

0802eaa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802eaa0:	b580      	push	{r7, lr}
 802eaa2:	b082      	sub	sp, #8
 802eaa4:	af00      	add	r7, sp, #0
 802eaa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802eaa8:	687b      	ldr	r3, [r7, #4]
 802eaaa:	681b      	ldr	r3, [r3, #0]
 802eaac:	691b      	ldr	r3, [r3, #16]
 802eaae:	f003 0302 	and.w	r3, r3, #2
 802eab2:	2b02      	cmp	r3, #2
 802eab4:	d122      	bne.n	802eafc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802eab6:	687b      	ldr	r3, [r7, #4]
 802eab8:	681b      	ldr	r3, [r3, #0]
 802eaba:	68db      	ldr	r3, [r3, #12]
 802eabc:	f003 0302 	and.w	r3, r3, #2
 802eac0:	2b02      	cmp	r3, #2
 802eac2:	d11b      	bne.n	802eafc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802eac4:	687b      	ldr	r3, [r7, #4]
 802eac6:	681b      	ldr	r3, [r3, #0]
 802eac8:	f06f 0202 	mvn.w	r2, #2
 802eacc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802eace:	687b      	ldr	r3, [r7, #4]
 802ead0:	2201      	movs	r2, #1
 802ead2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802ead4:	687b      	ldr	r3, [r7, #4]
 802ead6:	681b      	ldr	r3, [r3, #0]
 802ead8:	699b      	ldr	r3, [r3, #24]
 802eada:	f003 0303 	and.w	r3, r3, #3
 802eade:	2b00      	cmp	r3, #0
 802eae0:	d003      	beq.n	802eaea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802eae2:	6878      	ldr	r0, [r7, #4]
 802eae4:	f000 f905 	bl	802ecf2 <HAL_TIM_IC_CaptureCallback>
 802eae8:	e005      	b.n	802eaf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802eaea:	6878      	ldr	r0, [r7, #4]
 802eaec:	f000 f8f7 	bl	802ecde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802eaf0:	6878      	ldr	r0, [r7, #4]
 802eaf2:	f000 f908 	bl	802ed06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802eaf6:	687b      	ldr	r3, [r7, #4]
 802eaf8:	2200      	movs	r2, #0
 802eafa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802eafc:	687b      	ldr	r3, [r7, #4]
 802eafe:	681b      	ldr	r3, [r3, #0]
 802eb00:	691b      	ldr	r3, [r3, #16]
 802eb02:	f003 0304 	and.w	r3, r3, #4
 802eb06:	2b04      	cmp	r3, #4
 802eb08:	d122      	bne.n	802eb50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802eb0a:	687b      	ldr	r3, [r7, #4]
 802eb0c:	681b      	ldr	r3, [r3, #0]
 802eb0e:	68db      	ldr	r3, [r3, #12]
 802eb10:	f003 0304 	and.w	r3, r3, #4
 802eb14:	2b04      	cmp	r3, #4
 802eb16:	d11b      	bne.n	802eb50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802eb18:	687b      	ldr	r3, [r7, #4]
 802eb1a:	681b      	ldr	r3, [r3, #0]
 802eb1c:	f06f 0204 	mvn.w	r2, #4
 802eb20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802eb22:	687b      	ldr	r3, [r7, #4]
 802eb24:	2202      	movs	r2, #2
 802eb26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802eb28:	687b      	ldr	r3, [r7, #4]
 802eb2a:	681b      	ldr	r3, [r3, #0]
 802eb2c:	699b      	ldr	r3, [r3, #24]
 802eb2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802eb32:	2b00      	cmp	r3, #0
 802eb34:	d003      	beq.n	802eb3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802eb36:	6878      	ldr	r0, [r7, #4]
 802eb38:	f000 f8db 	bl	802ecf2 <HAL_TIM_IC_CaptureCallback>
 802eb3c:	e005      	b.n	802eb4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802eb3e:	6878      	ldr	r0, [r7, #4]
 802eb40:	f000 f8cd 	bl	802ecde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802eb44:	6878      	ldr	r0, [r7, #4]
 802eb46:	f000 f8de 	bl	802ed06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802eb4a:	687b      	ldr	r3, [r7, #4]
 802eb4c:	2200      	movs	r2, #0
 802eb4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802eb50:	687b      	ldr	r3, [r7, #4]
 802eb52:	681b      	ldr	r3, [r3, #0]
 802eb54:	691b      	ldr	r3, [r3, #16]
 802eb56:	f003 0308 	and.w	r3, r3, #8
 802eb5a:	2b08      	cmp	r3, #8
 802eb5c:	d122      	bne.n	802eba4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802eb5e:	687b      	ldr	r3, [r7, #4]
 802eb60:	681b      	ldr	r3, [r3, #0]
 802eb62:	68db      	ldr	r3, [r3, #12]
 802eb64:	f003 0308 	and.w	r3, r3, #8
 802eb68:	2b08      	cmp	r3, #8
 802eb6a:	d11b      	bne.n	802eba4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802eb6c:	687b      	ldr	r3, [r7, #4]
 802eb6e:	681b      	ldr	r3, [r3, #0]
 802eb70:	f06f 0208 	mvn.w	r2, #8
 802eb74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802eb76:	687b      	ldr	r3, [r7, #4]
 802eb78:	2204      	movs	r2, #4
 802eb7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802eb7c:	687b      	ldr	r3, [r7, #4]
 802eb7e:	681b      	ldr	r3, [r3, #0]
 802eb80:	69db      	ldr	r3, [r3, #28]
 802eb82:	f003 0303 	and.w	r3, r3, #3
 802eb86:	2b00      	cmp	r3, #0
 802eb88:	d003      	beq.n	802eb92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802eb8a:	6878      	ldr	r0, [r7, #4]
 802eb8c:	f000 f8b1 	bl	802ecf2 <HAL_TIM_IC_CaptureCallback>
 802eb90:	e005      	b.n	802eb9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802eb92:	6878      	ldr	r0, [r7, #4]
 802eb94:	f000 f8a3 	bl	802ecde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802eb98:	6878      	ldr	r0, [r7, #4]
 802eb9a:	f000 f8b4 	bl	802ed06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802eb9e:	687b      	ldr	r3, [r7, #4]
 802eba0:	2200      	movs	r2, #0
 802eba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802eba4:	687b      	ldr	r3, [r7, #4]
 802eba6:	681b      	ldr	r3, [r3, #0]
 802eba8:	691b      	ldr	r3, [r3, #16]
 802ebaa:	f003 0310 	and.w	r3, r3, #16
 802ebae:	2b10      	cmp	r3, #16
 802ebb0:	d122      	bne.n	802ebf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802ebb2:	687b      	ldr	r3, [r7, #4]
 802ebb4:	681b      	ldr	r3, [r3, #0]
 802ebb6:	68db      	ldr	r3, [r3, #12]
 802ebb8:	f003 0310 	and.w	r3, r3, #16
 802ebbc:	2b10      	cmp	r3, #16
 802ebbe:	d11b      	bne.n	802ebf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802ebc0:	687b      	ldr	r3, [r7, #4]
 802ebc2:	681b      	ldr	r3, [r3, #0]
 802ebc4:	f06f 0210 	mvn.w	r2, #16
 802ebc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802ebca:	687b      	ldr	r3, [r7, #4]
 802ebcc:	2208      	movs	r2, #8
 802ebce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802ebd0:	687b      	ldr	r3, [r7, #4]
 802ebd2:	681b      	ldr	r3, [r3, #0]
 802ebd4:	69db      	ldr	r3, [r3, #28]
 802ebd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802ebda:	2b00      	cmp	r3, #0
 802ebdc:	d003      	beq.n	802ebe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802ebde:	6878      	ldr	r0, [r7, #4]
 802ebe0:	f000 f887 	bl	802ecf2 <HAL_TIM_IC_CaptureCallback>
 802ebe4:	e005      	b.n	802ebf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802ebe6:	6878      	ldr	r0, [r7, #4]
 802ebe8:	f000 f879 	bl	802ecde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802ebec:	6878      	ldr	r0, [r7, #4]
 802ebee:	f000 f88a 	bl	802ed06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802ebf2:	687b      	ldr	r3, [r7, #4]
 802ebf4:	2200      	movs	r2, #0
 802ebf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802ebf8:	687b      	ldr	r3, [r7, #4]
 802ebfa:	681b      	ldr	r3, [r3, #0]
 802ebfc:	691b      	ldr	r3, [r3, #16]
 802ebfe:	f003 0301 	and.w	r3, r3, #1
 802ec02:	2b01      	cmp	r3, #1
 802ec04:	d10e      	bne.n	802ec24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802ec06:	687b      	ldr	r3, [r7, #4]
 802ec08:	681b      	ldr	r3, [r3, #0]
 802ec0a:	68db      	ldr	r3, [r3, #12]
 802ec0c:	f003 0301 	and.w	r3, r3, #1
 802ec10:	2b01      	cmp	r3, #1
 802ec12:	d107      	bne.n	802ec24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802ec14:	687b      	ldr	r3, [r7, #4]
 802ec16:	681b      	ldr	r3, [r3, #0]
 802ec18:	f06f 0201 	mvn.w	r2, #1
 802ec1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802ec1e:	6878      	ldr	r0, [r7, #4]
 802ec20:	f7f7 fd44 	bl	80266ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802ec24:	687b      	ldr	r3, [r7, #4]
 802ec26:	681b      	ldr	r3, [r3, #0]
 802ec28:	691b      	ldr	r3, [r3, #16]
 802ec2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ec2e:	2b80      	cmp	r3, #128	; 0x80
 802ec30:	d10e      	bne.n	802ec50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802ec32:	687b      	ldr	r3, [r7, #4]
 802ec34:	681b      	ldr	r3, [r3, #0]
 802ec36:	68db      	ldr	r3, [r3, #12]
 802ec38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ec3c:	2b80      	cmp	r3, #128	; 0x80
 802ec3e:	d107      	bne.n	802ec50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802ec40:	687b      	ldr	r3, [r7, #4]
 802ec42:	681b      	ldr	r3, [r3, #0]
 802ec44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802ec48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802ec4a:	6878      	ldr	r0, [r7, #4]
 802ec4c:	f000 f9a2 	bl	802ef94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 802ec50:	687b      	ldr	r3, [r7, #4]
 802ec52:	681b      	ldr	r3, [r3, #0]
 802ec54:	691b      	ldr	r3, [r3, #16]
 802ec56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802ec5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802ec5e:	d10e      	bne.n	802ec7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802ec60:	687b      	ldr	r3, [r7, #4]
 802ec62:	681b      	ldr	r3, [r3, #0]
 802ec64:	68db      	ldr	r3, [r3, #12]
 802ec66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ec6a:	2b80      	cmp	r3, #128	; 0x80
 802ec6c:	d107      	bne.n	802ec7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 802ec6e:	687b      	ldr	r3, [r7, #4]
 802ec70:	681b      	ldr	r3, [r3, #0]
 802ec72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 802ec76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 802ec78:	6878      	ldr	r0, [r7, #4]
 802ec7a:	f000 f995 	bl	802efa8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802ec7e:	687b      	ldr	r3, [r7, #4]
 802ec80:	681b      	ldr	r3, [r3, #0]
 802ec82:	691b      	ldr	r3, [r3, #16]
 802ec84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ec88:	2b40      	cmp	r3, #64	; 0x40
 802ec8a:	d10e      	bne.n	802ecaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802ec8c:	687b      	ldr	r3, [r7, #4]
 802ec8e:	681b      	ldr	r3, [r3, #0]
 802ec90:	68db      	ldr	r3, [r3, #12]
 802ec92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ec96:	2b40      	cmp	r3, #64	; 0x40
 802ec98:	d107      	bne.n	802ecaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802ec9a:	687b      	ldr	r3, [r7, #4]
 802ec9c:	681b      	ldr	r3, [r3, #0]
 802ec9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802eca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802eca4:	6878      	ldr	r0, [r7, #4]
 802eca6:	f000 f838 	bl	802ed1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802ecaa:	687b      	ldr	r3, [r7, #4]
 802ecac:	681b      	ldr	r3, [r3, #0]
 802ecae:	691b      	ldr	r3, [r3, #16]
 802ecb0:	f003 0320 	and.w	r3, r3, #32
 802ecb4:	2b20      	cmp	r3, #32
 802ecb6:	d10e      	bne.n	802ecd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802ecb8:	687b      	ldr	r3, [r7, #4]
 802ecba:	681b      	ldr	r3, [r3, #0]
 802ecbc:	68db      	ldr	r3, [r3, #12]
 802ecbe:	f003 0320 	and.w	r3, r3, #32
 802ecc2:	2b20      	cmp	r3, #32
 802ecc4:	d107      	bne.n	802ecd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802ecc6:	687b      	ldr	r3, [r7, #4]
 802ecc8:	681b      	ldr	r3, [r3, #0]
 802ecca:	f06f 0220 	mvn.w	r2, #32
 802ecce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802ecd0:	6878      	ldr	r0, [r7, #4]
 802ecd2:	f000 f955 	bl	802ef80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802ecd6:	bf00      	nop
 802ecd8:	3708      	adds	r7, #8
 802ecda:	46bd      	mov	sp, r7
 802ecdc:	bd80      	pop	{r7, pc}

0802ecde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802ecde:	b480      	push	{r7}
 802ece0:	b083      	sub	sp, #12
 802ece2:	af00      	add	r7, sp, #0
 802ece4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802ece6:	bf00      	nop
 802ece8:	370c      	adds	r7, #12
 802ecea:	46bd      	mov	sp, r7
 802ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ecf0:	4770      	bx	lr

0802ecf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802ecf2:	b480      	push	{r7}
 802ecf4:	b083      	sub	sp, #12
 802ecf6:	af00      	add	r7, sp, #0
 802ecf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802ecfa:	bf00      	nop
 802ecfc:	370c      	adds	r7, #12
 802ecfe:	46bd      	mov	sp, r7
 802ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed04:	4770      	bx	lr

0802ed06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802ed06:	b480      	push	{r7}
 802ed08:	b083      	sub	sp, #12
 802ed0a:	af00      	add	r7, sp, #0
 802ed0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802ed0e:	bf00      	nop
 802ed10:	370c      	adds	r7, #12
 802ed12:	46bd      	mov	sp, r7
 802ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed18:	4770      	bx	lr

0802ed1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802ed1a:	b480      	push	{r7}
 802ed1c:	b083      	sub	sp, #12
 802ed1e:	af00      	add	r7, sp, #0
 802ed20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802ed22:	bf00      	nop
 802ed24:	370c      	adds	r7, #12
 802ed26:	46bd      	mov	sp, r7
 802ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed2c:	4770      	bx	lr
	...

0802ed30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 802ed30:	b480      	push	{r7}
 802ed32:	b085      	sub	sp, #20
 802ed34:	af00      	add	r7, sp, #0
 802ed36:	6078      	str	r0, [r7, #4]
 802ed38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802ed3a:	687b      	ldr	r3, [r7, #4]
 802ed3c:	681b      	ldr	r3, [r3, #0]
 802ed3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802ed40:	687b      	ldr	r3, [r7, #4]
 802ed42:	4a40      	ldr	r2, [pc, #256]	; (802ee44 <TIM_Base_SetConfig+0x114>)
 802ed44:	4293      	cmp	r3, r2
 802ed46:	d013      	beq.n	802ed70 <TIM_Base_SetConfig+0x40>
 802ed48:	687b      	ldr	r3, [r7, #4]
 802ed4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802ed4e:	d00f      	beq.n	802ed70 <TIM_Base_SetConfig+0x40>
 802ed50:	687b      	ldr	r3, [r7, #4]
 802ed52:	4a3d      	ldr	r2, [pc, #244]	; (802ee48 <TIM_Base_SetConfig+0x118>)
 802ed54:	4293      	cmp	r3, r2
 802ed56:	d00b      	beq.n	802ed70 <TIM_Base_SetConfig+0x40>
 802ed58:	687b      	ldr	r3, [r7, #4]
 802ed5a:	4a3c      	ldr	r2, [pc, #240]	; (802ee4c <TIM_Base_SetConfig+0x11c>)
 802ed5c:	4293      	cmp	r3, r2
 802ed5e:	d007      	beq.n	802ed70 <TIM_Base_SetConfig+0x40>
 802ed60:	687b      	ldr	r3, [r7, #4]
 802ed62:	4a3b      	ldr	r2, [pc, #236]	; (802ee50 <TIM_Base_SetConfig+0x120>)
 802ed64:	4293      	cmp	r3, r2
 802ed66:	d003      	beq.n	802ed70 <TIM_Base_SetConfig+0x40>
 802ed68:	687b      	ldr	r3, [r7, #4]
 802ed6a:	4a3a      	ldr	r2, [pc, #232]	; (802ee54 <TIM_Base_SetConfig+0x124>)
 802ed6c:	4293      	cmp	r3, r2
 802ed6e:	d108      	bne.n	802ed82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802ed70:	68fb      	ldr	r3, [r7, #12]
 802ed72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802ed76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802ed78:	683b      	ldr	r3, [r7, #0]
 802ed7a:	685b      	ldr	r3, [r3, #4]
 802ed7c:	68fa      	ldr	r2, [r7, #12]
 802ed7e:	4313      	orrs	r3, r2
 802ed80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802ed82:	687b      	ldr	r3, [r7, #4]
 802ed84:	4a2f      	ldr	r2, [pc, #188]	; (802ee44 <TIM_Base_SetConfig+0x114>)
 802ed86:	4293      	cmp	r3, r2
 802ed88:	d01f      	beq.n	802edca <TIM_Base_SetConfig+0x9a>
 802ed8a:	687b      	ldr	r3, [r7, #4]
 802ed8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802ed90:	d01b      	beq.n	802edca <TIM_Base_SetConfig+0x9a>
 802ed92:	687b      	ldr	r3, [r7, #4]
 802ed94:	4a2c      	ldr	r2, [pc, #176]	; (802ee48 <TIM_Base_SetConfig+0x118>)
 802ed96:	4293      	cmp	r3, r2
 802ed98:	d017      	beq.n	802edca <TIM_Base_SetConfig+0x9a>
 802ed9a:	687b      	ldr	r3, [r7, #4]
 802ed9c:	4a2b      	ldr	r2, [pc, #172]	; (802ee4c <TIM_Base_SetConfig+0x11c>)
 802ed9e:	4293      	cmp	r3, r2
 802eda0:	d013      	beq.n	802edca <TIM_Base_SetConfig+0x9a>
 802eda2:	687b      	ldr	r3, [r7, #4]
 802eda4:	4a2a      	ldr	r2, [pc, #168]	; (802ee50 <TIM_Base_SetConfig+0x120>)
 802eda6:	4293      	cmp	r3, r2
 802eda8:	d00f      	beq.n	802edca <TIM_Base_SetConfig+0x9a>
 802edaa:	687b      	ldr	r3, [r7, #4]
 802edac:	4a29      	ldr	r2, [pc, #164]	; (802ee54 <TIM_Base_SetConfig+0x124>)
 802edae:	4293      	cmp	r3, r2
 802edb0:	d00b      	beq.n	802edca <TIM_Base_SetConfig+0x9a>
 802edb2:	687b      	ldr	r3, [r7, #4]
 802edb4:	4a28      	ldr	r2, [pc, #160]	; (802ee58 <TIM_Base_SetConfig+0x128>)
 802edb6:	4293      	cmp	r3, r2
 802edb8:	d007      	beq.n	802edca <TIM_Base_SetConfig+0x9a>
 802edba:	687b      	ldr	r3, [r7, #4]
 802edbc:	4a27      	ldr	r2, [pc, #156]	; (802ee5c <TIM_Base_SetConfig+0x12c>)
 802edbe:	4293      	cmp	r3, r2
 802edc0:	d003      	beq.n	802edca <TIM_Base_SetConfig+0x9a>
 802edc2:	687b      	ldr	r3, [r7, #4]
 802edc4:	4a26      	ldr	r2, [pc, #152]	; (802ee60 <TIM_Base_SetConfig+0x130>)
 802edc6:	4293      	cmp	r3, r2
 802edc8:	d108      	bne.n	802eddc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802edca:	68fb      	ldr	r3, [r7, #12]
 802edcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802edd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802edd2:	683b      	ldr	r3, [r7, #0]
 802edd4:	68db      	ldr	r3, [r3, #12]
 802edd6:	68fa      	ldr	r2, [r7, #12]
 802edd8:	4313      	orrs	r3, r2
 802edda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802eddc:	68fb      	ldr	r3, [r7, #12]
 802edde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802ede2:	683b      	ldr	r3, [r7, #0]
 802ede4:	695b      	ldr	r3, [r3, #20]
 802ede6:	4313      	orrs	r3, r2
 802ede8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802edea:	687b      	ldr	r3, [r7, #4]
 802edec:	68fa      	ldr	r2, [r7, #12]
 802edee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802edf0:	683b      	ldr	r3, [r7, #0]
 802edf2:	689a      	ldr	r2, [r3, #8]
 802edf4:	687b      	ldr	r3, [r7, #4]
 802edf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802edf8:	683b      	ldr	r3, [r7, #0]
 802edfa:	681a      	ldr	r2, [r3, #0]
 802edfc:	687b      	ldr	r3, [r7, #4]
 802edfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802ee00:	687b      	ldr	r3, [r7, #4]
 802ee02:	4a10      	ldr	r2, [pc, #64]	; (802ee44 <TIM_Base_SetConfig+0x114>)
 802ee04:	4293      	cmp	r3, r2
 802ee06:	d00f      	beq.n	802ee28 <TIM_Base_SetConfig+0xf8>
 802ee08:	687b      	ldr	r3, [r7, #4]
 802ee0a:	4a12      	ldr	r2, [pc, #72]	; (802ee54 <TIM_Base_SetConfig+0x124>)
 802ee0c:	4293      	cmp	r3, r2
 802ee0e:	d00b      	beq.n	802ee28 <TIM_Base_SetConfig+0xf8>
 802ee10:	687b      	ldr	r3, [r7, #4]
 802ee12:	4a11      	ldr	r2, [pc, #68]	; (802ee58 <TIM_Base_SetConfig+0x128>)
 802ee14:	4293      	cmp	r3, r2
 802ee16:	d007      	beq.n	802ee28 <TIM_Base_SetConfig+0xf8>
 802ee18:	687b      	ldr	r3, [r7, #4]
 802ee1a:	4a10      	ldr	r2, [pc, #64]	; (802ee5c <TIM_Base_SetConfig+0x12c>)
 802ee1c:	4293      	cmp	r3, r2
 802ee1e:	d003      	beq.n	802ee28 <TIM_Base_SetConfig+0xf8>
 802ee20:	687b      	ldr	r3, [r7, #4]
 802ee22:	4a0f      	ldr	r2, [pc, #60]	; (802ee60 <TIM_Base_SetConfig+0x130>)
 802ee24:	4293      	cmp	r3, r2
 802ee26:	d103      	bne.n	802ee30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802ee28:	683b      	ldr	r3, [r7, #0]
 802ee2a:	691a      	ldr	r2, [r3, #16]
 802ee2c:	687b      	ldr	r3, [r7, #4]
 802ee2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802ee30:	687b      	ldr	r3, [r7, #4]
 802ee32:	2201      	movs	r2, #1
 802ee34:	615a      	str	r2, [r3, #20]
}
 802ee36:	bf00      	nop
 802ee38:	3714      	adds	r7, #20
 802ee3a:	46bd      	mov	sp, r7
 802ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ee40:	4770      	bx	lr
 802ee42:	bf00      	nop
 802ee44:	40010000 	.word	0x40010000
 802ee48:	40000400 	.word	0x40000400
 802ee4c:	40000800 	.word	0x40000800
 802ee50:	40000c00 	.word	0x40000c00
 802ee54:	40010400 	.word	0x40010400
 802ee58:	40014000 	.word	0x40014000
 802ee5c:	40014400 	.word	0x40014400
 802ee60:	40014800 	.word	0x40014800

0802ee64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 802ee64:	b480      	push	{r7}
 802ee66:	b085      	sub	sp, #20
 802ee68:	af00      	add	r7, sp, #0
 802ee6a:	6078      	str	r0, [r7, #4]
 802ee6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802ee6e:	687b      	ldr	r3, [r7, #4]
 802ee70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802ee74:	2b01      	cmp	r3, #1
 802ee76:	d101      	bne.n	802ee7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802ee78:	2302      	movs	r3, #2
 802ee7a:	e06d      	b.n	802ef58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 802ee7c:	687b      	ldr	r3, [r7, #4]
 802ee7e:	2201      	movs	r2, #1
 802ee80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802ee84:	687b      	ldr	r3, [r7, #4]
 802ee86:	2202      	movs	r2, #2
 802ee88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802ee8c:	687b      	ldr	r3, [r7, #4]
 802ee8e:	681b      	ldr	r3, [r3, #0]
 802ee90:	685b      	ldr	r3, [r3, #4]
 802ee92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802ee94:	687b      	ldr	r3, [r7, #4]
 802ee96:	681b      	ldr	r3, [r3, #0]
 802ee98:	689b      	ldr	r3, [r3, #8]
 802ee9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 802ee9c:	687b      	ldr	r3, [r7, #4]
 802ee9e:	681b      	ldr	r3, [r3, #0]
 802eea0:	4a30      	ldr	r2, [pc, #192]	; (802ef64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802eea2:	4293      	cmp	r3, r2
 802eea4:	d004      	beq.n	802eeb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802eea6:	687b      	ldr	r3, [r7, #4]
 802eea8:	681b      	ldr	r3, [r3, #0]
 802eeaa:	4a2f      	ldr	r2, [pc, #188]	; (802ef68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802eeac:	4293      	cmp	r3, r2
 802eeae:	d108      	bne.n	802eec2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 802eeb0:	68fb      	ldr	r3, [r7, #12]
 802eeb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802eeb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 802eeb8:	683b      	ldr	r3, [r7, #0]
 802eeba:	685b      	ldr	r3, [r3, #4]
 802eebc:	68fa      	ldr	r2, [r7, #12]
 802eebe:	4313      	orrs	r3, r2
 802eec0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802eec2:	68fb      	ldr	r3, [r7, #12]
 802eec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802eec8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802eeca:	683b      	ldr	r3, [r7, #0]
 802eecc:	681b      	ldr	r3, [r3, #0]
 802eece:	68fa      	ldr	r2, [r7, #12]
 802eed0:	4313      	orrs	r3, r2
 802eed2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802eed4:	687b      	ldr	r3, [r7, #4]
 802eed6:	681b      	ldr	r3, [r3, #0]
 802eed8:	68fa      	ldr	r2, [r7, #12]
 802eeda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802eedc:	687b      	ldr	r3, [r7, #4]
 802eede:	681b      	ldr	r3, [r3, #0]
 802eee0:	4a20      	ldr	r2, [pc, #128]	; (802ef64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802eee2:	4293      	cmp	r3, r2
 802eee4:	d022      	beq.n	802ef2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802eee6:	687b      	ldr	r3, [r7, #4]
 802eee8:	681b      	ldr	r3, [r3, #0]
 802eeea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802eeee:	d01d      	beq.n	802ef2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802eef0:	687b      	ldr	r3, [r7, #4]
 802eef2:	681b      	ldr	r3, [r3, #0]
 802eef4:	4a1d      	ldr	r2, [pc, #116]	; (802ef6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802eef6:	4293      	cmp	r3, r2
 802eef8:	d018      	beq.n	802ef2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802eefa:	687b      	ldr	r3, [r7, #4]
 802eefc:	681b      	ldr	r3, [r3, #0]
 802eefe:	4a1c      	ldr	r2, [pc, #112]	; (802ef70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 802ef00:	4293      	cmp	r3, r2
 802ef02:	d013      	beq.n	802ef2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802ef04:	687b      	ldr	r3, [r7, #4]
 802ef06:	681b      	ldr	r3, [r3, #0]
 802ef08:	4a1a      	ldr	r2, [pc, #104]	; (802ef74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 802ef0a:	4293      	cmp	r3, r2
 802ef0c:	d00e      	beq.n	802ef2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802ef0e:	687b      	ldr	r3, [r7, #4]
 802ef10:	681b      	ldr	r3, [r3, #0]
 802ef12:	4a15      	ldr	r2, [pc, #84]	; (802ef68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802ef14:	4293      	cmp	r3, r2
 802ef16:	d009      	beq.n	802ef2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802ef18:	687b      	ldr	r3, [r7, #4]
 802ef1a:	681b      	ldr	r3, [r3, #0]
 802ef1c:	4a16      	ldr	r2, [pc, #88]	; (802ef78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 802ef1e:	4293      	cmp	r3, r2
 802ef20:	d004      	beq.n	802ef2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802ef22:	687b      	ldr	r3, [r7, #4]
 802ef24:	681b      	ldr	r3, [r3, #0]
 802ef26:	4a15      	ldr	r2, [pc, #84]	; (802ef7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 802ef28:	4293      	cmp	r3, r2
 802ef2a:	d10c      	bne.n	802ef46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802ef2c:	68bb      	ldr	r3, [r7, #8]
 802ef2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802ef32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802ef34:	683b      	ldr	r3, [r7, #0]
 802ef36:	689b      	ldr	r3, [r3, #8]
 802ef38:	68ba      	ldr	r2, [r7, #8]
 802ef3a:	4313      	orrs	r3, r2
 802ef3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802ef3e:	687b      	ldr	r3, [r7, #4]
 802ef40:	681b      	ldr	r3, [r3, #0]
 802ef42:	68ba      	ldr	r2, [r7, #8]
 802ef44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802ef46:	687b      	ldr	r3, [r7, #4]
 802ef48:	2201      	movs	r2, #1
 802ef4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802ef4e:	687b      	ldr	r3, [r7, #4]
 802ef50:	2200      	movs	r2, #0
 802ef52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802ef56:	2300      	movs	r3, #0
}
 802ef58:	4618      	mov	r0, r3
 802ef5a:	3714      	adds	r7, #20
 802ef5c:	46bd      	mov	sp, r7
 802ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef62:	4770      	bx	lr
 802ef64:	40010000 	.word	0x40010000
 802ef68:	40010400 	.word	0x40010400
 802ef6c:	40000400 	.word	0x40000400
 802ef70:	40000800 	.word	0x40000800
 802ef74:	40000c00 	.word	0x40000c00
 802ef78:	40001800 	.word	0x40001800
 802ef7c:	40014000 	.word	0x40014000

0802ef80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802ef80:	b480      	push	{r7}
 802ef82:	b083      	sub	sp, #12
 802ef84:	af00      	add	r7, sp, #0
 802ef86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802ef88:	bf00      	nop
 802ef8a:	370c      	adds	r7, #12
 802ef8c:	46bd      	mov	sp, r7
 802ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef92:	4770      	bx	lr

0802ef94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802ef94:	b480      	push	{r7}
 802ef96:	b083      	sub	sp, #12
 802ef98:	af00      	add	r7, sp, #0
 802ef9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802ef9c:	bf00      	nop
 802ef9e:	370c      	adds	r7, #12
 802efa0:	46bd      	mov	sp, r7
 802efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802efa6:	4770      	bx	lr

0802efa8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 802efa8:	b480      	push	{r7}
 802efaa:	b083      	sub	sp, #12
 802efac:	af00      	add	r7, sp, #0
 802efae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 802efb0:	bf00      	nop
 802efb2:	370c      	adds	r7, #12
 802efb4:	46bd      	mov	sp, r7
 802efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802efba:	4770      	bx	lr

0802efbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802efbc:	b580      	push	{r7, lr}
 802efbe:	b082      	sub	sp, #8
 802efc0:	af00      	add	r7, sp, #0
 802efc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802efc4:	687b      	ldr	r3, [r7, #4]
 802efc6:	2b00      	cmp	r3, #0
 802efc8:	d101      	bne.n	802efce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802efca:	2301      	movs	r3, #1
 802efcc:	e042      	b.n	802f054 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802efce:	687b      	ldr	r3, [r7, #4]
 802efd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802efd4:	2b00      	cmp	r3, #0
 802efd6:	d106      	bne.n	802efe6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802efd8:	687b      	ldr	r3, [r7, #4]
 802efda:	2200      	movs	r2, #0
 802efdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802efe0:	6878      	ldr	r0, [r7, #4]
 802efe2:	f7fa fad1 	bl	8029588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802efe6:	687b      	ldr	r3, [r7, #4]
 802efe8:	2224      	movs	r2, #36	; 0x24
 802efea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 802efee:	687b      	ldr	r3, [r7, #4]
 802eff0:	681b      	ldr	r3, [r3, #0]
 802eff2:	681a      	ldr	r2, [r3, #0]
 802eff4:	687b      	ldr	r3, [r7, #4]
 802eff6:	681b      	ldr	r3, [r3, #0]
 802eff8:	f022 0201 	bic.w	r2, r2, #1
 802effc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 802effe:	6878      	ldr	r0, [r7, #4]
 802f000:	f000 f86c 	bl	802f0dc <UART_SetConfig>
 802f004:	4603      	mov	r3, r0
 802f006:	2b01      	cmp	r3, #1
 802f008:	d101      	bne.n	802f00e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 802f00a:	2301      	movs	r3, #1
 802f00c:	e022      	b.n	802f054 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802f00e:	687b      	ldr	r3, [r7, #4]
 802f010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f012:	2b00      	cmp	r3, #0
 802f014:	d002      	beq.n	802f01c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 802f016:	6878      	ldr	r0, [r7, #4]
 802f018:	f000 fdc8 	bl	802fbac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802f01c:	687b      	ldr	r3, [r7, #4]
 802f01e:	681b      	ldr	r3, [r3, #0]
 802f020:	685a      	ldr	r2, [r3, #4]
 802f022:	687b      	ldr	r3, [r7, #4]
 802f024:	681b      	ldr	r3, [r3, #0]
 802f026:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802f02a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802f02c:	687b      	ldr	r3, [r7, #4]
 802f02e:	681b      	ldr	r3, [r3, #0]
 802f030:	689a      	ldr	r2, [r3, #8]
 802f032:	687b      	ldr	r3, [r7, #4]
 802f034:	681b      	ldr	r3, [r3, #0]
 802f036:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802f03a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 802f03c:	687b      	ldr	r3, [r7, #4]
 802f03e:	681b      	ldr	r3, [r3, #0]
 802f040:	681a      	ldr	r2, [r3, #0]
 802f042:	687b      	ldr	r3, [r7, #4]
 802f044:	681b      	ldr	r3, [r3, #0]
 802f046:	f042 0201 	orr.w	r2, r2, #1
 802f04a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 802f04c:	6878      	ldr	r0, [r7, #4]
 802f04e:	f000 fe4f 	bl	802fcf0 <UART_CheckIdleState>
 802f052:	4603      	mov	r3, r0
}
 802f054:	4618      	mov	r0, r3
 802f056:	3708      	adds	r7, #8
 802f058:	46bd      	mov	sp, r7
 802f05a:	bd80      	pop	{r7, pc}

0802f05c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 802f05c:	b580      	push	{r7, lr}
 802f05e:	b082      	sub	sp, #8
 802f060:	af00      	add	r7, sp, #0
 802f062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802f064:	687b      	ldr	r3, [r7, #4]
 802f066:	2b00      	cmp	r3, #0
 802f068:	d101      	bne.n	802f06e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 802f06a:	2301      	movs	r3, #1
 802f06c:	e031      	b.n	802f0d2 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 802f06e:	687b      	ldr	r3, [r7, #4]
 802f070:	2224      	movs	r2, #36	; 0x24
 802f072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 802f076:	687b      	ldr	r3, [r7, #4]
 802f078:	681b      	ldr	r3, [r3, #0]
 802f07a:	681a      	ldr	r2, [r3, #0]
 802f07c:	687b      	ldr	r3, [r7, #4]
 802f07e:	681b      	ldr	r3, [r3, #0]
 802f080:	f022 0201 	bic.w	r2, r2, #1
 802f084:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 802f086:	687b      	ldr	r3, [r7, #4]
 802f088:	681b      	ldr	r3, [r3, #0]
 802f08a:	2200      	movs	r2, #0
 802f08c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 802f08e:	687b      	ldr	r3, [r7, #4]
 802f090:	681b      	ldr	r3, [r3, #0]
 802f092:	2200      	movs	r2, #0
 802f094:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 802f096:	687b      	ldr	r3, [r7, #4]
 802f098:	681b      	ldr	r3, [r3, #0]
 802f09a:	2200      	movs	r2, #0
 802f09c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 802f09e:	6878      	ldr	r0, [r7, #4]
 802f0a0:	f7fa fc38 	bl	8029914 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802f0a4:	687b      	ldr	r3, [r7, #4]
 802f0a6:	2200      	movs	r2, #0
 802f0a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 802f0ac:	687b      	ldr	r3, [r7, #4]
 802f0ae:	2200      	movs	r2, #0
 802f0b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 802f0b4:	687b      	ldr	r3, [r7, #4]
 802f0b6:	2200      	movs	r2, #0
 802f0b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802f0bc:	687b      	ldr	r3, [r7, #4]
 802f0be:	2200      	movs	r2, #0
 802f0c0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802f0c2:	687b      	ldr	r3, [r7, #4]
 802f0c4:	2200      	movs	r2, #0
 802f0c6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 802f0c8:	687b      	ldr	r3, [r7, #4]
 802f0ca:	2200      	movs	r2, #0
 802f0cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802f0d0:	2300      	movs	r3, #0
}
 802f0d2:	4618      	mov	r0, r3
 802f0d4:	3708      	adds	r7, #8
 802f0d6:	46bd      	mov	sp, r7
 802f0d8:	bd80      	pop	{r7, pc}
	...

0802f0dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 802f0dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802f0e0:	b092      	sub	sp, #72	; 0x48
 802f0e2:	af00      	add	r7, sp, #0
 802f0e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 802f0e6:	2300      	movs	r3, #0
 802f0e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802f0ec:	697b      	ldr	r3, [r7, #20]
 802f0ee:	689a      	ldr	r2, [r3, #8]
 802f0f0:	697b      	ldr	r3, [r7, #20]
 802f0f2:	691b      	ldr	r3, [r3, #16]
 802f0f4:	431a      	orrs	r2, r3
 802f0f6:	697b      	ldr	r3, [r7, #20]
 802f0f8:	695b      	ldr	r3, [r3, #20]
 802f0fa:	431a      	orrs	r2, r3
 802f0fc:	697b      	ldr	r3, [r7, #20]
 802f0fe:	69db      	ldr	r3, [r3, #28]
 802f100:	4313      	orrs	r3, r2
 802f102:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802f104:	697b      	ldr	r3, [r7, #20]
 802f106:	681b      	ldr	r3, [r3, #0]
 802f108:	681a      	ldr	r2, [r3, #0]
 802f10a:	4bbe      	ldr	r3, [pc, #760]	; (802f404 <UART_SetConfig+0x328>)
 802f10c:	4013      	ands	r3, r2
 802f10e:	697a      	ldr	r2, [r7, #20]
 802f110:	6812      	ldr	r2, [r2, #0]
 802f112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802f114:	430b      	orrs	r3, r1
 802f116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802f118:	697b      	ldr	r3, [r7, #20]
 802f11a:	681b      	ldr	r3, [r3, #0]
 802f11c:	685b      	ldr	r3, [r3, #4]
 802f11e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802f122:	697b      	ldr	r3, [r7, #20]
 802f124:	68da      	ldr	r2, [r3, #12]
 802f126:	697b      	ldr	r3, [r7, #20]
 802f128:	681b      	ldr	r3, [r3, #0]
 802f12a:	430a      	orrs	r2, r1
 802f12c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802f12e:	697b      	ldr	r3, [r7, #20]
 802f130:	699b      	ldr	r3, [r3, #24]
 802f132:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802f134:	697b      	ldr	r3, [r7, #20]
 802f136:	681b      	ldr	r3, [r3, #0]
 802f138:	4ab3      	ldr	r2, [pc, #716]	; (802f408 <UART_SetConfig+0x32c>)
 802f13a:	4293      	cmp	r3, r2
 802f13c:	d004      	beq.n	802f148 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802f13e:	697b      	ldr	r3, [r7, #20]
 802f140:	6a1b      	ldr	r3, [r3, #32]
 802f142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802f144:	4313      	orrs	r3, r2
 802f146:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802f148:	697b      	ldr	r3, [r7, #20]
 802f14a:	681b      	ldr	r3, [r3, #0]
 802f14c:	689a      	ldr	r2, [r3, #8]
 802f14e:	4baf      	ldr	r3, [pc, #700]	; (802f40c <UART_SetConfig+0x330>)
 802f150:	4013      	ands	r3, r2
 802f152:	697a      	ldr	r2, [r7, #20]
 802f154:	6812      	ldr	r2, [r2, #0]
 802f156:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802f158:	430b      	orrs	r3, r1
 802f15a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 802f15c:	697b      	ldr	r3, [r7, #20]
 802f15e:	681b      	ldr	r3, [r3, #0]
 802f160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f162:	f023 010f 	bic.w	r1, r3, #15
 802f166:	697b      	ldr	r3, [r7, #20]
 802f168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802f16a:	697b      	ldr	r3, [r7, #20]
 802f16c:	681b      	ldr	r3, [r3, #0]
 802f16e:	430a      	orrs	r2, r1
 802f170:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802f172:	697b      	ldr	r3, [r7, #20]
 802f174:	681b      	ldr	r3, [r3, #0]
 802f176:	4aa6      	ldr	r2, [pc, #664]	; (802f410 <UART_SetConfig+0x334>)
 802f178:	4293      	cmp	r3, r2
 802f17a:	d177      	bne.n	802f26c <UART_SetConfig+0x190>
 802f17c:	4ba5      	ldr	r3, [pc, #660]	; (802f414 <UART_SetConfig+0x338>)
 802f17e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802f184:	2b28      	cmp	r3, #40	; 0x28
 802f186:	d86d      	bhi.n	802f264 <UART_SetConfig+0x188>
 802f188:	a201      	add	r2, pc, #4	; (adr r2, 802f190 <UART_SetConfig+0xb4>)
 802f18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f18e:	bf00      	nop
 802f190:	0802f235 	.word	0x0802f235
 802f194:	0802f265 	.word	0x0802f265
 802f198:	0802f265 	.word	0x0802f265
 802f19c:	0802f265 	.word	0x0802f265
 802f1a0:	0802f265 	.word	0x0802f265
 802f1a4:	0802f265 	.word	0x0802f265
 802f1a8:	0802f265 	.word	0x0802f265
 802f1ac:	0802f265 	.word	0x0802f265
 802f1b0:	0802f23d 	.word	0x0802f23d
 802f1b4:	0802f265 	.word	0x0802f265
 802f1b8:	0802f265 	.word	0x0802f265
 802f1bc:	0802f265 	.word	0x0802f265
 802f1c0:	0802f265 	.word	0x0802f265
 802f1c4:	0802f265 	.word	0x0802f265
 802f1c8:	0802f265 	.word	0x0802f265
 802f1cc:	0802f265 	.word	0x0802f265
 802f1d0:	0802f245 	.word	0x0802f245
 802f1d4:	0802f265 	.word	0x0802f265
 802f1d8:	0802f265 	.word	0x0802f265
 802f1dc:	0802f265 	.word	0x0802f265
 802f1e0:	0802f265 	.word	0x0802f265
 802f1e4:	0802f265 	.word	0x0802f265
 802f1e8:	0802f265 	.word	0x0802f265
 802f1ec:	0802f265 	.word	0x0802f265
 802f1f0:	0802f24d 	.word	0x0802f24d
 802f1f4:	0802f265 	.word	0x0802f265
 802f1f8:	0802f265 	.word	0x0802f265
 802f1fc:	0802f265 	.word	0x0802f265
 802f200:	0802f265 	.word	0x0802f265
 802f204:	0802f265 	.word	0x0802f265
 802f208:	0802f265 	.word	0x0802f265
 802f20c:	0802f265 	.word	0x0802f265
 802f210:	0802f255 	.word	0x0802f255
 802f214:	0802f265 	.word	0x0802f265
 802f218:	0802f265 	.word	0x0802f265
 802f21c:	0802f265 	.word	0x0802f265
 802f220:	0802f265 	.word	0x0802f265
 802f224:	0802f265 	.word	0x0802f265
 802f228:	0802f265 	.word	0x0802f265
 802f22c:	0802f265 	.word	0x0802f265
 802f230:	0802f25d 	.word	0x0802f25d
 802f234:	2301      	movs	r3, #1
 802f236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f23a:	e222      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f23c:	2304      	movs	r3, #4
 802f23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f242:	e21e      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f244:	2308      	movs	r3, #8
 802f246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f24a:	e21a      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f24c:	2310      	movs	r3, #16
 802f24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f252:	e216      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f254:	2320      	movs	r3, #32
 802f256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f25a:	e212      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f25c:	2340      	movs	r3, #64	; 0x40
 802f25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f262:	e20e      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f264:	2380      	movs	r3, #128	; 0x80
 802f266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f26a:	e20a      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f26c:	697b      	ldr	r3, [r7, #20]
 802f26e:	681b      	ldr	r3, [r3, #0]
 802f270:	4a69      	ldr	r2, [pc, #420]	; (802f418 <UART_SetConfig+0x33c>)
 802f272:	4293      	cmp	r3, r2
 802f274:	d130      	bne.n	802f2d8 <UART_SetConfig+0x1fc>
 802f276:	4b67      	ldr	r3, [pc, #412]	; (802f414 <UART_SetConfig+0x338>)
 802f278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f27a:	f003 0307 	and.w	r3, r3, #7
 802f27e:	2b05      	cmp	r3, #5
 802f280:	d826      	bhi.n	802f2d0 <UART_SetConfig+0x1f4>
 802f282:	a201      	add	r2, pc, #4	; (adr r2, 802f288 <UART_SetConfig+0x1ac>)
 802f284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f288:	0802f2a1 	.word	0x0802f2a1
 802f28c:	0802f2a9 	.word	0x0802f2a9
 802f290:	0802f2b1 	.word	0x0802f2b1
 802f294:	0802f2b9 	.word	0x0802f2b9
 802f298:	0802f2c1 	.word	0x0802f2c1
 802f29c:	0802f2c9 	.word	0x0802f2c9
 802f2a0:	2300      	movs	r3, #0
 802f2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f2a6:	e1ec      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f2a8:	2304      	movs	r3, #4
 802f2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f2ae:	e1e8      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f2b0:	2308      	movs	r3, #8
 802f2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f2b6:	e1e4      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f2b8:	2310      	movs	r3, #16
 802f2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f2be:	e1e0      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f2c0:	2320      	movs	r3, #32
 802f2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f2c6:	e1dc      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f2c8:	2340      	movs	r3, #64	; 0x40
 802f2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f2ce:	e1d8      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f2d0:	2380      	movs	r3, #128	; 0x80
 802f2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f2d6:	e1d4      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f2d8:	697b      	ldr	r3, [r7, #20]
 802f2da:	681b      	ldr	r3, [r3, #0]
 802f2dc:	4a4f      	ldr	r2, [pc, #316]	; (802f41c <UART_SetConfig+0x340>)
 802f2de:	4293      	cmp	r3, r2
 802f2e0:	d130      	bne.n	802f344 <UART_SetConfig+0x268>
 802f2e2:	4b4c      	ldr	r3, [pc, #304]	; (802f414 <UART_SetConfig+0x338>)
 802f2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f2e6:	f003 0307 	and.w	r3, r3, #7
 802f2ea:	2b05      	cmp	r3, #5
 802f2ec:	d826      	bhi.n	802f33c <UART_SetConfig+0x260>
 802f2ee:	a201      	add	r2, pc, #4	; (adr r2, 802f2f4 <UART_SetConfig+0x218>)
 802f2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f2f4:	0802f30d 	.word	0x0802f30d
 802f2f8:	0802f315 	.word	0x0802f315
 802f2fc:	0802f31d 	.word	0x0802f31d
 802f300:	0802f325 	.word	0x0802f325
 802f304:	0802f32d 	.word	0x0802f32d
 802f308:	0802f335 	.word	0x0802f335
 802f30c:	2300      	movs	r3, #0
 802f30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f312:	e1b6      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f314:	2304      	movs	r3, #4
 802f316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f31a:	e1b2      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f31c:	2308      	movs	r3, #8
 802f31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f322:	e1ae      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f324:	2310      	movs	r3, #16
 802f326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f32a:	e1aa      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f32c:	2320      	movs	r3, #32
 802f32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f332:	e1a6      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f334:	2340      	movs	r3, #64	; 0x40
 802f336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f33a:	e1a2      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f33c:	2380      	movs	r3, #128	; 0x80
 802f33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f342:	e19e      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f344:	697b      	ldr	r3, [r7, #20]
 802f346:	681b      	ldr	r3, [r3, #0]
 802f348:	4a35      	ldr	r2, [pc, #212]	; (802f420 <UART_SetConfig+0x344>)
 802f34a:	4293      	cmp	r3, r2
 802f34c:	d130      	bne.n	802f3b0 <UART_SetConfig+0x2d4>
 802f34e:	4b31      	ldr	r3, [pc, #196]	; (802f414 <UART_SetConfig+0x338>)
 802f350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f352:	f003 0307 	and.w	r3, r3, #7
 802f356:	2b05      	cmp	r3, #5
 802f358:	d826      	bhi.n	802f3a8 <UART_SetConfig+0x2cc>
 802f35a:	a201      	add	r2, pc, #4	; (adr r2, 802f360 <UART_SetConfig+0x284>)
 802f35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f360:	0802f379 	.word	0x0802f379
 802f364:	0802f381 	.word	0x0802f381
 802f368:	0802f389 	.word	0x0802f389
 802f36c:	0802f391 	.word	0x0802f391
 802f370:	0802f399 	.word	0x0802f399
 802f374:	0802f3a1 	.word	0x0802f3a1
 802f378:	2300      	movs	r3, #0
 802f37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f37e:	e180      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f380:	2304      	movs	r3, #4
 802f382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f386:	e17c      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f388:	2308      	movs	r3, #8
 802f38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f38e:	e178      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f390:	2310      	movs	r3, #16
 802f392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f396:	e174      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f398:	2320      	movs	r3, #32
 802f39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f39e:	e170      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f3a0:	2340      	movs	r3, #64	; 0x40
 802f3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f3a6:	e16c      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f3a8:	2380      	movs	r3, #128	; 0x80
 802f3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f3ae:	e168      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f3b0:	697b      	ldr	r3, [r7, #20]
 802f3b2:	681b      	ldr	r3, [r3, #0]
 802f3b4:	4a1b      	ldr	r2, [pc, #108]	; (802f424 <UART_SetConfig+0x348>)
 802f3b6:	4293      	cmp	r3, r2
 802f3b8:	d142      	bne.n	802f440 <UART_SetConfig+0x364>
 802f3ba:	4b16      	ldr	r3, [pc, #88]	; (802f414 <UART_SetConfig+0x338>)
 802f3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f3be:	f003 0307 	and.w	r3, r3, #7
 802f3c2:	2b05      	cmp	r3, #5
 802f3c4:	d838      	bhi.n	802f438 <UART_SetConfig+0x35c>
 802f3c6:	a201      	add	r2, pc, #4	; (adr r2, 802f3cc <UART_SetConfig+0x2f0>)
 802f3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f3cc:	0802f3e5 	.word	0x0802f3e5
 802f3d0:	0802f3ed 	.word	0x0802f3ed
 802f3d4:	0802f3f5 	.word	0x0802f3f5
 802f3d8:	0802f3fd 	.word	0x0802f3fd
 802f3dc:	0802f429 	.word	0x0802f429
 802f3e0:	0802f431 	.word	0x0802f431
 802f3e4:	2300      	movs	r3, #0
 802f3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f3ea:	e14a      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f3ec:	2304      	movs	r3, #4
 802f3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f3f2:	e146      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f3f4:	2308      	movs	r3, #8
 802f3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f3fa:	e142      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f3fc:	2310      	movs	r3, #16
 802f3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f402:	e13e      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f404:	cfff69f3 	.word	0xcfff69f3
 802f408:	58000c00 	.word	0x58000c00
 802f40c:	11fff4ff 	.word	0x11fff4ff
 802f410:	40011000 	.word	0x40011000
 802f414:	58024400 	.word	0x58024400
 802f418:	40004400 	.word	0x40004400
 802f41c:	40004800 	.word	0x40004800
 802f420:	40004c00 	.word	0x40004c00
 802f424:	40005000 	.word	0x40005000
 802f428:	2320      	movs	r3, #32
 802f42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f42e:	e128      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f430:	2340      	movs	r3, #64	; 0x40
 802f432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f436:	e124      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f438:	2380      	movs	r3, #128	; 0x80
 802f43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f43e:	e120      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f440:	697b      	ldr	r3, [r7, #20]
 802f442:	681b      	ldr	r3, [r3, #0]
 802f444:	4acb      	ldr	r2, [pc, #812]	; (802f774 <UART_SetConfig+0x698>)
 802f446:	4293      	cmp	r3, r2
 802f448:	d176      	bne.n	802f538 <UART_SetConfig+0x45c>
 802f44a:	4bcb      	ldr	r3, [pc, #812]	; (802f778 <UART_SetConfig+0x69c>)
 802f44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f44e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802f452:	2b28      	cmp	r3, #40	; 0x28
 802f454:	d86c      	bhi.n	802f530 <UART_SetConfig+0x454>
 802f456:	a201      	add	r2, pc, #4	; (adr r2, 802f45c <UART_SetConfig+0x380>)
 802f458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f45c:	0802f501 	.word	0x0802f501
 802f460:	0802f531 	.word	0x0802f531
 802f464:	0802f531 	.word	0x0802f531
 802f468:	0802f531 	.word	0x0802f531
 802f46c:	0802f531 	.word	0x0802f531
 802f470:	0802f531 	.word	0x0802f531
 802f474:	0802f531 	.word	0x0802f531
 802f478:	0802f531 	.word	0x0802f531
 802f47c:	0802f509 	.word	0x0802f509
 802f480:	0802f531 	.word	0x0802f531
 802f484:	0802f531 	.word	0x0802f531
 802f488:	0802f531 	.word	0x0802f531
 802f48c:	0802f531 	.word	0x0802f531
 802f490:	0802f531 	.word	0x0802f531
 802f494:	0802f531 	.word	0x0802f531
 802f498:	0802f531 	.word	0x0802f531
 802f49c:	0802f511 	.word	0x0802f511
 802f4a0:	0802f531 	.word	0x0802f531
 802f4a4:	0802f531 	.word	0x0802f531
 802f4a8:	0802f531 	.word	0x0802f531
 802f4ac:	0802f531 	.word	0x0802f531
 802f4b0:	0802f531 	.word	0x0802f531
 802f4b4:	0802f531 	.word	0x0802f531
 802f4b8:	0802f531 	.word	0x0802f531
 802f4bc:	0802f519 	.word	0x0802f519
 802f4c0:	0802f531 	.word	0x0802f531
 802f4c4:	0802f531 	.word	0x0802f531
 802f4c8:	0802f531 	.word	0x0802f531
 802f4cc:	0802f531 	.word	0x0802f531
 802f4d0:	0802f531 	.word	0x0802f531
 802f4d4:	0802f531 	.word	0x0802f531
 802f4d8:	0802f531 	.word	0x0802f531
 802f4dc:	0802f521 	.word	0x0802f521
 802f4e0:	0802f531 	.word	0x0802f531
 802f4e4:	0802f531 	.word	0x0802f531
 802f4e8:	0802f531 	.word	0x0802f531
 802f4ec:	0802f531 	.word	0x0802f531
 802f4f0:	0802f531 	.word	0x0802f531
 802f4f4:	0802f531 	.word	0x0802f531
 802f4f8:	0802f531 	.word	0x0802f531
 802f4fc:	0802f529 	.word	0x0802f529
 802f500:	2301      	movs	r3, #1
 802f502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f506:	e0bc      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f508:	2304      	movs	r3, #4
 802f50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f50e:	e0b8      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f510:	2308      	movs	r3, #8
 802f512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f516:	e0b4      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f518:	2310      	movs	r3, #16
 802f51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f51e:	e0b0      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f520:	2320      	movs	r3, #32
 802f522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f526:	e0ac      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f528:	2340      	movs	r3, #64	; 0x40
 802f52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f52e:	e0a8      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f530:	2380      	movs	r3, #128	; 0x80
 802f532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f536:	e0a4      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f538:	697b      	ldr	r3, [r7, #20]
 802f53a:	681b      	ldr	r3, [r3, #0]
 802f53c:	4a8f      	ldr	r2, [pc, #572]	; (802f77c <UART_SetConfig+0x6a0>)
 802f53e:	4293      	cmp	r3, r2
 802f540:	d130      	bne.n	802f5a4 <UART_SetConfig+0x4c8>
 802f542:	4b8d      	ldr	r3, [pc, #564]	; (802f778 <UART_SetConfig+0x69c>)
 802f544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f546:	f003 0307 	and.w	r3, r3, #7
 802f54a:	2b05      	cmp	r3, #5
 802f54c:	d826      	bhi.n	802f59c <UART_SetConfig+0x4c0>
 802f54e:	a201      	add	r2, pc, #4	; (adr r2, 802f554 <UART_SetConfig+0x478>)
 802f550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f554:	0802f56d 	.word	0x0802f56d
 802f558:	0802f575 	.word	0x0802f575
 802f55c:	0802f57d 	.word	0x0802f57d
 802f560:	0802f585 	.word	0x0802f585
 802f564:	0802f58d 	.word	0x0802f58d
 802f568:	0802f595 	.word	0x0802f595
 802f56c:	2300      	movs	r3, #0
 802f56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f572:	e086      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f574:	2304      	movs	r3, #4
 802f576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f57a:	e082      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f57c:	2308      	movs	r3, #8
 802f57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f582:	e07e      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f584:	2310      	movs	r3, #16
 802f586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f58a:	e07a      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f58c:	2320      	movs	r3, #32
 802f58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f592:	e076      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f594:	2340      	movs	r3, #64	; 0x40
 802f596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f59a:	e072      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f59c:	2380      	movs	r3, #128	; 0x80
 802f59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f5a2:	e06e      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f5a4:	697b      	ldr	r3, [r7, #20]
 802f5a6:	681b      	ldr	r3, [r3, #0]
 802f5a8:	4a75      	ldr	r2, [pc, #468]	; (802f780 <UART_SetConfig+0x6a4>)
 802f5aa:	4293      	cmp	r3, r2
 802f5ac:	d130      	bne.n	802f610 <UART_SetConfig+0x534>
 802f5ae:	4b72      	ldr	r3, [pc, #456]	; (802f778 <UART_SetConfig+0x69c>)
 802f5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802f5b2:	f003 0307 	and.w	r3, r3, #7
 802f5b6:	2b05      	cmp	r3, #5
 802f5b8:	d826      	bhi.n	802f608 <UART_SetConfig+0x52c>
 802f5ba:	a201      	add	r2, pc, #4	; (adr r2, 802f5c0 <UART_SetConfig+0x4e4>)
 802f5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f5c0:	0802f5d9 	.word	0x0802f5d9
 802f5c4:	0802f5e1 	.word	0x0802f5e1
 802f5c8:	0802f5e9 	.word	0x0802f5e9
 802f5cc:	0802f5f1 	.word	0x0802f5f1
 802f5d0:	0802f5f9 	.word	0x0802f5f9
 802f5d4:	0802f601 	.word	0x0802f601
 802f5d8:	2300      	movs	r3, #0
 802f5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f5de:	e050      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f5e0:	2304      	movs	r3, #4
 802f5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f5e6:	e04c      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f5e8:	2308      	movs	r3, #8
 802f5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f5ee:	e048      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f5f0:	2310      	movs	r3, #16
 802f5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f5f6:	e044      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f5f8:	2320      	movs	r3, #32
 802f5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f5fe:	e040      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f600:	2340      	movs	r3, #64	; 0x40
 802f602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f606:	e03c      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f608:	2380      	movs	r3, #128	; 0x80
 802f60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f60e:	e038      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f610:	697b      	ldr	r3, [r7, #20]
 802f612:	681b      	ldr	r3, [r3, #0]
 802f614:	4a5b      	ldr	r2, [pc, #364]	; (802f784 <UART_SetConfig+0x6a8>)
 802f616:	4293      	cmp	r3, r2
 802f618:	d130      	bne.n	802f67c <UART_SetConfig+0x5a0>
 802f61a:	4b57      	ldr	r3, [pc, #348]	; (802f778 <UART_SetConfig+0x69c>)
 802f61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f61e:	f003 0307 	and.w	r3, r3, #7
 802f622:	2b05      	cmp	r3, #5
 802f624:	d826      	bhi.n	802f674 <UART_SetConfig+0x598>
 802f626:	a201      	add	r2, pc, #4	; (adr r2, 802f62c <UART_SetConfig+0x550>)
 802f628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f62c:	0802f645 	.word	0x0802f645
 802f630:	0802f64d 	.word	0x0802f64d
 802f634:	0802f655 	.word	0x0802f655
 802f638:	0802f65d 	.word	0x0802f65d
 802f63c:	0802f665 	.word	0x0802f665
 802f640:	0802f66d 	.word	0x0802f66d
 802f644:	2302      	movs	r3, #2
 802f646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f64a:	e01a      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f64c:	2304      	movs	r3, #4
 802f64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f652:	e016      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f654:	2308      	movs	r3, #8
 802f656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f65a:	e012      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f65c:	2310      	movs	r3, #16
 802f65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f662:	e00e      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f664:	2320      	movs	r3, #32
 802f666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f66a:	e00a      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f66c:	2340      	movs	r3, #64	; 0x40
 802f66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f672:	e006      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f674:	2380      	movs	r3, #128	; 0x80
 802f676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 802f67a:	e002      	b.n	802f682 <UART_SetConfig+0x5a6>
 802f67c:	2380      	movs	r3, #128	; 0x80
 802f67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802f682:	697b      	ldr	r3, [r7, #20]
 802f684:	681b      	ldr	r3, [r3, #0]
 802f686:	4a3f      	ldr	r2, [pc, #252]	; (802f784 <UART_SetConfig+0x6a8>)
 802f688:	4293      	cmp	r3, r2
 802f68a:	f040 80f8 	bne.w	802f87e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802f68e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802f692:	2b20      	cmp	r3, #32
 802f694:	dc46      	bgt.n	802f724 <UART_SetConfig+0x648>
 802f696:	2b02      	cmp	r3, #2
 802f698:	f2c0 8082 	blt.w	802f7a0 <UART_SetConfig+0x6c4>
 802f69c:	3b02      	subs	r3, #2
 802f69e:	2b1e      	cmp	r3, #30
 802f6a0:	d87e      	bhi.n	802f7a0 <UART_SetConfig+0x6c4>
 802f6a2:	a201      	add	r2, pc, #4	; (adr r2, 802f6a8 <UART_SetConfig+0x5cc>)
 802f6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f6a8:	0802f72b 	.word	0x0802f72b
 802f6ac:	0802f7a1 	.word	0x0802f7a1
 802f6b0:	0802f733 	.word	0x0802f733
 802f6b4:	0802f7a1 	.word	0x0802f7a1
 802f6b8:	0802f7a1 	.word	0x0802f7a1
 802f6bc:	0802f7a1 	.word	0x0802f7a1
 802f6c0:	0802f743 	.word	0x0802f743
 802f6c4:	0802f7a1 	.word	0x0802f7a1
 802f6c8:	0802f7a1 	.word	0x0802f7a1
 802f6cc:	0802f7a1 	.word	0x0802f7a1
 802f6d0:	0802f7a1 	.word	0x0802f7a1
 802f6d4:	0802f7a1 	.word	0x0802f7a1
 802f6d8:	0802f7a1 	.word	0x0802f7a1
 802f6dc:	0802f7a1 	.word	0x0802f7a1
 802f6e0:	0802f753 	.word	0x0802f753
 802f6e4:	0802f7a1 	.word	0x0802f7a1
 802f6e8:	0802f7a1 	.word	0x0802f7a1
 802f6ec:	0802f7a1 	.word	0x0802f7a1
 802f6f0:	0802f7a1 	.word	0x0802f7a1
 802f6f4:	0802f7a1 	.word	0x0802f7a1
 802f6f8:	0802f7a1 	.word	0x0802f7a1
 802f6fc:	0802f7a1 	.word	0x0802f7a1
 802f700:	0802f7a1 	.word	0x0802f7a1
 802f704:	0802f7a1 	.word	0x0802f7a1
 802f708:	0802f7a1 	.word	0x0802f7a1
 802f70c:	0802f7a1 	.word	0x0802f7a1
 802f710:	0802f7a1 	.word	0x0802f7a1
 802f714:	0802f7a1 	.word	0x0802f7a1
 802f718:	0802f7a1 	.word	0x0802f7a1
 802f71c:	0802f7a1 	.word	0x0802f7a1
 802f720:	0802f793 	.word	0x0802f793
 802f724:	2b40      	cmp	r3, #64	; 0x40
 802f726:	d037      	beq.n	802f798 <UART_SetConfig+0x6bc>
 802f728:	e03a      	b.n	802f7a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 802f72a:	f7fd fe33 	bl	802d394 <HAL_RCCEx_GetD3PCLK1Freq>
 802f72e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802f730:	e03c      	b.n	802f7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802f732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802f736:	4618      	mov	r0, r3
 802f738:	f7fd fe42 	bl	802d3c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802f73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802f740:	e034      	b.n	802f7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802f742:	f107 0318 	add.w	r3, r7, #24
 802f746:	4618      	mov	r0, r3
 802f748:	f7fd ff8e 	bl	802d668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802f74c:	69fb      	ldr	r3, [r7, #28]
 802f74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802f750:	e02c      	b.n	802f7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802f752:	4b09      	ldr	r3, [pc, #36]	; (802f778 <UART_SetConfig+0x69c>)
 802f754:	681b      	ldr	r3, [r3, #0]
 802f756:	f003 0320 	and.w	r3, r3, #32
 802f75a:	2b00      	cmp	r3, #0
 802f75c:	d016      	beq.n	802f78c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802f75e:	4b06      	ldr	r3, [pc, #24]	; (802f778 <UART_SetConfig+0x69c>)
 802f760:	681b      	ldr	r3, [r3, #0]
 802f762:	08db      	lsrs	r3, r3, #3
 802f764:	f003 0303 	and.w	r3, r3, #3
 802f768:	4a07      	ldr	r2, [pc, #28]	; (802f788 <UART_SetConfig+0x6ac>)
 802f76a:	fa22 f303 	lsr.w	r3, r2, r3
 802f76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802f770:	e01c      	b.n	802f7ac <UART_SetConfig+0x6d0>
 802f772:	bf00      	nop
 802f774:	40011400 	.word	0x40011400
 802f778:	58024400 	.word	0x58024400
 802f77c:	40007800 	.word	0x40007800
 802f780:	40007c00 	.word	0x40007c00
 802f784:	58000c00 	.word	0x58000c00
 802f788:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 802f78c:	4b9d      	ldr	r3, [pc, #628]	; (802fa04 <UART_SetConfig+0x928>)
 802f78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802f790:	e00c      	b.n	802f7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802f792:	4b9d      	ldr	r3, [pc, #628]	; (802fa08 <UART_SetConfig+0x92c>)
 802f794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802f796:	e009      	b.n	802f7ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802f798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802f79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802f79e:	e005      	b.n	802f7ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 802f7a0:	2300      	movs	r3, #0
 802f7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802f7a4:	2301      	movs	r3, #1
 802f7a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802f7aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 802f7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f7ae:	2b00      	cmp	r3, #0
 802f7b0:	f000 81de 	beq.w	802fb70 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 802f7b4:	697b      	ldr	r3, [r7, #20]
 802f7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f7b8:	4a94      	ldr	r2, [pc, #592]	; (802fa0c <UART_SetConfig+0x930>)
 802f7ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802f7be:	461a      	mov	r2, r3
 802f7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f7c2:	fbb3 f3f2 	udiv	r3, r3, r2
 802f7c6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802f7c8:	697b      	ldr	r3, [r7, #20]
 802f7ca:	685a      	ldr	r2, [r3, #4]
 802f7cc:	4613      	mov	r3, r2
 802f7ce:	005b      	lsls	r3, r3, #1
 802f7d0:	4413      	add	r3, r2
 802f7d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802f7d4:	429a      	cmp	r2, r3
 802f7d6:	d305      	bcc.n	802f7e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 802f7d8:	697b      	ldr	r3, [r7, #20]
 802f7da:	685b      	ldr	r3, [r3, #4]
 802f7dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802f7de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802f7e0:	429a      	cmp	r2, r3
 802f7e2:	d903      	bls.n	802f7ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 802f7e4:	2301      	movs	r3, #1
 802f7e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802f7ea:	e1c1      	b.n	802fb70 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802f7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f7ee:	2200      	movs	r2, #0
 802f7f0:	60bb      	str	r3, [r7, #8]
 802f7f2:	60fa      	str	r2, [r7, #12]
 802f7f4:	697b      	ldr	r3, [r7, #20]
 802f7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f7f8:	4a84      	ldr	r2, [pc, #528]	; (802fa0c <UART_SetConfig+0x930>)
 802f7fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802f7fe:	b29b      	uxth	r3, r3
 802f800:	2200      	movs	r2, #0
 802f802:	603b      	str	r3, [r7, #0]
 802f804:	607a      	str	r2, [r7, #4]
 802f806:	e9d7 2300 	ldrd	r2, r3, [r7]
 802f80a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802f80e:	f7f0 fdb7 	bl	8020380 <__aeabi_uldivmod>
 802f812:	4602      	mov	r2, r0
 802f814:	460b      	mov	r3, r1
 802f816:	4610      	mov	r0, r2
 802f818:	4619      	mov	r1, r3
 802f81a:	f04f 0200 	mov.w	r2, #0
 802f81e:	f04f 0300 	mov.w	r3, #0
 802f822:	020b      	lsls	r3, r1, #8
 802f824:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802f828:	0202      	lsls	r2, r0, #8
 802f82a:	6979      	ldr	r1, [r7, #20]
 802f82c:	6849      	ldr	r1, [r1, #4]
 802f82e:	0849      	lsrs	r1, r1, #1
 802f830:	2000      	movs	r0, #0
 802f832:	460c      	mov	r4, r1
 802f834:	4605      	mov	r5, r0
 802f836:	eb12 0804 	adds.w	r8, r2, r4
 802f83a:	eb43 0905 	adc.w	r9, r3, r5
 802f83e:	697b      	ldr	r3, [r7, #20]
 802f840:	685b      	ldr	r3, [r3, #4]
 802f842:	2200      	movs	r2, #0
 802f844:	469a      	mov	sl, r3
 802f846:	4693      	mov	fp, r2
 802f848:	4652      	mov	r2, sl
 802f84a:	465b      	mov	r3, fp
 802f84c:	4640      	mov	r0, r8
 802f84e:	4649      	mov	r1, r9
 802f850:	f7f0 fd96 	bl	8020380 <__aeabi_uldivmod>
 802f854:	4602      	mov	r2, r0
 802f856:	460b      	mov	r3, r1
 802f858:	4613      	mov	r3, r2
 802f85a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 802f85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f85e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802f862:	d308      	bcc.n	802f876 <UART_SetConfig+0x79a>
 802f864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802f86a:	d204      	bcs.n	802f876 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 802f86c:	697b      	ldr	r3, [r7, #20]
 802f86e:	681b      	ldr	r3, [r3, #0]
 802f870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802f872:	60da      	str	r2, [r3, #12]
 802f874:	e17c      	b.n	802fb70 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 802f876:	2301      	movs	r3, #1
 802f878:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802f87c:	e178      	b.n	802fb70 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802f87e:	697b      	ldr	r3, [r7, #20]
 802f880:	69db      	ldr	r3, [r3, #28]
 802f882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f886:	f040 80c5 	bne.w	802fa14 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 802f88a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802f88e:	2b20      	cmp	r3, #32
 802f890:	dc48      	bgt.n	802f924 <UART_SetConfig+0x848>
 802f892:	2b00      	cmp	r3, #0
 802f894:	db7b      	blt.n	802f98e <UART_SetConfig+0x8b2>
 802f896:	2b20      	cmp	r3, #32
 802f898:	d879      	bhi.n	802f98e <UART_SetConfig+0x8b2>
 802f89a:	a201      	add	r2, pc, #4	; (adr r2, 802f8a0 <UART_SetConfig+0x7c4>)
 802f89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f8a0:	0802f92b 	.word	0x0802f92b
 802f8a4:	0802f933 	.word	0x0802f933
 802f8a8:	0802f98f 	.word	0x0802f98f
 802f8ac:	0802f98f 	.word	0x0802f98f
 802f8b0:	0802f93b 	.word	0x0802f93b
 802f8b4:	0802f98f 	.word	0x0802f98f
 802f8b8:	0802f98f 	.word	0x0802f98f
 802f8bc:	0802f98f 	.word	0x0802f98f
 802f8c0:	0802f94b 	.word	0x0802f94b
 802f8c4:	0802f98f 	.word	0x0802f98f
 802f8c8:	0802f98f 	.word	0x0802f98f
 802f8cc:	0802f98f 	.word	0x0802f98f
 802f8d0:	0802f98f 	.word	0x0802f98f
 802f8d4:	0802f98f 	.word	0x0802f98f
 802f8d8:	0802f98f 	.word	0x0802f98f
 802f8dc:	0802f98f 	.word	0x0802f98f
 802f8e0:	0802f95b 	.word	0x0802f95b
 802f8e4:	0802f98f 	.word	0x0802f98f
 802f8e8:	0802f98f 	.word	0x0802f98f
 802f8ec:	0802f98f 	.word	0x0802f98f
 802f8f0:	0802f98f 	.word	0x0802f98f
 802f8f4:	0802f98f 	.word	0x0802f98f
 802f8f8:	0802f98f 	.word	0x0802f98f
 802f8fc:	0802f98f 	.word	0x0802f98f
 802f900:	0802f98f 	.word	0x0802f98f
 802f904:	0802f98f 	.word	0x0802f98f
 802f908:	0802f98f 	.word	0x0802f98f
 802f90c:	0802f98f 	.word	0x0802f98f
 802f910:	0802f98f 	.word	0x0802f98f
 802f914:	0802f98f 	.word	0x0802f98f
 802f918:	0802f98f 	.word	0x0802f98f
 802f91c:	0802f98f 	.word	0x0802f98f
 802f920:	0802f981 	.word	0x0802f981
 802f924:	2b40      	cmp	r3, #64	; 0x40
 802f926:	d02e      	beq.n	802f986 <UART_SetConfig+0x8aa>
 802f928:	e031      	b.n	802f98e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802f92a:	f7fc fafd 	bl	802bf28 <HAL_RCC_GetPCLK1Freq>
 802f92e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802f930:	e033      	b.n	802f99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802f932:	f7fc fb0f 	bl	802bf54 <HAL_RCC_GetPCLK2Freq>
 802f936:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802f938:	e02f      	b.n	802f99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802f93a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802f93e:	4618      	mov	r0, r3
 802f940:	f7fd fd3e 	bl	802d3c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802f944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802f948:	e027      	b.n	802f99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802f94a:	f107 0318 	add.w	r3, r7, #24
 802f94e:	4618      	mov	r0, r3
 802f950:	f7fd fe8a 	bl	802d668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802f954:	69fb      	ldr	r3, [r7, #28]
 802f956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802f958:	e01f      	b.n	802f99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802f95a:	4b2d      	ldr	r3, [pc, #180]	; (802fa10 <UART_SetConfig+0x934>)
 802f95c:	681b      	ldr	r3, [r3, #0]
 802f95e:	f003 0320 	and.w	r3, r3, #32
 802f962:	2b00      	cmp	r3, #0
 802f964:	d009      	beq.n	802f97a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802f966:	4b2a      	ldr	r3, [pc, #168]	; (802fa10 <UART_SetConfig+0x934>)
 802f968:	681b      	ldr	r3, [r3, #0]
 802f96a:	08db      	lsrs	r3, r3, #3
 802f96c:	f003 0303 	and.w	r3, r3, #3
 802f970:	4a24      	ldr	r2, [pc, #144]	; (802fa04 <UART_SetConfig+0x928>)
 802f972:	fa22 f303 	lsr.w	r3, r2, r3
 802f976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802f978:	e00f      	b.n	802f99a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 802f97a:	4b22      	ldr	r3, [pc, #136]	; (802fa04 <UART_SetConfig+0x928>)
 802f97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802f97e:	e00c      	b.n	802f99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802f980:	4b21      	ldr	r3, [pc, #132]	; (802fa08 <UART_SetConfig+0x92c>)
 802f982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802f984:	e009      	b.n	802f99a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802f986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802f98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802f98c:	e005      	b.n	802f99a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802f98e:	2300      	movs	r3, #0
 802f990:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802f992:	2301      	movs	r3, #1
 802f994:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802f998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 802f99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f99c:	2b00      	cmp	r3, #0
 802f99e:	f000 80e7 	beq.w	802fb70 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802f9a2:	697b      	ldr	r3, [r7, #20]
 802f9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f9a6:	4a19      	ldr	r2, [pc, #100]	; (802fa0c <UART_SetConfig+0x930>)
 802f9a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802f9ac:	461a      	mov	r2, r3
 802f9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f9b0:	fbb3 f3f2 	udiv	r3, r3, r2
 802f9b4:	005a      	lsls	r2, r3, #1
 802f9b6:	697b      	ldr	r3, [r7, #20]
 802f9b8:	685b      	ldr	r3, [r3, #4]
 802f9ba:	085b      	lsrs	r3, r3, #1
 802f9bc:	441a      	add	r2, r3
 802f9be:	697b      	ldr	r3, [r7, #20]
 802f9c0:	685b      	ldr	r3, [r3, #4]
 802f9c2:	fbb2 f3f3 	udiv	r3, r2, r3
 802f9c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802f9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f9ca:	2b0f      	cmp	r3, #15
 802f9cc:	d916      	bls.n	802f9fc <UART_SetConfig+0x920>
 802f9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f9d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802f9d4:	d212      	bcs.n	802f9fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802f9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f9d8:	b29b      	uxth	r3, r3
 802f9da:	f023 030f 	bic.w	r3, r3, #15
 802f9de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802f9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802f9e2:	085b      	lsrs	r3, r3, #1
 802f9e4:	b29b      	uxth	r3, r3
 802f9e6:	f003 0307 	and.w	r3, r3, #7
 802f9ea:	b29a      	uxth	r2, r3
 802f9ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802f9ee:	4313      	orrs	r3, r2
 802f9f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 802f9f2:	697b      	ldr	r3, [r7, #20]
 802f9f4:	681b      	ldr	r3, [r3, #0]
 802f9f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802f9f8:	60da      	str	r2, [r3, #12]
 802f9fa:	e0b9      	b.n	802fb70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 802f9fc:	2301      	movs	r3, #1
 802f9fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 802fa02:	e0b5      	b.n	802fb70 <UART_SetConfig+0xa94>
 802fa04:	03d09000 	.word	0x03d09000
 802fa08:	003d0900 	.word	0x003d0900
 802fa0c:	08032db0 	.word	0x08032db0
 802fa10:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 802fa14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802fa18:	2b20      	cmp	r3, #32
 802fa1a:	dc49      	bgt.n	802fab0 <UART_SetConfig+0x9d4>
 802fa1c:	2b00      	cmp	r3, #0
 802fa1e:	db7c      	blt.n	802fb1a <UART_SetConfig+0xa3e>
 802fa20:	2b20      	cmp	r3, #32
 802fa22:	d87a      	bhi.n	802fb1a <UART_SetConfig+0xa3e>
 802fa24:	a201      	add	r2, pc, #4	; (adr r2, 802fa2c <UART_SetConfig+0x950>)
 802fa26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fa2a:	bf00      	nop
 802fa2c:	0802fab7 	.word	0x0802fab7
 802fa30:	0802fabf 	.word	0x0802fabf
 802fa34:	0802fb1b 	.word	0x0802fb1b
 802fa38:	0802fb1b 	.word	0x0802fb1b
 802fa3c:	0802fac7 	.word	0x0802fac7
 802fa40:	0802fb1b 	.word	0x0802fb1b
 802fa44:	0802fb1b 	.word	0x0802fb1b
 802fa48:	0802fb1b 	.word	0x0802fb1b
 802fa4c:	0802fad7 	.word	0x0802fad7
 802fa50:	0802fb1b 	.word	0x0802fb1b
 802fa54:	0802fb1b 	.word	0x0802fb1b
 802fa58:	0802fb1b 	.word	0x0802fb1b
 802fa5c:	0802fb1b 	.word	0x0802fb1b
 802fa60:	0802fb1b 	.word	0x0802fb1b
 802fa64:	0802fb1b 	.word	0x0802fb1b
 802fa68:	0802fb1b 	.word	0x0802fb1b
 802fa6c:	0802fae7 	.word	0x0802fae7
 802fa70:	0802fb1b 	.word	0x0802fb1b
 802fa74:	0802fb1b 	.word	0x0802fb1b
 802fa78:	0802fb1b 	.word	0x0802fb1b
 802fa7c:	0802fb1b 	.word	0x0802fb1b
 802fa80:	0802fb1b 	.word	0x0802fb1b
 802fa84:	0802fb1b 	.word	0x0802fb1b
 802fa88:	0802fb1b 	.word	0x0802fb1b
 802fa8c:	0802fb1b 	.word	0x0802fb1b
 802fa90:	0802fb1b 	.word	0x0802fb1b
 802fa94:	0802fb1b 	.word	0x0802fb1b
 802fa98:	0802fb1b 	.word	0x0802fb1b
 802fa9c:	0802fb1b 	.word	0x0802fb1b
 802faa0:	0802fb1b 	.word	0x0802fb1b
 802faa4:	0802fb1b 	.word	0x0802fb1b
 802faa8:	0802fb1b 	.word	0x0802fb1b
 802faac:	0802fb0d 	.word	0x0802fb0d
 802fab0:	2b40      	cmp	r3, #64	; 0x40
 802fab2:	d02e      	beq.n	802fb12 <UART_SetConfig+0xa36>
 802fab4:	e031      	b.n	802fb1a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802fab6:	f7fc fa37 	bl	802bf28 <HAL_RCC_GetPCLK1Freq>
 802faba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802fabc:	e033      	b.n	802fb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802fabe:	f7fc fa49 	bl	802bf54 <HAL_RCC_GetPCLK2Freq>
 802fac2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 802fac4:	e02f      	b.n	802fb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802fac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802faca:	4618      	mov	r0, r3
 802facc:	f7fd fc78 	bl	802d3c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802fad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802fad4:	e027      	b.n	802fb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802fad6:	f107 0318 	add.w	r3, r7, #24
 802fada:	4618      	mov	r0, r3
 802fadc:	f7fd fdc4 	bl	802d668 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802fae0:	69fb      	ldr	r3, [r7, #28]
 802fae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802fae4:	e01f      	b.n	802fb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802fae6:	4b2d      	ldr	r3, [pc, #180]	; (802fb9c <UART_SetConfig+0xac0>)
 802fae8:	681b      	ldr	r3, [r3, #0]
 802faea:	f003 0320 	and.w	r3, r3, #32
 802faee:	2b00      	cmp	r3, #0
 802faf0:	d009      	beq.n	802fb06 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802faf2:	4b2a      	ldr	r3, [pc, #168]	; (802fb9c <UART_SetConfig+0xac0>)
 802faf4:	681b      	ldr	r3, [r3, #0]
 802faf6:	08db      	lsrs	r3, r3, #3
 802faf8:	f003 0303 	and.w	r3, r3, #3
 802fafc:	4a28      	ldr	r2, [pc, #160]	; (802fba0 <UART_SetConfig+0xac4>)
 802fafe:	fa22 f303 	lsr.w	r3, r2, r3
 802fb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802fb04:	e00f      	b.n	802fb26 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 802fb06:	4b26      	ldr	r3, [pc, #152]	; (802fba0 <UART_SetConfig+0xac4>)
 802fb08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802fb0a:	e00c      	b.n	802fb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802fb0c:	4b25      	ldr	r3, [pc, #148]	; (802fba4 <UART_SetConfig+0xac8>)
 802fb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802fb10:	e009      	b.n	802fb26 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802fb12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802fb16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 802fb18:	e005      	b.n	802fb26 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 802fb1a:	2300      	movs	r3, #0
 802fb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 802fb1e:	2301      	movs	r3, #1
 802fb20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 802fb24:	bf00      	nop
    }

    if (pclk != 0U)
 802fb26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802fb28:	2b00      	cmp	r3, #0
 802fb2a:	d021      	beq.n	802fb70 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802fb2c:	697b      	ldr	r3, [r7, #20]
 802fb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802fb30:	4a1d      	ldr	r2, [pc, #116]	; (802fba8 <UART_SetConfig+0xacc>)
 802fb32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802fb36:	461a      	mov	r2, r3
 802fb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802fb3a:	fbb3 f2f2 	udiv	r2, r3, r2
 802fb3e:	697b      	ldr	r3, [r7, #20]
 802fb40:	685b      	ldr	r3, [r3, #4]
 802fb42:	085b      	lsrs	r3, r3, #1
 802fb44:	441a      	add	r2, r3
 802fb46:	697b      	ldr	r3, [r7, #20]
 802fb48:	685b      	ldr	r3, [r3, #4]
 802fb4a:	fbb2 f3f3 	udiv	r3, r2, r3
 802fb4e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802fb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802fb52:	2b0f      	cmp	r3, #15
 802fb54:	d909      	bls.n	802fb6a <UART_SetConfig+0xa8e>
 802fb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802fb58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802fb5c:	d205      	bcs.n	802fb6a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802fb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802fb60:	b29a      	uxth	r2, r3
 802fb62:	697b      	ldr	r3, [r7, #20]
 802fb64:	681b      	ldr	r3, [r3, #0]
 802fb66:	60da      	str	r2, [r3, #12]
 802fb68:	e002      	b.n	802fb70 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 802fb6a:	2301      	movs	r3, #1
 802fb6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802fb70:	697b      	ldr	r3, [r7, #20]
 802fb72:	2201      	movs	r2, #1
 802fb74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 802fb78:	697b      	ldr	r3, [r7, #20]
 802fb7a:	2201      	movs	r2, #1
 802fb7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802fb80:	697b      	ldr	r3, [r7, #20]
 802fb82:	2200      	movs	r2, #0
 802fb84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 802fb86:	697b      	ldr	r3, [r7, #20]
 802fb88:	2200      	movs	r2, #0
 802fb8a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 802fb8c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 802fb90:	4618      	mov	r0, r3
 802fb92:	3748      	adds	r7, #72	; 0x48
 802fb94:	46bd      	mov	sp, r7
 802fb96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802fb9a:	bf00      	nop
 802fb9c:	58024400 	.word	0x58024400
 802fba0:	03d09000 	.word	0x03d09000
 802fba4:	003d0900 	.word	0x003d0900
 802fba8:	08032db0 	.word	0x08032db0

0802fbac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 802fbac:	b480      	push	{r7}
 802fbae:	b083      	sub	sp, #12
 802fbb0:	af00      	add	r7, sp, #0
 802fbb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 802fbb4:	687b      	ldr	r3, [r7, #4]
 802fbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fbb8:	f003 0301 	and.w	r3, r3, #1
 802fbbc:	2b00      	cmp	r3, #0
 802fbbe:	d00a      	beq.n	802fbd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802fbc0:	687b      	ldr	r3, [r7, #4]
 802fbc2:	681b      	ldr	r3, [r3, #0]
 802fbc4:	685b      	ldr	r3, [r3, #4]
 802fbc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 802fbca:	687b      	ldr	r3, [r7, #4]
 802fbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802fbce:	687b      	ldr	r3, [r7, #4]
 802fbd0:	681b      	ldr	r3, [r3, #0]
 802fbd2:	430a      	orrs	r2, r1
 802fbd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 802fbd6:	687b      	ldr	r3, [r7, #4]
 802fbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fbda:	f003 0302 	and.w	r3, r3, #2
 802fbde:	2b00      	cmp	r3, #0
 802fbe0:	d00a      	beq.n	802fbf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 802fbe2:	687b      	ldr	r3, [r7, #4]
 802fbe4:	681b      	ldr	r3, [r3, #0]
 802fbe6:	685b      	ldr	r3, [r3, #4]
 802fbe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 802fbec:	687b      	ldr	r3, [r7, #4]
 802fbee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802fbf0:	687b      	ldr	r3, [r7, #4]
 802fbf2:	681b      	ldr	r3, [r3, #0]
 802fbf4:	430a      	orrs	r2, r1
 802fbf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 802fbf8:	687b      	ldr	r3, [r7, #4]
 802fbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fbfc:	f003 0304 	and.w	r3, r3, #4
 802fc00:	2b00      	cmp	r3, #0
 802fc02:	d00a      	beq.n	802fc1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802fc04:	687b      	ldr	r3, [r7, #4]
 802fc06:	681b      	ldr	r3, [r3, #0]
 802fc08:	685b      	ldr	r3, [r3, #4]
 802fc0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 802fc0e:	687b      	ldr	r3, [r7, #4]
 802fc10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802fc12:	687b      	ldr	r3, [r7, #4]
 802fc14:	681b      	ldr	r3, [r3, #0]
 802fc16:	430a      	orrs	r2, r1
 802fc18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 802fc1a:	687b      	ldr	r3, [r7, #4]
 802fc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fc1e:	f003 0308 	and.w	r3, r3, #8
 802fc22:	2b00      	cmp	r3, #0
 802fc24:	d00a      	beq.n	802fc3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802fc26:	687b      	ldr	r3, [r7, #4]
 802fc28:	681b      	ldr	r3, [r3, #0]
 802fc2a:	685b      	ldr	r3, [r3, #4]
 802fc2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 802fc30:	687b      	ldr	r3, [r7, #4]
 802fc32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802fc34:	687b      	ldr	r3, [r7, #4]
 802fc36:	681b      	ldr	r3, [r3, #0]
 802fc38:	430a      	orrs	r2, r1
 802fc3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 802fc3c:	687b      	ldr	r3, [r7, #4]
 802fc3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fc40:	f003 0310 	and.w	r3, r3, #16
 802fc44:	2b00      	cmp	r3, #0
 802fc46:	d00a      	beq.n	802fc5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 802fc48:	687b      	ldr	r3, [r7, #4]
 802fc4a:	681b      	ldr	r3, [r3, #0]
 802fc4c:	689b      	ldr	r3, [r3, #8]
 802fc4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 802fc52:	687b      	ldr	r3, [r7, #4]
 802fc54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802fc56:	687b      	ldr	r3, [r7, #4]
 802fc58:	681b      	ldr	r3, [r3, #0]
 802fc5a:	430a      	orrs	r2, r1
 802fc5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802fc5e:	687b      	ldr	r3, [r7, #4]
 802fc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fc62:	f003 0320 	and.w	r3, r3, #32
 802fc66:	2b00      	cmp	r3, #0
 802fc68:	d00a      	beq.n	802fc80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802fc6a:	687b      	ldr	r3, [r7, #4]
 802fc6c:	681b      	ldr	r3, [r3, #0]
 802fc6e:	689b      	ldr	r3, [r3, #8]
 802fc70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 802fc74:	687b      	ldr	r3, [r7, #4]
 802fc76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802fc78:	687b      	ldr	r3, [r7, #4]
 802fc7a:	681b      	ldr	r3, [r3, #0]
 802fc7c:	430a      	orrs	r2, r1
 802fc7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802fc80:	687b      	ldr	r3, [r7, #4]
 802fc82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fc84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802fc88:	2b00      	cmp	r3, #0
 802fc8a:	d01a      	beq.n	802fcc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 802fc8c:	687b      	ldr	r3, [r7, #4]
 802fc8e:	681b      	ldr	r3, [r3, #0]
 802fc90:	685b      	ldr	r3, [r3, #4]
 802fc92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 802fc96:	687b      	ldr	r3, [r7, #4]
 802fc98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802fc9a:	687b      	ldr	r3, [r7, #4]
 802fc9c:	681b      	ldr	r3, [r3, #0]
 802fc9e:	430a      	orrs	r2, r1
 802fca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802fca2:	687b      	ldr	r3, [r7, #4]
 802fca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802fcaa:	d10a      	bne.n	802fcc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 802fcac:	687b      	ldr	r3, [r7, #4]
 802fcae:	681b      	ldr	r3, [r3, #0]
 802fcb0:	685b      	ldr	r3, [r3, #4]
 802fcb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 802fcb6:	687b      	ldr	r3, [r7, #4]
 802fcb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802fcba:	687b      	ldr	r3, [r7, #4]
 802fcbc:	681b      	ldr	r3, [r3, #0]
 802fcbe:	430a      	orrs	r2, r1
 802fcc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802fcc2:	687b      	ldr	r3, [r7, #4]
 802fcc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fcc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802fcca:	2b00      	cmp	r3, #0
 802fccc:	d00a      	beq.n	802fce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802fcce:	687b      	ldr	r3, [r7, #4]
 802fcd0:	681b      	ldr	r3, [r3, #0]
 802fcd2:	685b      	ldr	r3, [r3, #4]
 802fcd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 802fcd8:	687b      	ldr	r3, [r7, #4]
 802fcda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802fcdc:	687b      	ldr	r3, [r7, #4]
 802fcde:	681b      	ldr	r3, [r3, #0]
 802fce0:	430a      	orrs	r2, r1
 802fce2:	605a      	str	r2, [r3, #4]
  }
}
 802fce4:	bf00      	nop
 802fce6:	370c      	adds	r7, #12
 802fce8:	46bd      	mov	sp, r7
 802fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fcee:	4770      	bx	lr

0802fcf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802fcf0:	b580      	push	{r7, lr}
 802fcf2:	b098      	sub	sp, #96	; 0x60
 802fcf4:	af02      	add	r7, sp, #8
 802fcf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802fcf8:	687b      	ldr	r3, [r7, #4]
 802fcfa:	2200      	movs	r2, #0
 802fcfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802fd00:	f7fa f9fa 	bl	802a0f8 <HAL_GetTick>
 802fd04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802fd06:	687b      	ldr	r3, [r7, #4]
 802fd08:	681b      	ldr	r3, [r3, #0]
 802fd0a:	681b      	ldr	r3, [r3, #0]
 802fd0c:	f003 0308 	and.w	r3, r3, #8
 802fd10:	2b08      	cmp	r3, #8
 802fd12:	d12f      	bne.n	802fd74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802fd14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802fd18:	9300      	str	r3, [sp, #0]
 802fd1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802fd1c:	2200      	movs	r2, #0
 802fd1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802fd22:	6878      	ldr	r0, [r7, #4]
 802fd24:	f000 f88e 	bl	802fe44 <UART_WaitOnFlagUntilTimeout>
 802fd28:	4603      	mov	r3, r0
 802fd2a:	2b00      	cmp	r3, #0
 802fd2c:	d022      	beq.n	802fd74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 802fd2e:	687b      	ldr	r3, [r7, #4]
 802fd30:	681b      	ldr	r3, [r3, #0]
 802fd32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802fd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802fd36:	e853 3f00 	ldrex	r3, [r3]
 802fd3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802fd3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802fd3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802fd42:	653b      	str	r3, [r7, #80]	; 0x50
 802fd44:	687b      	ldr	r3, [r7, #4]
 802fd46:	681b      	ldr	r3, [r3, #0]
 802fd48:	461a      	mov	r2, r3
 802fd4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802fd4c:	647b      	str	r3, [r7, #68]	; 0x44
 802fd4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802fd50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802fd52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802fd54:	e841 2300 	strex	r3, r2, [r1]
 802fd58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802fd5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802fd5c:	2b00      	cmp	r3, #0
 802fd5e:	d1e6      	bne.n	802fd2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 802fd60:	687b      	ldr	r3, [r7, #4]
 802fd62:	2220      	movs	r2, #32
 802fd64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 802fd68:	687b      	ldr	r3, [r7, #4]
 802fd6a:	2200      	movs	r2, #0
 802fd6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802fd70:	2303      	movs	r3, #3
 802fd72:	e063      	b.n	802fe3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802fd74:	687b      	ldr	r3, [r7, #4]
 802fd76:	681b      	ldr	r3, [r3, #0]
 802fd78:	681b      	ldr	r3, [r3, #0]
 802fd7a:	f003 0304 	and.w	r3, r3, #4
 802fd7e:	2b04      	cmp	r3, #4
 802fd80:	d149      	bne.n	802fe16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802fd82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802fd86:	9300      	str	r3, [sp, #0]
 802fd88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802fd8a:	2200      	movs	r2, #0
 802fd8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 802fd90:	6878      	ldr	r0, [r7, #4]
 802fd92:	f000 f857 	bl	802fe44 <UART_WaitOnFlagUntilTimeout>
 802fd96:	4603      	mov	r3, r0
 802fd98:	2b00      	cmp	r3, #0
 802fd9a:	d03c      	beq.n	802fe16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802fd9c:	687b      	ldr	r3, [r7, #4]
 802fd9e:	681b      	ldr	r3, [r3, #0]
 802fda0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802fda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fda4:	e853 3f00 	ldrex	r3, [r3]
 802fda8:	623b      	str	r3, [r7, #32]
   return(result);
 802fdaa:	6a3b      	ldr	r3, [r7, #32]
 802fdac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802fdb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 802fdb2:	687b      	ldr	r3, [r7, #4]
 802fdb4:	681b      	ldr	r3, [r3, #0]
 802fdb6:	461a      	mov	r2, r3
 802fdb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802fdba:	633b      	str	r3, [r7, #48]	; 0x30
 802fdbc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802fdbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802fdc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802fdc2:	e841 2300 	strex	r3, r2, [r1]
 802fdc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802fdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fdca:	2b00      	cmp	r3, #0
 802fdcc:	d1e6      	bne.n	802fd9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802fdce:	687b      	ldr	r3, [r7, #4]
 802fdd0:	681b      	ldr	r3, [r3, #0]
 802fdd2:	3308      	adds	r3, #8
 802fdd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802fdd6:	693b      	ldr	r3, [r7, #16]
 802fdd8:	e853 3f00 	ldrex	r3, [r3]
 802fddc:	60fb      	str	r3, [r7, #12]
   return(result);
 802fdde:	68fb      	ldr	r3, [r7, #12]
 802fde0:	f023 0301 	bic.w	r3, r3, #1
 802fde4:	64bb      	str	r3, [r7, #72]	; 0x48
 802fde6:	687b      	ldr	r3, [r7, #4]
 802fde8:	681b      	ldr	r3, [r3, #0]
 802fdea:	3308      	adds	r3, #8
 802fdec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802fdee:	61fa      	str	r2, [r7, #28]
 802fdf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802fdf2:	69b9      	ldr	r1, [r7, #24]
 802fdf4:	69fa      	ldr	r2, [r7, #28]
 802fdf6:	e841 2300 	strex	r3, r2, [r1]
 802fdfa:	617b      	str	r3, [r7, #20]
   return(result);
 802fdfc:	697b      	ldr	r3, [r7, #20]
 802fdfe:	2b00      	cmp	r3, #0
 802fe00:	d1e5      	bne.n	802fdce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802fe02:	687b      	ldr	r3, [r7, #4]
 802fe04:	2220      	movs	r2, #32
 802fe06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 802fe0a:	687b      	ldr	r3, [r7, #4]
 802fe0c:	2200      	movs	r2, #0
 802fe0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802fe12:	2303      	movs	r3, #3
 802fe14:	e012      	b.n	802fe3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802fe16:	687b      	ldr	r3, [r7, #4]
 802fe18:	2220      	movs	r2, #32
 802fe1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 802fe1e:	687b      	ldr	r3, [r7, #4]
 802fe20:	2220      	movs	r2, #32
 802fe22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802fe26:	687b      	ldr	r3, [r7, #4]
 802fe28:	2200      	movs	r2, #0
 802fe2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802fe2c:	687b      	ldr	r3, [r7, #4]
 802fe2e:	2200      	movs	r2, #0
 802fe30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 802fe32:	687b      	ldr	r3, [r7, #4]
 802fe34:	2200      	movs	r2, #0
 802fe36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 802fe3a:	2300      	movs	r3, #0
}
 802fe3c:	4618      	mov	r0, r3
 802fe3e:	3758      	adds	r7, #88	; 0x58
 802fe40:	46bd      	mov	sp, r7
 802fe42:	bd80      	pop	{r7, pc}

0802fe44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802fe44:	b580      	push	{r7, lr}
 802fe46:	b084      	sub	sp, #16
 802fe48:	af00      	add	r7, sp, #0
 802fe4a:	60f8      	str	r0, [r7, #12]
 802fe4c:	60b9      	str	r1, [r7, #8]
 802fe4e:	603b      	str	r3, [r7, #0]
 802fe50:	4613      	mov	r3, r2
 802fe52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802fe54:	e049      	b.n	802feea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802fe56:	69bb      	ldr	r3, [r7, #24]
 802fe58:	f1b3 3fff 	cmp.w	r3, #4294967295
 802fe5c:	d045      	beq.n	802feea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802fe5e:	f7fa f94b 	bl	802a0f8 <HAL_GetTick>
 802fe62:	4602      	mov	r2, r0
 802fe64:	683b      	ldr	r3, [r7, #0]
 802fe66:	1ad3      	subs	r3, r2, r3
 802fe68:	69ba      	ldr	r2, [r7, #24]
 802fe6a:	429a      	cmp	r2, r3
 802fe6c:	d302      	bcc.n	802fe74 <UART_WaitOnFlagUntilTimeout+0x30>
 802fe6e:	69bb      	ldr	r3, [r7, #24]
 802fe70:	2b00      	cmp	r3, #0
 802fe72:	d101      	bne.n	802fe78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 802fe74:	2303      	movs	r3, #3
 802fe76:	e048      	b.n	802ff0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 802fe78:	68fb      	ldr	r3, [r7, #12]
 802fe7a:	681b      	ldr	r3, [r3, #0]
 802fe7c:	681b      	ldr	r3, [r3, #0]
 802fe7e:	f003 0304 	and.w	r3, r3, #4
 802fe82:	2b00      	cmp	r3, #0
 802fe84:	d031      	beq.n	802feea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802fe86:	68fb      	ldr	r3, [r7, #12]
 802fe88:	681b      	ldr	r3, [r3, #0]
 802fe8a:	69db      	ldr	r3, [r3, #28]
 802fe8c:	f003 0308 	and.w	r3, r3, #8
 802fe90:	2b08      	cmp	r3, #8
 802fe92:	d110      	bne.n	802feb6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 802fe94:	68fb      	ldr	r3, [r7, #12]
 802fe96:	681b      	ldr	r3, [r3, #0]
 802fe98:	2208      	movs	r2, #8
 802fe9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 802fe9c:	68f8      	ldr	r0, [r7, #12]
 802fe9e:	f000 f839 	bl	802ff14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 802fea2:	68fb      	ldr	r3, [r7, #12]
 802fea4:	2208      	movs	r2, #8
 802fea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 802feaa:	68fb      	ldr	r3, [r7, #12]
 802feac:	2200      	movs	r2, #0
 802feae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 802feb2:	2301      	movs	r3, #1
 802feb4:	e029      	b.n	802ff0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802feb6:	68fb      	ldr	r3, [r7, #12]
 802feb8:	681b      	ldr	r3, [r3, #0]
 802feba:	69db      	ldr	r3, [r3, #28]
 802febc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802fec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802fec4:	d111      	bne.n	802feea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802fec6:	68fb      	ldr	r3, [r7, #12]
 802fec8:	681b      	ldr	r3, [r3, #0]
 802feca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802fece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 802fed0:	68f8      	ldr	r0, [r7, #12]
 802fed2:	f000 f81f 	bl	802ff14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802fed6:	68fb      	ldr	r3, [r7, #12]
 802fed8:	2220      	movs	r2, #32
 802feda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802fede:	68fb      	ldr	r3, [r7, #12]
 802fee0:	2200      	movs	r2, #0
 802fee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 802fee6:	2303      	movs	r3, #3
 802fee8:	e00f      	b.n	802ff0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802feea:	68fb      	ldr	r3, [r7, #12]
 802feec:	681b      	ldr	r3, [r3, #0]
 802feee:	69da      	ldr	r2, [r3, #28]
 802fef0:	68bb      	ldr	r3, [r7, #8]
 802fef2:	4013      	ands	r3, r2
 802fef4:	68ba      	ldr	r2, [r7, #8]
 802fef6:	429a      	cmp	r2, r3
 802fef8:	bf0c      	ite	eq
 802fefa:	2301      	moveq	r3, #1
 802fefc:	2300      	movne	r3, #0
 802fefe:	b2db      	uxtb	r3, r3
 802ff00:	461a      	mov	r2, r3
 802ff02:	79fb      	ldrb	r3, [r7, #7]
 802ff04:	429a      	cmp	r2, r3
 802ff06:	d0a6      	beq.n	802fe56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802ff08:	2300      	movs	r3, #0
}
 802ff0a:	4618      	mov	r0, r3
 802ff0c:	3710      	adds	r7, #16
 802ff0e:	46bd      	mov	sp, r7
 802ff10:	bd80      	pop	{r7, pc}
	...

0802ff14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802ff14:	b480      	push	{r7}
 802ff16:	b095      	sub	sp, #84	; 0x54
 802ff18:	af00      	add	r7, sp, #0
 802ff1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802ff1c:	687b      	ldr	r3, [r7, #4]
 802ff1e:	681b      	ldr	r3, [r3, #0]
 802ff20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ff22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ff24:	e853 3f00 	ldrex	r3, [r3]
 802ff28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802ff2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ff2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802ff30:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ff32:	687b      	ldr	r3, [r7, #4]
 802ff34:	681b      	ldr	r3, [r3, #0]
 802ff36:	461a      	mov	r2, r3
 802ff38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ff3a:	643b      	str	r3, [r7, #64]	; 0x40
 802ff3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ff3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802ff40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802ff42:	e841 2300 	strex	r3, r2, [r1]
 802ff46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802ff48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ff4a:	2b00      	cmp	r3, #0
 802ff4c:	d1e6      	bne.n	802ff1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802ff4e:	687b      	ldr	r3, [r7, #4]
 802ff50:	681b      	ldr	r3, [r3, #0]
 802ff52:	3308      	adds	r3, #8
 802ff54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ff56:	6a3b      	ldr	r3, [r7, #32]
 802ff58:	e853 3f00 	ldrex	r3, [r3]
 802ff5c:	61fb      	str	r3, [r7, #28]
   return(result);
 802ff5e:	69fa      	ldr	r2, [r7, #28]
 802ff60:	4b1e      	ldr	r3, [pc, #120]	; (802ffdc <UART_EndRxTransfer+0xc8>)
 802ff62:	4013      	ands	r3, r2
 802ff64:	64bb      	str	r3, [r7, #72]	; 0x48
 802ff66:	687b      	ldr	r3, [r7, #4]
 802ff68:	681b      	ldr	r3, [r3, #0]
 802ff6a:	3308      	adds	r3, #8
 802ff6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ff6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 802ff70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ff72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802ff74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802ff76:	e841 2300 	strex	r3, r2, [r1]
 802ff7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802ff7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ff7e:	2b00      	cmp	r3, #0
 802ff80:	d1e5      	bne.n	802ff4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802ff82:	687b      	ldr	r3, [r7, #4]
 802ff84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ff86:	2b01      	cmp	r3, #1
 802ff88:	d118      	bne.n	802ffbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802ff8a:	687b      	ldr	r3, [r7, #4]
 802ff8c:	681b      	ldr	r3, [r3, #0]
 802ff8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ff90:	68fb      	ldr	r3, [r7, #12]
 802ff92:	e853 3f00 	ldrex	r3, [r3]
 802ff96:	60bb      	str	r3, [r7, #8]
   return(result);
 802ff98:	68bb      	ldr	r3, [r7, #8]
 802ff9a:	f023 0310 	bic.w	r3, r3, #16
 802ff9e:	647b      	str	r3, [r7, #68]	; 0x44
 802ffa0:	687b      	ldr	r3, [r7, #4]
 802ffa2:	681b      	ldr	r3, [r3, #0]
 802ffa4:	461a      	mov	r2, r3
 802ffa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802ffa8:	61bb      	str	r3, [r7, #24]
 802ffaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ffac:	6979      	ldr	r1, [r7, #20]
 802ffae:	69ba      	ldr	r2, [r7, #24]
 802ffb0:	e841 2300 	strex	r3, r2, [r1]
 802ffb4:	613b      	str	r3, [r7, #16]
   return(result);
 802ffb6:	693b      	ldr	r3, [r7, #16]
 802ffb8:	2b00      	cmp	r3, #0
 802ffba:	d1e6      	bne.n	802ff8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802ffbc:	687b      	ldr	r3, [r7, #4]
 802ffbe:	2220      	movs	r2, #32
 802ffc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802ffc4:	687b      	ldr	r3, [r7, #4]
 802ffc6:	2200      	movs	r2, #0
 802ffc8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 802ffca:	687b      	ldr	r3, [r7, #4]
 802ffcc:	2200      	movs	r2, #0
 802ffce:	675a      	str	r2, [r3, #116]	; 0x74
}
 802ffd0:	bf00      	nop
 802ffd2:	3754      	adds	r7, #84	; 0x54
 802ffd4:	46bd      	mov	sp, r7
 802ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ffda:	4770      	bx	lr
 802ffdc:	effffffe 	.word	0xeffffffe

0802ffe0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802ffe0:	b480      	push	{r7}
 802ffe2:	b085      	sub	sp, #20
 802ffe4:	af00      	add	r7, sp, #0
 802ffe6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 802ffe8:	687b      	ldr	r3, [r7, #4]
 802ffea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802ffee:	2b01      	cmp	r3, #1
 802fff0:	d101      	bne.n	802fff6 <HAL_UARTEx_DisableFifoMode+0x16>
 802fff2:	2302      	movs	r3, #2
 802fff4:	e027      	b.n	8030046 <HAL_UARTEx_DisableFifoMode+0x66>
 802fff6:	687b      	ldr	r3, [r7, #4]
 802fff8:	2201      	movs	r2, #1
 802fffa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802fffe:	687b      	ldr	r3, [r7, #4]
 8030000:	2224      	movs	r2, #36	; 0x24
 8030002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8030006:	687b      	ldr	r3, [r7, #4]
 8030008:	681b      	ldr	r3, [r3, #0]
 803000a:	681b      	ldr	r3, [r3, #0]
 803000c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803000e:	687b      	ldr	r3, [r7, #4]
 8030010:	681b      	ldr	r3, [r3, #0]
 8030012:	681a      	ldr	r2, [r3, #0]
 8030014:	687b      	ldr	r3, [r7, #4]
 8030016:	681b      	ldr	r3, [r3, #0]
 8030018:	f022 0201 	bic.w	r2, r2, #1
 803001c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 803001e:	68fb      	ldr	r3, [r7, #12]
 8030020:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8030024:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8030026:	687b      	ldr	r3, [r7, #4]
 8030028:	2200      	movs	r2, #0
 803002a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803002c:	687b      	ldr	r3, [r7, #4]
 803002e:	681b      	ldr	r3, [r3, #0]
 8030030:	68fa      	ldr	r2, [r7, #12]
 8030032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8030034:	687b      	ldr	r3, [r7, #4]
 8030036:	2220      	movs	r2, #32
 8030038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803003c:	687b      	ldr	r3, [r7, #4]
 803003e:	2200      	movs	r2, #0
 8030040:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8030044:	2300      	movs	r3, #0
}
 8030046:	4618      	mov	r0, r3
 8030048:	3714      	adds	r7, #20
 803004a:	46bd      	mov	sp, r7
 803004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030050:	4770      	bx	lr

08030052 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8030052:	b580      	push	{r7, lr}
 8030054:	b084      	sub	sp, #16
 8030056:	af00      	add	r7, sp, #0
 8030058:	6078      	str	r0, [r7, #4]
 803005a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803005c:	687b      	ldr	r3, [r7, #4]
 803005e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8030062:	2b01      	cmp	r3, #1
 8030064:	d101      	bne.n	803006a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8030066:	2302      	movs	r3, #2
 8030068:	e02d      	b.n	80300c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 803006a:	687b      	ldr	r3, [r7, #4]
 803006c:	2201      	movs	r2, #1
 803006e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8030072:	687b      	ldr	r3, [r7, #4]
 8030074:	2224      	movs	r2, #36	; 0x24
 8030076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803007a:	687b      	ldr	r3, [r7, #4]
 803007c:	681b      	ldr	r3, [r3, #0]
 803007e:	681b      	ldr	r3, [r3, #0]
 8030080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8030082:	687b      	ldr	r3, [r7, #4]
 8030084:	681b      	ldr	r3, [r3, #0]
 8030086:	681a      	ldr	r2, [r3, #0]
 8030088:	687b      	ldr	r3, [r7, #4]
 803008a:	681b      	ldr	r3, [r3, #0]
 803008c:	f022 0201 	bic.w	r2, r2, #1
 8030090:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8030092:	687b      	ldr	r3, [r7, #4]
 8030094:	681b      	ldr	r3, [r3, #0]
 8030096:	689b      	ldr	r3, [r3, #8]
 8030098:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 803009c:	687b      	ldr	r3, [r7, #4]
 803009e:	681b      	ldr	r3, [r3, #0]
 80300a0:	683a      	ldr	r2, [r7, #0]
 80300a2:	430a      	orrs	r2, r1
 80300a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80300a6:	6878      	ldr	r0, [r7, #4]
 80300a8:	f000 f850 	bl	803014c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80300ac:	687b      	ldr	r3, [r7, #4]
 80300ae:	681b      	ldr	r3, [r3, #0]
 80300b0:	68fa      	ldr	r2, [r7, #12]
 80300b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80300b4:	687b      	ldr	r3, [r7, #4]
 80300b6:	2220      	movs	r2, #32
 80300b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80300bc:	687b      	ldr	r3, [r7, #4]
 80300be:	2200      	movs	r2, #0
 80300c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80300c4:	2300      	movs	r3, #0
}
 80300c6:	4618      	mov	r0, r3
 80300c8:	3710      	adds	r7, #16
 80300ca:	46bd      	mov	sp, r7
 80300cc:	bd80      	pop	{r7, pc}

080300ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80300ce:	b580      	push	{r7, lr}
 80300d0:	b084      	sub	sp, #16
 80300d2:	af00      	add	r7, sp, #0
 80300d4:	6078      	str	r0, [r7, #4]
 80300d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80300d8:	687b      	ldr	r3, [r7, #4]
 80300da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80300de:	2b01      	cmp	r3, #1
 80300e0:	d101      	bne.n	80300e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80300e2:	2302      	movs	r3, #2
 80300e4:	e02d      	b.n	8030142 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80300e6:	687b      	ldr	r3, [r7, #4]
 80300e8:	2201      	movs	r2, #1
 80300ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80300ee:	687b      	ldr	r3, [r7, #4]
 80300f0:	2224      	movs	r2, #36	; 0x24
 80300f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80300f6:	687b      	ldr	r3, [r7, #4]
 80300f8:	681b      	ldr	r3, [r3, #0]
 80300fa:	681b      	ldr	r3, [r3, #0]
 80300fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80300fe:	687b      	ldr	r3, [r7, #4]
 8030100:	681b      	ldr	r3, [r3, #0]
 8030102:	681a      	ldr	r2, [r3, #0]
 8030104:	687b      	ldr	r3, [r7, #4]
 8030106:	681b      	ldr	r3, [r3, #0]
 8030108:	f022 0201 	bic.w	r2, r2, #1
 803010c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 803010e:	687b      	ldr	r3, [r7, #4]
 8030110:	681b      	ldr	r3, [r3, #0]
 8030112:	689b      	ldr	r3, [r3, #8]
 8030114:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8030118:	687b      	ldr	r3, [r7, #4]
 803011a:	681b      	ldr	r3, [r3, #0]
 803011c:	683a      	ldr	r2, [r7, #0]
 803011e:	430a      	orrs	r2, r1
 8030120:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8030122:	6878      	ldr	r0, [r7, #4]
 8030124:	f000 f812 	bl	803014c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8030128:	687b      	ldr	r3, [r7, #4]
 803012a:	681b      	ldr	r3, [r3, #0]
 803012c:	68fa      	ldr	r2, [r7, #12]
 803012e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8030130:	687b      	ldr	r3, [r7, #4]
 8030132:	2220      	movs	r2, #32
 8030134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8030138:	687b      	ldr	r3, [r7, #4]
 803013a:	2200      	movs	r2, #0
 803013c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8030140:	2300      	movs	r3, #0
}
 8030142:	4618      	mov	r0, r3
 8030144:	3710      	adds	r7, #16
 8030146:	46bd      	mov	sp, r7
 8030148:	bd80      	pop	{r7, pc}
	...

0803014c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 803014c:	b480      	push	{r7}
 803014e:	b085      	sub	sp, #20
 8030150:	af00      	add	r7, sp, #0
 8030152:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8030154:	687b      	ldr	r3, [r7, #4]
 8030156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8030158:	2b00      	cmp	r3, #0
 803015a:	d108      	bne.n	803016e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 803015c:	687b      	ldr	r3, [r7, #4]
 803015e:	2201      	movs	r2, #1
 8030160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8030164:	687b      	ldr	r3, [r7, #4]
 8030166:	2201      	movs	r2, #1
 8030168:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 803016c:	e031      	b.n	80301d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 803016e:	2310      	movs	r3, #16
 8030170:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8030172:	2310      	movs	r3, #16
 8030174:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8030176:	687b      	ldr	r3, [r7, #4]
 8030178:	681b      	ldr	r3, [r3, #0]
 803017a:	689b      	ldr	r3, [r3, #8]
 803017c:	0e5b      	lsrs	r3, r3, #25
 803017e:	b2db      	uxtb	r3, r3
 8030180:	f003 0307 	and.w	r3, r3, #7
 8030184:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8030186:	687b      	ldr	r3, [r7, #4]
 8030188:	681b      	ldr	r3, [r3, #0]
 803018a:	689b      	ldr	r3, [r3, #8]
 803018c:	0f5b      	lsrs	r3, r3, #29
 803018e:	b2db      	uxtb	r3, r3
 8030190:	f003 0307 	and.w	r3, r3, #7
 8030194:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8030196:	7bbb      	ldrb	r3, [r7, #14]
 8030198:	7b3a      	ldrb	r2, [r7, #12]
 803019a:	4911      	ldr	r1, [pc, #68]	; (80301e0 <UARTEx_SetNbDataToProcess+0x94>)
 803019c:	5c8a      	ldrb	r2, [r1, r2]
 803019e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80301a2:	7b3a      	ldrb	r2, [r7, #12]
 80301a4:	490f      	ldr	r1, [pc, #60]	; (80301e4 <UARTEx_SetNbDataToProcess+0x98>)
 80301a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80301a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80301ac:	b29a      	uxth	r2, r3
 80301ae:	687b      	ldr	r3, [r7, #4]
 80301b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80301b4:	7bfb      	ldrb	r3, [r7, #15]
 80301b6:	7b7a      	ldrb	r2, [r7, #13]
 80301b8:	4909      	ldr	r1, [pc, #36]	; (80301e0 <UARTEx_SetNbDataToProcess+0x94>)
 80301ba:	5c8a      	ldrb	r2, [r1, r2]
 80301bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80301c0:	7b7a      	ldrb	r2, [r7, #13]
 80301c2:	4908      	ldr	r1, [pc, #32]	; (80301e4 <UARTEx_SetNbDataToProcess+0x98>)
 80301c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80301c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80301ca:	b29a      	uxth	r2, r3
 80301cc:	687b      	ldr	r3, [r7, #4]
 80301ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80301d2:	bf00      	nop
 80301d4:	3714      	adds	r7, #20
 80301d6:	46bd      	mov	sp, r7
 80301d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80301dc:	4770      	bx	lr
 80301de:	bf00      	nop
 80301e0:	08032dc8 	.word	0x08032dc8
 80301e4:	08032dd0 	.word	0x08032dd0

080301e8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80301e8:	b480      	push	{r7}
 80301ea:	b087      	sub	sp, #28
 80301ec:	af00      	add	r7, sp, #0
 80301ee:	6078      	str	r0, [r7, #4]
 80301f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80301f2:	683b      	ldr	r3, [r7, #0]
 80301f4:	681a      	ldr	r2, [r3, #0]
 80301f6:	687b      	ldr	r3, [r7, #4]
 80301f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80301fc:	683a      	ldr	r2, [r7, #0]
 80301fe:	6812      	ldr	r2, [r2, #0]
 8030200:	f023 0101 	bic.w	r1, r3, #1
 8030204:	687b      	ldr	r3, [r7, #4]
 8030206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 803020a:	683b      	ldr	r3, [r7, #0]
 803020c:	689b      	ldr	r3, [r3, #8]
 803020e:	2b08      	cmp	r3, #8
 8030210:	d102      	bne.n	8030218 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8030212:	2340      	movs	r3, #64	; 0x40
 8030214:	617b      	str	r3, [r7, #20]
 8030216:	e001      	b.n	803021c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8030218:	2300      	movs	r3, #0
 803021a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 803021c:	683b      	ldr	r3, [r7, #0]
 803021e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8030220:	697b      	ldr	r3, [r7, #20]
 8030222:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8030224:	683b      	ldr	r3, [r7, #0]
 8030226:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8030228:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 803022a:	683b      	ldr	r3, [r7, #0]
 803022c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 803022e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8030230:	683b      	ldr	r3, [r7, #0]
 8030232:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8030234:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8030236:	683b      	ldr	r3, [r7, #0]
 8030238:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 803023a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 803023c:	683b      	ldr	r3, [r7, #0]
 803023e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8030240:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8030242:	683b      	ldr	r3, [r7, #0]
 8030244:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8030246:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8030248:	683b      	ldr	r3, [r7, #0]
 803024a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 803024c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 803024e:	683b      	ldr	r3, [r7, #0]
 8030250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8030252:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8030254:	683b      	ldr	r3, [r7, #0]
 8030256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8030258:	431a      	orrs	r2, r3
              Init->WriteBurst);
 803025a:	683b      	ldr	r3, [r7, #0]
 803025c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 803025e:	4313      	orrs	r3, r2
 8030260:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8030262:	683b      	ldr	r3, [r7, #0]
 8030264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030266:	693a      	ldr	r2, [r7, #16]
 8030268:	4313      	orrs	r3, r2
 803026a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 803026c:	683b      	ldr	r3, [r7, #0]
 803026e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030270:	693a      	ldr	r2, [r7, #16]
 8030272:	4313      	orrs	r3, r2
 8030274:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8030276:	683b      	ldr	r3, [r7, #0]
 8030278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803027a:	693a      	ldr	r2, [r7, #16]
 803027c:	4313      	orrs	r3, r2
 803027e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8030280:	4b20      	ldr	r3, [pc, #128]	; (8030304 <FMC_NORSRAM_Init+0x11c>)
 8030282:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8030284:	68fb      	ldr	r3, [r7, #12]
 8030286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 803028a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 803028c:	68fb      	ldr	r3, [r7, #12]
 803028e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8030292:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8030294:	68fb      	ldr	r3, [r7, #12]
 8030296:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 803029a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 803029c:	683b      	ldr	r3, [r7, #0]
 803029e:	681a      	ldr	r2, [r3, #0]
 80302a0:	687b      	ldr	r3, [r7, #4]
 80302a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80302a6:	68fb      	ldr	r3, [r7, #12]
 80302a8:	43db      	mvns	r3, r3
 80302aa:	ea02 0103 	and.w	r1, r2, r3
 80302ae:	683b      	ldr	r3, [r7, #0]
 80302b0:	681a      	ldr	r2, [r3, #0]
 80302b2:	693b      	ldr	r3, [r7, #16]
 80302b4:	4319      	orrs	r1, r3
 80302b6:	687b      	ldr	r3, [r7, #4]
 80302b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80302bc:	683b      	ldr	r3, [r7, #0]
 80302be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80302c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80302c4:	d10c      	bne.n	80302e0 <FMC_NORSRAM_Init+0xf8>
 80302c6:	683b      	ldr	r3, [r7, #0]
 80302c8:	681b      	ldr	r3, [r3, #0]
 80302ca:	2b00      	cmp	r3, #0
 80302cc:	d008      	beq.n	80302e0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80302ce:	687b      	ldr	r3, [r7, #4]
 80302d0:	681b      	ldr	r3, [r3, #0]
 80302d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80302d6:	683b      	ldr	r3, [r7, #0]
 80302d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80302da:	431a      	orrs	r2, r3
 80302dc:	687b      	ldr	r3, [r7, #4]
 80302de:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80302e0:	683b      	ldr	r3, [r7, #0]
 80302e2:	681b      	ldr	r3, [r3, #0]
 80302e4:	2b00      	cmp	r3, #0
 80302e6:	d006      	beq.n	80302f6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80302e8:	687b      	ldr	r3, [r7, #4]
 80302ea:	681a      	ldr	r2, [r3, #0]
 80302ec:	683b      	ldr	r3, [r7, #0]
 80302ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80302f0:	431a      	orrs	r2, r3
 80302f2:	687b      	ldr	r3, [r7, #4]
 80302f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80302f6:	2300      	movs	r3, #0
}
 80302f8:	4618      	mov	r0, r3
 80302fa:	371c      	adds	r7, #28
 80302fc:	46bd      	mov	sp, r7
 80302fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030302:	4770      	bx	lr
 8030304:	0008fb7f 	.word	0x0008fb7f

08030308 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8030308:	b480      	push	{r7}
 803030a:	b087      	sub	sp, #28
 803030c:	af00      	add	r7, sp, #0
 803030e:	60f8      	str	r0, [r7, #12]
 8030310:	60b9      	str	r1, [r7, #8]
 8030312:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8030314:	687b      	ldr	r3, [r7, #4]
 8030316:	1c5a      	adds	r2, r3, #1
 8030318:	68fb      	ldr	r3, [r7, #12]
 803031a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803031e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8030322:	68bb      	ldr	r3, [r7, #8]
 8030324:	681a      	ldr	r2, [r3, #0]
 8030326:	68bb      	ldr	r3, [r7, #8]
 8030328:	685b      	ldr	r3, [r3, #4]
 803032a:	011b      	lsls	r3, r3, #4
 803032c:	431a      	orrs	r2, r3
 803032e:	68bb      	ldr	r3, [r7, #8]
 8030330:	689b      	ldr	r3, [r3, #8]
 8030332:	021b      	lsls	r3, r3, #8
 8030334:	431a      	orrs	r2, r3
 8030336:	68bb      	ldr	r3, [r7, #8]
 8030338:	68db      	ldr	r3, [r3, #12]
 803033a:	041b      	lsls	r3, r3, #16
 803033c:	431a      	orrs	r2, r3
 803033e:	68bb      	ldr	r3, [r7, #8]
 8030340:	691b      	ldr	r3, [r3, #16]
 8030342:	3b01      	subs	r3, #1
 8030344:	051b      	lsls	r3, r3, #20
 8030346:	431a      	orrs	r2, r3
 8030348:	68bb      	ldr	r3, [r7, #8]
 803034a:	695b      	ldr	r3, [r3, #20]
 803034c:	3b02      	subs	r3, #2
 803034e:	061b      	lsls	r3, r3, #24
 8030350:	431a      	orrs	r2, r3
 8030352:	68bb      	ldr	r3, [r7, #8]
 8030354:	699b      	ldr	r3, [r3, #24]
 8030356:	4313      	orrs	r3, r2
 8030358:	687a      	ldr	r2, [r7, #4]
 803035a:	3201      	adds	r2, #1
 803035c:	4319      	orrs	r1, r3
 803035e:	68fb      	ldr	r3, [r7, #12]
 8030360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8030364:	68fb      	ldr	r3, [r7, #12]
 8030366:	681b      	ldr	r3, [r3, #0]
 8030368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 803036c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8030370:	d113      	bne.n	803039a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8030372:	68fb      	ldr	r3, [r7, #12]
 8030374:	685b      	ldr	r3, [r3, #4]
 8030376:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 803037a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 803037c:	68bb      	ldr	r3, [r7, #8]
 803037e:	691b      	ldr	r3, [r3, #16]
 8030380:	3b01      	subs	r3, #1
 8030382:	051b      	lsls	r3, r3, #20
 8030384:	697a      	ldr	r2, [r7, #20]
 8030386:	4313      	orrs	r3, r2
 8030388:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 803038a:	68fb      	ldr	r3, [r7, #12]
 803038c:	685b      	ldr	r3, [r3, #4]
 803038e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8030392:	697b      	ldr	r3, [r7, #20]
 8030394:	431a      	orrs	r2, r3
 8030396:	68fb      	ldr	r3, [r7, #12]
 8030398:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 803039a:	2300      	movs	r3, #0
}
 803039c:	4618      	mov	r0, r3
 803039e:	371c      	adds	r7, #28
 80303a0:	46bd      	mov	sp, r7
 80303a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80303a6:	4770      	bx	lr

080303a8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80303a8:	b480      	push	{r7}
 80303aa:	b085      	sub	sp, #20
 80303ac:	af00      	add	r7, sp, #0
 80303ae:	60f8      	str	r0, [r7, #12]
 80303b0:	60b9      	str	r1, [r7, #8]
 80303b2:	607a      	str	r2, [r7, #4]
 80303b4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80303b6:	683b      	ldr	r3, [r7, #0]
 80303b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80303bc:	d11d      	bne.n	80303fa <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80303be:	68fb      	ldr	r3, [r7, #12]
 80303c0:	687a      	ldr	r2, [r7, #4]
 80303c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80303c6:	4b13      	ldr	r3, [pc, #76]	; (8030414 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80303c8:	4013      	ands	r3, r2
 80303ca:	68ba      	ldr	r2, [r7, #8]
 80303cc:	6811      	ldr	r1, [r2, #0]
 80303ce:	68ba      	ldr	r2, [r7, #8]
 80303d0:	6852      	ldr	r2, [r2, #4]
 80303d2:	0112      	lsls	r2, r2, #4
 80303d4:	4311      	orrs	r1, r2
 80303d6:	68ba      	ldr	r2, [r7, #8]
 80303d8:	6892      	ldr	r2, [r2, #8]
 80303da:	0212      	lsls	r2, r2, #8
 80303dc:	4311      	orrs	r1, r2
 80303de:	68ba      	ldr	r2, [r7, #8]
 80303e0:	6992      	ldr	r2, [r2, #24]
 80303e2:	4311      	orrs	r1, r2
 80303e4:	68ba      	ldr	r2, [r7, #8]
 80303e6:	68d2      	ldr	r2, [r2, #12]
 80303e8:	0412      	lsls	r2, r2, #16
 80303ea:	430a      	orrs	r2, r1
 80303ec:	ea43 0102 	orr.w	r1, r3, r2
 80303f0:	68fb      	ldr	r3, [r7, #12]
 80303f2:	687a      	ldr	r2, [r7, #4]
 80303f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80303f8:	e005      	b.n	8030406 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80303fa:	68fb      	ldr	r3, [r7, #12]
 80303fc:	687a      	ldr	r2, [r7, #4]
 80303fe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8030402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8030406:	2300      	movs	r3, #0
}
 8030408:	4618      	mov	r0, r3
 803040a:	3714      	adds	r7, #20
 803040c:	46bd      	mov	sp, r7
 803040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030412:	4770      	bx	lr
 8030414:	cff00000 	.word	0xcff00000

08030418 <Print2Hex>:
*           nLen - data length
* Return:   None
* comments: print title and hex data with 16 characters a line
*******************************************************************************/
void Print2Hex(char* szTitle, void* pBuff, int nLen)
{
 8030418:	b580      	push	{r7, lr}
 803041a:	b086      	sub	sp, #24
 803041c:	af00      	add	r7, sp, #0
 803041e:	60f8      	str	r0, [r7, #12]
 8030420:	60b9      	str	r1, [r7, #8]
 8030422:	607a      	str	r2, [r7, #4]
	int i;
	char *pcBuff = (char*)pBuff;
 8030424:	68bb      	ldr	r3, [r7, #8]
 8030426:	613b      	str	r3, [r7, #16]

	//PRINT("Recv: %s", szTitle);
	printf("Recv: %s", szTitle);
 8030428:	68f9      	ldr	r1, [r7, #12]
 803042a:	4812      	ldr	r0, [pc, #72]	; (8030474 <Print2Hex+0x5c>)
 803042c:	f7f8 ffde 	bl	80293ec <printf_>
	for (i=0; i<nLen; i++)
 8030430:	2300      	movs	r3, #0
 8030432:	617b      	str	r3, [r7, #20]
 8030434:	e012      	b.n	803045c <Print2Hex+0x44>
	{
		//if (!(i%16)) PRINT("\r\n");
		if (!(i%16)) printf("\r\n");
 8030436:	697b      	ldr	r3, [r7, #20]
 8030438:	f003 030f 	and.w	r3, r3, #15
 803043c:	2b00      	cmp	r3, #0
 803043e:	d102      	bne.n	8030446 <Print2Hex+0x2e>
 8030440:	480d      	ldr	r0, [pc, #52]	; (8030478 <Print2Hex+0x60>)
 8030442:	f7f8 ffd3 	bl	80293ec <printf_>

		//PRINT("%x ", *pcBuff++);
		printf("%x ", *pcBuff++);
 8030446:	693b      	ldr	r3, [r7, #16]
 8030448:	1c5a      	adds	r2, r3, #1
 803044a:	613a      	str	r2, [r7, #16]
 803044c:	781b      	ldrb	r3, [r3, #0]
 803044e:	4619      	mov	r1, r3
 8030450:	480a      	ldr	r0, [pc, #40]	; (803047c <Print2Hex+0x64>)
 8030452:	f7f8 ffcb 	bl	80293ec <printf_>
	for (i=0; i<nLen; i++)
 8030456:	697b      	ldr	r3, [r7, #20]
 8030458:	3301      	adds	r3, #1
 803045a:	617b      	str	r3, [r7, #20]
 803045c:	697a      	ldr	r2, [r7, #20]
 803045e:	687b      	ldr	r3, [r7, #4]
 8030460:	429a      	cmp	r2, r3
 8030462:	dbe8      	blt.n	8030436 <Print2Hex+0x1e>
	}
	//PRINT("\r\n");
	printf("\r\n");
 8030464:	4804      	ldr	r0, [pc, #16]	; (8030478 <Print2Hex+0x60>)
 8030466:	f7f8 ffc1 	bl	80293ec <printf_>
}
 803046a:	bf00      	nop
 803046c:	3718      	adds	r7, #24
 803046e:	46bd      	mov	sp, r7
 8030470:	bd80      	pop	{r7, pc}
 8030472:	bf00      	nop
 8030474:	08032d38 	.word	0x08032d38
 8030478:	08032d34 	.word	0x08032d34
 803047c:	08032d44 	.word	0x08032d44

08030480 <SetTimer>:

	TIM_CounterConfig(DELAY_TIM, TIM_STOP);	// Stop Timer
}
#endif
void SetTimer(TTIMER *pTimer)
{
 8030480:	b480      	push	{r7}
 8030482:	b083      	sub	sp, #12
 8030484:	af00      	add	r7, sp, #0
 8030486:	6078      	str	r0, [r7, #4]
	pTimer->fStart = TRUE;
 8030488:	687b      	ldr	r3, [r7, #4]
 803048a:	2201      	movs	r2, #1
 803048c:	701a      	strb	r2, [r3, #0]
	pTimer->dwStartTick = gdwTick;
 803048e:	4b05      	ldr	r3, [pc, #20]	; (80304a4 <SetTimer+0x24>)
 8030490:	681a      	ldr	r2, [r3, #0]
 8030492:	687b      	ldr	r3, [r7, #4]
 8030494:	605a      	str	r2, [r3, #4]
}
 8030496:	bf00      	nop
 8030498:	370c      	adds	r7, #12
 803049a:	46bd      	mov	sp, r7
 803049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80304a0:	4770      	bx	lr
 80304a2:	bf00      	nop
 80304a4:	24001f40 	.word	0x24001f40

080304a8 <ResetTimer>:

void ResetTimer(TTIMER *pTimer)
{
 80304a8:	b480      	push	{r7}
 80304aa:	b083      	sub	sp, #12
 80304ac:	af00      	add	r7, sp, #0
 80304ae:	6078      	str	r0, [r7, #4]
	pTimer->fStart = FALSE;
 80304b0:	687b      	ldr	r3, [r7, #4]
 80304b2:	2200      	movs	r2, #0
 80304b4:	701a      	strb	r2, [r3, #0]
}
 80304b6:	bf00      	nop
 80304b8:	370c      	adds	r7, #12
 80304ba:	46bd      	mov	sp, r7
 80304bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80304c0:	4770      	bx	lr
	...

080304c4 <IsTimeout>:
* Out:      None
* Return:   void
* comments: Timeout range is between 0 and (0xFFFFFFFF * 10ms)
*******************************************************************************/
bool IsTimeout(TTIMER *pTimer, DWORD dwTimeout)
{
 80304c4:	b480      	push	{r7}
 80304c6:	b085      	sub	sp, #20
 80304c8:	af00      	add	r7, sp, #0
 80304ca:	6078      	str	r0, [r7, #4]
 80304cc:	6039      	str	r1, [r7, #0]
	bool	fTimeout = FALSE;
 80304ce:	2300      	movs	r3, #0
 80304d0:	73fb      	strb	r3, [r7, #15]
	DWORD	dwCurrentTick;

	if (pTimer->fStart)
 80304d2:	687b      	ldr	r3, [r7, #4]
 80304d4:	781b      	ldrb	r3, [r3, #0]
 80304d6:	2b00      	cmp	r3, #0
 80304d8:	d01b      	beq.n	8030512 <IsTimeout+0x4e>
	{
		dwCurrentTick = gdwTick;
 80304da:	4b11      	ldr	r3, [pc, #68]	; (8030520 <IsTimeout+0x5c>)
 80304dc:	681b      	ldr	r3, [r3, #0]
 80304de:	60bb      	str	r3, [r7, #8]

		if (dwCurrentTick >= pTimer->dwStartTick )
 80304e0:	687b      	ldr	r3, [r7, #4]
 80304e2:	685b      	ldr	r3, [r3, #4]
 80304e4:	68ba      	ldr	r2, [r7, #8]
 80304e6:	429a      	cmp	r2, r3
 80304e8:	d309      	bcc.n	80304fe <IsTimeout+0x3a>
		{
			if ( (dwCurrentTick - pTimer->dwStartTick) >= dwTimeout )
 80304ea:	687b      	ldr	r3, [r7, #4]
 80304ec:	685b      	ldr	r3, [r3, #4]
 80304ee:	68ba      	ldr	r2, [r7, #8]
 80304f0:	1ad3      	subs	r3, r2, r3
 80304f2:	683a      	ldr	r2, [r7, #0]
 80304f4:	429a      	cmp	r2, r3
 80304f6:	d80c      	bhi.n	8030512 <IsTimeout+0x4e>
				fTimeout = TRUE;
 80304f8:	2301      	movs	r3, #1
 80304fa:	73fb      	strb	r3, [r7, #15]
 80304fc:	e009      	b.n	8030512 <IsTimeout+0x4e>
		}
		else // in case of (dwCurrentTick < pTimer->dwStartTick)
		{
			if ( (0xFFFFFFFF - pTimer->dwStartTick + dwCurrentTick) >= dwTimeout )
 80304fe:	687b      	ldr	r3, [r7, #4]
 8030500:	685b      	ldr	r3, [r3, #4]
 8030502:	68ba      	ldr	r2, [r7, #8]
 8030504:	1ad3      	subs	r3, r2, r3
 8030506:	3b01      	subs	r3, #1
 8030508:	683a      	ldr	r2, [r7, #0]
 803050a:	429a      	cmp	r2, r3
 803050c:	d801      	bhi.n	8030512 <IsTimeout+0x4e>
				fTimeout = TRUE;
 803050e:	2301      	movs	r3, #1
 8030510:	73fb      	strb	r3, [r7, #15]
		}
	}

	return fTimeout;
 8030512:	7bfb      	ldrb	r3, [r7, #15]
}
 8030514:	4618      	mov	r0, r3
 8030516:	3714      	adds	r7, #20
 8030518:	46bd      	mov	sp, r7
 803051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803051e:	4770      	bx	lr
 8030520:	24001f40 	.word	0x24001f40

08030524 <__errno>:
 8030524:	4b01      	ldr	r3, [pc, #4]	; (803052c <__errno+0x8>)
 8030526:	6818      	ldr	r0, [r3, #0]
 8030528:	4770      	bx	lr
 803052a:	bf00      	nop
 803052c:	24000050 	.word	0x24000050

08030530 <__libc_init_array>:
 8030530:	b570      	push	{r4, r5, r6, lr}
 8030532:	4d0d      	ldr	r5, [pc, #52]	; (8030568 <__libc_init_array+0x38>)
 8030534:	4c0d      	ldr	r4, [pc, #52]	; (803056c <__libc_init_array+0x3c>)
 8030536:	1b64      	subs	r4, r4, r5
 8030538:	10a4      	asrs	r4, r4, #2
 803053a:	2600      	movs	r6, #0
 803053c:	42a6      	cmp	r6, r4
 803053e:	d109      	bne.n	8030554 <__libc_init_array+0x24>
 8030540:	4d0b      	ldr	r5, [pc, #44]	; (8030570 <__libc_init_array+0x40>)
 8030542:	4c0c      	ldr	r4, [pc, #48]	; (8030574 <__libc_init_array+0x44>)
 8030544:	f001 fa6e 	bl	8031a24 <_init>
 8030548:	1b64      	subs	r4, r4, r5
 803054a:	10a4      	asrs	r4, r4, #2
 803054c:	2600      	movs	r6, #0
 803054e:	42a6      	cmp	r6, r4
 8030550:	d105      	bne.n	803055e <__libc_init_array+0x2e>
 8030552:	bd70      	pop	{r4, r5, r6, pc}
 8030554:	f855 3b04 	ldr.w	r3, [r5], #4
 8030558:	4798      	blx	r3
 803055a:	3601      	adds	r6, #1
 803055c:	e7ee      	b.n	803053c <__libc_init_array+0xc>
 803055e:	f855 3b04 	ldr.w	r3, [r5], #4
 8030562:	4798      	blx	r3
 8030564:	3601      	adds	r6, #1
 8030566:	e7f2      	b.n	803054e <__libc_init_array+0x1e>
 8030568:	08032f7c 	.word	0x08032f7c
 803056c:	08032f7c 	.word	0x08032f7c
 8030570:	08032f7c 	.word	0x08032f7c
 8030574:	08032f80 	.word	0x08032f80

08030578 <memcmp>:
 8030578:	b510      	push	{r4, lr}
 803057a:	3901      	subs	r1, #1
 803057c:	4402      	add	r2, r0
 803057e:	4290      	cmp	r0, r2
 8030580:	d101      	bne.n	8030586 <memcmp+0xe>
 8030582:	2000      	movs	r0, #0
 8030584:	e005      	b.n	8030592 <memcmp+0x1a>
 8030586:	7803      	ldrb	r3, [r0, #0]
 8030588:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 803058c:	42a3      	cmp	r3, r4
 803058e:	d001      	beq.n	8030594 <memcmp+0x1c>
 8030590:	1b18      	subs	r0, r3, r4
 8030592:	bd10      	pop	{r4, pc}
 8030594:	3001      	adds	r0, #1
 8030596:	e7f2      	b.n	803057e <memcmp+0x6>

08030598 <memcpy>:
 8030598:	440a      	add	r2, r1
 803059a:	4291      	cmp	r1, r2
 803059c:	f100 33ff 	add.w	r3, r0, #4294967295
 80305a0:	d100      	bne.n	80305a4 <memcpy+0xc>
 80305a2:	4770      	bx	lr
 80305a4:	b510      	push	{r4, lr}
 80305a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80305aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80305ae:	4291      	cmp	r1, r2
 80305b0:	d1f9      	bne.n	80305a6 <memcpy+0xe>
 80305b2:	bd10      	pop	{r4, pc}

080305b4 <memset>:
 80305b4:	4402      	add	r2, r0
 80305b6:	4603      	mov	r3, r0
 80305b8:	4293      	cmp	r3, r2
 80305ba:	d100      	bne.n	80305be <memset+0xa>
 80305bc:	4770      	bx	lr
 80305be:	f803 1b01 	strb.w	r1, [r3], #1
 80305c2:	e7f9      	b.n	80305b8 <memset+0x4>

080305c4 <_free_r>:
 80305c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80305c6:	2900      	cmp	r1, #0
 80305c8:	d044      	beq.n	8030654 <_free_r+0x90>
 80305ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80305ce:	9001      	str	r0, [sp, #4]
 80305d0:	2b00      	cmp	r3, #0
 80305d2:	f1a1 0404 	sub.w	r4, r1, #4
 80305d6:	bfb8      	it	lt
 80305d8:	18e4      	addlt	r4, r4, r3
 80305da:	f000 fc87 	bl	8030eec <__malloc_lock>
 80305de:	4a1e      	ldr	r2, [pc, #120]	; (8030658 <_free_r+0x94>)
 80305e0:	9801      	ldr	r0, [sp, #4]
 80305e2:	6813      	ldr	r3, [r2, #0]
 80305e4:	b933      	cbnz	r3, 80305f4 <_free_r+0x30>
 80305e6:	6063      	str	r3, [r4, #4]
 80305e8:	6014      	str	r4, [r2, #0]
 80305ea:	b003      	add	sp, #12
 80305ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80305f0:	f000 bc82 	b.w	8030ef8 <__malloc_unlock>
 80305f4:	42a3      	cmp	r3, r4
 80305f6:	d908      	bls.n	803060a <_free_r+0x46>
 80305f8:	6825      	ldr	r5, [r4, #0]
 80305fa:	1961      	adds	r1, r4, r5
 80305fc:	428b      	cmp	r3, r1
 80305fe:	bf01      	itttt	eq
 8030600:	6819      	ldreq	r1, [r3, #0]
 8030602:	685b      	ldreq	r3, [r3, #4]
 8030604:	1949      	addeq	r1, r1, r5
 8030606:	6021      	streq	r1, [r4, #0]
 8030608:	e7ed      	b.n	80305e6 <_free_r+0x22>
 803060a:	461a      	mov	r2, r3
 803060c:	685b      	ldr	r3, [r3, #4]
 803060e:	b10b      	cbz	r3, 8030614 <_free_r+0x50>
 8030610:	42a3      	cmp	r3, r4
 8030612:	d9fa      	bls.n	803060a <_free_r+0x46>
 8030614:	6811      	ldr	r1, [r2, #0]
 8030616:	1855      	adds	r5, r2, r1
 8030618:	42a5      	cmp	r5, r4
 803061a:	d10b      	bne.n	8030634 <_free_r+0x70>
 803061c:	6824      	ldr	r4, [r4, #0]
 803061e:	4421      	add	r1, r4
 8030620:	1854      	adds	r4, r2, r1
 8030622:	42a3      	cmp	r3, r4
 8030624:	6011      	str	r1, [r2, #0]
 8030626:	d1e0      	bne.n	80305ea <_free_r+0x26>
 8030628:	681c      	ldr	r4, [r3, #0]
 803062a:	685b      	ldr	r3, [r3, #4]
 803062c:	6053      	str	r3, [r2, #4]
 803062e:	4421      	add	r1, r4
 8030630:	6011      	str	r1, [r2, #0]
 8030632:	e7da      	b.n	80305ea <_free_r+0x26>
 8030634:	d902      	bls.n	803063c <_free_r+0x78>
 8030636:	230c      	movs	r3, #12
 8030638:	6003      	str	r3, [r0, #0]
 803063a:	e7d6      	b.n	80305ea <_free_r+0x26>
 803063c:	6825      	ldr	r5, [r4, #0]
 803063e:	1961      	adds	r1, r4, r5
 8030640:	428b      	cmp	r3, r1
 8030642:	bf04      	itt	eq
 8030644:	6819      	ldreq	r1, [r3, #0]
 8030646:	685b      	ldreq	r3, [r3, #4]
 8030648:	6063      	str	r3, [r4, #4]
 803064a:	bf04      	itt	eq
 803064c:	1949      	addeq	r1, r1, r5
 803064e:	6021      	streq	r1, [r4, #0]
 8030650:	6054      	str	r4, [r2, #4]
 8030652:	e7ca      	b.n	80305ea <_free_r+0x26>
 8030654:	b003      	add	sp, #12
 8030656:	bd30      	pop	{r4, r5, pc}
 8030658:	24001f44 	.word	0x24001f44

0803065c <sbrk_aligned>:
 803065c:	b570      	push	{r4, r5, r6, lr}
 803065e:	4e0e      	ldr	r6, [pc, #56]	; (8030698 <sbrk_aligned+0x3c>)
 8030660:	460c      	mov	r4, r1
 8030662:	6831      	ldr	r1, [r6, #0]
 8030664:	4605      	mov	r5, r0
 8030666:	b911      	cbnz	r1, 803066e <sbrk_aligned+0x12>
 8030668:	f000 f930 	bl	80308cc <_sbrk_r>
 803066c:	6030      	str	r0, [r6, #0]
 803066e:	4621      	mov	r1, r4
 8030670:	4628      	mov	r0, r5
 8030672:	f000 f92b 	bl	80308cc <_sbrk_r>
 8030676:	1c43      	adds	r3, r0, #1
 8030678:	d00a      	beq.n	8030690 <sbrk_aligned+0x34>
 803067a:	1cc4      	adds	r4, r0, #3
 803067c:	f024 0403 	bic.w	r4, r4, #3
 8030680:	42a0      	cmp	r0, r4
 8030682:	d007      	beq.n	8030694 <sbrk_aligned+0x38>
 8030684:	1a21      	subs	r1, r4, r0
 8030686:	4628      	mov	r0, r5
 8030688:	f000 f920 	bl	80308cc <_sbrk_r>
 803068c:	3001      	adds	r0, #1
 803068e:	d101      	bne.n	8030694 <sbrk_aligned+0x38>
 8030690:	f04f 34ff 	mov.w	r4, #4294967295
 8030694:	4620      	mov	r0, r4
 8030696:	bd70      	pop	{r4, r5, r6, pc}
 8030698:	24001f48 	.word	0x24001f48

0803069c <_malloc_r>:
 803069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80306a0:	1ccd      	adds	r5, r1, #3
 80306a2:	f025 0503 	bic.w	r5, r5, #3
 80306a6:	3508      	adds	r5, #8
 80306a8:	2d0c      	cmp	r5, #12
 80306aa:	bf38      	it	cc
 80306ac:	250c      	movcc	r5, #12
 80306ae:	2d00      	cmp	r5, #0
 80306b0:	4607      	mov	r7, r0
 80306b2:	db01      	blt.n	80306b8 <_malloc_r+0x1c>
 80306b4:	42a9      	cmp	r1, r5
 80306b6:	d905      	bls.n	80306c4 <_malloc_r+0x28>
 80306b8:	230c      	movs	r3, #12
 80306ba:	603b      	str	r3, [r7, #0]
 80306bc:	2600      	movs	r6, #0
 80306be:	4630      	mov	r0, r6
 80306c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80306c4:	4e2e      	ldr	r6, [pc, #184]	; (8030780 <_malloc_r+0xe4>)
 80306c6:	f000 fc11 	bl	8030eec <__malloc_lock>
 80306ca:	6833      	ldr	r3, [r6, #0]
 80306cc:	461c      	mov	r4, r3
 80306ce:	bb34      	cbnz	r4, 803071e <_malloc_r+0x82>
 80306d0:	4629      	mov	r1, r5
 80306d2:	4638      	mov	r0, r7
 80306d4:	f7ff ffc2 	bl	803065c <sbrk_aligned>
 80306d8:	1c43      	adds	r3, r0, #1
 80306da:	4604      	mov	r4, r0
 80306dc:	d14d      	bne.n	803077a <_malloc_r+0xde>
 80306de:	6834      	ldr	r4, [r6, #0]
 80306e0:	4626      	mov	r6, r4
 80306e2:	2e00      	cmp	r6, #0
 80306e4:	d140      	bne.n	8030768 <_malloc_r+0xcc>
 80306e6:	6823      	ldr	r3, [r4, #0]
 80306e8:	4631      	mov	r1, r6
 80306ea:	4638      	mov	r0, r7
 80306ec:	eb04 0803 	add.w	r8, r4, r3
 80306f0:	f000 f8ec 	bl	80308cc <_sbrk_r>
 80306f4:	4580      	cmp	r8, r0
 80306f6:	d13a      	bne.n	803076e <_malloc_r+0xd2>
 80306f8:	6821      	ldr	r1, [r4, #0]
 80306fa:	3503      	adds	r5, #3
 80306fc:	1a6d      	subs	r5, r5, r1
 80306fe:	f025 0503 	bic.w	r5, r5, #3
 8030702:	3508      	adds	r5, #8
 8030704:	2d0c      	cmp	r5, #12
 8030706:	bf38      	it	cc
 8030708:	250c      	movcc	r5, #12
 803070a:	4629      	mov	r1, r5
 803070c:	4638      	mov	r0, r7
 803070e:	f7ff ffa5 	bl	803065c <sbrk_aligned>
 8030712:	3001      	adds	r0, #1
 8030714:	d02b      	beq.n	803076e <_malloc_r+0xd2>
 8030716:	6823      	ldr	r3, [r4, #0]
 8030718:	442b      	add	r3, r5
 803071a:	6023      	str	r3, [r4, #0]
 803071c:	e00e      	b.n	803073c <_malloc_r+0xa0>
 803071e:	6822      	ldr	r2, [r4, #0]
 8030720:	1b52      	subs	r2, r2, r5
 8030722:	d41e      	bmi.n	8030762 <_malloc_r+0xc6>
 8030724:	2a0b      	cmp	r2, #11
 8030726:	d916      	bls.n	8030756 <_malloc_r+0xba>
 8030728:	1961      	adds	r1, r4, r5
 803072a:	42a3      	cmp	r3, r4
 803072c:	6025      	str	r5, [r4, #0]
 803072e:	bf18      	it	ne
 8030730:	6059      	strne	r1, [r3, #4]
 8030732:	6863      	ldr	r3, [r4, #4]
 8030734:	bf08      	it	eq
 8030736:	6031      	streq	r1, [r6, #0]
 8030738:	5162      	str	r2, [r4, r5]
 803073a:	604b      	str	r3, [r1, #4]
 803073c:	4638      	mov	r0, r7
 803073e:	f104 060b 	add.w	r6, r4, #11
 8030742:	f000 fbd9 	bl	8030ef8 <__malloc_unlock>
 8030746:	f026 0607 	bic.w	r6, r6, #7
 803074a:	1d23      	adds	r3, r4, #4
 803074c:	1af2      	subs	r2, r6, r3
 803074e:	d0b6      	beq.n	80306be <_malloc_r+0x22>
 8030750:	1b9b      	subs	r3, r3, r6
 8030752:	50a3      	str	r3, [r4, r2]
 8030754:	e7b3      	b.n	80306be <_malloc_r+0x22>
 8030756:	6862      	ldr	r2, [r4, #4]
 8030758:	42a3      	cmp	r3, r4
 803075a:	bf0c      	ite	eq
 803075c:	6032      	streq	r2, [r6, #0]
 803075e:	605a      	strne	r2, [r3, #4]
 8030760:	e7ec      	b.n	803073c <_malloc_r+0xa0>
 8030762:	4623      	mov	r3, r4
 8030764:	6864      	ldr	r4, [r4, #4]
 8030766:	e7b2      	b.n	80306ce <_malloc_r+0x32>
 8030768:	4634      	mov	r4, r6
 803076a:	6876      	ldr	r6, [r6, #4]
 803076c:	e7b9      	b.n	80306e2 <_malloc_r+0x46>
 803076e:	230c      	movs	r3, #12
 8030770:	603b      	str	r3, [r7, #0]
 8030772:	4638      	mov	r0, r7
 8030774:	f000 fbc0 	bl	8030ef8 <__malloc_unlock>
 8030778:	e7a1      	b.n	80306be <_malloc_r+0x22>
 803077a:	6025      	str	r5, [r4, #0]
 803077c:	e7de      	b.n	803073c <_malloc_r+0xa0>
 803077e:	bf00      	nop
 8030780:	24001f44 	.word	0x24001f44

08030784 <iprintf>:
 8030784:	b40f      	push	{r0, r1, r2, r3}
 8030786:	4b0a      	ldr	r3, [pc, #40]	; (80307b0 <iprintf+0x2c>)
 8030788:	b513      	push	{r0, r1, r4, lr}
 803078a:	681c      	ldr	r4, [r3, #0]
 803078c:	b124      	cbz	r4, 8030798 <iprintf+0x14>
 803078e:	69a3      	ldr	r3, [r4, #24]
 8030790:	b913      	cbnz	r3, 8030798 <iprintf+0x14>
 8030792:	4620      	mov	r0, r4
 8030794:	f000 faa4 	bl	8030ce0 <__sinit>
 8030798:	ab05      	add	r3, sp, #20
 803079a:	9a04      	ldr	r2, [sp, #16]
 803079c:	68a1      	ldr	r1, [r4, #8]
 803079e:	9301      	str	r3, [sp, #4]
 80307a0:	4620      	mov	r0, r4
 80307a2:	f000 fd35 	bl	8031210 <_vfiprintf_r>
 80307a6:	b002      	add	sp, #8
 80307a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80307ac:	b004      	add	sp, #16
 80307ae:	4770      	bx	lr
 80307b0:	24000050 	.word	0x24000050

080307b4 <putchar>:
 80307b4:	4b09      	ldr	r3, [pc, #36]	; (80307dc <putchar+0x28>)
 80307b6:	b513      	push	{r0, r1, r4, lr}
 80307b8:	681c      	ldr	r4, [r3, #0]
 80307ba:	4601      	mov	r1, r0
 80307bc:	b134      	cbz	r4, 80307cc <putchar+0x18>
 80307be:	69a3      	ldr	r3, [r4, #24]
 80307c0:	b923      	cbnz	r3, 80307cc <putchar+0x18>
 80307c2:	9001      	str	r0, [sp, #4]
 80307c4:	4620      	mov	r0, r4
 80307c6:	f000 fa8b 	bl	8030ce0 <__sinit>
 80307ca:	9901      	ldr	r1, [sp, #4]
 80307cc:	68a2      	ldr	r2, [r4, #8]
 80307ce:	4620      	mov	r0, r4
 80307d0:	b002      	add	sp, #8
 80307d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80307d6:	f000 bfdf 	b.w	8031798 <_putc_r>
 80307da:	bf00      	nop
 80307dc:	24000050 	.word	0x24000050

080307e0 <_puts_r>:
 80307e0:	b570      	push	{r4, r5, r6, lr}
 80307e2:	460e      	mov	r6, r1
 80307e4:	4605      	mov	r5, r0
 80307e6:	b118      	cbz	r0, 80307f0 <_puts_r+0x10>
 80307e8:	6983      	ldr	r3, [r0, #24]
 80307ea:	b90b      	cbnz	r3, 80307f0 <_puts_r+0x10>
 80307ec:	f000 fa78 	bl	8030ce0 <__sinit>
 80307f0:	69ab      	ldr	r3, [r5, #24]
 80307f2:	68ac      	ldr	r4, [r5, #8]
 80307f4:	b913      	cbnz	r3, 80307fc <_puts_r+0x1c>
 80307f6:	4628      	mov	r0, r5
 80307f8:	f000 fa72 	bl	8030ce0 <__sinit>
 80307fc:	4b2c      	ldr	r3, [pc, #176]	; (80308b0 <_puts_r+0xd0>)
 80307fe:	429c      	cmp	r4, r3
 8030800:	d120      	bne.n	8030844 <_puts_r+0x64>
 8030802:	686c      	ldr	r4, [r5, #4]
 8030804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030806:	07db      	lsls	r3, r3, #31
 8030808:	d405      	bmi.n	8030816 <_puts_r+0x36>
 803080a:	89a3      	ldrh	r3, [r4, #12]
 803080c:	0598      	lsls	r0, r3, #22
 803080e:	d402      	bmi.n	8030816 <_puts_r+0x36>
 8030810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030812:	f000 fb03 	bl	8030e1c <__retarget_lock_acquire_recursive>
 8030816:	89a3      	ldrh	r3, [r4, #12]
 8030818:	0719      	lsls	r1, r3, #28
 803081a:	d51d      	bpl.n	8030858 <_puts_r+0x78>
 803081c:	6923      	ldr	r3, [r4, #16]
 803081e:	b1db      	cbz	r3, 8030858 <_puts_r+0x78>
 8030820:	3e01      	subs	r6, #1
 8030822:	68a3      	ldr	r3, [r4, #8]
 8030824:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8030828:	3b01      	subs	r3, #1
 803082a:	60a3      	str	r3, [r4, #8]
 803082c:	bb39      	cbnz	r1, 803087e <_puts_r+0x9e>
 803082e:	2b00      	cmp	r3, #0
 8030830:	da38      	bge.n	80308a4 <_puts_r+0xc4>
 8030832:	4622      	mov	r2, r4
 8030834:	210a      	movs	r1, #10
 8030836:	4628      	mov	r0, r5
 8030838:	f000 f878 	bl	803092c <__swbuf_r>
 803083c:	3001      	adds	r0, #1
 803083e:	d011      	beq.n	8030864 <_puts_r+0x84>
 8030840:	250a      	movs	r5, #10
 8030842:	e011      	b.n	8030868 <_puts_r+0x88>
 8030844:	4b1b      	ldr	r3, [pc, #108]	; (80308b4 <_puts_r+0xd4>)
 8030846:	429c      	cmp	r4, r3
 8030848:	d101      	bne.n	803084e <_puts_r+0x6e>
 803084a:	68ac      	ldr	r4, [r5, #8]
 803084c:	e7da      	b.n	8030804 <_puts_r+0x24>
 803084e:	4b1a      	ldr	r3, [pc, #104]	; (80308b8 <_puts_r+0xd8>)
 8030850:	429c      	cmp	r4, r3
 8030852:	bf08      	it	eq
 8030854:	68ec      	ldreq	r4, [r5, #12]
 8030856:	e7d5      	b.n	8030804 <_puts_r+0x24>
 8030858:	4621      	mov	r1, r4
 803085a:	4628      	mov	r0, r5
 803085c:	f000 f8b8 	bl	80309d0 <__swsetup_r>
 8030860:	2800      	cmp	r0, #0
 8030862:	d0dd      	beq.n	8030820 <_puts_r+0x40>
 8030864:	f04f 35ff 	mov.w	r5, #4294967295
 8030868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803086a:	07da      	lsls	r2, r3, #31
 803086c:	d405      	bmi.n	803087a <_puts_r+0x9a>
 803086e:	89a3      	ldrh	r3, [r4, #12]
 8030870:	059b      	lsls	r3, r3, #22
 8030872:	d402      	bmi.n	803087a <_puts_r+0x9a>
 8030874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030876:	f000 fad2 	bl	8030e1e <__retarget_lock_release_recursive>
 803087a:	4628      	mov	r0, r5
 803087c:	bd70      	pop	{r4, r5, r6, pc}
 803087e:	2b00      	cmp	r3, #0
 8030880:	da04      	bge.n	803088c <_puts_r+0xac>
 8030882:	69a2      	ldr	r2, [r4, #24]
 8030884:	429a      	cmp	r2, r3
 8030886:	dc06      	bgt.n	8030896 <_puts_r+0xb6>
 8030888:	290a      	cmp	r1, #10
 803088a:	d004      	beq.n	8030896 <_puts_r+0xb6>
 803088c:	6823      	ldr	r3, [r4, #0]
 803088e:	1c5a      	adds	r2, r3, #1
 8030890:	6022      	str	r2, [r4, #0]
 8030892:	7019      	strb	r1, [r3, #0]
 8030894:	e7c5      	b.n	8030822 <_puts_r+0x42>
 8030896:	4622      	mov	r2, r4
 8030898:	4628      	mov	r0, r5
 803089a:	f000 f847 	bl	803092c <__swbuf_r>
 803089e:	3001      	adds	r0, #1
 80308a0:	d1bf      	bne.n	8030822 <_puts_r+0x42>
 80308a2:	e7df      	b.n	8030864 <_puts_r+0x84>
 80308a4:	6823      	ldr	r3, [r4, #0]
 80308a6:	250a      	movs	r5, #10
 80308a8:	1c5a      	adds	r2, r3, #1
 80308aa:	6022      	str	r2, [r4, #0]
 80308ac:	701d      	strb	r5, [r3, #0]
 80308ae:	e7db      	b.n	8030868 <_puts_r+0x88>
 80308b0:	08032f00 	.word	0x08032f00
 80308b4:	08032f20 	.word	0x08032f20
 80308b8:	08032ee0 	.word	0x08032ee0

080308bc <puts>:
 80308bc:	4b02      	ldr	r3, [pc, #8]	; (80308c8 <puts+0xc>)
 80308be:	4601      	mov	r1, r0
 80308c0:	6818      	ldr	r0, [r3, #0]
 80308c2:	f7ff bf8d 	b.w	80307e0 <_puts_r>
 80308c6:	bf00      	nop
 80308c8:	24000050 	.word	0x24000050

080308cc <_sbrk_r>:
 80308cc:	b538      	push	{r3, r4, r5, lr}
 80308ce:	4d06      	ldr	r5, [pc, #24]	; (80308e8 <_sbrk_r+0x1c>)
 80308d0:	2300      	movs	r3, #0
 80308d2:	4604      	mov	r4, r0
 80308d4:	4608      	mov	r0, r1
 80308d6:	602b      	str	r3, [r5, #0]
 80308d8:	f7f9 fa38 	bl	8029d4c <_sbrk>
 80308dc:	1c43      	adds	r3, r0, #1
 80308de:	d102      	bne.n	80308e6 <_sbrk_r+0x1a>
 80308e0:	682b      	ldr	r3, [r5, #0]
 80308e2:	b103      	cbz	r3, 80308e6 <_sbrk_r+0x1a>
 80308e4:	6023      	str	r3, [r4, #0]
 80308e6:	bd38      	pop	{r3, r4, r5, pc}
 80308e8:	24001f50 	.word	0x24001f50

080308ec <siprintf>:
 80308ec:	b40e      	push	{r1, r2, r3}
 80308ee:	b500      	push	{lr}
 80308f0:	b09c      	sub	sp, #112	; 0x70
 80308f2:	ab1d      	add	r3, sp, #116	; 0x74
 80308f4:	9002      	str	r0, [sp, #8]
 80308f6:	9006      	str	r0, [sp, #24]
 80308f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80308fc:	4809      	ldr	r0, [pc, #36]	; (8030924 <siprintf+0x38>)
 80308fe:	9107      	str	r1, [sp, #28]
 8030900:	9104      	str	r1, [sp, #16]
 8030902:	4909      	ldr	r1, [pc, #36]	; (8030928 <siprintf+0x3c>)
 8030904:	f853 2b04 	ldr.w	r2, [r3], #4
 8030908:	9105      	str	r1, [sp, #20]
 803090a:	6800      	ldr	r0, [r0, #0]
 803090c:	9301      	str	r3, [sp, #4]
 803090e:	a902      	add	r1, sp, #8
 8030910:	f000 fb54 	bl	8030fbc <_svfiprintf_r>
 8030914:	9b02      	ldr	r3, [sp, #8]
 8030916:	2200      	movs	r2, #0
 8030918:	701a      	strb	r2, [r3, #0]
 803091a:	b01c      	add	sp, #112	; 0x70
 803091c:	f85d eb04 	ldr.w	lr, [sp], #4
 8030920:	b003      	add	sp, #12
 8030922:	4770      	bx	lr
 8030924:	24000050 	.word	0x24000050
 8030928:	ffff0208 	.word	0xffff0208

0803092c <__swbuf_r>:
 803092c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803092e:	460e      	mov	r6, r1
 8030930:	4614      	mov	r4, r2
 8030932:	4605      	mov	r5, r0
 8030934:	b118      	cbz	r0, 803093e <__swbuf_r+0x12>
 8030936:	6983      	ldr	r3, [r0, #24]
 8030938:	b90b      	cbnz	r3, 803093e <__swbuf_r+0x12>
 803093a:	f000 f9d1 	bl	8030ce0 <__sinit>
 803093e:	4b21      	ldr	r3, [pc, #132]	; (80309c4 <__swbuf_r+0x98>)
 8030940:	429c      	cmp	r4, r3
 8030942:	d12b      	bne.n	803099c <__swbuf_r+0x70>
 8030944:	686c      	ldr	r4, [r5, #4]
 8030946:	69a3      	ldr	r3, [r4, #24]
 8030948:	60a3      	str	r3, [r4, #8]
 803094a:	89a3      	ldrh	r3, [r4, #12]
 803094c:	071a      	lsls	r2, r3, #28
 803094e:	d52f      	bpl.n	80309b0 <__swbuf_r+0x84>
 8030950:	6923      	ldr	r3, [r4, #16]
 8030952:	b36b      	cbz	r3, 80309b0 <__swbuf_r+0x84>
 8030954:	6923      	ldr	r3, [r4, #16]
 8030956:	6820      	ldr	r0, [r4, #0]
 8030958:	1ac0      	subs	r0, r0, r3
 803095a:	6963      	ldr	r3, [r4, #20]
 803095c:	b2f6      	uxtb	r6, r6
 803095e:	4283      	cmp	r3, r0
 8030960:	4637      	mov	r7, r6
 8030962:	dc04      	bgt.n	803096e <__swbuf_r+0x42>
 8030964:	4621      	mov	r1, r4
 8030966:	4628      	mov	r0, r5
 8030968:	f000 f926 	bl	8030bb8 <_fflush_r>
 803096c:	bb30      	cbnz	r0, 80309bc <__swbuf_r+0x90>
 803096e:	68a3      	ldr	r3, [r4, #8]
 8030970:	3b01      	subs	r3, #1
 8030972:	60a3      	str	r3, [r4, #8]
 8030974:	6823      	ldr	r3, [r4, #0]
 8030976:	1c5a      	adds	r2, r3, #1
 8030978:	6022      	str	r2, [r4, #0]
 803097a:	701e      	strb	r6, [r3, #0]
 803097c:	6963      	ldr	r3, [r4, #20]
 803097e:	3001      	adds	r0, #1
 8030980:	4283      	cmp	r3, r0
 8030982:	d004      	beq.n	803098e <__swbuf_r+0x62>
 8030984:	89a3      	ldrh	r3, [r4, #12]
 8030986:	07db      	lsls	r3, r3, #31
 8030988:	d506      	bpl.n	8030998 <__swbuf_r+0x6c>
 803098a:	2e0a      	cmp	r6, #10
 803098c:	d104      	bne.n	8030998 <__swbuf_r+0x6c>
 803098e:	4621      	mov	r1, r4
 8030990:	4628      	mov	r0, r5
 8030992:	f000 f911 	bl	8030bb8 <_fflush_r>
 8030996:	b988      	cbnz	r0, 80309bc <__swbuf_r+0x90>
 8030998:	4638      	mov	r0, r7
 803099a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803099c:	4b0a      	ldr	r3, [pc, #40]	; (80309c8 <__swbuf_r+0x9c>)
 803099e:	429c      	cmp	r4, r3
 80309a0:	d101      	bne.n	80309a6 <__swbuf_r+0x7a>
 80309a2:	68ac      	ldr	r4, [r5, #8]
 80309a4:	e7cf      	b.n	8030946 <__swbuf_r+0x1a>
 80309a6:	4b09      	ldr	r3, [pc, #36]	; (80309cc <__swbuf_r+0xa0>)
 80309a8:	429c      	cmp	r4, r3
 80309aa:	bf08      	it	eq
 80309ac:	68ec      	ldreq	r4, [r5, #12]
 80309ae:	e7ca      	b.n	8030946 <__swbuf_r+0x1a>
 80309b0:	4621      	mov	r1, r4
 80309b2:	4628      	mov	r0, r5
 80309b4:	f000 f80c 	bl	80309d0 <__swsetup_r>
 80309b8:	2800      	cmp	r0, #0
 80309ba:	d0cb      	beq.n	8030954 <__swbuf_r+0x28>
 80309bc:	f04f 37ff 	mov.w	r7, #4294967295
 80309c0:	e7ea      	b.n	8030998 <__swbuf_r+0x6c>
 80309c2:	bf00      	nop
 80309c4:	08032f00 	.word	0x08032f00
 80309c8:	08032f20 	.word	0x08032f20
 80309cc:	08032ee0 	.word	0x08032ee0

080309d0 <__swsetup_r>:
 80309d0:	4b32      	ldr	r3, [pc, #200]	; (8030a9c <__swsetup_r+0xcc>)
 80309d2:	b570      	push	{r4, r5, r6, lr}
 80309d4:	681d      	ldr	r5, [r3, #0]
 80309d6:	4606      	mov	r6, r0
 80309d8:	460c      	mov	r4, r1
 80309da:	b125      	cbz	r5, 80309e6 <__swsetup_r+0x16>
 80309dc:	69ab      	ldr	r3, [r5, #24]
 80309de:	b913      	cbnz	r3, 80309e6 <__swsetup_r+0x16>
 80309e0:	4628      	mov	r0, r5
 80309e2:	f000 f97d 	bl	8030ce0 <__sinit>
 80309e6:	4b2e      	ldr	r3, [pc, #184]	; (8030aa0 <__swsetup_r+0xd0>)
 80309e8:	429c      	cmp	r4, r3
 80309ea:	d10f      	bne.n	8030a0c <__swsetup_r+0x3c>
 80309ec:	686c      	ldr	r4, [r5, #4]
 80309ee:	89a3      	ldrh	r3, [r4, #12]
 80309f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80309f4:	0719      	lsls	r1, r3, #28
 80309f6:	d42c      	bmi.n	8030a52 <__swsetup_r+0x82>
 80309f8:	06dd      	lsls	r5, r3, #27
 80309fa:	d411      	bmi.n	8030a20 <__swsetup_r+0x50>
 80309fc:	2309      	movs	r3, #9
 80309fe:	6033      	str	r3, [r6, #0]
 8030a00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8030a04:	81a3      	strh	r3, [r4, #12]
 8030a06:	f04f 30ff 	mov.w	r0, #4294967295
 8030a0a:	e03e      	b.n	8030a8a <__swsetup_r+0xba>
 8030a0c:	4b25      	ldr	r3, [pc, #148]	; (8030aa4 <__swsetup_r+0xd4>)
 8030a0e:	429c      	cmp	r4, r3
 8030a10:	d101      	bne.n	8030a16 <__swsetup_r+0x46>
 8030a12:	68ac      	ldr	r4, [r5, #8]
 8030a14:	e7eb      	b.n	80309ee <__swsetup_r+0x1e>
 8030a16:	4b24      	ldr	r3, [pc, #144]	; (8030aa8 <__swsetup_r+0xd8>)
 8030a18:	429c      	cmp	r4, r3
 8030a1a:	bf08      	it	eq
 8030a1c:	68ec      	ldreq	r4, [r5, #12]
 8030a1e:	e7e6      	b.n	80309ee <__swsetup_r+0x1e>
 8030a20:	0758      	lsls	r0, r3, #29
 8030a22:	d512      	bpl.n	8030a4a <__swsetup_r+0x7a>
 8030a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8030a26:	b141      	cbz	r1, 8030a3a <__swsetup_r+0x6a>
 8030a28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030a2c:	4299      	cmp	r1, r3
 8030a2e:	d002      	beq.n	8030a36 <__swsetup_r+0x66>
 8030a30:	4630      	mov	r0, r6
 8030a32:	f7ff fdc7 	bl	80305c4 <_free_r>
 8030a36:	2300      	movs	r3, #0
 8030a38:	6363      	str	r3, [r4, #52]	; 0x34
 8030a3a:	89a3      	ldrh	r3, [r4, #12]
 8030a3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8030a40:	81a3      	strh	r3, [r4, #12]
 8030a42:	2300      	movs	r3, #0
 8030a44:	6063      	str	r3, [r4, #4]
 8030a46:	6923      	ldr	r3, [r4, #16]
 8030a48:	6023      	str	r3, [r4, #0]
 8030a4a:	89a3      	ldrh	r3, [r4, #12]
 8030a4c:	f043 0308 	orr.w	r3, r3, #8
 8030a50:	81a3      	strh	r3, [r4, #12]
 8030a52:	6923      	ldr	r3, [r4, #16]
 8030a54:	b94b      	cbnz	r3, 8030a6a <__swsetup_r+0x9a>
 8030a56:	89a3      	ldrh	r3, [r4, #12]
 8030a58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8030a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8030a60:	d003      	beq.n	8030a6a <__swsetup_r+0x9a>
 8030a62:	4621      	mov	r1, r4
 8030a64:	4630      	mov	r0, r6
 8030a66:	f000 fa01 	bl	8030e6c <__smakebuf_r>
 8030a6a:	89a0      	ldrh	r0, [r4, #12]
 8030a6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8030a70:	f010 0301 	ands.w	r3, r0, #1
 8030a74:	d00a      	beq.n	8030a8c <__swsetup_r+0xbc>
 8030a76:	2300      	movs	r3, #0
 8030a78:	60a3      	str	r3, [r4, #8]
 8030a7a:	6963      	ldr	r3, [r4, #20]
 8030a7c:	425b      	negs	r3, r3
 8030a7e:	61a3      	str	r3, [r4, #24]
 8030a80:	6923      	ldr	r3, [r4, #16]
 8030a82:	b943      	cbnz	r3, 8030a96 <__swsetup_r+0xc6>
 8030a84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8030a88:	d1ba      	bne.n	8030a00 <__swsetup_r+0x30>
 8030a8a:	bd70      	pop	{r4, r5, r6, pc}
 8030a8c:	0781      	lsls	r1, r0, #30
 8030a8e:	bf58      	it	pl
 8030a90:	6963      	ldrpl	r3, [r4, #20]
 8030a92:	60a3      	str	r3, [r4, #8]
 8030a94:	e7f4      	b.n	8030a80 <__swsetup_r+0xb0>
 8030a96:	2000      	movs	r0, #0
 8030a98:	e7f7      	b.n	8030a8a <__swsetup_r+0xba>
 8030a9a:	bf00      	nop
 8030a9c:	24000050 	.word	0x24000050
 8030aa0:	08032f00 	.word	0x08032f00
 8030aa4:	08032f20 	.word	0x08032f20
 8030aa8:	08032ee0 	.word	0x08032ee0

08030aac <__sflush_r>:
 8030aac:	898a      	ldrh	r2, [r1, #12]
 8030aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030ab2:	4605      	mov	r5, r0
 8030ab4:	0710      	lsls	r0, r2, #28
 8030ab6:	460c      	mov	r4, r1
 8030ab8:	d458      	bmi.n	8030b6c <__sflush_r+0xc0>
 8030aba:	684b      	ldr	r3, [r1, #4]
 8030abc:	2b00      	cmp	r3, #0
 8030abe:	dc05      	bgt.n	8030acc <__sflush_r+0x20>
 8030ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8030ac2:	2b00      	cmp	r3, #0
 8030ac4:	dc02      	bgt.n	8030acc <__sflush_r+0x20>
 8030ac6:	2000      	movs	r0, #0
 8030ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030ace:	2e00      	cmp	r6, #0
 8030ad0:	d0f9      	beq.n	8030ac6 <__sflush_r+0x1a>
 8030ad2:	2300      	movs	r3, #0
 8030ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8030ad8:	682f      	ldr	r7, [r5, #0]
 8030ada:	602b      	str	r3, [r5, #0]
 8030adc:	d032      	beq.n	8030b44 <__sflush_r+0x98>
 8030ade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8030ae0:	89a3      	ldrh	r3, [r4, #12]
 8030ae2:	075a      	lsls	r2, r3, #29
 8030ae4:	d505      	bpl.n	8030af2 <__sflush_r+0x46>
 8030ae6:	6863      	ldr	r3, [r4, #4]
 8030ae8:	1ac0      	subs	r0, r0, r3
 8030aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8030aec:	b10b      	cbz	r3, 8030af2 <__sflush_r+0x46>
 8030aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030af0:	1ac0      	subs	r0, r0, r3
 8030af2:	2300      	movs	r3, #0
 8030af4:	4602      	mov	r2, r0
 8030af6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030af8:	6a21      	ldr	r1, [r4, #32]
 8030afa:	4628      	mov	r0, r5
 8030afc:	47b0      	blx	r6
 8030afe:	1c43      	adds	r3, r0, #1
 8030b00:	89a3      	ldrh	r3, [r4, #12]
 8030b02:	d106      	bne.n	8030b12 <__sflush_r+0x66>
 8030b04:	6829      	ldr	r1, [r5, #0]
 8030b06:	291d      	cmp	r1, #29
 8030b08:	d82c      	bhi.n	8030b64 <__sflush_r+0xb8>
 8030b0a:	4a2a      	ldr	r2, [pc, #168]	; (8030bb4 <__sflush_r+0x108>)
 8030b0c:	40ca      	lsrs	r2, r1
 8030b0e:	07d6      	lsls	r6, r2, #31
 8030b10:	d528      	bpl.n	8030b64 <__sflush_r+0xb8>
 8030b12:	2200      	movs	r2, #0
 8030b14:	6062      	str	r2, [r4, #4]
 8030b16:	04d9      	lsls	r1, r3, #19
 8030b18:	6922      	ldr	r2, [r4, #16]
 8030b1a:	6022      	str	r2, [r4, #0]
 8030b1c:	d504      	bpl.n	8030b28 <__sflush_r+0x7c>
 8030b1e:	1c42      	adds	r2, r0, #1
 8030b20:	d101      	bne.n	8030b26 <__sflush_r+0x7a>
 8030b22:	682b      	ldr	r3, [r5, #0]
 8030b24:	b903      	cbnz	r3, 8030b28 <__sflush_r+0x7c>
 8030b26:	6560      	str	r0, [r4, #84]	; 0x54
 8030b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8030b2a:	602f      	str	r7, [r5, #0]
 8030b2c:	2900      	cmp	r1, #0
 8030b2e:	d0ca      	beq.n	8030ac6 <__sflush_r+0x1a>
 8030b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030b34:	4299      	cmp	r1, r3
 8030b36:	d002      	beq.n	8030b3e <__sflush_r+0x92>
 8030b38:	4628      	mov	r0, r5
 8030b3a:	f7ff fd43 	bl	80305c4 <_free_r>
 8030b3e:	2000      	movs	r0, #0
 8030b40:	6360      	str	r0, [r4, #52]	; 0x34
 8030b42:	e7c1      	b.n	8030ac8 <__sflush_r+0x1c>
 8030b44:	6a21      	ldr	r1, [r4, #32]
 8030b46:	2301      	movs	r3, #1
 8030b48:	4628      	mov	r0, r5
 8030b4a:	47b0      	blx	r6
 8030b4c:	1c41      	adds	r1, r0, #1
 8030b4e:	d1c7      	bne.n	8030ae0 <__sflush_r+0x34>
 8030b50:	682b      	ldr	r3, [r5, #0]
 8030b52:	2b00      	cmp	r3, #0
 8030b54:	d0c4      	beq.n	8030ae0 <__sflush_r+0x34>
 8030b56:	2b1d      	cmp	r3, #29
 8030b58:	d001      	beq.n	8030b5e <__sflush_r+0xb2>
 8030b5a:	2b16      	cmp	r3, #22
 8030b5c:	d101      	bne.n	8030b62 <__sflush_r+0xb6>
 8030b5e:	602f      	str	r7, [r5, #0]
 8030b60:	e7b1      	b.n	8030ac6 <__sflush_r+0x1a>
 8030b62:	89a3      	ldrh	r3, [r4, #12]
 8030b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030b68:	81a3      	strh	r3, [r4, #12]
 8030b6a:	e7ad      	b.n	8030ac8 <__sflush_r+0x1c>
 8030b6c:	690f      	ldr	r7, [r1, #16]
 8030b6e:	2f00      	cmp	r7, #0
 8030b70:	d0a9      	beq.n	8030ac6 <__sflush_r+0x1a>
 8030b72:	0793      	lsls	r3, r2, #30
 8030b74:	680e      	ldr	r6, [r1, #0]
 8030b76:	bf08      	it	eq
 8030b78:	694b      	ldreq	r3, [r1, #20]
 8030b7a:	600f      	str	r7, [r1, #0]
 8030b7c:	bf18      	it	ne
 8030b7e:	2300      	movne	r3, #0
 8030b80:	eba6 0807 	sub.w	r8, r6, r7
 8030b84:	608b      	str	r3, [r1, #8]
 8030b86:	f1b8 0f00 	cmp.w	r8, #0
 8030b8a:	dd9c      	ble.n	8030ac6 <__sflush_r+0x1a>
 8030b8c:	6a21      	ldr	r1, [r4, #32]
 8030b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8030b90:	4643      	mov	r3, r8
 8030b92:	463a      	mov	r2, r7
 8030b94:	4628      	mov	r0, r5
 8030b96:	47b0      	blx	r6
 8030b98:	2800      	cmp	r0, #0
 8030b9a:	dc06      	bgt.n	8030baa <__sflush_r+0xfe>
 8030b9c:	89a3      	ldrh	r3, [r4, #12]
 8030b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030ba2:	81a3      	strh	r3, [r4, #12]
 8030ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8030ba8:	e78e      	b.n	8030ac8 <__sflush_r+0x1c>
 8030baa:	4407      	add	r7, r0
 8030bac:	eba8 0800 	sub.w	r8, r8, r0
 8030bb0:	e7e9      	b.n	8030b86 <__sflush_r+0xda>
 8030bb2:	bf00      	nop
 8030bb4:	20400001 	.word	0x20400001

08030bb8 <_fflush_r>:
 8030bb8:	b538      	push	{r3, r4, r5, lr}
 8030bba:	690b      	ldr	r3, [r1, #16]
 8030bbc:	4605      	mov	r5, r0
 8030bbe:	460c      	mov	r4, r1
 8030bc0:	b913      	cbnz	r3, 8030bc8 <_fflush_r+0x10>
 8030bc2:	2500      	movs	r5, #0
 8030bc4:	4628      	mov	r0, r5
 8030bc6:	bd38      	pop	{r3, r4, r5, pc}
 8030bc8:	b118      	cbz	r0, 8030bd2 <_fflush_r+0x1a>
 8030bca:	6983      	ldr	r3, [r0, #24]
 8030bcc:	b90b      	cbnz	r3, 8030bd2 <_fflush_r+0x1a>
 8030bce:	f000 f887 	bl	8030ce0 <__sinit>
 8030bd2:	4b14      	ldr	r3, [pc, #80]	; (8030c24 <_fflush_r+0x6c>)
 8030bd4:	429c      	cmp	r4, r3
 8030bd6:	d11b      	bne.n	8030c10 <_fflush_r+0x58>
 8030bd8:	686c      	ldr	r4, [r5, #4]
 8030bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030bde:	2b00      	cmp	r3, #0
 8030be0:	d0ef      	beq.n	8030bc2 <_fflush_r+0xa>
 8030be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8030be4:	07d0      	lsls	r0, r2, #31
 8030be6:	d404      	bmi.n	8030bf2 <_fflush_r+0x3a>
 8030be8:	0599      	lsls	r1, r3, #22
 8030bea:	d402      	bmi.n	8030bf2 <_fflush_r+0x3a>
 8030bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030bee:	f000 f915 	bl	8030e1c <__retarget_lock_acquire_recursive>
 8030bf2:	4628      	mov	r0, r5
 8030bf4:	4621      	mov	r1, r4
 8030bf6:	f7ff ff59 	bl	8030aac <__sflush_r>
 8030bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030bfc:	07da      	lsls	r2, r3, #31
 8030bfe:	4605      	mov	r5, r0
 8030c00:	d4e0      	bmi.n	8030bc4 <_fflush_r+0xc>
 8030c02:	89a3      	ldrh	r3, [r4, #12]
 8030c04:	059b      	lsls	r3, r3, #22
 8030c06:	d4dd      	bmi.n	8030bc4 <_fflush_r+0xc>
 8030c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030c0a:	f000 f908 	bl	8030e1e <__retarget_lock_release_recursive>
 8030c0e:	e7d9      	b.n	8030bc4 <_fflush_r+0xc>
 8030c10:	4b05      	ldr	r3, [pc, #20]	; (8030c28 <_fflush_r+0x70>)
 8030c12:	429c      	cmp	r4, r3
 8030c14:	d101      	bne.n	8030c1a <_fflush_r+0x62>
 8030c16:	68ac      	ldr	r4, [r5, #8]
 8030c18:	e7df      	b.n	8030bda <_fflush_r+0x22>
 8030c1a:	4b04      	ldr	r3, [pc, #16]	; (8030c2c <_fflush_r+0x74>)
 8030c1c:	429c      	cmp	r4, r3
 8030c1e:	bf08      	it	eq
 8030c20:	68ec      	ldreq	r4, [r5, #12]
 8030c22:	e7da      	b.n	8030bda <_fflush_r+0x22>
 8030c24:	08032f00 	.word	0x08032f00
 8030c28:	08032f20 	.word	0x08032f20
 8030c2c:	08032ee0 	.word	0x08032ee0

08030c30 <std>:
 8030c30:	2300      	movs	r3, #0
 8030c32:	b510      	push	{r4, lr}
 8030c34:	4604      	mov	r4, r0
 8030c36:	e9c0 3300 	strd	r3, r3, [r0]
 8030c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8030c3e:	6083      	str	r3, [r0, #8]
 8030c40:	8181      	strh	r1, [r0, #12]
 8030c42:	6643      	str	r3, [r0, #100]	; 0x64
 8030c44:	81c2      	strh	r2, [r0, #14]
 8030c46:	6183      	str	r3, [r0, #24]
 8030c48:	4619      	mov	r1, r3
 8030c4a:	2208      	movs	r2, #8
 8030c4c:	305c      	adds	r0, #92	; 0x5c
 8030c4e:	f7ff fcb1 	bl	80305b4 <memset>
 8030c52:	4b05      	ldr	r3, [pc, #20]	; (8030c68 <std+0x38>)
 8030c54:	6263      	str	r3, [r4, #36]	; 0x24
 8030c56:	4b05      	ldr	r3, [pc, #20]	; (8030c6c <std+0x3c>)
 8030c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8030c5a:	4b05      	ldr	r3, [pc, #20]	; (8030c70 <std+0x40>)
 8030c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8030c5e:	4b05      	ldr	r3, [pc, #20]	; (8030c74 <std+0x44>)
 8030c60:	6224      	str	r4, [r4, #32]
 8030c62:	6323      	str	r3, [r4, #48]	; 0x30
 8030c64:	bd10      	pop	{r4, pc}
 8030c66:	bf00      	nop
 8030c68:	08031829 	.word	0x08031829
 8030c6c:	0803184b 	.word	0x0803184b
 8030c70:	08031883 	.word	0x08031883
 8030c74:	080318a7 	.word	0x080318a7

08030c78 <_cleanup_r>:
 8030c78:	4901      	ldr	r1, [pc, #4]	; (8030c80 <_cleanup_r+0x8>)
 8030c7a:	f000 b8af 	b.w	8030ddc <_fwalk_reent>
 8030c7e:	bf00      	nop
 8030c80:	08030bb9 	.word	0x08030bb9

08030c84 <__sfmoreglue>:
 8030c84:	b570      	push	{r4, r5, r6, lr}
 8030c86:	2268      	movs	r2, #104	; 0x68
 8030c88:	1e4d      	subs	r5, r1, #1
 8030c8a:	4355      	muls	r5, r2
 8030c8c:	460e      	mov	r6, r1
 8030c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8030c92:	f7ff fd03 	bl	803069c <_malloc_r>
 8030c96:	4604      	mov	r4, r0
 8030c98:	b140      	cbz	r0, 8030cac <__sfmoreglue+0x28>
 8030c9a:	2100      	movs	r1, #0
 8030c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8030ca0:	300c      	adds	r0, #12
 8030ca2:	60a0      	str	r0, [r4, #8]
 8030ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8030ca8:	f7ff fc84 	bl	80305b4 <memset>
 8030cac:	4620      	mov	r0, r4
 8030cae:	bd70      	pop	{r4, r5, r6, pc}

08030cb0 <__sfp_lock_acquire>:
 8030cb0:	4801      	ldr	r0, [pc, #4]	; (8030cb8 <__sfp_lock_acquire+0x8>)
 8030cb2:	f000 b8b3 	b.w	8030e1c <__retarget_lock_acquire_recursive>
 8030cb6:	bf00      	nop
 8030cb8:	24001f4d 	.word	0x24001f4d

08030cbc <__sfp_lock_release>:
 8030cbc:	4801      	ldr	r0, [pc, #4]	; (8030cc4 <__sfp_lock_release+0x8>)
 8030cbe:	f000 b8ae 	b.w	8030e1e <__retarget_lock_release_recursive>
 8030cc2:	bf00      	nop
 8030cc4:	24001f4d 	.word	0x24001f4d

08030cc8 <__sinit_lock_acquire>:
 8030cc8:	4801      	ldr	r0, [pc, #4]	; (8030cd0 <__sinit_lock_acquire+0x8>)
 8030cca:	f000 b8a7 	b.w	8030e1c <__retarget_lock_acquire_recursive>
 8030cce:	bf00      	nop
 8030cd0:	24001f4e 	.word	0x24001f4e

08030cd4 <__sinit_lock_release>:
 8030cd4:	4801      	ldr	r0, [pc, #4]	; (8030cdc <__sinit_lock_release+0x8>)
 8030cd6:	f000 b8a2 	b.w	8030e1e <__retarget_lock_release_recursive>
 8030cda:	bf00      	nop
 8030cdc:	24001f4e 	.word	0x24001f4e

08030ce0 <__sinit>:
 8030ce0:	b510      	push	{r4, lr}
 8030ce2:	4604      	mov	r4, r0
 8030ce4:	f7ff fff0 	bl	8030cc8 <__sinit_lock_acquire>
 8030ce8:	69a3      	ldr	r3, [r4, #24]
 8030cea:	b11b      	cbz	r3, 8030cf4 <__sinit+0x14>
 8030cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8030cf0:	f7ff bff0 	b.w	8030cd4 <__sinit_lock_release>
 8030cf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8030cf8:	6523      	str	r3, [r4, #80]	; 0x50
 8030cfa:	4b13      	ldr	r3, [pc, #76]	; (8030d48 <__sinit+0x68>)
 8030cfc:	4a13      	ldr	r2, [pc, #76]	; (8030d4c <__sinit+0x6c>)
 8030cfe:	681b      	ldr	r3, [r3, #0]
 8030d00:	62a2      	str	r2, [r4, #40]	; 0x28
 8030d02:	42a3      	cmp	r3, r4
 8030d04:	bf04      	itt	eq
 8030d06:	2301      	moveq	r3, #1
 8030d08:	61a3      	streq	r3, [r4, #24]
 8030d0a:	4620      	mov	r0, r4
 8030d0c:	f000 f820 	bl	8030d50 <__sfp>
 8030d10:	6060      	str	r0, [r4, #4]
 8030d12:	4620      	mov	r0, r4
 8030d14:	f000 f81c 	bl	8030d50 <__sfp>
 8030d18:	60a0      	str	r0, [r4, #8]
 8030d1a:	4620      	mov	r0, r4
 8030d1c:	f000 f818 	bl	8030d50 <__sfp>
 8030d20:	2200      	movs	r2, #0
 8030d22:	60e0      	str	r0, [r4, #12]
 8030d24:	2104      	movs	r1, #4
 8030d26:	6860      	ldr	r0, [r4, #4]
 8030d28:	f7ff ff82 	bl	8030c30 <std>
 8030d2c:	68a0      	ldr	r0, [r4, #8]
 8030d2e:	2201      	movs	r2, #1
 8030d30:	2109      	movs	r1, #9
 8030d32:	f7ff ff7d 	bl	8030c30 <std>
 8030d36:	68e0      	ldr	r0, [r4, #12]
 8030d38:	2202      	movs	r2, #2
 8030d3a:	2112      	movs	r1, #18
 8030d3c:	f7ff ff78 	bl	8030c30 <std>
 8030d40:	2301      	movs	r3, #1
 8030d42:	61a3      	str	r3, [r4, #24]
 8030d44:	e7d2      	b.n	8030cec <__sinit+0xc>
 8030d46:	bf00      	nop
 8030d48:	08032edc 	.word	0x08032edc
 8030d4c:	08030c79 	.word	0x08030c79

08030d50 <__sfp>:
 8030d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030d52:	4607      	mov	r7, r0
 8030d54:	f7ff ffac 	bl	8030cb0 <__sfp_lock_acquire>
 8030d58:	4b1e      	ldr	r3, [pc, #120]	; (8030dd4 <__sfp+0x84>)
 8030d5a:	681e      	ldr	r6, [r3, #0]
 8030d5c:	69b3      	ldr	r3, [r6, #24]
 8030d5e:	b913      	cbnz	r3, 8030d66 <__sfp+0x16>
 8030d60:	4630      	mov	r0, r6
 8030d62:	f7ff ffbd 	bl	8030ce0 <__sinit>
 8030d66:	3648      	adds	r6, #72	; 0x48
 8030d68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8030d6c:	3b01      	subs	r3, #1
 8030d6e:	d503      	bpl.n	8030d78 <__sfp+0x28>
 8030d70:	6833      	ldr	r3, [r6, #0]
 8030d72:	b30b      	cbz	r3, 8030db8 <__sfp+0x68>
 8030d74:	6836      	ldr	r6, [r6, #0]
 8030d76:	e7f7      	b.n	8030d68 <__sfp+0x18>
 8030d78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8030d7c:	b9d5      	cbnz	r5, 8030db4 <__sfp+0x64>
 8030d7e:	4b16      	ldr	r3, [pc, #88]	; (8030dd8 <__sfp+0x88>)
 8030d80:	60e3      	str	r3, [r4, #12]
 8030d82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8030d86:	6665      	str	r5, [r4, #100]	; 0x64
 8030d88:	f000 f847 	bl	8030e1a <__retarget_lock_init_recursive>
 8030d8c:	f7ff ff96 	bl	8030cbc <__sfp_lock_release>
 8030d90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8030d94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8030d98:	6025      	str	r5, [r4, #0]
 8030d9a:	61a5      	str	r5, [r4, #24]
 8030d9c:	2208      	movs	r2, #8
 8030d9e:	4629      	mov	r1, r5
 8030da0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8030da4:	f7ff fc06 	bl	80305b4 <memset>
 8030da8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8030dac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8030db0:	4620      	mov	r0, r4
 8030db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8030db4:	3468      	adds	r4, #104	; 0x68
 8030db6:	e7d9      	b.n	8030d6c <__sfp+0x1c>
 8030db8:	2104      	movs	r1, #4
 8030dba:	4638      	mov	r0, r7
 8030dbc:	f7ff ff62 	bl	8030c84 <__sfmoreglue>
 8030dc0:	4604      	mov	r4, r0
 8030dc2:	6030      	str	r0, [r6, #0]
 8030dc4:	2800      	cmp	r0, #0
 8030dc6:	d1d5      	bne.n	8030d74 <__sfp+0x24>
 8030dc8:	f7ff ff78 	bl	8030cbc <__sfp_lock_release>
 8030dcc:	230c      	movs	r3, #12
 8030dce:	603b      	str	r3, [r7, #0]
 8030dd0:	e7ee      	b.n	8030db0 <__sfp+0x60>
 8030dd2:	bf00      	nop
 8030dd4:	08032edc 	.word	0x08032edc
 8030dd8:	ffff0001 	.word	0xffff0001

08030ddc <_fwalk_reent>:
 8030ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030de0:	4606      	mov	r6, r0
 8030de2:	4688      	mov	r8, r1
 8030de4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8030de8:	2700      	movs	r7, #0
 8030dea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8030dee:	f1b9 0901 	subs.w	r9, r9, #1
 8030df2:	d505      	bpl.n	8030e00 <_fwalk_reent+0x24>
 8030df4:	6824      	ldr	r4, [r4, #0]
 8030df6:	2c00      	cmp	r4, #0
 8030df8:	d1f7      	bne.n	8030dea <_fwalk_reent+0xe>
 8030dfa:	4638      	mov	r0, r7
 8030dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8030e00:	89ab      	ldrh	r3, [r5, #12]
 8030e02:	2b01      	cmp	r3, #1
 8030e04:	d907      	bls.n	8030e16 <_fwalk_reent+0x3a>
 8030e06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8030e0a:	3301      	adds	r3, #1
 8030e0c:	d003      	beq.n	8030e16 <_fwalk_reent+0x3a>
 8030e0e:	4629      	mov	r1, r5
 8030e10:	4630      	mov	r0, r6
 8030e12:	47c0      	blx	r8
 8030e14:	4307      	orrs	r7, r0
 8030e16:	3568      	adds	r5, #104	; 0x68
 8030e18:	e7e9      	b.n	8030dee <_fwalk_reent+0x12>

08030e1a <__retarget_lock_init_recursive>:
 8030e1a:	4770      	bx	lr

08030e1c <__retarget_lock_acquire_recursive>:
 8030e1c:	4770      	bx	lr

08030e1e <__retarget_lock_release_recursive>:
 8030e1e:	4770      	bx	lr

08030e20 <__swhatbuf_r>:
 8030e20:	b570      	push	{r4, r5, r6, lr}
 8030e22:	460e      	mov	r6, r1
 8030e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030e28:	2900      	cmp	r1, #0
 8030e2a:	b096      	sub	sp, #88	; 0x58
 8030e2c:	4614      	mov	r4, r2
 8030e2e:	461d      	mov	r5, r3
 8030e30:	da08      	bge.n	8030e44 <__swhatbuf_r+0x24>
 8030e32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8030e36:	2200      	movs	r2, #0
 8030e38:	602a      	str	r2, [r5, #0]
 8030e3a:	061a      	lsls	r2, r3, #24
 8030e3c:	d410      	bmi.n	8030e60 <__swhatbuf_r+0x40>
 8030e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030e42:	e00e      	b.n	8030e62 <__swhatbuf_r+0x42>
 8030e44:	466a      	mov	r2, sp
 8030e46:	f000 fd55 	bl	80318f4 <_fstat_r>
 8030e4a:	2800      	cmp	r0, #0
 8030e4c:	dbf1      	blt.n	8030e32 <__swhatbuf_r+0x12>
 8030e4e:	9a01      	ldr	r2, [sp, #4]
 8030e50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8030e54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8030e58:	425a      	negs	r2, r3
 8030e5a:	415a      	adcs	r2, r3
 8030e5c:	602a      	str	r2, [r5, #0]
 8030e5e:	e7ee      	b.n	8030e3e <__swhatbuf_r+0x1e>
 8030e60:	2340      	movs	r3, #64	; 0x40
 8030e62:	2000      	movs	r0, #0
 8030e64:	6023      	str	r3, [r4, #0]
 8030e66:	b016      	add	sp, #88	; 0x58
 8030e68:	bd70      	pop	{r4, r5, r6, pc}
	...

08030e6c <__smakebuf_r>:
 8030e6c:	898b      	ldrh	r3, [r1, #12]
 8030e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8030e70:	079d      	lsls	r5, r3, #30
 8030e72:	4606      	mov	r6, r0
 8030e74:	460c      	mov	r4, r1
 8030e76:	d507      	bpl.n	8030e88 <__smakebuf_r+0x1c>
 8030e78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8030e7c:	6023      	str	r3, [r4, #0]
 8030e7e:	6123      	str	r3, [r4, #16]
 8030e80:	2301      	movs	r3, #1
 8030e82:	6163      	str	r3, [r4, #20]
 8030e84:	b002      	add	sp, #8
 8030e86:	bd70      	pop	{r4, r5, r6, pc}
 8030e88:	ab01      	add	r3, sp, #4
 8030e8a:	466a      	mov	r2, sp
 8030e8c:	f7ff ffc8 	bl	8030e20 <__swhatbuf_r>
 8030e90:	9900      	ldr	r1, [sp, #0]
 8030e92:	4605      	mov	r5, r0
 8030e94:	4630      	mov	r0, r6
 8030e96:	f7ff fc01 	bl	803069c <_malloc_r>
 8030e9a:	b948      	cbnz	r0, 8030eb0 <__smakebuf_r+0x44>
 8030e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030ea0:	059a      	lsls	r2, r3, #22
 8030ea2:	d4ef      	bmi.n	8030e84 <__smakebuf_r+0x18>
 8030ea4:	f023 0303 	bic.w	r3, r3, #3
 8030ea8:	f043 0302 	orr.w	r3, r3, #2
 8030eac:	81a3      	strh	r3, [r4, #12]
 8030eae:	e7e3      	b.n	8030e78 <__smakebuf_r+0xc>
 8030eb0:	4b0d      	ldr	r3, [pc, #52]	; (8030ee8 <__smakebuf_r+0x7c>)
 8030eb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8030eb4:	89a3      	ldrh	r3, [r4, #12]
 8030eb6:	6020      	str	r0, [r4, #0]
 8030eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030ebc:	81a3      	strh	r3, [r4, #12]
 8030ebe:	9b00      	ldr	r3, [sp, #0]
 8030ec0:	6163      	str	r3, [r4, #20]
 8030ec2:	9b01      	ldr	r3, [sp, #4]
 8030ec4:	6120      	str	r0, [r4, #16]
 8030ec6:	b15b      	cbz	r3, 8030ee0 <__smakebuf_r+0x74>
 8030ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8030ecc:	4630      	mov	r0, r6
 8030ece:	f000 fd23 	bl	8031918 <_isatty_r>
 8030ed2:	b128      	cbz	r0, 8030ee0 <__smakebuf_r+0x74>
 8030ed4:	89a3      	ldrh	r3, [r4, #12]
 8030ed6:	f023 0303 	bic.w	r3, r3, #3
 8030eda:	f043 0301 	orr.w	r3, r3, #1
 8030ede:	81a3      	strh	r3, [r4, #12]
 8030ee0:	89a0      	ldrh	r0, [r4, #12]
 8030ee2:	4305      	orrs	r5, r0
 8030ee4:	81a5      	strh	r5, [r4, #12]
 8030ee6:	e7cd      	b.n	8030e84 <__smakebuf_r+0x18>
 8030ee8:	08030c79 	.word	0x08030c79

08030eec <__malloc_lock>:
 8030eec:	4801      	ldr	r0, [pc, #4]	; (8030ef4 <__malloc_lock+0x8>)
 8030eee:	f7ff bf95 	b.w	8030e1c <__retarget_lock_acquire_recursive>
 8030ef2:	bf00      	nop
 8030ef4:	24001f4c 	.word	0x24001f4c

08030ef8 <__malloc_unlock>:
 8030ef8:	4801      	ldr	r0, [pc, #4]	; (8030f00 <__malloc_unlock+0x8>)
 8030efa:	f7ff bf90 	b.w	8030e1e <__retarget_lock_release_recursive>
 8030efe:	bf00      	nop
 8030f00:	24001f4c 	.word	0x24001f4c

08030f04 <__ssputs_r>:
 8030f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8030f08:	688e      	ldr	r6, [r1, #8]
 8030f0a:	429e      	cmp	r6, r3
 8030f0c:	4682      	mov	sl, r0
 8030f0e:	460c      	mov	r4, r1
 8030f10:	4690      	mov	r8, r2
 8030f12:	461f      	mov	r7, r3
 8030f14:	d838      	bhi.n	8030f88 <__ssputs_r+0x84>
 8030f16:	898a      	ldrh	r2, [r1, #12]
 8030f18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8030f1c:	d032      	beq.n	8030f84 <__ssputs_r+0x80>
 8030f1e:	6825      	ldr	r5, [r4, #0]
 8030f20:	6909      	ldr	r1, [r1, #16]
 8030f22:	eba5 0901 	sub.w	r9, r5, r1
 8030f26:	6965      	ldr	r5, [r4, #20]
 8030f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8030f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8030f30:	3301      	adds	r3, #1
 8030f32:	444b      	add	r3, r9
 8030f34:	106d      	asrs	r5, r5, #1
 8030f36:	429d      	cmp	r5, r3
 8030f38:	bf38      	it	cc
 8030f3a:	461d      	movcc	r5, r3
 8030f3c:	0553      	lsls	r3, r2, #21
 8030f3e:	d531      	bpl.n	8030fa4 <__ssputs_r+0xa0>
 8030f40:	4629      	mov	r1, r5
 8030f42:	f7ff fbab 	bl	803069c <_malloc_r>
 8030f46:	4606      	mov	r6, r0
 8030f48:	b950      	cbnz	r0, 8030f60 <__ssputs_r+0x5c>
 8030f4a:	230c      	movs	r3, #12
 8030f4c:	f8ca 3000 	str.w	r3, [sl]
 8030f50:	89a3      	ldrh	r3, [r4, #12]
 8030f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030f56:	81a3      	strh	r3, [r4, #12]
 8030f58:	f04f 30ff 	mov.w	r0, #4294967295
 8030f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030f60:	6921      	ldr	r1, [r4, #16]
 8030f62:	464a      	mov	r2, r9
 8030f64:	f7ff fb18 	bl	8030598 <memcpy>
 8030f68:	89a3      	ldrh	r3, [r4, #12]
 8030f6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8030f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030f72:	81a3      	strh	r3, [r4, #12]
 8030f74:	6126      	str	r6, [r4, #16]
 8030f76:	6165      	str	r5, [r4, #20]
 8030f78:	444e      	add	r6, r9
 8030f7a:	eba5 0509 	sub.w	r5, r5, r9
 8030f7e:	6026      	str	r6, [r4, #0]
 8030f80:	60a5      	str	r5, [r4, #8]
 8030f82:	463e      	mov	r6, r7
 8030f84:	42be      	cmp	r6, r7
 8030f86:	d900      	bls.n	8030f8a <__ssputs_r+0x86>
 8030f88:	463e      	mov	r6, r7
 8030f8a:	6820      	ldr	r0, [r4, #0]
 8030f8c:	4632      	mov	r2, r6
 8030f8e:	4641      	mov	r1, r8
 8030f90:	f000 fce4 	bl	803195c <memmove>
 8030f94:	68a3      	ldr	r3, [r4, #8]
 8030f96:	1b9b      	subs	r3, r3, r6
 8030f98:	60a3      	str	r3, [r4, #8]
 8030f9a:	6823      	ldr	r3, [r4, #0]
 8030f9c:	4433      	add	r3, r6
 8030f9e:	6023      	str	r3, [r4, #0]
 8030fa0:	2000      	movs	r0, #0
 8030fa2:	e7db      	b.n	8030f5c <__ssputs_r+0x58>
 8030fa4:	462a      	mov	r2, r5
 8030fa6:	f000 fcf3 	bl	8031990 <_realloc_r>
 8030faa:	4606      	mov	r6, r0
 8030fac:	2800      	cmp	r0, #0
 8030fae:	d1e1      	bne.n	8030f74 <__ssputs_r+0x70>
 8030fb0:	6921      	ldr	r1, [r4, #16]
 8030fb2:	4650      	mov	r0, sl
 8030fb4:	f7ff fb06 	bl	80305c4 <_free_r>
 8030fb8:	e7c7      	b.n	8030f4a <__ssputs_r+0x46>
	...

08030fbc <_svfiprintf_r>:
 8030fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030fc0:	4698      	mov	r8, r3
 8030fc2:	898b      	ldrh	r3, [r1, #12]
 8030fc4:	061b      	lsls	r3, r3, #24
 8030fc6:	b09d      	sub	sp, #116	; 0x74
 8030fc8:	4607      	mov	r7, r0
 8030fca:	460d      	mov	r5, r1
 8030fcc:	4614      	mov	r4, r2
 8030fce:	d50e      	bpl.n	8030fee <_svfiprintf_r+0x32>
 8030fd0:	690b      	ldr	r3, [r1, #16]
 8030fd2:	b963      	cbnz	r3, 8030fee <_svfiprintf_r+0x32>
 8030fd4:	2140      	movs	r1, #64	; 0x40
 8030fd6:	f7ff fb61 	bl	803069c <_malloc_r>
 8030fda:	6028      	str	r0, [r5, #0]
 8030fdc:	6128      	str	r0, [r5, #16]
 8030fde:	b920      	cbnz	r0, 8030fea <_svfiprintf_r+0x2e>
 8030fe0:	230c      	movs	r3, #12
 8030fe2:	603b      	str	r3, [r7, #0]
 8030fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8030fe8:	e0d1      	b.n	803118e <_svfiprintf_r+0x1d2>
 8030fea:	2340      	movs	r3, #64	; 0x40
 8030fec:	616b      	str	r3, [r5, #20]
 8030fee:	2300      	movs	r3, #0
 8030ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8030ff2:	2320      	movs	r3, #32
 8030ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8030ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8030ffc:	2330      	movs	r3, #48	; 0x30
 8030ffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80311a8 <_svfiprintf_r+0x1ec>
 8031002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8031006:	f04f 0901 	mov.w	r9, #1
 803100a:	4623      	mov	r3, r4
 803100c:	469a      	mov	sl, r3
 803100e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031012:	b10a      	cbz	r2, 8031018 <_svfiprintf_r+0x5c>
 8031014:	2a25      	cmp	r2, #37	; 0x25
 8031016:	d1f9      	bne.n	803100c <_svfiprintf_r+0x50>
 8031018:	ebba 0b04 	subs.w	fp, sl, r4
 803101c:	d00b      	beq.n	8031036 <_svfiprintf_r+0x7a>
 803101e:	465b      	mov	r3, fp
 8031020:	4622      	mov	r2, r4
 8031022:	4629      	mov	r1, r5
 8031024:	4638      	mov	r0, r7
 8031026:	f7ff ff6d 	bl	8030f04 <__ssputs_r>
 803102a:	3001      	adds	r0, #1
 803102c:	f000 80aa 	beq.w	8031184 <_svfiprintf_r+0x1c8>
 8031030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8031032:	445a      	add	r2, fp
 8031034:	9209      	str	r2, [sp, #36]	; 0x24
 8031036:	f89a 3000 	ldrb.w	r3, [sl]
 803103a:	2b00      	cmp	r3, #0
 803103c:	f000 80a2 	beq.w	8031184 <_svfiprintf_r+0x1c8>
 8031040:	2300      	movs	r3, #0
 8031042:	f04f 32ff 	mov.w	r2, #4294967295
 8031046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803104a:	f10a 0a01 	add.w	sl, sl, #1
 803104e:	9304      	str	r3, [sp, #16]
 8031050:	9307      	str	r3, [sp, #28]
 8031052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8031056:	931a      	str	r3, [sp, #104]	; 0x68
 8031058:	4654      	mov	r4, sl
 803105a:	2205      	movs	r2, #5
 803105c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031060:	4851      	ldr	r0, [pc, #324]	; (80311a8 <_svfiprintf_r+0x1ec>)
 8031062:	f7ef f93d 	bl	80202e0 <memchr>
 8031066:	9a04      	ldr	r2, [sp, #16]
 8031068:	b9d8      	cbnz	r0, 80310a2 <_svfiprintf_r+0xe6>
 803106a:	06d0      	lsls	r0, r2, #27
 803106c:	bf44      	itt	mi
 803106e:	2320      	movmi	r3, #32
 8031070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031074:	0711      	lsls	r1, r2, #28
 8031076:	bf44      	itt	mi
 8031078:	232b      	movmi	r3, #43	; 0x2b
 803107a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803107e:	f89a 3000 	ldrb.w	r3, [sl]
 8031082:	2b2a      	cmp	r3, #42	; 0x2a
 8031084:	d015      	beq.n	80310b2 <_svfiprintf_r+0xf6>
 8031086:	9a07      	ldr	r2, [sp, #28]
 8031088:	4654      	mov	r4, sl
 803108a:	2000      	movs	r0, #0
 803108c:	f04f 0c0a 	mov.w	ip, #10
 8031090:	4621      	mov	r1, r4
 8031092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8031096:	3b30      	subs	r3, #48	; 0x30
 8031098:	2b09      	cmp	r3, #9
 803109a:	d94e      	bls.n	803113a <_svfiprintf_r+0x17e>
 803109c:	b1b0      	cbz	r0, 80310cc <_svfiprintf_r+0x110>
 803109e:	9207      	str	r2, [sp, #28]
 80310a0:	e014      	b.n	80310cc <_svfiprintf_r+0x110>
 80310a2:	eba0 0308 	sub.w	r3, r0, r8
 80310a6:	fa09 f303 	lsl.w	r3, r9, r3
 80310aa:	4313      	orrs	r3, r2
 80310ac:	9304      	str	r3, [sp, #16]
 80310ae:	46a2      	mov	sl, r4
 80310b0:	e7d2      	b.n	8031058 <_svfiprintf_r+0x9c>
 80310b2:	9b03      	ldr	r3, [sp, #12]
 80310b4:	1d19      	adds	r1, r3, #4
 80310b6:	681b      	ldr	r3, [r3, #0]
 80310b8:	9103      	str	r1, [sp, #12]
 80310ba:	2b00      	cmp	r3, #0
 80310bc:	bfbb      	ittet	lt
 80310be:	425b      	neglt	r3, r3
 80310c0:	f042 0202 	orrlt.w	r2, r2, #2
 80310c4:	9307      	strge	r3, [sp, #28]
 80310c6:	9307      	strlt	r3, [sp, #28]
 80310c8:	bfb8      	it	lt
 80310ca:	9204      	strlt	r2, [sp, #16]
 80310cc:	7823      	ldrb	r3, [r4, #0]
 80310ce:	2b2e      	cmp	r3, #46	; 0x2e
 80310d0:	d10c      	bne.n	80310ec <_svfiprintf_r+0x130>
 80310d2:	7863      	ldrb	r3, [r4, #1]
 80310d4:	2b2a      	cmp	r3, #42	; 0x2a
 80310d6:	d135      	bne.n	8031144 <_svfiprintf_r+0x188>
 80310d8:	9b03      	ldr	r3, [sp, #12]
 80310da:	1d1a      	adds	r2, r3, #4
 80310dc:	681b      	ldr	r3, [r3, #0]
 80310de:	9203      	str	r2, [sp, #12]
 80310e0:	2b00      	cmp	r3, #0
 80310e2:	bfb8      	it	lt
 80310e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80310e8:	3402      	adds	r4, #2
 80310ea:	9305      	str	r3, [sp, #20]
 80310ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80311b8 <_svfiprintf_r+0x1fc>
 80310f0:	7821      	ldrb	r1, [r4, #0]
 80310f2:	2203      	movs	r2, #3
 80310f4:	4650      	mov	r0, sl
 80310f6:	f7ef f8f3 	bl	80202e0 <memchr>
 80310fa:	b140      	cbz	r0, 803110e <_svfiprintf_r+0x152>
 80310fc:	2340      	movs	r3, #64	; 0x40
 80310fe:	eba0 000a 	sub.w	r0, r0, sl
 8031102:	fa03 f000 	lsl.w	r0, r3, r0
 8031106:	9b04      	ldr	r3, [sp, #16]
 8031108:	4303      	orrs	r3, r0
 803110a:	3401      	adds	r4, #1
 803110c:	9304      	str	r3, [sp, #16]
 803110e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031112:	4826      	ldr	r0, [pc, #152]	; (80311ac <_svfiprintf_r+0x1f0>)
 8031114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8031118:	2206      	movs	r2, #6
 803111a:	f7ef f8e1 	bl	80202e0 <memchr>
 803111e:	2800      	cmp	r0, #0
 8031120:	d038      	beq.n	8031194 <_svfiprintf_r+0x1d8>
 8031122:	4b23      	ldr	r3, [pc, #140]	; (80311b0 <_svfiprintf_r+0x1f4>)
 8031124:	bb1b      	cbnz	r3, 803116e <_svfiprintf_r+0x1b2>
 8031126:	9b03      	ldr	r3, [sp, #12]
 8031128:	3307      	adds	r3, #7
 803112a:	f023 0307 	bic.w	r3, r3, #7
 803112e:	3308      	adds	r3, #8
 8031130:	9303      	str	r3, [sp, #12]
 8031132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8031134:	4433      	add	r3, r6
 8031136:	9309      	str	r3, [sp, #36]	; 0x24
 8031138:	e767      	b.n	803100a <_svfiprintf_r+0x4e>
 803113a:	fb0c 3202 	mla	r2, ip, r2, r3
 803113e:	460c      	mov	r4, r1
 8031140:	2001      	movs	r0, #1
 8031142:	e7a5      	b.n	8031090 <_svfiprintf_r+0xd4>
 8031144:	2300      	movs	r3, #0
 8031146:	3401      	adds	r4, #1
 8031148:	9305      	str	r3, [sp, #20]
 803114a:	4619      	mov	r1, r3
 803114c:	f04f 0c0a 	mov.w	ip, #10
 8031150:	4620      	mov	r0, r4
 8031152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8031156:	3a30      	subs	r2, #48	; 0x30
 8031158:	2a09      	cmp	r2, #9
 803115a:	d903      	bls.n	8031164 <_svfiprintf_r+0x1a8>
 803115c:	2b00      	cmp	r3, #0
 803115e:	d0c5      	beq.n	80310ec <_svfiprintf_r+0x130>
 8031160:	9105      	str	r1, [sp, #20]
 8031162:	e7c3      	b.n	80310ec <_svfiprintf_r+0x130>
 8031164:	fb0c 2101 	mla	r1, ip, r1, r2
 8031168:	4604      	mov	r4, r0
 803116a:	2301      	movs	r3, #1
 803116c:	e7f0      	b.n	8031150 <_svfiprintf_r+0x194>
 803116e:	ab03      	add	r3, sp, #12
 8031170:	9300      	str	r3, [sp, #0]
 8031172:	462a      	mov	r2, r5
 8031174:	4b0f      	ldr	r3, [pc, #60]	; (80311b4 <_svfiprintf_r+0x1f8>)
 8031176:	a904      	add	r1, sp, #16
 8031178:	4638      	mov	r0, r7
 803117a:	f3af 8000 	nop.w
 803117e:	1c42      	adds	r2, r0, #1
 8031180:	4606      	mov	r6, r0
 8031182:	d1d6      	bne.n	8031132 <_svfiprintf_r+0x176>
 8031184:	89ab      	ldrh	r3, [r5, #12]
 8031186:	065b      	lsls	r3, r3, #25
 8031188:	f53f af2c 	bmi.w	8030fe4 <_svfiprintf_r+0x28>
 803118c:	9809      	ldr	r0, [sp, #36]	; 0x24
 803118e:	b01d      	add	sp, #116	; 0x74
 8031190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031194:	ab03      	add	r3, sp, #12
 8031196:	9300      	str	r3, [sp, #0]
 8031198:	462a      	mov	r2, r5
 803119a:	4b06      	ldr	r3, [pc, #24]	; (80311b4 <_svfiprintf_r+0x1f8>)
 803119c:	a904      	add	r1, sp, #16
 803119e:	4638      	mov	r0, r7
 80311a0:	f000 f9d4 	bl	803154c <_printf_i>
 80311a4:	e7eb      	b.n	803117e <_svfiprintf_r+0x1c2>
 80311a6:	bf00      	nop
 80311a8:	08032f40 	.word	0x08032f40
 80311ac:	08032f4a 	.word	0x08032f4a
 80311b0:	00000000 	.word	0x00000000
 80311b4:	08030f05 	.word	0x08030f05
 80311b8:	08032f46 	.word	0x08032f46

080311bc <__sfputc_r>:
 80311bc:	6893      	ldr	r3, [r2, #8]
 80311be:	3b01      	subs	r3, #1
 80311c0:	2b00      	cmp	r3, #0
 80311c2:	b410      	push	{r4}
 80311c4:	6093      	str	r3, [r2, #8]
 80311c6:	da08      	bge.n	80311da <__sfputc_r+0x1e>
 80311c8:	6994      	ldr	r4, [r2, #24]
 80311ca:	42a3      	cmp	r3, r4
 80311cc:	db01      	blt.n	80311d2 <__sfputc_r+0x16>
 80311ce:	290a      	cmp	r1, #10
 80311d0:	d103      	bne.n	80311da <__sfputc_r+0x1e>
 80311d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80311d6:	f7ff bba9 	b.w	803092c <__swbuf_r>
 80311da:	6813      	ldr	r3, [r2, #0]
 80311dc:	1c58      	adds	r0, r3, #1
 80311de:	6010      	str	r0, [r2, #0]
 80311e0:	7019      	strb	r1, [r3, #0]
 80311e2:	4608      	mov	r0, r1
 80311e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80311e8:	4770      	bx	lr

080311ea <__sfputs_r>:
 80311ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80311ec:	4606      	mov	r6, r0
 80311ee:	460f      	mov	r7, r1
 80311f0:	4614      	mov	r4, r2
 80311f2:	18d5      	adds	r5, r2, r3
 80311f4:	42ac      	cmp	r4, r5
 80311f6:	d101      	bne.n	80311fc <__sfputs_r+0x12>
 80311f8:	2000      	movs	r0, #0
 80311fa:	e007      	b.n	803120c <__sfputs_r+0x22>
 80311fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031200:	463a      	mov	r2, r7
 8031202:	4630      	mov	r0, r6
 8031204:	f7ff ffda 	bl	80311bc <__sfputc_r>
 8031208:	1c43      	adds	r3, r0, #1
 803120a:	d1f3      	bne.n	80311f4 <__sfputs_r+0xa>
 803120c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08031210 <_vfiprintf_r>:
 8031210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031214:	460d      	mov	r5, r1
 8031216:	b09d      	sub	sp, #116	; 0x74
 8031218:	4614      	mov	r4, r2
 803121a:	4698      	mov	r8, r3
 803121c:	4606      	mov	r6, r0
 803121e:	b118      	cbz	r0, 8031228 <_vfiprintf_r+0x18>
 8031220:	6983      	ldr	r3, [r0, #24]
 8031222:	b90b      	cbnz	r3, 8031228 <_vfiprintf_r+0x18>
 8031224:	f7ff fd5c 	bl	8030ce0 <__sinit>
 8031228:	4b89      	ldr	r3, [pc, #548]	; (8031450 <_vfiprintf_r+0x240>)
 803122a:	429d      	cmp	r5, r3
 803122c:	d11b      	bne.n	8031266 <_vfiprintf_r+0x56>
 803122e:	6875      	ldr	r5, [r6, #4]
 8031230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031232:	07d9      	lsls	r1, r3, #31
 8031234:	d405      	bmi.n	8031242 <_vfiprintf_r+0x32>
 8031236:	89ab      	ldrh	r3, [r5, #12]
 8031238:	059a      	lsls	r2, r3, #22
 803123a:	d402      	bmi.n	8031242 <_vfiprintf_r+0x32>
 803123c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803123e:	f7ff fded 	bl	8030e1c <__retarget_lock_acquire_recursive>
 8031242:	89ab      	ldrh	r3, [r5, #12]
 8031244:	071b      	lsls	r3, r3, #28
 8031246:	d501      	bpl.n	803124c <_vfiprintf_r+0x3c>
 8031248:	692b      	ldr	r3, [r5, #16]
 803124a:	b9eb      	cbnz	r3, 8031288 <_vfiprintf_r+0x78>
 803124c:	4629      	mov	r1, r5
 803124e:	4630      	mov	r0, r6
 8031250:	f7ff fbbe 	bl	80309d0 <__swsetup_r>
 8031254:	b1c0      	cbz	r0, 8031288 <_vfiprintf_r+0x78>
 8031256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031258:	07dc      	lsls	r4, r3, #31
 803125a:	d50e      	bpl.n	803127a <_vfiprintf_r+0x6a>
 803125c:	f04f 30ff 	mov.w	r0, #4294967295
 8031260:	b01d      	add	sp, #116	; 0x74
 8031262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031266:	4b7b      	ldr	r3, [pc, #492]	; (8031454 <_vfiprintf_r+0x244>)
 8031268:	429d      	cmp	r5, r3
 803126a:	d101      	bne.n	8031270 <_vfiprintf_r+0x60>
 803126c:	68b5      	ldr	r5, [r6, #8]
 803126e:	e7df      	b.n	8031230 <_vfiprintf_r+0x20>
 8031270:	4b79      	ldr	r3, [pc, #484]	; (8031458 <_vfiprintf_r+0x248>)
 8031272:	429d      	cmp	r5, r3
 8031274:	bf08      	it	eq
 8031276:	68f5      	ldreq	r5, [r6, #12]
 8031278:	e7da      	b.n	8031230 <_vfiprintf_r+0x20>
 803127a:	89ab      	ldrh	r3, [r5, #12]
 803127c:	0598      	lsls	r0, r3, #22
 803127e:	d4ed      	bmi.n	803125c <_vfiprintf_r+0x4c>
 8031280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031282:	f7ff fdcc 	bl	8030e1e <__retarget_lock_release_recursive>
 8031286:	e7e9      	b.n	803125c <_vfiprintf_r+0x4c>
 8031288:	2300      	movs	r3, #0
 803128a:	9309      	str	r3, [sp, #36]	; 0x24
 803128c:	2320      	movs	r3, #32
 803128e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8031292:	f8cd 800c 	str.w	r8, [sp, #12]
 8031296:	2330      	movs	r3, #48	; 0x30
 8031298:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803145c <_vfiprintf_r+0x24c>
 803129c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80312a0:	f04f 0901 	mov.w	r9, #1
 80312a4:	4623      	mov	r3, r4
 80312a6:	469a      	mov	sl, r3
 80312a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80312ac:	b10a      	cbz	r2, 80312b2 <_vfiprintf_r+0xa2>
 80312ae:	2a25      	cmp	r2, #37	; 0x25
 80312b0:	d1f9      	bne.n	80312a6 <_vfiprintf_r+0x96>
 80312b2:	ebba 0b04 	subs.w	fp, sl, r4
 80312b6:	d00b      	beq.n	80312d0 <_vfiprintf_r+0xc0>
 80312b8:	465b      	mov	r3, fp
 80312ba:	4622      	mov	r2, r4
 80312bc:	4629      	mov	r1, r5
 80312be:	4630      	mov	r0, r6
 80312c0:	f7ff ff93 	bl	80311ea <__sfputs_r>
 80312c4:	3001      	adds	r0, #1
 80312c6:	f000 80aa 	beq.w	803141e <_vfiprintf_r+0x20e>
 80312ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80312cc:	445a      	add	r2, fp
 80312ce:	9209      	str	r2, [sp, #36]	; 0x24
 80312d0:	f89a 3000 	ldrb.w	r3, [sl]
 80312d4:	2b00      	cmp	r3, #0
 80312d6:	f000 80a2 	beq.w	803141e <_vfiprintf_r+0x20e>
 80312da:	2300      	movs	r3, #0
 80312dc:	f04f 32ff 	mov.w	r2, #4294967295
 80312e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80312e4:	f10a 0a01 	add.w	sl, sl, #1
 80312e8:	9304      	str	r3, [sp, #16]
 80312ea:	9307      	str	r3, [sp, #28]
 80312ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80312f0:	931a      	str	r3, [sp, #104]	; 0x68
 80312f2:	4654      	mov	r4, sl
 80312f4:	2205      	movs	r2, #5
 80312f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80312fa:	4858      	ldr	r0, [pc, #352]	; (803145c <_vfiprintf_r+0x24c>)
 80312fc:	f7ee fff0 	bl	80202e0 <memchr>
 8031300:	9a04      	ldr	r2, [sp, #16]
 8031302:	b9d8      	cbnz	r0, 803133c <_vfiprintf_r+0x12c>
 8031304:	06d1      	lsls	r1, r2, #27
 8031306:	bf44      	itt	mi
 8031308:	2320      	movmi	r3, #32
 803130a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803130e:	0713      	lsls	r3, r2, #28
 8031310:	bf44      	itt	mi
 8031312:	232b      	movmi	r3, #43	; 0x2b
 8031314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031318:	f89a 3000 	ldrb.w	r3, [sl]
 803131c:	2b2a      	cmp	r3, #42	; 0x2a
 803131e:	d015      	beq.n	803134c <_vfiprintf_r+0x13c>
 8031320:	9a07      	ldr	r2, [sp, #28]
 8031322:	4654      	mov	r4, sl
 8031324:	2000      	movs	r0, #0
 8031326:	f04f 0c0a 	mov.w	ip, #10
 803132a:	4621      	mov	r1, r4
 803132c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8031330:	3b30      	subs	r3, #48	; 0x30
 8031332:	2b09      	cmp	r3, #9
 8031334:	d94e      	bls.n	80313d4 <_vfiprintf_r+0x1c4>
 8031336:	b1b0      	cbz	r0, 8031366 <_vfiprintf_r+0x156>
 8031338:	9207      	str	r2, [sp, #28]
 803133a:	e014      	b.n	8031366 <_vfiprintf_r+0x156>
 803133c:	eba0 0308 	sub.w	r3, r0, r8
 8031340:	fa09 f303 	lsl.w	r3, r9, r3
 8031344:	4313      	orrs	r3, r2
 8031346:	9304      	str	r3, [sp, #16]
 8031348:	46a2      	mov	sl, r4
 803134a:	e7d2      	b.n	80312f2 <_vfiprintf_r+0xe2>
 803134c:	9b03      	ldr	r3, [sp, #12]
 803134e:	1d19      	adds	r1, r3, #4
 8031350:	681b      	ldr	r3, [r3, #0]
 8031352:	9103      	str	r1, [sp, #12]
 8031354:	2b00      	cmp	r3, #0
 8031356:	bfbb      	ittet	lt
 8031358:	425b      	neglt	r3, r3
 803135a:	f042 0202 	orrlt.w	r2, r2, #2
 803135e:	9307      	strge	r3, [sp, #28]
 8031360:	9307      	strlt	r3, [sp, #28]
 8031362:	bfb8      	it	lt
 8031364:	9204      	strlt	r2, [sp, #16]
 8031366:	7823      	ldrb	r3, [r4, #0]
 8031368:	2b2e      	cmp	r3, #46	; 0x2e
 803136a:	d10c      	bne.n	8031386 <_vfiprintf_r+0x176>
 803136c:	7863      	ldrb	r3, [r4, #1]
 803136e:	2b2a      	cmp	r3, #42	; 0x2a
 8031370:	d135      	bne.n	80313de <_vfiprintf_r+0x1ce>
 8031372:	9b03      	ldr	r3, [sp, #12]
 8031374:	1d1a      	adds	r2, r3, #4
 8031376:	681b      	ldr	r3, [r3, #0]
 8031378:	9203      	str	r2, [sp, #12]
 803137a:	2b00      	cmp	r3, #0
 803137c:	bfb8      	it	lt
 803137e:	f04f 33ff 	movlt.w	r3, #4294967295
 8031382:	3402      	adds	r4, #2
 8031384:	9305      	str	r3, [sp, #20]
 8031386:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803146c <_vfiprintf_r+0x25c>
 803138a:	7821      	ldrb	r1, [r4, #0]
 803138c:	2203      	movs	r2, #3
 803138e:	4650      	mov	r0, sl
 8031390:	f7ee ffa6 	bl	80202e0 <memchr>
 8031394:	b140      	cbz	r0, 80313a8 <_vfiprintf_r+0x198>
 8031396:	2340      	movs	r3, #64	; 0x40
 8031398:	eba0 000a 	sub.w	r0, r0, sl
 803139c:	fa03 f000 	lsl.w	r0, r3, r0
 80313a0:	9b04      	ldr	r3, [sp, #16]
 80313a2:	4303      	orrs	r3, r0
 80313a4:	3401      	adds	r4, #1
 80313a6:	9304      	str	r3, [sp, #16]
 80313a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80313ac:	482c      	ldr	r0, [pc, #176]	; (8031460 <_vfiprintf_r+0x250>)
 80313ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80313b2:	2206      	movs	r2, #6
 80313b4:	f7ee ff94 	bl	80202e0 <memchr>
 80313b8:	2800      	cmp	r0, #0
 80313ba:	d03f      	beq.n	803143c <_vfiprintf_r+0x22c>
 80313bc:	4b29      	ldr	r3, [pc, #164]	; (8031464 <_vfiprintf_r+0x254>)
 80313be:	bb1b      	cbnz	r3, 8031408 <_vfiprintf_r+0x1f8>
 80313c0:	9b03      	ldr	r3, [sp, #12]
 80313c2:	3307      	adds	r3, #7
 80313c4:	f023 0307 	bic.w	r3, r3, #7
 80313c8:	3308      	adds	r3, #8
 80313ca:	9303      	str	r3, [sp, #12]
 80313cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80313ce:	443b      	add	r3, r7
 80313d0:	9309      	str	r3, [sp, #36]	; 0x24
 80313d2:	e767      	b.n	80312a4 <_vfiprintf_r+0x94>
 80313d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80313d8:	460c      	mov	r4, r1
 80313da:	2001      	movs	r0, #1
 80313dc:	e7a5      	b.n	803132a <_vfiprintf_r+0x11a>
 80313de:	2300      	movs	r3, #0
 80313e0:	3401      	adds	r4, #1
 80313e2:	9305      	str	r3, [sp, #20]
 80313e4:	4619      	mov	r1, r3
 80313e6:	f04f 0c0a 	mov.w	ip, #10
 80313ea:	4620      	mov	r0, r4
 80313ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80313f0:	3a30      	subs	r2, #48	; 0x30
 80313f2:	2a09      	cmp	r2, #9
 80313f4:	d903      	bls.n	80313fe <_vfiprintf_r+0x1ee>
 80313f6:	2b00      	cmp	r3, #0
 80313f8:	d0c5      	beq.n	8031386 <_vfiprintf_r+0x176>
 80313fa:	9105      	str	r1, [sp, #20]
 80313fc:	e7c3      	b.n	8031386 <_vfiprintf_r+0x176>
 80313fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8031402:	4604      	mov	r4, r0
 8031404:	2301      	movs	r3, #1
 8031406:	e7f0      	b.n	80313ea <_vfiprintf_r+0x1da>
 8031408:	ab03      	add	r3, sp, #12
 803140a:	9300      	str	r3, [sp, #0]
 803140c:	462a      	mov	r2, r5
 803140e:	4b16      	ldr	r3, [pc, #88]	; (8031468 <_vfiprintf_r+0x258>)
 8031410:	a904      	add	r1, sp, #16
 8031412:	4630      	mov	r0, r6
 8031414:	f3af 8000 	nop.w
 8031418:	4607      	mov	r7, r0
 803141a:	1c78      	adds	r0, r7, #1
 803141c:	d1d6      	bne.n	80313cc <_vfiprintf_r+0x1bc>
 803141e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031420:	07d9      	lsls	r1, r3, #31
 8031422:	d405      	bmi.n	8031430 <_vfiprintf_r+0x220>
 8031424:	89ab      	ldrh	r3, [r5, #12]
 8031426:	059a      	lsls	r2, r3, #22
 8031428:	d402      	bmi.n	8031430 <_vfiprintf_r+0x220>
 803142a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803142c:	f7ff fcf7 	bl	8030e1e <__retarget_lock_release_recursive>
 8031430:	89ab      	ldrh	r3, [r5, #12]
 8031432:	065b      	lsls	r3, r3, #25
 8031434:	f53f af12 	bmi.w	803125c <_vfiprintf_r+0x4c>
 8031438:	9809      	ldr	r0, [sp, #36]	; 0x24
 803143a:	e711      	b.n	8031260 <_vfiprintf_r+0x50>
 803143c:	ab03      	add	r3, sp, #12
 803143e:	9300      	str	r3, [sp, #0]
 8031440:	462a      	mov	r2, r5
 8031442:	4b09      	ldr	r3, [pc, #36]	; (8031468 <_vfiprintf_r+0x258>)
 8031444:	a904      	add	r1, sp, #16
 8031446:	4630      	mov	r0, r6
 8031448:	f000 f880 	bl	803154c <_printf_i>
 803144c:	e7e4      	b.n	8031418 <_vfiprintf_r+0x208>
 803144e:	bf00      	nop
 8031450:	08032f00 	.word	0x08032f00
 8031454:	08032f20 	.word	0x08032f20
 8031458:	08032ee0 	.word	0x08032ee0
 803145c:	08032f40 	.word	0x08032f40
 8031460:	08032f4a 	.word	0x08032f4a
 8031464:	00000000 	.word	0x00000000
 8031468:	080311eb 	.word	0x080311eb
 803146c:	08032f46 	.word	0x08032f46

08031470 <_printf_common>:
 8031470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8031474:	4616      	mov	r6, r2
 8031476:	4699      	mov	r9, r3
 8031478:	688a      	ldr	r2, [r1, #8]
 803147a:	690b      	ldr	r3, [r1, #16]
 803147c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8031480:	4293      	cmp	r3, r2
 8031482:	bfb8      	it	lt
 8031484:	4613      	movlt	r3, r2
 8031486:	6033      	str	r3, [r6, #0]
 8031488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803148c:	4607      	mov	r7, r0
 803148e:	460c      	mov	r4, r1
 8031490:	b10a      	cbz	r2, 8031496 <_printf_common+0x26>
 8031492:	3301      	adds	r3, #1
 8031494:	6033      	str	r3, [r6, #0]
 8031496:	6823      	ldr	r3, [r4, #0]
 8031498:	0699      	lsls	r1, r3, #26
 803149a:	bf42      	ittt	mi
 803149c:	6833      	ldrmi	r3, [r6, #0]
 803149e:	3302      	addmi	r3, #2
 80314a0:	6033      	strmi	r3, [r6, #0]
 80314a2:	6825      	ldr	r5, [r4, #0]
 80314a4:	f015 0506 	ands.w	r5, r5, #6
 80314a8:	d106      	bne.n	80314b8 <_printf_common+0x48>
 80314aa:	f104 0a19 	add.w	sl, r4, #25
 80314ae:	68e3      	ldr	r3, [r4, #12]
 80314b0:	6832      	ldr	r2, [r6, #0]
 80314b2:	1a9b      	subs	r3, r3, r2
 80314b4:	42ab      	cmp	r3, r5
 80314b6:	dc26      	bgt.n	8031506 <_printf_common+0x96>
 80314b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80314bc:	1e13      	subs	r3, r2, #0
 80314be:	6822      	ldr	r2, [r4, #0]
 80314c0:	bf18      	it	ne
 80314c2:	2301      	movne	r3, #1
 80314c4:	0692      	lsls	r2, r2, #26
 80314c6:	d42b      	bmi.n	8031520 <_printf_common+0xb0>
 80314c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80314cc:	4649      	mov	r1, r9
 80314ce:	4638      	mov	r0, r7
 80314d0:	47c0      	blx	r8
 80314d2:	3001      	adds	r0, #1
 80314d4:	d01e      	beq.n	8031514 <_printf_common+0xa4>
 80314d6:	6823      	ldr	r3, [r4, #0]
 80314d8:	68e5      	ldr	r5, [r4, #12]
 80314da:	6832      	ldr	r2, [r6, #0]
 80314dc:	f003 0306 	and.w	r3, r3, #6
 80314e0:	2b04      	cmp	r3, #4
 80314e2:	bf08      	it	eq
 80314e4:	1aad      	subeq	r5, r5, r2
 80314e6:	68a3      	ldr	r3, [r4, #8]
 80314e8:	6922      	ldr	r2, [r4, #16]
 80314ea:	bf0c      	ite	eq
 80314ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80314f0:	2500      	movne	r5, #0
 80314f2:	4293      	cmp	r3, r2
 80314f4:	bfc4      	itt	gt
 80314f6:	1a9b      	subgt	r3, r3, r2
 80314f8:	18ed      	addgt	r5, r5, r3
 80314fa:	2600      	movs	r6, #0
 80314fc:	341a      	adds	r4, #26
 80314fe:	42b5      	cmp	r5, r6
 8031500:	d11a      	bne.n	8031538 <_printf_common+0xc8>
 8031502:	2000      	movs	r0, #0
 8031504:	e008      	b.n	8031518 <_printf_common+0xa8>
 8031506:	2301      	movs	r3, #1
 8031508:	4652      	mov	r2, sl
 803150a:	4649      	mov	r1, r9
 803150c:	4638      	mov	r0, r7
 803150e:	47c0      	blx	r8
 8031510:	3001      	adds	r0, #1
 8031512:	d103      	bne.n	803151c <_printf_common+0xac>
 8031514:	f04f 30ff 	mov.w	r0, #4294967295
 8031518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803151c:	3501      	adds	r5, #1
 803151e:	e7c6      	b.n	80314ae <_printf_common+0x3e>
 8031520:	18e1      	adds	r1, r4, r3
 8031522:	1c5a      	adds	r2, r3, #1
 8031524:	2030      	movs	r0, #48	; 0x30
 8031526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803152a:	4422      	add	r2, r4
 803152c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8031530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8031534:	3302      	adds	r3, #2
 8031536:	e7c7      	b.n	80314c8 <_printf_common+0x58>
 8031538:	2301      	movs	r3, #1
 803153a:	4622      	mov	r2, r4
 803153c:	4649      	mov	r1, r9
 803153e:	4638      	mov	r0, r7
 8031540:	47c0      	blx	r8
 8031542:	3001      	adds	r0, #1
 8031544:	d0e6      	beq.n	8031514 <_printf_common+0xa4>
 8031546:	3601      	adds	r6, #1
 8031548:	e7d9      	b.n	80314fe <_printf_common+0x8e>
	...

0803154c <_printf_i>:
 803154c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8031550:	7e0f      	ldrb	r7, [r1, #24]
 8031552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8031554:	2f78      	cmp	r7, #120	; 0x78
 8031556:	4691      	mov	r9, r2
 8031558:	4680      	mov	r8, r0
 803155a:	460c      	mov	r4, r1
 803155c:	469a      	mov	sl, r3
 803155e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8031562:	d807      	bhi.n	8031574 <_printf_i+0x28>
 8031564:	2f62      	cmp	r7, #98	; 0x62
 8031566:	d80a      	bhi.n	803157e <_printf_i+0x32>
 8031568:	2f00      	cmp	r7, #0
 803156a:	f000 80d8 	beq.w	803171e <_printf_i+0x1d2>
 803156e:	2f58      	cmp	r7, #88	; 0x58
 8031570:	f000 80a3 	beq.w	80316ba <_printf_i+0x16e>
 8031574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8031578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803157c:	e03a      	b.n	80315f4 <_printf_i+0xa8>
 803157e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8031582:	2b15      	cmp	r3, #21
 8031584:	d8f6      	bhi.n	8031574 <_printf_i+0x28>
 8031586:	a101      	add	r1, pc, #4	; (adr r1, 803158c <_printf_i+0x40>)
 8031588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803158c:	080315e5 	.word	0x080315e5
 8031590:	080315f9 	.word	0x080315f9
 8031594:	08031575 	.word	0x08031575
 8031598:	08031575 	.word	0x08031575
 803159c:	08031575 	.word	0x08031575
 80315a0:	08031575 	.word	0x08031575
 80315a4:	080315f9 	.word	0x080315f9
 80315a8:	08031575 	.word	0x08031575
 80315ac:	08031575 	.word	0x08031575
 80315b0:	08031575 	.word	0x08031575
 80315b4:	08031575 	.word	0x08031575
 80315b8:	08031705 	.word	0x08031705
 80315bc:	08031629 	.word	0x08031629
 80315c0:	080316e7 	.word	0x080316e7
 80315c4:	08031575 	.word	0x08031575
 80315c8:	08031575 	.word	0x08031575
 80315cc:	08031727 	.word	0x08031727
 80315d0:	08031575 	.word	0x08031575
 80315d4:	08031629 	.word	0x08031629
 80315d8:	08031575 	.word	0x08031575
 80315dc:	08031575 	.word	0x08031575
 80315e0:	080316ef 	.word	0x080316ef
 80315e4:	682b      	ldr	r3, [r5, #0]
 80315e6:	1d1a      	adds	r2, r3, #4
 80315e8:	681b      	ldr	r3, [r3, #0]
 80315ea:	602a      	str	r2, [r5, #0]
 80315ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80315f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80315f4:	2301      	movs	r3, #1
 80315f6:	e0a3      	b.n	8031740 <_printf_i+0x1f4>
 80315f8:	6820      	ldr	r0, [r4, #0]
 80315fa:	6829      	ldr	r1, [r5, #0]
 80315fc:	0606      	lsls	r6, r0, #24
 80315fe:	f101 0304 	add.w	r3, r1, #4
 8031602:	d50a      	bpl.n	803161a <_printf_i+0xce>
 8031604:	680e      	ldr	r6, [r1, #0]
 8031606:	602b      	str	r3, [r5, #0]
 8031608:	2e00      	cmp	r6, #0
 803160a:	da03      	bge.n	8031614 <_printf_i+0xc8>
 803160c:	232d      	movs	r3, #45	; 0x2d
 803160e:	4276      	negs	r6, r6
 8031610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8031614:	485e      	ldr	r0, [pc, #376]	; (8031790 <_printf_i+0x244>)
 8031616:	230a      	movs	r3, #10
 8031618:	e019      	b.n	803164e <_printf_i+0x102>
 803161a:	680e      	ldr	r6, [r1, #0]
 803161c:	602b      	str	r3, [r5, #0]
 803161e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8031622:	bf18      	it	ne
 8031624:	b236      	sxthne	r6, r6
 8031626:	e7ef      	b.n	8031608 <_printf_i+0xbc>
 8031628:	682b      	ldr	r3, [r5, #0]
 803162a:	6820      	ldr	r0, [r4, #0]
 803162c:	1d19      	adds	r1, r3, #4
 803162e:	6029      	str	r1, [r5, #0]
 8031630:	0601      	lsls	r1, r0, #24
 8031632:	d501      	bpl.n	8031638 <_printf_i+0xec>
 8031634:	681e      	ldr	r6, [r3, #0]
 8031636:	e002      	b.n	803163e <_printf_i+0xf2>
 8031638:	0646      	lsls	r6, r0, #25
 803163a:	d5fb      	bpl.n	8031634 <_printf_i+0xe8>
 803163c:	881e      	ldrh	r6, [r3, #0]
 803163e:	4854      	ldr	r0, [pc, #336]	; (8031790 <_printf_i+0x244>)
 8031640:	2f6f      	cmp	r7, #111	; 0x6f
 8031642:	bf0c      	ite	eq
 8031644:	2308      	moveq	r3, #8
 8031646:	230a      	movne	r3, #10
 8031648:	2100      	movs	r1, #0
 803164a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803164e:	6865      	ldr	r5, [r4, #4]
 8031650:	60a5      	str	r5, [r4, #8]
 8031652:	2d00      	cmp	r5, #0
 8031654:	bfa2      	ittt	ge
 8031656:	6821      	ldrge	r1, [r4, #0]
 8031658:	f021 0104 	bicge.w	r1, r1, #4
 803165c:	6021      	strge	r1, [r4, #0]
 803165e:	b90e      	cbnz	r6, 8031664 <_printf_i+0x118>
 8031660:	2d00      	cmp	r5, #0
 8031662:	d04d      	beq.n	8031700 <_printf_i+0x1b4>
 8031664:	4615      	mov	r5, r2
 8031666:	fbb6 f1f3 	udiv	r1, r6, r3
 803166a:	fb03 6711 	mls	r7, r3, r1, r6
 803166e:	5dc7      	ldrb	r7, [r0, r7]
 8031670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8031674:	4637      	mov	r7, r6
 8031676:	42bb      	cmp	r3, r7
 8031678:	460e      	mov	r6, r1
 803167a:	d9f4      	bls.n	8031666 <_printf_i+0x11a>
 803167c:	2b08      	cmp	r3, #8
 803167e:	d10b      	bne.n	8031698 <_printf_i+0x14c>
 8031680:	6823      	ldr	r3, [r4, #0]
 8031682:	07de      	lsls	r6, r3, #31
 8031684:	d508      	bpl.n	8031698 <_printf_i+0x14c>
 8031686:	6923      	ldr	r3, [r4, #16]
 8031688:	6861      	ldr	r1, [r4, #4]
 803168a:	4299      	cmp	r1, r3
 803168c:	bfde      	ittt	le
 803168e:	2330      	movle	r3, #48	; 0x30
 8031690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8031694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8031698:	1b52      	subs	r2, r2, r5
 803169a:	6122      	str	r2, [r4, #16]
 803169c:	f8cd a000 	str.w	sl, [sp]
 80316a0:	464b      	mov	r3, r9
 80316a2:	aa03      	add	r2, sp, #12
 80316a4:	4621      	mov	r1, r4
 80316a6:	4640      	mov	r0, r8
 80316a8:	f7ff fee2 	bl	8031470 <_printf_common>
 80316ac:	3001      	adds	r0, #1
 80316ae:	d14c      	bne.n	803174a <_printf_i+0x1fe>
 80316b0:	f04f 30ff 	mov.w	r0, #4294967295
 80316b4:	b004      	add	sp, #16
 80316b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80316ba:	4835      	ldr	r0, [pc, #212]	; (8031790 <_printf_i+0x244>)
 80316bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80316c0:	6829      	ldr	r1, [r5, #0]
 80316c2:	6823      	ldr	r3, [r4, #0]
 80316c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80316c8:	6029      	str	r1, [r5, #0]
 80316ca:	061d      	lsls	r5, r3, #24
 80316cc:	d514      	bpl.n	80316f8 <_printf_i+0x1ac>
 80316ce:	07df      	lsls	r7, r3, #31
 80316d0:	bf44      	itt	mi
 80316d2:	f043 0320 	orrmi.w	r3, r3, #32
 80316d6:	6023      	strmi	r3, [r4, #0]
 80316d8:	b91e      	cbnz	r6, 80316e2 <_printf_i+0x196>
 80316da:	6823      	ldr	r3, [r4, #0]
 80316dc:	f023 0320 	bic.w	r3, r3, #32
 80316e0:	6023      	str	r3, [r4, #0]
 80316e2:	2310      	movs	r3, #16
 80316e4:	e7b0      	b.n	8031648 <_printf_i+0xfc>
 80316e6:	6823      	ldr	r3, [r4, #0]
 80316e8:	f043 0320 	orr.w	r3, r3, #32
 80316ec:	6023      	str	r3, [r4, #0]
 80316ee:	2378      	movs	r3, #120	; 0x78
 80316f0:	4828      	ldr	r0, [pc, #160]	; (8031794 <_printf_i+0x248>)
 80316f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80316f6:	e7e3      	b.n	80316c0 <_printf_i+0x174>
 80316f8:	0659      	lsls	r1, r3, #25
 80316fa:	bf48      	it	mi
 80316fc:	b2b6      	uxthmi	r6, r6
 80316fe:	e7e6      	b.n	80316ce <_printf_i+0x182>
 8031700:	4615      	mov	r5, r2
 8031702:	e7bb      	b.n	803167c <_printf_i+0x130>
 8031704:	682b      	ldr	r3, [r5, #0]
 8031706:	6826      	ldr	r6, [r4, #0]
 8031708:	6961      	ldr	r1, [r4, #20]
 803170a:	1d18      	adds	r0, r3, #4
 803170c:	6028      	str	r0, [r5, #0]
 803170e:	0635      	lsls	r5, r6, #24
 8031710:	681b      	ldr	r3, [r3, #0]
 8031712:	d501      	bpl.n	8031718 <_printf_i+0x1cc>
 8031714:	6019      	str	r1, [r3, #0]
 8031716:	e002      	b.n	803171e <_printf_i+0x1d2>
 8031718:	0670      	lsls	r0, r6, #25
 803171a:	d5fb      	bpl.n	8031714 <_printf_i+0x1c8>
 803171c:	8019      	strh	r1, [r3, #0]
 803171e:	2300      	movs	r3, #0
 8031720:	6123      	str	r3, [r4, #16]
 8031722:	4615      	mov	r5, r2
 8031724:	e7ba      	b.n	803169c <_printf_i+0x150>
 8031726:	682b      	ldr	r3, [r5, #0]
 8031728:	1d1a      	adds	r2, r3, #4
 803172a:	602a      	str	r2, [r5, #0]
 803172c:	681d      	ldr	r5, [r3, #0]
 803172e:	6862      	ldr	r2, [r4, #4]
 8031730:	2100      	movs	r1, #0
 8031732:	4628      	mov	r0, r5
 8031734:	f7ee fdd4 	bl	80202e0 <memchr>
 8031738:	b108      	cbz	r0, 803173e <_printf_i+0x1f2>
 803173a:	1b40      	subs	r0, r0, r5
 803173c:	6060      	str	r0, [r4, #4]
 803173e:	6863      	ldr	r3, [r4, #4]
 8031740:	6123      	str	r3, [r4, #16]
 8031742:	2300      	movs	r3, #0
 8031744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8031748:	e7a8      	b.n	803169c <_printf_i+0x150>
 803174a:	6923      	ldr	r3, [r4, #16]
 803174c:	462a      	mov	r2, r5
 803174e:	4649      	mov	r1, r9
 8031750:	4640      	mov	r0, r8
 8031752:	47d0      	blx	sl
 8031754:	3001      	adds	r0, #1
 8031756:	d0ab      	beq.n	80316b0 <_printf_i+0x164>
 8031758:	6823      	ldr	r3, [r4, #0]
 803175a:	079b      	lsls	r3, r3, #30
 803175c:	d413      	bmi.n	8031786 <_printf_i+0x23a>
 803175e:	68e0      	ldr	r0, [r4, #12]
 8031760:	9b03      	ldr	r3, [sp, #12]
 8031762:	4298      	cmp	r0, r3
 8031764:	bfb8      	it	lt
 8031766:	4618      	movlt	r0, r3
 8031768:	e7a4      	b.n	80316b4 <_printf_i+0x168>
 803176a:	2301      	movs	r3, #1
 803176c:	4632      	mov	r2, r6
 803176e:	4649      	mov	r1, r9
 8031770:	4640      	mov	r0, r8
 8031772:	47d0      	blx	sl
 8031774:	3001      	adds	r0, #1
 8031776:	d09b      	beq.n	80316b0 <_printf_i+0x164>
 8031778:	3501      	adds	r5, #1
 803177a:	68e3      	ldr	r3, [r4, #12]
 803177c:	9903      	ldr	r1, [sp, #12]
 803177e:	1a5b      	subs	r3, r3, r1
 8031780:	42ab      	cmp	r3, r5
 8031782:	dcf2      	bgt.n	803176a <_printf_i+0x21e>
 8031784:	e7eb      	b.n	803175e <_printf_i+0x212>
 8031786:	2500      	movs	r5, #0
 8031788:	f104 0619 	add.w	r6, r4, #25
 803178c:	e7f5      	b.n	803177a <_printf_i+0x22e>
 803178e:	bf00      	nop
 8031790:	08032f51 	.word	0x08032f51
 8031794:	08032f62 	.word	0x08032f62

08031798 <_putc_r>:
 8031798:	b570      	push	{r4, r5, r6, lr}
 803179a:	460d      	mov	r5, r1
 803179c:	4614      	mov	r4, r2
 803179e:	4606      	mov	r6, r0
 80317a0:	b118      	cbz	r0, 80317aa <_putc_r+0x12>
 80317a2:	6983      	ldr	r3, [r0, #24]
 80317a4:	b90b      	cbnz	r3, 80317aa <_putc_r+0x12>
 80317a6:	f7ff fa9b 	bl	8030ce0 <__sinit>
 80317aa:	4b1c      	ldr	r3, [pc, #112]	; (803181c <_putc_r+0x84>)
 80317ac:	429c      	cmp	r4, r3
 80317ae:	d124      	bne.n	80317fa <_putc_r+0x62>
 80317b0:	6874      	ldr	r4, [r6, #4]
 80317b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80317b4:	07d8      	lsls	r0, r3, #31
 80317b6:	d405      	bmi.n	80317c4 <_putc_r+0x2c>
 80317b8:	89a3      	ldrh	r3, [r4, #12]
 80317ba:	0599      	lsls	r1, r3, #22
 80317bc:	d402      	bmi.n	80317c4 <_putc_r+0x2c>
 80317be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80317c0:	f7ff fb2c 	bl	8030e1c <__retarget_lock_acquire_recursive>
 80317c4:	68a3      	ldr	r3, [r4, #8]
 80317c6:	3b01      	subs	r3, #1
 80317c8:	2b00      	cmp	r3, #0
 80317ca:	60a3      	str	r3, [r4, #8]
 80317cc:	da05      	bge.n	80317da <_putc_r+0x42>
 80317ce:	69a2      	ldr	r2, [r4, #24]
 80317d0:	4293      	cmp	r3, r2
 80317d2:	db1c      	blt.n	803180e <_putc_r+0x76>
 80317d4:	b2eb      	uxtb	r3, r5
 80317d6:	2b0a      	cmp	r3, #10
 80317d8:	d019      	beq.n	803180e <_putc_r+0x76>
 80317da:	6823      	ldr	r3, [r4, #0]
 80317dc:	1c5a      	adds	r2, r3, #1
 80317de:	6022      	str	r2, [r4, #0]
 80317e0:	701d      	strb	r5, [r3, #0]
 80317e2:	b2ed      	uxtb	r5, r5
 80317e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80317e6:	07da      	lsls	r2, r3, #31
 80317e8:	d405      	bmi.n	80317f6 <_putc_r+0x5e>
 80317ea:	89a3      	ldrh	r3, [r4, #12]
 80317ec:	059b      	lsls	r3, r3, #22
 80317ee:	d402      	bmi.n	80317f6 <_putc_r+0x5e>
 80317f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80317f2:	f7ff fb14 	bl	8030e1e <__retarget_lock_release_recursive>
 80317f6:	4628      	mov	r0, r5
 80317f8:	bd70      	pop	{r4, r5, r6, pc}
 80317fa:	4b09      	ldr	r3, [pc, #36]	; (8031820 <_putc_r+0x88>)
 80317fc:	429c      	cmp	r4, r3
 80317fe:	d101      	bne.n	8031804 <_putc_r+0x6c>
 8031800:	68b4      	ldr	r4, [r6, #8]
 8031802:	e7d6      	b.n	80317b2 <_putc_r+0x1a>
 8031804:	4b07      	ldr	r3, [pc, #28]	; (8031824 <_putc_r+0x8c>)
 8031806:	429c      	cmp	r4, r3
 8031808:	bf08      	it	eq
 803180a:	68f4      	ldreq	r4, [r6, #12]
 803180c:	e7d1      	b.n	80317b2 <_putc_r+0x1a>
 803180e:	4629      	mov	r1, r5
 8031810:	4622      	mov	r2, r4
 8031812:	4630      	mov	r0, r6
 8031814:	f7ff f88a 	bl	803092c <__swbuf_r>
 8031818:	4605      	mov	r5, r0
 803181a:	e7e3      	b.n	80317e4 <_putc_r+0x4c>
 803181c:	08032f00 	.word	0x08032f00
 8031820:	08032f20 	.word	0x08032f20
 8031824:	08032ee0 	.word	0x08032ee0

08031828 <__sread>:
 8031828:	b510      	push	{r4, lr}
 803182a:	460c      	mov	r4, r1
 803182c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031830:	f000 f8de 	bl	80319f0 <_read_r>
 8031834:	2800      	cmp	r0, #0
 8031836:	bfab      	itete	ge
 8031838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803183a:	89a3      	ldrhlt	r3, [r4, #12]
 803183c:	181b      	addge	r3, r3, r0
 803183e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8031842:	bfac      	ite	ge
 8031844:	6563      	strge	r3, [r4, #84]	; 0x54
 8031846:	81a3      	strhlt	r3, [r4, #12]
 8031848:	bd10      	pop	{r4, pc}

0803184a <__swrite>:
 803184a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803184e:	461f      	mov	r7, r3
 8031850:	898b      	ldrh	r3, [r1, #12]
 8031852:	05db      	lsls	r3, r3, #23
 8031854:	4605      	mov	r5, r0
 8031856:	460c      	mov	r4, r1
 8031858:	4616      	mov	r6, r2
 803185a:	d505      	bpl.n	8031868 <__swrite+0x1e>
 803185c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031860:	2302      	movs	r3, #2
 8031862:	2200      	movs	r2, #0
 8031864:	f000 f868 	bl	8031938 <_lseek_r>
 8031868:	89a3      	ldrh	r3, [r4, #12]
 803186a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803186e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8031872:	81a3      	strh	r3, [r4, #12]
 8031874:	4632      	mov	r2, r6
 8031876:	463b      	mov	r3, r7
 8031878:	4628      	mov	r0, r5
 803187a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803187e:	f000 b817 	b.w	80318b0 <_write_r>

08031882 <__sseek>:
 8031882:	b510      	push	{r4, lr}
 8031884:	460c      	mov	r4, r1
 8031886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803188a:	f000 f855 	bl	8031938 <_lseek_r>
 803188e:	1c43      	adds	r3, r0, #1
 8031890:	89a3      	ldrh	r3, [r4, #12]
 8031892:	bf15      	itete	ne
 8031894:	6560      	strne	r0, [r4, #84]	; 0x54
 8031896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803189a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803189e:	81a3      	strheq	r3, [r4, #12]
 80318a0:	bf18      	it	ne
 80318a2:	81a3      	strhne	r3, [r4, #12]
 80318a4:	bd10      	pop	{r4, pc}

080318a6 <__sclose>:
 80318a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80318aa:	f000 b813 	b.w	80318d4 <_close_r>
	...

080318b0 <_write_r>:
 80318b0:	b538      	push	{r3, r4, r5, lr}
 80318b2:	4d07      	ldr	r5, [pc, #28]	; (80318d0 <_write_r+0x20>)
 80318b4:	4604      	mov	r4, r0
 80318b6:	4608      	mov	r0, r1
 80318b8:	4611      	mov	r1, r2
 80318ba:	2200      	movs	r2, #0
 80318bc:	602a      	str	r2, [r5, #0]
 80318be:	461a      	mov	r2, r3
 80318c0:	f7f8 f9f3 	bl	8029caa <_write>
 80318c4:	1c43      	adds	r3, r0, #1
 80318c6:	d102      	bne.n	80318ce <_write_r+0x1e>
 80318c8:	682b      	ldr	r3, [r5, #0]
 80318ca:	b103      	cbz	r3, 80318ce <_write_r+0x1e>
 80318cc:	6023      	str	r3, [r4, #0]
 80318ce:	bd38      	pop	{r3, r4, r5, pc}
 80318d0:	24001f50 	.word	0x24001f50

080318d4 <_close_r>:
 80318d4:	b538      	push	{r3, r4, r5, lr}
 80318d6:	4d06      	ldr	r5, [pc, #24]	; (80318f0 <_close_r+0x1c>)
 80318d8:	2300      	movs	r3, #0
 80318da:	4604      	mov	r4, r0
 80318dc:	4608      	mov	r0, r1
 80318de:	602b      	str	r3, [r5, #0]
 80318e0:	f7f8 f9ff 	bl	8029ce2 <_close>
 80318e4:	1c43      	adds	r3, r0, #1
 80318e6:	d102      	bne.n	80318ee <_close_r+0x1a>
 80318e8:	682b      	ldr	r3, [r5, #0]
 80318ea:	b103      	cbz	r3, 80318ee <_close_r+0x1a>
 80318ec:	6023      	str	r3, [r4, #0]
 80318ee:	bd38      	pop	{r3, r4, r5, pc}
 80318f0:	24001f50 	.word	0x24001f50

080318f4 <_fstat_r>:
 80318f4:	b538      	push	{r3, r4, r5, lr}
 80318f6:	4d07      	ldr	r5, [pc, #28]	; (8031914 <_fstat_r+0x20>)
 80318f8:	2300      	movs	r3, #0
 80318fa:	4604      	mov	r4, r0
 80318fc:	4608      	mov	r0, r1
 80318fe:	4611      	mov	r1, r2
 8031900:	602b      	str	r3, [r5, #0]
 8031902:	f7f8 f9fa 	bl	8029cfa <_fstat>
 8031906:	1c43      	adds	r3, r0, #1
 8031908:	d102      	bne.n	8031910 <_fstat_r+0x1c>
 803190a:	682b      	ldr	r3, [r5, #0]
 803190c:	b103      	cbz	r3, 8031910 <_fstat_r+0x1c>
 803190e:	6023      	str	r3, [r4, #0]
 8031910:	bd38      	pop	{r3, r4, r5, pc}
 8031912:	bf00      	nop
 8031914:	24001f50 	.word	0x24001f50

08031918 <_isatty_r>:
 8031918:	b538      	push	{r3, r4, r5, lr}
 803191a:	4d06      	ldr	r5, [pc, #24]	; (8031934 <_isatty_r+0x1c>)
 803191c:	2300      	movs	r3, #0
 803191e:	4604      	mov	r4, r0
 8031920:	4608      	mov	r0, r1
 8031922:	602b      	str	r3, [r5, #0]
 8031924:	f7f8 f9f9 	bl	8029d1a <_isatty>
 8031928:	1c43      	adds	r3, r0, #1
 803192a:	d102      	bne.n	8031932 <_isatty_r+0x1a>
 803192c:	682b      	ldr	r3, [r5, #0]
 803192e:	b103      	cbz	r3, 8031932 <_isatty_r+0x1a>
 8031930:	6023      	str	r3, [r4, #0]
 8031932:	bd38      	pop	{r3, r4, r5, pc}
 8031934:	24001f50 	.word	0x24001f50

08031938 <_lseek_r>:
 8031938:	b538      	push	{r3, r4, r5, lr}
 803193a:	4d07      	ldr	r5, [pc, #28]	; (8031958 <_lseek_r+0x20>)
 803193c:	4604      	mov	r4, r0
 803193e:	4608      	mov	r0, r1
 8031940:	4611      	mov	r1, r2
 8031942:	2200      	movs	r2, #0
 8031944:	602a      	str	r2, [r5, #0]
 8031946:	461a      	mov	r2, r3
 8031948:	f7f8 f9f2 	bl	8029d30 <_lseek>
 803194c:	1c43      	adds	r3, r0, #1
 803194e:	d102      	bne.n	8031956 <_lseek_r+0x1e>
 8031950:	682b      	ldr	r3, [r5, #0]
 8031952:	b103      	cbz	r3, 8031956 <_lseek_r+0x1e>
 8031954:	6023      	str	r3, [r4, #0]
 8031956:	bd38      	pop	{r3, r4, r5, pc}
 8031958:	24001f50 	.word	0x24001f50

0803195c <memmove>:
 803195c:	4288      	cmp	r0, r1
 803195e:	b510      	push	{r4, lr}
 8031960:	eb01 0402 	add.w	r4, r1, r2
 8031964:	d902      	bls.n	803196c <memmove+0x10>
 8031966:	4284      	cmp	r4, r0
 8031968:	4623      	mov	r3, r4
 803196a:	d807      	bhi.n	803197c <memmove+0x20>
 803196c:	1e43      	subs	r3, r0, #1
 803196e:	42a1      	cmp	r1, r4
 8031970:	d008      	beq.n	8031984 <memmove+0x28>
 8031972:	f811 2b01 	ldrb.w	r2, [r1], #1
 8031976:	f803 2f01 	strb.w	r2, [r3, #1]!
 803197a:	e7f8      	b.n	803196e <memmove+0x12>
 803197c:	4402      	add	r2, r0
 803197e:	4601      	mov	r1, r0
 8031980:	428a      	cmp	r2, r1
 8031982:	d100      	bne.n	8031986 <memmove+0x2a>
 8031984:	bd10      	pop	{r4, pc}
 8031986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803198a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803198e:	e7f7      	b.n	8031980 <memmove+0x24>

08031990 <_realloc_r>:
 8031990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031994:	4680      	mov	r8, r0
 8031996:	4614      	mov	r4, r2
 8031998:	460e      	mov	r6, r1
 803199a:	b921      	cbnz	r1, 80319a6 <_realloc_r+0x16>
 803199c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80319a0:	4611      	mov	r1, r2
 80319a2:	f7fe be7b 	b.w	803069c <_malloc_r>
 80319a6:	b92a      	cbnz	r2, 80319b4 <_realloc_r+0x24>
 80319a8:	f7fe fe0c 	bl	80305c4 <_free_r>
 80319ac:	4625      	mov	r5, r4
 80319ae:	4628      	mov	r0, r5
 80319b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80319b4:	f000 f82e 	bl	8031a14 <_malloc_usable_size_r>
 80319b8:	4284      	cmp	r4, r0
 80319ba:	4607      	mov	r7, r0
 80319bc:	d802      	bhi.n	80319c4 <_realloc_r+0x34>
 80319be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80319c2:	d812      	bhi.n	80319ea <_realloc_r+0x5a>
 80319c4:	4621      	mov	r1, r4
 80319c6:	4640      	mov	r0, r8
 80319c8:	f7fe fe68 	bl	803069c <_malloc_r>
 80319cc:	4605      	mov	r5, r0
 80319ce:	2800      	cmp	r0, #0
 80319d0:	d0ed      	beq.n	80319ae <_realloc_r+0x1e>
 80319d2:	42bc      	cmp	r4, r7
 80319d4:	4622      	mov	r2, r4
 80319d6:	4631      	mov	r1, r6
 80319d8:	bf28      	it	cs
 80319da:	463a      	movcs	r2, r7
 80319dc:	f7fe fddc 	bl	8030598 <memcpy>
 80319e0:	4631      	mov	r1, r6
 80319e2:	4640      	mov	r0, r8
 80319e4:	f7fe fdee 	bl	80305c4 <_free_r>
 80319e8:	e7e1      	b.n	80319ae <_realloc_r+0x1e>
 80319ea:	4635      	mov	r5, r6
 80319ec:	e7df      	b.n	80319ae <_realloc_r+0x1e>
	...

080319f0 <_read_r>:
 80319f0:	b538      	push	{r3, r4, r5, lr}
 80319f2:	4d07      	ldr	r5, [pc, #28]	; (8031a10 <_read_r+0x20>)
 80319f4:	4604      	mov	r4, r0
 80319f6:	4608      	mov	r0, r1
 80319f8:	4611      	mov	r1, r2
 80319fa:	2200      	movs	r2, #0
 80319fc:	602a      	str	r2, [r5, #0]
 80319fe:	461a      	mov	r2, r3
 8031a00:	f7f8 f936 	bl	8029c70 <_read>
 8031a04:	1c43      	adds	r3, r0, #1
 8031a06:	d102      	bne.n	8031a0e <_read_r+0x1e>
 8031a08:	682b      	ldr	r3, [r5, #0]
 8031a0a:	b103      	cbz	r3, 8031a0e <_read_r+0x1e>
 8031a0c:	6023      	str	r3, [r4, #0]
 8031a0e:	bd38      	pop	{r3, r4, r5, pc}
 8031a10:	24001f50 	.word	0x24001f50

08031a14 <_malloc_usable_size_r>:
 8031a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031a18:	1f18      	subs	r0, r3, #4
 8031a1a:	2b00      	cmp	r3, #0
 8031a1c:	bfbc      	itt	lt
 8031a1e:	580b      	ldrlt	r3, [r1, r0]
 8031a20:	18c0      	addlt	r0, r0, r3
 8031a22:	4770      	bx	lr

08031a24 <_init>:
 8031a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031a26:	bf00      	nop
 8031a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031a2a:	bc08      	pop	{r3}
 8031a2c:	469e      	mov	lr, r3
 8031a2e:	4770      	bx	lr

08031a30 <_fini>:
 8031a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031a32:	bf00      	nop
 8031a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031a36:	bc08      	pop	{r3}
 8031a38:	469e      	mov	lr, r3
 8031a3a:	4770      	bx	lr
