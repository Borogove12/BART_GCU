
BART_GCU_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001074c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef0  080109f0  080109f0  000209f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080118e0  080118e0  000218e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080118e8  080118e8  000218e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080118ec  080118ec  000218ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  24000000  080118f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001de0  240000b8  080119a4  000300b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001e98  080119a4  00031e98  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000294ef  00000000  00000000  000300e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005075  00000000  00000000  000595d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e88  00000000  00000000  0005e648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c88  00000000  00000000  000604d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040ac3  00000000  00000000  00062158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002995c  00000000  00000000  000a2c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017c3ee  00000000  00000000  000cc577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00248965  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008868  00000000  00000000  002489b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b8 	.word	0x240000b8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080109d4 	.word	0x080109d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000bc 	.word	0x240000bc
 80002dc:	080109d4 	.word	0x080109d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <Brr_SetEmergency>:
 * In:       bool isActive: indicator for the active/deactive
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_SetEmergency(bool isActive)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]

	BYTE cmd = isActive ? CMD_SET_EMEREGENCY : CMD_RESET_EMEREGENCY;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <Brr_SetEmergency+0x14>
 8000694:	2378      	movs	r3, #120	; 0x78
 8000696:	e000      	b.n	800069a <Brr_SetEmergency+0x16>
 8000698:	2379      	movs	r3, #121	; 0x79
 800069a:	73fb      	strb	r3, [r7, #15]
	#if BART_IO
	Brr_SetEmergency_P(isActive);
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fc94 	bl	8005fcc <Brr_SetEmergency_P>
	Brr_SetEmergency_S(isActive);
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 fcba 	bl	8006020 <Brr_SetEmergency_S>
	printf("[%d] command  \n", cmd);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <Brr_SetEmergency+0x3c>)
 80006b2:	f008 fecb 	bl	800944c <printf_>

		MakeRequest(cmd, NULL, 0);
		PRINTL("[%d] command", cmd);

	#endif
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	080109f0 	.word	0x080109f0

080006c4 <Brr_SetSerialComm>:
 * In:       bool isEnabled: indicator for the enabled/disabled
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_SetSerialComm(bool isEnabled)			//	not used pms
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	BYTE cmd = isEnabled ? CMD_SET_SERIAL_COMM : CMD_RESET_SERIAL_COMM;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <Brr_SetSerialComm+0x14>
 80006d4:	237a      	movs	r3, #122	; 0x7a
 80006d6:	e000      	b.n	80006da <Brr_SetSerialComm+0x16>
 80006d8:	237b      	movs	r3, #123	; 0x7b
 80006da:	73fb      	strb	r3, [r7, #15]
	MakeRequest(cmd, NULL, 0);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f92e 	bl	8000944 <MakeRequest>
	//PRINTL("[%d] command", cmd);
	printf("[%d] command  \n", cmd);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4803      	ldr	r0, [pc, #12]	; (80006fc <Brr_SetSerialComm+0x38>)
 80006ee:	f008 fead 	bl	800944c <printf_>
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	080109f0 	.word	0x080109f0

08000700 <Brr_OpenBarrier>:
 * In:       BYTE direction: 1-Entry / 2-Exit
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_OpenBarrier(BYTE direction)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	#if BART_IO
		switch(direction)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d002      	beq.n	8000716 <Brr_OpenBarrier+0x16>
 8000710:	2b02      	cmp	r3, #2
 8000712:	d007      	beq.n	8000724 <Brr_OpenBarrier+0x24>
 8000714:	e00d      	b.n	8000732 <Brr_OpenBarrier+0x32>
		{
		case BARRIER_OPEN_FOR_EN:
			Brr_ControlBarrier_P(ENTRY_OPEN);
 8000716:	2000      	movs	r0, #0
 8000718:	f005 fd00 	bl	800611c <Brr_ControlBarrier_P>
			Brr_ControlBarrier_S(ENTRY_OPEN);
 800071c:	2000      	movs	r0, #0
 800071e:	f005 fd4b 	bl	80061b8 <Brr_ControlBarrier_S>
			break;
 8000722:	e006      	b.n	8000732 <Brr_OpenBarrier+0x32>

		case BARRIER_OPEN_FOR_EX:
			Brr_ControlBarrier_P(EXIT_OPEN);
 8000724:	2002      	movs	r0, #2
 8000726:	f005 fcf9 	bl	800611c <Brr_ControlBarrier_P>
			Brr_ControlBarrier_S(EXIT_OPEN);
 800072a:	2002      	movs	r0, #2
 800072c:	f005 fd44 	bl	80061b8 <Brr_ControlBarrier_S>
			break;
 8000730:	bf00      	nop
		}

		printf("[%d] command  \n", CMD_OPEN_BARRIER);
 8000732:	217c      	movs	r1, #124	; 0x7c
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <Brr_OpenBarrier+0x44>)
 8000736:	f008 fe89 	bl	800944c <printf_>
	#else
		MakeRequest(CMD_OPEN_BARRIER, &direction, 1);
		PRINTL("[%d] command", CMD_OPEN_BARRIER);
	#endif
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	080109f0 	.word	0x080109f0

08000748 <Brr_CloseBarrier>:
 * In:       None
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_CloseBarrier(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	#if BART_IO
		Brr_ControlBarrier_P(CLOSE);
 800074c:	2001      	movs	r0, #1
 800074e:	f005 fce5 	bl	800611c <Brr_ControlBarrier_P>
		Brr_ControlBarrier_S(CLOSE);
 8000752:	2001      	movs	r0, #1
 8000754:	f005 fd30 	bl	80061b8 <Brr_ControlBarrier_S>
		printf("[%d] command  \n", CMD_CLOSE_BARRIER);
 8000758:	217d      	movs	r1, #125	; 0x7d
 800075a:	4802      	ldr	r0, [pc, #8]	; (8000764 <Brr_CloseBarrier+0x1c>)
 800075c:	f008 fe76 	bl	800944c <printf_>
		{
			MakeRequest(CMD_CLOSE_BARRIER, NULL, 0);
			PRINTL("[%d] command", CMD_CLOSE_BARRIER);
		}
	#endif
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	080109f0 	.word	0x080109f0

08000768 <Brr_StopBarrier>:
 * In:       bool isStop: indicator for the stop/release
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_StopBarrier(bool isStop)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	BYTE cmd = isStop ? CMD_SET_STOP_BARRIER : CMD_RESET_STOP_BARRIER;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <Brr_StopBarrier+0x14>
 8000778:	237e      	movs	r3, #126	; 0x7e
 800077a:	e000      	b.n	800077e <Brr_StopBarrier+0x16>
 800077c:	237f      	movs	r3, #127	; 0x7f
 800077e:	73fb      	strb	r3, [r7, #15]
	#if BART_IO
		Brr_SetBreak_P(isStop);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4618      	mov	r0, r3
 8000784:	f005 fc76 	bl	8006074 <Brr_SetBreak_P>
		Brr_SetBreak_S(isStop);
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4618      	mov	r0, r3
 800078c:	f005 fc9c 	bl	80060c8 <Brr_SetBreak_S>
		printf("[%d] command  \n", cmd);
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	4619      	mov	r1, r3
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <Brr_StopBarrier+0x3c>)
 8000796:	f008 fe59 	bl	800944c <printf_>
	#else
		BYTE cmd = isStop ? CMD_SET_STOP_BARRIER : CMD_RESET_STOP_BARRIER;
		MakeRequest(cmd, NULL, 0);
		PRINTL("[%d] command", cmd);
	#endif
}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	080109f0 	.word	0x080109f0

080007a8 <Brr_Inq_Status>:
 * In:       None
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_Inq_Status(void)			// 현재 barrier 에서는 IO input 만 받는 상태이므로 해당 통신은 하지 않음
{									// FAULT, ANOMALY, BRAKED, GSTATUS를 input으로 받는데 FAULT ANOMALY의 신호가 정확하
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	MakeRequest(CMD_GET_STATUS_MAIN, NULL, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2092      	movs	r0, #146	; 0x92
 80007b2:	f000 f8c7 	bl	8000944 <MakeRequest>
	// PRINTL("[%d] command", CMD_GET_STATUS_MAIN);
	printf("[%d] command  \n", CMD_GET_STATUS_MAIN);
 80007b6:	2192      	movs	r1, #146	; 0x92
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <Brr_Inq_Status+0x1c>)
 80007ba:	f008 fe47 	bl	800944c <printf_>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	080109f0 	.word	0x080109f0

080007c8 <Brr_Res_Status>:
 * In:       bool isMain
 * Out:      None
 * Return:   void
 *******************************************************************************/
void Brr_Res_Status(bool isMain)			//isMain : TRUE - UART1 / FALSE - UART3
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
    if (isMain) 		//UART4
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d010      	beq.n	80007fa <Brr_Res_Status+0x32>
    {
        memcpy(&gMainBarrierStatus, (B_BARRIER_STATUS *)rsp_U4.d.data, sizeof(B_BARRIER_STATUS));
 80007d8:	2208      	movs	r2, #8
 80007da:	4912      	ldr	r1, [pc, #72]	; (8000824 <Brr_Res_Status+0x5c>)
 80007dc:	4812      	ldr	r0, [pc, #72]	; (8000828 <Brr_Res_Status+0x60>)
 80007de:	f00e ff87 	bl	800f6f0 <memcpy>
        // PRINTL(" Receive Main Status %d/%d/%d", gMainBarrierStatus.B.status0, gMainBarrierStatus.B.status3, gMainBarrierStatus.B.status4);
        printf(" Receive Main Status %d/%d/%d  \n", gMainBarrierStatus.B.status0, gMainBarrierStatus.B.status3, gMainBarrierStatus.B.status4);
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <Brr_Res_Status+0x60>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <Brr_Res_Status+0x60>)
 80007ea:	78db      	ldrb	r3, [r3, #3]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <Brr_Res_Status+0x60>)
 80007f0:	791b      	ldrb	r3, [r3, #4]
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <Brr_Res_Status+0x64>)
 80007f4:	f008 fe2a 	bl	800944c <printf_>
        memcpy(&gSubBarrierStatus, (B_BARRIER_STATUS *)rsp_U5.d.data, sizeof(B_BARRIER_STATUS));
        // PRINTL(" Receive Sub Status %d/%d/%d", gSubBarrierStatus.B.status0, gSubBarrierStatus.B.status3, gSubBarrierStatus.B.status4);

        printf(" Receive Sub Status %d/%d/%d  \n", gSubBarrierStatus.B.status0, gSubBarrierStatus.B.status3, gSubBarrierStatus.B.status4);
    }
}
 80007f8:	e00f      	b.n	800081a <Brr_Res_Status+0x52>
        memcpy(&gSubBarrierStatus, (B_BARRIER_STATUS *)rsp_U5.d.data, sizeof(B_BARRIER_STATUS));
 80007fa:	2208      	movs	r2, #8
 80007fc:	490c      	ldr	r1, [pc, #48]	; (8000830 <Brr_Res_Status+0x68>)
 80007fe:	480d      	ldr	r0, [pc, #52]	; (8000834 <Brr_Res_Status+0x6c>)
 8000800:	f00e ff76 	bl	800f6f0 <memcpy>
        printf(" Receive Sub Status %d/%d/%d  \n", gSubBarrierStatus.B.status0, gSubBarrierStatus.B.status3, gSubBarrierStatus.B.status4);
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <Brr_Res_Status+0x6c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <Brr_Res_Status+0x6c>)
 800080c:	78db      	ldrb	r3, [r3, #3]
 800080e:	461a      	mov	r2, r3
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <Brr_Res_Status+0x6c>)
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <Brr_Res_Status+0x70>)
 8000816:	f008 fe19 	bl	800944c <printf_>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	240000d7 	.word	0x240000d7
 8000828:	240004dc 	.word	0x240004dc
 800082c:	08010a00 	.word	0x08010a00
 8000830:	240000eb 	.word	0x240000eb
 8000834:	240004e4 	.word	0x240004e4
 8000838:	08010a24 	.word	0x08010a24

0800083c <WaitTX>:

}
#endif

void WaitTX(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    if (gfSubBarrierRunning == TRUE)
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <WaitTX+0x20>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <WaitTX+0x10>
    {
        U5_TxWait();
 8000848:	f000 faba 	bl	8000dc0 <U5_TxWait>
    }

    if (gfMainBarrierRunning == TRUE)
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <WaitTX+0x24>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <WaitTX+0x1c>
    {
        U4_TxWait();
 8000854:	f000 faa0 	bl	8000d98 <U4_TxWait>
    }
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	240004ed 	.word	0x240004ed
 8000860:	240004ec 	.word	0x240004ec

08000864 <SendSTX>:

void SendSTX(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    WaitTX();
 8000868:	f7ff ffe8 	bl	800083c <WaitTX>

    if (gfSubBarrierRunning == TRUE)
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <SendSTX+0x28>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <SendSTX+0x16>
    {
        U5_Putch(0xAA);
 8000874:	20aa      	movs	r0, #170	; 0xaa
 8000876:	f000 fac5 	bl	8000e04 <U5_Putch>
    }

    if (gfMainBarrierRunning == TRUE)
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <SendSTX+0x2c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <SendSTX+0x24>
    {
        U4_Putch(0xAA);
 8000882:	20aa      	movs	r0, #170	; 0xaa
 8000884:	f000 fab0 	bl	8000de8 <U4_Putch>
    }
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	240004ed 	.word	0x240004ed
 8000890:	240004ec 	.word	0x240004ec

08000894 <SendBCC>:

void SendBCC(BYTE bBCC)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
    WaitTX();
 800089e:	f7ff ffcd 	bl	800083c <WaitTX>

    if (gfSubBarrierRunning == TRUE)
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <SendBCC+0x38>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d003      	beq.n	80008b2 <SendBCC+0x1e>
    {
        U5_Putch(bBCC);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 faa9 	bl	8000e04 <U5_Putch>
    }

    if (gfMainBarrierRunning == TRUE)
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <SendBCC+0x3c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d003      	beq.n	80008c2 <SendBCC+0x2e>
    {
        U4_Putch(bBCC);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fa93 	bl	8000de8 <U4_Putch>
    }
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	240004ed 	.word	0x240004ed
 80008d0:	240004ec 	.word	0x240004ec

080008d4 <SendData>:

BYTE SendData(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
    BYTE bBCC;
    BYTE *pbReqBuff;
    int nReqLen;

    bBCC = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
    pbReqBuff = req.Buff;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <SendData+0x64>)
 80008e0:	60bb      	str	r3, [r7, #8]
    nReqLen = req.d.dataLen + FRAME_HEADER_LEN;
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <SendData+0x64>)
 80008e4:	789b      	ldrb	r3, [r3, #2]
 80008e6:	3303      	adds	r3, #3
 80008e8:	607b      	str	r3, [r7, #4]

    while (nReqLen--)
 80008ea:	e01b      	b.n	8000924 <SendData+0x50>
    {
        WaitTX();
 80008ec:	f7ff ffa6 	bl	800083c <WaitTX>
        if (gfSubBarrierRunning == TRUE)
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <SendData+0x68>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d004      	beq.n	8000902 <SendData+0x2e>
        {
            U5_Putch(*pbReqBuff);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fa81 	bl	8000e04 <U5_Putch>
        }

        if (gfMainBarrierRunning == TRUE)
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <SendData+0x6c>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <SendData+0x40>
        {
            U4_Putch(*pbReqBuff);
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fa6a 	bl	8000de8 <U4_Putch>
        }

        bBCC ^= *pbReqBuff; // BCC calculation
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	4053      	eors	r3, r2
 800091c:	73fb      	strb	r3, [r7, #15]
        pbReqBuff++;
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	3301      	adds	r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
    while (nReqLen--)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	1e5a      	subs	r2, r3, #1
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1de      	bne.n	80008ec <SendData+0x18>
    }

    return bBCC;
 800092e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	240000fc 	.word	0x240000fc
 800093c:	240004ed 	.word	0x240004ed
 8000940:	240004ec 	.word	0x240004ec

08000944 <MakeRequest>:
 * Out:      None
 * Return:   void
 * comments:
 *******************************************************************************/
void MakeRequest(BYTE command, BYTE *data, int nOptionLen)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	73fb      	strb	r3, [r7, #15]
    BYTE bBCC;

    if (req.d.moduleSeq == MAX_SEQUENCE)
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MakeRequest+0x6c>)
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	2bff      	cmp	r3, #255	; 0xff
 8000958:	d103      	bne.n	8000962 <MakeRequest+0x1e>
        req.d.moduleSeq = 0;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MakeRequest+0x6c>)
 800095c:	2200      	movs	r2, #0
 800095e:	705a      	strb	r2, [r3, #1]
 8000960:	e007      	b.n	8000972 <MakeRequest+0x2e>
    else
        req.d.moduleSeq = gbLastMainSeq_Swing++;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MakeRequest+0x70>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	b2d1      	uxtb	r1, r2
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MakeRequest+0x70>)
 800096c:	7011      	strb	r1, [r2, #0]
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <MakeRequest+0x6c>)
 8000970:	7053      	strb	r3, [r2, #1]

    req.d.command = command;
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <MakeRequest+0x6c>)
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	7013      	strb	r3, [r2, #0]
    req.d.dataLen = nOptionLen;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MakeRequest+0x6c>)
 800097e:	709a      	strb	r2, [r3, #2]

    if (nOptionLen)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d005      	beq.n	8000992 <MakeRequest+0x4e>
        memcpy(req.d.data, data, nOptionLen);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	461a      	mov	r2, r3
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	480a      	ldr	r0, [pc, #40]	; (80009b8 <MakeRequest+0x74>)
 800098e:	f00e feaf 	bl	800f6f0 <memcpy>


    SendSTX();
 8000992:	f7ff ff67 	bl	8000864 <SendSTX>
    bBCC = SendData();
 8000996:	f7ff ff9d 	bl	80008d4 <SendData>
 800099a:	4603      	mov	r3, r0
 800099c:	75fb      	strb	r3, [r7, #23]
    SendBCC(bBCC);
 800099e:	7dfb      	ldrb	r3, [r7, #23]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff77 	bl	8000894 <SendBCC>
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	240000fc 	.word	0x240000fc
 80009b4:	2400010f 	.word	0x2400010f
 80009b8:	240000ff 	.word	0x240000ff

080009bc <CheckProtocol_UART4>:
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/

int CheckProtocol_UART4(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
    BYTE rcvData;



  //  while (U1_Getch(&rcvData))			//스타트는 [AA] 다음 [len]이 들어오고 다음[Data]
	 while (IUart_RecvByte_check(COM4,&rcvData))
 80009c2:	e08a      	b.n	8000ada <CheckProtocol_UART4+0x11e>
    {
        if (rcvData == 0xAA)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2baa      	cmp	r3, #170	; 0xaa
 80009c8:	d10c      	bne.n	80009e4 <CheckProtocol_UART4+0x28>
        {
        	packetLen_U4 = 0;
 80009ca:	4b4b      	ldr	r3, [pc, #300]	; (8000af8 <CheckProtocol_UART4+0x13c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
        	len_U4 = 0;
 80009d0:	4b4a      	ldr	r3, [pc, #296]	; (8000afc <CheckProtocol_UART4+0x140>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
            BCC_U4 = 0;
 80009d6:	4b4a      	ldr	r3, [pc, #296]	; (8000b00 <CheckProtocol_UART4+0x144>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
            rcvState_U4 = STATE_DATA_HEAD;
 80009dc:	4b49      	ldr	r3, [pc, #292]	; (8000b04 <CheckProtocol_UART4+0x148>)
 80009de:	2205      	movs	r2, #5
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e07a      	b.n	8000ada <CheckProtocol_UART4+0x11e>
        }
        else 
        {
            switch (rcvState_U4)
 80009e4:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <CheckProtocol_UART4+0x148>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b06      	cmp	r3, #6
 80009ea:	d028      	beq.n	8000a3e <CheckProtocol_UART4+0x82>
 80009ec:	2b06      	cmp	r3, #6
 80009ee:	dc74      	bgt.n	8000ada <CheckProtocol_UART4+0x11e>
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d040      	beq.n	8000a76 <CheckProtocol_UART4+0xba>
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d170      	bne.n	8000ada <CheckProtocol_UART4+0x11e>
            {
            case STATE_DATA_HEAD:
                rsp_U4.Buff[packetLen_U4++] = rcvData;
 80009f8:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <CheckProtocol_UART4+0x13c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	1c5a      	adds	r2, r3, #1
 80009fe:	493e      	ldr	r1, [pc, #248]	; (8000af8 <CheckProtocol_UART4+0x13c>)
 8000a00:	600a      	str	r2, [r1, #0]
 8000a02:	79f9      	ldrb	r1, [r7, #7]
 8000a04:	4a40      	ldr	r2, [pc, #256]	; (8000b08 <CheckProtocol_UART4+0x14c>)
 8000a06:	54d1      	strb	r1, [r2, r3]
                BCC_U4 ^= rcvData;
 8000a08:	4b3d      	ldr	r3, [pc, #244]	; (8000b00 <CheckProtocol_UART4+0x144>)
 8000a0a:	781a      	ldrb	r2, [r3, #0]
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	4053      	eors	r3, r2
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b3b      	ldr	r3, [pc, #236]	; (8000b00 <CheckProtocol_UART4+0x144>)
 8000a14:	701a      	strb	r2, [r3, #0]
                if (packetLen_U4 == 3)
 8000a16:	4b38      	ldr	r3, [pc, #224]	; (8000af8 <CheckProtocol_UART4+0x13c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d15d      	bne.n	8000ada <CheckProtocol_UART4+0x11e>
                {
                	len_U4 = rcvData;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b36      	ldr	r3, [pc, #216]	; (8000afc <CheckProtocol_UART4+0x140>)
 8000a24:	601a      	str	r2, [r3, #0]
                    if (len_U4 == 0)
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <CheckProtocol_UART4+0x140>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d103      	bne.n	8000a36 <CheckProtocol_UART4+0x7a>
                    {
                    	rcvState_U4 = STATE_DATA_BCC;
 8000a2e:	4b35      	ldr	r3, [pc, #212]	; (8000b04 <CheckProtocol_UART4+0x148>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	e051      	b.n	8000ada <CheckProtocol_UART4+0x11e>
                    }
                    else
                    {
                    	rcvState_U4 = STATE_DATA_BODY;
 8000a36:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <CheckProtocol_UART4+0x148>)
 8000a38:	2206      	movs	r2, #6
 8000a3a:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 8000a3c:	e04d      	b.n	8000ada <CheckProtocol_UART4+0x11e>
            case STATE_DATA_BODY:
            	rsp_U4.Buff[packetLen_U4++] = rcvData;
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <CheckProtocol_UART4+0x13c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	492c      	ldr	r1, [pc, #176]	; (8000af8 <CheckProtocol_UART4+0x13c>)
 8000a46:	600a      	str	r2, [r1, #0]
 8000a48:	79f9      	ldrb	r1, [r7, #7]
 8000a4a:	4a2f      	ldr	r2, [pc, #188]	; (8000b08 <CheckProtocol_UART4+0x14c>)
 8000a4c:	54d1      	strb	r1, [r2, r3]
            	BCC_U4 ^= rcvData;
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <CheckProtocol_UART4+0x144>)
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4053      	eors	r3, r2
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <CheckProtocol_UART4+0x144>)
 8000a5a:	701a      	strb	r2, [r3, #0]
            	len_U4--;
 8000a5c:	4b27      	ldr	r3, [pc, #156]	; (8000afc <CheckProtocol_UART4+0x140>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	4a26      	ldr	r2, [pc, #152]	; (8000afc <CheckProtocol_UART4+0x140>)
 8000a64:	6013      	str	r3, [r2, #0]

                if (len_U4 == 0)
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <CheckProtocol_UART4+0x140>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d135      	bne.n	8000ada <CheckProtocol_UART4+0x11e>
                {
                	rcvState_U4 = STATE_DATA_BCC;
 8000a6e:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <CheckProtocol_UART4+0x148>)
 8000a70:	2202      	movs	r2, #2
 8000a72:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000a74:	e031      	b.n	8000ada <CheckProtocol_UART4+0x11e>
            case STATE_DATA_BCC:
            	rcvState_U4 = STATE_STX_WAIT;
 8000a76:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <CheckProtocol_UART4+0x148>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
                if (BCC_U4 == rcvData)
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <CheckProtocol_UART4+0x144>)
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d116      	bne.n	8000ab4 <CheckProtocol_UART4+0xf8>
                {
                    if (rsp_U4.d.dataLen != (BYTE)(packetLen_U4 - FRAME_HEADER_LEN))
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <CheckProtocol_UART4+0x14c>)
 8000a88:	789a      	ldrb	r2, [r3, #2]
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <CheckProtocol_UART4+0x13c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	3b03      	subs	r3, #3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d00b      	beq.n	8000ab0 <CheckProtocol_UART4+0xf4>
                    {
                       // PRINTL("U4 LENGTH ERR: %d - %d", rsp_U4.d.dataLen, (packetLen_U4 - FRAME_HEADER_LEN));
                    	 printf("U4 LENGTH ERR: %d - %d  \n", rsp_U4.d.dataLen, (packetLen_U4 - FRAME_HEADER_LEN));
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <CheckProtocol_UART4+0x14c>)
 8000a9a:	789b      	ldrb	r3, [r3, #2]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <CheckProtocol_UART4+0x13c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3b03      	subs	r3, #3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4819      	ldr	r0, [pc, #100]	; (8000b0c <CheckProtocol_UART4+0x150>)
 8000aa8:	f008 fcd0 	bl	800944c <printf_>
                        return ERR_WRONG_CMD_LEN;
 8000aac:	230a      	movs	r3, #10
 8000aae:	e01f      	b.n	8000af0 <CheckProtocol_UART4+0x134>
                    }
                    else
                    {
                        return SUCCESS;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e01d      	b.n	8000af0 <CheckProtocol_UART4+0x134>
                    }
                }
                else
                {
                    //PRINTL("U1 BCC ERR. len: %d, BCC: %d, rcv: %d", rsp_U4.d.dataLen, BCC_U4, rcvData);
                	 printf("U4 BCC ERR. len: %d, BCC: %d, rcv: %d  \n", rsp_U4.d.dataLen, BCC_U4, rcvData);
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <CheckProtocol_UART4+0x14c>)
 8000ab6:	789b      	ldrb	r3, [r3, #2]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <CheckProtocol_UART4+0x144>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4813      	ldr	r0, [pc, #76]	; (8000b10 <CheckProtocol_UART4+0x154>)
 8000ac4:	f008 fcc2 	bl	800944c <printf_>
                    Print2Hex("", rsp_U4.Buff, packetLen_U4);
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <CheckProtocol_UART4+0x13c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	490e      	ldr	r1, [pc, #56]	; (8000b08 <CheckProtocol_UART4+0x14c>)
 8000ad0:	4810      	ldr	r0, [pc, #64]	; (8000b14 <CheckProtocol_UART4+0x158>)
 8000ad2:	f00e fd4d 	bl	800f570 <Print2Hex>
                    return ERR_BCC;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	e00a      	b.n	8000af0 <CheckProtocol_UART4+0x134>
	 while (IUart_RecvByte_check(COM4,&rcvData))
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	4619      	mov	r1, r3
 8000ade:	2003      	movs	r0, #3
 8000ae0:	f005 fed6 	bl	8006890 <IUart_RecvByte_check>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f47f af6c 	bne.w	80009c4 <CheckProtocol_UART4+0x8>
            }
        }
        
    }

    return FAIL;
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	24000110 	.word	0x24000110
 8000afc:	24000114 	.word	0x24000114
 8000b00:	24000118 	.word	0x24000118
 8000b04:	24000119 	.word	0x24000119
 8000b08:	240000d4 	.word	0x240000d4
 8000b0c:	08010a44 	.word	0x08010a44
 8000b10:	08010a60 	.word	0x08010a60
 8000b14:	08010a8c 	.word	0x08010a8c

08000b18 <CheckProtocol_UART5>:
 *			    - else        : no command is received
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/
int CheckProtocol_UART5(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
    static int packetLen_U5 = 0;
    BYTE rcvData;

   // while (U3_Getch(&rcvData))

	while (IUart_RecvByte_check(COM5,&rcvData))
 8000b1e:	e08a      	b.n	8000c36 <CheckProtocol_UART5+0x11e>
    {
        if (rcvData == 0xAA)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	2baa      	cmp	r3, #170	; 0xaa
 8000b24:	d10c      	bne.n	8000b40 <CheckProtocol_UART5+0x28>
        {
        	packetLen_U5 = 0;
 8000b26:	4b4b      	ldr	r3, [pc, #300]	; (8000c54 <CheckProtocol_UART5+0x13c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
            len_U5 = 0;
 8000b2c:	4b4a      	ldr	r3, [pc, #296]	; (8000c58 <CheckProtocol_UART5+0x140>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
            BCC_U5 = 0;
 8000b32:	4b4a      	ldr	r3, [pc, #296]	; (8000c5c <CheckProtocol_UART5+0x144>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
            rcvState_U5 = STATE_DATA_HEAD;
 8000b38:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <CheckProtocol_UART5+0x148>)
 8000b3a:	2205      	movs	r2, #5
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e07a      	b.n	8000c36 <CheckProtocol_UART5+0x11e>
        }
        else
        {
            switch (rcvState_U5)
 8000b40:	4b47      	ldr	r3, [pc, #284]	; (8000c60 <CheckProtocol_UART5+0x148>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b06      	cmp	r3, #6
 8000b46:	d028      	beq.n	8000b9a <CheckProtocol_UART5+0x82>
 8000b48:	2b06      	cmp	r3, #6
 8000b4a:	dc74      	bgt.n	8000c36 <CheckProtocol_UART5+0x11e>
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d040      	beq.n	8000bd2 <CheckProtocol_UART5+0xba>
 8000b50:	2b05      	cmp	r3, #5
 8000b52:	d170      	bne.n	8000c36 <CheckProtocol_UART5+0x11e>
            {
            case STATE_DATA_HEAD:
                rsp_U5.Buff[packetLen_U5++] = rcvData;
 8000b54:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <CheckProtocol_UART5+0x13c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	1c5a      	adds	r2, r3, #1
 8000b5a:	493e      	ldr	r1, [pc, #248]	; (8000c54 <CheckProtocol_UART5+0x13c>)
 8000b5c:	600a      	str	r2, [r1, #0]
 8000b5e:	79f9      	ldrb	r1, [r7, #7]
 8000b60:	4a40      	ldr	r2, [pc, #256]	; (8000c64 <CheckProtocol_UART5+0x14c>)
 8000b62:	54d1      	strb	r1, [r2, r3]
                BCC_U5 ^= rcvData;
 8000b64:	4b3d      	ldr	r3, [pc, #244]	; (8000c5c <CheckProtocol_UART5+0x144>)
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	4053      	eors	r3, r2
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <CheckProtocol_UART5+0x144>)
 8000b70:	701a      	strb	r2, [r3, #0]
                if (packetLen_U5 == 3)
 8000b72:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <CheckProtocol_UART5+0x13c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d15d      	bne.n	8000c36 <CheckProtocol_UART5+0x11e>
                {
                	len_U5 = rcvData;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <CheckProtocol_UART5+0x140>)
 8000b80:	601a      	str	r2, [r3, #0]
                    if (len_U5 == 0)
 8000b82:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <CheckProtocol_UART5+0x140>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <CheckProtocol_UART5+0x7a>
                    {
                    	rcvState_U5 = STATE_DATA_BCC;
 8000b8a:	4b35      	ldr	r3, [pc, #212]	; (8000c60 <CheckProtocol_UART5+0x148>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e051      	b.n	8000c36 <CheckProtocol_UART5+0x11e>
                    }
                    else
                    {
                    	rcvState_U5 = STATE_DATA_BODY;
 8000b92:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <CheckProtocol_UART5+0x148>)
 8000b94:	2206      	movs	r2, #6
 8000b96:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 8000b98:	e04d      	b.n	8000c36 <CheckProtocol_UART5+0x11e>
            case STATE_DATA_BODY:
            	rsp_U5.Buff[packetLen_U5++] = rcvData;
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <CheckProtocol_UART5+0x13c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	492c      	ldr	r1, [pc, #176]	; (8000c54 <CheckProtocol_UART5+0x13c>)
 8000ba2:	600a      	str	r2, [r1, #0]
 8000ba4:	79f9      	ldrb	r1, [r7, #7]
 8000ba6:	4a2f      	ldr	r2, [pc, #188]	; (8000c64 <CheckProtocol_UART5+0x14c>)
 8000ba8:	54d1      	strb	r1, [r2, r3]
                BCC_U5 ^= rcvData;
 8000baa:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <CheckProtocol_UART5+0x144>)
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	4053      	eors	r3, r2
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <CheckProtocol_UART5+0x144>)
 8000bb6:	701a      	strb	r2, [r3, #0]
                len_U5--;
 8000bb8:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <CheckProtocol_UART5+0x140>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	4a26      	ldr	r2, [pc, #152]	; (8000c58 <CheckProtocol_UART5+0x140>)
 8000bc0:	6013      	str	r3, [r2, #0]

                if (len_U5 == 0)
 8000bc2:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <CheckProtocol_UART5+0x140>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d135      	bne.n	8000c36 <CheckProtocol_UART5+0x11e>
                {
                	rcvState_U5 = STATE_DATA_BCC;
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <CheckProtocol_UART5+0x148>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000bd0:	e031      	b.n	8000c36 <CheckProtocol_UART5+0x11e>
            case STATE_DATA_BCC:
            	rcvState_U5 = STATE_STX_WAIT;
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <CheckProtocol_UART5+0x148>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
                if (BCC_U5 == rcvData)
 8000bd8:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <CheckProtocol_UART5+0x144>)
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d116      	bne.n	8000c10 <CheckProtocol_UART5+0xf8>
                {
                    if (rsp_U5.d.dataLen != (BYTE)(packetLen_U5 - FRAME_HEADER_LEN))
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <CheckProtocol_UART5+0x14c>)
 8000be4:	789a      	ldrb	r2, [r3, #2]
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <CheckProtocol_UART5+0x13c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	3b03      	subs	r3, #3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d00b      	beq.n	8000c0c <CheckProtocol_UART5+0xf4>
                    {
                        //PRINTL("U3 LENGTH ERR: %d - %d", rsp_U5.d.dataLen, (packetLen_U5 - FRAME_HEADER_LEN));
                    	 printf("U5 LENGTH ERR: %d - %d  \n", rsp_U5.d.dataLen, (packetLen_U5 - FRAME_HEADER_LEN));
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <CheckProtocol_UART5+0x14c>)
 8000bf6:	789b      	ldrb	r3, [r3, #2]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <CheckProtocol_UART5+0x13c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3b03      	subs	r3, #3
 8000c00:	461a      	mov	r2, r3
 8000c02:	4819      	ldr	r0, [pc, #100]	; (8000c68 <CheckProtocol_UART5+0x150>)
 8000c04:	f008 fc22 	bl	800944c <printf_>
                        return ERR_WRONG_CMD_LEN;
 8000c08:	230a      	movs	r3, #10
 8000c0a:	e01f      	b.n	8000c4c <CheckProtocol_UART5+0x134>
                    }
                    else
                    {
                        return SUCCESS;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e01d      	b.n	8000c4c <CheckProtocol_UART5+0x134>
                    }
                }
                else
                {
                   // PRINTL("U3 BCC ERR. len: %d, BCC: %d, rcv: %d", rsp_U5.d.dataLen, BCC_U5, rcvData);
                	 printf("U5 BCC ERR. len: %d, BCC: %d, rcv: %d  \n", rsp_U5.d.dataLen, BCC_U5, rcvData);
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <CheckProtocol_UART5+0x14c>)
 8000c12:	789b      	ldrb	r3, [r3, #2]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <CheckProtocol_UART5+0x144>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	4813      	ldr	r0, [pc, #76]	; (8000c6c <CheckProtocol_UART5+0x154>)
 8000c20:	f008 fc14 	bl	800944c <printf_>
                    Print2Hex("", rsp_U5.Buff, packetLen_U5);
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <CheckProtocol_UART5+0x13c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	490e      	ldr	r1, [pc, #56]	; (8000c64 <CheckProtocol_UART5+0x14c>)
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <CheckProtocol_UART5+0x158>)
 8000c2e:	f00e fc9f 	bl	800f570 <Print2Hex>
                    return ERR_BCC;
 8000c32:	2305      	movs	r3, #5
 8000c34:	e00a      	b.n	8000c4c <CheckProtocol_UART5+0x134>
	while (IUart_RecvByte_check(COM5,&rcvData))
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2004      	movs	r0, #4
 8000c3c:	f005 fe28 	bl	8006890 <IUart_RecvByte_check>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f47f af6c 	bne.w	8000b20 <CheckProtocol_UART5+0x8>
                }
            }
        }
    }

    return FAIL;
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2400011c 	.word	0x2400011c
 8000c58:	24000120 	.word	0x24000120
 8000c5c:	24000124 	.word	0x24000124
 8000c60:	24000125 	.word	0x24000125
 8000c64:	240000e8 	.word	0x240000e8
 8000c68:	08010a90 	.word	0x08010a90
 8000c6c:	08010aac 	.word	0x08010aac
 8000c70:	08010a8c 	.word	0x08010a8c

08000c74 <ProcessCommand_Barrier>:
 *			- ERR_ILLEGAL_CMD  : command code is not defined
 * comments: It checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it returns SUCCESS result.
 *******************************************************************************/
int ProcessCommand_Barrier(bool isMain)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
    BYTE cmd;
    if (isMain == TRUE)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <ProcessCommand_Barrier+0x18>
    {
        cmd = rsp_U4.d.command;
 8000c84:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <ProcessCommand_Barrier+0xc8>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e002      	b.n	8000c92 <ProcessCommand_Barrier+0x1e>
    }
    else
    {
        cmd = rsp_U5.d.command;
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <ProcessCommand_Barrier+0xcc>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	73fb      	strb	r3, [r7, #15]
    }
    switch (cmd) // command
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	dc37      	bgt.n	8000d08 <ProcessCommand_Barrier+0x94>
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	dc27      	bgt.n	8000cec <ProcessCommand_Barrier+0x78>
 8000c9c:	e046      	b.n	8000d2c <ProcessCommand_Barrier+0xb8>
 8000c9e:	3b90      	subs	r3, #144	; 0x90
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d843      	bhi.n	8000d2c <ProcessCommand_Barrier+0xb8>
 8000ca4:	a201      	add	r2, pc, #4	; (adr r2, 8000cac <ProcessCommand_Barrier+0x38>)
 8000ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000caa:	bf00      	nop
 8000cac:	08000d31 	.word	0x08000d31
 8000cb0:	08000d31 	.word	0x08000d31
 8000cb4:	08000d13 	.word	0x08000d13
 8000cb8:	08000d31 	.word	0x08000d31
 8000cbc:	08000d31 	.word	0x08000d31
 8000cc0:	08000d31 	.word	0x08000d31
 8000cc4:	08000d2d 	.word	0x08000d2d
 8000cc8:	08000d2d 	.word	0x08000d2d
 8000ccc:	08000d2d 	.word	0x08000d2d
 8000cd0:	08000d2d 	.word	0x08000d2d
 8000cd4:	08000d2d 	.word	0x08000d2d
 8000cd8:	08000d2d 	.word	0x08000d2d
 8000cdc:	08000d31 	.word	0x08000d31
 8000ce0:	08000d31 	.word	0x08000d31
 8000ce4:	08000d31 	.word	0x08000d31
 8000ce8:	08000d31 	.word	0x08000d31
 8000cec:	3b01      	subs	r3, #1
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d81c      	bhi.n	8000d2c <ProcessCommand_Barrier+0xb8>
 8000cf2:	a201      	add	r2, pc, #4	; (adr r2, 8000cf8 <ProcessCommand_Barrier+0x84>)
 8000cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf8:	08000d1d 	.word	0x08000d1d
 8000cfc:	08000d21 	.word	0x08000d21
 8000d00:	08000d25 	.word	0x08000d25
 8000d04:	08000d29 	.word	0x08000d29
 8000d08:	2b9f      	cmp	r3, #159	; 0x9f
 8000d0a:	dc0f      	bgt.n	8000d2c <ProcessCommand_Barrier+0xb8>
 8000d0c:	2b90      	cmp	r3, #144	; 0x90
 8000d0e:	dac6      	bge.n	8000c9e <ProcessCommand_Barrier+0x2a>
 8000d10:	e00c      	b.n	8000d2c <ProcessCommand_Barrier+0xb8>
        break;
    case CMD_GET_PARAM_SUB:
        // CMDGetGCUOpMode();
        break;
    case CMD_GET_STATUS_MAIN:
        Brr_Res_Status(isMain);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fd57 	bl	80007c8 <Brr_Res_Status>
        break;
 8000d1a:	e00a      	b.n	8000d32 <ProcessCommand_Barrier+0xbe>
        break;
    case CMD_GET_IAP_VERSION_SUB:
        // CMDGetGCUOpMode();
        break;
    case CMD_ACK:
        return SUCCESS;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e009      	b.n	8000d34 <ProcessCommand_Barrier+0xc0>
    case CMD_NAK:
        return SUCCESS;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e007      	b.n	8000d34 <ProcessCommand_Barrier+0xc0>
    case CMD_MSG_ERR:
        return SUCCESS;
 8000d24:	2300      	movs	r3, #0
 8000d26:	e005      	b.n	8000d34 <ProcessCommand_Barrier+0xc0>
    case CMD_MSG_DUP:
        return SUCCESS;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e003      	b.n	8000d34 <ProcessCommand_Barrier+0xc0>
    default:
        return SUCCESS;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e001      	b.n	8000d34 <ProcessCommand_Barrier+0xc0>
        break;
 8000d30:	bf00      	nop
    }

    return SUCCESS;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	240000d4 	.word	0x240000d4
 8000d40:	240000e8 	.word	0x240000e8

08000d44 <ProcessComm_Barrier>:
 * comments: it checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it makes action refer to the command
 *           from Host.
 *******************************************************************************/
void ProcessComm_Barrier(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
    // Changed an order. Slave barrier first.
    int nError = CheckProtocol_UART5();
 8000d4a:	f7ff fee5 	bl	8000b18 <CheckProtocol_UART5>
 8000d4e:	6078      	str	r0, [r7, #4]
    if (nError == SUCCESS)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d108      	bne.n	8000d68 <ProcessComm_Barrier+0x24>
    {
        if (ProcessCommand_Barrier(FALSE) != SUCCESS)
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff ff8c 	bl	8000c74 <ProcessCommand_Barrier>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <ProcessComm_Barrier+0x24>
        {
            //PRINTL("UART3 ERR");
        	printf("UART5 ERR  \n");
 8000d62:	480b      	ldr	r0, [pc, #44]	; (8000d90 <ProcessComm_Barrier+0x4c>)
 8000d64:	f008 fb72 	bl	800944c <printf_>
        }        
    }

    nError = CheckProtocol_UART4();
 8000d68:	f7ff fe28 	bl	80009bc <CheckProtocol_UART4>
 8000d6c:	6078      	str	r0, [r7, #4]
    if (nError == SUCCESS)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d108      	bne.n	8000d86 <ProcessComm_Barrier+0x42>
    {
        if (ProcessCommand_Barrier(TRUE) != SUCCESS)
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ff7d 	bl	8000c74 <ProcessCommand_Barrier>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <ProcessComm_Barrier+0x42>
        {
            // TODO: Do we need the retry logic?
        	printf("UART4 ERR  \n");
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <ProcessComm_Barrier+0x50>)
 8000d82:	f008 fb63 	bl	800944c <printf_>
        }
    }
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	08010ad8 	.word	0x08010ad8
 8000d94:	08010ae8 	.word	0x08010ae8

08000d98 <U4_TxWait>:
}
*/


void U4_TxWait(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
	while ((iUartTable[COM4].hUart->Instance->ISR & UART_FLAG_TXE) == RESET)
 8000d9c:	bf00      	nop
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <U4_TxWait+0x24>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f7      	beq.n	8000d9e <U4_TxWait+0x6>
		;
}
 8000dae:	bf00      	nop
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	24001990 	.word	0x24001990

08000dc0 <U5_TxWait>:


void U5_TxWait(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	while ((iUartTable[COM5].hUart->Instance->ISR & UART_FLAG_TXE) == RESET)
 8000dc4:	bf00      	nop
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <U5_TxWait+0x24>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f7      	beq.n	8000dc6 <U5_TxWait+0x6>
		;
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	24001990 	.word	0x24001990

08000de8 <U4_Putch>:

void U4_Putch(BYTE c)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM4, (uint8_t)c);
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	4619      	mov	r1, r3
 8000df6:	2003      	movs	r0, #3
 8000df8:	f005 fcb8 	bl	800676c <IUart_SendByte>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <U5_Putch>:

void U5_Putch(BYTE c)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM5, (uint8_t)c);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	4619      	mov	r1, r3
 8000e12:	2004      	movs	r0, #4
 8000e14:	f005 fcaa 	bl	800676c <IUart_SendByte>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <SetDefaultOpMode>:
int nBuzzerCount[BUZZER_COUNT];

extern T_PASS_SEN_SWING psenNew;				// T_PASS_SEN structure does not exist		pms
/* Setting Functions ------------------------------------------------------*/
void SetDefaultOpMode(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
    gCurGCUOpMode.bServiceMode_EN = NO_SERVICE;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <SetDefaultOpMode+0x30>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
    gCurGCUOpMode.bServiceMode_EX = NO_SERVICE;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <SetDefaultOpMode+0x30>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	705a      	strb	r2, [r3, #1]
    gCurGCUOpMode.bEmergencyMaint = MODE_NONE;
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <SetDefaultOpMode+0x30>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	709a      	strb	r2, [r3, #2]
    gCurGCUOpMode.bFlapDoorMode = FD_MODE_OPEN;
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SetDefaultOpMode+0x30>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	70da      	strb	r2, [r3, #3]
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SetDefaultOpMode+0x30>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3

    memcpy(&gNewGCUOpMode, &gCurGCUOpMode, sizeof(T_GCU_OP_MODE));
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SetDefaultOpMode+0x34>)
 8000e44:	601a      	str	r2, [r3, #0]
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	240004d4 	.word	0x240004d4
 8000e54:	240004d8 	.word	0x240004d8

08000e58 <SetDefaultParameter>:

void SetDefaultParameter(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
    gGCUParameter.bPassageType = PASSAGE_TYPE_S;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000e5e:	2253      	movs	r2, #83	; 0x53
 8000e60:	701a      	strb	r2, [r3, #0]
    gGCUParameter.bPassageMode = PASS_MODE_EASY;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	705a      	strb	r2, [r3, #1]
    gGCUParameter.bAlarmMode = ALARM_MODE_POLL;
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	709a      	strb	r2, [r3, #2]
    gGCUParameter.bAuthType = AUTH_TYPE_TTL;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	70da      	strb	r2, [r3, #3]
    gGCUParameter.bAuthTimeOut = DEFAULT_AUTH_TIMEOUT;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000e76:	2214      	movs	r2, #20
 8000e78:	711a      	strb	r2, [r3, #4]
    gGCUParameter.bCriticalZone = ALARM_ZONE_NONE;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	715a      	strb	r2, [r3, #5]
    gGCUParameter.bCounterZone = ALARM_ZONE_NONE;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	719a      	strb	r2, [r3, #6]
    gGCUParameter.bEMGTimeout = DEFAULT_EMG_TIMEOUT;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000e88:	222d      	movs	r2, #45	; 0x2d
 8000e8a:	71da      	strb	r2, [r3, #7]
    gGCUParameter.bSensorBlockTimeout = DEFAULT_SENSOR_BLOCK_TIMEOUT;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000e8e:	22b4      	movs	r2, #180	; 0xb4
 8000e90:	721a      	strb	r2, [r3, #8]
    gGCUParameter.bBarrierOpenTimeout = DEFAULT_BARRIER_OPEN_TIMEOUT;
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000e94:	2203      	movs	r2, #3
 8000e96:	725a      	strb	r2, [r3, #9]
    gGCUParameter.bAutoEmergency = ON;
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	731a      	strb	r2, [r3, #12]
    gGCUParameter.bCheckChild = ON;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	735a      	strb	r2, [r3, #13]
    gGCUParameter.bAlarmTimeout = DEFAULT_ALARM_TIMEOUT;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000ea6:	2205      	movs	r2, #5
 8000ea8:	729a      	strb	r2, [r3, #10]
    gGCUParameter.bGateType = STANDARD;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <SetDefaultParameter+0x70>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	739a      	strb	r2, [r3, #14]

    gdwTimeoutSafety = SAFETY_TIMEOUT_STD;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <SetDefaultParameter+0x74>)
 8000eb2:	220a      	movs	r2, #10
 8000eb4:	601a      	str	r2, [r3, #0]
    gdwTimeoutLuggage = LUGGAGE_LIMIT_STD;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <SetDefaultParameter+0x78>)
 8000eb8:	2296      	movs	r2, #150	; 0x96
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	240004a0 	.word	0x240004a0
 8000ecc:	24000148 	.word	0x24000148
 8000ed0:	2400014c 	.word	0x2400014c

08000ed4 <SetDefaultStatus>:

void SetDefaultStatus(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
    gGCUStatus.bAuthCount_EN = 0;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <SetDefaultStatus+0x44>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	711a      	strb	r2, [r3, #4]
    gGCUStatus.bAuthCount_EX = 0;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <SetDefaultStatus+0x44>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	715a      	strb	r2, [r3, #5]
    gGCUStatus.PassageAlarm.bAlarm = 0;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <SetDefaultStatus+0x44>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	721a      	strb	r2, [r3, #8]
    gGCUStatus.ModuleAlarm.bAlarm = 0;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <SetDefaultStatus+0x44>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	731a      	strb	r2, [r3, #12]
#if BART_IO
    gGCUStatus.bMaintenanceDoorSw = (RD_SWITCH & MASK_SDOOR);		//door mask 0xff
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <SetDefaultStatus+0x48>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <SetDefaultStatus+0x44>)
 8000ef8:	745a      	strb	r2, [r3, #17]
#else
    gGCUStatus.bMaintenanceDoorSw = (RD_SWITCH1 & MASK_SDOOR1) | ((RD_SWITCH2 & MASK_SDOOR2) << 4);
#endif
    gGCUStatus.bUPSStatus = 0x06;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <SetDefaultStatus+0x44>)
 8000efc:	2206      	movs	r2, #6
 8000efe:	749a      	strb	r2, [r3, #18]
    gGCUStatus.bDoorForcedOpen = OFF;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <SetDefaultStatus+0x44>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	755a      	strb	r2, [r3, #21]
    gbDoorForecedOpen = OFF;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SetDefaultStatus+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	240004b0 	.word	0x240004b0
 8000f1c:	60000300 	.word	0x60000300
 8000f20:	24000439 	.word	0x24000439

08000f24 <ApplyStatusMode>:

void ApplyStatusMode(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
    gGCUStatus.ModeStatus.b.nServiceMode_EN = gCurGCUOpMode.bServiceMode_EN;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <ApplyStatusMode+0x70>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	019b      	lsls	r3, r3, #6
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	119b      	asrs	r3, r3, #6
 8000f32:	b259      	sxtb	r1, r3
 8000f34:	4a18      	ldr	r2, [pc, #96]	; (8000f98 <ApplyStatusMode+0x74>)
 8000f36:	7813      	ldrb	r3, [r2, #0]
 8000f38:	f361 0301 	bfi	r3, r1, #0, #2
 8000f3c:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nServiceMode_EX = gCurGCUOpMode.bServiceMode_EX;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <ApplyStatusMode+0x70>)
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	019b      	lsls	r3, r3, #6
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	119b      	asrs	r3, r3, #6
 8000f48:	b259      	sxtb	r1, r3
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <ApplyStatusMode+0x74>)
 8000f4c:	7813      	ldrb	r3, [r2, #0]
 8000f4e:	f361 0383 	bfi	r3, r1, #2, #2
 8000f52:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nEmergencyMode = (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY);
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <ApplyStatusMode+0x70>)
 8000f56:	789b      	ldrb	r3, [r3, #2]
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	119b      	asrs	r3, r3, #6
 8000f5e:	b259      	sxtb	r1, r3
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <ApplyStatusMode+0x74>)
 8000f62:	7813      	ldrb	r3, [r2, #0]
 8000f64:	f361 1305 	bfi	r3, r1, #4, #2
 8000f68:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nMaintenanceMode = (gCurGCUOpMode.bEmergencyMaint << 7) & 1;
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <ApplyStatusMode+0x74>)
 8000f6c:	7813      	ldrb	r3, [r2, #0]
 8000f6e:	f36f 1386 	bfc	r3, #6, #1
 8000f72:	7013      	strb	r3, [r2, #0]
    gGCUStatus.ModeStatus.b.nFlapDoorMode = gCurGCUOpMode.bFlapDoorMode;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <ApplyStatusMode+0x70>)
 8000f76:	78db      	ldrb	r3, [r3, #3]
 8000f78:	01db      	lsls	r3, r3, #7
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	11db      	asrs	r3, r3, #7
 8000f7e:	b259      	sxtb	r1, r3
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <ApplyStatusMode+0x74>)
 8000f82:	7813      	ldrb	r3, [r2, #0]
 8000f84:	f361 13c7 	bfi	r3, r1, #7, #1
 8000f88:	7013      	strb	r3, [r2, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	240004d4 	.word	0x240004d4
 8000f98:	240004b0 	.word	0x240004b0

08000f9c <SetNewOpMode>:

void SetNewOpMode(T_GCU_OP_MODE *pNewMode)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    if (pNewMode->bServiceMode_EN > FREE_SERVICE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d903      	bls.n	8000fb4 <SetNewOpMode+0x18>
        pNewMode->bServiceMode_EN = gCurGCUOpMode.bServiceMode_EN;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <SetNewOpMode+0x74>)
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	701a      	strb	r2, [r3, #0]

    if (pNewMode->bServiceMode_EX > FREE_SERVICE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d903      	bls.n	8000fc4 <SetNewOpMode+0x28>
        pNewMode->bServiceMode_EX = gCurGCUOpMode.bServiceMode_EX;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <SetNewOpMode+0x74>)
 8000fbe:	785a      	ldrb	r2, [r3, #1]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	705a      	strb	r2, [r3, #1]

    if (pNewMode->bFlapDoorMode > FD_MODE_OPEN)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	78db      	ldrb	r3, [r3, #3]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d903      	bls.n	8000fd4 <SetNewOpMode+0x38>
        pNewMode->bFlapDoorMode = gCurGCUOpMode.bFlapDoorMode;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <SetNewOpMode+0x74>)
 8000fce:	78da      	ldrb	r2, [r3, #3]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	70da      	strb	r2, [r3, #3]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3

    memcpy(&gNewGCUOpMode, pNewMode, sizeof(T_GCU_OP_MODE));
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <SetNewOpMode+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]

    if (gNewGCUOpMode.bEmergencyMaint)
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <SetNewOpMode+0x78>)
 8000fe0:	789b      	ldrb	r3, [r3, #2]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00c      	beq.n	8001000 <SetNewOpMode+0x64>
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <SetNewOpMode+0x78>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
    {
        // If emergency or maint mode, apply new mode immediately.
        memcpy(&gCurGCUOpMode, &gNewGCUOpMode, sizeof(T_GCU_OP_MODE));
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <SetNewOpMode+0x74>)
 8000fee:	601a      	str	r2, [r3, #0]
        ApplyStatusMode();
 8000ff0:	f7ff ff98 	bl	8000f24 <ApplyStatusMode>
        InitPassageMode();
 8000ff4:	f001 f970 	bl	80022d8 <InitPassageMode>
        gfModeChanged = FALSE;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <SetNewOpMode+0x7c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
    else
    {
        // If in service mode, decide to apply new mode by passenger check logic (refer to CheckModeChange()).
        gfModeChanged = TRUE;
    }
}
 8000ffe:	e002      	b.n	8001006 <SetNewOpMode+0x6a>
        gfModeChanged = TRUE;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SetNewOpMode+0x7c>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	240004d4 	.word	0x240004d4
 8001014:	240004d8 	.word	0x240004d8
 8001018:	24000133 	.word	0x24000133

0800101c <CheckModeChange>:

void CheckModeChange(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    if (gfModeChanged == TRUE && (gGCUStatus.bAuthCount_EN == 0) && (gGCUStatus.bAuthCount_EX == 0))
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <CheckModeChange+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d027      	beq.n	8001078 <CheckModeChange+0x5c>
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <CheckModeChange+0x64>)
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d122      	bne.n	8001078 <CheckModeChange+0x5c>
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <CheckModeChange+0x64>)
 8001034:	795b      	ldrb	r3, [r3, #5]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d11d      	bne.n	8001078 <CheckModeChange+0x5c>
    {
        //PRINTL(" [CheckModeChange] Old mode EX:%d/EN:%d", gCurGCUOpMode.bServiceMode_EX, gCurGCUOpMode.bServiceMode_EN);
        //PRINTL(" [CheckModeChange] New mode EX:%d/EN:%d", gNewGCUOpMode.bServiceMode_EX, gNewGCUOpMode.bServiceMode_EN);

        printf(" [CheckModeChange] Old mode EX:%d/EN:%d  \n", gCurGCUOpMode.bServiceMode_EX, gCurGCUOpMode.bServiceMode_EN);
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <CheckModeChange+0x68>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	4619      	mov	r1, r3
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <CheckModeChange+0x68>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	480f      	ldr	r0, [pc, #60]	; (8001088 <CheckModeChange+0x6c>)
 800104a:	f008 f9ff 	bl	800944c <printf_>
        printf(" [CheckModeChange] New mode EX:%d/EN:%d  \n", gNewGCUOpMode.bServiceMode_EX, gNewGCUOpMode.bServiceMode_EN);
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <CheckModeChange+0x70>)
 8001050:	785b      	ldrb	r3, [r3, #1]
 8001052:	4619      	mov	r1, r3
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <CheckModeChange+0x70>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <CheckModeChange+0x74>)
 800105c:	f008 f9f6 	bl	800944c <printf_>
    	gfModeChanged = FALSE;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <CheckModeChange+0x60>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <CheckModeChange+0x70>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
        memcpy(&gCurGCUOpMode, &gNewGCUOpMode, sizeof(T_GCU_OP_MODE));
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <CheckModeChange+0x68>)
 800106e:	601a      	str	r2, [r3, #0]
        ApplyStatusMode();
 8001070:	f7ff ff58 	bl	8000f24 <ApplyStatusMode>
        InitPassageMode();
 8001074:	f001 f930 	bl	80022d8 <InitPassageMode>
    }
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	24000133 	.word	0x24000133
 8001080:	240004b0 	.word	0x240004b0
 8001084:	240004d4 	.word	0x240004d4
 8001088:	08010af8 	.word	0x08010af8
 800108c:	240004d8 	.word	0x240004d8
 8001090:	08010b24 	.word	0x08010b24

08001094 <GetCurrentOpMode>:

void GetCurrentOpMode(T_GCU_OP_MODE *pCurMode)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <GetCurrentOpMode+0x20>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
    memcpy(pCurMode, &gCurGCUOpMode, sizeof(T_GCU_OP_MODE));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	240004d4 	.word	0x240004d4

080010b8 <SetGCUParameter>:

void SetGCUParameter(T_GCU_PARAMETER *pNewParameter, int nLen)
{
 80010b8:	b490      	push	{r4, r7}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    pNewParameter->bPassageType = PASSAGE_TYPE_S;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2253      	movs	r2, #83	; 0x53
 80010c6:	701a      	strb	r2, [r3, #0]

    if (pNewParameter->bPassageMode > PASS_MODE_EASY)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d903      	bls.n	80010d8 <SetGCUParameter+0x20>
        pNewParameter->bPassageMode = gGCUParameter.bPassageMode;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <SetGCUParameter+0x90>)
 80010d2:	785a      	ldrb	r2, [r3, #1]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	705a      	strb	r2, [r3, #1]

    if (pNewParameter->bAlarmMode > ALARM_MODE_ACTIVE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	789b      	ldrb	r3, [r3, #2]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d903      	bls.n	80010e8 <SetGCUParameter+0x30>
        pNewParameter->bAlarmMode = gGCUParameter.bAlarmMode;
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <SetGCUParameter+0x90>)
 80010e2:	789a      	ldrb	r2, [r3, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	709a      	strb	r2, [r3, #2]

    if (pNewParameter->bAuthType > AUTH_TYPE_TTL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	78db      	ldrb	r3, [r3, #3]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d903      	bls.n	80010f8 <SetGCUParameter+0x40>
        pNewParameter->bAuthType = gGCUParameter.bAuthType;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <SetGCUParameter+0x90>)
 80010f2:	78da      	ldrb	r2, [r3, #3]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	70da      	strb	r2, [r3, #3]

    if (pNewParameter->bCriticalZone > ALARM_ZONE3)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	795b      	ldrb	r3, [r3, #5]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d903      	bls.n	8001108 <SetGCUParameter+0x50>
        pNewParameter->bCriticalZone = gGCUParameter.bCriticalZone;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <SetGCUParameter+0x90>)
 8001102:	795a      	ldrb	r2, [r3, #5]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	715a      	strb	r2, [r3, #5]

    if (pNewParameter->bCounterZone > ALARM_ZONE3)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	799b      	ldrb	r3, [r3, #6]
 800110c:	2b03      	cmp	r3, #3
 800110e:	d903      	bls.n	8001118 <SetGCUParameter+0x60>
        pNewParameter->bCounterZone = gGCUParameter.bCounterZone;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <SetGCUParameter+0x90>)
 8001112:	799a      	ldrb	r2, [r3, #6]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	719a      	strb	r2, [r3, #6]

    gdwTimeoutSafety = SAFETY_TIMEOUT_STD;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <SetGCUParameter+0x94>)
 800111a:	220a      	movs	r2, #10
 800111c:	601a      	str	r2, [r3, #0]
    gdwTimeoutLuggage = LUGGAGE_LIMIT_STD;
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <SetGCUParameter+0x98>)
 8001120:	2296      	movs	r2, #150	; 0x96
 8001122:	601a      	str	r2, [r3, #0]

    memcpy(&gGCUParameter, pNewParameter, sizeof(T_GCU_PARAMETER));
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <SetGCUParameter+0x90>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	6814      	ldr	r4, [r2, #0]
 800112a:	6850      	ldr	r0, [r2, #4]
 800112c:	6891      	ldr	r1, [r2, #8]
 800112e:	601c      	str	r4, [r3, #0]
 8001130:	6058      	str	r0, [r3, #4]
 8001132:	6099      	str	r1, [r3, #8]
 8001134:	8991      	ldrh	r1, [r2, #12]
 8001136:	7b92      	ldrb	r2, [r2, #14]
 8001138:	8199      	strh	r1, [r3, #12]
 800113a:	739a      	strb	r2, [r3, #14]
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bc90      	pop	{r4, r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	240004a0 	.word	0x240004a0
 800114c:	24000148 	.word	0x24000148
 8001150:	2400014c 	.word	0x2400014c

08001154 <GetGCUParameter>:

void GetGCUParameter(T_GCU_PARAMETER *pCurParameter)
{
 8001154:	b490      	push	{r4, r7}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    memcpy(pCurParameter, &gGCUParameter, sizeof(T_GCU_PARAMETER));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a08      	ldr	r2, [pc, #32]	; (8001180 <GetGCUParameter+0x2c>)
 8001160:	6814      	ldr	r4, [r2, #0]
 8001162:	6850      	ldr	r0, [r2, #4]
 8001164:	6891      	ldr	r1, [r2, #8]
 8001166:	601c      	str	r4, [r3, #0]
 8001168:	6058      	str	r0, [r3, #4]
 800116a:	6099      	str	r1, [r3, #8]
 800116c:	8991      	ldrh	r1, [r2, #12]
 800116e:	7b92      	ldrb	r2, [r2, #14]
 8001170:	8199      	strh	r1, [r3, #12]
 8001172:	739a      	strb	r2, [r3, #14]
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bc90      	pop	{r4, r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	240004a0 	.word	0x240004a0

08001184 <GetGCUStatus>:

void GetGCUStatus(T_GCU_STATUS_RES *pCurStatus)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    T_MODE_STATUS ModeStatus;
	DWORD	dwSpareSenserValue  = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]

    // mode status
    ModeStatus.b.nServiceMode_EN = (int)gCurGCUOpMode.bServiceMode_EN;
 8001190:	4b54      	ldr	r3, [pc, #336]	; (80012e4 <GetGCUStatus+0x160>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	019b      	lsls	r3, r3, #6
 8001196:	b25b      	sxtb	r3, r3
 8001198:	119b      	asrs	r3, r3, #6
 800119a:	b25a      	sxtb	r2, r3
 800119c:	7a3b      	ldrb	r3, [r7, #8]
 800119e:	f362 0301 	bfi	r3, r2, #0, #2
 80011a2:	723b      	strb	r3, [r7, #8]
    ModeStatus.b.nServiceMode_EX = (int)gCurGCUOpMode.bServiceMode_EX;
 80011a4:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <GetGCUStatus+0x160>)
 80011a6:	785b      	ldrb	r3, [r3, #1]
 80011a8:	019b      	lsls	r3, r3, #6
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	119b      	asrs	r3, r3, #6
 80011ae:	b25a      	sxtb	r2, r3
 80011b0:	7a3b      	ldrb	r3, [r7, #8]
 80011b2:	f362 0383 	bfi	r3, r2, #2, #2
 80011b6:	723b      	strb	r3, [r7, #8]
    ModeStatus.b.nEmergencyMode = (int)(gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY);
 80011b8:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <GetGCUStatus+0x160>)
 80011ba:	789b      	ldrb	r3, [r3, #2]
 80011bc:	019b      	lsls	r3, r3, #6
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	119b      	asrs	r3, r3, #6
 80011c2:	b25a      	sxtb	r2, r3
 80011c4:	7a3b      	ldrb	r3, [r7, #8]
 80011c6:	f362 1305 	bfi	r3, r2, #4, #2
 80011ca:	723b      	strb	r3, [r7, #8]

    if (gCurGCUOpMode.bEmergencyMaint & MAINTENANCE_MODE)
 80011cc:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <GetGCUStatus+0x160>)
 80011ce:	789b      	ldrb	r3, [r3, #2]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <GetGCUStatus+0x5e>
        ModeStatus.b.nMaintenanceMode = ON;
 80011d8:	7a3b      	ldrb	r3, [r7, #8]
 80011da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011de:	723b      	strb	r3, [r7, #8]
 80011e0:	e003      	b.n	80011ea <GetGCUStatus+0x66>
    else
        ModeStatus.b.nMaintenanceMode = OFF;
 80011e2:	7a3b      	ldrb	r3, [r7, #8]
 80011e4:	f36f 1386 	bfc	r3, #6, #1
 80011e8:	723b      	strb	r3, [r7, #8]

    ModeStatus.b.nFlapDoorMode = (int)gCurGCUOpMode.bFlapDoorMode;
 80011ea:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <GetGCUStatus+0x160>)
 80011ec:	78db      	ldrb	r3, [r3, #3]
 80011ee:	01db      	lsls	r3, r3, #7
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	11db      	asrs	r3, r3, #7
 80011f4:	b25a      	sxtb	r2, r3
 80011f6:	7a3b      	ldrb	r3, [r7, #8]
 80011f8:	f362 13c7 	bfi	r3, r2, #7, #1
 80011fc:	723b      	strb	r3, [r7, #8]

    // passage alarm
    pCurStatus->bModeStatus = ModeStatus.bMode;
 80011fe:	7a3a      	ldrb	r2, [r7, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	701a      	strb	r2, [r3, #0]
    pCurStatus->bAuthCount_EN = gGCUStatus.bAuthCount_EN;
 8001204:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <GetGCUStatus+0x164>)
 8001206:	791b      	ldrb	r3, [r3, #4]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	705a      	strb	r2, [r3, #1]
    pCurStatus->bAuthCount_EX = gGCUStatus.bAuthCount_EX;
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <GetGCUStatus+0x164>)
 8001210:	795b      	ldrb	r3, [r3, #5]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	709a      	strb	r2, [r3, #2]
    pCurStatus->bPassageAlarm = gGCUStatus.PassageAlarm.bAlarm;
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <GetGCUStatus+0x164>)
 800121a:	7a1a      	ldrb	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	70da      	strb	r2, [r3, #3]
    pCurStatus->bModuleAlarm = gGCUStatus.ModuleAlarm.bAlarm;
 8001220:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <GetGCUStatus+0x164>)
 8001222:	7b1a      	ldrb	r2, [r3, #12]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	711a      	strb	r2, [r3, #4]
    pCurStatus->bBarrierSw = gGCUStatus.bBarrierSw;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <GetGCUStatus+0x164>)
 800122a:	7c1b      	ldrb	r3, [r3, #16]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	715a      	strb	r2, [r3, #5]

#if BART_IO
    pCurStatus->bMaintenanceDoorSw = (RD_SWITCH & MASK_SDOOR);
 8001232:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <GetGCUStatus+0x168>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	719a      	strb	r2, [r3, #6]
#else
    pCurStatus->bMaintenanceDoorSw = (RD_SWITCH1 & MASK_SDOOR1) | ((RD_SWITCH2 & MASK_SDOOR2) << 4);
#endif
    pCurStatus->bUPSStatus = gGCUStatus.bUPSStatus;
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <GetGCUStatus+0x164>)
 800123e:	7c9b      	ldrb	r3, [r3, #18]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	71da      	strb	r2, [r3, #7]
    pCurStatus->bSafetySen = gGCUStatus.bSafetyDetection;
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <GetGCUStatus+0x164>)
 8001248:	7cdb      	ldrb	r3, [r3, #19]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	721a      	strb	r2, [r3, #8]
    pCurStatus->bSCADA = gGCUStatus.bSCADA;
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <GetGCUStatus+0x164>)
 8001252:	7d1b      	ldrb	r3, [r3, #20]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	725a      	strb	r2, [r3, #9]
    pCurStatus->bDoorForcedOpen = gGCUStatus.bDoorForcedOpen;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <GetGCUStatus+0x164>)
 800125c:	7d5b      	ldrb	r3, [r3, #21]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	729a      	strb	r2, [r3, #10]


#if BART_IO

	dwSpareSenserValue = (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN1_Pin))? 0x01: 0x00;  // Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기)
 8001264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001268:	4821      	ldr	r0, [pc, #132]	; (80012f0 <GetGCUStatus+0x16c>)
 800126a:	f009 fbbd 	bl	800a9e8 <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf14      	ite	ne
 8001274:	2301      	movne	r3, #1
 8001276:	2300      	moveq	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	60fb      	str	r3, [r7, #12]
	dwSpareSenserValue |= (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN2_Pin))? 0x02: 0x00;
 800127c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001280:	481b      	ldr	r0, [pc, #108]	; (80012f0 <GetGCUStatus+0x16c>)
 8001282:	f009 fbb1 	bl	800a9e8 <HAL_GPIO_ReadPin>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <GetGCUStatus+0x10c>
 800128c:	2302      	movs	r3, #2
 800128e:	e000      	b.n	8001292 <GetGCUStatus+0x10e>
 8001290:	2300      	movs	r3, #0
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]



    pCurStatus->bPassengerSensor1 = RD_PASSSEN1;
 800129a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	72da      	strb	r2, [r3, #11]
    pCurStatus->bPassengerSensor2 = RD_PASSSEN2;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <GetGCUStatus+0x170>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	731a      	strb	r2, [r3, #12]
    pCurStatus->bPassengerSensor3 = dwSpareSenserValue;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	735a      	strb	r2, [r3, #13]
#else
    pCurStatus->bPassengerSensor1 = RD_PASSSEN1;
    pCurStatus->bPassengerSensor2 = RD_PASSSEN2;
    pCurStatus->bPassengerSensor3 = RD_PASSSEN3;
#endif
    pCurStatus->bIllegalPass = gGCUStatus.IllegalPass.bIllegalPass;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <GetGCUStatus+0x164>)
 80012ba:	7f1a      	ldrb	r2, [r3, #28]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	739a      	strb	r2, [r3, #14]
    pCurStatus->bDipSwitchValue = ReadDipSwitch();
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <GetGCUStatus+0x174>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	73da      	strb	r2, [r3, #15]
    pCurStatus->bPeopleCount = gGCUStatus.bPeopleCount;
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <GetGCUStatus+0x164>)
 80012d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	745a      	strb	r2, [r3, #17]
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	240004d4 	.word	0x240004d4
 80012e8:	240004b0 	.word	0x240004b0
 80012ec:	60000300 	.word	0x60000300
 80012f0:	58020000 	.word	0x58020000
 80012f4:	60000100 	.word	0x60000100
 80012f8:	58020400 	.word	0x58020400

080012fc <GetAuthCount>:

/* Auth Functions ------------------------------------------------------*/
void GetAuthCount(T_GCU_AUTH_COUNT *pAuthCount)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    pAuthCount->bAuthCount_EN = gGCUStatus.bAuthCount_EN;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <GetAuthCount+0x28>)
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	701a      	strb	r2, [r3, #0]
    pAuthCount->bAuthCount_EX = gGCUStatus.bAuthCount_EX;
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <GetAuthCount+0x28>)
 8001310:	795b      	ldrb	r3, [r3, #5]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	705a      	strb	r2, [r3, #1]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	240004b0 	.word	0x240004b0

08001328 <IncreaseAuthCount>:

void IncreaseAuthCount(BYTE bDir)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
    //PRINTL(" [IncreaseAuthCount] Dir:%d", bDir);

    printf(" [IncreaseAuthCount] Dir:%d \n", bDir);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4619      	mov	r1, r3
 8001336:	482d      	ldr	r0, [pc, #180]	; (80013ec <IncreaseAuthCount+0xc4>)
 8001338:	f008 f888 	bl	800944c <printf_>

    if (bDir == FROM_ENTRY)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d113      	bne.n	800136a <IncreaseAuthCount+0x42>
    {
        gGCUStatus.bAuthCount_EN = (gGCUStatus.bAuthCount_EN < AUTHORIZE_MAX_COUNT) ? gGCUStatus.bAuthCount_EN + 1 : AUTHORIZE_MAX_COUNT;
 8001342:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <IncreaseAuthCount+0xc8>)
 8001344:	791b      	ldrb	r3, [r3, #4]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d005      	beq.n	8001358 <IncreaseAuthCount+0x30>
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <IncreaseAuthCount+0xc8>)
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	3301      	adds	r3, #1
 8001354:	b2db      	uxtb	r3, r3
 8001356:	e000      	b.n	800135a <IncreaseAuthCount+0x32>
 8001358:	23ff      	movs	r3, #255	; 0xff
 800135a:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <IncreaseAuthCount+0xc8>)
 800135c:	7113      	strb	r3, [r2, #4]
        gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
 800135e:	4a24      	ldr	r2, [pc, #144]	; (80013f0 <IncreaseAuthCount+0xc8>)
 8001360:	7f13      	ldrb	r3, [r2, #28]
 8001362:	f36f 0382 	bfc	r3, #2, #1
 8001366:	7713      	strb	r3, [r2, #28]
 8001368:	e015      	b.n	8001396 <IncreaseAuthCount+0x6e>
    }
    else if (bDir == FROM_EXIT)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d112      	bne.n	8001396 <IncreaseAuthCount+0x6e>
    {
        gGCUStatus.bAuthCount_EX = (gGCUStatus.bAuthCount_EX < AUTHORIZE_MAX_COUNT) ? gGCUStatus.bAuthCount_EX + 1 : AUTHORIZE_MAX_COUNT;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <IncreaseAuthCount+0xc8>)
 8001372:	795b      	ldrb	r3, [r3, #5]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2bff      	cmp	r3, #255	; 0xff
 8001378:	d005      	beq.n	8001386 <IncreaseAuthCount+0x5e>
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <IncreaseAuthCount+0xc8>)
 800137c:	795b      	ldrb	r3, [r3, #5]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	3301      	adds	r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	e000      	b.n	8001388 <IncreaseAuthCount+0x60>
 8001386:	23ff      	movs	r3, #255	; 0xff
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <IncreaseAuthCount+0xc8>)
 800138a:	7153      	strb	r3, [r2, #5]
        gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
 800138c:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <IncreaseAuthCount+0xc8>)
 800138e:	7f13      	ldrb	r3, [r2, #28]
 8001390:	f36f 1386 	bfc	r3, #6, #1
 8001394:	7713      	strb	r3, [r2, #28]
    }

    if (gbPrevDir != bDir)
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <IncreaseAuthCount+0xcc>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	429a      	cmp	r2, r3
 800139e:	d004      	beq.n	80013aa <IncreaseAuthCount+0x82>
    {
        ClearPassageAlarm();				//used?
 80013a0:	f000 fd16 	bl	8001dd0 <ClearPassageAlarm>
        gbPrevDir = bDir;
 80013a4:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <IncreaseAuthCount+0xcc>)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	7013      	strb	r3, [r2, #0]
    }

    ControlBarrier(bDir);
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f855 	bl	800145c <ControlBarrier>
    ResetTimer(&timerLuggageWait);
 80013b2:	4811      	ldr	r0, [pc, #68]	; (80013f8 <IncreaseAuthCount+0xd0>)
 80013b4:	f00e f924 	bl	800f600 <ResetTimer>
    ResetTimer(&timerSafety);
 80013b8:	4810      	ldr	r0, [pc, #64]	; (80013fc <IncreaseAuthCount+0xd4>)
 80013ba:	f00e f921 	bl	800f600 <ResetTimer>
    ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f882 	bl	80014cc <ControlBuzzer>
    SetAuthTimer();
 80013c8:	f000 ff5a 	bl	8002280 <SetAuthTimer>

    //PRINTL(" [IncreaseAuthCount] auth cnt EN:%d, EX:%d", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
    printf(" [IncreaseAuthCount] auth cnt EN:%d, EX:%d  \n", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <IncreaseAuthCount+0xc8>)
 80013ce:	791b      	ldrb	r3, [r3, #4]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4619      	mov	r1, r3
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <IncreaseAuthCount+0xc8>)
 80013d6:	795b      	ldrb	r3, [r3, #5]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	461a      	mov	r2, r3
 80013dc:	4808      	ldr	r0, [pc, #32]	; (8001400 <IncreaseAuthCount+0xd8>)
 80013de:	f008 f835 	bl	800944c <printf_>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	08010b50 	.word	0x08010b50
 80013f0:	240004b0 	.word	0x240004b0
 80013f4:	24000438 	.word	0x24000438
 80013f8:	240001d8 	.word	0x240001d8
 80013fc:	240001e4 	.word	0x240001e4
 8001400:	08010b70 	.word	0x08010b70

08001404 <ClearAuthCount>:

void ClearAuthCount(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
    gGCUStatus.bAuthCount_EN = 0;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <ClearAuthCount+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	711a      	strb	r2, [r3, #4]
    gGCUStatus.bAuthCount_EX = 0;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <ClearAuthCount+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	715a      	strb	r2, [r3, #5]
    gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <ClearAuthCount+0x50>)
 8001416:	7a13      	ldrb	r3, [r2, #8]
 8001418:	f36f 03c3 	bfc	r3, #3, #1
 800141c:	7213      	strb	r3, [r2, #8]
    gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 800141e:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <ClearAuthCount+0x50>)
 8001420:	7a13      	ldrb	r3, [r2, #8]
 8001422:	f36f 13c7 	bfc	r3, #7, #1
 8001426:	7213      	strb	r3, [r2, #8]
    ResetTimer(&timerAuthorize);
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <ClearAuthCount+0x54>)
 800142a:	f00e f8e9 	bl	800f600 <ResetTimer>

    if (!gGCUStatus.PassageAlarm.b.nFromEN && !gGCUStatus.PassageAlarm.b.nFromEX)
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <ClearAuthCount+0x50>)
 8001430:	7a1b      	ldrb	r3, [r3, #8]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d108      	bne.n	800144e <ClearAuthCount+0x4a>
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <ClearAuthCount+0x50>)
 800143e:	7a1b      	ldrb	r3, [r3, #8]
 8001440:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <ClearAuthCount+0x4a>
        InitPassageMode();
 800144a:	f000 ff45 	bl	80022d8 <InitPassageMode>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	240004b0 	.word	0x240004b0
 8001458:	24000160 	.word	0x24000160

0800145c <ControlBarrier>:

/* Module Control Functions ------------------------------------------------------*/
void ControlBarrier(BYTE bFDoorControl)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
    //PRINTL(" [ControlBarrier] cmd:%d", bFDoorControl);
    printf(" [ControlBarrier] cmd:%d \n", bFDoorControl);
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4619      	mov	r1, r3
 800146a:	4815      	ldr	r0, [pc, #84]	; (80014c0 <ControlBarrier+0x64>)
 800146c:	f007 ffee 	bl	800944c <printf_>
    gbBarrierCmd = bFDoorControl;
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <ControlBarrier+0x68>)
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	7013      	strb	r3, [r2, #0]

    if (gbBarrierCmd == BARRIER_OPEN_FOR_EN)
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <ControlBarrier+0x68>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <ControlBarrier+0x34>
    {
        ResetTimer(&timerSafety);
 800147e:	4812      	ldr	r0, [pc, #72]	; (80014c8 <ControlBarrier+0x6c>)
 8001480:	f00e f8be 	bl	800f600 <ResetTimer>
        //OpenBarrierForSwing(gbBarrierCmd);			pms
        Brr_OpenBarrier(gbBarrierCmd);
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <ControlBarrier+0x68>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f939 	bl	8000700 <Brr_OpenBarrier>
    }
    else if (gbBarrierCmd == BARRIER_CLOSE_S)
    {
        SetTimer(&timerSafety);
    }
}
 800148e:	e013      	b.n	80014b8 <ControlBarrier+0x5c>
    else if (gbBarrierCmd == BARRIER_OPEN_FOR_EX)
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <ControlBarrier+0x68>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d108      	bne.n	80014aa <ControlBarrier+0x4e>
        ResetTimer(&timerSafety);
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <ControlBarrier+0x6c>)
 800149a:	f00e f8b1 	bl	800f600 <ResetTimer>
        Brr_OpenBarrier(gbBarrierCmd);
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <ControlBarrier+0x68>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f92c 	bl	8000700 <Brr_OpenBarrier>
}
 80014a8:	e006      	b.n	80014b8 <ControlBarrier+0x5c>
    else if (gbBarrierCmd == BARRIER_CLOSE_S)
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <ControlBarrier+0x68>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d102      	bne.n	80014b8 <ControlBarrier+0x5c>
        SetTimer(&timerSafety);
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <ControlBarrier+0x6c>)
 80014b4:	f00e f890 	bl	800f5d8 <SetTimer>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	08010ba0 	.word	0x08010ba0
 80014c4:	24000028 	.word	0x24000028
 80014c8:	240001e4 	.word	0x240001e4

080014cc <ControlBuzzer>:

void ControlBuzzer(BYTE bBuzzerNo, BYTE bBuzzerControl, BYTE bDuration)	//main 부저 외에 다른 부저가 없기 때문에 다른 것으로 동작 변경이 필요 pms
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
 80014d6:	460b      	mov	r3, r1
 80014d8:	71bb      	strb	r3, [r7, #6]
 80014da:	4613      	mov	r3, r2
 80014dc:	717b      	strb	r3, [r7, #5]
    ResetTimer(&timerBuzzer[bBuzzerNo]);
 80014de:	79fa      	ldrb	r2, [r7, #7]
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4a21      	ldr	r2, [pc, #132]	; (8001570 <ControlBuzzer+0xa4>)
 80014ea:	4413      	add	r3, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00e f887 	bl	800f600 <ResetTimer>
    gbBuzzerCMD[bBuzzerNo] = bBuzzerControl & MASK_BUZZER_CMD;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	79ba      	ldrb	r2, [r7, #6]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	b2d1      	uxtb	r1, r2
 80014fc:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <ControlBuzzer+0xa8>)
 80014fe:	54d1      	strb	r1, [r2, r3]

    if (bBuzzerControl == BUZZER_OFF || bDuration == 0)
 8001500:	79bb      	ldrb	r3, [r7, #6]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <ControlBuzzer+0x40>
 8001506:	797b      	ldrb	r3, [r7, #5]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <ControlBuzzer+0x46>
    {
       // BuzzerOffEx(bBuzzerNo);      		//pms
    	BuzzerOff();						//temp pms
 800150c:	f004 fc36 	bl	8005d7c <BuzzerOff>

            gdwBuzzerTimeout[bBuzzerNo] = bDuration * TICK_COUNT_1SEC;
            SetTimer(&timerBuzzer[bBuzzerNo]);
        }
    }
}
 8001510:	e029      	b.n	8001566 <ControlBuzzer+0x9a>
        if (gbBuzzerCMD[bBuzzerNo] == BUZZER_PERIODIC)
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4a17      	ldr	r2, [pc, #92]	; (8001574 <ControlBuzzer+0xa8>)
 8001516:	5cd3      	ldrb	r3, [r2, r3]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d105      	bne.n	8001528 <ControlBuzzer+0x5c>
            nBuzzerCount[bBuzzerNo] = 1;
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4a16      	ldr	r2, [pc, #88]	; (8001578 <ControlBuzzer+0xac>)
 8001520:	2101      	movs	r1, #1
 8001522:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001526:	e004      	b.n	8001532 <ControlBuzzer+0x66>
            nBuzzerCount[bBuzzerNo] = 0;
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <ControlBuzzer+0xac>)
 800152c:	2100      	movs	r1, #0
 800152e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (gbBuzzerCMD[bBuzzerNo])
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <ControlBuzzer+0xa8>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d014      	beq.n	8001566 <ControlBuzzer+0x9a>
        	BuzzerOn();					//temp pms
 800153c:	f004 fc12 	bl	8005d64 <BuzzerOn>
            gdwBuzzerTimeout[bBuzzerNo] = bDuration * TICK_COUNT_1SEC;
 8001540:	797b      	ldrb	r3, [r7, #5]
 8001542:	2264      	movs	r2, #100	; 0x64
 8001544:	fb03 f202 	mul.w	r2, r3, r2
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4611      	mov	r1, r2
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <ControlBuzzer+0xb0>)
 800154e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            SetTimer(&timerBuzzer[bBuzzerNo]);
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <ControlBuzzer+0xa4>)
 800155e:	4413      	add	r3, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f00e f839 	bl	800f5d8 <SetTimer>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	24000250 	.word	0x24000250
 8001574:	24000130 	.word	0x24000130
 8001578:	24000274 	.word	0x24000274
 800157c:	24000138 	.word	0x24000138

08001580 <ControlDirectionLED>:

void ControlDirectionLED(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	460a      	mov	r2, r1
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	4613      	mov	r3, r2
 800158e:	71bb      	strb	r3, [r7, #6]
    if (gbLampCMD_EN != bLEDControl_EN)
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <ControlDirectionLED+0x60>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	429a      	cmp	r2, r3
 8001598:	d002      	beq.n	80015a0 <ControlDirectionLED+0x20>
        gbLampCMD_EN = bLEDControl_EN;
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <ControlDirectionLED+0x60>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	7013      	strb	r3, [r2, #0]
    if (gbLampCMD_EX != bLEDControl_EX)
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <ControlDirectionLED+0x64>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	79ba      	ldrb	r2, [r7, #6]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d002      	beq.n	80015b0 <ControlDirectionLED+0x30>
        gbLampCMD_EX = bLEDControl_EX;
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <ControlDirectionLED+0x64>)
 80015ac:	79bb      	ldrb	r3, [r7, #6]
 80015ae:	7013      	strb	r3, [r2, #0]

    ControlStatusLED_En(gbLampCMD_EN);
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <ControlDirectionLED+0x60>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 fbed 	bl	8005d94 <ControlStatusLED_En>
    ControlStatusLED_Ex(gbLampCMD_EX);    
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <ControlDirectionLED+0x64>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f004 fc18 	bl	8005df4 <ControlStatusLED_Ex>
    ControlOverHeadDisplay_En(gbLampCMD_EN);
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <ControlDirectionLED+0x60>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fc43 	bl	8005e54 <ControlOverHeadDisplay_En>
    ControlOverHeadDisplay_Ex(gbLampCMD_EX);
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <ControlDirectionLED+0x64>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f004 fc70 	bl	8005eb8 <ControlOverHeadDisplay_Ex>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24000129 	.word	0x24000129
 80015e4:	2400012a 	.word	0x2400012a

080015e8 <ControlStatusLED>:

void ControlStatusLED(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	460a      	mov	r2, r1
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71bb      	strb	r3, [r7, #6]
    ControlStatusLED_En(bLEDControl_EN);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 fbca 	bl	8005d94 <ControlStatusLED_En>
    ControlStatusLED_Ex(bLEDControl_EX);
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fbf6 	bl	8005df4 <ControlStatusLED_Ex>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <ControlOverheadDisplay>:

void ControlOverheadDisplay(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	4613      	mov	r3, r2
 800161e:	71bb      	strb	r3, [r7, #6]
    ControlOverHeadDisplay_En(bLEDControl_EN);
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	4618      	mov	r0, r3
 8001624:	f004 fc16 	bl	8005e54 <ControlOverHeadDisplay_En>
    ControlOverHeadDisplay_Ex(bLEDControl_EX);
 8001628:	79bb      	ldrb	r3, [r7, #6]
 800162a:	4618      	mov	r0, r3
 800162c:	f004 fc44 	bl	8005eb8 <ControlOverHeadDisplay_Ex>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <ControlIndicator>:

void ControlIndicator(BYTE bLEDControl_EN, BYTE bLEDControl_EX, BYTE bDuration, bool isOneTime)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4604      	mov	r4, r0
 8001640:	4608      	mov	r0, r1
 8001642:	4611      	mov	r1, r2
 8001644:	461a      	mov	r2, r3
 8001646:	4623      	mov	r3, r4
 8001648:	71fb      	strb	r3, [r7, #7]
 800164a:	4603      	mov	r3, r0
 800164c:	71bb      	strb	r3, [r7, #6]
 800164e:	460b      	mov	r3, r1
 8001650:	717b      	strb	r3, [r7, #5]
 8001652:	4613      	mov	r3, r2
 8001654:	713b      	strb	r3, [r7, #4]
    if (isOneTime == FALSE)
 8001656:	793b      	ldrb	r3, [r7, #4]
 8001658:	f083 0301 	eor.w	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00f      	beq.n	8001682 <ControlIndicator+0x4a>
    {
        if (gbIndicatorCMD_EN != bLEDControl_EN)
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <ControlIndicator+0xd4>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	429a      	cmp	r2, r3
 800166a:	d002      	beq.n	8001672 <ControlIndicator+0x3a>
            gbIndicatorCMD_EN = bLEDControl_EN;
 800166c:	4a27      	ldr	r2, [pc, #156]	; (800170c <ControlIndicator+0xd4>)
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	7013      	strb	r3, [r2, #0]
        if (gbIndicatorCMD_EX != bLEDControl_EX)
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <ControlIndicator+0xd8>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	79ba      	ldrb	r2, [r7, #6]
 8001678:	429a      	cmp	r2, r3
 800167a:	d002      	beq.n	8001682 <ControlIndicator+0x4a>
            gbIndicatorCMD_EX = bLEDControl_EX;
 800167c:	4a24      	ldr	r2, [pc, #144]	; (8001710 <ControlIndicator+0xd8>)
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	7013      	strb	r3, [r2, #0]
    }

    if (gCurGCUOpMode.bServiceMode_EN != NO_SERVICE || gCurGCUOpMode.bEmergencyMaint == EMERGENCY_MODE || gCurGCUOpMode.bEmergencyMaint == FREE_MODE)
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <ControlIndicator+0xdc>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d107      	bne.n	800169a <ControlIndicator+0x62>
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <ControlIndicator+0xdc>)
 800168c:	789b      	ldrb	r3, [r3, #2]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d003      	beq.n	800169a <ControlIndicator+0x62>
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <ControlIndicator+0xdc>)
 8001694:	789b      	ldrb	r3, [r3, #2]
 8001696:	2b20      	cmp	r3, #32
 8001698:	d104      	bne.n	80016a4 <ControlIndicator+0x6c>
    {
        ControlIndicatorLight_En(bLEDControl_EN);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fc39 	bl	8005f14 <ControlIndicatorLight_En>
 80016a2:	e002      	b.n	80016aa <ControlIndicator+0x72>
    }
    else
    {
        ControlIndicatorLight_En(LAMP_RED_ON);
 80016a4:	2001      	movs	r0, #1
 80016a6:	f004 fc35 	bl	8005f14 <ControlIndicatorLight_En>
    }

    if (gCurGCUOpMode.bServiceMode_EX != NO_SERVICE || gCurGCUOpMode.bEmergencyMaint == EMERGENCY_MODE || gCurGCUOpMode.bEmergencyMaint == FREE_MODE)
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <ControlIndicator+0xdc>)
 80016ac:	785b      	ldrb	r3, [r3, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d107      	bne.n	80016c2 <ControlIndicator+0x8a>
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <ControlIndicator+0xdc>)
 80016b4:	789b      	ldrb	r3, [r3, #2]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d003      	beq.n	80016c2 <ControlIndicator+0x8a>
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <ControlIndicator+0xdc>)
 80016bc:	789b      	ldrb	r3, [r3, #2]
 80016be:	2b20      	cmp	r3, #32
 80016c0:	d104      	bne.n	80016cc <ControlIndicator+0x94>
    {
        ControlIndicatorLight_Ex(bLEDControl_EX);
 80016c2:	79bb      	ldrb	r3, [r7, #6]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f004 fc53 	bl	8005f70 <ControlIndicatorLight_Ex>
 80016ca:	e002      	b.n	80016d2 <ControlIndicator+0x9a>
    }
    else
    {
        ControlIndicatorLight_Ex(LAMP_RED_ON);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f004 fc4f 	bl	8005f70 <ControlIndicatorLight_Ex>
    }

    if (bDuration && (bLEDControl_EN || bLEDControl_EX))
 80016d2:	797b      	ldrb	r3, [r7, #5]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d010      	beq.n	80016fa <ControlIndicator+0xc2>
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <ControlIndicator+0xac>
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00a      	beq.n	80016fa <ControlIndicator+0xc2>
    {
        gdwTimeoutIndicator = bDuration * TICK_COUNT_1SEC;
 80016e4:	797b      	ldrb	r3, [r7, #5]
 80016e6:	2264      	movs	r2, #100	; 0x64
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <ControlIndicator+0xe0>)
 80016f0:	601a      	str	r2, [r3, #0]
        SetTimer(&timerIndicator);
 80016f2:	480a      	ldr	r0, [pc, #40]	; (800171c <ControlIndicator+0xe4>)
 80016f4:	f00d ff70 	bl	800f5d8 <SetTimer>
 80016f8:	e003      	b.n	8001702 <ControlIndicator+0xca>
    }
    else
        ResetTimer(&timerIndicator);
 80016fa:	4808      	ldr	r0, [pc, #32]	; (800171c <ControlIndicator+0xe4>)
 80016fc:	f00d ff80 	bl	800f600 <ResetTimer>
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bd90      	pop	{r4, r7, pc}
 800170a:	bf00      	nop
 800170c:	24000127 	.word	0x24000127
 8001710:	24000128 	.word	0x24000128
 8001714:	240004d4 	.word	0x240004d4
 8001718:	24000144 	.word	0x24000144
 800171c:	240001cc 	.word	0x240001cc

08001720 <ControlIndicator4Test>:

void ControlIndicator4Test(BYTE bLEDControl_EN, BYTE bLEDControl_EX)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	460a      	mov	r2, r1
 800172a:	71fb      	strb	r3, [r7, #7]
 800172c:	4613      	mov	r3, r2
 800172e:	71bb      	strb	r3, [r7, #6]
    ControlIndicatorLight_En(bLEDControl_EN);
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	4618      	mov	r0, r3
 8001734:	f004 fbee 	bl	8005f14 <ControlIndicatorLight_En>
    ControlIndicatorLight_Ex(bLEDControl_EN);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fc18 	bl	8005f70 <ControlIndicatorLight_Ex>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <ControlIndicatorBlink>:

void ControlIndicatorBlink(BYTE isSet)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
    if (FLG_SET == isSet)
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d10c      	bne.n	8001772 <ControlIndicatorBlink+0x2a>
    {
        gbIndicatorBlink = FLG_SET;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <ControlIndicatorBlink+0x50>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
        gbIndicatorFlag = FLG_OFF;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <ControlIndicatorBlink+0x54>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
        gdwTimeoutBlink = 5 * TICK_COUNT_100MS;
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <ControlIndicatorBlink+0x58>)
 8001766:	2232      	movs	r2, #50	; 0x32
 8001768:	601a      	str	r2, [r3, #0]
        SetTimer(&timerBlink);
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <ControlIndicatorBlink+0x5c>)
 800176c:	f00d ff34 	bl	800f5d8 <SetTimer>
        ResetTimer(&timerBlink);

        gbIndicatorFlag = FLG_OFF;
        ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
    }
}
 8001770:	e00e      	b.n	8001790 <ControlIndicatorBlink+0x48>
        gbIndicatorBlink = FLG_OFF;
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <ControlIndicatorBlink+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
        ResetTimer(&timerBlink);
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <ControlIndicatorBlink+0x5c>)
 800177a:	f00d ff41 	bl	800f600 <ResetTimer>
        gbIndicatorFlag = FLG_OFF;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <ControlIndicatorBlink+0x54>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
        ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 8001784:	2300      	movs	r3, #0
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff ff54 	bl	8001638 <ControlIndicator>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24000126 	.word	0x24000126
 800179c:	2400012c 	.word	0x2400012c
 80017a0:	24000150 	.word	0x24000150
 80017a4:	240001b4 	.word	0x240001b4

080017a8 <CheckUPSStatus>:

void CheckUPSStatus(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
    BYTE bUPSStatus = RD_UPSSTAT & MASK_POWER_CHK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	71fb      	strb	r3, [r7, #7]

    switch (bUPSStatus)
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b06      	cmp	r3, #6
 80017b6:	f200 80aa 	bhi.w	800190e <CheckUPSStatus+0x166>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <CheckUPSStatus+0x18>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	080017eb 	.word	0x080017eb
 80017c4:	080017dd 	.word	0x080017dd
 80017c8:	0800190f 	.word	0x0800190f
 80017cc:	0800190f 	.word	0x0800190f
 80017d0:	080017eb 	.word	0x080017eb
 80017d4:	0800190f 	.word	0x0800190f
 80017d8:	08001851 	.word	0x08001851
    {
    case 0x01:
        gGCUStatus.bUPSStatus = bUPSStatus;
 80017dc:	4a4e      	ldr	r2, [pc, #312]	; (8001918 <CheckUPSStatus+0x170>)
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	7493      	strb	r3, [r2, #18]
        // PRINTL(" [CheckUPSStatus] UPS Comm failure");
        printf(" [CheckUPSStatus] UPS Comm failure  \n");
 80017e2:	484e      	ldr	r0, [pc, #312]	; (800191c <CheckUPSStatus+0x174>)
 80017e4:	f007 fe32 	bl	800944c <printf_>
        break;
 80017e8:	e091      	b.n	800190e <CheckUPSStatus+0x166>
    case 0x00:
    case 0x04:
        if (gbPowerFailFlag == FLG_OFF)
 80017ea:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <CheckUPSStatus+0x178>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d126      	bne.n	8001840 <CheckUPSStatus+0x98>
        {
            if (timerPowerFailureCheck.fStart)
 80017f2:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <CheckUPSStatus+0x17c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d01b      	beq.n	8001832 <CheckUPSStatus+0x8a>
            {
                if (IsTimeout(&timerPowerFailureCheck, DEFAULT_POWER_FAIL_TIMEOUT * TICK_COUNT_1SEC))
 80017fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017fe:	4849      	ldr	r0, [pc, #292]	; (8001924 <CheckUPSStatus+0x17c>)
 8001800:	f00d ff0c 	bl	800f61c <IsTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d07e      	beq.n	8001908 <CheckUPSStatus+0x160>
                {
                    ResetTimer(&timerPowerFailureCheck);
 800180a:	4846      	ldr	r0, [pc, #280]	; (8001924 <CheckUPSStatus+0x17c>)
 800180c:	f00d fef8 	bl	800f600 <ResetTimer>
                    gbPowerFailFlag = FLG_SET;
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <CheckUPSStatus+0x178>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
                    ControlBarrier(BARRIER_OPEN_FOR_EX);                
 8001816:	2002      	movs	r0, #2
 8001818:	f7ff fe20 	bl	800145c <ControlBarrier>
                    gGCUStatus.bUPSStatus = bUPSStatus;
 800181c:	4a3e      	ldr	r2, [pc, #248]	; (8001918 <CheckUPSStatus+0x170>)
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	7493      	strb	r3, [r2, #18]
                    ControlDirectionLED(DIR_RED, DIR_RED);
 8001822:	2102      	movs	r1, #2
 8001824:	2002      	movs	r0, #2
 8001826:	f7ff feab 	bl	8001580 <ControlDirectionLED>
                   // PRINTL(" [CheckUPSStatus] Power failure");
                    printf(" [CheckUPSStatus] Power failure  \n");
 800182a:	483f      	ldr	r0, [pc, #252]	; (8001928 <CheckUPSStatus+0x180>)
 800182c:	f007 fe0e 	bl	800944c <printf_>
            if (timerPowerRecoveryCheck.fStart)
            {
                ResetTimer(&timerPowerRecoveryCheck);
            }
        }
        break;
 8001830:	e06a      	b.n	8001908 <CheckUPSStatus+0x160>
                SetTimer(&timerPowerFailureCheck);
 8001832:	483c      	ldr	r0, [pc, #240]	; (8001924 <CheckUPSStatus+0x17c>)
 8001834:	f00d fed0 	bl	800f5d8 <SetTimer>
                ResetTimer(&timerPowerRecoveryCheck);
 8001838:	483c      	ldr	r0, [pc, #240]	; (800192c <CheckUPSStatus+0x184>)
 800183a:	f00d fee1 	bl	800f600 <ResetTimer>
        break;
 800183e:	e063      	b.n	8001908 <CheckUPSStatus+0x160>
            if (timerPowerRecoveryCheck.fStart)
 8001840:	4b3a      	ldr	r3, [pc, #232]	; (800192c <CheckUPSStatus+0x184>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d05f      	beq.n	8001908 <CheckUPSStatus+0x160>
                ResetTimer(&timerPowerRecoveryCheck);
 8001848:	4838      	ldr	r0, [pc, #224]	; (800192c <CheckUPSStatus+0x184>)
 800184a:	f00d fed9 	bl	800f600 <ResetTimer>
        break;
 800184e:	e05b      	b.n	8001908 <CheckUPSStatus+0x160>
    case 0x06:
        if (gbPowerFailFlag == FLG_SET)
 8001850:	4b33      	ldr	r3, [pc, #204]	; (8001920 <CheckUPSStatus+0x178>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d14c      	bne.n	80018f2 <CheckUPSStatus+0x14a>
        {
            if (timerPowerRecoveryCheck.fStart)
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <CheckUPSStatus+0x184>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d041      	beq.n	80018e4 <CheckUPSStatus+0x13c>
            {
                if (IsTimeout(&timerPowerRecoveryCheck, DEFAULT_POWER_FAIL_TIMEOUT * TICK_COUNT_1SEC))
 8001860:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001864:	4831      	ldr	r0, [pc, #196]	; (800192c <CheckUPSStatus+0x184>)
 8001866:	f00d fed9 	bl	800f61c <IsTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d04d      	beq.n	800190c <CheckUPSStatus+0x164>
                {
                    if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <CheckUPSStatus+0x188>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <CheckUPSStatus+0xe2>
                        (gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <CheckUPSStatus+0x170>)
 800187a:	795b      	ldrb	r3, [r3, #5]
 800187c:	b2db      	uxtb	r3, r3
                    if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <CheckUPSStatus+0xea>
                        (gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <CheckUPSStatus+0x188>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d103      	bne.n	8001892 <CheckUPSStatus+0xea>
                        gbLampCMD_EN = DIR_RED;
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <CheckUPSStatus+0x18c>)
 800188c:	2202      	movs	r2, #2
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e002      	b.n	8001898 <CheckUPSStatus+0xf0>
                    else
                        gbLampCMD_EN = DIR_GREEN;
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <CheckUPSStatus+0x18c>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]

                    if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <CheckUPSStatus+0x188>)
 800189a:	785b      	ldrb	r3, [r3, #1]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <CheckUPSStatus+0x10a>
                        (gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <CheckUPSStatus+0x170>)
 80018a2:	791b      	ldrb	r3, [r3, #4]
 80018a4:	b2db      	uxtb	r3, r3
                    if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <CheckUPSStatus+0x112>
                        (gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80018aa:	4b21      	ldr	r3, [pc, #132]	; (8001930 <CheckUPSStatus+0x188>)
 80018ac:	785b      	ldrb	r3, [r3, #1]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d103      	bne.n	80018ba <CheckUPSStatus+0x112>
                        gbLampCMD_EX = DIR_RED;
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <CheckUPSStatus+0x190>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	e002      	b.n	80018c0 <CheckUPSStatus+0x118>
                    else
                        gbLampCMD_EX = DIR_GREEN;
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <CheckUPSStatus+0x190>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]

                    gbPowerFailFlag = FLG_OFF;
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <CheckUPSStatus+0x178>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
                    gGCUStatus.bUPSStatus = bUPSStatus;
 80018c6:	4a14      	ldr	r2, [pc, #80]	; (8001918 <CheckUPSStatus+0x170>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	7493      	strb	r3, [r2, #18]
                    ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <CheckUPSStatus+0x18c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4a19      	ldr	r2, [pc, #100]	; (8001938 <CheckUPSStatus+0x190>)
 80018d2:	7812      	ldrb	r2, [r2, #0]
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fe52 	bl	8001580 <ControlDirectionLED>
                    //PRINTL(" [CheckUPSStatus] Power recovered");
                    printf(" [CheckUPSStatus] Power recovered  \n");
 80018dc:	4817      	ldr	r0, [pc, #92]	; (800193c <CheckUPSStatus+0x194>)
 80018de:	f007 fdb5 	bl	800944c <printf_>
            {
                ResetTimer(&timerPowerFailureCheck);
            }
        }

        break;
 80018e2:	e013      	b.n	800190c <CheckUPSStatus+0x164>
                SetTimer(&timerPowerRecoveryCheck);
 80018e4:	4811      	ldr	r0, [pc, #68]	; (800192c <CheckUPSStatus+0x184>)
 80018e6:	f00d fe77 	bl	800f5d8 <SetTimer>
                ResetTimer(&timerPowerFailureCheck);
 80018ea:	480e      	ldr	r0, [pc, #56]	; (8001924 <CheckUPSStatus+0x17c>)
 80018ec:	f00d fe88 	bl	800f600 <ResetTimer>
        break;
 80018f0:	e00c      	b.n	800190c <CheckUPSStatus+0x164>
            gGCUStatus.bUPSStatus = bUPSStatus;
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <CheckUPSStatus+0x170>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	7493      	strb	r3, [r2, #18]
            if (timerPowerFailureCheck.fStart)
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <CheckUPSStatus+0x17c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <CheckUPSStatus+0x164>
                ResetTimer(&timerPowerFailureCheck);
 8001900:	4808      	ldr	r0, [pc, #32]	; (8001924 <CheckUPSStatus+0x17c>)
 8001902:	f00d fe7d 	bl	800f600 <ResetTimer>
        break;
 8001906:	e001      	b.n	800190c <CheckUPSStatus+0x164>
        break;
 8001908:	bf00      	nop
 800190a:	e000      	b.n	800190e <CheckUPSStatus+0x166>
        break;
 800190c:	bf00      	nop
    }
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	240004b0 	.word	0x240004b0
 800191c:	08010bbc 	.word	0x08010bbc
 8001920:	2400012b 	.word	0x2400012b
 8001924:	24000184 	.word	0x24000184
 8001928:	08010be4 	.word	0x08010be4
 800192c:	24000190 	.word	0x24000190
 8001930:	240004d4 	.word	0x240004d4
 8001934:	24000129 	.word	0x24000129
 8001938:	2400012a 	.word	0x2400012a
 800193c:	08010c08 	.word	0x08010c08

08001940 <CheckEmergencySignal>:

void CheckEmergencySignal(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
    BYTE bNewEmergencySignal = OFF;
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]
    BYTE bDipSwitch4 = ReadDipSwitch() & MASK_EMG_SIGNAL;
 800194a:	4b39      	ldr	r3, [pc, #228]	; (8001a30 <CheckEmergencySignal+0xf0>)
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	71fb      	strb	r3, [r7, #7]
    T_GCU_OP_MODE newMode;
    int nTriggerCount;

    if (bDipSwitch4)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <CheckEmergencySignal+0x26>
        bNewEmergencySignal = OFF;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e006      	b.n	8001974 <CheckEmergencySignal+0x34>
    else
        bNewEmergencySignal = (BYTE)IsEMGSignalOn();
 8001966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196a:	4831      	ldr	r0, [pc, #196]	; (8001a30 <CheckEmergencySignal+0xf0>)
 800196c:	f009 f83c 	bl	800a9e8 <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	73fb      	strb	r3, [r7, #15]

    
    if (bNewEmergencySignal) // TODO: EMG signal must be checked in BART Fare Gate by Joseph 20231002
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <CheckEmergencySignal+0x48>
        gGCUStatus.ModeStatus.b.nEmergencyMode = ON;
 800197a:	4a2e      	ldr	r2, [pc, #184]	; (8001a34 <CheckEmergencySignal+0xf4>)
 800197c:	7813      	ldrb	r3, [r2, #0]
 800197e:	2101      	movs	r1, #1
 8001980:	f361 1305 	bfi	r3, r1, #4, #2
 8001984:	7013      	strb	r3, [r2, #0]
 8001986:	e005      	b.n	8001994 <CheckEmergencySignal+0x54>
    else
        gGCUStatus.ModeStatus.b.nEmergencyMode = ON;
 8001988:	4a2a      	ldr	r2, [pc, #168]	; (8001a34 <CheckEmergencySignal+0xf4>)
 800198a:	7813      	ldrb	r3, [r2, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	f361 1305 	bfi	r3, r1, #4, #2
 8001992:	7013      	strb	r3, [r2, #0]

     
    if (gbPrevEmgSignal != bNewEmergencySignal)
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <CheckEmergencySignal+0xf8>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	429a      	cmp	r2, r3
 800199c:	d006      	beq.n	80019ac <CheckEmergencySignal+0x6c>
    {
        gnSignalCount = 1;
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <CheckEmergencySignal+0xfc>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
        gbPrevEmgSignal = bNewEmergencySignal;
 80019a4:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <CheckEmergencySignal+0xf8>)
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	7013      	strb	r3, [r2, #0]
                    }
                }
            }
        }
    }
}
 80019aa:	e03c      	b.n	8001a26 <CheckEmergencySignal+0xe6>
        if (gnSignalCount)
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <CheckEmergencySignal+0xfc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d038      	beq.n	8001a26 <CheckEmergencySignal+0xe6>
            nTriggerCount = gGCUParameter.bEMGTimeout * TICK_COUNT_1SEC;
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <CheckEmergencySignal+0x100>)
 80019b6:	79db      	ldrb	r3, [r3, #7]
 80019b8:	461a      	mov	r2, r3
 80019ba:	2364      	movs	r3, #100	; 0x64
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	60bb      	str	r3, [r7, #8]
            if (!nTriggerCount)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <CheckEmergencySignal+0x8c>
                nTriggerCount = 1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
            if (gnSignalCount++ == nTriggerCount)
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <CheckEmergencySignal+0xfc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	491a      	ldr	r1, [pc, #104]	; (8001a3c <CheckEmergencySignal+0xfc>)
 80019d4:	600a      	str	r2, [r1, #0]
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d124      	bne.n	8001a26 <CheckEmergencySignal+0xe6>
                gnSignalCount = 0;
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <CheckEmergencySignal+0xfc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
                if (bNewEmergencySignal)
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01e      	beq.n	8001a26 <CheckEmergencySignal+0xe6>
                    if (gGCUStatus.ModuleAlarm.b.nEMGSignal == OFF)
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <CheckEmergencySignal+0xf4>)
 80019ea:	7b1b      	ldrb	r3, [r3, #12]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d117      	bne.n	8001a26 <CheckEmergencySignal+0xe6>
                    	 printf(" [CheckEmergencySignal] EMG on!  \n");
 80019f6:	4813      	ldr	r0, [pc, #76]	; (8001a44 <CheckEmergencySignal+0x104>)
 80019f8:	f007 fd28 	bl	800944c <printf_>
                        gGCUStatus.ModuleAlarm.b.nEMGSignal = ON;
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <CheckEmergencySignal+0xf4>)
 80019fe:	7b13      	ldrb	r3, [r2, #12]
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	7313      	strb	r3, [r2, #12]
                        newMode.bServiceMode_EN = NO_SERVICE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	703b      	strb	r3, [r7, #0]
                        newMode.bServiceMode_EX = NO_SERVICE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	707b      	strb	r3, [r7, #1]
                        newMode.bEmergencyMaint = gCurGCUOpMode.bEmergencyMaint | EMERGENCY_MODE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <CheckEmergencySignal+0x108>)
 8001a10:	789b      	ldrb	r3, [r3, #2]
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	70bb      	strb	r3, [r7, #2]
                        newMode.bFlapDoorMode = FD_MODE_OPEN;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	70fb      	strb	r3, [r7, #3]
                        SetNewOpMode(&newMode);
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fabb 	bl	8000f9c <SetNewOpMode>
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	58020400 	.word	0x58020400
 8001a34:	240004b0 	.word	0x240004b0
 8001a38:	2400012f 	.word	0x2400012f
 8001a3c:	24000444 	.word	0x24000444
 8001a40:	240004a0 	.word	0x240004a0
 8001a44:	08010c30 	.word	0x08010c30
 8001a48:	240004d4 	.word	0x240004d4

08001a4c <CheckBuzzerTimer>:

void CheckBuzzerTimer(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < BUZZER_COUNT; i++) // BUZZER_NO_MAIN, BUZZER_NO_DIRB, BUZZER_NO_DIRA
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	e054      	b.n	8001b02 <CheckBuzzerTimer+0xb6>
    {
        if (timerBuzzer[i].fStart)
 8001a58:	492e      	ldr	r1, [pc, #184]	; (8001b14 <CheckBuzzerTimer+0xc8>)
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d022      	beq.n	8001ab2 <CheckBuzzerTimer+0x66>
        {
            if (IsTimeout(&timerBuzzer[i], gdwBuzzerTimeout[i]))
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <CheckBuzzerTimer+0xc8>)
 8001a78:	441a      	add	r2, r3
 8001a7a:	4927      	ldr	r1, [pc, #156]	; (8001b18 <CheckBuzzerTimer+0xcc>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f00d fdc9 	bl	800f61c <IsTimeout>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d010      	beq.n	8001ab2 <CheckBuzzerTimer+0x66>
            {
                nBuzzerCount[i] = 0;
 8001a90:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <CheckBuzzerTimer+0xd0>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2100      	movs	r1, #0
 8001a96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                ResetTimer(&timerBuzzer[i]);
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <CheckBuzzerTimer+0xc8>)
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00d fda9 	bl	800f600 <ResetTimer>
               // BuzzerOffEx(i);					//부저 한종류 밖에 없음 pms
                BuzzerOff();						//temp pms
 8001aae:	f004 f965 	bl	8005d7c <BuzzerOff>
            }
        }

        if (nBuzzerCount[i])
 8001ab2:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <CheckBuzzerTimer+0xd0>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01e      	beq.n	8001afc <CheckBuzzerTimer+0xb0>
        {
            nBuzzerCount[i]++;
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <CheckBuzzerTimer+0xd0>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	4914      	ldr	r1, [pc, #80]	; (8001b1c <CheckBuzzerTimer+0xd0>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if (nBuzzerCount[i] == 10)
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <CheckBuzzerTimer+0xd0>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	2b0a      	cmp	r3, #10
 8001ada:	d102      	bne.n	8001ae2 <CheckBuzzerTimer+0x96>
            {
               // BuzzerOffEx(i);					//부저 한종류 밖에 없음 pms
            	 BuzzerOff();
 8001adc:	f004 f94e 	bl	8005d7c <BuzzerOff>
 8001ae0:	e00c      	b.n	8001afc <CheckBuzzerTimer+0xb0>
            }
            else if (nBuzzerCount[i] == 20)
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <CheckBuzzerTimer+0xd0>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aea:	2b14      	cmp	r3, #20
 8001aec:	d106      	bne.n	8001afc <CheckBuzzerTimer+0xb0>
            {
                nBuzzerCount[i] = 1;
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <CheckBuzzerTimer+0xd0>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2101      	movs	r1, #1
 8001af4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                //BuzzerOnEx(i);					//부저 한종류 밖에 없음 pms
                BuzzerOn();
 8001af8:	f004 f934 	bl	8005d64 <BuzzerOn>
    for (i = 0; i < BUZZER_COUNT; i++) // BUZZER_NO_MAIN, BUZZER_NO_DIRB, BUZZER_NO_DIRA
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	dda7      	ble.n	8001a58 <CheckBuzzerTimer+0xc>
            }
        }
    }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	24000250 	.word	0x24000250
 8001b18:	24000138 	.word	0x24000138
 8001b1c:	24000274 	.word	0x24000274

08001b20 <CheckIndicatorTimer>:

void CheckIndicatorTimer(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
    if (timerIndicator.fStart)
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <CheckIndicatorTimer+0x34>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d011      	beq.n	8001b50 <CheckIndicatorTimer+0x30>
    {
        if (IsTimeout(&timerIndicator, gdwTimeoutIndicator))
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <CheckIndicatorTimer+0x38>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4808      	ldr	r0, [pc, #32]	; (8001b54 <CheckIndicatorTimer+0x34>)
 8001b34:	f00d fd72 	bl	800f61c <IsTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d008      	beq.n	8001b50 <CheckIndicatorTimer+0x30>
        {
            ResetTimer(&timerIndicator);
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <CheckIndicatorTimer+0x34>)
 8001b40:	f00d fd5e 	bl	800f600 <ResetTimer>
            ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 8001b44:	2300      	movs	r3, #0
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fd74 	bl	8001638 <ControlIndicator>
        }
    }
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	240001cc 	.word	0x240001cc
 8001b58:	24000144 	.word	0x24000144

08001b5c <CheckPassSenError>:
        }
    }
}

void CheckPassSenError(bool isSwing)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
    int i;
    BYTE bSensorData = RD_PASSSEN1;
 8001b66:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	73fb      	strb	r3, [r7, #15]

    for (i = 0; i < 16; i++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	e0de      	b.n	8001d32 <CheckPassSenError+0x1d6>
    {
        if (i == 8)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d102      	bne.n	8001b80 <CheckPassSenError+0x24>
            bSensorData = RD_PASSSEN2;
 8001b7a:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <CheckPassSenError+0x1e8>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	73fb      	strb	r3, [r7, #15]

        if (bSensorData & (1 << (i % 8)))
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4259      	negs	r1, r3
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	f001 0107 	and.w	r1, r1, #7
 8001b8e:	bf58      	it	pl
 8001b90:	424b      	negpl	r3, r1
 8001b92:	fa42 f303 	asr.w	r3, r2, r3
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 808a 	beq.w	8001cb4 <CheckPassSenError+0x158>
        {
            if (mdwTickPSensorBlock[i] == (gGCUParameter.bSensorBlockTimeout * TICK_COUNT_1SEC * 10))
 8001ba0:	4a69      	ldr	r2, [pc, #420]	; (8001d48 <CheckPassSenError+0x1ec>)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	4a68      	ldr	r2, [pc, #416]	; (8001d4c <CheckPassSenError+0x1f0>)
 8001baa:	7a12      	ldrb	r2, [r2, #8]
 8001bac:	4611      	mov	r1, r2
 8001bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bb2:	fb01 f202 	mul.w	r2, r1, r2
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d165      	bne.n	8001c86 <CheckPassSenError+0x12a>
            {
                gdwPSensorError |= (1 << i);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <CheckPassSenError+0x1f4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	4a61      	ldr	r2, [pc, #388]	; (8001d50 <CheckPassSenError+0x1f4>)
 8001bcc:	6013      	str	r3, [r2, #0]

                if (gGCUStatus.ModuleAlarm.b.nPSensor == OFF)
 8001bce:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <CheckPassSenError+0x1f8>)
 8001bd0:	7b1b      	ldrb	r3, [r3, #12]
 8001bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10b      	bne.n	8001bf4 <CheckPassSenError+0x98>
                {
                    if (gCurGCUOpMode.bEmergencyMaint == MODE_NONE)
 8001bdc:	4b5e      	ldr	r3, [pc, #376]	; (8001d58 <CheckPassSenError+0x1fc>)
 8001bde:	789b      	ldrb	r3, [r3, #2]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d104      	bne.n	8001bee <CheckPassSenError+0x92>
                        gGCUStatus.ModuleAlarm.b.nPSensor = ON;
 8001be4:	4a5b      	ldr	r2, [pc, #364]	; (8001d54 <CheckPassSenError+0x1f8>)
 8001be6:	7b13      	ldrb	r3, [r2, #12]
 8001be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bec:	7313      	strb	r3, [r2, #12]

                    printf(" [CheckPassSenError] Sensor Error Detected!!  \n");
 8001bee:	485b      	ldr	r0, [pc, #364]	; (8001d5c <CheckPassSenError+0x200>)
 8001bf0:	f007 fc2c 	bl	800944c <printf_>
                }

                if (i >= 0 && i < 8)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db10      	blt.n	8001c1c <CheckPassSenError+0xc0>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b07      	cmp	r3, #7
 8001bfe:	dc0d      	bgt.n	8001c1c <CheckPassSenError+0xc0>
                    psenError.B.bSen1 |= (1 << i);
 8001c00:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <CheckPassSenError+0x204>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b25a      	sxtb	r2, r3
 8001c06:	2101      	movs	r1, #1
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b52      	ldr	r3, [pc, #328]	; (8001d60 <CheckPassSenError+0x204>)
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	e013      	b.n	8001c44 <CheckPassSenError+0xe8>
                else if (i >= 8 && i < 16)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b07      	cmp	r3, #7
 8001c20:	dd10      	ble.n	8001c44 <CheckPassSenError+0xe8>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	dc0d      	bgt.n	8001c44 <CheckPassSenError+0xe8>
                    psenError.B.bSen2 |= (1 << (i - 8));
 8001c28:	4b4d      	ldr	r3, [pc, #308]	; (8001d60 <CheckPassSenError+0x204>)
 8001c2a:	785b      	ldrb	r3, [r3, #1]
 8001c2c:	b25a      	sxtb	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	3b08      	subs	r3, #8
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <CheckPassSenError+0x204>)
 8001c42:	705a      	strb	r2, [r3, #1]

                if (gCurGCUOpMode.bEmergencyMaint == MODE_NONE)
 8001c44:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <CheckPassSenError+0x1fc>)
 8001c46:	789b      	ldrb	r3, [r3, #2]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d112      	bne.n	8001c72 <CheckPassSenError+0x116>
                {
                    if (psenError.swing.safety_EN || psenError.swing.safety_EX)
 8001c4c:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <CheckPassSenError+0x204>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f023 030f 	bic.w	r3, r3, #15
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <CheckPassSenError+0x10c>
 8001c5a:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <CheckPassSenError+0x204>)
 8001c5c:	785b      	ldrb	r3, [r3, #1]
 8001c5e:	f023 030f 	bic.w	r3, r3, #15
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <CheckPassSenError+0x116>
                        gGCUStatus.ModuleAlarm.b.nSafetyErr = ON;
 8001c68:	4a3a      	ldr	r2, [pc, #232]	; (8001d54 <CheckPassSenError+0x1f8>)
 8001c6a:	7b13      	ldrb	r3, [r2, #12]
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	7313      	strb	r3, [r2, #12]
                }

                mdwTickPSensorBlock[i]++;
 8001c72:	4a35      	ldr	r2, [pc, #212]	; (8001d48 <CheckPassSenError+0x1ec>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	4932      	ldr	r1, [pc, #200]	; (8001d48 <CheckPassSenError+0x1ec>)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001c84:	e052      	b.n	8001d2c <CheckPassSenError+0x1d0>
            }
            else if (mdwTickPSensorBlock[i] < (gGCUParameter.bSensorBlockTimeout * TICK_COUNT_1SEC * 10))
 8001c86:	4a30      	ldr	r2, [pc, #192]	; (8001d48 <CheckPassSenError+0x1ec>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <CheckPassSenError+0x1f0>)
 8001c90:	7a12      	ldrb	r2, [r2, #8]
 8001c92:	4611      	mov	r1, r2
 8001c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c98:	fb01 f202 	mul.w	r2, r1, r2
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d245      	bcs.n	8001d2c <CheckPassSenError+0x1d0>
            {
                mdwTickPSensorBlock[i]++;
 8001ca0:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <CheckPassSenError+0x1ec>)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	4927      	ldr	r1, [pc, #156]	; (8001d48 <CheckPassSenError+0x1ec>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001cb2:	e03b      	b.n	8001d2c <CheckPassSenError+0x1d0>
            }
        }
        else
        {
            mdwTickPSensorBlock[i] = 0;
 8001cb4:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <CheckPassSenError+0x1ec>)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            gdwPSensorError &= ~(1 << i);
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <CheckPassSenError+0x1f4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	; (8001d50 <CheckPassSenError+0x1f4>)
 8001cd2:	6013      	str	r3, [r2, #0]

            if (i >= 0 && i < 8)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db12      	blt.n	8001d00 <CheckPassSenError+0x1a4>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b07      	cmp	r3, #7
 8001cde:	dc0f      	bgt.n	8001d00 <CheckPassSenError+0x1a4>
                psenError.B.bSen1 &= ~(1 << i);
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <CheckPassSenError+0x204>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b25a      	sxtb	r2, r3
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	b25b      	sxtb	r3, r3
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <CheckPassSenError+0x204>)
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	e015      	b.n	8001d2c <CheckPassSenError+0x1d0>
            else if (i >= 8 && i < 16)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b07      	cmp	r3, #7
 8001d04:	dd12      	ble.n	8001d2c <CheckPassSenError+0x1d0>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	dc0f      	bgt.n	8001d2c <CheckPassSenError+0x1d0>
                psenError.B.bSen2 &= ~(1 << (i - 8));
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <CheckPassSenError+0x204>)
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	b25a      	sxtb	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3b08      	subs	r3, #8
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	4013      	ands	r3, r2
 8001d24:	b25b      	sxtb	r3, r3
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <CheckPassSenError+0x204>)
 8001d2a:	705a      	strb	r2, [r3, #1]
    for (i = 0; i < 16; i++)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	f77f af1d 	ble.w	8001b74 <CheckPassSenError+0x18>
        {
            if (!psenError.swing.safety_EN && !psenError.swing.safety_EX)
                gGCUStatus.ModuleAlarm.b.nSafetyErr = OFF;
        }
    }
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	60000100 	.word	0x60000100
 8001d48:	2400044c 	.word	0x2400044c
 8001d4c:	240004a0 	.word	0x240004a0
 8001d50:	24000448 	.word	0x24000448
 8001d54:	240004b0 	.word	0x240004b0
 8001d58:	240004d4 	.word	0x240004d4
 8001d5c:	08010c54 	.word	0x08010c54
 8001d60:	2400049c 	.word	0x2400049c

08001d64 <InhibitPass>:
void InhibitPass(int nDir)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	printf(" [InhibitPass] Dir:%d  \n", nDir);
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4814      	ldr	r0, [pc, #80]	; (8001dc0 <InhibitPass+0x5c>)
 8001d70:	f007 fb6c 	bl	800944c <printf_>
    ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <InhibitPass+0x60>)
 8001d76:	7a9b      	ldrb	r3, [r3, #10]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff fba5 	bl	80014cc <ControlBuzzer>
    ControlDirectionLED(DIR_RED, DIR_RED);
 8001d82:	2102      	movs	r1, #2
 8001d84:	2002      	movs	r0, #2
 8001d86:	f7ff fbfb 	bl	8001580 <ControlDirectionLED>

    if (nDir == FROM_ENTRY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <InhibitPass+0x3e>
    {
        ControlIndicator(LAMP_RED_ON, gbIndicatorCMD_EX, gGCUParameter.bAlarmTimeout, TRUE);
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <InhibitPass+0x64>)
 8001d92:	7819      	ldrb	r1, [r3, #0]
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <InhibitPass+0x60>)
 8001d96:	7a9a      	ldrb	r2, [r3, #10]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff fc4c 	bl	8001638 <ControlIndicator>
    }
    else if (nDir == FROM_EXIT)
    {
        ControlIndicator(gbIndicatorCMD_EN, LAMP_RED_ON, gGCUParameter.bAlarmTimeout, TRUE);
    }
}
 8001da0:	e00a      	b.n	8001db8 <InhibitPass+0x54>
    else if (nDir == FROM_EXIT)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d107      	bne.n	8001db8 <InhibitPass+0x54>
        ControlIndicator(gbIndicatorCMD_EN, LAMP_RED_ON, gGCUParameter.bAlarmTimeout, TRUE);
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <InhibitPass+0x68>)
 8001daa:	7818      	ldrb	r0, [r3, #0]
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <InhibitPass+0x60>)
 8001dae:	7a9a      	ldrb	r2, [r3, #10]
 8001db0:	2301      	movs	r3, #1
 8001db2:	2101      	movs	r1, #1
 8001db4:	f7ff fc40 	bl	8001638 <ControlIndicator>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	08010c84 	.word	0x08010c84
 8001dc4:	240004a0 	.word	0x240004a0
 8001dc8:	24000128 	.word	0x24000128
 8001dcc:	24000127 	.word	0x24000127

08001dd0 <ClearPassageAlarm>:

void ClearPassageAlarm()
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
    ResetTimer(&timerIllegalEnterEN);
 8001dd4:	482c      	ldr	r0, [pc, #176]	; (8001e88 <ClearPassageAlarm+0xb8>)
 8001dd6:	f00d fc13 	bl	800f600 <ResetTimer>
    ResetTimer(&timerIllegalEnterEX);
 8001dda:	482c      	ldr	r0, [pc, #176]	; (8001e8c <ClearPassageAlarm+0xbc>)
 8001ddc:	f00d fc10 	bl	800f600 <ResetTimer>
    ResetTimer(&timerLuggageWait);
 8001de0:	482b      	ldr	r0, [pc, #172]	; (8001e90 <ClearPassageAlarm+0xc0>)
 8001de2:	f00d fc0d 	bl	800f600 <ResetTimer>

    // Passage clear timeout is reached, clear passage
    if (gGCUStatus.PassageAlarm.b.nFromEN)
 8001de6:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <ClearPassageAlarm+0xc4>)
 8001de8:	7a1b      	ldrb	r3, [r3, #8]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <ClearPassageAlarm+0x2e>
        gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <ClearPassageAlarm+0xc4>)
 8001df6:	7a13      	ldrb	r3, [r2, #8]
 8001df8:	f36f 0302 	bfc	r3, #0, #3
 8001dfc:	7213      	strb	r3, [r2, #8]

    if (gGCUStatus.PassageAlarm.b.nFromEX)
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <ClearPassageAlarm+0xc4>)
 8001e00:	7a1b      	ldrb	r3, [r3, #8]
 8001e02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d004      	beq.n	8001e16 <ClearPassageAlarm+0x46>
        gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8001e0c:	4a21      	ldr	r2, [pc, #132]	; (8001e94 <ClearPassageAlarm+0xc4>)
 8001e0e:	7a13      	ldrb	r3, [r2, #8]
 8001e10:	f36f 1306 	bfc	r3, #4, #3
 8001e14:	7213      	strb	r3, [r2, #8]

    if (gGCUStatus.PassageAlarm.b.nPassOverFromEN || gGCUStatus.PassageAlarm.b.nPassOverFromEX)
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <ClearPassageAlarm+0xc4>)
 8001e18:	7a1b      	ldrb	r3, [r3, #8]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d106      	bne.n	8001e32 <ClearPassageAlarm+0x62>
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <ClearPassageAlarm+0xc4>)
 8001e26:	7a1b      	ldrb	r3, [r3, #8]
 8001e28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <ClearPassageAlarm+0x76>
    {
        gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <ClearPassageAlarm+0xc4>)
 8001e34:	7a13      	ldrb	r3, [r2, #8]
 8001e36:	f36f 03c3 	bfc	r3, #3, #1
 8001e3a:	7213      	strb	r3, [r2, #8]
        gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8001e3c:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <ClearPassageAlarm+0xc4>)
 8001e3e:	7a13      	ldrb	r3, [r2, #8]
 8001e40:	f36f 13c7 	bfc	r3, #7, #1
 8001e44:	7213      	strb	r3, [r2, #8]
    }

    if (!psenNew.side.entry && (0 == gGCUStatus.bAuthCount_EN))
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <ClearPassageAlarm+0xc8>)
 8001e48:	f993 3000 	ldrsb.w	r3, [r3]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d107      	bne.n	8001e60 <ClearPassageAlarm+0x90>
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <ClearPassageAlarm+0xc4>)
 8001e52:	791b      	ldrb	r3, [r3, #4]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <ClearPassageAlarm+0x90>
    {
        gisEntryPassenger = FALSE;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <ClearPassageAlarm+0xcc>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
    }

    if (!psenNew.side.exit && (0 == gGCUStatus.bAuthCount_EX))
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <ClearPassageAlarm+0xc8>)
 8001e62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d107      	bne.n	8001e7a <ClearPassageAlarm+0xaa>
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <ClearPassageAlarm+0xc4>)
 8001e6c:	795b      	ldrb	r3, [r3, #5]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <ClearPassageAlarm+0xaa>
    {
        gisExitPassenger = FALSE;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <ClearPassageAlarm+0xd0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
    }

    gGCUStatus.IllegalPass.bIllegalPass = FLG_OFF;
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <ClearPassageAlarm+0xc4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]

    ClearIllegalPass();
 8001e80:	f000 f810 	bl	8001ea4 <ClearIllegalPass>
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2400019c 	.word	0x2400019c
 8001e8c:	240001a8 	.word	0x240001a8
 8001e90:	240001d8 	.word	0x240001d8
 8001e94:	240004b0 	.word	0x240004b0
 8001e98:	24000414 	.word	0x24000414
 8001e9c:	2400043b 	.word	0x2400043b
 8001ea0:	2400043c 	.word	0x2400043c

08001ea4 <ClearIllegalPass>:

void ClearIllegalPass(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
    if (gGCUStatus.PassageAlarm.b.nFromEN)
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <ClearIllegalPass+0xb0>)
 8001eaa:	7a1b      	ldrb	r3, [r3, #8]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d022      	beq.n	8001efc <ClearIllegalPass+0x58>
    {
        if (!psenNew.side.entry)
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <ClearIllegalPass+0xb4>)
 8001eb8:	f993 3000 	ldrsb.w	r3, [r3]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11d      	bne.n	8001efc <ClearIllegalPass+0x58>
        {
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8001ec0:	4a24      	ldr	r2, [pc, #144]	; (8001f54 <ClearIllegalPass+0xb0>)
 8001ec2:	7a13      	ldrb	r3, [r2, #8]
 8001ec4:	f36f 0302 	bfc	r3, #0, #3
 8001ec8:	7213      	strb	r3, [r2, #8]
            gisEntryPassenger = FALSE;
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <ClearIllegalPass+0xb8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
            {
                gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
                //PRINTL(" [EN] Clear Illegal Enter");
                printf(" [EN] Clear Illegal Enter  \n");
            }
            ResetTimer(&timerIllegalEnterEN);
 8001ed0:	4823      	ldr	r0, [pc, #140]	; (8001f60 <ClearIllegalPass+0xbc>)
 8001ed2:	f00d fb95 	bl	800f600 <ResetTimer>

            if (timerJumping.fStart == FALSE && timerTailgating.fStart == FALSE)
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <ClearIllegalPass+0xc0>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	f083 0301 	eor.w	r3, r3, #1
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00b      	beq.n	8001efc <ClearIllegalPass+0x58>
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <ClearIllegalPass+0xc4>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	f083 0301 	eor.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d004      	beq.n	8001efc <ClearIllegalPass+0x58>
            {
                InitPassageMode();
 8001ef2:	f000 f9f1 	bl	80022d8 <InitPassageMode>
                //PRINTL(" [EN] ClearIllegalPass - InitPassageMode");
                printf(" [EN] ClearIllegalPass - InitPassageMode  \n");
 8001ef6:	481d      	ldr	r0, [pc, #116]	; (8001f6c <ClearIllegalPass+0xc8>)
 8001ef8:	f007 faa8 	bl	800944c <printf_>
            }
        }
    }

    if (gGCUStatus.PassageAlarm.b.nFromEX)
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <ClearIllegalPass+0xb0>)
 8001efe:	7a1b      	ldrb	r3, [r3, #8]
 8001f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d022      	beq.n	8001f50 <ClearIllegalPass+0xac>
    {
        if (!psenNew.side.exit)
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <ClearIllegalPass+0xb4>)
 8001f0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d11d      	bne.n	8001f50 <ClearIllegalPass+0xac>
        {
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8001f14:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <ClearIllegalPass+0xb0>)
 8001f16:	7a13      	ldrb	r3, [r2, #8]
 8001f18:	f36f 1306 	bfc	r3, #4, #3
 8001f1c:	7213      	strb	r3, [r2, #8]
            gisExitPassenger = FALSE;
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <ClearIllegalPass+0xcc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
            {
                gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
                //PRINTL(" [EX] Clear Illegal Enter");
                printf(" [EX] Clear Illegal Enter  \n");
            }
            ResetTimer(&timerIllegalEnterEX);
 8001f24:	4813      	ldr	r0, [pc, #76]	; (8001f74 <ClearIllegalPass+0xd0>)
 8001f26:	f00d fb6b 	bl	800f600 <ResetTimer>

            if (timerJumping.fStart == FALSE && timerTailgating.fStart == FALSE)
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <ClearIllegalPass+0xc0>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	f083 0301 	eor.w	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <ClearIllegalPass+0xac>
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <ClearIllegalPass+0xc4>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	f083 0301 	eor.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <ClearIllegalPass+0xac>
            {
                InitPassageMode();
 8001f46:	f000 f9c7 	bl	80022d8 <InitPassageMode>
               // PRINTL(" [EX] ClearIllegalPass - InitPassageMode");

                printf(" [EX] ClearIllegalPass - InitPassageMode  \n");
 8001f4a:	480b      	ldr	r0, [pc, #44]	; (8001f78 <ClearIllegalPass+0xd4>)
 8001f4c:	f007 fa7e 	bl	800944c <printf_>
            }
        }
    }
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	240004b0 	.word	0x240004b0
 8001f58:	24000414 	.word	0x24000414
 8001f5c:	2400043b 	.word	0x2400043b
 8001f60:	2400019c 	.word	0x2400019c
 8001f64:	240001f0 	.word	0x240001f0
 8001f68:	240001fc 	.word	0x240001fc
 8001f6c:	08010ca0 	.word	0x08010ca0
 8001f70:	2400043c 	.word	0x2400043c
 8001f74:	240001a8 	.word	0x240001a8
 8001f78:	08010ccc 	.word	0x08010ccc

08001f7c <CheckAuthTimeout>:

void CheckAuthTimeout(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
    if (timerAuthorize.fStart)
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <CheckAuthTimeout+0x70>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d02e      	beq.n	8001fe6 <CheckAuthTimeout+0x6a>
    {
        if (IsTimeout(&timerAuthorize, (gdwTimeoutAuthorize * TICK_COUNT_1SEC)))
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <CheckAuthTimeout+0x74>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2264      	movs	r2, #100	; 0x64
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	4619      	mov	r1, r3
 8001f94:	4815      	ldr	r0, [pc, #84]	; (8001fec <CheckAuthTimeout+0x70>)
 8001f96:	f00d fb41 	bl	800f61c <IsTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d022      	beq.n	8001fe6 <CheckAuthTimeout+0x6a>
        {
           // PRINTL(" [CheckAuthTimeout] ElapsedTime:%d", gdwTimeoutAuthorize);
        	printf(" [CheckAuthTimeout] ElapsedTime:%d  \n", gdwTimeoutAuthorize);
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <CheckAuthTimeout+0x74>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <CheckAuthTimeout+0x78>)
 8001fa8:	f007 fa50 	bl	800944c <printf_>
            ResetTimer(&timerAuthorize);            
 8001fac:	480f      	ldr	r0, [pc, #60]	; (8001fec <CheckAuthTimeout+0x70>)
 8001fae:	f00d fb27 	bl	800f600 <ResetTimer>
            gGCUStatus.bAuthCount_EN = 0;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <CheckAuthTimeout+0x7c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	711a      	strb	r2, [r3, #4]
            gGCUStatus.bAuthCount_EX = 0;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <CheckAuthTimeout+0x7c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	715a      	strb	r2, [r3, #5]
            gfisAuthTimeout = TRUE;
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <CheckAuthTimeout+0x80>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
            ControlIndicator(LAMP_OFF, LAMP_OFF, 0, FALSE);
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff fb34 	bl	8001638 <ControlIndicator>
            if (gGCUStatus.PassageAlarm.bAlarm != 0)
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <CheckAuthTimeout+0x7c>)
 8001fd2:	7a1b      	ldrb	r3, [r3, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <CheckAuthTimeout+0x66>
            {
                ClearIllegalPass();
 8001fd8:	f7ff ff64 	bl	8001ea4 <ClearIllegalPass>
                gGCUStatus.PassageAlarm.bAlarm = 0;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <CheckAuthTimeout+0x7c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	721a      	strb	r2, [r3, #8]
            }

            InitPassageMode();
 8001fe2:	f000 f979 	bl	80022d8 <InitPassageMode>
        }
    }
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	24000160 	.word	0x24000160
 8001ff0:	24000154 	.word	0x24000154
 8001ff4:	08010cf8 	.word	0x08010cf8
 8001ff8:	240004b0 	.word	0x240004b0
 8001ffc:	24000134 	.word	0x24000134

08002000 <CheckIllegalAlarmTimer>:

void CheckIllegalAlarmTimer(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
    if (timerJumping.fStart)
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <CheckIllegalAlarmTimer+0xd4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d02f      	beq.n	800206c <CheckIllegalAlarmTimer+0x6c>
    {
        if (IsTimeout(&timerJumping, gdwTimeoutJumping))
 800200c:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <CheckIllegalAlarmTimer+0xd8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	4830      	ldr	r0, [pc, #192]	; (80020d4 <CheckIllegalAlarmTimer+0xd4>)
 8002014:	f00d fb02 	bl	800f61c <IsTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d026      	beq.n	800206c <CheckIllegalAlarmTimer+0x6c>
        {
            gGCUStatus.IllegalPass.b.nJumping_EN = FLG_OFF;
 800201e:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <CheckIllegalAlarmTimer+0xdc>)
 8002020:	7f13      	ldrb	r3, [r2, #28]
 8002022:	f36f 0341 	bfc	r3, #1, #1
 8002026:	7713      	strb	r3, [r2, #28]
            gGCUStatus.IllegalPass.b.nJumping_EX = FLG_OFF;
 8002028:	4a2c      	ldr	r2, [pc, #176]	; (80020dc <CheckIllegalAlarmTimer+0xdc>)
 800202a:	7f13      	ldrb	r3, [r2, #28]
 800202c:	f36f 1345 	bfc	r3, #5, #1
 8002030:	7713      	strb	r3, [r2, #28]
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8002032:	4a2a      	ldr	r2, [pc, #168]	; (80020dc <CheckIllegalAlarmTimer+0xdc>)
 8002034:	7a13      	ldrb	r3, [r2, #8]
 8002036:	f36f 0302 	bfc	r3, #0, #3
 800203a:	7213      	strb	r3, [r2, #8]
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 800203c:	4a27      	ldr	r2, [pc, #156]	; (80020dc <CheckIllegalAlarmTimer+0xdc>)
 800203e:	7a13      	ldrb	r3, [r2, #8]
 8002040:	f36f 1306 	bfc	r3, #4, #3
 8002044:	7213      	strb	r3, [r2, #8]
            ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <CheckIllegalAlarmTimer+0xe0>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <CheckIllegalAlarmTimer+0xe4>)
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fa95 	bl	8001580 <ControlDirectionLED>
            ControlIndicatorBlink(FLG_OFF);
 8002056:	2000      	movs	r0, #0
 8002058:	f7ff fb76 	bl	8001748 <ControlIndicatorBlink>
            ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2000      	movs	r0, #0
 8002062:	f7ff fa33 	bl	80014cc <ControlBuzzer>
            ResetTimer(&timerJumping);
 8002066:	481b      	ldr	r0, [pc, #108]	; (80020d4 <CheckIllegalAlarmTimer+0xd4>)
 8002068:	f00d faca 	bl	800f600 <ResetTimer>
        }
    }

    if (timerTailgating.fStart)
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <CheckIllegalAlarmTimer+0xe8>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d02d      	beq.n	80020d0 <CheckIllegalAlarmTimer+0xd0>
    {
        if (IsTimeout(&timerTailgating, DEFAULT_TAILGATING_TIMEOUT * TICK_COUNT_1SEC))
 8002074:	21c8      	movs	r1, #200	; 0xc8
 8002076:	481c      	ldr	r0, [pc, #112]	; (80020e8 <CheckIllegalAlarmTimer+0xe8>)
 8002078:	f00d fad0 	bl	800f61c <IsTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d026      	beq.n	80020d0 <CheckIllegalAlarmTimer+0xd0>
        {
            gGCUStatus.IllegalPass.b.nTailgating_EN = FLG_OFF;
 8002082:	4a16      	ldr	r2, [pc, #88]	; (80020dc <CheckIllegalAlarmTimer+0xdc>)
 8002084:	7f13      	ldrb	r3, [r2, #28]
 8002086:	f36f 0300 	bfc	r3, #0, #1
 800208a:	7713      	strb	r3, [r2, #28]
            gGCUStatus.IllegalPass.b.nTailgating_EX = FLG_OFF;
 800208c:	4a13      	ldr	r2, [pc, #76]	; (80020dc <CheckIllegalAlarmTimer+0xdc>)
 800208e:	7f13      	ldrb	r3, [r2, #28]
 8002090:	f36f 1304 	bfc	r3, #4, #1
 8002094:	7713      	strb	r3, [r2, #28]
            gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8002096:	4a11      	ldr	r2, [pc, #68]	; (80020dc <CheckIllegalAlarmTimer+0xdc>)
 8002098:	7a13      	ldrb	r3, [r2, #8]
 800209a:	f36f 0302 	bfc	r3, #0, #3
 800209e:	7213      	strb	r3, [r2, #8]
            gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <CheckIllegalAlarmTimer+0xdc>)
 80020a2:	7a13      	ldrb	r3, [r2, #8]
 80020a4:	f36f 1306 	bfc	r3, #4, #3
 80020a8:	7213      	strb	r3, [r2, #8]
            ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <CheckIllegalAlarmTimer+0xe0>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <CheckIllegalAlarmTimer+0xe4>)
 80020b0:	7812      	ldrb	r2, [r2, #0]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fa63 	bl	8001580 <ControlDirectionLED>
            ControlIndicatorBlink(FLG_OFF);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7ff fb44 	bl	8001748 <ControlIndicatorBlink>
            ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff fa01 	bl	80014cc <ControlBuzzer>
            ResetTimer(&timerTailgating);
 80020ca:	4807      	ldr	r0, [pc, #28]	; (80020e8 <CheckIllegalAlarmTimer+0xe8>)
 80020cc:	f00d fa98 	bl	800f600 <ResetTimer>
        }
    }
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	240001f0 	.word	0x240001f0
 80020d8:	24000158 	.word	0x24000158
 80020dc:	240004b0 	.word	0x240004b0
 80020e0:	24000129 	.word	0x24000129
 80020e4:	2400012a 	.word	0x2400012a
 80020e8:	240001fc 	.word	0x240001fc

080020ec <CheckBlinkTimer>:

void CheckBlinkTimer(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
    if (timerBlink.fStart)
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <CheckBlinkTimer+0x64>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d029      	beq.n	800214c <CheckBlinkTimer+0x60>
    {
        if (IsTimeout(&timerBlink, gdwTimeoutBlink))
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <CheckBlinkTimer+0x68>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	4814      	ldr	r0, [pc, #80]	; (8002150 <CheckBlinkTimer+0x64>)
 8002100:	f00d fa8c 	bl	800f61c <IsTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d020      	beq.n	800214c <CheckBlinkTimer+0x60>
        {
            if (FLG_SET == gbIndicatorBlink)
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <CheckBlinkTimer+0x6c>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d116      	bne.n	8002140 <CheckBlinkTimer+0x54>
            {
                if (gbIndicatorFlag)
 8002112:	4b12      	ldr	r3, [pc, #72]	; (800215c <CheckBlinkTimer+0x70>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <CheckBlinkTimer+0x42>
                {
                    gbIndicatorFlag = FLG_OFF;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <CheckBlinkTimer+0x70>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
                    ControlIndicator(LAMP_OFF, LAMP_OFF, 0, TRUE);
 8002120:	2301      	movs	r3, #1
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff fa86 	bl	8001638 <ControlIndicator>
 800212c:	e008      	b.n	8002140 <CheckBlinkTimer+0x54>
                }
                else
                {
                    gbIndicatorFlag = FLG_SET;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <CheckBlinkTimer+0x70>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
                    ControlIndicator(LAMP_RED_ON, LAMP_RED_ON, 0, TRUE);
 8002134:	2301      	movs	r3, #1
 8002136:	2200      	movs	r2, #0
 8002138:	2101      	movs	r1, #1
 800213a:	2001      	movs	r0, #1
 800213c:	f7ff fa7c 	bl	8001638 <ControlIndicator>
                }
            }
            ResetTimer(&timerBlink);
 8002140:	4803      	ldr	r0, [pc, #12]	; (8002150 <CheckBlinkTimer+0x64>)
 8002142:	f00d fa5d 	bl	800f600 <ResetTimer>
            SetTimer(&timerBlink);
 8002146:	4802      	ldr	r0, [pc, #8]	; (8002150 <CheckBlinkTimer+0x64>)
 8002148:	f00d fa46 	bl	800f5d8 <SetTimer>
        }
    }
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	240001b4 	.word	0x240001b4
 8002154:	24000150 	.word	0x24000150
 8002158:	24000126 	.word	0x24000126
 800215c:	2400012c 	.word	0x2400012c

08002160 <CheckIllegalEnterTimer>:

void CheckIllegalEnterTimer(BYTE dir)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
    if (FROM_ENTRY == dir)
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d139      	bne.n	80021e4 <CheckIllegalEnterTimer+0x84>
    {
        if (timerIllegalEnterEN.fStart)
 8002170:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <CheckIllegalEnterTimer+0x104>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01d      	beq.n	80021b4 <CheckIllegalEnterTimer+0x54>
        {
            if (IsTimeout(&timerIllegalEnterEN, gdwTimeoutUnauthorize))
 8002178:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <CheckIllegalEnterTimer+0x108>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	4839      	ldr	r0, [pc, #228]	; (8002264 <CheckIllegalEnterTimer+0x104>)
 8002180:	f00d fa4c 	bl	800f61c <IsTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d068      	beq.n	800225c <CheckIllegalEnterTimer+0xfc>
            {
                ResetTimer(&timerIllegalEnterEN);
 800218a:	4836      	ldr	r0, [pc, #216]	; (8002264 <CheckIllegalEnterTimer+0x104>)
 800218c:	f00d fa38 	bl	800f600 <ResetTimer>
                gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_SET;
 8002190:	4a36      	ldr	r2, [pc, #216]	; (800226c <CheckIllegalEnterTimer+0x10c>)
 8002192:	7f13      	ldrb	r3, [r2, #28]
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	7713      	strb	r3, [r2, #28]
                gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_ILLEGAL_ENTER;
 800219a:	4a34      	ldr	r2, [pc, #208]	; (800226c <CheckIllegalEnterTimer+0x10c>)
 800219c:	7a13      	ldrb	r3, [r2, #8]
 800219e:	2101      	movs	r1, #1
 80021a0:	f361 0302 	bfi	r3, r1, #0, #3
 80021a4:	7213      	strb	r3, [r2, #8]
                InhibitPass(FROM_ENTRY);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f7ff fddc 	bl	8001d64 <InhibitPass>
               // PRINTL(" [EN] Inhibit Pass - Illegal Enter");
                printf(" [EN] Inhibit Pass - Illegal Enter  \n");
 80021ac:	4830      	ldr	r0, [pc, #192]	; (8002270 <CheckIllegalEnterTimer+0x110>)
 80021ae:	f007 f94d 	bl	800944c <printf_>
                    SetTimer(&timerIllegalEnterEX);
                }
            }
        }
    }
}
 80021b2:	e053      	b.n	800225c <CheckIllegalEnterTimer+0xfc>
            if (gGCUStatus.IllegalPass.b.nIllegal_EN == FLG_OFF)
 80021b4:	4b2d      	ldr	r3, [pc, #180]	; (800226c <CheckIllegalEnterTimer+0x10c>)
 80021b6:	7f1b      	ldrb	r3, [r3, #28]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d14c      	bne.n	800225c <CheckIllegalEnterTimer+0xfc>
                if (gGCUParameter.bIllegalEntryTimeout)
 80021c2:	4b2c      	ldr	r3, [pc, #176]	; (8002274 <CheckIllegalEnterTimer+0x114>)
 80021c4:	7adb      	ldrb	r3, [r3, #11]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d048      	beq.n	800225c <CheckIllegalEnterTimer+0xfc>
                    gdwTimeoutUnauthorize = gGCUParameter.bIllegalEntryTimeout * TICK_COUNT_1SEC;
 80021ca:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <CheckIllegalEnterTimer+0x114>)
 80021cc:	7adb      	ldrb	r3, [r3, #11]
 80021ce:	461a      	mov	r2, r3
 80021d0:	2364      	movs	r3, #100	; 0x64
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <CheckIllegalEnterTimer+0x108>)
 80021da:	601a      	str	r2, [r3, #0]
                    SetTimer(&timerIllegalEnterEN);
 80021dc:	4821      	ldr	r0, [pc, #132]	; (8002264 <CheckIllegalEnterTimer+0x104>)
 80021de:	f00d f9fb 	bl	800f5d8 <SetTimer>
}
 80021e2:	e03b      	b.n	800225c <CheckIllegalEnterTimer+0xfc>
    else if (FROM_EXIT == dir)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d138      	bne.n	800225c <CheckIllegalEnterTimer+0xfc>
        if (timerIllegalEnterEX.fStart)
 80021ea:	4b23      	ldr	r3, [pc, #140]	; (8002278 <CheckIllegalEnterTimer+0x118>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01d      	beq.n	800222e <CheckIllegalEnterTimer+0xce>
            if (IsTimeout(&timerIllegalEnterEX, gdwTimeoutUnauthorize))
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <CheckIllegalEnterTimer+0x108>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4619      	mov	r1, r3
 80021f8:	481f      	ldr	r0, [pc, #124]	; (8002278 <CheckIllegalEnterTimer+0x118>)
 80021fa:	f00d fa0f 	bl	800f61c <IsTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d02b      	beq.n	800225c <CheckIllegalEnterTimer+0xfc>
                ResetTimer(&timerIllegalEnterEX);
 8002204:	481c      	ldr	r0, [pc, #112]	; (8002278 <CheckIllegalEnterTimer+0x118>)
 8002206:	f00d f9fb 	bl	800f600 <ResetTimer>
                gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_SET;
 800220a:	4a18      	ldr	r2, [pc, #96]	; (800226c <CheckIllegalEnterTimer+0x10c>)
 800220c:	7f13      	ldrb	r3, [r2, #28]
 800220e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002212:	7713      	strb	r3, [r2, #28]
                gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_ILLEGAL_ENTER;
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <CheckIllegalEnterTimer+0x10c>)
 8002216:	7a13      	ldrb	r3, [r2, #8]
 8002218:	2101      	movs	r1, #1
 800221a:	f361 1306 	bfi	r3, r1, #4, #3
 800221e:	7213      	strb	r3, [r2, #8]
                InhibitPass(FROM_EXIT);
 8002220:	2002      	movs	r0, #2
 8002222:	f7ff fd9f 	bl	8001d64 <InhibitPass>
                printf(" [EX] Inhibit Pass - Illegal Enter  \n");
 8002226:	4815      	ldr	r0, [pc, #84]	; (800227c <CheckIllegalEnterTimer+0x11c>)
 8002228:	f007 f910 	bl	800944c <printf_>
}
 800222c:	e016      	b.n	800225c <CheckIllegalEnterTimer+0xfc>
            if (gGCUStatus.IllegalPass.b.nIllegal_EX == FLG_OFF)
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <CheckIllegalEnterTimer+0x10c>)
 8002230:	7f1b      	ldrb	r3, [r3, #28]
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10f      	bne.n	800225c <CheckIllegalEnterTimer+0xfc>
                if (gGCUParameter.bIllegalEntryTimeout)
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <CheckIllegalEnterTimer+0x114>)
 800223e:	7adb      	ldrb	r3, [r3, #11]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00b      	beq.n	800225c <CheckIllegalEnterTimer+0xfc>
                    gdwTimeoutUnauthorize = gGCUParameter.bIllegalEntryTimeout * TICK_COUNT_1SEC;
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <CheckIllegalEnterTimer+0x114>)
 8002246:	7adb      	ldrb	r3, [r3, #11]
 8002248:	461a      	mov	r2, r3
 800224a:	2364      	movs	r3, #100	; 0x64
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	461a      	mov	r2, r3
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <CheckIllegalEnterTimer+0x108>)
 8002254:	601a      	str	r2, [r3, #0]
                    SetTimer(&timerIllegalEnterEX);
 8002256:	4808      	ldr	r0, [pc, #32]	; (8002278 <CheckIllegalEnterTimer+0x118>)
 8002258:	f00d f9be 	bl	800f5d8 <SetTimer>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	2400019c 	.word	0x2400019c
 8002268:	2400015c 	.word	0x2400015c
 800226c:	240004b0 	.word	0x240004b0
 8002270:	08010d20 	.word	0x08010d20
 8002274:	240004a0 	.word	0x240004a0
 8002278:	240001a8 	.word	0x240001a8
 800227c:	08010d48 	.word	0x08010d48

08002280 <SetAuthTimer>:

void SetAuthTimer(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
    gdwTimeoutAuthorize = gGCUParameter.bAuthTimeOut;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <SetAuthTimer+0x2c>)
 8002286:	791b      	ldrb	r3, [r3, #4]
 8002288:	461a      	mov	r2, r3
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <SetAuthTimer+0x30>)
 800228c:	601a      	str	r2, [r3, #0]
    gfisAuthTimeout = FALSE;
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <SetAuthTimer+0x34>)
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
    if (gdwTimeoutAuthorize > MAX_AUTH_TIMEOUT)
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <SetAuthTimer+0x30>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b3c      	cmp	r3, #60	; 0x3c
 800229a:	d902      	bls.n	80022a2 <SetAuthTimer+0x22>
        gdwTimeoutAuthorize = MAX_AUTH_TIMEOUT;
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SetAuthTimer+0x30>)
 800229e:	223c      	movs	r2, #60	; 0x3c
 80022a0:	601a      	str	r2, [r3, #0]

    SetTimer(&timerAuthorize);
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <SetAuthTimer+0x38>)
 80022a4:	f00d f998 	bl	800f5d8 <SetTimer>
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	240004a0 	.word	0x240004a0
 80022b0:	24000154 	.word	0x24000154
 80022b4:	24000134 	.word	0x24000134
 80022b8:	24000160 	.word	0x24000160

080022bc <SetTailgatingTimer>:

void SetTailgatingTimer(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
    SetTimer(&timerTailgatingDetection);
 80022c0:	4803      	ldr	r0, [pc, #12]	; (80022d0 <SetTailgatingTimer+0x14>)
 80022c2:	f00d f989 	bl	800f5d8 <SetTimer>
    SetTimer(&timerTailgating);
 80022c6:	4803      	ldr	r0, [pc, #12]	; (80022d4 <SetTailgatingTimer+0x18>)
 80022c8:	f00d f986 	bl	800f5d8 <SetTimer>
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	24000178 	.word	0x24000178
 80022d4:	240001fc 	.word	0x240001fc

080022d8 <InitPassageMode>:

void InitPassageMode(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
    InitPassageModeForSwing();
 80022dc:	f001 f96c 	bl	80035b8 <InitPassageModeForSwing>
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022e8:	f3bf 8f4f 	dsb	sy
}
 80022ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <__NVIC_SystemReset+0x24>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80022f6:	4904      	ldr	r1, [pc, #16]	; (8002308 <__NVIC_SystemReset+0x24>)
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <__NVIC_SystemReset+0x28>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80022fe:	f3bf 8f4f 	dsb	sy
}
 8002302:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <__NVIC_SystemReset+0x20>
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	05fa0004 	.word	0x05fa0004

08002310 <SetDoorControl>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SetDoorControl(BYTE bCMDOption)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
	if (bCMDOption == 0)
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d118      	bne.n	8002352 <SetDoorControl+0x42>
	{
		if (gfTestMode == TRUE && isNeedToSetSerial == TRUE)
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <SetDoorControl+0xa4>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00d      	beq.n	8002344 <SetDoorControl+0x34>
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <SetDoorControl+0xa8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <SetDoorControl+0x34>
		{
			gfFreeMode = TRUE;
 8002330:	4b22      	ldr	r3, [pc, #136]	; (80023bc <SetDoorControl+0xac>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
			isNeedToSetSerial = FALSE;
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <SetDoorControl+0xa8>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
			Brr_SetSerialComm(TRUE);
 800233c:	2001      	movs	r0, #1
 800233e:	f7fe f9c1 	bl	80006c4 <Brr_SetSerialComm>
 8002342:	e002      	b.n	800234a <SetDoorControl+0x3a>
		}
		else
		{
			gfFreeMode = FALSE;
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <SetDoorControl+0xac>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
		}
		ControlBarrier(BARRIER_CLOSE_S);
 800234a:	2003      	movs	r0, #3
 800234c:	f7ff f886 	bl	800145c <ControlBarrier>
	{
		gfTestMode = FALSE;
		gfFreeMode = FALSE;
		Brr_SetEmergency(TRUE);
	}
}
 8002350:	e02c      	b.n	80023ac <SetDoorControl+0x9c>
	else if (bCMDOption == 1)
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d106      	bne.n	8002366 <SetDoorControl+0x56>
		gfFreeMode = TRUE;
 8002358:	4b18      	ldr	r3, [pc, #96]	; (80023bc <SetDoorControl+0xac>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
		ControlBarrier(BARRIER_OPEN_FOR_EX);	
 800235e:	2002      	movs	r0, #2
 8002360:	f7ff f87c 	bl	800145c <ControlBarrier>
}
 8002364:	e022      	b.n	80023ac <SetDoorControl+0x9c>
	else if (bCMDOption == 2)
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d106      	bne.n	800237a <SetDoorControl+0x6a>
		gfFreeMode = TRUE;
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <SetDoorControl+0xac>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
		ControlBarrier(BARRIER_OPEN_FOR_EN);
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff f872 	bl	800145c <ControlBarrier>
}
 8002378:	e018      	b.n	80023ac <SetDoorControl+0x9c>
	else if (bCMDOption == 3)
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d109      	bne.n	8002394 <SetDoorControl+0x84>
		gfTestMode = TRUE;
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <SetDoorControl+0xa4>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
		isNeedToSetSerial = TRUE;
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <SetDoorControl+0xa8>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
		Brr_SetEmergency(FALSE);
 800238c:	2000      	movs	r0, #0
 800238e:	f7fe f979 	bl	8000684 <Brr_SetEmergency>
}
 8002392:	e00b      	b.n	80023ac <SetDoorControl+0x9c>
	else if (bCMDOption == 4)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b04      	cmp	r3, #4
 8002398:	d108      	bne.n	80023ac <SetDoorControl+0x9c>
		gfTestMode = FALSE;
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <SetDoorControl+0xa4>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
		gfFreeMode = FALSE;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <SetDoorControl+0xac>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
		Brr_SetEmergency(TRUE);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7fe f96c 	bl	8000684 <Brr_SetEmergency>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2400043e 	.word	0x2400043e
 80023b8:	24000406 	.word	0x24000406
 80023bc:	2400043d 	.word	0x2400043d

080023c0 <SendACK>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendACK(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	U3_Putch(ACK);
 80023c4:	2006      	movs	r0, #6
 80023c6:	f004 fe93 	bl	80070f0 <U3_Putch>
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}

080023ce <SendNAK>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendNAK(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
	U3_Putch(NAK);
 80023d2:	2015      	movs	r0, #21
 80023d4:	f004 fe8c 	bl	80070f0 <U3_Putch>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <IsCommandNeedResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
bool IsCommandNeedResponse(BYTE bCMDCode)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
	int i;
	BYTE no_response_code[] = {
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <IsCommandNeedResponse+0x4c>)
 80023e8:	f107 0308 	add.w	r3, r7, #8
 80023ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ee:	c303      	stmia	r3!, {r0, r1}
 80023f0:	701a      	strb	r2, [r3, #0]
		CMD_CONTROL_BUZZER,
		CMD_SAFETY_STOP,
		CMD_WRITE_REGISTER,
		CMD_SET_UPS_COMMAND};

	for (i = 0; i < sizeof(no_response_code); i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e00c      	b.n	8002412 <IsCommandNeedResponse+0x36>
	{
		if (no_response_code[i] == bCMDCode)
 80023f8:	f107 0208 	add.w	r2, r7, #8
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	429a      	cmp	r2, r3
 8002406:	d101      	bne.n	800240c <IsCommandNeedResponse+0x30>
		{
			return FALSE;
 8002408:	2300      	movs	r3, #0
 800240a:	e006      	b.n	800241a <IsCommandNeedResponse+0x3e>
	for (i = 0; i < sizeof(no_response_code); i++)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d9ef      	bls.n	80023f8 <IsCommandNeedResponse+0x1c>
		}
	}

	return TRUE;
 8002418:	2301      	movs	r3, #1
}
 800241a:	4618      	mov	r0, r3
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	08010d70 	.word	0x08010d70

0800242c <MakeResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void MakeResponse(BYTE *pbResOption, int nOptionLen)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
	GCUResponse.d.bMainSeq = GCUCommand.d.bMainSeq;
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <MakeResponse+0x5c>)
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <MakeResponse+0x60>)
 800243c:	701a      	strb	r2, [r3, #0]

	if (GCUCommand.d.bMouleSeq == MAX_SEQUENCE)
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <MakeResponse+0x5c>)
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	2bff      	cmp	r3, #255	; 0xff
 8002444:	d103      	bne.n	800244e <MakeResponse+0x22>
		GCUResponse.d.bMouleSeq = 0;
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <MakeResponse+0x60>)
 8002448:	2200      	movs	r2, #0
 800244a:	705a      	strb	r2, [r3, #1]
 800244c:	e005      	b.n	800245a <MakeResponse+0x2e>
	else
		GCUResponse.d.bMouleSeq = (GCUCommand.d.bMouleSeq+1);
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <MakeResponse+0x5c>)
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	3301      	adds	r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <MakeResponse+0x60>)
 8002458:	705a      	strb	r2, [r3, #1]

	GCUResponse.d.bCmdCode = GCUCommand.d.bCmdCode;
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <MakeResponse+0x5c>)
 800245c:	78da      	ldrb	r2, [r3, #3]
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <MakeResponse+0x60>)
 8002460:	70da      	strb	r2, [r3, #3]
	GCUResponse.d.bDataLen = nOptionLen+sizeof(GCUResponse.d.bCmdCode);	// add command length
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3301      	adds	r3, #1
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <MakeResponse+0x60>)
 800246c:	709a      	strb	r2, [r3, #2]

	if (nOptionLen)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <MakeResponse+0x54>
		memcpy(GCUResponse.d.mbOptionData, pbResOption, nOptionLen);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <MakeResponse+0x64>)
 800247c:	f00d f938 	bl	800f6f0 <memcpy>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	24000280 	.word	0x24000280
 800248c:	24000304 	.word	0x24000304
 8002490:	24000308 	.word	0x24000308

08002494 <SendResponse>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void SendResponse(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
	BYTE	bBCC;
	BYTE	*pbResBuff;
	int		nResLen;

	pbResBuff	= GCUResponse.Buff;
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <SendResponse+0xb0>)
 800249c:	60bb      	str	r3, [r7, #8]
	nResLen		= GCUResponse.d.bDataLen+FRAME_HEADER_LEN;
 800249e:	4b29      	ldr	r3, [pc, #164]	; (8002544 <SendResponse+0xb0>)
 80024a0:	789b      	ldrb	r3, [r3, #2]
 80024a2:	3303      	adds	r3, #3
 80024a4:	607b      	str	r3, [r7, #4]

	// send STX
	U3_Putch(STX);
 80024a6:	2002      	movs	r0, #2
 80024a8:	f004 fe22 	bl	80070f0 <U3_Putch>
	bBCC = STX;				// BCC calculation
 80024ac:	2302      	movs	r3, #2
 80024ae:	73fb      	strb	r3, [r7, #15]

	// send data
	while (nResLen--)
 80024b0:	e034      	b.n	800251c <SendResponse+0x88>
	{
		// DLE processing
		if ((*pbResBuff == STX) || (*pbResBuff == ETX) || (*pbResBuff == DLE))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d007      	beq.n	80024ca <SendResponse+0x36>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d003      	beq.n	80024ca <SendResponse+0x36>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d11b      	bne.n	8002502 <SendResponse+0x6e>
		{
			U3_Putch(DLE);
 80024ca:	2010      	movs	r0, #16
 80024cc:	f004 fe10 	bl	80070f0 <U3_Putch>
			bBCC ^= DLE;				// BCC calculation
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	f083 0310 	eor.w	r3, r3, #16
 80024d6:	73fb      	strb	r3, [r7, #15]

			U3_Putch((*pbResBuff+DLE_OP));
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	3340      	adds	r3, #64	; 0x40
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 fe05 	bl	80070f0 <U3_Putch>
			bBCC ^= (*pbResBuff+DLE_OP);	// BCC calculation
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	3340      	adds	r3, #64	; 0x40
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	b25a      	sxtb	r2, r3
 80024f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f4:	4053      	eors	r3, r2
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	73fb      	strb	r3, [r7, #15]
			pbResBuff++;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3301      	adds	r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	e00c      	b.n	800251c <SendResponse+0x88>
		}
		else
		{
			U3_Putch(*pbResBuff);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f004 fdf2 	bl	80070f0 <U3_Putch>
			bBCC ^= *pbResBuff;			// BCC calculation
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	4053      	eors	r3, r2
 8002514:	73fb      	strb	r3, [r7, #15]
			pbResBuff++;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3301      	adds	r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
	while (nResLen--)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1c5      	bne.n	80024b2 <SendResponse+0x1e>
		}
	}

	// send ETX
	U3_Putch(ETX);
 8002526:	2003      	movs	r0, #3
 8002528:	f004 fde2 	bl	80070f0 <U3_Putch>
	bBCC ^= ETX;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	f083 0303 	eor.w	r3, r3, #3
 8002532:	73fb      	strb	r3, [r7, #15]

	// send BCC
	U3_Putch(bBCC);
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	4618      	mov	r0, r3
 8002538:	f004 fdda 	bl	80070f0 <U3_Putch>

#if _RES_DUMP_
	PRINT("\nRES %02X Data", GCUResponse.d.bCmdCode);
	Print2Hex("", GCUResponse.Buff, GCUResponse.d.bDataLen+FRAME_HEADER_LEN);
#endif
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	24000304 	.word	0x24000304

08002548 <CMDSetGCUOpMode>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetGCUOpMode(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	SetNewOpMode((T_GCU_OP_MODE *)GCUCommand.d.mbOptionData);
 800254c:	4804      	ldr	r0, [pc, #16]	; (8002560 <CMDSetGCUOpMode+0x18>)
 800254e:	f7fe fd25 	bl	8000f9c <SetNewOpMode>
	// TestCaptureUnit(TCU_TEST_STOP);
	MakeResponse(GCUCommand.d.mbOptionData, sizeof(T_GCU_OP_MODE));
 8002552:	2104      	movs	r1, #4
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <CMDSetGCUOpMode+0x18>)
 8002556:	f7ff ff69 	bl	800242c <MakeResponse>
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	24000284 	.word	0x24000284

08002564 <CMDGetGCUOpMode>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetGCUOpMode(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
	T_GCU_OP_MODE CurMode;

	GetCurrentOpMode(&CurMode);
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fd91 	bl	8001094 <GetCurrentOpMode>

	MakeResponse((BYTE*)&CurMode, sizeof(T_GCU_OP_MODE));
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	2104      	movs	r1, #4
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff58 	bl	800242c <MakeResponse>
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <CMDSetGCUParameter>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetGCUParameter(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	gnParameterLength = GCUCommand.d.bDataLen-1;
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <CMDSetGCUParameter+0x2c>)
 800258a:	789b      	ldrb	r3, [r3, #2]
 800258c:	3b01      	subs	r3, #1
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <CMDSetGCUParameter+0x30>)
 8002590:	6013      	str	r3, [r2, #0]

	SetGCUParameter((T_GCU_PARAMETER*)GCUCommand.d.mbOptionData, gnParameterLength);
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <CMDSetGCUParameter+0x30>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	4807      	ldr	r0, [pc, #28]	; (80025b8 <CMDSetGCUParameter+0x34>)
 800259a:	f7fe fd8d 	bl	80010b8 <SetGCUParameter>
	MakeResponse(GCUCommand.d.mbOptionData, gnParameterLength);
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <CMDSetGCUParameter+0x30>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4619      	mov	r1, r3
 80025a4:	4804      	ldr	r0, [pc, #16]	; (80025b8 <CMDSetGCUParameter+0x34>)
 80025a6:	f7ff ff41 	bl	800242c <MakeResponse>
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	24000280 	.word	0x24000280
 80025b4:	24000004 	.word	0x24000004
 80025b8:	24000284 	.word	0x24000284

080025bc <CMDGetGCUParameter>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetGCUParameter(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
	T_GCU_PARAMETER	GurGCUParameter;

	GetGCUParameter(&GurGCUParameter);
 80025c2:	463b      	mov	r3, r7
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fdc5 	bl	8001154 <GetGCUParameter>

	MakeResponse((BYTE*)&GurGCUParameter, gnParameterLength);
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <CMDGetGCUParameter+0x24>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	463b      	mov	r3, r7
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff2a 	bl	800242c <MakeResponse>
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	24000004 	.word	0x24000004

080025e4 <CMDGetVersion>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetVersion(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	Brr_SetSerialComm(TRUE);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f7fe f86b 	bl	80006c4 <Brr_SetSerialComm>
	MakeResponse((BYTE*)GCU_FW_VERSION, sizeof(GCU_FW_VERSION));
 80025ee:	2108      	movs	r1, #8
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <CMDGetVersion+0x18>)
 80025f2:	f7ff ff1b 	bl	800242c <MakeResponse>
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	08010d7c 	.word	0x08010d7c

08002600 <CMDSetBaudRate>:
* Return:   void
* comments: 
*******************************************************************************/

void CMDSetBaudRate(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
	int  nBaudRate = -1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	607b      	str	r3, [r7, #4]
	BYTE bBaudRate = GCUCommand.d.mbOptionData[0];
 800260c:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <CMDSetBaudRate+0xa8>)
 800260e:	791b      	ldrb	r3, [r3, #4]
 8002610:	70fb      	strb	r3, [r7, #3]

	// check boundary value
	if (bBaudRate <= BAUD_MAX_PARAM)
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	2b04      	cmp	r3, #4
 8002616:	d830      	bhi.n	800267a <CMDSetBaudRate+0x7a>
	{
		if (gbHostBaudRate != bBaudRate)
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <CMDSetBaudRate+0xac>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	429a      	cmp	r2, r3
 8002620:	d02b      	beq.n	800267a <CMDSetBaudRate+0x7a>
		{
			switch (bBaudRate)
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	2b04      	cmp	r3, #4
 8002626:	d821      	bhi.n	800266c <CMDSetBaudRate+0x6c>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <CMDSetBaudRate+0x30>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002645 	.word	0x08002645
 8002634:	0800264d 	.word	0x0800264d
 8002638:	08002655 	.word	0x08002655
 800263c:	0800265d 	.word	0x0800265d
 8002640:	08002665 	.word	0x08002665
			{
			case BAUD_9600:		nBaudRate = 9600;	break;
 8002644:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	e013      	b.n	8002674 <CMDSetBaudRate+0x74>
			case BAUD_19200:	nBaudRate = 19200;	break;
 800264c:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	e00f      	b.n	8002674 <CMDSetBaudRate+0x74>
			case BAUD_38400:	nBaudRate = 38400;	break;
 8002654:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	e00b      	b.n	8002674 <CMDSetBaudRate+0x74>
			case BAUD_57600:	nBaudRate = 57600;	break;
 800265c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	e007      	b.n	8002674 <CMDSetBaudRate+0x74>
			case BAUD_115200:	nBaudRate = 115200;	break;
 8002664:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	e003      	b.n	8002674 <CMDSetBaudRate+0x74>
			default:			bBaudRate = gbHostBaudRate;	break;	// In case of invalid baud rate
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <CMDSetBaudRate+0xac>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	70fb      	strb	r3, [r7, #3]
 8002672:	bf00      	nop
			}

			gbHostBaudRate = bBaudRate;
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <CMDSetBaudRate+0xac>)
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	7013      	strb	r3, [r2, #0]
		}
	}

	MakeResponse(&gbHostBaudRate, sizeof(BYTE));
 800267a:	2101      	movs	r1, #1
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <CMDSetBaudRate+0xac>)
 800267e:	f7ff fed5 	bl	800242c <MakeResponse>
	SendResponse();
 8002682:	f7ff ff07 	bl	8002494 <SendResponse>

	HAL_Delay(100);
 8002686:	2064      	movs	r0, #100	; 0x64
 8002688:	f007 fd38 	bl	800a0fc <HAL_Delay>

	//delay_ms(100);
	
	if (nBaudRate != -1)	// if baud rate is changed
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002692:	d005      	beq.n	80026a0 <CMDSetBaudRate+0xa0>
	{
		//UARTxConfig(UART2, (u32)nBaudRate);
		USART3_UART_Init((u32)nBaudRate);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f003 fe6b 	bl	8006370 <USART3_UART_Init>
		//delay_ms(100);
		HAL_Delay(100);
 800269a:	2064      	movs	r0, #100	; 0x64
 800269c:	f007 fd2e 	bl	800a0fc <HAL_Delay>
	}
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	24000280 	.word	0x24000280
 80026ac:	24000000 	.word	0x24000000

080026b0 <CMDResetGCU>:
* Return:   void
* comments: 
*******************************************************************************/

void CMDResetGCU(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	MakeResponse(NULL, 0);
 80026b4:	2100      	movs	r1, #0
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7ff feb8 	bl	800242c <MakeResponse>
	SendResponse();
 80026bc:	f7ff feea 	bl	8002494 <SendResponse>
	HAL_Delay(50);
 80026c0:	2032      	movs	r0, #50	; 0x32
 80026c2:	f007 fd1b 	bl	800a0fc <HAL_Delay>
	NVIC_SystemReset();
 80026c6:	f7ff fe0d 	bl	80022e4 <__NVIC_SystemReset>
	...

080026cc <CMDAuthorizePass>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDAuthorizePass(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
	T_CMD_AUTH_PASS *pcmdAuthPass = (T_CMD_AUTH_PASS*)GCUCommand.d.mbOptionData;
 80026d2:	4b27      	ldr	r3, [pc, #156]	; (8002770 <CMDAuthorizePass+0xa4>)
 80026d4:	607b      	str	r3, [r7, #4]
	T_GCU_AUTH_COUNT resAuthCount;

	if (pcmdAuthPass->bAuthCount == 0)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	785b      	ldrb	r3, [r3, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d114      	bne.n	8002708 <CMDAuthorizePass+0x3c>
	{		
		//PRINTL(" [CMDAuthorizePass] zero count! - A:%d, D:%d", pcmdAuthPass->bAuthCount, pcmdAuthPass->bDirection);
		//PRINTL(" [CMDAuthorizePass] org data. - A:%d, D:%d", GCUCommand.d.mbOptionData[1], GCUCommand.d.mbOptionData[0]);

		printf(" [CMDAuthorizePass] zero count! - A:%d, D:%d \n", pcmdAuthPass->bAuthCount, pcmdAuthPass->bDirection);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	785b      	ldrb	r3, [r3, #1]
 80026e2:	4619      	mov	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4822      	ldr	r0, [pc, #136]	; (8002774 <CMDAuthorizePass+0xa8>)
 80026ec:	f006 feae 	bl	800944c <printf_>
		printf(" [CMDAuthorizePass] org data. - A:%d, D:%d \n", GCUCommand.d.mbOptionData[1], GCUCommand.d.mbOptionData[0]);
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <CMDAuthorizePass+0xac>)
 80026f2:	795b      	ldrb	r3, [r3, #5]
 80026f4:	4619      	mov	r1, r3
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <CMDAuthorizePass+0xac>)
 80026f8:	791b      	ldrb	r3, [r3, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	481f      	ldr	r0, [pc, #124]	; (800277c <CMDAuthorizePass+0xb0>)
 80026fe:	f006 fea5 	bl	800944c <printf_>
		pcmdAuthPass->bAuthCount = 1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	705a      	strb	r2, [r3, #1]
	}

	IncreaseAuthCount(pcmdAuthPass->bDirection);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fe0b 	bl	8001328 <IncreaseAuthCount>

	if (pcmdAuthPass->bDirection == FROM_ENTRY)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d10e      	bne.n	8002738 <CMDAuthorizePass+0x6c>
	{
		ControlIndicator(pcmdAuthPass->bLamp, LAMP_OFF, pcmdAuthPass->bDuration, FALSE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7898      	ldrb	r0, [r3, #2]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	791a      	ldrb	r2, [r3, #4]
 8002722:	2300      	movs	r3, #0
 8002724:	2100      	movs	r1, #0
 8002726:	f7fe ff87 	bl	8001638 <ControlIndicator>
		ControlDirectionLED(pcmdAuthPass->bLampBar, DIR_RED);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	78db      	ldrb	r3, [r3, #3]
 800272e:	2102      	movs	r1, #2
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe ff25 	bl	8001580 <ControlDirectionLED>
 8002736:	e00d      	b.n	8002754 <CMDAuthorizePass+0x88>
	}
	else
	{
		ControlIndicator(LAMP_OFF, pcmdAuthPass->bLamp, pcmdAuthPass->bDuration, FALSE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7899      	ldrb	r1, [r3, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	791a      	ldrb	r2, [r3, #4]
 8002740:	2300      	movs	r3, #0
 8002742:	2000      	movs	r0, #0
 8002744:	f7fe ff78 	bl	8001638 <ControlIndicator>
		ControlDirectionLED(DIR_RED, pcmdAuthPass->bLampBar);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	78db      	ldrb	r3, [r3, #3]
 800274c:	4619      	mov	r1, r3
 800274e:	2002      	movs	r0, #2
 8002750:	f7fe ff16 	bl	8001580 <ControlDirectionLED>
	}

	GetAuthCount(&resAuthCount);
 8002754:	463b      	mov	r3, r7
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fdd0 	bl	80012fc <GetAuthCount>
	MakeResponse((BYTE*)&resAuthCount, sizeof(T_GCU_AUTH_COUNT));
 800275c:	463b      	mov	r3, r7
 800275e:	2102      	movs	r1, #2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fe63 	bl	800242c <MakeResponse>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	24000284 	.word	0x24000284
 8002774:	08010d84 	.word	0x08010d84
 8002778:	24000280 	.word	0x24000280
 800277c:	08010db4 	.word	0x08010db4

08002780 <CMDClearAuthorization>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDClearAuthorization(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
	T_GCU_AUTH_COUNT resAuthCount;

	ClearAuthCount();
 8002786:	f7fe fe3d 	bl	8001404 <ClearAuthCount>
	GetAuthCount(&resAuthCount);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fdb5 	bl	80012fc <GetAuthCount>

	MakeResponse((BYTE*)&resAuthCount, sizeof(T_GCU_AUTH_COUNT));
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	2102      	movs	r1, #2
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fe48 	bl	800242c <MakeResponse>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <CMDGetStatus>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetStatus(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
	T_GCU_STATUS_RES GurStatus;

	GetGCUStatus(&GurStatus);
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe fce9 	bl	8001184 <GetGCUStatus>

	MakeResponse((BYTE*)&GurStatus, sizeof(T_GCU_STATUS_RES));
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	2112      	movs	r1, #18
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fe38 	bl	800242c <MakeResponse>
}
 80027bc:	bf00      	nop
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <CMDGetSensorSwitch>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetSensorSwitch(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
	// not used
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <CMDControlAllLED>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlAllLED(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_ALL_LED *pcmdControlAll = (T_CMD_CONTROL_ALL_LED *)GCUCommand.d.mbOptionData;
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <CMDControlAllLED+0x5c>)
 80027dc:	607b      	str	r3, [r7, #4]

	if (pcmdControlAll->test_flag == SET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d110      	bne.n	8002808 <CMDControlAllLED+0x34>
	{
		ControlStatusLED(pcmdControlAll->bLamp_EN, pcmdControlAll->bLamp_EX);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	785a      	ldrb	r2, [r3, #1]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	789b      	ldrb	r3, [r3, #2]
 80027ee:	4619      	mov	r1, r3
 80027f0:	4610      	mov	r0, r2
 80027f2:	f7fe fef9 	bl	80015e8 <ControlStatusLED>
		ControlOverheadDisplay(pcmdControlAll->bOverhead_EN, pcmdControlAll->bOverhead_EX);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	795a      	ldrb	r2, [r3, #5]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	799b      	ldrb	r3, [r3, #6]
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7fe ff05 	bl	8001610 <ControlOverheadDisplay>
 8002806:	e007      	b.n	8002818 <CMDControlAllLED+0x44>
	}
	else
	{
		ControlDirectionLED(pcmdControlAll->bLamp_EN, pcmdControlAll->bLamp_EN);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	785a      	ldrb	r2, [r3, #1]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f7fe feb4 	bl	8001580 <ControlDirectionLED>
	}

	ControlIndicator(pcmdControlAll->bIndicator_EN, pcmdControlAll->bIndicator_EX, 0, FALSE);	
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	78d8      	ldrb	r0, [r3, #3]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7919      	ldrb	r1, [r3, #4]
 8002820:	2300      	movs	r3, #0
 8002822:	2200      	movs	r2, #0
 8002824:	f7fe ff08 	bl	8001638 <ControlIndicator>
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	24000284 	.word	0x24000284

08002834 <CMDControlFlapDoor>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlFlapDoor(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	SetDoorControl(GCUCommand.d.mbOptionData[0]);
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <CMDControlFlapDoor+0x14>)
 800283a:	791b      	ldrb	r3, [r3, #4]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fd67 	bl	8002310 <SetDoorControl>
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	24000280 	.word	0x24000280

0800284c <CMDControlIndicator>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlIndicator(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_INDICATOR *pcmdIndicator = (T_CMD_CONTROL_INDICATOR *)GCUCommand.d.mbOptionData;
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <CMDControlIndicator+0x24>)
 8002854:	607b      	str	r3, [r7, #4]
	ControlIndicator4Test(pcmdIndicator->bIndicator_EN, pcmdIndicator->bIndicator_EX);	
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	785b      	ldrb	r3, [r3, #1]
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f7fe ff5d 	bl	8001720 <ControlIndicator4Test>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	24000284 	.word	0x24000284

08002874 <CMDControlLamp>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlLamp(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_LAMP *pcmdLamp = (T_CMD_CONTROL_LAMP *)GCUCommand.d.mbOptionData;
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <CMDControlLamp+0x24>)
 800287c:	607b      	str	r3, [r7, #4]
	ControlStatusLED(pcmdLamp->bLamp_EN, pcmdLamp->bLamp_EX);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	785b      	ldrb	r3, [r3, #1]
 8002886:	4619      	mov	r1, r3
 8002888:	4610      	mov	r0, r2
 800288a:	f7fe fead 	bl	80015e8 <ControlStatusLED>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	24000284 	.word	0x24000284

0800289c <CMDControlBuzzer>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDControlBuzzer(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
	T_CMD_CONTROL_BUZZER *pcmdBuzzer = (T_CMD_CONTROL_BUZZER *)GCUCommand.d.mbOptionData;
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <CMDControlBuzzer+0x80>)
 80028a4:	607b      	str	r3, [r7, #4]

	if (GCUCommand.d.bDataLen == (sizeof(T_CMD_CONTROL_BUZZER)+1))
 80028a6:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <CMDControlBuzzer+0x84>)
 80028a8:	789b      	ldrb	r3, [r3, #2]
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d12a      	bne.n	8002904 <CMDControlBuzzer+0x68>
	{
		if (pcmdBuzzer->bBuzzerNo & MASK_TEST_BUZZER_MAIN)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	789b      	ldrb	r3, [r3, #2]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <CMDControlBuzzer+0x2e>
			ControlBuzzer(BUZZER_NO_MAIN, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7819      	ldrb	r1, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	785b      	ldrb	r3, [r3, #1]
 80028c2:	461a      	mov	r2, r3
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe fe01 	bl	80014cc <ControlBuzzer>

		if (pcmdBuzzer->bBuzzerNo & MASK_TEST_BUZZER_DIRA)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	789b      	ldrb	r3, [r3, #2]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <CMDControlBuzzer+0x4a>
			ControlBuzzer(BUZZER_NO_DIRA, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7819      	ldrb	r1, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	461a      	mov	r2, r3
 80028e0:	2002      	movs	r0, #2
 80028e2:	f7fe fdf3 	bl	80014cc <ControlBuzzer>

		if (pcmdBuzzer->bBuzzerNo & MASK_TEST_BUZZER_DIRB)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	789b      	ldrb	r3, [r3, #2]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d010      	beq.n	8002914 <CMDControlBuzzer+0x78>
			ControlBuzzer(BUZZER_NO_DIRB, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	7819      	ldrb	r1, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	785b      	ldrb	r3, [r3, #1]
 80028fa:	461a      	mov	r2, r3
 80028fc:	2001      	movs	r0, #1
 80028fe:	f7fe fde5 	bl	80014cc <ControlBuzzer>
	else
	{
		ControlBuzzer(BUZZER_NO_MAIN, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
	}
	
}
 8002902:	e007      	b.n	8002914 <CMDControlBuzzer+0x78>
		ControlBuzzer(BUZZER_NO_MAIN, pcmdBuzzer->bBuzzerControl, pcmdBuzzer->bBuzzerDuration);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7819      	ldrb	r1, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	785b      	ldrb	r3, [r3, #1]
 800290c:	461a      	mov	r2, r3
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe fddc 	bl	80014cc <ControlBuzzer>
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	24000284 	.word	0x24000284
 8002920:	24000280 	.word	0x24000280

08002924 <CMDSafetyStop>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSafetyStop(void)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
	T_CMD_SAFETY_STOP *pcmdSafetyStop = (T_CMD_SAFETY_STOP *)GCUCommand.d.mbOptionData;
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <CMDSafetyStop+0x28>)
 800292c:	607b      	str	r3, [r7, #4]
	gfAISafetyOn = pcmdSafetyStop->bSafety;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	bf14      	ite	ne
 8002936:	2301      	movne	r3, #1
 8002938:	2300      	moveq	r3, #0
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <CMDSafetyStop+0x2c>)
 800293e:	701a      	strb	r2, [r3, #0]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	24000284 	.word	0x24000284
 8002950:	2400043f 	.word	0x2400043f

08002954 <CMDWriteRegister>:
* Return:   void
* comments: 
*******************************************************************************/

void CMDWriteRegister(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
	BYTE	*pbControl = (BYTE *)GCUCommand.d.mbOptionData;
 800295a:	4bb6      	ldr	r3, [pc, #728]	; (8002c34 <CMDWriteRegister+0x2e0>)
 800295c:	60fb      	str	r3, [r7, #12]
	BYTE	dwPrimaryLEDValue 		= 0;
 800295e:	2300      	movs	r3, #0
 8002960:	72fb      	strb	r3, [r7, #11]
	BYTE	dwSecondaryLEDValue 	= 0;
 8002962:	2300      	movs	r3, #0
 8002964:	72bb      	strb	r3, [r7, #10]
	BYTE	dwBarrierValue 			= 0;
 8002966:	2300      	movs	r3, #0
 8002968:	727b      	strb	r3, [r7, #9]
	BYTE	dwScadaValue 			= 0;
 800296a:	2300      	movs	r3, #0
 800296c:	723b      	strb	r3, [r7, #8]
	BYTE	dwUPSCHKValue 			= 0;
 800296e:	2300      	movs	r3, #0
 8002970:	71fb      	strb	r3, [r7, #7]
	BYTE	dwUPSSHDNKValue 		= 0;
 8002972:	2300      	movs	r3, #0
 8002974:	71bb      	strb	r3, [r7, #6]

	printf("pbControl[0] = [%d] \n",pbControl[0]);        //Barrier, S_EMG = [0x80], S_DIR = [0x40], S_BRAKE = [0x20], S_OPEN = [0x10], P_EMG = [0x08], P_DIR = [0x04], P_BRAKE = [0x02], P_OPEN = [0x01]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	48ae      	ldr	r0, [pc, #696]	; (8002c38 <CMDWriteRegister+0x2e4>)
 800297e:	f006 fd65 	bl	800944c <printf_>
	printf("pbControl[1] = [%d] \n",pbControl[1]);		//SCADA OUT, NXO = [0x8], TDO = [0x4], EBO = [0x2], OOS = [0x1]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3301      	adds	r3, #1
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	48ac      	ldr	r0, [pc, #688]	; (8002c3c <CMDWriteRegister+0x2e8>)
 800298c:	f006 fd5e 	bl	800944c <printf_>
	printf("pbControl[2] = [%d] \n",pbControl[2]);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3302      	adds	r3, #2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	4619      	mov	r1, r3
 8002998:	48a9      	ldr	r0, [pc, #676]	; (8002c40 <CMDWriteRegister+0x2ec>)
 800299a:	f006 fd57 	bl	800944c <printf_>
	printf("pbControl[3] = [%d] \n",pbControl[3]);		//jig master dir green = [0x4], red = [0x2], yellow = [0x1]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3303      	adds	r3, #3
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	48a7      	ldr	r0, [pc, #668]	; (8002c44 <CMDWriteRegister+0x2f0>)
 80029a8:	f006 fd50 	bl	800944c <printf_>
	printf("pbControl[4] = [%d] \n",pbControl[4]);		//jig slave dir green = [0x4], red = [0x2], yellow = [0x1]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3304      	adds	r3, #4
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4619      	mov	r1, r3
 80029b4:	48a4      	ldr	r0, [pc, #656]	; (8002c48 <CMDWriteRegister+0x2f4>)
 80029b6:	f006 fd49 	bl	800944c <printf_>
	printf("pbControl[5] = [%d] \n",pbControl[5]);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3305      	adds	r3, #5
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4619      	mov	r1, r3
 80029c2:	48a2      	ldr	r0, [pc, #648]	; (8002c4c <CMDWriteRegister+0x2f8>)
 80029c4:	f006 fd42 	bl	800944c <printf_>
	printf("pbControl[6] = [%d] \n",pbControl[6]);		//jig master alm green = [0x4], blue = [0x2], red = [0x1]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3306      	adds	r3, #6
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4619      	mov	r1, r3
 80029d0:	489f      	ldr	r0, [pc, #636]	; (8002c50 <CMDWriteRegister+0x2fc>)
 80029d2:	f006 fd3b 	bl	800944c <printf_>
	printf("pbControl[7] = [%d] \n",pbControl[7]);		//jig slave alm green = [0x4], blue = [0x2], red = [0x1]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3307      	adds	r3, #7
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	489d      	ldr	r0, [pc, #628]	; (8002c54 <CMDWriteRegister+0x300>)
 80029e0:	f006 fd34 	bl	800944c <printf_>
	printf("pbControl[8] = [%d] \n",pbControl[8]);		//default 0x33 SHDN button 0x01 CHK 0x02 reverse
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3308      	adds	r3, #8
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	4619      	mov	r1, r3
 80029ec:	489a      	ldr	r0, [pc, #616]	; (8002c58 <CMDWriteRegister+0x304>)
 80029ee:	f006 fd2d 	bl	800944c <printf_>

	// Barrier - Primary
	dwBarrierValue =  (pbControl[0] & 0x01)? 0x01: 0x00;			// output Primary Barrier - Open/Close
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x02)? 0x02: 0x00;			// output Primary Barrier - Emg(Free)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	b25a      	sxtb	r2, r3
 8002a08:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x04)? 0x04: 0x00;			// output Primary Barrier - Direction
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	b25b      	sxtb	r3, r3
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	b25a      	sxtb	r2, r3
 8002a1e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b25b      	sxtb	r3, r3
 8002a26:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x08)? 0x08: 0x00;			// output Primary Barrier - Brake(Stop)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	b25a      	sxtb	r2, r3
 8002a34:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	b25b      	sxtb	r3, r3
 8002a3c:	727b      	strb	r3, [r7, #9]

	// Barrier - Secondary
	dwBarrierValue |= (pbControl[0] & 0x10)? 0x10: 0x00;			// output Secondary Barrier - Open/Close
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b25b      	sxtb	r3, r3
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	b25a      	sxtb	r2, r3
 8002a4a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x20)? 0x20: 0x00;			// output Secondary Barrier - Emg(Free)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b25b      	sxtb	r3, r3
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	b25a      	sxtb	r2, r3
 8002a60:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x40)? 0x40: 0x00;			// output Secondary Barrier - Direction
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b25b      	sxtb	r3, r3
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	b25a      	sxtb	r2, r3
 8002a76:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b25b      	sxtb	r3, r3
 8002a7e:	727b      	strb	r3, [r7, #9]
	dwBarrierValue |= (pbControl[0] & 0x80)? 0x80: 0x00;			// output Secondary Barrier - Brake(Stop)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	b25b      	sxtb	r3, r3
 8002a86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a8a:	b25a      	sxtb	r2, r3
 8002a8c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	b25b      	sxtb	r3, r3
 8002a94:	727b      	strb	r3, [r7, #9]
	
	outb(WRITE02_ADR, dwBarrierValue);
 8002a96:	4a71      	ldr	r2, [pc, #452]	; (8002c5c <CMDWriteRegister+0x308>)
 8002a98:	7a7b      	ldrb	r3, [r7, #9]
 8002a9a:	7013      	strb	r3, [r2, #0]

	// SCADA
	dwScadaValue =  (pbControl[1] & 0x01)? 0x01: 0x00;				// output SCADA - OOS
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x02)? 0x02: 0x00;				// output SCADA - EBO
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	b25a      	sxtb	r2, r3
 8002ab6:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	b25b      	sxtb	r3, r3
 8002abe:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x04)? 0x04: 0x00;				// output SCADA - TDO
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	b25a      	sxtb	r2, r3
 8002ace:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	723b      	strb	r3, [r7, #8]
	dwScadaValue |= (pbControl[1] & 0x08)? 0x08: 0x00;				// output SCADA - NXO
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3301      	adds	r3, #1
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	b25b      	sxtb	r3, r3
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	b25a      	sxtb	r2, r3
 8002ae6:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	b25b      	sxtb	r3, r3
 8002aee:	723b      	strb	r3, [r7, #8]

	outb(WRITE03_ADR, dwScadaValue);
 8002af0:	4a5b      	ldr	r2, [pc, #364]	; (8002c60 <CMDWriteRegister+0x30c>)
 8002af2:	7a3b      	ldrb	r3, [r7, #8]
 8002af4:	7013      	strb	r3, [r2, #0]

	// Status Display - Primary
	dwPrimaryLEDValue =  (pbControl[3] & 0x01)? 0x01: 0x00;			//Status display - green
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3303      	adds	r3, #3
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[3] & 0x02)? 0x02: 0x00;			//Status display - red
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3303      	adds	r3, #3
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	b25a      	sxtb	r2, r3
 8002b10:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	72fb      	strb	r3, [r7, #11]

	// Overhead Display - Primary
	dwPrimaryLEDValue |= (pbControl[3] & 0x04)? 0x04: 0x00;			//Overhead display - green
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3303      	adds	r3, #3
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	b25a      	sxtb	r2, r3
 8002b28:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[3] & 0x08)? 0x08: 0x00;			//Overhead display - red
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	3303      	adds	r3, #3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	b25a      	sxtb	r2, r3
 8002b40:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	b25b      	sxtb	r3, r3
 8002b48:	72fb      	strb	r3, [r7, #11]

	// Status Display - Secondary
	dwPrimaryLEDValue |= (pbControl[4] & 0x01)? 0x10: 0x00;		//Status display - green
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	b25b      	sxtb	r3, r3
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	b25a      	sxtb	r2, r3
 8002b5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b25b      	sxtb	r3, r3
 8002b62:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[4] & 0x02)? 0x20: 0x00;		//Status display - red
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3304      	adds	r3, #4
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	b25a      	sxtb	r2, r3
 8002b74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	b25b      	sxtb	r3, r3
 8002b7c:	72fb      	strb	r3, [r7, #11]

	// Overhead Display - Secondary
	dwPrimaryLEDValue |= (pbControl[4] & 0x04)? 0x40: 0x00;		//Overhead display - green
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3304      	adds	r3, #4
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	b25a      	sxtb	r2, r3
 8002b8e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	72fb      	strb	r3, [r7, #11]
	dwPrimaryLEDValue |= (pbControl[4] & 0x08)? 0x80: 0x00;		//Overhead display - red
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	b25b      	sxtb	r3, r3
 8002ba2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ba6:	b25a      	sxtb	r2, r3
 8002ba8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b25b      	sxtb	r3, r3
 8002bb0:	72fb      	strb	r3, [r7, #11]

	outb(WRITE00_ADR, dwPrimaryLEDValue);
 8002bb2:	f04f 42c8 	mov.w	r2, #1677721600	; 0x64000000
 8002bb6:	7afb      	ldrb	r3, [r7, #11]
 8002bb8:	7013      	strb	r3, [r2, #0]


	// Indicator Light - Primary
	dwSecondaryLEDValue  = (pbControl[6] & 0x01)? 0x01: 0x00;			//red
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3306      	adds	r3, #6
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[6] & 0x04)? 0x02: 0x00;			//green
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3306      	adds	r3, #6
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	105b      	asrs	r3, r3, #1
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	b25a      	sxtb	r2, r3
 8002bd6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[6] & 0x02)? 0x04: 0x00;			//blue
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3306      	adds	r3, #6
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	b25a      	sxtb	r2, r3
 8002bf0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	b25b      	sxtb	r3, r3
 8002bf8:	72bb      	strb	r3, [r7, #10]

	// Indicator Light - Secondary
	dwSecondaryLEDValue |= (pbControl[7] & 0x01)? 0x10: 0x00;		//red
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3307      	adds	r3, #7
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	b25a      	sxtb	r2, r3
 8002c0a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[7] & 0x04)? 0x20: 0x00;		//green
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3307      	adds	r3, #7
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	b25a      	sxtb	r2, r3
 8002c24:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b25b      	sxtb	r3, r3
 8002c2c:	72bb      	strb	r3, [r7, #10]
	dwSecondaryLEDValue |= (pbControl[7] & 0x02)? 0x40: 0x00;		//blue
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	e018      	b.n	8002c64 <CMDWriteRegister+0x310>
 8002c32:	bf00      	nop
 8002c34:	24000284 	.word	0x24000284
 8002c38:	08010de4 	.word	0x08010de4
 8002c3c:	08010dfc 	.word	0x08010dfc
 8002c40:	08010e14 	.word	0x08010e14
 8002c44:	08010e2c 	.word	0x08010e2c
 8002c48:	08010e44 	.word	0x08010e44
 8002c4c:	08010e5c 	.word	0x08010e5c
 8002c50:	08010e74 	.word	0x08010e74
 8002c54:	08010e8c 	.word	0x08010e8c
 8002c58:	08010ea4 	.word	0x08010ea4
 8002c5c:	64000200 	.word	0x64000200
 8002c60:	64000400 	.word	0x64000400
 8002c64:	3307      	adds	r3, #7
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	015b      	lsls	r3, r3, #5
 8002c6a:	b25b      	sxtb	r3, r3
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	b25a      	sxtb	r2, r3
 8002c72:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	b25b      	sxtb	r3, r3
 8002c7a:	72bb      	strb	r3, [r7, #10]


	// Write Register

	outb(WRITE01_ADR, dwSecondaryLEDValue);	
 8002c7c:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <CMDWriteRegister+0x3b0>)
 8002c7e:	7abb      	ldrb	r3, [r7, #10]
 8002c80:	7013      	strb	r3, [r2, #0]

	if (pbControl[8] == 0x33)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3308      	adds	r3, #8
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b33      	cmp	r3, #51	; 0x33
 8002c8a:	d10a      	bne.n	8002ca2 <CMDWriteRegister+0x34e>
	{
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_CHK_Pin, GPIO_PIN_SET);
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	2140      	movs	r1, #64	; 0x40
 8002c90:	481d      	ldr	r0, [pc, #116]	; (8002d08 <CMDWriteRegister+0x3b4>)
 8002c92:	f007 fec1 	bl	800aa18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_SHDN_Pin, GPIO_PIN_SET);
 8002c96:	2201      	movs	r2, #1
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	481b      	ldr	r0, [pc, #108]	; (8002d08 <CMDWriteRegister+0x3b4>)
 8002c9c:	f007 febc 	bl	800aa18 <HAL_GPIO_WritePin>
 8002ca0:	e021      	b.n	8002ce6 <CMDWriteRegister+0x392>
	}
	else
	{
		dwUPSCHKValue  = (pbControl[8] & 0x02)? 0x00: 0x01;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_CHK_Pin, dwUPSCHKValue);
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2140      	movs	r1, #64	; 0x40
 8002cbe:	4812      	ldr	r0, [pc, #72]	; (8002d08 <CMDWriteRegister+0x3b4>)
 8002cc0:	f007 feaa 	bl	800aa18 <HAL_GPIO_WritePin>

		dwUPSSHDNKValue = (pbControl[8] & 0x01)? 0x00: 0x01;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2301      	moveq	r3, #1
 8002cd4:	2300      	movne	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	71bb      	strb	r3, [r7, #6]
		HAL_GPIO_WritePin(nUPS_GPIO_Port, UPS_SHDN_Pin, dwUPSSHDNKValue);
 8002cda:	79bb      	ldrb	r3, [r7, #6]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2180      	movs	r1, #128	; 0x80
 8002ce0:	4809      	ldr	r0, [pc, #36]	; (8002d08 <CMDWriteRegister+0x3b4>)
 8002ce2:	f007 fe99 	bl	800aa18 <HAL_GPIO_WritePin>

	//pbControl[5] =  0;						// Control dummy direction display (WMATA not used)
	//pbControl[8] => UPS Shuddown On [0x00], UPS Shuddown Off [0x01] / UPS Check On [0x02], UPS Check Off [0x00] 
	//pbControl[8] =  0;						// UPS Command - BART도 UPS I/F 사용 (Out: 2EA) - 현재 SHDN 1EA만 구현되어 있으나 CHK신호 추가예정 -> Jig Program 에서는 UPS Write 시그널 줌. 20231002 by Joseph

	if (pbControl[10])	
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	330a      	adds	r3, #10
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <CMDWriteRegister+0x3a2>
		BuzzerOn();			//buzzer 한개만 사용
 8002cf0:	f003 f838 	bl	8005d64 <BuzzerOn>
	else										
		BuzzerOff();
}
 8002cf4:	e001      	b.n	8002cfa <CMDWriteRegister+0x3a6>
		BuzzerOff();
 8002cf6:	f003 f841 	bl	8005d7c <BuzzerOff>
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	64000100 	.word	0x64000100
 8002d08:	58021400 	.word	0x58021400

08002d0c <CMDReadRegister>:
* Out:      Values of current register
* Return:   void
* comments: 
*******************************************************************************/
void CMDReadRegister(void)			//pms		이 함수 모두 확인 필요
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
	BYTE	mbReadData[MAX_READ_REG];			//0 ~ 10 = Total 11 0x6400000B 까지 read
	DWORD	dwSpareSenserValue  = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
	DWORD	dwUPSValue = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]

	dwUPSValue = (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_CONN_Pin))? 0x01: 0x00;			// Connection Failure, High active //stm32L496 적용 보드에서는 conn이 없었음
 8002d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d1e:	483d      	ldr	r0, [pc, #244]	; (8002e14 <CMDReadRegister+0x108>)
 8002d20:	f007 fe62 	bl	800a9e8 <HAL_GPIO_ReadPin>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	613b      	str	r3, [r7, #16]
	dwUPSValue |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_LINE_FAIL_Pin))? 0x02: 0x00;			// Power Failure, Low active
 8002d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d36:	4837      	ldr	r0, [pc, #220]	; (8002e14 <CMDReadRegister+0x108>)
 8002d38:	f007 fe56 	bl	800a9e8 <HAL_GPIO_ReadPin>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <CMDReadRegister+0x3a>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e000      	b.n	8002d48 <CMDReadRegister+0x3c>
 8002d46:	2300      	movs	r3, #0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
	dwUPSValue |= (HAL_GPIO_ReadPin(nUPS_GPIO_Port,nUPS_LOW_BAT_Pin))? 0x04: 0x00;		// Low battery, Low active
 8002d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d54:	482f      	ldr	r0, [pc, #188]	; (8002e14 <CMDReadRegister+0x108>)
 8002d56:	f007 fe47 	bl	800a9e8 <HAL_GPIO_ReadPin>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <CMDReadRegister+0x58>
 8002d60:	2304      	movs	r3, #4
 8002d62:	e000      	b.n	8002d66 <CMDReadRegister+0x5a>
 8002d64:	2300      	movs	r3, #0
 8002d66:	461a      	mov	r2, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]

	// BART 에서는 Passenger sensor 01 ~ 16(2 bytes) 만 사용
	dwSpareSenserValue = (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN1_Pin))? 0x01: 0x00;  	// Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기)
 8002d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d72:	4829      	ldr	r0, [pc, #164]	; (8002e18 <CMDReadRegister+0x10c>)
 8002d74:	f007 fe38 	bl	800a9e8 <HAL_GPIO_ReadPin>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	617b      	str	r3, [r7, #20]
	dwSpareSenserValue |= (HAL_GPIO_ReadPin(SP_SEN_GPIO_Port,SP_SEN2_Pin))? 0x02: 0x00;
 8002d86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d8a:	4823      	ldr	r0, [pc, #140]	; (8002e18 <CMDReadRegister+0x10c>)
 8002d8c:	f007 fe2c 	bl	800a9e8 <HAL_GPIO_ReadPin>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <CMDReadRegister+0x8e>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e000      	b.n	8002d9c <CMDReadRegister+0x90>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

	mbReadData[0] =  RD_SWITCH & 0x0F;			// Door/Module switch 1 - BART는 Door Switch 1~4만 사용, High - detected, Low - not detected
 8002da4:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <CMDReadRegister+0x110>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	713b      	strb	r3, [r7, #4]
	mbReadData[1] =  (RD_SWITCH >> 4) & 0x0F;	// Door/Module switch 2 - BART는 Door Switch 5~8만 사용, High - detected, Low - not detected
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <CMDReadRegister+0x110>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	717b      	strb	r3, [r7, #5]
	mbReadData[2] =  0;							// Token capture unit sensor - Token box 없음
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	71bb      	strb	r3, [r7, #6]
	mbReadData[3] =  (*(BYTE*)READ00_ADR);		// Passenger sensor 1 - BART는 Passenger sensor 1~8사용, High - detected, Low - not detected
 8002dc8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	71fb      	strb	r3, [r7, #7]
	mbReadData[4] =  (*(BYTE*)READ01_ADR);		// Passenger sensor 2 - BART는 Passenger sensor 9~16사용(회로상엔 11~18로 표기) -> 회로상에도 9~16으로 표기 바랍니다 20230927 by Joseph, High - detected, Low - not detected
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <CMDReadRegister+0x114>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	723b      	strb	r3, [r7, #8]
	mbReadData[5] =  dwSpareSenserValue;		// Passenger sensor 3 - BART는 Passenger sensor 17, 18는 Spare로 GPIO 별도 할당(회로상엔 9, 19로 표기) -> 회로상에도 스페어는 17,18 로 표기 바랍니다 20230927 by Joseph
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	727b      	strb	r3, [r7, #9]
												// add - jig test에서는 17 18 할당 -> JIG 에서는 17,18 sensor 체크는 뺄 예정입니다. 20230927 by Joseph
	mbReadData[6] =  0;							// Spare sensor (WMATA not used) -> JIG 에서는 Spare sensor 체크는 뺄 예정입니다. 20230927 by Joseph
 8002ddc:	2300      	movs	r3, #0
 8002dde:	72bb      	strb	r3, [r7, #10]
	mbReadData[7] =  (*(BYTE*)READ04_ADR);		// Barrier status, High active
 8002de0:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <CMDReadRegister+0x118>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	72fb      	strb	r3, [r7, #11]
	mbReadData[8] =  (*(BYTE*)READ03_ADR);		// SCADA, High active
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <CMDReadRegister+0x11c>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	733b      	strb	r3, [r7, #12]
	mbReadData[9] =  IsEMGSignalOn();			// External IRQ source  - 인터럽트 신호 BART에서 사용여부는 첨부 GCU_IO Specification 참조 -> EBO (Emergency) Signal 값으로 변경. 20231002 by Joseph
 8002dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002df0:	480e      	ldr	r0, [pc, #56]	; (8002e2c <CMDReadRegister+0x120>)
 8002df2:	f007 fdf9 	bl	800a9e8 <HAL_GPIO_ReadPin>
 8002df6:	4603      	mov	r3, r0
 8002df8:	737b      	strb	r3, [r7, #13]
	mbReadData[10] =  dwUPSValue;				// UPS Status - BART도 UPS I/F 사용 (In: 3EA) 
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	73bb      	strb	r3, [r7, #14]

	MakeResponse(mbReadData, sizeof(mbReadData));
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	210b      	movs	r1, #11
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fb11 	bl	800242c <MakeResponse>
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	58021400 	.word	0x58021400
 8002e18:	58020000 	.word	0x58020000
 8002e1c:	60000300 	.word	0x60000300
 8002e20:	60000100 	.word	0x60000100
 8002e24:	60000600 	.word	0x60000600
 8002e28:	60000500 	.word	0x60000500
 8002e2c:	58020400 	.word	0x58020400

08002e30 <CMDGetCPLDVersion>:
* Out:      Current CPLD version
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetCPLDVersion(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
	BYTE	bCPLDVersion = RD_CPLDVER;
 8002e36:	2300      	movs	r3, #0
 8002e38:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&bCPLDVersion, sizeof(bCPLDVersion));
 8002e3a:	1dfb      	adds	r3, r7, #7
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff faf4 	bl	800242c <MakeResponse>
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <CMDGetDipSwitch>:
* Out:      Value of current dip switch 
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetDipSwitch(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
	BYTE dipSwitch = ReadDipSwitch();
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <CMDGetDipSwitch+0x24>)
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&dipSwitch, sizeof(dipSwitch));
 8002e5e:	1dfb      	adds	r3, r7, #7
 8002e60:	2101      	movs	r1, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fae2 	bl	800242c <MakeResponse>
}
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	58020400 	.word	0x58020400

08002e74 <CMDSetUPSCommand>:
* Out:      None
* Return:   void
* comments: 
*******************************************************************************/
void CMDSetUPSCommand(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
	// Set UPS command
	BYTE bUPSCommand = GCUCommand.d.mbOptionData[0];
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <CMDSetUPSCommand+0x38>)
 8002e7c:	791b      	ldrb	r3, [r3, #4]
 8002e7e:	71fb      	strb	r3, [r7, #7]


	printf("Send Command \n");
 8002e80:	480b      	ldr	r0, [pc, #44]	; (8002eb0 <CMDSetUPSCommand+0x3c>)
 8002e82:	f006 fae3 	bl	800944c <printf_>
	printf("%x \n", GCUCommand.d.mbOptionData[0]);
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <CMDSetUPSCommand+0x38>)
 8002e88:	791b      	ldrb	r3, [r3, #4]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4809      	ldr	r0, [pc, #36]	; (8002eb4 <CMDSetUPSCommand+0x40>)
 8002e8e:	f006 fadd 	bl	800944c <printf_>

	//PRINTL("Send Command\n");
	//PRINTL("%x", GCUCommand.d.mbOptionData[0]);
	//PRINTL("\n");

	ControlUPS(bUPSCommand);
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	019b      	lsls	r3, r3, #6
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4806      	ldr	r0, [pc, #24]	; (8002eb8 <CMDSetUPSCommand+0x44>)
 8002ea0:	f007 fdba 	bl	800aa18 <HAL_GPIO_WritePin>
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	24000280 	.word	0x24000280
 8002eb0:	08010ebc 	.word	0x08010ebc
 8002eb4:	08010ecc 	.word	0x08010ecc
 8002eb8:	58021400 	.word	0x58021400

08002ebc <CMDGetUPSStatus>:
* Out:      Current UPS Status
* Return:   void
* comments: 
*******************************************************************************/
void CMDGetUPSStatus(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
	BYTE bUPSStatus = 0x00;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	71fb      	strb	r3, [r7, #7]

	// Get UPS status
	bUPSStatus = RD_UPSSTAT;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	71fb      	strb	r3, [r7, #7]

	MakeResponse(&bUPSStatus, sizeof(bUPSStatus));
 8002eca:	1dfb      	adds	r3, r7, #7
 8002ecc:	2101      	movs	r1, #1
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff faac 	bl	800242c <MakeResponse>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <CheckProtocol_UART3>:
* comments: It checks serial data from Host and protocol format of data received.
*           If the protocol format is correct, it returns SUCCESS result.
*******************************************************************************/

int CheckProtocol_UART3(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
	static BYTE bRcvState = STATE_STX_WAIT;
	static BYTE bBCC;
	static BYTE bRcvData;

	while (IUart_RecvByte_check(COM3, &bRcvData))
 8002ee0:	e0d5      	b.n	800308e <CheckProtocol_UART3+0x1b2>
	{
		// printf("RecvByte CheckProtocol_UART3 : %d[%02X]\n", bRcvData, bRcvData);
		if (bRcvState == STATE_DATA_BCC)
 8002ee2:	4b70      	ldr	r3, [pc, #448]	; (80030a4 <CheckProtocol_UART3+0x1c8>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d138      	bne.n	8002f5c <CheckProtocol_UART3+0x80>
		{
			bRcvState = STATE_STX_WAIT;
 8002eea:	4b6e      	ldr	r3, [pc, #440]	; (80030a4 <CheckProtocol_UART3+0x1c8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]

			if (bBCC == bRcvData)
 8002ef0:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <CheckProtocol_UART3+0x1cc>)
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d119      	bne.n	8002f30 <CheckProtocol_UART3+0x54>
			{
				if (GCUCommand.d.bDataLen != (BYTE)(gnFrameLen - FRAME_HEADER_LEN))
 8002efc:	4b6c      	ldr	r3, [pc, #432]	; (80030b0 <CheckProtocol_UART3+0x1d4>)
 8002efe:	789a      	ldrb	r2, [r3, #2]
 8002f00:	4b6c      	ldr	r3, [pc, #432]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3b03      	subs	r3, #3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d00e      	beq.n	8002f2c <CheckProtocol_UART3+0x50>
				{
					//PRINTL("LENGTH ERR: %d - %d", GCUCommand.d.bDataLen, (gnFrameLen - FRAME_HEADER_LEN));
					printf("LENGTH ERR: %d - %d \n", GCUCommand.d.bDataLen, (gnFrameLen - FRAME_HEADER_LEN));
 8002f0e:	4b68      	ldr	r3, [pc, #416]	; (80030b0 <CheckProtocol_UART3+0x1d4>)
 8002f10:	789b      	ldrb	r3, [r3, #2]
 8002f12:	4619      	mov	r1, r3
 8002f14:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3b03      	subs	r3, #3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4866      	ldr	r0, [pc, #408]	; (80030b8 <CheckProtocol_UART3+0x1dc>)
 8002f1e:	f006 fa95 	bl	800944c <printf_>
					gnFrameLen = 0;
 8002f22:	4b64      	ldr	r3, [pc, #400]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
					return ERR_WRONG_CMD_LEN;
 8002f28:	230a      	movs	r3, #10
 8002f2a:	e0b9      	b.n	80030a0 <CheckProtocol_UART3+0x1c4>
				}
				else
					return SUCCESS;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e0b7      	b.n	80030a0 <CheckProtocol_UART3+0x1c4>
			}
			else
			{
				//PRINT("len: %d, BCC: %d, rcv: %d", gnFrameLen, bBCC, bRcvData);

				printf("len: %d, BCC: %d, rcv: %d \n", gnFrameLen, bBCC, bRcvData);
 8002f30:	4b60      	ldr	r3, [pc, #384]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	4b5c      	ldr	r3, [pc, #368]	; (80030a8 <CheckProtocol_UART3+0x1cc>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b5c      	ldr	r3, [pc, #368]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	485f      	ldr	r0, [pc, #380]	; (80030bc <CheckProtocol_UART3+0x1e0>)
 8002f40:	f006 fa84 	bl	800944c <printf_>
				Print2Hex("", GCUCommand.Buff, gnFrameLen);
 8002f44:	4b5b      	ldr	r3, [pc, #364]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4959      	ldr	r1, [pc, #356]	; (80030b0 <CheckProtocol_UART3+0x1d4>)
 8002f4c:	485c      	ldr	r0, [pc, #368]	; (80030c0 <CheckProtocol_UART3+0x1e4>)
 8002f4e:	f00c fb0f 	bl	800f570 <Print2Hex>
				gnFrameLen = 0;
 8002f52:	4b58      	ldr	r3, [pc, #352]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
				return ERR_BCC;
 8002f58:	2305      	movs	r3, #5
 8002f5a:	e0a1      	b.n	80030a0 <CheckProtocol_UART3+0x1c4>
			}
		}
		else
		{
			switch (bRcvData)
 8002f5c:	4b53      	ldr	r3, [pc, #332]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d01d      	beq.n	8002fa0 <CheckProtocol_UART3+0xc4>
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	dc2b      	bgt.n	8002fc0 <CheckProtocol_UART3+0xe4>
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d002      	beq.n	8002f72 <CheckProtocol_UART3+0x96>
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d00b      	beq.n	8002f88 <CheckProtocol_UART3+0xac>
 8002f70:	e026      	b.n	8002fc0 <CheckProtocol_UART3+0xe4>
			{
			case STX:
				bRcvState = STATE_DATA_RCV;
 8002f72:	4b4c      	ldr	r3, [pc, #304]	; (80030a4 <CheckProtocol_UART3+0x1c8>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
				bBCC = bRcvData;
 8002f78:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	4b4a      	ldr	r3, [pc, #296]	; (80030a8 <CheckProtocol_UART3+0x1cc>)
 8002f7e:	701a      	strb	r2, [r3, #0]
				gnFrameLen = 0;
 8002f80:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
				break;
 8002f86:	e073      	b.n	8003070 <CheckProtocol_UART3+0x194>
			case ETX:
				bRcvState = STATE_DATA_BCC;
 8002f88:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <CheckProtocol_UART3+0x1c8>)
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	701a      	strb	r2, [r3, #0]
				bBCC ^= bRcvData;
 8002f8e:	4b46      	ldr	r3, [pc, #280]	; (80030a8 <CheckProtocol_UART3+0x1cc>)
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	4b46      	ldr	r3, [pc, #280]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	4053      	eors	r3, r2
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	4b43      	ldr	r3, [pc, #268]	; (80030a8 <CheckProtocol_UART3+0x1cc>)
 8002f9c:	701a      	strb	r2, [r3, #0]
				break;
 8002f9e:	e067      	b.n	8003070 <CheckProtocol_UART3+0x194>
			case DLE:
				if (bRcvState == STATE_DATA_RCV)
 8002fa0:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <CheckProtocol_UART3+0x1c8>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d160      	bne.n	800306a <CheckProtocol_UART3+0x18e>
				{
					bRcvState = STATE_DATA_DLE;
 8002fa8:	4b3e      	ldr	r3, [pc, #248]	; (80030a4 <CheckProtocol_UART3+0x1c8>)
 8002faa:	2203      	movs	r2, #3
 8002fac:	701a      	strb	r2, [r3, #0]
					bBCC ^= bRcvData;
 8002fae:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <CheckProtocol_UART3+0x1cc>)
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	4053      	eors	r3, r2
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <CheckProtocol_UART3+0x1cc>)
 8002fbc:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002fbe:	e054      	b.n	800306a <CheckProtocol_UART3+0x18e>
			default:
				if (bRcvState == STATE_DATA_RCV)
 8002fc0:	4b38      	ldr	r3, [pc, #224]	; (80030a4 <CheckProtocol_UART3+0x1c8>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d111      	bne.n	8002fec <CheckProtocol_UART3+0x110>
				{
					GCUCommand.Buff[gnFrameLen++] = bRcvData;
 8002fc8:	4b3a      	ldr	r3, [pc, #232]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	4939      	ldr	r1, [pc, #228]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8002fd0:	600a      	str	r2, [r1, #0]
 8002fd2:	4a36      	ldr	r2, [pc, #216]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8002fd4:	7811      	ldrb	r1, [r2, #0]
 8002fd6:	4a36      	ldr	r2, [pc, #216]	; (80030b0 <CheckProtocol_UART3+0x1d4>)
 8002fd8:	54d1      	strb	r1, [r2, r3]
					bBCC ^= bRcvData;
 8002fda:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <CheckProtocol_UART3+0x1cc>)
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	4b33      	ldr	r3, [pc, #204]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	4053      	eors	r3, r2
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4b30      	ldr	r3, [pc, #192]	; (80030a8 <CheckProtocol_UART3+0x1cc>)
 8002fe8:	701a      	strb	r2, [r3, #0]
					if (bRcvData == ACK)
						return ACK_RECEIVED;
					else if (bRcvData == NAK)
						return NAK_RECEIVED;
				}
				break;
 8002fea:	e040      	b.n	800306e <CheckProtocol_UART3+0x192>
				else if (bRcvState == STATE_DATA_DLE)
 8002fec:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <CheckProtocol_UART3+0x1c8>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d12e      	bne.n	8003052 <CheckProtocol_UART3+0x176>
					if ((bRcvData == DLE_STX) || (bRcvData == DLE_ETX) || (bRcvData == DLE_DLE))
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b42      	cmp	r3, #66	; 0x42
 8002ffa:	d007      	beq.n	800300c <CheckProtocol_UART3+0x130>
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b43      	cmp	r3, #67	; 0x43
 8003002:	d003      	beq.n	800300c <CheckProtocol_UART3+0x130>
 8003004:	4b29      	ldr	r3, [pc, #164]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b50      	cmp	r3, #80	; 0x50
 800300a:	d117      	bne.n	800303c <CheckProtocol_UART3+0x160>
						bRcvState = STATE_DATA_RCV;
 800300c:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <CheckProtocol_UART3+0x1c8>)
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
						GCUCommand.Buff[gnFrameLen++] = (bRcvData ^ DLE_OP);
 8003012:	4b26      	ldr	r3, [pc, #152]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1c59      	adds	r1, r3, #1
 800301c:	4825      	ldr	r0, [pc, #148]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 800301e:	6001      	str	r1, [r0, #0]
 8003020:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8003024:	b2d1      	uxtb	r1, r2
 8003026:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <CheckProtocol_UART3+0x1d4>)
 8003028:	54d1      	strb	r1, [r2, r3]
						bBCC ^= bRcvData;
 800302a:	4b1f      	ldr	r3, [pc, #124]	; (80030a8 <CheckProtocol_UART3+0x1cc>)
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	4b1f      	ldr	r3, [pc, #124]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	4053      	eors	r3, r2
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <CheckProtocol_UART3+0x1cc>)
 8003038:	701a      	strb	r2, [r3, #0]
				break;
 800303a:	e018      	b.n	800306e <CheckProtocol_UART3+0x192>
						bRcvState = STATE_STX_WAIT;
 800303c:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <CheckProtocol_UART3+0x1c8>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
						gnFrameLen = 0;
 8003042:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
						printf("ERR_DLE_PROCESS \n");
 8003048:	481e      	ldr	r0, [pc, #120]	; (80030c4 <CheckProtocol_UART3+0x1e8>)
 800304a:	f006 f9ff 	bl	800944c <printf_>
						return ERR_DLE_PROCESS;
 800304e:	230d      	movs	r3, #13
 8003050:	e026      	b.n	80030a0 <CheckProtocol_UART3+0x1c4>
					if (bRcvData == ACK)
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b06      	cmp	r3, #6
 8003058:	d101      	bne.n	800305e <CheckProtocol_UART3+0x182>
						return ACK_RECEIVED;
 800305a:	2306      	movs	r3, #6
 800305c:	e020      	b.n	80030a0 <CheckProtocol_UART3+0x1c4>
					else if (bRcvData == NAK)
 800305e:	4b13      	ldr	r3, [pc, #76]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b15      	cmp	r3, #21
 8003064:	d103      	bne.n	800306e <CheckProtocol_UART3+0x192>
						return NAK_RECEIVED;
 8003066:	2307      	movs	r3, #7
 8003068:	e01a      	b.n	80030a0 <CheckProtocol_UART3+0x1c4>
				break;
 800306a:	bf00      	nop
 800306c:	e000      	b.n	8003070 <CheckProtocol_UART3+0x194>
				break;
 800306e:	bf00      	nop
			}
		}

		if (gnFrameLen >= FRAME_LEN_RET)
 8003070:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b7f      	cmp	r3, #127	; 0x7f
 8003076:	dd0a      	ble.n	800308e <CheckProtocol_UART3+0x1b2>
		{
			bRcvState = STATE_STX_WAIT;
 8003078:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <CheckProtocol_UART3+0x1c8>)
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
			gnFrameLen = 0;
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <CheckProtocol_UART3+0x1d8>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
			//PRINTL("ERR_FRAME_LENGTH");
			printf("ERR_FRAME_LENGTH \n");
 8003084:	4810      	ldr	r0, [pc, #64]	; (80030c8 <CheckProtocol_UART3+0x1ec>)
 8003086:	f006 f9e1 	bl	800944c <printf_>
			return ERR_FRAME_LENGTH;
 800308a:	230c      	movs	r3, #12
 800308c:	e008      	b.n	80030a0 <CheckProtocol_UART3+0x1c4>
	while (IUart_RecvByte_check(COM3, &bRcvData))
 800308e:	4907      	ldr	r1, [pc, #28]	; (80030ac <CheckProtocol_UART3+0x1d0>)
 8003090:	2002      	movs	r0, #2
 8003092:	f003 fbfd 	bl	8006890 <IUart_RecvByte_check>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	f47f af22 	bne.w	8002ee2 <CheckProtocol_UART3+0x6>
		}
	}

	return ERR_NO_DATA;
 800309e:	23ff      	movs	r3, #255	; 0xff
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	24000407 	.word	0x24000407
 80030a8:	24000408 	.word	0x24000408
 80030ac:	24000409 	.word	0x24000409
 80030b0:	24000280 	.word	0x24000280
 80030b4:	24000300 	.word	0x24000300
 80030b8:	08010ed4 	.word	0x08010ed4
 80030bc:	08010eec 	.word	0x08010eec
 80030c0:	08010f08 	.word	0x08010f08
 80030c4:	08010f0c 	.word	0x08010f0c
 80030c8:	08010f20 	.word	0x08010f20

080030cc <ProcessCommand>:
*			- ERR_ILLEGAL_CMD  : command code is not defined
* comments: It checks serial data from Host and protocol format of data received.
*           If the protocol format is correct, it returns SUCCESS result.
*******************************************************************************/
int ProcessCommand(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
#if _CMD_DUMP_
	PRINT("\nCMD %02X PROC", GCUCommand.d.bCmdCode);
	Print2Hex("", GCUCommand.Buff, GCUCommand.d.bDataLen+FRAME_HEADER_LEN);
#endif	//DBG_PRINT

	if (GCUCommand.d.bMainSeq == gbLastMainSeq)	// Same main sequence
 80030d0:	4baa      	ldr	r3, [pc, #680]	; (800337c <ProcessCommand+0x2b0>)
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	4baa      	ldr	r3, [pc, #680]	; (8003380 <ProcessCommand+0x2b4>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d12a      	bne.n	8003132 <ProcessCommand+0x66>
	{
		if (GCUCommand.d.bCmdCode == GCUResponse.d.bCmdCode)	// command code is same with that of the last response
 80030dc:	4ba7      	ldr	r3, [pc, #668]	; (800337c <ProcessCommand+0x2b0>)
 80030de:	78da      	ldrb	r2, [r3, #3]
 80030e0:	4ba8      	ldr	r3, [pc, #672]	; (8003384 <ProcessCommand+0x2b8>)
 80030e2:	78db      	ldrb	r3, [r3, #3]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d101      	bne.n	80030ec <ProcessCommand+0x20>
			return ERR_OLD_SEQUENCE;
 80030e8:	2308      	movs	r3, #8
 80030ea:	e145      	b.n	8003378 <ProcessCommand+0x2ac>
		else if (GCUCommand.d.bCmdCode == gbLastHostCMD)		// command code is same with last host command code
 80030ec:	4ba3      	ldr	r3, [pc, #652]	; (800337c <ProcessCommand+0x2b0>)
 80030ee:	78da      	ldrb	r2, [r3, #3]
 80030f0:	4ba5      	ldr	r3, [pc, #660]	; (8003388 <ProcessCommand+0x2bc>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d11c      	bne.n	8003132 <ProcessCommand+0x66>
		{
			if (!IsCommandNeedResponse(GCUCommand.d.bCmdCode))
 80030f8:	4ba0      	ldr	r3, [pc, #640]	; (800337c <ProcessCommand+0x2b0>)
 80030fa:	78db      	ldrb	r3, [r3, #3]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff f96d 	bl	80023dc <IsCommandNeedResponse>
 8003102:	4603      	mov	r3, r0
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <ProcessCommand+0x46>
			{
				return ERR_OLD_SEQ_NO_RESPONSE;
 800310e:	2309      	movs	r3, #9
 8003110:	e132      	b.n	8003378 <ProcessCommand+0x2ac>
			}
			else if (GCUCommand.d.bCmdCode == LastHostCMDResponse.d.bCmdCode)
 8003112:	4b9a      	ldr	r3, [pc, #616]	; (800337c <ProcessCommand+0x2b0>)
 8003114:	78da      	ldrb	r2, [r3, #3]
 8003116:	4b9d      	ldr	r3, [pc, #628]	; (800338c <ProcessCommand+0x2c0>)
 8003118:	78db      	ldrb	r3, [r3, #3]
 800311a:	429a      	cmp	r2, r3
 800311c:	d109      	bne.n	8003132 <ProcessCommand+0x66>
			{// command code is same with that of the stored response for the last host command.
				memcpy(&GCUResponse, &LastHostCMDResponse, (LastHostCMDResponse.d.bDataLen+FRAME_HEADER_LEN));
 800311e:	4b9b      	ldr	r3, [pc, #620]	; (800338c <ProcessCommand+0x2c0>)
 8003120:	789b      	ldrb	r3, [r3, #2]
 8003122:	3303      	adds	r3, #3
 8003124:	461a      	mov	r2, r3
 8003126:	4999      	ldr	r1, [pc, #612]	; (800338c <ProcessCommand+0x2c0>)
 8003128:	4896      	ldr	r0, [pc, #600]	; (8003384 <ProcessCommand+0x2b8>)
 800312a:	f00c fae1 	bl	800f6f0 <memcpy>
				return ERR_OLD_SEQUENCE;
 800312e:	2308      	movs	r3, #8
 8003130:	e122      	b.n	8003378 <ProcessCommand+0x2ac>
			}
		}
		// except above case, process the command from Host 
	}
	
	SendACK();
 8003132:	f7ff f945 	bl	80023c0 <SendACK>

	gbLastHostCMD = GCUCommand.d.bCmdCode;
 8003136:	4b91      	ldr	r3, [pc, #580]	; (800337c <ProcessCommand+0x2b0>)
 8003138:	78da      	ldrb	r2, [r3, #3]
 800313a:	4b93      	ldr	r3, [pc, #588]	; (8003388 <ProcessCommand+0x2bc>)
 800313c:	701a      	strb	r2, [r3, #0]

	switch (GCUCommand.d.bCmdCode)	// command
 800313e:	4b8f      	ldr	r3, [pc, #572]	; (800337c <ProcessCommand+0x2b0>)
 8003140:	78db      	ldrb	r3, [r3, #3]
 8003142:	3b30      	subs	r3, #48	; 0x30
 8003144:	2b65      	cmp	r3, #101	; 0x65
 8003146:	f200 8114 	bhi.w	8003372 <ProcessCommand+0x2a6>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <ProcessCommand+0x84>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	080032e9 	.word	0x080032e9
 8003154:	080032ef 	.word	0x080032ef
 8003158:	080032f5 	.word	0x080032f5
 800315c:	080032fb 	.word	0x080032fb
 8003160:	08003301 	.word	0x08003301
 8003164:	08003307 	.word	0x08003307
 8003168:	08003373 	.word	0x08003373
 800316c:	08003373 	.word	0x08003373
 8003170:	0800330d 	.word	0x0800330d
 8003174:	08003373 	.word	0x08003373
 8003178:	08003373 	.word	0x08003373
 800317c:	08003373 	.word	0x08003373
 8003180:	08003373 	.word	0x08003373
 8003184:	08003373 	.word	0x08003373
 8003188:	08003373 	.word	0x08003373
 800318c:	08003373 	.word	0x08003373
 8003190:	08003313 	.word	0x08003313
 8003194:	08003319 	.word	0x08003319
 8003198:	0800331f 	.word	0x0800331f
 800319c:	08003373 	.word	0x08003373
 80031a0:	08003373 	.word	0x08003373
 80031a4:	08003373 	.word	0x08003373
 80031a8:	08003373 	.word	0x08003373
 80031ac:	08003373 	.word	0x08003373
 80031b0:	08003325 	.word	0x08003325
 80031b4:	08003373 	.word	0x08003373
 80031b8:	08003373 	.word	0x08003373
 80031bc:	08003373 	.word	0x08003373
 80031c0:	08003373 	.word	0x08003373
 80031c4:	08003373 	.word	0x08003373
 80031c8:	08003373 	.word	0x08003373
 80031cc:	08003373 	.word	0x08003373
 80031d0:	08003373 	.word	0x08003373
 80031d4:	08003373 	.word	0x08003373
 80031d8:	08003373 	.word	0x08003373
 80031dc:	08003373 	.word	0x08003373
 80031e0:	08003373 	.word	0x08003373
 80031e4:	08003373 	.word	0x08003373
 80031e8:	08003373 	.word	0x08003373
 80031ec:	08003373 	.word	0x08003373
 80031f0:	08003373 	.word	0x08003373
 80031f4:	08003373 	.word	0x08003373
 80031f8:	08003373 	.word	0x08003373
 80031fc:	08003373 	.word	0x08003373
 8003200:	08003373 	.word	0x08003373
 8003204:	08003373 	.word	0x08003373
 8003208:	08003373 	.word	0x08003373
 800320c:	08003373 	.word	0x08003373
 8003210:	0800332b 	.word	0x0800332b
 8003214:	08003331 	.word	0x08003331
 8003218:	08003337 	.word	0x08003337
 800321c:	0800333d 	.word	0x0800333d
 8003220:	08003343 	.word	0x08003343
 8003224:	08003349 	.word	0x08003349
 8003228:	08003373 	.word	0x08003373
 800322c:	08003373 	.word	0x08003373
 8003230:	08003373 	.word	0x08003373
 8003234:	08003373 	.word	0x08003373
 8003238:	08003373 	.word	0x08003373
 800323c:	08003373 	.word	0x08003373
 8003240:	08003373 	.word	0x08003373
 8003244:	08003373 	.word	0x08003373
 8003248:	08003373 	.word	0x08003373
 800324c:	08003373 	.word	0x08003373
 8003250:	08003373 	.word	0x08003373
 8003254:	08003373 	.word	0x08003373
 8003258:	08003373 	.word	0x08003373
 800325c:	08003373 	.word	0x08003373
 8003260:	08003373 	.word	0x08003373
 8003264:	08003373 	.word	0x08003373
 8003268:	08003373 	.word	0x08003373
 800326c:	08003373 	.word	0x08003373
 8003270:	08003373 	.word	0x08003373
 8003274:	08003373 	.word	0x08003373
 8003278:	08003373 	.word	0x08003373
 800327c:	08003373 	.word	0x08003373
 8003280:	08003373 	.word	0x08003373
 8003284:	08003373 	.word	0x08003373
 8003288:	08003373 	.word	0x08003373
 800328c:	08003373 	.word	0x08003373
 8003290:	08003373 	.word	0x08003373
 8003294:	08003373 	.word	0x08003373
 8003298:	08003373 	.word	0x08003373
 800329c:	08003373 	.word	0x08003373
 80032a0:	08003373 	.word	0x08003373
 80032a4:	08003373 	.word	0x08003373
 80032a8:	08003373 	.word	0x08003373
 80032ac:	08003373 	.word	0x08003373
 80032b0:	08003373 	.word	0x08003373
 80032b4:	08003373 	.word	0x08003373
 80032b8:	08003373 	.word	0x08003373
 80032bc:	08003373 	.word	0x08003373
 80032c0:	08003373 	.word	0x08003373
 80032c4:	08003373 	.word	0x08003373
 80032c8:	08003373 	.word	0x08003373
 80032cc:	08003373 	.word	0x08003373
 80032d0:	0800334f 	.word	0x0800334f
 80032d4:	08003355 	.word	0x08003355
 80032d8:	0800335b 	.word	0x0800335b
 80032dc:	08003361 	.word	0x08003361
 80032e0:	08003367 	.word	0x08003367
 80032e4:	0800336d 	.word	0x0800336d
	{
	case CMD_SET_MODE:			CMDSetGCUOpMode();		break;
 80032e8:	f7ff f92e 	bl	8002548 <CMDSetGCUOpMode>
 80032ec:	e043      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_GET_MODE:			CMDGetGCUOpMode();		break;
 80032ee:	f7ff f939 	bl	8002564 <CMDGetGCUOpMode>
 80032f2:	e040      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_SET_PARAMETER:		CMDSetGCUParameter();	break;
 80032f4:	f7ff f946 	bl	8002584 <CMDSetGCUParameter>
 80032f8:	e03d      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_GET_PARAMETER:		CMDGetGCUParameter();	break;
 80032fa:	f7ff f95f 	bl	80025bc <CMDGetGCUParameter>
 80032fe:	e03a      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_GET_VERSION:		CMDGetVersion();		break;
 8003300:	f7ff f970 	bl	80025e4 <CMDGetVersion>
 8003304:	e037      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_SET_BAUD:			CMDSetBaudRate();		break;
 8003306:	f7ff f97b 	bl	8002600 <CMDSetBaudRate>
 800330a:	e034      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_SW_RESET:			CMDResetGCU();			break;
 800330c:	f7ff f9d0 	bl	80026b0 <CMDResetGCU>
 8003310:	e031      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_AUTHORIZE:			CMDAuthorizePass();		break;
 8003312:	f7ff f9db 	bl	80026cc <CMDAuthorizePass>
 8003316:	e02e      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_CLEAR_AUTH:		CMDClearAuthorization();break;
 8003318:	f7ff fa32 	bl	8002780 <CMDClearAuthorization>
 800331c:	e02b      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_GET_STATUS:		CMDGetStatus();			break;
 800331e:	f7ff fa41 	bl	80027a4 <CMDGetStatus>
 8003322:	e028      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_GET_SENSOR_SWITCH:	CMDGetSensorSwitch();	break;
 8003324:	f7ff fa4e 	bl	80027c4 <CMDGetSensorSwitch>
 8003328:	e025      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_CONTROL_ALL:		CMDControlAllLED();		break;
 800332a:	f7ff fa53 	bl	80027d4 <CMDControlAllLED>
 800332e:	e022      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_CONTROL_DOOR:		CMDControlFlapDoor();	break;
 8003330:	f7ff fa80 	bl	8002834 <CMDControlFlapDoor>
 8003334:	e01f      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_CONTROL_LAMP:		CMDControlLamp();		break;
 8003336:	f7ff fa9d 	bl	8002874 <CMDControlLamp>
 800333a:	e01c      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_CONTROL_INDICATOR:	CMDControlIndicator();	break;
 800333c:	f7ff fa86 	bl	800284c <CMDControlIndicator>
 8003340:	e019      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_CONTROL_BUZZER:	CMDControlBuzzer();		break;
 8003342:	f7ff faab 	bl	800289c <CMDControlBuzzer>
 8003346:	e016      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_SAFETY_STOP:		CMDSafetyStop();		break;
 8003348:	f7ff faec 	bl	8002924 <CMDSafetyStop>
 800334c:	e013      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_WRITE_REGISTER:	CMDWriteRegister();		break;
 800334e:	f7ff fb01 	bl	8002954 <CMDWriteRegister>
 8003352:	e010      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_READ_REGISTER:		CMDReadRegister();		break;
 8003354:	f7ff fcda 	bl	8002d0c <CMDReadRegister>
 8003358:	e00d      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_GET_CPLD_VERSION:	CMDGetCPLDVersion();	break;
 800335a:	f7ff fd69 	bl	8002e30 <CMDGetCPLDVersion>
 800335e:	e00a      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_GET_DIP_SWITCH:	CMDGetDipSwitch();		break;
 8003360:	f7ff fd74 	bl	8002e4c <CMDGetDipSwitch>
 8003364:	e007      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_SET_UPS_COMMAND:	CMDSetUPSCommand();		break;
 8003366:	f7ff fd85 	bl	8002e74 <CMDSetUPSCommand>
 800336a:	e004      	b.n	8003376 <ProcessCommand+0x2aa>
	case CMD_GET_UPS_STATUS:	CMDGetUPSStatus();		break;
 800336c:	f7ff fda6 	bl	8002ebc <CMDGetUPSStatus>
 8003370:	e001      	b.n	8003376 <ProcessCommand+0x2aa>
	default:
		return ERR_ILLEGAL_CMD;
 8003372:	230b      	movs	r3, #11
 8003374:	e000      	b.n	8003378 <ProcessCommand+0x2ac>
	}

	return SUCCESS;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	24000280 	.word	0x24000280
 8003380:	24000404 	.word	0x24000404
 8003384:	24000304 	.word	0x24000304
 8003388:	24000405 	.word	0x24000405
 800338c:	24000384 	.word	0x24000384

08003390 <ProcessComm_ECU>:
 * comments: it checks serial data from Host and protocol format of data received.
 *           If the protocol format is correct, it makes action refer to the command
 *           from Host.
 *******************************************************************************/
void ProcessComm_ECU(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
	int nError = CheckProtocol_UART3();
 8003396:	f7ff fda1 	bl	8002edc <CheckProtocol_UART3>
 800339a:	6078      	str	r0, [r7, #4]
	if (nError == SUCCESS)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d124      	bne.n	80033ec <ProcessComm_ECU+0x5c>
	{
		nError = ProcessCommand();
 80033a2:	f7ff fe93 	bl	80030cc <ProcessCommand>
 80033a6:	6078      	str	r0, [r7, #4]
		if (nError == SUCCESS)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d112      	bne.n	80033d4 <ProcessComm_ECU+0x44>
		{
			// if (GCUCommand.d.bCmdCode != CMD_SET_BAUD)
			if (IsCommandNeedResponse(GCUCommand.d.bCmdCode))
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <ProcessComm_ECU+0x88>)
 80033b0:	78db      	ldrb	r3, [r3, #3]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f812 	bl	80023dc <IsCommandNeedResponse>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d027      	beq.n	800340e <ProcessComm_ECU+0x7e>
			{
				SendResponse();
 80033be:	f7ff f869 	bl	8002494 <SendResponse>
				memcpy(&LastHostCMDResponse, &GCUResponse, (GCUResponse.d.bDataLen + FRAME_HEADER_LEN));
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <ProcessComm_ECU+0x8c>)
 80033c4:	789b      	ldrb	r3, [r3, #2]
 80033c6:	3303      	adds	r3, #3
 80033c8:	461a      	mov	r2, r3
 80033ca:	4914      	ldr	r1, [pc, #80]	; (800341c <ProcessComm_ECU+0x8c>)
 80033cc:	4814      	ldr	r0, [pc, #80]	; (8003420 <ProcessComm_ECU+0x90>)
 80033ce:	f00c f98f 	bl	800f6f0 <memcpy>
		if ((nError == ERR_BCC) || (nError == ERR_WRONG_CMD_LEN) || (nError == ERR_DLE_PROCESS))
			SendNAK();
		else if (nError == NAK_RECEIVED)
			SendResponse();
	}
}
 80033d2:	e01c      	b.n	800340e <ProcessComm_ECU+0x7e>
		else if (nError == ERR_OLD_SEQUENCE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d102      	bne.n	80033e0 <ProcessComm_ECU+0x50>
			SendResponse();
 80033da:	f7ff f85b 	bl	8002494 <SendResponse>
}
 80033de:	e016      	b.n	800340e <ProcessComm_ECU+0x7e>
		else if (nError == ERR_ILLEGAL_CMD)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b0b      	cmp	r3, #11
 80033e4:	d113      	bne.n	800340e <ProcessComm_ECU+0x7e>
			SendNAK();
 80033e6:	f7fe fff2 	bl	80023ce <SendNAK>
}
 80033ea:	e010      	b.n	800340e <ProcessComm_ECU+0x7e>
		if ((nError == ERR_BCC) || (nError == ERR_WRONG_CMD_LEN) || (nError == ERR_DLE_PROCESS))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	d005      	beq.n	80033fe <ProcessComm_ECU+0x6e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b0a      	cmp	r3, #10
 80033f6:	d002      	beq.n	80033fe <ProcessComm_ECU+0x6e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b0d      	cmp	r3, #13
 80033fc:	d102      	bne.n	8003404 <ProcessComm_ECU+0x74>
			SendNAK();
 80033fe:	f7fe ffe6 	bl	80023ce <SendNAK>
}
 8003402:	e004      	b.n	800340e <ProcessComm_ECU+0x7e>
		else if (nError == NAK_RECEIVED)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b07      	cmp	r3, #7
 8003408:	d101      	bne.n	800340e <ProcessComm_ECU+0x7e>
			SendResponse();
 800340a:	f7ff f843 	bl	8002494 <SendResponse>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	24000280 	.word	0x24000280
 800341c:	24000304 	.word	0x24000304
 8003420:	24000384 	.word	0x24000384

08003424 <CheckBarrierClosedStatus>:

/*******************************************************************************
 * Passenger Service Functions
 *******************************************************************************/
bool CheckBarrierClosedStatus()
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
	if (gbPowerFailFlag == FLG_OFF && gbEmergencyFlag == FLG_OFF && gfFreeMode == FALSE)
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <CheckBarrierClosedStatus+0x34>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10c      	bne.n	800344a <CheckBarrierClosedStatus+0x26>
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <CheckBarrierClosedStatus+0x38>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d108      	bne.n	800344a <CheckBarrierClosedStatus+0x26>
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <CheckBarrierClosedStatus+0x3c>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	f083 0301 	eor.w	r3, r3, #1
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <CheckBarrierClosedStatus+0x26>
	{
		return TRUE;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <CheckBarrierClosedStatus+0x28>
	}
	else
	{
		return FALSE;
 800344a:	2300      	movs	r3, #0
	}
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	2400012b 	.word	0x2400012b
 800345c:	2400012d 	.word	0x2400012d
 8003460:	2400043d 	.word	0x2400043d

08003464 <CheckZeroAuthCount>:

bool CheckZeroAuthCount()
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
	if (gGCUStatus.bAuthCount_EN == 0 && gGCUStatus.bAuthCount_EX == 0)
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <CheckZeroAuthCount+0x28>)
 800346a:	791b      	ldrb	r3, [r3, #4]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <CheckZeroAuthCount+0x1c>
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <CheckZeroAuthCount+0x28>)
 8003474:	795b      	ldrb	r3, [r3, #5]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <CheckZeroAuthCount+0x1c>
	{
		return TRUE;
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <CheckZeroAuthCount+0x1e>
	}
	else
	{
		return FALSE;
 8003480:	2300      	movs	r3, #0
	}
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	240004b0 	.word	0x240004b0

08003490 <CheckCritical>:

bool CheckCritical()
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
	if (gisEntryPassenger)
 8003494:	4b26      	ldr	r3, [pc, #152]	; (8003530 <CheckCritical+0xa0>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01f      	beq.n	80034dc <CheckCritical+0x4c>
	{
		if (gGCUParameter.bCriticalZone == ALARM_ZONE1)
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <CheckCritical+0xa4>)
 800349e:	795b      	ldrb	r3, [r3, #5]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <CheckCritical+0x18>
			return TRUE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e03e      	b.n	8003526 <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE2 && psenNewSwing.dirEntry.passage)
 80034a8:	4b22      	ldr	r3, [pc, #136]	; (8003534 <CheckCritical+0xa4>)
 80034aa:	795b      	ldrb	r3, [r3, #5]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d108      	bne.n	80034c2 <CheckCritical+0x32>
 80034b0:	4b21      	ldr	r3, [pc, #132]	; (8003538 <CheckCritical+0xa8>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	f023 0303 	bic.w	r3, r3, #3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <CheckCritical+0x32>
			return TRUE;
 80034be:	2301      	movs	r3, #1
 80034c0:	e031      	b.n	8003526 <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE3 && (psenNewSwing.b.s03))
 80034c2:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <CheckCritical+0xa4>)
 80034c4:	795b      	ldrb	r3, [r3, #5]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d12c      	bne.n	8003524 <CheckCritical+0x94>
 80034ca:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <CheckCritical+0xa8>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d025      	beq.n	8003524 <CheckCritical+0x94>
			return TRUE;
 80034d8:	2301      	movs	r3, #1
 80034da:	e024      	b.n	8003526 <CheckCritical+0x96>
	}
	else if (gisExitPassenger)
 80034dc:	4b17      	ldr	r3, [pc, #92]	; (800353c <CheckCritical+0xac>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01f      	beq.n	8003524 <CheckCritical+0x94>
	{
		if (gGCUParameter.bCriticalZone == ALARM_ZONE1)
 80034e4:	4b13      	ldr	r3, [pc, #76]	; (8003534 <CheckCritical+0xa4>)
 80034e6:	795b      	ldrb	r3, [r3, #5]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <CheckCritical+0x60>
			return TRUE;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e01a      	b.n	8003526 <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE2 && psenNewSwing.dirExit.passage)
 80034f0:	4b10      	ldr	r3, [pc, #64]	; (8003534 <CheckCritical+0xa4>)
 80034f2:	795b      	ldrb	r3, [r3, #5]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d108      	bne.n	800350a <CheckCritical+0x7a>
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <CheckCritical+0xa8>)
 80034fa:	785b      	ldrb	r3, [r3, #1]
 80034fc:	f023 0303 	bic.w	r3, r3, #3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <CheckCritical+0x7a>
			return TRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	e00d      	b.n	8003526 <CheckCritical+0x96>
		else if (gGCUParameter.bCriticalZone == ALARM_ZONE3 && (psenNewSwing.b.s11))
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <CheckCritical+0xa4>)
 800350c:	795b      	ldrb	r3, [r3, #5]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d108      	bne.n	8003524 <CheckCritical+0x94>
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <CheckCritical+0xa8>)
 8003514:	785b      	ldrb	r3, [r3, #1]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <CheckCritical+0x94>
			return TRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <CheckCritical+0x96>
	}

	return FALSE;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	2400043b 	.word	0x2400043b
 8003534:	240004a0 	.word	0x240004a0
 8003538:	2400040c 	.word	0x2400040c
 800353c:	2400043c 	.word	0x2400043c

08003540 <UpdateSensorData>:

void UpdateSensorData()
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
	psenNew.B.bSen1 = RD_PASSSEN1 & (~psenError.B.bSen1);
 8003544:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	b25a      	sxtb	r2, r3
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <UpdateSensorData+0x48>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b25b      	sxtb	r3, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	b25b      	sxtb	r3, r3
 8003558:	4013      	ands	r3, r2
 800355a:	b25b      	sxtb	r3, r3
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <UpdateSensorData+0x4c>)
 8003560:	701a      	strb	r2, [r3, #0]
	psenNew.B.bSen2 = RD_PASSSEN2 & (~psenError.B.bSen2);
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <UpdateSensorData+0x50>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	b25a      	sxtb	r2, r3
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <UpdateSensorData+0x48>)
 800356c:	785b      	ldrb	r3, [r3, #1]
 800356e:	b25b      	sxtb	r3, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	b25b      	sxtb	r3, r3
 8003574:	4013      	ands	r3, r2
 8003576:	b25b      	sxtb	r3, r3
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b04      	ldr	r3, [pc, #16]	; (800358c <UpdateSensorData+0x4c>)
 800357c:	705a      	strb	r2, [r3, #1]
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	2400049c 	.word	0x2400049c
 800358c:	24000414 	.word	0x24000414
 8003590:	60000100 	.word	0x60000100

08003594 <StopBarrierForSwing>:

void StopBarrierForSwing(bool isStop)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
	isBarrierStop = isStop;
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <StopBarrierForSwing+0x20>)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	7013      	strb	r3, [r2, #0]
	Brr_StopBarrier(isStop);
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd f8de 	bl	8000768 <Brr_StopBarrier>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	24000424 	.word	0x24000424

080035b8 <InitPassageModeForSwing>:

void InitPassageModeForSwing(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	if (isBarrierStop == TRUE)
 80035bc:	4b95      	ldr	r3, [pc, #596]	; (8003814 <InitPassageModeForSwing+0x25c>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <InitPassageModeForSwing+0x18>
	{
		//PRINTL(" [InitPassageMode] Release the barrier stop");
		printf(" [InitPassageMode] Release the barrier stop \n");
 80035c4:	4894      	ldr	r0, [pc, #592]	; (8003818 <InitPassageModeForSwing+0x260>)
 80035c6:	f005 ff41 	bl	800944c <printf_>
		StopBarrierForSwing(FALSE);
 80035ca:	2000      	movs	r0, #0
 80035cc:	f7ff ffe2 	bl	8003594 <StopBarrierForSwing>
	}

	if (gCurGCUOpMode.bEmergencyMaint && gfTestMode == FALSE)
 80035d0:	4b92      	ldr	r3, [pc, #584]	; (800381c <InitPassageModeForSwing+0x264>)
 80035d2:	789b      	ldrb	r3, [r3, #2]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d067      	beq.n	80036a8 <InitPassageModeForSwing+0xf0>
 80035d8:	4b91      	ldr	r3, [pc, #580]	; (8003820 <InitPassageModeForSwing+0x268>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	f083 0301 	eor.w	r3, r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d060      	beq.n	80036a8 <InitPassageModeForSwing+0xf0>
	{
		ResetTimer(&timerReset);
 80035e6:	488f      	ldr	r0, [pc, #572]	; (8003824 <InitPassageModeForSwing+0x26c>)
 80035e8:	f00c f80a 	bl	800f600 <ResetTimer>
		gbEmergencyFlag = FLG_SET;
 80035ec:	4b8e      	ldr	r3, [pc, #568]	; (8003828 <InitPassageModeForSwing+0x270>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
		gGCUStatus.bAuthCount_EN = 0;
 80035f2:	4b8e      	ldr	r3, [pc, #568]	; (800382c <InitPassageModeForSwing+0x274>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	711a      	strb	r2, [r3, #4]
		gGCUStatus.bAuthCount_EX = 0;
 80035f8:	4b8c      	ldr	r3, [pc, #560]	; (800382c <InitPassageModeForSwing+0x274>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	715a      	strb	r2, [r3, #5]
		gbAuthDirection = FROM_NONE;
 80035fe:	4b8c      	ldr	r3, [pc, #560]	; (8003830 <InitPassageModeForSwing+0x278>)
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
		gisEntryPassenger = FALSE;
 8003604:	4b8b      	ldr	r3, [pc, #556]	; (8003834 <InitPassageModeForSwing+0x27c>)
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
		gisExitPassenger = FALSE;
 800360a:	4b8b      	ldr	r3, [pc, #556]	; (8003838 <InitPassageModeForSwing+0x280>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
		gnPassPattern = PASS_PATN_NONE;
 8003610:	4b8a      	ldr	r3, [pc, #552]	; (800383c <InitPassageModeForSwing+0x284>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
		isPassOver_EN = FALSE;
 8003616:	4b8a      	ldr	r3, [pc, #552]	; (8003840 <InitPassageModeForSwing+0x288>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
		isPassOver_EX = FALSE;
 800361c:	4b89      	ldr	r3, [pc, #548]	; (8003844 <InitPassageModeForSwing+0x28c>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
		timerAuthorize.fStart = FALSE;
 8003622:	4b89      	ldr	r3, [pc, #548]	; (8003848 <InitPassageModeForSwing+0x290>)
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
		timerPassageClear.fStart = FALSE;
 8003628:	4b88      	ldr	r3, [pc, #544]	; (800384c <InitPassageModeForSwing+0x294>)
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]
		timerSafety.fStart = FALSE;
 800362e:	4b88      	ldr	r3, [pc, #544]	; (8003850 <InitPassageModeForSwing+0x298>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
		bPassPattern_EN = PASS_PATN_NONE;
 8003634:	4b87      	ldr	r3, [pc, #540]	; (8003854 <InitPassageModeForSwing+0x29c>)
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
		bPassPattern_EX = PASS_PATN_NONE;
 800363a:	4b87      	ldr	r3, [pc, #540]	; (8003858 <InitPassageModeForSwing+0x2a0>)
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]

		//PRINTL(" [InitPassageMode] bEmergencyMaint: %d", gCurGCUOpMode.bEmergencyMaint);.
		printf(" [InitPassageMode] bEmergencyMaint: %d \n", gCurGCUOpMode.bEmergencyMaint);
 8003640:	4b76      	ldr	r3, [pc, #472]	; (800381c <InitPassageModeForSwing+0x264>)
 8003642:	789b      	ldrb	r3, [r3, #2]
 8003644:	4619      	mov	r1, r3
 8003646:	4885      	ldr	r0, [pc, #532]	; (800385c <InitPassageModeForSwing+0x2a4>)
 8003648:	f005 ff00 	bl	800944c <printf_>

		Brr_SetEmergency(TRUE);
 800364c:	2001      	movs	r0, #1
 800364e:	f7fd f819 	bl	8000684 <Brr_SetEmergency>

		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 8003652:	4b72      	ldr	r3, [pc, #456]	; (800381c <InitPassageModeForSwing+0x264>)
 8003654:	789b      	ldrb	r3, [r3, #2]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <InitPassageModeForSwing+0xb6>
		{
			ControlDirectionLED(DIR_RED, DIR_GREEN);
 800365e:	2101      	movs	r1, #1
 8003660:	2002      	movs	r0, #2
 8003662:	f7fd ff8d 	bl	8001580 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_SET);
 8003666:	2001      	movs	r0, #1
 8003668:	f7fe f86e 	bl	8001748 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 800366c:	e0ce      	b.n	800380c <InitPassageModeForSwing+0x254>
		}
		else if (gCurGCUOpMode.bEmergencyMaint & MAINTENANCE_MODE)
 800366e:	4b6b      	ldr	r3, [pc, #428]	; (800381c <InitPassageModeForSwing+0x264>)
 8003670:	789b      	ldrb	r3, [r3, #2]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <InitPassageModeForSwing+0xd2>
		{
			ControlDirectionLED(DIR_RED, DIR_RED);
 800367a:	2102      	movs	r1, #2
 800367c:	2002      	movs	r0, #2
 800367e:	f7fd ff7f 	bl	8001580 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_OFF);
 8003682:	2000      	movs	r0, #0
 8003684:	f7fe f860 	bl	8001748 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 8003688:	e0c0      	b.n	800380c <InitPassageModeForSwing+0x254>
		}
		else if (gCurGCUOpMode.bEmergencyMaint & FREE_MODE)
 800368a:	4b64      	ldr	r3, [pc, #400]	; (800381c <InitPassageModeForSwing+0x264>)
 800368c:	789b      	ldrb	r3, [r3, #2]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80ba 	beq.w	800380c <InitPassageModeForSwing+0x254>
		{
			ControlDirectionLED(DIR_GREEN, DIR_GREEN);
 8003698:	2101      	movs	r1, #1
 800369a:	2001      	movs	r0, #1
 800369c:	f7fd ff70 	bl	8001580 <ControlDirectionLED>
			ControlIndicatorBlink(FLG_OFF);
 80036a0:	2000      	movs	r0, #0
 80036a2:	f7fe f851 	bl	8001748 <ControlIndicatorBlink>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 80036a6:	e0b1      	b.n	800380c <InitPassageModeForSwing+0x254>
		}
	}
	else
	{
		bPassPattern_EN = PASS_PATN_NONE;
 80036a8:	4b6a      	ldr	r3, [pc, #424]	; (8003854 <InitPassageModeForSwing+0x29c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
		bPassPattern_EX = PASS_PATN_NONE;
 80036ae:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <InitPassageModeForSwing+0x2a0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]

		if (FLG_SET == gbEmergencyFlag && gfTestMode == FALSE)
 80036b4:	4b5c      	ldr	r3, [pc, #368]	; (8003828 <InitPassageModeForSwing+0x270>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d115      	bne.n	80036e8 <InitPassageModeForSwing+0x130>
 80036bc:	4b58      	ldr	r3, [pc, #352]	; (8003820 <InitPassageModeForSwing+0x268>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	f083 0301 	eor.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00e      	beq.n	80036e8 <InitPassageModeForSwing+0x130>
		{
			//PRINTL(" [InitPassageMode] Safety Check for mode change!!");
			printf(" [InitPassageMode] Safety Check for mode change!! \n");
 80036ca:	4865      	ldr	r0, [pc, #404]	; (8003860 <InitPassageModeForSwing+0x2a8>)
 80036cc:	f005 febe 	bl	800944c <printf_>
			ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, 2);
 80036d0:	2202      	movs	r2, #2
 80036d2:	2101      	movs	r1, #1
 80036d4:	2000      	movs	r0, #0
 80036d6:	f7fd fef9 	bl	80014cc <ControlBuzzer>
			dwResetTime = 30;
 80036da:	4b62      	ldr	r3, [pc, #392]	; (8003864 <InitPassageModeForSwing+0x2ac>)
 80036dc:	221e      	movs	r2, #30
 80036de:	601a      	str	r2, [r3, #0]
			SetTimer(&timerReset);
 80036e0:	4850      	ldr	r0, [pc, #320]	; (8003824 <InitPassageModeForSwing+0x26c>)
 80036e2:	f00b ff79 	bl	800f5d8 <SetTimer>
 80036e6:	e092      	b.n	800380e <InitPassageModeForSwing+0x256>
		}
		else
		{
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 80036e8:	4b4c      	ldr	r3, [pc, #304]	; (800381c <InitPassageModeForSwing+0x264>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <InitPassageModeForSwing+0x14a>
				((gCurGCUOpMode.bServiceMode_EN == FREE_SERVICE) && !psenNewSwing.side.entry))
 80036f0:	4b4a      	ldr	r3, [pc, #296]	; (800381c <InitPassageModeForSwing+0x264>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d107      	bne.n	8003708 <InitPassageModeForSwing+0x150>
				((gCurGCUOpMode.bServiceMode_EN == FREE_SERVICE) && !psenNewSwing.side.entry))
 80036f8:	4b5b      	ldr	r3, [pc, #364]	; (8003868 <InitPassageModeForSwing+0x2b0>)
 80036fa:	f993 3000 	ldrsb.w	r3, [r3]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <InitPassageModeForSwing+0x150>
				gGCUStatus.bAuthCount_EN = 0;
 8003702:	4b4a      	ldr	r3, [pc, #296]	; (800382c <InitPassageModeForSwing+0x274>)
 8003704:	2200      	movs	r2, #0
 8003706:	711a      	strb	r2, [r3, #4]

			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 8003708:	4b44      	ldr	r3, [pc, #272]	; (800381c <InitPassageModeForSwing+0x264>)
 800370a:	785b      	ldrb	r3, [r3, #1]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <InitPassageModeForSwing+0x16a>
				((gCurGCUOpMode.bServiceMode_EX == FREE_SERVICE) && !psenNewSwing.side.exit))
 8003710:	4b42      	ldr	r3, [pc, #264]	; (800381c <InitPassageModeForSwing+0x264>)
 8003712:	785b      	ldrb	r3, [r3, #1]
			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 8003714:	2b02      	cmp	r3, #2
 8003716:	d107      	bne.n	8003728 <InitPassageModeForSwing+0x170>
				((gCurGCUOpMode.bServiceMode_EX == FREE_SERVICE) && !psenNewSwing.side.exit))
 8003718:	4b53      	ldr	r3, [pc, #332]	; (8003868 <InitPassageModeForSwing+0x2b0>)
 800371a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <InitPassageModeForSwing+0x170>
				gGCUStatus.bAuthCount_EX = 0;
 8003722:	4b42      	ldr	r3, [pc, #264]	; (800382c <InitPassageModeForSwing+0x274>)
 8003724:	2200      	movs	r2, #0
 8003726:	715a      	strb	r2, [r3, #5]

			if (gGCUStatus.bAuthCount_EN || gGCUStatus.bAuthCount_EX)
 8003728:	4b40      	ldr	r3, [pc, #256]	; (800382c <InitPassageModeForSwing+0x274>)
 800372a:	791b      	ldrb	r3, [r3, #4]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <InitPassageModeForSwing+0x184>
 8003732:	4b3e      	ldr	r3, [pc, #248]	; (800382c <InitPassageModeForSwing+0x274>)
 8003734:	795b      	ldrb	r3, [r3, #5]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d011      	beq.n	8003760 <InitPassageModeForSwing+0x1a8>
			{
				if (gGCUStatus.bAuthCount_EN)
 800373c:	4b3b      	ldr	r3, [pc, #236]	; (800382c <InitPassageModeForSwing+0x274>)
 800373e:	791b      	ldrb	r3, [r3, #4]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <InitPassageModeForSwing+0x196>
					ControlBarrier(BARRIER_OPEN_FOR_EN);
 8003746:	2001      	movs	r0, #1
 8003748:	f7fd fe88 	bl	800145c <ControlBarrier>
				if (gGCUStatus.bAuthCount_EN)
 800374c:	e014      	b.n	8003778 <InitPassageModeForSwing+0x1c0>
				else if (gGCUStatus.bAuthCount_EX)
 800374e:	4b37      	ldr	r3, [pc, #220]	; (800382c <InitPassageModeForSwing+0x274>)
 8003750:	795b      	ldrb	r3, [r3, #5]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00f      	beq.n	8003778 <InitPassageModeForSwing+0x1c0>
					ControlBarrier(BARRIER_OPEN_FOR_EX);
 8003758:	2002      	movs	r0, #2
 800375a:	f7fd fe7f 	bl	800145c <ControlBarrier>
				if (gGCUStatus.bAuthCount_EN)
 800375e:	e00b      	b.n	8003778 <InitPassageModeForSwing+0x1c0>
			}
			else
			{
				if (gbPowerFailFlag == FLG_SET)
 8003760:	4b42      	ldr	r3, [pc, #264]	; (800386c <InitPassageModeForSwing+0x2b4>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d103      	bne.n	8003770 <InitPassageModeForSwing+0x1b8>
					ControlBarrier(BARRIER_OPEN_FOR_EX);
 8003768:	2002      	movs	r0, #2
 800376a:	f7fd fe77 	bl	800145c <ControlBarrier>
 800376e:	e004      	b.n	800377a <InitPassageModeForSwing+0x1c2>
				else //  if (gCurGCUOpMode.bEmergencyMaint == MAINTENANCE_MODE)
					ControlBarrier(BARRIER_CLOSE_S);
 8003770:	2003      	movs	r0, #3
 8003772:	f7fd fe73 	bl	800145c <ControlBarrier>
 8003776:	e000      	b.n	800377a <InitPassageModeForSwing+0x1c2>
				if (gGCUStatus.bAuthCount_EN)
 8003778:	bf00      	nop
			}

			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 800377a:	4b28      	ldr	r3, [pc, #160]	; (800381c <InitPassageModeForSwing+0x264>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <InitPassageModeForSwing+0x1dc>
				(gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 8003782:	4b2a      	ldr	r3, [pc, #168]	; (800382c <InitPassageModeForSwing+0x274>)
 8003784:	795b      	ldrb	r3, [r3, #5]
 8003786:	b2db      	uxtb	r3, r3
			if ((gCurGCUOpMode.bServiceMode_EN == NO_SERVICE) ||
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <InitPassageModeForSwing+0x1e4>
				(gGCUStatus.bAuthCount_EX && (gCurGCUOpMode.bServiceMode_EN == IN_SERVICE)))
 800378c:	4b23      	ldr	r3, [pc, #140]	; (800381c <InitPassageModeForSwing+0x264>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d103      	bne.n	800379c <InitPassageModeForSwing+0x1e4>
				gbLampCMD_EN = DIR_RED;
 8003794:	4b36      	ldr	r3, [pc, #216]	; (8003870 <InitPassageModeForSwing+0x2b8>)
 8003796:	2202      	movs	r2, #2
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e002      	b.n	80037a2 <InitPassageModeForSwing+0x1ea>
			else
				gbLampCMD_EN = DIR_GREEN;
 800379c:	4b34      	ldr	r3, [pc, #208]	; (8003870 <InitPassageModeForSwing+0x2b8>)
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]

			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <InitPassageModeForSwing+0x264>)
 80037a4:	785b      	ldrb	r3, [r3, #1]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <InitPassageModeForSwing+0x204>
				(gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80037aa:	4b20      	ldr	r3, [pc, #128]	; (800382c <InitPassageModeForSwing+0x274>)
 80037ac:	791b      	ldrb	r3, [r3, #4]
 80037ae:	b2db      	uxtb	r3, r3
			if ((gCurGCUOpMode.bServiceMode_EX == NO_SERVICE) ||
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <InitPassageModeForSwing+0x20c>
				(gGCUStatus.bAuthCount_EN && (gCurGCUOpMode.bServiceMode_EX == IN_SERVICE)))
 80037b4:	4b19      	ldr	r3, [pc, #100]	; (800381c <InitPassageModeForSwing+0x264>)
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d103      	bne.n	80037c4 <InitPassageModeForSwing+0x20c>
				gbLampCMD_EX = DIR_RED;
 80037bc:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <InitPassageModeForSwing+0x2bc>)
 80037be:	2202      	movs	r2, #2
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e002      	b.n	80037ca <InitPassageModeForSwing+0x212>
			else
				gbLampCMD_EX = DIR_GREEN;
 80037c4:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <InitPassageModeForSwing+0x2bc>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]

			ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2100      	movs	r1, #0
 80037ce:	2000      	movs	r0, #0
 80037d0:	f7fd fe7c 	bl	80014cc <ControlBuzzer>
			ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 80037d4:	4b26      	ldr	r3, [pc, #152]	; (8003870 <InitPassageModeForSwing+0x2b8>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	4a26      	ldr	r2, [pc, #152]	; (8003874 <InitPassageModeForSwing+0x2bc>)
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fece 	bl	8001580 <ControlDirectionLED>
			ControlIndicator(gbIndicatorCMD_EN, gbIndicatorCMD_EX, 0, FALSE);
 80037e4:	4b24      	ldr	r3, [pc, #144]	; (8003878 <InitPassageModeForSwing+0x2c0>)
 80037e6:	7818      	ldrb	r0, [r3, #0]
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <InitPassageModeForSwing+0x2c4>)
 80037ea:	7819      	ldrb	r1, [r3, #0]
 80037ec:	2300      	movs	r3, #0
 80037ee:	2200      	movs	r2, #0
 80037f0:	f7fd ff22 	bl	8001638 <ControlIndicator>

			if (CheckZeroAuthCount())
 80037f4:	f7ff fe36 	bl	8003464 <CheckZeroAuthCount>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <InitPassageModeForSwing+0x256>
			{
				//PRINTL(" [InitPassageMode] ResetAuthTimer!!");
				printf(" [InitPassageMode] ResetAuthTimer!! \n");
 80037fe:	4820      	ldr	r0, [pc, #128]	; (8003880 <InitPassageModeForSwing+0x2c8>)
 8003800:	f005 fe24 	bl	800944c <printf_>
				ResetTimer(&timerAuthorize);
 8003804:	4810      	ldr	r0, [pc, #64]	; (8003848 <InitPassageModeForSwing+0x290>)
 8003806:	f00b fefb 	bl	800f600 <ResetTimer>
			}
		}
	}
}
 800380a:	e000      	b.n	800380e <InitPassageModeForSwing+0x256>
		if (gCurGCUOpMode.bEmergencyMaint & MASK_MODE_EMERGENCY)
 800380c:	bf00      	nop
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	24000424 	.word	0x24000424
 8003818:	08010f34 	.word	0x08010f34
 800381c:	240004d4 	.word	0x240004d4
 8003820:	2400043e 	.word	0x2400043e
 8003824:	2400022c 	.word	0x2400022c
 8003828:	2400012d 	.word	0x2400012d
 800382c:	240004b0 	.word	0x240004b0
 8003830:	2400012e 	.word	0x2400012e
 8003834:	2400043b 	.word	0x2400043b
 8003838:	2400043c 	.word	0x2400043c
 800383c:	24000440 	.word	0x24000440
 8003840:	2400041e 	.word	0x2400041e
 8003844:	2400041f 	.word	0x2400041f
 8003848:	24000160 	.word	0x24000160
 800384c:	2400016c 	.word	0x2400016c
 8003850:	240001e4 	.word	0x240001e4
 8003854:	2400041a 	.word	0x2400041a
 8003858:	2400041b 	.word	0x2400041b
 800385c:	08010f64 	.word	0x08010f64
 8003860:	08010f90 	.word	0x08010f90
 8003864:	2400000c 	.word	0x2400000c
 8003868:	2400040c 	.word	0x2400040c
 800386c:	2400012b 	.word	0x2400012b
 8003870:	24000129 	.word	0x24000129
 8003874:	2400012a 	.word	0x2400012a
 8003878:	24000127 	.word	0x24000127
 800387c:	24000128 	.word	0x24000128
 8003880:	08010fc4 	.word	0x08010fc4

08003884 <CloseBarrierForSwing>:

void CloseBarrierForSwing(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
	if (gfTestMode == TRUE || CheckBarrierClosedStatus())
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <CloseBarrierForSwing+0x34>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <CloseBarrierForSwing+0x16>
 8003890:	f7ff fdc8 	bl	8003424 <CheckBarrierClosedStatus>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <CloseBarrierForSwing+0x2e>
	{
		if (isBarrierStop == TRUE)
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <CloseBarrierForSwing+0x38>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <CloseBarrierForSwing+0x24>
		{
			StopBarrierForSwing(FALSE);
 80038a2:	2000      	movs	r0, #0
 80038a4:	f7ff fe76 	bl	8003594 <StopBarrierForSwing>
		}

		isForceOpen = FALSE;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <CloseBarrierForSwing+0x3c>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
		Brr_CloseBarrier();
 80038ae:	f7fc ff4b 	bl	8000748 <Brr_CloseBarrier>
	}
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	2400043e 	.word	0x2400043e
 80038bc:	24000424 	.word	0x24000424
 80038c0:	24000425 	.word	0x24000425

080038c4 <CheckBarrierOperation>:

void CheckBarrierOperation(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	if (gfTestMode == FALSE && timerBarrierCheck.fStart)
 80038c8:	4b9a      	ldr	r3, [pc, #616]	; (8003b34 <CheckBarrierOperation+0x270>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	f083 0301 	eor.w	r3, r3, #1
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 81d0 	beq.w	8003c78 <CheckBarrierOperation+0x3b4>
 80038d8:	4b97      	ldr	r3, [pc, #604]	; (8003b38 <CheckBarrierOperation+0x274>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 81cb 	beq.w	8003c78 <CheckBarrierOperation+0x3b4>
	{
		if (IsTimeout(&timerBarrierCheck, dwBarrierCheckTime * TICK_COUNT_100MS))
 80038e2:	4b96      	ldr	r3, [pc, #600]	; (8003b3c <CheckBarrierOperation+0x278>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4619      	mov	r1, r3
 80038f0:	4891      	ldr	r0, [pc, #580]	; (8003b38 <CheckBarrierOperation+0x274>)
 80038f2:	f00b fe93 	bl	800f61c <IsTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 81c1 	beq.w	8003c80 <CheckBarrierOperation+0x3bc>
		{
			ResetTimer(&timerBarrierCheck);
 80038fe:	488e      	ldr	r0, [pc, #568]	; (8003b38 <CheckBarrierOperation+0x274>)
 8003900:	f00b fe7e 	bl	800f600 <ResetTimer>

			// PRINTL(" =[%d]= ", gbBarrierCmd);
			if (gGCUStatus.ModuleAlarm.b.nFDoor1 != FDOOR_ALARM_NONE || gGCUStatus.ModuleAlarm.b.nFDoor2 != FDOOR_ALARM_NONE)
 8003904:	4b8e      	ldr	r3, [pc, #568]	; (8003b40 <CheckBarrierOperation+0x27c>)
 8003906:	7b1b      	ldrb	r3, [r3, #12]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <CheckBarrierOperation+0x5c>
 8003912:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <CheckBarrierOperation+0x27c>)
 8003914:	7b1b      	ldrb	r3, [r3, #12]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <CheckBarrierOperation+0x7a>
			{
				//PRINTL(" [BarrierStatus] BNC:%d/%d", gGCUStatus.ModuleAlarm.b.nFDoor1, gGCUStatus.ModuleAlarm.b.nFDoor2);
				printf(" [BarrierStatus] BNC:%d/%d \n", gGCUStatus.ModuleAlarm.b.nFDoor1, gGCUStatus.ModuleAlarm.b.nFDoor2);
 8003920:	4b87      	ldr	r3, [pc, #540]	; (8003b40 <CheckBarrierOperation+0x27c>)
 8003922:	7b1b      	ldrb	r3, [r3, #12]
 8003924:	f343 0301 	sbfx	r3, r3, #0, #2
 8003928:	b25b      	sxtb	r3, r3
 800392a:	4619      	mov	r1, r3
 800392c:	4b84      	ldr	r3, [pc, #528]	; (8003b40 <CheckBarrierOperation+0x27c>)
 800392e:	7b1b      	ldrb	r3, [r3, #12]
 8003930:	f343 0381 	sbfx	r3, r3, #2, #2
 8003934:	b25b      	sxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	4882      	ldr	r0, [pc, #520]	; (8003b44 <CheckBarrierOperation+0x280>)
 800393a:	f005 fd87 	bl	800944c <printf_>
			}

			// PRINTL(" [BarrierStatus] act:%d/%d", gMainBarrierStatus.param.actStatus, gSubBarrierStatus.param.actStatus);
			// PRINTL(" [BarrierStatus] Running:%d/%d", gfMainBarrierRunning, gfSubBarrierRunning);

			if ((gfMainBarrierRunning == FALSE || gMainBarrierStatus.param.actStatus == 0) &&
 800393e:	4b82      	ldr	r3, [pc, #520]	; (8003b48 <CheckBarrierOperation+0x284>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	f083 0301 	eor.w	r3, r3, #1
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <CheckBarrierOperation+0x98>
 800394c:	4b7f      	ldr	r3, [pc, #508]	; (8003b4c <CheckBarrierOperation+0x288>)
 800394e:	791b      	ldrb	r3, [r3, #4]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 814f 	bne.w	8003bfa <CheckBarrierOperation+0x336>
				(gfSubBarrierRunning == FALSE || gSubBarrierStatus.param.actStatus == 0))
 800395c:	4b7c      	ldr	r3, [pc, #496]	; (8003b50 <CheckBarrierOperation+0x28c>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	f083 0301 	eor.w	r3, r3, #1
 8003964:	b2db      	uxtb	r3, r3
			if ((gfMainBarrierRunning == FALSE || gMainBarrierStatus.param.actStatus == 0) &&
 8003966:	2b00      	cmp	r3, #0
 8003968:	d107      	bne.n	800397a <CheckBarrierOperation+0xb6>
				(gfSubBarrierRunning == FALSE || gSubBarrierStatus.param.actStatus == 0))
 800396a:	4b7a      	ldr	r3, [pc, #488]	; (8003b54 <CheckBarrierOperation+0x290>)
 800396c:	791b      	ldrb	r3, [r3, #4]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	f040 8140 	bne.w	8003bfa <CheckBarrierOperation+0x336>
			{
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 800397a:	4b77      	ldr	r3, [pc, #476]	; (8003b58 <CheckBarrierOperation+0x294>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d007      	beq.n	8003992 <CheckBarrierOperation+0xce>
 8003982:	4b75      	ldr	r3, [pc, #468]	; (8003b58 <CheckBarrierOperation+0x294>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d003      	beq.n	8003992 <CheckBarrierOperation+0xce>
 800398a:	4b74      	ldr	r3, [pc, #464]	; (8003b5c <CheckBarrierOperation+0x298>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d140      	bne.n	8003a14 <CheckBarrierOperation+0x150>
				{
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 8003992:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <CheckBarrierOperation+0x284>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <CheckBarrierOperation+0xde>
						(gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_OPEN))
 800399a:	4b6d      	ldr	r3, [pc, #436]	; (8003b50 <CheckBarrierOperation+0x28c>)
 800399c:	781b      	ldrb	r3, [r3, #0]
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <CheckBarrierOperation+0xf8>
					{
						if (isCounterEnter == FALSE)
 80039a2:	4b6f      	ldr	r3, [pc, #444]	; (8003b60 <CheckBarrierOperation+0x29c>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	f083 0301 	eor.w	r3, r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d030      	beq.n	8003a12 <CheckBarrierOperation+0x14e>
						{
							ControlBarrier(gbBarrierCmd);
 80039b0:	4b69      	ldr	r3, [pc, #420]	; (8003b58 <CheckBarrierOperation+0x294>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fd51 	bl	800145c <ControlBarrier>
						if (isCounterEnter == FALSE)
 80039ba:	e02a      	b.n	8003a12 <CheckBarrierOperation+0x14e>
						}
					}
					else if (isSafetyOn4Init == FALSE)
 80039bc:	4b69      	ldr	r3, [pc, #420]	; (8003b64 <CheckBarrierOperation+0x2a0>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	f083 0301 	eor.w	r3, r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 8113 	beq.w	8003bf2 <CheckBarrierOperation+0x32e>
					{
						nBarrierErrorCnt = 0;
 80039cc:	4b66      	ldr	r3, [pc, #408]	; (8003b68 <CheckBarrierOperation+0x2a4>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
						gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_NONE;
 80039d2:	4a5b      	ldr	r2, [pc, #364]	; (8003b40 <CheckBarrierOperation+0x27c>)
 80039d4:	7b13      	ldrb	r3, [r2, #12]
 80039d6:	f36f 0301 	bfc	r3, #0, #2
 80039da:	7313      	strb	r3, [r2, #12]
						gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_NONE;
 80039dc:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <CheckBarrierOperation+0x27c>)
 80039de:	7b13      	ldrb	r3, [r2, #12]
 80039e0:	f36f 0383 	bfc	r3, #2, #2
 80039e4:	7313      	strb	r3, [r2, #12]
						gGCUStatus.bBarrierSw = 0x11;
 80039e6:	4b56      	ldr	r3, [pc, #344]	; (8003b40 <CheckBarrierOperation+0x27c>)
 80039e8:	2211      	movs	r2, #17
 80039ea:	741a      	strb	r2, [r3, #16]

						if (CheckBarrierClosedStatus() && CheckZeroAuthCount())
 80039ec:	f7ff fd1a 	bl	8003424 <CheckBarrierClosedStatus>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80fd 	beq.w	8003bf2 <CheckBarrierOperation+0x32e>
 80039f8:	f7ff fd34 	bl	8003464 <CheckZeroAuthCount>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80f7 	beq.w	8003bf2 <CheckBarrierOperation+0x32e>
						{
							//PRINTL(" [CheckBarrier] Current Status is open");
							printf(" [CheckBarrier] Current Status is open \n");
 8003a04:	4859      	ldr	r0, [pc, #356]	; (8003b6c <CheckBarrierOperation+0x2a8>)
 8003a06:	f005 fd21 	bl	800944c <printf_>
							ControlBarrier(BARRIER_CLOSE_S);
 8003a0a:	2003      	movs	r0, #3
 8003a0c:	f7fd fd26 	bl	800145c <ControlBarrier>
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 8003a10:	e0ef      	b.n	8003bf2 <CheckBarrierOperation+0x32e>
 8003a12:	e0ee      	b.n	8003bf2 <CheckBarrierOperation+0x32e>
						}
					}
				}
				else if (gbBarrierCmd == BARRIER_CLOSE_S)
 8003a14:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <CheckBarrierOperation+0x294>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	f040 8127 	bne.w	8003c6c <CheckBarrierOperation+0x3a8>
				{
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_CLOSE) ||
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <CheckBarrierOperation+0x284>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <CheckBarrierOperation+0x170>
 8003a26:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <CheckBarrierOperation+0x288>)
 8003a28:	791b      	ldrb	r3, [r3, #4]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d10c      	bne.n	8003a4e <CheckBarrierOperation+0x18a>
						(gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_CLOSE))
 8003a34:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <CheckBarrierOperation+0x28c>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_CLOSE) ||
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80a3 	beq.w	8003b84 <CheckBarrierOperation+0x2c0>
						(gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_CLOSE))
 8003a3e:	4b45      	ldr	r3, [pc, #276]	; (8003b54 <CheckBarrierOperation+0x290>)
 8003a40:	791b      	ldrb	r3, [r3, #4]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	f000 809b 	beq.w	8003b84 <CheckBarrierOperation+0x2c0>
					{
						if (CheckBarrierClosedStatus())
 8003a4e:	f7ff fce9 	bl	8003424 <CheckBarrierClosedStatus>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80ce 	beq.w	8003bf6 <CheckBarrierOperation+0x332>
						{
							//PRINTL(" [CheckBarrier] pos:%d/%d", gMainBarrierStatus.param.posStatus, gSubBarrierStatus.param.posStatus);
							printf(" [CheckBarrier] pos:%d/%d \n", gMainBarrierStatus.param.posStatus, gSubBarrierStatus.param.posStatus);
 8003a5a:	4b3c      	ldr	r3, [pc, #240]	; (8003b4c <CheckBarrierOperation+0x288>)
 8003a5c:	791b      	ldrb	r3, [r3, #4]
 8003a5e:	f343 0302 	sbfx	r3, r3, #0, #3
 8003a62:	b25b      	sxtb	r3, r3
 8003a64:	4619      	mov	r1, r3
 8003a66:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <CheckBarrierOperation+0x290>)
 8003a68:	791b      	ldrb	r3, [r3, #4]
 8003a6a:	f343 0302 	sbfx	r3, r3, #0, #3
 8003a6e:	b25b      	sxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	483f      	ldr	r0, [pc, #252]	; (8003b70 <CheckBarrierOperation+0x2ac>)
 8003a74:	f005 fcea 	bl	800944c <printf_>

							if (isCalibrationStart == FALSE && (isSafetyOn == FALSE || gfisAuthTimeout == TRUE))
 8003a78:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <CheckBarrierOperation+0x2b0>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	f083 0301 	eor.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80b7 	beq.w	8003bf6 <CheckBarrierOperation+0x332>
 8003a88:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <CheckBarrierOperation+0x2b4>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	f083 0301 	eor.w	r3, r3, #1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <CheckBarrierOperation+0x1dc>
 8003a96:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <CheckBarrierOperation+0x2b8>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80ab 	beq.w	8003bf6 <CheckBarrierOperation+0x332>
							{
								nBarrierErrorCnt++;
 8003aa0:	4b31      	ldr	r3, [pc, #196]	; (8003b68 <CheckBarrierOperation+0x2a4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <CheckBarrierOperation+0x2a4>)
 8003aa8:	6013      	str	r3, [r2, #0]

								if (nBarrierErrorCnt == 20) // After 4 sec, Barrier fault is generated.
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <CheckBarrierOperation+0x2a4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b14      	cmp	r3, #20
 8003ab0:	f040 80a1 	bne.w	8003bf6 <CheckBarrierOperation+0x332>
								{
									if (gGCUStatus.ModuleAlarm.b.nFDoor1 == FDOOR_ALARM_NONE && gGCUStatus.ModuleAlarm.b.nFDoor2 == FDOOR_ALARM_NONE)
 8003ab4:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <CheckBarrierOperation+0x27c>)
 8003ab6:	7b1b      	ldrb	r3, [r3, #12]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10d      	bne.n	8003ade <CheckBarrierOperation+0x21a>
 8003ac2:	4b1f      	ldr	r3, [pc, #124]	; (8003b40 <CheckBarrierOperation+0x27c>)
 8003ac4:	7b1b      	ldrb	r3, [r3, #12]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <CheckBarrierOperation+0x21a>
									{
										ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8003ad0:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <CheckBarrierOperation+0x2bc>)
 8003ad2:	7a9b      	ldrb	r3, [r3, #10]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f7fd fcf7 	bl	80014cc <ControlBuzzer>
									}

									if (gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_CLOSE)
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <CheckBarrierOperation+0x284>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <CheckBarrierOperation+0x23e>
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <CheckBarrierOperation+0x288>)
 8003ae8:	791b      	ldrb	r3, [r3, #4]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d006      	beq.n	8003b02 <CheckBarrierOperation+0x23e>
										gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_CLOSE_FAULT;
 8003af4:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <CheckBarrierOperation+0x27c>)
 8003af6:	7b13      	ldrb	r3, [r2, #12]
 8003af8:	f06f 0101 	mvn.w	r1, #1
 8003afc:	f361 0301 	bfi	r3, r1, #0, #2
 8003b00:	7313      	strb	r3, [r2, #12]
									if (gfSubBarrierRunning == TRUE && gSubBarrierStatus.param.posStatus != SDOOR_CLOSE)
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <CheckBarrierOperation+0x28c>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00d      	beq.n	8003b26 <CheckBarrierOperation+0x262>
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <CheckBarrierOperation+0x290>)
 8003b0c:	791b      	ldrb	r3, [r3, #4]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d006      	beq.n	8003b26 <CheckBarrierOperation+0x262>
										gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_CLOSE_FAULT;
 8003b18:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <CheckBarrierOperation+0x27c>)
 8003b1a:	7b13      	ldrb	r3, [r2, #12]
 8003b1c:	f06f 0101 	mvn.w	r1, #1
 8003b20:	f361 0383 	bfi	r3, r1, #2, #2
 8003b24:	7313      	strb	r3, [r2, #12]

									nBarrierErrorCnt = 0;
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <CheckBarrierOperation+0x2a4>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
									ControlBarrier(BARRIER_CLOSE_S);
 8003b2c:	2003      	movs	r0, #3
 8003b2e:	f7fd fc95 	bl	800145c <ControlBarrier>
						if (CheckBarrierClosedStatus())
 8003b32:	e060      	b.n	8003bf6 <CheckBarrierOperation+0x332>
 8003b34:	2400043e 	.word	0x2400043e
 8003b38:	240001c0 	.word	0x240001c0
 8003b3c:	2400001c 	.word	0x2400001c
 8003b40:	240004b0 	.word	0x240004b0
 8003b44:	08010fec 	.word	0x08010fec
 8003b48:	240004ec 	.word	0x240004ec
 8003b4c:	240004dc 	.word	0x240004dc
 8003b50:	240004ed 	.word	0x240004ed
 8003b54:	240004e4 	.word	0x240004e4
 8003b58:	24000028 	.word	0x24000028
 8003b5c:	2400012d 	.word	0x2400012d
 8003b60:	24000427 	.word	0x24000427
 8003b64:	24000428 	.word	0x24000428
 8003b68:	24000430 	.word	0x24000430
 8003b6c:	0801100c 	.word	0x0801100c
 8003b70:	08011038 	.word	0x08011038
 8003b74:	2400042a 	.word	0x2400042a
 8003b78:	24000426 	.word	0x24000426
 8003b7c:	24000134 	.word	0x24000134
 8003b80:	240004a0 	.word	0x240004a0
								}
							}
						}
					}
					else if (isSafetyOn4Init == FALSE)
 8003b84:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <CheckBarrierOperation+0x3c0>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	f083 0301 	eor.w	r3, r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d06c      	beq.n	8003c6c <CheckBarrierOperation+0x3a8>
					{
						nForceOpenCnt = 0;
 8003b92:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <CheckBarrierOperation+0x3c4>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
						nBarrierErrorCnt = 0;
 8003b98:	4b3c      	ldr	r3, [pc, #240]	; (8003c8c <CheckBarrierOperation+0x3c8>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
						gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_NONE;
 8003b9e:	4a3c      	ldr	r2, [pc, #240]	; (8003c90 <CheckBarrierOperation+0x3cc>)
 8003ba0:	7b13      	ldrb	r3, [r2, #12]
 8003ba2:	f36f 0301 	bfc	r3, #0, #2
 8003ba6:	7313      	strb	r3, [r2, #12]
						gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_NONE;
 8003ba8:	4a39      	ldr	r2, [pc, #228]	; (8003c90 <CheckBarrierOperation+0x3cc>)
 8003baa:	7b13      	ldrb	r3, [r2, #12]
 8003bac:	f36f 0383 	bfc	r3, #2, #2
 8003bb0:	7313      	strb	r3, [r2, #12]
						gGCUStatus.bBarrierSw = 0x22;
 8003bb2:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <CheckBarrierOperation+0x3cc>)
 8003bb4:	2222      	movs	r2, #34	; 0x22
 8003bb6:	741a      	strb	r2, [r3, #16]
						isForceOpen = FALSE;
 8003bb8:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <CheckBarrierOperation+0x3d0>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]

						if (gGCUStatus.bAuthCount_EN)
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <CheckBarrierOperation+0x3cc>)
 8003bc0:	791b      	ldrb	r3, [r3, #4]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <CheckBarrierOperation+0x30c>
						{
							ControlBarrier(BARRIER_OPEN_FOR_EN);
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f7fd fc47 	bl	800145c <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8003bce:	e04d      	b.n	8003c6c <CheckBarrierOperation+0x3a8>
						}
						else if (gGCUStatus.bAuthCount_EX)
 8003bd0:	4b2f      	ldr	r3, [pc, #188]	; (8003c90 <CheckBarrierOperation+0x3cc>)
 8003bd2:	795b      	ldrb	r3, [r3, #5]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <CheckBarrierOperation+0x31e>
						{
							ControlBarrier(BARRIER_OPEN_FOR_EX);
 8003bda:	2002      	movs	r0, #2
 8003bdc:	f7fd fc3e 	bl	800145c <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8003be0:	e044      	b.n	8003c6c <CheckBarrierOperation+0x3a8>
						}
						else if (gbPowerFailFlag == FLG_SET)
 8003be2:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <CheckBarrierOperation+0x3d4>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d140      	bne.n	8003c6c <CheckBarrierOperation+0x3a8>
						{
							ControlBarrier(BARRIER_OPEN_FOR_EX);
 8003bea:	2002      	movs	r0, #2
 8003bec:	f7fd fc36 	bl	800145c <ControlBarrier>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8003bf0:	e03c      	b.n	8003c6c <CheckBarrierOperation+0x3a8>
					if ((gfMainBarrierRunning == TRUE && gMainBarrierStatus.param.posStatus != SDOOR_OPEN) ||
 8003bf2:	bf00      	nop
 8003bf4:	e03a      	b.n	8003c6c <CheckBarrierOperation+0x3a8>
						if (CheckBarrierClosedStatus())
 8003bf6:	bf00      	nop
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8003bf8:	e038      	b.n	8003c6c <CheckBarrierOperation+0x3a8>
					}
				}
			}
			else
			{
				if (!timerTailgating.fStart && gGCUStatus.bAuthCount_EN == 0 && gGCUStatus.bAuthCount_EX == 0 && CheckBarrierClosedStatus())
 8003bfa:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <CheckBarrierOperation+0x3d8>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	f083 0301 	eor.w	r3, r3, #1
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d02d      	beq.n	8003c64 <CheckBarrierOperation+0x3a0>
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <CheckBarrierOperation+0x3cc>)
 8003c0a:	791b      	ldrb	r3, [r3, #4]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d128      	bne.n	8003c64 <CheckBarrierOperation+0x3a0>
 8003c12:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <CheckBarrierOperation+0x3cc>)
 8003c14:	795b      	ldrb	r3, [r3, #5]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d123      	bne.n	8003c64 <CheckBarrierOperation+0x3a0>
 8003c1c:	f7ff fc02 	bl	8003424 <CheckBarrierClosedStatus>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01e      	beq.n	8003c64 <CheckBarrierOperation+0x3a0>
				{
					if (isCalibrationStart == FALSE)
 8003c26:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <CheckBarrierOperation+0x3dc>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	f083 0301 	eor.w	r3, r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01d      	beq.n	8003c70 <CheckBarrierOperation+0x3ac>
					{
						if (isForceOpenReady_EN == TRUE || isForceOpenReady_EX == TRUE)
 8003c34:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <CheckBarrierOperation+0x3e0>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d103      	bne.n	8003c44 <CheckBarrierOperation+0x380>
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <CheckBarrierOperation+0x3e4>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d015      	beq.n	8003c70 <CheckBarrierOperation+0x3ac>
						{
							nForceOpenCnt++;
 8003c44:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <CheckBarrierOperation+0x3c4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	4a0f      	ldr	r2, [pc, #60]	; (8003c88 <CheckBarrierOperation+0x3c4>)
 8003c4c:	6013      	str	r3, [r2, #0]

							if (nForceOpenCnt >= 2)
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <CheckBarrierOperation+0x3c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	dd0c      	ble.n	8003c70 <CheckBarrierOperation+0x3ac>
							{
								//PRINTL(" [CheckBarrier] Force Open Detected!!");
								printf(" [CheckBarrier] Force Open Detected!!\n");
 8003c56:	4815      	ldr	r0, [pc, #84]	; (8003cac <CheckBarrierOperation+0x3e8>)
 8003c58:	f005 fbf8 	bl	800944c <printf_>
								isForceOpen = TRUE;
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <CheckBarrierOperation+0x3d0>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]
					if (isCalibrationStart == FALSE)
 8003c62:	e005      	b.n	8003c70 <CheckBarrierOperation+0x3ac>
						}
					}
				}
				else
				{
					nBarrierErrorCnt = 0;
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <CheckBarrierOperation+0x3c8>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e002      	b.n	8003c72 <CheckBarrierOperation+0x3ae>
				if (gbBarrierCmd == BARRIER_OPEN_FOR_EN || gbBarrierCmd == BARRIER_OPEN_FOR_EX || gbEmergencyFlag == FLG_SET)
 8003c6c:	bf00      	nop
 8003c6e:	e000      	b.n	8003c72 <CheckBarrierOperation+0x3ae>
					if (isCalibrationStart == FALSE)
 8003c70:	bf00      	nop
				}
			}

			Brr_Inq_Status();			//확인 필요 pms
 8003c72:	f7fc fd99 	bl	80007a8 <Brr_Inq_Status>
		if (IsTimeout(&timerBarrierCheck, dwBarrierCheckTime * TICK_COUNT_100MS))
 8003c76:	e003      	b.n	8003c80 <CheckBarrierOperation+0x3bc>
		}
	}
	else
	{
		SetTimer(&timerBarrierCheck);
 8003c78:	480d      	ldr	r0, [pc, #52]	; (8003cb0 <CheckBarrierOperation+0x3ec>)
 8003c7a:	f00b fcad 	bl	800f5d8 <SetTimer>
	}
}
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	24000428 	.word	0x24000428
 8003c88:	24000434 	.word	0x24000434
 8003c8c:	24000430 	.word	0x24000430
 8003c90:	240004b0 	.word	0x240004b0
 8003c94:	24000425 	.word	0x24000425
 8003c98:	2400012b 	.word	0x2400012b
 8003c9c:	240001fc 	.word	0x240001fc
 8003ca0:	2400042a 	.word	0x2400042a
 8003ca4:	24000422 	.word	0x24000422
 8003ca8:	24000423 	.word	0x24000423
 8003cac:	08011054 	.word	0x08011054
 8003cb0:	240001c0 	.word	0x240001c0

08003cb4 <ClearPassHistory>:

void ClearPassHistory(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	if (gGCUStatus.PassageAlarm.b.nFromEN)
 8003cb8:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <ClearPassHistory+0x100>)
 8003cba:	7a1b      	ldrb	r3, [r3, #8]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00f      	beq.n	8003ce6 <ClearPassHistory+0x32>
	{
		if (!psenNewSwing.side.entry)
 8003cc6:	4b3c      	ldr	r3, [pc, #240]	; (8003db8 <ClearPassHistory+0x104>)
 8003cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <ClearPassHistory+0x32>
		{
			gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_NONE;
 8003cd0:	4a38      	ldr	r2, [pc, #224]	; (8003db4 <ClearPassHistory+0x100>)
 8003cd2:	7a13      	ldrb	r3, [r2, #8]
 8003cd4:	f36f 0302 	bfc	r3, #0, #3
 8003cd8:	7213      	strb	r3, [r2, #8]
			gisEntryPassenger = FALSE;
 8003cda:	4b38      	ldr	r3, [pc, #224]	; (8003dbc <ClearPassHistory+0x108>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
			{
				gGCUStatus.IllegalPass.b.nIllegal_EN = FLG_OFF;
				//PRINTL(" [EN] Clear Illegal Enter");
				printf(" [EN] Clear Illegal Enter \n");
			}
			ResetTimer(&timerIllegalEnterEN);
 8003ce0:	4837      	ldr	r0, [pc, #220]	; (8003dc0 <ClearPassHistory+0x10c>)
 8003ce2:	f00b fc8d 	bl	800f600 <ResetTimer>
		}
	}

	if (gGCUStatus.PassageAlarm.b.nFromEX)
 8003ce6:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <ClearPassHistory+0x100>)
 8003ce8:	7a1b      	ldrb	r3, [r3, #8]
 8003cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00f      	beq.n	8003d14 <ClearPassHistory+0x60>
	{
		if (!psenNewSwing.side.exit)
 8003cf4:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <ClearPassHistory+0x104>)
 8003cf6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <ClearPassHistory+0x60>
		{
			gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_NONE;
 8003cfe:	4a2d      	ldr	r2, [pc, #180]	; (8003db4 <ClearPassHistory+0x100>)
 8003d00:	7a13      	ldrb	r3, [r2, #8]
 8003d02:	f36f 1306 	bfc	r3, #4, #3
 8003d06:	7213      	strb	r3, [r2, #8]
			gisExitPassenger = FALSE;
 8003d08:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <ClearPassHistory+0x110>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
			{
				gGCUStatus.IllegalPass.b.nIllegal_EX = FLG_OFF;
				//PRINTL(" [EX] Clear Illegal Enter");
				printf(" [EX] Clear Illegal Enter \n");
			}
			ResetTimer(&timerIllegalEnterEN);
 8003d0e:	482c      	ldr	r0, [pc, #176]	; (8003dc0 <ClearPassHistory+0x10c>)
 8003d10:	f00b fc76 	bl	800f600 <ResetTimer>
		}
	}

	if (FLG_OFF == gbEmergencyFlag)
 8003d14:	4b2c      	ldr	r3, [pc, #176]	; (8003dc8 <ClearPassHistory+0x114>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d148      	bne.n	8003dae <ClearPassHistory+0xfa>
	{
		if (gCurGCUOpMode.bServiceMode_EN == NO_SERVICE || (gGCUStatus.bAuthCount_EX && gCurGCUOpMode.bServiceMode_EN == IN_SERVICE))
 8003d1c:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <ClearPassHistory+0x118>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <ClearPassHistory+0x82>
 8003d24:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <ClearPassHistory+0x100>)
 8003d26:	795b      	ldrb	r3, [r3, #5]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <ClearPassHistory+0x90>
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <ClearPassHistory+0x118>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d106      	bne.n	8003d44 <ClearPassHistory+0x90>
		{
			gbLampCMD_EN = DIR_RED;
 8003d36:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <ClearPassHistory+0x11c>)
 8003d38:	2202      	movs	r2, #2
 8003d3a:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EN = LAMP_OFF;
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <ClearPassHistory+0x120>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e005      	b.n	8003d50 <ClearPassHistory+0x9c>
		}
		else
		{
			gbLampCMD_EN = DIR_GREEN;
 8003d44:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <ClearPassHistory+0x11c>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EX = LAMP_OFF;
 8003d4a:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <ClearPassHistory+0x124>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
		}

		if (gCurGCUOpMode.bServiceMode_EX == NO_SERVICE || (gGCUStatus.bAuthCount_EN && gCurGCUOpMode.bServiceMode_EX == IN_SERVICE))
 8003d50:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <ClearPassHistory+0x118>)
 8003d52:	785b      	ldrb	r3, [r3, #1]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <ClearPassHistory+0xb6>
 8003d58:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <ClearPassHistory+0x100>)
 8003d5a:	791b      	ldrb	r3, [r3, #4]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <ClearPassHistory+0xc4>
 8003d62:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <ClearPassHistory+0x118>)
 8003d64:	785b      	ldrb	r3, [r3, #1]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d106      	bne.n	8003d78 <ClearPassHistory+0xc4>
		{
			gbLampCMD_EX = DIR_RED;
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <ClearPassHistory+0x128>)
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EX = LAMP_OFF;
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <ClearPassHistory+0x124>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e005      	b.n	8003d84 <ClearPassHistory+0xd0>
		}
		else
		{
			gbLampCMD_EX = DIR_GREEN;
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <ClearPassHistory+0x128>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
			gbIndicatorCMD_EN = LAMP_OFF;
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <ClearPassHistory+0x120>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
		}

		ControlBuzzer(BUZZER_NO_MAIN, BUZZER_OFF, 0);
 8003d84:	2200      	movs	r2, #0
 8003d86:	2100      	movs	r1, #0
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f7fd fb9f 	bl	80014cc <ControlBuzzer>
		ControlDirectionLED(gbLampCMD_EN, gbLampCMD_EX);
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <ClearPassHistory+0x11c>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <ClearPassHistory+0x128>)
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fd fbf1 	bl	8001580 <ControlDirectionLED>
		ControlIndicator(gbIndicatorCMD_EN, gbIndicatorCMD_EX, 0, FALSE);
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <ClearPassHistory+0x120>)
 8003da0:	7818      	ldrb	r0, [r3, #0]
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <ClearPassHistory+0x124>)
 8003da4:	7819      	ldrb	r1, [r3, #0]
 8003da6:	2300      	movs	r3, #0
 8003da8:	2200      	movs	r2, #0
 8003daa:	f7fd fc45 	bl	8001638 <ControlIndicator>
	}
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	240004b0 	.word	0x240004b0
 8003db8:	2400040c 	.word	0x2400040c
 8003dbc:	2400043b 	.word	0x2400043b
 8003dc0:	2400019c 	.word	0x2400019c
 8003dc4:	2400043c 	.word	0x2400043c
 8003dc8:	2400012d 	.word	0x2400012d
 8003dcc:	240004d4 	.word	0x240004d4
 8003dd0:	24000129 	.word	0x24000129
 8003dd4:	24000127 	.word	0x24000127
 8003dd8:	24000128 	.word	0x24000128
 8003ddc:	2400012a 	.word	0x2400012a

08003de0 <CheckEntranceSwing>:

void CheckEntranceSwing(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
	if (gisEntryPassenger)
 8003de4:	4b80      	ldr	r3, [pc, #512]	; (8003fe8 <CheckEntranceSwing+0x208>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d059      	beq.n	8003ea0 <CheckEntranceSwing+0xc0>
	{
		if (gGCUStatus.bAuthCount_EN)
 8003dec:	4b7f      	ldr	r3, [pc, #508]	; (8003fec <CheckEntranceSwing+0x20c>)
 8003dee:	791b      	ldrb	r3, [r3, #4]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d021      	beq.n	8003e3a <CheckEntranceSwing+0x5a>
		{
			if (!psenNewSwing.side.entry)
 8003df6:	4b7e      	ldr	r3, [pc, #504]	; (8003ff0 <CheckEntranceSwing+0x210>)
 8003df8:	f993 3000 	ldrsb.w	r3, [r3]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d171      	bne.n	8003ee4 <CheckEntranceSwing+0x104>
			{
				ResetTimer(&timerIllegalEnterEN);
 8003e00:	487c      	ldr	r0, [pc, #496]	; (8003ff4 <CheckEntranceSwing+0x214>)
 8003e02:	f00b fbfd 	bl	800f600 <ResetTimer>
				gisEntryPassenger = FALSE;
 8003e06:	4b78      	ldr	r3, [pc, #480]	; (8003fe8 <CheckEntranceSwing+0x208>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
				isPassReady_EN = FALSE;
 8003e0c:	4b7a      	ldr	r3, [pc, #488]	; (8003ff8 <CheckEntranceSwing+0x218>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EN = PASS_PATN_NONE;
 8003e12:	4b7a      	ldr	r3, [pc, #488]	; (8003ffc <CheckEntranceSwing+0x21c>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
				bPassPattern_EN = PASS_PATN_NONE;
 8003e18:	4b79      	ldr	r3, [pc, #484]	; (8004000 <CheckEntranceSwing+0x220>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8003e1e:	4a73      	ldr	r2, [pc, #460]	; (8003fec <CheckEntranceSwing+0x20c>)
 8003e20:	7a13      	ldrb	r3, [r2, #8]
 8003e22:	f36f 13c7 	bfc	r3, #7, #1
 8003e26:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8003e28:	4b76      	ldr	r3, [pc, #472]	; (8004004 <CheckEntranceSwing+0x224>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8003e2e:	f7ff ff41 	bl	8003cb4 <ClearPassHistory>
				//PRINTL(" [EN] Enter Clear 1");
				printf(" [EN] Enter Clear 1\n");
 8003e32:	4875      	ldr	r0, [pc, #468]	; (8004008 <CheckEntranceSwing+0x228>)
 8003e34:	f005 fb0a 	bl	800944c <printf_>
 8003e38:	e054      	b.n	8003ee4 <CheckEntranceSwing+0x104>
			}
		}
		else
		{
			if (!psenNewSwing.section.enter_EN && !psenNewSwing.section.lower_EN)
 8003e3a:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <CheckEntranceSwing+0x210>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d14d      	bne.n	8003ee4 <CheckEntranceSwing+0x104>
 8003e48:	4b69      	ldr	r3, [pc, #420]	; (8003ff0 <CheckEntranceSwing+0x210>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f023 030f 	bic.w	r3, r3, #15
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d146      	bne.n	8003ee4 <CheckEntranceSwing+0x104>
			{
				ResetTimer(&timerIllegalEnterEN);
 8003e56:	4867      	ldr	r0, [pc, #412]	; (8003ff4 <CheckEntranceSwing+0x214>)
 8003e58:	f00b fbd2 	bl	800f600 <ResetTimer>
				gisEntryPassenger = FALSE;
 8003e5c:	4b62      	ldr	r3, [pc, #392]	; (8003fe8 <CheckEntranceSwing+0x208>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
				isPassReady_EN = FALSE;
 8003e62:	4b65      	ldr	r3, [pc, #404]	; (8003ff8 <CheckEntranceSwing+0x218>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EN = PASS_PATN_NONE;
 8003e68:	4b64      	ldr	r3, [pc, #400]	; (8003ffc <CheckEntranceSwing+0x21c>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
				bPassPattern_EN = PASS_PATN_NONE;
 8003e6e:	4b64      	ldr	r3, [pc, #400]	; (8004000 <CheckEntranceSwing+0x220>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEX = OFF;
 8003e74:	4a5d      	ldr	r2, [pc, #372]	; (8003fec <CheckEntranceSwing+0x20c>)
 8003e76:	7a13      	ldrb	r3, [r2, #8]
 8003e78:	f36f 13c7 	bfc	r3, #7, #1
 8003e7c:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8003e7e:	4b61      	ldr	r3, [pc, #388]	; (8004004 <CheckEntranceSwing+0x224>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8003e84:	f7ff ff16 	bl	8003cb4 <ClearPassHistory>
				if (gGCUStatus.bAuthCount_EX)
 8003e88:	4b58      	ldr	r3, [pc, #352]	; (8003fec <CheckEntranceSwing+0x20c>)
 8003e8a:	795b      	ldrb	r3, [r3, #5]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <CheckEntranceSwing+0xb8>
				{
					ControlBarrier(BARRIER_OPEN_FOR_EX);
 8003e92:	2002      	movs	r0, #2
 8003e94:	f7fd fae2 	bl	800145c <ControlBarrier>
				}
				//PRINTL(" [EN] Enter Clear 2");
				printf(" [EN] Enter Clear 2\n");
 8003e98:	485c      	ldr	r0, [pc, #368]	; (800400c <CheckEntranceSwing+0x22c>)
 8003e9a:	f005 fad7 	bl	800944c <printf_>
 8003e9e:	e021      	b.n	8003ee4 <CheckEntranceSwing+0x104>
	else
	{
		// TODO: Check needs of this alarm
		if (gGCUStatus.PassageAlarm.b.nPassOverFromEX != ON)
		{
			if (psenNewSwing.dirEntry.enter)
 8003ea0:	4b53      	ldr	r3, [pc, #332]	; (8003ff0 <CheckEntranceSwing+0x210>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01a      	beq.n	8003ee4 <CheckEntranceSwing+0x104>
			{
				bEnterPattern_EN |= psenNewSwing.dirEntry.enter;
 8003eae:	4b50      	ldr	r3, [pc, #320]	; (8003ff0 <CheckEntranceSwing+0x210>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	f343 0301 	sbfx	r3, r3, #0, #2
 8003eb6:	b25b      	sxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <CheckEntranceSwing+0x21c>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	b25b      	sxtb	r3, r3
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	4b4d      	ldr	r3, [pc, #308]	; (8003ffc <CheckEntranceSwing+0x21c>)
 8003ec8:	701a      	strb	r2, [r3, #0]

				if (bEnterPattern_EN >= PASS_PATN_ENTER)
 8003eca:	4b4c      	ldr	r3, [pc, #304]	; (8003ffc <CheckEntranceSwing+0x21c>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d908      	bls.n	8003ee4 <CheckEntranceSwing+0x104>
				{
					gisEntryPassenger = TRUE;
 8003ed2:	4b45      	ldr	r3, [pc, #276]	; (8003fe8 <CheckEntranceSwing+0x208>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]

					//PRINTL(" [EN] Enter - [%d]", bEnterPattern_EN);
					printf(" [EN] Enter - [%d]\n", bEnterPattern_EN);
 8003ed8:	4b48      	ldr	r3, [pc, #288]	; (8003ffc <CheckEntranceSwing+0x21c>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	4619      	mov	r1, r3
 8003ede:	484c      	ldr	r0, [pc, #304]	; (8004010 <CheckEntranceSwing+0x230>)
 8003ee0:	f005 fab4 	bl	800944c <printf_>
				}
			}
		}
	}

	if (gisExitPassenger)
 8003ee4:	4b4b      	ldr	r3, [pc, #300]	; (8004014 <CheckEntranceSwing+0x234>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d059      	beq.n	8003fa0 <CheckEntranceSwing+0x1c0>
	{
		if (gGCUStatus.bAuthCount_EX)
 8003eec:	4b3f      	ldr	r3, [pc, #252]	; (8003fec <CheckEntranceSwing+0x20c>)
 8003eee:	795b      	ldrb	r3, [r3, #5]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d021      	beq.n	8003f3a <CheckEntranceSwing+0x15a>
		{
			if (!psenNewSwing.side.exit)
 8003ef6:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <CheckEntranceSwing+0x210>)
 8003ef8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d171      	bne.n	8003fe4 <CheckEntranceSwing+0x204>
			{
				ResetTimer(&timerIllegalEnterEX);
 8003f00:	4845      	ldr	r0, [pc, #276]	; (8004018 <CheckEntranceSwing+0x238>)
 8003f02:	f00b fb7d 	bl	800f600 <ResetTimer>
				gisExitPassenger = FALSE;
 8003f06:	4b43      	ldr	r3, [pc, #268]	; (8004014 <CheckEntranceSwing+0x234>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
				isPassReady_EX = FALSE;
 8003f0c:	4b43      	ldr	r3, [pc, #268]	; (800401c <CheckEntranceSwing+0x23c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EX = PASS_PATN_NONE;
 8003f12:	4b43      	ldr	r3, [pc, #268]	; (8004020 <CheckEntranceSwing+0x240>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
				bPassPattern_EX = PASS_PATN_NONE;
 8003f18:	4b42      	ldr	r3, [pc, #264]	; (8004024 <CheckEntranceSwing+0x244>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8003f1e:	4a33      	ldr	r2, [pc, #204]	; (8003fec <CheckEntranceSwing+0x20c>)
 8003f20:	7a13      	ldrb	r3, [r2, #8]
 8003f22:	f36f 03c3 	bfc	r3, #3, #1
 8003f26:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8003f28:	4b36      	ldr	r3, [pc, #216]	; (8004004 <CheckEntranceSwing+0x224>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8003f2e:	f7ff fec1 	bl	8003cb4 <ClearPassHistory>
				//PRINTL(" [EX] Enter Clear 1");
				printf(" [EX] Enter Clear 1\n");
 8003f32:	483d      	ldr	r0, [pc, #244]	; (8004028 <CheckEntranceSwing+0x248>)
 8003f34:	f005 fa8a 	bl	800944c <printf_>
					printf(" [EX] Enter - [%d]\n", bEnterPattern_EX);
				}
			}
		}
	}
}
 8003f38:	e054      	b.n	8003fe4 <CheckEntranceSwing+0x204>
			if (!psenNewSwing.section.enter_EX && !psenNewSwing.section.lower_EX)
 8003f3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <CheckEntranceSwing+0x210>)
 8003f3c:	785b      	ldrb	r3, [r3, #1]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d14d      	bne.n	8003fe4 <CheckEntranceSwing+0x204>
 8003f48:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <CheckEntranceSwing+0x210>)
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	f023 030f 	bic.w	r3, r3, #15
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d146      	bne.n	8003fe4 <CheckEntranceSwing+0x204>
				ResetTimer(&timerIllegalEnterEX);
 8003f56:	4830      	ldr	r0, [pc, #192]	; (8004018 <CheckEntranceSwing+0x238>)
 8003f58:	f00b fb52 	bl	800f600 <ResetTimer>
				gisExitPassenger = FALSE;
 8003f5c:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <CheckEntranceSwing+0x234>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	701a      	strb	r2, [r3, #0]
				isPassReady_EX = FALSE;
 8003f62:	4b2e      	ldr	r3, [pc, #184]	; (800401c <CheckEntranceSwing+0x23c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
				bEnterPattern_EX = PASS_PATN_NONE;
 8003f68:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <CheckEntranceSwing+0x240>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
				bPassPattern_EX = PASS_PATN_NONE;
 8003f6e:	4b2d      	ldr	r3, [pc, #180]	; (8004024 <CheckEntranceSwing+0x244>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
				gGCUStatus.PassageAlarm.b.nPassOverFromEN = OFF;
 8003f74:	4a1d      	ldr	r2, [pc, #116]	; (8003fec <CheckEntranceSwing+0x20c>)
 8003f76:	7a13      	ldrb	r3, [r2, #8]
 8003f78:	f36f 03c3 	bfc	r3, #3, #1
 8003f7c:	7213      	strb	r3, [r2, #8]
				isCounterEnter = FALSE;
 8003f7e:	4b21      	ldr	r3, [pc, #132]	; (8004004 <CheckEntranceSwing+0x224>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
				ClearPassHistory();
 8003f84:	f7ff fe96 	bl	8003cb4 <ClearPassHistory>
				if (gGCUStatus.bAuthCount_EN)
 8003f88:	4b18      	ldr	r3, [pc, #96]	; (8003fec <CheckEntranceSwing+0x20c>)
 8003f8a:	791b      	ldrb	r3, [r3, #4]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <CheckEntranceSwing+0x1b8>
					ControlBarrier(BARRIER_OPEN_FOR_EN);
 8003f92:	2001      	movs	r0, #1
 8003f94:	f7fd fa62 	bl	800145c <ControlBarrier>
				printf(" [EX] Enter Clear 2\n");
 8003f98:	4824      	ldr	r0, [pc, #144]	; (800402c <CheckEntranceSwing+0x24c>)
 8003f9a:	f005 fa57 	bl	800944c <printf_>
}
 8003f9e:	e021      	b.n	8003fe4 <CheckEntranceSwing+0x204>
			if (psenNewSwing.dirExit.enter)
 8003fa0:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <CheckEntranceSwing+0x210>)
 8003fa2:	785b      	ldrb	r3, [r3, #1]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01a      	beq.n	8003fe4 <CheckEntranceSwing+0x204>
				bEnterPattern_EX |= psenNewSwing.dirExit.enter;
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <CheckEntranceSwing+0x210>)
 8003fb0:	785b      	ldrb	r3, [r3, #1]
 8003fb2:	f343 0301 	sbfx	r3, r3, #0, #2
 8003fb6:	b25b      	sxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b19      	ldr	r3, [pc, #100]	; (8004020 <CheckEntranceSwing+0x240>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	b25b      	sxtb	r3, r3
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	b25b      	sxtb	r3, r3
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	4b16      	ldr	r3, [pc, #88]	; (8004020 <CheckEntranceSwing+0x240>)
 8003fc8:	701a      	strb	r2, [r3, #0]
				if (bEnterPattern_EX >= PASS_PATN_ENTER)
 8003fca:	4b15      	ldr	r3, [pc, #84]	; (8004020 <CheckEntranceSwing+0x240>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d908      	bls.n	8003fe4 <CheckEntranceSwing+0x204>
					gisExitPassenger = TRUE;
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <CheckEntranceSwing+0x234>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
					printf(" [EX] Enter - [%d]\n", bEnterPattern_EX);
 8003fd8:	4b11      	ldr	r3, [pc, #68]	; (8004020 <CheckEntranceSwing+0x240>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4814      	ldr	r0, [pc, #80]	; (8004030 <CheckEntranceSwing+0x250>)
 8003fe0:	f005 fa34 	bl	800944c <printf_>
}
 8003fe4:	bf00      	nop
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	2400043b 	.word	0x2400043b
 8003fec:	240004b0 	.word	0x240004b0
 8003ff0:	2400040c 	.word	0x2400040c
 8003ff4:	2400019c 	.word	0x2400019c
 8003ff8:	2400041c 	.word	0x2400041c
 8003ffc:	24000418 	.word	0x24000418
 8004000:	2400041a 	.word	0x2400041a
 8004004:	24000427 	.word	0x24000427
 8004008:	0801107c 	.word	0x0801107c
 800400c:	08011094 	.word	0x08011094
 8004010:	080110ac 	.word	0x080110ac
 8004014:	2400043c 	.word	0x2400043c
 8004018:	240001a8 	.word	0x240001a8
 800401c:	2400041d 	.word	0x2400041d
 8004020:	24000419 	.word	0x24000419
 8004024:	2400041b 	.word	0x2400041b
 8004028:	080110c0 	.word	0x080110c0
 800402c:	080110d8 	.word	0x080110d8
 8004030:	080110f0 	.word	0x080110f0

08004034 <CheckPassReadySwing>:

void CheckPassReadySwing(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
	if (gisExitPassenger == TRUE)
 8004038:	4b76      	ldr	r3, [pc, #472]	; (8004214 <CheckPassReadySwing+0x1e0>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d073      	beq.n	8004128 <CheckPassReadySwing+0xf4>
	{
		if (isPassReady_EN == FALSE)
 8004040:	4b75      	ldr	r3, [pc, #468]	; (8004218 <CheckPassReadySwing+0x1e4>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f083 0301 	eor.w	r3, r3, #1
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d040      	beq.n	80040d0 <CheckPassReadySwing+0x9c>
		{
			bPassPattern_EX |= psenNewSwing.dirExit.passage;
 800404e:	4b73      	ldr	r3, [pc, #460]	; (800421c <CheckPassReadySwing+0x1e8>)
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	f343 0385 	sbfx	r3, r3, #2, #6
 8004056:	b25b      	sxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	4b71      	ldr	r3, [pc, #452]	; (8004220 <CheckPassReadySwing+0x1ec>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	b25b      	sxtb	r3, r3
 8004060:	4313      	orrs	r3, r2
 8004062:	b25b      	sxtb	r3, r3
 8004064:	b2da      	uxtb	r2, r3
 8004066:	4b6e      	ldr	r3, [pc, #440]	; (8004220 <CheckPassReadySwing+0x1ec>)
 8004068:	701a      	strb	r2, [r3, #0]

			if (bPassPattern_EX >= PASS_PATN_PASS_READY)
 800406a:	4b6d      	ldr	r3, [pc, #436]	; (8004220 <CheckPassReadySwing+0x1ec>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b03      	cmp	r3, #3
 8004070:	d92e      	bls.n	80040d0 <CheckPassReadySwing+0x9c>
			{
				//PRINTL(" [EX] Pass Ready");
				printf(" [EX] Pass Ready \n");
 8004072:	486c      	ldr	r0, [pc, #432]	; (8004224 <CheckPassReadySwing+0x1f0>)
 8004074:	f005 f9ea 	bl	800944c <printf_>
				isPassReady_EX = TRUE;
 8004078:	4b6b      	ldr	r3, [pc, #428]	; (8004228 <CheckPassReadySwing+0x1f4>)
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]

				if (gGCUStatus.bAuthCount_EX)
 800407e:	4b6b      	ldr	r3, [pc, #428]	; (800422c <CheckPassReadySwing+0x1f8>)
 8004080:	795b      	ldrb	r3, [r3, #5]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <CheckPassReadySwing+0x5c>
				{
					gisExitPassenger = FALSE;
 8004088:	4b62      	ldr	r3, [pc, #392]	; (8004214 <CheckPassReadySwing+0x1e0>)
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	e01f      	b.n	80040d0 <CheckPassReadySwing+0x9c>
				}
				else if (CheckZeroAuthCount() && gGCUStatus.IllegalPass.b.nTailgating_EX == FLG_OFF && gGCUStatus.PassageAlarm.b.nPassOverFromEX == OFF)
 8004090:	f7ff f9e8 	bl	8003464 <CheckZeroAuthCount>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01a      	beq.n	80040d0 <CheckPassReadySwing+0x9c>
 800409a:	4b64      	ldr	r3, [pc, #400]	; (800422c <CheckPassReadySwing+0x1f8>)
 800409c:	7f1b      	ldrb	r3, [r3, #28]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d113      	bne.n	80040d0 <CheckPassReadySwing+0x9c>
 80040a8:	4b60      	ldr	r3, [pc, #384]	; (800422c <CheckPassReadySwing+0x1f8>)
 80040aa:	7a1b      	ldrb	r3, [r3, #8]
 80040ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10c      	bne.n	80040d0 <CheckPassReadySwing+0x9c>
				{
					// if nobody is in the opposite side
					if (!psenNewSwing.section.lower_EN)
 80040b6:	4b59      	ldr	r3, [pc, #356]	; (800421c <CheckPassReadySwing+0x1e8>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	f023 030f 	bic.w	r3, r3, #15
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <CheckPassReadySwing+0x9c>
					{
						isForceOpenReady_EX = TRUE;
 80040c4:	4b5a      	ldr	r3, [pc, #360]	; (8004230 <CheckPassReadySwing+0x1fc>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	701a      	strb	r2, [r3, #0]
						//PRINTL(" [EX] Force Open Ready");
						printf(" [EX] Force Open Ready\n");
 80040ca:	485a      	ldr	r0, [pc, #360]	; (8004234 <CheckPassReadySwing+0x200>)
 80040cc:	f005 f9be 	bl	800944c <printf_>
				}
			}
		}

		// Luggage check (Stroller, Bicycle, Luggage)
		if (gGCUStatus.bAuthCount_EX && psenNewSwing.dirExit.enter && psenNewSwing.b.s13 && psenNewSwing.b.s14 && !psenNewSwing.b.s11)
 80040d0:	4b56      	ldr	r3, [pc, #344]	; (800422c <CheckPassReadySwing+0x1f8>)
 80040d2:	795b      	ldrb	r3, [r3, #5]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8099 	beq.w	800420e <CheckPassReadySwing+0x1da>
 80040dc:	4b4f      	ldr	r3, [pc, #316]	; (800421c <CheckPassReadySwing+0x1e8>)
 80040de:	785b      	ldrb	r3, [r3, #1]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8091 	beq.w	800420e <CheckPassReadySwing+0x1da>
 80040ec:	4b4b      	ldr	r3, [pc, #300]	; (800421c <CheckPassReadySwing+0x1e8>)
 80040ee:	785b      	ldrb	r3, [r3, #1]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8089 	beq.w	800420e <CheckPassReadySwing+0x1da>
 80040fc:	4b47      	ldr	r3, [pc, #284]	; (800421c <CheckPassReadySwing+0x1e8>)
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8081 	beq.w	800420e <CheckPassReadySwing+0x1da>
 800410c:	4b43      	ldr	r3, [pc, #268]	; (800421c <CheckPassReadySwing+0x1e8>)
 800410e:	785b      	ldrb	r3, [r3, #1]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d179      	bne.n	800420e <CheckPassReadySwing+0x1da>
		{
			isLuggageSet_EX = TRUE;
 800411a:	4b47      	ldr	r3, [pc, #284]	; (8004238 <CheckPassReadySwing+0x204>)
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
			//PRINTL(" [EX] Set Luggage Flag");
			printf(" [EX] Set Luggage Flag\n");
 8004120:	4846      	ldr	r0, [pc, #280]	; (800423c <CheckPassReadySwing+0x208>)
 8004122:	f005 f993 	bl	800944c <printf_>
			isLuggageSet_EN = TRUE;
			//PRINTL(" [EN] Set Luggage Flag");
			printf(" [EN] Set Luggage Flag  \n");
		}
	}
}
 8004126:	e072      	b.n	800420e <CheckPassReadySwing+0x1da>
	else if (gisEntryPassenger == TRUE)
 8004128:	4b45      	ldr	r3, [pc, #276]	; (8004240 <CheckPassReadySwing+0x20c>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d06e      	beq.n	800420e <CheckPassReadySwing+0x1da>
		if (isPassReady_EX == FALSE)
 8004130:	4b3d      	ldr	r3, [pc, #244]	; (8004228 <CheckPassReadySwing+0x1f4>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	f083 0301 	eor.w	r3, r3, #1
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d040      	beq.n	80041c0 <CheckPassReadySwing+0x18c>
			bPassPattern_EN |= psenNewSwing.dirEntry.passage;
 800413e:	4b37      	ldr	r3, [pc, #220]	; (800421c <CheckPassReadySwing+0x1e8>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	f343 0385 	sbfx	r3, r3, #2, #6
 8004146:	b25b      	sxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	4b3e      	ldr	r3, [pc, #248]	; (8004244 <CheckPassReadySwing+0x210>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b25b      	sxtb	r3, r3
 8004150:	4313      	orrs	r3, r2
 8004152:	b25b      	sxtb	r3, r3
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <CheckPassReadySwing+0x210>)
 8004158:	701a      	strb	r2, [r3, #0]
			if (bPassPattern_EN >= PASS_PATN_PASS_READY)
 800415a:	4b3a      	ldr	r3, [pc, #232]	; (8004244 <CheckPassReadySwing+0x210>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b03      	cmp	r3, #3
 8004160:	d92e      	bls.n	80041c0 <CheckPassReadySwing+0x18c>
				printf(" [EN] Pass Ready \n");
 8004162:	4839      	ldr	r0, [pc, #228]	; (8004248 <CheckPassReadySwing+0x214>)
 8004164:	f005 f972 	bl	800944c <printf_>
				isPassReady_EN = TRUE;
 8004168:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <CheckPassReadySwing+0x1e4>)
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
				if (gGCUStatus.bAuthCount_EN)
 800416e:	4b2f      	ldr	r3, [pc, #188]	; (800422c <CheckPassReadySwing+0x1f8>)
 8004170:	791b      	ldrb	r3, [r3, #4]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <CheckPassReadySwing+0x14c>
					gisEntryPassenger = FALSE;
 8004178:	4b31      	ldr	r3, [pc, #196]	; (8004240 <CheckPassReadySwing+0x20c>)
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	e01f      	b.n	80041c0 <CheckPassReadySwing+0x18c>
				else if (CheckZeroAuthCount() && gGCUStatus.IllegalPass.b.nTailgating_EN == FLG_OFF && gGCUStatus.PassageAlarm.b.nPassOverFromEN == OFF)
 8004180:	f7ff f970 	bl	8003464 <CheckZeroAuthCount>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01a      	beq.n	80041c0 <CheckPassReadySwing+0x18c>
 800418a:	4b28      	ldr	r3, [pc, #160]	; (800422c <CheckPassReadySwing+0x1f8>)
 800418c:	7f1b      	ldrb	r3, [r3, #28]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d113      	bne.n	80041c0 <CheckPassReadySwing+0x18c>
 8004198:	4b24      	ldr	r3, [pc, #144]	; (800422c <CheckPassReadySwing+0x1f8>)
 800419a:	7a1b      	ldrb	r3, [r3, #8]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10c      	bne.n	80041c0 <CheckPassReadySwing+0x18c>
					if (!psenNewSwing.section.lower_EX)
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <CheckPassReadySwing+0x1e8>)
 80041a8:	785b      	ldrb	r3, [r3, #1]
 80041aa:	f023 030f 	bic.w	r3, r3, #15
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d105      	bne.n	80041c0 <CheckPassReadySwing+0x18c>
						isForceOpenReady_EN = TRUE;
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <CheckPassReadySwing+0x218>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
						printf(" [EN]  Force Open Ready \n");
 80041ba:	4825      	ldr	r0, [pc, #148]	; (8004250 <CheckPassReadySwing+0x21c>)
 80041bc:	f005 f946 	bl	800944c <printf_>
		if (gGCUStatus.bAuthCount_EN && psenNewSwing.dirEntry.enter && psenNewSwing.b.s03 && psenNewSwing.b.s04 && !psenNewSwing.b.s01)
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <CheckPassReadySwing+0x1f8>)
 80041c2:	791b      	ldrb	r3, [r3, #4]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d021      	beq.n	800420e <CheckPassReadySwing+0x1da>
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <CheckPassReadySwing+0x1e8>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01a      	beq.n	800420e <CheckPassReadySwing+0x1da>
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <CheckPassReadySwing+0x1e8>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d013      	beq.n	800420e <CheckPassReadySwing+0x1da>
 80041e6:	4b0d      	ldr	r3, [pc, #52]	; (800421c <CheckPassReadySwing+0x1e8>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00c      	beq.n	800420e <CheckPassReadySwing+0x1da>
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <CheckPassReadySwing+0x1e8>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <CheckPassReadySwing+0x1da>
			isLuggageSet_EN = TRUE;
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <CheckPassReadySwing+0x220>)
 8004204:	2201      	movs	r2, #1
 8004206:	701a      	strb	r2, [r3, #0]
			printf(" [EN] Set Luggage Flag  \n");
 8004208:	4813      	ldr	r0, [pc, #76]	; (8004258 <CheckPassReadySwing+0x224>)
 800420a:	f005 f91f 	bl	800944c <printf_>
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	2400043c 	.word	0x2400043c
 8004218:	2400041c 	.word	0x2400041c
 800421c:	2400040c 	.word	0x2400040c
 8004220:	2400041b 	.word	0x2400041b
 8004224:	08011104 	.word	0x08011104
 8004228:	2400041d 	.word	0x2400041d
 800422c:	240004b0 	.word	0x240004b0
 8004230:	24000423 	.word	0x24000423
 8004234:	08011118 	.word	0x08011118
 8004238:	24000421 	.word	0x24000421
 800423c:	08011130 	.word	0x08011130
 8004240:	2400043b 	.word	0x2400043b
 8004244:	2400041a 	.word	0x2400041a
 8004248:	08011148 	.word	0x08011148
 800424c:	24000422 	.word	0x24000422
 8004250:	0801115c 	.word	0x0801115c
 8004254:	24000420 	.word	0x24000420
 8004258:	08011178 	.word	0x08011178

0800425c <CheckPassingSwing>:

// JOB DONE
void CheckPassingSwing(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
	// To prevent the counter-enter, I utilize two boolean variable "isPassReady" and "isPassOver"
	if (isPassReady_EN)
 8004260:	4b8f      	ldr	r3, [pc, #572]	; (80044a0 <CheckPassingSwing+0x244>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 808a 	beq.w	800437e <CheckPassingSwing+0x122>
	{
		if (isPassOver_EN)
 800426a:	4b8e      	ldr	r3, [pc, #568]	; (80044a4 <CheckPassingSwing+0x248>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d06b      	beq.n	800434a <CheckPassingSwing+0xee>
		{
			if (psenNewSwing.dirEntry.end)
 8004272:	4b8d      	ldr	r3, [pc, #564]	; (80044a8 <CheckPassingSwing+0x24c>)
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d07e      	beq.n	800437e <CheckPassingSwing+0x122>
			{
				//PRINTL(" [EN] Pass over");
				printf(" [EN] Pass over  \n");
 8004280:	488a      	ldr	r0, [pc, #552]	; (80044ac <CheckPassingSwing+0x250>)
 8004282:	f005 f8e3 	bl	800944c <printf_>
				isPassReady_EN = FALSE;
 8004286:	4b86      	ldr	r3, [pc, #536]	; (80044a0 <CheckPassingSwing+0x244>)
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
				isPassOver_EN = FALSE;
 800428c:	4b85      	ldr	r3, [pc, #532]	; (80044a4 <CheckPassingSwing+0x248>)
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
				bPassPattern_EN = PASS_PATN_NONE;
 8004292:	4b87      	ldr	r3, [pc, #540]	; (80044b0 <CheckPassingSwing+0x254>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]

				if (gGCUStatus.bAuthCount_EN == 1)
 8004298:	4b86      	ldr	r3, [pc, #536]	; (80044b4 <CheckPassingSwing+0x258>)
 800429a:	791b      	ldrb	r3, [r3, #4]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d144      	bne.n	800432c <CheckPassingSwing+0xd0>
				{
					if (psenNewSwing.section.upper_EN)
 80042a2:	4b81      	ldr	r3, [pc, #516]	; (80044a8 <CheckPassingSwing+0x24c>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02c      	beq.n	800430a <CheckPassingSwing+0xae>
					{
						isPassReady_EN = TRUE;
 80042b0:	4b7b      	ldr	r3, [pc, #492]	; (80044a0 <CheckPassingSwing+0x244>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
						isPassOver_EN = TRUE;
 80042b6:	4b7b      	ldr	r3, [pc, #492]	; (80044a4 <CheckPassingSwing+0x248>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]

						if (!psenNewSwing.b.s13 && !psenNewSwing.b.s14 && !psenNewSwing.b.s15)
 80042bc:	4b7a      	ldr	r3, [pc, #488]	; (80044a8 <CheckPassingSwing+0x24c>)
 80042be:	785b      	ldrb	r3, [r3, #1]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d159      	bne.n	800437e <CheckPassingSwing+0x122>
 80042ca:	4b77      	ldr	r3, [pc, #476]	; (80044a8 <CheckPassingSwing+0x24c>)
 80042cc:	785b      	ldrb	r3, [r3, #1]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d152      	bne.n	800437e <CheckPassingSwing+0x122>
 80042d8:	4b73      	ldr	r3, [pc, #460]	; (80044a8 <CheckPassingSwing+0x24c>)
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d14b      	bne.n	800437e <CheckPassingSwing+0x122>
						{
							if (gGCUStatus.IllegalPass.b.nTailgating_EN == FLG_OFF && timerTgFilter.fStart == FALSE)
 80042e6:	4b73      	ldr	r3, [pc, #460]	; (80044b4 <CheckPassingSwing+0x258>)
 80042e8:	7f1b      	ldrb	r3, [r3, #28]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d144      	bne.n	800437e <CheckPassingSwing+0x122>
 80042f4:	4b70      	ldr	r3, [pc, #448]	; (80044b8 <CheckPassingSwing+0x25c>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	f083 0301 	eor.w	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d03d      	beq.n	800437e <CheckPassingSwing+0x122>
							{
								SetTimer(&timerTgFilter);
 8004302:	486d      	ldr	r0, [pc, #436]	; (80044b8 <CheckPassingSwing+0x25c>)
 8004304:	f00b f968 	bl	800f5d8 <SetTimer>
 8004308:	e039      	b.n	800437e <CheckPassingSwing+0x122>
							}
						}
					}
					else
					{
						gGCUStatus.bAuthCount_EN--;
 800430a:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <CheckPassingSwing+0x258>)
 800430c:	791b      	ldrb	r3, [r3, #4]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b2da      	uxtb	r2, r3
 8004314:	4b67      	ldr	r3, [pc, #412]	; (80044b4 <CheckPassingSwing+0x258>)
 8004316:	711a      	strb	r2, [r3, #4]
						SetTimer(&timerCloseWait);
 8004318:	4868      	ldr	r0, [pc, #416]	; (80044bc <CheckPassingSwing+0x260>)
 800431a:	f00b f95d 	bl	800f5d8 <SetTimer>
						ResetTimer(&timerAuthorize);
 800431e:	4868      	ldr	r0, [pc, #416]	; (80044c0 <CheckPassingSwing+0x264>)
 8004320:	f00b f96e 	bl	800f600 <ResetTimer>
						//PRINTL(" [EN] Barrier close");
						printf(" [EN] Barrier close \n");
 8004324:	4867      	ldr	r0, [pc, #412]	; (80044c4 <CheckPassingSwing+0x268>)
 8004326:	f005 f891 	bl	800944c <printf_>
 800432a:	e028      	b.n	800437e <CheckPassingSwing+0x122>
					}
				}
				else if (gGCUStatus.bAuthCount_EN > 1)
 800432c:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <CheckPassingSwing+0x258>)
 800432e:	791b      	ldrb	r3, [r3, #4]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	d923      	bls.n	800437e <CheckPassingSwing+0x122>
				{
					gGCUStatus.bAuthCount_EN--;
 8004336:	4b5f      	ldr	r3, [pc, #380]	; (80044b4 <CheckPassingSwing+0x258>)
 8004338:	791b      	ldrb	r3, [r3, #4]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b5c      	ldr	r3, [pc, #368]	; (80044b4 <CheckPassingSwing+0x258>)
 8004342:	711a      	strb	r2, [r3, #4]
					SetAuthTimer();
 8004344:	f7fd ff9c 	bl	8002280 <SetAuthTimer>
 8004348:	e019      	b.n	800437e <CheckPassingSwing+0x122>
				}
			}
		}
		else
		{
			if (psenNewSwing.dirEntry.lower)
 800434a:	4b57      	ldr	r3, [pc, #348]	; (80044a8 <CheckPassingSwing+0x24c>)
 800434c:	785b      	ldrb	r3, [r3, #1]
 800434e:	f023 030f 	bic.w	r3, r3, #15
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <CheckPassingSwing+0x122>
			{
				//PRINTL(" [EN] passing before");
				printf(" [EN] passing before \n");
 8004358:	485b      	ldr	r0, [pc, #364]	; (80044c8 <CheckPassingSwing+0x26c>)
 800435a:	f005 f877 	bl	800944c <printf_>

				if (gGCUStatus.bAuthCount_EN || gGCUStatus.IllegalPass.b.nTailgating_EN == FLG_SET)
 800435e:	4b55      	ldr	r3, [pc, #340]	; (80044b4 <CheckPassingSwing+0x258>)
 8004360:	791b      	ldrb	r3, [r3, #4]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <CheckPassingSwing+0x122>
				{
					isPassOver_EN = TRUE;
 8004368:	4b4e      	ldr	r3, [pc, #312]	; (80044a4 <CheckPassingSwing+0x248>)
 800436a:	2201      	movs	r2, #1
 800436c:	701a      	strb	r2, [r3, #0]
					gGCUStatus.PassageAlarm.b.nPassOverFromEN = ON;
 800436e:	4a51      	ldr	r2, [pc, #324]	; (80044b4 <CheckPassingSwing+0x258>)
 8004370:	7a13      	ldrb	r3, [r2, #8]
 8004372:	f043 0308 	orr.w	r3, r3, #8
 8004376:	7213      	strb	r3, [r2, #8]
					//PRINTL(" [EN] passing");
					printf(" [EN] passing \n");
 8004378:	4854      	ldr	r0, [pc, #336]	; (80044cc <CheckPassingSwing+0x270>)
 800437a:	f005 f867 	bl	800944c <printf_>
				}
			}
		}
	}

	if (isPassReady_EX)
 800437e:	4b54      	ldr	r3, [pc, #336]	; (80044d0 <CheckPassingSwing+0x274>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 808a 	beq.w	800449c <CheckPassingSwing+0x240>
	{
		if (isPassOver_EX)
 8004388:	4b52      	ldr	r3, [pc, #328]	; (80044d4 <CheckPassingSwing+0x278>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d06b      	beq.n	8004468 <CheckPassingSwing+0x20c>
		{
			if (psenNewSwing.dirExit.end)
 8004390:	4b45      	ldr	r3, [pc, #276]	; (80044a8 <CheckPassingSwing+0x24c>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d07e      	beq.n	800449c <CheckPassingSwing+0x240>
			{
				//PRINTL(" [EX] Pass over");
				printf(" [EX] Pass over \n");
 800439e:	484e      	ldr	r0, [pc, #312]	; (80044d8 <CheckPassingSwing+0x27c>)
 80043a0:	f005 f854 	bl	800944c <printf_>
				isPassReady_EX = FALSE;
 80043a4:	4b4a      	ldr	r3, [pc, #296]	; (80044d0 <CheckPassingSwing+0x274>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
				isPassOver_EX = FALSE;
 80043aa:	4b4a      	ldr	r3, [pc, #296]	; (80044d4 <CheckPassingSwing+0x278>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
				bPassPattern_EX = PASS_PATN_NONE;
 80043b0:	4b4a      	ldr	r3, [pc, #296]	; (80044dc <CheckPassingSwing+0x280>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]

				if (gGCUStatus.bAuthCount_EX == 1)
 80043b6:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <CheckPassingSwing+0x258>)
 80043b8:	795b      	ldrb	r3, [r3, #5]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d144      	bne.n	800444a <CheckPassingSwing+0x1ee>
				{
					if (psenNewSwing.section.upper_EX)
 80043c0:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <CheckPassingSwing+0x24c>)
 80043c2:	785b      	ldrb	r3, [r3, #1]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d02c      	beq.n	8004428 <CheckPassingSwing+0x1cc>
					{
						isPassReady_EX = TRUE;
 80043ce:	4b40      	ldr	r3, [pc, #256]	; (80044d0 <CheckPassingSwing+0x274>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
						isPassOver_EX = TRUE;
 80043d4:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <CheckPassingSwing+0x278>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]

						if (!psenNewSwing.b.s05 && !psenNewSwing.b.s06 && !psenNewSwing.b.s07)
 80043da:	4b33      	ldr	r3, [pc, #204]	; (80044a8 <CheckPassingSwing+0x24c>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d159      	bne.n	800449c <CheckPassingSwing+0x240>
 80043e8:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <CheckPassingSwing+0x24c>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d152      	bne.n	800449c <CheckPassingSwing+0x240>
 80043f6:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <CheckPassingSwing+0x24c>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d14b      	bne.n	800449c <CheckPassingSwing+0x240>
						{ // If not detected on the upper sensors, no tailgating
							if (gGCUStatus.IllegalPass.b.nTailgating_EX == FLG_OFF && timerTgFilter.fStart == FALSE)
 8004404:	4b2b      	ldr	r3, [pc, #172]	; (80044b4 <CheckPassingSwing+0x258>)
 8004406:	7f1b      	ldrb	r3, [r3, #28]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d144      	bne.n	800449c <CheckPassingSwing+0x240>
 8004412:	4b29      	ldr	r3, [pc, #164]	; (80044b8 <CheckPassingSwing+0x25c>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	f083 0301 	eor.w	r3, r3, #1
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d03d      	beq.n	800449c <CheckPassingSwing+0x240>
							{
								SetTimer(&timerTgFilter);
 8004420:	4825      	ldr	r0, [pc, #148]	; (80044b8 <CheckPassingSwing+0x25c>)
 8004422:	f00b f8d9 	bl	800f5d8 <SetTimer>
					printf(" [EX] passing\n");
				}
			}
		}
	}
}
 8004426:	e039      	b.n	800449c <CheckPassingSwing+0x240>
						gGCUStatus.bAuthCount_EX--;
 8004428:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <CheckPassingSwing+0x258>)
 800442a:	795b      	ldrb	r3, [r3, #5]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <CheckPassingSwing+0x258>)
 8004434:	715a      	strb	r2, [r3, #5]
						SetTimer(&timerCloseWait);
 8004436:	4821      	ldr	r0, [pc, #132]	; (80044bc <CheckPassingSwing+0x260>)
 8004438:	f00b f8ce 	bl	800f5d8 <SetTimer>
						ResetTimer(&timerAuthorize);
 800443c:	4820      	ldr	r0, [pc, #128]	; (80044c0 <CheckPassingSwing+0x264>)
 800443e:	f00b f8df 	bl	800f600 <ResetTimer>
						printf(" [EX] Barrier close \n");
 8004442:	4827      	ldr	r0, [pc, #156]	; (80044e0 <CheckPassingSwing+0x284>)
 8004444:	f005 f802 	bl	800944c <printf_>
}
 8004448:	e028      	b.n	800449c <CheckPassingSwing+0x240>
				else if (gGCUStatus.bAuthCount_EX > 1)
 800444a:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <CheckPassingSwing+0x258>)
 800444c:	795b      	ldrb	r3, [r3, #5]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d923      	bls.n	800449c <CheckPassingSwing+0x240>
					gGCUStatus.bAuthCount_EX--;
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <CheckPassingSwing+0x258>)
 8004456:	795b      	ldrb	r3, [r3, #5]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b2da      	uxtb	r2, r3
 800445e:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <CheckPassingSwing+0x258>)
 8004460:	715a      	strb	r2, [r3, #5]
					SetAuthTimer();
 8004462:	f7fd ff0d 	bl	8002280 <SetAuthTimer>
}
 8004466:	e019      	b.n	800449c <CheckPassingSwing+0x240>
			if (psenNewSwing.dirExit.lower)
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <CheckPassingSwing+0x24c>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f023 030f 	bic.w	r3, r3, #15
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d012      	beq.n	800449c <CheckPassingSwing+0x240>
				printf(" [EX] passing before \n");
 8004476:	481b      	ldr	r0, [pc, #108]	; (80044e4 <CheckPassingSwing+0x288>)
 8004478:	f004 ffe8 	bl	800944c <printf_>
				if (gGCUStatus.bAuthCount_EX || gGCUStatus.IllegalPass.b.nTailgating_EX == FLG_SET)
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <CheckPassingSwing+0x258>)
 800447e:	795b      	ldrb	r3, [r3, #5]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <CheckPassingSwing+0x240>
					isPassOver_EX = TRUE;
 8004486:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <CheckPassingSwing+0x278>)
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
					gGCUStatus.PassageAlarm.b.nPassOverFromEX = ON;
 800448c:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <CheckPassingSwing+0x258>)
 800448e:	7a13      	ldrb	r3, [r2, #8]
 8004490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004494:	7213      	strb	r3, [r2, #8]
					printf(" [EX] passing\n");
 8004496:	4814      	ldr	r0, [pc, #80]	; (80044e8 <CheckPassingSwing+0x28c>)
 8004498:	f004 ffd8 	bl	800944c <printf_>
}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	2400041c 	.word	0x2400041c
 80044a4:	2400041e 	.word	0x2400041e
 80044a8:	2400040c 	.word	0x2400040c
 80044ac:	08011194 	.word	0x08011194
 80044b0:	2400041a 	.word	0x2400041a
 80044b4:	240004b0 	.word	0x240004b0
 80044b8:	24000244 	.word	0x24000244
 80044bc:	24000238 	.word	0x24000238
 80044c0:	24000160 	.word	0x24000160
 80044c4:	080111a8 	.word	0x080111a8
 80044c8:	080111c0 	.word	0x080111c0
 80044cc:	080111d8 	.word	0x080111d8
 80044d0:	2400041d 	.word	0x2400041d
 80044d4:	2400041f 	.word	0x2400041f
 80044d8:	080111e8 	.word	0x080111e8
 80044dc:	2400041b 	.word	0x2400041b
 80044e0:	080111fc 	.word	0x080111fc
 80044e4:	08011214 	.word	0x08011214
 80044e8:	0801122c 	.word	0x0801122c

080044ec <CheckCounterEnterTimer>:

void CheckCounterEnterTimer(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
	if (timerInverseEnter.fStart)
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <CheckCounterEnterTimer+0x30>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00f      	beq.n	8004518 <CheckCounterEnterTimer+0x2c>
	{
		if (IsTimeout(&timerInverseEnter, dwInverseCloseTime * TICK_COUNT_100MS))
 80044f8:	4b09      	ldr	r3, [pc, #36]	; (8004520 <CheckCounterEnterTimer+0x34>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4619      	mov	r1, r3
 8004506:	4805      	ldr	r0, [pc, #20]	; (800451c <CheckCounterEnterTimer+0x30>)
 8004508:	f00b f888 	bl	800f61c <IsTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <CheckCounterEnterTimer+0x2c>
		{
			ResetTimer(&timerInverseEnter);
 8004512:	4802      	ldr	r0, [pc, #8]	; (800451c <CheckCounterEnterTimer+0x30>)
 8004514:	f00b f874 	bl	800f600 <ResetTimer>
					isCounterEnter = FALSE;
				}
			}
		}
	}
}
 8004518:	bf00      	nop
 800451a:	bd80      	pop	{r7, pc}
 800451c:	24000220 	.word	0x24000220
 8004520:	24000018 	.word	0x24000018

08004524 <CheckIllegalEnterSwing>:

void CheckIllegalEnterSwing(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
	if (gisEntryPassenger && gGCUStatus.PassageAlarm.b.nPassOverFromEX != ON)
 8004528:	4b50      	ldr	r3, [pc, #320]	; (800466c <CheckIllegalEnterSwing+0x148>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d04b      	beq.n	80045c8 <CheckIllegalEnterSwing+0xa4>
	{
		if (gGCUStatus.bAuthCount_EX)
 8004530:	4b4f      	ldr	r3, [pc, #316]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 8004532:	795b      	ldrb	r3, [r3, #5]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d039      	beq.n	80045ae <CheckIllegalEnterSwing+0x8a>
		{
			if (gGCUStatus.IllegalPass.b.nCounter_EX == FLG_OFF && isPassReady_EX == FALSE && psenNewSwing.b.s02)
 800453a:	4b4d      	ldr	r3, [pc, #308]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 800453c:	7f1b      	ldrb	r3, [r3, #28]
 800453e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d13f      	bne.n	80045c8 <CheckIllegalEnterSwing+0xa4>
 8004548:	4b4a      	ldr	r3, [pc, #296]	; (8004674 <CheckIllegalEnterSwing+0x150>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	f083 0301 	eor.w	r3, r3, #1
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d038      	beq.n	80045c8 <CheckIllegalEnterSwing+0xa4>
 8004556:	4b48      	ldr	r3, [pc, #288]	; (8004678 <CheckIllegalEnterSwing+0x154>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d031      	beq.n	80045c8 <CheckIllegalEnterSwing+0xa4>
			{
				if (isCounterEnter == FALSE)
 8004564:	4b45      	ldr	r3, [pc, #276]	; (800467c <CheckIllegalEnterSwing+0x158>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f083 0301 	eor.w	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d02a      	beq.n	80045c8 <CheckIllegalEnterSwing+0xa4>
				{
					SetTimer(&timerInverseEnter);
 8004572:	4843      	ldr	r0, [pc, #268]	; (8004680 <CheckIllegalEnterSwing+0x15c>)
 8004574:	f00b f830 	bl	800f5d8 <SetTimer>
					CloseBarrierForSwing();
 8004578:	f7ff f984 	bl	8003884 <CloseBarrierForSwing>
					isCounterEnter = TRUE;
 800457c:	4b3f      	ldr	r3, [pc, #252]	; (800467c <CheckIllegalEnterSwing+0x158>)
 800457e:	2201      	movs	r2, #1
 8004580:	701a      	strb	r2, [r3, #0]
					InhibitPass(FROM_ENTRY);
 8004582:	2001      	movs	r0, #1
 8004584:	f7fd fbee 	bl	8001d64 <InhibitPass>
					gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_COUNTER_ENTER;
 8004588:	4a39      	ldr	r2, [pc, #228]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 800458a:	7a13      	ldrb	r3, [r2, #8]
 800458c:	2102      	movs	r1, #2
 800458e:	f361 1306 	bfi	r3, r1, #4, #3
 8004592:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nCounter_EX = FLG_SET;
 8004594:	4a36      	ldr	r2, [pc, #216]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 8004596:	7f13      	ldrb	r3, [r2, #28]
 8004598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459c:	7713      	strb	r3, [r2, #28]
					//PRINTL(" [EX] Inhibit Pass - Inverse Enter:%d", gGCUStatus.bAuthCount_EX);
					printf(" [EX] Inhibit Pass - Inverse Enter:%d \n", gGCUStatus.bAuthCount_EX);
 800459e:	4b34      	ldr	r3, [pc, #208]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 80045a0:	795b      	ldrb	r3, [r3, #5]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	4619      	mov	r1, r3
 80045a6:	4837      	ldr	r0, [pc, #220]	; (8004684 <CheckIllegalEnterSwing+0x160>)
 80045a8:	f004 ff50 	bl	800944c <printf_>
 80045ac:	e00c      	b.n	80045c8 <CheckIllegalEnterSwing+0xa4>
				}
			}
		}
		else if (!gGCUStatus.bAuthCount_EN)
 80045ae:	4b30      	ldr	r3, [pc, #192]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 80045b0:	791b      	ldrb	r3, [r3, #4]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d107      	bne.n	80045c8 <CheckIllegalEnterSwing+0xa4>
		{
			if (CheckCritical())
 80045b8:	f7fe ff6a 	bl	8003490 <CheckCritical>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <CheckIllegalEnterSwing+0xa4>
			{
				CheckIllegalEnterTimer(FROM_ENTRY);
 80045c2:	2001      	movs	r0, #1
 80045c4:	f7fd fdcc 	bl	8002160 <CheckIllegalEnterTimer>
			}
		}
	}

	if (gisExitPassenger && gGCUStatus.PassageAlarm.b.nPassOverFromEN != ON)
 80045c8:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <CheckIllegalEnterSwing+0x164>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d04b      	beq.n	8004668 <CheckIllegalEnterSwing+0x144>
	{
		if (gGCUStatus.bAuthCount_EN)
 80045d0:	4b27      	ldr	r3, [pc, #156]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 80045d2:	791b      	ldrb	r3, [r3, #4]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d039      	beq.n	800464e <CheckIllegalEnterSwing+0x12a>
		{
			if (gGCUStatus.IllegalPass.b.nCounter_EN == FLG_OFF && isPassReady_EN == FALSE && psenNewSwing.b.s12)
 80045da:	4b25      	ldr	r3, [pc, #148]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 80045dc:	7f1b      	ldrb	r3, [r3, #28]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d13f      	bne.n	8004668 <CheckIllegalEnterSwing+0x144>
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <CheckIllegalEnterSwing+0x168>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	f083 0301 	eor.w	r3, r3, #1
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d038      	beq.n	8004668 <CheckIllegalEnterSwing+0x144>
 80045f6:	4b20      	ldr	r3, [pc, #128]	; (8004678 <CheckIllegalEnterSwing+0x154>)
 80045f8:	785b      	ldrb	r3, [r3, #1]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d031      	beq.n	8004668 <CheckIllegalEnterSwing+0x144>
			{
				if (isCounterEnter == FALSE)
 8004604:	4b1d      	ldr	r3, [pc, #116]	; (800467c <CheckIllegalEnterSwing+0x158>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f083 0301 	eor.w	r3, r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02a      	beq.n	8004668 <CheckIllegalEnterSwing+0x144>
				{
					SetTimer(&timerInverseEnter);
 8004612:	481b      	ldr	r0, [pc, #108]	; (8004680 <CheckIllegalEnterSwing+0x15c>)
 8004614:	f00a ffe0 	bl	800f5d8 <SetTimer>
					CloseBarrierForSwing();
 8004618:	f7ff f934 	bl	8003884 <CloseBarrierForSwing>
					isCounterEnter = TRUE;
 800461c:	4b17      	ldr	r3, [pc, #92]	; (800467c <CheckIllegalEnterSwing+0x158>)
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
					InhibitPass(FROM_EXIT);
 8004622:	2002      	movs	r0, #2
 8004624:	f7fd fb9e 	bl	8001d64 <InhibitPass>
					gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_COUNTER_ENTER;
 8004628:	4a11      	ldr	r2, [pc, #68]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 800462a:	7a13      	ldrb	r3, [r2, #8]
 800462c:	2102      	movs	r1, #2
 800462e:	f361 0302 	bfi	r3, r1, #0, #3
 8004632:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nCounter_EN = FLG_SET;
 8004634:	4a0e      	ldr	r2, [pc, #56]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 8004636:	7f13      	ldrb	r3, [r2, #28]
 8004638:	f043 0308 	orr.w	r3, r3, #8
 800463c:	7713      	strb	r3, [r2, #28]
					//PRINTL(" [EN] Inhibit Pass - Inverse Enter:%d", gGCUStatus.bAuthCount_EN);
					printf(" [EN] Inhibit Pass - Inverse Enter:%d \n", gGCUStatus.bAuthCount_EN);
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 8004640:	791b      	ldrb	r3, [r3, #4]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4619      	mov	r1, r3
 8004646:	4812      	ldr	r0, [pc, #72]	; (8004690 <CheckIllegalEnterSwing+0x16c>)
 8004648:	f004 ff00 	bl	800944c <printf_>
			{
				CheckIllegalEnterTimer(FROM_EXIT);
			}
		}
	}
}
 800464c:	e00c      	b.n	8004668 <CheckIllegalEnterSwing+0x144>
		else if (!gGCUStatus.bAuthCount_EX)
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <CheckIllegalEnterSwing+0x14c>)
 8004650:	795b      	ldrb	r3, [r3, #5]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d107      	bne.n	8004668 <CheckIllegalEnterSwing+0x144>
			if (CheckCritical())
 8004658:	f7fe ff1a 	bl	8003490 <CheckCritical>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <CheckIllegalEnterSwing+0x144>
				CheckIllegalEnterTimer(FROM_EXIT);
 8004662:	2002      	movs	r0, #2
 8004664:	f7fd fd7c 	bl	8002160 <CheckIllegalEnterTimer>
}
 8004668:	bf00      	nop
 800466a:	bd80      	pop	{r7, pc}
 800466c:	2400043b 	.word	0x2400043b
 8004670:	240004b0 	.word	0x240004b0
 8004674:	2400041d 	.word	0x2400041d
 8004678:	2400040c 	.word	0x2400040c
 800467c:	24000427 	.word	0x24000427
 8004680:	24000220 	.word	0x24000220
 8004684:	0801123c 	.word	0x0801123c
 8004688:	2400043c 	.word	0x2400043c
 800468c:	2400041c 	.word	0x2400041c
 8004690:	08011264 	.word	0x08011264

08004694 <CheckTGTimerForSwing>:

void CheckTGTimerForSwing(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
	if (timerTailgatingDetection.fStart)
 8004698:	4b31      	ldr	r3, [pc, #196]	; (8004760 <CheckTGTimerForSwing+0xcc>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d05d      	beq.n	800475c <CheckTGTimerForSwing+0xc8>
	{
		if (IsTimeout(&timerTailgatingDetection, dwTgDetectionTime * TICK_COUNT_100MS)) // 1.5 s
 80046a0:	4b30      	ldr	r3, [pc, #192]	; (8004764 <CheckTGTimerForSwing+0xd0>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4619      	mov	r1, r3
 80046ae:	482c      	ldr	r0, [pc, #176]	; (8004760 <CheckTGTimerForSwing+0xcc>)
 80046b0:	f00a ffb4 	bl	800f61c <IsTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d050      	beq.n	800475c <CheckTGTimerForSwing+0xc8>
		{
			ResetTimer(&timerTailgatingDetection);
 80046ba:	4829      	ldr	r0, [pc, #164]	; (8004760 <CheckTGTimerForSwing+0xcc>)
 80046bc:	f00a ffa0 	bl	800f600 <ResetTimer>

			if (gGCUStatus.bAuthCount_EN || gGCUStatus.bAuthCount_EX)
 80046c0:	4b29      	ldr	r3, [pc, #164]	; (8004768 <CheckTGTimerForSwing+0xd4>)
 80046c2:	791b      	ldrb	r3, [r3, #4]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d104      	bne.n	80046d4 <CheckTGTimerForSwing+0x40>
 80046ca:	4b27      	ldr	r3, [pc, #156]	; (8004768 <CheckTGTimerForSwing+0xd4>)
 80046cc:	795b      	ldrb	r3, [r3, #5]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d043      	beq.n	800475c <CheckTGTimerForSwing+0xc8>
			{
				if (!psenNewSwing.section.lower_EN && !psenNewSwing.section.lower_EX)
 80046d4:	4b25      	ldr	r3, [pc, #148]	; (800476c <CheckTGTimerForSwing+0xd8>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f023 030f 	bic.w	r3, r3, #15
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d135      	bne.n	800474e <CheckTGTimerForSwing+0xba>
 80046e2:	4b22      	ldr	r3, [pc, #136]	; (800476c <CheckTGTimerForSwing+0xd8>)
 80046e4:	785b      	ldrb	r3, [r3, #1]
 80046e6:	f023 030f 	bic.w	r3, r3, #15
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d12e      	bne.n	800474e <CheckTGTimerForSwing+0xba>
				{
					//PRINTL(" [CheckTGTimerForSwing] No follower [%d/%d]", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
					printf(" [CheckTGTimerForSwing] No follower [%d/%d] \n", gGCUStatus.bAuthCount_EN, gGCUStatus.bAuthCount_EX);
 80046f0:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <CheckTGTimerForSwing+0xd4>)
 80046f2:	791b      	ldrb	r3, [r3, #4]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	4619      	mov	r1, r3
 80046f8:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <CheckTGTimerForSwing+0xd4>)
 80046fa:	795b      	ldrb	r3, [r3, #5]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	481b      	ldr	r0, [pc, #108]	; (8004770 <CheckTGTimerForSwing+0xdc>)
 8004702:	f004 fea3 	bl	800944c <printf_>


					if (gGCUStatus.bAuthCount_EN > 0)
 8004706:	4b18      	ldr	r3, [pc, #96]	; (8004768 <CheckTGTimerForSwing+0xd4>)
 8004708:	791b      	ldrb	r3, [r3, #4]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <CheckTGTimerForSwing+0x8c>
					{
						gGCUStatus.bAuthCount_EN--;
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <CheckTGTimerForSwing+0xd4>)
 8004712:	791b      	ldrb	r3, [r3, #4]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b13      	ldr	r3, [pc, #76]	; (8004768 <CheckTGTimerForSwing+0xd4>)
 800471c:	711a      	strb	r2, [r3, #4]
 800471e:	e00b      	b.n	8004738 <CheckTGTimerForSwing+0xa4>
					}
					else if (gGCUStatus.bAuthCount_EX > 0)
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <CheckTGTimerForSwing+0xd4>)
 8004722:	795b      	ldrb	r3, [r3, #5]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d006      	beq.n	8004738 <CheckTGTimerForSwing+0xa4>
					{
						gGCUStatus.bAuthCount_EX--;
 800472a:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <CheckTGTimerForSwing+0xd4>)
 800472c:	795b      	ldrb	r3, [r3, #5]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b2da      	uxtb	r2, r3
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <CheckTGTimerForSwing+0xd4>)
 8004736:	715a      	strb	r2, [r3, #5]
					}

					if (CheckZeroAuthCount())
 8004738:	f7fe fe94 	bl	8003464 <CheckZeroAuthCount>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <CheckTGTimerForSwing+0xc8>
					{
						CloseBarrierForSwing();
 8004742:	f7ff f89f 	bl	8003884 <CloseBarrierForSwing>
						//PRINTL(" [CheckTGTimerForSwing] Close barrier!");
						printf(" [CheckTGTimerForSwing] Close barrier! \n");
 8004746:	480b      	ldr	r0, [pc, #44]	; (8004774 <CheckTGTimerForSwing+0xe0>)
 8004748:	f004 fe80 	bl	800944c <printf_>
					if (CheckZeroAuthCount())
 800474c:	e006      	b.n	800475c <CheckTGTimerForSwing+0xc8>
					}
				}
				else
				{
					//PRINTL(" [CheckTGTimerForSwing] Something still detected.");
					printf(" [CheckTGTimerForSwing] Something still detected.\n");
 800474e:	480a      	ldr	r0, [pc, #40]	; (8004778 <CheckTGTimerForSwing+0xe4>)
 8004750:	f004 fe7c 	bl	800944c <printf_>
					SetTimer(&timerTailgatingDetection);
 8004754:	4802      	ldr	r0, [pc, #8]	; (8004760 <CheckTGTimerForSwing+0xcc>)
 8004756:	f00a ff3f 	bl	800f5d8 <SetTimer>
				}
			}
		}
	}
}
 800475a:	e7ff      	b.n	800475c <CheckTGTimerForSwing+0xc8>
 800475c:	bf00      	nop
 800475e:	bd80      	pop	{r7, pc}
 8004760:	24000178 	.word	0x24000178
 8004764:	24000014 	.word	0x24000014
 8004768:	240004b0 	.word	0x240004b0
 800476c:	2400040c 	.word	0x2400040c
 8004770:	0801128c 	.word	0x0801128c
 8004774:	080112bc 	.word	0x080112bc
 8004778:	080112e8 	.word	0x080112e8

0800477c <CheckForceOpen>:

void CheckForceOpen(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
	if (timerForceOpenClear.fStart)
 8004780:	4b46      	ldr	r3, [pc, #280]	; (800489c <CheckForceOpen+0x120>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d023      	beq.n	80047d0 <CheckForceOpen+0x54>
	{
		if (IsTimeout(&timerForceOpenClear, dwForceOpenClearTime * TICK_COUNT_100MS))
 8004788:	4b45      	ldr	r3, [pc, #276]	; (80048a0 <CheckForceOpen+0x124>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	4619      	mov	r1, r3
 8004796:	4841      	ldr	r0, [pc, #260]	; (800489c <CheckForceOpen+0x120>)
 8004798:	f00a ff40 	bl	800f61c <IsTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d07a      	beq.n	8004898 <CheckForceOpen+0x11c>
		{
			//PRINTL(" [CheckForceOpen] Flag Clear!!!!");
			printf(" [CheckForceOpen] Flag Clear!!!! \n");
 80047a2:	4840      	ldr	r0, [pc, #256]	; (80048a4 <CheckForceOpen+0x128>)
 80047a4:	f004 fe52 	bl	800944c <printf_>
			ResetTimer(&timerForceOpenClear);
 80047a8:	483c      	ldr	r0, [pc, #240]	; (800489c <CheckForceOpen+0x120>)
 80047aa:	f00a ff29 	bl	800f600 <ResetTimer>
			isForceOpen = FALSE;
 80047ae:	4b3e      	ldr	r3, [pc, #248]	; (80048a8 <CheckForceOpen+0x12c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
			gGCUStatus.IllegalPass.b.nJumping_EN = FLG_OFF;
 80047b4:	4a3d      	ldr	r2, [pc, #244]	; (80048ac <CheckForceOpen+0x130>)
 80047b6:	7f13      	ldrb	r3, [r2, #28]
 80047b8:	f36f 0341 	bfc	r3, #1, #1
 80047bc:	7713      	strb	r3, [r2, #28]
			gGCUStatus.IllegalPass.b.nJumping_EX = FLG_OFF;
 80047be:	4a3b      	ldr	r2, [pc, #236]	; (80048ac <CheckForceOpen+0x130>)
 80047c0:	7f13      	ldrb	r3, [r2, #28]
 80047c2:	f36f 1345 	bfc	r3, #5, #1
 80047c6:	7713      	strb	r3, [r2, #28]
			gGCUStatus.bDoorForcedOpen = FROM_NONE;
 80047c8:	4b38      	ldr	r3, [pc, #224]	; (80048ac <CheckForceOpen+0x130>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	755a      	strb	r2, [r3, #21]
				//PRINTL(" [EX] Force Open!");
				printf(" [EX] Force Open! \n");
			}
		}
	}
}
 80047ce:	e063      	b.n	8004898 <CheckForceOpen+0x11c>
		if (isForceOpen == TRUE && gGCUStatus.bAuthCount_EN == 0 && gGCUStatus.bAuthCount_EX == 0)
 80047d0:	4b35      	ldr	r3, [pc, #212]	; (80048a8 <CheckForceOpen+0x12c>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05f      	beq.n	8004898 <CheckForceOpen+0x11c>
 80047d8:	4b34      	ldr	r3, [pc, #208]	; (80048ac <CheckForceOpen+0x130>)
 80047da:	791b      	ldrb	r3, [r3, #4]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d15a      	bne.n	8004898 <CheckForceOpen+0x11c>
 80047e2:	4b32      	ldr	r3, [pc, #200]	; (80048ac <CheckForceOpen+0x130>)
 80047e4:	795b      	ldrb	r3, [r3, #5]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d155      	bne.n	8004898 <CheckForceOpen+0x11c>
			if (isForceOpenReady_EN == TRUE && (psenNewSwing.b.s13 || psenNewSwing.b.s14))
 80047ec:	4b30      	ldr	r3, [pc, #192]	; (80048b0 <CheckForceOpen+0x134>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d026      	beq.n	8004842 <CheckForceOpen+0xc6>
 80047f4:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <CheckForceOpen+0x138>)
 80047f6:	785b      	ldrb	r3, [r3, #1]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <CheckForceOpen+0x94>
 8004802:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <CheckForceOpen+0x138>)
 8004804:	785b      	ldrb	r3, [r3, #1]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d018      	beq.n	8004842 <CheckForceOpen+0xc6>
				isForceOpenReady_EN = FALSE;
 8004810:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <CheckForceOpen+0x134>)
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
				gGCUStatus.bDoorForcedOpen = FROM_ENTRY;
 8004816:	4b25      	ldr	r3, [pc, #148]	; (80048ac <CheckForceOpen+0x130>)
 8004818:	2201      	movs	r2, #1
 800481a:	755a      	strb	r2, [r3, #21]
				ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 800481c:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <CheckForceOpen+0x13c>)
 800481e:	7a9b      	ldrb	r3, [r3, #10]
 8004820:	461a      	mov	r2, r3
 8004822:	2101      	movs	r1, #1
 8004824:	2000      	movs	r0, #0
 8004826:	f7fc fe51 	bl	80014cc <ControlBuzzer>
				InhibitPass(FROM_EXIT);
 800482a:	2002      	movs	r0, #2
 800482c:	f7fd fa9a 	bl	8001d64 <InhibitPass>
				SetTimer(&timerForceOpenClear);
 8004830:	481a      	ldr	r0, [pc, #104]	; (800489c <CheckForceOpen+0x120>)
 8004832:	f00a fed1 	bl	800f5d8 <SetTimer>
				isForceOpen = FALSE;
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <CheckForceOpen+0x12c>)
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
				printf(" [EN] Force Open! \n");
 800483c:	481f      	ldr	r0, [pc, #124]	; (80048bc <CheckForceOpen+0x140>)
 800483e:	f004 fe05 	bl	800944c <printf_>
			if (isForceOpenReady_EX == TRUE && (psenNewSwing.b.s05 || psenNewSwing.b.s06))
 8004842:	4b1f      	ldr	r3, [pc, #124]	; (80048c0 <CheckForceOpen+0x144>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d026      	beq.n	8004898 <CheckForceOpen+0x11c>
 800484a:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <CheckForceOpen+0x138>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <CheckForceOpen+0xea>
 8004858:	4b16      	ldr	r3, [pc, #88]	; (80048b4 <CheckForceOpen+0x138>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d018      	beq.n	8004898 <CheckForceOpen+0x11c>
				isForceOpenReady_EX = FALSE;
 8004866:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <CheckForceOpen+0x144>)
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
				gGCUStatus.bDoorForcedOpen = FROM_EXIT;
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <CheckForceOpen+0x130>)
 800486e:	2202      	movs	r2, #2
 8004870:	755a      	strb	r2, [r3, #21]
				ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <CheckForceOpen+0x13c>)
 8004874:	7a9b      	ldrb	r3, [r3, #10]
 8004876:	461a      	mov	r2, r3
 8004878:	2101      	movs	r1, #1
 800487a:	2000      	movs	r0, #0
 800487c:	f7fc fe26 	bl	80014cc <ControlBuzzer>
				InhibitPass(FROM_ENTRY);
 8004880:	2001      	movs	r0, #1
 8004882:	f7fd fa6f 	bl	8001d64 <InhibitPass>
				SetTimer(&timerForceOpenClear);
 8004886:	4805      	ldr	r0, [pc, #20]	; (800489c <CheckForceOpen+0x120>)
 8004888:	f00a fea6 	bl	800f5d8 <SetTimer>
				isForceOpen = FALSE;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <CheckForceOpen+0x12c>)
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
				printf(" [EX] Force Open! \n");
 8004892:	480c      	ldr	r0, [pc, #48]	; (80048c4 <CheckForceOpen+0x148>)
 8004894:	f004 fdda 	bl	800944c <printf_>
}
 8004898:	bf00      	nop
 800489a:	bd80      	pop	{r7, pc}
 800489c:	24000214 	.word	0x24000214
 80048a0:	24000024 	.word	0x24000024
 80048a4:	0801131c 	.word	0x0801131c
 80048a8:	24000425 	.word	0x24000425
 80048ac:	240004b0 	.word	0x240004b0
 80048b0:	24000422 	.word	0x24000422
 80048b4:	2400040c 	.word	0x2400040c
 80048b8:	240004a0 	.word	0x240004a0
 80048bc:	08011340 	.word	0x08011340
 80048c0:	24000423 	.word	0x24000423
 80048c4:	08011354 	.word	0x08011354

080048c8 <CheckBarrierStop>:

void CheckBarrierStop(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
	if (timerBarrierStop.fStart)
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <CheckBarrierStop+0x44>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d018      	beq.n	8004906 <CheckBarrierStop+0x3e>
	{
		if (IsTimeout(&timerBarrierStop, dwBarrierStopTime * TICK_COUNT_100MS))
 80048d4:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <CheckBarrierStop+0x48>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4619      	mov	r1, r3
 80048e2:	480a      	ldr	r0, [pc, #40]	; (800490c <CheckBarrierStop+0x44>)
 80048e4:	f00a fe9a 	bl	800f61c <IsTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <CheckBarrierStop+0x3e>
		{
			//PRINTL(" [CheckBarrierStop] Safety Stop Expired");
			printf(" [CheckBarrierStop] Safety Stop Expired \n");
 80048ee:	4809      	ldr	r0, [pc, #36]	; (8004914 <CheckBarrierStop+0x4c>)
 80048f0:	f004 fdac 	bl	800944c <printf_>
			StopBarrierForSwing(FALSE);
 80048f4:	2000      	movs	r0, #0
 80048f6:	f7fe fe4d 	bl	8003594 <StopBarrierForSwing>
			ResetTimer(&timerBarrierStop);
 80048fa:	4804      	ldr	r0, [pc, #16]	; (800490c <CheckBarrierStop+0x44>)
 80048fc:	f00a fe80 	bl	800f600 <ResetTimer>
			SetTimer(&timerSafety);
 8004900:	4805      	ldr	r0, [pc, #20]	; (8004918 <CheckBarrierStop+0x50>)
 8004902:	f00a fe69 	bl	800f5d8 <SetTimer>
		}
	}
}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	24000208 	.word	0x24000208
 8004910:	24000020 	.word	0x24000020
 8004914:	08011368 	.word	0x08011368
 8004918:	240001e4 	.word	0x240001e4

0800491c <CheckSafetyTimerForSwing>:

void CheckSafetyTimerForSwing(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
	if (timerSafety.fStart)
 8004920:	4b95      	ldr	r3, [pc, #596]	; (8004b78 <CheckSafetyTimerForSwing+0x25c>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8124 	beq.w	8004b72 <CheckSafetyTimerForSwing+0x256>
	{
		if (IsTimeout(&timerSafety, gdwTimeoutSafety * TICK_COUNT_100MS))
 800492a:	4b94      	ldr	r3, [pc, #592]	; (8004b7c <CheckSafetyTimerForSwing+0x260>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4619      	mov	r1, r3
 8004938:	488f      	ldr	r0, [pc, #572]	; (8004b78 <CheckSafetyTimerForSwing+0x25c>)
 800493a:	f00a fe6f 	bl	800f61c <IsTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00f      	beq.n	8004964 <CheckSafetyTimerForSwing+0x48>
		{
			//PRINTL(" [CheckSafetyTimerForSwing] Safety Time Out!");
			printf(" [CheckSafetyTimerForSwing] Safety Time Out! \n");
 8004944:	488e      	ldr	r0, [pc, #568]	; (8004b80 <CheckSafetyTimerForSwing+0x264>)
 8004946:	f004 fd81 	bl	800944c <printf_>
			ResetTimer(&timerSafety);
 800494a:	488b      	ldr	r0, [pc, #556]	; (8004b78 <CheckSafetyTimerForSwing+0x25c>)
 800494c:	f00a fe58 	bl	800f600 <ResetTimer>
			gbAuthDirection = FROM_NONE;
 8004950:	4b8c      	ldr	r3, [pc, #560]	; (8004b84 <CheckSafetyTimerForSwing+0x268>)
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
			isSafetyOn = FALSE;
 8004956:	4b8c      	ldr	r3, [pc, #560]	; (8004b88 <CheckSafetyTimerForSwing+0x26c>)
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
			isSentClose = FALSE;
 800495c:	4b8b      	ldr	r3, [pc, #556]	; (8004b8c <CheckSafetyTimerForSwing+0x270>)
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8004962:	e106      	b.n	8004b72 <CheckSafetyTimerForSwing+0x256>
			if (gbEmergencyFlag == FLG_OFF || gfTestMode == TRUE)
 8004964:	4b8a      	ldr	r3, [pc, #552]	; (8004b90 <CheckSafetyTimerForSwing+0x274>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d004      	beq.n	8004976 <CheckSafetyTimerForSwing+0x5a>
 800496c:	4b89      	ldr	r3, [pc, #548]	; (8004b94 <CheckSafetyTimerForSwing+0x278>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80fe 	beq.w	8004b72 <CheckSafetyTimerForSwing+0x256>
				if (gbAuthDirection == FROM_ENTRY)
 8004976:	4b83      	ldr	r3, [pc, #524]	; (8004b84 <CheckSafetyTimerForSwing+0x268>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d158      	bne.n	8004a30 <CheckSafetyTimerForSwing+0x114>
					gGCUStatus.bSafetyDetection = FLG_SET;
 800497e:	4b86      	ldr	r3, [pc, #536]	; (8004b98 <CheckSafetyTimerForSwing+0x27c>)
 8004980:	2201      	movs	r2, #1
 8004982:	74da      	strb	r2, [r3, #19]
					if (psenNewSwing.section.lower_EX || psenNewSwing.b.s04 || psenNewSwing.b.s08 || gfAISafetyOn == TRUE)
 8004984:	4b85      	ldr	r3, [pc, #532]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004986:	785b      	ldrb	r3, [r3, #1]
 8004988:	f023 030f 	bic.w	r3, r3, #15
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d111      	bne.n	80049b6 <CheckSafetyTimerForSwing+0x9a>
 8004992:	4b82      	ldr	r3, [pc, #520]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <CheckSafetyTimerForSwing+0x9a>
 80049a0:	4b7e      	ldr	r3, [pc, #504]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d103      	bne.n	80049b6 <CheckSafetyTimerForSwing+0x9a>
 80049ae:	4b7c      	ldr	r3, [pc, #496]	; (8004ba0 <CheckSafetyTimerForSwing+0x284>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d023      	beq.n	80049fe <CheckSafetyTimerForSwing+0xe2>
						printf(" [EN] Safety Activation [%d/%d/%d] \n", psenNewSwing.section.lower_EX, psenNewSwing.b.s04, psenNewSwing.b.s08);
 80049b6:	4b79      	ldr	r3, [pc, #484]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	f343 1303 	sbfx	r3, r3, #4, #4
 80049be:	b25b      	sxtb	r3, r3
 80049c0:	4619      	mov	r1, r3
 80049c2:	4b76      	ldr	r3, [pc, #472]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	f343 03c0 	sbfx	r3, r3, #3, #1
 80049ca:	b25b      	sxtb	r3, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	4b73      	ldr	r3, [pc, #460]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	f343 13c0 	sbfx	r3, r3, #7, #1
 80049d6:	b25b      	sxtb	r3, r3
 80049d8:	4872      	ldr	r0, [pc, #456]	; (8004ba4 <CheckSafetyTimerForSwing+0x288>)
 80049da:	f004 fd37 	bl	800944c <printf_>
						StopBarrierForSwing(TRUE);
 80049de:	2001      	movs	r0, #1
 80049e0:	f7fe fdd8 	bl	8003594 <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 80049e4:	4864      	ldr	r0, [pc, #400]	; (8004b78 <CheckSafetyTimerForSwing+0x25c>)
 80049e6:	f00a fe0b 	bl	800f600 <ResetTimer>
						SetTimer(&timerBarrierStop);
 80049ea:	486f      	ldr	r0, [pc, #444]	; (8004ba8 <CheckSafetyTimerForSwing+0x28c>)
 80049ec:	f00a fdf4 	bl	800f5d8 <SetTimer>
						isSafetyOn = TRUE;
 80049f0:	4b65      	ldr	r3, [pc, #404]	; (8004b88 <CheckSafetyTimerForSwing+0x26c>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 80049f6:	4b65      	ldr	r3, [pc, #404]	; (8004b8c <CheckSafetyTimerForSwing+0x270>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	e0b9      	b.n	8004b72 <CheckSafetyTimerForSwing+0x256>
						if (!psenNewSwing.b.s08 && isSentClose == FALSE)
 80049fe:	4b67      	ldr	r3, [pc, #412]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f040 80b2 	bne.w	8004b72 <CheckSafetyTimerForSwing+0x256>
 8004a0e:	4b5f      	ldr	r3, [pc, #380]	; (8004b8c <CheckSafetyTimerForSwing+0x270>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	f083 0301 	eor.w	r3, r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80aa 	beq.w	8004b72 <CheckSafetyTimerForSwing+0x256>
							gGCUStatus.bSafetyDetection = FLG_OFF;
 8004a1e:	4b5e      	ldr	r3, [pc, #376]	; (8004b98 <CheckSafetyTimerForSwing+0x27c>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	74da      	strb	r2, [r3, #19]
							isSentClose = TRUE;
 8004a24:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <CheckSafetyTimerForSwing+0x270>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
							CloseBarrierForSwing();
 8004a2a:	f7fe ff2b 	bl	8003884 <CloseBarrierForSwing>
}
 8004a2e:	e0a0      	b.n	8004b72 <CheckSafetyTimerForSwing+0x256>
				else if (gbAuthDirection == FROM_EXIT)
 8004a30:	4b54      	ldr	r3, [pc, #336]	; (8004b84 <CheckSafetyTimerForSwing+0x268>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d156      	bne.n	8004ae6 <CheckSafetyTimerForSwing+0x1ca>
					gGCUStatus.bSafetyDetection = FLG_SET;
 8004a38:	4b57      	ldr	r3, [pc, #348]	; (8004b98 <CheckSafetyTimerForSwing+0x27c>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	74da      	strb	r2, [r3, #19]
					if (psenNewSwing.section.lower_EN || psenNewSwing.b.s12 || psenNewSwing.b.s16 || gfAISafetyOn == TRUE)
 8004a3e:	4b57      	ldr	r3, [pc, #348]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	f023 030f 	bic.w	r3, r3, #15
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d111      	bne.n	8004a70 <CheckSafetyTimerForSwing+0x154>
 8004a4c:	4b53      	ldr	r3, [pc, #332]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <CheckSafetyTimerForSwing+0x154>
 8004a5a:	4b50      	ldr	r3, [pc, #320]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004a5c:	785b      	ldrb	r3, [r3, #1]
 8004a5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <CheckSafetyTimerForSwing+0x154>
 8004a68:	4b4d      	ldr	r3, [pc, #308]	; (8004ba0 <CheckSafetyTimerForSwing+0x284>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d023      	beq.n	8004ab8 <CheckSafetyTimerForSwing+0x19c>
						printf(" [EX] Safety Activation [%d/%d/%d] \n", psenNewSwing.section.lower_EN, psenNewSwing.b.s12, psenNewSwing.b.s16);
 8004a70:	4b4a      	ldr	r3, [pc, #296]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	f343 1303 	sbfx	r3, r3, #4, #4
 8004a78:	b25b      	sxtb	r3, r3
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4b47      	ldr	r3, [pc, #284]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004a7e:	785b      	ldrb	r3, [r3, #1]
 8004a80:	f343 03c0 	sbfx	r3, r3, #3, #1
 8004a84:	b25b      	sxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b44      	ldr	r3, [pc, #272]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	f343 13c0 	sbfx	r3, r3, #7, #1
 8004a90:	b25b      	sxtb	r3, r3
 8004a92:	4846      	ldr	r0, [pc, #280]	; (8004bac <CheckSafetyTimerForSwing+0x290>)
 8004a94:	f004 fcda 	bl	800944c <printf_>
						StopBarrierForSwing(TRUE);
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f7fe fd7b 	bl	8003594 <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 8004a9e:	4836      	ldr	r0, [pc, #216]	; (8004b78 <CheckSafetyTimerForSwing+0x25c>)
 8004aa0:	f00a fdae 	bl	800f600 <ResetTimer>
						SetTimer(&timerBarrierStop);
 8004aa4:	4840      	ldr	r0, [pc, #256]	; (8004ba8 <CheckSafetyTimerForSwing+0x28c>)
 8004aa6:	f00a fd97 	bl	800f5d8 <SetTimer>
						isSafetyOn = TRUE;
 8004aaa:	4b37      	ldr	r3, [pc, #220]	; (8004b88 <CheckSafetyTimerForSwing+0x26c>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 8004ab0:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <CheckSafetyTimerForSwing+0x270>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	e05c      	b.n	8004b72 <CheckSafetyTimerForSwing+0x256>
						if (!psenNewSwing.b.s16 && isSentClose == FALSE)
 8004ab8:	4b38      	ldr	r3, [pc, #224]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d155      	bne.n	8004b72 <CheckSafetyTimerForSwing+0x256>
 8004ac6:	4b31      	ldr	r3, [pc, #196]	; (8004b8c <CheckSafetyTimerForSwing+0x270>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	f083 0301 	eor.w	r3, r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d04e      	beq.n	8004b72 <CheckSafetyTimerForSwing+0x256>
							gGCUStatus.bSafetyDetection = FLG_OFF;
 8004ad4:	4b30      	ldr	r3, [pc, #192]	; (8004b98 <CheckSafetyTimerForSwing+0x27c>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	74da      	strb	r2, [r3, #19]
							isSentClose = TRUE;
 8004ada:	4b2c      	ldr	r3, [pc, #176]	; (8004b8c <CheckSafetyTimerForSwing+0x270>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	701a      	strb	r2, [r3, #0]
							CloseBarrierForSwing();
 8004ae0:	f7fe fed0 	bl	8003884 <CloseBarrierForSwing>
}
 8004ae4:	e045      	b.n	8004b72 <CheckSafetyTimerForSwing+0x256>
					if (psenNewSwing.section.lower_EN || psenNewSwing.section.lower_EN || psenNewSwing.b.s02 || psenNewSwing.b.s10 || gfAISafetyOn == TRUE)
 8004ae6:	4b2d      	ldr	r3, [pc, #180]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f023 030f 	bic.w	r3, r3, #15
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d118      	bne.n	8004b26 <CheckSafetyTimerForSwing+0x20a>
 8004af4:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	f023 030f 	bic.w	r3, r3, #15
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d111      	bne.n	8004b26 <CheckSafetyTimerForSwing+0x20a>
 8004b02:	4b26      	ldr	r3, [pc, #152]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <CheckSafetyTimerForSwing+0x20a>
 8004b10:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <CheckSafetyTimerForSwing+0x280>)
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <CheckSafetyTimerForSwing+0x20a>
 8004b1e:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <CheckSafetyTimerForSwing+0x284>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d015      	beq.n	8004b52 <CheckSafetyTimerForSwing+0x236>
						printf(" [EN/EX] Safety Activation \n");
 8004b26:	4822      	ldr	r0, [pc, #136]	; (8004bb0 <CheckSafetyTimerForSwing+0x294>)
 8004b28:	f004 fc90 	bl	800944c <printf_>
						gGCUStatus.bSafetyDetection = FLG_SET;
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <CheckSafetyTimerForSwing+0x27c>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	74da      	strb	r2, [r3, #19]
						StopBarrierForSwing(TRUE);
 8004b32:	2001      	movs	r0, #1
 8004b34:	f7fe fd2e 	bl	8003594 <StopBarrierForSwing>
						ResetTimer(&timerSafety);
 8004b38:	480f      	ldr	r0, [pc, #60]	; (8004b78 <CheckSafetyTimerForSwing+0x25c>)
 8004b3a:	f00a fd61 	bl	800f600 <ResetTimer>
						SetTimer(&timerBarrierStop);
 8004b3e:	481a      	ldr	r0, [pc, #104]	; (8004ba8 <CheckSafetyTimerForSwing+0x28c>)
 8004b40:	f00a fd4a 	bl	800f5d8 <SetTimer>
						isSafetyOn = TRUE;
 8004b44:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <CheckSafetyTimerForSwing+0x26c>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]
						isSentClose = FALSE;
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <CheckSafetyTimerForSwing+0x270>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	e00f      	b.n	8004b72 <CheckSafetyTimerForSwing+0x256>
					else if (isSentClose == FALSE)
 8004b52:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <CheckSafetyTimerForSwing+0x270>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	f083 0301 	eor.w	r3, r3, #1
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <CheckSafetyTimerForSwing+0x256>
						gGCUStatus.bSafetyDetection = FLG_OFF;
 8004b60:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <CheckSafetyTimerForSwing+0x27c>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	74da      	strb	r2, [r3, #19]
						isSentClose = TRUE;
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <CheckSafetyTimerForSwing+0x270>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]
						CloseBarrierForSwing();
 8004b6c:	f7fe fe8a 	bl	8003884 <CloseBarrierForSwing>
}
 8004b70:	e7ff      	b.n	8004b72 <CheckSafetyTimerForSwing+0x256>
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	240001e4 	.word	0x240001e4
 8004b7c:	24000148 	.word	0x24000148
 8004b80:	08011394 	.word	0x08011394
 8004b84:	2400012e 	.word	0x2400012e
 8004b88:	24000426 	.word	0x24000426
 8004b8c:	2400042b 	.word	0x2400042b
 8004b90:	2400012d 	.word	0x2400012d
 8004b94:	2400043e 	.word	0x2400043e
 8004b98:	240004b0 	.word	0x240004b0
 8004b9c:	2400040c 	.word	0x2400040c
 8004ba0:	2400043f 	.word	0x2400043f
 8004ba4:	080113c4 	.word	0x080113c4
 8004ba8:	24000208 	.word	0x24000208
 8004bac:	080113ec 	.word	0x080113ec
 8004bb0:	08011414 	.word	0x08011414

08004bb4 <CheckResetTimer>:

void CheckResetTimer(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
	if (timerReset.fStart)
 8004bb8:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <CheckResetTimer+0x124>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d05d      	beq.n	8004c7c <CheckResetTimer+0xc8>
	{
		if (IsTimeout(&timerReset, dwResetTime * TICK_COUNT_100MS))
 8004bc0:	4b46      	ldr	r3, [pc, #280]	; (8004cdc <CheckResetTimer+0x128>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4842      	ldr	r0, [pc, #264]	; (8004cd8 <CheckResetTimer+0x124>)
 8004bd0:	f00a fd24 	bl	800f61c <IsTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d07b      	beq.n	8004cd2 <CheckResetTimer+0x11e>
		{
			ResetTimer(&timerReset);
 8004bda:	483f      	ldr	r0, [pc, #252]	; (8004cd8 <CheckResetTimer+0x124>)
 8004bdc:	f00a fd10 	bl	800f600 <ResetTimer>

			if (gbEmergencyFlag == FLG_SET)
 8004be0:	4b3f      	ldr	r3, [pc, #252]	; (8004ce0 <CheckResetTimer+0x12c>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d13f      	bne.n	8004c68 <CheckResetTimer+0xb4>
			{
				if (!psenNewSwing.dirEntry.enter && !psenNewSwing.section.lower_EN && !psenNewSwing.side.exit)
 8004be8:	4b3e      	ldr	r3, [pc, #248]	; (8004ce4 <CheckResetTimer+0x130>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d124      	bne.n	8004c40 <CheckResetTimer+0x8c>
 8004bf6:	4b3b      	ldr	r3, [pc, #236]	; (8004ce4 <CheckResetTimer+0x130>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	f023 030f 	bic.w	r3, r3, #15
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d11d      	bne.n	8004c40 <CheckResetTimer+0x8c>
 8004c04:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <CheckResetTimer+0x130>)
 8004c06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d118      	bne.n	8004c40 <CheckResetTimer+0x8c>
				{
					isCalibrationStart = TRUE;
 8004c0e:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <CheckResetTimer+0x134>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
					isSafetyOn4Init = FALSE;
 8004c14:	4b35      	ldr	r3, [pc, #212]	; (8004cec <CheckResetTimer+0x138>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
					Brr_SetEmergency(FALSE);
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f7fb fd32 	bl	8000684 <Brr_SetEmergency>
					gbEmergencyFlag = FLG_OFF;
 8004c20:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <CheckResetTimer+0x12c>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
					ControlIndicatorBlink(FLG_OFF);
 8004c26:	2000      	movs	r0, #0
 8004c28:	f7fc fd8e 	bl	8001748 <ControlIndicatorBlink>
					gbBarrierCmd = BARRIER_CLOSE_S;
 8004c2c:	4b30      	ldr	r3, [pc, #192]	; (8004cf0 <CheckResetTimer+0x13c>)
 8004c2e:	2203      	movs	r2, #3
 8004c30:	701a      	strb	r2, [r3, #0]
					dwResetTime = 90;
 8004c32:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <CheckResetTimer+0x128>)
 8004c34:	225a      	movs	r2, #90	; 0x5a
 8004c36:	601a      	str	r2, [r3, #0]
					SetTimer(&timerReset);
 8004c38:	4827      	ldr	r0, [pc, #156]	; (8004cd8 <CheckResetTimer+0x124>)
 8004c3a:	f00a fccd 	bl	800f5d8 <SetTimer>
				isCalibrationStart = FALSE;
				InitPassageModeForSwing();
			}
		}
	}
}
 8004c3e:	e048      	b.n	8004cd2 <CheckResetTimer+0x11e>
					isSafetyOn4Init = TRUE;
 8004c40:	4b2a      	ldr	r3, [pc, #168]	; (8004cec <CheckResetTimer+0x138>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	701a      	strb	r2, [r3, #0]
					gGCUStatus.ModuleAlarm.b.nFDoor1 = FDOOR_ALARM_CLOSE_FAULT;
 8004c46:	4a2b      	ldr	r2, [pc, #172]	; (8004cf4 <CheckResetTimer+0x140>)
 8004c48:	7b13      	ldrb	r3, [r2, #12]
 8004c4a:	f06f 0101 	mvn.w	r1, #1
 8004c4e:	f361 0301 	bfi	r3, r1, #0, #2
 8004c52:	7313      	strb	r3, [r2, #12]
					gGCUStatus.ModuleAlarm.b.nFDoor2 = FDOOR_ALARM_CLOSE_FAULT;
 8004c54:	4a27      	ldr	r2, [pc, #156]	; (8004cf4 <CheckResetTimer+0x140>)
 8004c56:	7b13      	ldrb	r3, [r2, #12]
 8004c58:	f06f 0101 	mvn.w	r1, #1
 8004c5c:	f361 0383 	bfi	r3, r1, #2, #2
 8004c60:	7313      	strb	r3, [r2, #12]
					InitPassageModeForSwing();
 8004c62:	f7fe fca9 	bl	80035b8 <InitPassageModeForSwing>
}
 8004c66:	e034      	b.n	8004cd2 <CheckResetTimer+0x11e>
				Brr_SetSerialComm(TRUE);
 8004c68:	2001      	movs	r0, #1
 8004c6a:	f7fb fd2b 	bl	80006c4 <Brr_SetSerialComm>
				isCalibration = TRUE;
 8004c6e:	4b22      	ldr	r3, [pc, #136]	; (8004cf8 <CheckResetTimer+0x144>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]
				nCalibrationCnt = 0;
 8004c74:	4b21      	ldr	r3, [pc, #132]	; (8004cfc <CheckResetTimer+0x148>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
}
 8004c7a:	e02a      	b.n	8004cd2 <CheckResetTimer+0x11e>
		if (isCalibration == TRUE)
 8004c7c:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <CheckResetTimer+0x144>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d026      	beq.n	8004cd2 <CheckResetTimer+0x11e>
			if (nCalibrationCnt <= 300)
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <CheckResetTimer+0x148>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004c8c:	dc16      	bgt.n	8004cbc <CheckResetTimer+0x108>
				if (nCalibrationCnt % 20 == 0)
 8004c8e:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <CheckResetTimer+0x148>)
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <CheckResetTimer+0x14c>)
 8004c94:	fb83 2301 	smull	r2, r3, r3, r1
 8004c98:	10da      	asrs	r2, r3, #3
 8004c9a:	17cb      	asrs	r3, r1, #31
 8004c9c:	1ad2      	subs	r2, r2, r3
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	1aca      	subs	r2, r1, r3
 8004ca8:	2a00      	cmp	r2, #0
 8004caa:	d101      	bne.n	8004cb0 <CheckResetTimer+0xfc>
					Brr_CloseBarrier();
 8004cac:	f7fb fd4c 	bl	8000748 <Brr_CloseBarrier>
				nCalibrationCnt++;
 8004cb0:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <CheckResetTimer+0x148>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	4a11      	ldr	r2, [pc, #68]	; (8004cfc <CheckResetTimer+0x148>)
 8004cb8:	6013      	str	r3, [r2, #0]
}
 8004cba:	e00a      	b.n	8004cd2 <CheckResetTimer+0x11e>
				nCalibrationCnt = 0;
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <CheckResetTimer+0x148>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
				isCalibration = FALSE;
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <CheckResetTimer+0x144>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	701a      	strb	r2, [r3, #0]
				isCalibrationStart = FALSE;
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <CheckResetTimer+0x134>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
				InitPassageModeForSwing();
 8004cce:	f7fe fc73 	bl	80035b8 <InitPassageModeForSwing>
}
 8004cd2:	bf00      	nop
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	2400022c 	.word	0x2400022c
 8004cdc:	2400000c 	.word	0x2400000c
 8004ce0:	2400012d 	.word	0x2400012d
 8004ce4:	2400040c 	.word	0x2400040c
 8004ce8:	2400042a 	.word	0x2400042a
 8004cec:	24000428 	.word	0x24000428
 8004cf0:	24000028 	.word	0x24000028
 8004cf4:	240004b0 	.word	0x240004b0
 8004cf8:	24000429 	.word	0x24000429
 8004cfc:	2400042c 	.word	0x2400042c
 8004d00:	66666667 	.word	0x66666667

08004d04 <CheckTailgateFilterTimer>:
		}
	}
}

void CheckTailgateFilterTimer(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
	if (timerTgFilter.fStart)
 8004d08:	4b41      	ldr	r3, [pc, #260]	; (8004e10 <CheckTailgateFilterTimer+0x10c>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d07c      	beq.n	8004e0a <CheckTailgateFilterTimer+0x106>
	{
		if (IsTimeout(&timerTgFilter, dwTgFilterTime * TICK_COUNT_100MS))
 8004d10:	4b40      	ldr	r3, [pc, #256]	; (8004e14 <CheckTailgateFilterTimer+0x110>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	483c      	ldr	r0, [pc, #240]	; (8004e10 <CheckTailgateFilterTimer+0x10c>)
 8004d20:	f00a fc7c 	bl	800f61c <IsTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d04a      	beq.n	8004dc0 <CheckTailgateFilterTimer+0xbc>
		{
			ResetTimer(&timerTgFilter);
 8004d2a:	4839      	ldr	r0, [pc, #228]	; (8004e10 <CheckTailgateFilterTimer+0x10c>)
 8004d2c:	f00a fc68 	bl	800f600 <ResetTimer>

			if (isLuggageSet_EN == TRUE)
 8004d30:	4b39      	ldr	r3, [pc, #228]	; (8004e18 <CheckTailgateFilterTimer+0x114>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <CheckTailgateFilterTimer+0x3c>
			{
				//PRINTL(" [CheckTailgateFilterTimer] Luggage sensors detected. No EN TG!!");
				printf(" [CheckTailgateFilterTimer] Luggage sensors detected. No EN TG!! \n");
 8004d38:	4838      	ldr	r0, [pc, #224]	; (8004e1c <CheckTailgateFilterTimer+0x118>)
 8004d3a:	f004 fb87 	bl	800944c <printf_>
				printf(" [CheckTailgateFilterTimer] Something detected. No EX TG!! \n");
				ResetTimer(&timerTgFilter);
			}
		}
	}
}
 8004d3e:	e064      	b.n	8004e0a <CheckTailgateFilterTimer+0x106>
			else if (isLuggageSet_EX == TRUE)
 8004d40:	4b37      	ldr	r3, [pc, #220]	; (8004e20 <CheckTailgateFilterTimer+0x11c>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <CheckTailgateFilterTimer+0x4c>
				printf(" [CheckTailgateFilterTimer] Luggage sensors detected. No EX TG!! \n");
 8004d48:	4836      	ldr	r0, [pc, #216]	; (8004e24 <CheckTailgateFilterTimer+0x120>)
 8004d4a:	f004 fb7f 	bl	800944c <printf_>
}
 8004d4e:	e05c      	b.n	8004e0a <CheckTailgateFilterTimer+0x106>
				ControlDirectionLED(DIR_RED, DIR_RED);
 8004d50:	2102      	movs	r1, #2
 8004d52:	2002      	movs	r0, #2
 8004d54:	f7fc fc14 	bl	8001580 <ControlDirectionLED>
				ControlIndicatorBlink(FLG_SET);
 8004d58:	2001      	movs	r0, #1
 8004d5a:	f7fc fcf5 	bl	8001748 <ControlIndicatorBlink>
				ControlBuzzer(BUZZER_NO_MAIN, BUZZER_ON, gGCUParameter.bAlarmTimeout);
 8004d5e:	4b32      	ldr	r3, [pc, #200]	; (8004e28 <CheckTailgateFilterTimer+0x124>)
 8004d60:	7a9b      	ldrb	r3, [r3, #10]
 8004d62:	461a      	mov	r2, r3
 8004d64:	2101      	movs	r1, #1
 8004d66:	2000      	movs	r0, #0
 8004d68:	f7fc fbb0 	bl	80014cc <ControlBuzzer>
				SetTailgatingTimer();
 8004d6c:	f7fd faa6 	bl	80022bc <SetTailgatingTimer>
				if (gGCUStatus.bAuthCount_EN)
 8004d70:	4b2e      	ldr	r3, [pc, #184]	; (8004e2c <CheckTailgateFilterTimer+0x128>)
 8004d72:	791b      	ldrb	r3, [r3, #4]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00e      	beq.n	8004d98 <CheckTailgateFilterTimer+0x94>
					gGCUStatus.PassageAlarm.b.nFromEN = PASS_ALARM_TAILGATING;
 8004d7a:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <CheckTailgateFilterTimer+0x128>)
 8004d7c:	7a13      	ldrb	r3, [r2, #8]
 8004d7e:	2103      	movs	r1, #3
 8004d80:	f361 0302 	bfi	r3, r1, #0, #3
 8004d84:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nTailgating_EN = FLG_SET;
 8004d86:	4a29      	ldr	r2, [pc, #164]	; (8004e2c <CheckTailgateFilterTimer+0x128>)
 8004d88:	7f13      	ldrb	r3, [r2, #28]
 8004d8a:	f043 0301 	orr.w	r3, r3, #1
 8004d8e:	7713      	strb	r3, [r2, #28]
					printf(" [EN] Tailgating detected! \n");
 8004d90:	4827      	ldr	r0, [pc, #156]	; (8004e30 <CheckTailgateFilterTimer+0x12c>)
 8004d92:	f004 fb5b 	bl	800944c <printf_>
}
 8004d96:	e038      	b.n	8004e0a <CheckTailgateFilterTimer+0x106>
				else if (gGCUStatus.bAuthCount_EX)
 8004d98:	4b24      	ldr	r3, [pc, #144]	; (8004e2c <CheckTailgateFilterTimer+0x128>)
 8004d9a:	795b      	ldrb	r3, [r3, #5]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d033      	beq.n	8004e0a <CheckTailgateFilterTimer+0x106>
					gGCUStatus.PassageAlarm.b.nFromEX = PASS_ALARM_TAILGATING;
 8004da2:	4a22      	ldr	r2, [pc, #136]	; (8004e2c <CheckTailgateFilterTimer+0x128>)
 8004da4:	7a13      	ldrb	r3, [r2, #8]
 8004da6:	2103      	movs	r1, #3
 8004da8:	f361 1306 	bfi	r3, r1, #4, #3
 8004dac:	7213      	strb	r3, [r2, #8]
					gGCUStatus.IllegalPass.b.nTailgating_EX = FLG_SET;
 8004dae:	4a1f      	ldr	r2, [pc, #124]	; (8004e2c <CheckTailgateFilterTimer+0x128>)
 8004db0:	7f13      	ldrb	r3, [r2, #28]
 8004db2:	f043 0310 	orr.w	r3, r3, #16
 8004db6:	7713      	strb	r3, [r2, #28]
					printf(" [EX] Tailgating detected! \n");
 8004db8:	481e      	ldr	r0, [pc, #120]	; (8004e34 <CheckTailgateFilterTimer+0x130>)
 8004dba:	f004 fb47 	bl	800944c <printf_>
}
 8004dbe:	e024      	b.n	8004e0a <CheckTailgateFilterTimer+0x106>
			if (gGCUStatus.bAuthCount_EN && psenNewSwing.b.s13)
 8004dc0:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <CheckTailgateFilterTimer+0x128>)
 8004dc2:	791b      	ldrb	r3, [r3, #4]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <CheckTailgateFilterTimer+0xe2>
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <CheckTailgateFilterTimer+0x134>)
 8004dcc:	785b      	ldrb	r3, [r3, #1]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d006      	beq.n	8004de6 <CheckTailgateFilterTimer+0xe2>
				printf(" [CheckTailgateFilterTimer] Something detected. No EN TG!!\n");
 8004dd8:	4818      	ldr	r0, [pc, #96]	; (8004e3c <CheckTailgateFilterTimer+0x138>)
 8004dda:	f004 fb37 	bl	800944c <printf_>
				ResetTimer(&timerTgFilter);
 8004dde:	480c      	ldr	r0, [pc, #48]	; (8004e10 <CheckTailgateFilterTimer+0x10c>)
 8004de0:	f00a fc0e 	bl	800f600 <ResetTimer>
}
 8004de4:	e011      	b.n	8004e0a <CheckTailgateFilterTimer+0x106>
			else if (gGCUStatus.bAuthCount_EX && psenNewSwing.b.s05)
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <CheckTailgateFilterTimer+0x128>)
 8004de8:	795b      	ldrb	r3, [r3, #5]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00c      	beq.n	8004e0a <CheckTailgateFilterTimer+0x106>
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <CheckTailgateFilterTimer+0x134>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <CheckTailgateFilterTimer+0x106>
				printf(" [CheckTailgateFilterTimer] Something detected. No EX TG!! \n");
 8004dfe:	4810      	ldr	r0, [pc, #64]	; (8004e40 <CheckTailgateFilterTimer+0x13c>)
 8004e00:	f004 fb24 	bl	800944c <printf_>
				ResetTimer(&timerTgFilter);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <CheckTailgateFilterTimer+0x10c>)
 8004e06:	f00a fbfb 	bl	800f600 <ResetTimer>
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	24000244 	.word	0x24000244
 8004e14:	24000010 	.word	0x24000010
 8004e18:	24000420 	.word	0x24000420
 8004e1c:	080114bc 	.word	0x080114bc
 8004e20:	24000421 	.word	0x24000421
 8004e24:	08011500 	.word	0x08011500
 8004e28:	240004a0 	.word	0x240004a0
 8004e2c:	240004b0 	.word	0x240004b0
 8004e30:	08011544 	.word	0x08011544
 8004e34:	08011564 	.word	0x08011564
 8004e38:	2400040c 	.word	0x2400040c
 8004e3c:	08011584 	.word	0x08011584
 8004e40:	080115c0 	.word	0x080115c0

08004e44 <CheckCloseWaitTimer>:

void CheckCloseWaitTimer(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
	if (IsTimeout(&timerCloseWait, dwCloseWaitTime * TICK_COUNT_100MS))
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <CheckCloseWaitTimer+0x30>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4619      	mov	r1, r3
 8004e56:	4808      	ldr	r0, [pc, #32]	; (8004e78 <CheckCloseWaitTimer+0x34>)
 8004e58:	f00a fbe0 	bl	800f61c <IsTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <CheckCloseWaitTimer+0x2a>
	{
		ResetTimer(&timerCloseWait);
 8004e62:	4805      	ldr	r0, [pc, #20]	; (8004e78 <CheckCloseWaitTimer+0x34>)
 8004e64:	f00a fbcc 	bl	800f600 <ResetTimer>
		ControlBarrier(BARRIER_CLOSE_S);
 8004e68:	2003      	movs	r0, #3
 8004e6a:	f7fc faf7 	bl	800145c <ControlBarrier>
	}
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	24000008 	.word	0x24000008
 8004e78:	24000238 	.word	0x24000238

08004e7c <PassageProcessForSwing>:
/*******************************************************************************
 * Main Passage Process for swing gate
 *******************************************************************************/

void PassageProcessForSwing()				//used barrierTest from WMATA		pms
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
	UpdateSensorData();
 8004e80:	f7fe fb5e 	bl	8003540 <UpdateSensorData>

	// SCADA data
	gGCUStatus.bSCADA = (*(BYTE*)READ03_ADR);
 8004e84:	4b51      	ldr	r3, [pc, #324]	; (8004fcc <PassageProcessForSwing+0x150>)
 8004e86:	781a      	ldrb	r2, [r3, #0]
 8004e88:	4b51      	ldr	r3, [pc, #324]	; (8004fd0 <PassageProcessForSwing+0x154>)
 8004e8a:	751a      	strb	r2, [r3, #20]

	if ((RD_SWITCH & MASK_PUSH) == MASK_PUSH)			//RD_SWITCH1 -> RD_SWITCH
 8004e8c:	4b51      	ldr	r3, [pc, #324]	; (8004fd4 <PassageProcessForSwing+0x158>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f003 0310 	and.w	r3, r3, #16
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	d102      	bne.n	8004ea0 <PassageProcessForSwing+0x24>
	{
		Brr_SetEmergency(TRUE);
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	f7fb fbf2 	bl	8000684 <Brr_SetEmergency>
	}

	CheckBarrierOperation();
 8004ea0:	f7fe fd10 	bl	80038c4 <CheckBarrierOperation>
	CheckBarrierStop();
 8004ea4:	f7ff fd10 	bl	80048c8 <CheckBarrierStop>
	CheckSafetyTimerForSwing();
 8004ea8:	f7ff fd38 	bl	800491c <CheckSafetyTimerForSwing>
	CheckIndicatorTimer();
 8004eac:	f7fc fe38 	bl	8001b20 <CheckIndicatorTimer>
	CheckBlinkTimer();					//function does not exist
 8004eb0:	f7fd f91c 	bl	80020ec <CheckBlinkTimer>
	CheckBuzzerTimer();
 8004eb4:	f7fc fdca 	bl	8001a4c <CheckBuzzerTimer>
	CheckEmergencySignal();
 8004eb8:	f7fc fd42 	bl	8001940 <CheckEmergencySignal>
	CheckUPSStatus();
 8004ebc:	f7fc fc74 	bl	80017a8 <CheckUPSStatus>
	CheckForceOpen();
 8004ec0:	f7ff fc5c 	bl	800477c <CheckForceOpen>
	CheckResetTimer();
 8004ec4:	f7ff fe76 	bl	8004bb4 <CheckResetTimer>
	CheckCloseWaitTimer();
 8004ec8:	f7ff ffbc 	bl	8004e44 <CheckCloseWaitTimer>

	if (memcmp(&psenNewSwing, &psenOldSwing, sizeof(T_PASS_SEN_SWING)))
 8004ecc:	2204      	movs	r2, #4
 8004ece:	4942      	ldr	r1, [pc, #264]	; (8004fd8 <PassageProcessForSwing+0x15c>)
 8004ed0:	4842      	ldr	r0, [pc, #264]	; (8004fdc <PassageProcessForSwing+0x160>)
 8004ed2:	f00a fbfd 	bl	800f6d0 <memcmp>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01c      	beq.n	8004f16 <PassageProcessForSwing+0x9a>
	{
		// check timers
		ResetTimer(&timerPassageClear);
 8004edc:	4840      	ldr	r0, [pc, #256]	; (8004fe0 <PassageProcessForSwing+0x164>)
 8004ede:	f00a fb8f 	bl	800f600 <ResetTimer>

		if (!gCurGCUOpMode.bEmergencyMaint && gfFreeMode == FALSE)
 8004ee2:	4b40      	ldr	r3, [pc, #256]	; (8004fe4 <PassageProcessForSwing+0x168>)
 8004ee4:	789b      	ldrb	r3, [r3, #2]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d159      	bne.n	8004f9e <PassageProcessForSwing+0x122>
 8004eea:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <PassageProcessForSwing+0x16c>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f083 0301 	eor.w	r3, r3, #1
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d052      	beq.n	8004f9e <PassageProcessForSwing+0x122>
		{
			if ((gCurGCUOpMode.bServiceMode_EN != NO_SERVICE) || (gCurGCUOpMode.bServiceMode_EX != NO_SERVICE))
 8004ef8:	4b3a      	ldr	r3, [pc, #232]	; (8004fe4 <PassageProcessForSwing+0x168>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <PassageProcessForSwing+0x8c>
 8004f00:	4b38      	ldr	r3, [pc, #224]	; (8004fe4 <PassageProcessForSwing+0x168>)
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d04a      	beq.n	8004f9e <PassageProcessForSwing+0x122>
			{
				CheckEntranceSwing();
 8004f08:	f7fe ff6a 	bl	8003de0 <CheckEntranceSwing>
				CheckPassReadySwing();
 8004f0c:	f7ff f892 	bl	8004034 <CheckPassReadySwing>
				CheckPassingSwing();
 8004f10:	f7ff f9a4 	bl	800425c <CheckPassingSwing>
 8004f14:	e043      	b.n	8004f9e <PassageProcessForSwing+0x122>
		}
	}
	else
	{
		// if (psenNewSwing.B.bSen1 || psenNewSwing.B.bSen2 || psenNewSwing.B.bSen3)
		if (psenNewSwing.dirEntry.enter || psenNewSwing.section.lower_EN || psenNewSwing.side.exit)
 8004f16:	4b31      	ldr	r3, [pc, #196]	; (8004fdc <PassageProcessForSwing+0x160>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10b      	bne.n	8004f3c <PassageProcessForSwing+0xc0>
 8004f24:	4b2d      	ldr	r3, [pc, #180]	; (8004fdc <PassageProcessForSwing+0x160>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	f023 030f 	bic.w	r3, r3, #15
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d104      	bne.n	8004f3c <PassageProcessForSwing+0xc0>
 8004f32:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <PassageProcessForSwing+0x160>)
 8004f34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <PassageProcessForSwing+0xc8>
		{
			// Update Timer
			ResetTimer(&timerPassageClear);
 8004f3c:	4828      	ldr	r0, [pc, #160]	; (8004fe0 <PassageProcessForSwing+0x164>)
 8004f3e:	f00a fb5f 	bl	800f600 <ResetTimer>
 8004f42:	e028      	b.n	8004f96 <PassageProcessForSwing+0x11a>
		}
		else
		{
			if (timerPassageClear.fStart)
 8004f44:	4b26      	ldr	r3, [pc, #152]	; (8004fe0 <PassageProcessForSwing+0x164>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d021      	beq.n	8004f90 <PassageProcessForSwing+0x114>
			{
				if (IsTimeout(&timerPassageClear, (DEFAULT_PASSAGE_CLEAR_TIMEOUT * TICK_COUNT_1SEC)))
 8004f4c:	21c8      	movs	r1, #200	; 0xc8
 8004f4e:	4824      	ldr	r0, [pc, #144]	; (8004fe0 <PassageProcessForSwing+0x164>)
 8004f50:	f00a fb64 	bl	800f61c <IsTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01d      	beq.n	8004f96 <PassageProcessForSwing+0x11a>
				{
					isForceOpenReady_EN = FALSE;
 8004f5a:	4b24      	ldr	r3, [pc, #144]	; (8004fec <PassageProcessForSwing+0x170>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
					isForceOpenReady_EX = FALSE;
 8004f60:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <PassageProcessForSwing+0x174>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
					isPassReady_EN = FALSE;
 8004f66:	4b23      	ldr	r3, [pc, #140]	; (8004ff4 <PassageProcessForSwing+0x178>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
					isPassReady_EX = FALSE;
 8004f6c:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <PassageProcessForSwing+0x17c>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]
					isLuggageSet_EN = FALSE;
 8004f72:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <PassageProcessForSwing+0x180>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
					isLuggageSet_EX = FALSE;
 8004f78:	4b21      	ldr	r3, [pc, #132]	; (8005000 <PassageProcessForSwing+0x184>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
					isForceOpen = FALSE;
 8004f7e:	4b21      	ldr	r3, [pc, #132]	; (8005004 <PassageProcessForSwing+0x188>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
					ClearPassageAlarm();
 8004f84:	f7fc ff24 	bl	8001dd0 <ClearPassageAlarm>
					ResetTimer(&timerPassageClear);
 8004f88:	4815      	ldr	r0, [pc, #84]	; (8004fe0 <PassageProcessForSwing+0x164>)
 8004f8a:	f00a fb39 	bl	800f600 <ResetTimer>
 8004f8e:	e002      	b.n	8004f96 <PassageProcessForSwing+0x11a>
			}
			else
			{
				// Last update 20230107
				// if (gGCUStatus.PassageAlarm.b.nFromEN || gGCUStatus.PassageAlarm.b.nFromEX )
				SetTimer(&timerPassageClear);
 8004f90:	4813      	ldr	r0, [pc, #76]	; (8004fe0 <PassageProcessForSwing+0x164>)
 8004f92:	f00a fb21 	bl	800f5d8 <SetTimer>
			}
		}

		CheckAuthTimeout();
 8004f96:	f7fc fff1 	bl	8001f7c <CheckAuthTimeout>
		CheckModeChange();
 8004f9a:	f7fc f83f 	bl	800101c <CheckModeChange>
	}

	if (!gCurGCUOpMode.bEmergencyMaint)
 8004f9e:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <PassageProcessForSwing+0x168>)
 8004fa0:	789b      	ldrb	r3, [r3, #2]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <PassageProcessForSwing+0x13e>
	{
		CheckTailgateFilterTimer();
 8004fa6:	f7ff fead 	bl	8004d04 <CheckTailgateFilterTimer>
		CheckCounterEnterTimer();
 8004faa:	f7ff fa9f 	bl	80044ec <CheckCounterEnterTimer>
		CheckIllegalEnterSwing();
 8004fae:	f7ff fab9 	bl	8004524 <CheckIllegalEnterSwing>
		CheckTGTimerForSwing();
 8004fb2:	f7ff fb6f 	bl	8004694 <CheckTGTimerForSwing>
		CheckIllegalAlarmTimer();
 8004fb6:	f7fd f823 	bl	8002000 <CheckIllegalAlarmTimer>
 8004fba:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <PassageProcessForSwing+0x160>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
	}

	// update sensor state
	memcpy(&psenOldSwing, &psenNewSwing, sizeof(T_PASS_SEN_SWING));
 8004fbe:	4a06      	ldr	r2, [pc, #24]	; (8004fd8 <PassageProcessForSwing+0x15c>)
 8004fc0:	6013      	str	r3, [r2, #0]

	CheckPassSenError(TRUE);
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	f7fc fdca 	bl	8001b5c <CheckPassSenError>
}
 8004fc8:	bf00      	nop
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	60000500 	.word	0x60000500
 8004fd0:	240004b0 	.word	0x240004b0
 8004fd4:	60000300 	.word	0x60000300
 8004fd8:	24000410 	.word	0x24000410
 8004fdc:	2400040c 	.word	0x2400040c
 8004fe0:	2400016c 	.word	0x2400016c
 8004fe4:	240004d4 	.word	0x240004d4
 8004fe8:	2400043d 	.word	0x2400043d
 8004fec:	24000422 	.word	0x24000422
 8004ff0:	24000423 	.word	0x24000423
 8004ff4:	2400041c 	.word	0x2400041c
 8004ff8:	2400041d 	.word	0x2400041d
 8004ffc:	24000420 	.word	0x24000420
 8005000:	24000421 	.word	0x24000421
 8005004:	24000425 	.word	0x24000425

08005008 <TestDirection>:
	if (U0_Getch(&testData))
		U0_Putch(testData);
}

void TestDirection(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
	BYTE bColor = DIR_OFF;
 800500e:	2300      	movs	r3, #0
 8005010:	71fb      	strb	r3, [r7, #7]

	if (nDirOpSeq)
 8005012:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <TestDirection+0x9c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d036      	beq.n	8005088 <TestDirection+0x80>
	{
		if (!TestOption.b.fTestDir )
 800501a:	4b23      	ldr	r3, [pc, #140]	; (80050a8 <TestDirection+0xa0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f343 0340 	sbfx	r3, r3, #1, #1
 8005022:	b25b      	sxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <TestDirection+0x2c>
		{
			nDirOpSeq = 0;
 8005028:	4b1e      	ldr	r3, [pc, #120]	; (80050a4 <TestDirection+0x9c>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
			bColor = DIR_OFF;
 800502e:	2300      	movs	r3, #0
 8005030:	71fb      	strb	r3, [r7, #7]
 8005032:	e020      	b.n	8005076 <TestDirection+0x6e>
		}
		else
		{
			switch (nDirOpSeq)
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <TestDirection+0x9c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d016      	beq.n	800506a <TestDirection+0x62>
 800503c:	2b03      	cmp	r3, #3
 800503e:	dc1a      	bgt.n	8005076 <TestDirection+0x6e>
 8005040:	2b01      	cmp	r3, #1
 8005042:	d002      	beq.n	800504a <TestDirection+0x42>
 8005044:	2b02      	cmp	r3, #2
 8005046:	d008      	beq.n	800505a <TestDirection+0x52>
 8005048:	e015      	b.n	8005076 <TestDirection+0x6e>
			{
			case 1:
				bColor = STATE_ALLOW;
 800504a:	2301      	movs	r3, #1
 800504c:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq++;
 800504e:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <TestDirection+0x9c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <TestDirection+0x9c>)
 8005056:	6013      	str	r3, [r2, #0]
				break;
 8005058:	e00d      	b.n	8005076 <TestDirection+0x6e>
			case 2:
				bColor = STATE_STOP;
 800505a:	2302      	movs	r3, #2
 800505c:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq++;
 800505e:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <TestDirection+0x9c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3301      	adds	r3, #1
 8005064:	4a0f      	ldr	r2, [pc, #60]	; (80050a4 <TestDirection+0x9c>)
 8005066:	6013      	str	r3, [r2, #0]
				break;
 8005068:	e005      	b.n	8005076 <TestDirection+0x6e>
			case 3:
				bColor = DIR_OFF;
 800506a:	2300      	movs	r3, #0
 800506c:	71fb      	strb	r3, [r7, #7]
				nDirOpSeq = 1;
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <TestDirection+0x9c>)
 8005070:	2201      	movs	r2, #1
 8005072:	601a      	str	r2, [r3, #0]
				break;
 8005074:	bf00      	nop
			}
		}
		ControlStatusLED_Ex(bColor);
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	4618      	mov	r0, r3
 800507a:	f000 febb 	bl	8005df4 <ControlStatusLED_Ex>
		ControlStatusLED_En(bColor);
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fe87 	bl	8005d94 <ControlStatusLED_En>
	}
	else if (TestOption.b.fTestDir)
	{
		nDirOpSeq = 1;
	}
}
 8005086:	e009      	b.n	800509c <TestDirection+0x94>
	else if (TestOption.b.fTestDir)
 8005088:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <TestDirection+0xa0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f343 0340 	sbfx	r3, r3, #1, #1
 8005090:	b25b      	sxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <TestDirection+0x94>
		nDirOpSeq = 1;
 8005096:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <TestDirection+0x9c>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
}
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	24000504 	.word	0x24000504
 80050a8:	240004f0 	.word	0x240004f0

080050ac <TestOverHeadDirection>:


void TestOverHeadDirection(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
	BYTE bColor = DIR_OFF;
 80050b2:	2300      	movs	r3, #0
 80050b4:	71fb      	strb	r3, [r7, #7]

	if (nOverOpSeq)
 80050b6:	4b24      	ldr	r3, [pc, #144]	; (8005148 <TestOverHeadDirection+0x9c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d036      	beq.n	800512c <TestOverHeadDirection+0x80>
	{
		if (!TestOption.b.fTestOverHeadLamp )
 80050be:	4b23      	ldr	r3, [pc, #140]	; (800514c <TestOverHeadDirection+0xa0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f343 1300 	sbfx	r3, r3, #4, #1
 80050c6:	b25b      	sxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d105      	bne.n	80050d8 <TestOverHeadDirection+0x2c>
		{
			nOverOpSeq = 0;
 80050cc:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <TestOverHeadDirection+0x9c>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
			bColor = DIR_OFF;
 80050d2:	2300      	movs	r3, #0
 80050d4:	71fb      	strb	r3, [r7, #7]
 80050d6:	e020      	b.n	800511a <TestOverHeadDirection+0x6e>
		}
		else
		{
			switch (nOverOpSeq)
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <TestOverHeadDirection+0x9c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d016      	beq.n	800510e <TestOverHeadDirection+0x62>
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	dc1a      	bgt.n	800511a <TestOverHeadDirection+0x6e>
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d002      	beq.n	80050ee <TestOverHeadDirection+0x42>
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d008      	beq.n	80050fe <TestOverHeadDirection+0x52>
 80050ec:	e015      	b.n	800511a <TestOverHeadDirection+0x6e>
			{
			case 1:
				bColor = STATE_ALLOW;
 80050ee:	2301      	movs	r3, #1
 80050f0:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq++;
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <TestOverHeadDirection+0x9c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3301      	adds	r3, #1
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <TestOverHeadDirection+0x9c>)
 80050fa:	6013      	str	r3, [r2, #0]
				break;
 80050fc:	e00d      	b.n	800511a <TestOverHeadDirection+0x6e>
			case 2:
				bColor = STATE_STOP;
 80050fe:	2302      	movs	r3, #2
 8005100:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq++;
 8005102:	4b11      	ldr	r3, [pc, #68]	; (8005148 <TestOverHeadDirection+0x9c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3301      	adds	r3, #1
 8005108:	4a0f      	ldr	r2, [pc, #60]	; (8005148 <TestOverHeadDirection+0x9c>)
 800510a:	6013      	str	r3, [r2, #0]
				break;
 800510c:	e005      	b.n	800511a <TestOverHeadDirection+0x6e>
			case 3:
				bColor = DIR_OFF;
 800510e:	2300      	movs	r3, #0
 8005110:	71fb      	strb	r3, [r7, #7]
				nOverOpSeq = 1;
 8005112:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <TestOverHeadDirection+0x9c>)
 8005114:	2201      	movs	r2, #1
 8005116:	601a      	str	r2, [r3, #0]
				break;
 8005118:	bf00      	nop
			}
		}
		ControlOverHeadDisplay_Ex(bColor);
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fecb 	bl	8005eb8 <ControlOverHeadDisplay_Ex>
		ControlOverHeadDisplay_En(bColor);
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fe95 	bl	8005e54 <ControlOverHeadDisplay_En>
	}
	else if (TestOption.b.fTestOverHeadLamp)
	{
		nOverOpSeq = 1;
	}
}
 800512a:	e009      	b.n	8005140 <TestOverHeadDirection+0x94>
	else if (TestOption.b.fTestOverHeadLamp)
 800512c:	4b07      	ldr	r3, [pc, #28]	; (800514c <TestOverHeadDirection+0xa0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f343 1300 	sbfx	r3, r3, #4, #1
 8005134:	b25b      	sxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <TestOverHeadDirection+0x94>
		nOverOpSeq = 1;
 800513a:	4b03      	ldr	r3, [pc, #12]	; (8005148 <TestOverHeadDirection+0x9c>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
}
 8005140:	bf00      	nop
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	24000508 	.word	0x24000508
 800514c:	240004f0 	.word	0x240004f0

08005150 <TestLamp>:

void TestLamp(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0

	BYTE bColor = LAMP_OFF;
 8005156:	2300      	movs	r3, #0
 8005158:	71fb      	strb	r3, [r7, #7]
	if (nLampOpSeq)
 800515a:	4b3a      	ldr	r3, [pc, #232]	; (8005244 <TestLamp+0xf4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d061      	beq.n	8005226 <TestLamp+0xd6>
	{
		if (!TestOption.b.fTestLamp)
 8005162:	4b39      	ldr	r3, [pc, #228]	; (8005248 <TestLamp+0xf8>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f343 0380 	sbfx	r3, r3, #2, #1
 800516a:	b25b      	sxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <TestLamp+0x2c>
		{
			nLampOpSeq = 0;
 8005170:	4b34      	ldr	r3, [pc, #208]	; (8005244 <TestLamp+0xf4>)
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
			bColor = LAMP_OFF;
 8005176:	2300      	movs	r3, #0
 8005178:	71fb      	strb	r3, [r7, #7]
 800517a:	e04b      	b.n	8005214 <TestLamp+0xc4>
		}
		else
		{
			switch (nLampOpSeq)
 800517c:	4b31      	ldr	r3, [pc, #196]	; (8005244 <TestLamp+0xf4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3b01      	subs	r3, #1
 8005182:	2b06      	cmp	r3, #6
 8005184:	d846      	bhi.n	8005214 <TestLamp+0xc4>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <TestLamp+0x3c>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051a9 	.word	0x080051a9
 8005190:	080051b9 	.word	0x080051b9
 8005194:	080051c9 	.word	0x080051c9
 8005198:	080051d9 	.word	0x080051d9
 800519c:	080051e9 	.word	0x080051e9
 80051a0:	080051f9 	.word	0x080051f9
 80051a4:	08005209 	.word	0x08005209
			{
			case 1:				
				bColor = LAMP_RED_ON;
 80051a8:	2301      	movs	r3, #1
 80051aa:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80051ac:	4b25      	ldr	r3, [pc, #148]	; (8005244 <TestLamp+0xf4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3301      	adds	r3, #1
 80051b2:	4a24      	ldr	r2, [pc, #144]	; (8005244 <TestLamp+0xf4>)
 80051b4:	6013      	str	r3, [r2, #0]
				break;
 80051b6:	e02d      	b.n	8005214 <TestLamp+0xc4>
			case 2:
				bColor = LAMP_GREEN_ON;
 80051b8:	2302      	movs	r3, #2
 80051ba:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80051bc:	4b21      	ldr	r3, [pc, #132]	; (8005244 <TestLamp+0xf4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	4a20      	ldr	r2, [pc, #128]	; (8005244 <TestLamp+0xf4>)
 80051c4:	6013      	str	r3, [r2, #0]
				break;
 80051c6:	e025      	b.n	8005214 <TestLamp+0xc4>
			case 3:
				bColor = LAMP_BLUE_ON;
 80051c8:	2304      	movs	r3, #4
 80051ca:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80051cc:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <TestLamp+0xf4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3301      	adds	r3, #1
 80051d2:	4a1c      	ldr	r2, [pc, #112]	; (8005244 <TestLamp+0xf4>)
 80051d4:	6013      	str	r3, [r2, #0]
				break;
 80051d6:	e01d      	b.n	8005214 <TestLamp+0xc4>
			case 4:				
				bColor = LAMP_RED_ON + LAMP_GREEN_ON;
 80051d8:	2303      	movs	r3, #3
 80051da:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80051dc:	4b19      	ldr	r3, [pc, #100]	; (8005244 <TestLamp+0xf4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3301      	adds	r3, #1
 80051e2:	4a18      	ldr	r2, [pc, #96]	; (8005244 <TestLamp+0xf4>)
 80051e4:	6013      	str	r3, [r2, #0]
				break;
 80051e6:	e015      	b.n	8005214 <TestLamp+0xc4>
			case 5:
				bColor = LAMP_RED_ON + LAMP_BLUE_ON;
 80051e8:	2305      	movs	r3, #5
 80051ea:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80051ec:	4b15      	ldr	r3, [pc, #84]	; (8005244 <TestLamp+0xf4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	4a14      	ldr	r2, [pc, #80]	; (8005244 <TestLamp+0xf4>)
 80051f4:	6013      	str	r3, [r2, #0]
				break;
 80051f6:	e00d      	b.n	8005214 <TestLamp+0xc4>
			case 6:
				bColor = LAMP_BLUE_ON + LAMP_GREEN_ON;
 80051f8:	2306      	movs	r3, #6
 80051fa:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq++;
 80051fc:	4b11      	ldr	r3, [pc, #68]	; (8005244 <TestLamp+0xf4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	4a10      	ldr	r2, [pc, #64]	; (8005244 <TestLamp+0xf4>)
 8005204:	6013      	str	r3, [r2, #0]
				break;
 8005206:	e005      	b.n	8005214 <TestLamp+0xc4>
			case 7:
				bColor = LAMP_RED_ON + LAMP_BLUE_ON + LAMP_GREEN_ON;
 8005208:	2307      	movs	r3, #7
 800520a:	71fb      	strb	r3, [r7, #7]
				nLampOpSeq = 1;
 800520c:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <TestLamp+0xf4>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]
				break;
 8005212:	bf00      	nop
			}
		}
		ControlIndicatorLight_En(bColor);
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fe7c 	bl	8005f14 <ControlIndicatorLight_En>
		ControlIndicatorLight_Ex(bColor);
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fea6 	bl	8005f70 <ControlIndicatorLight_Ex>
	}
	else if (TestOption.b.fTestLamp)
	{
		nLampOpSeq = 1;
	}
}
 8005224:	e009      	b.n	800523a <TestLamp+0xea>
	else if (TestOption.b.fTestLamp)
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <TestLamp+0xf8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f343 0380 	sbfx	r3, r3, #2, #1
 800522e:	b25b      	sxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <TestLamp+0xea>
		nLampOpSeq = 1;
 8005234:	4b03      	ldr	r3, [pc, #12]	; (8005244 <TestLamp+0xf4>)
 8005236:	2201      	movs	r2, #1
 8005238:	601a      	str	r2, [r3, #0]
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	24000500 	.word	0x24000500
 8005248:	240004f0 	.word	0x240004f0

0800524c <TestDoor_P>:

void TestDoor_P(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
	BYTE bDir = ENTRY_OPEN;
 8005252:	2300      	movs	r3, #0
 8005254:	71fb      	strb	r3, [r7, #7]

	if (nPDoorOpSeq)
 8005256:	4b2c      	ldr	r3, [pc, #176]	; (8005308 <TestDoor_P+0xbc>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d043      	beq.n	80052e6 <TestDoor_P+0x9a>
	{
		if (!TestOption.b.fTestBarrier)
 800525e:	4b2b      	ldr	r3, [pc, #172]	; (800530c <TestDoor_P+0xc0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f343 1340 	sbfx	r3, r3, #5, #1
 8005266:	b25b      	sxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d108      	bne.n	800527e <TestDoor_P+0x32>
		{
			nPDoorOpSeq = 0;
 800526c:	4b26      	ldr	r3, [pc, #152]	; (8005308 <TestDoor_P+0xbc>)
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
			Brr_SetEmergency_P(TRUE);
 8005272:	2001      	movs	r0, #1
 8005274:	f000 feaa 	bl	8005fcc <Brr_SetEmergency_P>
			bDir = ENTRY_OPEN;
 8005278:	2300      	movs	r3, #0
 800527a:	71fb      	strb	r3, [r7, #7]
 800527c:	e02e      	b.n	80052dc <TestDoor_P+0x90>
		}
		else
		{
			switch (nPDoorOpSeq)
 800527e:	4b22      	ldr	r3, [pc, #136]	; (8005308 <TestDoor_P+0xbc>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3b01      	subs	r3, #1
 8005284:	2b03      	cmp	r3, #3
 8005286:	d829      	bhi.n	80052dc <TestDoor_P+0x90>
 8005288:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <TestDoor_P+0x44>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052a1 	.word	0x080052a1
 8005294:	080052b1 	.word	0x080052b1
 8005298:	080052c1 	.word	0x080052c1
 800529c:	080052d1 	.word	0x080052d1
			{
			case 1:
				bDir = ENTRY_OPEN;
 80052a0:	2300      	movs	r3, #0
 80052a2:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 80052a4:	4b18      	ldr	r3, [pc, #96]	; (8005308 <TestDoor_P+0xbc>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3301      	adds	r3, #1
 80052aa:	4a17      	ldr	r2, [pc, #92]	; (8005308 <TestDoor_P+0xbc>)
 80052ac:	6013      	str	r3, [r2, #0]
				break;
 80052ae:	e015      	b.n	80052dc <TestDoor_P+0x90>
			case 2:
				bDir = CLOSE;
 80052b0:	2301      	movs	r3, #1
 80052b2:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 80052b4:	4b14      	ldr	r3, [pc, #80]	; (8005308 <TestDoor_P+0xbc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	4a13      	ldr	r2, [pc, #76]	; (8005308 <TestDoor_P+0xbc>)
 80052bc:	6013      	str	r3, [r2, #0]
				break;
 80052be:	e00d      	b.n	80052dc <TestDoor_P+0x90>
			case 3:
				bDir = EXIT_OPEN;
 80052c0:	2302      	movs	r3, #2
 80052c2:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq++;
 80052c4:	4b10      	ldr	r3, [pc, #64]	; (8005308 <TestDoor_P+0xbc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3301      	adds	r3, #1
 80052ca:	4a0f      	ldr	r2, [pc, #60]	; (8005308 <TestDoor_P+0xbc>)
 80052cc:	6013      	str	r3, [r2, #0]
				break;
 80052ce:	e005      	b.n	80052dc <TestDoor_P+0x90>
			case 4:
				bDir = CLOSE;
 80052d0:	2301      	movs	r3, #1
 80052d2:	71fb      	strb	r3, [r7, #7]
				nPDoorOpSeq = 1;
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <TestDoor_P+0xbc>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
				break;
 80052da:	bf00      	nop
			}
		}
		Brr_ControlBarrier_P(bDir);
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 ff1c 	bl	800611c <Brr_ControlBarrier_P>
	else if (TestOption.b.fTestBarrier)
	{
		nPDoorOpSeq = 1;
		Brr_SetEmergency_P(FALSE);
	}
}
 80052e4:	e00c      	b.n	8005300 <TestDoor_P+0xb4>
	else if (TestOption.b.fTestBarrier)
 80052e6:	4b09      	ldr	r3, [pc, #36]	; (800530c <TestDoor_P+0xc0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f343 1340 	sbfx	r3, r3, #5, #1
 80052ee:	b25b      	sxtb	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <TestDoor_P+0xb4>
		nPDoorOpSeq = 1;
 80052f4:	4b04      	ldr	r3, [pc, #16]	; (8005308 <TestDoor_P+0xbc>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
		Brr_SetEmergency_P(FALSE);
 80052fa:	2000      	movs	r0, #0
 80052fc:	f000 fe66 	bl	8005fcc <Brr_SetEmergency_P>
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	240004fc 	.word	0x240004fc
 800530c:	240004f0 	.word	0x240004f0

08005310 <TestDoor_S>:

void TestDoor_S(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
	BYTE bDir = ENTRY_OPEN;
 8005316:	2300      	movs	r3, #0
 8005318:	71fb      	strb	r3, [r7, #7]

	if (nSDoorOpSeq)
 800531a:	4b2c      	ldr	r3, [pc, #176]	; (80053cc <TestDoor_S+0xbc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d043      	beq.n	80053aa <TestDoor_S+0x9a>
	{
		if (!TestOption.b.fTestBarrier)
 8005322:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <TestDoor_S+0xc0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f343 1340 	sbfx	r3, r3, #5, #1
 800532a:	b25b      	sxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d108      	bne.n	8005342 <TestDoor_S+0x32>
		{
			nSDoorOpSeq = 0;
 8005330:	4b26      	ldr	r3, [pc, #152]	; (80053cc <TestDoor_S+0xbc>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
			Brr_SetEmergency_S(TRUE);
 8005336:	2001      	movs	r0, #1
 8005338:	f000 fe72 	bl	8006020 <Brr_SetEmergency_S>
			bDir = ENTRY_OPEN;
 800533c:	2300      	movs	r3, #0
 800533e:	71fb      	strb	r3, [r7, #7]
 8005340:	e02e      	b.n	80053a0 <TestDoor_S+0x90>
		}
		else
		{
			switch (nSDoorOpSeq)
 8005342:	4b22      	ldr	r3, [pc, #136]	; (80053cc <TestDoor_S+0xbc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3b01      	subs	r3, #1
 8005348:	2b03      	cmp	r3, #3
 800534a:	d829      	bhi.n	80053a0 <TestDoor_S+0x90>
 800534c:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <TestDoor_S+0x44>)
 800534e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005352:	bf00      	nop
 8005354:	08005365 	.word	0x08005365
 8005358:	08005375 	.word	0x08005375
 800535c:	08005385 	.word	0x08005385
 8005360:	08005395 	.word	0x08005395
			{
			case 1:
				bDir = ENTRY_OPEN;
 8005364:	2300      	movs	r3, #0
 8005366:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 8005368:	4b18      	ldr	r3, [pc, #96]	; (80053cc <TestDoor_S+0xbc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3301      	adds	r3, #1
 800536e:	4a17      	ldr	r2, [pc, #92]	; (80053cc <TestDoor_S+0xbc>)
 8005370:	6013      	str	r3, [r2, #0]
				break;
 8005372:	e015      	b.n	80053a0 <TestDoor_S+0x90>
			case 2:
				bDir = CLOSE;
 8005374:	2301      	movs	r3, #1
 8005376:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 8005378:	4b14      	ldr	r3, [pc, #80]	; (80053cc <TestDoor_S+0xbc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3301      	adds	r3, #1
 800537e:	4a13      	ldr	r2, [pc, #76]	; (80053cc <TestDoor_S+0xbc>)
 8005380:	6013      	str	r3, [r2, #0]
				break;
 8005382:	e00d      	b.n	80053a0 <TestDoor_S+0x90>
			case 3:
				bDir = EXIT_OPEN;
 8005384:	2302      	movs	r3, #2
 8005386:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq++;
 8005388:	4b10      	ldr	r3, [pc, #64]	; (80053cc <TestDoor_S+0xbc>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3301      	adds	r3, #1
 800538e:	4a0f      	ldr	r2, [pc, #60]	; (80053cc <TestDoor_S+0xbc>)
 8005390:	6013      	str	r3, [r2, #0]
				break;
 8005392:	e005      	b.n	80053a0 <TestDoor_S+0x90>
			case 4:
				bDir = CLOSE;
 8005394:	2301      	movs	r3, #1
 8005396:	71fb      	strb	r3, [r7, #7]
				nSDoorOpSeq = 1;
 8005398:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <TestDoor_S+0xbc>)
 800539a:	2201      	movs	r2, #1
 800539c:	601a      	str	r2, [r3, #0]
				break;
 800539e:	bf00      	nop
			}
		}
		Brr_ControlBarrier_S(bDir);
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 ff08 	bl	80061b8 <Brr_ControlBarrier_S>
	else if (TestOption.b.fTestBarrier)
	{
		nSDoorOpSeq = 1;
		Brr_SetEmergency_S(FALSE);
	}
}
 80053a8:	e00c      	b.n	80053c4 <TestDoor_S+0xb4>
	else if (TestOption.b.fTestBarrier)
 80053aa:	4b09      	ldr	r3, [pc, #36]	; (80053d0 <TestDoor_S+0xc0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f343 1340 	sbfx	r3, r3, #5, #1
 80053b2:	b25b      	sxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <TestDoor_S+0xb4>
		nSDoorOpSeq = 1;
 80053b8:	4b04      	ldr	r3, [pc, #16]	; (80053cc <TestDoor_S+0xbc>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
		Brr_SetEmergency_S(FALSE);
 80053be:	2000      	movs	r0, #0
 80053c0:	f000 fe2e 	bl	8006020 <Brr_SetEmergency_S>
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	240004f8 	.word	0x240004f8
 80053d0:	240004f0 	.word	0x240004f0

080053d4 <TestBuzzer>:

void TestBuzzer(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0


	if (nBuzzOpSeq)
 80053d8:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <TestBuzzer+0x74>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d027      	beq.n	8005430 <TestBuzzer+0x5c>
	{
		if (!TestOption.b.fTestBuzzer)
 80053e0:	4b1a      	ldr	r3, [pc, #104]	; (800544c <TestBuzzer+0x78>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f343 1380 	sbfx	r3, r3, #6, #1
 80053e8:	b25b      	sxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <TestBuzzer+0x22>
		{
			nBuzzOpSeq = 0;
 80053ee:	4b16      	ldr	r3, [pc, #88]	; (8005448 <TestBuzzer+0x74>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e012      	b.n	800541c <TestBuzzer+0x48>
		}
		else
		{
			switch (nBuzzOpSeq)
 80053f6:	4b14      	ldr	r3, [pc, #80]	; (8005448 <TestBuzzer+0x74>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d002      	beq.n	8005404 <TestBuzzer+0x30>
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d006      	beq.n	8005410 <TestBuzzer+0x3c>
 8005402:	e00b      	b.n	800541c <TestBuzzer+0x48>
			{
			case 1:
				nBuzzOpSeq++;
 8005404:	4b10      	ldr	r3, [pc, #64]	; (8005448 <TestBuzzer+0x74>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3301      	adds	r3, #1
 800540a:	4a0f      	ldr	r2, [pc, #60]	; (8005448 <TestBuzzer+0x74>)
 800540c:	6013      	str	r3, [r2, #0]
				break;
 800540e:	e005      	b.n	800541c <TestBuzzer+0x48>
			case 2:
				nBuzzOpSeq--;
 8005410:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <TestBuzzer+0x74>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3b01      	subs	r3, #1
 8005416:	4a0c      	ldr	r2, [pc, #48]	; (8005448 <TestBuzzer+0x74>)
 8005418:	6013      	str	r3, [r2, #0]
				break;
 800541a:	bf00      	nop
			}
		}

		if (nBuzzOpSeq == 1)
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <TestBuzzer+0x74>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d102      	bne.n	800542a <TestBuzzer+0x56>
		{
			BuzzerOn();
 8005424:	f000 fc9e 	bl	8005d64 <BuzzerOn>
	}
	else if (TestOption.b.fTestBuzzer)
	{
		nBuzzOpSeq = 1;
	}
}
 8005428:	e00c      	b.n	8005444 <TestBuzzer+0x70>
			BuzzerOff();
 800542a:	f000 fca7 	bl	8005d7c <BuzzerOff>
}
 800542e:	e009      	b.n	8005444 <TestBuzzer+0x70>
	else if (TestOption.b.fTestBuzzer)
 8005430:	4b06      	ldr	r3, [pc, #24]	; (800544c <TestBuzzer+0x78>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f343 1380 	sbfx	r3, r3, #6, #1
 8005438:	b25b      	sxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <TestBuzzer+0x70>
		nBuzzOpSeq = 1;
 800543e:	4b02      	ldr	r3, [pc, #8]	; (8005448 <TestBuzzer+0x74>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]
}
 8005444:	bf00      	nop
 8005446:	bd80      	pop	{r7, pc}
 8005448:	240004f4 	.word	0x240004f4
 800544c:	240004f0 	.word	0x240004f0

08005450 <Write_IO_init>:



void Write_IO_init(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0

	switch(TestOption.bVal)
 8005454:	4b54      	ldr	r3, [pc, #336]	; (80055a8 <Write_IO_init+0x158>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b80      	cmp	r3, #128	; 0x80
 800545c:	f000 808c 	beq.w	8005578 <Write_IO_init+0x128>
 8005460:	2b80      	cmp	r3, #128	; 0x80
 8005462:	dc6e      	bgt.n	8005542 <Write_IO_init+0xf2>
 8005464:	2b20      	cmp	r3, #32
 8005466:	dc49      	bgt.n	80054fc <Write_IO_init+0xac>
 8005468:	2b00      	cmp	r3, #0
 800546a:	db6a      	blt.n	8005542 <Write_IO_init+0xf2>
 800546c:	2b20      	cmp	r3, #32
 800546e:	d868      	bhi.n	8005542 <Write_IO_init+0xf2>
 8005470:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <Write_IO_init+0x28>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	0800557d 	.word	0x0800557d
 800547c:	0800557d 	.word	0x0800557d
 8005480:	08005503 	.word	0x08005503
 8005484:	08005543 	.word	0x08005543
 8005488:	08005511 	.word	0x08005511
 800548c:	08005543 	.word	0x08005543
 8005490:	08005543 	.word	0x08005543
 8005494:	08005543 	.word	0x08005543
 8005498:	0800551f 	.word	0x0800551f
 800549c:	08005543 	.word	0x08005543
 80054a0:	08005543 	.word	0x08005543
 80054a4:	08005543 	.word	0x08005543
 80054a8:	08005543 	.word	0x08005543
 80054ac:	08005543 	.word	0x08005543
 80054b0:	08005543 	.word	0x08005543
 80054b4:	08005543 	.word	0x08005543
 80054b8:	0800552d 	.word	0x0800552d
 80054bc:	08005543 	.word	0x08005543
 80054c0:	08005543 	.word	0x08005543
 80054c4:	08005543 	.word	0x08005543
 80054c8:	08005543 	.word	0x08005543
 80054cc:	08005543 	.word	0x08005543
 80054d0:	08005543 	.word	0x08005543
 80054d4:	08005543 	.word	0x08005543
 80054d8:	08005543 	.word	0x08005543
 80054dc:	08005543 	.word	0x08005543
 80054e0:	08005543 	.word	0x08005543
 80054e4:	08005543 	.word	0x08005543
 80054e8:	08005543 	.word	0x08005543
 80054ec:	08005543 	.word	0x08005543
 80054f0:	08005543 	.word	0x08005543
 80054f4:	08005543 	.word	0x08005543
 80054f8:	08005535 	.word	0x08005535
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d01d      	beq.n	800553c <Write_IO_init+0xec>
 8005500:	e01f      	b.n	8005542 <Write_IO_init+0xf2>
	case 0x00:
		break;
	case 0x01:
		break;
	case 0x02:
		ControlStatusLED_Ex(DIR_OFF);
 8005502:	2000      	movs	r0, #0
 8005504:	f000 fc76 	bl	8005df4 <ControlStatusLED_Ex>
		ControlStatusLED_En(DIR_OFF);
 8005508:	2000      	movs	r0, #0
 800550a:	f000 fc43 	bl	8005d94 <ControlStatusLED_En>
		break;
 800550e:	e036      	b.n	800557e <Write_IO_init+0x12e>
	case 0x04:
		ControlIndicatorLight_En(LAMP_OFF);
 8005510:	2000      	movs	r0, #0
 8005512:	f000 fcff 	bl	8005f14 <ControlIndicatorLight_En>
		ControlIndicatorLight_Ex(LAMP_OFF);
 8005516:	2000      	movs	r0, #0
 8005518:	f000 fd2a 	bl	8005f70 <ControlIndicatorLight_Ex>
		break;
 800551c:	e02f      	b.n	800557e <Write_IO_init+0x12e>
	case 0x08:
		ControlOverHeadDisplay_Ex(DIR_OFF);
 800551e:	2000      	movs	r0, #0
 8005520:	f000 fcca 	bl	8005eb8 <ControlOverHeadDisplay_Ex>
		ControlOverHeadDisplay_En(DIR_OFF);
 8005524:	2000      	movs	r0, #0
 8005526:	f000 fc95 	bl	8005e54 <ControlOverHeadDisplay_En>
		break;
 800552a:	e028      	b.n	800557e <Write_IO_init+0x12e>
	case 0x10:
		Brr_SetEmergency_P(TRUE);
 800552c:	2001      	movs	r0, #1
 800552e:	f000 fd4d 	bl	8005fcc <Brr_SetEmergency_P>
		break;
 8005532:	e024      	b.n	800557e <Write_IO_init+0x12e>
	case 0x20:
		Brr_SetEmergency_S(TRUE);
 8005534:	2001      	movs	r0, #1
 8005536:	f000 fd73 	bl	8006020 <Brr_SetEmergency_S>
		break;
 800553a:	e020      	b.n	800557e <Write_IO_init+0x12e>
	case 0x40:
		BuzzerOff();
 800553c:	f000 fc1e 	bl	8005d7c <BuzzerOff>
		break;
 8005540:	e01d      	b.n	800557e <Write_IO_init+0x12e>
	case 0x80:
		break;

	default:

		ControlStatusLED_Ex(DIR_OFF);
 8005542:	2000      	movs	r0, #0
 8005544:	f000 fc56 	bl	8005df4 <ControlStatusLED_Ex>
		ControlStatusLED_En(DIR_OFF);
 8005548:	2000      	movs	r0, #0
 800554a:	f000 fc23 	bl	8005d94 <ControlStatusLED_En>

		ControlIndicatorLight_En(LAMP_OFF);
 800554e:	2000      	movs	r0, #0
 8005550:	f000 fce0 	bl	8005f14 <ControlIndicatorLight_En>
		ControlIndicatorLight_Ex(LAMP_OFF);
 8005554:	2000      	movs	r0, #0
 8005556:	f000 fd0b 	bl	8005f70 <ControlIndicatorLight_Ex>

		ControlOverHeadDisplay_Ex(DIR_OFF);
 800555a:	2000      	movs	r0, #0
 800555c:	f000 fcac 	bl	8005eb8 <ControlOverHeadDisplay_Ex>
		ControlOverHeadDisplay_En(DIR_OFF);
 8005560:	2000      	movs	r0, #0
 8005562:	f000 fc77 	bl	8005e54 <ControlOverHeadDisplay_En>

		Brr_SetEmergency_P(TRUE);
 8005566:	2001      	movs	r0, #1
 8005568:	f000 fd30 	bl	8005fcc <Brr_SetEmergency_P>

		Brr_SetEmergency_S(TRUE);
 800556c:	2001      	movs	r0, #1
 800556e:	f000 fd57 	bl	8006020 <Brr_SetEmergency_S>

		BuzzerOff();
 8005572:	f000 fc03 	bl	8005d7c <BuzzerOff>
		break;
 8005576:	e002      	b.n	800557e <Write_IO_init+0x12e>
		break;
 8005578:	bf00      	nop
 800557a:	e000      	b.n	800557e <Write_IO_init+0x12e>
		break;
 800557c:	bf00      	nop
	}

	nBuzzOpSeq 	= 0;
 800557e:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <Write_IO_init+0x15c>)
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
	nSDoorOpSeq = 0;
 8005584:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <Write_IO_init+0x160>)
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
	nPDoorOpSeq = 0;
 800558a:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <Write_IO_init+0x164>)
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
	nLampOpSeq 	= 0;
 8005590:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <Write_IO_init+0x168>)
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
	nDirOpSeq 	= 0;
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <Write_IO_init+0x16c>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
	nOverOpSeq 	= 0;
 800559c:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <Write_IO_init+0x170>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	240004f0 	.word	0x240004f0
 80055ac:	240004f4 	.word	0x240004f4
 80055b0:	240004f8 	.word	0x240004f8
 80055b4:	240004fc 	.word	0x240004fc
 80055b8:	24000500 	.word	0x24000500
 80055bc:	24000504 	.word	0x24000504
 80055c0:	24000508 	.word	0x24000508

080055c4 <TestAging>:


void TestAging(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
	static DWORD loop = 0;	// 1 loop = 10ms

	// Every 2 seconds, the test function will run.
	if (!loop)
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <TestAging+0x54>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d112      	bne.n	80055f6 <TestAging+0x32>
	{
		TestOption.bVal = ReadDipSwitch();
 80055d0:	4b12      	ldr	r3, [pc, #72]	; (800561c <TestAging+0x58>)
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <TestAging+0x5c>)
 80055dc:	701a      	strb	r2, [r3, #0]
		TestDirection();
 80055de:	f7ff fd13 	bl	8005008 <TestDirection>
		TestOverHeadDirection();
 80055e2:	f7ff fd63 	bl	80050ac <TestOverHeadDirection>
		TestLamp();
 80055e6:	f7ff fdb3 	bl	8005150 <TestLamp>
		TestDoor_P();
 80055ea:	f7ff fe2f 	bl	800524c <TestDoor_P>
		TestDoor_S();
 80055ee:	f7ff fe8f 	bl	8005310 <TestDoor_S>
		TestBuzzer();
 80055f2:	f7ff feef 	bl	80053d4 <TestBuzzer>
	}
	
	loop++;
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <TestAging+0x54>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	4a06      	ldr	r2, [pc, #24]	; (8005618 <TestAging+0x54>)
 80055fe:	6013      	str	r3, [r2, #0]
	if (loop >= 3000)
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <TestAging+0x54>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005608:	4293      	cmp	r3, r2
 800560a:	d902      	bls.n	8005612 <TestAging+0x4e>
		loop = 0;
 800560c:	4b02      	ldr	r3, [pc, #8]	; (8005618 <TestAging+0x54>)
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
}
 8005612:	bf00      	nop
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	2400050c 	.word	0x2400050c
 800561c:	58020400 	.word	0x58020400
 8005620:	240004f0 	.word	0x240004f0

08005624 <TEST_LAMP_P_Cmd>:



void TEST_LAMP_P_Cmd(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
	static int nLampOpSeq_cmd = 0;
	BYTE bColor = DIR_OFF;
 800562a:	2300      	movs	r3, #0
 800562c:	71fb      	strb	r3, [r7, #7]
	switch (nLampOpSeq_cmd)
 800562e:	4b2e      	ldr	r3, [pc, #184]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b07      	cmp	r3, #7
 8005634:	d850      	bhi.n	80056d8 <TEST_LAMP_P_Cmd+0xb4>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <TEST_LAMP_P_Cmd+0x18>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	0800565d 	.word	0x0800565d
 8005640:	0800566d 	.word	0x0800566d
 8005644:	0800567d 	.word	0x0800567d
 8005648:	0800568d 	.word	0x0800568d
 800564c:	0800569d 	.word	0x0800569d
 8005650:	080056ad 	.word	0x080056ad
 8005654:	080056bd 	.word	0x080056bd
 8005658:	080056cd 	.word	0x080056cd
	{
	case 0:
		bColor = LAMP_OFF;
 800565c:	2300      	movs	r3, #0
 800565e:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 8005660:	4b21      	ldr	r3, [pc, #132]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	4a20      	ldr	r2, [pc, #128]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 8005668:	6013      	str	r3, [r2, #0]
		break;
 800566a:	e035      	b.n	80056d8 <TEST_LAMP_P_Cmd+0xb4>
	case 1:
		bColor = LAMP_RED_ON;
 800566c:	2301      	movs	r3, #1
 800566e:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 8005670:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3301      	adds	r3, #1
 8005676:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 8005678:	6013      	str	r3, [r2, #0]
		break;
 800567a:	e02d      	b.n	80056d8 <TEST_LAMP_P_Cmd+0xb4>
	case 2:
		bColor = LAMP_GREEN_ON;
 800567c:	2302      	movs	r3, #2
 800567e:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 8005680:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 8005688:	6013      	str	r3, [r2, #0]
		break;
 800568a:	e025      	b.n	80056d8 <TEST_LAMP_P_Cmd+0xb4>
	case 3:
		bColor = LAMP_BLUE_ON;
 800568c:	2304      	movs	r3, #4
 800568e:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 8005690:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3301      	adds	r3, #1
 8005696:	4a14      	ldr	r2, [pc, #80]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 8005698:	6013      	str	r3, [r2, #0]
		break;
 800569a:	e01d      	b.n	80056d8 <TEST_LAMP_P_Cmd+0xb4>
	case 4:
		bColor = LAMP_RED_ON + LAMP_GREEN_ON;
 800569c:	2303      	movs	r3, #3
 800569e:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 80056a0:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3301      	adds	r3, #1
 80056a6:	4a10      	ldr	r2, [pc, #64]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 80056a8:	6013      	str	r3, [r2, #0]
		break;
 80056aa:	e015      	b.n	80056d8 <TEST_LAMP_P_Cmd+0xb4>
	case 5:
		bColor = LAMP_RED_ON + LAMP_BLUE_ON;
 80056ac:	2305      	movs	r3, #5
 80056ae:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 80056b0:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3301      	adds	r3, #1
 80056b6:	4a0c      	ldr	r2, [pc, #48]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 80056b8:	6013      	str	r3, [r2, #0]
		break;
 80056ba:	e00d      	b.n	80056d8 <TEST_LAMP_P_Cmd+0xb4>
	case 6:
		bColor = LAMP_BLUE_ON + LAMP_GREEN_ON;
 80056bc:	2306      	movs	r3, #6
 80056be:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	4a08      	ldr	r2, [pc, #32]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 80056c8:	6013      	str	r3, [r2, #0]
		break;
 80056ca:	e005      	b.n	80056d8 <TEST_LAMP_P_Cmd+0xb4>
	case 7:
		bColor = LAMP_RED_ON + LAMP_BLUE_ON + LAMP_GREEN_ON;
 80056cc:	2307      	movs	r3, #7
 80056ce:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd = 0;
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <TEST_LAMP_P_Cmd+0xc4>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
		break;
 80056d6:	bf00      	nop
	}

ControlIndicatorLight_En(bColor);
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fc1a 	bl	8005f14 <ControlIndicatorLight_En>
//	test1 = (wnBRR_OUT_CS_ADDR & 0xFF);
//ControlIndicatorLight_Ex(bColor);
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	24000510 	.word	0x24000510

080056ec <TEST_LAMP_S_Cmd>:



void TEST_LAMP_S_Cmd(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
	static int nLampOpSeq_cmd = 0;
	BYTE bColor = DIR_OFF;
 80056f2:	2300      	movs	r3, #0
 80056f4:	71fb      	strb	r3, [r7, #7]
	switch (nLampOpSeq_cmd)
 80056f6:	4b2e      	ldr	r3, [pc, #184]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b07      	cmp	r3, #7
 80056fc:	d850      	bhi.n	80057a0 <TEST_LAMP_S_Cmd+0xb4>
 80056fe:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <TEST_LAMP_S_Cmd+0x18>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	08005725 	.word	0x08005725
 8005708:	08005735 	.word	0x08005735
 800570c:	08005745 	.word	0x08005745
 8005710:	08005755 	.word	0x08005755
 8005714:	08005765 	.word	0x08005765
 8005718:	08005775 	.word	0x08005775
 800571c:	08005785 	.word	0x08005785
 8005720:	08005795 	.word	0x08005795
	{
	case 0:
		bColor = LAMP_OFF;
 8005724:	2300      	movs	r3, #0
 8005726:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 8005728:	4b21      	ldr	r3, [pc, #132]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	4a20      	ldr	r2, [pc, #128]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 8005730:	6013      	str	r3, [r2, #0]
		break;
 8005732:	e035      	b.n	80057a0 <TEST_LAMP_S_Cmd+0xb4>
	case 1:
		bColor = LAMP_RED_ON;
 8005734:	2301      	movs	r3, #1
 8005736:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 8005738:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	4a1c      	ldr	r2, [pc, #112]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 8005740:	6013      	str	r3, [r2, #0]
		break;
 8005742:	e02d      	b.n	80057a0 <TEST_LAMP_S_Cmd+0xb4>
	case 2:
		bColor = LAMP_GREEN_ON;
 8005744:	2302      	movs	r3, #2
 8005746:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 8005748:	4b19      	ldr	r3, [pc, #100]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 8005750:	6013      	str	r3, [r2, #0]
		break;
 8005752:	e025      	b.n	80057a0 <TEST_LAMP_S_Cmd+0xb4>
	case 3:
		bColor = LAMP_BLUE_ON;
 8005754:	2304      	movs	r3, #4
 8005756:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 8005758:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3301      	adds	r3, #1
 800575e:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 8005760:	6013      	str	r3, [r2, #0]
		break;
 8005762:	e01d      	b.n	80057a0 <TEST_LAMP_S_Cmd+0xb4>
	case 4:
		bColor = LAMP_RED_ON + LAMP_GREEN_ON;
 8005764:	2303      	movs	r3, #3
 8005766:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 8005768:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3301      	adds	r3, #1
 800576e:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 8005770:	6013      	str	r3, [r2, #0]
		break;
 8005772:	e015      	b.n	80057a0 <TEST_LAMP_S_Cmd+0xb4>
	case 5:
		bColor = LAMP_RED_ON + LAMP_BLUE_ON;
 8005774:	2305      	movs	r3, #5
 8005776:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 8005778:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3301      	adds	r3, #1
 800577e:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 8005780:	6013      	str	r3, [r2, #0]
		break;
 8005782:	e00d      	b.n	80057a0 <TEST_LAMP_S_Cmd+0xb4>
	case 6:
		bColor = LAMP_BLUE_ON + LAMP_GREEN_ON;
 8005784:	2306      	movs	r3, #6
 8005786:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd++;
 8005788:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3301      	adds	r3, #1
 800578e:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 8005790:	6013      	str	r3, [r2, #0]
		break;
 8005792:	e005      	b.n	80057a0 <TEST_LAMP_S_Cmd+0xb4>
	case 7:
		bColor = LAMP_RED_ON + LAMP_BLUE_ON + LAMP_GREEN_ON;
 8005794:	2307      	movs	r3, #7
 8005796:	71fb      	strb	r3, [r7, #7]
		nLampOpSeq_cmd = 0;
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <TEST_LAMP_S_Cmd+0xc4>)
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
		break;
 800579e:	bf00      	nop
	}

//ControlIndicatorLight_En(bColor);
//	test1 = (wnBRR_OUT_CS_ADDR & 0xFF);
ControlIndicatorLight_Ex(bColor);
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fbe4 	bl	8005f70 <ControlIndicatorLight_Ex>
}
 80057a8:	bf00      	nop
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	24000514 	.word	0x24000514

080057b4 <TEST_Barrier_P_Cmd>:

void TEST_Barrier_P_Cmd(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
	static int nPDoorOpSeq_cmd = 0;
	BYTE bDir = DIR_OFF;
 80057ba:	2300      	movs	r3, #0
 80057bc:	71fb      	strb	r3, [r7, #7]

	switch (nPDoorOpSeq_cmd)
 80057be:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <TEST_Barrier_P_Cmd+0x74>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d828      	bhi.n	8005818 <TEST_Barrier_P_Cmd+0x64>
 80057c6:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <TEST_Barrier_P_Cmd+0x18>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	080057dd 	.word	0x080057dd
 80057d0:	080057ed 	.word	0x080057ed
 80057d4:	080057fd 	.word	0x080057fd
 80057d8:	0800580d 	.word	0x0800580d
	{
	case 0:
		bDir = CLOSE;
 80057dc:	2301      	movs	r3, #1
 80057de:	71fb      	strb	r3, [r7, #7]
		nPDoorOpSeq_cmd++;
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <TEST_Barrier_P_Cmd+0x74>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	4a10      	ldr	r2, [pc, #64]	; (8005828 <TEST_Barrier_P_Cmd+0x74>)
 80057e8:	6013      	str	r3, [r2, #0]
		break;
 80057ea:	e015      	b.n	8005818 <TEST_Barrier_P_Cmd+0x64>
	case 1:
		bDir = EXIT_OPEN;
 80057ec:	2302      	movs	r3, #2
 80057ee:	71fb      	strb	r3, [r7, #7]
		nPDoorOpSeq_cmd++;
 80057f0:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <TEST_Barrier_P_Cmd+0x74>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3301      	adds	r3, #1
 80057f6:	4a0c      	ldr	r2, [pc, #48]	; (8005828 <TEST_Barrier_P_Cmd+0x74>)
 80057f8:	6013      	str	r3, [r2, #0]
		break;
 80057fa:	e00d      	b.n	8005818 <TEST_Barrier_P_Cmd+0x64>
	case 2:
		bDir = CLOSE;
 80057fc:	2301      	movs	r3, #1
 80057fe:	71fb      	strb	r3, [r7, #7]
		nPDoorOpSeq_cmd++;
 8005800:	4b09      	ldr	r3, [pc, #36]	; (8005828 <TEST_Barrier_P_Cmd+0x74>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	4a08      	ldr	r2, [pc, #32]	; (8005828 <TEST_Barrier_P_Cmd+0x74>)
 8005808:	6013      	str	r3, [r2, #0]
		break;
 800580a:	e005      	b.n	8005818 <TEST_Barrier_P_Cmd+0x64>
	case 3:
		bDir = ENTRY_OPEN;
 800580c:	2300      	movs	r3, #0
 800580e:	71fb      	strb	r3, [r7, #7]
		nPDoorOpSeq_cmd = 0;
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <TEST_Barrier_P_Cmd+0x74>)
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
		break;
 8005816:	bf00      	nop
	}

	Brr_ControlBarrier_P(bDir);
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fc7e 	bl	800611c <Brr_ControlBarrier_P>

}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	24000518 	.word	0x24000518

0800582c <TEST_Barrier_S_Cmd>:


void TEST_Barrier_S_Cmd(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
	static int nPDoorOpSeq_cmd = 0;
	BYTE bDir = DIR_OFF;
 8005832:	2300      	movs	r3, #0
 8005834:	71fb      	strb	r3, [r7, #7]

	switch (nPDoorOpSeq_cmd)
 8005836:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <TEST_Barrier_S_Cmd+0x74>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b03      	cmp	r3, #3
 800583c:	d828      	bhi.n	8005890 <TEST_Barrier_S_Cmd+0x64>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <TEST_Barrier_S_Cmd+0x18>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005855 	.word	0x08005855
 8005848:	08005865 	.word	0x08005865
 800584c:	08005875 	.word	0x08005875
 8005850:	08005885 	.word	0x08005885
	{
	case 0:
		bDir = CLOSE;
 8005854:	2301      	movs	r3, #1
 8005856:	71fb      	strb	r3, [r7, #7]
		nPDoorOpSeq_cmd++;
 8005858:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <TEST_Barrier_S_Cmd+0x74>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3301      	adds	r3, #1
 800585e:	4a10      	ldr	r2, [pc, #64]	; (80058a0 <TEST_Barrier_S_Cmd+0x74>)
 8005860:	6013      	str	r3, [r2, #0]
		break;
 8005862:	e015      	b.n	8005890 <TEST_Barrier_S_Cmd+0x64>
	case 1:
		bDir = EXIT_OPEN;
 8005864:	2302      	movs	r3, #2
 8005866:	71fb      	strb	r3, [r7, #7]
		nPDoorOpSeq_cmd++;
 8005868:	4b0d      	ldr	r3, [pc, #52]	; (80058a0 <TEST_Barrier_S_Cmd+0x74>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	4a0c      	ldr	r2, [pc, #48]	; (80058a0 <TEST_Barrier_S_Cmd+0x74>)
 8005870:	6013      	str	r3, [r2, #0]
		break;
 8005872:	e00d      	b.n	8005890 <TEST_Barrier_S_Cmd+0x64>
	case 2:
		bDir = CLOSE;
 8005874:	2301      	movs	r3, #1
 8005876:	71fb      	strb	r3, [r7, #7]
		nPDoorOpSeq_cmd++;
 8005878:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <TEST_Barrier_S_Cmd+0x74>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3301      	adds	r3, #1
 800587e:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <TEST_Barrier_S_Cmd+0x74>)
 8005880:	6013      	str	r3, [r2, #0]
		break;
 8005882:	e005      	b.n	8005890 <TEST_Barrier_S_Cmd+0x64>
	case 3:
		bDir = ENTRY_OPEN;
 8005884:	2300      	movs	r3, #0
 8005886:	71fb      	strb	r3, [r7, #7]
		nPDoorOpSeq_cmd = 0;
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <TEST_Barrier_S_Cmd+0x74>)
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
		break;
 800588e:	bf00      	nop
	}

	Brr_ControlBarrier_S(bDir);
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fc90 	bl	80061b8 <Brr_ControlBarrier_S>

}
 8005898:	bf00      	nop
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	2400051c 	.word	0x2400051c

080058a4 <TEST_OverHeadDirection_Cmd>:


void TEST_OverHeadDirection_Cmd(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
	static int nDirOpSeq_cmd = 0;
	BYTE bColor = DIR_OFF;
 80058aa:	2300      	movs	r3, #0
 80058ac:	71fb      	strb	r3, [r7, #7]

	switch (nDirOpSeq_cmd)
 80058ae:	4b1c      	ldr	r3, [pc, #112]	; (8005920 <TEST_OverHeadDirection_Cmd+0x7c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d828      	bhi.n	8005908 <TEST_OverHeadDirection_Cmd+0x64>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <TEST_OverHeadDirection_Cmd+0x18>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058dd 	.word	0x080058dd
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058fd 	.word	0x080058fd
	{
	case 0:
		bColor = STATE_ALLOW;
 80058cc:	2301      	movs	r3, #1
 80058ce:	71fb      	strb	r3, [r7, #7]
		nDirOpSeq_cmd++;
 80058d0:	4b13      	ldr	r3, [pc, #76]	; (8005920 <TEST_OverHeadDirection_Cmd+0x7c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a12      	ldr	r2, [pc, #72]	; (8005920 <TEST_OverHeadDirection_Cmd+0x7c>)
 80058d8:	6013      	str	r3, [r2, #0]
		break;
 80058da:	e015      	b.n	8005908 <TEST_OverHeadDirection_Cmd+0x64>
	case 1:
		bColor = STATE_STOP;
 80058dc:	2302      	movs	r3, #2
 80058de:	71fb      	strb	r3, [r7, #7]
		nDirOpSeq_cmd++;
 80058e0:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <TEST_OverHeadDirection_Cmd+0x7c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3301      	adds	r3, #1
 80058e6:	4a0e      	ldr	r2, [pc, #56]	; (8005920 <TEST_OverHeadDirection_Cmd+0x7c>)
 80058e8:	6013      	str	r3, [r2, #0]
		break;
 80058ea:	e00d      	b.n	8005908 <TEST_OverHeadDirection_Cmd+0x64>
	case 2:
		bColor = STATE_ALL;
 80058ec:	2303      	movs	r3, #3
 80058ee:	71fb      	strb	r3, [r7, #7]
		nDirOpSeq_cmd++;
 80058f0:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <TEST_OverHeadDirection_Cmd+0x7c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <TEST_OverHeadDirection_Cmd+0x7c>)
 80058f8:	6013      	str	r3, [r2, #0]
		break;
 80058fa:	e005      	b.n	8005908 <TEST_OverHeadDirection_Cmd+0x64>
	case 3:
		bColor = DIR_OFF;
 80058fc:	2300      	movs	r3, #0
 80058fe:	71fb      	strb	r3, [r7, #7]
		nDirOpSeq_cmd = 0;
 8005900:	4b07      	ldr	r3, [pc, #28]	; (8005920 <TEST_OverHeadDirection_Cmd+0x7c>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
		break;
 8005906:	bf00      	nop
	}

	ControlOverHeadDisplay_Ex(bColor);
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fad4 	bl	8005eb8 <ControlOverHeadDisplay_Ex>
	ControlOverHeadDisplay_En(bColor);
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fa9e 	bl	8005e54 <ControlOverHeadDisplay_En>

}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	24000520 	.word	0x24000520

08005924 <TEST_Direction_Cmd>:

void TEST_Direction_Cmd(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
	static int nDirOpSeq_cmd = 0;
	BYTE bColor = DIR_OFF;
 800592a:	2300      	movs	r3, #0
 800592c:	71fb      	strb	r3, [r7, #7]

	switch (nDirOpSeq_cmd)
 800592e:	4b1c      	ldr	r3, [pc, #112]	; (80059a0 <TEST_Direction_Cmd+0x7c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b03      	cmp	r3, #3
 8005934:	d828      	bhi.n	8005988 <TEST_Direction_Cmd+0x64>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <TEST_Direction_Cmd+0x18>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	0800594d 	.word	0x0800594d
 8005940:	0800595d 	.word	0x0800595d
 8005944:	0800596d 	.word	0x0800596d
 8005948:	0800597d 	.word	0x0800597d
	{
	case 0:
		bColor = STATE_ALLOW;
 800594c:	2301      	movs	r3, #1
 800594e:	71fb      	strb	r3, [r7, #7]
		nDirOpSeq_cmd++;
 8005950:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <TEST_Direction_Cmd+0x7c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <TEST_Direction_Cmd+0x7c>)
 8005958:	6013      	str	r3, [r2, #0]
		break;
 800595a:	e015      	b.n	8005988 <TEST_Direction_Cmd+0x64>
	case 1:
		bColor = STATE_STOP;
 800595c:	2302      	movs	r3, #2
 800595e:	71fb      	strb	r3, [r7, #7]
		nDirOpSeq_cmd++;
 8005960:	4b0f      	ldr	r3, [pc, #60]	; (80059a0 <TEST_Direction_Cmd+0x7c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	4a0e      	ldr	r2, [pc, #56]	; (80059a0 <TEST_Direction_Cmd+0x7c>)
 8005968:	6013      	str	r3, [r2, #0]
		break;
 800596a:	e00d      	b.n	8005988 <TEST_Direction_Cmd+0x64>
	case 2:
		bColor = STATE_ALL;
 800596c:	2303      	movs	r3, #3
 800596e:	71fb      	strb	r3, [r7, #7]
		nDirOpSeq_cmd++;
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <TEST_Direction_Cmd+0x7c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3301      	adds	r3, #1
 8005976:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <TEST_Direction_Cmd+0x7c>)
 8005978:	6013      	str	r3, [r2, #0]
		break;
 800597a:	e005      	b.n	8005988 <TEST_Direction_Cmd+0x64>
	case 3:
		bColor = DIR_OFF;
 800597c:	2300      	movs	r3, #0
 800597e:	71fb      	strb	r3, [r7, #7]
		nDirOpSeq_cmd = 0;
 8005980:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <TEST_Direction_Cmd+0x7c>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
		break;
 8005986:	bf00      	nop
	}

	ControlStatusLED_Ex(bColor);
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fa32 	bl	8005df4 <ControlStatusLED_Ex>
	ControlStatusLED_En(bColor);
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 f9fe 	bl	8005d94 <ControlStatusLED_En>

}
 8005998:	bf00      	nop
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	24000524 	.word	0x24000524

080059a4 <TEST_Buzzer_Cmd>:


void TEST_Buzzer_Cmd(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
	static int nBuzzOpSeq_cmd = 0;

	switch (nBuzzOpSeq_cmd)
 80059a8:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <TEST_Buzzer_Cmd+0x40>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <TEST_Buzzer_Cmd+0x12>
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d006      	beq.n	80059c2 <TEST_Buzzer_Cmd+0x1e>
 80059b4:	e00b      	b.n	80059ce <TEST_Buzzer_Cmd+0x2a>
	{
	case 0:
		nBuzzOpSeq_cmd++;
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <TEST_Buzzer_Cmd+0x40>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3301      	adds	r3, #1
 80059bc:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <TEST_Buzzer_Cmd+0x40>)
 80059be:	6013      	str	r3, [r2, #0]
		break;
 80059c0:	e005      	b.n	80059ce <TEST_Buzzer_Cmd+0x2a>

	case 1:
		nBuzzOpSeq_cmd--;
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <TEST_Buzzer_Cmd+0x40>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	4a06      	ldr	r2, [pc, #24]	; (80059e4 <TEST_Buzzer_Cmd+0x40>)
 80059ca:	6013      	str	r3, [r2, #0]
		break;
 80059cc:	bf00      	nop
	}

	if (nBuzzOpSeq_cmd == 1)
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <TEST_Buzzer_Cmd+0x40>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d102      	bne.n	80059dc <TEST_Buzzer_Cmd+0x38>
	{
		BuzzerOn();
 80059d6:	f000 f9c5 	bl	8005d64 <BuzzerOn>
	else
	{
		BuzzerOff();
	}

}
 80059da:	e001      	b.n	80059e0 <TEST_Buzzer_Cmd+0x3c>
		BuzzerOff();
 80059dc:	f000 f9ce 	bl	8005d7c <BuzzerOff>
}
 80059e0:	bf00      	nop
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	24000528 	.word	0x24000528

080059e8 <TEST_Barrier_P_E_Cmd>:


void TEST_Barrier_P_E_Cmd(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
	static int nPDoorOpSeq_cmd = 0;

	switch (nPDoorOpSeq_cmd)
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <TEST_Barrier_P_E_Cmd+0x44>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <TEST_Barrier_P_E_Cmd+0x12>
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d006      	beq.n	8005a06 <TEST_Barrier_P_E_Cmd+0x1e>
 80059f8:	e00b      	b.n	8005a12 <TEST_Barrier_P_E_Cmd+0x2a>
	{
	case 0:
		nPDoorOpSeq_cmd++;
 80059fa:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <TEST_Barrier_P_E_Cmd+0x44>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3301      	adds	r3, #1
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <TEST_Barrier_P_E_Cmd+0x44>)
 8005a02:	6013      	str	r3, [r2, #0]
		break;
 8005a04:	e005      	b.n	8005a12 <TEST_Barrier_P_E_Cmd+0x2a>

	case 1:
		nPDoorOpSeq_cmd--;
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <TEST_Barrier_P_E_Cmd+0x44>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	4a07      	ldr	r2, [pc, #28]	; (8005a2c <TEST_Barrier_P_E_Cmd+0x44>)
 8005a0e:	6013      	str	r3, [r2, #0]
		break;
 8005a10:	bf00      	nop
	}


	if (nPDoorOpSeq_cmd == 1)
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <TEST_Barrier_P_E_Cmd+0x44>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d103      	bne.n	8005a22 <TEST_Barrier_P_E_Cmd+0x3a>
	{
		Brr_SetEmergency_P(TRUE);
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	f000 fad6 	bl	8005fcc <Brr_SetEmergency_P>
	else
	{
		Brr_SetEmergency_P(FALSE);
	}

}
 8005a20:	e002      	b.n	8005a28 <TEST_Barrier_P_E_Cmd+0x40>
		Brr_SetEmergency_P(FALSE);
 8005a22:	2000      	movs	r0, #0
 8005a24:	f000 fad2 	bl	8005fcc <Brr_SetEmergency_P>
}
 8005a28:	bf00      	nop
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	2400052c 	.word	0x2400052c

08005a30 <TEST_Barrier_S_E_Cmd>:


void TEST_Barrier_S_E_Cmd(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
	static int nPDoorOpSeq_cmd = 0;

	switch (nPDoorOpSeq_cmd)
 8005a34:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <TEST_Barrier_S_E_Cmd+0x44>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <TEST_Barrier_S_E_Cmd+0x12>
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d006      	beq.n	8005a4e <TEST_Barrier_S_E_Cmd+0x1e>
 8005a40:	e00b      	b.n	8005a5a <TEST_Barrier_S_E_Cmd+0x2a>
	{
	case 0:
		nPDoorOpSeq_cmd++;
 8005a42:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <TEST_Barrier_S_E_Cmd+0x44>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3301      	adds	r3, #1
 8005a48:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <TEST_Barrier_S_E_Cmd+0x44>)
 8005a4a:	6013      	str	r3, [r2, #0]
		break;
 8005a4c:	e005      	b.n	8005a5a <TEST_Barrier_S_E_Cmd+0x2a>

	case 1:
		nPDoorOpSeq_cmd--;
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <TEST_Barrier_S_E_Cmd+0x44>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	4a07      	ldr	r2, [pc, #28]	; (8005a74 <TEST_Barrier_S_E_Cmd+0x44>)
 8005a56:	6013      	str	r3, [r2, #0]
		break;
 8005a58:	bf00      	nop
	}

	if (nPDoorOpSeq_cmd == 1)
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <TEST_Barrier_S_E_Cmd+0x44>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d103      	bne.n	8005a6a <TEST_Barrier_S_E_Cmd+0x3a>
	{
		Brr_SetEmergency_S(TRUE);
 8005a62:	2001      	movs	r0, #1
 8005a64:	f000 fadc 	bl	8006020 <Brr_SetEmergency_S>
	else
	{
		Brr_SetEmergency_S(FALSE);
	}

}
 8005a68:	e002      	b.n	8005a70 <TEST_Barrier_S_E_Cmd+0x40>
		Brr_SetEmergency_S(FALSE);
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	f000 fad8 	bl	8006020 <Brr_SetEmergency_S>
}
 8005a70:	bf00      	nop
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	24000530 	.word	0x24000530

08005a78 <TEST_Barrier_P_B_Cmd>:


void TEST_Barrier_P_B_Cmd(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
	static int nPDoorOpSeq_cmd = 0;


	switch (nPDoorOpSeq_cmd)
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <TEST_Barrier_P_B_Cmd+0x44>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <TEST_Barrier_P_B_Cmd+0x12>
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d006      	beq.n	8005a96 <TEST_Barrier_P_B_Cmd+0x1e>
 8005a88:	e00b      	b.n	8005aa2 <TEST_Barrier_P_B_Cmd+0x2a>
	{
	case 0:
		nPDoorOpSeq_cmd++;
 8005a8a:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <TEST_Barrier_P_B_Cmd+0x44>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <TEST_Barrier_P_B_Cmd+0x44>)
 8005a92:	6013      	str	r3, [r2, #0]
		break;
 8005a94:	e005      	b.n	8005aa2 <TEST_Barrier_P_B_Cmd+0x2a>

	case 1:
		nPDoorOpSeq_cmd--;
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <TEST_Barrier_P_B_Cmd+0x44>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	4a07      	ldr	r2, [pc, #28]	; (8005abc <TEST_Barrier_P_B_Cmd+0x44>)
 8005a9e:	6013      	str	r3, [r2, #0]
		break;
 8005aa0:	bf00      	nop
	}


	if (nPDoorOpSeq_cmd == 1)
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <TEST_Barrier_P_B_Cmd+0x44>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d103      	bne.n	8005ab2 <TEST_Barrier_P_B_Cmd+0x3a>
	{
		Brr_SetBreak_P(TRUE);
 8005aaa:	2001      	movs	r0, #1
 8005aac:	f000 fae2 	bl	8006074 <Brr_SetBreak_P>
	else
	{
		Brr_SetBreak_P(FALSE);
	}

}
 8005ab0:	e002      	b.n	8005ab8 <TEST_Barrier_P_B_Cmd+0x40>
		Brr_SetBreak_P(FALSE);
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f000 fade 	bl	8006074 <Brr_SetBreak_P>
}
 8005ab8:	bf00      	nop
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	24000534 	.word	0x24000534

08005ac0 <TEST_Barrier_S_B_Cmd>:


void TEST_Barrier_S_B_Cmd(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
	static int nPDoorOpSeq_cmd = 0;

	switch (nPDoorOpSeq_cmd)
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <TEST_Barrier_S_B_Cmd+0x44>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <TEST_Barrier_S_B_Cmd+0x12>
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d006      	beq.n	8005ade <TEST_Barrier_S_B_Cmd+0x1e>
 8005ad0:	e00b      	b.n	8005aea <TEST_Barrier_S_B_Cmd+0x2a>
	{
	case 0:
		nPDoorOpSeq_cmd++;
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <TEST_Barrier_S_B_Cmd+0x44>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <TEST_Barrier_S_B_Cmd+0x44>)
 8005ada:	6013      	str	r3, [r2, #0]
		break;
 8005adc:	e005      	b.n	8005aea <TEST_Barrier_S_B_Cmd+0x2a>

	case 1:
		nPDoorOpSeq_cmd--;
 8005ade:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <TEST_Barrier_S_B_Cmd+0x44>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	4a07      	ldr	r2, [pc, #28]	; (8005b04 <TEST_Barrier_S_B_Cmd+0x44>)
 8005ae6:	6013      	str	r3, [r2, #0]
		break;
 8005ae8:	bf00      	nop
	}

	if (nPDoorOpSeq_cmd == 1)
 8005aea:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <TEST_Barrier_S_B_Cmd+0x44>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d103      	bne.n	8005afa <TEST_Barrier_S_B_Cmd+0x3a>
	{
		Brr_SetBreak_S(TRUE);
 8005af2:	2001      	movs	r0, #1
 8005af4:	f000 fae8 	bl	80060c8 <Brr_SetBreak_S>
	else
	{
		Brr_SetBreak_S(FALSE);
	}

}
 8005af8:	e002      	b.n	8005b00 <TEST_Barrier_S_B_Cmd+0x40>
		Brr_SetBreak_S(FALSE);
 8005afa:	2000      	movs	r0, #0
 8005afc:	f000 fae4 	bl	80060c8 <Brr_SetBreak_S>
}
 8005b00:	bf00      	nop
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	24000538 	.word	0x24000538

08005b08 <CMD_Test>:




void CMD_Test(byte bVal)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	71fb      	strb	r3, [r7, #7]

    switch(bVal)
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	3b30      	subs	r3, #48	; 0x30
 8005b16:	2b48      	cmp	r3, #72	; 0x48
 8005b18:	f200 8116 	bhi.w	8005d48 <CMD_Test+0x240>
 8005b1c:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <CMD_Test+0x1c>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005d41 	.word	0x08005d41
 8005b28:	08005d47 	.word	0x08005d47
 8005b2c:	08005c49 	.word	0x08005c49
 8005b30:	08005c53 	.word	0x08005c53
 8005b34:	08005c59 	.word	0x08005c59
 8005b38:	08005c5f 	.word	0x08005c5f
 8005b3c:	08005c65 	.word	0x08005c65
 8005b40:	08005c6b 	.word	0x08005c6b
 8005b44:	08005d49 	.word	0x08005d49
 8005b48:	08005d49 	.word	0x08005d49
 8005b4c:	08005d49 	.word	0x08005d49
 8005b50:	08005d49 	.word	0x08005d49
 8005b54:	08005d49 	.word	0x08005d49
 8005b58:	08005d49 	.word	0x08005d49
 8005b5c:	08005d49 	.word	0x08005d49
 8005b60:	08005d49 	.word	0x08005d49
 8005b64:	08005d49 	.word	0x08005d49
 8005b68:	08005d49 	.word	0x08005d49
 8005b6c:	08005d49 	.word	0x08005d49
 8005b70:	08005d49 	.word	0x08005d49
 8005b74:	08005d49 	.word	0x08005d49
 8005b78:	08005d49 	.word	0x08005d49
 8005b7c:	08005d49 	.word	0x08005d49
 8005b80:	08005d49 	.word	0x08005d49
 8005b84:	08005d49 	.word	0x08005d49
 8005b88:	08005d49 	.word	0x08005d49
 8005b8c:	08005d49 	.word	0x08005d49
 8005b90:	08005d49 	.word	0x08005d49
 8005b94:	08005d49 	.word	0x08005d49
 8005b98:	08005d49 	.word	0x08005d49
 8005b9c:	08005d49 	.word	0x08005d49
 8005ba0:	08005d49 	.word	0x08005d49
 8005ba4:	08005d49 	.word	0x08005d49
 8005ba8:	08005d49 	.word	0x08005d49
 8005bac:	08005d49 	.word	0x08005d49
 8005bb0:	08005d49 	.word	0x08005d49
 8005bb4:	08005d49 	.word	0x08005d49
 8005bb8:	08005d49 	.word	0x08005d49
 8005bbc:	08005d49 	.word	0x08005d49
 8005bc0:	08005d49 	.word	0x08005d49
 8005bc4:	08005d49 	.word	0x08005d49
 8005bc8:	08005d49 	.word	0x08005d49
 8005bcc:	08005d49 	.word	0x08005d49
 8005bd0:	08005d49 	.word	0x08005d49
 8005bd4:	08005d49 	.word	0x08005d49
 8005bd8:	08005d49 	.word	0x08005d49
 8005bdc:	08005d49 	.word	0x08005d49
 8005be0:	08005d49 	.word	0x08005d49
 8005be4:	08005d49 	.word	0x08005d49
 8005be8:	08005d49 	.word	0x08005d49
 8005bec:	08005c71 	.word	0x08005c71
 8005bf0:	08005c8d 	.word	0x08005c8d
 8005bf4:	08005d49 	.word	0x08005d49
 8005bf8:	08005c7f 	.word	0x08005c7f
 8005bfc:	08005d49 	.word	0x08005d49
 8005c00:	08005d49 	.word	0x08005d49
 8005c04:	08005d49 	.word	0x08005d49
 8005c08:	08005d49 	.word	0x08005d49
 8005c0c:	08005d49 	.word	0x08005d49
 8005c10:	08005d49 	.word	0x08005d49
 8005c14:	08005d49 	.word	0x08005d49
 8005c18:	08005d49 	.word	0x08005d49
 8005c1c:	08005cc1 	.word	0x08005cc1
 8005c20:	08005d49 	.word	0x08005d49
 8005c24:	08005d49 	.word	0x08005d49
 8005c28:	08005d49 	.word	0x08005d49
 8005c2c:	08005d49 	.word	0x08005d49
 8005c30:	08005d49 	.word	0x08005d49
 8005c34:	08005d49 	.word	0x08005d49
 8005c38:	08005d49 	.word	0x08005d49
 8005c3c:	08005d49 	.word	0x08005d49
 8005c40:	08005d49 	.word	0x08005d49
 8005c44:	08005d01 	.word	0x08005d01
    {
	    	case 0x31:			//1

	    		break;
	    	case 0x32:			//2
	    		TEST_LAMP_P_Cmd();
 8005c48:	f7ff fcec 	bl	8005624 <TEST_LAMP_P_Cmd>
	    		TEST_LAMP_S_Cmd();
 8005c4c:	f7ff fd4e 	bl	80056ec <TEST_LAMP_S_Cmd>
	    		break;
 8005c50:	e07a      	b.n	8005d48 <CMD_Test+0x240>
	    	case 0x33:			//3
	    		TEST_Direction_Cmd();
 8005c52:	f7ff fe67 	bl	8005924 <TEST_Direction_Cmd>
	    		break;
 8005c56:	e077      	b.n	8005d48 <CMD_Test+0x240>
	    	case 0x34:			//4
	    		TEST_OverHeadDirection_Cmd();
 8005c58:	f7ff fe24 	bl	80058a4 <TEST_OverHeadDirection_Cmd>
	    		break;
 8005c5c:	e074      	b.n	8005d48 <CMD_Test+0x240>
	    	case 0x35:			//5
	    		TEST_Barrier_P_Cmd();
 8005c5e:	f7ff fda9 	bl	80057b4 <TEST_Barrier_P_Cmd>
	    		break;
 8005c62:	e071      	b.n	8005d48 <CMD_Test+0x240>
	    	case 0x36:			//6
	    		TEST_Barrier_S_Cmd();
 8005c64:	f7ff fde2 	bl	800582c <TEST_Barrier_S_Cmd>

	    		break;
 8005c68:	e06e      	b.n	8005d48 <CMD_Test+0x240>
	    	case 0x37:			//7
	    		TEST_Buzzer_Cmd();
 8005c6a:	f7ff fe9b 	bl	80059a4 <TEST_Buzzer_Cmd>
	    		break;
 8005c6e:	e06b      	b.n	8005d48 <CMD_Test+0x240>
	    	case 0x62:			//b break s
	    		TEST_Barrier_S_B_Cmd();
 8005c70:	f7ff ff26 	bl	8005ac0 <TEST_Barrier_S_B_Cmd>
	    		TEST_Barrier_P_B_Cmd();
 8005c74:	f7ff ff00 	bl	8005a78 <TEST_Barrier_P_B_Cmd>
	    		Brr_Inq_Status();
 8005c78:	f7fa fd96 	bl	80007a8 <Brr_Inq_Status>
	    		break;
 8005c7c:	e064      	b.n	8005d48 <CMD_Test+0x240>
	    	case 0x65:			//e	Emergency s
	    		TEST_Barrier_S_E_Cmd();
 8005c7e:	f7ff fed7 	bl	8005a30 <TEST_Barrier_S_E_Cmd>
	    		TEST_Barrier_P_E_Cmd();
 8005c82:	f7ff feb1 	bl	80059e8 <TEST_Barrier_P_E_Cmd>
	    		Brr_Inq_Status();
 8005c86:	f7fa fd8f 	bl	80007a8 <Brr_Inq_Status>
	    		break;
 8005c8a:	e05d      	b.n	8005d48 <CMD_Test+0x240>
	    	case 0x63 :			//c	close
	    		if(Add_200_Value & 0x88)
 8005c8c:	4b30      	ldr	r3, [pc, #192]	; (8005d50 <CMD_Test+0x248>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <CMD_Test+0x198>
		    		{
		         		printf("Setting break \n");
 8005c98:	482e      	ldr	r0, [pc, #184]	; (8005d54 <CMD_Test+0x24c>)
 8005c9a:	f003 fbd7 	bl	800944c <printf_>
		    		else
		    		{
		    			Brr_ControlBarrier_All_OPnC_Dir(CLOSE);
		    			Brr_Inq_Status();
		    		}
	    		break;
 8005c9e:	e053      	b.n	8005d48 <CMD_Test+0x240>
		    		else if(Add_200_Value & 0x22)
 8005ca0:	4b2b      	ldr	r3, [pc, #172]	; (8005d50 <CMD_Test+0x248>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <CMD_Test+0x1ac>
			    		printf("Setting Emergency \n");
 8005cac:	482a      	ldr	r0, [pc, #168]	; (8005d58 <CMD_Test+0x250>)
 8005cae:	f003 fbcd 	bl	800944c <printf_>
	    		break;
 8005cb2:	e049      	b.n	8005d48 <CMD_Test+0x240>
		    			Brr_ControlBarrier_All_OPnC_Dir(CLOSE);
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	f000 facd 	bl	8006254 <Brr_ControlBarrier_All_OPnC_Dir>
		    			Brr_Inq_Status();
 8005cba:	f7fa fd75 	bl	80007a8 <Brr_Inq_Status>
	    		break;
 8005cbe:	e043      	b.n	8005d48 <CMD_Test+0x240>
	    	case 0x6E :			//n	entry
	    		if(Add_200_Value & 0x88)
 8005cc0:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <CMD_Test+0x248>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <CMD_Test+0x1cc>
	    		{
	         		printf("Setting break \n");
 8005ccc:	4821      	ldr	r0, [pc, #132]	; (8005d54 <CMD_Test+0x24c>)
 8005cce:	f003 fbbd 	bl	800944c <printf_>
					Brr_ControlBarrier_All_OPnC_Dir(OPEN);
					Brr_ControlBarrier_All_Dir(ENTRY);
					Brr_Inq_Status();
					printf("Setting ENTRY Direction Open\n");
	    		}
	    		break;
 8005cd2:	e039      	b.n	8005d48 <CMD_Test+0x240>
	    		else if(Add_200_Value & 0x22)
 8005cd4:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <CMD_Test+0x248>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <CMD_Test+0x1e0>
		    		printf("Setting Emergency \n");
 8005ce0:	481d      	ldr	r0, [pc, #116]	; (8005d58 <CMD_Test+0x250>)
 8005ce2:	f003 fbb3 	bl	800944c <printf_>
	    		break;
 8005ce6:	e02f      	b.n	8005d48 <CMD_Test+0x240>
					Brr_ControlBarrier_All_OPnC_Dir(OPEN);
 8005ce8:	2004      	movs	r0, #4
 8005cea:	f000 fab3 	bl	8006254 <Brr_ControlBarrier_All_OPnC_Dir>
					Brr_ControlBarrier_All_Dir(ENTRY);
 8005cee:	2008      	movs	r0, #8
 8005cf0:	f000 faf0 	bl	80062d4 <Brr_ControlBarrier_All_Dir>
					Brr_Inq_Status();
 8005cf4:	f7fa fd58 	bl	80007a8 <Brr_Inq_Status>
					printf("Setting ENTRY Direction Open\n");
 8005cf8:	4818      	ldr	r0, [pc, #96]	; (8005d5c <CMD_Test+0x254>)
 8005cfa:	f003 fba7 	bl	800944c <printf_>
	    		break;
 8005cfe:	e023      	b.n	8005d48 <CMD_Test+0x240>
	    	case 0x78 :			//x	exit
	    		if(Add_200_Value & 0x88)
 8005d00:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <CMD_Test+0x248>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <CMD_Test+0x20c>
	    		{
	         		printf("Setting break \n");
 8005d0c:	4811      	ldr	r0, [pc, #68]	; (8005d54 <CMD_Test+0x24c>)
 8005d0e:	f003 fb9d 	bl	800944c <printf_>
					Brr_ControlBarrier_All_OPnC_Dir(OPEN);
					Brr_ControlBarrier_All_Dir(EXIT);
					Brr_Inq_Status();
					printf("Setting EXIT Direction Open\n");
	    		}
	    		break;
 8005d12:	e019      	b.n	8005d48 <CMD_Test+0x240>
	    		else if(Add_200_Value & 0x22)
 8005d14:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <CMD_Test+0x248>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <CMD_Test+0x220>
		    		printf("Setting Emergency \n");
 8005d20:	480d      	ldr	r0, [pc, #52]	; (8005d58 <CMD_Test+0x250>)
 8005d22:	f003 fb93 	bl	800944c <printf_>
	    		break;
 8005d26:	e00f      	b.n	8005d48 <CMD_Test+0x240>
					Brr_ControlBarrier_All_OPnC_Dir(OPEN);
 8005d28:	2004      	movs	r0, #4
 8005d2a:	f000 fa93 	bl	8006254 <Brr_ControlBarrier_All_OPnC_Dir>
					Brr_ControlBarrier_All_Dir(EXIT);
 8005d2e:	2010      	movs	r0, #16
 8005d30:	f000 fad0 	bl	80062d4 <Brr_ControlBarrier_All_Dir>
					Brr_Inq_Status();
 8005d34:	f7fa fd38 	bl	80007a8 <Brr_Inq_Status>
					printf("Setting EXIT Direction Open\n");
 8005d38:	4809      	ldr	r0, [pc, #36]	; (8005d60 <CMD_Test+0x258>)
 8005d3a:	f003 fb87 	bl	800944c <printf_>
	    		break;
 8005d3e:	e003      	b.n	8005d48 <CMD_Test+0x240>
	    	case 0x30 :			//Barrier_Value
	    		Barrier_Val();
 8005d40:	f000 fb08 	bl	8006354 <Barrier_Val>
	    		break;
 8005d44:	e000      	b.n	8005d48 <CMD_Test+0x240>
	    		break;
 8005d46:	bf00      	nop


    }
}
 8005d48:	bf00      	nop
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	2400053e 	.word	0x2400053e
 8005d54:	08011638 	.word	0x08011638
 8005d58:	08011648 	.word	0x08011648
 8005d5c:	0801165c 	.word	0x0801165c
 8005d60:	0801167c 	.word	0x0801167c

08005d64 <BuzzerOn>:
uint8_t Add_100_Value = 0;
uint8_t Add_200_Value = 0;
uint8_t Add_400_Value = 0;

void BuzzerOn(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(BUZZ_CON_GPIO_Port,BUZZ_CON_Pin,GPIO_PIN_SET);
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d6e:	4802      	ldr	r0, [pc, #8]	; (8005d78 <BuzzerOn+0x14>)
 8005d70:	f004 fe52 	bl	800aa18 <HAL_GPIO_WritePin>
}
 8005d74:	bf00      	nop
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	58020000 	.word	0x58020000

08005d7c <BuzzerOff>:


void BuzzerOff(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZ_CON_GPIO_Port,BUZZ_CON_Pin,GPIO_PIN_RESET);
 8005d80:	2200      	movs	r2, #0
 8005d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d86:	4802      	ldr	r0, [pc, #8]	; (8005d90 <BuzzerOff+0x14>)
 8005d88:	f004 fe46 	bl	800aa18 <HAL_GPIO_WritePin>
}
 8005d8c:	bf00      	nop
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	58020000 	.word	0x58020000

08005d94 <ControlStatusLED_En>:


void ControlStatusLED_En(UINT8 nValue)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0xFC;			//1111 1100
 8005d9e:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <ControlStatusLED_En+0x5c>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	4b11      	ldr	r3, [pc, #68]	; (8005df0 <ControlStatusLED_En+0x5c>)
 8005daa:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8005dac:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005db0:	4a0f      	ldr	r2, [pc, #60]	; (8005df0 <ControlStatusLED_En+0x5c>)
 8005db2:	7812      	ldrb	r2, [r2, #0]
 8005db4:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= (UINT8)(nValue & 0x03);
 8005db6:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	b25a      	sxtb	r2, r3
 8005dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	b25b      	sxtb	r3, r3
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	b25a      	sxtb	r2, r3
 8005dce:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 8005dd6:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <ControlStatusLED_En+0x5c>)
 8005de0:	701a      	strb	r2, [r3, #0]

}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	2400053c 	.word	0x2400053c

08005df4 <ControlStatusLED_Ex>:

void ControlStatusLED_Ex(UINT8 nValue)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0xCF;				//1100 1111
 8005dfe:	4b14      	ldr	r3, [pc, #80]	; (8005e50 <ControlStatusLED_Ex+0x5c>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	4b11      	ldr	r3, [pc, #68]	; (8005e50 <ControlStatusLED_Ex+0x5c>)
 8005e0a:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8005e0c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005e10:	4a0f      	ldr	r2, [pc, #60]	; (8005e50 <ControlStatusLED_Ex+0x5c>)
 8005e12:	7812      	ldrb	r2, [r2, #0]
 8005e14:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= (UINT8)((nValue << 4) & 0x30);
 8005e16:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	b25a      	sxtb	r2, r3
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	b25b      	sxtb	r3, r3
 8005e26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e2a:	b25b      	sxtb	r3, r3
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	b25a      	sxtb	r2, r3
 8005e30:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 8005e38:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <ControlStatusLED_Ex+0x5c>)
 8005e42:	701a      	strb	r2, [r3, #0]

}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	2400053c 	.word	0x2400053c

08005e54 <ControlOverHeadDisplay_En>:

void ControlOverHeadDisplay_En(UINT8 nValue)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0xF3;	// 1001 1111
 8005e5e:	4b15      	ldr	r3, [pc, #84]	; (8005eb4 <ControlOverHeadDisplay_En+0x60>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	f023 030c 	bic.w	r3, r3, #12
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <ControlOverHeadDisplay_En+0x60>)
 8005e6a:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8005e6c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005e70:	4a10      	ldr	r2, [pc, #64]	; (8005eb4 <ControlOverHeadDisplay_En+0x60>)
 8005e72:	7812      	ldrb	r2, [r2, #0]
 8005e74:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= ((UINT8) (nValue << 2) & 0x0C);
 8005e76:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	b25a      	sxtb	r2, r3
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	b25b      	sxtb	r3, r3
 8005e88:	f003 030c 	and.w	r3, r3, #12
 8005e8c:	b25b      	sxtb	r3, r3
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	b25a      	sxtb	r2, r3
 8005e92:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 8005e9a:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <ControlOverHeadDisplay_En+0x60>)
 8005ea4:	701a      	strb	r2, [r3, #0]

	
	// H743 Version
	// WRITE00_ADR |= ((UINT8) nValue << 2);
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	2400053c 	.word	0x2400053c

08005eb8 <ControlOverHeadDisplay_Ex>:

void ControlOverHeadDisplay_Ex(UINT8 nValue)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	71fb      	strb	r3, [r7, #7]

	Add_000_Value &= 0x3F;
 8005ec2:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <ControlOverHeadDisplay_Ex+0x58>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <ControlOverHeadDisplay_Ex+0x58>)
 8005ece:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR = Add_000_Value;
 8005ed0:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005ed4:	4a0e      	ldr	r2, [pc, #56]	; (8005f10 <ControlOverHeadDisplay_Ex+0x58>)
 8005ed6:	7812      	ldrb	r2, [r2, #0]
 8005ed8:	701a      	strb	r2, [r3, #0]

	wnP_LED_CS_ADDR |= ((UINT8) (nValue << 6) & 0xC0);
 8005eda:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	b25a      	sxtb	r2, r3
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	019b      	lsls	r3, r3, #6
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	b25b      	sxtb	r3, r3
 8005eec:	4313      	orrs	r3, r2
 8005eee:	b25a      	sxtb	r2, r3
 8005ef0:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]

	Add_000_Value = wnP_LED_CS_ADDR;
 8005ef8:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	4b03      	ldr	r3, [pc, #12]	; (8005f10 <ControlOverHeadDisplay_Ex+0x58>)
 8005f02:	701a      	strb	r2, [r3, #0]

	// H743 Version
	// WRITE00_ADR |= ((UINT8) nValue << 6);
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	2400053c 	.word	0x2400053c

08005f14 <ControlIndicatorLight_En>:


void ControlIndicatorLight_En(UINT8 nValue)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	71fb      	strb	r3, [r7, #7]

	Add_100_Value &= 0xF8;
 8005f1e:	4b12      	ldr	r3, [pc, #72]	; (8005f68 <ControlIndicatorLight_En+0x54>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <ControlIndicatorLight_En+0x54>)
 8005f2a:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR = Add_100_Value;
 8005f2c:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <ControlIndicatorLight_En+0x58>)
 8005f2e:	4a0e      	ldr	r2, [pc, #56]	; (8005f68 <ControlIndicatorLight_En+0x54>)
 8005f30:	7812      	ldrb	r2, [r2, #0]
 8005f32:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR |= (UINT8)(nValue & 0x07);
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <ControlIndicatorLight_En+0x58>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	b25a      	sxtb	r2, r3
 8005f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	b25b      	sxtb	r3, r3
 8005f46:	4313      	orrs	r3, r2
 8005f48:	b25a      	sxtb	r2, r3
 8005f4a:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <ControlIndicatorLight_En+0x58>)
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]

	Add_100_Value = wnS_LED_CS_ADDR;
 8005f50:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <ControlIndicatorLight_En+0x58>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <ControlIndicatorLight_En+0x54>)
 8005f58:	701a      	strb	r2, [r3, #0]

}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	2400053d 	.word	0x2400053d
 8005f6c:	64000100 	.word	0x64000100

08005f70 <ControlIndicatorLight_Ex>:

void ControlIndicatorLight_Ex(UINT8 nValue)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]

	Add_100_Value &= 0x8F;
 8005f7a:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <ControlIndicatorLight_Ex+0x54>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <ControlIndicatorLight_Ex+0x54>)
 8005f86:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR = Add_100_Value;
 8005f88:	4b0f      	ldr	r3, [pc, #60]	; (8005fc8 <ControlIndicatorLight_Ex+0x58>)
 8005f8a:	4a0e      	ldr	r2, [pc, #56]	; (8005fc4 <ControlIndicatorLight_Ex+0x54>)
 8005f8c:	7812      	ldrb	r2, [r2, #0]
 8005f8e:	701a      	strb	r2, [r3, #0]

	wnS_LED_CS_ADDR |= (UINT8)((nValue<<4) & 0x70);
 8005f90:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <ControlIndicatorLight_Ex+0x58>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	b25a      	sxtb	r2, r3
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	b25b      	sxtb	r3, r3
 8005f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fa2:	b25b      	sxtb	r3, r3
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	b25a      	sxtb	r2, r3
 8005fa8:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <ControlIndicatorLight_Ex+0x58>)
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]

	Add_100_Value = wnS_LED_CS_ADDR;
 8005fae:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <ControlIndicatorLight_Ex+0x58>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <ControlIndicatorLight_Ex+0x54>)
 8005fb6:	701a      	strb	r2, [r3, #0]

}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	2400053d 	.word	0x2400053d
 8005fc8:	64000100 	.word	0x64000100

08005fcc <Brr_SetEmergency_P>:


void Brr_SetEmergency_P(bool isActive)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 8005fd6:	4b10      	ldr	r3, [pc, #64]	; (8006018 <Brr_SetEmergency_P+0x4c>)
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <Brr_SetEmergency_P+0x4c>)
 8005fdc:	701a      	strb	r2, [r3, #0]

	switch(isActive)
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d107      	bne.n	8005ff4 <Brr_SetEmergency_P+0x28>
	{
	case TRUE:
		Add_200_Value |= ((UINT8) ON << 1);
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <Brr_SetEmergency_P+0x4c>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	f043 0302 	orr.w	r3, r3, #2
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <Brr_SetEmergency_P+0x4c>)
 8005ff0:	701a      	strb	r2, [r3, #0]
		break;
 8005ff2:	e007      	b.n	8006004 <Brr_SetEmergency_P+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 1) & 0xFF));
 8005ff4:	4b08      	ldr	r3, [pc, #32]	; (8006018 <Brr_SetEmergency_P+0x4c>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	f023 0302 	bic.w	r3, r3, #2
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <Brr_SetEmergency_P+0x4c>)
 8006000:	701a      	strb	r2, [r3, #0]
		break;
 8006002:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <Brr_SetEmergency_P+0x50>)
 8006006:	4a04      	ldr	r2, [pc, #16]	; (8006018 <Brr_SetEmergency_P+0x4c>)
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	701a      	strb	r2, [r3, #0]
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	2400053e 	.word	0x2400053e
 800601c:	64000200 	.word	0x64000200

08006020 <Brr_SetEmergency_S>:


void Brr_SetEmergency_S(bool isActive)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 800602a:	4b10      	ldr	r3, [pc, #64]	; (800606c <Brr_SetEmergency_S+0x4c>)
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	4b0f      	ldr	r3, [pc, #60]	; (800606c <Brr_SetEmergency_S+0x4c>)
 8006030:	701a      	strb	r2, [r3, #0]
	switch(isActive)
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d107      	bne.n	8006048 <Brr_SetEmergency_S+0x28>
	{
	case TRUE:
		Add_200_Value  |= ((UINT8) ON << 5);
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <Brr_SetEmergency_S+0x4c>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	f043 0320 	orr.w	r3, r3, #32
 8006040:	b2da      	uxtb	r2, r3
 8006042:	4b0a      	ldr	r3, [pc, #40]	; (800606c <Brr_SetEmergency_S+0x4c>)
 8006044:	701a      	strb	r2, [r3, #0]
		break;
 8006046:	e007      	b.n	8006058 <Brr_SetEmergency_S+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 5) & 0xFF));
 8006048:	4b08      	ldr	r3, [pc, #32]	; (800606c <Brr_SetEmergency_S+0x4c>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	f023 0320 	bic.w	r3, r3, #32
 8006050:	b2da      	uxtb	r2, r3
 8006052:	4b06      	ldr	r3, [pc, #24]	; (800606c <Brr_SetEmergency_S+0x4c>)
 8006054:	701a      	strb	r2, [r3, #0]
		break;
 8006056:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <Brr_SetEmergency_S+0x50>)
 800605a:	4a04      	ldr	r2, [pc, #16]	; (800606c <Brr_SetEmergency_S+0x4c>)
 800605c:	7812      	ldrb	r2, [r2, #0]
 800605e:	701a      	strb	r2, [r3, #0]
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	2400053e 	.word	0x2400053e
 8006070:	64000200 	.word	0x64000200

08006074 <Brr_SetBreak_P>:



void Brr_SetBreak_P(bool isActive)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 800607e:	4b10      	ldr	r3, [pc, #64]	; (80060c0 <Brr_SetBreak_P+0x4c>)
 8006080:	781a      	ldrb	r2, [r3, #0]
 8006082:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <Brr_SetBreak_P+0x4c>)
 8006084:	701a      	strb	r2, [r3, #0]

	switch(isActive)
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d107      	bne.n	800609c <Brr_SetBreak_P+0x28>
	{
	case TRUE:
		Add_200_Value |= ((UINT8) ON << 3);
 800608c:	4b0c      	ldr	r3, [pc, #48]	; (80060c0 <Brr_SetBreak_P+0x4c>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	f043 0308 	orr.w	r3, r3, #8
 8006094:	b2da      	uxtb	r2, r3
 8006096:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <Brr_SetBreak_P+0x4c>)
 8006098:	701a      	strb	r2, [r3, #0]
		break;
 800609a:	e007      	b.n	80060ac <Brr_SetBreak_P+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 3) & 0xFF));
 800609c:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <Brr_SetBreak_P+0x4c>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	f023 0308 	bic.w	r3, r3, #8
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <Brr_SetBreak_P+0x4c>)
 80060a8:	701a      	strb	r2, [r3, #0]
		break;
 80060aa:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <Brr_SetBreak_P+0x50>)
 80060ae:	4a04      	ldr	r2, [pc, #16]	; (80060c0 <Brr_SetBreak_P+0x4c>)
 80060b0:	7812      	ldrb	r2, [r2, #0]
 80060b2:	701a      	strb	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	2400053e 	.word	0x2400053e
 80060c4:	64000200 	.word	0x64000200

080060c8 <Brr_SetBreak_S>:


void Brr_SetBreak_S(bool isActive)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	4603      	mov	r3, r0
 80060d0:	71fb      	strb	r3, [r7, #7]
	Add_200_Value &= 0xFF;
 80060d2:	4b10      	ldr	r3, [pc, #64]	; (8006114 <Brr_SetBreak_S+0x4c>)
 80060d4:	781a      	ldrb	r2, [r3, #0]
 80060d6:	4b0f      	ldr	r3, [pc, #60]	; (8006114 <Brr_SetBreak_S+0x4c>)
 80060d8:	701a      	strb	r2, [r3, #0]
	switch(isActive)
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d107      	bne.n	80060f0 <Brr_SetBreak_S+0x28>
	{
	case TRUE:
		Add_200_Value  |= ((UINT8) ON << 7);
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <Brr_SetBreak_S+0x4c>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <Brr_SetBreak_S+0x4c>)
 80060ec:	701a      	strb	r2, [r3, #0]
		break;
 80060ee:	e007      	b.n	8006100 <Brr_SetBreak_S+0x38>
	case FALSE:
		Add_200_Value &= (UINT8)((~(ON << 7) & 0xFF));
 80060f0:	4b08      	ldr	r3, [pc, #32]	; (8006114 <Brr_SetBreak_S+0x4c>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	4b06      	ldr	r3, [pc, #24]	; (8006114 <Brr_SetBreak_S+0x4c>)
 80060fc:	701a      	strb	r2, [r3, #0]
		break;
 80060fe:	bf00      	nop

	}

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <Brr_SetBreak_S+0x50>)
 8006102:	4a04      	ldr	r2, [pc, #16]	; (8006114 <Brr_SetBreak_S+0x4c>)
 8006104:	7812      	ldrb	r2, [r2, #0]
 8006106:	701a      	strb	r2, [r3, #0]
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	2400053e 	.word	0x2400053e
 8006118:	64000200 	.word	0x64000200

0800611c <Brr_ControlBarrier_P>:

void Brr_ControlBarrier_P(UINT8 nValue)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	71fb      	strb	r3, [r7, #7]

	wnBRR_OUT_CS_ADDR = Add_200_Value;
 8006126:	4b22      	ldr	r3, [pc, #136]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 8006128:	4a22      	ldr	r2, [pc, #136]	; (80061b4 <Brr_ControlBarrier_P+0x98>)
 800612a:	7812      	ldrb	r2, [r2, #0]
 800612c:	701a      	strb	r2, [r3, #0]

	switch(nValue)
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d020      	beq.n	8006176 <Brr_ControlBarrier_P+0x5a>
 8006134:	2b02      	cmp	r3, #2
 8006136:	dc2f      	bgt.n	8006198 <Brr_ControlBarrier_P+0x7c>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <Brr_ControlBarrier_P+0x26>
 800613c:	2b01      	cmp	r3, #1
 800613e:	d011      	beq.n	8006164 <Brr_ControlBarrier_P+0x48>
 8006140:	e02a      	b.n	8006198 <Brr_ControlBarrier_P+0x7c>
	{
	case ENTRY_OPEN :
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 2) & 0xFF));
 8006142:	4b1b      	ldr	r3, [pc, #108]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	4a19      	ldr	r2, [pc, #100]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 800614a:	f023 0304 	bic.w	r3, r3, #4
 800614e:	b2db      	uxtb	r3, r3
 8006150:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 0) & 0xFF));
 8006152:	4b17      	ldr	r3, [pc, #92]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 800615a:	f023 0301 	bic.w	r3, r3, #1
 800615e:	b2db      	uxtb	r3, r3
 8006160:	7013      	strb	r3, [r2, #0]
		break;
 8006162:	e019      	b.n	8006198 <Brr_ControlBarrier_P+0x7c>
	case CLOSE :
		wnBRR_OUT_CS_ADDR |= (UINT8)(1 << 0);
 8006164:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	b2db      	uxtb	r3, r3
 800616a:	4a11      	ldr	r2, [pc, #68]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	b2db      	uxtb	r3, r3
 8006172:	7013      	strb	r3, [r2, #0]
		break;
 8006174:	e010      	b.n	8006198 <Brr_ControlBarrier_P+0x7c>
	case EXIT_OPEN :
		wnBRR_OUT_CS_ADDR |= (UINT8)(((1 << 2) & 0xFF));
 8006176:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	4a0c      	ldr	r2, [pc, #48]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 800617e:	f043 0304 	orr.w	r3, r3, #4
 8006182:	b2db      	uxtb	r3, r3
 8006184:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR  &= (UINT8)((~(1 << 0) & 0xFF));
 8006186:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	4a08      	ldr	r2, [pc, #32]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 800618e:	f023 0301 	bic.w	r3, r3, #1
 8006192:	b2db      	uxtb	r3, r3
 8006194:	7013      	strb	r3, [r2, #0]
		break;
 8006196:	bf00      	nop
	}

	Add_200_Value = wnBRR_OUT_CS_ADDR;
 8006198:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <Brr_ControlBarrier_P+0x94>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	b2da      	uxtb	r2, r3
 800619e:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <Brr_ControlBarrier_P+0x98>)
 80061a0:	701a      	strb	r2, [r3, #0]
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	64000200 	.word	0x64000200
 80061b4:	2400053e 	.word	0x2400053e

080061b8 <Brr_ControlBarrier_S>:


void Brr_ControlBarrier_S(UINT8 nValue)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	71fb      	strb	r3, [r7, #7]

    wnBRR_OUT_CS_ADDR = Add_200_Value;
 80061c2:	4b22      	ldr	r3, [pc, #136]	; (800624c <Brr_ControlBarrier_S+0x94>)
 80061c4:	4a22      	ldr	r2, [pc, #136]	; (8006250 <Brr_ControlBarrier_S+0x98>)
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	701a      	strb	r2, [r3, #0]

	switch(nValue)
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d020      	beq.n	8006212 <Brr_ControlBarrier_S+0x5a>
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	dc2f      	bgt.n	8006234 <Brr_ControlBarrier_S+0x7c>
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <Brr_ControlBarrier_S+0x26>
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d011      	beq.n	8006200 <Brr_ControlBarrier_S+0x48>
 80061dc:	e02a      	b.n	8006234 <Brr_ControlBarrier_S+0x7c>
	{
	case ENTRY_OPEN :
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 6) & 0xFF));
 80061de:	4b1b      	ldr	r3, [pc, #108]	; (800624c <Brr_ControlBarrier_S+0x94>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	4a19      	ldr	r2, [pc, #100]	; (800624c <Brr_ControlBarrier_S+0x94>)
 80061e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 4) & 0xFF));
 80061ee:	4b17      	ldr	r3, [pc, #92]	; (800624c <Brr_ControlBarrier_S+0x94>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	4a15      	ldr	r2, [pc, #84]	; (800624c <Brr_ControlBarrier_S+0x94>)
 80061f6:	f023 0310 	bic.w	r3, r3, #16
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	7013      	strb	r3, [r2, #0]
		break;
 80061fe:	e019      	b.n	8006234 <Brr_ControlBarrier_S+0x7c>
	case CLOSE :
		wnBRR_OUT_CS_ADDR |= (UINT8)(1 << 4);
 8006200:	4b12      	ldr	r3, [pc, #72]	; (800624c <Brr_ControlBarrier_S+0x94>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	4a11      	ldr	r2, [pc, #68]	; (800624c <Brr_ControlBarrier_S+0x94>)
 8006208:	f043 0310 	orr.w	r3, r3, #16
 800620c:	b2db      	uxtb	r3, r3
 800620e:	7013      	strb	r3, [r2, #0]
		break;
 8006210:	e010      	b.n	8006234 <Brr_ControlBarrier_S+0x7c>
	case EXIT_OPEN :
		wnBRR_OUT_CS_ADDR |= (UINT8)(((1 << 6) & 0xFF));
 8006212:	4b0e      	ldr	r3, [pc, #56]	; (800624c <Brr_ControlBarrier_S+0x94>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	4a0c      	ldr	r2, [pc, #48]	; (800624c <Brr_ControlBarrier_S+0x94>)
 800621a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800621e:	b2db      	uxtb	r3, r3
 8006220:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR  &= (UINT8)((~(1 << 4) & 0xFF));
 8006222:	4b0a      	ldr	r3, [pc, #40]	; (800624c <Brr_ControlBarrier_S+0x94>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	4a08      	ldr	r2, [pc, #32]	; (800624c <Brr_ControlBarrier_S+0x94>)
 800622a:	f023 0310 	bic.w	r3, r3, #16
 800622e:	b2db      	uxtb	r3, r3
 8006230:	7013      	strb	r3, [r2, #0]
		break;
 8006232:	bf00      	nop
	}

	Add_200_Value = wnBRR_OUT_CS_ADDR;
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <Brr_ControlBarrier_S+0x94>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	b2da      	uxtb	r2, r3
 800623a:	4b05      	ldr	r3, [pc, #20]	; (8006250 <Brr_ControlBarrier_S+0x98>)
 800623c:	701a      	strb	r2, [r3, #0]
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	64000200 	.word	0x64000200
 8006250:	2400053e 	.word	0x2400053e

08006254 <Brr_ControlBarrier_All_OPnC_Dir>:


void Brr_ControlBarrier_All_OPnC_Dir(UINT8 nValue)		//open/close
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	71fb      	strb	r3, [r7, #7]

    wnBRR_OUT_CS_ADDR = Add_200_Value;
 800625e:	4b1b      	ldr	r3, [pc, #108]	; (80062cc <Brr_ControlBarrier_All_OPnC_Dir+0x78>)
 8006260:	4a1b      	ldr	r2, [pc, #108]	; (80062d0 <Brr_ControlBarrier_All_OPnC_Dir+0x7c>)
 8006262:	7812      	ldrb	r2, [r2, #0]
 8006264:	701a      	strb	r2, [r3, #0]

	switch(nValue)
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d012      	beq.n	8006292 <Brr_ControlBarrier_All_OPnC_Dir+0x3e>
 800626c:	2b04      	cmp	r3, #4
 800626e:	d121      	bne.n	80062b4 <Brr_ControlBarrier_All_OPnC_Dir+0x60>
	{
	case OPEN :
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 4) & 0xFF));
 8006270:	4b16      	ldr	r3, [pc, #88]	; (80062cc <Brr_ControlBarrier_All_OPnC_Dir+0x78>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	4a15      	ldr	r2, [pc, #84]	; (80062cc <Brr_ControlBarrier_All_OPnC_Dir+0x78>)
 8006278:	f023 0310 	bic.w	r3, r3, #16
 800627c:	b2db      	uxtb	r3, r3
 800627e:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 0) & 0xFF));
 8006280:	4b12      	ldr	r3, [pc, #72]	; (80062cc <Brr_ControlBarrier_All_OPnC_Dir+0x78>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	4a11      	ldr	r2, [pc, #68]	; (80062cc <Brr_ControlBarrier_All_OPnC_Dir+0x78>)
 8006288:	f023 0301 	bic.w	r3, r3, #1
 800628c:	b2db      	uxtb	r3, r3
 800628e:	7013      	strb	r3, [r2, #0]
		break;
 8006290:	e010      	b.n	80062b4 <Brr_ControlBarrier_All_OPnC_Dir+0x60>
	case CLOSE :
		wnBRR_OUT_CS_ADDR |= (UINT8)(1 << 4);
 8006292:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <Brr_ControlBarrier_All_OPnC_Dir+0x78>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	4a0c      	ldr	r2, [pc, #48]	; (80062cc <Brr_ControlBarrier_All_OPnC_Dir+0x78>)
 800629a:	f043 0310 	orr.w	r3, r3, #16
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR |= (UINT8)(1 << 0);
 80062a2:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <Brr_ControlBarrier_All_OPnC_Dir+0x78>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <Brr_ControlBarrier_All_OPnC_Dir+0x78>)
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	7013      	strb	r3, [r2, #0]
		break;
 80062b2:	bf00      	nop
	}

	Add_200_Value = wnBRR_OUT_CS_ADDR;
 80062b4:	4b05      	ldr	r3, [pc, #20]	; (80062cc <Brr_ControlBarrier_All_OPnC_Dir+0x78>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <Brr_ControlBarrier_All_OPnC_Dir+0x7c>)
 80062bc:	701a      	strb	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	64000200 	.word	0x64000200
 80062d0:	2400053e 	.word	0x2400053e

080062d4 <Brr_ControlBarrier_All_Dir>:


void Brr_ControlBarrier_All_Dir(UINT8 nValue)		//direction
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	4603      	mov	r3, r0
 80062dc:	71fb      	strb	r3, [r7, #7]

    wnBRR_OUT_CS_ADDR = Add_200_Value;
 80062de:	4b1b      	ldr	r3, [pc, #108]	; (800634c <Brr_ControlBarrier_All_Dir+0x78>)
 80062e0:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <Brr_ControlBarrier_All_Dir+0x7c>)
 80062e2:	7812      	ldrb	r2, [r2, #0]
 80062e4:	701a      	strb	r2, [r3, #0]

	switch(nValue)
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d002      	beq.n	80062f2 <Brr_ControlBarrier_All_Dir+0x1e>
 80062ec:	2b10      	cmp	r3, #16
 80062ee:	d011      	beq.n	8006314 <Brr_ControlBarrier_All_Dir+0x40>
 80062f0:	e021      	b.n	8006336 <Brr_ControlBarrier_All_Dir+0x62>
	{
	case ENTRY :
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 2) & 0xFF));
 80062f2:	4b16      	ldr	r3, [pc, #88]	; (800634c <Brr_ControlBarrier_All_Dir+0x78>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	4a14      	ldr	r2, [pc, #80]	; (800634c <Brr_ControlBarrier_All_Dir+0x78>)
 80062fa:	f023 0304 	bic.w	r3, r3, #4
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR &= (UINT8)((~(1 << 6) & 0xFF));
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <Brr_ControlBarrier_All_Dir+0x78>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	4a10      	ldr	r2, [pc, #64]	; (800634c <Brr_ControlBarrier_All_Dir+0x78>)
 800630a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630e:	b2db      	uxtb	r3, r3
 8006310:	7013      	strb	r3, [r2, #0]
		break;
 8006312:	e010      	b.n	8006336 <Brr_ControlBarrier_All_Dir+0x62>
	case EXIT :
		wnBRR_OUT_CS_ADDR |= (UINT8)(((1 << 2) & 0xFF));
 8006314:	4b0d      	ldr	r3, [pc, #52]	; (800634c <Brr_ControlBarrier_All_Dir+0x78>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	4a0c      	ldr	r2, [pc, #48]	; (800634c <Brr_ControlBarrier_All_Dir+0x78>)
 800631c:	f043 0304 	orr.w	r3, r3, #4
 8006320:	b2db      	uxtb	r3, r3
 8006322:	7013      	strb	r3, [r2, #0]
		wnBRR_OUT_CS_ADDR |= (UINT8)(((1 << 6) & 0xFF));
 8006324:	4b09      	ldr	r3, [pc, #36]	; (800634c <Brr_ControlBarrier_All_Dir+0x78>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	4a08      	ldr	r2, [pc, #32]	; (800634c <Brr_ControlBarrier_All_Dir+0x78>)
 800632c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006330:	b2db      	uxtb	r3, r3
 8006332:	7013      	strb	r3, [r2, #0]
		break;
 8006334:	bf00      	nop
	}
	Add_200_Value = wnBRR_OUT_CS_ADDR;
 8006336:	4b05      	ldr	r3, [pc, #20]	; (800634c <Brr_ControlBarrier_All_Dir+0x78>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	b2da      	uxtb	r2, r3
 800633c:	4b04      	ldr	r3, [pc, #16]	; (8006350 <Brr_ControlBarrier_All_Dir+0x7c>)
 800633e:	701a      	strb	r2, [r3, #0]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	64000200 	.word	0x64000200
 8006350:	2400053e 	.word	0x2400053e

08006354 <Barrier_Val>:
	wnBRR_OUT_CS_ADDR = Add_200_Value;
}


void Barrier_Val(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
	printf("Address_Barrier_Write = [0x%02X]\n", Add_200_Value);
 8006358:	4b03      	ldr	r3, [pc, #12]	; (8006368 <Barrier_Val+0x14>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	4619      	mov	r1, r3
 800635e:	4803      	ldr	r0, [pc, #12]	; (800636c <Barrier_Val+0x18>)
 8006360:	f009 fabc 	bl	800f8dc <iprintf>
}
 8006364:	bf00      	nop
 8006366:	bd80      	pop	{r7, pc}
 8006368:	2400053e 	.word	0x2400053e
 800636c:	0801169c 	.word	0x0801169c

08006370 <USART3_UART_Init>:

IUART_T 	iUartTable[IUART_MAXPORT];


void USART3_UART_Init(int nBaudRate)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
	HAL_UART_DeInit(&huart3);
 8006378:	480b      	ldr	r0, [pc, #44]	; (80063a8 <USART3_UART_Init+0x38>)
 800637a:	f007 ff1b 	bl	800e1b4 <HAL_UART_DeInit>
	iUartTable[2].fIsOpen = FALSE;
 800637e:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <USART3_UART_Init+0x3c>)
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	iUartTable[2].nBaud = nBaudRate;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a08      	ldr	r2, [pc, #32]	; (80063ac <USART3_UART_Init+0x3c>)
 800638a:	62d3      	str	r3, [r2, #44]	; 0x2c
	iUartTable[2].hUart = NULL;
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <USART3_UART_Init+0x3c>)
 800638e:	2200      	movs	r2, #0
 8006390:	639a      	str	r2, [r3, #56]	; 0x38
	IUart_Open(COM3, iUartTable[COM3].nBaud);
 8006392:	4b06      	ldr	r3, [pc, #24]	; (80063ac <USART3_UART_Init+0x3c>)
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	4619      	mov	r1, r3
 8006398:	2002      	movs	r0, #2
 800639a:	f000 f8d3 	bl	8006544 <IUart_Open>
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	24001d44 	.word	0x24001d44
 80063ac:	24001990 	.word	0x24001990

080063b0 <bsp_InitIUart>:

void bsp_InitIUart()
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
	UINT32 	i;

	HAL_UART_DeInit(&huart1);
 80063b6:	485d      	ldr	r0, [pc, #372]	; (800652c <bsp_InitIUart+0x17c>)
 80063b8:	f007 fefc 	bl	800e1b4 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart2);
 80063bc:	485c      	ldr	r0, [pc, #368]	; (8006530 <bsp_InitIUart+0x180>)
 80063be:	f007 fef9 	bl	800e1b4 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart3);
 80063c2:	485c      	ldr	r0, [pc, #368]	; (8006534 <bsp_InitIUart+0x184>)
 80063c4:	f007 fef6 	bl	800e1b4 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart4);
 80063c8:	485b      	ldr	r0, [pc, #364]	; (8006538 <bsp_InitIUart+0x188>)
 80063ca:	f007 fef3 	bl	800e1b4 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart5);
 80063ce:	485b      	ldr	r0, [pc, #364]	; (800653c <bsp_InitIUart+0x18c>)
 80063d0:	f007 fef0 	bl	800e1b4 <HAL_UART_DeInit>

	for ( i = 0; i < IUART_MAXPORT; i++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	e086      	b.n	80064e8 <bsp_InitIUart+0x138>
	{
		if(i == COM3)			//
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d11e      	bne.n	800641e <bsp_InitIUart+0x6e>
		{
			iUartTable[i].fIsOpen = FALSE;
 80063e0:	4957      	ldr	r1, [pc, #348]	; (8006540 <bsp_InitIUart+0x190>)
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	2200      	movs	r2, #0
 80063f0:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 57600;
 80063f2:	4953      	ldr	r1, [pc, #332]	; (8006540 <bsp_InitIUart+0x190>)
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	3304      	adds	r3, #4
 8006402:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006406:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8006408:	494d      	ldr	r1, [pc, #308]	; (8006540 <bsp_InitIUart+0x190>)
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	3310      	adds	r3, #16
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	e061      	b.n	80064e2 <bsp_InitIUart+0x132>

		}
		else if(i == COM4)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d11e      	bne.n	8006462 <bsp_InitIUart+0xb2>
		{
			iUartTable[i].fIsOpen = FALSE;
 8006424:	4946      	ldr	r1, [pc, #280]	; (8006540 <bsp_InitIUart+0x190>)
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	440b      	add	r3, r1
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 38400;
 8006436:	4942      	ldr	r1, [pc, #264]	; (8006540 <bsp_InitIUart+0x190>)
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	3304      	adds	r3, #4
 8006446:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800644a:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 800644c:	493c      	ldr	r1, [pc, #240]	; (8006540 <bsp_InitIUart+0x190>)
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	3310      	adds	r3, #16
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	e03f      	b.n	80064e2 <bsp_InitIUart+0x132>
		}
		else if(i == COM5)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b04      	cmp	r3, #4
 8006466:	d11e      	bne.n	80064a6 <bsp_InitIUart+0xf6>
		{
			iUartTable[i].fIsOpen = FALSE;
 8006468:	4935      	ldr	r1, [pc, #212]	; (8006540 <bsp_InitIUart+0x190>)
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	440b      	add	r3, r1
 8006476:	2200      	movs	r2, #0
 8006478:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 38400;
 800647a:	4931      	ldr	r1, [pc, #196]	; (8006540 <bsp_InitIUart+0x190>)
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	440b      	add	r3, r1
 8006488:	3304      	adds	r3, #4
 800648a:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800648e:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 8006490:	492b      	ldr	r1, [pc, #172]	; (8006540 <bsp_InitIUart+0x190>)
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	3310      	adds	r3, #16
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	e01d      	b.n	80064e2 <bsp_InitIUart+0x132>
		}
		else
		{
			iUartTable[i].fIsOpen = FALSE;
 80064a6:	4926      	ldr	r1, [pc, #152]	; (8006540 <bsp_InitIUart+0x190>)
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
			iUartTable[i].nBaud = 115200;
 80064b8:	4921      	ldr	r1, [pc, #132]	; (8006540 <bsp_InitIUart+0x190>)
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	3304      	adds	r3, #4
 80064c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80064cc:	601a      	str	r2, [r3, #0]
			iUartTable[i].hUart = NULL;
 80064ce:	491c      	ldr	r1, [pc, #112]	; (8006540 <bsp_InitIUart+0x190>)
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	3310      	adds	r3, #16
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]
	for ( i = 0; i < IUART_MAXPORT; i++)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3301      	adds	r3, #1
 80064e6:	607b      	str	r3, [r7, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	f67f af75 	bls.w	80063da <bsp_InitIUart+0x2a>
		}
	}

	IUart_Open(COM1, IUART1_BAUD);
 80064f0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80064f4:	2000      	movs	r0, #0
 80064f6:	f000 f825 	bl	8006544 <IUart_Open>
	IUart_Open(COM2, IUART2_BAUD);
 80064fa:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80064fe:	2001      	movs	r0, #1
 8006500:	f000 f820 	bl	8006544 <IUart_Open>
	IUart_Open(COM3, IUART3_BAUD);
 8006504:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8006508:	2002      	movs	r0, #2
 800650a:	f000 f81b 	bl	8006544 <IUart_Open>
	IUart_Open(COM4, IUART4_BAUD);
 800650e:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8006512:	2003      	movs	r0, #3
 8006514:	f000 f816 	bl	8006544 <IUart_Open>
	IUart_Open(COM5, IUART5_BAUD);
 8006518:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 800651c:	2004      	movs	r0, #4
 800651e:	f000 f811 	bl	8006544 <IUart_Open>
}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	24001c1c 	.word	0x24001c1c
 8006530:	24001cb0 	.word	0x24001cb0
 8006534:	24001d44 	.word	0x24001d44
 8006538:	24001af4 	.word	0x24001af4
 800653c:	24001b88 	.word	0x24001b88
 8006540:	24001990 	.word	0x24001990

08006544 <IUart_Open>:


BOOL IUart_Open(int nComPort, UINT32 nBaud)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	; 0x28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
	IUART_T* pIUart = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	623b      	str	r3, [r7, #32]
	IRQn_Type	irqNType = USART1_IRQn;
 8006552:	2325      	movs	r3, #37	; 0x25
 8006554:	84fb      	strh	r3, [r7, #38]	; 0x26

	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	db02      	blt.n	8006562 <IUart_Open+0x1e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b04      	cmp	r3, #4
 8006560:	dd01      	ble.n	8006566 <IUart_Open+0x22>
		return FALSE;
 8006562:	2300      	movs	r3, #0
 8006564:	e0dd      	b.n	8006722 <IUart_Open+0x1de>

	pIUart = &iUartTable[nComPort];
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4a6e      	ldr	r2, [pc, #440]	; (800672c <IUart_Open+0x1e8>)
 8006572:	4413      	add	r3, r2
 8006574:	623b      	str	r3, [r7, #32]

	if (nComPort == COM1)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d110      	bne.n	800659e <IUart_Open+0x5a>
	{
		pIUart->hUart = &huart1;
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	4a6c      	ldr	r2, [pc, #432]	; (8006730 <IUart_Open+0x1ec>)
 8006580:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf1;
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	4a6b      	ldr	r2, [pc, #428]	; (8006734 <IUart_Open+0x1f0>)
 8006586:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf1, IUART1_RX_BUF_SIZE);
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006590:	4969      	ldr	r1, [pc, #420]	; (8006738 <IUart_Open+0x1f4>)
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fa9c 	bl	8006ad0 <RBuf_Init>
		irqNType = USART1_IRQn;
 8006598:	2325      	movs	r3, #37	; 0x25
 800659a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800659c:	e051      	b.n	8006642 <IUart_Open+0xfe>
	}
	else if (nComPort == COM2)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d110      	bne.n	80065c6 <IUart_Open+0x82>
	{
		pIUart->hUart = &huart2;
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	4a65      	ldr	r2, [pc, #404]	; (800673c <IUart_Open+0x1f8>)
 80065a8:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf2;
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	4a64      	ldr	r2, [pc, #400]	; (8006740 <IUart_Open+0x1fc>)
 80065ae:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf2, IUART2_RX_BUF_SIZE);
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065b8:	4962      	ldr	r1, [pc, #392]	; (8006744 <IUart_Open+0x200>)
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fa88 	bl	8006ad0 <RBuf_Init>
		irqNType = USART2_IRQn;
 80065c0:	2326      	movs	r3, #38	; 0x26
 80065c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80065c4:	e03d      	b.n	8006642 <IUart_Open+0xfe>
	}
	else if (nComPort == COM3)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d110      	bne.n	80065ee <IUart_Open+0xaa>
	{
		pIUart->hUart = &huart3;
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	4a5e      	ldr	r2, [pc, #376]	; (8006748 <IUart_Open+0x204>)
 80065d0:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf3;
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	4a5d      	ldr	r2, [pc, #372]	; (800674c <IUart_Open+0x208>)
 80065d6:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf3, IUART3_RX_BUF_SIZE);
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065e0:	495b      	ldr	r1, [pc, #364]	; (8006750 <IUart_Open+0x20c>)
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fa74 	bl	8006ad0 <RBuf_Init>
		irqNType = USART3_IRQn;
 80065e8:	2327      	movs	r3, #39	; 0x27
 80065ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80065ec:	e029      	b.n	8006642 <IUart_Open+0xfe>
	}
	else if (nComPort == COM4)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d110      	bne.n	8006616 <IUart_Open+0xd2>
	{
		pIUart->hUart = &huart4;
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	4a57      	ldr	r2, [pc, #348]	; (8006754 <IUart_Open+0x210>)
 80065f8:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf4;
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	4a56      	ldr	r2, [pc, #344]	; (8006758 <IUart_Open+0x214>)
 80065fe:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf4, IUART4_RX_BUF_SIZE);
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006608:	4954      	ldr	r1, [pc, #336]	; (800675c <IUart_Open+0x218>)
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fa60 	bl	8006ad0 <RBuf_Init>
		irqNType = UART4_IRQn;
 8006610:	2334      	movs	r3, #52	; 0x34
 8006612:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006614:	e015      	b.n	8006642 <IUart_Open+0xfe>
	}
	else if (nComPort == COM5)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b04      	cmp	r3, #4
 800661a:	d110      	bne.n	800663e <IUart_Open+0xfa>
	{
		pIUart->hUart = &huart5;
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	4a50      	ldr	r2, [pc, #320]	; (8006760 <IUart_Open+0x21c>)
 8006620:	611a      	str	r2, [r3, #16]
		pIUart->pRxRingBuf = &s_RxRingBuf5;
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	4a4f      	ldr	r2, [pc, #316]	; (8006764 <IUart_Open+0x220>)
 8006626:	60da      	str	r2, [r3, #12]
		RBuf_Init(pIUart->pRxRingBuf, s_RxBuf5, IUART5_RX_BUF_SIZE);
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006630:	494d      	ldr	r1, [pc, #308]	; (8006768 <IUart_Open+0x224>)
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fa4c 	bl	8006ad0 <RBuf_Init>
		irqNType = UART5_IRQn;
 8006638:	2335      	movs	r3, #53	; 0x35
 800663a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800663c:	e001      	b.n	8006642 <IUart_Open+0xfe>

	}
	else
	{
		return FALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	e06f      	b.n	8006722 <IUart_Open+0x1de>
	}

	pIUart->hUart->Init.BaudRate 		= nBaud;
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	605a      	str	r2, [r3, #4]
	pIUart->hUart->Init.WordLength   	= UART_WORDLENGTH_8B;
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2200      	movs	r2, #0
 8006650:	609a      	str	r2, [r3, #8]
	pIUart->hUart->Init.StopBits     	= UART_STOPBITS_1;
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2200      	movs	r2, #0
 8006658:	60da      	str	r2, [r3, #12]
	pIUart->hUart->Init.Parity       	= UART_PARITY_NONE;
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2200      	movs	r2, #0
 8006660:	611a      	str	r2, [r3, #16]
	pIUart->hUart->Init.Mode         	= UART_MODE_TX_RX;
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	220c      	movs	r2, #12
 8006668:	615a      	str	r2, [r3, #20]
	pIUart->hUart->Init.HwFlowCtl    	= UART_HWCONTROL_NONE;
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2200      	movs	r2, #0
 8006670:	619a      	str	r2, [r3, #24]
	pIUart->hUart->Init.OverSampling 	= UART_OVERSAMPLING_16;
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2200      	movs	r2, #0
 8006678:	61da      	str	r2, [r3, #28]
	pIUart->hUart->Init.OneBitSampling 	= UART_ONE_BIT_SAMPLE_DISABLE;
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2200      	movs	r2, #0
 8006680:	621a      	str	r2, [r3, #32]
	pIUart->hUart->Init.ClockPrescaler 	= UART_PRESCALER_DIV1;
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2200      	movs	r2, #0
 8006688:	625a      	str	r2, [r3, #36]	; 0x24
	pIUart->hUart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2200      	movs	r2, #0
 8006690:	629a      	str	r2, [r3, #40]	; 0x28
	pIUart->hUart->AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_DISABLE;
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2200      	movs	r2, #0
 8006698:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_UART_Init(pIUart->hUart);
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	4618      	mov	r0, r3
 80066a0:	f007 fd38 	bl	800e114 <HAL_UART_Init>

    HAL_NVIC_SetPriority(irqNType, 0, 1);
 80066a4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80066a8:	2201      	movs	r2, #1
 80066aa:	2100      	movs	r1, #0
 80066ac:	4618      	mov	r0, r3
 80066ae:	f003 fe30 	bl	800a312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNType);
 80066b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80066b6:	4618      	mov	r0, r3
 80066b8:	f003 fe45 	bl	800a346 <HAL_NVIC_EnableIRQ>
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR3, USART_CR3_RXFTIE);
    // Enable the UART Parity Error interrupt and Data Register Not Empty interrupt
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
	*/

    SET_BIT(pIUart->hUart->Instance->ICR, USART_ICR_TCCF);   // Set Clear transfer complete flag
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6a1a      	ldr	r2, [r3, #32]
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ce:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->RQR, USART_RQR_RXFRQ);  // Set Receive Data flush Request
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699a      	ldr	r2, [r3, #24]
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0208 	orr.w	r2, r2, #8
 80066e2:	619a      	str	r2, [r3, #24]
    // USART_CR1_PEIE | USART_CR1_RXNEIE
    ATOMIC_SET_BIT(pIUart->hUart->Instance->CR1, USART_CR1_RXNEIE); // Set RX 수신 인터럽트
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f043 0320 	orr.w	r3, r3, #32
 80066fa:	61fb      	str	r3, [r7, #28]
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	61bb      	str	r3, [r7, #24]
 8006708:	617a      	str	r2, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6979      	ldr	r1, [r7, #20]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	613b      	str	r3, [r7, #16]
   return(result);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e4      	bne.n	80066e4 <IUart_Open+0x1a0>

    pIUart->fIsOpen = TRUE;
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]


	return TRUE;
 8006720:	2301      	movs	r3, #1
}
 8006722:	4618      	mov	r0, r3
 8006724:	3728      	adds	r7, #40	; 0x28
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	24001990 	.word	0x24001990
 8006730:	24001c1c 	.word	0x24001c1c
 8006734:	24000940 	.word	0x24000940
 8006738:	24000540 	.word	0x24000540
 800673c:	24001cb0 	.word	0x24001cb0
 8006740:	24000d50 	.word	0x24000d50
 8006744:	24000950 	.word	0x24000950
 8006748:	24001d44 	.word	0x24001d44
 800674c:	24001160 	.word	0x24001160
 8006750:	24000d60 	.word	0x24000d60
 8006754:	24001af4 	.word	0x24001af4
 8006758:	24001570 	.word	0x24001570
 800675c:	24001170 	.word	0x24001170
 8006760:	24001b88 	.word	0x24001b88
 8006764:	24001980 	.word	0x24001980
 8006768:	24001580 	.word	0x24001580

0800676c <IUart_SendByte>:
	}
}


int IUart_SendByte(int nComPort, BYTE bCh)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	db02      	blt.n	8006784 <IUart_SendByte+0x18>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b04      	cmp	r3, #4
 8006782:	dd02      	ble.n	800678a <IUart_SendByte+0x1e>
		return -1;
 8006784:	f04f 33ff 	mov.w	r3, #4294967295
 8006788:	e01c      	b.n	80067c4 <IUart_SendByte+0x58>

	while ((iUartTable[nComPort].hUart->Instance->ISR & UART_FLAG_TXE) == RESET);
 800678a:	bf00      	nop
 800678c:	4910      	ldr	r1, [pc, #64]	; (80067d0 <IUart_SendByte+0x64>)
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	3310      	adds	r3, #16
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f0      	beq.n	800678c <IUart_SendByte+0x20>
	iUartTable[nComPort].hUart->Instance->TDR = bCh;
 80067aa:	4909      	ldr	r1, [pc, #36]	; (80067d0 <IUart_SendByte+0x64>)
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	3310      	adds	r3, #16
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	78fa      	ldrb	r2, [r7, #3]
 80067c0:	629a      	str	r2, [r3, #40]	; 0x28

	return bCh;
 80067c2:	78fb      	ldrb	r3, [r7, #3]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	24001990 	.word	0x24001990

080067d4 <IUart_SendBuffer>:



int IUart_SendBuffer(int nComPort, PUCHAR pBuf, UINT16 usLen)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	80fb      	strh	r3, [r7, #6]
	if (nComPort < IUART_STARTPORT || nComPort >= (IUART_STARTPORT + IUART_MAXPORT))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	db02      	blt.n	80067ee <IUart_SendBuffer+0x1a>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	dd02      	ble.n	80067f4 <IUart_SendBuffer+0x20>
		return -1;
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
 80067f2:	e012      	b.n	800681a <IUart_SendBuffer+0x46>

	for (int i = 0; i < usLen; i++)
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	e00a      	b.n	8006810 <IUart_SendBuffer+0x3c>
		IUart_SendByte(nComPort, pBuf[i]);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	4413      	add	r3, r2
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	4619      	mov	r1, r3
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff ffb1 	bl	800676c <IUart_SendByte>
	for (int i = 0; i < usLen; i++)
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	3301      	adds	r3, #1
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	429a      	cmp	r2, r3
 8006816:	dbf0      	blt.n	80067fa <IUart_SendBuffer+0x26>

	return usLen;
 8006818:	88fb      	ldrh	r3, [r7, #6]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <IUart_RecvByte>:



int IUart_RecvByte(int nComPort)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	BYTE	bRecvByte;

	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	db02      	blt.n	8006838 <IUart_RecvByte+0x14>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b04      	cmp	r3, #4
 8006836:	dd02      	ble.n	800683e <IUart_RecvByte+0x1a>
		return -1;
 8006838:	f04f 33ff 	mov.w	r3, #4294967295
 800683c:	e021      	b.n	8006882 <IUart_RecvByte+0x5e>

	if (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) > 0)
 800683e:	4913      	ldr	r1, [pc, #76]	; (800688c <IUart_RecvByte+0x68>)
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	330c      	adds	r3, #12
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fa6b 	bl	8006d2c <RBuf_Get_Full>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <IUart_RecvByte+0x5a>
	{
		RBuf_Read(iUartTable[nComPort].pRxRingBuf, &bRecvByte, 1);
 800685c:	490b      	ldr	r1, [pc, #44]	; (800688c <IUart_RecvByte+0x68>)
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	330c      	adds	r3, #12
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f107 010f 	add.w	r1, r7, #15
 8006872:	2201      	movs	r2, #1
 8006874:	4618      	mov	r0, r3
 8006876:	f000 f9b7 	bl	8006be8 <RBuf_Read>
	else
	{
		return -1;
	}

	return bRecvByte;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	e001      	b.n	8006882 <IUart_RecvByte+0x5e>
		return -1;
 800687e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	24001990 	.word	0x24001990

08006890 <IUart_RecvByte_check>:


int IUart_RecvByte_check(int nComPort, BYTE *pData)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
    BYTE    bRecvByte;

	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	db02      	blt.n	80068a6 <IUart_RecvByte_check+0x16>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	dd02      	ble.n	80068ac <IUart_RecvByte_check+0x1c>
		return -1;
 80068a6:	f04f 33ff 	mov.w	r3, #4294967295
 80068aa:	e023      	b.n	80068f4 <IUart_RecvByte_check+0x64>

	if (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) > 0)
 80068ac:	4913      	ldr	r1, [pc, #76]	; (80068fc <IUart_RecvByte_check+0x6c>)
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	330c      	adds	r3, #12
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fa34 	bl	8006d2c <RBuf_Get_Full>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d013      	beq.n	80068f2 <IUart_RecvByte_check+0x62>
    {
    	RBuf_Read(iUartTable[nComPort].pRxRingBuf, &bRecvByte, 1);
 80068ca:	490c      	ldr	r1, [pc, #48]	; (80068fc <IUart_RecvByte_check+0x6c>)
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	330c      	adds	r3, #12
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f107 010f 	add.w	r1, r7, #15
 80068e0:	2201      	movs	r2, #1
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 f980 	bl	8006be8 <RBuf_Read>

        *pData = bRecvByte;
 80068e8:	7bfa      	ldrb	r2, [r7, #15]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	701a      	strb	r2, [r3, #0]
    else
    {
        return FALSE;
    }

    return TRUE;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <IUart_RecvByte_check+0x64>
        return FALSE;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	24001990 	.word	0x24001990

08006900 <IUart_RecvByteBlocked>:
	return nReaded;
}


int IUart_RecvByteBlocked(int nComPort)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	if (nComPort < IUART_STARTPORT || nComPort > IUART_ENDPORT)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	db02      	blt.n	8006914 <IUart_RecvByteBlocked+0x14>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b04      	cmp	r3, #4
 8006912:	dd02      	ble.n	800691a <IUart_RecvByteBlocked+0x1a>
		return -1;
 8006914:	f04f 33ff 	mov.w	r3, #4294967295
 8006918:	e013      	b.n	8006942 <IUart_RecvByteBlocked+0x42>

   // while (RBuf_Available(iUartTable[nComPort].pRxRingBuf) == 0)
    while (RBuf_Get_Full(iUartTable[nComPort].pRxRingBuf) == 0)
 800691a:	bf00      	nop
 800691c:	490b      	ldr	r1, [pc, #44]	; (800694c <IUart_RecvByteBlocked+0x4c>)
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	440b      	add	r3, r1
 800692a:	330c      	adds	r3, #12
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 f9fc 	bl	8006d2c <RBuf_Get_Full>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0f0      	beq.n	800691c <IUart_RecvByteBlocked+0x1c>
        ;

    return IUart_RecvByte(nComPort);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff ff72 	bl	8006824 <IUart_RecvByte>
 8006940:	4603      	mov	r3, r0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	24001990 	.word	0x24001990

08006950 <IUartISR>:
** ==========================================================================
*/

// 내부 USART/UART 인터럽트 서비스 처리 루틴
void IUartISR(IUART_T* pIUart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
    uint32_t isrflags   = READ_REG(pIUart->hUart->Instance->ISR);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	60fb      	str	r3, [r7, #12]

    // 수신 인터럽트 처리
    if ((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00d      	beq.n	8006988 <IUartISR+0x38>
    {
        uint8_t ch;

        ch = (uint8_t)(READ_REG(pIUart->hUart->Instance->RDR) & 0x00FF);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	b2db      	uxtb	r3, r3
 8006976:	72fb      	strb	r3, [r7, #11]
        RBuf_Write(pIUart->pRxRingBuf, &ch, 1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f107 010b 	add.w	r1, r7, #11
 8006980:	2201      	movs	r2, #1
 8006982:	4618      	mov	r0, r3
 8006984:	f000 f8c5 	bl	8006b12 <RBuf_Write>
    }

    // Clear Interrupt Flag
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_PEF);     // Parity Error Clear Flag
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_FEF);     // Framing Error Clear Flag
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6a1a      	ldr	r2, [r3, #32]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0202 	orr.w	r2, r2, #2
 80069ae:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_NEF);     // Noise detected Clear Flag
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a1a      	ldr	r2, [r3, #32]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0204 	orr.w	r2, r2, #4
 80069c2:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_OREF);    // OverRun Error Clear Flag
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6a1a      	ldr	r2, [r3, #32]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0208 	orr.w	r2, r2, #8
 80069d6:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_IDLEF);   // IDLE line detected Clear Flag
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6a1a      	ldr	r2, [r3, #32]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0210 	orr.w	r2, r2, #16
 80069ea:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_TCF);     // Transmission Complete Clear Flag
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6a1a      	ldr	r2, [r3, #32]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069fe:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_LBDF);    // LIN Break Detection Clear Flag
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6a1a      	ldr	r2, [r3, #32]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a12:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_CTSF);    // CTS Interrupt Clear Flag
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6a1a      	ldr	r2, [r3, #32]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a26:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_CMF);     // Character Match Clear Flag
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6a1a      	ldr	r2, [r3, #32]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006a3a:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_WUF);     // Wake Up from stop mode Clear Flag
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6a1a      	ldr	r2, [r3, #32]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a4e:	621a      	str	r2, [r3, #32]
    SET_BIT(pIUart->hUart->Instance->ICR, UART_CLEAR_TXFECF);  // TXFIFO empty Clear Flag
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6a1a      	ldr	r2, [r3, #32]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0220 	orr.w	r2, r2, #32
 8006a62:	621a      	str	r2, [r3, #32]
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM1]);
 8006a70:	4802      	ldr	r0, [pc, #8]	; (8006a7c <USART1_IRQHandler+0x10>)
 8006a72:	f7ff ff6d 	bl	8006950 <IUartISR>
}
 8006a76:	bf00      	nop
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	24001990 	.word	0x24001990

08006a80 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM2]);
 8006a84:	4802      	ldr	r0, [pc, #8]	; (8006a90 <USART2_IRQHandler+0x10>)
 8006a86:	f7ff ff63 	bl	8006950 <IUartISR>
}
 8006a8a:	bf00      	nop
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	240019a4 	.word	0x240019a4

08006a94 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM3]);
 8006a98:	4802      	ldr	r0, [pc, #8]	; (8006aa4 <USART3_IRQHandler+0x10>)
 8006a9a:	f7ff ff59 	bl	8006950 <IUartISR>
}
 8006a9e:	bf00      	nop
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	240019b8 	.word	0x240019b8

08006aa8 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM4]);
 8006aac:	4802      	ldr	r0, [pc, #8]	; (8006ab8 <UART4_IRQHandler+0x10>)
 8006aae:	f7ff ff4f 	bl	8006950 <IUartISR>
}
 8006ab2:	bf00      	nop
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	240019cc 	.word	0x240019cc

08006abc <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
    IUartISR(&iUartTable[COM5]);
 8006ac0:	4802      	ldr	r0, [pc, #8]	; (8006acc <UART5_IRQHandler+0x10>)
 8006ac2:	f7ff ff45 	bl	8006950 <IUartISR>
}
 8006ac6:	bf00      	nop
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	240019e0 	.word	0x240019e0

08006ad0 <RBuf_Init>:
#define BUF_MIN(x, y)                   ((x) < (y) ? (x) : (y))
#define BUF_MAX(x, y)                   ((x) > (y) ? (x) : (y))


uint8_t RBuf_Init(RBUF_T* pRBuf, void* buffer, size_t size)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || buffer == NULL || size == 0)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <RBuf_Init+0x1e>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <RBuf_Init+0x1e>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <RBuf_Init+0x22>
    {
        return 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	e00b      	b.n	8006b0a <RBuf_Init+0x3a>
    }

    BUF_MEMSET((void*)buffer, 0x00, sizeof(*buffer));
 8006af2:	2201      	movs	r2, #1
 8006af4:	2100      	movs	r1, #0
 8006af6:	68b8      	ldr	r0, [r7, #8]
 8006af8:	f008 fe08 	bl	800f70c <memset>

    pRBuf->size = size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	605a      	str	r2, [r3, #4]
    pRBuf->buff = buffer;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	601a      	str	r2, [r3, #0]

    return 1;
 8006b08:	2301      	movs	r3, #1
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <RBuf_Write>:
 *  btw : 기록할 데이터 크기(Bytes of write)
 *
 *  return : 기록한 데이터 크기, btw 보다 작으면 링버퍼에 공간이 없음을 의미
 */
size_t RBuf_Write(RBUF_T* pRBuf, const void* data, size_t btw)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b088      	sub	sp, #32
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    volatile size_t buff_w_ptr;
    const uint8_t* d = data;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(pRBuf) || data == NULL || btw == 0)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <RBuf_Write+0x32>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d009      	beq.n	8006b44 <RBuf_Write+0x32>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d005      	beq.n	8006b44 <RBuf_Write+0x32>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <RBuf_Write+0x32>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <RBuf_Write+0x36>
    {
        return 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	e04b      	b.n	8006be0 <RBuf_Write+0xce>
    }

    /* Calculate maximum number of bytes available to write */
    free = RBuf_Get_Free(pRBuf);
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 f8b8 	bl	8006cbe <RBuf_Get_Free>
 8006b4e:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	4293      	cmp	r3, r2
 8006b56:	bf28      	it	cs
 8006b58:	4613      	movcs	r3, r2
 8006b5a:	607b      	str	r3, [r7, #4]
    if (btw == 0)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <RBuf_Write+0x54>
    {
        return 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e03c      	b.n	8006be0 <RBuf_Write+0xce>
    }

    /* Step 1: Write data to linear part of buffer */
    buff_w_ptr = pRBuf->w;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(pRBuf->size - buff_w_ptr, btw);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d904      	bls.n	8006b84 <RBuf_Write+0x72>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	e000      	b.n	8006b86 <RBuf_Write+0x74>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&pRBuf->buff[buff_w_ptr], d, tocopy);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	4413      	add	r3, r2
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	69f9      	ldr	r1, [r7, #28]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f008 fdab 	bl	800f6f0 <memcpy>
    buff_w_ptr += tocopy;
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	613b      	str	r3, [r7, #16]
    btw -= tocopy;
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <RBuf_Write+0xb4>
    {
        BUF_MEMCPY(pRBuf->buff, &d[tocopy], btw);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4413      	add	r3, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	f008 fd97 	bl	800f6f0 <memcpy>
        buff_w_ptr = btw;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= pRBuf->size)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d801      	bhi.n	8006bd4 <RBuf_Write+0xc2>
    {
        buff_w_ptr = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    pRBuf->w = buff_w_ptr;
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	60da      	str	r2, [r3, #12]

    return tocopy + btw;
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4413      	add	r3, r2
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <RBuf_Read>:
 *  btr	 : 읽을 데이터 크기(Bytes of read)
 *
 *  return : 실제 읽어온 데이터 크기
 */
size_t RBuf_Read(RBUF_T* pRBuf, void* data, size_t btr)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    volatile size_t buff_r_ptr;
    uint8_t* d = data;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(pRBuf) || data == NULL || btr == 0)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00d      	beq.n	8006c1a <RBuf_Read+0x32>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <RBuf_Read+0x32>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <RBuf_Read+0x32>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <RBuf_Read+0x32>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <RBuf_Read+0x36>
    {
        return 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e04b      	b.n	8006cb6 <RBuf_Read+0xce>
    }

    /* Calculate maximum number of bytes available to read */
    full = RBuf_Get_Full(pRBuf);
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f884 	bl	8006d2c <RBuf_Get_Full>
 8006c24:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	bf28      	it	cs
 8006c2e:	4613      	movcs	r3, r2
 8006c30:	607b      	str	r3, [r7, #4]
    if (btr == 0)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <RBuf_Read+0x54>
    {
        return 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e03c      	b.n	8006cb6 <RBuf_Read+0xce>
    }

    /* Step 1: Read data from linear part of buffer */
    buff_r_ptr = pRBuf->r;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	613b      	str	r3, [r7, #16]
    tocopy = BUF_MIN(pRBuf->size - buff_r_ptr, btr);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d904      	bls.n	8006c5a <RBuf_Read+0x72>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	e000      	b.n	8006c5c <RBuf_Read+0x74>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &pRBuf->buff[buff_r_ptr], tocopy);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	4413      	add	r3, r2
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	69f8      	ldr	r0, [r7, #28]
 8006c6c:	f008 fd40 	bl	800f6f0 <memcpy>
    buff_r_ptr += tocopy;
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	4413      	add	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
    btr -= tocopy;
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <RBuf_Read+0xb4>
    {
        BUF_MEMCPY(&d[tocopy], pRBuf->buff, btr);
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	18d0      	adds	r0, r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4619      	mov	r1, r3
 8006c94:	f008 fd2c 	bl	800f6f0 <memcpy>
        buff_r_ptr = btr;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	613b      	str	r3, [r7, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= pRBuf->size)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d801      	bhi.n	8006caa <RBuf_Read+0xc2>
    {
        buff_r_ptr = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	613b      	str	r3, [r7, #16]

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    pRBuf->r = buff_r_ptr;
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	609a      	str	r2, [r3, #8]

    return tocopy + btr;
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4413      	add	r3, r2
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3720      	adds	r7, #32
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <RBuf_Get_Free>:

/**
 * 	링버퍼의 기록 가용 크기를 리턴한다.
 */
size_t RBuf_Get_Free(RBUF_T* pRBuf)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b087      	sub	sp, #28
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(pRBuf))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <RBuf_Get_Free+0x1e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <RBuf_Get_Free+0x1e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <RBuf_Get_Free+0x22>
    {
        return 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e01f      	b.n	8006d20 <RBuf_Get_Free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = pRBuf->w;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	613b      	str	r3, [r7, #16]
    r = pRBuf->r;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60fb      	str	r3, [r7, #12]
    if (w == r)		// empty
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d103      	bne.n	8006cfc <RBuf_Get_Free+0x3e>
    {
        size = pRBuf->size;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	e00f      	b.n	8006d1c <RBuf_Get_Free+0x5e>
    }
    else if (r > w)
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d904      	bls.n	8006d0e <RBuf_Get_Free+0x50>
    {
        size = r - w;
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	e006      	b.n	8006d1c <RBuf_Get_Free+0x5e>
    }
    else
    {
        size = pRBuf->size - (w - r);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	68f9      	ldr	r1, [r7, #12]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1acb      	subs	r3, r1, r3
 8006d18:	4413      	add	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	3b01      	subs	r3, #1
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <RBuf_Get_Full>:

/**
 * 	링버퍼에 저장되어 있는 데이터 크기를 리턴(읽기용)
 */
size_t RBuf_Get_Full(RBUF_T* pRBuf)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
    size_t size;
    volatile size_t w, r;

    if (!BUF_IS_VALID(pRBuf))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d007      	beq.n	8006d4a <RBuf_Get_Full+0x1e>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <RBuf_Get_Full+0x1e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <RBuf_Get_Full+0x22>
    {
        return 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	e01d      	b.n	8006d8a <RBuf_Get_Full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = pRBuf->w;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	613b      	str	r3, [r7, #16]
    r = pRBuf->r;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	60fb      	str	r3, [r7, #12]
    if (w == r)		// buffer is empty
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d102      	bne.n	8006d68 <RBuf_Get_Full+0x3c>
    {
        size = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e00f      	b.n	8006d88 <RBuf_Get_Full+0x5c>
    }
    else if (w > r)
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d904      	bls.n	8006d7a <RBuf_Get_Full+0x4e>
    {
        size = w - r;
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	e006      	b.n	8006d88 <RBuf_Get_Full+0x5c>
    }
    else
    {
        size = pRBuf->size - (r - w);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	6939      	ldr	r1, [r7, #16]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	1acb      	subs	r3, r1, r3
 8006d84:	4413      	add	r3, r2
 8006d86:	617b      	str	r3, [r7, #20]
    }
    return size;
 8006d88:	697b      	ldr	r3, [r7, #20]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
	...

08006d98 <bsp_InitTimer>:
extern bool bDip_SW_Flag;

extern dword exiAddr[5];

void bsp_InitTimer(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim7);
 8006d9c:	4802      	ldr	r0, [pc, #8]	; (8006da8 <bsp_InitTimer+0x10>)
 8006d9e:	f006 feb3 	bl	800db08 <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start_IT(&htim1);
}
 8006da2:	bf00      	nop
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	24001aa8 	.word	0x24001aa8

08006dac <bsp_TimCallback>:
uint8_t bDataOld1[5] = {0,};

//BYTE gbDipSW, gbOldDipSW;

void bsp_TimCallback(void)
{
 8006dac:	b5b0      	push	{r4, r5, r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af02      	add	r7, sp, #8
    static UINT16   sCount = 0;
    static UINT32   s5Count = 0;
	char cha;
	char cTest;
	char cVal_dsw5,cVal_dsw10 = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	71fb      	strb	r3, [r7, #7]
	char cVal_UPS_FAIL,cVal_UPS_BAT,cVal_UPS_CONN = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	71bb      	strb	r3, [r7, #6]

    g_TickCount++;
 8006dba:	4b52      	ldr	r3, [pc, #328]	; (8006f04 <bsp_TimCallback+0x158>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	4a50      	ldr	r2, [pc, #320]	; (8006f04 <bsp_TimCallback+0x158>)
 8006dc2:	6013      	str	r3, [r2, #0]
    g_exTimeTick++;
 8006dc4:	4b50      	ldr	r3, [pc, #320]	; (8006f08 <bsp_TimCallback+0x15c>)
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	1c50      	adds	r0, r2, #1
 8006dcc:	f143 0100 	adc.w	r1, r3, #0
 8006dd0:	4b4d      	ldr	r3, [pc, #308]	; (8006f08 <bsp_TimCallback+0x15c>)
 8006dd2:	e9c3 0100 	strd	r0, r1, [r3]
    if (s_Per1msCallBack != NULL)
 8006dd6:	4b4d      	ldr	r3, [pc, #308]	; (8006f0c <bsp_TimCallback+0x160>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <bsp_TimCallback+0x38>
        s_Per1msCallBack();
 8006dde:	4b4b      	ldr	r3, [pc, #300]	; (8006f0c <bsp_TimCallback+0x160>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4798      	blx	r3

    sCount++;
 8006de4:	4b4a      	ldr	r3, [pc, #296]	; (8006f10 <bsp_TimCallback+0x164>)
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	3301      	adds	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	4b48      	ldr	r3, [pc, #288]	; (8006f10 <bsp_TimCallback+0x164>)
 8006dee:	801a      	strh	r2, [r3, #0]
    s5Count++;
 8006df0:	4b48      	ldr	r3, [pc, #288]	; (8006f14 <bsp_TimCallback+0x168>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3301      	adds	r3, #1
 8006df6:	4a47      	ldr	r2, [pc, #284]	; (8006f14 <bsp_TimCallback+0x168>)
 8006df8:	6013      	str	r3, [r2, #0]

    if (sCount % 10 == 0)   // per 10ms
 8006dfa:	4b45      	ldr	r3, [pc, #276]	; (8006f10 <bsp_TimCallback+0x164>)
 8006dfc:	881a      	ldrh	r2, [r3, #0]
 8006dfe:	4b46      	ldr	r3, [pc, #280]	; (8006f18 <bsp_TimCallback+0x16c>)
 8006e00:	fba3 1302 	umull	r1, r3, r3, r2
 8006e04:	08d9      	lsrs	r1, r3, #3
 8006e06:	460b      	mov	r3, r1
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <bsp_TimCallback+0x78>
    {
        if (s_Per10msCallBack != NULL)
 8006e16:	4b41      	ldr	r3, [pc, #260]	; (8006f1c <bsp_TimCallback+0x170>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <bsp_TimCallback+0x78>
            s_Per10msCallBack();
 8006e1e:	4b3f      	ldr	r3, [pc, #252]	; (8006f1c <bsp_TimCallback+0x170>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4798      	blx	r3
    }
    if (sCount % 100 == 0)   // per 100ms
    {
    }
    if (sCount % 500 == 0)  // per 0.5 sec : WDT & STS Led toggle
 8006e24:	4b3a      	ldr	r3, [pc, #232]	; (8006f10 <bsp_TimCallback+0x164>)
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	4a3d      	ldr	r2, [pc, #244]	; (8006f20 <bsp_TimCallback+0x174>)
 8006e2a:	fba2 1203 	umull	r1, r2, r2, r3
 8006e2e:	0952      	lsrs	r2, r2, #5
 8006e30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006e34:	fb01 f202 	mul.w	r2, r1, r2
 8006e38:	1a9b      	subs	r3, r3, r2
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d107      	bne.n	8006e50 <bsp_TimCallback+0xa4>
    {
 		HAL_GPIO_TogglePin(WDT_GPIO_Port, WDT_Pin);
 8006e40:	2104      	movs	r1, #4
 8006e42:	4838      	ldr	r0, [pc, #224]	; (8006f24 <bsp_TimCallback+0x178>)
 8006e44:	f003 fe01 	bl	800aa4a <HAL_GPIO_TogglePin>
 		HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED1_Pin);
 8006e48:	2110      	movs	r1, #16
 8006e4a:	4837      	ldr	r0, [pc, #220]	; (8006f28 <bsp_TimCallback+0x17c>)
 8006e4c:	f003 fdfd 	bl	800aa4a <HAL_GPIO_TogglePin>
    }
    if (sCount >= 1000)     // per 1sec
 8006e50:	4b2f      	ldr	r3, [pc, #188]	; (8006f10 <bsp_TimCallback+0x164>)
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e58:	d347      	bcc.n	8006eea <bsp_TimCallback+0x13e>
    {
        sCount = 0;
 8006e5a:	4b2d      	ldr	r3, [pc, #180]	; (8006f10 <bsp_TimCallback+0x164>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	801a      	strh	r2, [r3, #0]
        g_Epoch++;
 8006e60:	4b32      	ldr	r3, [pc, #200]	; (8006f2c <bsp_TimCallback+0x180>)
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	1c54      	adds	r4, r2, #1
 8006e68:	f143 0500 	adc.w	r5, r3, #0
 8006e6c:	4b2f      	ldr	r3, [pc, #188]	; (8006f2c <bsp_TimCallback+0x180>)
 8006e6e:	e9c3 4500 	strd	r4, r5, [r3]
        scount++;
 8006e72:	4b2f      	ldr	r3, [pc, #188]	; (8006f30 <bsp_TimCallback+0x184>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	4a2d      	ldr	r2, [pc, #180]	; (8006f30 <bsp_TimCallback+0x184>)
 8006e7a:	6013      	str	r3, [r2, #0]
        //printf("%s\n",strmtime());
      //  printf("in [0x%x]\n",inb(exiAddr[0]));
      printf("in [0x%x][0x%x][0x%x][0x%x][0x%x]\n",inb(exiAddr[0]),inb(exiAddr[1]),inb(exiAddr[2]),inb(exiAddr[3]),inb(exiAddr[4]));
 8006e7c:	4b2d      	ldr	r3, [pc, #180]	; (8006f34 <bsp_TimCallback+0x188>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	4619      	mov	r1, r3
 8006e86:	4b2b      	ldr	r3, [pc, #172]	; (8006f34 <bsp_TimCallback+0x188>)
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	4618      	mov	r0, r3
 8006e90:	4b28      	ldr	r3, [pc, #160]	; (8006f34 <bsp_TimCallback+0x188>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461c      	mov	r4, r3
 8006e9a:	4b26      	ldr	r3, [pc, #152]	; (8006f34 <bsp_TimCallback+0x188>)
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4b23      	ldr	r3, [pc, #140]	; (8006f34 <bsp_TimCallback+0x188>)
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	9200      	str	r2, [sp, #0]
 8006eb0:	4623      	mov	r3, r4
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	4820      	ldr	r0, [pc, #128]	; (8006f38 <bsp_TimCallback+0x18c>)
 8006eb6:	f008 fd11 	bl	800f8dc <iprintf>
       // cVal_UPS_CONN = HAL_GPIO_ReadPin(nUPS_CONN_GPIO_Port,nUPS_CONN_Pin);

       // printf("EMG in [0x%x]sen9[0x%x]sen19[0x%x]dsw5[0x%x]dsw10[0x%x] \n",cVal_EMG,cVal_sen9,cVal_sen19,cVal_dsw5,cVal_dsw10);
       // printf("UPS in FAIL[0x%x]BAT[0x%x]CONN[0x%x] \n",cVal_UPS_FAIL,cVal_UPS_BAT,cVal_UPS_CONN);
        //outb(WRITE00_ADR, 0x9C);
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED1_Pin);
 8006eba:	2110      	movs	r1, #16
 8006ebc:	481a      	ldr	r0, [pc, #104]	; (8006f28 <bsp_TimCallback+0x17c>)
 8006ebe:	f003 fdc4 	bl	800aa4a <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED2_Pin);
 8006ec2:	2120      	movs	r1, #32
 8006ec4:	4818      	ldr	r0, [pc, #96]	; (8006f28 <bsp_TimCallback+0x17c>)
 8006ec6:	f003 fdc0 	bl	800aa4a <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED3_Pin);
 8006eca:	2140      	movs	r1, #64	; 0x40
 8006ecc:	4816      	ldr	r0, [pc, #88]	; (8006f28 <bsp_TimCallback+0x17c>)
 8006ece:	f003 fdbc 	bl	800aa4a <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(STSLED_GPIO_Port, STS_LED4_Pin);
 8006ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ed6:	4814      	ldr	r0, [pc, #80]	; (8006f28 <bsp_TimCallback+0x17c>)
 8006ed8:	f003 fdb7 	bl	800aa4a <HAL_GPIO_TogglePin>



       //outb(WRITE00_ADR,test2);

        if (s_Per1SecCallBack != NULL)
 8006edc:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <bsp_TimCallback+0x190>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <bsp_TimCallback+0x13e>
            s_Per1SecCallBack();
 8006ee4:	4b15      	ldr	r3, [pc, #84]	; (8006f3c <bsp_TimCallback+0x190>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4798      	blx	r3

    }

    if (s5Count >= 5000)     // per 5sec
 8006eea:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <bsp_TimCallback+0x168>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f241 3287 	movw	r2, #4999	; 0x1387
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d902      	bls.n	8006efc <bsp_TimCallback+0x150>
    {
    	s5Count = 0;
 8006ef6:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <bsp_TimCallback+0x168>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

    }
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bdb0      	pop	{r4, r5, r7, pc}
 8006f04:	240019f4 	.word	0x240019f4
 8006f08:	24001a00 	.word	0x24001a00
 8006f0c:	24001a08 	.word	0x24001a08
 8006f10:	24001a18 	.word	0x24001a18
 8006f14:	24001a1c 	.word	0x24001a1c
 8006f18:	cccccccd 	.word	0xcccccccd
 8006f1c:	24001a0c 	.word	0x24001a0c
 8006f20:	10624dd3 	.word	0x10624dd3
 8006f24:	58020c00 	.word	0x58020c00
 8006f28:	58020800 	.word	0x58020800
 8006f2c:	240019f8 	.word	0x240019f8
 8006f30:	24001a14 	.word	0x24001a14
 8006f34:	2400002c 	.word	0x2400002c
 8006f38:	080116c0 	.word	0x080116c0
 8006f3c:	24001a10 	.word	0x24001a10

08006f40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

    if (htim->Instance == htim7.Instance)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d101      	bne.n	8006f58 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        bsp_TimCallback();
 8006f54:	f7ff ff2a 	bl	8006dac <bsp_TimCallback>
    }
}
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	24001aa8 	.word	0x24001aa8

08006f64 <bsp_InitUart>:
#include "bsp.h"
#include <stdio.h>
#include <stdarg.h>

void bsp_InitUart()
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
	bsp_InitIUart();
 8006f68:	f7ff fa22 	bl	80063b0 <bsp_InitIUart>
}
 8006f6c:	bf00      	nop
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <Uart_SendByte>:
}



int Uart_SendByte(int nComPort, BYTE c)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	70fb      	strb	r3, [r7, #3]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	db09      	blt.n	8006f96 <Uart_SendByte+0x26>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	dc06      	bgt.n	8006f96 <Uart_SendByte+0x26>
		return (IUart_SendByte(nComPort, c));
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fbed 	bl	800676c <IUart_SendByte>
 8006f92:	4603      	mov	r3, r0
 8006f94:	e001      	b.n	8006f9a <Uart_SendByte+0x2a>

	return -1;
 8006f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <Uart_SendBuffer>:



int Uart_SendBuffer(int nComPort, PUCHAR pBuf, UINT16 usLen)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	4613      	mov	r3, r2
 8006fae:	80fb      	strh	r3, [r7, #6]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	db0a      	blt.n	8006fcc <Uart_SendBuffer+0x2a>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	dc07      	bgt.n	8006fcc <Uart_SendBuffer+0x2a>
		return (IUart_SendBuffer(nComPort, pBuf, usLen));
 8006fbc:	88fb      	ldrh	r3, [r7, #6]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff fc06 	bl	80067d4 <IUart_SendBuffer>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	e001      	b.n	8006fd0 <Uart_SendBuffer+0x2e>

	return -1;
 8006fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <Uart_RecvByteBlocked>:
    return -1;
}


int Uart_RecvByteBlocked(int nComPort)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
	if (nComPort >= IUART_STARTPORT && nComPort <= IUART_ENDPORT)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	db07      	blt.n	8006ff6 <Uart_RecvByteBlocked+0x1e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	dc04      	bgt.n	8006ff6 <Uart_RecvByteBlocked+0x1e>
        return (IUart_RecvByteBlocked(nComPort));
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff fc87 	bl	8006900 <IUart_RecvByteBlocked>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	e001      	b.n	8006ffa <Uart_RecvByteBlocked+0x22>

    return -1;
 8006ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <__io_putchar>:

/*
**	CubeIde 호환 함수
 */
int __io_putchar(int ch)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b0a      	cmp	r3, #10
 800700e:	d102      	bne.n	8007016 <__io_putchar+0x14>
		_low_level_put('\r');
 8007010:	200d      	movs	r0, #13
 8007012:	f000 f84b 	bl	80070ac <_low_level_put>
	_low_level_put((char)ch);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f846 	bl	80070ac <_low_level_put>

	return ch;
 8007020:	687b      	ldr	r3, [r7, #4]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <__io_getchar>:


// scanf 사용시 필요
int __io_getchar(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
    char data[4];
    uint8_t ch, len = 1;
 8007032:	2301      	movs	r3, #1
 8007034:	71fb      	strb	r3, [r7, #7]

    ch = (uint8_t)Uart_RecvByteBlocked(DEBUG_PORT);
 8007036:	2000      	movs	r0, #0
 8007038:	f7ff ffce 	bl	8006fd8 <Uart_RecvByteBlocked>
 800703c:	4603      	mov	r3, r0
 800703e:	71bb      	strb	r3, [r7, #6]

    memset(data, 0x00, 4);
 8007040:	463b      	mov	r3, r7
 8007042:	2204      	movs	r2, #4
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f008 fb60 	bl	800f70c <memset>
    switch(ch)
 800704c:	79bb      	ldrb	r3, [r7, #6]
 800704e:	2b7f      	cmp	r3, #127	; 0x7f
 8007050:	d011      	beq.n	8007076 <__io_getchar+0x4a>
 8007052:	2b7f      	cmp	r3, #127	; 0x7f
 8007054:	dc17      	bgt.n	8007086 <__io_getchar+0x5a>
 8007056:	2b0d      	cmp	r3, #13
 8007058:	d005      	beq.n	8007066 <__io_getchar+0x3a>
 800705a:	2b0d      	cmp	r3, #13
 800705c:	dc13      	bgt.n	8007086 <__io_getchar+0x5a>
 800705e:	2b08      	cmp	r3, #8
 8007060:	d009      	beq.n	8007076 <__io_getchar+0x4a>
 8007062:	2b0a      	cmp	r3, #10
 8007064:	d10f      	bne.n	8007086 <__io_getchar+0x5a>
    {
        case '\r':
        case '\n':
            len = 2;
 8007066:	2302      	movs	r3, #2
 8007068:	71fb      	strb	r3, [r7, #7]
            sprintf(data, "\r\n");
 800706a:	463b      	mov	r3, r7
 800706c:	490d      	ldr	r1, [pc, #52]	; (80070a4 <__io_getchar+0x78>)
 800706e:	4618      	mov	r0, r3
 8007070:	f008 fc5c 	bl	800f92c <siprintf>
            break;
 8007074:	e00a      	b.n	800708c <__io_getchar+0x60>

        case '\b':
        case 0x7F:
            len = 3;
 8007076:	2303      	movs	r3, #3
 8007078:	71fb      	strb	r3, [r7, #7]
            sprintf(data, "\b \b");
 800707a:	463b      	mov	r3, r7
 800707c:	490a      	ldr	r1, [pc, #40]	; (80070a8 <__io_getchar+0x7c>)
 800707e:	4618      	mov	r0, r3
 8007080:	f008 fc54 	bl	800f92c <siprintf>
            break;
 8007084:	e002      	b.n	800708c <__io_getchar+0x60>

        default:
            data[0] = ch;
 8007086:	79bb      	ldrb	r3, [r7, #6]
 8007088:	703b      	strb	r3, [r7, #0]
            break;
 800708a:	bf00      	nop
    }
    Uart_SendBuffer(DEBUG_PORT, (uint8_t *)data, len);
 800708c:	79fb      	ldrb	r3, [r7, #7]
 800708e:	b29a      	uxth	r2, r3
 8007090:	463b      	mov	r3, r7
 8007092:	4619      	mov	r1, r3
 8007094:	2000      	movs	r0, #0
 8007096:	f7ff ff84 	bl	8006fa2 <Uart_SendBuffer>

    return ch;
 800709a:	79bb      	ldrb	r3, [r7, #6]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	08011748 	.word	0x08011748
 80070a8:	0801174c 	.word	0x0801174c

080070ac <_low_level_put>:



void _low_level_put(char c)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	71fb      	strb	r3, [r7, #7]
    Uart_SendByte(DEBUG_PORT, c);
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	4619      	mov	r1, r3
 80070ba:	2000      	movs	r0, #0
 80070bc:	f7ff ff58 	bl	8006f70 <Uart_SendByte>

//	USART1->TDR = c;
//
//	while((USART1->ISR & USART_ISR_TC) == 0)
//	{}
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <_putchar>:
}



int _putchar(int c)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
    if ( c == '\n' )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b0a      	cmp	r3, #10
 80070d4:	d102      	bne.n	80070dc <_putchar+0x14>
        _low_level_put((char)'\r');
 80070d6:	200d      	movs	r0, #13
 80070d8:	f7ff ffe8 	bl	80070ac <_low_level_put>
    _low_level_put((char)c);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff ffe3 	bl	80070ac <_low_level_put>

    return(c);
 80070e6:	687b      	ldr	r3, [r7, #4]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <U3_Putch>:
    Uart_Printf(nComPort, "\r\n");
}


void U3_Putch(BYTE c)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	71fb      	strb	r3, [r7, #7]
	IUart_SendByte(COM3, (uint8_t)c);
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	4619      	mov	r1, r3
 80070fe:	2002      	movs	r0, #2
 8007100:	f7ff fb34 	bl	800676c <IUart_SendByte>
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <MPU_Config>:
CRC_HandleTypeDef hcrc;



void MPU_Config(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8007112:	463b      	mov	r3, r7
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	609a      	str	r2, [r3, #8]
 800711c:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 800711e:	f003 f92d 	bl	800a37c <HAL_MPU_Disable>

    /** 전체 메모리 영역 설정 - 기본설정[0x60000000~0xDFFFFFFF:Strongly ordered]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007122:	2301      	movs	r3, #1
 8007124:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007126:	2300      	movs	r3, #0
 8007128:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x00;
 800712a:	2300      	movs	r3, #0
 800712c:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800712e:	231f      	movs	r3, #31
 8007130:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x87;
 8007132:	2387      	movs	r3, #135	; 0x87
 8007134:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8007136:	2303      	movs	r3, #3
 8007138:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800713a:	2300      	movs	r3, #0
 800713c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800713e:	2301      	movs	r3, #1
 8007140:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007142:	2301      	movs	r3, #1
 8007144:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007146:	2300      	movs	r3, #0
 8007148:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]


    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800714e:	463b      	mov	r3, r7
 8007150:	4618      	mov	r0, r3
 8007152:	f003 f94b 	bl	800a3ec <HAL_MPU_ConfigRegion>

    /** FPGA[0x60000000, 1K]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007156:	2301      	movs	r3, #1
 8007158:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800715a:	2301      	movs	r3, #1
 800715c:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x60000000;
 800715e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8007162:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8007164:	2309      	movs	r3, #9
 8007166:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8007168:	2300      	movs	r3, #0
 800716a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800716c:	2300      	movs	r3, #0
 800716e:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8007170:	2303      	movs	r3, #3
 8007172:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007174:	2301      	movs	r3, #1
 8007176:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007178:	2301      	movs	r3, #1
 800717a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800717c:	2300      	movs	r3, #0
 800717e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007184:	463b      	mov	r3, r7
 8007186:	4618      	mov	r0, r3
 8007188:	f003 f930 	bl	800a3ec <HAL_MPU_ConfigRegion>

    /** NAND[0x80000000, 128M]
     *  TEX:0, C:0, B:0, S:1 - MemType:Strongly ordered
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800718c:	2301      	movs	r3, #1
 800718e:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8007190:	2302      	movs	r3, #2
 8007192:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x80000000;
 8007194:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007198:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800719a:	231a      	movs	r3, #26
 800719c:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 800719e:	2300      	movs	r3, #0
 80071a0:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80071a6:	2303      	movs	r3, #3
 80071a8:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80071aa:	2301      	movs	r3, #1
 80071ac:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80071ae:	2301      	movs	r3, #1
 80071b0:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80071ba:	463b      	mov	r3, r7
 80071bc:	4618      	mov	r0, r3
 80071be:	f003 f915 	bl	800a3ec <HAL_MPU_ConfigRegion>

    /** SDRAM[0xD0000000] - IS45S16400J : 1 Mega Bits x 16 Bits x 4 Banks(64MBit)
     **  TEX:1, C:1, B:1, S:0 - MemType:Normal -> Write back, write and read allocate
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80071c2:	2301      	movs	r3, #1
 80071c4:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80071c6:	2303      	movs	r3, #3
 80071c8:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0xD0000000;
 80071ca:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80071ce:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 80071d0:	2316      	movs	r3, #22
 80071d2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80071d4:	2300      	movs	r3, #0
 80071d6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80071d8:	2301      	movs	r3, #1
 80071da:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80071dc:	2303      	movs	r3, #3
 80071de:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80071e0:	2301      	movs	r3, #1
 80071e2:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80071e8:	2301      	movs	r3, #1
 80071ea:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80071f0:	463b      	mov	r3, r7
 80071f2:	4618      	mov	r0, r3
 80071f4:	f003 f8fa 	bl	800a3ec <HAL_MPU_ConfigRegion>

    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80071f8:	2004      	movs	r0, #4
 80071fa:	f003 f8d7 	bl	800a3ac <HAL_MPU_Enable>
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b09e      	sub	sp, #120	; 0x78
 800720c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800720e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007212:	224c      	movs	r2, #76	; 0x4c
 8007214:	2100      	movs	r1, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f008 fa78 	bl	800f70c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800721c:	f107 030c 	add.w	r3, r7, #12
 8007220:	2220      	movs	r2, #32
 8007222:	2100      	movs	r1, #0
 8007224:	4618      	mov	r0, r3
 8007226:	f008 fa71 	bl	800f70c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800722a:	2002      	movs	r0, #2
 800722c:	f003 fc38 	bl	800aaa0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007230:	2300      	movs	r3, #0
 8007232:	60bb      	str	r3, [r7, #8]
 8007234:	4b4e      	ldr	r3, [pc, #312]	; (8007370 <SystemClock_Config+0x168>)
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	4a4d      	ldr	r2, [pc, #308]	; (8007370 <SystemClock_Config+0x168>)
 800723a:	f023 0301 	bic.w	r3, r3, #1
 800723e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007240:	4b4b      	ldr	r3, [pc, #300]	; (8007370 <SystemClock_Config+0x168>)
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	60bb      	str	r3, [r7, #8]
 800724a:	4b4a      	ldr	r3, [pc, #296]	; (8007374 <SystemClock_Config+0x16c>)
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	4a49      	ldr	r2, [pc, #292]	; (8007374 <SystemClock_Config+0x16c>)
 8007250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007254:	6193      	str	r3, [r2, #24]
 8007256:	4b47      	ldr	r3, [pc, #284]	; (8007374 <SystemClock_Config+0x16c>)
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800725e:	60bb      	str	r3, [r7, #8]
 8007260:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007262:	bf00      	nop
 8007264:	4b43      	ldr	r3, [pc, #268]	; (8007374 <SystemClock_Config+0x16c>)
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800726c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007270:	d1f8      	bne.n	8007264 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007272:	4b41      	ldr	r3, [pc, #260]	; (8007378 <SystemClock_Config+0x170>)
 8007274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007278:	4a3f      	ldr	r2, [pc, #252]	; (8007378 <SystemClock_Config+0x170>)
 800727a:	f043 0302 	orr.w	r3, r3, #2
 800727e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007282:	4b3d      	ldr	r3, [pc, #244]	; (8007378 <SystemClock_Config+0x170>)
 8007284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	607b      	str	r3, [r7, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007290:	2300      	movs	r3, #0
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	4b37      	ldr	r3, [pc, #220]	; (8007374 <SystemClock_Config+0x16c>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	4a36      	ldr	r2, [pc, #216]	; (8007374 <SystemClock_Config+0x16c>)
 800729a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800729e:	6193      	str	r3, [r2, #24]
 80072a0:	4b34      	ldr	r3, [pc, #208]	; (8007374 <SystemClock_Config+0x16c>)
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80072a8:	603b      	str	r3, [r7, #0]
 80072aa:	4b31      	ldr	r3, [pc, #196]	; (8007370 <SystemClock_Config+0x168>)
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	4a30      	ldr	r2, [pc, #192]	; (8007370 <SystemClock_Config+0x168>)
 80072b0:	f043 0301 	orr.w	r3, r3, #1
 80072b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072b6:	4b2e      	ldr	r3, [pc, #184]	; (8007370 <SystemClock_Config+0x168>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80072c2:	bf00      	nop
 80072c4:	4b2b      	ldr	r3, [pc, #172]	; (8007374 <SystemClock_Config+0x16c>)
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d0:	d1f8      	bne.n	80072c4 <SystemClock_Config+0xbc>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80072d2:	f003 fbd5 	bl	800aa80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80072d6:	f002 ff35 	bl	800a144 <HAL_GetREVID>
 80072da:	4b27      	ldr	r3, [pc, #156]	; (8007378 <SystemClock_Config+0x170>)
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	4a26      	ldr	r2, [pc, #152]	; (8007378 <SystemClock_Config+0x170>)
 80072e0:	f023 0318 	bic.w	r3, r3, #24
 80072e4:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80072e6:	2305      	movs	r3, #5
 80072e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80072ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80072f0:	2301      	movs	r3, #1
 80072f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80072f4:	2302      	movs	r3, #2
 80072f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80072f8:	2302      	movs	r3, #2
 80072fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80072fc:	2305      	movs	r3, #5
 80072fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8007300:	23c0      	movs	r3, #192	; 0xc0
 8007302:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007304:	2302      	movs	r3, #2
 8007306:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8007308:	2301      	movs	r3, #1
 800730a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800730c:	2302      	movs	r3, #2
 800730e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8007310:	2308      	movs	r3, #8
 8007312:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007314:	2300      	movs	r3, #0
 8007316:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800731c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007320:	4618      	mov	r0, r3
 8007322:	f003 fbf7 	bl	800ab14 <HAL_RCC_OscConfig>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <SystemClock_Config+0x128>
  {
    Error_Handler();
 800732c:	f000 fceb 	bl	8007d06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007330:	233f      	movs	r3, #63	; 0x3f
 8007332:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007334:	2303      	movs	r3, #3
 8007336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007338:	2300      	movs	r3, #0
 800733a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800733c:	2308      	movs	r3, #8
 800733e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007340:	2340      	movs	r3, #64	; 0x40
 8007342:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007344:	2340      	movs	r3, #64	; 0x40
 8007346:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800734e:	2340      	movs	r3, #64	; 0x40
 8007350:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007352:	f107 030c 	add.w	r3, r7, #12
 8007356:	2104      	movs	r1, #4
 8007358:	4618      	mov	r0, r3
 800735a:	f004 f835 	bl	800b3c8 <HAL_RCC_ClockConfig>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8007364:	f000 fccf 	bl	8007d06 <Error_Handler>
  }
}
 8007368:	bf00      	nop
 800736a:	3778      	adds	r7, #120	; 0x78
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	58000400 	.word	0x58000400
 8007374:	58024800 	.word	0x58024800
 8007378:	58024400 	.word	0x58024400

0800737c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08e      	sub	sp, #56	; 0x38
 8007380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	605a      	str	r2, [r3, #4]
 800738c:	609a      	str	r2, [r3, #8]
 800738e:	60da      	str	r2, [r3, #12]
 8007390:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007392:	4b95      	ldr	r3, [pc, #596]	; (80075e8 <MX_GPIO_Init+0x26c>)
 8007394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007398:	4a93      	ldr	r2, [pc, #588]	; (80075e8 <MX_GPIO_Init+0x26c>)
 800739a:	f043 0304 	orr.w	r3, r3, #4
 800739e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073a2:	4b91      	ldr	r3, [pc, #580]	; (80075e8 <MX_GPIO_Init+0x26c>)
 80073a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	623b      	str	r3, [r7, #32]
 80073ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80073b0:	4b8d      	ldr	r3, [pc, #564]	; (80075e8 <MX_GPIO_Init+0x26c>)
 80073b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073b6:	4a8c      	ldr	r2, [pc, #560]	; (80075e8 <MX_GPIO_Init+0x26c>)
 80073b8:	f043 0320 	orr.w	r3, r3, #32
 80073bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073c0:	4b89      	ldr	r3, [pc, #548]	; (80075e8 <MX_GPIO_Init+0x26c>)
 80073c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80073ce:	4b86      	ldr	r3, [pc, #536]	; (80075e8 <MX_GPIO_Init+0x26c>)
 80073d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073d4:	4a84      	ldr	r2, [pc, #528]	; (80075e8 <MX_GPIO_Init+0x26c>)
 80073d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073de:	4b82      	ldr	r3, [pc, #520]	; (80075e8 <MX_GPIO_Init+0x26c>)
 80073e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e8:	61bb      	str	r3, [r7, #24]
 80073ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80073ec:	4b7e      	ldr	r3, [pc, #504]	; (80075e8 <MX_GPIO_Init+0x26c>)
 80073ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073f2:	4a7d      	ldr	r2, [pc, #500]	; (80075e8 <MX_GPIO_Init+0x26c>)
 80073f4:	f043 0301 	orr.w	r3, r3, #1
 80073f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073fc:	4b7a      	ldr	r3, [pc, #488]	; (80075e8 <MX_GPIO_Init+0x26c>)
 80073fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800740a:	4b77      	ldr	r3, [pc, #476]	; (80075e8 <MX_GPIO_Init+0x26c>)
 800740c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007410:	4a75      	ldr	r2, [pc, #468]	; (80075e8 <MX_GPIO_Init+0x26c>)
 8007412:	f043 0302 	orr.w	r3, r3, #2
 8007416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800741a:	4b73      	ldr	r3, [pc, #460]	; (80075e8 <MX_GPIO_Init+0x26c>)
 800741c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007428:	4b6f      	ldr	r3, [pc, #444]	; (80075e8 <MX_GPIO_Init+0x26c>)
 800742a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800742e:	4a6e      	ldr	r2, [pc, #440]	; (80075e8 <MX_GPIO_Init+0x26c>)
 8007430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007438:	4b6b      	ldr	r3, [pc, #428]	; (80075e8 <MX_GPIO_Init+0x26c>)
 800743a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800743e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007446:	4b68      	ldr	r3, [pc, #416]	; (80075e8 <MX_GPIO_Init+0x26c>)
 8007448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800744c:	4a66      	ldr	r2, [pc, #408]	; (80075e8 <MX_GPIO_Init+0x26c>)
 800744e:	f043 0310 	orr.w	r3, r3, #16
 8007452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007456:	4b64      	ldr	r3, [pc, #400]	; (80075e8 <MX_GPIO_Init+0x26c>)
 8007458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800745c:	f003 0310 	and.w	r3, r3, #16
 8007460:	60bb      	str	r3, [r7, #8]
 8007462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007464:	4b60      	ldr	r3, [pc, #384]	; (80075e8 <MX_GPIO_Init+0x26c>)
 8007466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800746a:	4a5f      	ldr	r2, [pc, #380]	; (80075e8 <MX_GPIO_Init+0x26c>)
 800746c:	f043 0308 	orr.w	r3, r3, #8
 8007470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007474:	4b5c      	ldr	r3, [pc, #368]	; (80075e8 <MX_GPIO_Init+0x26c>)
 8007476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	607b      	str	r3, [r7, #4]
 8007480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, UPS_CHK_Pin, GPIO_PIN_SET);
 8007482:	2201      	movs	r2, #1
 8007484:	2140      	movs	r1, #64	; 0x40
 8007486:	4859      	ldr	r0, [pc, #356]	; (80075ec <MX_GPIO_Init+0x270>)
 8007488:	f003 fac6 	bl	800aa18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, UPS_SHDN_Pin, GPIO_PIN_SET);
 800748c:	2201      	movs	r2, #1
 800748e:	2180      	movs	r1, #128	; 0x80
 8007490:	4856      	ldr	r0, [pc, #344]	; (80075ec <MX_GPIO_Init+0x270>)
 8007492:	f003 fac1 	bl	800aa18 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8007496:	2201      	movs	r2, #1
 8007498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800749c:	4854      	ldr	r0, [pc, #336]	; (80075f0 <MX_GPIO_Init+0x274>)
 800749e:	f003 fabb 	bl	800aa18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Serial_flash_CS_Pin|BUZZ_CON_Pin, GPIO_PIN_RESET);
 80074a2:	2200      	movs	r2, #0
 80074a4:	f241 0110 	movw	r1, #4112	; 0x1010
 80074a8:	4851      	ldr	r0, [pc, #324]	; (80075f0 <MX_GPIO_Init+0x274>)
 80074aa:	f003 fab5 	bl	800aa18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STS_LED1_Pin|STS_LED2_Pin|STS_LED3_Pin|STS_LED4_Pin, GPIO_PIN_RESET);
 80074ae:	2200      	movs	r2, #0
 80074b0:	f44f 711c 	mov.w	r1, #624	; 0x270
 80074b4:	484f      	ldr	r0, [pc, #316]	; (80075f4 <MX_GPIO_Init+0x278>)
 80074b6:	f003 faaf 	bl	800aa18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EMG_GPIO_Port, EMG_Pin, GPIO_PIN_RESET);
 80074ba:	2200      	movs	r2, #0
 80074bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074c0:	484d      	ldr	r0, [pc, #308]	; (80075f8 <MX_GPIO_Init+0x27c>)
 80074c2:	f003 faa9 	bl	800aa18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WDT_GPIO_Port, WDT_Pin, GPIO_PIN_SET);
 80074c6:	2201      	movs	r2, #1
 80074c8:	2104      	movs	r1, #4
 80074ca:	484c      	ldr	r0, [pc, #304]	; (80075fc <MX_GPIO_Init+0x280>)
 80074cc:	f003 faa4 	bl	800aa18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UPS_CHK_Pin UPS_SHDN_Pin */
  GPIO_InitStruct.Pin = UPS_CHK_Pin|UPS_SHDN_Pin;
 80074d0:	23c0      	movs	r3, #192	; 0xc0
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074d4:	2301      	movs	r3, #1
 80074d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074dc:	2300      	movs	r3, #0
 80074de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80074e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074e4:	4619      	mov	r1, r3
 80074e6:	4841      	ldr	r0, [pc, #260]	; (80075ec <MX_GPIO_Init+0x270>)
 80074e8:	f002 ffc4 	bl	800a474 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80074ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074f2:	2301      	movs	r3, #1
 80074f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074fa:	2300      	movs	r3, #0
 80074fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007502:	4619      	mov	r1, r3
 8007504:	483a      	ldr	r0, [pc, #232]	; (80075f0 <MX_GPIO_Init+0x274>)
 8007506:	f002 ffb5 	bl	800a474 <HAL_GPIO_Init>

  /*Configure GPIO pins : nUPS_LINE_FAIL_Pin nUPS_LOW_BAT_Pin nUPS_CONN_Pin */
  GPIO_InitStruct.Pin = nUPS_LINE_FAIL_Pin|nUPS_LOW_BAT_Pin|nUPS_CONN_Pin;
 800750a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007510:	2300      	movs	r3, #0
 8007512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007514:	2301      	movs	r3, #1
 8007516:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800751c:	4619      	mov	r1, r3
 800751e:	4833      	ldr	r0, [pc, #204]	; (80075ec <MX_GPIO_Init+0x270>)
 8007520:	f002 ffa8 	bl	800a474 <HAL_GPIO_Init>

  /*Configure GPIO pins : SP_SW1_Pin SP_SW2_Pin */
  GPIO_InitStruct.Pin = SP_SW1_Pin|SP_SW2_Pin;
 8007524:	2303      	movs	r3, #3
 8007526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007528:	2300      	movs	r3, #0
 800752a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800752c:	2301      	movs	r3, #1
 800752e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007534:	4619      	mov	r1, r3
 8007536:	482f      	ldr	r0, [pc, #188]	; (80075f4 <MX_GPIO_Init+0x278>)
 8007538:	f002 ff9c 	bl	800a474 <HAL_GPIO_Init>

  /*Configure GPIO pins : Serial_flash_CS_Pin BUZZ_CON_Pin */
  GPIO_InitStruct.Pin = Serial_flash_CS_Pin|BUZZ_CON_Pin;
 800753c:	f241 0310 	movw	r3, #4112	; 0x1010
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007542:	2301      	movs	r3, #1
 8007544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007546:	2300      	movs	r3, #0
 8007548:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800754a:	2300      	movs	r3, #0
 800754c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800754e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007552:	4619      	mov	r1, r3
 8007554:	4826      	ldr	r0, [pc, #152]	; (80075f0 <MX_GPIO_Init+0x274>)
 8007556:	f002 ff8d 	bl	800a474 <HAL_GPIO_Init>

  /*Configure GPIO pins : STS_LED1_Pin STS_LED2_Pin STS_LED3_Pin STS_LED4_Pin */
  GPIO_InitStruct.Pin = STS_LED1_Pin|STS_LED2_Pin|STS_LED3_Pin|STS_LED4_Pin;
 800755a:	f44f 731c 	mov.w	r3, #624	; 0x270
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007560:	2301      	movs	r3, #1
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007564:	2300      	movs	r3, #0
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007568:	2300      	movs	r3, #0
 800756a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800756c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007570:	4619      	mov	r1, r3
 8007572:	4820      	ldr	r0, [pc, #128]	; (80075f4 <MX_GPIO_Init+0x278>)
 8007574:	f002 ff7e 	bl	800a474 <HAL_GPIO_Init>

  /*Configure GPIO pins : DipSW1_Pin DipSW2_Pin DipSW3_Pin DipSW4_Pin
                           DipSW5_Pin DipSW6_Pin DipSW7_Pin DipSW8_Pin */
  GPIO_InitStruct.Pin = DipSW1_Pin|DipSW2_Pin|DipSW3_Pin|DipSW4_Pin
 8007578:	23ff      	movs	r3, #255	; 0xff
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DipSW5_Pin|DipSW6_Pin|DipSW7_Pin|DipSW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800757c:	2300      	movs	r3, #0
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007580:	2301      	movs	r3, #1
 8007582:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DipSW_GPIO_Port, &GPIO_InitStruct);
 8007584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007588:	4619      	mov	r1, r3
 800758a:	481b      	ldr	r0, [pc, #108]	; (80075f8 <MX_GPIO_Init+0x27c>)
 800758c:	f002 ff72 	bl	800a474 <HAL_GPIO_Init>

  /*Configure GPIO pins : SP_SEN1_Pin SP_SEN2_Pin */
  GPIO_InitStruct.Pin = SP_SEN1_Pin|SP_SEN2_Pin;
 8007590:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007596:	2300      	movs	r3, #0
 8007598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800759a:	2301      	movs	r3, #1
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800759e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a2:	4619      	mov	r1, r3
 80075a4:	4812      	ldr	r0, [pc, #72]	; (80075f0 <MX_GPIO_Init+0x274>)
 80075a6:	f002 ff65 	bl	800a474 <HAL_GPIO_Init>

  /*Configure GPIO pin : WDT_Pin */
  GPIO_InitStruct.Pin = WDT_Pin;
 80075aa:	2304      	movs	r3, #4
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075ae:	2301      	movs	r3, #1
 80075b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075b6:	2300      	movs	r3, #0
 80075b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WDT_GPIO_Port, &GPIO_InitStruct);
 80075ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075be:	4619      	mov	r1, r3
 80075c0:	480e      	ldr	r0, [pc, #56]	; (80075fc <MX_GPIO_Init+0x280>)
 80075c2:	f002 ff57 	bl	800a474 <HAL_GPIO_Init>


  /*Configure GPIO pin : EMG_Pin */
  GPIO_InitStruct.Pin = EMG_Pin;
 80075c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075cc:	2300      	movs	r3, #0
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075d0:	2301      	movs	r3, #1
 80075d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EMG_GPIO_Port, &GPIO_InitStruct);
 80075d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075d8:	4619      	mov	r1, r3
 80075da:	4807      	ldr	r0, [pc, #28]	; (80075f8 <MX_GPIO_Init+0x27c>)
 80075dc:	f002 ff4a 	bl	800a474 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80075e0:	bf00      	nop
 80075e2:	3738      	adds	r7, #56	; 0x38
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	58024400 	.word	0x58024400
 80075ec:	58021400 	.word	0x58021400
 80075f0:	58020000 	.word	0x58020000
 80075f4:	58020800 	.word	0x58020800
 80075f8:	58020400 	.word	0x58020400
 80075fc:	58020c00 	.word	0x58020c00

08007600 <MX_FMC_Init>:
 * @retval None
 */


static void MX_FMC_Init(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8007606:	1d3b      	adds	r3, r7, #4
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	611a      	str	r2, [r3, #16]
 8007614:	615a      	str	r2, [r3, #20]
 8007616:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8007618:	4b4f      	ldr	r3, [pc, #316]	; (8007758 <MX_FMC_Init+0x158>)
 800761a:	4a50      	ldr	r2, [pc, #320]	; (800775c <MX_FMC_Init+0x15c>)
 800761c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800761e:	4b4e      	ldr	r3, [pc, #312]	; (8007758 <MX_FMC_Init+0x158>)
 8007620:	4a4f      	ldr	r2, [pc, #316]	; (8007760 <MX_FMC_Init+0x160>)
 8007622:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8007624:	4b4c      	ldr	r3, [pc, #304]	; (8007758 <MX_FMC_Init+0x158>)
 8007626:	2200      	movs	r2, #0
 8007628:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800762a:	4b4b      	ldr	r3, [pc, #300]	; (8007758 <MX_FMC_Init+0x158>)
 800762c:	2200      	movs	r2, #0
 800762e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8007630:	4b49      	ldr	r3, [pc, #292]	; (8007758 <MX_FMC_Init+0x158>)
 8007632:	2200      	movs	r2, #0
 8007634:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8007636:	4b48      	ldr	r3, [pc, #288]	; (8007758 <MX_FMC_Init+0x158>)
 8007638:	2200      	movs	r2, #0
 800763a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800763c:	4b46      	ldr	r3, [pc, #280]	; (8007758 <MX_FMC_Init+0x158>)
 800763e:	2200      	movs	r2, #0
 8007640:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8007642:	4b45      	ldr	r3, [pc, #276]	; (8007758 <MX_FMC_Init+0x158>)
 8007644:	2200      	movs	r2, #0
 8007646:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8007648:	4b43      	ldr	r3, [pc, #268]	; (8007758 <MX_FMC_Init+0x158>)
 800764a:	2200      	movs	r2, #0
 800764c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800764e:	4b42      	ldr	r3, [pc, #264]	; (8007758 <MX_FMC_Init+0x158>)
 8007650:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007654:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8007656:	4b40      	ldr	r3, [pc, #256]	; (8007758 <MX_FMC_Init+0x158>)
 8007658:	2200      	movs	r2, #0
 800765a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800765c:	4b3e      	ldr	r3, [pc, #248]	; (8007758 <MX_FMC_Init+0x158>)
 800765e:	2200      	movs	r2, #0
 8007660:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8007662:	4b3d      	ldr	r3, [pc, #244]	; (8007758 <MX_FMC_Init+0x158>)
 8007664:	2200      	movs	r2, #0
 8007666:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8007668:	4b3b      	ldr	r3, [pc, #236]	; (8007758 <MX_FMC_Init+0x158>)
 800766a:	2200      	movs	r2, #0
 800766c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 800766e:	4b3a      	ldr	r3, [pc, #232]	; (8007758 <MX_FMC_Init+0x158>)
 8007670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007674:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8007676:	4b38      	ldr	r3, [pc, #224]	; (8007758 <MX_FMC_Init+0x158>)
 8007678:	2200      	movs	r2, #0
 800767a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800767c:	4b36      	ldr	r3, [pc, #216]	; (8007758 <MX_FMC_Init+0x158>)
 800767e:	2200      	movs	r2, #0
 8007680:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8007682:	230f      	movs	r3, #15
 8007684:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8007686:	230f      	movs	r3, #15
 8007688:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800768a:	23ff      	movs	r3, #255	; 0xff
 800768c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800768e:	230f      	movs	r3, #15
 8007690:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8007692:	2310      	movs	r3, #16
 8007694:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8007696:	2311      	movs	r3, #17
 8007698:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800769a:	2300      	movs	r3, #0
 800769c:	61fb      	str	r3, [r7, #28]


  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800769e:	1d3b      	adds	r3, r7, #4
 80076a0:	2200      	movs	r2, #0
 80076a2:	4619      	mov	r1, r3
 80076a4:	482c      	ldr	r0, [pc, #176]	; (8007758 <MX_FMC_Init+0x158>)
 80076a6:	f006 f987 	bl	800d9b8 <HAL_SRAM_Init>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 80076b0:	f000 fb29 	bl	8007d06 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80076b4:	4b2b      	ldr	r3, [pc, #172]	; (8007764 <MX_FMC_Init+0x164>)
 80076b6:	4a29      	ldr	r2, [pc, #164]	; (800775c <MX_FMC_Init+0x15c>)
 80076b8:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80076ba:	4b2a      	ldr	r3, [pc, #168]	; (8007764 <MX_FMC_Init+0x164>)
 80076bc:	4a28      	ldr	r2, [pc, #160]	; (8007760 <MX_FMC_Init+0x160>)
 80076be:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK2;
 80076c0:	4b28      	ldr	r3, [pc, #160]	; (8007764 <MX_FMC_Init+0x164>)
 80076c2:	2202      	movs	r2, #2
 80076c4:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80076c6:	4b27      	ldr	r3, [pc, #156]	; (8007764 <MX_FMC_Init+0x164>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80076cc:	4b25      	ldr	r3, [pc, #148]	; (8007764 <MX_FMC_Init+0x164>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80076d2:	4b24      	ldr	r3, [pc, #144]	; (8007764 <MX_FMC_Init+0x164>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80076d8:	4b22      	ldr	r3, [pc, #136]	; (8007764 <MX_FMC_Init+0x164>)
 80076da:	2200      	movs	r2, #0
 80076dc:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80076de:	4b21      	ldr	r3, [pc, #132]	; (8007764 <MX_FMC_Init+0x164>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80076e4:	4b1f      	ldr	r3, [pc, #124]	; (8007764 <MX_FMC_Init+0x164>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80076ea:	4b1e      	ldr	r3, [pc, #120]	; (8007764 <MX_FMC_Init+0x164>)
 80076ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80076f0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80076f2:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <MX_FMC_Init+0x164>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80076f8:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <MX_FMC_Init+0x164>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80076fe:	4b19      	ldr	r3, [pc, #100]	; (8007764 <MX_FMC_Init+0x164>)
 8007700:	2200      	movs	r2, #0
 8007702:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8007704:	4b17      	ldr	r3, [pc, #92]	; (8007764 <MX_FMC_Init+0x164>)
 8007706:	2200      	movs	r2, #0
 8007708:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 800770a:	4b16      	ldr	r3, [pc, #88]	; (8007764 <MX_FMC_Init+0x164>)
 800770c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007710:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8007712:	4b14      	ldr	r3, [pc, #80]	; (8007764 <MX_FMC_Init+0x164>)
 8007714:	2200      	movs	r2, #0
 8007716:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8007718:	4b12      	ldr	r3, [pc, #72]	; (8007764 <MX_FMC_Init+0x164>)
 800771a:	2200      	movs	r2, #0
 800771c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800771e:	230f      	movs	r3, #15
 8007720:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8007722:	230f      	movs	r3, #15
 8007724:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8007726:	23ff      	movs	r3, #255	; 0xff
 8007728:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800772a:	230f      	movs	r3, #15
 800772c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800772e:	2310      	movs	r3, #16
 8007730:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8007732:	2311      	movs	r3, #17
 8007734:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8007736:	2300      	movs	r3, #0
 8007738:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800773a:	1d3b      	adds	r3, r7, #4
 800773c:	2200      	movs	r2, #0
 800773e:	4619      	mov	r1, r3
 8007740:	4808      	ldr	r0, [pc, #32]	; (8007764 <MX_FMC_Init+0x164>)
 8007742:	f006 f939 	bl	800d9b8 <HAL_SRAM_Init>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <MX_FMC_Init+0x150>
  {
    Error_Handler( );
 800774c:	f000 fadb 	bl	8007d06 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8007750:	bf00      	nop
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	24001dd8 	.word	0x24001dd8
 800775c:	52004000 	.word	0x52004000
 8007760:	52004104 	.word	0x52004104
 8007764:	24001e24 	.word	0x24001e24

08007768 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM7_Init 0 */

    /* USER CODE END TIM7_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800776e:	1d3b      	adds	r3, r7, #4
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	605a      	str	r2, [r3, #4]
 8007776:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM7_Init 1 */

    /* USER CODE END TIM7_Init 1 */
    htim7.Instance = TIM7;
 8007778:	4b14      	ldr	r3, [pc, #80]	; (80077cc <MX_TIM7_Init+0x64>)
 800777a:	4a15      	ldr	r2, [pc, #84]	; (80077d0 <MX_TIM7_Init+0x68>)
 800777c:	601a      	str	r2, [r3, #0]
    htim7.Init.Prescaler = 239;
 800777e:	4b13      	ldr	r3, [pc, #76]	; (80077cc <MX_TIM7_Init+0x64>)
 8007780:	22ef      	movs	r2, #239	; 0xef
 8007782:	605a      	str	r2, [r3, #4]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007784:	4b11      	ldr	r3, [pc, #68]	; (80077cc <MX_TIM7_Init+0x64>)
 8007786:	2200      	movs	r2, #0
 8007788:	609a      	str	r2, [r3, #8]
    htim7.Init.Period = 999;
 800778a:	4b10      	ldr	r3, [pc, #64]	; (80077cc <MX_TIM7_Init+0x64>)
 800778c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007790:	60da      	str	r2, [r3, #12]
    htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007792:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <MX_TIM7_Init+0x64>)
 8007794:	2200      	movs	r2, #0
 8007796:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007798:	480c      	ldr	r0, [pc, #48]	; (80077cc <MX_TIM7_Init+0x64>)
 800779a:	f006 f95d 	bl	800da58 <HAL_TIM_Base_Init>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <MX_TIM7_Init+0x40>
    {
        Error_Handler();
 80077a4:	f000 faaf 	bl	8007d06 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077a8:	2300      	movs	r3, #0
 80077aa:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80077b0:	1d3b      	adds	r3, r7, #4
 80077b2:	4619      	mov	r1, r3
 80077b4:	4805      	ldr	r0, [pc, #20]	; (80077cc <MX_TIM7_Init+0x64>)
 80077b6:	f006 fc01 	bl	800dfbc <HAL_TIMEx_MasterConfigSynchronization>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <MX_TIM7_Init+0x5c>
    {
        Error_Handler();
 80077c0:	f000 faa1 	bl	8007d06 <Error_Handler>
    }
    /* USER CODE BEGIN TIM7_Init 2 */

    /* USER CODE END TIM7_Init 2 */

}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	24001aa8 	.word	0x24001aa8
 80077d0:	40001400 	.word	0x40001400

080077d4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 80077d8:	4b22      	ldr	r3, [pc, #136]	; (8007864 <MX_USART1_UART_Init+0x90>)
 80077da:	4a23      	ldr	r2, [pc, #140]	; (8007868 <MX_USART1_UART_Init+0x94>)
 80077dc:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80077de:	4b21      	ldr	r3, [pc, #132]	; (8007864 <MX_USART1_UART_Init+0x90>)
 80077e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80077e4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80077e6:	4b1f      	ldr	r3, [pc, #124]	; (8007864 <MX_USART1_UART_Init+0x90>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80077ec:	4b1d      	ldr	r3, [pc, #116]	; (8007864 <MX_USART1_UART_Init+0x90>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80077f2:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <MX_USART1_UART_Init+0x90>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80077f8:	4b1a      	ldr	r3, [pc, #104]	; (8007864 <MX_USART1_UART_Init+0x90>)
 80077fa:	220c      	movs	r2, #12
 80077fc:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80077fe:	4b19      	ldr	r3, [pc, #100]	; (8007864 <MX_USART1_UART_Init+0x90>)
 8007800:	2200      	movs	r2, #0
 8007802:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007804:	4b17      	ldr	r3, [pc, #92]	; (8007864 <MX_USART1_UART_Init+0x90>)
 8007806:	2200      	movs	r2, #0
 8007808:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800780a:	4b16      	ldr	r3, [pc, #88]	; (8007864 <MX_USART1_UART_Init+0x90>)
 800780c:	2200      	movs	r2, #0
 800780e:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007810:	4b14      	ldr	r3, [pc, #80]	; (8007864 <MX_USART1_UART_Init+0x90>)
 8007812:	2200      	movs	r2, #0
 8007814:	625a      	str	r2, [r3, #36]	; 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007816:	4b13      	ldr	r3, [pc, #76]	; (8007864 <MX_USART1_UART_Init+0x90>)
 8007818:	2200      	movs	r2, #0
 800781a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800781c:	4811      	ldr	r0, [pc, #68]	; (8007864 <MX_USART1_UART_Init+0x90>)
 800781e:	f006 fc79 	bl	800e114 <HAL_UART_Init>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <MX_USART1_UART_Init+0x58>
    {
        Error_Handler();
 8007828:	f000 fa6d 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800782c:	2100      	movs	r1, #0
 800782e:	480d      	ldr	r0, [pc, #52]	; (8007864 <MX_USART1_UART_Init+0x90>)
 8007830:	f007 fcbb 	bl	800f1aa <HAL_UARTEx_SetTxFifoThreshold>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <MX_USART1_UART_Init+0x6a>
    {
        Error_Handler();
 800783a:	f000 fa64 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800783e:	2100      	movs	r1, #0
 8007840:	4808      	ldr	r0, [pc, #32]	; (8007864 <MX_USART1_UART_Init+0x90>)
 8007842:	f007 fcf0 	bl	800f226 <HAL_UARTEx_SetRxFifoThreshold>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <MX_USART1_UART_Init+0x7c>
    {
        Error_Handler();
 800784c:	f000 fa5b 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007850:	4804      	ldr	r0, [pc, #16]	; (8007864 <MX_USART1_UART_Init+0x90>)
 8007852:	f007 fc71 	bl	800f138 <HAL_UARTEx_DisableFifoMode>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <MX_USART1_UART_Init+0x8c>
    {
        Error_Handler();
 800785c:	f000 fa53 	bl	8007d06 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8007860:	bf00      	nop
 8007862:	bd80      	pop	{r7, pc}
 8007864:	24001c1c 	.word	0x24001c1c
 8007868:	40011000 	.word	0x40011000

0800786c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8007870:	4b22      	ldr	r3, [pc, #136]	; (80078fc <MX_USART2_UART_Init+0x90>)
 8007872:	4a23      	ldr	r2, [pc, #140]	; (8007900 <MX_USART2_UART_Init+0x94>)
 8007874:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8007876:	4b21      	ldr	r3, [pc, #132]	; (80078fc <MX_USART2_UART_Init+0x90>)
 8007878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800787c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800787e:	4b1f      	ldr	r3, [pc, #124]	; (80078fc <MX_USART2_UART_Init+0x90>)
 8007880:	2200      	movs	r2, #0
 8007882:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8007884:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <MX_USART2_UART_Init+0x90>)
 8007886:	2200      	movs	r2, #0
 8007888:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800788a:	4b1c      	ldr	r3, [pc, #112]	; (80078fc <MX_USART2_UART_Init+0x90>)
 800788c:	2200      	movs	r2, #0
 800788e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8007890:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <MX_USART2_UART_Init+0x90>)
 8007892:	220c      	movs	r2, #12
 8007894:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007896:	4b19      	ldr	r3, [pc, #100]	; (80078fc <MX_USART2_UART_Init+0x90>)
 8007898:	2200      	movs	r2, #0
 800789a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800789c:	4b17      	ldr	r3, [pc, #92]	; (80078fc <MX_USART2_UART_Init+0x90>)
 800789e:	2200      	movs	r2, #0
 80078a0:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80078a2:	4b16      	ldr	r3, [pc, #88]	; (80078fc <MX_USART2_UART_Init+0x90>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	621a      	str	r2, [r3, #32]
    huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80078a8:	4b14      	ldr	r3, [pc, #80]	; (80078fc <MX_USART2_UART_Init+0x90>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	625a      	str	r2, [r3, #36]	; 0x24
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80078ae:	4b13      	ldr	r3, [pc, #76]	; (80078fc <MX_USART2_UART_Init+0x90>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80078b4:	4811      	ldr	r0, [pc, #68]	; (80078fc <MX_USART2_UART_Init+0x90>)
 80078b6:	f006 fc2d 	bl	800e114 <HAL_UART_Init>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <MX_USART2_UART_Init+0x58>
    {
        Error_Handler();
 80078c0:	f000 fa21 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80078c4:	2100      	movs	r1, #0
 80078c6:	480d      	ldr	r0, [pc, #52]	; (80078fc <MX_USART2_UART_Init+0x90>)
 80078c8:	f007 fc6f 	bl	800f1aa <HAL_UARTEx_SetTxFifoThreshold>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <MX_USART2_UART_Init+0x6a>
    {
        Error_Handler();
 80078d2:	f000 fa18 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80078d6:	2100      	movs	r1, #0
 80078d8:	4808      	ldr	r0, [pc, #32]	; (80078fc <MX_USART2_UART_Init+0x90>)
 80078da:	f007 fca4 	bl	800f226 <HAL_UARTEx_SetRxFifoThreshold>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <MX_USART2_UART_Init+0x7c>
    {
        Error_Handler();
 80078e4:	f000 fa0f 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80078e8:	4804      	ldr	r0, [pc, #16]	; (80078fc <MX_USART2_UART_Init+0x90>)
 80078ea:	f007 fc25 	bl	800f138 <HAL_UARTEx_DisableFifoMode>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <MX_USART2_UART_Init+0x8c>
    {
        Error_Handler();
 80078f4:	f000 fa07 	bl	8007d06 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 80078f8:	bf00      	nop
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	24001cb0 	.word	0x24001cb0
 8007900:	40004400 	.word	0x40004400

08007904 <MX_USART3_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart3.Instance = USART3;
 8007908:	4b22      	ldr	r3, [pc, #136]	; (8007994 <MX_USART3_UART_Init+0x90>)
 800790a:	4a23      	ldr	r2, [pc, #140]	; (8007998 <MX_USART3_UART_Init+0x94>)
 800790c:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 57600;
 800790e:	4b21      	ldr	r3, [pc, #132]	; (8007994 <MX_USART3_UART_Init+0x90>)
 8007910:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8007914:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007916:	4b1f      	ldr	r3, [pc, #124]	; (8007994 <MX_USART3_UART_Init+0x90>)
 8007918:	2200      	movs	r2, #0
 800791a:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 800791c:	4b1d      	ldr	r3, [pc, #116]	; (8007994 <MX_USART3_UART_Init+0x90>)
 800791e:	2200      	movs	r2, #0
 8007920:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8007922:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <MX_USART3_UART_Init+0x90>)
 8007924:	2200      	movs	r2, #0
 8007926:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8007928:	4b1a      	ldr	r3, [pc, #104]	; (8007994 <MX_USART3_UART_Init+0x90>)
 800792a:	220c      	movs	r2, #12
 800792c:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800792e:	4b19      	ldr	r3, [pc, #100]	; (8007994 <MX_USART3_UART_Init+0x90>)
 8007930:	2200      	movs	r2, #0
 8007932:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007934:	4b17      	ldr	r3, [pc, #92]	; (8007994 <MX_USART3_UART_Init+0x90>)
 8007936:	2200      	movs	r2, #0
 8007938:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800793a:	4b16      	ldr	r3, [pc, #88]	; (8007994 <MX_USART3_UART_Init+0x90>)
 800793c:	2200      	movs	r2, #0
 800793e:	621a      	str	r2, [r3, #32]
    huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007940:	4b14      	ldr	r3, [pc, #80]	; (8007994 <MX_USART3_UART_Init+0x90>)
 8007942:	2200      	movs	r2, #0
 8007944:	625a      	str	r2, [r3, #36]	; 0x24
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007946:	4b13      	ldr	r3, [pc, #76]	; (8007994 <MX_USART3_UART_Init+0x90>)
 8007948:	2200      	movs	r2, #0
 800794a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart3) != HAL_OK)
 800794c:	4811      	ldr	r0, [pc, #68]	; (8007994 <MX_USART3_UART_Init+0x90>)
 800794e:	f006 fbe1 	bl	800e114 <HAL_UART_Init>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <MX_USART3_UART_Init+0x58>
    {
        Error_Handler();
 8007958:	f000 f9d5 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800795c:	2100      	movs	r1, #0
 800795e:	480d      	ldr	r0, [pc, #52]	; (8007994 <MX_USART3_UART_Init+0x90>)
 8007960:	f007 fc23 	bl	800f1aa <HAL_UARTEx_SetTxFifoThreshold>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <MX_USART3_UART_Init+0x6a>
    {
        Error_Handler();
 800796a:	f000 f9cc 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800796e:	2100      	movs	r1, #0
 8007970:	4808      	ldr	r0, [pc, #32]	; (8007994 <MX_USART3_UART_Init+0x90>)
 8007972:	f007 fc58 	bl	800f226 <HAL_UARTEx_SetRxFifoThreshold>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <MX_USART3_UART_Init+0x7c>
    {
        Error_Handler();
 800797c:	f000 f9c3 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8007980:	4804      	ldr	r0, [pc, #16]	; (8007994 <MX_USART3_UART_Init+0x90>)
 8007982:	f007 fbd9 	bl	800f138 <HAL_UARTEx_DisableFifoMode>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <MX_USART3_UART_Init+0x8c>
    {
        Error_Handler();
 800798c:	f000 f9bb 	bl	8007d06 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */

}
 8007990:	bf00      	nop
 8007992:	bd80      	pop	{r7, pc}
 8007994:	24001d44 	.word	0x24001d44
 8007998:	40004800 	.word	0x40004800

0800799c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
    /* USER CODE END UART4_Init 0 */

    /* USER CODE BEGIN UART4_Init 1 */

    /* USER CODE END UART4_Init 1 */
    huart4.Instance = UART4;
 80079a0:	4b22      	ldr	r3, [pc, #136]	; (8007a2c <MX_UART4_Init+0x90>)
 80079a2:	4a23      	ldr	r2, [pc, #140]	; (8007a30 <MX_UART4_Init+0x94>)
 80079a4:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 38400;
 80079a6:	4b21      	ldr	r3, [pc, #132]	; (8007a2c <MX_UART4_Init+0x90>)
 80079a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80079ac:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80079ae:	4b1f      	ldr	r3, [pc, #124]	; (8007a2c <MX_UART4_Init+0x90>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 80079b4:	4b1d      	ldr	r3, [pc, #116]	; (8007a2c <MX_UART4_Init+0x90>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 80079ba:	4b1c      	ldr	r3, [pc, #112]	; (8007a2c <MX_UART4_Init+0x90>)
 80079bc:	2200      	movs	r2, #0
 80079be:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 80079c0:	4b1a      	ldr	r3, [pc, #104]	; (8007a2c <MX_UART4_Init+0x90>)
 80079c2:	220c      	movs	r2, #12
 80079c4:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079c6:	4b19      	ldr	r3, [pc, #100]	; (8007a2c <MX_UART4_Init+0x90>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80079cc:	4b17      	ldr	r3, [pc, #92]	; (8007a2c <MX_UART4_Init+0x90>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	61da      	str	r2, [r3, #28]
    huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80079d2:	4b16      	ldr	r3, [pc, #88]	; (8007a2c <MX_UART4_Init+0x90>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	621a      	str	r2, [r3, #32]
    huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80079d8:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <MX_UART4_Init+0x90>)
 80079da:	2200      	movs	r2, #0
 80079dc:	625a      	str	r2, [r3, #36]	; 0x24
    huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80079de:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <MX_UART4_Init+0x90>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart4) != HAL_OK)
 80079e4:	4811      	ldr	r0, [pc, #68]	; (8007a2c <MX_UART4_Init+0x90>)
 80079e6:	f006 fb95 	bl	800e114 <HAL_UART_Init>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <MX_UART4_Init+0x58>
    {
        Error_Handler();
 80079f0:	f000 f989 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80079f4:	2100      	movs	r1, #0
 80079f6:	480d      	ldr	r0, [pc, #52]	; (8007a2c <MX_UART4_Init+0x90>)
 80079f8:	f007 fbd7 	bl	800f1aa <HAL_UARTEx_SetTxFifoThreshold>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <MX_UART4_Init+0x6a>
    {
        Error_Handler();
 8007a02:	f000 f980 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007a06:	2100      	movs	r1, #0
 8007a08:	4808      	ldr	r0, [pc, #32]	; (8007a2c <MX_UART4_Init+0x90>)
 8007a0a:	f007 fc0c 	bl	800f226 <HAL_UARTEx_SetRxFifoThreshold>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <MX_UART4_Init+0x7c>
    {
        Error_Handler();
 8007a14:	f000 f977 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8007a18:	4804      	ldr	r0, [pc, #16]	; (8007a2c <MX_UART4_Init+0x90>)
 8007a1a:	f007 fb8d 	bl	800f138 <HAL_UARTEx_DisableFifoMode>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <MX_UART4_Init+0x8c>
    {
        Error_Handler();
 8007a24:	f000 f96f 	bl	8007d06 <Error_Handler>
    }
    /* USER CODE BEGIN UART4_Init 2 */

    /* USER CODE END UART4_Init 2 */

}
 8007a28:	bf00      	nop
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	24001af4 	.word	0x24001af4
 8007a30:	40004c00 	.word	0x40004c00

08007a34 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
    /* USER CODE END UART5_Init 0 */

    /* USER CODE BEGIN UART5_Init 1 */

    /* USER CODE END UART5_Init 1 */
    huart5.Instance = UART5;
 8007a38:	4b22      	ldr	r3, [pc, #136]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a3a:	4a23      	ldr	r2, [pc, #140]	; (8007ac8 <MX_UART5_Init+0x94>)
 8007a3c:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate = 38400;
 8007a3e:	4b21      	ldr	r3, [pc, #132]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a40:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8007a44:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007a46:	4b1f      	ldr	r3, [pc, #124]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits = UART_STOPBITS_1;
 8007a4c:	4b1d      	ldr	r3, [pc, #116]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity = UART_PARITY_NONE;
 8007a52:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode = UART_MODE_TX_RX;
 8007a58:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a5a:	220c      	movs	r2, #12
 8007a5c:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a5e:	4b19      	ldr	r3, [pc, #100]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a64:	4b17      	ldr	r3, [pc, #92]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	61da      	str	r2, [r3, #28]
    huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007a6a:	4b16      	ldr	r3, [pc, #88]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	621a      	str	r2, [r3, #32]
    huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007a70:	4b14      	ldr	r3, [pc, #80]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24
    huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007a76:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart5) != HAL_OK)
 8007a7c:	4811      	ldr	r0, [pc, #68]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a7e:	f006 fb49 	bl	800e114 <HAL_UART_Init>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <MX_UART5_Init+0x58>
    {
        Error_Handler();
 8007a88:	f000 f93d 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	480d      	ldr	r0, [pc, #52]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007a90:	f007 fb8b 	bl	800f1aa <HAL_UARTEx_SetTxFifoThreshold>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <MX_UART5_Init+0x6a>
    {
        Error_Handler();
 8007a9a:	f000 f934 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	4808      	ldr	r0, [pc, #32]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007aa2:	f007 fbc0 	bl	800f226 <HAL_UARTEx_SetRxFifoThreshold>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <MX_UART5_Init+0x7c>
    {
        Error_Handler();
 8007aac:	f000 f92b 	bl	8007d06 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8007ab0:	4804      	ldr	r0, [pc, #16]	; (8007ac4 <MX_UART5_Init+0x90>)
 8007ab2:	f007 fb41 	bl	800f138 <HAL_UARTEx_DisableFifoMode>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <MX_UART5_Init+0x8c>
    {
        Error_Handler();
 8007abc:	f000 f923 	bl	8007d06 <Error_Handler>
    }
    /* USER CODE BEGIN UART5_Init 2 */

    /* USER CODE END UART5_Init 2 */

}
 8007ac0:	bf00      	nop
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	24001b88 	.word	0x24001b88
 8007ac8:	40005000 	.word	0x40005000

08007acc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0
    {
        Error_Handler();
    }
#endif

    hspi1.Instance = SPI1;
 8007ad0:	4b27      	ldr	r3, [pc, #156]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007ad2:	4a28      	ldr	r2, [pc, #160]	; (8007b74 <MX_SPI1_Init+0xa8>)
 8007ad4:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8007ad6:	4b26      	ldr	r3, [pc, #152]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007ad8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007adc:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007ade:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8007ae4:	4b22      	ldr	r3, [pc, #136]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007ae6:	2203      	movs	r2, #3
 8007ae8:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007aea:	4b21      	ldr	r3, [pc, #132]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007af0:	4b1f      	ldr	r3, [pc, #124]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8007af6:	4b1e      	ldr	r3, [pc, #120]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007af8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007afc:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007afe:	4b1c      	ldr	r3, [pc, #112]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b00:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8007b04:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007b06:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007b0c:	4b18      	ldr	r3, [pc, #96]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b12:	4b17      	ldr	r3, [pc, #92]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 0x0;
 8007b18:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007b1e:	4b14      	ldr	r3, [pc, #80]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007b24:	635a      	str	r2, [r3, #52]	; 0x34
    hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007b26:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007b2c:	4b10      	ldr	r3, [pc, #64]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	63da      	str	r2, [r3, #60]	; 0x3c
    hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007b32:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	641a      	str	r2, [r3, #64]	; 0x40
    hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007b38:	4b0d      	ldr	r3, [pc, #52]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007b3e:	4b0c      	ldr	r3, [pc, #48]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	649a      	str	r2, [r3, #72]	; 0x48
    hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007b4a:	4b09      	ldr	r3, [pc, #36]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007b50:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	655a      	str	r2, [r3, #84]	; 0x54
    hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007b56:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	659a      	str	r2, [r3, #88]	; 0x58
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007b5c:	4804      	ldr	r0, [pc, #16]	; (8007b70 <MX_SPI1_Init+0xa4>)
 8007b5e:	f005 fdeb 	bl	800d738 <HAL_SPI_Init>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <MX_SPI1_Init+0xa0>
    {
      Error_Handler();
 8007b68:	f000 f8cd 	bl	8007d06 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8007b6c:	bf00      	nop
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	24001a20 	.word	0x24001a20
 8007b74:	40013000 	.word	0x40013000

08007b78 <InitPeripherals>:

}


void InitPeripherals(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 8007b7c:	f7ff fbfe 	bl	800737c <MX_GPIO_Init>
    MX_FMC_Init();
 8007b80:	f7ff fd3e 	bl	8007600 <MX_FMC_Init>
    MX_TIM7_Init();
 8007b84:	f7ff fdf0 	bl	8007768 <MX_TIM7_Init>

    //MX_RTC_Init();

    MX_USART1_UART_Init();
 8007b88:	f7ff fe24 	bl	80077d4 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 8007b8c:	f7ff fe6e 	bl	800786c <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8007b90:	f7ff feb8 	bl	8007904 <MX_USART3_UART_Init>
    MX_UART4_Init();
 8007b94:	f7ff ff02 	bl	800799c <MX_UART4_Init>
    MX_UART5_Init();
 8007b98:	f7ff ff4c 	bl	8007a34 <MX_UART5_Init>

    MX_SPI1_Init();
 8007b9c:	f7ff ff96 	bl	8007acc <MX_SPI1_Init>
    //MX_CRC_Init();

}
 8007ba0:	bf00      	nop
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  MPU_Config();
 8007baa:	f7ff faaf 	bl	800710c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007bae:	4b3a      	ldr	r3, [pc, #232]	; (8007c98 <main+0xf4>)
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d11b      	bne.n	8007bf2 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007bba:	f3bf 8f4f 	dsb	sy
}
 8007bbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007bc0:	f3bf 8f6f 	isb	sy
}
 8007bc4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007bc6:	4b34      	ldr	r3, [pc, #208]	; (8007c98 <main+0xf4>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007bce:	f3bf 8f4f 	dsb	sy
}
 8007bd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007bd4:	f3bf 8f6f 	isb	sy
}
 8007bd8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007bda:	4b2f      	ldr	r3, [pc, #188]	; (8007c98 <main+0xf4>)
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	4a2e      	ldr	r2, [pc, #184]	; (8007c98 <main+0xf4>)
 8007be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007be4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007be6:	f3bf 8f4f 	dsb	sy
}
 8007bea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007bec:	f3bf 8f6f 	isb	sy
}
 8007bf0:	e000      	b.n	8007bf4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007bf2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8007bf4:	4b28      	ldr	r3, [pc, #160]	; (8007c98 <main+0xf4>)
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d138      	bne.n	8007c72 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8007c00:	4b25      	ldr	r3, [pc, #148]	; (8007c98 <main+0xf4>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007c08:	f3bf 8f4f 	dsb	sy
}
 8007c0c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8007c0e:	4b22      	ldr	r3, [pc, #136]	; (8007c98 <main+0xf4>)
 8007c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c14:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	0b5b      	lsrs	r3, r3, #13
 8007c1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c1e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	08db      	lsrs	r3, r3, #3
 8007c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c28:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007c32:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007c38:	4917      	ldr	r1, [pc, #92]	; (8007c98 <main+0xf4>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	1e5a      	subs	r2, r3, #1
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1ef      	bne.n	8007c2a <main+0x86>
    } while(sets-- != 0U);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	1e5a      	subs	r2, r3, #1
 8007c4e:	60ba      	str	r2, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e5      	bne.n	8007c20 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8007c54:	f3bf 8f4f 	dsb	sy
}
 8007c58:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007c5a:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <main+0xf4>)
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	4a0e      	ldr	r2, [pc, #56]	; (8007c98 <main+0xf4>)
 8007c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c64:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c66:	f3bf 8f4f 	dsb	sy
}
 8007c6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007c6c:	f3bf 8f6f 	isb	sy
}
 8007c70:	e000      	b.n	8007c74 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8007c72:	bf00      	nop

  SCB_EnableICache();
  SCB_EnableDCache();
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c74:	f002 f9b0 	bl	8009fd8 <HAL_Init>
  SystemClock_Config();
 8007c78:	f7ff fac6 	bl	8007208 <SystemClock_Config>

  /* USER CODE BEGIN Init */
  //PeriphCommonClock_Config();
  /* USER CODE END Init */
  InitPeripherals();
 8007c7c:	f7ff ff7c 	bl	8007b78 <InitPeripherals>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_InitTimer();
 8007c80:	f7ff f88a 	bl	8006d98 <bsp_InitTimer>
  bsp_InitUart();
 8007c84:	f7ff f96e 	bl	8006f64 <bsp_InitUart>
  bDip_SW_Flag = TRUE;
 8007c88:	4b04      	ldr	r3, [pc, #16]	; (8007c9c <main+0xf8>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	701a      	strb	r2, [r3, #0]
  GCUInitialize();
 8007c8e:	f000 f81b 	bl	8007cc8 <GCUInitialize>
  SerialProcess();
 8007c92:	f000 f831 	bl	8007cf8 <SerialProcess>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007c96:	e7fe      	b.n	8007c96 <main+0xf2>
 8007c98:	e000ed00 	.word	0xe000ed00
 8007c9c:	24001e70 	.word	0x24001e70

08007ca0 <dip_sw>:
}



word dip_sw(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
	word	idata;

	idata = (GPIOB->IDR)^0xff;
 8007ca6:	4b07      	ldr	r3, [pc, #28]	; (8007cc4 <dip_sw+0x24>)
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8007cb0:	80fb      	strh	r3, [r7, #6]

	return(idata & 0xff);
 8007cb2:	88fb      	ldrh	r3, [r7, #6]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	b29b      	uxth	r3, r3
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	58020400 	.word	0x58020400

08007cc8 <GCUInitialize>:
* Out:      None
* Return:   void
* comments:
*******************************************************************************/
void GCUInitialize(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
	//EcuEmergencyOff();
	BuzzerOff();
 8007ccc:	f7fe f856 	bl	8005d7c <BuzzerOff>

	//ControlStatusLED_En(DIR_RED);
	//ControlStatusLED_Ex(DIR_RED);
	ControlIndicatorLight_En(LAMP_OFF);
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	f7fe f91f 	bl	8005f14 <ControlIndicatorLight_En>
	ControlIndicatorLight_Ex(LAMP_OFF);
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f7fe f94a 	bl	8005f70 <ControlIndicatorLight_Ex>
	//ControlUPS(UPS_CMD_CHK);
	//ok ms
	SetDefaultOpMode();
 8007cdc:	f7f9 f8a0 	bl	8000e20 <SetDefaultOpMode>
	SetDefaultParameter();
 8007ce0:	f7f9 f8ba 	bl	8000e58 <SetDefaultParameter>
	SetDefaultStatus();
 8007ce4:	f7f9 f8f6 	bl	8000ed4 <SetDefaultStatus>
	Brr_SetSerialComm(TRUE);
 8007ce8:	2001      	movs	r0, #1
 8007cea:	f7f8 fceb 	bl	80006c4 <Brr_SetSerialComm>
	Brr_OpenBarrier(BARRIER_OPEN_FOR_EX);
 8007cee:	2002      	movs	r0, #2
 8007cf0:	f7f8 fd06 	bl	8000700 <Brr_OpenBarrier>
}
 8007cf4:	bf00      	nop
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <SerialProcess>:


inline void SerialProcess(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
	for (;;)
	{
	//	#if BART_IO
	//	Brr_Status_IO();			//barrier.c CMD_GET_STATUS_MAIN 에서 들어오는 정보만 유효
	//	#else
			ProcessComm_Barrier();
 8007cfc:	f7f9 f822 	bl	8000d44 <ProcessComm_Barrier>
	//	#endif

		ProcessComm_ECU();
 8007d00:	f7fb fb46 	bl	8003390 <ProcessComm_ECU>
			ProcessComm_Barrier();
 8007d04:	e7fa      	b.n	8007cfc <SerialProcess+0x4>

08007d06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007d06:	b480      	push	{r7}
 8007d08:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007d0a:	b672      	cpsid	i
}
 8007d0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007d0e:	e7fe      	b.n	8007d0e <Error_Handler+0x8>

08007d10 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	607a      	str	r2, [r7, #4]
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8007d20:	bf00      	nop
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <_out_char+0x1e>
    _putchar(character);
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff f9bf 	bl	80070c8 <_putchar>
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b085      	sub	sp, #20
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	e002      	b.n	8007d68 <_strnlen_s+0x16>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <_strnlen_s+0x28>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	1e5a      	subs	r2, r3, #1
 8007d74:	603a      	str	r2, [r7, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1f3      	bne.n	8007d62 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	1ad3      	subs	r3, r2, r3
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	2b2f      	cmp	r3, #47	; 0x2f
 8007d9a:	d904      	bls.n	8007da6 <_is_digit+0x1a>
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	2b39      	cmp	r3, #57	; 0x39
 8007da0:	d801      	bhi.n	8007da6 <_is_digit+0x1a>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <_is_digit+0x1c>
 8007da6:	2300      	movs	r3, #0
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	b2db      	uxtb	r3, r3
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8007dc6:	e00e      	b.n	8007de6 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	1c59      	adds	r1, r3, #1
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	6011      	str	r1, [r2, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	4403      	add	r3, r0
 8007de2:	3b30      	subs	r3, #48	; 0x30
 8007de4:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff ffcd 	bl	8007d8c <_is_digit>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e7      	bne.n	8007dc8 <_atoi+0xe>
  }
  return i;
 8007df8:	68fb      	ldr	r3, [r7, #12]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8007e02:	b590      	push	{r4, r7, lr}
 8007e04:	b087      	sub	sp, #28
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
 8007e0e:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8007e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d125      	bne.n	8007e6a <_out_rev+0x68>
 8007e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d120      	bne.n	8007e6a <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	e00a      	b.n	8007e44 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	1c53      	adds	r3, r2, #1
 8007e32:	607b      	str	r3, [r7, #4]
 8007e34:	68fc      	ldr	r4, [r7, #12]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	2020      	movs	r0, #32
 8007e3c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	3301      	adds	r3, #1
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d3f0      	bcc.n	8007e2e <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8007e4c:	e00d      	b.n	8007e6a <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	3b01      	subs	r3, #1
 8007e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	4413      	add	r3, r2
 8007e5a:	7818      	ldrb	r0, [r3, #0]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	1c53      	adds	r3, r2, #1
 8007e60:	607b      	str	r3, [r7, #4]
 8007e62:	68fc      	ldr	r4, [r7, #12]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	47a0      	blx	r4
  while (len) {
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1ee      	bne.n	8007e4e <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00e      	beq.n	8007e98 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8007e7a:	e007      	b.n	8007e8c <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	1c53      	adds	r3, r2, #1
 8007e80:	607b      	str	r3, [r7, #4]
 8007e82:	68fc      	ldr	r4, [r7, #12]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	2020      	movs	r0, #32
 8007e8a:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d8f1      	bhi.n	8007e7c <_out_rev+0x7a>
    }
  }

  return idx;
 8007e98:	687b      	ldr	r3, [r7, #4]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd90      	pop	{r4, r7, pc}

08007ea2 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b088      	sub	sp, #32
 8007ea6:	af04      	add	r7, sp, #16
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
 8007eae:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d136      	bne.n	8007f28 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d018      	beq.n	8007ef2 <_ntoa_format+0x50>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d013      	beq.n	8007ef2 <_ntoa_format+0x50>
 8007eca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d104      	bne.n	8007edc <_ntoa_format+0x3a>
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	f003 030c 	and.w	r3, r3, #12
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <_ntoa_format+0x50>
      width--;
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007ee2:	e006      	b.n	8007ef2 <_ntoa_format+0x50>
      buf[len++] = '0';
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	61fa      	str	r2, [r7, #28]
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	4413      	add	r3, r2
 8007eee:	2230      	movs	r2, #48	; 0x30
 8007ef0:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d20a      	bcs.n	8007f10 <_ntoa_format+0x6e>
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	2b1f      	cmp	r3, #31
 8007efe:	d9f1      	bls.n	8007ee4 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007f00:	e006      	b.n	8007f10 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	61fa      	str	r2, [r7, #28]
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	2230      	movs	r2, #48	; 0x30
 8007f0e:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d006      	beq.n	8007f28 <_ntoa_format+0x86>
 8007f1a:	69fa      	ldr	r2, [r7, #28]
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d202      	bcs.n	8007f28 <_ntoa_format+0x86>
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	2b1f      	cmp	r3, #31
 8007f26:	d9ec      	bls.n	8007f02 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	f003 0310 	and.w	r3, r3, #16
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d058      	beq.n	8007fe4 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d116      	bne.n	8007f6a <_ntoa_format+0xc8>
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d013      	beq.n	8007f6a <_ntoa_format+0xc8>
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d003      	beq.n	8007f52 <_ntoa_format+0xb0>
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d10b      	bne.n	8007f6a <_ntoa_format+0xc8>
      len--;
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d005      	beq.n	8007f6a <_ntoa_format+0xc8>
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	2b10      	cmp	r3, #16
 8007f62:	d102      	bne.n	8007f6a <_ntoa_format+0xc8>
        len--;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	2b10      	cmp	r3, #16
 8007f6e:	d10f      	bne.n	8007f90 <_ntoa_format+0xee>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	f003 0320 	and.w	r3, r3, #32
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <_ntoa_format+0xee>
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	2b1f      	cmp	r3, #31
 8007f7e:	d807      	bhi.n	8007f90 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	61fa      	str	r2, [r7, #28]
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	4413      	add	r3, r2
 8007f8a:	2278      	movs	r2, #120	; 0x78
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	e01f      	b.n	8007fd0 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	2b10      	cmp	r3, #16
 8007f94:	d10f      	bne.n	8007fb6 <_ntoa_format+0x114>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	f003 0320 	and.w	r3, r3, #32
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <_ntoa_format+0x114>
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	2b1f      	cmp	r3, #31
 8007fa4:	d807      	bhi.n	8007fb6 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	61fa      	str	r2, [r7, #28]
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	4413      	add	r3, r2
 8007fb0:	2258      	movs	r2, #88	; 0x58
 8007fb2:	701a      	strb	r2, [r3, #0]
 8007fb4:	e00c      	b.n	8007fd0 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d109      	bne.n	8007fd0 <_ntoa_format+0x12e>
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	2b1f      	cmp	r3, #31
 8007fc0:	d806      	bhi.n	8007fd0 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	61fa      	str	r2, [r7, #28]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	4413      	add	r3, r2
 8007fcc:	2262      	movs	r2, #98	; 0x62
 8007fce:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b1f      	cmp	r3, #31
 8007fd4:	d806      	bhi.n	8007fe4 <_ntoa_format+0x142>
      buf[len++] = '0';
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	61fa      	str	r2, [r7, #28]
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	4413      	add	r3, r2
 8007fe0:	2230      	movs	r2, #48	; 0x30
 8007fe2:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	2b1f      	cmp	r3, #31
 8007fe8:	d824      	bhi.n	8008034 <_ntoa_format+0x192>
    if (negative) {
 8007fea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d007      	beq.n	8008002 <_ntoa_format+0x160>
      buf[len++] = '-';
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	1c5a      	adds	r2, r3, #1
 8007ff6:	61fa      	str	r2, [r7, #28]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	222d      	movs	r2, #45	; 0x2d
 8007ffe:	701a      	strb	r2, [r3, #0]
 8008000:	e018      	b.n	8008034 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	61fa      	str	r2, [r7, #28]
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	4413      	add	r3, r2
 8008016:	222b      	movs	r2, #43	; 0x2b
 8008018:	701a      	strb	r2, [r3, #0]
 800801a:	e00b      	b.n	8008034 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	f003 0308 	and.w	r3, r3, #8
 8008022:	2b00      	cmp	r3, #0
 8008024:	d006      	beq.n	8008034 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	61fa      	str	r2, [r7, #28]
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	4413      	add	r3, r2
 8008030:	2220      	movs	r2, #32
 8008032:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	9303      	str	r3, [sp, #12]
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	9302      	str	r3, [sp, #8]
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	9301      	str	r3, [sp, #4]
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	68b9      	ldr	r1, [r7, #8]
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7ff fed9 	bl	8007e02 <_out_rev>
 8008050:	4603      	mov	r3, r0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b096      	sub	sp, #88	; 0x58
 800805e:	af08      	add	r7, sp, #32
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800806c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800806e:	2b00      	cmp	r3, #0
 8008070:	d103      	bne.n	800807a <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8008072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008074:	f023 0310 	bic.w	r3, r3, #16
 8008078:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800807a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800807c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <_ntoa_long+0x30>
 8008084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d032      	beq.n	80080f0 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800808a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800808c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800808e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008092:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008094:	fb01 f202 	mul.w	r2, r1, r2
 8008098:	1a9b      	subs	r3, r3, r2
 800809a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800809e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080a2:	2b09      	cmp	r3, #9
 80080a4:	d804      	bhi.n	80080b0 <_ntoa_long+0x56>
 80080a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080aa:	3330      	adds	r3, #48	; 0x30
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	e00d      	b.n	80080cc <_ntoa_long+0x72>
 80080b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <_ntoa_long+0x64>
 80080ba:	2241      	movs	r2, #65	; 0x41
 80080bc:	e000      	b.n	80080c0 <_ntoa_long+0x66>
 80080be:	2261      	movs	r2, #97	; 0x61
 80080c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080c4:	4413      	add	r3, r2
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	3b0a      	subs	r3, #10
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ce:	1c59      	adds	r1, r3, #1
 80080d0:	6379      	str	r1, [r7, #52]	; 0x34
 80080d2:	3338      	adds	r3, #56	; 0x38
 80080d4:	443b      	add	r3, r7
 80080d6:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80080da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080de:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e2:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80080e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <_ntoa_long+0x96>
 80080ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ec:	2b1f      	cmp	r3, #31
 80080ee:	d9cc      	bls.n	800808a <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80080f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080f2:	9306      	str	r3, [sp, #24]
 80080f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f6:	9305      	str	r3, [sp, #20]
 80080f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fa:	9304      	str	r3, [sp, #16]
 80080fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080fe:	9303      	str	r3, [sp, #12]
 8008100:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008104:	9302      	str	r3, [sp, #8]
 8008106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	f107 0310 	add.w	r3, r7, #16
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	68b9      	ldr	r1, [r7, #8]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f7ff fec3 	bl	8007ea2 <_ntoa_format>
 800811c:	4603      	mov	r3, r0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3738      	adds	r7, #56	; 0x38
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b096      	sub	sp, #88	; 0x58
 800812a:	af08      	add	r7, sp, #32
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	607a      	str	r2, [r7, #4]
 8008132:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8008138:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800813c:	4313      	orrs	r3, r2
 800813e:	d103      	bne.n	8008148 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8008140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008142:	f023 0310 	bic.w	r3, r3, #16
 8008146:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8008148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800814a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <_ntoa_long_long+0x34>
 8008152:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008156:	4313      	orrs	r3, r2
 8008158:	d037      	beq.n	80081ca <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800815a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800815e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008162:	f7f8 f90d 	bl	8000380 <__aeabi_uldivmod>
 8008166:	4613      	mov	r3, r2
 8008168:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800816c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008170:	2b09      	cmp	r3, #9
 8008172:	d804      	bhi.n	800817e <_ntoa_long_long+0x58>
 8008174:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008178:	3330      	adds	r3, #48	; 0x30
 800817a:	b2da      	uxtb	r2, r3
 800817c:	e00d      	b.n	800819a <_ntoa_long_long+0x74>
 800817e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <_ntoa_long_long+0x66>
 8008188:	2241      	movs	r2, #65	; 0x41
 800818a:	e000      	b.n	800818e <_ntoa_long_long+0x68>
 800818c:	2261      	movs	r2, #97	; 0x61
 800818e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008192:	4413      	add	r3, r2
 8008194:	b2db      	uxtb	r3, r3
 8008196:	3b0a      	subs	r3, #10
 8008198:	b2da      	uxtb	r2, r3
 800819a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819c:	1c59      	adds	r1, r3, #1
 800819e:	6379      	str	r1, [r7, #52]	; 0x34
 80081a0:	3338      	adds	r3, #56	; 0x38
 80081a2:	443b      	add	r3, r7
 80081a4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80081a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80081b0:	f7f8 f8e6 	bl	8000380 <__aeabi_uldivmod>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80081bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081c0:	4313      	orrs	r3, r2
 80081c2:	d002      	beq.n	80081ca <_ntoa_long_long+0xa4>
 80081c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c6:	2b1f      	cmp	r3, #31
 80081c8:	d9c7      	bls.n	800815a <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80081ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081ce:	9206      	str	r2, [sp, #24]
 80081d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081d2:	9205      	str	r2, [sp, #20]
 80081d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081d6:	9204      	str	r2, [sp, #16]
 80081d8:	9303      	str	r3, [sp, #12]
 80081da:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80081de:	9302      	str	r3, [sp, #8]
 80081e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	f107 0310 	add.w	r3, r7, #16
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7ff fe56 	bl	8007ea2 <_ntoa_format>
 80081f6:	4603      	mov	r3, r0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3738      	adds	r7, #56	; 0x38
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b09c      	sub	sp, #112	; 0x70
 8008204:	af04      	add	r7, sp, #16
 8008206:	6178      	str	r0, [r7, #20]
 8008208:	6139      	str	r1, [r7, #16]
 800820a:	60fa      	str	r2, [r7, #12]
 800820c:	60bb      	str	r3, [r7, #8]
 800820e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8008216:	f04f 0200 	mov.w	r2, #0
 800821a:	f04f 0300 	mov.w	r3, #0
 800821e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8008222:	ed97 6b00 	vldr	d6, [r7]
 8008226:	ed97 7b00 	vldr	d7, [r7]
 800822a:	eeb4 6b47 	vcmp.f64	d6, d7
 800822e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008232:	d00f      	beq.n	8008254 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8008234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008236:	9303      	str	r3, [sp, #12]
 8008238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823a:	9302      	str	r3, [sp, #8]
 800823c:	2303      	movs	r3, #3
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	4bb5      	ldr	r3, [pc, #724]	; (8008518 <_ftoa+0x318>)
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	6939      	ldr	r1, [r7, #16]
 800824a:	6978      	ldr	r0, [r7, #20]
 800824c:	f7ff fdd9 	bl	8007e02 <_out_rev>
 8008250:	4603      	mov	r3, r0
 8008252:	e215      	b.n	8008680 <_ftoa+0x480>
  if (value < -DBL_MAX)
 8008254:	ed97 7b00 	vldr	d7, [r7]
 8008258:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 80084f0 <_ftoa+0x2f0>
 800825c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008264:	d50f      	bpl.n	8008286 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8008266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008268:	9303      	str	r3, [sp, #12]
 800826a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800826c:	9302      	str	r3, [sp, #8]
 800826e:	2304      	movs	r3, #4
 8008270:	9301      	str	r3, [sp, #4]
 8008272:	4baa      	ldr	r3, [pc, #680]	; (800851c <_ftoa+0x31c>)
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	6939      	ldr	r1, [r7, #16]
 800827c:	6978      	ldr	r0, [r7, #20]
 800827e:	f7ff fdc0 	bl	8007e02 <_out_rev>
 8008282:	4603      	mov	r3, r0
 8008284:	e1fc      	b.n	8008680 <_ftoa+0x480>
  if (value > DBL_MAX)
 8008286:	ed97 7b00 	vldr	d7, [r7]
 800828a:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 80084f8 <_ftoa+0x2f8>
 800828e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008296:	dd1d      	ble.n	80082d4 <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8008298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <_ftoa+0xa6>
 80082a2:	4b9f      	ldr	r3, [pc, #636]	; (8008520 <_ftoa+0x320>)
 80082a4:	e000      	b.n	80082a8 <_ftoa+0xa8>
 80082a6:	4b9f      	ldr	r3, [pc, #636]	; (8008524 <_ftoa+0x324>)
 80082a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80082aa:	f002 0204 	and.w	r2, r2, #4
 80082ae:	2a00      	cmp	r2, #0
 80082b0:	d001      	beq.n	80082b6 <_ftoa+0xb6>
 80082b2:	2204      	movs	r2, #4
 80082b4:	e000      	b.n	80082b8 <_ftoa+0xb8>
 80082b6:	2203      	movs	r2, #3
 80082b8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80082ba:	9103      	str	r1, [sp, #12]
 80082bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80082be:	9102      	str	r1, [sp, #8]
 80082c0:	9201      	str	r2, [sp, #4]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	6939      	ldr	r1, [r7, #16]
 80082ca:	6978      	ldr	r0, [r7, #20]
 80082cc:	f7ff fd99 	bl	8007e02 <_out_rev>
 80082d0:	4603      	mov	r3, r0
 80082d2:	e1d5      	b.n	8008680 <_ftoa+0x480>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80082d4:	ed97 7b00 	vldr	d7, [r7]
 80082d8:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8008500 <_ftoa+0x300>
 80082dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e4:	dc08      	bgt.n	80082f8 <_ftoa+0xf8>
 80082e6:	ed97 7b00 	vldr	d7, [r7]
 80082ea:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8008508 <_ftoa+0x308>
 80082ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f6:	d50f      	bpl.n	8008318 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80082f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082fa:	9302      	str	r3, [sp, #8]
 80082fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fe:	9301      	str	r3, [sp, #4]
 8008300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	ed97 0b00 	vldr	d0, [r7]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	6939      	ldr	r1, [r7, #16]
 800830e:	6978      	ldr	r0, [r7, #20]
 8008310:	f000 f9be 	bl	8008690 <_etoa>
 8008314:	4603      	mov	r3, r0
 8008316:	e1b3      	b.n	8008680 <_ftoa+0x480>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8008318:	2300      	movs	r3, #0
 800831a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800831e:	ed97 7b00 	vldr	d7, [r7]
 8008322:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832a:	d50a      	bpl.n	8008342 <_ftoa+0x142>
    negative = true;
 800832c:	2301      	movs	r3, #1
 800832e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8008332:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8008510 <_ftoa+0x310>
 8008336:	ed97 7b00 	vldr	d7, [r7]
 800833a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800833e:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8008342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10d      	bne.n	8008368 <_ftoa+0x168>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800834c:	2306      	movs	r3, #6
 800834e:	66bb      	str	r3, [r7, #104]	; 0x68
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8008350:	e00a      	b.n	8008368 <_ftoa+0x168>
    buf[len++] = '0';
 8008352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008358:	3360      	adds	r3, #96	; 0x60
 800835a:	443b      	add	r3, r7
 800835c:	2230      	movs	r2, #48	; 0x30
 800835e:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8008362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008364:	3b01      	subs	r3, #1
 8008366:	66bb      	str	r3, [r7, #104]	; 0x68
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8008368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800836a:	2b1f      	cmp	r3, #31
 800836c:	d802      	bhi.n	8008374 <_ftoa+0x174>
 800836e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008370:	2b09      	cmp	r3, #9
 8008372:	d8ee      	bhi.n	8008352 <_ftoa+0x152>
  }

  int whole = (int)value;
 8008374:	ed97 7b00 	vldr	d7, [r7]
 8008378:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800837c:	ee17 3a90 	vmov	r3, s15
 8008380:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8008382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008384:	ee07 3a90 	vmov	s15, r3
 8008388:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800838c:	ed97 6b00 	vldr	d6, [r7]
 8008390:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008394:	4a64      	ldr	r2, [pc, #400]	; (8008528 <_ftoa+0x328>)
 8008396:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	4413      	add	r3, r2
 800839c:	ed93 7b00 	vldr	d7, [r3]
 80083a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80083a4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80083a8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80083ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80083b0:	ee17 3a90 	vmov	r3, s15
 80083b4:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80083b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b8:	ee07 3a90 	vmov	s15, r3
 80083bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80083c0:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80083c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80083c8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80083cc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80083d0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80083d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80083d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083dc:	dd18      	ble.n	8008410 <_ftoa+0x210>
    ++frac;
 80083de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e0:	3301      	adds	r3, #1
 80083e2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80083e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80083ee:	4a4e      	ldr	r2, [pc, #312]	; (8008528 <_ftoa+0x328>)
 80083f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	4413      	add	r3, r2
 80083f6:	ed93 7b00 	vldr	d7, [r3]
 80083fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008402:	db19      	blt.n	8008438 <_ftoa+0x238>
      frac = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8008408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800840a:	3301      	adds	r3, #1
 800840c:	657b      	str	r3, [r7, #84]	; 0x54
 800840e:	e013      	b.n	8008438 <_ftoa+0x238>
    }
  }
  else if (diff < 0.5) {
 8008410:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8008414:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008418:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800841c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008420:	d40a      	bmi.n	8008438 <_ftoa+0x238>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8008422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008424:	2b00      	cmp	r3, #0
 8008426:	d004      	beq.n	8008432 <_ftoa+0x232>
 8008428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <_ftoa+0x238>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8008432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008434:	3301      	adds	r3, #1
 8008436:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8008438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800843a:	2b00      	cmp	r3, #0
 800843c:	d12e      	bne.n	800849c <_ftoa+0x29c>
    diff = value - (double)whole;
 800843e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008440:	ee07 3a90 	vmov	s15, r3
 8008444:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008448:	ed97 6b00 	vldr	d6, [r7]
 800844c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008450:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8008454:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8008458:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800845c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008464:	bf4c      	ite	mi
 8008466:	2301      	movmi	r3, #1
 8008468:	2300      	movpl	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	f083 0301 	eor.w	r3, r3, #1
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d108      	bne.n	8008488 <_ftoa+0x288>
 8008476:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800847a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800847e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008486:	dd70      	ble.n	800856a <_ftoa+0x36a>
 8008488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 808d 	beq.w	80085ae <_ftoa+0x3ae>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8008494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008496:	3301      	adds	r3, #1
 8008498:	657b      	str	r3, [r7, #84]	; 0x54
 800849a:	e088      	b.n	80085ae <_ftoa+0x3ae>
    }
  }
  else {
    unsigned int count = prec;
 800849c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800849e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80084a0:	e01f      	b.n	80084e2 <_ftoa+0x2e2>
      --count;
 80084a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a4:	3b01      	subs	r3, #1
 80084a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80084a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084aa:	4b20      	ldr	r3, [pc, #128]	; (800852c <_ftoa+0x32c>)
 80084ac:	fba3 2301 	umull	r2, r3, r3, r1
 80084b0:	08da      	lsrs	r2, r3, #3
 80084b2:	4613      	mov	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	1aca      	subs	r2, r1, r3
 80084bc:	b2d2      	uxtb	r2, r2
 80084be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084c0:	1c59      	adds	r1, r3, #1
 80084c2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80084c4:	3230      	adds	r2, #48	; 0x30
 80084c6:	b2d2      	uxtb	r2, r2
 80084c8:	3360      	adds	r3, #96	; 0x60
 80084ca:	443b      	add	r3, r7
 80084cc:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80084d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d2:	4a16      	ldr	r2, [pc, #88]	; (800852c <_ftoa+0x32c>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	08db      	lsrs	r3, r3, #3
 80084da:	653b      	str	r3, [r7, #80]	; 0x50
 80084dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d026      	beq.n	8008530 <_ftoa+0x330>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80084e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084e4:	2b1f      	cmp	r3, #31
 80084e6:	d9dc      	bls.n	80084a2 <_ftoa+0x2a2>
 80084e8:	e02c      	b.n	8008544 <_ftoa+0x344>
 80084ea:	bf00      	nop
 80084ec:	f3af 8000 	nop.w
 80084f0:	ffffffff 	.word	0xffffffff
 80084f4:	ffefffff 	.word	0xffefffff
 80084f8:	ffffffff 	.word	0xffffffff
 80084fc:	7fefffff 	.word	0x7fefffff
 8008500:	00000000 	.word	0x00000000
 8008504:	41cdcd65 	.word	0x41cdcd65
 8008508:	00000000 	.word	0x00000000
 800850c:	c1cdcd65 	.word	0xc1cdcd65
	...
 8008518:	08011788 	.word	0x08011788
 800851c:	0801178c 	.word	0x0801178c
 8008520:	08011794 	.word	0x08011794
 8008524:	0801179c 	.word	0x0801179c
 8008528:	080117c0 	.word	0x080117c0
 800852c:	cccccccd 	.word	0xcccccccd
        break;
 8008530:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8008532:	e007      	b.n	8008544 <_ftoa+0x344>
      buf[len++] = '0';
 8008534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	65fa      	str	r2, [r7, #92]	; 0x5c
 800853a:	3360      	adds	r3, #96	; 0x60
 800853c:	443b      	add	r3, r7
 800853e:	2230      	movs	r2, #48	; 0x30
 8008540:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8008544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008546:	2b1f      	cmp	r3, #31
 8008548:	d804      	bhi.n	8008554 <_ftoa+0x354>
 800854a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800854c:	1e5a      	subs	r2, r3, #1
 800854e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1ef      	bne.n	8008534 <_ftoa+0x334>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008556:	2b1f      	cmp	r3, #31
 8008558:	d829      	bhi.n	80085ae <_ftoa+0x3ae>
      // add decimal
      buf[len++] = '.';
 800855a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008560:	3360      	adds	r3, #96	; 0x60
 8008562:	443b      	add	r3, r7
 8008564:	222e      	movs	r2, #46	; 0x2e
 8008566:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800856a:	e020      	b.n	80085ae <_ftoa+0x3ae>
    buf[len++] = (char)(48 + (whole % 10));
 800856c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800856e:	4b46      	ldr	r3, [pc, #280]	; (8008688 <_ftoa+0x488>)
 8008570:	fb83 1302 	smull	r1, r3, r3, r2
 8008574:	1099      	asrs	r1, r3, #2
 8008576:	17d3      	asrs	r3, r2, #31
 8008578:	1ac9      	subs	r1, r1, r3
 800857a:	460b      	mov	r3, r1
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	440b      	add	r3, r1
 8008580:	005b      	lsls	r3, r3, #1
 8008582:	1ad1      	subs	r1, r2, r3
 8008584:	b2ca      	uxtb	r2, r1
 8008586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008588:	1c59      	adds	r1, r3, #1
 800858a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800858c:	3230      	adds	r2, #48	; 0x30
 800858e:	b2d2      	uxtb	r2, r2
 8008590:	3360      	adds	r3, #96	; 0x60
 8008592:	443b      	add	r3, r7
 8008594:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8008598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800859a:	4a3b      	ldr	r2, [pc, #236]	; (8008688 <_ftoa+0x488>)
 800859c:	fb82 1203 	smull	r1, r2, r2, r3
 80085a0:	1092      	asrs	r2, r2, #2
 80085a2:	17db      	asrs	r3, r3, #31
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	657b      	str	r3, [r7, #84]	; 0x54
 80085a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <_ftoa+0x3b6>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80085ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b0:	2b1f      	cmp	r3, #31
 80085b2:	d9db      	bls.n	800856c <_ftoa+0x36c>
 80085b4:	e000      	b.n	80085b8 <_ftoa+0x3b8>
      break;
 80085b6:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80085b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d123      	bne.n	800860a <_ftoa+0x40a>
 80085c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01e      	beq.n	800860a <_ftoa+0x40a>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80085cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d014      	beq.n	80085fc <_ftoa+0x3fc>
 80085d2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d104      	bne.n	80085e4 <_ftoa+0x3e4>
 80085da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085dc:	f003 030c 	and.w	r3, r3, #12
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <_ftoa+0x3fc>
      width--;
 80085e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e6:	3b01      	subs	r3, #1
 80085e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80085ea:	e007      	b.n	80085fc <_ftoa+0x3fc>
      buf[len++] = '0';
 80085ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80085f2:	3360      	adds	r3, #96	; 0x60
 80085f4:	443b      	add	r3, r7
 80085f6:	2230      	movs	r2, #48	; 0x30
 80085f8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80085fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008600:	429a      	cmp	r2, r3
 8008602:	d202      	bcs.n	800860a <_ftoa+0x40a>
 8008604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008606:	2b1f      	cmp	r3, #31
 8008608:	d9f0      	bls.n	80085ec <_ftoa+0x3ec>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800860a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800860c:	2b1f      	cmp	r3, #31
 800860e:	d827      	bhi.n	8008660 <_ftoa+0x460>
    if (negative) {
 8008610:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008614:	2b00      	cmp	r3, #0
 8008616:	d008      	beq.n	800862a <_ftoa+0x42a>
      buf[len++] = '-';
 8008618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800861e:	3360      	adds	r3, #96	; 0x60
 8008620:	443b      	add	r3, r7
 8008622:	222d      	movs	r2, #45	; 0x2d
 8008624:	f803 2c48 	strb.w	r2, [r3, #-72]
 8008628:	e01a      	b.n	8008660 <_ftoa+0x460>
    }
    else if (flags & FLAGS_PLUS) {
 800862a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d008      	beq.n	8008646 <_ftoa+0x446>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8008634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	65fa      	str	r2, [r7, #92]	; 0x5c
 800863a:	3360      	adds	r3, #96	; 0x60
 800863c:	443b      	add	r3, r7
 800863e:	222b      	movs	r2, #43	; 0x2b
 8008640:	f803 2c48 	strb.w	r2, [r3, #-72]
 8008644:	e00c      	b.n	8008660 <_ftoa+0x460>
    }
    else if (flags & FLAGS_SPACE) {
 8008646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008648:	f003 0308 	and.w	r3, r3, #8
 800864c:	2b00      	cmp	r3, #0
 800864e:	d007      	beq.n	8008660 <_ftoa+0x460>
      buf[len++] = ' ';
 8008650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008656:	3360      	adds	r3, #96	; 0x60
 8008658:	443b      	add	r3, r7
 800865a:	2220      	movs	r2, #32
 800865c:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8008660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008662:	9303      	str	r3, [sp, #12]
 8008664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008666:	9302      	str	r3, [sp, #8]
 8008668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800866a:	9301      	str	r3, [sp, #4]
 800866c:	f107 0318 	add.w	r3, r7, #24
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	6939      	ldr	r1, [r7, #16]
 8008678:	6978      	ldr	r0, [r7, #20]
 800867a:	f7ff fbc2 	bl	8007e02 <_out_rev>
 800867e:	4603      	mov	r3, r0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3760      	adds	r7, #96	; 0x60
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	66666667 	.word	0x66666667
 800868c:	00000000 	.word	0x00000000

08008690 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008694:	b09a      	sub	sp, #104	; 0x68
 8008696:	af06      	add	r7, sp, #24
 8008698:	6178      	str	r0, [r7, #20]
 800869a:	6139      	str	r1, [r7, #16]
 800869c:	60fa      	str	r2, [r7, #12]
 800869e:	60bb      	str	r3, [r7, #8]
 80086a0:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80086a4:	ed97 6b00 	vldr	d6, [r7]
 80086a8:	ed97 7b00 	vldr	d7, [r7]
 80086ac:	eeb4 6b47 	vcmp.f64	d6, d7
 80086b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b4:	d111      	bne.n	80086da <_etoa+0x4a>
 80086b6:	ed97 7b00 	vldr	d7, [r7]
 80086ba:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8008988 <_etoa+0x2f8>
 80086be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80086c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c6:	dc08      	bgt.n	80086da <_etoa+0x4a>
 80086c8:	ed97 7b00 	vldr	d7, [r7]
 80086cc:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8008990 <_etoa+0x300>
 80086d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80086d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d8:	d50f      	bpl.n	80086fa <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80086da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086dc:	9302      	str	r3, [sp, #8]
 80086de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	ed97 0b00 	vldr	d0, [r7]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	6939      	ldr	r1, [r7, #16]
 80086f0:	6978      	ldr	r0, [r7, #20]
 80086f2:	f7ff fd85 	bl	8008200 <_ftoa>
 80086f6:	4603      	mov	r3, r0
 80086f8:	e1c2      	b.n	8008a80 <_etoa+0x3f0>
  }

  // determine the sign
  const bool negative = value < 0;
 80086fa:	ed97 7b00 	vldr	d7, [r7]
 80086fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008706:	bf4c      	ite	mi
 8008708:	2301      	movmi	r3, #1
 800870a:	2300      	movpl	r3, #0
 800870c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 8008710:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008714:	2b00      	cmp	r3, #0
 8008716:	d005      	beq.n	8008724 <_etoa+0x94>
    value = -value;
 8008718:	ed97 7b00 	vldr	d7, [r7]
 800871c:	eeb1 7b47 	vneg.f64	d7, d7
 8008720:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8008724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800872e:	2306      	movs	r3, #6
 8008730:	673b      	str	r3, [r7, #112]	; 0x70
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8008732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008736:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800873a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	f04f 0300 	mov.w	r3, #0
 8008746:	0d0a      	lsrs	r2, r1, #20
 8008748:	2300      	movs	r3, #0
 800874a:	4613      	mov	r3, r2
 800874c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008750:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008754:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8008756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800875a:	4690      	mov	r8, r2
 800875c:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8008760:	4644      	mov	r4, r8
 8008762:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8008766:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800876a:	e9c7 4506 	strd	r4, r5, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800876e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008770:	ee07 3a90 	vmov	s15, r3
 8008774:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008778:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8008998 <_etoa+0x308>
 800877c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008780:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80089a0 <_etoa+0x310>
 8008784:	ee37 6b06 	vadd.f64	d6, d7, d6
 8008788:	ed97 7b06 	vldr	d7, [r7, #24]
 800878c:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 8008790:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008794:	ed9f 5b84 	vldr	d5, [pc, #528]	; 80089a8 <_etoa+0x318>
 8008798:	ee27 7b05 	vmul.f64	d7, d7, d5
 800879c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80087a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80087a4:	ee17 3a90 	vmov	r3, s15
 80087a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80087aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ac:	ee07 3a90 	vmov	s15, r3
 80087b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087b4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80089b0 <_etoa+0x320>
 80087b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80087bc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80087c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80087c8:	ee17 3a90 	vmov	r3, s15
 80087cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80087ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087d8:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80089b8 <_etoa+0x328>
 80087dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087ea:	ed9f 5b75 	vldr	d5, [pc, #468]	; 80089c0 <_etoa+0x330>
 80087ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 80087f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80087f6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 80087fa:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80087fe:	ee27 7b07 	vmul.f64	d7, d7, d7
 8008802:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8008806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008808:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800880c:	17da      	asrs	r2, r3, #31
 800880e:	469a      	mov	sl, r3
 8008810:	4693      	mov	fp, r2
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800881e:	2200      	movs	r2, #0
 8008820:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8008824:	ed97 6b06 	vldr	d6, [r7, #24]
 8008828:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800882c:	ee37 4b07 	vadd.f64	d4, d7, d7
 8008830:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008834:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8008838:	ee35 5b47 	vsub.f64	d5, d5, d7
 800883c:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8008840:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 8008844:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8008848:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800884c:	ee37 3b03 	vadd.f64	d3, d7, d3
 8008850:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8008854:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8008858:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 800885c:	ee37 3b03 	vadd.f64	d3, d7, d3
 8008860:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8008864:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8008868:	ee35 5b07 	vadd.f64	d5, d5, d7
 800886c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8008870:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8008874:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008878:	ee26 7b07 	vmul.f64	d7, d6, d7
 800887c:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 8008880:	ed97 7b06 	vldr	d7, [r7, #24]
 8008884:	ed97 6b00 	vldr	d6, [r7]
 8008888:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800888c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008890:	d50a      	bpl.n	80088a8 <_etoa+0x218>
    expval--;
 8008892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008894:	3b01      	subs	r3, #1
 8008896:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 8008898:	ed97 6b06 	vldr	d6, [r7, #24]
 800889c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80088a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80088a4:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80088a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088aa:	2b63      	cmp	r3, #99	; 0x63
 80088ac:	dc05      	bgt.n	80088ba <_etoa+0x22a>
 80088ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80088b4:	db01      	blt.n	80088ba <_etoa+0x22a>
 80088b6:	2304      	movs	r3, #4
 80088b8:	e000      	b.n	80088bc <_etoa+0x22c>
 80088ba:	2305      	movs	r3, #5
 80088bc:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80088be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d031      	beq.n	800892c <_etoa+0x29c>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80088c8:	ed97 7b00 	vldr	d7, [r7]
 80088cc:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80089c8 <_etoa+0x338>
 80088d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80088d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d8:	db1d      	blt.n	8008916 <_etoa+0x286>
 80088da:	ed97 7b00 	vldr	d7, [r7]
 80088de:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80089d0 <_etoa+0x340>
 80088e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80088e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ea:	d514      	bpl.n	8008916 <_etoa+0x286>
      if ((int)prec > expval) {
 80088ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088f0:	429a      	cmp	r2, r3
 80088f2:	da05      	bge.n	8008900 <_etoa+0x270>
        prec = (unsigned)((int)prec - expval - 1);
 80088f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80088f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	3b01      	subs	r3, #1
 80088fc:	673b      	str	r3, [r7, #112]	; 0x70
 80088fe:	e001      	b.n	8008904 <_etoa+0x274>
      }
      else {
        prec = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	673b      	str	r3, [r7, #112]	; 0x70
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8008904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800890a:	67bb      	str	r3, [r7, #120]	; 0x78
      // no characters in exponent
      minwidth = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008914:	e00a      	b.n	800892c <_etoa+0x29c>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8008916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008918:	2b00      	cmp	r3, #0
 800891a:	d007      	beq.n	800892c <_etoa+0x29c>
 800891c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800891e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <_etoa+0x29c>
        --prec;
 8008926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008928:	3b01      	subs	r3, #1
 800892a:	673b      	str	r3, [r7, #112]	; 0x70
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800892c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800892e:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 8008930:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008934:	429a      	cmp	r2, r3
 8008936:	d904      	bls.n	8008942 <_etoa+0x2b2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8008938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800893a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	647b      	str	r3, [r7, #68]	; 0x44
 8008940:	e001      	b.n	8008946 <_etoa+0x2b6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8008946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008948:	f003 0302 	and.w	r3, r3, #2
 800894c:	2b00      	cmp	r3, #0
 800894e:	d004      	beq.n	800895a <_etoa+0x2ca>
 8008950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <_etoa+0x2ca>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 800895a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d007      	beq.n	8008970 <_etoa+0x2e0>
    value /= conv.F;
 8008960:	ed97 6b06 	vldr	d6, [r7, #24]
 8008964:	ed97 5b00 	vldr	d5, [r7]
 8008968:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800896c:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8008974:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008978:	2b00      	cmp	r3, #0
 800897a:	d02d      	beq.n	80089d8 <_etoa+0x348>
 800897c:	ed97 7b00 	vldr	d7, [r7]
 8008980:	eeb1 7b47 	vneg.f64	d7, d7
 8008984:	e02a      	b.n	80089dc <_etoa+0x34c>
 8008986:	bf00      	nop
 8008988:	ffffffff 	.word	0xffffffff
 800898c:	7fefffff 	.word	0x7fefffff
 8008990:	ffffffff 	.word	0xffffffff
 8008994:	ffefffff 	.word	0xffefffff
 8008998:	509f79fb 	.word	0x509f79fb
 800899c:	3fd34413 	.word	0x3fd34413
 80089a0:	8b60c8b3 	.word	0x8b60c8b3
 80089a4:	3fc68a28 	.word	0x3fc68a28
 80089a8:	636f4361 	.word	0x636f4361
 80089ac:	3fd287a7 	.word	0x3fd287a7
 80089b0:	0979a371 	.word	0x0979a371
 80089b4:	400a934f 	.word	0x400a934f
 80089b8:	bbb55516 	.word	0xbbb55516
 80089bc:	40026bb1 	.word	0x40026bb1
 80089c0:	fefa39ef 	.word	0xfefa39ef
 80089c4:	3fe62e42 	.word	0x3fe62e42
 80089c8:	eb1c432d 	.word	0xeb1c432d
 80089cc:	3f1a36e2 	.word	0x3f1a36e2
 80089d0:	00000000 	.word	0x00000000
 80089d4:	412e8480 	.word	0x412e8480
 80089d8:	ed97 7b00 	vldr	d7, [r7]
 80089dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089e2:	9302      	str	r3, [sp, #8]
 80089e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e6:	9301      	str	r3, [sp, #4]
 80089e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	eeb0 0b47 	vmov.f64	d0, d7
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	6939      	ldr	r1, [r7, #16]
 80089f6:	6978      	ldr	r0, [r7, #20]
 80089f8:	f7ff fc02 	bl	8008200 <_ftoa>
 80089fc:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 80089fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d03c      	beq.n	8008a7e <_etoa+0x3ee>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8008a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a06:	f003 0320 	and.w	r3, r3, #32
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <_etoa+0x382>
 8008a0e:	2045      	movs	r0, #69	; 0x45
 8008a10:	e000      	b.n	8008a14 <_etoa+0x384>
 8008a12:	2065      	movs	r0, #101	; 0x65
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	1c53      	adds	r3, r2, #1
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	697c      	ldr	r4, [r7, #20]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	6939      	ldr	r1, [r7, #16]
 8008a20:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8008a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	bfb8      	it	lt
 8008a28:	425b      	neglt	r3, r3
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a2e:	0fdb      	lsrs	r3, r3, #31
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a34:	3a01      	subs	r2, #1
 8008a36:	2105      	movs	r1, #5
 8008a38:	9105      	str	r1, [sp, #20]
 8008a3a:	9204      	str	r2, [sp, #16]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	9203      	str	r2, [sp, #12]
 8008a40:	220a      	movs	r2, #10
 8008a42:	9202      	str	r2, [sp, #8]
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	9000      	str	r0, [sp, #0]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	6939      	ldr	r1, [r7, #16]
 8008a4e:	6978      	ldr	r0, [r7, #20]
 8008a50:	f7ff fb03 	bl	800805a <_ntoa_long>
 8008a54:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8008a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00e      	beq.n	8008a7e <_etoa+0x3ee>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8008a60:	e007      	b.n	8008a72 <_etoa+0x3e2>
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	1c53      	adds	r3, r2, #1
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	697c      	ldr	r4, [r7, #20]
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	6939      	ldr	r1, [r7, #16]
 8008a6e:	2020      	movs	r0, #32
 8008a70:	47a0      	blx	r4
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d8f1      	bhi.n	8008a62 <_etoa+0x3d2>
    }
  }
  return idx;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3750      	adds	r7, #80	; 0x50
 8008a84:	46bd      	mov	sp, r7
 8008a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a8a:	bf00      	nop

08008a8c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8008a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a90:	b0a3      	sub	sp, #140	; 0x8c
 8008a92:	af0a      	add	r7, sp, #40	; 0x28
 8008a94:	6178      	str	r0, [r7, #20]
 8008a96:	6139      	str	r1, [r7, #16]
 8008a98:	60fa      	str	r2, [r7, #12]
 8008a9a:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f040 84ba 	bne.w	800941c <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8008aa8:	4ba3      	ldr	r3, [pc, #652]	; (8008d38 <_vsnprintf+0x2ac>)
 8008aaa:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8008aac:	f000 bcb6 	b.w	800941c <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2b25      	cmp	r3, #37	; 0x25
 8008ab6:	d00d      	beq.n	8008ad4 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	7818      	ldrb	r0, [r3, #0]
 8008abc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008abe:	1c53      	adds	r3, r2, #1
 8008ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac2:	697c      	ldr	r4, [r7, #20]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6939      	ldr	r1, [r7, #16]
 8008ac8:	47a0      	blx	r4
      format++;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	3301      	adds	r3, #1
 8008ace:	60bb      	str	r3, [r7, #8]
      continue;
 8008ad0:	f000 bca4 	b.w	800941c <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	3b20      	subs	r3, #32
 8008ae4:	2b10      	cmp	r3, #16
 8008ae6:	d857      	bhi.n	8008b98 <_vsnprintf+0x10c>
 8008ae8:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <_vsnprintf+0x64>)
 8008aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aee:	bf00      	nop
 8008af0:	08008b71 	.word	0x08008b71
 8008af4:	08008b99 	.word	0x08008b99
 8008af8:	08008b99 	.word	0x08008b99
 8008afc:	08008b85 	.word	0x08008b85
 8008b00:	08008b99 	.word	0x08008b99
 8008b04:	08008b99 	.word	0x08008b99
 8008b08:	08008b99 	.word	0x08008b99
 8008b0c:	08008b99 	.word	0x08008b99
 8008b10:	08008b99 	.word	0x08008b99
 8008b14:	08008b99 	.word	0x08008b99
 8008b18:	08008b99 	.word	0x08008b99
 8008b1c:	08008b5d 	.word	0x08008b5d
 8008b20:	08008b99 	.word	0x08008b99
 8008b24:	08008b49 	.word	0x08008b49
 8008b28:	08008b99 	.word	0x08008b99
 8008b2c:	08008b99 	.word	0x08008b99
 8008b30:	08008b35 	.word	0x08008b35
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8008b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b36:	f043 0301 	orr.w	r3, r3, #1
 8008b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60bb      	str	r3, [r7, #8]
 8008b42:	2301      	movs	r3, #1
 8008b44:	653b      	str	r3, [r7, #80]	; 0x50
 8008b46:	e02a      	b.n	8008b9e <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8008b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b4a:	f043 0302 	orr.w	r3, r3, #2
 8008b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	3301      	adds	r3, #1
 8008b54:	60bb      	str	r3, [r7, #8]
 8008b56:	2301      	movs	r3, #1
 8008b58:	653b      	str	r3, [r7, #80]	; 0x50
 8008b5a:	e020      	b.n	8008b9e <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8008b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b5e:	f043 0304 	orr.w	r3, r3, #4
 8008b62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60bb      	str	r3, [r7, #8]
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8008b6e:	e016      	b.n	8008b9e <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8008b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b72:	f043 0308 	orr.w	r3, r3, #8
 8008b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60bb      	str	r3, [r7, #8]
 8008b7e:	2301      	movs	r3, #1
 8008b80:	653b      	str	r3, [r7, #80]	; 0x50
 8008b82:	e00c      	b.n	8008b9e <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8008b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b86:	f043 0310 	orr.w	r3, r3, #16
 8008b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60bb      	str	r3, [r7, #8]
 8008b92:	2301      	movs	r3, #1
 8008b94:	653b      	str	r3, [r7, #80]	; 0x50
 8008b96:	e002      	b.n	8008b9e <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b9c:	bf00      	nop
      }
    } while (n);
 8008b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d19c      	bne.n	8008ade <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff f8ed 	bl	8007d8c <_is_digit>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d006      	beq.n	8008bc6 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8008bb8:	f107 0308 	add.w	r3, r7, #8
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff f8fc 	bl	8007dba <_atoi>
 8008bc2:	65b8      	str	r0, [r7, #88]	; 0x58
 8008bc4:	e01a      	b.n	8008bfc <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b2a      	cmp	r3, #42	; 0x2a
 8008bcc:	d116      	bne.n	8008bfc <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8008bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bd2:	1d1a      	adds	r2, r3, #4
 8008bd4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	da07      	bge.n	8008bf2 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8008be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be4:	f043 0302 	orr.w	r3, r3, #2
 8008be8:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8008bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bec:	425b      	negs	r3, r3
 8008bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bf0:	e001      	b.n	8008bf6 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b2e      	cmp	r3, #46	; 0x2e
 8008c06:	d127      	bne.n	8008c58 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8008c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	3301      	adds	r3, #1
 8008c14:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff f8b6 	bl	8007d8c <_is_digit>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d006      	beq.n	8008c34 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8008c26:	f107 0308 	add.w	r3, r7, #8
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff f8c5 	bl	8007dba <_atoi>
 8008c30:	6578      	str	r0, [r7, #84]	; 0x54
 8008c32:	e011      	b.n	8008c58 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b2a      	cmp	r3, #42	; 0x2a
 8008c3a:	d10d      	bne.n	8008c58 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8008c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c40:	1d1a      	adds	r2, r3, #4
 8008c42:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008c50:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	3301      	adds	r3, #1
 8008c56:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	3b68      	subs	r3, #104	; 0x68
 8008c5e:	2b12      	cmp	r3, #18
 8008c60:	d866      	bhi.n	8008d30 <_vsnprintf+0x2a4>
 8008c62:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <_vsnprintf+0x1dc>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008cdb 	.word	0x08008cdb
 8008c6c:	08008d31 	.word	0x08008d31
 8008c70:	08008d11 	.word	0x08008d11
 8008c74:	08008d31 	.word	0x08008d31
 8008c78:	08008cb5 	.word	0x08008cb5
 8008c7c:	08008d31 	.word	0x08008d31
 8008c80:	08008d31 	.word	0x08008d31
 8008c84:	08008d31 	.word	0x08008d31
 8008c88:	08008d31 	.word	0x08008d31
 8008c8c:	08008d31 	.word	0x08008d31
 8008c90:	08008d31 	.word	0x08008d31
 8008c94:	08008d31 	.word	0x08008d31
 8008c98:	08008d01 	.word	0x08008d01
 8008c9c:	08008d31 	.word	0x08008d31
 8008ca0:	08008d31 	.word	0x08008d31
 8008ca4:	08008d31 	.word	0x08008d31
 8008ca8:	08008d31 	.word	0x08008d31
 8008cac:	08008d31 	.word	0x08008d31
 8008cb0:	08008d21 	.word	0x08008d21
      case 'l' :
        flags |= FLAGS_LONG;
 8008cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cba:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b6c      	cmp	r3, #108	; 0x6c
 8008cc8:	d134      	bne.n	8008d34 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8008cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	60bb      	str	r3, [r7, #8]
        }
        break;
 8008cd8:	e02c      	b.n	8008d34 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8008cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	2b68      	cmp	r3, #104	; 0x68
 8008cee:	d125      	bne.n	8008d3c <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8008cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	60bb      	str	r3, [r7, #8]
        }
        break;
 8008cfe:	e01d      	b.n	8008d3c <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d06:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	60bb      	str	r3, [r7, #8]
        break;
 8008d0e:	e016      	b.n	8008d3e <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d16:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	60bb      	str	r3, [r7, #8]
        break;
 8008d1e:	e00e      	b.n	8008d3e <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d26:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	60bb      	str	r3, [r7, #8]
        break;
 8008d2e:	e006      	b.n	8008d3e <_vsnprintf+0x2b2>
      default :
        break;
 8008d30:	bf00      	nop
 8008d32:	e004      	b.n	8008d3e <_vsnprintf+0x2b2>
        break;
 8008d34:	bf00      	nop
 8008d36:	e002      	b.n	8008d3e <_vsnprintf+0x2b2>
 8008d38:	08007d11 	.word	0x08007d11
        break;
 8008d3c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	3b25      	subs	r3, #37	; 0x25
 8008d44:	2b53      	cmp	r3, #83	; 0x53
 8008d46:	f200 835c 	bhi.w	8009402 <_vsnprintf+0x976>
 8008d4a:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <_vsnprintf+0x2c4>)
 8008d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d50:	080093eb 	.word	0x080093eb
 8008d54:	08009403 	.word	0x08009403
 8008d58:	08009403 	.word	0x08009403
 8008d5c:	08009403 	.word	0x08009403
 8008d60:	08009403 	.word	0x08009403
 8008d64:	08009403 	.word	0x08009403
 8008d68:	08009403 	.word	0x08009403
 8008d6c:	08009403 	.word	0x08009403
 8008d70:	08009403 	.word	0x08009403
 8008d74:	08009403 	.word	0x08009403
 8008d78:	08009403 	.word	0x08009403
 8008d7c:	08009403 	.word	0x08009403
 8008d80:	08009403 	.word	0x08009403
 8008d84:	08009403 	.word	0x08009403
 8008d88:	08009403 	.word	0x08009403
 8008d8c:	08009403 	.word	0x08009403
 8008d90:	08009403 	.word	0x08009403
 8008d94:	08009403 	.word	0x08009403
 8008d98:	08009403 	.word	0x08009403
 8008d9c:	08009403 	.word	0x08009403
 8008da0:	08009403 	.word	0x08009403
 8008da4:	08009403 	.word	0x08009403
 8008da8:	08009403 	.word	0x08009403
 8008dac:	08009403 	.word	0x08009403
 8008db0:	08009403 	.word	0x08009403
 8008db4:	08009403 	.word	0x08009403
 8008db8:	08009403 	.word	0x08009403
 8008dbc:	08009403 	.word	0x08009403
 8008dc0:	08009403 	.word	0x08009403
 8008dc4:	08009403 	.word	0x08009403
 8008dc8:	08009403 	.word	0x08009403
 8008dcc:	08009403 	.word	0x08009403
 8008dd0:	080091a3 	.word	0x080091a3
 8008dd4:	08009157 	.word	0x08009157
 8008dd8:	080091a3 	.word	0x080091a3
 8008ddc:	08009403 	.word	0x08009403
 8008de0:	08009403 	.word	0x08009403
 8008de4:	08009403 	.word	0x08009403
 8008de8:	08009403 	.word	0x08009403
 8008dec:	08009403 	.word	0x08009403
 8008df0:	08009403 	.word	0x08009403
 8008df4:	08009403 	.word	0x08009403
 8008df8:	08009403 	.word	0x08009403
 8008dfc:	08009403 	.word	0x08009403
 8008e00:	08009403 	.word	0x08009403
 8008e04:	08009403 	.word	0x08009403
 8008e08:	08009403 	.word	0x08009403
 8008e0c:	08009403 	.word	0x08009403
 8008e10:	08009403 	.word	0x08009403
 8008e14:	08009403 	.word	0x08009403
 8008e18:	08009403 	.word	0x08009403
 8008e1c:	08008ea1 	.word	0x08008ea1
 8008e20:	08009403 	.word	0x08009403
 8008e24:	08009403 	.word	0x08009403
 8008e28:	08009403 	.word	0x08009403
 8008e2c:	08009403 	.word	0x08009403
 8008e30:	08009403 	.word	0x08009403
 8008e34:	08009403 	.word	0x08009403
 8008e38:	08009403 	.word	0x08009403
 8008e3c:	08009403 	.word	0x08009403
 8008e40:	08009403 	.word	0x08009403
 8008e44:	08008ea1 	.word	0x08008ea1
 8008e48:	0800920f 	.word	0x0800920f
 8008e4c:	08008ea1 	.word	0x08008ea1
 8008e50:	080091a3 	.word	0x080091a3
 8008e54:	08009157 	.word	0x08009157
 8008e58:	080091a3 	.word	0x080091a3
 8008e5c:	08009403 	.word	0x08009403
 8008e60:	08008ea1 	.word	0x08008ea1
 8008e64:	08009403 	.word	0x08009403
 8008e68:	08009403 	.word	0x08009403
 8008e6c:	08009403 	.word	0x08009403
 8008e70:	08009403 	.word	0x08009403
 8008e74:	08009403 	.word	0x08009403
 8008e78:	08008ea1 	.word	0x08008ea1
 8008e7c:	0800934f 	.word	0x0800934f
 8008e80:	08009403 	.word	0x08009403
 8008e84:	08009403 	.word	0x08009403
 8008e88:	08009287 	.word	0x08009287
 8008e8c:	08009403 	.word	0x08009403
 8008e90:	08008ea1 	.word	0x08008ea1
 8008e94:	08009403 	.word	0x08009403
 8008e98:	08009403 	.word	0x08009403
 8008e9c:	08008ea1 	.word	0x08008ea1
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b78      	cmp	r3, #120	; 0x78
 8008ea6:	d003      	beq.n	8008eb0 <_vsnprintf+0x424>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b58      	cmp	r3, #88	; 0x58
 8008eae:	d102      	bne.n	8008eb6 <_vsnprintf+0x42a>
          base = 16U;
 8008eb0:	2310      	movs	r3, #16
 8008eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eb4:	e013      	b.n	8008ede <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b6f      	cmp	r3, #111	; 0x6f
 8008ebc:	d102      	bne.n	8008ec4 <_vsnprintf+0x438>
          base =  8U;
 8008ebe:	2308      	movs	r3, #8
 8008ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ec2:	e00c      	b.n	8008ede <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b62      	cmp	r3, #98	; 0x62
 8008eca:	d102      	bne.n	8008ed2 <_vsnprintf+0x446>
          base =  2U;
 8008ecc:	2302      	movs	r3, #2
 8008ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ed0:	e005      	b.n	8008ede <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8008ed2:	230a      	movs	r3, #10
 8008ed4:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8008ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ed8:	f023 0310 	bic.w	r3, r3, #16
 8008edc:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b58      	cmp	r3, #88	; 0x58
 8008ee4:	d103      	bne.n	8008eee <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8008ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ee8:	f043 0320 	orr.w	r3, r3, #32
 8008eec:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b69      	cmp	r3, #105	; 0x69
 8008ef4:	d007      	beq.n	8008f06 <_vsnprintf+0x47a>
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b64      	cmp	r3, #100	; 0x64
 8008efc:	d003      	beq.n	8008f06 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8008efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f00:	f023 030c 	bic.w	r3, r3, #12
 8008f04:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8008f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8008f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f12:	f023 0301 	bic.w	r3, r3, #1
 8008f16:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	2b69      	cmp	r3, #105	; 0x69
 8008f1e:	d004      	beq.n	8008f2a <_vsnprintf+0x49e>
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b64      	cmp	r3, #100	; 0x64
 8008f26:	f040 8098 	bne.w	800905a <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8008f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d031      	beq.n	8008f98 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8008f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f38:	3307      	adds	r3, #7
 8008f3a:	f023 0307 	bic.w	r3, r3, #7
 8008f3e:	f103 0208 	add.w	r2, r3, #8
 8008f42:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8008f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	da06      	bge.n	8008f64 <_vsnprintf+0x4d8>
 8008f56:	2100      	movs	r1, #0
 8008f58:	f1d2 0800 	rsbs	r8, r2, #0
 8008f5c:	eb61 0903 	sbc.w	r9, r1, r3
 8008f60:	4642      	mov	r2, r8
 8008f62:	464b      	mov	r3, r9
 8008f64:	69f9      	ldr	r1, [r7, #28]
 8008f66:	0fc9      	lsrs	r1, r1, #31
 8008f68:	b2c9      	uxtb	r1, r1
 8008f6a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008f6c:	2400      	movs	r4, #0
 8008f6e:	4682      	mov	sl, r0
 8008f70:	46a3      	mov	fp, r4
 8008f72:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008f74:	9008      	str	r0, [sp, #32]
 8008f76:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008f78:	9007      	str	r0, [sp, #28]
 8008f7a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008f7c:	9006      	str	r0, [sp, #24]
 8008f7e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8008f82:	9102      	str	r1, [sp, #8]
 8008f84:	e9cd 2300 	strd	r2, r3, [sp]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f8c:	6939      	ldr	r1, [r7, #16]
 8008f8e:	6978      	ldr	r0, [r7, #20]
 8008f90:	f7ff f8c9 	bl	8008126 <_ntoa_long_long>
 8008f94:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8008f96:	e0da      	b.n	800914e <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8008f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d020      	beq.n	8008fe4 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8008fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fa6:	1d1a      	adds	r2, r3, #4
 8008fa8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	bfb8      	it	lt
 8008fb6:	425b      	neglt	r3, r3
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	0fdb      	lsrs	r3, r3, #31
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fc2:	9205      	str	r2, [sp, #20]
 8008fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fc6:	9204      	str	r2, [sp, #16]
 8008fc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fca:	9203      	str	r2, [sp, #12]
 8008fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fce:	9202      	str	r2, [sp, #8]
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	9100      	str	r1, [sp, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fd8:	6939      	ldr	r1, [r7, #16]
 8008fda:	6978      	ldr	r0, [r7, #20]
 8008fdc:	f7ff f83d 	bl	800805a <_ntoa_long>
 8008fe0:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8008fe2:	e0b4      	b.n	800914e <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8008fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d007      	beq.n	8008ffe <_vsnprintf+0x572>
 8008fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ff2:	1d1a      	adds	r2, r3, #4
 8008ff4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	e012      	b.n	8009024 <_vsnprintf+0x598>
 8008ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <_vsnprintf+0x58c>
 8009008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800900c:	1d1a      	adds	r2, r3, #4
 800900e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	b21b      	sxth	r3, r3
 8009016:	e005      	b.n	8009024 <_vsnprintf+0x598>
 8009018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800901c:	1d1a      	adds	r2, r3, #4
 800901e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8009026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfb8      	it	lt
 800902c:	425b      	neglt	r3, r3
 800902e:	4619      	mov	r1, r3
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	0fdb      	lsrs	r3, r3, #31
 8009034:	b2db      	uxtb	r3, r3
 8009036:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009038:	9205      	str	r2, [sp, #20]
 800903a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800903c:	9204      	str	r2, [sp, #16]
 800903e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009040:	9203      	str	r2, [sp, #12]
 8009042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009044:	9202      	str	r2, [sp, #8]
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	9100      	str	r1, [sp, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800904e:	6939      	ldr	r1, [r7, #16]
 8009050:	6978      	ldr	r0, [r7, #20]
 8009052:	f7ff f802 	bl	800805a <_ntoa_long>
 8009056:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8009058:	e079      	b.n	800914e <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800905a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800905c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009060:	2b00      	cmp	r3, #0
 8009062:	d022      	beq.n	80090aa <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8009064:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009068:	3307      	adds	r3, #7
 800906a:	f023 0307 	bic.w	r3, r3, #7
 800906e:	f103 0208 	add.w	r2, r3, #8
 8009072:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800907c:	2000      	movs	r0, #0
 800907e:	460d      	mov	r5, r1
 8009080:	4606      	mov	r6, r0
 8009082:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009084:	9108      	str	r1, [sp, #32]
 8009086:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009088:	9107      	str	r1, [sp, #28]
 800908a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800908c:	9106      	str	r1, [sp, #24]
 800908e:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8009092:	2100      	movs	r1, #0
 8009094:	9102      	str	r1, [sp, #8]
 8009096:	e9cd 2300 	strd	r2, r3, [sp]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800909e:	6939      	ldr	r1, [r7, #16]
 80090a0:	6978      	ldr	r0, [r7, #20]
 80090a2:	f7ff f840 	bl	8008126 <_ntoa_long_long>
 80090a6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80090a8:	e051      	b.n	800914e <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80090aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d018      	beq.n	80090e6 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80090b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090b8:	1d1a      	adds	r2, r3, #4
 80090ba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090c2:	9205      	str	r2, [sp, #20]
 80090c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090c6:	9204      	str	r2, [sp, #16]
 80090c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80090ca:	9203      	str	r2, [sp, #12]
 80090cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090ce:	9202      	str	r2, [sp, #8]
 80090d0:	2200      	movs	r2, #0
 80090d2:	9201      	str	r2, [sp, #4]
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090da:	6939      	ldr	r1, [r7, #16]
 80090dc:	6978      	ldr	r0, [r7, #20]
 80090de:	f7fe ffbc 	bl	800805a <_ntoa_long>
 80090e2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80090e4:	e033      	b.n	800914e <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80090e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d007      	beq.n	8009100 <_vsnprintf+0x674>
 80090f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090f4:	1d1a      	adds	r2, r3, #4
 80090f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	e012      	b.n	8009126 <_vsnprintf+0x69a>
 8009100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009106:	2b00      	cmp	r3, #0
 8009108:	d007      	beq.n	800911a <_vsnprintf+0x68e>
 800910a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800910e:	1d1a      	adds	r2, r3, #4
 8009110:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	b29b      	uxth	r3, r3
 8009118:	e005      	b.n	8009126 <_vsnprintf+0x69a>
 800911a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800911e:	1d1a      	adds	r2, r3, #4
 8009120:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8009128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800912e:	9304      	str	r3, [sp, #16]
 8009130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009132:	9303      	str	r3, [sp, #12]
 8009134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009136:	9302      	str	r3, [sp, #8]
 8009138:	2300      	movs	r3, #0
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009144:	6939      	ldr	r1, [r7, #16]
 8009146:	6978      	ldr	r0, [r7, #20]
 8009148:	f7fe ff87 	bl	800805a <_ntoa_long>
 800914c:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	3301      	adds	r3, #1
 8009152:	60bb      	str	r3, [r7, #8]
        break;
 8009154:	e162      	b.n	800941c <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b46      	cmp	r3, #70	; 0x46
 800915c:	d103      	bne.n	8009166 <_vsnprintf+0x6da>
 800915e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009160:	f043 0320 	orr.w	r3, r3, #32
 8009164:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8009166:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800916a:	3307      	adds	r3, #7
 800916c:	f023 0307 	bic.w	r3, r3, #7
 8009170:	f103 0208 	add.w	r2, r3, #8
 8009174:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009178:	ed93 7b00 	vldr	d7, [r3]
 800917c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800917e:	9302      	str	r3, [sp, #8]
 8009180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	eeb0 0b47 	vmov.f64	d0, d7
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009190:	6939      	ldr	r1, [r7, #16]
 8009192:	6978      	ldr	r0, [r7, #20]
 8009194:	f7ff f834 	bl	8008200 <_ftoa>
 8009198:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	3301      	adds	r3, #1
 800919e:	60bb      	str	r3, [r7, #8]
        break;
 80091a0:	e13c      	b.n	800941c <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	2b67      	cmp	r3, #103	; 0x67
 80091a8:	d003      	beq.n	80091b2 <_vsnprintf+0x726>
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2b47      	cmp	r3, #71	; 0x47
 80091b0:	d103      	bne.n	80091ba <_vsnprintf+0x72e>
 80091b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80091b8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b45      	cmp	r3, #69	; 0x45
 80091c0:	d003      	beq.n	80091ca <_vsnprintf+0x73e>
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	2b47      	cmp	r3, #71	; 0x47
 80091c8:	d103      	bne.n	80091d2 <_vsnprintf+0x746>
 80091ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091cc:	f043 0320 	orr.w	r3, r3, #32
 80091d0:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80091d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091d6:	3307      	adds	r3, #7
 80091d8:	f023 0307 	bic.w	r3, r3, #7
 80091dc:	f103 0208 	add.w	r2, r3, #8
 80091e0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80091e4:	ed93 7b00 	vldr	d7, [r3]
 80091e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	eeb0 0b47 	vmov.f64	d0, d7
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091fc:	6939      	ldr	r1, [r7, #16]
 80091fe:	6978      	ldr	r0, [r7, #20]
 8009200:	f7ff fa46 	bl	8008690 <_etoa>
 8009204:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	3301      	adds	r3, #1
 800920a:	60bb      	str	r3, [r7, #8]
        break;
 800920c:	e106      	b.n	800941c <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800920e:	2301      	movs	r3, #1
 8009210:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8009212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009214:	f003 0302 	and.w	r3, r3, #2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10e      	bne.n	800923a <_vsnprintf+0x7ae>
          while (l++ < width) {
 800921c:	e007      	b.n	800922e <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 800921e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009220:	1c53      	adds	r3, r2, #1
 8009222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009224:	697c      	ldr	r4, [r7, #20]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6939      	ldr	r1, [r7, #16]
 800922a:	2020      	movs	r0, #32
 800922c:	47a0      	blx	r4
          while (l++ < width) {
 800922e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009230:	1c5a      	adds	r2, r3, #1
 8009232:	647a      	str	r2, [r7, #68]	; 0x44
 8009234:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009236:	429a      	cmp	r2, r3
 8009238:	d8f1      	bhi.n	800921e <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800923a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800923e:	1d1a      	adds	r2, r3, #4
 8009240:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	b2d8      	uxtb	r0, r3
 8009248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800924a:	1c53      	adds	r3, r2, #1
 800924c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800924e:	697c      	ldr	r4, [r7, #20]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6939      	ldr	r1, [r7, #16]
 8009254:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8009256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00e      	beq.n	800927e <_vsnprintf+0x7f2>
          while (l++ < width) {
 8009260:	e007      	b.n	8009272 <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 8009262:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009264:	1c53      	adds	r3, r2, #1
 8009266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009268:	697c      	ldr	r4, [r7, #20]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6939      	ldr	r1, [r7, #16]
 800926e:	2020      	movs	r0, #32
 8009270:	47a0      	blx	r4
          while (l++ < width) {
 8009272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009274:	1c5a      	adds	r2, r3, #1
 8009276:	647a      	str	r2, [r7, #68]	; 0x44
 8009278:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800927a:	429a      	cmp	r2, r3
 800927c:	d8f1      	bhi.n	8009262 <_vsnprintf+0x7d6>
          }
        }
        format++;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	3301      	adds	r3, #1
 8009282:	60bb      	str	r3, [r7, #8]
        break;
 8009284:	e0ca      	b.n	800941c <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8009286:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800928a:	1d1a      	adds	r2, r3, #4
 800928c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8009294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <_vsnprintf+0x812>
 800929a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800929c:	e001      	b.n	80092a2 <_vsnprintf+0x816>
 800929e:	f04f 33ff 	mov.w	r3, #4294967295
 80092a2:	4619      	mov	r1, r3
 80092a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80092a6:	f7fe fd54 	bl	8007d52 <_strnlen_s>
 80092aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80092ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d005      	beq.n	80092c2 <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 80092b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ba:	4293      	cmp	r3, r2
 80092bc:	bf28      	it	cs
 80092be:	4613      	movcs	r3, r2
 80092c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80092c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d11a      	bne.n	8009302 <_vsnprintf+0x876>
          while (l++ < width) {
 80092cc:	e007      	b.n	80092de <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 80092ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092d0:	1c53      	adds	r3, r2, #1
 80092d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092d4:	697c      	ldr	r4, [r7, #20]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6939      	ldr	r1, [r7, #16]
 80092da:	2020      	movs	r0, #32
 80092dc:	47a0      	blx	r4
          while (l++ < width) {
 80092de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80092e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d8f1      	bhi.n	80092ce <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80092ea:	e00a      	b.n	8009302 <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 80092ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	643a      	str	r2, [r7, #64]	; 0x40
 80092f2:	7818      	ldrb	r0, [r3, #0]
 80092f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092f6:	1c53      	adds	r3, r2, #1
 80092f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092fa:	697c      	ldr	r4, [r7, #20]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6939      	ldr	r1, [r7, #16]
 8009300:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8009302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d009      	beq.n	800931e <_vsnprintf+0x892>
 800930a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800930c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0eb      	beq.n	80092ec <_vsnprintf+0x860>
 8009314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009316:	1e5a      	subs	r2, r3, #1
 8009318:	657a      	str	r2, [r7, #84]	; 0x54
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e6      	bne.n	80092ec <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800931e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00e      	beq.n	8009346 <_vsnprintf+0x8ba>
          while (l++ < width) {
 8009328:	e007      	b.n	800933a <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 800932a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800932c:	1c53      	adds	r3, r2, #1
 800932e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009330:	697c      	ldr	r4, [r7, #20]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6939      	ldr	r1, [r7, #16]
 8009336:	2020      	movs	r0, #32
 8009338:	47a0      	blx	r4
          while (l++ < width) {
 800933a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009340:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009342:	429a      	cmp	r2, r3
 8009344:	d8f1      	bhi.n	800932a <_vsnprintf+0x89e>
          }
        }
        format++;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	3301      	adds	r3, #1
 800934a:	60bb      	str	r3, [r7, #8]
        break;
 800934c:	e066      	b.n	800941c <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800934e:	2308      	movs	r3, #8
 8009350:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8009352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009354:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8009358:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800935a:	2300      	movs	r3, #0
 800935c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8009360:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009364:	2b00      	cmp	r3, #0
 8009366:	d023      	beq.n	80093b0 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8009368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800936c:	1d1a      	adds	r2, r3, #4
 800936e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	461a      	mov	r2, r3
 8009376:	2300      	movs	r3, #0
 8009378:	603a      	str	r2, [r7, #0]
 800937a:	607b      	str	r3, [r7, #4]
 800937c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800937e:	9308      	str	r3, [sp, #32]
 8009380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009382:	9307      	str	r3, [sp, #28]
 8009384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009386:	9306      	str	r3, [sp, #24]
 8009388:	f04f 0210 	mov.w	r2, #16
 800938c:	f04f 0300 	mov.w	r3, #0
 8009390:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009394:	2300      	movs	r3, #0
 8009396:	9302      	str	r3, [sp, #8]
 8009398:	e9d7 3400 	ldrd	r3, r4, [r7]
 800939c:	e9cd 3400 	strd	r3, r4, [sp]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093a4:	6939      	ldr	r1, [r7, #16]
 80093a6:	6978      	ldr	r0, [r7, #20]
 80093a8:	f7fe febd 	bl	8008126 <_ntoa_long_long>
 80093ac:	64f8      	str	r0, [r7, #76]	; 0x4c
 80093ae:	e018      	b.n	80093e2 <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80093b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093b4:	1d1a      	adds	r2, r3, #4
 80093b6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093c0:	9305      	str	r3, [sp, #20]
 80093c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093c8:	9303      	str	r3, [sp, #12]
 80093ca:	2310      	movs	r3, #16
 80093cc:	9302      	str	r3, [sp, #8]
 80093ce:	2300      	movs	r3, #0
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	9200      	str	r2, [sp, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093d8:	6939      	ldr	r1, [r7, #16]
 80093da:	6978      	ldr	r0, [r7, #20]
 80093dc:	f7fe fe3d 	bl	800805a <_ntoa_long>
 80093e0:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	3301      	adds	r3, #1
 80093e6:	60bb      	str	r3, [r7, #8]
        break;
 80093e8:	e018      	b.n	800941c <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80093ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093ec:	1c53      	adds	r3, r2, #1
 80093ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093f0:	697c      	ldr	r4, [r7, #20]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6939      	ldr	r1, [r7, #16]
 80093f6:	2025      	movs	r0, #37	; 0x25
 80093f8:	47a0      	blx	r4
        format++;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	3301      	adds	r3, #1
 80093fe:	60bb      	str	r3, [r7, #8]
        break;
 8009400:	e00c      	b.n	800941c <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	7818      	ldrb	r0, [r3, #0]
 8009406:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009408:	1c53      	adds	r3, r2, #1
 800940a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800940c:	697c      	ldr	r4, [r7, #20]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6939      	ldr	r1, [r7, #16]
 8009412:	47a0      	blx	r4
        format++;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	3301      	adds	r3, #1
 8009418:	60bb      	str	r3, [r7, #8]
        break;
 800941a:	bf00      	nop
  while (*format)
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	f47f ab45 	bne.w	8008ab0 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8009426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	429a      	cmp	r2, r3
 800942c:	d302      	bcc.n	8009434 <_vsnprintf+0x9a8>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	1e5a      	subs	r2, r3, #1
 8009432:	e000      	b.n	8009436 <_vsnprintf+0x9aa>
 8009434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009436:	697c      	ldr	r4, [r7, #20]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6939      	ldr	r1, [r7, #16]
 800943c:	2000      	movs	r0, #0
 800943e:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8009440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009442:	4618      	mov	r0, r3
 8009444:	3764      	adds	r7, #100	; 0x64
 8009446:	46bd      	mov	sp, r7
 8009448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800944c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800944c:	b40f      	push	{r0, r1, r2, r3}
 800944e:	b580      	push	{r7, lr}
 8009450:	b086      	sub	sp, #24
 8009452:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8009454:	f107 031c 	add.w	r3, r7, #28
 8009458:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800945a:	1d39      	adds	r1, r7, #4
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	f04f 32ff 	mov.w	r2, #4294967295
 8009466:	4806      	ldr	r0, [pc, #24]	; (8009480 <printf_+0x34>)
 8009468:	f7ff fb10 	bl	8008a8c <_vsnprintf>
 800946c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800946e:	68fb      	ldr	r3, [r7, #12]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800947a:	b004      	add	sp, #16
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	08007d2d 	.word	0x08007d2d

08009484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800948a:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <HAL_MspInit+0x30>)
 800948c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009490:	4a08      	ldr	r2, [pc, #32]	; (80094b4 <HAL_MspInit+0x30>)
 8009492:	f043 0302 	orr.w	r3, r3, #2
 8009496:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800949a:	4b06      	ldr	r3, [pc, #24]	; (80094b4 <HAL_MspInit+0x30>)
 800949c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	607b      	str	r3, [r7, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	58024400 	.word	0x58024400

080094b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b0ba      	sub	sp, #232	; 0xe8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	605a      	str	r2, [r3, #4]
 80094ca:	609a      	str	r2, [r3, #8]
 80094cc:	60da      	str	r2, [r3, #12]
 80094ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80094d0:	f107 0310 	add.w	r3, r7, #16
 80094d4:	22c0      	movs	r2, #192	; 0xc0
 80094d6:	2100      	movs	r1, #0
 80094d8:	4618      	mov	r0, r3
 80094da:	f006 f917 	bl	800f70c <memset>
  if(hspi->Instance==SPI1)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a2e      	ldr	r2, [pc, #184]	; (800959c <HAL_SPI_MspInit+0xe4>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d155      	bne.n	8009594 <HAL_SPI_MspInit+0xdc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80094e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80094f4:	2302      	movs	r3, #2
 80094f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80094f8:	230c      	movs	r3, #12
 80094fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 80094fc:	2301      	movs	r3, #1
 80094fe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8009500:	2308      	movs	r3, #8
 8009502:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8009504:	2302      	movs	r3, #2
 8009506:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8009508:	23c0      	movs	r3, #192	; 0xc0
 800950a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800950c:	2320      	movs	r3, #32
 800950e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8009510:	2300      	movs	r3, #0
 8009512:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8009514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009518:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800951a:	f107 0310 	add.w	r3, r7, #16
 800951e:	4618      	mov	r0, r3
 8009520:	f002 fade 	bl	800bae0 <HAL_RCCEx_PeriphCLKConfig>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 800952a:	f7fe fbec 	bl	8007d06 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800952e:	4b1c      	ldr	r3, [pc, #112]	; (80095a0 <HAL_SPI_MspInit+0xe8>)
 8009530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009534:	4a1a      	ldr	r2, [pc, #104]	; (80095a0 <HAL_SPI_MspInit+0xe8>)
 8009536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800953a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800953e:	4b18      	ldr	r3, [pc, #96]	; (80095a0 <HAL_SPI_MspInit+0xe8>)
 8009540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800954c:	4b14      	ldr	r3, [pc, #80]	; (80095a0 <HAL_SPI_MspInit+0xe8>)
 800954e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009552:	4a13      	ldr	r2, [pc, #76]	; (80095a0 <HAL_SPI_MspInit+0xe8>)
 8009554:	f043 0301 	orr.w	r3, r3, #1
 8009558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800955c:	4b10      	ldr	r3, [pc, #64]	; (80095a0 <HAL_SPI_MspInit+0xe8>)
 800955e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	60bb      	str	r3, [r7, #8]
 8009568:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800956a:	23e0      	movs	r3, #224	; 0xe0
 800956c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009570:	2302      	movs	r3, #2
 8009572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009576:	2300      	movs	r3, #0
 8009578:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800957c:	2300      	movs	r3, #0
 800957e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009582:	2305      	movs	r3, #5
 8009584:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009588:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800958c:	4619      	mov	r1, r3
 800958e:	4805      	ldr	r0, [pc, #20]	; (80095a4 <HAL_SPI_MspInit+0xec>)
 8009590:	f000 ff70 	bl	800a474 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8009594:	bf00      	nop
 8009596:	37e8      	adds	r7, #232	; 0xe8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	40013000 	.word	0x40013000
 80095a0:	58024400 	.word	0x58024400
 80095a4:	58020000 	.word	0x58020000

080095a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a0e      	ldr	r2, [pc, #56]	; (80095f0 <HAL_TIM_Base_MspInit+0x48>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d116      	bne.n	80095e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80095ba:	4b0e      	ldr	r3, [pc, #56]	; (80095f4 <HAL_TIM_Base_MspInit+0x4c>)
 80095bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80095c0:	4a0c      	ldr	r2, [pc, #48]	; (80095f4 <HAL_TIM_Base_MspInit+0x4c>)
 80095c2:	f043 0320 	orr.w	r3, r3, #32
 80095c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80095ca:	4b0a      	ldr	r3, [pc, #40]	; (80095f4 <HAL_TIM_Base_MspInit+0x4c>)
 80095cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80095d0:	f003 0320 	and.w	r3, r3, #32
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80095d8:	2200      	movs	r2, #0
 80095da:	2100      	movs	r1, #0
 80095dc:	2037      	movs	r0, #55	; 0x37
 80095de:	f000 fe98 	bl	800a312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80095e2:	2037      	movs	r0, #55	; 0x37
 80095e4:	f000 feaf 	bl	800a346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80095e8:	bf00      	nop
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	40001400 	.word	0x40001400
 80095f4:	58024400 	.word	0x58024400

080095f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b0c2      	sub	sp, #264	; 0x108
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009602:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009606:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009608:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800960c:	2200      	movs	r2, #0
 800960e:	601a      	str	r2, [r3, #0]
 8009610:	605a      	str	r2, [r3, #4]
 8009612:	609a      	str	r2, [r3, #8]
 8009614:	60da      	str	r2, [r3, #12]
 8009616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800961c:	22c0      	movs	r2, #192	; 0xc0
 800961e:	2100      	movs	r1, #0
 8009620:	4618      	mov	r0, r3
 8009622:	f006 f873 	bl	800f70c <memset>
  if(huart->Instance==UART4)
 8009626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800962a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4acc      	ldr	r2, [pc, #816]	; (8009964 <HAL_UART_MspInit+0x36c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d146      	bne.n	80096c6 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8009638:	f04f 0202 	mov.w	r2, #2
 800963c:	f04f 0300 	mov.w	r3, #0
 8009640:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8009644:	2300      	movs	r3, #0
 8009646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800964a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800964e:	4618      	mov	r0, r3
 8009650:	f002 fa46 	bl	800bae0 <HAL_RCCEx_PeriphCLKConfig>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 800965a:	f7fe fb54 	bl	8007d06 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800965e:	4bc2      	ldr	r3, [pc, #776]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009664:	4ac0      	ldr	r2, [pc, #768]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800966a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800966e:	4bbe      	ldr	r3, [pc, #760]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800967c:	4bba      	ldr	r3, [pc, #744]	; (8009968 <HAL_UART_MspInit+0x370>)
 800967e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009682:	4ab9      	ldr	r2, [pc, #740]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009684:	f043 0301 	orr.w	r3, r3, #1
 8009688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800968c:	4bb6      	ldr	r3, [pc, #728]	; (8009968 <HAL_UART_MspInit+0x370>)
 800968e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	62bb      	str	r3, [r7, #40]	; 0x28
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800969a:	2303      	movs	r3, #3
 800969c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096a0:	2302      	movs	r3, #2
 80096a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a6:	2300      	movs	r3, #0
 80096a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096ac:	2300      	movs	r3, #0
 80096ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80096b2:	2308      	movs	r3, #8
 80096b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80096bc:	4619      	mov	r1, r3
 80096be:	48ab      	ldr	r0, [pc, #684]	; (800996c <HAL_UART_MspInit+0x374>)
 80096c0:	f000 fed8 	bl	800a474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80096c4:	e149      	b.n	800995a <HAL_UART_MspInit+0x362>
  else if(huart->Instance==UART5)
 80096c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4aa7      	ldr	r2, [pc, #668]	; (8009970 <HAL_UART_MspInit+0x378>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d147      	bne.n	8009768 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80096d8:	f04f 0202 	mov.w	r2, #2
 80096dc:	f04f 0300 	mov.w	r3, #0
 80096e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80096e4:	2300      	movs	r3, #0
 80096e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80096ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096ee:	4618      	mov	r0, r3
 80096f0:	f002 f9f6 	bl	800bae0 <HAL_RCCEx_PeriphCLKConfig>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <HAL_UART_MspInit+0x106>
      Error_Handler();
 80096fa:	f7fe fb04 	bl	8007d06 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80096fe:	4b9a      	ldr	r3, [pc, #616]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009704:	4a98      	ldr	r2, [pc, #608]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800970a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800970e:	4b96      	ldr	r3, [pc, #600]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009718:	627b      	str	r3, [r7, #36]	; 0x24
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800971c:	4b92      	ldr	r3, [pc, #584]	; (8009968 <HAL_UART_MspInit+0x370>)
 800971e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009722:	4a91      	ldr	r2, [pc, #580]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009724:	f043 0302 	orr.w	r3, r3, #2
 8009728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800972c:	4b8e      	ldr	r3, [pc, #568]	; (8009968 <HAL_UART_MspInit+0x370>)
 800972e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	623b      	str	r3, [r7, #32]
 8009738:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800973a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800973e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009742:	2302      	movs	r3, #2
 8009744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009748:	2300      	movs	r3, #0
 800974a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800974e:	2300      	movs	r3, #0
 8009750:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8009754:	230e      	movs	r3, #14
 8009756:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800975a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800975e:	4619      	mov	r1, r3
 8009760:	4884      	ldr	r0, [pc, #528]	; (8009974 <HAL_UART_MspInit+0x37c>)
 8009762:	f000 fe87 	bl	800a474 <HAL_GPIO_Init>
}
 8009766:	e0f8      	b.n	800995a <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART1)
 8009768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a80      	ldr	r2, [pc, #512]	; (8009978 <HAL_UART_MspInit+0x380>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d147      	bne.n	800980a <HAL_UART_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800977a:	f04f 0201 	mov.w	r2, #1
 800977e:	f04f 0300 	mov.w	r3, #0
 8009782:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8009786:	2300      	movs	r3, #0
 8009788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800978c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009790:	4618      	mov	r0, r3
 8009792:	f002 f9a5 	bl	800bae0 <HAL_RCCEx_PeriphCLKConfig>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 800979c:	f7fe fab3 	bl	8007d06 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80097a0:	4b71      	ldr	r3, [pc, #452]	; (8009968 <HAL_UART_MspInit+0x370>)
 80097a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097a6:	4a70      	ldr	r2, [pc, #448]	; (8009968 <HAL_UART_MspInit+0x370>)
 80097a8:	f043 0310 	orr.w	r3, r3, #16
 80097ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80097b0:	4b6d      	ldr	r3, [pc, #436]	; (8009968 <HAL_UART_MspInit+0x370>)
 80097b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097b6:	f003 0310 	and.w	r3, r3, #16
 80097ba:	61fb      	str	r3, [r7, #28]
 80097bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097be:	4b6a      	ldr	r3, [pc, #424]	; (8009968 <HAL_UART_MspInit+0x370>)
 80097c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097c4:	4a68      	ldr	r2, [pc, #416]	; (8009968 <HAL_UART_MspInit+0x370>)
 80097c6:	f043 0302 	orr.w	r3, r3, #2
 80097ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097ce:	4b66      	ldr	r3, [pc, #408]	; (8009968 <HAL_UART_MspInit+0x370>)
 80097d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	61bb      	str	r3, [r7, #24]
 80097da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80097dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80097e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097e4:	2302      	movs	r3, #2
 80097e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ea:	2300      	movs	r3, #0
 80097ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097f0:	2300      	movs	r3, #0
 80097f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80097f6:	2304      	movs	r3, #4
 80097f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009800:	4619      	mov	r1, r3
 8009802:	485c      	ldr	r0, [pc, #368]	; (8009974 <HAL_UART_MspInit+0x37c>)
 8009804:	f000 fe36 	bl	800a474 <HAL_GPIO_Init>
}
 8009808:	e0a7      	b.n	800995a <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART2)
 800980a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800980e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a59      	ldr	r2, [pc, #356]	; (800997c <HAL_UART_MspInit+0x384>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d146      	bne.n	80098aa <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800981c:	f04f 0202 	mov.w	r2, #2
 8009820:	f04f 0300 	mov.w	r3, #0
 8009824:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8009828:	2300      	movs	r3, #0
 800982a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800982e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009832:	4618      	mov	r0, r3
 8009834:	f002 f954 	bl	800bae0 <HAL_RCCEx_PeriphCLKConfig>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 800983e:	f7fe fa62 	bl	8007d06 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009842:	4b49      	ldr	r3, [pc, #292]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009848:	4a47      	ldr	r2, [pc, #284]	; (8009968 <HAL_UART_MspInit+0x370>)
 800984a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800984e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009852:	4b45      	ldr	r3, [pc, #276]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009860:	4b41      	ldr	r3, [pc, #260]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009866:	4a40      	ldr	r2, [pc, #256]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009868:	f043 0301 	orr.w	r3, r3, #1
 800986c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009870:	4b3d      	ldr	r3, [pc, #244]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	613b      	str	r3, [r7, #16]
 800987c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800987e:	230c      	movs	r3, #12
 8009880:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009884:	2302      	movs	r3, #2
 8009886:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800988a:	2300      	movs	r3, #0
 800988c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009890:	2300      	movs	r3, #0
 8009892:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009896:	2307      	movs	r3, #7
 8009898:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800989c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80098a0:	4619      	mov	r1, r3
 80098a2:	4832      	ldr	r0, [pc, #200]	; (800996c <HAL_UART_MspInit+0x374>)
 80098a4:	f000 fde6 	bl	800a474 <HAL_GPIO_Init>
}
 80098a8:	e057      	b.n	800995a <HAL_UART_MspInit+0x362>
  else if(huart->Instance==USART3)
 80098aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a32      	ldr	r2, [pc, #200]	; (8009980 <HAL_UART_MspInit+0x388>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d14e      	bne.n	800995a <HAL_UART_MspInit+0x362>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80098bc:	f04f 0202 	mov.w	r2, #2
 80098c0:	f04f 0300 	mov.w	r3, #0
 80098c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80098c8:	2300      	movs	r3, #0
 80098ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80098ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80098d2:	4618      	mov	r0, r3
 80098d4:	f002 f904 	bl	800bae0 <HAL_RCCEx_PeriphCLKConfig>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <HAL_UART_MspInit+0x2ea>
      Error_Handler();
 80098de:	f7fe fa12 	bl	8007d06 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80098e2:	4b21      	ldr	r3, [pc, #132]	; (8009968 <HAL_UART_MspInit+0x370>)
 80098e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098e8:	4a1f      	ldr	r2, [pc, #124]	; (8009968 <HAL_UART_MspInit+0x370>)
 80098ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80098f2:	4b1d      	ldr	r3, [pc, #116]	; (8009968 <HAL_UART_MspInit+0x370>)
 80098f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098fc:	60fb      	str	r3, [r7, #12]
 80098fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009900:	4b19      	ldr	r3, [pc, #100]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009906:	4a18      	ldr	r2, [pc, #96]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009908:	f043 0302 	orr.w	r3, r3, #2
 800990c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009910:	4b15      	ldr	r3, [pc, #84]	; (8009968 <HAL_UART_MspInit+0x370>)
 8009912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009916:	f003 0202 	and.w	r2, r3, #2
 800991a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009928:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800992c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800992e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009932:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009936:	2302      	movs	r3, #2
 8009938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800993c:	2300      	movs	r3, #0
 800993e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009942:	2300      	movs	r3, #0
 8009944:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009948:	2307      	movs	r3, #7
 800994a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800994e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009952:	4619      	mov	r1, r3
 8009954:	4807      	ldr	r0, [pc, #28]	; (8009974 <HAL_UART_MspInit+0x37c>)
 8009956:	f000 fd8d 	bl	800a474 <HAL_GPIO_Init>
}
 800995a:	bf00      	nop
 800995c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	40004c00 	.word	0x40004c00
 8009968:	58024400 	.word	0x58024400
 800996c:	58020000 	.word	0x58020000
 8009970:	40005000 	.word	0x40005000
 8009974:	58020400 	.word	0x58020400
 8009978:	40011000 	.word	0x40011000
 800997c:	40004400 	.word	0x40004400
 8009980:	40004800 	.word	0x40004800

08009984 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a2e      	ldr	r2, [pc, #184]	; (8009a4c <HAL_UART_MspDeInit+0xc8>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d10c      	bne.n	80099b0 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8009996:	4b2e      	ldr	r3, [pc, #184]	; (8009a50 <HAL_UART_MspDeInit+0xcc>)
 8009998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800999c:	4a2c      	ldr	r2, [pc, #176]	; (8009a50 <HAL_UART_MspDeInit+0xcc>)
 800999e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80099a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80099a6:	2103      	movs	r1, #3
 80099a8:	482a      	ldr	r0, [pc, #168]	; (8009a54 <HAL_UART_MspDeInit+0xd0>)
 80099aa:	f000 ff13 	bl	800a7d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80099ae:	e049      	b.n	8009a44 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==UART5)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a28      	ldr	r2, [pc, #160]	; (8009a58 <HAL_UART_MspDeInit+0xd4>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d10d      	bne.n	80099d6 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_UART5_CLK_DISABLE();
 80099ba:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <HAL_UART_MspDeInit+0xcc>)
 80099bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80099c0:	4a23      	ldr	r2, [pc, #140]	; (8009a50 <HAL_UART_MspDeInit+0xcc>)
 80099c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80099c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 80099ca:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80099ce:	4823      	ldr	r0, [pc, #140]	; (8009a5c <HAL_UART_MspDeInit+0xd8>)
 80099d0:	f000 ff00 	bl	800a7d4 <HAL_GPIO_DeInit>
}
 80099d4:	e036      	b.n	8009a44 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART1)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a21      	ldr	r2, [pc, #132]	; (8009a60 <HAL_UART_MspDeInit+0xdc>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10d      	bne.n	80099fc <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART1_CLK_DISABLE();
 80099e0:	4b1b      	ldr	r3, [pc, #108]	; (8009a50 <HAL_UART_MspDeInit+0xcc>)
 80099e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099e6:	4a1a      	ldr	r2, [pc, #104]	; (8009a50 <HAL_UART_MspDeInit+0xcc>)
 80099e8:	f023 0310 	bic.w	r3, r3, #16
 80099ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14|GPIO_PIN_15);
 80099f0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80099f4:	4819      	ldr	r0, [pc, #100]	; (8009a5c <HAL_UART_MspDeInit+0xd8>)
 80099f6:	f000 feed 	bl	800a7d4 <HAL_GPIO_DeInit>
}
 80099fa:	e023      	b.n	8009a44 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART2)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a18      	ldr	r2, [pc, #96]	; (8009a64 <HAL_UART_MspDeInit+0xe0>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d10c      	bne.n	8009a20 <HAL_UART_MspDeInit+0x9c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8009a06:	4b12      	ldr	r3, [pc, #72]	; (8009a50 <HAL_UART_MspDeInit+0xcc>)
 8009a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a0c:	4a10      	ldr	r2, [pc, #64]	; (8009a50 <HAL_UART_MspDeInit+0xcc>)
 8009a0e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8009a16:	210c      	movs	r1, #12
 8009a18:	480e      	ldr	r0, [pc, #56]	; (8009a54 <HAL_UART_MspDeInit+0xd0>)
 8009a1a:	f000 fedb 	bl	800a7d4 <HAL_GPIO_DeInit>
}
 8009a1e:	e011      	b.n	8009a44 <HAL_UART_MspDeInit+0xc0>
  else if(huart->Instance==USART3)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a10      	ldr	r2, [pc, #64]	; (8009a68 <HAL_UART_MspDeInit+0xe4>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d10c      	bne.n	8009a44 <HAL_UART_MspDeInit+0xc0>
    __HAL_RCC_USART3_CLK_DISABLE();
 8009a2a:	4b09      	ldr	r3, [pc, #36]	; (8009a50 <HAL_UART_MspDeInit+0xcc>)
 8009a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a30:	4a07      	ldr	r2, [pc, #28]	; (8009a50 <HAL_UART_MspDeInit+0xcc>)
 8009a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8009a3a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8009a3e:	4807      	ldr	r0, [pc, #28]	; (8009a5c <HAL_UART_MspDeInit+0xd8>)
 8009a40:	f000 fec8 	bl	800a7d4 <HAL_GPIO_DeInit>
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	40004c00 	.word	0x40004c00
 8009a50:	58024400 	.word	0x58024400
 8009a54:	58020000 	.word	0x58020000
 8009a58:	40005000 	.word	0x40005000
 8009a5c:	58020400 	.word	0x58020400
 8009a60:	40011000 	.word	0x40011000
 8009a64:	40004400 	.word	0x40004400
 8009a68:	40004800 	.word	0x40004800

08009a6c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b0b8      	sub	sp, #224	; 0xe0
 8009a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8009a72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009a76:	2200      	movs	r2, #0
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	605a      	str	r2, [r3, #4]
 8009a7c:	609a      	str	r2, [r3, #8]
 8009a7e:	60da      	str	r2, [r3, #12]
 8009a80:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8009a82:	4b51      	ldr	r3, [pc, #324]	; (8009bc8 <HAL_FMC_MspInit+0x15c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f040 8099 	bne.w	8009bbe <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8009a8c:	4b4e      	ldr	r3, [pc, #312]	; (8009bc8 <HAL_FMC_MspInit+0x15c>)
 8009a8e:	2201      	movs	r2, #1
 8009a90:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009a92:	f107 0308 	add.w	r3, r7, #8
 8009a96:	22c0      	movs	r2, #192	; 0xc0
 8009a98:	2100      	movs	r1, #0
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f005 fe36 	bl	800f70c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8009aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009aa4:	f04f 0300 	mov.w	r3, #0
 8009aa8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009ab0:	f107 0308 	add.w	r3, r7, #8
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f002 f813 	bl	800bae0 <HAL_RCCEx_PeriphCLKConfig>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8009ac0:	f7fe f921 	bl	8007d06 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009ac4:	4b41      	ldr	r3, [pc, #260]	; (8009bcc <HAL_FMC_MspInit+0x160>)
 8009ac6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009aca:	4a40      	ldr	r2, [pc, #256]	; (8009bcc <HAL_FMC_MspInit+0x160>)
 8009acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ad0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8009ad4:	4b3d      	ldr	r3, [pc, #244]	; (8009bcc <HAL_FMC_MspInit+0x160>)
 8009ad6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ade:	607b      	str	r3, [r7, #4]
 8009ae0:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009ae2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8009ae6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aea:	2302      	movs	r3, #2
 8009aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009af6:	2303      	movs	r3, #3
 8009af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009afc:	230c      	movs	r3, #12
 8009afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009b02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009b06:	4619      	mov	r1, r3
 8009b08:	4831      	ldr	r0, [pc, #196]	; (8009bd0 <HAL_FMC_MspInit+0x164>)
 8009b0a:	f000 fcb3 	bl	800a474 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b14:	2302      	movs	r3, #2
 8009b16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b20:	2303      	movs	r3, #3
 8009b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009b26:	230c      	movs	r3, #12
 8009b28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009b2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009b30:	4619      	mov	r1, r3
 8009b32:	4828      	ldr	r0, [pc, #160]	; (8009bd4 <HAL_FMC_MspInit+0x168>)
 8009b34:	f000 fc9e 	bl	800a474 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8009b38:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8009b3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b40:	2302      	movs	r3, #2
 8009b42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009b52:	230c      	movs	r3, #12
 8009b54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009b58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	481e      	ldr	r0, [pc, #120]	; (8009bd8 <HAL_FMC_MspInit+0x16c>)
 8009b60:	f000 fc88 	bl	800a474 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8009b64:	f24c 0333 	movw	r3, #49203	; 0xc033
 8009b68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b72:	2300      	movs	r3, #0
 8009b74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009b7e:	230c      	movs	r3, #12
 8009b80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009b84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009b88:	4619      	mov	r1, r3
 8009b8a:	4814      	ldr	r0, [pc, #80]	; (8009bdc <HAL_FMC_MspInit+0x170>)
 8009b8c:	f000 fc72 	bl	800a474 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8009b90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b98:	2302      	movs	r3, #2
 8009b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8009baa:	2309      	movs	r3, #9
 8009bac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009bb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	480a      	ldr	r0, [pc, #40]	; (8009be0 <HAL_FMC_MspInit+0x174>)
 8009bb8:	f000 fc5c 	bl	800a474 <HAL_GPIO_Init>
 8009bbc:	e000      	b.n	8009bc0 <HAL_FMC_MspInit+0x154>
    return;
 8009bbe:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8009bc0:	37e0      	adds	r7, #224	; 0xe0
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	24001e74 	.word	0x24001e74
 8009bcc:	58024400 	.word	0x58024400
 8009bd0:	58021400 	.word	0x58021400
 8009bd4:	58021800 	.word	0x58021800
 8009bd8:	58021000 	.word	0x58021000
 8009bdc:	58020c00 	.word	0x58020c00
 8009be0:	58020800 	.word	0x58020800

08009be4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8009bec:	f7ff ff3e 	bl	8009a6c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8009bf0:	bf00      	nop
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009bfc:	e7fe      	b.n	8009bfc <NMI_Handler+0x4>

08009bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009c02:	e7fe      	b.n	8009c02 <HardFault_Handler+0x4>

08009c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009c04:	b480      	push	{r7}
 8009c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009c08:	e7fe      	b.n	8009c08 <MemManage_Handler+0x4>

08009c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009c0e:	e7fe      	b.n	8009c0e <BusFault_Handler+0x4>

08009c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009c14:	e7fe      	b.n	8009c14 <UsageFault_Handler+0x4>

08009c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009c16:	b480      	push	{r7}
 8009c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009c1a:	bf00      	nop
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009c28:	bf00      	nop
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009c32:	b480      	push	{r7}
 8009c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009c36:	bf00      	nop
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <SysTick_Handler>:
  */

BYTE ch =  0;

void SysTick_Handler(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009c44:	f000 fa3a 	bl	800a0bc <HAL_IncTick>

  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(bDip_SW_Flag == TRUE)			//The hal tick works immediately after SystemClock_Config is enabled.
 8009c48:	4b28      	ldr	r3, [pc, #160]	; (8009cec <SysTick_Handler+0xac>)
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d04a      	beq.n	8009ce6 <SysTick_Handler+0xa6>
	{									// The dipswitch should work after the FMC initialization.		pms
		gbDipSW = dip_sw();				//(BYTE)GPIO_ByteRead(GPIO1, GPIO_LSB)^0xFF;
 8009c50:	f7fe f826 	bl	8007ca0 <dip_sw>
 8009c54:	4603      	mov	r3, r0
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	4b25      	ldr	r3, [pc, #148]	; (8009cf0 <SysTick_Handler+0xb0>)
 8009c5a:	701a      	strb	r2, [r3, #0]


		if (gbDipSW & MASK_SELF_TEST)					//Self 테스트 모드		temp
 8009c5c:	4b24      	ldr	r3, [pc, #144]	; (8009cf0 <SysTick_Handler+0xb0>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	f003 0376 	and.w	r3, r3, #118	; 0x76
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d004      	beq.n	8009c72 <SysTick_Handler+0x32>
		{
			TestAging();
 8009c68:	f7fb fcac 	bl	80055c4 <TestAging>
			bDip_SW_Init = TRUE;
 8009c6c:	4b21      	ldr	r3, [pc, #132]	; (8009cf4 <SysTick_Handler+0xb4>)
 8009c6e:	2201      	movs	r2, #1
 8009c70:	701a      	strb	r2, [r3, #0]
		}

		if (gbDipSW & MASK_JIG_TEST)					//cmd 테스트 모드 temp
 8009c72:	4b1f      	ldr	r3, [pc, #124]	; (8009cf0 <SysTick_Handler+0xb0>)
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00f      	beq.n	8009c9e <SysTick_Handler+0x5e>
		{

			while(IUart_RecvByte_check(COM1,&ch))
 8009c7e:	e004      	b.n	8009c8a <SysTick_Handler+0x4a>
		    	  CMD_Test(ch);
 8009c80:	4b1d      	ldr	r3, [pc, #116]	; (8009cf8 <SysTick_Handler+0xb8>)
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fb ff3f 	bl	8005b08 <CMD_Test>
			while(IUart_RecvByte_check(COM1,&ch))
 8009c8a:	491b      	ldr	r1, [pc, #108]	; (8009cf8 <SysTick_Handler+0xb8>)
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	f7fc fdff 	bl	8006890 <IUart_RecvByte_check>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1f3      	bne.n	8009c80 <SysTick_Handler+0x40>
			bDip_SW_Init = TRUE;
 8009c98:	4b16      	ldr	r3, [pc, #88]	; (8009cf4 <SysTick_Handler+0xb4>)
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	701a      	strb	r2, [r3, #0]
		}

		if((gbDipSW == MASK_NOMAL_MODE) && (bDip_SW_Init == TRUE))			//Dipswitch 0x00 and IO Initialization Mode
 8009c9e:	4b14      	ldr	r3, [pc, #80]	; (8009cf0 <SysTick_Handler+0xb0>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d108      	bne.n	8009cb8 <SysTick_Handler+0x78>
 8009ca6:	4b13      	ldr	r3, [pc, #76]	; (8009cf4 <SysTick_Handler+0xb4>)
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d004      	beq.n	8009cb8 <SysTick_Handler+0x78>
		{
			bDip_SW_Init = FALSE;
 8009cae:	4b11      	ldr	r3, [pc, #68]	; (8009cf4 <SysTick_Handler+0xb4>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	701a      	strb	r2, [r3, #0]
			Write_IO_init();
 8009cb4:	f7fb fbcc 	bl	8005450 <Write_IO_init>
		}


		if (!(gbDipSW & MASK_JIG_TEST) && (gbDipSW == gbOldDipSW))
 8009cb8:	4b0d      	ldr	r3, [pc, #52]	; (8009cf0 <SysTick_Handler+0xb0>)
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d110      	bne.n	8009ce6 <SysTick_Handler+0xa6>
 8009cc4:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <SysTick_Handler+0xb0>)
 8009cc6:	781a      	ldrb	r2, [r3, #0]
 8009cc8:	4b0c      	ldr	r3, [pc, #48]	; (8009cfc <SysTick_Handler+0xbc>)
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d10a      	bne.n	8009ce6 <SysTick_Handler+0xa6>
		{
			gfMainBarrierRunning = TRUE;
 8009cd0:	4b0b      	ldr	r3, [pc, #44]	; (8009d00 <SysTick_Handler+0xc0>)
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	701a      	strb	r2, [r3, #0]
			gfSubBarrierRunning = TRUE;
 8009cd6:	4b0b      	ldr	r3, [pc, #44]	; (8009d04 <SysTick_Handler+0xc4>)
 8009cd8:	2201      	movs	r2, #1
 8009cda:	701a      	strb	r2, [r3, #0]
      gbBarrierType = BARRIER_SWING;
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <SysTick_Handler+0xc8>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
      PassageProcessForSwing();
 8009ce2:	f7fb f8cb 	bl	8004e7c <PassageProcessForSwing>
		}
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8009ce6:	bf00      	nop
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	24001e70 	.word	0x24001e70
 8009cf0:	24001e79 	.word	0x24001e79
 8009cf4:	24001e78 	.word	0x24001e78
 8009cf8:	24001e7b 	.word	0x24001e7b
 8009cfc:	24001e7a 	.word	0x24001e7a
 8009d00:	240004ec 	.word	0x240004ec
 8009d04:	240004ed 	.word	0x240004ed
 8009d08:	2400043a 	.word	0x2400043a

08009d0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009d10:	4802      	ldr	r0, [pc, #8]	; (8009d1c <TIM7_IRQHandler+0x10>)
 8009d12:	f003 ff71 	bl	800dbf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009d16:	bf00      	nop
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	24001aa8 	.word	0x24001aa8

08009d20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	e00a      	b.n	8009d48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009d32:	f7fd f97b 	bl	800702c <__io_getchar>
 8009d36:	4601      	mov	r1, r0
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	60ba      	str	r2, [r7, #8]
 8009d3e:	b2ca      	uxtb	r2, r1
 8009d40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	3301      	adds	r3, #1
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	dbf0      	blt.n	8009d32 <_read+0x12>
  }

  return len;
 8009d50:	687b      	ldr	r3, [r7, #4]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b086      	sub	sp, #24
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d66:	2300      	movs	r3, #0
 8009d68:	617b      	str	r3, [r7, #20]
 8009d6a:	e009      	b.n	8009d80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	60ba      	str	r2, [r7, #8]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fd f944 	bl	8007002 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	617b      	str	r3, [r7, #20]
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	dbf1      	blt.n	8009d6c <_write+0x12>
  }
  return len;
 8009d88:	687b      	ldr	r3, [r7, #4]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <_close>:

int _close(int file)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b083      	sub	sp, #12
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b083      	sub	sp, #12
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009dba:	605a      	str	r2, [r3, #4]
  return 0;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <_isatty>:

int _isatty(int file)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009dd2:	2301      	movs	r3, #1
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
	...

08009dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009e04:	4a14      	ldr	r2, [pc, #80]	; (8009e58 <_sbrk+0x5c>)
 8009e06:	4b15      	ldr	r3, [pc, #84]	; (8009e5c <_sbrk+0x60>)
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009e10:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <_sbrk+0x64>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d102      	bne.n	8009e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009e18:	4b11      	ldr	r3, [pc, #68]	; (8009e60 <_sbrk+0x64>)
 8009e1a:	4a12      	ldr	r2, [pc, #72]	; (8009e64 <_sbrk+0x68>)
 8009e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009e1e:	4b10      	ldr	r3, [pc, #64]	; (8009e60 <_sbrk+0x64>)
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4413      	add	r3, r2
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d207      	bcs.n	8009e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009e2c:	f005 fc26 	bl	800f67c <__errno>
 8009e30:	4603      	mov	r3, r0
 8009e32:	220c      	movs	r2, #12
 8009e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009e36:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3a:	e009      	b.n	8009e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009e3c:	4b08      	ldr	r3, [pc, #32]	; (8009e60 <_sbrk+0x64>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009e42:	4b07      	ldr	r3, [pc, #28]	; (8009e60 <_sbrk+0x64>)
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4413      	add	r3, r2
 8009e4a:	4a05      	ldr	r2, [pc, #20]	; (8009e60 <_sbrk+0x64>)
 8009e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3718      	adds	r7, #24
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	24080000 	.word	0x24080000
 8009e5c:	00000400 	.word	0x00000400
 8009e60:	24001e7c 	.word	0x24001e7c
 8009e64:	24001e98 	.word	0x24001e98

08009e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009e6c:	4b39      	ldr	r3, [pc, #228]	; (8009f54 <SystemInit+0xec>)
 8009e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e72:	4a38      	ldr	r2, [pc, #224]	; (8009f54 <SystemInit+0xec>)
 8009e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009e7c:	4b36      	ldr	r3, [pc, #216]	; (8009f58 <SystemInit+0xf0>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 030f 	and.w	r3, r3, #15
 8009e84:	2b06      	cmp	r3, #6
 8009e86:	d807      	bhi.n	8009e98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009e88:	4b33      	ldr	r3, [pc, #204]	; (8009f58 <SystemInit+0xf0>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f023 030f 	bic.w	r3, r3, #15
 8009e90:	4a31      	ldr	r2, [pc, #196]	; (8009f58 <SystemInit+0xf0>)
 8009e92:	f043 0307 	orr.w	r3, r3, #7
 8009e96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009e98:	4b30      	ldr	r3, [pc, #192]	; (8009f5c <SystemInit+0xf4>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a2f      	ldr	r2, [pc, #188]	; (8009f5c <SystemInit+0xf4>)
 8009e9e:	f043 0301 	orr.w	r3, r3, #1
 8009ea2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009ea4:	4b2d      	ldr	r3, [pc, #180]	; (8009f5c <SystemInit+0xf4>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009eaa:	4b2c      	ldr	r3, [pc, #176]	; (8009f5c <SystemInit+0xf4>)
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	492b      	ldr	r1, [pc, #172]	; (8009f5c <SystemInit+0xf4>)
 8009eb0:	4b2b      	ldr	r3, [pc, #172]	; (8009f60 <SystemInit+0xf8>)
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009eb6:	4b28      	ldr	r3, [pc, #160]	; (8009f58 <SystemInit+0xf0>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0308 	and.w	r3, r3, #8
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d007      	beq.n	8009ed2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009ec2:	4b25      	ldr	r3, [pc, #148]	; (8009f58 <SystemInit+0xf0>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f023 030f 	bic.w	r3, r3, #15
 8009eca:	4a23      	ldr	r2, [pc, #140]	; (8009f58 <SystemInit+0xf0>)
 8009ecc:	f043 0307 	orr.w	r3, r3, #7
 8009ed0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8009ed2:	4b22      	ldr	r3, [pc, #136]	; (8009f5c <SystemInit+0xf4>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8009ed8:	4b20      	ldr	r3, [pc, #128]	; (8009f5c <SystemInit+0xf4>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8009ede:	4b1f      	ldr	r3, [pc, #124]	; (8009f5c <SystemInit+0xf4>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8009ee4:	4b1d      	ldr	r3, [pc, #116]	; (8009f5c <SystemInit+0xf4>)
 8009ee6:	4a1f      	ldr	r2, [pc, #124]	; (8009f64 <SystemInit+0xfc>)
 8009ee8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8009eea:	4b1c      	ldr	r3, [pc, #112]	; (8009f5c <SystemInit+0xf4>)
 8009eec:	4a1e      	ldr	r2, [pc, #120]	; (8009f68 <SystemInit+0x100>)
 8009eee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009ef0:	4b1a      	ldr	r3, [pc, #104]	; (8009f5c <SystemInit+0xf4>)
 8009ef2:	4a1e      	ldr	r2, [pc, #120]	; (8009f6c <SystemInit+0x104>)
 8009ef4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009ef6:	4b19      	ldr	r3, [pc, #100]	; (8009f5c <SystemInit+0xf4>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009efc:	4b17      	ldr	r3, [pc, #92]	; (8009f5c <SystemInit+0xf4>)
 8009efe:	4a1b      	ldr	r2, [pc, #108]	; (8009f6c <SystemInit+0x104>)
 8009f00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009f02:	4b16      	ldr	r3, [pc, #88]	; (8009f5c <SystemInit+0xf4>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009f08:	4b14      	ldr	r3, [pc, #80]	; (8009f5c <SystemInit+0xf4>)
 8009f0a:	4a18      	ldr	r2, [pc, #96]	; (8009f6c <SystemInit+0x104>)
 8009f0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009f0e:	4b13      	ldr	r3, [pc, #76]	; (8009f5c <SystemInit+0xf4>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009f14:	4b11      	ldr	r3, [pc, #68]	; (8009f5c <SystemInit+0xf4>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a10      	ldr	r2, [pc, #64]	; (8009f5c <SystemInit+0xf4>)
 8009f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009f20:	4b0e      	ldr	r3, [pc, #56]	; (8009f5c <SystemInit+0xf4>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009f26:	4b12      	ldr	r3, [pc, #72]	; (8009f70 <SystemInit+0x108>)
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	4b12      	ldr	r3, [pc, #72]	; (8009f74 <SystemInit+0x10c>)
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f32:	d202      	bcs.n	8009f3a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009f34:	4b10      	ldr	r3, [pc, #64]	; (8009f78 <SystemInit+0x110>)
 8009f36:	2201      	movs	r2, #1
 8009f38:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8009f3a:	4b10      	ldr	r3, [pc, #64]	; (8009f7c <SystemInit+0x114>)
 8009f3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009f40:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8009f42:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <SystemInit+0xec>)
 8009f44:	4a0e      	ldr	r2, [pc, #56]	; (8009f80 <SystemInit+0x118>)
 8009f46:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8009f48:	bf00      	nop
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	e000ed00 	.word	0xe000ed00
 8009f58:	52002000 	.word	0x52002000
 8009f5c:	58024400 	.word	0x58024400
 8009f60:	eaf6ed7f 	.word	0xeaf6ed7f
 8009f64:	02020200 	.word	0x02020200
 8009f68:	01ff0000 	.word	0x01ff0000
 8009f6c:	01010280 	.word	0x01010280
 8009f70:	5c001000 	.word	0x5c001000
 8009f74:	ffff0000 	.word	0xffff0000
 8009f78:	51008108 	.word	0x51008108
 8009f7c:	52004000 	.word	0x52004000
 8009f80:	08020000 	.word	0x08020000

08009f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009fbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009f88:	f7ff ff6e 	bl	8009e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009f8c:	480c      	ldr	r0, [pc, #48]	; (8009fc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009f8e:	490d      	ldr	r1, [pc, #52]	; (8009fc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009f90:	4a0d      	ldr	r2, [pc, #52]	; (8009fc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009f94:	e002      	b.n	8009f9c <LoopCopyDataInit>

08009f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009f9a:	3304      	adds	r3, #4

08009f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009fa0:	d3f9      	bcc.n	8009f96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009fa2:	4a0a      	ldr	r2, [pc, #40]	; (8009fcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009fa4:	4c0a      	ldr	r4, [pc, #40]	; (8009fd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009fa8:	e001      	b.n	8009fae <LoopFillZerobss>

08009faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009fac:	3204      	adds	r2, #4

08009fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009fb0:	d3fb      	bcc.n	8009faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009fb2:	f005 fb69 	bl	800f688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009fb6:	f7fd fdf5 	bl	8007ba4 <main>
  bx  lr
 8009fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009fbc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8009fc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009fc4:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 8009fc8:	080118f0 	.word	0x080118f0
  ldr r2, =_sbss
 8009fcc:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 8009fd0:	24001e98 	.word	0x24001e98

08009fd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009fd4:	e7fe      	b.n	8009fd4 <ADC3_IRQHandler>
	...

08009fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009fde:	2003      	movs	r0, #3
 8009fe0:	f000 f98c 	bl	800a2fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009fe4:	f001 fba6 	bl	800b734 <HAL_RCC_GetSysClockFreq>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	4b15      	ldr	r3, [pc, #84]	; (800a040 <HAL_Init+0x68>)
 8009fec:	699b      	ldr	r3, [r3, #24]
 8009fee:	0a1b      	lsrs	r3, r3, #8
 8009ff0:	f003 030f 	and.w	r3, r3, #15
 8009ff4:	4913      	ldr	r1, [pc, #76]	; (800a044 <HAL_Init+0x6c>)
 8009ff6:	5ccb      	ldrb	r3, [r1, r3]
 8009ff8:	f003 031f 	and.w	r3, r3, #31
 8009ffc:	fa22 f303 	lsr.w	r3, r2, r3
 800a000:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a002:	4b0f      	ldr	r3, [pc, #60]	; (800a040 <HAL_Init+0x68>)
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	f003 030f 	and.w	r3, r3, #15
 800a00a:	4a0e      	ldr	r2, [pc, #56]	; (800a044 <HAL_Init+0x6c>)
 800a00c:	5cd3      	ldrb	r3, [r2, r3]
 800a00e:	f003 031f 	and.w	r3, r3, #31
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	fa22 f303 	lsr.w	r3, r2, r3
 800a018:	4a0b      	ldr	r2, [pc, #44]	; (800a048 <HAL_Init+0x70>)
 800a01a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a01c:	4a0b      	ldr	r2, [pc, #44]	; (800a04c <HAL_Init+0x74>)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a022:	200f      	movs	r0, #15
 800a024:	f000 f814 	bl	800a050 <HAL_InitTick>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e002      	b.n	800a038 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800a032:	f7ff fa27 	bl	8009484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	58024400 	.word	0x58024400
 800a044:	08011810 	.word	0x08011810
 800a048:	24000044 	.word	0x24000044
 800a04c:	24000040 	.word	0x24000040

0800a050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800a058:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <HAL_InitTick+0x60>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	e021      	b.n	800a0a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a064:	4b13      	ldr	r3, [pc, #76]	; (800a0b4 <HAL_InitTick+0x64>)
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	4b11      	ldr	r3, [pc, #68]	; (800a0b0 <HAL_InitTick+0x60>)
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	4619      	mov	r1, r3
 800a06e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a072:	fbb3 f3f1 	udiv	r3, r3, r1
 800a076:	fbb2 f3f3 	udiv	r3, r2, r3
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 f971 	bl	800a362 <HAL_SYSTICK_Config>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e00e      	b.n	800a0a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b0f      	cmp	r3, #15
 800a08e:	d80a      	bhi.n	800a0a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a090:	2200      	movs	r2, #0
 800a092:	6879      	ldr	r1, [r7, #4]
 800a094:	f04f 30ff 	mov.w	r0, #4294967295
 800a098:	f000 f93b 	bl	800a312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a09c:	4a06      	ldr	r2, [pc, #24]	; (800a0b8 <HAL_InitTick+0x68>)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	e000      	b.n	800a0a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	2400004c 	.word	0x2400004c
 800a0b4:	24000040 	.word	0x24000040
 800a0b8:	24000048 	.word	0x24000048

0800a0bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a0c0:	4b06      	ldr	r3, [pc, #24]	; (800a0dc <HAL_IncTick+0x20>)
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	4b06      	ldr	r3, [pc, #24]	; (800a0e0 <HAL_IncTick+0x24>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	4a04      	ldr	r2, [pc, #16]	; (800a0e0 <HAL_IncTick+0x24>)
 800a0ce:	6013      	str	r3, [r2, #0]
}
 800a0d0:	bf00      	nop
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	2400004c 	.word	0x2400004c
 800a0e0:	24001e80 	.word	0x24001e80

0800a0e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	af00      	add	r7, sp, #0
  return uwTick;
 800a0e8:	4b03      	ldr	r3, [pc, #12]	; (800a0f8 <HAL_GetTick+0x14>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	24001e80 	.word	0x24001e80

0800a0fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a104:	f7ff ffee 	bl	800a0e4 <HAL_GetTick>
 800a108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a114:	d005      	beq.n	800a122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a116:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <HAL_Delay+0x44>)
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	4413      	add	r3, r2
 800a120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a122:	bf00      	nop
 800a124:	f7ff ffde 	bl	800a0e4 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	429a      	cmp	r2, r3
 800a132:	d8f7      	bhi.n	800a124 <HAL_Delay+0x28>
  {
  }
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	2400004c 	.word	0x2400004c

0800a144 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800a144:	b480      	push	{r7}
 800a146:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800a148:	4b03      	ldr	r3, [pc, #12]	; (800a158 <HAL_GetREVID+0x14>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	0c1b      	lsrs	r3, r3, #16
}
 800a14e:	4618      	mov	r0, r3
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	5c001000 	.word	0x5c001000

0800a15c <__NVIC_SetPriorityGrouping>:
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a16c:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <__NVIC_SetPriorityGrouping+0x40>)
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a178:	4013      	ands	r3, r2
 800a17a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a184:	4b06      	ldr	r3, [pc, #24]	; (800a1a0 <__NVIC_SetPriorityGrouping+0x44>)
 800a186:	4313      	orrs	r3, r2
 800a188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a18a:	4a04      	ldr	r2, [pc, #16]	; (800a19c <__NVIC_SetPriorityGrouping+0x40>)
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	60d3      	str	r3, [r2, #12]
}
 800a190:	bf00      	nop
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	e000ed00 	.word	0xe000ed00
 800a1a0:	05fa0000 	.word	0x05fa0000

0800a1a4 <__NVIC_GetPriorityGrouping>:
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a1a8:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <__NVIC_GetPriorityGrouping+0x18>)
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	0a1b      	lsrs	r3, r3, #8
 800a1ae:	f003 0307 	and.w	r3, r3, #7
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	e000ed00 	.word	0xe000ed00

0800a1c0 <__NVIC_EnableIRQ>:
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a1ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	db0b      	blt.n	800a1ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a1d2:	88fb      	ldrh	r3, [r7, #6]
 800a1d4:	f003 021f 	and.w	r2, r3, #31
 800a1d8:	4907      	ldr	r1, [pc, #28]	; (800a1f8 <__NVIC_EnableIRQ+0x38>)
 800a1da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1de:	095b      	lsrs	r3, r3, #5
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	fa00 f202 	lsl.w	r2, r0, r2
 800a1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a1ea:	bf00      	nop
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	e000e100 	.word	0xe000e100

0800a1fc <__NVIC_SetPriority>:
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	6039      	str	r1, [r7, #0]
 800a206:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	db0a      	blt.n	800a226 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	b2da      	uxtb	r2, r3
 800a214:	490c      	ldr	r1, [pc, #48]	; (800a248 <__NVIC_SetPriority+0x4c>)
 800a216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a21a:	0112      	lsls	r2, r2, #4
 800a21c:	b2d2      	uxtb	r2, r2
 800a21e:	440b      	add	r3, r1
 800a220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a224:	e00a      	b.n	800a23c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	4908      	ldr	r1, [pc, #32]	; (800a24c <__NVIC_SetPriority+0x50>)
 800a22c:	88fb      	ldrh	r3, [r7, #6]
 800a22e:	f003 030f 	and.w	r3, r3, #15
 800a232:	3b04      	subs	r3, #4
 800a234:	0112      	lsls	r2, r2, #4
 800a236:	b2d2      	uxtb	r2, r2
 800a238:	440b      	add	r3, r1
 800a23a:	761a      	strb	r2, [r3, #24]
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	e000e100 	.word	0xe000e100
 800a24c:	e000ed00 	.word	0xe000ed00

0800a250 <NVIC_EncodePriority>:
{
 800a250:	b480      	push	{r7}
 800a252:	b089      	sub	sp, #36	; 0x24
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f003 0307 	and.w	r3, r3, #7
 800a262:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	f1c3 0307 	rsb	r3, r3, #7
 800a26a:	2b04      	cmp	r3, #4
 800a26c:	bf28      	it	cs
 800a26e:	2304      	movcs	r3, #4
 800a270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	3304      	adds	r3, #4
 800a276:	2b06      	cmp	r3, #6
 800a278:	d902      	bls.n	800a280 <NVIC_EncodePriority+0x30>
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	3b03      	subs	r3, #3
 800a27e:	e000      	b.n	800a282 <NVIC_EncodePriority+0x32>
 800a280:	2300      	movs	r3, #0
 800a282:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a284:	f04f 32ff 	mov.w	r2, #4294967295
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	fa02 f303 	lsl.w	r3, r2, r3
 800a28e:	43da      	mvns	r2, r3
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	401a      	ands	r2, r3
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a298:	f04f 31ff 	mov.w	r1, #4294967295
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a2:	43d9      	mvns	r1, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2a8:	4313      	orrs	r3, r2
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3724      	adds	r7, #36	; 0x24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
	...

0800a2b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2c8:	d301      	bcc.n	800a2ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e00f      	b.n	800a2ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a2ce:	4a0a      	ldr	r2, [pc, #40]	; (800a2f8 <SysTick_Config+0x40>)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a2d6:	210f      	movs	r1, #15
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2dc:	f7ff ff8e 	bl	800a1fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a2e0:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <SysTick_Config+0x40>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a2e6:	4b04      	ldr	r3, [pc, #16]	; (800a2f8 <SysTick_Config+0x40>)
 800a2e8:	2207      	movs	r2, #7
 800a2ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	e000e010 	.word	0xe000e010

0800a2fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7ff ff29 	bl	800a15c <__NVIC_SetPriorityGrouping>
}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b086      	sub	sp, #24
 800a316:	af00      	add	r7, sp, #0
 800a318:	4603      	mov	r3, r0
 800a31a:	60b9      	str	r1, [r7, #8]
 800a31c:	607a      	str	r2, [r7, #4]
 800a31e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a320:	f7ff ff40 	bl	800a1a4 <__NVIC_GetPriorityGrouping>
 800a324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	6978      	ldr	r0, [r7, #20]
 800a32c:	f7ff ff90 	bl	800a250 <NVIC_EncodePriority>
 800a330:	4602      	mov	r2, r0
 800a332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a336:	4611      	mov	r1, r2
 800a338:	4618      	mov	r0, r3
 800a33a:	f7ff ff5f 	bl	800a1fc <__NVIC_SetPriority>
}
 800a33e:	bf00      	nop
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	4603      	mov	r3, r0
 800a34e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff ff33 	bl	800a1c0 <__NVIC_EnableIRQ>
}
 800a35a:	bf00      	nop
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7ff ffa4 	bl	800a2b8 <SysTick_Config>
 800a370:	4603      	mov	r3, r0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800a37c:	b480      	push	{r7}
 800a37e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800a380:	f3bf 8f5f 	dmb	sy
}
 800a384:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a386:	4b07      	ldr	r3, [pc, #28]	; (800a3a4 <HAL_MPU_Disable+0x28>)
 800a388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38a:	4a06      	ldr	r2, [pc, #24]	; (800a3a4 <HAL_MPU_Disable+0x28>)
 800a38c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a390:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a392:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <HAL_MPU_Disable+0x2c>)
 800a394:	2200      	movs	r2, #0
 800a396:	605a      	str	r2, [r3, #4]
}
 800a398:	bf00      	nop
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	e000ed00 	.word	0xe000ed00
 800a3a8:	e000ed90 	.word	0xe000ed90

0800a3ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a3b4:	4a0b      	ldr	r2, [pc, #44]	; (800a3e4 <HAL_MPU_Enable+0x38>)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f043 0301 	orr.w	r3, r3, #1
 800a3bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a3be:	4b0a      	ldr	r3, [pc, #40]	; (800a3e8 <HAL_MPU_Enable+0x3c>)
 800a3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c2:	4a09      	ldr	r2, [pc, #36]	; (800a3e8 <HAL_MPU_Enable+0x3c>)
 800a3c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3c8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a3ca:	f3bf 8f4f 	dsb	sy
}
 800a3ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a3d0:	f3bf 8f6f 	isb	sy
}
 800a3d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	e000ed90 	.word	0xe000ed90
 800a3e8:	e000ed00 	.word	0xe000ed00

0800a3ec <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	785a      	ldrb	r2, [r3, #1]
 800a3f8:	4b1d      	ldr	r3, [pc, #116]	; (800a470 <HAL_MPU_ConfigRegion+0x84>)
 800a3fa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d029      	beq.n	800a458 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800a404:	4a1a      	ldr	r2, [pc, #104]	; (800a470 <HAL_MPU_ConfigRegion+0x84>)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	7b1b      	ldrb	r3, [r3, #12]
 800a410:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	7adb      	ldrb	r3, [r3, #11]
 800a416:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a418:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	7a9b      	ldrb	r3, [r3, #10]
 800a41e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a420:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	7b5b      	ldrb	r3, [r3, #13]
 800a426:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a428:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	7b9b      	ldrb	r3, [r3, #14]
 800a42e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a430:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	7bdb      	ldrb	r3, [r3, #15]
 800a436:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a438:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	7a5b      	ldrb	r3, [r3, #9]
 800a43e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a440:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	7a1b      	ldrb	r3, [r3, #8]
 800a446:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a448:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	7812      	ldrb	r2, [r2, #0]
 800a44e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a450:	4a07      	ldr	r2, [pc, #28]	; (800a470 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a452:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a454:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800a456:	e005      	b.n	800a464 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800a458:	4b05      	ldr	r3, [pc, #20]	; (800a470 <HAL_MPU_ConfigRegion+0x84>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800a45e:	4b04      	ldr	r3, [pc, #16]	; (800a470 <HAL_MPU_ConfigRegion+0x84>)
 800a460:	2200      	movs	r2, #0
 800a462:	611a      	str	r2, [r3, #16]
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	e000ed90 	.word	0xe000ed90

0800a474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a474:	b480      	push	{r7}
 800a476:	b089      	sub	sp, #36	; 0x24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a47e:	2300      	movs	r3, #0
 800a480:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a482:	4b89      	ldr	r3, [pc, #548]	; (800a6a8 <HAL_GPIO_Init+0x234>)
 800a484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a486:	e194      	b.n	800a7b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	2101      	movs	r1, #1
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	fa01 f303 	lsl.w	r3, r1, r3
 800a494:	4013      	ands	r3, r2
 800a496:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 8186 	beq.w	800a7ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f003 0303 	and.w	r3, r3, #3
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d005      	beq.n	800a4b8 <HAL_GPIO_Init+0x44>
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	f003 0303 	and.w	r3, r3, #3
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d130      	bne.n	800a51a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c8:	43db      	mvns	r3, r3
 800a4ca:	69ba      	ldr	r2, [r7, #24]
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	005b      	lsls	r3, r3, #1
 800a4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4dc:	69ba      	ldr	r2, [r7, #24]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	69ba      	ldr	r2, [r7, #24]
 800a4e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f6:	43db      	mvns	r3, r3
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	091b      	lsrs	r3, r3, #4
 800a504:	f003 0201 	and.w	r2, r3, #1
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	fa02 f303 	lsl.w	r3, r2, r3
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	4313      	orrs	r3, r2
 800a512:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f003 0303 	and.w	r3, r3, #3
 800a522:	2b03      	cmp	r3, #3
 800a524:	d017      	beq.n	800a556 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	2203      	movs	r2, #3
 800a532:	fa02 f303 	lsl.w	r3, r2, r3
 800a536:	43db      	mvns	r3, r3
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	4013      	ands	r3, r2
 800a53c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	689a      	ldr	r2, [r3, #8]
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	005b      	lsls	r3, r3, #1
 800a546:	fa02 f303 	lsl.w	r3, r2, r3
 800a54a:	69ba      	ldr	r2, [r7, #24]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	69ba      	ldr	r2, [r7, #24]
 800a554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f003 0303 	and.w	r3, r3, #3
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d123      	bne.n	800a5aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	08da      	lsrs	r2, r3, #3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	3208      	adds	r2, #8
 800a56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	220f      	movs	r2, #15
 800a57a:	fa02 f303 	lsl.w	r3, r2, r3
 800a57e:	43db      	mvns	r3, r3
 800a580:	69ba      	ldr	r2, [r7, #24]
 800a582:	4013      	ands	r3, r2
 800a584:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	691a      	ldr	r2, [r3, #16]
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	f003 0307 	and.w	r3, r3, #7
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	fa02 f303 	lsl.w	r3, r2, r3
 800a596:	69ba      	ldr	r2, [r7, #24]
 800a598:	4313      	orrs	r3, r2
 800a59a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	08da      	lsrs	r2, r3, #3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3208      	adds	r2, #8
 800a5a4:	69b9      	ldr	r1, [r7, #24]
 800a5a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	2203      	movs	r2, #3
 800a5b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ba:	43db      	mvns	r3, r3
 800a5bc:	69ba      	ldr	r2, [r7, #24]
 800a5be:	4013      	ands	r3, r2
 800a5c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f003 0203 	and.w	r2, r3, #3
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	005b      	lsls	r3, r3, #1
 800a5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d2:	69ba      	ldr	r2, [r7, #24]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	69ba      	ldr	r2, [r7, #24]
 800a5dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 80e0 	beq.w	800a7ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a5ec:	4b2f      	ldr	r3, [pc, #188]	; (800a6ac <HAL_GPIO_Init+0x238>)
 800a5ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a5f2:	4a2e      	ldr	r2, [pc, #184]	; (800a6ac <HAL_GPIO_Init+0x238>)
 800a5f4:	f043 0302 	orr.w	r3, r3, #2
 800a5f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a5fc:	4b2b      	ldr	r3, [pc, #172]	; (800a6ac <HAL_GPIO_Init+0x238>)
 800a5fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a60a:	4a29      	ldr	r2, [pc, #164]	; (800a6b0 <HAL_GPIO_Init+0x23c>)
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	089b      	lsrs	r3, r3, #2
 800a610:	3302      	adds	r3, #2
 800a612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	f003 0303 	and.w	r3, r3, #3
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	220f      	movs	r2, #15
 800a622:	fa02 f303 	lsl.w	r3, r2, r3
 800a626:	43db      	mvns	r3, r3
 800a628:	69ba      	ldr	r2, [r7, #24]
 800a62a:	4013      	ands	r3, r2
 800a62c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a20      	ldr	r2, [pc, #128]	; (800a6b4 <HAL_GPIO_Init+0x240>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d052      	beq.n	800a6dc <HAL_GPIO_Init+0x268>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a1f      	ldr	r2, [pc, #124]	; (800a6b8 <HAL_GPIO_Init+0x244>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d031      	beq.n	800a6a2 <HAL_GPIO_Init+0x22e>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a1e      	ldr	r2, [pc, #120]	; (800a6bc <HAL_GPIO_Init+0x248>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d02b      	beq.n	800a69e <HAL_GPIO_Init+0x22a>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a1d      	ldr	r2, [pc, #116]	; (800a6c0 <HAL_GPIO_Init+0x24c>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d025      	beq.n	800a69a <HAL_GPIO_Init+0x226>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a1c      	ldr	r2, [pc, #112]	; (800a6c4 <HAL_GPIO_Init+0x250>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d01f      	beq.n	800a696 <HAL_GPIO_Init+0x222>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a1b      	ldr	r2, [pc, #108]	; (800a6c8 <HAL_GPIO_Init+0x254>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d019      	beq.n	800a692 <HAL_GPIO_Init+0x21e>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a1a      	ldr	r2, [pc, #104]	; (800a6cc <HAL_GPIO_Init+0x258>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d013      	beq.n	800a68e <HAL_GPIO_Init+0x21a>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a19      	ldr	r2, [pc, #100]	; (800a6d0 <HAL_GPIO_Init+0x25c>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d00d      	beq.n	800a68a <HAL_GPIO_Init+0x216>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a18      	ldr	r2, [pc, #96]	; (800a6d4 <HAL_GPIO_Init+0x260>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d007      	beq.n	800a686 <HAL_GPIO_Init+0x212>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a17      	ldr	r2, [pc, #92]	; (800a6d8 <HAL_GPIO_Init+0x264>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d101      	bne.n	800a682 <HAL_GPIO_Init+0x20e>
 800a67e:	2309      	movs	r3, #9
 800a680:	e02d      	b.n	800a6de <HAL_GPIO_Init+0x26a>
 800a682:	230a      	movs	r3, #10
 800a684:	e02b      	b.n	800a6de <HAL_GPIO_Init+0x26a>
 800a686:	2308      	movs	r3, #8
 800a688:	e029      	b.n	800a6de <HAL_GPIO_Init+0x26a>
 800a68a:	2307      	movs	r3, #7
 800a68c:	e027      	b.n	800a6de <HAL_GPIO_Init+0x26a>
 800a68e:	2306      	movs	r3, #6
 800a690:	e025      	b.n	800a6de <HAL_GPIO_Init+0x26a>
 800a692:	2305      	movs	r3, #5
 800a694:	e023      	b.n	800a6de <HAL_GPIO_Init+0x26a>
 800a696:	2304      	movs	r3, #4
 800a698:	e021      	b.n	800a6de <HAL_GPIO_Init+0x26a>
 800a69a:	2303      	movs	r3, #3
 800a69c:	e01f      	b.n	800a6de <HAL_GPIO_Init+0x26a>
 800a69e:	2302      	movs	r3, #2
 800a6a0:	e01d      	b.n	800a6de <HAL_GPIO_Init+0x26a>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e01b      	b.n	800a6de <HAL_GPIO_Init+0x26a>
 800a6a6:	bf00      	nop
 800a6a8:	58000080 	.word	0x58000080
 800a6ac:	58024400 	.word	0x58024400
 800a6b0:	58000400 	.word	0x58000400
 800a6b4:	58020000 	.word	0x58020000
 800a6b8:	58020400 	.word	0x58020400
 800a6bc:	58020800 	.word	0x58020800
 800a6c0:	58020c00 	.word	0x58020c00
 800a6c4:	58021000 	.word	0x58021000
 800a6c8:	58021400 	.word	0x58021400
 800a6cc:	58021800 	.word	0x58021800
 800a6d0:	58021c00 	.word	0x58021c00
 800a6d4:	58022000 	.word	0x58022000
 800a6d8:	58022400 	.word	0x58022400
 800a6dc:	2300      	movs	r3, #0
 800a6de:	69fa      	ldr	r2, [r7, #28]
 800a6e0:	f002 0203 	and.w	r2, r2, #3
 800a6e4:	0092      	lsls	r2, r2, #2
 800a6e6:	4093      	lsls	r3, r2
 800a6e8:	69ba      	ldr	r2, [r7, #24]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a6ee:	4938      	ldr	r1, [pc, #224]	; (800a7d0 <HAL_GPIO_Init+0x35c>)
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	089b      	lsrs	r3, r3, #2
 800a6f4:	3302      	adds	r3, #2
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a6fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	43db      	mvns	r3, r3
 800a708:	69ba      	ldr	r2, [r7, #24]
 800a70a:	4013      	ands	r3, r2
 800a70c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d003      	beq.n	800a722 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a71a:	69ba      	ldr	r2, [r7, #24]
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	4313      	orrs	r3, r2
 800a720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a72a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	43db      	mvns	r3, r3
 800a736:	69ba      	ldr	r2, [r7, #24]
 800a738:	4013      	ands	r3, r2
 800a73a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d003      	beq.n	800a750 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a748:	69ba      	ldr	r2, [r7, #24]
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	43db      	mvns	r3, r3
 800a762:	69ba      	ldr	r2, [r7, #24]
 800a764:	4013      	ands	r3, r2
 800a766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a774:	69ba      	ldr	r2, [r7, #24]
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	4313      	orrs	r3, r2
 800a77a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	43db      	mvns	r3, r3
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	4013      	ands	r3, r2
 800a790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a79e:	69ba      	ldr	r2, [r7, #24]
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	69ba      	ldr	r2, [r7, #24]
 800a7aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f47f ae63 	bne.w	800a488 <HAL_GPIO_Init+0x14>
  }
}
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	3724      	adds	r7, #36	; 0x24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	58000400 	.word	0x58000400

0800a7d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a7e2:	4b75      	ldr	r3, [pc, #468]	; (800a9b8 <HAL_GPIO_DeInit+0x1e4>)
 800a7e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800a7e6:	e0d9      	b.n	800a99c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 80cc 	beq.w	800a996 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a7fe:	4a6f      	ldr	r2, [pc, #444]	; (800a9bc <HAL_GPIO_DeInit+0x1e8>)
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	089b      	lsrs	r3, r3, #2
 800a804:	3302      	adds	r3, #2
 800a806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a80a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f003 0303 	and.w	r3, r3, #3
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	220f      	movs	r2, #15
 800a816:	fa02 f303 	lsl.w	r3, r2, r3
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	4013      	ands	r3, r2
 800a81e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a67      	ldr	r2, [pc, #412]	; (800a9c0 <HAL_GPIO_DeInit+0x1ec>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d037      	beq.n	800a898 <HAL_GPIO_DeInit+0xc4>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a66      	ldr	r2, [pc, #408]	; (800a9c4 <HAL_GPIO_DeInit+0x1f0>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d031      	beq.n	800a894 <HAL_GPIO_DeInit+0xc0>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a65      	ldr	r2, [pc, #404]	; (800a9c8 <HAL_GPIO_DeInit+0x1f4>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d02b      	beq.n	800a890 <HAL_GPIO_DeInit+0xbc>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a64      	ldr	r2, [pc, #400]	; (800a9cc <HAL_GPIO_DeInit+0x1f8>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d025      	beq.n	800a88c <HAL_GPIO_DeInit+0xb8>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a63      	ldr	r2, [pc, #396]	; (800a9d0 <HAL_GPIO_DeInit+0x1fc>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d01f      	beq.n	800a888 <HAL_GPIO_DeInit+0xb4>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a62      	ldr	r2, [pc, #392]	; (800a9d4 <HAL_GPIO_DeInit+0x200>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d019      	beq.n	800a884 <HAL_GPIO_DeInit+0xb0>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a61      	ldr	r2, [pc, #388]	; (800a9d8 <HAL_GPIO_DeInit+0x204>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d013      	beq.n	800a880 <HAL_GPIO_DeInit+0xac>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a60      	ldr	r2, [pc, #384]	; (800a9dc <HAL_GPIO_DeInit+0x208>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d00d      	beq.n	800a87c <HAL_GPIO_DeInit+0xa8>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a5f      	ldr	r2, [pc, #380]	; (800a9e0 <HAL_GPIO_DeInit+0x20c>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d007      	beq.n	800a878 <HAL_GPIO_DeInit+0xa4>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a5e      	ldr	r2, [pc, #376]	; (800a9e4 <HAL_GPIO_DeInit+0x210>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d101      	bne.n	800a874 <HAL_GPIO_DeInit+0xa0>
 800a870:	2309      	movs	r3, #9
 800a872:	e012      	b.n	800a89a <HAL_GPIO_DeInit+0xc6>
 800a874:	230a      	movs	r3, #10
 800a876:	e010      	b.n	800a89a <HAL_GPIO_DeInit+0xc6>
 800a878:	2308      	movs	r3, #8
 800a87a:	e00e      	b.n	800a89a <HAL_GPIO_DeInit+0xc6>
 800a87c:	2307      	movs	r3, #7
 800a87e:	e00c      	b.n	800a89a <HAL_GPIO_DeInit+0xc6>
 800a880:	2306      	movs	r3, #6
 800a882:	e00a      	b.n	800a89a <HAL_GPIO_DeInit+0xc6>
 800a884:	2305      	movs	r3, #5
 800a886:	e008      	b.n	800a89a <HAL_GPIO_DeInit+0xc6>
 800a888:	2304      	movs	r3, #4
 800a88a:	e006      	b.n	800a89a <HAL_GPIO_DeInit+0xc6>
 800a88c:	2303      	movs	r3, #3
 800a88e:	e004      	b.n	800a89a <HAL_GPIO_DeInit+0xc6>
 800a890:	2302      	movs	r3, #2
 800a892:	e002      	b.n	800a89a <HAL_GPIO_DeInit+0xc6>
 800a894:	2301      	movs	r3, #1
 800a896:	e000      	b.n	800a89a <HAL_GPIO_DeInit+0xc6>
 800a898:	2300      	movs	r3, #0
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	f002 0203 	and.w	r2, r2, #3
 800a8a0:	0092      	lsls	r2, r2, #2
 800a8a2:	4093      	lsls	r3, r2
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d136      	bne.n	800a918 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	43db      	mvns	r3, r3
 800a8b2:	401a      	ands	r2, r3
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	43db      	mvns	r3, r3
 800a8c0:	401a      	ands	r2, r3
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800a8c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8ca:	685a      	ldr	r2, [r3, #4]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	43db      	mvns	r3, r3
 800a8d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800a8d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	43db      	mvns	r3, r3
 800a8e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f003 0303 	and.w	r3, r3, #3
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	220f      	movs	r2, #15
 800a8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a8fa:	4a30      	ldr	r2, [pc, #192]	; (800a9bc <HAL_GPIO_DeInit+0x1e8>)
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	089b      	lsrs	r3, r3, #2
 800a900:	3302      	adds	r3, #2
 800a902:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	43da      	mvns	r2, r3
 800a90a:	482c      	ldr	r0, [pc, #176]	; (800a9bc <HAL_GPIO_DeInit+0x1e8>)
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	089b      	lsrs	r3, r3, #2
 800a910:	400a      	ands	r2, r1
 800a912:	3302      	adds	r3, #2
 800a914:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	005b      	lsls	r3, r3, #1
 800a920:	2103      	movs	r1, #3
 800a922:	fa01 f303 	lsl.w	r3, r1, r3
 800a926:	431a      	orrs	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	08da      	lsrs	r2, r3, #3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	3208      	adds	r2, #8
 800a934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f003 0307 	and.w	r3, r3, #7
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	220f      	movs	r2, #15
 800a942:	fa02 f303 	lsl.w	r3, r2, r3
 800a946:	43db      	mvns	r3, r3
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	08d2      	lsrs	r2, r2, #3
 800a94c:	4019      	ands	r1, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	3208      	adds	r2, #8
 800a952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	005b      	lsls	r3, r3, #1
 800a95e:	2103      	movs	r1, #3
 800a960:	fa01 f303 	lsl.w	r3, r1, r3
 800a964:	43db      	mvns	r3, r3
 800a966:	401a      	ands	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685a      	ldr	r2, [r3, #4]
 800a970:	2101      	movs	r1, #1
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	fa01 f303 	lsl.w	r3, r1, r3
 800a978:	43db      	mvns	r3, r3
 800a97a:	401a      	ands	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	2103      	movs	r1, #3
 800a98a:	fa01 f303 	lsl.w	r3, r1, r3
 800a98e:	43db      	mvns	r3, r3
 800a990:	401a      	ands	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	609a      	str	r2, [r3, #8]
    }

    position++;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	3301      	adds	r3, #1
 800a99a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f47f af1f 	bne.w	800a7e8 <HAL_GPIO_DeInit+0x14>
  }
}
 800a9aa:	bf00      	nop
 800a9ac:	bf00      	nop
 800a9ae:	371c      	adds	r7, #28
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr
 800a9b8:	58000080 	.word	0x58000080
 800a9bc:	58000400 	.word	0x58000400
 800a9c0:	58020000 	.word	0x58020000
 800a9c4:	58020400 	.word	0x58020400
 800a9c8:	58020800 	.word	0x58020800
 800a9cc:	58020c00 	.word	0x58020c00
 800a9d0:	58021000 	.word	0x58021000
 800a9d4:	58021400 	.word	0x58021400
 800a9d8:	58021800 	.word	0x58021800
 800a9dc:	58021c00 	.word	0x58021c00
 800a9e0:	58022000 	.word	0x58022000
 800a9e4:	58022400 	.word	0x58022400

0800a9e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	691a      	ldr	r2, [r3, #16]
 800a9f8:	887b      	ldrh	r3, [r7, #2]
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d002      	beq.n	800aa06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aa00:	2301      	movs	r3, #1
 800aa02:	73fb      	strb	r3, [r7, #15]
 800aa04:	e001      	b.n	800aa0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aa06:	2300      	movs	r3, #0
 800aa08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	460b      	mov	r3, r1
 800aa22:	807b      	strh	r3, [r7, #2]
 800aa24:	4613      	mov	r3, r2
 800aa26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800aa28:	787b      	ldrb	r3, [r7, #1]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aa2e:	887a      	ldrh	r2, [r7, #2]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800aa34:	e003      	b.n	800aa3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800aa36:	887b      	ldrh	r3, [r7, #2]
 800aa38:	041a      	lsls	r2, r3, #16
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	619a      	str	r2, [r3, #24]
}
 800aa3e:	bf00      	nop
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b085      	sub	sp, #20
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	460b      	mov	r3, r1
 800aa54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aa5c:	887a      	ldrh	r2, [r7, #2]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	4013      	ands	r3, r2
 800aa62:	041a      	lsls	r2, r3, #16
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	43d9      	mvns	r1, r3
 800aa68:	887b      	ldrh	r3, [r7, #2]
 800aa6a:	400b      	ands	r3, r1
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	619a      	str	r2, [r3, #24]
}
 800aa72:	bf00      	nop
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
	...

0800aa80 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800aa84:	4b05      	ldr	r3, [pc, #20]	; (800aa9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a04      	ldr	r2, [pc, #16]	; (800aa9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aa8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa8e:	6013      	str	r3, [r2, #0]
}
 800aa90:	bf00      	nop
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	58024800 	.word	0x58024800

0800aaa0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800aaa8:	4b19      	ldr	r3, [pc, #100]	; (800ab10 <HAL_PWREx_ConfigSupply+0x70>)
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f003 0304 	and.w	r3, r3, #4
 800aab0:	2b04      	cmp	r3, #4
 800aab2:	d00a      	beq.n	800aaca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800aab4:	4b16      	ldr	r3, [pc, #88]	; (800ab10 <HAL_PWREx_ConfigSupply+0x70>)
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	f003 0307 	and.w	r3, r3, #7
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d001      	beq.n	800aac6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e01f      	b.n	800ab06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	e01d      	b.n	800ab06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800aaca:	4b11      	ldr	r3, [pc, #68]	; (800ab10 <HAL_PWREx_ConfigSupply+0x70>)
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	f023 0207 	bic.w	r2, r3, #7
 800aad2:	490f      	ldr	r1, [pc, #60]	; (800ab10 <HAL_PWREx_ConfigSupply+0x70>)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800aada:	f7ff fb03 	bl	800a0e4 <HAL_GetTick>
 800aade:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aae0:	e009      	b.n	800aaf6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aae2:	f7ff faff 	bl	800a0e4 <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aaf0:	d901      	bls.n	800aaf6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e007      	b.n	800ab06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aaf6:	4b06      	ldr	r3, [pc, #24]	; (800ab10 <HAL_PWREx_ConfigSupply+0x70>)
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aafe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab02:	d1ee      	bne.n	800aae2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	58024800 	.word	0x58024800

0800ab14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08c      	sub	sp, #48	; 0x30
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d102      	bne.n	800ab28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	f000 bc48 	b.w	800b3b8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 8088 	beq.w	800ac46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab36:	4b99      	ldr	r3, [pc, #612]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab40:	4b96      	ldr	r3, [pc, #600]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ab42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab48:	2b10      	cmp	r3, #16
 800ab4a:	d007      	beq.n	800ab5c <HAL_RCC_OscConfig+0x48>
 800ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4e:	2b18      	cmp	r3, #24
 800ab50:	d111      	bne.n	800ab76 <HAL_RCC_OscConfig+0x62>
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	f003 0303 	and.w	r3, r3, #3
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d10c      	bne.n	800ab76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab5c:	4b8f      	ldr	r3, [pc, #572]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d06d      	beq.n	800ac44 <HAL_RCC_OscConfig+0x130>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d169      	bne.n	800ac44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	f000 bc21 	b.w	800b3b8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab7e:	d106      	bne.n	800ab8e <HAL_RCC_OscConfig+0x7a>
 800ab80:	4b86      	ldr	r3, [pc, #536]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a85      	ldr	r2, [pc, #532]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ab86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	e02e      	b.n	800abec <HAL_RCC_OscConfig+0xd8>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10c      	bne.n	800abb0 <HAL_RCC_OscConfig+0x9c>
 800ab96:	4b81      	ldr	r3, [pc, #516]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a80      	ldr	r2, [pc, #512]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ab9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	4b7e      	ldr	r3, [pc, #504]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a7d      	ldr	r2, [pc, #500]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800aba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	e01d      	b.n	800abec <HAL_RCC_OscConfig+0xd8>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abb8:	d10c      	bne.n	800abd4 <HAL_RCC_OscConfig+0xc0>
 800abba:	4b78      	ldr	r3, [pc, #480]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a77      	ldr	r2, [pc, #476]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800abc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abc4:	6013      	str	r3, [r2, #0]
 800abc6:	4b75      	ldr	r3, [pc, #468]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a74      	ldr	r2, [pc, #464]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800abcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abd0:	6013      	str	r3, [r2, #0]
 800abd2:	e00b      	b.n	800abec <HAL_RCC_OscConfig+0xd8>
 800abd4:	4b71      	ldr	r3, [pc, #452]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a70      	ldr	r2, [pc, #448]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800abda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	4b6e      	ldr	r3, [pc, #440]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a6d      	ldr	r2, [pc, #436]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800abe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d013      	beq.n	800ac1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abf4:	f7ff fa76 	bl	800a0e4 <HAL_GetTick>
 800abf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800abfa:	e008      	b.n	800ac0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abfc:	f7ff fa72 	bl	800a0e4 <HAL_GetTick>
 800ac00:	4602      	mov	r2, r0
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	2b64      	cmp	r3, #100	; 0x64
 800ac08:	d901      	bls.n	800ac0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e3d4      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac0e:	4b63      	ldr	r3, [pc, #396]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d0f0      	beq.n	800abfc <HAL_RCC_OscConfig+0xe8>
 800ac1a:	e014      	b.n	800ac46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac1c:	f7ff fa62 	bl	800a0e4 <HAL_GetTick>
 800ac20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ac22:	e008      	b.n	800ac36 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac24:	f7ff fa5e 	bl	800a0e4 <HAL_GetTick>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	2b64      	cmp	r3, #100	; 0x64
 800ac30:	d901      	bls.n	800ac36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ac32:	2303      	movs	r3, #3
 800ac34:	e3c0      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ac36:	4b59      	ldr	r3, [pc, #356]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1f0      	bne.n	800ac24 <HAL_RCC_OscConfig+0x110>
 800ac42:	e000      	b.n	800ac46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0302 	and.w	r3, r3, #2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 80ca 	beq.w	800ade8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac54:	4b51      	ldr	r3, [pc, #324]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac5e:	4b4f      	ldr	r3, [pc, #316]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ac60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d007      	beq.n	800ac7a <HAL_RCC_OscConfig+0x166>
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	2b18      	cmp	r3, #24
 800ac6e:	d156      	bne.n	800ad1e <HAL_RCC_OscConfig+0x20a>
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	f003 0303 	and.w	r3, r3, #3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d151      	bne.n	800ad1e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac7a:	4b48      	ldr	r3, [pc, #288]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 0304 	and.w	r3, r3, #4
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d005      	beq.n	800ac92 <HAL_RCC_OscConfig+0x17e>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d101      	bne.n	800ac92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e392      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac92:	4b42      	ldr	r3, [pc, #264]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f023 0219 	bic.w	r2, r3, #25
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	493f      	ldr	r1, [pc, #252]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800aca0:	4313      	orrs	r3, r2
 800aca2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aca4:	f7ff fa1e 	bl	800a0e4 <HAL_GetTick>
 800aca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800acaa:	e008      	b.n	800acbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acac:	f7ff fa1a 	bl	800a0e4 <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e37c      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800acbe:	4b37      	ldr	r3, [pc, #220]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 0304 	and.w	r3, r3, #4
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0f0      	beq.n	800acac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acca:	f7ff fa3b 	bl	800a144 <HAL_GetREVID>
 800acce:	4603      	mov	r3, r0
 800acd0:	f241 0203 	movw	r2, #4099	; 0x1003
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d817      	bhi.n	800ad08 <HAL_RCC_OscConfig+0x1f4>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	2b40      	cmp	r3, #64	; 0x40
 800acde:	d108      	bne.n	800acf2 <HAL_RCC_OscConfig+0x1de>
 800ace0:	4b2e      	ldr	r3, [pc, #184]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ace8:	4a2c      	ldr	r2, [pc, #176]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800acea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800acf0:	e07a      	b.n	800ade8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acf2:	4b2a      	ldr	r3, [pc, #168]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	031b      	lsls	r3, r3, #12
 800ad00:	4926      	ldr	r1, [pc, #152]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ad02:	4313      	orrs	r3, r2
 800ad04:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad06:	e06f      	b.n	800ade8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad08:	4b24      	ldr	r3, [pc, #144]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	061b      	lsls	r3, r3, #24
 800ad16:	4921      	ldr	r1, [pc, #132]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad1c:	e064      	b.n	800ade8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d047      	beq.n	800adb6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ad26:	4b1d      	ldr	r3, [pc, #116]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f023 0219 	bic.w	r2, r3, #25
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	491a      	ldr	r1, [pc, #104]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ad34:	4313      	orrs	r3, r2
 800ad36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad38:	f7ff f9d4 	bl	800a0e4 <HAL_GetTick>
 800ad3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad3e:	e008      	b.n	800ad52 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad40:	f7ff f9d0 	bl	800a0e4 <HAL_GetTick>
 800ad44:	4602      	mov	r2, r0
 800ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d901      	bls.n	800ad52 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e332      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad52:	4b12      	ldr	r3, [pc, #72]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 0304 	and.w	r3, r3, #4
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0f0      	beq.n	800ad40 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad5e:	f7ff f9f1 	bl	800a144 <HAL_GetREVID>
 800ad62:	4603      	mov	r3, r0
 800ad64:	f241 0203 	movw	r2, #4099	; 0x1003
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d819      	bhi.n	800ada0 <HAL_RCC_OscConfig+0x28c>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	2b40      	cmp	r3, #64	; 0x40
 800ad72:	d108      	bne.n	800ad86 <HAL_RCC_OscConfig+0x272>
 800ad74:	4b09      	ldr	r3, [pc, #36]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ad7c:	4a07      	ldr	r2, [pc, #28]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ad7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad82:	6053      	str	r3, [r2, #4]
 800ad84:	e030      	b.n	800ade8 <HAL_RCC_OscConfig+0x2d4>
 800ad86:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	031b      	lsls	r3, r3, #12
 800ad94:	4901      	ldr	r1, [pc, #4]	; (800ad9c <HAL_RCC_OscConfig+0x288>)
 800ad96:	4313      	orrs	r3, r2
 800ad98:	604b      	str	r3, [r1, #4]
 800ad9a:	e025      	b.n	800ade8 <HAL_RCC_OscConfig+0x2d4>
 800ad9c:	58024400 	.word	0x58024400
 800ada0:	4b9a      	ldr	r3, [pc, #616]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	061b      	lsls	r3, r3, #24
 800adae:	4997      	ldr	r1, [pc, #604]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	604b      	str	r3, [r1, #4]
 800adb4:	e018      	b.n	800ade8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adb6:	4b95      	ldr	r3, [pc, #596]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a94      	ldr	r2, [pc, #592]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800adbc:	f023 0301 	bic.w	r3, r3, #1
 800adc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc2:	f7ff f98f 	bl	800a0e4 <HAL_GetTick>
 800adc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800adc8:	e008      	b.n	800addc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adca:	f7ff f98b 	bl	800a0e4 <HAL_GetTick>
 800adce:	4602      	mov	r2, r0
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	1ad3      	subs	r3, r2, r3
 800add4:	2b02      	cmp	r3, #2
 800add6:	d901      	bls.n	800addc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800add8:	2303      	movs	r3, #3
 800adda:	e2ed      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800addc:	4b8b      	ldr	r3, [pc, #556]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0304 	and.w	r3, r3, #4
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1f0      	bne.n	800adca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0310 	and.w	r3, r3, #16
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 80a9 	beq.w	800af48 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adf6:	4b85      	ldr	r3, [pc, #532]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adfe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ae00:	4b82      	ldr	r3, [pc, #520]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800ae02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae04:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	2b08      	cmp	r3, #8
 800ae0a:	d007      	beq.n	800ae1c <HAL_RCC_OscConfig+0x308>
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	2b18      	cmp	r3, #24
 800ae10:	d13a      	bne.n	800ae88 <HAL_RCC_OscConfig+0x374>
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f003 0303 	and.w	r3, r3, #3
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d135      	bne.n	800ae88 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae1c:	4b7b      	ldr	r3, [pc, #492]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d005      	beq.n	800ae34 <HAL_RCC_OscConfig+0x320>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	2b80      	cmp	r3, #128	; 0x80
 800ae2e:	d001      	beq.n	800ae34 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e2c1      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae34:	f7ff f986 	bl	800a144 <HAL_GetREVID>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	f241 0203 	movw	r2, #4099	; 0x1003
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d817      	bhi.n	800ae72 <HAL_RCC_OscConfig+0x35e>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	2b20      	cmp	r3, #32
 800ae48:	d108      	bne.n	800ae5c <HAL_RCC_OscConfig+0x348>
 800ae4a:	4b70      	ldr	r3, [pc, #448]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ae52:	4a6e      	ldr	r2, [pc, #440]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800ae54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae58:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae5a:	e075      	b.n	800af48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae5c:	4b6b      	ldr	r3, [pc, #428]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	069b      	lsls	r3, r3, #26
 800ae6a:	4968      	ldr	r1, [pc, #416]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae70:	e06a      	b.n	800af48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae72:	4b66      	ldr	r3, [pc, #408]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	061b      	lsls	r3, r3, #24
 800ae80:	4962      	ldr	r1, [pc, #392]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800ae82:	4313      	orrs	r3, r2
 800ae84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae86:	e05f      	b.n	800af48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	69db      	ldr	r3, [r3, #28]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d042      	beq.n	800af16 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ae90:	4b5e      	ldr	r3, [pc, #376]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a5d      	ldr	r2, [pc, #372]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800ae96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae9c:	f7ff f922 	bl	800a0e4 <HAL_GetTick>
 800aea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aea2:	e008      	b.n	800aeb6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aea4:	f7ff f91e 	bl	800a0e4 <HAL_GetTick>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d901      	bls.n	800aeb6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e280      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aeb6:	4b55      	ldr	r3, [pc, #340]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0f0      	beq.n	800aea4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aec2:	f7ff f93f 	bl	800a144 <HAL_GetREVID>
 800aec6:	4603      	mov	r3, r0
 800aec8:	f241 0203 	movw	r2, #4099	; 0x1003
 800aecc:	4293      	cmp	r3, r2
 800aece:	d817      	bhi.n	800af00 <HAL_RCC_OscConfig+0x3ec>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	2b20      	cmp	r3, #32
 800aed6:	d108      	bne.n	800aeea <HAL_RCC_OscConfig+0x3d6>
 800aed8:	4b4c      	ldr	r3, [pc, #304]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800aee0:	4a4a      	ldr	r2, [pc, #296]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800aee2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aee6:	6053      	str	r3, [r2, #4]
 800aee8:	e02e      	b.n	800af48 <HAL_RCC_OscConfig+0x434>
 800aeea:	4b48      	ldr	r3, [pc, #288]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	069b      	lsls	r3, r3, #26
 800aef8:	4944      	ldr	r1, [pc, #272]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800aefa:	4313      	orrs	r3, r2
 800aefc:	604b      	str	r3, [r1, #4]
 800aefe:	e023      	b.n	800af48 <HAL_RCC_OscConfig+0x434>
 800af00:	4b42      	ldr	r3, [pc, #264]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	061b      	lsls	r3, r3, #24
 800af0e:	493f      	ldr	r1, [pc, #252]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800af10:	4313      	orrs	r3, r2
 800af12:	60cb      	str	r3, [r1, #12]
 800af14:	e018      	b.n	800af48 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800af16:	4b3d      	ldr	r3, [pc, #244]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a3c      	ldr	r2, [pc, #240]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800af1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af22:	f7ff f8df 	bl	800a0e4 <HAL_GetTick>
 800af26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800af28:	e008      	b.n	800af3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800af2a:	f7ff f8db 	bl	800a0e4 <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	2b02      	cmp	r3, #2
 800af36:	d901      	bls.n	800af3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	e23d      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800af3c:	4b33      	ldr	r3, [pc, #204]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1f0      	bne.n	800af2a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 0308 	and.w	r3, r3, #8
 800af50:	2b00      	cmp	r3, #0
 800af52:	d036      	beq.n	800afc2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	695b      	ldr	r3, [r3, #20]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d019      	beq.n	800af90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af5c:	4b2b      	ldr	r3, [pc, #172]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800af5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af60:	4a2a      	ldr	r2, [pc, #168]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800af62:	f043 0301 	orr.w	r3, r3, #1
 800af66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af68:	f7ff f8bc 	bl	800a0e4 <HAL_GetTick>
 800af6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af6e:	e008      	b.n	800af82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af70:	f7ff f8b8 	bl	800a0e4 <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d901      	bls.n	800af82 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e21a      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af82:	4b22      	ldr	r3, [pc, #136]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800af84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af86:	f003 0302 	and.w	r3, r3, #2
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0f0      	beq.n	800af70 <HAL_RCC_OscConfig+0x45c>
 800af8e:	e018      	b.n	800afc2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af90:	4b1e      	ldr	r3, [pc, #120]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800af92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af94:	4a1d      	ldr	r2, [pc, #116]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800af96:	f023 0301 	bic.w	r3, r3, #1
 800af9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af9c:	f7ff f8a2 	bl	800a0e4 <HAL_GetTick>
 800afa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800afa2:	e008      	b.n	800afb6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800afa4:	f7ff f89e 	bl	800a0e4 <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d901      	bls.n	800afb6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e200      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800afb6:	4b15      	ldr	r3, [pc, #84]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800afb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afba:	f003 0302 	and.w	r3, r3, #2
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1f0      	bne.n	800afa4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 0320 	and.w	r3, r3, #32
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d039      	beq.n	800b042 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d01c      	beq.n	800b010 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800afd6:	4b0d      	ldr	r3, [pc, #52]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a0c      	ldr	r2, [pc, #48]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800afdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800afe0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800afe2:	f7ff f87f 	bl	800a0e4 <HAL_GetTick>
 800afe6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800afe8:	e008      	b.n	800affc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800afea:	f7ff f87b 	bl	800a0e4 <HAL_GetTick>
 800afee:	4602      	mov	r2, r0
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d901      	bls.n	800affc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800aff8:	2303      	movs	r3, #3
 800affa:	e1dd      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800affc:	4b03      	ldr	r3, [pc, #12]	; (800b00c <HAL_RCC_OscConfig+0x4f8>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d0f0      	beq.n	800afea <HAL_RCC_OscConfig+0x4d6>
 800b008:	e01b      	b.n	800b042 <HAL_RCC_OscConfig+0x52e>
 800b00a:	bf00      	nop
 800b00c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b010:	4b9b      	ldr	r3, [pc, #620]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a9a      	ldr	r2, [pc, #616]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b01a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b01c:	f7ff f862 	bl	800a0e4 <HAL_GetTick>
 800b020:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b022:	e008      	b.n	800b036 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b024:	f7ff f85e 	bl	800a0e4 <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d901      	bls.n	800b036 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b032:	2303      	movs	r3, #3
 800b034:	e1c0      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b036:	4b92      	ldr	r3, [pc, #584]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d1f0      	bne.n	800b024 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 0304 	and.w	r3, r3, #4
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 8081 	beq.w	800b152 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b050:	4b8c      	ldr	r3, [pc, #560]	; (800b284 <HAL_RCC_OscConfig+0x770>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a8b      	ldr	r2, [pc, #556]	; (800b284 <HAL_RCC_OscConfig+0x770>)
 800b056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b05a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b05c:	f7ff f842 	bl	800a0e4 <HAL_GetTick>
 800b060:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b062:	e008      	b.n	800b076 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b064:	f7ff f83e 	bl	800a0e4 <HAL_GetTick>
 800b068:	4602      	mov	r2, r0
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	2b64      	cmp	r3, #100	; 0x64
 800b070:	d901      	bls.n	800b076 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b072:	2303      	movs	r3, #3
 800b074:	e1a0      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b076:	4b83      	ldr	r3, [pc, #524]	; (800b284 <HAL_RCC_OscConfig+0x770>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0f0      	beq.n	800b064 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d106      	bne.n	800b098 <HAL_RCC_OscConfig+0x584>
 800b08a:	4b7d      	ldr	r3, [pc, #500]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08e:	4a7c      	ldr	r2, [pc, #496]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b090:	f043 0301 	orr.w	r3, r3, #1
 800b094:	6713      	str	r3, [r2, #112]	; 0x70
 800b096:	e02d      	b.n	800b0f4 <HAL_RCC_OscConfig+0x5e0>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10c      	bne.n	800b0ba <HAL_RCC_OscConfig+0x5a6>
 800b0a0:	4b77      	ldr	r3, [pc, #476]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a4:	4a76      	ldr	r2, [pc, #472]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0a6:	f023 0301 	bic.w	r3, r3, #1
 800b0aa:	6713      	str	r3, [r2, #112]	; 0x70
 800b0ac:	4b74      	ldr	r3, [pc, #464]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b0:	4a73      	ldr	r2, [pc, #460]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0b2:	f023 0304 	bic.w	r3, r3, #4
 800b0b6:	6713      	str	r3, [r2, #112]	; 0x70
 800b0b8:	e01c      	b.n	800b0f4 <HAL_RCC_OscConfig+0x5e0>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	2b05      	cmp	r3, #5
 800b0c0:	d10c      	bne.n	800b0dc <HAL_RCC_OscConfig+0x5c8>
 800b0c2:	4b6f      	ldr	r3, [pc, #444]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c6:	4a6e      	ldr	r2, [pc, #440]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0c8:	f043 0304 	orr.w	r3, r3, #4
 800b0cc:	6713      	str	r3, [r2, #112]	; 0x70
 800b0ce:	4b6c      	ldr	r3, [pc, #432]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d2:	4a6b      	ldr	r2, [pc, #428]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0d4:	f043 0301 	orr.w	r3, r3, #1
 800b0d8:	6713      	str	r3, [r2, #112]	; 0x70
 800b0da:	e00b      	b.n	800b0f4 <HAL_RCC_OscConfig+0x5e0>
 800b0dc:	4b68      	ldr	r3, [pc, #416]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e0:	4a67      	ldr	r2, [pc, #412]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0e2:	f023 0301 	bic.w	r3, r3, #1
 800b0e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b0e8:	4b65      	ldr	r3, [pc, #404]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ec:	4a64      	ldr	r2, [pc, #400]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b0ee:	f023 0304 	bic.w	r3, r3, #4
 800b0f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d015      	beq.n	800b128 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0fc:	f7fe fff2 	bl	800a0e4 <HAL_GetTick>
 800b100:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b102:	e00a      	b.n	800b11a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b104:	f7fe ffee 	bl	800a0e4 <HAL_GetTick>
 800b108:	4602      	mov	r2, r0
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b112:	4293      	cmp	r3, r2
 800b114:	d901      	bls.n	800b11a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b116:	2303      	movs	r3, #3
 800b118:	e14e      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b11a:	4b59      	ldr	r3, [pc, #356]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b11e:	f003 0302 	and.w	r3, r3, #2
 800b122:	2b00      	cmp	r3, #0
 800b124:	d0ee      	beq.n	800b104 <HAL_RCC_OscConfig+0x5f0>
 800b126:	e014      	b.n	800b152 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b128:	f7fe ffdc 	bl	800a0e4 <HAL_GetTick>
 800b12c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b12e:	e00a      	b.n	800b146 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b130:	f7fe ffd8 	bl	800a0e4 <HAL_GetTick>
 800b134:	4602      	mov	r2, r0
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b13e:	4293      	cmp	r3, r2
 800b140:	d901      	bls.n	800b146 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b142:	2303      	movs	r3, #3
 800b144:	e138      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b146:	4b4e      	ldr	r3, [pc, #312]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b14a:	f003 0302 	and.w	r3, r3, #2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1ee      	bne.n	800b130 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 812d 	beq.w	800b3b6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b15c:	4b48      	ldr	r3, [pc, #288]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b164:	2b18      	cmp	r3, #24
 800b166:	f000 80bd 	beq.w	800b2e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	2b02      	cmp	r3, #2
 800b170:	f040 809e 	bne.w	800b2b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b174:	4b42      	ldr	r3, [pc, #264]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a41      	ldr	r2, [pc, #260]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b17a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b17e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b180:	f7fe ffb0 	bl	800a0e4 <HAL_GetTick>
 800b184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b186:	e008      	b.n	800b19a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b188:	f7fe ffac 	bl	800a0e4 <HAL_GetTick>
 800b18c:	4602      	mov	r2, r0
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	2b02      	cmp	r3, #2
 800b194:	d901      	bls.n	800b19a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b196:	2303      	movs	r3, #3
 800b198:	e10e      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b19a:	4b39      	ldr	r3, [pc, #228]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1f0      	bne.n	800b188 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b1a6:	4b36      	ldr	r3, [pc, #216]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b1a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1aa:	4b37      	ldr	r3, [pc, #220]	; (800b288 <HAL_RCC_OscConfig+0x774>)
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b1b6:	0112      	lsls	r2, r2, #4
 800b1b8:	430a      	orrs	r2, r1
 800b1ba:	4931      	ldr	r1, [pc, #196]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	628b      	str	r3, [r1, #40]	; 0x28
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	025b      	lsls	r3, r3, #9
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	431a      	orrs	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	041b      	lsls	r3, r3, #16
 800b1de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	061b      	lsls	r3, r3, #24
 800b1ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1f0:	4923      	ldr	r1, [pc, #140]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b1f6:	4b22      	ldr	r3, [pc, #136]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fa:	4a21      	ldr	r2, [pc, #132]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b1fc:	f023 0301 	bic.w	r3, r3, #1
 800b200:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b202:	4b1f      	ldr	r3, [pc, #124]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b206:	4b21      	ldr	r3, [pc, #132]	; (800b28c <HAL_RCC_OscConfig+0x778>)
 800b208:	4013      	ands	r3, r2
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b20e:	00d2      	lsls	r2, r2, #3
 800b210:	491b      	ldr	r1, [pc, #108]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b212:	4313      	orrs	r3, r2
 800b214:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b216:	4b1a      	ldr	r3, [pc, #104]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21a:	f023 020c 	bic.w	r2, r3, #12
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b222:	4917      	ldr	r1, [pc, #92]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b224:	4313      	orrs	r3, r2
 800b226:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b228:	4b15      	ldr	r3, [pc, #84]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22c:	f023 0202 	bic.w	r2, r3, #2
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b234:	4912      	ldr	r1, [pc, #72]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b236:	4313      	orrs	r3, r2
 800b238:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b23a:	4b11      	ldr	r3, [pc, #68]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23e:	4a10      	ldr	r2, [pc, #64]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b244:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b246:	4b0e      	ldr	r3, [pc, #56]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24a:	4a0d      	ldr	r2, [pc, #52]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b24c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b250:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b252:	4b0b      	ldr	r3, [pc, #44]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b256:	4a0a      	ldr	r2, [pc, #40]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b25c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b25e:	4b08      	ldr	r3, [pc, #32]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b262:	4a07      	ldr	r2, [pc, #28]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b264:	f043 0301 	orr.w	r3, r3, #1
 800b268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b26a:	4b05      	ldr	r3, [pc, #20]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a04      	ldr	r2, [pc, #16]	; (800b280 <HAL_RCC_OscConfig+0x76c>)
 800b270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b276:	f7fe ff35 	bl	800a0e4 <HAL_GetTick>
 800b27a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b27c:	e011      	b.n	800b2a2 <HAL_RCC_OscConfig+0x78e>
 800b27e:	bf00      	nop
 800b280:	58024400 	.word	0x58024400
 800b284:	58024800 	.word	0x58024800
 800b288:	fffffc0c 	.word	0xfffffc0c
 800b28c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b290:	f7fe ff28 	bl	800a0e4 <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d901      	bls.n	800b2a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e08a      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b2a2:	4b47      	ldr	r3, [pc, #284]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0f0      	beq.n	800b290 <HAL_RCC_OscConfig+0x77c>
 800b2ae:	e082      	b.n	800b3b6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2b0:	4b43      	ldr	r3, [pc, #268]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a42      	ldr	r2, [pc, #264]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b2b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2bc:	f7fe ff12 	bl	800a0e4 <HAL_GetTick>
 800b2c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b2c2:	e008      	b.n	800b2d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2c4:	f7fe ff0e 	bl	800a0e4 <HAL_GetTick>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	1ad3      	subs	r3, r2, r3
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d901      	bls.n	800b2d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	e070      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b2d6:	4b3a      	ldr	r3, [pc, #232]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1f0      	bne.n	800b2c4 <HAL_RCC_OscConfig+0x7b0>
 800b2e2:	e068      	b.n	800b3b6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b2e4:	4b36      	ldr	r3, [pc, #216]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b2ea:	4b35      	ldr	r3, [pc, #212]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d031      	beq.n	800b35c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	f003 0203 	and.w	r2, r3, #3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b302:	429a      	cmp	r2, r3
 800b304:	d12a      	bne.n	800b35c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	091b      	lsrs	r3, r3, #4
 800b30a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b312:	429a      	cmp	r2, r3
 800b314:	d122      	bne.n	800b35c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b320:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b322:	429a      	cmp	r2, r3
 800b324:	d11a      	bne.n	800b35c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	0a5b      	lsrs	r3, r3, #9
 800b32a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b332:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b334:	429a      	cmp	r2, r3
 800b336:	d111      	bne.n	800b35c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	0c1b      	lsrs	r3, r3, #16
 800b33c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b344:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b346:	429a      	cmp	r2, r3
 800b348:	d108      	bne.n	800b35c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	0e1b      	lsrs	r3, r3, #24
 800b34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b356:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b358:	429a      	cmp	r2, r3
 800b35a:	d001      	beq.n	800b360 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e02b      	b.n	800b3b8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b360:	4b17      	ldr	r3, [pc, #92]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b364:	08db      	lsrs	r3, r3, #3
 800b366:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b36a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	429a      	cmp	r2, r3
 800b374:	d01f      	beq.n	800b3b6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b376:	4b12      	ldr	r3, [pc, #72]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37a:	4a11      	ldr	r2, [pc, #68]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b37c:	f023 0301 	bic.w	r3, r3, #1
 800b380:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b382:	f7fe feaf 	bl	800a0e4 <HAL_GetTick>
 800b386:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b388:	bf00      	nop
 800b38a:	f7fe feab 	bl	800a0e4 <HAL_GetTick>
 800b38e:	4602      	mov	r2, r0
 800b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b392:	4293      	cmp	r3, r2
 800b394:	d0f9      	beq.n	800b38a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b396:	4b0a      	ldr	r3, [pc, #40]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b39a:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <HAL_RCC_OscConfig+0x8b0>)
 800b39c:	4013      	ands	r3, r2
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b3a2:	00d2      	lsls	r2, r2, #3
 800b3a4:	4906      	ldr	r1, [pc, #24]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b3aa:	4b05      	ldr	r3, [pc, #20]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ae:	4a04      	ldr	r2, [pc, #16]	; (800b3c0 <HAL_RCC_OscConfig+0x8ac>)
 800b3b0:	f043 0301 	orr.w	r3, r3, #1
 800b3b4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3730      	adds	r7, #48	; 0x30
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	58024400 	.word	0x58024400
 800b3c4:	ffff0007 	.word	0xffff0007

0800b3c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e19c      	b.n	800b716 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3dc:	4b8a      	ldr	r3, [pc, #552]	; (800b608 <HAL_RCC_ClockConfig+0x240>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 030f 	and.w	r3, r3, #15
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d910      	bls.n	800b40c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ea:	4b87      	ldr	r3, [pc, #540]	; (800b608 <HAL_RCC_ClockConfig+0x240>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f023 020f 	bic.w	r2, r3, #15
 800b3f2:	4985      	ldr	r1, [pc, #532]	; (800b608 <HAL_RCC_ClockConfig+0x240>)
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3fa:	4b83      	ldr	r3, [pc, #524]	; (800b608 <HAL_RCC_ClockConfig+0x240>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 030f 	and.w	r3, r3, #15
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	429a      	cmp	r2, r3
 800b406:	d001      	beq.n	800b40c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e184      	b.n	800b716 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 0304 	and.w	r3, r3, #4
 800b414:	2b00      	cmp	r3, #0
 800b416:	d010      	beq.n	800b43a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	691a      	ldr	r2, [r3, #16]
 800b41c:	4b7b      	ldr	r3, [pc, #492]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b424:	429a      	cmp	r2, r3
 800b426:	d908      	bls.n	800b43a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b428:	4b78      	ldr	r3, [pc, #480]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	4975      	ldr	r1, [pc, #468]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b436:	4313      	orrs	r3, r2
 800b438:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 0308 	and.w	r3, r3, #8
 800b442:	2b00      	cmp	r3, #0
 800b444:	d010      	beq.n	800b468 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	695a      	ldr	r2, [r3, #20]
 800b44a:	4b70      	ldr	r3, [pc, #448]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b452:	429a      	cmp	r2, r3
 800b454:	d908      	bls.n	800b468 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b456:	4b6d      	ldr	r3, [pc, #436]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	695b      	ldr	r3, [r3, #20]
 800b462:	496a      	ldr	r1, [pc, #424]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b464:	4313      	orrs	r3, r2
 800b466:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 0310 	and.w	r3, r3, #16
 800b470:	2b00      	cmp	r3, #0
 800b472:	d010      	beq.n	800b496 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	699a      	ldr	r2, [r3, #24]
 800b478:	4b64      	ldr	r3, [pc, #400]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b47a:	69db      	ldr	r3, [r3, #28]
 800b47c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b480:	429a      	cmp	r2, r3
 800b482:	d908      	bls.n	800b496 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b484:	4b61      	ldr	r3, [pc, #388]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b486:	69db      	ldr	r3, [r3, #28]
 800b488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	495e      	ldr	r1, [pc, #376]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b492:	4313      	orrs	r3, r2
 800b494:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0320 	and.w	r3, r3, #32
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d010      	beq.n	800b4c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	69da      	ldr	r2, [r3, #28]
 800b4a6:	4b59      	ldr	r3, [pc, #356]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d908      	bls.n	800b4c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b4b2:	4b56      	ldr	r3, [pc, #344]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b4b4:	6a1b      	ldr	r3, [r3, #32]
 800b4b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	69db      	ldr	r3, [r3, #28]
 800b4be:	4953      	ldr	r1, [pc, #332]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f003 0302 	and.w	r3, r3, #2
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d010      	beq.n	800b4f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	68da      	ldr	r2, [r3, #12]
 800b4d4:	4b4d      	ldr	r3, [pc, #308]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	f003 030f 	and.w	r3, r3, #15
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d908      	bls.n	800b4f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4e0:	4b4a      	ldr	r3, [pc, #296]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	f023 020f 	bic.w	r2, r3, #15
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	4947      	ldr	r1, [pc, #284]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d055      	beq.n	800b5aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b4fe:	4b43      	ldr	r3, [pc, #268]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b500:	699b      	ldr	r3, [r3, #24]
 800b502:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	4940      	ldr	r1, [pc, #256]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b50c:	4313      	orrs	r3, r2
 800b50e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	2b02      	cmp	r3, #2
 800b516:	d107      	bne.n	800b528 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b518:	4b3c      	ldr	r3, [pc, #240]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b520:	2b00      	cmp	r3, #0
 800b522:	d121      	bne.n	800b568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	e0f6      	b.n	800b716 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	2b03      	cmp	r3, #3
 800b52e:	d107      	bne.n	800b540 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b530:	4b36      	ldr	r3, [pc, #216]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d115      	bne.n	800b568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	e0ea      	b.n	800b716 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d107      	bne.n	800b558 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b548:	4b30      	ldr	r3, [pc, #192]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b550:	2b00      	cmp	r3, #0
 800b552:	d109      	bne.n	800b568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	e0de      	b.n	800b716 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b558:	4b2c      	ldr	r3, [pc, #176]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	e0d6      	b.n	800b716 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b568:	4b28      	ldr	r3, [pc, #160]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	f023 0207 	bic.w	r2, r3, #7
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	4925      	ldr	r1, [pc, #148]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b576:	4313      	orrs	r3, r2
 800b578:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b57a:	f7fe fdb3 	bl	800a0e4 <HAL_GetTick>
 800b57e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b580:	e00a      	b.n	800b598 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b582:	f7fe fdaf 	bl	800a0e4 <HAL_GetTick>
 800b586:	4602      	mov	r2, r0
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	1ad3      	subs	r3, r2, r3
 800b58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b590:	4293      	cmp	r3, r2
 800b592:	d901      	bls.n	800b598 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b594:	2303      	movs	r3, #3
 800b596:	e0be      	b.n	800b716 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b598:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	00db      	lsls	r3, r3, #3
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d1eb      	bne.n	800b582 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d010      	beq.n	800b5d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68da      	ldr	r2, [r3, #12]
 800b5ba:	4b14      	ldr	r3, [pc, #80]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	f003 030f 	and.w	r3, r3, #15
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d208      	bcs.n	800b5d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b5c6:	4b11      	ldr	r3, [pc, #68]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	f023 020f 	bic.w	r2, r3, #15
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	490e      	ldr	r1, [pc, #56]	; (800b60c <HAL_RCC_ClockConfig+0x244>)
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5d8:	4b0b      	ldr	r3, [pc, #44]	; (800b608 <HAL_RCC_ClockConfig+0x240>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 030f 	and.w	r3, r3, #15
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d214      	bcs.n	800b610 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5e6:	4b08      	ldr	r3, [pc, #32]	; (800b608 <HAL_RCC_ClockConfig+0x240>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f023 020f 	bic.w	r2, r3, #15
 800b5ee:	4906      	ldr	r1, [pc, #24]	; (800b608 <HAL_RCC_ClockConfig+0x240>)
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5f6:	4b04      	ldr	r3, [pc, #16]	; (800b608 <HAL_RCC_ClockConfig+0x240>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 030f 	and.w	r3, r3, #15
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d005      	beq.n	800b610 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	e086      	b.n	800b716 <HAL_RCC_ClockConfig+0x34e>
 800b608:	52002000 	.word	0x52002000
 800b60c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 0304 	and.w	r3, r3, #4
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d010      	beq.n	800b63e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	691a      	ldr	r2, [r3, #16]
 800b620:	4b3f      	ldr	r3, [pc, #252]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b628:	429a      	cmp	r2, r3
 800b62a:	d208      	bcs.n	800b63e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b62c:	4b3c      	ldr	r3, [pc, #240]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	4939      	ldr	r1, [pc, #228]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b63a:	4313      	orrs	r3, r2
 800b63c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f003 0308 	and.w	r3, r3, #8
 800b646:	2b00      	cmp	r3, #0
 800b648:	d010      	beq.n	800b66c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	695a      	ldr	r2, [r3, #20]
 800b64e:	4b34      	ldr	r3, [pc, #208]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b650:	69db      	ldr	r3, [r3, #28]
 800b652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b656:	429a      	cmp	r2, r3
 800b658:	d208      	bcs.n	800b66c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b65a:	4b31      	ldr	r3, [pc, #196]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	492e      	ldr	r1, [pc, #184]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b668:	4313      	orrs	r3, r2
 800b66a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f003 0310 	and.w	r3, r3, #16
 800b674:	2b00      	cmp	r3, #0
 800b676:	d010      	beq.n	800b69a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	699a      	ldr	r2, [r3, #24]
 800b67c:	4b28      	ldr	r3, [pc, #160]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b67e:	69db      	ldr	r3, [r3, #28]
 800b680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b684:	429a      	cmp	r2, r3
 800b686:	d208      	bcs.n	800b69a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b688:	4b25      	ldr	r3, [pc, #148]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b68a:	69db      	ldr	r3, [r3, #28]
 800b68c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	699b      	ldr	r3, [r3, #24]
 800b694:	4922      	ldr	r1, [pc, #136]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b696:	4313      	orrs	r3, r2
 800b698:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f003 0320 	and.w	r3, r3, #32
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d010      	beq.n	800b6c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	69da      	ldr	r2, [r3, #28]
 800b6aa:	4b1d      	ldr	r3, [pc, #116]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b6ac:	6a1b      	ldr	r3, [r3, #32]
 800b6ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d208      	bcs.n	800b6c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b6b6:	4b1a      	ldr	r3, [pc, #104]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	69db      	ldr	r3, [r3, #28]
 800b6c2:	4917      	ldr	r1, [pc, #92]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6c8:	f000 f834 	bl	800b734 <HAL_RCC_GetSysClockFreq>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	4b14      	ldr	r3, [pc, #80]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	0a1b      	lsrs	r3, r3, #8
 800b6d4:	f003 030f 	and.w	r3, r3, #15
 800b6d8:	4912      	ldr	r1, [pc, #72]	; (800b724 <HAL_RCC_ClockConfig+0x35c>)
 800b6da:	5ccb      	ldrb	r3, [r1, r3]
 800b6dc:	f003 031f 	and.w	r3, r3, #31
 800b6e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6e6:	4b0e      	ldr	r3, [pc, #56]	; (800b720 <HAL_RCC_ClockConfig+0x358>)
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	f003 030f 	and.w	r3, r3, #15
 800b6ee:	4a0d      	ldr	r2, [pc, #52]	; (800b724 <HAL_RCC_ClockConfig+0x35c>)
 800b6f0:	5cd3      	ldrb	r3, [r2, r3]
 800b6f2:	f003 031f 	and.w	r3, r3, #31
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6fc:	4a0a      	ldr	r2, [pc, #40]	; (800b728 <HAL_RCC_ClockConfig+0x360>)
 800b6fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b700:	4a0a      	ldr	r2, [pc, #40]	; (800b72c <HAL_RCC_ClockConfig+0x364>)
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b706:	4b0a      	ldr	r3, [pc, #40]	; (800b730 <HAL_RCC_ClockConfig+0x368>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fe fca0 	bl	800a050 <HAL_InitTick>
 800b710:	4603      	mov	r3, r0
 800b712:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b714:	7bfb      	ldrb	r3, [r7, #15]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	58024400 	.word	0x58024400
 800b724:	08011810 	.word	0x08011810
 800b728:	24000044 	.word	0x24000044
 800b72c:	24000040 	.word	0x24000040
 800b730:	24000048 	.word	0x24000048

0800b734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b734:	b480      	push	{r7}
 800b736:	b089      	sub	sp, #36	; 0x24
 800b738:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b73a:	4bb3      	ldr	r3, [pc, #716]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b742:	2b18      	cmp	r3, #24
 800b744:	f200 8155 	bhi.w	800b9f2 <HAL_RCC_GetSysClockFreq+0x2be>
 800b748:	a201      	add	r2, pc, #4	; (adr r2, 800b750 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74e:	bf00      	nop
 800b750:	0800b7b5 	.word	0x0800b7b5
 800b754:	0800b9f3 	.word	0x0800b9f3
 800b758:	0800b9f3 	.word	0x0800b9f3
 800b75c:	0800b9f3 	.word	0x0800b9f3
 800b760:	0800b9f3 	.word	0x0800b9f3
 800b764:	0800b9f3 	.word	0x0800b9f3
 800b768:	0800b9f3 	.word	0x0800b9f3
 800b76c:	0800b9f3 	.word	0x0800b9f3
 800b770:	0800b7db 	.word	0x0800b7db
 800b774:	0800b9f3 	.word	0x0800b9f3
 800b778:	0800b9f3 	.word	0x0800b9f3
 800b77c:	0800b9f3 	.word	0x0800b9f3
 800b780:	0800b9f3 	.word	0x0800b9f3
 800b784:	0800b9f3 	.word	0x0800b9f3
 800b788:	0800b9f3 	.word	0x0800b9f3
 800b78c:	0800b9f3 	.word	0x0800b9f3
 800b790:	0800b7e1 	.word	0x0800b7e1
 800b794:	0800b9f3 	.word	0x0800b9f3
 800b798:	0800b9f3 	.word	0x0800b9f3
 800b79c:	0800b9f3 	.word	0x0800b9f3
 800b7a0:	0800b9f3 	.word	0x0800b9f3
 800b7a4:	0800b9f3 	.word	0x0800b9f3
 800b7a8:	0800b9f3 	.word	0x0800b9f3
 800b7ac:	0800b9f3 	.word	0x0800b9f3
 800b7b0:	0800b7e7 	.word	0x0800b7e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7b4:	4b94      	ldr	r3, [pc, #592]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 0320 	and.w	r3, r3, #32
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d009      	beq.n	800b7d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7c0:	4b91      	ldr	r3, [pc, #580]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	08db      	lsrs	r3, r3, #3
 800b7c6:	f003 0303 	and.w	r3, r3, #3
 800b7ca:	4a90      	ldr	r2, [pc, #576]	; (800ba0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b7d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b7d2:	e111      	b.n	800b9f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b7d4:	4b8d      	ldr	r3, [pc, #564]	; (800ba0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7d6:	61bb      	str	r3, [r7, #24]
      break;
 800b7d8:	e10e      	b.n	800b9f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b7da:	4b8d      	ldr	r3, [pc, #564]	; (800ba10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b7dc:	61bb      	str	r3, [r7, #24]
      break;
 800b7de:	e10b      	b.n	800b9f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b7e0:	4b8c      	ldr	r3, [pc, #560]	; (800ba14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b7e2:	61bb      	str	r3, [r7, #24]
      break;
 800b7e4:	e108      	b.n	800b9f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7e6:	4b88      	ldr	r3, [pc, #544]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ea:	f003 0303 	and.w	r3, r3, #3
 800b7ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b7f0:	4b85      	ldr	r3, [pc, #532]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f4:	091b      	lsrs	r3, r3, #4
 800b7f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b7fc:	4b82      	ldr	r3, [pc, #520]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b806:	4b80      	ldr	r3, [pc, #512]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80a:	08db      	lsrs	r3, r3, #3
 800b80c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	fb02 f303 	mul.w	r3, r2, r3
 800b816:	ee07 3a90 	vmov	s15, r3
 800b81a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 80e1 	beq.w	800b9ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	f000 8083 	beq.w	800b938 <HAL_RCC_GetSysClockFreq+0x204>
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	2b02      	cmp	r3, #2
 800b836:	f200 80a1 	bhi.w	800b97c <HAL_RCC_GetSysClockFreq+0x248>
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d003      	beq.n	800b848 <HAL_RCC_GetSysClockFreq+0x114>
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d056      	beq.n	800b8f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b846:	e099      	b.n	800b97c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b848:	4b6f      	ldr	r3, [pc, #444]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 0320 	and.w	r3, r3, #32
 800b850:	2b00      	cmp	r3, #0
 800b852:	d02d      	beq.n	800b8b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b854:	4b6c      	ldr	r3, [pc, #432]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	08db      	lsrs	r3, r3, #3
 800b85a:	f003 0303 	and.w	r3, r3, #3
 800b85e:	4a6b      	ldr	r2, [pc, #428]	; (800ba0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b860:	fa22 f303 	lsr.w	r3, r2, r3
 800b864:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	ee07 3a90 	vmov	s15, r3
 800b86c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	ee07 3a90 	vmov	s15, r3
 800b876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b87e:	4b62      	ldr	r3, [pc, #392]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b886:	ee07 3a90 	vmov	s15, r3
 800b88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b892:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ba18 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b89e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b8ae:	e087      	b.n	800b9c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	ee07 3a90 	vmov	s15, r3
 800b8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ba1c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8c2:	4b51      	ldr	r3, [pc, #324]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ca:	ee07 3a90 	vmov	s15, r3
 800b8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ba18 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b8f2:	e065      	b.n	800b9c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ba20 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b906:	4b40      	ldr	r3, [pc, #256]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b90e:	ee07 3a90 	vmov	s15, r3
 800b912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b916:	ed97 6a02 	vldr	s12, [r7, #8]
 800b91a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ba18 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b91e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b92a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b92e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b932:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b936:	e043      	b.n	800b9c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	ee07 3a90 	vmov	s15, r3
 800b93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b942:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ba24 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b94a:	4b2f      	ldr	r3, [pc, #188]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b94e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b952:	ee07 3a90 	vmov	s15, r3
 800b956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b95a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b95e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ba18 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b96a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b96e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b972:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b976:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b97a:	e021      	b.n	800b9c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	ee07 3a90 	vmov	s15, r3
 800b982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b986:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ba20 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b98a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b98e:	4b1e      	ldr	r3, [pc, #120]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b996:	ee07 3a90 	vmov	s15, r3
 800b99a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b99e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b9a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ba18 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b9a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b9be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b9c0:	4b11      	ldr	r3, [pc, #68]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c4:	0a5b      	lsrs	r3, r3, #9
 800b9c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	ee07 3a90 	vmov	s15, r3
 800b9d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b9d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9e4:	ee17 3a90 	vmov	r3, s15
 800b9e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b9ea:	e005      	b.n	800b9f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	61bb      	str	r3, [r7, #24]
      break;
 800b9f0:	e002      	b.n	800b9f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b9f2:	4b07      	ldr	r3, [pc, #28]	; (800ba10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b9f4:	61bb      	str	r3, [r7, #24]
      break;
 800b9f6:	bf00      	nop
  }

  return sysclockfreq;
 800b9f8:	69bb      	ldr	r3, [r7, #24]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3724      	adds	r7, #36	; 0x24
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	58024400 	.word	0x58024400
 800ba0c:	03d09000 	.word	0x03d09000
 800ba10:	003d0900 	.word	0x003d0900
 800ba14:	017d7840 	.word	0x017d7840
 800ba18:	46000000 	.word	0x46000000
 800ba1c:	4c742400 	.word	0x4c742400
 800ba20:	4a742400 	.word	0x4a742400
 800ba24:	4bbebc20 	.word	0x4bbebc20

0800ba28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba2e:	f7ff fe81 	bl	800b734 <HAL_RCC_GetSysClockFreq>
 800ba32:	4602      	mov	r2, r0
 800ba34:	4b10      	ldr	r3, [pc, #64]	; (800ba78 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	0a1b      	lsrs	r3, r3, #8
 800ba3a:	f003 030f 	and.w	r3, r3, #15
 800ba3e:	490f      	ldr	r1, [pc, #60]	; (800ba7c <HAL_RCC_GetHCLKFreq+0x54>)
 800ba40:	5ccb      	ldrb	r3, [r1, r3]
 800ba42:	f003 031f 	and.w	r3, r3, #31
 800ba46:	fa22 f303 	lsr.w	r3, r2, r3
 800ba4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba4c:	4b0a      	ldr	r3, [pc, #40]	; (800ba78 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	f003 030f 	and.w	r3, r3, #15
 800ba54:	4a09      	ldr	r2, [pc, #36]	; (800ba7c <HAL_RCC_GetHCLKFreq+0x54>)
 800ba56:	5cd3      	ldrb	r3, [r2, r3]
 800ba58:	f003 031f 	and.w	r3, r3, #31
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba62:	4a07      	ldr	r2, [pc, #28]	; (800ba80 <HAL_RCC_GetHCLKFreq+0x58>)
 800ba64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba66:	4a07      	ldr	r2, [pc, #28]	; (800ba84 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ba6c:	4b04      	ldr	r3, [pc, #16]	; (800ba80 <HAL_RCC_GetHCLKFreq+0x58>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	58024400 	.word	0x58024400
 800ba7c:	08011810 	.word	0x08011810
 800ba80:	24000044 	.word	0x24000044
 800ba84:	24000040 	.word	0x24000040

0800ba88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ba8c:	f7ff ffcc 	bl	800ba28 <HAL_RCC_GetHCLKFreq>
 800ba90:	4602      	mov	r2, r0
 800ba92:	4b06      	ldr	r3, [pc, #24]	; (800baac <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba94:	69db      	ldr	r3, [r3, #28]
 800ba96:	091b      	lsrs	r3, r3, #4
 800ba98:	f003 0307 	and.w	r3, r3, #7
 800ba9c:	4904      	ldr	r1, [pc, #16]	; (800bab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ba9e:	5ccb      	ldrb	r3, [r1, r3]
 800baa0:	f003 031f 	and.w	r3, r3, #31
 800baa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	58024400 	.word	0x58024400
 800bab0:	08011810 	.word	0x08011810

0800bab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bab8:	f7ff ffb6 	bl	800ba28 <HAL_RCC_GetHCLKFreq>
 800babc:	4602      	mov	r2, r0
 800babe:	4b06      	ldr	r3, [pc, #24]	; (800bad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bac0:	69db      	ldr	r3, [r3, #28]
 800bac2:	0a1b      	lsrs	r3, r3, #8
 800bac4:	f003 0307 	and.w	r3, r3, #7
 800bac8:	4904      	ldr	r1, [pc, #16]	; (800badc <HAL_RCC_GetPCLK2Freq+0x28>)
 800baca:	5ccb      	ldrb	r3, [r1, r3]
 800bacc:	f003 031f 	and.w	r3, r3, #31
 800bad0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	58024400 	.word	0x58024400
 800badc:	08011810 	.word	0x08011810

0800bae0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bae4:	b0ca      	sub	sp, #296	; 0x128
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800baec:	2300      	movs	r3, #0
 800baee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800baf2:	2300      	movs	r3, #0
 800baf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800baf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800bb04:	2500      	movs	r5, #0
 800bb06:	ea54 0305 	orrs.w	r3, r4, r5
 800bb0a:	d049      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bb0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb16:	d02f      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800bb18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb1c:	d828      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb22:	d01a      	beq.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bb24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb28:	d822      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bb2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb32:	d007      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bb34:	e01c      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb36:	4bb8      	ldr	r3, [pc, #736]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3a:	4ab7      	ldr	r2, [pc, #732]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb42:	e01a      	b.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb48:	3308      	adds	r3, #8
 800bb4a:	2102      	movs	r1, #2
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f001 fc8f 	bl	800d470 <RCCEx_PLL2_Config>
 800bb52:	4603      	mov	r3, r0
 800bb54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb58:	e00f      	b.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5e:	3328      	adds	r3, #40	; 0x28
 800bb60:	2102      	movs	r1, #2
 800bb62:	4618      	mov	r0, r3
 800bb64:	f001 fd36 	bl	800d5d4 <RCCEx_PLL3_Config>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb6e:	e004      	b.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb76:	e000      	b.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800bb78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10a      	bne.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bb82:	4ba5      	ldr	r3, [pc, #660]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb90:	4aa1      	ldr	r2, [pc, #644]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb92:	430b      	orrs	r3, r1
 800bb94:	6513      	str	r3, [r2, #80]	; 0x50
 800bb96:	e003      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800bbac:	f04f 0900 	mov.w	r9, #0
 800bbb0:	ea58 0309 	orrs.w	r3, r8, r9
 800bbb4:	d047      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800bbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbbc:	2b04      	cmp	r3, #4
 800bbbe:	d82a      	bhi.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bbc0:	a201      	add	r2, pc, #4	; (adr r2, 800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800bbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc6:	bf00      	nop
 800bbc8:	0800bbdd 	.word	0x0800bbdd
 800bbcc:	0800bbeb 	.word	0x0800bbeb
 800bbd0:	0800bc01 	.word	0x0800bc01
 800bbd4:	0800bc1f 	.word	0x0800bc1f
 800bbd8:	0800bc1f 	.word	0x0800bc1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbdc:	4b8e      	ldr	r3, [pc, #568]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe0:	4a8d      	ldr	r2, [pc, #564]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bbe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbe8:	e01a      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbee:	3308      	adds	r3, #8
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f001 fc3c 	bl	800d470 <RCCEx_PLL2_Config>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbfe:	e00f      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc04:	3328      	adds	r3, #40	; 0x28
 800bc06:	2100      	movs	r1, #0
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f001 fce3 	bl	800d5d4 <RCCEx_PLL3_Config>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc14:	e004      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc1c:	e000      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bc1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10a      	bne.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc28:	4b7b      	ldr	r3, [pc, #492]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc2c:	f023 0107 	bic.w	r1, r3, #7
 800bc30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc36:	4a78      	ldr	r2, [pc, #480]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc38:	430b      	orrs	r3, r1
 800bc3a:	6513      	str	r3, [r2, #80]	; 0x50
 800bc3c:	e003      	b.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bc46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800bc52:	f04f 0b00 	mov.w	fp, #0
 800bc56:	ea5a 030b 	orrs.w	r3, sl, fp
 800bc5a:	d04c      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800bc5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc66:	d030      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800bc68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc6c:	d829      	bhi.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bc6e:	2bc0      	cmp	r3, #192	; 0xc0
 800bc70:	d02d      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bc72:	2bc0      	cmp	r3, #192	; 0xc0
 800bc74:	d825      	bhi.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bc76:	2b80      	cmp	r3, #128	; 0x80
 800bc78:	d018      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800bc7a:	2b80      	cmp	r3, #128	; 0x80
 800bc7c:	d821      	bhi.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d002      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800bc82:	2b40      	cmp	r3, #64	; 0x40
 800bc84:	d007      	beq.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800bc86:	e01c      	b.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc88:	4b63      	ldr	r3, [pc, #396]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8c:	4a62      	ldr	r2, [pc, #392]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bc94:	e01c      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc9a:	3308      	adds	r3, #8
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f001 fbe6 	bl	800d470 <RCCEx_PLL2_Config>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bcaa:	e011      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb0:	3328      	adds	r3, #40	; 0x28
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f001 fc8d 	bl	800d5d4 <RCCEx_PLL3_Config>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bcc0:	e006      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcc8:	e002      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800bcca:	bf00      	nop
 800bccc:	e000      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800bcce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10a      	bne.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bcd8:	4b4f      	ldr	r3, [pc, #316]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bcda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcdc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800bce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bce6:	4a4c      	ldr	r2, [pc, #304]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bce8:	430b      	orrs	r3, r1
 800bcea:	6513      	str	r3, [r2, #80]	; 0x50
 800bcec:	e003      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bcf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800bd02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800bd06:	2300      	movs	r3, #0
 800bd08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800bd0c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800bd10:	460b      	mov	r3, r1
 800bd12:	4313      	orrs	r3, r2
 800bd14:	d053      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bd1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd22:	d035      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800bd24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd28:	d82e      	bhi.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bd2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd2e:	d031      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800bd30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd34:	d828      	bhi.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bd36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd3a:	d01a      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800bd3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd40:	d822      	bhi.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d003      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800bd46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd4a:	d007      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800bd4c:	e01c      	b.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd4e:	4b32      	ldr	r3, [pc, #200]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd52:	4a31      	ldr	r2, [pc, #196]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bd54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd5a:	e01c      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd60:	3308      	adds	r3, #8
 800bd62:	2100      	movs	r1, #0
 800bd64:	4618      	mov	r0, r3
 800bd66:	f001 fb83 	bl	800d470 <RCCEx_PLL2_Config>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bd70:	e011      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd76:	3328      	adds	r3, #40	; 0x28
 800bd78:	2100      	movs	r1, #0
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f001 fc2a 	bl	800d5d4 <RCCEx_PLL3_Config>
 800bd80:	4603      	mov	r3, r0
 800bd82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd86:	e006      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd8e:	e002      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800bd90:	bf00      	nop
 800bd92:	e000      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800bd94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10b      	bne.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bd9e:	4b1e      	ldr	r3, [pc, #120]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bda0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bda2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800bda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bdae:	4a1a      	ldr	r2, [pc, #104]	; (800be18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bdb0:	430b      	orrs	r3, r1
 800bdb2:	6593      	str	r3, [r2, #88]	; 0x58
 800bdb4:	e003      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bdbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800bdca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bdd4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4313      	orrs	r3, r2
 800bddc:	d056      	beq.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bdde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bde6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bdea:	d038      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bdec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bdf0:	d831      	bhi.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bdf2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bdf6:	d034      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800bdf8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bdfc:	d82b      	bhi.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bdfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be02:	d01d      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800be04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be08:	d825      	bhi.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d006      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800be0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be12:	d00a      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800be14:	e01f      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800be16:	bf00      	nop
 800be18:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be1c:	4ba2      	ldr	r3, [pc, #648]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be20:	4aa1      	ldr	r2, [pc, #644]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800be28:	e01c      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be2e:	3308      	adds	r3, #8
 800be30:	2100      	movs	r1, #0
 800be32:	4618      	mov	r0, r3
 800be34:	f001 fb1c 	bl	800d470 <RCCEx_PLL2_Config>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800be3e:	e011      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be44:	3328      	adds	r3, #40	; 0x28
 800be46:	2100      	movs	r1, #0
 800be48:	4618      	mov	r0, r3
 800be4a:	f001 fbc3 	bl	800d5d4 <RCCEx_PLL3_Config>
 800be4e:	4603      	mov	r3, r0
 800be50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800be54:	e006      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be5c:	e002      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800be5e:	bf00      	nop
 800be60:	e000      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800be62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10b      	bne.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800be6c:	4b8e      	ldr	r3, [pc, #568]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be70:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800be74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be7c:	4a8a      	ldr	r2, [pc, #552]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be7e:	430b      	orrs	r3, r1
 800be80:	6593      	str	r3, [r2, #88]	; 0x58
 800be82:	e003      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800be8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be94:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800be98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800be9c:	2300      	movs	r3, #0
 800be9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bea2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800bea6:	460b      	mov	r3, r1
 800bea8:	4313      	orrs	r3, r2
 800beaa:	d03a      	beq.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800beac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beb2:	2b30      	cmp	r3, #48	; 0x30
 800beb4:	d01f      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800beb6:	2b30      	cmp	r3, #48	; 0x30
 800beb8:	d819      	bhi.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800beba:	2b20      	cmp	r3, #32
 800bebc:	d00c      	beq.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bebe:	2b20      	cmp	r3, #32
 800bec0:	d815      	bhi.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d019      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800bec6:	2b10      	cmp	r3, #16
 800bec8:	d111      	bne.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800beca:	4b77      	ldr	r3, [pc, #476]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800becc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bece:	4a76      	ldr	r2, [pc, #472]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bed4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bed6:	e011      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bedc:	3308      	adds	r3, #8
 800bede:	2102      	movs	r1, #2
 800bee0:	4618      	mov	r0, r3
 800bee2:	f001 fac5 	bl	800d470 <RCCEx_PLL2_Config>
 800bee6:	4603      	mov	r3, r0
 800bee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800beec:	e006      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800beee:	2301      	movs	r3, #1
 800bef0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bef4:	e002      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bef6:	bf00      	nop
 800bef8:	e000      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800befa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800befc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10a      	bne.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bf04:	4b68      	ldr	r3, [pc, #416]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bf06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf08:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bf0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf12:	4a65      	ldr	r2, [pc, #404]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bf14:	430b      	orrs	r3, r1
 800bf16:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf18:	e003      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bf22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bf2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf32:	2300      	movs	r3, #0
 800bf34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bf38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	d051      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bf42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf4c:	d035      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800bf4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf52:	d82e      	bhi.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bf54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf58:	d031      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800bf5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf5e:	d828      	bhi.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bf60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf64:	d01a      	beq.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800bf66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf6a:	d822      	bhi.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d003      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800bf70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf74:	d007      	beq.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800bf76:	e01c      	b.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf78:	4b4b      	ldr	r3, [pc, #300]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bf7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7c:	4a4a      	ldr	r2, [pc, #296]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bf7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf84:	e01c      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f001 fa6e 	bl	800d470 <RCCEx_PLL2_Config>
 800bf94:	4603      	mov	r3, r0
 800bf96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf9a:	e011      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfa0:	3328      	adds	r3, #40	; 0x28
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f001 fb15 	bl	800d5d4 <RCCEx_PLL3_Config>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bfb0:	e006      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfb8:	e002      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800bfba:	bf00      	nop
 800bfbc:	e000      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800bfbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10a      	bne.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bfc8:	4b37      	ldr	r3, [pc, #220]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bfca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfcc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bfd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfd6:	4a34      	ldr	r2, [pc, #208]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bfd8:	430b      	orrs	r3, r1
 800bfda:	6513      	str	r3, [r2, #80]	; 0x50
 800bfdc:	e003      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bfe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bff6:	2300      	movs	r3, #0
 800bff8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bffc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800c000:	460b      	mov	r3, r1
 800c002:	4313      	orrs	r3, r2
 800c004:	d056      	beq.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c00a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c00c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c010:	d033      	beq.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800c012:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c016:	d82c      	bhi.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c018:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c01c:	d02f      	beq.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800c01e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c022:	d826      	bhi.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c024:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c028:	d02b      	beq.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800c02a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c02e:	d820      	bhi.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c034:	d012      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800c036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c03a:	d81a      	bhi.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d022      	beq.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800c040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c044:	d115      	bne.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c04a:	3308      	adds	r3, #8
 800c04c:	2101      	movs	r1, #1
 800c04e:	4618      	mov	r0, r3
 800c050:	f001 fa0e 	bl	800d470 <RCCEx_PLL2_Config>
 800c054:	4603      	mov	r3, r0
 800c056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c05a:	e015      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c060:	3328      	adds	r3, #40	; 0x28
 800c062:	2101      	movs	r1, #1
 800c064:	4618      	mov	r0, r3
 800c066:	f001 fab5 	bl	800d5d4 <RCCEx_PLL3_Config>
 800c06a:	4603      	mov	r3, r0
 800c06c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c070:	e00a      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c078:	e006      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c07a:	bf00      	nop
 800c07c:	e004      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c07e:	bf00      	nop
 800c080:	e002      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c082:	bf00      	nop
 800c084:	e000      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c086:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10d      	bne.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c090:	4b05      	ldr	r3, [pc, #20]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c094:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800c098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c09c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c09e:	4a02      	ldr	r2, [pc, #8]	; (800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c0a0:	430b      	orrs	r3, r1
 800c0a2:	6513      	str	r3, [r2, #80]	; 0x50
 800c0a4:	e006      	b.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c0a6:	bf00      	nop
 800c0a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0bc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800c0c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c0ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	d055      	beq.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0e0:	d033      	beq.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800c0e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0e6:	d82c      	bhi.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0ec:	d02f      	beq.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800c0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0f2:	d826      	bhi.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c0f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0f8:	d02b      	beq.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800c0fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0fe:	d820      	bhi.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c104:	d012      	beq.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800c106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c10a:	d81a      	bhi.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d022      	beq.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800c110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c114:	d115      	bne.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c11a:	3308      	adds	r3, #8
 800c11c:	2101      	movs	r1, #1
 800c11e:	4618      	mov	r0, r3
 800c120:	f001 f9a6 	bl	800d470 <RCCEx_PLL2_Config>
 800c124:	4603      	mov	r3, r0
 800c126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c12a:	e015      	b.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c130:	3328      	adds	r3, #40	; 0x28
 800c132:	2101      	movs	r1, #1
 800c134:	4618      	mov	r0, r3
 800c136:	f001 fa4d 	bl	800d5d4 <RCCEx_PLL3_Config>
 800c13a:	4603      	mov	r3, r0
 800c13c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c140:	e00a      	b.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c148:	e006      	b.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c14a:	bf00      	nop
 800c14c:	e004      	b.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c14e:	bf00      	nop
 800c150:	e002      	b.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c152:	bf00      	nop
 800c154:	e000      	b.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c156:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c158:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10b      	bne.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c160:	4ba3      	ldr	r3, [pc, #652]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c164:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c16c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c170:	4a9f      	ldr	r2, [pc, #636]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c172:	430b      	orrs	r3, r1
 800c174:	6593      	str	r3, [r2, #88]	; 0x58
 800c176:	e003      	b.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c17c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800c18c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c190:	2300      	movs	r3, #0
 800c192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c19a:	460b      	mov	r3, r1
 800c19c:	4313      	orrs	r3, r2
 800c19e:	d037      	beq.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1aa:	d00e      	beq.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800c1ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1b0:	d816      	bhi.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d018      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800c1b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1ba:	d111      	bne.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1bc:	4b8c      	ldr	r3, [pc, #560]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c0:	4a8b      	ldr	r2, [pc, #556]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c1c8:	e00f      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ce:	3308      	adds	r3, #8
 800c1d0:	2101      	movs	r1, #1
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f001 f94c 	bl	800d470 <RCCEx_PLL2_Config>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c1de:	e004      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1e6:	e000      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800c1e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10a      	bne.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c1f2:	4b7f      	ldr	r3, [pc, #508]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c200:	4a7b      	ldr	r2, [pc, #492]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c202:	430b      	orrs	r3, r1
 800c204:	6513      	str	r3, [r2, #80]	; 0x50
 800c206:	e003      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c20c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c218:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800c21c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c220:	2300      	movs	r3, #0
 800c222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c226:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800c22a:	460b      	mov	r3, r1
 800c22c:	4313      	orrs	r3, r2
 800c22e:	d039      	beq.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c236:	2b03      	cmp	r3, #3
 800c238:	d81c      	bhi.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800c23a:	a201      	add	r2, pc, #4	; (adr r2, 800c240 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800c23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c240:	0800c27d 	.word	0x0800c27d
 800c244:	0800c251 	.word	0x0800c251
 800c248:	0800c25f 	.word	0x0800c25f
 800c24c:	0800c27d 	.word	0x0800c27d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c250:	4b67      	ldr	r3, [pc, #412]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c254:	4a66      	ldr	r2, [pc, #408]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c25a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c25c:	e00f      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c262:	3308      	adds	r3, #8
 800c264:	2102      	movs	r1, #2
 800c266:	4618      	mov	r0, r3
 800c268:	f001 f902 	bl	800d470 <RCCEx_PLL2_Config>
 800c26c:	4603      	mov	r3, r0
 800c26e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c272:	e004      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c27a:	e000      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800c27c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c27e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10a      	bne.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c286:	4b5a      	ldr	r3, [pc, #360]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c28a:	f023 0103 	bic.w	r1, r3, #3
 800c28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c294:	4a56      	ldr	r2, [pc, #344]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c296:	430b      	orrs	r3, r1
 800c298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c29a:	e003      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c29c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c2b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c2ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	f000 809f 	beq.w	800c404 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c2c6:	4b4b      	ldr	r3, [pc, #300]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a4a      	ldr	r2, [pc, #296]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c2cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c2d2:	f7fd ff07 	bl	800a0e4 <HAL_GetTick>
 800c2d6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2da:	e00b      	b.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2dc:	f7fd ff02 	bl	800a0e4 <HAL_GetTick>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	2b64      	cmp	r3, #100	; 0x64
 800c2ea:	d903      	bls.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c2f2:	e005      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2f4:	4b3f      	ldr	r3, [pc, #252]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d0ed      	beq.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800c300:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c304:	2b00      	cmp	r3, #0
 800c306:	d179      	bne.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c308:	4b39      	ldr	r3, [pc, #228]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c30a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c314:	4053      	eors	r3, r2
 800c316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d015      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c31e:	4b34      	ldr	r3, [pc, #208]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c326:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c32a:	4b31      	ldr	r3, [pc, #196]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c32e:	4a30      	ldr	r2, [pc, #192]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c334:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c336:	4b2e      	ldr	r3, [pc, #184]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c33a:	4a2d      	ldr	r2, [pc, #180]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c33c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c340:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c342:	4a2b      	ldr	r2, [pc, #172]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c344:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c348:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c34e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c356:	d118      	bne.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c358:	f7fd fec4 	bl	800a0e4 <HAL_GetTick>
 800c35c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c360:	e00d      	b.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c362:	f7fd febf 	bl	800a0e4 <HAL_GetTick>
 800c366:	4602      	mov	r2, r0
 800c368:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c36c:	1ad2      	subs	r2, r2, r3
 800c36e:	f241 3388 	movw	r3, #5000	; 0x1388
 800c372:	429a      	cmp	r2, r3
 800c374:	d903      	bls.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800c376:	2303      	movs	r3, #3
 800c378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800c37c:	e005      	b.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c37e:	4b1c      	ldr	r3, [pc, #112]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d0eb      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800c38a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d129      	bne.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c396:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c39a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c39e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3a2:	d10e      	bne.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800c3a4:	4b12      	ldr	r3, [pc, #72]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c3b4:	091a      	lsrs	r2, r3, #4
 800c3b6:	4b10      	ldr	r3, [pc, #64]	; (800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	4a0d      	ldr	r2, [pc, #52]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c3bc:	430b      	orrs	r3, r1
 800c3be:	6113      	str	r3, [r2, #16]
 800c3c0:	e005      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800c3c2:	4b0b      	ldr	r3, [pc, #44]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	4a0a      	ldr	r2, [pc, #40]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c3c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c3cc:	6113      	str	r3, [r2, #16]
 800c3ce:	4b08      	ldr	r3, [pc, #32]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c3d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c3da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3de:	4a04      	ldr	r2, [pc, #16]	; (800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c3e0:	430b      	orrs	r3, r1
 800c3e2:	6713      	str	r3, [r2, #112]	; 0x70
 800c3e4:	e00e      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c3e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800c3ee:	e009      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800c3f0:	58024400 	.word	0x58024400
 800c3f4:	58024800 	.word	0x58024800
 800c3f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c400:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f002 0301 	and.w	r3, r2, #1
 800c410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c414:	2300      	movs	r3, #0
 800c416:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c41a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c41e:	460b      	mov	r3, r1
 800c420:	4313      	orrs	r3, r2
 800c422:	f000 8089 	beq.w	800c538 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c42a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c42c:	2b28      	cmp	r3, #40	; 0x28
 800c42e:	d86b      	bhi.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800c430:	a201      	add	r2, pc, #4	; (adr r2, 800c438 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c436:	bf00      	nop
 800c438:	0800c511 	.word	0x0800c511
 800c43c:	0800c509 	.word	0x0800c509
 800c440:	0800c509 	.word	0x0800c509
 800c444:	0800c509 	.word	0x0800c509
 800c448:	0800c509 	.word	0x0800c509
 800c44c:	0800c509 	.word	0x0800c509
 800c450:	0800c509 	.word	0x0800c509
 800c454:	0800c509 	.word	0x0800c509
 800c458:	0800c4dd 	.word	0x0800c4dd
 800c45c:	0800c509 	.word	0x0800c509
 800c460:	0800c509 	.word	0x0800c509
 800c464:	0800c509 	.word	0x0800c509
 800c468:	0800c509 	.word	0x0800c509
 800c46c:	0800c509 	.word	0x0800c509
 800c470:	0800c509 	.word	0x0800c509
 800c474:	0800c509 	.word	0x0800c509
 800c478:	0800c4f3 	.word	0x0800c4f3
 800c47c:	0800c509 	.word	0x0800c509
 800c480:	0800c509 	.word	0x0800c509
 800c484:	0800c509 	.word	0x0800c509
 800c488:	0800c509 	.word	0x0800c509
 800c48c:	0800c509 	.word	0x0800c509
 800c490:	0800c509 	.word	0x0800c509
 800c494:	0800c509 	.word	0x0800c509
 800c498:	0800c511 	.word	0x0800c511
 800c49c:	0800c509 	.word	0x0800c509
 800c4a0:	0800c509 	.word	0x0800c509
 800c4a4:	0800c509 	.word	0x0800c509
 800c4a8:	0800c509 	.word	0x0800c509
 800c4ac:	0800c509 	.word	0x0800c509
 800c4b0:	0800c509 	.word	0x0800c509
 800c4b4:	0800c509 	.word	0x0800c509
 800c4b8:	0800c511 	.word	0x0800c511
 800c4bc:	0800c509 	.word	0x0800c509
 800c4c0:	0800c509 	.word	0x0800c509
 800c4c4:	0800c509 	.word	0x0800c509
 800c4c8:	0800c509 	.word	0x0800c509
 800c4cc:	0800c509 	.word	0x0800c509
 800c4d0:	0800c509 	.word	0x0800c509
 800c4d4:	0800c509 	.word	0x0800c509
 800c4d8:	0800c511 	.word	0x0800c511
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4e0:	3308      	adds	r3, #8
 800c4e2:	2101      	movs	r1, #1
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f000 ffc3 	bl	800d470 <RCCEx_PLL2_Config>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c4f0:	e00f      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4f6:	3328      	adds	r3, #40	; 0x28
 800c4f8:	2101      	movs	r1, #1
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f001 f86a 	bl	800d5d4 <RCCEx_PLL3_Config>
 800c500:	4603      	mov	r3, r0
 800c502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c506:	e004      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c50e:	e000      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800c510:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10a      	bne.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c51a:	4bbf      	ldr	r3, [pc, #764]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c51e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c528:	4abb      	ldr	r2, [pc, #748]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c52a:	430b      	orrs	r3, r1
 800c52c:	6553      	str	r3, [r2, #84]	; 0x54
 800c52e:	e003      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	f002 0302 	and.w	r3, r2, #2
 800c544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c548:	2300      	movs	r3, #0
 800c54a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c54e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c552:	460b      	mov	r3, r1
 800c554:	4313      	orrs	r3, r2
 800c556:	d041      	beq.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c55c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c55e:	2b05      	cmp	r3, #5
 800c560:	d824      	bhi.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800c562:	a201      	add	r2, pc, #4	; (adr r2, 800c568 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800c564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c568:	0800c5b5 	.word	0x0800c5b5
 800c56c:	0800c581 	.word	0x0800c581
 800c570:	0800c597 	.word	0x0800c597
 800c574:	0800c5b5 	.word	0x0800c5b5
 800c578:	0800c5b5 	.word	0x0800c5b5
 800c57c:	0800c5b5 	.word	0x0800c5b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c584:	3308      	adds	r3, #8
 800c586:	2101      	movs	r1, #1
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 ff71 	bl	800d470 <RCCEx_PLL2_Config>
 800c58e:	4603      	mov	r3, r0
 800c590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c594:	e00f      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c59a:	3328      	adds	r3, #40	; 0x28
 800c59c:	2101      	movs	r1, #1
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f001 f818 	bl	800d5d4 <RCCEx_PLL3_Config>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c5aa:	e004      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c5b2:	e000      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800c5b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10a      	bne.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c5be:	4b96      	ldr	r3, [pc, #600]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5c2:	f023 0107 	bic.w	r1, r3, #7
 800c5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5cc:	4a92      	ldr	r2, [pc, #584]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c5ce:	430b      	orrs	r3, r1
 800c5d0:	6553      	str	r3, [r2, #84]	; 0x54
 800c5d2:	e003      	b.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	f002 0304 	and.w	r3, r2, #4
 800c5e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	d044      	beq.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c604:	2b05      	cmp	r3, #5
 800c606:	d825      	bhi.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800c608:	a201      	add	r2, pc, #4	; (adr r2, 800c610 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800c60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60e:	bf00      	nop
 800c610:	0800c65d 	.word	0x0800c65d
 800c614:	0800c629 	.word	0x0800c629
 800c618:	0800c63f 	.word	0x0800c63f
 800c61c:	0800c65d 	.word	0x0800c65d
 800c620:	0800c65d 	.word	0x0800c65d
 800c624:	0800c65d 	.word	0x0800c65d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c62c:	3308      	adds	r3, #8
 800c62e:	2101      	movs	r1, #1
 800c630:	4618      	mov	r0, r3
 800c632:	f000 ff1d 	bl	800d470 <RCCEx_PLL2_Config>
 800c636:	4603      	mov	r3, r0
 800c638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c63c:	e00f      	b.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c642:	3328      	adds	r3, #40	; 0x28
 800c644:	2101      	movs	r1, #1
 800c646:	4618      	mov	r0, r3
 800c648:	f000 ffc4 	bl	800d5d4 <RCCEx_PLL3_Config>
 800c64c:	4603      	mov	r3, r0
 800c64e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c652:	e004      	b.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c654:	2301      	movs	r3, #1
 800c656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c65a:	e000      	b.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800c65c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c65e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10b      	bne.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c666:	4b6c      	ldr	r3, [pc, #432]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c66a:	f023 0107 	bic.w	r1, r3, #7
 800c66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c676:	4a68      	ldr	r2, [pc, #416]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c678:	430b      	orrs	r3, r1
 800c67a:	6593      	str	r3, [r2, #88]	; 0x58
 800c67c:	e003      	b.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c67e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68e:	f002 0320 	and.w	r3, r2, #32
 800c692:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c696:	2300      	movs	r3, #0
 800c698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c69c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	d055      	beq.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6b2:	d033      	beq.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800c6b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6b8:	d82c      	bhi.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6be:	d02f      	beq.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800c6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6c4:	d826      	bhi.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c6c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6ca:	d02b      	beq.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800c6cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6d0:	d820      	bhi.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c6d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6d6:	d012      	beq.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c6d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6dc:	d81a      	bhi.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d022      	beq.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800c6e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6e6:	d115      	bne.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f000 febd 	bl	800d470 <RCCEx_PLL2_Config>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c6fc:	e015      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c702:	3328      	adds	r3, #40	; 0x28
 800c704:	2102      	movs	r1, #2
 800c706:	4618      	mov	r0, r3
 800c708:	f000 ff64 	bl	800d5d4 <RCCEx_PLL3_Config>
 800c70c:	4603      	mov	r3, r0
 800c70e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c712:	e00a      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c714:	2301      	movs	r3, #1
 800c716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c71a:	e006      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c71c:	bf00      	nop
 800c71e:	e004      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c720:	bf00      	nop
 800c722:	e002      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c724:	bf00      	nop
 800c726:	e000      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c72a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10b      	bne.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c732:	4b39      	ldr	r3, [pc, #228]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c736:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c742:	4a35      	ldr	r2, [pc, #212]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c744:	430b      	orrs	r3, r1
 800c746:	6553      	str	r3, [r2, #84]	; 0x54
 800c748:	e003      	b.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c74a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c74e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c75e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c762:	2300      	movs	r3, #0
 800c764:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c768:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c76c:	460b      	mov	r3, r1
 800c76e:	4313      	orrs	r3, r2
 800c770:	d058      	beq.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c77a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c77e:	d033      	beq.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c780:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c784:	d82c      	bhi.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c78a:	d02f      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c78c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c790:	d826      	bhi.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c792:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c796:	d02b      	beq.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c798:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c79c:	d820      	bhi.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c79e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7a2:	d012      	beq.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c7a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7a8:	d81a      	bhi.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d022      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c7ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7b2:	d115      	bne.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7b8:	3308      	adds	r3, #8
 800c7ba:	2100      	movs	r1, #0
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f000 fe57 	bl	800d470 <RCCEx_PLL2_Config>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c7c8:	e015      	b.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ce:	3328      	adds	r3, #40	; 0x28
 800c7d0:	2102      	movs	r1, #2
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f000 fefe 	bl	800d5d4 <RCCEx_PLL3_Config>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c7de:	e00a      	b.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c7e6:	e006      	b.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c7e8:	bf00      	nop
 800c7ea:	e004      	b.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c7ec:	bf00      	nop
 800c7ee:	e002      	b.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c7f0:	bf00      	nop
 800c7f2:	e000      	b.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c7f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d10e      	bne.n	800c81c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c7fe:	4b06      	ldr	r3, [pc, #24]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c802:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c80a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c80e:	4a02      	ldr	r2, [pc, #8]	; (800c818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c810:	430b      	orrs	r3, r1
 800c812:	6593      	str	r3, [r2, #88]	; 0x58
 800c814:	e006      	b.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c816:	bf00      	nop
 800c818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c81c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c834:	2300      	movs	r3, #0
 800c836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c83a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c83e:	460b      	mov	r3, r1
 800c840:	4313      	orrs	r3, r2
 800c842:	d055      	beq.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c848:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c84c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c850:	d033      	beq.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c852:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c856:	d82c      	bhi.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c85c:	d02f      	beq.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c85e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c862:	d826      	bhi.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c864:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c868:	d02b      	beq.n	800c8c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c86a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c86e:	d820      	bhi.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c874:	d012      	beq.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c87a:	d81a      	bhi.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d022      	beq.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c884:	d115      	bne.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c88a:	3308      	adds	r3, #8
 800c88c:	2100      	movs	r1, #0
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 fdee 	bl	800d470 <RCCEx_PLL2_Config>
 800c894:	4603      	mov	r3, r0
 800c896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c89a:	e015      	b.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8a0:	3328      	adds	r3, #40	; 0x28
 800c8a2:	2102      	movs	r1, #2
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 fe95 	bl	800d5d4 <RCCEx_PLL3_Config>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c8b0:	e00a      	b.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c8b8:	e006      	b.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c8ba:	bf00      	nop
 800c8bc:	e004      	b.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c8be:	bf00      	nop
 800c8c0:	e002      	b.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c8c2:	bf00      	nop
 800c8c4:	e000      	b.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c8c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10b      	bne.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c8d0:	4ba1      	ldr	r3, [pc, #644]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c8d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c8e0:	4a9d      	ldr	r2, [pc, #628]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c8e2:	430b      	orrs	r3, r1
 800c8e4:	6593      	str	r3, [r2, #88]	; 0x58
 800c8e6:	e003      	b.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c8ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f8:	f002 0308 	and.w	r3, r2, #8
 800c8fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c900:	2300      	movs	r3, #0
 800c902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c906:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c90a:	460b      	mov	r3, r1
 800c90c:	4313      	orrs	r3, r2
 800c90e:	d01e      	beq.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c91c:	d10c      	bne.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c922:	3328      	adds	r3, #40	; 0x28
 800c924:	2102      	movs	r1, #2
 800c926:	4618      	mov	r0, r3
 800c928:	f000 fe54 	bl	800d5d4 <RCCEx_PLL3_Config>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d002      	beq.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c938:	4b87      	ldr	r3, [pc, #540]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c93c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c948:	4a83      	ldr	r2, [pc, #524]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c94a:	430b      	orrs	r3, r1
 800c94c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c956:	f002 0310 	and.w	r3, r2, #16
 800c95a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c95e:	2300      	movs	r3, #0
 800c960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c964:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c968:	460b      	mov	r3, r1
 800c96a:	4313      	orrs	r3, r2
 800c96c:	d01e      	beq.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c97a:	d10c      	bne.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c980:	3328      	adds	r3, #40	; 0x28
 800c982:	2102      	movs	r1, #2
 800c984:	4618      	mov	r0, r3
 800c986:	f000 fe25 	bl	800d5d4 <RCCEx_PLL3_Config>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c990:	2301      	movs	r3, #1
 800c992:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c996:	4b70      	ldr	r3, [pc, #448]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c99a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9a6:	4a6c      	ldr	r2, [pc, #432]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c9a8:	430b      	orrs	r3, r1
 800c9aa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c9b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c9bc:	2300      	movs	r3, #0
 800c9be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c9c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	d03e      	beq.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c9d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9d8:	d022      	beq.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c9da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9de:	d81b      	bhi.n	800ca18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d003      	beq.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c9e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9e8:	d00b      	beq.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c9ea:	e015      	b.n	800ca18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9f0:	3308      	adds	r3, #8
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 fd3b 	bl	800d470 <RCCEx_PLL2_Config>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ca00:	e00f      	b.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca06:	3328      	adds	r3, #40	; 0x28
 800ca08:	2102      	movs	r1, #2
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f000 fde2 	bl	800d5d4 <RCCEx_PLL3_Config>
 800ca10:	4603      	mov	r3, r0
 800ca12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ca16:	e004      	b.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ca1e:	e000      	b.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ca20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d10b      	bne.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ca2a:	4b4b      	ldr	r3, [pc, #300]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ca2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca2e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ca32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ca3a:	4a47      	ldr	r2, [pc, #284]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ca3c:	430b      	orrs	r3, r1
 800ca3e:	6593      	str	r3, [r2, #88]	; 0x58
 800ca40:	e003      	b.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ca4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca52:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ca56:	67bb      	str	r3, [r7, #120]	; 0x78
 800ca58:	2300      	movs	r3, #0
 800ca5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ca60:	460b      	mov	r3, r1
 800ca62:	4313      	orrs	r3, r2
 800ca64:	d03b      	beq.n	800cade <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ca66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca72:	d01f      	beq.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ca74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca78:	d818      	bhi.n	800caac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ca7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca7e:	d003      	beq.n	800ca88 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ca80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca84:	d007      	beq.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ca86:	e011      	b.n	800caac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca88:	4b33      	ldr	r3, [pc, #204]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ca8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8c:	4a32      	ldr	r2, [pc, #200]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ca8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ca94:	e00f      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca9a:	3328      	adds	r3, #40	; 0x28
 800ca9c:	2101      	movs	r1, #1
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 fd98 	bl	800d5d4 <RCCEx_PLL3_Config>
 800caa4:	4603      	mov	r3, r0
 800caa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800caaa:	e004      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800caac:	2301      	movs	r3, #1
 800caae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cab2:	e000      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800cab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10b      	bne.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cabe:	4b26      	ldr	r3, [pc, #152]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800cac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cac2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cace:	4a22      	ldr	r2, [pc, #136]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800cad0:	430b      	orrs	r3, r1
 800cad2:	6553      	str	r3, [r2, #84]	; 0x54
 800cad4:	e003      	b.n	800cade <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800caea:	673b      	str	r3, [r7, #112]	; 0x70
 800caec:	2300      	movs	r3, #0
 800caee:	677b      	str	r3, [r7, #116]	; 0x74
 800caf0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800caf4:	460b      	mov	r3, r1
 800caf6:	4313      	orrs	r3, r2
 800caf8:	d034      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800cafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cafe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800cb04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb08:	d007      	beq.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800cb0a:	e011      	b.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb0c:	4b12      	ldr	r3, [pc, #72]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800cb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb10:	4a11      	ldr	r2, [pc, #68]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800cb12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cb18:	e00e      	b.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cb1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb1e:	3308      	adds	r3, #8
 800cb20:	2102      	movs	r1, #2
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 fca4 	bl	800d470 <RCCEx_PLL2_Config>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cb2e:	e003      	b.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800cb30:	2301      	movs	r3, #1
 800cb32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cb36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10d      	bne.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cb40:	4b05      	ldr	r3, [pc, #20]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800cb42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb4e:	4a02      	ldr	r2, [pc, #8]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800cb50:	430b      	orrs	r3, r1
 800cb52:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cb54:	e006      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800cb56:	bf00      	nop
 800cb58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cb64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800cb70:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb72:	2300      	movs	r3, #0
 800cb74:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	d00c      	beq.n	800cb9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cb80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb84:	3328      	adds	r3, #40	; 0x28
 800cb86:	2102      	movs	r1, #2
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 fd23 	bl	800d5d4 <RCCEx_PLL3_Config>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800cb94:	2301      	movs	r3, #1
 800cb96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cb9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800cba6:	663b      	str	r3, [r7, #96]	; 0x60
 800cba8:	2300      	movs	r3, #0
 800cbaa:	667b      	str	r3, [r7, #100]	; 0x64
 800cbac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	d038      	beq.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800cbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbc2:	d018      	beq.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800cbc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbc8:	d811      	bhi.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800cbca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbce:	d014      	beq.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800cbd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbd4:	d80b      	bhi.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d011      	beq.n	800cbfe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800cbda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbde:	d106      	bne.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbe0:	4bc3      	ldr	r3, [pc, #780]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe4:	4ac2      	ldr	r2, [pc, #776]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cbec:	e008      	b.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cbf4:	e004      	b.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800cbf6:	bf00      	nop
 800cbf8:	e002      	b.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800cbfa:	bf00      	nop
 800cbfc:	e000      	b.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800cbfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10b      	bne.n	800cc20 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cc08:	4bb9      	ldr	r3, [pc, #740]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cc0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc0c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cc10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc18:	4ab5      	ldr	r2, [pc, #724]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cc1a:	430b      	orrs	r3, r1
 800cc1c:	6553      	str	r3, [r2, #84]	; 0x54
 800cc1e:	e003      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc30:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800cc34:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc36:	2300      	movs	r3, #0
 800cc38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800cc3e:	460b      	mov	r3, r1
 800cc40:	4313      	orrs	r3, r2
 800cc42:	d009      	beq.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cc44:	4baa      	ldr	r3, [pc, #680]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cc4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc52:	4aa7      	ldr	r2, [pc, #668]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cc54:	430b      	orrs	r3, r1
 800cc56:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800cc64:	653b      	str	r3, [r7, #80]	; 0x50
 800cc66:	2300      	movs	r3, #0
 800cc68:	657b      	str	r3, [r7, #84]	; 0x54
 800cc6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800cc6e:	460b      	mov	r3, r1
 800cc70:	4313      	orrs	r3, r2
 800cc72:	d00a      	beq.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cc74:	4b9e      	ldr	r3, [pc, #632]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800cc7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cc84:	4a9a      	ldr	r2, [pc, #616]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cc86:	430b      	orrs	r3, r1
 800cc88:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cc8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc92:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800cc96:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc98:	2300      	movs	r3, #0
 800cc9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800cca0:	460b      	mov	r3, r1
 800cca2:	4313      	orrs	r3, r2
 800cca4:	d009      	beq.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cca6:	4b92      	ldr	r3, [pc, #584]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccaa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ccae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccb4:	4a8e      	ldr	r2, [pc, #568]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ccb6:	430b      	orrs	r3, r1
 800ccb8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ccba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ccc6:	643b      	str	r3, [r7, #64]	; 0x40
 800ccc8:	2300      	movs	r3, #0
 800ccca:	647b      	str	r3, [r7, #68]	; 0x44
 800cccc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	d00e      	beq.n	800ccf4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ccd6:	4b86      	ldr	r3, [pc, #536]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	4a85      	ldr	r2, [pc, #532]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ccdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cce0:	6113      	str	r3, [r2, #16]
 800cce2:	4b83      	ldr	r3, [pc, #524]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cce4:	6919      	ldr	r1, [r3, #16]
 800cce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ccee:	4a80      	ldr	r2, [pc, #512]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ccf0:	430b      	orrs	r3, r1
 800ccf2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ccf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800cd00:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd02:	2300      	movs	r3, #0
 800cd04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd06:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	d009      	beq.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cd10:	4b77      	ldr	r3, [pc, #476]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cd12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd14:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800cd18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd1e:	4a74      	ldr	r2, [pc, #464]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cd20:	430b      	orrs	r3, r1
 800cd22:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cd24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800cd30:	633b      	str	r3, [r7, #48]	; 0x30
 800cd32:	2300      	movs	r3, #0
 800cd34:	637b      	str	r3, [r7, #52]	; 0x34
 800cd36:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	d00a      	beq.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cd40:	4b6b      	ldr	r3, [pc, #428]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cd42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd44:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800cd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd50:	4a67      	ldr	r2, [pc, #412]	; (800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cd52:	430b      	orrs	r3, r1
 800cd54:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5e:	2100      	movs	r1, #0
 800cd60:	62b9      	str	r1, [r7, #40]	; 0x28
 800cd62:	f003 0301 	and.w	r3, r3, #1
 800cd66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd68:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	d011      	beq.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd76:	3308      	adds	r3, #8
 800cd78:	2100      	movs	r1, #0
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f000 fb78 	bl	800d470 <RCCEx_PLL2_Config>
 800cd80:	4603      	mov	r3, r0
 800cd82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800cd86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d003      	beq.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9e:	2100      	movs	r1, #0
 800cda0:	6239      	str	r1, [r7, #32]
 800cda2:	f003 0302 	and.w	r3, r3, #2
 800cda6:	627b      	str	r3, [r7, #36]	; 0x24
 800cda8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cdac:	460b      	mov	r3, r1
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	d011      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdb6:	3308      	adds	r3, #8
 800cdb8:	2101      	movs	r1, #1
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f000 fb58 	bl	800d470 <RCCEx_PLL2_Config>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800cdc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d003      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cdd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	2100      	movs	r1, #0
 800cde0:	61b9      	str	r1, [r7, #24]
 800cde2:	f003 0304 	and.w	r3, r3, #4
 800cde6:	61fb      	str	r3, [r7, #28]
 800cde8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cdec:	460b      	mov	r3, r1
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	d011      	beq.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdf6:	3308      	adds	r3, #8
 800cdf8:	2102      	movs	r1, #2
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f000 fb38 	bl	800d470 <RCCEx_PLL2_Config>
 800ce00:	4603      	mov	r3, r0
 800ce02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ce06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d003      	beq.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ce16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1e:	2100      	movs	r1, #0
 800ce20:	6139      	str	r1, [r7, #16]
 800ce22:	f003 0308 	and.w	r3, r3, #8
 800ce26:	617b      	str	r3, [r7, #20]
 800ce28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	d011      	beq.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce36:	3328      	adds	r3, #40	; 0x28
 800ce38:	2100      	movs	r1, #0
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f000 fbca 	bl	800d5d4 <RCCEx_PLL3_Config>
 800ce40:	4603      	mov	r3, r0
 800ce42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ce46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d003      	beq.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ce56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	2100      	movs	r1, #0
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	f003 0310 	and.w	r3, r3, #16
 800ce66:	60fb      	str	r3, [r7, #12]
 800ce68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	d011      	beq.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ce72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce76:	3328      	adds	r3, #40	; 0x28
 800ce78:	2101      	movs	r1, #1
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 fbaa 	bl	800d5d4 <RCCEx_PLL3_Config>
 800ce80:	4603      	mov	r3, r0
 800ce82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ce86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d003      	beq.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ce96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9e:	2100      	movs	r1, #0
 800cea0:	6039      	str	r1, [r7, #0]
 800cea2:	f003 0320 	and.w	r3, r3, #32
 800cea6:	607b      	str	r3, [r7, #4]
 800cea8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ceac:	460b      	mov	r3, r1
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	d011      	beq.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ceb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceb6:	3328      	adds	r3, #40	; 0x28
 800ceb8:	2102      	movs	r1, #2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 fb8a 	bl	800d5d4 <RCCEx_PLL3_Config>
 800cec0:	4603      	mov	r3, r0
 800cec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800cec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d003      	beq.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ced2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ced6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800cede:	2300      	movs	r3, #0
 800cee0:	e000      	b.n	800cee4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ceea:	46bd      	mov	sp, r7
 800ceec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cef0:	58024400 	.word	0x58024400

0800cef4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cef8:	f7fe fd96 	bl	800ba28 <HAL_RCC_GetHCLKFreq>
 800cefc:	4602      	mov	r2, r0
 800cefe:	4b06      	ldr	r3, [pc, #24]	; (800cf18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cf00:	6a1b      	ldr	r3, [r3, #32]
 800cf02:	091b      	lsrs	r3, r3, #4
 800cf04:	f003 0307 	and.w	r3, r3, #7
 800cf08:	4904      	ldr	r1, [pc, #16]	; (800cf1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cf0a:	5ccb      	ldrb	r3, [r1, r3]
 800cf0c:	f003 031f 	and.w	r3, r3, #31
 800cf10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	58024400 	.word	0x58024400
 800cf1c:	08011810 	.word	0x08011810

0800cf20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b089      	sub	sp, #36	; 0x24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf28:	4ba1      	ldr	r3, [pc, #644]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf2c:	f003 0303 	and.w	r3, r3, #3
 800cf30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cf32:	4b9f      	ldr	r3, [pc, #636]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf36:	0b1b      	lsrs	r3, r3, #12
 800cf38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cf3e:	4b9c      	ldr	r3, [pc, #624]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf42:	091b      	lsrs	r3, r3, #4
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cf4a:	4b99      	ldr	r3, [pc, #612]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf4e:	08db      	lsrs	r3, r3, #3
 800cf50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	fb02 f303 	mul.w	r3, r2, r3
 800cf5a:	ee07 3a90 	vmov	s15, r3
 800cf5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f000 8111 	beq.w	800d190 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	f000 8083 	beq.w	800d07c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	2b02      	cmp	r3, #2
 800cf7a:	f200 80a1 	bhi.w	800d0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d003      	beq.n	800cf8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d056      	beq.n	800d038 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cf8a:	e099      	b.n	800d0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf8c:	4b88      	ldr	r3, [pc, #544]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f003 0320 	and.w	r3, r3, #32
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d02d      	beq.n	800cff4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf98:	4b85      	ldr	r3, [pc, #532]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	08db      	lsrs	r3, r3, #3
 800cf9e:	f003 0303 	and.w	r3, r3, #3
 800cfa2:	4a84      	ldr	r2, [pc, #528]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cfa4:	fa22 f303 	lsr.w	r3, r2, r3
 800cfa8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	ee07 3a90 	vmov	s15, r3
 800cfb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	ee07 3a90 	vmov	s15, r3
 800cfba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfc2:	4b7b      	ldr	r3, [pc, #492]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfca:	ee07 3a90 	vmov	s15, r3
 800cfce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cff2:	e087      	b.n	800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	ee07 3a90 	vmov	s15, r3
 800cffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cffe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d1bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d006:	4b6a      	ldr	r3, [pc, #424]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d00e:	ee07 3a90 	vmov	s15, r3
 800d012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d016:	ed97 6a03 	vldr	s12, [r7, #12]
 800d01a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d036:	e065      	b.n	800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	ee07 3a90 	vmov	s15, r3
 800d03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d042:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d04a:	4b59      	ldr	r3, [pc, #356]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d052:	ee07 3a90 	vmov	s15, r3
 800d056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d05a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d05e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d06a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d07a:	e043      	b.n	800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	ee07 3a90 	vmov	s15, r3
 800d082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d086:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d08e:	4b48      	ldr	r3, [pc, #288]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d096:	ee07 3a90 	vmov	s15, r3
 800d09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d09e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0be:	e021      	b.n	800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	ee07 3a90 	vmov	s15, r3
 800d0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0d2:	4b37      	ldr	r3, [pc, #220]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0da:	ee07 3a90 	vmov	s15, r3
 800d0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d102:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d104:	4b2a      	ldr	r3, [pc, #168]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d108:	0a5b      	lsrs	r3, r3, #9
 800d10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d10e:	ee07 3a90 	vmov	s15, r3
 800d112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d11a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d11e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d12a:	ee17 2a90 	vmov	r2, s15
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d132:	4b1f      	ldr	r3, [pc, #124]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d136:	0c1b      	lsrs	r3, r3, #16
 800d138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d13c:	ee07 3a90 	vmov	s15, r3
 800d140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d14c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d158:	ee17 2a90 	vmov	r2, s15
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d160:	4b13      	ldr	r3, [pc, #76]	; (800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d164:	0e1b      	lsrs	r3, r3, #24
 800d166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d16a:	ee07 3a90 	vmov	s15, r3
 800d16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d17a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d186:	ee17 2a90 	vmov	r2, s15
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d18e:	e008      	b.n	800d1a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2200      	movs	r2, #0
 800d19a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	609a      	str	r2, [r3, #8]
}
 800d1a2:	bf00      	nop
 800d1a4:	3724      	adds	r7, #36	; 0x24
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	58024400 	.word	0x58024400
 800d1b4:	03d09000 	.word	0x03d09000
 800d1b8:	46000000 	.word	0x46000000
 800d1bc:	4c742400 	.word	0x4c742400
 800d1c0:	4a742400 	.word	0x4a742400
 800d1c4:	4bbebc20 	.word	0x4bbebc20

0800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b089      	sub	sp, #36	; 0x24
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1d0:	4ba1      	ldr	r3, [pc, #644]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d4:	f003 0303 	and.w	r3, r3, #3
 800d1d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d1da:	4b9f      	ldr	r3, [pc, #636]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1de:	0d1b      	lsrs	r3, r3, #20
 800d1e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d1e6:	4b9c      	ldr	r3, [pc, #624]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ea:	0a1b      	lsrs	r3, r3, #8
 800d1ec:	f003 0301 	and.w	r3, r3, #1
 800d1f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d1f2:	4b99      	ldr	r3, [pc, #612]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1f6:	08db      	lsrs	r3, r3, #3
 800d1f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1fc:	693a      	ldr	r2, [r7, #16]
 800d1fe:	fb02 f303 	mul.w	r3, r2, r3
 800d202:	ee07 3a90 	vmov	s15, r3
 800d206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d20a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	2b00      	cmp	r3, #0
 800d212:	f000 8111 	beq.w	800d438 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	2b02      	cmp	r3, #2
 800d21a:	f000 8083 	beq.w	800d324 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	2b02      	cmp	r3, #2
 800d222:	f200 80a1 	bhi.w	800d368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d003      	beq.n	800d234 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d056      	beq.n	800d2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d232:	e099      	b.n	800d368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d234:	4b88      	ldr	r3, [pc, #544]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 0320 	and.w	r3, r3, #32
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d02d      	beq.n	800d29c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d240:	4b85      	ldr	r3, [pc, #532]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	08db      	lsrs	r3, r3, #3
 800d246:	f003 0303 	and.w	r3, r3, #3
 800d24a:	4a84      	ldr	r2, [pc, #528]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d24c:	fa22 f303 	lsr.w	r3, r2, r3
 800d250:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	ee07 3a90 	vmov	s15, r3
 800d258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	ee07 3a90 	vmov	s15, r3
 800d262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d26a:	4b7b      	ldr	r3, [pc, #492]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d272:	ee07 3a90 	vmov	s15, r3
 800d276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d27a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d27e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d28a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d296:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d29a:	e087      	b.n	800d3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	ee07 3a90 	vmov	s15, r3
 800d2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d464 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ae:	4b6a      	ldr	r3, [pc, #424]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2b6:	ee07 3a90 	vmov	s15, r3
 800d2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2de:	e065      	b.n	800d3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	ee07 3a90 	vmov	s15, r3
 800d2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2f2:	4b59      	ldr	r3, [pc, #356]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2fa:	ee07 3a90 	vmov	s15, r3
 800d2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d302:	ed97 6a03 	vldr	s12, [r7, #12]
 800d306:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d31e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d322:	e043      	b.n	800d3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	ee07 3a90 	vmov	s15, r3
 800d32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d32e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d46c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d336:	4b48      	ldr	r3, [pc, #288]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d33e:	ee07 3a90 	vmov	s15, r3
 800d342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d346:	ed97 6a03 	vldr	s12, [r7, #12]
 800d34a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d366:	e021      	b.n	800d3ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	ee07 3a90 	vmov	s15, r3
 800d36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d372:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d37a:	4b37      	ldr	r3, [pc, #220]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d382:	ee07 3a90 	vmov	s15, r3
 800d386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d38a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d38e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d39a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d3ac:	4b2a      	ldr	r3, [pc, #168]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b0:	0a5b      	lsrs	r3, r3, #9
 800d3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b6:	ee07 3a90 	vmov	s15, r3
 800d3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3d2:	ee17 2a90 	vmov	r2, s15
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d3da:	4b1f      	ldr	r3, [pc, #124]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3de:	0c1b      	lsrs	r3, r3, #16
 800d3e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3e4:	ee07 3a90 	vmov	s15, r3
 800d3e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d400:	ee17 2a90 	vmov	r2, s15
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d408:	4b13      	ldr	r3, [pc, #76]	; (800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d40c:	0e1b      	lsrs	r3, r3, #24
 800d40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d412:	ee07 3a90 	vmov	s15, r3
 800d416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d41a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d41e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d422:	edd7 6a07 	vldr	s13, [r7, #28]
 800d426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d42a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d42e:	ee17 2a90 	vmov	r2, s15
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d436:	e008      	b.n	800d44a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	609a      	str	r2, [r3, #8]
}
 800d44a:	bf00      	nop
 800d44c:	3724      	adds	r7, #36	; 0x24
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	58024400 	.word	0x58024400
 800d45c:	03d09000 	.word	0x03d09000
 800d460:	46000000 	.word	0x46000000
 800d464:	4c742400 	.word	0x4c742400
 800d468:	4a742400 	.word	0x4a742400
 800d46c:	4bbebc20 	.word	0x4bbebc20

0800d470 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d47a:	2300      	movs	r3, #0
 800d47c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d47e:	4b53      	ldr	r3, [pc, #332]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d482:	f003 0303 	and.w	r3, r3, #3
 800d486:	2b03      	cmp	r3, #3
 800d488:	d101      	bne.n	800d48e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d48a:	2301      	movs	r3, #1
 800d48c:	e099      	b.n	800d5c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d48e:	4b4f      	ldr	r3, [pc, #316]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a4e      	ldr	r2, [pc, #312]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d494:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d49a:	f7fc fe23 	bl	800a0e4 <HAL_GetTick>
 800d49e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d4a0:	e008      	b.n	800d4b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d4a2:	f7fc fe1f 	bl	800a0e4 <HAL_GetTick>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d901      	bls.n	800d4b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	e086      	b.n	800d5c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d4b4:	4b45      	ldr	r3, [pc, #276]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d1f0      	bne.n	800d4a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d4c0:	4b42      	ldr	r3, [pc, #264]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	031b      	lsls	r3, r3, #12
 800d4ce:	493f      	ldr	r1, [pc, #252]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	628b      	str	r3, [r1, #40]	; 0x28
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	025b      	lsls	r3, r3, #9
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	431a      	orrs	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	041b      	lsls	r3, r3, #16
 800d4f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d4f6:	431a      	orrs	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	691b      	ldr	r3, [r3, #16]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	061b      	lsls	r3, r3, #24
 800d500:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d504:	4931      	ldr	r1, [pc, #196]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d506:	4313      	orrs	r3, r2
 800d508:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d50a:	4b30      	ldr	r3, [pc, #192]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	695b      	ldr	r3, [r3, #20]
 800d516:	492d      	ldr	r1, [pc, #180]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d518:	4313      	orrs	r3, r2
 800d51a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d51c:	4b2b      	ldr	r3, [pc, #172]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d520:	f023 0220 	bic.w	r2, r3, #32
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	699b      	ldr	r3, [r3, #24]
 800d528:	4928      	ldr	r1, [pc, #160]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d52a:	4313      	orrs	r3, r2
 800d52c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d52e:	4b27      	ldr	r3, [pc, #156]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d532:	4a26      	ldr	r2, [pc, #152]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d534:	f023 0310 	bic.w	r3, r3, #16
 800d538:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d53a:	4b24      	ldr	r3, [pc, #144]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d53c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d53e:	4b24      	ldr	r3, [pc, #144]	; (800d5d0 <RCCEx_PLL2_Config+0x160>)
 800d540:	4013      	ands	r3, r2
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	69d2      	ldr	r2, [r2, #28]
 800d546:	00d2      	lsls	r2, r2, #3
 800d548:	4920      	ldr	r1, [pc, #128]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d54a:	4313      	orrs	r3, r2
 800d54c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d54e:	4b1f      	ldr	r3, [pc, #124]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d552:	4a1e      	ldr	r2, [pc, #120]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d554:	f043 0310 	orr.w	r3, r3, #16
 800d558:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d106      	bne.n	800d56e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d560:	4b1a      	ldr	r3, [pc, #104]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d564:	4a19      	ldr	r2, [pc, #100]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d566:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d56a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d56c:	e00f      	b.n	800d58e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2b01      	cmp	r3, #1
 800d572:	d106      	bne.n	800d582 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d574:	4b15      	ldr	r3, [pc, #84]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d578:	4a14      	ldr	r2, [pc, #80]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d57a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d57e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d580:	e005      	b.n	800d58e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d582:	4b12      	ldr	r3, [pc, #72]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d586:	4a11      	ldr	r2, [pc, #68]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d588:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d58c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d58e:	4b0f      	ldr	r3, [pc, #60]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a0e      	ldr	r2, [pc, #56]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d594:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d59a:	f7fc fda3 	bl	800a0e4 <HAL_GetTick>
 800d59e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d5a0:	e008      	b.n	800d5b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d5a2:	f7fc fd9f 	bl	800a0e4 <HAL_GetTick>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	1ad3      	subs	r3, r2, r3
 800d5ac:	2b02      	cmp	r3, #2
 800d5ae:	d901      	bls.n	800d5b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d5b0:	2303      	movs	r3, #3
 800d5b2:	e006      	b.n	800d5c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d5b4:	4b05      	ldr	r3, [pc, #20]	; (800d5cc <RCCEx_PLL2_Config+0x15c>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d0f0      	beq.n	800d5a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	58024400 	.word	0x58024400
 800d5d0:	ffff0007 	.word	0xffff0007

0800d5d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d5e2:	4b53      	ldr	r3, [pc, #332]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e6:	f003 0303 	and.w	r3, r3, #3
 800d5ea:	2b03      	cmp	r3, #3
 800d5ec:	d101      	bne.n	800d5f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e099      	b.n	800d726 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d5f2:	4b4f      	ldr	r3, [pc, #316]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a4e      	ldr	r2, [pc, #312]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d5f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5fe:	f7fc fd71 	bl	800a0e4 <HAL_GetTick>
 800d602:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d604:	e008      	b.n	800d618 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d606:	f7fc fd6d 	bl	800a0e4 <HAL_GetTick>
 800d60a:	4602      	mov	r2, r0
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	1ad3      	subs	r3, r2, r3
 800d610:	2b02      	cmp	r3, #2
 800d612:	d901      	bls.n	800d618 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d614:	2303      	movs	r3, #3
 800d616:	e086      	b.n	800d726 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d618:	4b45      	ldr	r3, [pc, #276]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1f0      	bne.n	800d606 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d624:	4b42      	ldr	r3, [pc, #264]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d628:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	051b      	lsls	r3, r3, #20
 800d632:	493f      	ldr	r1, [pc, #252]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d634:	4313      	orrs	r3, r2
 800d636:	628b      	str	r3, [r1, #40]	; 0x28
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	3b01      	subs	r3, #1
 800d648:	025b      	lsls	r3, r3, #9
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	431a      	orrs	r2, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	3b01      	subs	r3, #1
 800d654:	041b      	lsls	r3, r3, #16
 800d656:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d65a:	431a      	orrs	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	3b01      	subs	r3, #1
 800d662:	061b      	lsls	r3, r3, #24
 800d664:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d668:	4931      	ldr	r1, [pc, #196]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d66a:	4313      	orrs	r3, r2
 800d66c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d66e:	4b30      	ldr	r3, [pc, #192]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d672:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	695b      	ldr	r3, [r3, #20]
 800d67a:	492d      	ldr	r1, [pc, #180]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d67c:	4313      	orrs	r3, r2
 800d67e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d680:	4b2b      	ldr	r3, [pc, #172]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d684:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	699b      	ldr	r3, [r3, #24]
 800d68c:	4928      	ldr	r1, [pc, #160]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d68e:	4313      	orrs	r3, r2
 800d690:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d692:	4b27      	ldr	r3, [pc, #156]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d696:	4a26      	ldr	r2, [pc, #152]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d69c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d69e:	4b24      	ldr	r3, [pc, #144]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6a2:	4b24      	ldr	r3, [pc, #144]	; (800d734 <RCCEx_PLL3_Config+0x160>)
 800d6a4:	4013      	ands	r3, r2
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	69d2      	ldr	r2, [r2, #28]
 800d6aa:	00d2      	lsls	r2, r2, #3
 800d6ac:	4920      	ldr	r1, [pc, #128]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d6b2:	4b1f      	ldr	r3, [pc, #124]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b6:	4a1e      	ldr	r2, [pc, #120]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d106      	bne.n	800d6d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d6c4:	4b1a      	ldr	r3, [pc, #104]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c8:	4a19      	ldr	r2, [pc, #100]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d6ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6d0:	e00f      	b.n	800d6f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d106      	bne.n	800d6e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d6d8:	4b15      	ldr	r3, [pc, #84]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6dc:	4a14      	ldr	r2, [pc, #80]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d6e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6e4:	e005      	b.n	800d6f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d6e6:	4b12      	ldr	r3, [pc, #72]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ea:	4a11      	ldr	r2, [pc, #68]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d6f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d6f2:	4b0f      	ldr	r3, [pc, #60]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a0e      	ldr	r2, [pc, #56]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d6f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6fe:	f7fc fcf1 	bl	800a0e4 <HAL_GetTick>
 800d702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d704:	e008      	b.n	800d718 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d706:	f7fc fced 	bl	800a0e4 <HAL_GetTick>
 800d70a:	4602      	mov	r2, r0
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	1ad3      	subs	r3, r2, r3
 800d710:	2b02      	cmp	r3, #2
 800d712:	d901      	bls.n	800d718 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d714:	2303      	movs	r3, #3
 800d716:	e006      	b.n	800d726 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d718:	4b05      	ldr	r3, [pc, #20]	; (800d730 <RCCEx_PLL3_Config+0x15c>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d720:	2b00      	cmp	r3, #0
 800d722:	d0f0      	beq.n	800d706 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d724:	7bfb      	ldrb	r3, [r7, #15]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	58024400 	.word	0x58024400
 800d734:	ffff0007 	.word	0xffff0007

0800d738 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d101      	bne.n	800d74a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d746:	2301      	movs	r3, #1
 800d748:	e10f      	b.n	800d96a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2200      	movs	r2, #0
 800d74e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a87      	ldr	r2, [pc, #540]	; (800d974 <HAL_SPI_Init+0x23c>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d00f      	beq.n	800d77a <HAL_SPI_Init+0x42>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4a86      	ldr	r2, [pc, #536]	; (800d978 <HAL_SPI_Init+0x240>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d00a      	beq.n	800d77a <HAL_SPI_Init+0x42>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a84      	ldr	r2, [pc, #528]	; (800d97c <HAL_SPI_Init+0x244>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d005      	beq.n	800d77a <HAL_SPI_Init+0x42>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	2b0f      	cmp	r3, #15
 800d774:	d901      	bls.n	800d77a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d776:	2301      	movs	r3, #1
 800d778:	e0f7      	b.n	800d96a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f900 	bl	800d980 <SPI_GetPacketSize>
 800d780:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4a7b      	ldr	r2, [pc, #492]	; (800d974 <HAL_SPI_Init+0x23c>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d00c      	beq.n	800d7a6 <HAL_SPI_Init+0x6e>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a79      	ldr	r2, [pc, #484]	; (800d978 <HAL_SPI_Init+0x240>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d007      	beq.n	800d7a6 <HAL_SPI_Init+0x6e>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a78      	ldr	r2, [pc, #480]	; (800d97c <HAL_SPI_Init+0x244>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d002      	beq.n	800d7a6 <HAL_SPI_Init+0x6e>
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b08      	cmp	r3, #8
 800d7a4:	d811      	bhi.n	800d7ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d7aa:	4a72      	ldr	r2, [pc, #456]	; (800d974 <HAL_SPI_Init+0x23c>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d009      	beq.n	800d7c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a70      	ldr	r2, [pc, #448]	; (800d978 <HAL_SPI_Init+0x240>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d004      	beq.n	800d7c4 <HAL_SPI_Init+0x8c>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4a6f      	ldr	r2, [pc, #444]	; (800d97c <HAL_SPI_Init+0x244>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d104      	bne.n	800d7ce <HAL_SPI_Init+0x96>
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b10      	cmp	r3, #16
 800d7c8:	d901      	bls.n	800d7ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e0cd      	b.n	800d96a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d106      	bne.n	800d7e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7fb fe68 	bl	80094b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2202      	movs	r2, #2
 800d7ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f022 0201 	bic.w	r2, r2, #1
 800d7fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d80a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d814:	d119      	bne.n	800d84a <HAL_SPI_Init+0x112>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d81e:	d103      	bne.n	800d828 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d824:	2b00      	cmp	r3, #0
 800d826:	d008      	beq.n	800d83a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10c      	bne.n	800d84a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d838:	d107      	bne.n	800d84a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d848:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00f      	beq.n	800d876 <HAL_SPI_Init+0x13e>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	2b06      	cmp	r3, #6
 800d85c:	d90b      	bls.n	800d876 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	430a      	orrs	r2, r1
 800d872:	601a      	str	r2, [r3, #0]
 800d874:	e007      	b.n	800d886 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d884:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	69da      	ldr	r2, [r3, #28]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d88e:	431a      	orrs	r2, r3
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	431a      	orrs	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d898:	ea42 0103 	orr.w	r1, r2, r3
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	68da      	ldr	r2, [r3, #12]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	430a      	orrs	r2, r1
 800d8a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b0:	431a      	orrs	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b6:	431a      	orrs	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	699b      	ldr	r3, [r3, #24]
 800d8bc:	431a      	orrs	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	431a      	orrs	r2, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	695b      	ldr	r3, [r3, #20]
 800d8c8:	431a      	orrs	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6a1b      	ldr	r3, [r3, #32]
 800d8ce:	431a      	orrs	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	431a      	orrs	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8da:	431a      	orrs	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	431a      	orrs	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8e6:	ea42 0103 	orr.w	r1, r2, r3
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	430a      	orrs	r2, r1
 800d8f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d113      	bne.n	800d926 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d910:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d924:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f022 0201 	bic.w	r2, r2, #1
 800d934:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00a      	beq.n	800d958 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	430a      	orrs	r2, r1
 800d956:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	40013000 	.word	0x40013000
 800d978:	40003800 	.word	0x40003800
 800d97c:	40003c00 	.word	0x40003c00

0800d980 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d98c:	095b      	lsrs	r3, r3, #5
 800d98e:	3301      	adds	r3, #1
 800d990:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	3301      	adds	r3, #1
 800d998:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	3307      	adds	r3, #7
 800d99e:	08db      	lsrs	r3, r3, #3
 800d9a0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	fb02 f303 	mul.w	r3, r2, r3
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3714      	adds	r7, #20
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
	...

0800d9b8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d101      	bne.n	800d9ce <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e03e      	b.n	800da4c <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d106      	bne.n	800d9e8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f7fc f8fe 	bl	8009be4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	3308      	adds	r3, #8
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	4610      	mov	r0, r2
 800d9f4:	f001 fca4 	bl	800f340 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	6818      	ldr	r0, [r3, #0]
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	461a      	mov	r2, r3
 800da02:	68b9      	ldr	r1, [r7, #8]
 800da04:	f001 fd2c 	bl	800f460 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	6858      	ldr	r0, [r3, #4]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	689a      	ldr	r2, [r3, #8]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da14:	6879      	ldr	r1, [r7, #4]
 800da16:	f001 fd73 	bl	800f500 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	6892      	ldr	r2, [r2, #8]
 800da22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	6892      	ldr	r2, [r2, #8]
 800da2e:	f041 0101 	orr.w	r1, r1, #1
 800da32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800da36:	4b07      	ldr	r3, [pc, #28]	; (800da54 <HAL_SRAM_Init+0x9c>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a06      	ldr	r2, [pc, #24]	; (800da54 <HAL_SRAM_Init+0x9c>)
 800da3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da40:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3710      	adds	r7, #16
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	52004000 	.word	0x52004000

0800da58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d101      	bne.n	800da6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	e049      	b.n	800dafe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da70:	b2db      	uxtb	r3, r3
 800da72:	2b00      	cmp	r3, #0
 800da74:	d106      	bne.n	800da84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2200      	movs	r2, #0
 800da7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7fb fd92 	bl	80095a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2202      	movs	r2, #2
 800da88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	3304      	adds	r3, #4
 800da94:	4619      	mov	r1, r3
 800da96:	4610      	mov	r0, r2
 800da98:	f000 f9f6 	bl	800de88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2201      	movs	r2, #1
 800daf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3708      	adds	r7, #8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
	...

0800db08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db08:	b480      	push	{r7}
 800db0a:	b085      	sub	sp, #20
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db16:	b2db      	uxtb	r3, r3
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d001      	beq.n	800db20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db1c:	2301      	movs	r3, #1
 800db1e:	e054      	b.n	800dbca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2202      	movs	r2, #2
 800db24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	68da      	ldr	r2, [r3, #12]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f042 0201 	orr.w	r2, r2, #1
 800db36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a26      	ldr	r2, [pc, #152]	; (800dbd8 <HAL_TIM_Base_Start_IT+0xd0>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d022      	beq.n	800db88 <HAL_TIM_Base_Start_IT+0x80>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db4a:	d01d      	beq.n	800db88 <HAL_TIM_Base_Start_IT+0x80>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a22      	ldr	r2, [pc, #136]	; (800dbdc <HAL_TIM_Base_Start_IT+0xd4>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d018      	beq.n	800db88 <HAL_TIM_Base_Start_IT+0x80>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a21      	ldr	r2, [pc, #132]	; (800dbe0 <HAL_TIM_Base_Start_IT+0xd8>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d013      	beq.n	800db88 <HAL_TIM_Base_Start_IT+0x80>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a1f      	ldr	r2, [pc, #124]	; (800dbe4 <HAL_TIM_Base_Start_IT+0xdc>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d00e      	beq.n	800db88 <HAL_TIM_Base_Start_IT+0x80>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4a1e      	ldr	r2, [pc, #120]	; (800dbe8 <HAL_TIM_Base_Start_IT+0xe0>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d009      	beq.n	800db88 <HAL_TIM_Base_Start_IT+0x80>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a1c      	ldr	r2, [pc, #112]	; (800dbec <HAL_TIM_Base_Start_IT+0xe4>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d004      	beq.n	800db88 <HAL_TIM_Base_Start_IT+0x80>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a1b      	ldr	r2, [pc, #108]	; (800dbf0 <HAL_TIM_Base_Start_IT+0xe8>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d115      	bne.n	800dbb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	689a      	ldr	r2, [r3, #8]
 800db8e:	4b19      	ldr	r3, [pc, #100]	; (800dbf4 <HAL_TIM_Base_Start_IT+0xec>)
 800db90:	4013      	ands	r3, r2
 800db92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b06      	cmp	r3, #6
 800db98:	d015      	beq.n	800dbc6 <HAL_TIM_Base_Start_IT+0xbe>
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dba0:	d011      	beq.n	800dbc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f042 0201 	orr.w	r2, r2, #1
 800dbb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbb2:	e008      	b.n	800dbc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f042 0201 	orr.w	r2, r2, #1
 800dbc2:	601a      	str	r2, [r3, #0]
 800dbc4:	e000      	b.n	800dbc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3714      	adds	r7, #20
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop
 800dbd8:	40010000 	.word	0x40010000
 800dbdc:	40000400 	.word	0x40000400
 800dbe0:	40000800 	.word	0x40000800
 800dbe4:	40000c00 	.word	0x40000c00
 800dbe8:	40010400 	.word	0x40010400
 800dbec:	40001800 	.word	0x40001800
 800dbf0:	40014000 	.word	0x40014000
 800dbf4:	00010007 	.word	0x00010007

0800dbf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	f003 0302 	and.w	r3, r3, #2
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d122      	bne.n	800dc54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	f003 0302 	and.w	r3, r3, #2
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d11b      	bne.n	800dc54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f06f 0202 	mvn.w	r2, #2
 800dc24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	699b      	ldr	r3, [r3, #24]
 800dc32:	f003 0303 	and.w	r3, r3, #3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d003      	beq.n	800dc42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f905 	bl	800de4a <HAL_TIM_IC_CaptureCallback>
 800dc40:	e005      	b.n	800dc4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 f8f7 	bl	800de36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 f908 	bl	800de5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	691b      	ldr	r3, [r3, #16]
 800dc5a:	f003 0304 	and.w	r3, r3, #4
 800dc5e:	2b04      	cmp	r3, #4
 800dc60:	d122      	bne.n	800dca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	f003 0304 	and.w	r3, r3, #4
 800dc6c:	2b04      	cmp	r3, #4
 800dc6e:	d11b      	bne.n	800dca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f06f 0204 	mvn.w	r2, #4
 800dc78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2202      	movs	r2, #2
 800dc7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	699b      	ldr	r3, [r3, #24]
 800dc86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d003      	beq.n	800dc96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 f8db 	bl	800de4a <HAL_TIM_IC_CaptureCallback>
 800dc94:	e005      	b.n	800dca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 f8cd 	bl	800de36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 f8de 	bl	800de5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	691b      	ldr	r3, [r3, #16]
 800dcae:	f003 0308 	and.w	r3, r3, #8
 800dcb2:	2b08      	cmp	r3, #8
 800dcb4:	d122      	bne.n	800dcfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	f003 0308 	and.w	r3, r3, #8
 800dcc0:	2b08      	cmp	r3, #8
 800dcc2:	d11b      	bne.n	800dcfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f06f 0208 	mvn.w	r2, #8
 800dccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2204      	movs	r2, #4
 800dcd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	69db      	ldr	r3, [r3, #28]
 800dcda:	f003 0303 	and.w	r3, r3, #3
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d003      	beq.n	800dcea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 f8b1 	bl	800de4a <HAL_TIM_IC_CaptureCallback>
 800dce8:	e005      	b.n	800dcf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f8a3 	bl	800de36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 f8b4 	bl	800de5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	691b      	ldr	r3, [r3, #16]
 800dd02:	f003 0310 	and.w	r3, r3, #16
 800dd06:	2b10      	cmp	r3, #16
 800dd08:	d122      	bne.n	800dd50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	f003 0310 	and.w	r3, r3, #16
 800dd14:	2b10      	cmp	r3, #16
 800dd16:	d11b      	bne.n	800dd50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f06f 0210 	mvn.w	r2, #16
 800dd20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2208      	movs	r2, #8
 800dd26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	69db      	ldr	r3, [r3, #28]
 800dd2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d003      	beq.n	800dd3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f000 f887 	bl	800de4a <HAL_TIM_IC_CaptureCallback>
 800dd3c:	e005      	b.n	800dd4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 f879 	bl	800de36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 f88a 	bl	800de5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	f003 0301 	and.w	r3, r3, #1
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d10e      	bne.n	800dd7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	f003 0301 	and.w	r3, r3, #1
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d107      	bne.n	800dd7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f06f 0201 	mvn.w	r2, #1
 800dd74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7f9 f8e2 	bl	8006f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd86:	2b80      	cmp	r3, #128	; 0x80
 800dd88:	d10e      	bne.n	800dda8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd94:	2b80      	cmp	r3, #128	; 0x80
 800dd96:	d107      	bne.n	800dda8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dda0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 f9a2 	bl	800e0ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddb6:	d10e      	bne.n	800ddd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddc2:	2b80      	cmp	r3, #128	; 0x80
 800ddc4:	d107      	bne.n	800ddd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ddce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 f995 	bl	800e100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	691b      	ldr	r3, [r3, #16]
 800dddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dde0:	2b40      	cmp	r3, #64	; 0x40
 800dde2:	d10e      	bne.n	800de02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddee:	2b40      	cmp	r3, #64	; 0x40
 800ddf0:	d107      	bne.n	800de02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ddfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f838 	bl	800de72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	f003 0320 	and.w	r3, r3, #32
 800de0c:	2b20      	cmp	r3, #32
 800de0e:	d10e      	bne.n	800de2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	f003 0320 	and.w	r3, r3, #32
 800de1a:	2b20      	cmp	r3, #32
 800de1c:	d107      	bne.n	800de2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f06f 0220 	mvn.w	r2, #32
 800de26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f000 f955 	bl	800e0d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de2e:	bf00      	nop
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800de36:	b480      	push	{r7}
 800de38:	b083      	sub	sp, #12
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800de3e:	bf00      	nop
 800de40:	370c      	adds	r7, #12
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800de4a:	b480      	push	{r7}
 800de4c:	b083      	sub	sp, #12
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de52:	bf00      	nop
 800de54:	370c      	adds	r7, #12
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr

0800de5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de5e:	b480      	push	{r7}
 800de60:	b083      	sub	sp, #12
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800de66:	bf00      	nop
 800de68:	370c      	adds	r7, #12
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr

0800de72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de72:	b480      	push	{r7}
 800de74:	b083      	sub	sp, #12
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de7a:	bf00      	nop
 800de7c:	370c      	adds	r7, #12
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr
	...

0800de88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	4a40      	ldr	r2, [pc, #256]	; (800df9c <TIM_Base_SetConfig+0x114>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d013      	beq.n	800dec8 <TIM_Base_SetConfig+0x40>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dea6:	d00f      	beq.n	800dec8 <TIM_Base_SetConfig+0x40>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4a3d      	ldr	r2, [pc, #244]	; (800dfa0 <TIM_Base_SetConfig+0x118>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d00b      	beq.n	800dec8 <TIM_Base_SetConfig+0x40>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	4a3c      	ldr	r2, [pc, #240]	; (800dfa4 <TIM_Base_SetConfig+0x11c>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d007      	beq.n	800dec8 <TIM_Base_SetConfig+0x40>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	4a3b      	ldr	r2, [pc, #236]	; (800dfa8 <TIM_Base_SetConfig+0x120>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d003      	beq.n	800dec8 <TIM_Base_SetConfig+0x40>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4a3a      	ldr	r2, [pc, #232]	; (800dfac <TIM_Base_SetConfig+0x124>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d108      	bne.n	800deda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4a2f      	ldr	r2, [pc, #188]	; (800df9c <TIM_Base_SetConfig+0x114>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d01f      	beq.n	800df22 <TIM_Base_SetConfig+0x9a>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dee8:	d01b      	beq.n	800df22 <TIM_Base_SetConfig+0x9a>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	4a2c      	ldr	r2, [pc, #176]	; (800dfa0 <TIM_Base_SetConfig+0x118>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d017      	beq.n	800df22 <TIM_Base_SetConfig+0x9a>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	4a2b      	ldr	r2, [pc, #172]	; (800dfa4 <TIM_Base_SetConfig+0x11c>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d013      	beq.n	800df22 <TIM_Base_SetConfig+0x9a>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4a2a      	ldr	r2, [pc, #168]	; (800dfa8 <TIM_Base_SetConfig+0x120>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d00f      	beq.n	800df22 <TIM_Base_SetConfig+0x9a>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4a29      	ldr	r2, [pc, #164]	; (800dfac <TIM_Base_SetConfig+0x124>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d00b      	beq.n	800df22 <TIM_Base_SetConfig+0x9a>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	4a28      	ldr	r2, [pc, #160]	; (800dfb0 <TIM_Base_SetConfig+0x128>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d007      	beq.n	800df22 <TIM_Base_SetConfig+0x9a>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	4a27      	ldr	r2, [pc, #156]	; (800dfb4 <TIM_Base_SetConfig+0x12c>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d003      	beq.n	800df22 <TIM_Base_SetConfig+0x9a>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4a26      	ldr	r2, [pc, #152]	; (800dfb8 <TIM_Base_SetConfig+0x130>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d108      	bne.n	800df34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	4313      	orrs	r3, r2
 800df32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	695b      	ldr	r3, [r3, #20]
 800df3e:	4313      	orrs	r3, r2
 800df40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	689a      	ldr	r2, [r3, #8]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	4a10      	ldr	r2, [pc, #64]	; (800df9c <TIM_Base_SetConfig+0x114>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d00f      	beq.n	800df80 <TIM_Base_SetConfig+0xf8>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4a12      	ldr	r2, [pc, #72]	; (800dfac <TIM_Base_SetConfig+0x124>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d00b      	beq.n	800df80 <TIM_Base_SetConfig+0xf8>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	4a11      	ldr	r2, [pc, #68]	; (800dfb0 <TIM_Base_SetConfig+0x128>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d007      	beq.n	800df80 <TIM_Base_SetConfig+0xf8>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	4a10      	ldr	r2, [pc, #64]	; (800dfb4 <TIM_Base_SetConfig+0x12c>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d003      	beq.n	800df80 <TIM_Base_SetConfig+0xf8>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4a0f      	ldr	r2, [pc, #60]	; (800dfb8 <TIM_Base_SetConfig+0x130>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d103      	bne.n	800df88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	691a      	ldr	r2, [r3, #16]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2201      	movs	r2, #1
 800df8c:	615a      	str	r2, [r3, #20]
}
 800df8e:	bf00      	nop
 800df90:	3714      	adds	r7, #20
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	40010000 	.word	0x40010000
 800dfa0:	40000400 	.word	0x40000400
 800dfa4:	40000800 	.word	0x40000800
 800dfa8:	40000c00 	.word	0x40000c00
 800dfac:	40010400 	.word	0x40010400
 800dfb0:	40014000 	.word	0x40014000
 800dfb4:	40014400 	.word	0x40014400
 800dfb8:	40014800 	.word	0x40014800

0800dfbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b085      	sub	sp, #20
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d101      	bne.n	800dfd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dfd0:	2302      	movs	r3, #2
 800dfd2:	e06d      	b.n	800e0b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2202      	movs	r2, #2
 800dfe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a30      	ldr	r2, [pc, #192]	; (800e0bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d004      	beq.n	800e008 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a2f      	ldr	r2, [pc, #188]	; (800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d108      	bne.n	800e01a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e00e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	4313      	orrs	r3, r2
 800e018:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e020:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	4313      	orrs	r3, r2
 800e02a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a20      	ldr	r2, [pc, #128]	; (800e0bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d022      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e046:	d01d      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a1d      	ldr	r2, [pc, #116]	; (800e0c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d018      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a1c      	ldr	r2, [pc, #112]	; (800e0c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d013      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a1a      	ldr	r2, [pc, #104]	; (800e0cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d00e      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a15      	ldr	r2, [pc, #84]	; (800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d009      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a16      	ldr	r2, [pc, #88]	; (800e0d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d004      	beq.n	800e084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a15      	ldr	r2, [pc, #84]	; (800e0d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d10c      	bne.n	800e09e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e08a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	4313      	orrs	r3, r2
 800e094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	68ba      	ldr	r2, [r7, #8]
 800e09c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3714      	adds	r7, #20
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	40010000 	.word	0x40010000
 800e0c0:	40010400 	.word	0x40010400
 800e0c4:	40000400 	.word	0x40000400
 800e0c8:	40000800 	.word	0x40000800
 800e0cc:	40000c00 	.word	0x40000c00
 800e0d0:	40001800 	.word	0x40001800
 800e0d4:	40014000 	.word	0x40014000

0800e0d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e0e0:	bf00      	nop
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0f4:	bf00      	nop
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e108:	bf00      	nop
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d101      	bne.n	800e126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e122:	2301      	movs	r3, #1
 800e124:	e042      	b.n	800e1ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d106      	bne.n	800e13e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f7fb fa5d 	bl	80095f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2224      	movs	r2, #36	; 0x24
 800e142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f022 0201 	bic.w	r2, r2, #1
 800e154:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 f86c 	bl	800e234 <UART_SetConfig>
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d101      	bne.n	800e166 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e162:	2301      	movs	r3, #1
 800e164:	e022      	b.n	800e1ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d002      	beq.n	800e174 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 fdc8 	bl	800ed04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	685a      	ldr	r2, [r3, #4]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e182:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	689a      	ldr	r2, [r3, #8]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e192:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f042 0201 	orr.w	r2, r2, #1
 800e1a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 fe4f 	bl	800ee48 <UART_CheckIdleState>
 800e1aa:	4603      	mov	r3, r0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d101      	bne.n	800e1c6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e031      	b.n	800e22a <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2224      	movs	r2, #36	; 0x24
 800e1ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f022 0201 	bic.w	r2, r2, #1
 800e1dc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7fb fbc4 	bl	8009984 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2200      	movs	r2, #0
 800e200:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2200      	movs	r2, #0
 800e210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2200      	movs	r2, #0
 800e21e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
	...

0800e234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e238:	b092      	sub	sp, #72	; 0x48
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e23e:	2300      	movs	r3, #0
 800e240:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	689a      	ldr	r2, [r3, #8]
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	691b      	ldr	r3, [r3, #16]
 800e24c:	431a      	orrs	r2, r3
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	431a      	orrs	r2, r3
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	69db      	ldr	r3, [r3, #28]
 800e258:	4313      	orrs	r3, r2
 800e25a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	4bbe      	ldr	r3, [pc, #760]	; (800e55c <UART_SetConfig+0x328>)
 800e264:	4013      	ands	r3, r2
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	6812      	ldr	r2, [r2, #0]
 800e26a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e26c:	430b      	orrs	r3, r1
 800e26e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	68da      	ldr	r2, [r3, #12]
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	430a      	orrs	r2, r1
 800e284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	699b      	ldr	r3, [r3, #24]
 800e28a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4ab3      	ldr	r2, [pc, #716]	; (800e560 <UART_SetConfig+0x32c>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d004      	beq.n	800e2a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	6a1b      	ldr	r3, [r3, #32]
 800e29a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e29c:	4313      	orrs	r3, r2
 800e29e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	689a      	ldr	r2, [r3, #8]
 800e2a6:	4baf      	ldr	r3, [pc, #700]	; (800e564 <UART_SetConfig+0x330>)
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	697a      	ldr	r2, [r7, #20]
 800e2ac:	6812      	ldr	r2, [r2, #0]
 800e2ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2b0:	430b      	orrs	r3, r1
 800e2b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ba:	f023 010f 	bic.w	r1, r3, #15
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	430a      	orrs	r2, r1
 800e2c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4aa6      	ldr	r2, [pc, #664]	; (800e568 <UART_SetConfig+0x334>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d177      	bne.n	800e3c4 <UART_SetConfig+0x190>
 800e2d4:	4ba5      	ldr	r3, [pc, #660]	; (800e56c <UART_SetConfig+0x338>)
 800e2d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2dc:	2b28      	cmp	r3, #40	; 0x28
 800e2de:	d86d      	bhi.n	800e3bc <UART_SetConfig+0x188>
 800e2e0:	a201      	add	r2, pc, #4	; (adr r2, 800e2e8 <UART_SetConfig+0xb4>)
 800e2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e6:	bf00      	nop
 800e2e8:	0800e38d 	.word	0x0800e38d
 800e2ec:	0800e3bd 	.word	0x0800e3bd
 800e2f0:	0800e3bd 	.word	0x0800e3bd
 800e2f4:	0800e3bd 	.word	0x0800e3bd
 800e2f8:	0800e3bd 	.word	0x0800e3bd
 800e2fc:	0800e3bd 	.word	0x0800e3bd
 800e300:	0800e3bd 	.word	0x0800e3bd
 800e304:	0800e3bd 	.word	0x0800e3bd
 800e308:	0800e395 	.word	0x0800e395
 800e30c:	0800e3bd 	.word	0x0800e3bd
 800e310:	0800e3bd 	.word	0x0800e3bd
 800e314:	0800e3bd 	.word	0x0800e3bd
 800e318:	0800e3bd 	.word	0x0800e3bd
 800e31c:	0800e3bd 	.word	0x0800e3bd
 800e320:	0800e3bd 	.word	0x0800e3bd
 800e324:	0800e3bd 	.word	0x0800e3bd
 800e328:	0800e39d 	.word	0x0800e39d
 800e32c:	0800e3bd 	.word	0x0800e3bd
 800e330:	0800e3bd 	.word	0x0800e3bd
 800e334:	0800e3bd 	.word	0x0800e3bd
 800e338:	0800e3bd 	.word	0x0800e3bd
 800e33c:	0800e3bd 	.word	0x0800e3bd
 800e340:	0800e3bd 	.word	0x0800e3bd
 800e344:	0800e3bd 	.word	0x0800e3bd
 800e348:	0800e3a5 	.word	0x0800e3a5
 800e34c:	0800e3bd 	.word	0x0800e3bd
 800e350:	0800e3bd 	.word	0x0800e3bd
 800e354:	0800e3bd 	.word	0x0800e3bd
 800e358:	0800e3bd 	.word	0x0800e3bd
 800e35c:	0800e3bd 	.word	0x0800e3bd
 800e360:	0800e3bd 	.word	0x0800e3bd
 800e364:	0800e3bd 	.word	0x0800e3bd
 800e368:	0800e3ad 	.word	0x0800e3ad
 800e36c:	0800e3bd 	.word	0x0800e3bd
 800e370:	0800e3bd 	.word	0x0800e3bd
 800e374:	0800e3bd 	.word	0x0800e3bd
 800e378:	0800e3bd 	.word	0x0800e3bd
 800e37c:	0800e3bd 	.word	0x0800e3bd
 800e380:	0800e3bd 	.word	0x0800e3bd
 800e384:	0800e3bd 	.word	0x0800e3bd
 800e388:	0800e3b5 	.word	0x0800e3b5
 800e38c:	2301      	movs	r3, #1
 800e38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e392:	e222      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e394:	2304      	movs	r3, #4
 800e396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39a:	e21e      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e39c:	2308      	movs	r3, #8
 800e39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a2:	e21a      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e3a4:	2310      	movs	r3, #16
 800e3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3aa:	e216      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e3ac:	2320      	movs	r3, #32
 800e3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b2:	e212      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e3b4:	2340      	movs	r3, #64	; 0x40
 800e3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ba:	e20e      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e3bc:	2380      	movs	r3, #128	; 0x80
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c2:	e20a      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a69      	ldr	r2, [pc, #420]	; (800e570 <UART_SetConfig+0x33c>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d130      	bne.n	800e430 <UART_SetConfig+0x1fc>
 800e3ce:	4b67      	ldr	r3, [pc, #412]	; (800e56c <UART_SetConfig+0x338>)
 800e3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3d2:	f003 0307 	and.w	r3, r3, #7
 800e3d6:	2b05      	cmp	r3, #5
 800e3d8:	d826      	bhi.n	800e428 <UART_SetConfig+0x1f4>
 800e3da:	a201      	add	r2, pc, #4	; (adr r2, 800e3e0 <UART_SetConfig+0x1ac>)
 800e3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e0:	0800e3f9 	.word	0x0800e3f9
 800e3e4:	0800e401 	.word	0x0800e401
 800e3e8:	0800e409 	.word	0x0800e409
 800e3ec:	0800e411 	.word	0x0800e411
 800e3f0:	0800e419 	.word	0x0800e419
 800e3f4:	0800e421 	.word	0x0800e421
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fe:	e1ec      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e400:	2304      	movs	r3, #4
 800e402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e406:	e1e8      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e408:	2308      	movs	r3, #8
 800e40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40e:	e1e4      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e410:	2310      	movs	r3, #16
 800e412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e416:	e1e0      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e418:	2320      	movs	r3, #32
 800e41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41e:	e1dc      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e420:	2340      	movs	r3, #64	; 0x40
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e426:	e1d8      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e428:	2380      	movs	r3, #128	; 0x80
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e1d4      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4a4f      	ldr	r2, [pc, #316]	; (800e574 <UART_SetConfig+0x340>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d130      	bne.n	800e49c <UART_SetConfig+0x268>
 800e43a:	4b4c      	ldr	r3, [pc, #304]	; (800e56c <UART_SetConfig+0x338>)
 800e43c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e43e:	f003 0307 	and.w	r3, r3, #7
 800e442:	2b05      	cmp	r3, #5
 800e444:	d826      	bhi.n	800e494 <UART_SetConfig+0x260>
 800e446:	a201      	add	r2, pc, #4	; (adr r2, 800e44c <UART_SetConfig+0x218>)
 800e448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e44c:	0800e465 	.word	0x0800e465
 800e450:	0800e46d 	.word	0x0800e46d
 800e454:	0800e475 	.word	0x0800e475
 800e458:	0800e47d 	.word	0x0800e47d
 800e45c:	0800e485 	.word	0x0800e485
 800e460:	0800e48d 	.word	0x0800e48d
 800e464:	2300      	movs	r3, #0
 800e466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e46a:	e1b6      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e46c:	2304      	movs	r3, #4
 800e46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e472:	e1b2      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e474:	2308      	movs	r3, #8
 800e476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e47a:	e1ae      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e47c:	2310      	movs	r3, #16
 800e47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e482:	e1aa      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e484:	2320      	movs	r3, #32
 800e486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48a:	e1a6      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e48c:	2340      	movs	r3, #64	; 0x40
 800e48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e492:	e1a2      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e494:	2380      	movs	r3, #128	; 0x80
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e19e      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a35      	ldr	r2, [pc, #212]	; (800e578 <UART_SetConfig+0x344>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d130      	bne.n	800e508 <UART_SetConfig+0x2d4>
 800e4a6:	4b31      	ldr	r3, [pc, #196]	; (800e56c <UART_SetConfig+0x338>)
 800e4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4aa:	f003 0307 	and.w	r3, r3, #7
 800e4ae:	2b05      	cmp	r3, #5
 800e4b0:	d826      	bhi.n	800e500 <UART_SetConfig+0x2cc>
 800e4b2:	a201      	add	r2, pc, #4	; (adr r2, 800e4b8 <UART_SetConfig+0x284>)
 800e4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b8:	0800e4d1 	.word	0x0800e4d1
 800e4bc:	0800e4d9 	.word	0x0800e4d9
 800e4c0:	0800e4e1 	.word	0x0800e4e1
 800e4c4:	0800e4e9 	.word	0x0800e4e9
 800e4c8:	0800e4f1 	.word	0x0800e4f1
 800e4cc:	0800e4f9 	.word	0x0800e4f9
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d6:	e180      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e4d8:	2304      	movs	r3, #4
 800e4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4de:	e17c      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e4e0:	2308      	movs	r3, #8
 800e4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4e6:	e178      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e4e8:	2310      	movs	r3, #16
 800e4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ee:	e174      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e4f0:	2320      	movs	r3, #32
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e170      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e4f8:	2340      	movs	r3, #64	; 0x40
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e16c      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e500:	2380      	movs	r3, #128	; 0x80
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e168      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a1b      	ldr	r2, [pc, #108]	; (800e57c <UART_SetConfig+0x348>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d142      	bne.n	800e598 <UART_SetConfig+0x364>
 800e512:	4b16      	ldr	r3, [pc, #88]	; (800e56c <UART_SetConfig+0x338>)
 800e514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e516:	f003 0307 	and.w	r3, r3, #7
 800e51a:	2b05      	cmp	r3, #5
 800e51c:	d838      	bhi.n	800e590 <UART_SetConfig+0x35c>
 800e51e:	a201      	add	r2, pc, #4	; (adr r2, 800e524 <UART_SetConfig+0x2f0>)
 800e520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e524:	0800e53d 	.word	0x0800e53d
 800e528:	0800e545 	.word	0x0800e545
 800e52c:	0800e54d 	.word	0x0800e54d
 800e530:	0800e555 	.word	0x0800e555
 800e534:	0800e581 	.word	0x0800e581
 800e538:	0800e589 	.word	0x0800e589
 800e53c:	2300      	movs	r3, #0
 800e53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e542:	e14a      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e544:	2304      	movs	r3, #4
 800e546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54a:	e146      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e54c:	2308      	movs	r3, #8
 800e54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e552:	e142      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e554:	2310      	movs	r3, #16
 800e556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e55a:	e13e      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e55c:	cfff69f3 	.word	0xcfff69f3
 800e560:	58000c00 	.word	0x58000c00
 800e564:	11fff4ff 	.word	0x11fff4ff
 800e568:	40011000 	.word	0x40011000
 800e56c:	58024400 	.word	0x58024400
 800e570:	40004400 	.word	0x40004400
 800e574:	40004800 	.word	0x40004800
 800e578:	40004c00 	.word	0x40004c00
 800e57c:	40005000 	.word	0x40005000
 800e580:	2320      	movs	r3, #32
 800e582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e586:	e128      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e588:	2340      	movs	r3, #64	; 0x40
 800e58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e58e:	e124      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e590:	2380      	movs	r3, #128	; 0x80
 800e592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e596:	e120      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4acb      	ldr	r2, [pc, #812]	; (800e8cc <UART_SetConfig+0x698>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d176      	bne.n	800e690 <UART_SetConfig+0x45c>
 800e5a2:	4bcb      	ldr	r3, [pc, #812]	; (800e8d0 <UART_SetConfig+0x69c>)
 800e5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5aa:	2b28      	cmp	r3, #40	; 0x28
 800e5ac:	d86c      	bhi.n	800e688 <UART_SetConfig+0x454>
 800e5ae:	a201      	add	r2, pc, #4	; (adr r2, 800e5b4 <UART_SetConfig+0x380>)
 800e5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b4:	0800e659 	.word	0x0800e659
 800e5b8:	0800e689 	.word	0x0800e689
 800e5bc:	0800e689 	.word	0x0800e689
 800e5c0:	0800e689 	.word	0x0800e689
 800e5c4:	0800e689 	.word	0x0800e689
 800e5c8:	0800e689 	.word	0x0800e689
 800e5cc:	0800e689 	.word	0x0800e689
 800e5d0:	0800e689 	.word	0x0800e689
 800e5d4:	0800e661 	.word	0x0800e661
 800e5d8:	0800e689 	.word	0x0800e689
 800e5dc:	0800e689 	.word	0x0800e689
 800e5e0:	0800e689 	.word	0x0800e689
 800e5e4:	0800e689 	.word	0x0800e689
 800e5e8:	0800e689 	.word	0x0800e689
 800e5ec:	0800e689 	.word	0x0800e689
 800e5f0:	0800e689 	.word	0x0800e689
 800e5f4:	0800e669 	.word	0x0800e669
 800e5f8:	0800e689 	.word	0x0800e689
 800e5fc:	0800e689 	.word	0x0800e689
 800e600:	0800e689 	.word	0x0800e689
 800e604:	0800e689 	.word	0x0800e689
 800e608:	0800e689 	.word	0x0800e689
 800e60c:	0800e689 	.word	0x0800e689
 800e610:	0800e689 	.word	0x0800e689
 800e614:	0800e671 	.word	0x0800e671
 800e618:	0800e689 	.word	0x0800e689
 800e61c:	0800e689 	.word	0x0800e689
 800e620:	0800e689 	.word	0x0800e689
 800e624:	0800e689 	.word	0x0800e689
 800e628:	0800e689 	.word	0x0800e689
 800e62c:	0800e689 	.word	0x0800e689
 800e630:	0800e689 	.word	0x0800e689
 800e634:	0800e679 	.word	0x0800e679
 800e638:	0800e689 	.word	0x0800e689
 800e63c:	0800e689 	.word	0x0800e689
 800e640:	0800e689 	.word	0x0800e689
 800e644:	0800e689 	.word	0x0800e689
 800e648:	0800e689 	.word	0x0800e689
 800e64c:	0800e689 	.word	0x0800e689
 800e650:	0800e689 	.word	0x0800e689
 800e654:	0800e681 	.word	0x0800e681
 800e658:	2301      	movs	r3, #1
 800e65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e65e:	e0bc      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e660:	2304      	movs	r3, #4
 800e662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e666:	e0b8      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e668:	2308      	movs	r3, #8
 800e66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66e:	e0b4      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e670:	2310      	movs	r3, #16
 800e672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e676:	e0b0      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e678:	2320      	movs	r3, #32
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e0ac      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e680:	2340      	movs	r3, #64	; 0x40
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e686:	e0a8      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e688:	2380      	movs	r3, #128	; 0x80
 800e68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68e:	e0a4      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a8f      	ldr	r2, [pc, #572]	; (800e8d4 <UART_SetConfig+0x6a0>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d130      	bne.n	800e6fc <UART_SetConfig+0x4c8>
 800e69a:	4b8d      	ldr	r3, [pc, #564]	; (800e8d0 <UART_SetConfig+0x69c>)
 800e69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e69e:	f003 0307 	and.w	r3, r3, #7
 800e6a2:	2b05      	cmp	r3, #5
 800e6a4:	d826      	bhi.n	800e6f4 <UART_SetConfig+0x4c0>
 800e6a6:	a201      	add	r2, pc, #4	; (adr r2, 800e6ac <UART_SetConfig+0x478>)
 800e6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ac:	0800e6c5 	.word	0x0800e6c5
 800e6b0:	0800e6cd 	.word	0x0800e6cd
 800e6b4:	0800e6d5 	.word	0x0800e6d5
 800e6b8:	0800e6dd 	.word	0x0800e6dd
 800e6bc:	0800e6e5 	.word	0x0800e6e5
 800e6c0:	0800e6ed 	.word	0x0800e6ed
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ca:	e086      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e6cc:	2304      	movs	r3, #4
 800e6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6d2:	e082      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e6d4:	2308      	movs	r3, #8
 800e6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6da:	e07e      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e6dc:	2310      	movs	r3, #16
 800e6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e2:	e07a      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e6e4:	2320      	movs	r3, #32
 800e6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ea:	e076      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e6ec:	2340      	movs	r3, #64	; 0x40
 800e6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6f2:	e072      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e6f4:	2380      	movs	r3, #128	; 0x80
 800e6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fa:	e06e      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a75      	ldr	r2, [pc, #468]	; (800e8d8 <UART_SetConfig+0x6a4>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d130      	bne.n	800e768 <UART_SetConfig+0x534>
 800e706:	4b72      	ldr	r3, [pc, #456]	; (800e8d0 <UART_SetConfig+0x69c>)
 800e708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e70a:	f003 0307 	and.w	r3, r3, #7
 800e70e:	2b05      	cmp	r3, #5
 800e710:	d826      	bhi.n	800e760 <UART_SetConfig+0x52c>
 800e712:	a201      	add	r2, pc, #4	; (adr r2, 800e718 <UART_SetConfig+0x4e4>)
 800e714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e718:	0800e731 	.word	0x0800e731
 800e71c:	0800e739 	.word	0x0800e739
 800e720:	0800e741 	.word	0x0800e741
 800e724:	0800e749 	.word	0x0800e749
 800e728:	0800e751 	.word	0x0800e751
 800e72c:	0800e759 	.word	0x0800e759
 800e730:	2300      	movs	r3, #0
 800e732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e736:	e050      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e738:	2304      	movs	r3, #4
 800e73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e73e:	e04c      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e740:	2308      	movs	r3, #8
 800e742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e746:	e048      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e748:	2310      	movs	r3, #16
 800e74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74e:	e044      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e750:	2320      	movs	r3, #32
 800e752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e756:	e040      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e758:	2340      	movs	r3, #64	; 0x40
 800e75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75e:	e03c      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e760:	2380      	movs	r3, #128	; 0x80
 800e762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e766:	e038      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a5b      	ldr	r2, [pc, #364]	; (800e8dc <UART_SetConfig+0x6a8>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d130      	bne.n	800e7d4 <UART_SetConfig+0x5a0>
 800e772:	4b57      	ldr	r3, [pc, #348]	; (800e8d0 <UART_SetConfig+0x69c>)
 800e774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e776:	f003 0307 	and.w	r3, r3, #7
 800e77a:	2b05      	cmp	r3, #5
 800e77c:	d826      	bhi.n	800e7cc <UART_SetConfig+0x598>
 800e77e:	a201      	add	r2, pc, #4	; (adr r2, 800e784 <UART_SetConfig+0x550>)
 800e780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e784:	0800e79d 	.word	0x0800e79d
 800e788:	0800e7a5 	.word	0x0800e7a5
 800e78c:	0800e7ad 	.word	0x0800e7ad
 800e790:	0800e7b5 	.word	0x0800e7b5
 800e794:	0800e7bd 	.word	0x0800e7bd
 800e798:	0800e7c5 	.word	0x0800e7c5
 800e79c:	2302      	movs	r3, #2
 800e79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7a2:	e01a      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e7a4:	2304      	movs	r3, #4
 800e7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7aa:	e016      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e7ac:	2308      	movs	r3, #8
 800e7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7b2:	e012      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e7b4:	2310      	movs	r3, #16
 800e7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ba:	e00e      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e7bc:	2320      	movs	r3, #32
 800e7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c2:	e00a      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e7c4:	2340      	movs	r3, #64	; 0x40
 800e7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ca:	e006      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e7cc:	2380      	movs	r3, #128	; 0x80
 800e7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7d2:	e002      	b.n	800e7da <UART_SetConfig+0x5a6>
 800e7d4:	2380      	movs	r3, #128	; 0x80
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4a3f      	ldr	r2, [pc, #252]	; (800e8dc <UART_SetConfig+0x6a8>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	f040 80f8 	bne.w	800e9d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e7e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7ea:	2b20      	cmp	r3, #32
 800e7ec:	dc46      	bgt.n	800e87c <UART_SetConfig+0x648>
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	f2c0 8082 	blt.w	800e8f8 <UART_SetConfig+0x6c4>
 800e7f4:	3b02      	subs	r3, #2
 800e7f6:	2b1e      	cmp	r3, #30
 800e7f8:	d87e      	bhi.n	800e8f8 <UART_SetConfig+0x6c4>
 800e7fa:	a201      	add	r2, pc, #4	; (adr r2, 800e800 <UART_SetConfig+0x5cc>)
 800e7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e800:	0800e883 	.word	0x0800e883
 800e804:	0800e8f9 	.word	0x0800e8f9
 800e808:	0800e88b 	.word	0x0800e88b
 800e80c:	0800e8f9 	.word	0x0800e8f9
 800e810:	0800e8f9 	.word	0x0800e8f9
 800e814:	0800e8f9 	.word	0x0800e8f9
 800e818:	0800e89b 	.word	0x0800e89b
 800e81c:	0800e8f9 	.word	0x0800e8f9
 800e820:	0800e8f9 	.word	0x0800e8f9
 800e824:	0800e8f9 	.word	0x0800e8f9
 800e828:	0800e8f9 	.word	0x0800e8f9
 800e82c:	0800e8f9 	.word	0x0800e8f9
 800e830:	0800e8f9 	.word	0x0800e8f9
 800e834:	0800e8f9 	.word	0x0800e8f9
 800e838:	0800e8ab 	.word	0x0800e8ab
 800e83c:	0800e8f9 	.word	0x0800e8f9
 800e840:	0800e8f9 	.word	0x0800e8f9
 800e844:	0800e8f9 	.word	0x0800e8f9
 800e848:	0800e8f9 	.word	0x0800e8f9
 800e84c:	0800e8f9 	.word	0x0800e8f9
 800e850:	0800e8f9 	.word	0x0800e8f9
 800e854:	0800e8f9 	.word	0x0800e8f9
 800e858:	0800e8f9 	.word	0x0800e8f9
 800e85c:	0800e8f9 	.word	0x0800e8f9
 800e860:	0800e8f9 	.word	0x0800e8f9
 800e864:	0800e8f9 	.word	0x0800e8f9
 800e868:	0800e8f9 	.word	0x0800e8f9
 800e86c:	0800e8f9 	.word	0x0800e8f9
 800e870:	0800e8f9 	.word	0x0800e8f9
 800e874:	0800e8f9 	.word	0x0800e8f9
 800e878:	0800e8eb 	.word	0x0800e8eb
 800e87c:	2b40      	cmp	r3, #64	; 0x40
 800e87e:	d037      	beq.n	800e8f0 <UART_SetConfig+0x6bc>
 800e880:	e03a      	b.n	800e8f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e882:	f7fe fb37 	bl	800cef4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e886:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e888:	e03c      	b.n	800e904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e88a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fe fb46 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e898:	e034      	b.n	800e904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e89a:	f107 0318 	add.w	r3, r7, #24
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fe fc92 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a8:	e02c      	b.n	800e904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8aa:	4b09      	ldr	r3, [pc, #36]	; (800e8d0 <UART_SetConfig+0x69c>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f003 0320 	and.w	r3, r3, #32
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d016      	beq.n	800e8e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e8b6:	4b06      	ldr	r3, [pc, #24]	; (800e8d0 <UART_SetConfig+0x69c>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	08db      	lsrs	r3, r3, #3
 800e8bc:	f003 0303 	and.w	r3, r3, #3
 800e8c0:	4a07      	ldr	r2, [pc, #28]	; (800e8e0 <UART_SetConfig+0x6ac>)
 800e8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800e8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8c8:	e01c      	b.n	800e904 <UART_SetConfig+0x6d0>
 800e8ca:	bf00      	nop
 800e8cc:	40011400 	.word	0x40011400
 800e8d0:	58024400 	.word	0x58024400
 800e8d4:	40007800 	.word	0x40007800
 800e8d8:	40007c00 	.word	0x40007c00
 800e8dc:	58000c00 	.word	0x58000c00
 800e8e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e8e4:	4b9d      	ldr	r3, [pc, #628]	; (800eb5c <UART_SetConfig+0x928>)
 800e8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8e8:	e00c      	b.n	800e904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8ea:	4b9d      	ldr	r3, [pc, #628]	; (800eb60 <UART_SetConfig+0x92c>)
 800e8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8ee:	e009      	b.n	800e904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8f6:	e005      	b.n	800e904 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e902:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e906:	2b00      	cmp	r3, #0
 800e908:	f000 81de 	beq.w	800ecc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e910:	4a94      	ldr	r2, [pc, #592]	; (800eb64 <UART_SetConfig+0x930>)
 800e912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e916:	461a      	mov	r2, r3
 800e918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e91e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	685a      	ldr	r2, [r3, #4]
 800e924:	4613      	mov	r3, r2
 800e926:	005b      	lsls	r3, r3, #1
 800e928:	4413      	add	r3, r2
 800e92a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d305      	bcc.n	800e93c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e938:	429a      	cmp	r2, r3
 800e93a:	d903      	bls.n	800e944 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e93c:	2301      	movs	r3, #1
 800e93e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e942:	e1c1      	b.n	800ecc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e946:	2200      	movs	r2, #0
 800e948:	60bb      	str	r3, [r7, #8]
 800e94a:	60fa      	str	r2, [r7, #12]
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e950:	4a84      	ldr	r2, [pc, #528]	; (800eb64 <UART_SetConfig+0x930>)
 800e952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e956:	b29b      	uxth	r3, r3
 800e958:	2200      	movs	r2, #0
 800e95a:	603b      	str	r3, [r7, #0]
 800e95c:	607a      	str	r2, [r7, #4]
 800e95e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e966:	f7f1 fd0b 	bl	8000380 <__aeabi_uldivmod>
 800e96a:	4602      	mov	r2, r0
 800e96c:	460b      	mov	r3, r1
 800e96e:	4610      	mov	r0, r2
 800e970:	4619      	mov	r1, r3
 800e972:	f04f 0200 	mov.w	r2, #0
 800e976:	f04f 0300 	mov.w	r3, #0
 800e97a:	020b      	lsls	r3, r1, #8
 800e97c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e980:	0202      	lsls	r2, r0, #8
 800e982:	6979      	ldr	r1, [r7, #20]
 800e984:	6849      	ldr	r1, [r1, #4]
 800e986:	0849      	lsrs	r1, r1, #1
 800e988:	2000      	movs	r0, #0
 800e98a:	460c      	mov	r4, r1
 800e98c:	4605      	mov	r5, r0
 800e98e:	eb12 0804 	adds.w	r8, r2, r4
 800e992:	eb43 0905 	adc.w	r9, r3, r5
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	469a      	mov	sl, r3
 800e99e:	4693      	mov	fp, r2
 800e9a0:	4652      	mov	r2, sl
 800e9a2:	465b      	mov	r3, fp
 800e9a4:	4640      	mov	r0, r8
 800e9a6:	4649      	mov	r1, r9
 800e9a8:	f7f1 fcea 	bl	8000380 <__aeabi_uldivmod>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9ba:	d308      	bcc.n	800e9ce <UART_SetConfig+0x79a>
 800e9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9c2:	d204      	bcs.n	800e9ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9ca:	60da      	str	r2, [r3, #12]
 800e9cc:	e17c      	b.n	800ecc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9d4:	e178      	b.n	800ecc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	69db      	ldr	r3, [r3, #28]
 800e9da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9de:	f040 80c5 	bne.w	800eb6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e9e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e9e6:	2b20      	cmp	r3, #32
 800e9e8:	dc48      	bgt.n	800ea7c <UART_SetConfig+0x848>
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	db7b      	blt.n	800eae6 <UART_SetConfig+0x8b2>
 800e9ee:	2b20      	cmp	r3, #32
 800e9f0:	d879      	bhi.n	800eae6 <UART_SetConfig+0x8b2>
 800e9f2:	a201      	add	r2, pc, #4	; (adr r2, 800e9f8 <UART_SetConfig+0x7c4>)
 800e9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f8:	0800ea83 	.word	0x0800ea83
 800e9fc:	0800ea8b 	.word	0x0800ea8b
 800ea00:	0800eae7 	.word	0x0800eae7
 800ea04:	0800eae7 	.word	0x0800eae7
 800ea08:	0800ea93 	.word	0x0800ea93
 800ea0c:	0800eae7 	.word	0x0800eae7
 800ea10:	0800eae7 	.word	0x0800eae7
 800ea14:	0800eae7 	.word	0x0800eae7
 800ea18:	0800eaa3 	.word	0x0800eaa3
 800ea1c:	0800eae7 	.word	0x0800eae7
 800ea20:	0800eae7 	.word	0x0800eae7
 800ea24:	0800eae7 	.word	0x0800eae7
 800ea28:	0800eae7 	.word	0x0800eae7
 800ea2c:	0800eae7 	.word	0x0800eae7
 800ea30:	0800eae7 	.word	0x0800eae7
 800ea34:	0800eae7 	.word	0x0800eae7
 800ea38:	0800eab3 	.word	0x0800eab3
 800ea3c:	0800eae7 	.word	0x0800eae7
 800ea40:	0800eae7 	.word	0x0800eae7
 800ea44:	0800eae7 	.word	0x0800eae7
 800ea48:	0800eae7 	.word	0x0800eae7
 800ea4c:	0800eae7 	.word	0x0800eae7
 800ea50:	0800eae7 	.word	0x0800eae7
 800ea54:	0800eae7 	.word	0x0800eae7
 800ea58:	0800eae7 	.word	0x0800eae7
 800ea5c:	0800eae7 	.word	0x0800eae7
 800ea60:	0800eae7 	.word	0x0800eae7
 800ea64:	0800eae7 	.word	0x0800eae7
 800ea68:	0800eae7 	.word	0x0800eae7
 800ea6c:	0800eae7 	.word	0x0800eae7
 800ea70:	0800eae7 	.word	0x0800eae7
 800ea74:	0800eae7 	.word	0x0800eae7
 800ea78:	0800ead9 	.word	0x0800ead9
 800ea7c:	2b40      	cmp	r3, #64	; 0x40
 800ea7e:	d02e      	beq.n	800eade <UART_SetConfig+0x8aa>
 800ea80:	e031      	b.n	800eae6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea82:	f7fd f801 	bl	800ba88 <HAL_RCC_GetPCLK1Freq>
 800ea86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea88:	e033      	b.n	800eaf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea8a:	f7fd f813 	bl	800bab4 <HAL_RCC_GetPCLK2Freq>
 800ea8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea90:	e02f      	b.n	800eaf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fe fa42 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaa0:	e027      	b.n	800eaf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eaa2:	f107 0318 	add.w	r3, r7, #24
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fe fb8e 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eab0:	e01f      	b.n	800eaf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eab2:	4b2d      	ldr	r3, [pc, #180]	; (800eb68 <UART_SetConfig+0x934>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f003 0320 	and.w	r3, r3, #32
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d009      	beq.n	800ead2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eabe:	4b2a      	ldr	r3, [pc, #168]	; (800eb68 <UART_SetConfig+0x934>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	08db      	lsrs	r3, r3, #3
 800eac4:	f003 0303 	and.w	r3, r3, #3
 800eac8:	4a24      	ldr	r2, [pc, #144]	; (800eb5c <UART_SetConfig+0x928>)
 800eaca:	fa22 f303 	lsr.w	r3, r2, r3
 800eace:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ead0:	e00f      	b.n	800eaf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ead2:	4b22      	ldr	r3, [pc, #136]	; (800eb5c <UART_SetConfig+0x928>)
 800ead4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ead6:	e00c      	b.n	800eaf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ead8:	4b21      	ldr	r3, [pc, #132]	; (800eb60 <UART_SetConfig+0x92c>)
 800eada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eadc:	e009      	b.n	800eaf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae4:	e005      	b.n	800eaf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800eae6:	2300      	movs	r3, #0
 800eae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eaea:	2301      	movs	r3, #1
 800eaec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eaf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eaf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f000 80e7 	beq.w	800ecc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafe:	4a19      	ldr	r2, [pc, #100]	; (800eb64 <UART_SetConfig+0x930>)
 800eb00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb04:	461a      	mov	r2, r3
 800eb06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb08:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb0c:	005a      	lsls	r2, r3, #1
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	085b      	lsrs	r3, r3, #1
 800eb14:	441a      	add	r2, r3
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb22:	2b0f      	cmp	r3, #15
 800eb24:	d916      	bls.n	800eb54 <UART_SetConfig+0x920>
 800eb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb2c:	d212      	bcs.n	800eb54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	f023 030f 	bic.w	r3, r3, #15
 800eb36:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3a:	085b      	lsrs	r3, r3, #1
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	f003 0307 	and.w	r3, r3, #7
 800eb42:	b29a      	uxth	r2, r3
 800eb44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb46:	4313      	orrs	r3, r2
 800eb48:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eb50:	60da      	str	r2, [r3, #12]
 800eb52:	e0b9      	b.n	800ecc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eb54:	2301      	movs	r3, #1
 800eb56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eb5a:	e0b5      	b.n	800ecc8 <UART_SetConfig+0xa94>
 800eb5c:	03d09000 	.word	0x03d09000
 800eb60:	003d0900 	.word	0x003d0900
 800eb64:	08011820 	.word	0x08011820
 800eb68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb70:	2b20      	cmp	r3, #32
 800eb72:	dc49      	bgt.n	800ec08 <UART_SetConfig+0x9d4>
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	db7c      	blt.n	800ec72 <UART_SetConfig+0xa3e>
 800eb78:	2b20      	cmp	r3, #32
 800eb7a:	d87a      	bhi.n	800ec72 <UART_SetConfig+0xa3e>
 800eb7c:	a201      	add	r2, pc, #4	; (adr r2, 800eb84 <UART_SetConfig+0x950>)
 800eb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb82:	bf00      	nop
 800eb84:	0800ec0f 	.word	0x0800ec0f
 800eb88:	0800ec17 	.word	0x0800ec17
 800eb8c:	0800ec73 	.word	0x0800ec73
 800eb90:	0800ec73 	.word	0x0800ec73
 800eb94:	0800ec1f 	.word	0x0800ec1f
 800eb98:	0800ec73 	.word	0x0800ec73
 800eb9c:	0800ec73 	.word	0x0800ec73
 800eba0:	0800ec73 	.word	0x0800ec73
 800eba4:	0800ec2f 	.word	0x0800ec2f
 800eba8:	0800ec73 	.word	0x0800ec73
 800ebac:	0800ec73 	.word	0x0800ec73
 800ebb0:	0800ec73 	.word	0x0800ec73
 800ebb4:	0800ec73 	.word	0x0800ec73
 800ebb8:	0800ec73 	.word	0x0800ec73
 800ebbc:	0800ec73 	.word	0x0800ec73
 800ebc0:	0800ec73 	.word	0x0800ec73
 800ebc4:	0800ec3f 	.word	0x0800ec3f
 800ebc8:	0800ec73 	.word	0x0800ec73
 800ebcc:	0800ec73 	.word	0x0800ec73
 800ebd0:	0800ec73 	.word	0x0800ec73
 800ebd4:	0800ec73 	.word	0x0800ec73
 800ebd8:	0800ec73 	.word	0x0800ec73
 800ebdc:	0800ec73 	.word	0x0800ec73
 800ebe0:	0800ec73 	.word	0x0800ec73
 800ebe4:	0800ec73 	.word	0x0800ec73
 800ebe8:	0800ec73 	.word	0x0800ec73
 800ebec:	0800ec73 	.word	0x0800ec73
 800ebf0:	0800ec73 	.word	0x0800ec73
 800ebf4:	0800ec73 	.word	0x0800ec73
 800ebf8:	0800ec73 	.word	0x0800ec73
 800ebfc:	0800ec73 	.word	0x0800ec73
 800ec00:	0800ec73 	.word	0x0800ec73
 800ec04:	0800ec65 	.word	0x0800ec65
 800ec08:	2b40      	cmp	r3, #64	; 0x40
 800ec0a:	d02e      	beq.n	800ec6a <UART_SetConfig+0xa36>
 800ec0c:	e031      	b.n	800ec72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec0e:	f7fc ff3b 	bl	800ba88 <HAL_RCC_GetPCLK1Freq>
 800ec12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec14:	e033      	b.n	800ec7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec16:	f7fc ff4d 	bl	800bab4 <HAL_RCC_GetPCLK2Freq>
 800ec1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec1c:	e02f      	b.n	800ec7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fe f97c 	bl	800cf20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec2c:	e027      	b.n	800ec7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec2e:	f107 0318 	add.w	r3, r7, #24
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7fe fac8 	bl	800d1c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec3c:	e01f      	b.n	800ec7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec3e:	4b2d      	ldr	r3, [pc, #180]	; (800ecf4 <UART_SetConfig+0xac0>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f003 0320 	and.w	r3, r3, #32
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d009      	beq.n	800ec5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec4a:	4b2a      	ldr	r3, [pc, #168]	; (800ecf4 <UART_SetConfig+0xac0>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	08db      	lsrs	r3, r3, #3
 800ec50:	f003 0303 	and.w	r3, r3, #3
 800ec54:	4a28      	ldr	r2, [pc, #160]	; (800ecf8 <UART_SetConfig+0xac4>)
 800ec56:	fa22 f303 	lsr.w	r3, r2, r3
 800ec5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec5c:	e00f      	b.n	800ec7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ec5e:	4b26      	ldr	r3, [pc, #152]	; (800ecf8 <UART_SetConfig+0xac4>)
 800ec60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec62:	e00c      	b.n	800ec7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec64:	4b25      	ldr	r3, [pc, #148]	; (800ecfc <UART_SetConfig+0xac8>)
 800ec66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec68:	e009      	b.n	800ec7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec70:	e005      	b.n	800ec7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ec72:	2300      	movs	r3, #0
 800ec74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec76:	2301      	movs	r3, #1
 800ec78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec7c:	bf00      	nop
    }

    if (pclk != 0U)
 800ec7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d021      	beq.n	800ecc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec88:	4a1d      	ldr	r2, [pc, #116]	; (800ed00 <UART_SetConfig+0xacc>)
 800ec8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec92:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	085b      	lsrs	r3, r3, #1
 800ec9c:	441a      	add	r2, r3
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800eca6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecaa:	2b0f      	cmp	r3, #15
 800ecac:	d909      	bls.n	800ecc2 <UART_SetConfig+0xa8e>
 800ecae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecb4:	d205      	bcs.n	800ecc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ecb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	60da      	str	r2, [r3, #12]
 800ecc0:	e002      	b.n	800ecc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	2201      	movs	r2, #1
 800eccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	2200      	movs	r2, #0
 800ece2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ece4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3748      	adds	r7, #72	; 0x48
 800ecec:	46bd      	mov	sp, r7
 800ecee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecf2:	bf00      	nop
 800ecf4:	58024400 	.word	0x58024400
 800ecf8:	03d09000 	.word	0x03d09000
 800ecfc:	003d0900 	.word	0x003d0900
 800ed00:	08011820 	.word	0x08011820

0800ed04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed10:	f003 0301 	and.w	r3, r3, #1
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00a      	beq.n	800ed2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	430a      	orrs	r2, r1
 800ed2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed32:	f003 0302 	and.w	r3, r3, #2
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00a      	beq.n	800ed50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	430a      	orrs	r2, r1
 800ed4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed54:	f003 0304 	and.w	r3, r3, #4
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00a      	beq.n	800ed72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	430a      	orrs	r2, r1
 800ed70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed76:	f003 0308 	and.w	r3, r3, #8
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00a      	beq.n	800ed94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	430a      	orrs	r2, r1
 800ed92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed98:	f003 0310 	and.w	r3, r3, #16
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00a      	beq.n	800edb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	430a      	orrs	r2, r1
 800edb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edba:	f003 0320 	and.w	r3, r3, #32
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d00a      	beq.n	800edd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	430a      	orrs	r2, r1
 800edd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d01a      	beq.n	800ee1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	430a      	orrs	r2, r1
 800edf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee02:	d10a      	bne.n	800ee1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	430a      	orrs	r2, r1
 800ee18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00a      	beq.n	800ee3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	430a      	orrs	r2, r1
 800ee3a:	605a      	str	r2, [r3, #4]
  }
}
 800ee3c:	bf00      	nop
 800ee3e:	370c      	adds	r7, #12
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr

0800ee48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b098      	sub	sp, #96	; 0x60
 800ee4c:	af02      	add	r7, sp, #8
 800ee4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee58:	f7fb f944 	bl	800a0e4 <HAL_GetTick>
 800ee5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f003 0308 	and.w	r3, r3, #8
 800ee68:	2b08      	cmp	r3, #8
 800ee6a:	d12f      	bne.n	800eecc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee74:	2200      	movs	r2, #0
 800ee76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 f88e 	bl	800ef9c <UART_WaitOnFlagUntilTimeout>
 800ee80:	4603      	mov	r3, r0
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d022      	beq.n	800eecc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8e:	e853 3f00 	ldrex	r3, [r3]
 800ee92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ee94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee9a:	653b      	str	r3, [r7, #80]	; 0x50
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	461a      	mov	r2, r3
 800eea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eea4:	647b      	str	r3, [r7, #68]	; 0x44
 800eea6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eeaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eeac:	e841 2300 	strex	r3, r2, [r1]
 800eeb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eeb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1e6      	bne.n	800ee86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2220      	movs	r2, #32
 800eebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eec8:	2303      	movs	r3, #3
 800eeca:	e063      	b.n	800ef94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f003 0304 	and.w	r3, r3, #4
 800eed6:	2b04      	cmp	r3, #4
 800eed8:	d149      	bne.n	800ef6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eeda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eee2:	2200      	movs	r2, #0
 800eee4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f857 	bl	800ef9c <UART_WaitOnFlagUntilTimeout>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d03c      	beq.n	800ef6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefc:	e853 3f00 	ldrex	r3, [r3]
 800ef00:	623b      	str	r3, [r7, #32]
   return(result);
 800ef02:	6a3b      	ldr	r3, [r7, #32]
 800ef04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef12:	633b      	str	r3, [r7, #48]	; 0x30
 800ef14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef1a:	e841 2300 	strex	r3, r2, [r1]
 800ef1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1e6      	bne.n	800eef4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	3308      	adds	r3, #8
 800ef2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	e853 3f00 	ldrex	r3, [r3]
 800ef34:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f023 0301 	bic.w	r3, r3, #1
 800ef3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	3308      	adds	r3, #8
 800ef44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef46:	61fa      	str	r2, [r7, #28]
 800ef48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef4a:	69b9      	ldr	r1, [r7, #24]
 800ef4c:	69fa      	ldr	r2, [r7, #28]
 800ef4e:	e841 2300 	strex	r3, r2, [r1]
 800ef52:	617b      	str	r3, [r7, #20]
   return(result);
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d1e5      	bne.n	800ef26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2220      	movs	r2, #32
 800ef5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2200      	movs	r2, #0
 800ef66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef6a:	2303      	movs	r3, #3
 800ef6c:	e012      	b.n	800ef94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2220      	movs	r2, #32
 800ef72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2220      	movs	r2, #32
 800ef7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2200      	movs	r2, #0
 800ef82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3758      	adds	r7, #88	; 0x58
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	603b      	str	r3, [r7, #0]
 800efa8:	4613      	mov	r3, r2
 800efaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efac:	e049      	b.n	800f042 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb4:	d045      	beq.n	800f042 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efb6:	f7fb f895 	bl	800a0e4 <HAL_GetTick>
 800efba:	4602      	mov	r2, r0
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	1ad3      	subs	r3, r2, r3
 800efc0:	69ba      	ldr	r2, [r7, #24]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d302      	bcc.n	800efcc <UART_WaitOnFlagUntilTimeout+0x30>
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d101      	bne.n	800efd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800efcc:	2303      	movs	r3, #3
 800efce:	e048      	b.n	800f062 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	f003 0304 	and.w	r3, r3, #4
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d031      	beq.n	800f042 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	69db      	ldr	r3, [r3, #28]
 800efe4:	f003 0308 	and.w	r3, r3, #8
 800efe8:	2b08      	cmp	r3, #8
 800efea:	d110      	bne.n	800f00e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2208      	movs	r2, #8
 800eff2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f000 f839 	bl	800f06c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2208      	movs	r2, #8
 800effe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f00a:	2301      	movs	r3, #1
 800f00c:	e029      	b.n	800f062 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	69db      	ldr	r3, [r3, #28]
 800f014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f01c:	d111      	bne.n	800f042 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f000 f81f 	bl	800f06c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2220      	movs	r2, #32
 800f032:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2200      	movs	r2, #0
 800f03a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f03e:	2303      	movs	r3, #3
 800f040:	e00f      	b.n	800f062 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	69da      	ldr	r2, [r3, #28]
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	4013      	ands	r3, r2
 800f04c:	68ba      	ldr	r2, [r7, #8]
 800f04e:	429a      	cmp	r2, r3
 800f050:	bf0c      	ite	eq
 800f052:	2301      	moveq	r3, #1
 800f054:	2300      	movne	r3, #0
 800f056:	b2db      	uxtb	r3, r3
 800f058:	461a      	mov	r2, r3
 800f05a:	79fb      	ldrb	r3, [r7, #7]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d0a6      	beq.n	800efae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b095      	sub	sp, #84	; 0x54
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f07c:	e853 3f00 	ldrex	r3, [r3]
 800f080:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	461a      	mov	r2, r3
 800f090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f092:	643b      	str	r3, [r7, #64]	; 0x40
 800f094:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f09a:	e841 2300 	strex	r3, r2, [r1]
 800f09e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1e6      	bne.n	800f074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	3308      	adds	r3, #8
 800f0ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ae:	6a3b      	ldr	r3, [r7, #32]
 800f0b0:	e853 3f00 	ldrex	r3, [r3]
 800f0b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0b6:	69fa      	ldr	r2, [r7, #28]
 800f0b8:	4b1e      	ldr	r3, [pc, #120]	; (800f134 <UART_EndRxTransfer+0xc8>)
 800f0ba:	4013      	ands	r3, r2
 800f0bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	3308      	adds	r3, #8
 800f0c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f0c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0ce:	e841 2300 	strex	r3, r2, [r1]
 800f0d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1e5      	bne.n	800f0a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d118      	bne.n	800f114 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	e853 3f00 	ldrex	r3, [r3]
 800f0ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	f023 0310 	bic.w	r3, r3, #16
 800f0f6:	647b      	str	r3, [r7, #68]	; 0x44
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f100:	61bb      	str	r3, [r7, #24]
 800f102:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f104:	6979      	ldr	r1, [r7, #20]
 800f106:	69ba      	ldr	r2, [r7, #24]
 800f108:	e841 2300 	strex	r3, r2, [r1]
 800f10c:	613b      	str	r3, [r7, #16]
   return(result);
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d1e6      	bne.n	800f0e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2220      	movs	r2, #32
 800f118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2200      	movs	r2, #0
 800f126:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f128:	bf00      	nop
 800f12a:	3754      	adds	r7, #84	; 0x54
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr
 800f134:	effffffe 	.word	0xeffffffe

0800f138 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f138:	b480      	push	{r7}
 800f13a:	b085      	sub	sp, #20
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f146:	2b01      	cmp	r3, #1
 800f148:	d101      	bne.n	800f14e <HAL_UARTEx_DisableFifoMode+0x16>
 800f14a:	2302      	movs	r3, #2
 800f14c:	e027      	b.n	800f19e <HAL_UARTEx_DisableFifoMode+0x66>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2201      	movs	r2, #1
 800f152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2224      	movs	r2, #36	; 0x24
 800f15a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	681a      	ldr	r2, [r3, #0]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	f022 0201 	bic.w	r2, r2, #1
 800f174:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f17c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2220      	movs	r2, #32
 800f190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f19c:	2300      	movs	r3, #0
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3714      	adds	r7, #20
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr

0800f1aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b084      	sub	sp, #16
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d101      	bne.n	800f1c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f1be:	2302      	movs	r3, #2
 800f1c0:	e02d      	b.n	800f21e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2224      	movs	r2, #36	; 0x24
 800f1ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f022 0201 	bic.w	r2, r2, #1
 800f1e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	689b      	ldr	r3, [r3, #8]
 800f1f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	683a      	ldr	r2, [r7, #0]
 800f1fa:	430a      	orrs	r2, r1
 800f1fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 f850 	bl	800f2a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	68fa      	ldr	r2, [r7, #12]
 800f20a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2220      	movs	r2, #32
 800f210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2200      	movs	r2, #0
 800f218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b084      	sub	sp, #16
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
 800f22e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f236:	2b01      	cmp	r3, #1
 800f238:	d101      	bne.n	800f23e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f23a:	2302      	movs	r3, #2
 800f23c:	e02d      	b.n	800f29a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2201      	movs	r2, #1
 800f242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2224      	movs	r2, #36	; 0x24
 800f24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f022 0201 	bic.w	r2, r2, #1
 800f264:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	683a      	ldr	r2, [r7, #0]
 800f276:	430a      	orrs	r2, r1
 800f278:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 f812 	bl	800f2a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2220      	movs	r2, #32
 800f28c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2200      	movs	r2, #0
 800f294:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3710      	adds	r7, #16
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
	...

0800f2a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d108      	bne.n	800f2c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f2c4:	e031      	b.n	800f32a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f2c6:	2310      	movs	r3, #16
 800f2c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f2ca:	2310      	movs	r3, #16
 800f2cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	0e5b      	lsrs	r3, r3, #25
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	f003 0307 	and.w	r3, r3, #7
 800f2dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	0f5b      	lsrs	r3, r3, #29
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	f003 0307 	and.w	r3, r3, #7
 800f2ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2ee:	7bbb      	ldrb	r3, [r7, #14]
 800f2f0:	7b3a      	ldrb	r2, [r7, #12]
 800f2f2:	4911      	ldr	r1, [pc, #68]	; (800f338 <UARTEx_SetNbDataToProcess+0x94>)
 800f2f4:	5c8a      	ldrb	r2, [r1, r2]
 800f2f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f2fa:	7b3a      	ldrb	r2, [r7, #12]
 800f2fc:	490f      	ldr	r1, [pc, #60]	; (800f33c <UARTEx_SetNbDataToProcess+0x98>)
 800f2fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f300:	fb93 f3f2 	sdiv	r3, r3, r2
 800f304:	b29a      	uxth	r2, r3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f30c:	7bfb      	ldrb	r3, [r7, #15]
 800f30e:	7b7a      	ldrb	r2, [r7, #13]
 800f310:	4909      	ldr	r1, [pc, #36]	; (800f338 <UARTEx_SetNbDataToProcess+0x94>)
 800f312:	5c8a      	ldrb	r2, [r1, r2]
 800f314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f318:	7b7a      	ldrb	r2, [r7, #13]
 800f31a:	4908      	ldr	r1, [pc, #32]	; (800f33c <UARTEx_SetNbDataToProcess+0x98>)
 800f31c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f31e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f322:	b29a      	uxth	r2, r3
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f32a:	bf00      	nop
 800f32c:	3714      	adds	r7, #20
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	08011838 	.word	0x08011838
 800f33c:	08011840 	.word	0x08011840

0800f340 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800f340:	b480      	push	{r7}
 800f342:	b087      	sub	sp, #28
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f354:	683a      	ldr	r2, [r7, #0]
 800f356:	6812      	ldr	r2, [r2, #0]
 800f358:	f023 0101 	bic.w	r1, r3, #1
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	2b08      	cmp	r3, #8
 800f368:	d102      	bne.n	800f370 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f36a:	2340      	movs	r3, #64	; 0x40
 800f36c:	617b      	str	r3, [r7, #20]
 800f36e:	e001      	b.n	800f374 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800f370:	2300      	movs	r3, #0
 800f372:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800f380:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800f386:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800f38c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800f392:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800f398:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800f39e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800f3a4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800f3aa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800f3b0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3be:	693a      	ldr	r2, [r7, #16]
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3c8:	693a      	ldr	r2, [r7, #16]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d2:	693a      	ldr	r2, [r7, #16]
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800f3d8:	4b20      	ldr	r3, [pc, #128]	; (800f45c <FMC_NORSRAM_Init+0x11c>)
 800f3da:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f3e2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f3ea:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800f3f2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	43db      	mvns	r3, r3
 800f402:	ea02 0103 	and.w	r1, r2, r3
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	4319      	orrs	r1, r3
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f41c:	d10c      	bne.n	800f438 <FMC_NORSRAM_Init+0xf8>
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d008      	beq.n	800f438 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f432:	431a      	orrs	r2, r3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d006      	beq.n	800f44e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f448:	431a      	orrs	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f44e:	2300      	movs	r3, #0
}
 800f450:	4618      	mov	r0, r3
 800f452:	371c      	adds	r7, #28
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr
 800f45c:	0008fb7f 	.word	0x0008fb7f

0800f460 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f460:	b480      	push	{r7}
 800f462:	b087      	sub	sp, #28
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	1c5a      	adds	r2, r3, #1
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f476:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	681a      	ldr	r2, [r3, #0]
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	011b      	lsls	r3, r3, #4
 800f484:	431a      	orrs	r2, r3
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	689b      	ldr	r3, [r3, #8]
 800f48a:	021b      	lsls	r3, r3, #8
 800f48c:	431a      	orrs	r2, r3
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	041b      	lsls	r3, r3, #16
 800f494:	431a      	orrs	r2, r3
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	3b01      	subs	r3, #1
 800f49c:	051b      	lsls	r3, r3, #20
 800f49e:	431a      	orrs	r2, r3
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	695b      	ldr	r3, [r3, #20]
 800f4a4:	3b02      	subs	r3, #2
 800f4a6:	061b      	lsls	r3, r3, #24
 800f4a8:	431a      	orrs	r2, r3
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	699b      	ldr	r3, [r3, #24]
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	687a      	ldr	r2, [r7, #4]
 800f4b2:	3201      	adds	r2, #1
 800f4b4:	4319      	orrs	r1, r3
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f4c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4c8:	d113      	bne.n	800f4f2 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f4d2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	691b      	ldr	r3, [r3, #16]
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	051b      	lsls	r3, r3, #20
 800f4dc:	697a      	ldr	r2, [r7, #20]
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	431a      	orrs	r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f4f2:	2300      	movs	r3, #0
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	371c      	adds	r7, #28
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800f500:	b480      	push	{r7}
 800f502:	b085      	sub	sp, #20
 800f504:	af00      	add	r7, sp, #0
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	607a      	str	r2, [r7, #4]
 800f50c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f514:	d11d      	bne.n	800f552 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	687a      	ldr	r2, [r7, #4]
 800f51a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f51e:	4b13      	ldr	r3, [pc, #76]	; (800f56c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800f520:	4013      	ands	r3, r2
 800f522:	68ba      	ldr	r2, [r7, #8]
 800f524:	6811      	ldr	r1, [r2, #0]
 800f526:	68ba      	ldr	r2, [r7, #8]
 800f528:	6852      	ldr	r2, [r2, #4]
 800f52a:	0112      	lsls	r2, r2, #4
 800f52c:	4311      	orrs	r1, r2
 800f52e:	68ba      	ldr	r2, [r7, #8]
 800f530:	6892      	ldr	r2, [r2, #8]
 800f532:	0212      	lsls	r2, r2, #8
 800f534:	4311      	orrs	r1, r2
 800f536:	68ba      	ldr	r2, [r7, #8]
 800f538:	6992      	ldr	r2, [r2, #24]
 800f53a:	4311      	orrs	r1, r2
 800f53c:	68ba      	ldr	r2, [r7, #8]
 800f53e:	68d2      	ldr	r2, [r2, #12]
 800f540:	0412      	lsls	r2, r2, #16
 800f542:	430a      	orrs	r2, r1
 800f544:	ea43 0102 	orr.w	r1, r3, r2
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f550:	e005      	b.n	800f55e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f55a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800f55e:	2300      	movs	r3, #0
}
 800f560:	4618      	mov	r0, r3
 800f562:	3714      	adds	r7, #20
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr
 800f56c:	cff00000 	.word	0xcff00000

0800f570 <Print2Hex>:
*           nLen - data length
* Return:   None
* comments: print title and hex data with 16 characters a line
*******************************************************************************/
void Print2Hex(char* szTitle, void* pBuff, int nLen)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b086      	sub	sp, #24
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
	int i;
	char *pcBuff = (char*)pBuff;
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	613b      	str	r3, [r7, #16]

	//PRINT("Recv: %s", szTitle);
	printf("Recv: %s", szTitle);
 800f580:	68f9      	ldr	r1, [r7, #12]
 800f582:	4812      	ldr	r0, [pc, #72]	; (800f5cc <Print2Hex+0x5c>)
 800f584:	f7f9 ff62 	bl	800944c <printf_>
	for (i=0; i<nLen; i++)
 800f588:	2300      	movs	r3, #0
 800f58a:	617b      	str	r3, [r7, #20]
 800f58c:	e012      	b.n	800f5b4 <Print2Hex+0x44>
	{
		//if (!(i%16)) PRINT("\r\n");
		if (!(i%16)) printf("\r\n");
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	f003 030f 	and.w	r3, r3, #15
 800f594:	2b00      	cmp	r3, #0
 800f596:	d102      	bne.n	800f59e <Print2Hex+0x2e>
 800f598:	480d      	ldr	r0, [pc, #52]	; (800f5d0 <Print2Hex+0x60>)
 800f59a:	f7f9 ff57 	bl	800944c <printf_>

		//PRINT("%x ", *pcBuff++);
		printf("%x ", *pcBuff++);
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	1c5a      	adds	r2, r3, #1
 800f5a2:	613a      	str	r2, [r7, #16]
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	480a      	ldr	r0, [pc, #40]	; (800f5d4 <Print2Hex+0x64>)
 800f5aa:	f7f9 ff4f 	bl	800944c <printf_>
	for (i=0; i<nLen; i++)
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	617b      	str	r3, [r7, #20]
 800f5b4:	697a      	ldr	r2, [r7, #20]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	dbe8      	blt.n	800f58e <Print2Hex+0x1e>
	}
	//PRINT("\r\n");
	printf("\r\n");
 800f5bc:	4804      	ldr	r0, [pc, #16]	; (800f5d0 <Print2Hex+0x60>)
 800f5be:	f7f9 ff45 	bl	800944c <printf_>
}
 800f5c2:	bf00      	nop
 800f5c4:	3718      	adds	r7, #24
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	080117a4 	.word	0x080117a4
 800f5d0:	080117a0 	.word	0x080117a0
 800f5d4:	080117b0 	.word	0x080117b0

0800f5d8 <SetTimer>:

	TIM_CounterConfig(DELAY_TIM, TIM_STOP);	// Stop Timer
}
#endif
void SetTimer(TTIMER *pTimer)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
	pTimer->fStart = TRUE;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	701a      	strb	r2, [r3, #0]
	pTimer->dwStartTick = gdwTick;
 800f5e6:	4b05      	ldr	r3, [pc, #20]	; (800f5fc <SetTimer+0x24>)
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	605a      	str	r2, [r3, #4]
}
 800f5ee:	bf00      	nop
 800f5f0:	370c      	adds	r7, #12
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	24001e84 	.word	0x24001e84

0800f600 <ResetTimer>:

void ResetTimer(TTIMER *pTimer)
{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
	pTimer->fStart = FALSE;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	701a      	strb	r2, [r3, #0]
}
 800f60e:	bf00      	nop
 800f610:	370c      	adds	r7, #12
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr
	...

0800f61c <IsTimeout>:
* Out:      None
* Return:   void
* comments: Timeout range is between 0 and (0xFFFFFFFF * 10ms)
*******************************************************************************/
bool IsTimeout(TTIMER *pTimer, DWORD dwTimeout)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b085      	sub	sp, #20
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
	bool	fTimeout = FALSE;
 800f626:	2300      	movs	r3, #0
 800f628:	73fb      	strb	r3, [r7, #15]
	DWORD	dwCurrentTick;

	if (pTimer->fStart)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d01b      	beq.n	800f66a <IsTimeout+0x4e>
	{
		dwCurrentTick = gdwTick;
 800f632:	4b11      	ldr	r3, [pc, #68]	; (800f678 <IsTimeout+0x5c>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	60bb      	str	r3, [r7, #8]

		if (dwCurrentTick >= pTimer->dwStartTick )
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d309      	bcc.n	800f656 <IsTimeout+0x3a>
		{
			if ( (dwCurrentTick - pTimer->dwStartTick) >= dwTimeout )
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	68ba      	ldr	r2, [r7, #8]
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	683a      	ldr	r2, [r7, #0]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d80c      	bhi.n	800f66a <IsTimeout+0x4e>
				fTimeout = TRUE;
 800f650:	2301      	movs	r3, #1
 800f652:	73fb      	strb	r3, [r7, #15]
 800f654:	e009      	b.n	800f66a <IsTimeout+0x4e>
		}
		else // in case of (dwCurrentTick < pTimer->dwStartTick)
		{
			if ( (0xFFFFFFFF - pTimer->dwStartTick + dwCurrentTick) >= dwTimeout )
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	1ad3      	subs	r3, r2, r3
 800f65e:	3b01      	subs	r3, #1
 800f660:	683a      	ldr	r2, [r7, #0]
 800f662:	429a      	cmp	r2, r3
 800f664:	d801      	bhi.n	800f66a <IsTimeout+0x4e>
				fTimeout = TRUE;
 800f666:	2301      	movs	r3, #1
 800f668:	73fb      	strb	r3, [r7, #15]
		}
	}

	return fTimeout;
 800f66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3714      	adds	r7, #20
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr
 800f678:	24001e84 	.word	0x24001e84

0800f67c <__errno>:
 800f67c:	4b01      	ldr	r3, [pc, #4]	; (800f684 <__errno+0x8>)
 800f67e:	6818      	ldr	r0, [r3, #0]
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	24000050 	.word	0x24000050

0800f688 <__libc_init_array>:
 800f688:	b570      	push	{r4, r5, r6, lr}
 800f68a:	4d0d      	ldr	r5, [pc, #52]	; (800f6c0 <__libc_init_array+0x38>)
 800f68c:	4c0d      	ldr	r4, [pc, #52]	; (800f6c4 <__libc_init_array+0x3c>)
 800f68e:	1b64      	subs	r4, r4, r5
 800f690:	10a4      	asrs	r4, r4, #2
 800f692:	2600      	movs	r6, #0
 800f694:	42a6      	cmp	r6, r4
 800f696:	d109      	bne.n	800f6ac <__libc_init_array+0x24>
 800f698:	4d0b      	ldr	r5, [pc, #44]	; (800f6c8 <__libc_init_array+0x40>)
 800f69a:	4c0c      	ldr	r4, [pc, #48]	; (800f6cc <__libc_init_array+0x44>)
 800f69c:	f001 f99a 	bl	80109d4 <_init>
 800f6a0:	1b64      	subs	r4, r4, r5
 800f6a2:	10a4      	asrs	r4, r4, #2
 800f6a4:	2600      	movs	r6, #0
 800f6a6:	42a6      	cmp	r6, r4
 800f6a8:	d105      	bne.n	800f6b6 <__libc_init_array+0x2e>
 800f6aa:	bd70      	pop	{r4, r5, r6, pc}
 800f6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6b0:	4798      	blx	r3
 800f6b2:	3601      	adds	r6, #1
 800f6b4:	e7ee      	b.n	800f694 <__libc_init_array+0xc>
 800f6b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6ba:	4798      	blx	r3
 800f6bc:	3601      	adds	r6, #1
 800f6be:	e7f2      	b.n	800f6a6 <__libc_init_array+0x1e>
 800f6c0:	080118e8 	.word	0x080118e8
 800f6c4:	080118e8 	.word	0x080118e8
 800f6c8:	080118e8 	.word	0x080118e8
 800f6cc:	080118ec 	.word	0x080118ec

0800f6d0 <memcmp>:
 800f6d0:	b510      	push	{r4, lr}
 800f6d2:	3901      	subs	r1, #1
 800f6d4:	4402      	add	r2, r0
 800f6d6:	4290      	cmp	r0, r2
 800f6d8:	d101      	bne.n	800f6de <memcmp+0xe>
 800f6da:	2000      	movs	r0, #0
 800f6dc:	e005      	b.n	800f6ea <memcmp+0x1a>
 800f6de:	7803      	ldrb	r3, [r0, #0]
 800f6e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f6e4:	42a3      	cmp	r3, r4
 800f6e6:	d001      	beq.n	800f6ec <memcmp+0x1c>
 800f6e8:	1b18      	subs	r0, r3, r4
 800f6ea:	bd10      	pop	{r4, pc}
 800f6ec:	3001      	adds	r0, #1
 800f6ee:	e7f2      	b.n	800f6d6 <memcmp+0x6>

0800f6f0 <memcpy>:
 800f6f0:	440a      	add	r2, r1
 800f6f2:	4291      	cmp	r1, r2
 800f6f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6f8:	d100      	bne.n	800f6fc <memcpy+0xc>
 800f6fa:	4770      	bx	lr
 800f6fc:	b510      	push	{r4, lr}
 800f6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f702:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f706:	4291      	cmp	r1, r2
 800f708:	d1f9      	bne.n	800f6fe <memcpy+0xe>
 800f70a:	bd10      	pop	{r4, pc}

0800f70c <memset>:
 800f70c:	4402      	add	r2, r0
 800f70e:	4603      	mov	r3, r0
 800f710:	4293      	cmp	r3, r2
 800f712:	d100      	bne.n	800f716 <memset+0xa>
 800f714:	4770      	bx	lr
 800f716:	f803 1b01 	strb.w	r1, [r3], #1
 800f71a:	e7f9      	b.n	800f710 <memset+0x4>

0800f71c <_free_r>:
 800f71c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f71e:	2900      	cmp	r1, #0
 800f720:	d044      	beq.n	800f7ac <_free_r+0x90>
 800f722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f726:	9001      	str	r0, [sp, #4]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f1a1 0404 	sub.w	r4, r1, #4
 800f72e:	bfb8      	it	lt
 800f730:	18e4      	addlt	r4, r4, r3
 800f732:	f000 fbfb 	bl	800ff2c <__malloc_lock>
 800f736:	4a1e      	ldr	r2, [pc, #120]	; (800f7b0 <_free_r+0x94>)
 800f738:	9801      	ldr	r0, [sp, #4]
 800f73a:	6813      	ldr	r3, [r2, #0]
 800f73c:	b933      	cbnz	r3, 800f74c <_free_r+0x30>
 800f73e:	6063      	str	r3, [r4, #4]
 800f740:	6014      	str	r4, [r2, #0]
 800f742:	b003      	add	sp, #12
 800f744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f748:	f000 bbf6 	b.w	800ff38 <__malloc_unlock>
 800f74c:	42a3      	cmp	r3, r4
 800f74e:	d908      	bls.n	800f762 <_free_r+0x46>
 800f750:	6825      	ldr	r5, [r4, #0]
 800f752:	1961      	adds	r1, r4, r5
 800f754:	428b      	cmp	r3, r1
 800f756:	bf01      	itttt	eq
 800f758:	6819      	ldreq	r1, [r3, #0]
 800f75a:	685b      	ldreq	r3, [r3, #4]
 800f75c:	1949      	addeq	r1, r1, r5
 800f75e:	6021      	streq	r1, [r4, #0]
 800f760:	e7ed      	b.n	800f73e <_free_r+0x22>
 800f762:	461a      	mov	r2, r3
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	b10b      	cbz	r3, 800f76c <_free_r+0x50>
 800f768:	42a3      	cmp	r3, r4
 800f76a:	d9fa      	bls.n	800f762 <_free_r+0x46>
 800f76c:	6811      	ldr	r1, [r2, #0]
 800f76e:	1855      	adds	r5, r2, r1
 800f770:	42a5      	cmp	r5, r4
 800f772:	d10b      	bne.n	800f78c <_free_r+0x70>
 800f774:	6824      	ldr	r4, [r4, #0]
 800f776:	4421      	add	r1, r4
 800f778:	1854      	adds	r4, r2, r1
 800f77a:	42a3      	cmp	r3, r4
 800f77c:	6011      	str	r1, [r2, #0]
 800f77e:	d1e0      	bne.n	800f742 <_free_r+0x26>
 800f780:	681c      	ldr	r4, [r3, #0]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	6053      	str	r3, [r2, #4]
 800f786:	4421      	add	r1, r4
 800f788:	6011      	str	r1, [r2, #0]
 800f78a:	e7da      	b.n	800f742 <_free_r+0x26>
 800f78c:	d902      	bls.n	800f794 <_free_r+0x78>
 800f78e:	230c      	movs	r3, #12
 800f790:	6003      	str	r3, [r0, #0]
 800f792:	e7d6      	b.n	800f742 <_free_r+0x26>
 800f794:	6825      	ldr	r5, [r4, #0]
 800f796:	1961      	adds	r1, r4, r5
 800f798:	428b      	cmp	r3, r1
 800f79a:	bf04      	itt	eq
 800f79c:	6819      	ldreq	r1, [r3, #0]
 800f79e:	685b      	ldreq	r3, [r3, #4]
 800f7a0:	6063      	str	r3, [r4, #4]
 800f7a2:	bf04      	itt	eq
 800f7a4:	1949      	addeq	r1, r1, r5
 800f7a6:	6021      	streq	r1, [r4, #0]
 800f7a8:	6054      	str	r4, [r2, #4]
 800f7aa:	e7ca      	b.n	800f742 <_free_r+0x26>
 800f7ac:	b003      	add	sp, #12
 800f7ae:	bd30      	pop	{r4, r5, pc}
 800f7b0:	24001e88 	.word	0x24001e88

0800f7b4 <sbrk_aligned>:
 800f7b4:	b570      	push	{r4, r5, r6, lr}
 800f7b6:	4e0e      	ldr	r6, [pc, #56]	; (800f7f0 <sbrk_aligned+0x3c>)
 800f7b8:	460c      	mov	r4, r1
 800f7ba:	6831      	ldr	r1, [r6, #0]
 800f7bc:	4605      	mov	r5, r0
 800f7be:	b911      	cbnz	r1, 800f7c6 <sbrk_aligned+0x12>
 800f7c0:	f000 f8a4 	bl	800f90c <_sbrk_r>
 800f7c4:	6030      	str	r0, [r6, #0]
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	f000 f89f 	bl	800f90c <_sbrk_r>
 800f7ce:	1c43      	adds	r3, r0, #1
 800f7d0:	d00a      	beq.n	800f7e8 <sbrk_aligned+0x34>
 800f7d2:	1cc4      	adds	r4, r0, #3
 800f7d4:	f024 0403 	bic.w	r4, r4, #3
 800f7d8:	42a0      	cmp	r0, r4
 800f7da:	d007      	beq.n	800f7ec <sbrk_aligned+0x38>
 800f7dc:	1a21      	subs	r1, r4, r0
 800f7de:	4628      	mov	r0, r5
 800f7e0:	f000 f894 	bl	800f90c <_sbrk_r>
 800f7e4:	3001      	adds	r0, #1
 800f7e6:	d101      	bne.n	800f7ec <sbrk_aligned+0x38>
 800f7e8:	f04f 34ff 	mov.w	r4, #4294967295
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	bd70      	pop	{r4, r5, r6, pc}
 800f7f0:	24001e8c 	.word	0x24001e8c

0800f7f4 <_malloc_r>:
 800f7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f8:	1ccd      	adds	r5, r1, #3
 800f7fa:	f025 0503 	bic.w	r5, r5, #3
 800f7fe:	3508      	adds	r5, #8
 800f800:	2d0c      	cmp	r5, #12
 800f802:	bf38      	it	cc
 800f804:	250c      	movcc	r5, #12
 800f806:	2d00      	cmp	r5, #0
 800f808:	4607      	mov	r7, r0
 800f80a:	db01      	blt.n	800f810 <_malloc_r+0x1c>
 800f80c:	42a9      	cmp	r1, r5
 800f80e:	d905      	bls.n	800f81c <_malloc_r+0x28>
 800f810:	230c      	movs	r3, #12
 800f812:	603b      	str	r3, [r7, #0]
 800f814:	2600      	movs	r6, #0
 800f816:	4630      	mov	r0, r6
 800f818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f81c:	4e2e      	ldr	r6, [pc, #184]	; (800f8d8 <_malloc_r+0xe4>)
 800f81e:	f000 fb85 	bl	800ff2c <__malloc_lock>
 800f822:	6833      	ldr	r3, [r6, #0]
 800f824:	461c      	mov	r4, r3
 800f826:	bb34      	cbnz	r4, 800f876 <_malloc_r+0x82>
 800f828:	4629      	mov	r1, r5
 800f82a:	4638      	mov	r0, r7
 800f82c:	f7ff ffc2 	bl	800f7b4 <sbrk_aligned>
 800f830:	1c43      	adds	r3, r0, #1
 800f832:	4604      	mov	r4, r0
 800f834:	d14d      	bne.n	800f8d2 <_malloc_r+0xde>
 800f836:	6834      	ldr	r4, [r6, #0]
 800f838:	4626      	mov	r6, r4
 800f83a:	2e00      	cmp	r6, #0
 800f83c:	d140      	bne.n	800f8c0 <_malloc_r+0xcc>
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	4631      	mov	r1, r6
 800f842:	4638      	mov	r0, r7
 800f844:	eb04 0803 	add.w	r8, r4, r3
 800f848:	f000 f860 	bl	800f90c <_sbrk_r>
 800f84c:	4580      	cmp	r8, r0
 800f84e:	d13a      	bne.n	800f8c6 <_malloc_r+0xd2>
 800f850:	6821      	ldr	r1, [r4, #0]
 800f852:	3503      	adds	r5, #3
 800f854:	1a6d      	subs	r5, r5, r1
 800f856:	f025 0503 	bic.w	r5, r5, #3
 800f85a:	3508      	adds	r5, #8
 800f85c:	2d0c      	cmp	r5, #12
 800f85e:	bf38      	it	cc
 800f860:	250c      	movcc	r5, #12
 800f862:	4629      	mov	r1, r5
 800f864:	4638      	mov	r0, r7
 800f866:	f7ff ffa5 	bl	800f7b4 <sbrk_aligned>
 800f86a:	3001      	adds	r0, #1
 800f86c:	d02b      	beq.n	800f8c6 <_malloc_r+0xd2>
 800f86e:	6823      	ldr	r3, [r4, #0]
 800f870:	442b      	add	r3, r5
 800f872:	6023      	str	r3, [r4, #0]
 800f874:	e00e      	b.n	800f894 <_malloc_r+0xa0>
 800f876:	6822      	ldr	r2, [r4, #0]
 800f878:	1b52      	subs	r2, r2, r5
 800f87a:	d41e      	bmi.n	800f8ba <_malloc_r+0xc6>
 800f87c:	2a0b      	cmp	r2, #11
 800f87e:	d916      	bls.n	800f8ae <_malloc_r+0xba>
 800f880:	1961      	adds	r1, r4, r5
 800f882:	42a3      	cmp	r3, r4
 800f884:	6025      	str	r5, [r4, #0]
 800f886:	bf18      	it	ne
 800f888:	6059      	strne	r1, [r3, #4]
 800f88a:	6863      	ldr	r3, [r4, #4]
 800f88c:	bf08      	it	eq
 800f88e:	6031      	streq	r1, [r6, #0]
 800f890:	5162      	str	r2, [r4, r5]
 800f892:	604b      	str	r3, [r1, #4]
 800f894:	4638      	mov	r0, r7
 800f896:	f104 060b 	add.w	r6, r4, #11
 800f89a:	f000 fb4d 	bl	800ff38 <__malloc_unlock>
 800f89e:	f026 0607 	bic.w	r6, r6, #7
 800f8a2:	1d23      	adds	r3, r4, #4
 800f8a4:	1af2      	subs	r2, r6, r3
 800f8a6:	d0b6      	beq.n	800f816 <_malloc_r+0x22>
 800f8a8:	1b9b      	subs	r3, r3, r6
 800f8aa:	50a3      	str	r3, [r4, r2]
 800f8ac:	e7b3      	b.n	800f816 <_malloc_r+0x22>
 800f8ae:	6862      	ldr	r2, [r4, #4]
 800f8b0:	42a3      	cmp	r3, r4
 800f8b2:	bf0c      	ite	eq
 800f8b4:	6032      	streq	r2, [r6, #0]
 800f8b6:	605a      	strne	r2, [r3, #4]
 800f8b8:	e7ec      	b.n	800f894 <_malloc_r+0xa0>
 800f8ba:	4623      	mov	r3, r4
 800f8bc:	6864      	ldr	r4, [r4, #4]
 800f8be:	e7b2      	b.n	800f826 <_malloc_r+0x32>
 800f8c0:	4634      	mov	r4, r6
 800f8c2:	6876      	ldr	r6, [r6, #4]
 800f8c4:	e7b9      	b.n	800f83a <_malloc_r+0x46>
 800f8c6:	230c      	movs	r3, #12
 800f8c8:	603b      	str	r3, [r7, #0]
 800f8ca:	4638      	mov	r0, r7
 800f8cc:	f000 fb34 	bl	800ff38 <__malloc_unlock>
 800f8d0:	e7a1      	b.n	800f816 <_malloc_r+0x22>
 800f8d2:	6025      	str	r5, [r4, #0]
 800f8d4:	e7de      	b.n	800f894 <_malloc_r+0xa0>
 800f8d6:	bf00      	nop
 800f8d8:	24001e88 	.word	0x24001e88

0800f8dc <iprintf>:
 800f8dc:	b40f      	push	{r0, r1, r2, r3}
 800f8de:	4b0a      	ldr	r3, [pc, #40]	; (800f908 <iprintf+0x2c>)
 800f8e0:	b513      	push	{r0, r1, r4, lr}
 800f8e2:	681c      	ldr	r4, [r3, #0]
 800f8e4:	b124      	cbz	r4, 800f8f0 <iprintf+0x14>
 800f8e6:	69a3      	ldr	r3, [r4, #24]
 800f8e8:	b913      	cbnz	r3, 800f8f0 <iprintf+0x14>
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f000 fa18 	bl	800fd20 <__sinit>
 800f8f0:	ab05      	add	r3, sp, #20
 800f8f2:	9a04      	ldr	r2, [sp, #16]
 800f8f4:	68a1      	ldr	r1, [r4, #8]
 800f8f6:	9301      	str	r3, [sp, #4]
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	f000 fca9 	bl	8010250 <_vfiprintf_r>
 800f8fe:	b002      	add	sp, #8
 800f900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f904:	b004      	add	sp, #16
 800f906:	4770      	bx	lr
 800f908:	24000050 	.word	0x24000050

0800f90c <_sbrk_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4d06      	ldr	r5, [pc, #24]	; (800f928 <_sbrk_r+0x1c>)
 800f910:	2300      	movs	r3, #0
 800f912:	4604      	mov	r4, r0
 800f914:	4608      	mov	r0, r1
 800f916:	602b      	str	r3, [r5, #0]
 800f918:	f7fa fa70 	bl	8009dfc <_sbrk>
 800f91c:	1c43      	adds	r3, r0, #1
 800f91e:	d102      	bne.n	800f926 <_sbrk_r+0x1a>
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	b103      	cbz	r3, 800f926 <_sbrk_r+0x1a>
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	24001e94 	.word	0x24001e94

0800f92c <siprintf>:
 800f92c:	b40e      	push	{r1, r2, r3}
 800f92e:	b500      	push	{lr}
 800f930:	b09c      	sub	sp, #112	; 0x70
 800f932:	ab1d      	add	r3, sp, #116	; 0x74
 800f934:	9002      	str	r0, [sp, #8]
 800f936:	9006      	str	r0, [sp, #24]
 800f938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f93c:	4809      	ldr	r0, [pc, #36]	; (800f964 <siprintf+0x38>)
 800f93e:	9107      	str	r1, [sp, #28]
 800f940:	9104      	str	r1, [sp, #16]
 800f942:	4909      	ldr	r1, [pc, #36]	; (800f968 <siprintf+0x3c>)
 800f944:	f853 2b04 	ldr.w	r2, [r3], #4
 800f948:	9105      	str	r1, [sp, #20]
 800f94a:	6800      	ldr	r0, [r0, #0]
 800f94c:	9301      	str	r3, [sp, #4]
 800f94e:	a902      	add	r1, sp, #8
 800f950:	f000 fb54 	bl	800fffc <_svfiprintf_r>
 800f954:	9b02      	ldr	r3, [sp, #8]
 800f956:	2200      	movs	r2, #0
 800f958:	701a      	strb	r2, [r3, #0]
 800f95a:	b01c      	add	sp, #112	; 0x70
 800f95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f960:	b003      	add	sp, #12
 800f962:	4770      	bx	lr
 800f964:	24000050 	.word	0x24000050
 800f968:	ffff0208 	.word	0xffff0208

0800f96c <__swbuf_r>:
 800f96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96e:	460e      	mov	r6, r1
 800f970:	4614      	mov	r4, r2
 800f972:	4605      	mov	r5, r0
 800f974:	b118      	cbz	r0, 800f97e <__swbuf_r+0x12>
 800f976:	6983      	ldr	r3, [r0, #24]
 800f978:	b90b      	cbnz	r3, 800f97e <__swbuf_r+0x12>
 800f97a:	f000 f9d1 	bl	800fd20 <__sinit>
 800f97e:	4b21      	ldr	r3, [pc, #132]	; (800fa04 <__swbuf_r+0x98>)
 800f980:	429c      	cmp	r4, r3
 800f982:	d12b      	bne.n	800f9dc <__swbuf_r+0x70>
 800f984:	686c      	ldr	r4, [r5, #4]
 800f986:	69a3      	ldr	r3, [r4, #24]
 800f988:	60a3      	str	r3, [r4, #8]
 800f98a:	89a3      	ldrh	r3, [r4, #12]
 800f98c:	071a      	lsls	r2, r3, #28
 800f98e:	d52f      	bpl.n	800f9f0 <__swbuf_r+0x84>
 800f990:	6923      	ldr	r3, [r4, #16]
 800f992:	b36b      	cbz	r3, 800f9f0 <__swbuf_r+0x84>
 800f994:	6923      	ldr	r3, [r4, #16]
 800f996:	6820      	ldr	r0, [r4, #0]
 800f998:	1ac0      	subs	r0, r0, r3
 800f99a:	6963      	ldr	r3, [r4, #20]
 800f99c:	b2f6      	uxtb	r6, r6
 800f99e:	4283      	cmp	r3, r0
 800f9a0:	4637      	mov	r7, r6
 800f9a2:	dc04      	bgt.n	800f9ae <__swbuf_r+0x42>
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	f000 f926 	bl	800fbf8 <_fflush_r>
 800f9ac:	bb30      	cbnz	r0, 800f9fc <__swbuf_r+0x90>
 800f9ae:	68a3      	ldr	r3, [r4, #8]
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	60a3      	str	r3, [r4, #8]
 800f9b4:	6823      	ldr	r3, [r4, #0]
 800f9b6:	1c5a      	adds	r2, r3, #1
 800f9b8:	6022      	str	r2, [r4, #0]
 800f9ba:	701e      	strb	r6, [r3, #0]
 800f9bc:	6963      	ldr	r3, [r4, #20]
 800f9be:	3001      	adds	r0, #1
 800f9c0:	4283      	cmp	r3, r0
 800f9c2:	d004      	beq.n	800f9ce <__swbuf_r+0x62>
 800f9c4:	89a3      	ldrh	r3, [r4, #12]
 800f9c6:	07db      	lsls	r3, r3, #31
 800f9c8:	d506      	bpl.n	800f9d8 <__swbuf_r+0x6c>
 800f9ca:	2e0a      	cmp	r6, #10
 800f9cc:	d104      	bne.n	800f9d8 <__swbuf_r+0x6c>
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	f000 f911 	bl	800fbf8 <_fflush_r>
 800f9d6:	b988      	cbnz	r0, 800f9fc <__swbuf_r+0x90>
 800f9d8:	4638      	mov	r0, r7
 800f9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9dc:	4b0a      	ldr	r3, [pc, #40]	; (800fa08 <__swbuf_r+0x9c>)
 800f9de:	429c      	cmp	r4, r3
 800f9e0:	d101      	bne.n	800f9e6 <__swbuf_r+0x7a>
 800f9e2:	68ac      	ldr	r4, [r5, #8]
 800f9e4:	e7cf      	b.n	800f986 <__swbuf_r+0x1a>
 800f9e6:	4b09      	ldr	r3, [pc, #36]	; (800fa0c <__swbuf_r+0xa0>)
 800f9e8:	429c      	cmp	r4, r3
 800f9ea:	bf08      	it	eq
 800f9ec:	68ec      	ldreq	r4, [r5, #12]
 800f9ee:	e7ca      	b.n	800f986 <__swbuf_r+0x1a>
 800f9f0:	4621      	mov	r1, r4
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	f000 f80c 	bl	800fa10 <__swsetup_r>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d0cb      	beq.n	800f994 <__swbuf_r+0x28>
 800f9fc:	f04f 37ff 	mov.w	r7, #4294967295
 800fa00:	e7ea      	b.n	800f9d8 <__swbuf_r+0x6c>
 800fa02:	bf00      	nop
 800fa04:	0801186c 	.word	0x0801186c
 800fa08:	0801188c 	.word	0x0801188c
 800fa0c:	0801184c 	.word	0x0801184c

0800fa10 <__swsetup_r>:
 800fa10:	4b32      	ldr	r3, [pc, #200]	; (800fadc <__swsetup_r+0xcc>)
 800fa12:	b570      	push	{r4, r5, r6, lr}
 800fa14:	681d      	ldr	r5, [r3, #0]
 800fa16:	4606      	mov	r6, r0
 800fa18:	460c      	mov	r4, r1
 800fa1a:	b125      	cbz	r5, 800fa26 <__swsetup_r+0x16>
 800fa1c:	69ab      	ldr	r3, [r5, #24]
 800fa1e:	b913      	cbnz	r3, 800fa26 <__swsetup_r+0x16>
 800fa20:	4628      	mov	r0, r5
 800fa22:	f000 f97d 	bl	800fd20 <__sinit>
 800fa26:	4b2e      	ldr	r3, [pc, #184]	; (800fae0 <__swsetup_r+0xd0>)
 800fa28:	429c      	cmp	r4, r3
 800fa2a:	d10f      	bne.n	800fa4c <__swsetup_r+0x3c>
 800fa2c:	686c      	ldr	r4, [r5, #4]
 800fa2e:	89a3      	ldrh	r3, [r4, #12]
 800fa30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa34:	0719      	lsls	r1, r3, #28
 800fa36:	d42c      	bmi.n	800fa92 <__swsetup_r+0x82>
 800fa38:	06dd      	lsls	r5, r3, #27
 800fa3a:	d411      	bmi.n	800fa60 <__swsetup_r+0x50>
 800fa3c:	2309      	movs	r3, #9
 800fa3e:	6033      	str	r3, [r6, #0]
 800fa40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa44:	81a3      	strh	r3, [r4, #12]
 800fa46:	f04f 30ff 	mov.w	r0, #4294967295
 800fa4a:	e03e      	b.n	800faca <__swsetup_r+0xba>
 800fa4c:	4b25      	ldr	r3, [pc, #148]	; (800fae4 <__swsetup_r+0xd4>)
 800fa4e:	429c      	cmp	r4, r3
 800fa50:	d101      	bne.n	800fa56 <__swsetup_r+0x46>
 800fa52:	68ac      	ldr	r4, [r5, #8]
 800fa54:	e7eb      	b.n	800fa2e <__swsetup_r+0x1e>
 800fa56:	4b24      	ldr	r3, [pc, #144]	; (800fae8 <__swsetup_r+0xd8>)
 800fa58:	429c      	cmp	r4, r3
 800fa5a:	bf08      	it	eq
 800fa5c:	68ec      	ldreq	r4, [r5, #12]
 800fa5e:	e7e6      	b.n	800fa2e <__swsetup_r+0x1e>
 800fa60:	0758      	lsls	r0, r3, #29
 800fa62:	d512      	bpl.n	800fa8a <__swsetup_r+0x7a>
 800fa64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa66:	b141      	cbz	r1, 800fa7a <__swsetup_r+0x6a>
 800fa68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa6c:	4299      	cmp	r1, r3
 800fa6e:	d002      	beq.n	800fa76 <__swsetup_r+0x66>
 800fa70:	4630      	mov	r0, r6
 800fa72:	f7ff fe53 	bl	800f71c <_free_r>
 800fa76:	2300      	movs	r3, #0
 800fa78:	6363      	str	r3, [r4, #52]	; 0x34
 800fa7a:	89a3      	ldrh	r3, [r4, #12]
 800fa7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa80:	81a3      	strh	r3, [r4, #12]
 800fa82:	2300      	movs	r3, #0
 800fa84:	6063      	str	r3, [r4, #4]
 800fa86:	6923      	ldr	r3, [r4, #16]
 800fa88:	6023      	str	r3, [r4, #0]
 800fa8a:	89a3      	ldrh	r3, [r4, #12]
 800fa8c:	f043 0308 	orr.w	r3, r3, #8
 800fa90:	81a3      	strh	r3, [r4, #12]
 800fa92:	6923      	ldr	r3, [r4, #16]
 800fa94:	b94b      	cbnz	r3, 800faaa <__swsetup_r+0x9a>
 800fa96:	89a3      	ldrh	r3, [r4, #12]
 800fa98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800faa0:	d003      	beq.n	800faaa <__swsetup_r+0x9a>
 800faa2:	4621      	mov	r1, r4
 800faa4:	4630      	mov	r0, r6
 800faa6:	f000 fa01 	bl	800feac <__smakebuf_r>
 800faaa:	89a0      	ldrh	r0, [r4, #12]
 800faac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fab0:	f010 0301 	ands.w	r3, r0, #1
 800fab4:	d00a      	beq.n	800facc <__swsetup_r+0xbc>
 800fab6:	2300      	movs	r3, #0
 800fab8:	60a3      	str	r3, [r4, #8]
 800faba:	6963      	ldr	r3, [r4, #20]
 800fabc:	425b      	negs	r3, r3
 800fabe:	61a3      	str	r3, [r4, #24]
 800fac0:	6923      	ldr	r3, [r4, #16]
 800fac2:	b943      	cbnz	r3, 800fad6 <__swsetup_r+0xc6>
 800fac4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fac8:	d1ba      	bne.n	800fa40 <__swsetup_r+0x30>
 800faca:	bd70      	pop	{r4, r5, r6, pc}
 800facc:	0781      	lsls	r1, r0, #30
 800face:	bf58      	it	pl
 800fad0:	6963      	ldrpl	r3, [r4, #20]
 800fad2:	60a3      	str	r3, [r4, #8]
 800fad4:	e7f4      	b.n	800fac0 <__swsetup_r+0xb0>
 800fad6:	2000      	movs	r0, #0
 800fad8:	e7f7      	b.n	800faca <__swsetup_r+0xba>
 800fada:	bf00      	nop
 800fadc:	24000050 	.word	0x24000050
 800fae0:	0801186c 	.word	0x0801186c
 800fae4:	0801188c 	.word	0x0801188c
 800fae8:	0801184c 	.word	0x0801184c

0800faec <__sflush_r>:
 800faec:	898a      	ldrh	r2, [r1, #12]
 800faee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faf2:	4605      	mov	r5, r0
 800faf4:	0710      	lsls	r0, r2, #28
 800faf6:	460c      	mov	r4, r1
 800faf8:	d458      	bmi.n	800fbac <__sflush_r+0xc0>
 800fafa:	684b      	ldr	r3, [r1, #4]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	dc05      	bgt.n	800fb0c <__sflush_r+0x20>
 800fb00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	dc02      	bgt.n	800fb0c <__sflush_r+0x20>
 800fb06:	2000      	movs	r0, #0
 800fb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb0e:	2e00      	cmp	r6, #0
 800fb10:	d0f9      	beq.n	800fb06 <__sflush_r+0x1a>
 800fb12:	2300      	movs	r3, #0
 800fb14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb18:	682f      	ldr	r7, [r5, #0]
 800fb1a:	602b      	str	r3, [r5, #0]
 800fb1c:	d032      	beq.n	800fb84 <__sflush_r+0x98>
 800fb1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb20:	89a3      	ldrh	r3, [r4, #12]
 800fb22:	075a      	lsls	r2, r3, #29
 800fb24:	d505      	bpl.n	800fb32 <__sflush_r+0x46>
 800fb26:	6863      	ldr	r3, [r4, #4]
 800fb28:	1ac0      	subs	r0, r0, r3
 800fb2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb2c:	b10b      	cbz	r3, 800fb32 <__sflush_r+0x46>
 800fb2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb30:	1ac0      	subs	r0, r0, r3
 800fb32:	2300      	movs	r3, #0
 800fb34:	4602      	mov	r2, r0
 800fb36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb38:	6a21      	ldr	r1, [r4, #32]
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	47b0      	blx	r6
 800fb3e:	1c43      	adds	r3, r0, #1
 800fb40:	89a3      	ldrh	r3, [r4, #12]
 800fb42:	d106      	bne.n	800fb52 <__sflush_r+0x66>
 800fb44:	6829      	ldr	r1, [r5, #0]
 800fb46:	291d      	cmp	r1, #29
 800fb48:	d82c      	bhi.n	800fba4 <__sflush_r+0xb8>
 800fb4a:	4a2a      	ldr	r2, [pc, #168]	; (800fbf4 <__sflush_r+0x108>)
 800fb4c:	40ca      	lsrs	r2, r1
 800fb4e:	07d6      	lsls	r6, r2, #31
 800fb50:	d528      	bpl.n	800fba4 <__sflush_r+0xb8>
 800fb52:	2200      	movs	r2, #0
 800fb54:	6062      	str	r2, [r4, #4]
 800fb56:	04d9      	lsls	r1, r3, #19
 800fb58:	6922      	ldr	r2, [r4, #16]
 800fb5a:	6022      	str	r2, [r4, #0]
 800fb5c:	d504      	bpl.n	800fb68 <__sflush_r+0x7c>
 800fb5e:	1c42      	adds	r2, r0, #1
 800fb60:	d101      	bne.n	800fb66 <__sflush_r+0x7a>
 800fb62:	682b      	ldr	r3, [r5, #0]
 800fb64:	b903      	cbnz	r3, 800fb68 <__sflush_r+0x7c>
 800fb66:	6560      	str	r0, [r4, #84]	; 0x54
 800fb68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb6a:	602f      	str	r7, [r5, #0]
 800fb6c:	2900      	cmp	r1, #0
 800fb6e:	d0ca      	beq.n	800fb06 <__sflush_r+0x1a>
 800fb70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb74:	4299      	cmp	r1, r3
 800fb76:	d002      	beq.n	800fb7e <__sflush_r+0x92>
 800fb78:	4628      	mov	r0, r5
 800fb7a:	f7ff fdcf 	bl	800f71c <_free_r>
 800fb7e:	2000      	movs	r0, #0
 800fb80:	6360      	str	r0, [r4, #52]	; 0x34
 800fb82:	e7c1      	b.n	800fb08 <__sflush_r+0x1c>
 800fb84:	6a21      	ldr	r1, [r4, #32]
 800fb86:	2301      	movs	r3, #1
 800fb88:	4628      	mov	r0, r5
 800fb8a:	47b0      	blx	r6
 800fb8c:	1c41      	adds	r1, r0, #1
 800fb8e:	d1c7      	bne.n	800fb20 <__sflush_r+0x34>
 800fb90:	682b      	ldr	r3, [r5, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d0c4      	beq.n	800fb20 <__sflush_r+0x34>
 800fb96:	2b1d      	cmp	r3, #29
 800fb98:	d001      	beq.n	800fb9e <__sflush_r+0xb2>
 800fb9a:	2b16      	cmp	r3, #22
 800fb9c:	d101      	bne.n	800fba2 <__sflush_r+0xb6>
 800fb9e:	602f      	str	r7, [r5, #0]
 800fba0:	e7b1      	b.n	800fb06 <__sflush_r+0x1a>
 800fba2:	89a3      	ldrh	r3, [r4, #12]
 800fba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fba8:	81a3      	strh	r3, [r4, #12]
 800fbaa:	e7ad      	b.n	800fb08 <__sflush_r+0x1c>
 800fbac:	690f      	ldr	r7, [r1, #16]
 800fbae:	2f00      	cmp	r7, #0
 800fbb0:	d0a9      	beq.n	800fb06 <__sflush_r+0x1a>
 800fbb2:	0793      	lsls	r3, r2, #30
 800fbb4:	680e      	ldr	r6, [r1, #0]
 800fbb6:	bf08      	it	eq
 800fbb8:	694b      	ldreq	r3, [r1, #20]
 800fbba:	600f      	str	r7, [r1, #0]
 800fbbc:	bf18      	it	ne
 800fbbe:	2300      	movne	r3, #0
 800fbc0:	eba6 0807 	sub.w	r8, r6, r7
 800fbc4:	608b      	str	r3, [r1, #8]
 800fbc6:	f1b8 0f00 	cmp.w	r8, #0
 800fbca:	dd9c      	ble.n	800fb06 <__sflush_r+0x1a>
 800fbcc:	6a21      	ldr	r1, [r4, #32]
 800fbce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fbd0:	4643      	mov	r3, r8
 800fbd2:	463a      	mov	r2, r7
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	47b0      	blx	r6
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	dc06      	bgt.n	800fbea <__sflush_r+0xfe>
 800fbdc:	89a3      	ldrh	r3, [r4, #12]
 800fbde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbe2:	81a3      	strh	r3, [r4, #12]
 800fbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbe8:	e78e      	b.n	800fb08 <__sflush_r+0x1c>
 800fbea:	4407      	add	r7, r0
 800fbec:	eba8 0800 	sub.w	r8, r8, r0
 800fbf0:	e7e9      	b.n	800fbc6 <__sflush_r+0xda>
 800fbf2:	bf00      	nop
 800fbf4:	20400001 	.word	0x20400001

0800fbf8 <_fflush_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	690b      	ldr	r3, [r1, #16]
 800fbfc:	4605      	mov	r5, r0
 800fbfe:	460c      	mov	r4, r1
 800fc00:	b913      	cbnz	r3, 800fc08 <_fflush_r+0x10>
 800fc02:	2500      	movs	r5, #0
 800fc04:	4628      	mov	r0, r5
 800fc06:	bd38      	pop	{r3, r4, r5, pc}
 800fc08:	b118      	cbz	r0, 800fc12 <_fflush_r+0x1a>
 800fc0a:	6983      	ldr	r3, [r0, #24]
 800fc0c:	b90b      	cbnz	r3, 800fc12 <_fflush_r+0x1a>
 800fc0e:	f000 f887 	bl	800fd20 <__sinit>
 800fc12:	4b14      	ldr	r3, [pc, #80]	; (800fc64 <_fflush_r+0x6c>)
 800fc14:	429c      	cmp	r4, r3
 800fc16:	d11b      	bne.n	800fc50 <_fflush_r+0x58>
 800fc18:	686c      	ldr	r4, [r5, #4]
 800fc1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d0ef      	beq.n	800fc02 <_fflush_r+0xa>
 800fc22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc24:	07d0      	lsls	r0, r2, #31
 800fc26:	d404      	bmi.n	800fc32 <_fflush_r+0x3a>
 800fc28:	0599      	lsls	r1, r3, #22
 800fc2a:	d402      	bmi.n	800fc32 <_fflush_r+0x3a>
 800fc2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc2e:	f000 f915 	bl	800fe5c <__retarget_lock_acquire_recursive>
 800fc32:	4628      	mov	r0, r5
 800fc34:	4621      	mov	r1, r4
 800fc36:	f7ff ff59 	bl	800faec <__sflush_r>
 800fc3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc3c:	07da      	lsls	r2, r3, #31
 800fc3e:	4605      	mov	r5, r0
 800fc40:	d4e0      	bmi.n	800fc04 <_fflush_r+0xc>
 800fc42:	89a3      	ldrh	r3, [r4, #12]
 800fc44:	059b      	lsls	r3, r3, #22
 800fc46:	d4dd      	bmi.n	800fc04 <_fflush_r+0xc>
 800fc48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc4a:	f000 f908 	bl	800fe5e <__retarget_lock_release_recursive>
 800fc4e:	e7d9      	b.n	800fc04 <_fflush_r+0xc>
 800fc50:	4b05      	ldr	r3, [pc, #20]	; (800fc68 <_fflush_r+0x70>)
 800fc52:	429c      	cmp	r4, r3
 800fc54:	d101      	bne.n	800fc5a <_fflush_r+0x62>
 800fc56:	68ac      	ldr	r4, [r5, #8]
 800fc58:	e7df      	b.n	800fc1a <_fflush_r+0x22>
 800fc5a:	4b04      	ldr	r3, [pc, #16]	; (800fc6c <_fflush_r+0x74>)
 800fc5c:	429c      	cmp	r4, r3
 800fc5e:	bf08      	it	eq
 800fc60:	68ec      	ldreq	r4, [r5, #12]
 800fc62:	e7da      	b.n	800fc1a <_fflush_r+0x22>
 800fc64:	0801186c 	.word	0x0801186c
 800fc68:	0801188c 	.word	0x0801188c
 800fc6c:	0801184c 	.word	0x0801184c

0800fc70 <std>:
 800fc70:	2300      	movs	r3, #0
 800fc72:	b510      	push	{r4, lr}
 800fc74:	4604      	mov	r4, r0
 800fc76:	e9c0 3300 	strd	r3, r3, [r0]
 800fc7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc7e:	6083      	str	r3, [r0, #8]
 800fc80:	8181      	strh	r1, [r0, #12]
 800fc82:	6643      	str	r3, [r0, #100]	; 0x64
 800fc84:	81c2      	strh	r2, [r0, #14]
 800fc86:	6183      	str	r3, [r0, #24]
 800fc88:	4619      	mov	r1, r3
 800fc8a:	2208      	movs	r2, #8
 800fc8c:	305c      	adds	r0, #92	; 0x5c
 800fc8e:	f7ff fd3d 	bl	800f70c <memset>
 800fc92:	4b05      	ldr	r3, [pc, #20]	; (800fca8 <std+0x38>)
 800fc94:	6263      	str	r3, [r4, #36]	; 0x24
 800fc96:	4b05      	ldr	r3, [pc, #20]	; (800fcac <std+0x3c>)
 800fc98:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc9a:	4b05      	ldr	r3, [pc, #20]	; (800fcb0 <std+0x40>)
 800fc9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc9e:	4b05      	ldr	r3, [pc, #20]	; (800fcb4 <std+0x44>)
 800fca0:	6224      	str	r4, [r4, #32]
 800fca2:	6323      	str	r3, [r4, #48]	; 0x30
 800fca4:	bd10      	pop	{r4, pc}
 800fca6:	bf00      	nop
 800fca8:	080107d9 	.word	0x080107d9
 800fcac:	080107fb 	.word	0x080107fb
 800fcb0:	08010833 	.word	0x08010833
 800fcb4:	08010857 	.word	0x08010857

0800fcb8 <_cleanup_r>:
 800fcb8:	4901      	ldr	r1, [pc, #4]	; (800fcc0 <_cleanup_r+0x8>)
 800fcba:	f000 b8af 	b.w	800fe1c <_fwalk_reent>
 800fcbe:	bf00      	nop
 800fcc0:	0800fbf9 	.word	0x0800fbf9

0800fcc4 <__sfmoreglue>:
 800fcc4:	b570      	push	{r4, r5, r6, lr}
 800fcc6:	2268      	movs	r2, #104	; 0x68
 800fcc8:	1e4d      	subs	r5, r1, #1
 800fcca:	4355      	muls	r5, r2
 800fccc:	460e      	mov	r6, r1
 800fcce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fcd2:	f7ff fd8f 	bl	800f7f4 <_malloc_r>
 800fcd6:	4604      	mov	r4, r0
 800fcd8:	b140      	cbz	r0, 800fcec <__sfmoreglue+0x28>
 800fcda:	2100      	movs	r1, #0
 800fcdc:	e9c0 1600 	strd	r1, r6, [r0]
 800fce0:	300c      	adds	r0, #12
 800fce2:	60a0      	str	r0, [r4, #8]
 800fce4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fce8:	f7ff fd10 	bl	800f70c <memset>
 800fcec:	4620      	mov	r0, r4
 800fcee:	bd70      	pop	{r4, r5, r6, pc}

0800fcf0 <__sfp_lock_acquire>:
 800fcf0:	4801      	ldr	r0, [pc, #4]	; (800fcf8 <__sfp_lock_acquire+0x8>)
 800fcf2:	f000 b8b3 	b.w	800fe5c <__retarget_lock_acquire_recursive>
 800fcf6:	bf00      	nop
 800fcf8:	24001e91 	.word	0x24001e91

0800fcfc <__sfp_lock_release>:
 800fcfc:	4801      	ldr	r0, [pc, #4]	; (800fd04 <__sfp_lock_release+0x8>)
 800fcfe:	f000 b8ae 	b.w	800fe5e <__retarget_lock_release_recursive>
 800fd02:	bf00      	nop
 800fd04:	24001e91 	.word	0x24001e91

0800fd08 <__sinit_lock_acquire>:
 800fd08:	4801      	ldr	r0, [pc, #4]	; (800fd10 <__sinit_lock_acquire+0x8>)
 800fd0a:	f000 b8a7 	b.w	800fe5c <__retarget_lock_acquire_recursive>
 800fd0e:	bf00      	nop
 800fd10:	24001e92 	.word	0x24001e92

0800fd14 <__sinit_lock_release>:
 800fd14:	4801      	ldr	r0, [pc, #4]	; (800fd1c <__sinit_lock_release+0x8>)
 800fd16:	f000 b8a2 	b.w	800fe5e <__retarget_lock_release_recursive>
 800fd1a:	bf00      	nop
 800fd1c:	24001e92 	.word	0x24001e92

0800fd20 <__sinit>:
 800fd20:	b510      	push	{r4, lr}
 800fd22:	4604      	mov	r4, r0
 800fd24:	f7ff fff0 	bl	800fd08 <__sinit_lock_acquire>
 800fd28:	69a3      	ldr	r3, [r4, #24]
 800fd2a:	b11b      	cbz	r3, 800fd34 <__sinit+0x14>
 800fd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd30:	f7ff bff0 	b.w	800fd14 <__sinit_lock_release>
 800fd34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fd38:	6523      	str	r3, [r4, #80]	; 0x50
 800fd3a:	4b13      	ldr	r3, [pc, #76]	; (800fd88 <__sinit+0x68>)
 800fd3c:	4a13      	ldr	r2, [pc, #76]	; (800fd8c <__sinit+0x6c>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	62a2      	str	r2, [r4, #40]	; 0x28
 800fd42:	42a3      	cmp	r3, r4
 800fd44:	bf04      	itt	eq
 800fd46:	2301      	moveq	r3, #1
 800fd48:	61a3      	streq	r3, [r4, #24]
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f000 f820 	bl	800fd90 <__sfp>
 800fd50:	6060      	str	r0, [r4, #4]
 800fd52:	4620      	mov	r0, r4
 800fd54:	f000 f81c 	bl	800fd90 <__sfp>
 800fd58:	60a0      	str	r0, [r4, #8]
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	f000 f818 	bl	800fd90 <__sfp>
 800fd60:	2200      	movs	r2, #0
 800fd62:	60e0      	str	r0, [r4, #12]
 800fd64:	2104      	movs	r1, #4
 800fd66:	6860      	ldr	r0, [r4, #4]
 800fd68:	f7ff ff82 	bl	800fc70 <std>
 800fd6c:	68a0      	ldr	r0, [r4, #8]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	2109      	movs	r1, #9
 800fd72:	f7ff ff7d 	bl	800fc70 <std>
 800fd76:	68e0      	ldr	r0, [r4, #12]
 800fd78:	2202      	movs	r2, #2
 800fd7a:	2112      	movs	r1, #18
 800fd7c:	f7ff ff78 	bl	800fc70 <std>
 800fd80:	2301      	movs	r3, #1
 800fd82:	61a3      	str	r3, [r4, #24]
 800fd84:	e7d2      	b.n	800fd2c <__sinit+0xc>
 800fd86:	bf00      	nop
 800fd88:	08011848 	.word	0x08011848
 800fd8c:	0800fcb9 	.word	0x0800fcb9

0800fd90 <__sfp>:
 800fd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd92:	4607      	mov	r7, r0
 800fd94:	f7ff ffac 	bl	800fcf0 <__sfp_lock_acquire>
 800fd98:	4b1e      	ldr	r3, [pc, #120]	; (800fe14 <__sfp+0x84>)
 800fd9a:	681e      	ldr	r6, [r3, #0]
 800fd9c:	69b3      	ldr	r3, [r6, #24]
 800fd9e:	b913      	cbnz	r3, 800fda6 <__sfp+0x16>
 800fda0:	4630      	mov	r0, r6
 800fda2:	f7ff ffbd 	bl	800fd20 <__sinit>
 800fda6:	3648      	adds	r6, #72	; 0x48
 800fda8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fdac:	3b01      	subs	r3, #1
 800fdae:	d503      	bpl.n	800fdb8 <__sfp+0x28>
 800fdb0:	6833      	ldr	r3, [r6, #0]
 800fdb2:	b30b      	cbz	r3, 800fdf8 <__sfp+0x68>
 800fdb4:	6836      	ldr	r6, [r6, #0]
 800fdb6:	e7f7      	b.n	800fda8 <__sfp+0x18>
 800fdb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fdbc:	b9d5      	cbnz	r5, 800fdf4 <__sfp+0x64>
 800fdbe:	4b16      	ldr	r3, [pc, #88]	; (800fe18 <__sfp+0x88>)
 800fdc0:	60e3      	str	r3, [r4, #12]
 800fdc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fdc6:	6665      	str	r5, [r4, #100]	; 0x64
 800fdc8:	f000 f847 	bl	800fe5a <__retarget_lock_init_recursive>
 800fdcc:	f7ff ff96 	bl	800fcfc <__sfp_lock_release>
 800fdd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fdd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fdd8:	6025      	str	r5, [r4, #0]
 800fdda:	61a5      	str	r5, [r4, #24]
 800fddc:	2208      	movs	r2, #8
 800fdde:	4629      	mov	r1, r5
 800fde0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fde4:	f7ff fc92 	bl	800f70c <memset>
 800fde8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fdec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdf4:	3468      	adds	r4, #104	; 0x68
 800fdf6:	e7d9      	b.n	800fdac <__sfp+0x1c>
 800fdf8:	2104      	movs	r1, #4
 800fdfa:	4638      	mov	r0, r7
 800fdfc:	f7ff ff62 	bl	800fcc4 <__sfmoreglue>
 800fe00:	4604      	mov	r4, r0
 800fe02:	6030      	str	r0, [r6, #0]
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d1d5      	bne.n	800fdb4 <__sfp+0x24>
 800fe08:	f7ff ff78 	bl	800fcfc <__sfp_lock_release>
 800fe0c:	230c      	movs	r3, #12
 800fe0e:	603b      	str	r3, [r7, #0]
 800fe10:	e7ee      	b.n	800fdf0 <__sfp+0x60>
 800fe12:	bf00      	nop
 800fe14:	08011848 	.word	0x08011848
 800fe18:	ffff0001 	.word	0xffff0001

0800fe1c <_fwalk_reent>:
 800fe1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe20:	4606      	mov	r6, r0
 800fe22:	4688      	mov	r8, r1
 800fe24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fe28:	2700      	movs	r7, #0
 800fe2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe2e:	f1b9 0901 	subs.w	r9, r9, #1
 800fe32:	d505      	bpl.n	800fe40 <_fwalk_reent+0x24>
 800fe34:	6824      	ldr	r4, [r4, #0]
 800fe36:	2c00      	cmp	r4, #0
 800fe38:	d1f7      	bne.n	800fe2a <_fwalk_reent+0xe>
 800fe3a:	4638      	mov	r0, r7
 800fe3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe40:	89ab      	ldrh	r3, [r5, #12]
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d907      	bls.n	800fe56 <_fwalk_reent+0x3a>
 800fe46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	d003      	beq.n	800fe56 <_fwalk_reent+0x3a>
 800fe4e:	4629      	mov	r1, r5
 800fe50:	4630      	mov	r0, r6
 800fe52:	47c0      	blx	r8
 800fe54:	4307      	orrs	r7, r0
 800fe56:	3568      	adds	r5, #104	; 0x68
 800fe58:	e7e9      	b.n	800fe2e <_fwalk_reent+0x12>

0800fe5a <__retarget_lock_init_recursive>:
 800fe5a:	4770      	bx	lr

0800fe5c <__retarget_lock_acquire_recursive>:
 800fe5c:	4770      	bx	lr

0800fe5e <__retarget_lock_release_recursive>:
 800fe5e:	4770      	bx	lr

0800fe60 <__swhatbuf_r>:
 800fe60:	b570      	push	{r4, r5, r6, lr}
 800fe62:	460e      	mov	r6, r1
 800fe64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe68:	2900      	cmp	r1, #0
 800fe6a:	b096      	sub	sp, #88	; 0x58
 800fe6c:	4614      	mov	r4, r2
 800fe6e:	461d      	mov	r5, r3
 800fe70:	da08      	bge.n	800fe84 <__swhatbuf_r+0x24>
 800fe72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fe76:	2200      	movs	r2, #0
 800fe78:	602a      	str	r2, [r5, #0]
 800fe7a:	061a      	lsls	r2, r3, #24
 800fe7c:	d410      	bmi.n	800fea0 <__swhatbuf_r+0x40>
 800fe7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe82:	e00e      	b.n	800fea2 <__swhatbuf_r+0x42>
 800fe84:	466a      	mov	r2, sp
 800fe86:	f000 fd0d 	bl	80108a4 <_fstat_r>
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	dbf1      	blt.n	800fe72 <__swhatbuf_r+0x12>
 800fe8e:	9a01      	ldr	r2, [sp, #4]
 800fe90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fe94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fe98:	425a      	negs	r2, r3
 800fe9a:	415a      	adcs	r2, r3
 800fe9c:	602a      	str	r2, [r5, #0]
 800fe9e:	e7ee      	b.n	800fe7e <__swhatbuf_r+0x1e>
 800fea0:	2340      	movs	r3, #64	; 0x40
 800fea2:	2000      	movs	r0, #0
 800fea4:	6023      	str	r3, [r4, #0]
 800fea6:	b016      	add	sp, #88	; 0x58
 800fea8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800feac <__smakebuf_r>:
 800feac:	898b      	ldrh	r3, [r1, #12]
 800feae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800feb0:	079d      	lsls	r5, r3, #30
 800feb2:	4606      	mov	r6, r0
 800feb4:	460c      	mov	r4, r1
 800feb6:	d507      	bpl.n	800fec8 <__smakebuf_r+0x1c>
 800feb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800febc:	6023      	str	r3, [r4, #0]
 800febe:	6123      	str	r3, [r4, #16]
 800fec0:	2301      	movs	r3, #1
 800fec2:	6163      	str	r3, [r4, #20]
 800fec4:	b002      	add	sp, #8
 800fec6:	bd70      	pop	{r4, r5, r6, pc}
 800fec8:	ab01      	add	r3, sp, #4
 800feca:	466a      	mov	r2, sp
 800fecc:	f7ff ffc8 	bl	800fe60 <__swhatbuf_r>
 800fed0:	9900      	ldr	r1, [sp, #0]
 800fed2:	4605      	mov	r5, r0
 800fed4:	4630      	mov	r0, r6
 800fed6:	f7ff fc8d 	bl	800f7f4 <_malloc_r>
 800feda:	b948      	cbnz	r0, 800fef0 <__smakebuf_r+0x44>
 800fedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fee0:	059a      	lsls	r2, r3, #22
 800fee2:	d4ef      	bmi.n	800fec4 <__smakebuf_r+0x18>
 800fee4:	f023 0303 	bic.w	r3, r3, #3
 800fee8:	f043 0302 	orr.w	r3, r3, #2
 800feec:	81a3      	strh	r3, [r4, #12]
 800feee:	e7e3      	b.n	800feb8 <__smakebuf_r+0xc>
 800fef0:	4b0d      	ldr	r3, [pc, #52]	; (800ff28 <__smakebuf_r+0x7c>)
 800fef2:	62b3      	str	r3, [r6, #40]	; 0x28
 800fef4:	89a3      	ldrh	r3, [r4, #12]
 800fef6:	6020      	str	r0, [r4, #0]
 800fef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fefc:	81a3      	strh	r3, [r4, #12]
 800fefe:	9b00      	ldr	r3, [sp, #0]
 800ff00:	6163      	str	r3, [r4, #20]
 800ff02:	9b01      	ldr	r3, [sp, #4]
 800ff04:	6120      	str	r0, [r4, #16]
 800ff06:	b15b      	cbz	r3, 800ff20 <__smakebuf_r+0x74>
 800ff08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff0c:	4630      	mov	r0, r6
 800ff0e:	f000 fcdb 	bl	80108c8 <_isatty_r>
 800ff12:	b128      	cbz	r0, 800ff20 <__smakebuf_r+0x74>
 800ff14:	89a3      	ldrh	r3, [r4, #12]
 800ff16:	f023 0303 	bic.w	r3, r3, #3
 800ff1a:	f043 0301 	orr.w	r3, r3, #1
 800ff1e:	81a3      	strh	r3, [r4, #12]
 800ff20:	89a0      	ldrh	r0, [r4, #12]
 800ff22:	4305      	orrs	r5, r0
 800ff24:	81a5      	strh	r5, [r4, #12]
 800ff26:	e7cd      	b.n	800fec4 <__smakebuf_r+0x18>
 800ff28:	0800fcb9 	.word	0x0800fcb9

0800ff2c <__malloc_lock>:
 800ff2c:	4801      	ldr	r0, [pc, #4]	; (800ff34 <__malloc_lock+0x8>)
 800ff2e:	f7ff bf95 	b.w	800fe5c <__retarget_lock_acquire_recursive>
 800ff32:	bf00      	nop
 800ff34:	24001e90 	.word	0x24001e90

0800ff38 <__malloc_unlock>:
 800ff38:	4801      	ldr	r0, [pc, #4]	; (800ff40 <__malloc_unlock+0x8>)
 800ff3a:	f7ff bf90 	b.w	800fe5e <__retarget_lock_release_recursive>
 800ff3e:	bf00      	nop
 800ff40:	24001e90 	.word	0x24001e90

0800ff44 <__ssputs_r>:
 800ff44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff48:	688e      	ldr	r6, [r1, #8]
 800ff4a:	429e      	cmp	r6, r3
 800ff4c:	4682      	mov	sl, r0
 800ff4e:	460c      	mov	r4, r1
 800ff50:	4690      	mov	r8, r2
 800ff52:	461f      	mov	r7, r3
 800ff54:	d838      	bhi.n	800ffc8 <__ssputs_r+0x84>
 800ff56:	898a      	ldrh	r2, [r1, #12]
 800ff58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff5c:	d032      	beq.n	800ffc4 <__ssputs_r+0x80>
 800ff5e:	6825      	ldr	r5, [r4, #0]
 800ff60:	6909      	ldr	r1, [r1, #16]
 800ff62:	eba5 0901 	sub.w	r9, r5, r1
 800ff66:	6965      	ldr	r5, [r4, #20]
 800ff68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff70:	3301      	adds	r3, #1
 800ff72:	444b      	add	r3, r9
 800ff74:	106d      	asrs	r5, r5, #1
 800ff76:	429d      	cmp	r5, r3
 800ff78:	bf38      	it	cc
 800ff7a:	461d      	movcc	r5, r3
 800ff7c:	0553      	lsls	r3, r2, #21
 800ff7e:	d531      	bpl.n	800ffe4 <__ssputs_r+0xa0>
 800ff80:	4629      	mov	r1, r5
 800ff82:	f7ff fc37 	bl	800f7f4 <_malloc_r>
 800ff86:	4606      	mov	r6, r0
 800ff88:	b950      	cbnz	r0, 800ffa0 <__ssputs_r+0x5c>
 800ff8a:	230c      	movs	r3, #12
 800ff8c:	f8ca 3000 	str.w	r3, [sl]
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff96:	81a3      	strh	r3, [r4, #12]
 800ff98:	f04f 30ff 	mov.w	r0, #4294967295
 800ff9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffa0:	6921      	ldr	r1, [r4, #16]
 800ffa2:	464a      	mov	r2, r9
 800ffa4:	f7ff fba4 	bl	800f6f0 <memcpy>
 800ffa8:	89a3      	ldrh	r3, [r4, #12]
 800ffaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ffae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffb2:	81a3      	strh	r3, [r4, #12]
 800ffb4:	6126      	str	r6, [r4, #16]
 800ffb6:	6165      	str	r5, [r4, #20]
 800ffb8:	444e      	add	r6, r9
 800ffba:	eba5 0509 	sub.w	r5, r5, r9
 800ffbe:	6026      	str	r6, [r4, #0]
 800ffc0:	60a5      	str	r5, [r4, #8]
 800ffc2:	463e      	mov	r6, r7
 800ffc4:	42be      	cmp	r6, r7
 800ffc6:	d900      	bls.n	800ffca <__ssputs_r+0x86>
 800ffc8:	463e      	mov	r6, r7
 800ffca:	6820      	ldr	r0, [r4, #0]
 800ffcc:	4632      	mov	r2, r6
 800ffce:	4641      	mov	r1, r8
 800ffd0:	f000 fc9c 	bl	801090c <memmove>
 800ffd4:	68a3      	ldr	r3, [r4, #8]
 800ffd6:	1b9b      	subs	r3, r3, r6
 800ffd8:	60a3      	str	r3, [r4, #8]
 800ffda:	6823      	ldr	r3, [r4, #0]
 800ffdc:	4433      	add	r3, r6
 800ffde:	6023      	str	r3, [r4, #0]
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	e7db      	b.n	800ff9c <__ssputs_r+0x58>
 800ffe4:	462a      	mov	r2, r5
 800ffe6:	f000 fcab 	bl	8010940 <_realloc_r>
 800ffea:	4606      	mov	r6, r0
 800ffec:	2800      	cmp	r0, #0
 800ffee:	d1e1      	bne.n	800ffb4 <__ssputs_r+0x70>
 800fff0:	6921      	ldr	r1, [r4, #16]
 800fff2:	4650      	mov	r0, sl
 800fff4:	f7ff fb92 	bl	800f71c <_free_r>
 800fff8:	e7c7      	b.n	800ff8a <__ssputs_r+0x46>
	...

0800fffc <_svfiprintf_r>:
 800fffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010000:	4698      	mov	r8, r3
 8010002:	898b      	ldrh	r3, [r1, #12]
 8010004:	061b      	lsls	r3, r3, #24
 8010006:	b09d      	sub	sp, #116	; 0x74
 8010008:	4607      	mov	r7, r0
 801000a:	460d      	mov	r5, r1
 801000c:	4614      	mov	r4, r2
 801000e:	d50e      	bpl.n	801002e <_svfiprintf_r+0x32>
 8010010:	690b      	ldr	r3, [r1, #16]
 8010012:	b963      	cbnz	r3, 801002e <_svfiprintf_r+0x32>
 8010014:	2140      	movs	r1, #64	; 0x40
 8010016:	f7ff fbed 	bl	800f7f4 <_malloc_r>
 801001a:	6028      	str	r0, [r5, #0]
 801001c:	6128      	str	r0, [r5, #16]
 801001e:	b920      	cbnz	r0, 801002a <_svfiprintf_r+0x2e>
 8010020:	230c      	movs	r3, #12
 8010022:	603b      	str	r3, [r7, #0]
 8010024:	f04f 30ff 	mov.w	r0, #4294967295
 8010028:	e0d1      	b.n	80101ce <_svfiprintf_r+0x1d2>
 801002a:	2340      	movs	r3, #64	; 0x40
 801002c:	616b      	str	r3, [r5, #20]
 801002e:	2300      	movs	r3, #0
 8010030:	9309      	str	r3, [sp, #36]	; 0x24
 8010032:	2320      	movs	r3, #32
 8010034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010038:	f8cd 800c 	str.w	r8, [sp, #12]
 801003c:	2330      	movs	r3, #48	; 0x30
 801003e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80101e8 <_svfiprintf_r+0x1ec>
 8010042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010046:	f04f 0901 	mov.w	r9, #1
 801004a:	4623      	mov	r3, r4
 801004c:	469a      	mov	sl, r3
 801004e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010052:	b10a      	cbz	r2, 8010058 <_svfiprintf_r+0x5c>
 8010054:	2a25      	cmp	r2, #37	; 0x25
 8010056:	d1f9      	bne.n	801004c <_svfiprintf_r+0x50>
 8010058:	ebba 0b04 	subs.w	fp, sl, r4
 801005c:	d00b      	beq.n	8010076 <_svfiprintf_r+0x7a>
 801005e:	465b      	mov	r3, fp
 8010060:	4622      	mov	r2, r4
 8010062:	4629      	mov	r1, r5
 8010064:	4638      	mov	r0, r7
 8010066:	f7ff ff6d 	bl	800ff44 <__ssputs_r>
 801006a:	3001      	adds	r0, #1
 801006c:	f000 80aa 	beq.w	80101c4 <_svfiprintf_r+0x1c8>
 8010070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010072:	445a      	add	r2, fp
 8010074:	9209      	str	r2, [sp, #36]	; 0x24
 8010076:	f89a 3000 	ldrb.w	r3, [sl]
 801007a:	2b00      	cmp	r3, #0
 801007c:	f000 80a2 	beq.w	80101c4 <_svfiprintf_r+0x1c8>
 8010080:	2300      	movs	r3, #0
 8010082:	f04f 32ff 	mov.w	r2, #4294967295
 8010086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801008a:	f10a 0a01 	add.w	sl, sl, #1
 801008e:	9304      	str	r3, [sp, #16]
 8010090:	9307      	str	r3, [sp, #28]
 8010092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010096:	931a      	str	r3, [sp, #104]	; 0x68
 8010098:	4654      	mov	r4, sl
 801009a:	2205      	movs	r2, #5
 801009c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100a0:	4851      	ldr	r0, [pc, #324]	; (80101e8 <_svfiprintf_r+0x1ec>)
 80100a2:	f7f0 f91d 	bl	80002e0 <memchr>
 80100a6:	9a04      	ldr	r2, [sp, #16]
 80100a8:	b9d8      	cbnz	r0, 80100e2 <_svfiprintf_r+0xe6>
 80100aa:	06d0      	lsls	r0, r2, #27
 80100ac:	bf44      	itt	mi
 80100ae:	2320      	movmi	r3, #32
 80100b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100b4:	0711      	lsls	r1, r2, #28
 80100b6:	bf44      	itt	mi
 80100b8:	232b      	movmi	r3, #43	; 0x2b
 80100ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100be:	f89a 3000 	ldrb.w	r3, [sl]
 80100c2:	2b2a      	cmp	r3, #42	; 0x2a
 80100c4:	d015      	beq.n	80100f2 <_svfiprintf_r+0xf6>
 80100c6:	9a07      	ldr	r2, [sp, #28]
 80100c8:	4654      	mov	r4, sl
 80100ca:	2000      	movs	r0, #0
 80100cc:	f04f 0c0a 	mov.w	ip, #10
 80100d0:	4621      	mov	r1, r4
 80100d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100d6:	3b30      	subs	r3, #48	; 0x30
 80100d8:	2b09      	cmp	r3, #9
 80100da:	d94e      	bls.n	801017a <_svfiprintf_r+0x17e>
 80100dc:	b1b0      	cbz	r0, 801010c <_svfiprintf_r+0x110>
 80100de:	9207      	str	r2, [sp, #28]
 80100e0:	e014      	b.n	801010c <_svfiprintf_r+0x110>
 80100e2:	eba0 0308 	sub.w	r3, r0, r8
 80100e6:	fa09 f303 	lsl.w	r3, r9, r3
 80100ea:	4313      	orrs	r3, r2
 80100ec:	9304      	str	r3, [sp, #16]
 80100ee:	46a2      	mov	sl, r4
 80100f0:	e7d2      	b.n	8010098 <_svfiprintf_r+0x9c>
 80100f2:	9b03      	ldr	r3, [sp, #12]
 80100f4:	1d19      	adds	r1, r3, #4
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	9103      	str	r1, [sp, #12]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	bfbb      	ittet	lt
 80100fe:	425b      	neglt	r3, r3
 8010100:	f042 0202 	orrlt.w	r2, r2, #2
 8010104:	9307      	strge	r3, [sp, #28]
 8010106:	9307      	strlt	r3, [sp, #28]
 8010108:	bfb8      	it	lt
 801010a:	9204      	strlt	r2, [sp, #16]
 801010c:	7823      	ldrb	r3, [r4, #0]
 801010e:	2b2e      	cmp	r3, #46	; 0x2e
 8010110:	d10c      	bne.n	801012c <_svfiprintf_r+0x130>
 8010112:	7863      	ldrb	r3, [r4, #1]
 8010114:	2b2a      	cmp	r3, #42	; 0x2a
 8010116:	d135      	bne.n	8010184 <_svfiprintf_r+0x188>
 8010118:	9b03      	ldr	r3, [sp, #12]
 801011a:	1d1a      	adds	r2, r3, #4
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	9203      	str	r2, [sp, #12]
 8010120:	2b00      	cmp	r3, #0
 8010122:	bfb8      	it	lt
 8010124:	f04f 33ff 	movlt.w	r3, #4294967295
 8010128:	3402      	adds	r4, #2
 801012a:	9305      	str	r3, [sp, #20]
 801012c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80101f8 <_svfiprintf_r+0x1fc>
 8010130:	7821      	ldrb	r1, [r4, #0]
 8010132:	2203      	movs	r2, #3
 8010134:	4650      	mov	r0, sl
 8010136:	f7f0 f8d3 	bl	80002e0 <memchr>
 801013a:	b140      	cbz	r0, 801014e <_svfiprintf_r+0x152>
 801013c:	2340      	movs	r3, #64	; 0x40
 801013e:	eba0 000a 	sub.w	r0, r0, sl
 8010142:	fa03 f000 	lsl.w	r0, r3, r0
 8010146:	9b04      	ldr	r3, [sp, #16]
 8010148:	4303      	orrs	r3, r0
 801014a:	3401      	adds	r4, #1
 801014c:	9304      	str	r3, [sp, #16]
 801014e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010152:	4826      	ldr	r0, [pc, #152]	; (80101ec <_svfiprintf_r+0x1f0>)
 8010154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010158:	2206      	movs	r2, #6
 801015a:	f7f0 f8c1 	bl	80002e0 <memchr>
 801015e:	2800      	cmp	r0, #0
 8010160:	d038      	beq.n	80101d4 <_svfiprintf_r+0x1d8>
 8010162:	4b23      	ldr	r3, [pc, #140]	; (80101f0 <_svfiprintf_r+0x1f4>)
 8010164:	bb1b      	cbnz	r3, 80101ae <_svfiprintf_r+0x1b2>
 8010166:	9b03      	ldr	r3, [sp, #12]
 8010168:	3307      	adds	r3, #7
 801016a:	f023 0307 	bic.w	r3, r3, #7
 801016e:	3308      	adds	r3, #8
 8010170:	9303      	str	r3, [sp, #12]
 8010172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010174:	4433      	add	r3, r6
 8010176:	9309      	str	r3, [sp, #36]	; 0x24
 8010178:	e767      	b.n	801004a <_svfiprintf_r+0x4e>
 801017a:	fb0c 3202 	mla	r2, ip, r2, r3
 801017e:	460c      	mov	r4, r1
 8010180:	2001      	movs	r0, #1
 8010182:	e7a5      	b.n	80100d0 <_svfiprintf_r+0xd4>
 8010184:	2300      	movs	r3, #0
 8010186:	3401      	adds	r4, #1
 8010188:	9305      	str	r3, [sp, #20]
 801018a:	4619      	mov	r1, r3
 801018c:	f04f 0c0a 	mov.w	ip, #10
 8010190:	4620      	mov	r0, r4
 8010192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010196:	3a30      	subs	r2, #48	; 0x30
 8010198:	2a09      	cmp	r2, #9
 801019a:	d903      	bls.n	80101a4 <_svfiprintf_r+0x1a8>
 801019c:	2b00      	cmp	r3, #0
 801019e:	d0c5      	beq.n	801012c <_svfiprintf_r+0x130>
 80101a0:	9105      	str	r1, [sp, #20]
 80101a2:	e7c3      	b.n	801012c <_svfiprintf_r+0x130>
 80101a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80101a8:	4604      	mov	r4, r0
 80101aa:	2301      	movs	r3, #1
 80101ac:	e7f0      	b.n	8010190 <_svfiprintf_r+0x194>
 80101ae:	ab03      	add	r3, sp, #12
 80101b0:	9300      	str	r3, [sp, #0]
 80101b2:	462a      	mov	r2, r5
 80101b4:	4b0f      	ldr	r3, [pc, #60]	; (80101f4 <_svfiprintf_r+0x1f8>)
 80101b6:	a904      	add	r1, sp, #16
 80101b8:	4638      	mov	r0, r7
 80101ba:	f3af 8000 	nop.w
 80101be:	1c42      	adds	r2, r0, #1
 80101c0:	4606      	mov	r6, r0
 80101c2:	d1d6      	bne.n	8010172 <_svfiprintf_r+0x176>
 80101c4:	89ab      	ldrh	r3, [r5, #12]
 80101c6:	065b      	lsls	r3, r3, #25
 80101c8:	f53f af2c 	bmi.w	8010024 <_svfiprintf_r+0x28>
 80101cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101ce:	b01d      	add	sp, #116	; 0x74
 80101d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d4:	ab03      	add	r3, sp, #12
 80101d6:	9300      	str	r3, [sp, #0]
 80101d8:	462a      	mov	r2, r5
 80101da:	4b06      	ldr	r3, [pc, #24]	; (80101f4 <_svfiprintf_r+0x1f8>)
 80101dc:	a904      	add	r1, sp, #16
 80101de:	4638      	mov	r0, r7
 80101e0:	f000 f9d4 	bl	801058c <_printf_i>
 80101e4:	e7eb      	b.n	80101be <_svfiprintf_r+0x1c2>
 80101e6:	bf00      	nop
 80101e8:	080118ac 	.word	0x080118ac
 80101ec:	080118b6 	.word	0x080118b6
 80101f0:	00000000 	.word	0x00000000
 80101f4:	0800ff45 	.word	0x0800ff45
 80101f8:	080118b2 	.word	0x080118b2

080101fc <__sfputc_r>:
 80101fc:	6893      	ldr	r3, [r2, #8]
 80101fe:	3b01      	subs	r3, #1
 8010200:	2b00      	cmp	r3, #0
 8010202:	b410      	push	{r4}
 8010204:	6093      	str	r3, [r2, #8]
 8010206:	da08      	bge.n	801021a <__sfputc_r+0x1e>
 8010208:	6994      	ldr	r4, [r2, #24]
 801020a:	42a3      	cmp	r3, r4
 801020c:	db01      	blt.n	8010212 <__sfputc_r+0x16>
 801020e:	290a      	cmp	r1, #10
 8010210:	d103      	bne.n	801021a <__sfputc_r+0x1e>
 8010212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010216:	f7ff bba9 	b.w	800f96c <__swbuf_r>
 801021a:	6813      	ldr	r3, [r2, #0]
 801021c:	1c58      	adds	r0, r3, #1
 801021e:	6010      	str	r0, [r2, #0]
 8010220:	7019      	strb	r1, [r3, #0]
 8010222:	4608      	mov	r0, r1
 8010224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010228:	4770      	bx	lr

0801022a <__sfputs_r>:
 801022a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801022c:	4606      	mov	r6, r0
 801022e:	460f      	mov	r7, r1
 8010230:	4614      	mov	r4, r2
 8010232:	18d5      	adds	r5, r2, r3
 8010234:	42ac      	cmp	r4, r5
 8010236:	d101      	bne.n	801023c <__sfputs_r+0x12>
 8010238:	2000      	movs	r0, #0
 801023a:	e007      	b.n	801024c <__sfputs_r+0x22>
 801023c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010240:	463a      	mov	r2, r7
 8010242:	4630      	mov	r0, r6
 8010244:	f7ff ffda 	bl	80101fc <__sfputc_r>
 8010248:	1c43      	adds	r3, r0, #1
 801024a:	d1f3      	bne.n	8010234 <__sfputs_r+0xa>
 801024c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010250 <_vfiprintf_r>:
 8010250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010254:	460d      	mov	r5, r1
 8010256:	b09d      	sub	sp, #116	; 0x74
 8010258:	4614      	mov	r4, r2
 801025a:	4698      	mov	r8, r3
 801025c:	4606      	mov	r6, r0
 801025e:	b118      	cbz	r0, 8010268 <_vfiprintf_r+0x18>
 8010260:	6983      	ldr	r3, [r0, #24]
 8010262:	b90b      	cbnz	r3, 8010268 <_vfiprintf_r+0x18>
 8010264:	f7ff fd5c 	bl	800fd20 <__sinit>
 8010268:	4b89      	ldr	r3, [pc, #548]	; (8010490 <_vfiprintf_r+0x240>)
 801026a:	429d      	cmp	r5, r3
 801026c:	d11b      	bne.n	80102a6 <_vfiprintf_r+0x56>
 801026e:	6875      	ldr	r5, [r6, #4]
 8010270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010272:	07d9      	lsls	r1, r3, #31
 8010274:	d405      	bmi.n	8010282 <_vfiprintf_r+0x32>
 8010276:	89ab      	ldrh	r3, [r5, #12]
 8010278:	059a      	lsls	r2, r3, #22
 801027a:	d402      	bmi.n	8010282 <_vfiprintf_r+0x32>
 801027c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801027e:	f7ff fded 	bl	800fe5c <__retarget_lock_acquire_recursive>
 8010282:	89ab      	ldrh	r3, [r5, #12]
 8010284:	071b      	lsls	r3, r3, #28
 8010286:	d501      	bpl.n	801028c <_vfiprintf_r+0x3c>
 8010288:	692b      	ldr	r3, [r5, #16]
 801028a:	b9eb      	cbnz	r3, 80102c8 <_vfiprintf_r+0x78>
 801028c:	4629      	mov	r1, r5
 801028e:	4630      	mov	r0, r6
 8010290:	f7ff fbbe 	bl	800fa10 <__swsetup_r>
 8010294:	b1c0      	cbz	r0, 80102c8 <_vfiprintf_r+0x78>
 8010296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010298:	07dc      	lsls	r4, r3, #31
 801029a:	d50e      	bpl.n	80102ba <_vfiprintf_r+0x6a>
 801029c:	f04f 30ff 	mov.w	r0, #4294967295
 80102a0:	b01d      	add	sp, #116	; 0x74
 80102a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a6:	4b7b      	ldr	r3, [pc, #492]	; (8010494 <_vfiprintf_r+0x244>)
 80102a8:	429d      	cmp	r5, r3
 80102aa:	d101      	bne.n	80102b0 <_vfiprintf_r+0x60>
 80102ac:	68b5      	ldr	r5, [r6, #8]
 80102ae:	e7df      	b.n	8010270 <_vfiprintf_r+0x20>
 80102b0:	4b79      	ldr	r3, [pc, #484]	; (8010498 <_vfiprintf_r+0x248>)
 80102b2:	429d      	cmp	r5, r3
 80102b4:	bf08      	it	eq
 80102b6:	68f5      	ldreq	r5, [r6, #12]
 80102b8:	e7da      	b.n	8010270 <_vfiprintf_r+0x20>
 80102ba:	89ab      	ldrh	r3, [r5, #12]
 80102bc:	0598      	lsls	r0, r3, #22
 80102be:	d4ed      	bmi.n	801029c <_vfiprintf_r+0x4c>
 80102c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102c2:	f7ff fdcc 	bl	800fe5e <__retarget_lock_release_recursive>
 80102c6:	e7e9      	b.n	801029c <_vfiprintf_r+0x4c>
 80102c8:	2300      	movs	r3, #0
 80102ca:	9309      	str	r3, [sp, #36]	; 0x24
 80102cc:	2320      	movs	r3, #32
 80102ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80102d6:	2330      	movs	r3, #48	; 0x30
 80102d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801049c <_vfiprintf_r+0x24c>
 80102dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102e0:	f04f 0901 	mov.w	r9, #1
 80102e4:	4623      	mov	r3, r4
 80102e6:	469a      	mov	sl, r3
 80102e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102ec:	b10a      	cbz	r2, 80102f2 <_vfiprintf_r+0xa2>
 80102ee:	2a25      	cmp	r2, #37	; 0x25
 80102f0:	d1f9      	bne.n	80102e6 <_vfiprintf_r+0x96>
 80102f2:	ebba 0b04 	subs.w	fp, sl, r4
 80102f6:	d00b      	beq.n	8010310 <_vfiprintf_r+0xc0>
 80102f8:	465b      	mov	r3, fp
 80102fa:	4622      	mov	r2, r4
 80102fc:	4629      	mov	r1, r5
 80102fe:	4630      	mov	r0, r6
 8010300:	f7ff ff93 	bl	801022a <__sfputs_r>
 8010304:	3001      	adds	r0, #1
 8010306:	f000 80aa 	beq.w	801045e <_vfiprintf_r+0x20e>
 801030a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801030c:	445a      	add	r2, fp
 801030e:	9209      	str	r2, [sp, #36]	; 0x24
 8010310:	f89a 3000 	ldrb.w	r3, [sl]
 8010314:	2b00      	cmp	r3, #0
 8010316:	f000 80a2 	beq.w	801045e <_vfiprintf_r+0x20e>
 801031a:	2300      	movs	r3, #0
 801031c:	f04f 32ff 	mov.w	r2, #4294967295
 8010320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010324:	f10a 0a01 	add.w	sl, sl, #1
 8010328:	9304      	str	r3, [sp, #16]
 801032a:	9307      	str	r3, [sp, #28]
 801032c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010330:	931a      	str	r3, [sp, #104]	; 0x68
 8010332:	4654      	mov	r4, sl
 8010334:	2205      	movs	r2, #5
 8010336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801033a:	4858      	ldr	r0, [pc, #352]	; (801049c <_vfiprintf_r+0x24c>)
 801033c:	f7ef ffd0 	bl	80002e0 <memchr>
 8010340:	9a04      	ldr	r2, [sp, #16]
 8010342:	b9d8      	cbnz	r0, 801037c <_vfiprintf_r+0x12c>
 8010344:	06d1      	lsls	r1, r2, #27
 8010346:	bf44      	itt	mi
 8010348:	2320      	movmi	r3, #32
 801034a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801034e:	0713      	lsls	r3, r2, #28
 8010350:	bf44      	itt	mi
 8010352:	232b      	movmi	r3, #43	; 0x2b
 8010354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010358:	f89a 3000 	ldrb.w	r3, [sl]
 801035c:	2b2a      	cmp	r3, #42	; 0x2a
 801035e:	d015      	beq.n	801038c <_vfiprintf_r+0x13c>
 8010360:	9a07      	ldr	r2, [sp, #28]
 8010362:	4654      	mov	r4, sl
 8010364:	2000      	movs	r0, #0
 8010366:	f04f 0c0a 	mov.w	ip, #10
 801036a:	4621      	mov	r1, r4
 801036c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010370:	3b30      	subs	r3, #48	; 0x30
 8010372:	2b09      	cmp	r3, #9
 8010374:	d94e      	bls.n	8010414 <_vfiprintf_r+0x1c4>
 8010376:	b1b0      	cbz	r0, 80103a6 <_vfiprintf_r+0x156>
 8010378:	9207      	str	r2, [sp, #28]
 801037a:	e014      	b.n	80103a6 <_vfiprintf_r+0x156>
 801037c:	eba0 0308 	sub.w	r3, r0, r8
 8010380:	fa09 f303 	lsl.w	r3, r9, r3
 8010384:	4313      	orrs	r3, r2
 8010386:	9304      	str	r3, [sp, #16]
 8010388:	46a2      	mov	sl, r4
 801038a:	e7d2      	b.n	8010332 <_vfiprintf_r+0xe2>
 801038c:	9b03      	ldr	r3, [sp, #12]
 801038e:	1d19      	adds	r1, r3, #4
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	9103      	str	r1, [sp, #12]
 8010394:	2b00      	cmp	r3, #0
 8010396:	bfbb      	ittet	lt
 8010398:	425b      	neglt	r3, r3
 801039a:	f042 0202 	orrlt.w	r2, r2, #2
 801039e:	9307      	strge	r3, [sp, #28]
 80103a0:	9307      	strlt	r3, [sp, #28]
 80103a2:	bfb8      	it	lt
 80103a4:	9204      	strlt	r2, [sp, #16]
 80103a6:	7823      	ldrb	r3, [r4, #0]
 80103a8:	2b2e      	cmp	r3, #46	; 0x2e
 80103aa:	d10c      	bne.n	80103c6 <_vfiprintf_r+0x176>
 80103ac:	7863      	ldrb	r3, [r4, #1]
 80103ae:	2b2a      	cmp	r3, #42	; 0x2a
 80103b0:	d135      	bne.n	801041e <_vfiprintf_r+0x1ce>
 80103b2:	9b03      	ldr	r3, [sp, #12]
 80103b4:	1d1a      	adds	r2, r3, #4
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	9203      	str	r2, [sp, #12]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	bfb8      	it	lt
 80103be:	f04f 33ff 	movlt.w	r3, #4294967295
 80103c2:	3402      	adds	r4, #2
 80103c4:	9305      	str	r3, [sp, #20]
 80103c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80104ac <_vfiprintf_r+0x25c>
 80103ca:	7821      	ldrb	r1, [r4, #0]
 80103cc:	2203      	movs	r2, #3
 80103ce:	4650      	mov	r0, sl
 80103d0:	f7ef ff86 	bl	80002e0 <memchr>
 80103d4:	b140      	cbz	r0, 80103e8 <_vfiprintf_r+0x198>
 80103d6:	2340      	movs	r3, #64	; 0x40
 80103d8:	eba0 000a 	sub.w	r0, r0, sl
 80103dc:	fa03 f000 	lsl.w	r0, r3, r0
 80103e0:	9b04      	ldr	r3, [sp, #16]
 80103e2:	4303      	orrs	r3, r0
 80103e4:	3401      	adds	r4, #1
 80103e6:	9304      	str	r3, [sp, #16]
 80103e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ec:	482c      	ldr	r0, [pc, #176]	; (80104a0 <_vfiprintf_r+0x250>)
 80103ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103f2:	2206      	movs	r2, #6
 80103f4:	f7ef ff74 	bl	80002e0 <memchr>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	d03f      	beq.n	801047c <_vfiprintf_r+0x22c>
 80103fc:	4b29      	ldr	r3, [pc, #164]	; (80104a4 <_vfiprintf_r+0x254>)
 80103fe:	bb1b      	cbnz	r3, 8010448 <_vfiprintf_r+0x1f8>
 8010400:	9b03      	ldr	r3, [sp, #12]
 8010402:	3307      	adds	r3, #7
 8010404:	f023 0307 	bic.w	r3, r3, #7
 8010408:	3308      	adds	r3, #8
 801040a:	9303      	str	r3, [sp, #12]
 801040c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801040e:	443b      	add	r3, r7
 8010410:	9309      	str	r3, [sp, #36]	; 0x24
 8010412:	e767      	b.n	80102e4 <_vfiprintf_r+0x94>
 8010414:	fb0c 3202 	mla	r2, ip, r2, r3
 8010418:	460c      	mov	r4, r1
 801041a:	2001      	movs	r0, #1
 801041c:	e7a5      	b.n	801036a <_vfiprintf_r+0x11a>
 801041e:	2300      	movs	r3, #0
 8010420:	3401      	adds	r4, #1
 8010422:	9305      	str	r3, [sp, #20]
 8010424:	4619      	mov	r1, r3
 8010426:	f04f 0c0a 	mov.w	ip, #10
 801042a:	4620      	mov	r0, r4
 801042c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010430:	3a30      	subs	r2, #48	; 0x30
 8010432:	2a09      	cmp	r2, #9
 8010434:	d903      	bls.n	801043e <_vfiprintf_r+0x1ee>
 8010436:	2b00      	cmp	r3, #0
 8010438:	d0c5      	beq.n	80103c6 <_vfiprintf_r+0x176>
 801043a:	9105      	str	r1, [sp, #20]
 801043c:	e7c3      	b.n	80103c6 <_vfiprintf_r+0x176>
 801043e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010442:	4604      	mov	r4, r0
 8010444:	2301      	movs	r3, #1
 8010446:	e7f0      	b.n	801042a <_vfiprintf_r+0x1da>
 8010448:	ab03      	add	r3, sp, #12
 801044a:	9300      	str	r3, [sp, #0]
 801044c:	462a      	mov	r2, r5
 801044e:	4b16      	ldr	r3, [pc, #88]	; (80104a8 <_vfiprintf_r+0x258>)
 8010450:	a904      	add	r1, sp, #16
 8010452:	4630      	mov	r0, r6
 8010454:	f3af 8000 	nop.w
 8010458:	4607      	mov	r7, r0
 801045a:	1c78      	adds	r0, r7, #1
 801045c:	d1d6      	bne.n	801040c <_vfiprintf_r+0x1bc>
 801045e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010460:	07d9      	lsls	r1, r3, #31
 8010462:	d405      	bmi.n	8010470 <_vfiprintf_r+0x220>
 8010464:	89ab      	ldrh	r3, [r5, #12]
 8010466:	059a      	lsls	r2, r3, #22
 8010468:	d402      	bmi.n	8010470 <_vfiprintf_r+0x220>
 801046a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801046c:	f7ff fcf7 	bl	800fe5e <__retarget_lock_release_recursive>
 8010470:	89ab      	ldrh	r3, [r5, #12]
 8010472:	065b      	lsls	r3, r3, #25
 8010474:	f53f af12 	bmi.w	801029c <_vfiprintf_r+0x4c>
 8010478:	9809      	ldr	r0, [sp, #36]	; 0x24
 801047a:	e711      	b.n	80102a0 <_vfiprintf_r+0x50>
 801047c:	ab03      	add	r3, sp, #12
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	462a      	mov	r2, r5
 8010482:	4b09      	ldr	r3, [pc, #36]	; (80104a8 <_vfiprintf_r+0x258>)
 8010484:	a904      	add	r1, sp, #16
 8010486:	4630      	mov	r0, r6
 8010488:	f000 f880 	bl	801058c <_printf_i>
 801048c:	e7e4      	b.n	8010458 <_vfiprintf_r+0x208>
 801048e:	bf00      	nop
 8010490:	0801186c 	.word	0x0801186c
 8010494:	0801188c 	.word	0x0801188c
 8010498:	0801184c 	.word	0x0801184c
 801049c:	080118ac 	.word	0x080118ac
 80104a0:	080118b6 	.word	0x080118b6
 80104a4:	00000000 	.word	0x00000000
 80104a8:	0801022b 	.word	0x0801022b
 80104ac:	080118b2 	.word	0x080118b2

080104b0 <_printf_common>:
 80104b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104b4:	4616      	mov	r6, r2
 80104b6:	4699      	mov	r9, r3
 80104b8:	688a      	ldr	r2, [r1, #8]
 80104ba:	690b      	ldr	r3, [r1, #16]
 80104bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104c0:	4293      	cmp	r3, r2
 80104c2:	bfb8      	it	lt
 80104c4:	4613      	movlt	r3, r2
 80104c6:	6033      	str	r3, [r6, #0]
 80104c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104cc:	4607      	mov	r7, r0
 80104ce:	460c      	mov	r4, r1
 80104d0:	b10a      	cbz	r2, 80104d6 <_printf_common+0x26>
 80104d2:	3301      	adds	r3, #1
 80104d4:	6033      	str	r3, [r6, #0]
 80104d6:	6823      	ldr	r3, [r4, #0]
 80104d8:	0699      	lsls	r1, r3, #26
 80104da:	bf42      	ittt	mi
 80104dc:	6833      	ldrmi	r3, [r6, #0]
 80104de:	3302      	addmi	r3, #2
 80104e0:	6033      	strmi	r3, [r6, #0]
 80104e2:	6825      	ldr	r5, [r4, #0]
 80104e4:	f015 0506 	ands.w	r5, r5, #6
 80104e8:	d106      	bne.n	80104f8 <_printf_common+0x48>
 80104ea:	f104 0a19 	add.w	sl, r4, #25
 80104ee:	68e3      	ldr	r3, [r4, #12]
 80104f0:	6832      	ldr	r2, [r6, #0]
 80104f2:	1a9b      	subs	r3, r3, r2
 80104f4:	42ab      	cmp	r3, r5
 80104f6:	dc26      	bgt.n	8010546 <_printf_common+0x96>
 80104f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104fc:	1e13      	subs	r3, r2, #0
 80104fe:	6822      	ldr	r2, [r4, #0]
 8010500:	bf18      	it	ne
 8010502:	2301      	movne	r3, #1
 8010504:	0692      	lsls	r2, r2, #26
 8010506:	d42b      	bmi.n	8010560 <_printf_common+0xb0>
 8010508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801050c:	4649      	mov	r1, r9
 801050e:	4638      	mov	r0, r7
 8010510:	47c0      	blx	r8
 8010512:	3001      	adds	r0, #1
 8010514:	d01e      	beq.n	8010554 <_printf_common+0xa4>
 8010516:	6823      	ldr	r3, [r4, #0]
 8010518:	68e5      	ldr	r5, [r4, #12]
 801051a:	6832      	ldr	r2, [r6, #0]
 801051c:	f003 0306 	and.w	r3, r3, #6
 8010520:	2b04      	cmp	r3, #4
 8010522:	bf08      	it	eq
 8010524:	1aad      	subeq	r5, r5, r2
 8010526:	68a3      	ldr	r3, [r4, #8]
 8010528:	6922      	ldr	r2, [r4, #16]
 801052a:	bf0c      	ite	eq
 801052c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010530:	2500      	movne	r5, #0
 8010532:	4293      	cmp	r3, r2
 8010534:	bfc4      	itt	gt
 8010536:	1a9b      	subgt	r3, r3, r2
 8010538:	18ed      	addgt	r5, r5, r3
 801053a:	2600      	movs	r6, #0
 801053c:	341a      	adds	r4, #26
 801053e:	42b5      	cmp	r5, r6
 8010540:	d11a      	bne.n	8010578 <_printf_common+0xc8>
 8010542:	2000      	movs	r0, #0
 8010544:	e008      	b.n	8010558 <_printf_common+0xa8>
 8010546:	2301      	movs	r3, #1
 8010548:	4652      	mov	r2, sl
 801054a:	4649      	mov	r1, r9
 801054c:	4638      	mov	r0, r7
 801054e:	47c0      	blx	r8
 8010550:	3001      	adds	r0, #1
 8010552:	d103      	bne.n	801055c <_printf_common+0xac>
 8010554:	f04f 30ff 	mov.w	r0, #4294967295
 8010558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801055c:	3501      	adds	r5, #1
 801055e:	e7c6      	b.n	80104ee <_printf_common+0x3e>
 8010560:	18e1      	adds	r1, r4, r3
 8010562:	1c5a      	adds	r2, r3, #1
 8010564:	2030      	movs	r0, #48	; 0x30
 8010566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801056a:	4422      	add	r2, r4
 801056c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010574:	3302      	adds	r3, #2
 8010576:	e7c7      	b.n	8010508 <_printf_common+0x58>
 8010578:	2301      	movs	r3, #1
 801057a:	4622      	mov	r2, r4
 801057c:	4649      	mov	r1, r9
 801057e:	4638      	mov	r0, r7
 8010580:	47c0      	blx	r8
 8010582:	3001      	adds	r0, #1
 8010584:	d0e6      	beq.n	8010554 <_printf_common+0xa4>
 8010586:	3601      	adds	r6, #1
 8010588:	e7d9      	b.n	801053e <_printf_common+0x8e>
	...

0801058c <_printf_i>:
 801058c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010590:	7e0f      	ldrb	r7, [r1, #24]
 8010592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010594:	2f78      	cmp	r7, #120	; 0x78
 8010596:	4691      	mov	r9, r2
 8010598:	4680      	mov	r8, r0
 801059a:	460c      	mov	r4, r1
 801059c:	469a      	mov	sl, r3
 801059e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80105a2:	d807      	bhi.n	80105b4 <_printf_i+0x28>
 80105a4:	2f62      	cmp	r7, #98	; 0x62
 80105a6:	d80a      	bhi.n	80105be <_printf_i+0x32>
 80105a8:	2f00      	cmp	r7, #0
 80105aa:	f000 80d8 	beq.w	801075e <_printf_i+0x1d2>
 80105ae:	2f58      	cmp	r7, #88	; 0x58
 80105b0:	f000 80a3 	beq.w	80106fa <_printf_i+0x16e>
 80105b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80105bc:	e03a      	b.n	8010634 <_printf_i+0xa8>
 80105be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80105c2:	2b15      	cmp	r3, #21
 80105c4:	d8f6      	bhi.n	80105b4 <_printf_i+0x28>
 80105c6:	a101      	add	r1, pc, #4	; (adr r1, 80105cc <_printf_i+0x40>)
 80105c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105cc:	08010625 	.word	0x08010625
 80105d0:	08010639 	.word	0x08010639
 80105d4:	080105b5 	.word	0x080105b5
 80105d8:	080105b5 	.word	0x080105b5
 80105dc:	080105b5 	.word	0x080105b5
 80105e0:	080105b5 	.word	0x080105b5
 80105e4:	08010639 	.word	0x08010639
 80105e8:	080105b5 	.word	0x080105b5
 80105ec:	080105b5 	.word	0x080105b5
 80105f0:	080105b5 	.word	0x080105b5
 80105f4:	080105b5 	.word	0x080105b5
 80105f8:	08010745 	.word	0x08010745
 80105fc:	08010669 	.word	0x08010669
 8010600:	08010727 	.word	0x08010727
 8010604:	080105b5 	.word	0x080105b5
 8010608:	080105b5 	.word	0x080105b5
 801060c:	08010767 	.word	0x08010767
 8010610:	080105b5 	.word	0x080105b5
 8010614:	08010669 	.word	0x08010669
 8010618:	080105b5 	.word	0x080105b5
 801061c:	080105b5 	.word	0x080105b5
 8010620:	0801072f 	.word	0x0801072f
 8010624:	682b      	ldr	r3, [r5, #0]
 8010626:	1d1a      	adds	r2, r3, #4
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	602a      	str	r2, [r5, #0]
 801062c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010634:	2301      	movs	r3, #1
 8010636:	e0a3      	b.n	8010780 <_printf_i+0x1f4>
 8010638:	6820      	ldr	r0, [r4, #0]
 801063a:	6829      	ldr	r1, [r5, #0]
 801063c:	0606      	lsls	r6, r0, #24
 801063e:	f101 0304 	add.w	r3, r1, #4
 8010642:	d50a      	bpl.n	801065a <_printf_i+0xce>
 8010644:	680e      	ldr	r6, [r1, #0]
 8010646:	602b      	str	r3, [r5, #0]
 8010648:	2e00      	cmp	r6, #0
 801064a:	da03      	bge.n	8010654 <_printf_i+0xc8>
 801064c:	232d      	movs	r3, #45	; 0x2d
 801064e:	4276      	negs	r6, r6
 8010650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010654:	485e      	ldr	r0, [pc, #376]	; (80107d0 <_printf_i+0x244>)
 8010656:	230a      	movs	r3, #10
 8010658:	e019      	b.n	801068e <_printf_i+0x102>
 801065a:	680e      	ldr	r6, [r1, #0]
 801065c:	602b      	str	r3, [r5, #0]
 801065e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010662:	bf18      	it	ne
 8010664:	b236      	sxthne	r6, r6
 8010666:	e7ef      	b.n	8010648 <_printf_i+0xbc>
 8010668:	682b      	ldr	r3, [r5, #0]
 801066a:	6820      	ldr	r0, [r4, #0]
 801066c:	1d19      	adds	r1, r3, #4
 801066e:	6029      	str	r1, [r5, #0]
 8010670:	0601      	lsls	r1, r0, #24
 8010672:	d501      	bpl.n	8010678 <_printf_i+0xec>
 8010674:	681e      	ldr	r6, [r3, #0]
 8010676:	e002      	b.n	801067e <_printf_i+0xf2>
 8010678:	0646      	lsls	r6, r0, #25
 801067a:	d5fb      	bpl.n	8010674 <_printf_i+0xe8>
 801067c:	881e      	ldrh	r6, [r3, #0]
 801067e:	4854      	ldr	r0, [pc, #336]	; (80107d0 <_printf_i+0x244>)
 8010680:	2f6f      	cmp	r7, #111	; 0x6f
 8010682:	bf0c      	ite	eq
 8010684:	2308      	moveq	r3, #8
 8010686:	230a      	movne	r3, #10
 8010688:	2100      	movs	r1, #0
 801068a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801068e:	6865      	ldr	r5, [r4, #4]
 8010690:	60a5      	str	r5, [r4, #8]
 8010692:	2d00      	cmp	r5, #0
 8010694:	bfa2      	ittt	ge
 8010696:	6821      	ldrge	r1, [r4, #0]
 8010698:	f021 0104 	bicge.w	r1, r1, #4
 801069c:	6021      	strge	r1, [r4, #0]
 801069e:	b90e      	cbnz	r6, 80106a4 <_printf_i+0x118>
 80106a0:	2d00      	cmp	r5, #0
 80106a2:	d04d      	beq.n	8010740 <_printf_i+0x1b4>
 80106a4:	4615      	mov	r5, r2
 80106a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80106aa:	fb03 6711 	mls	r7, r3, r1, r6
 80106ae:	5dc7      	ldrb	r7, [r0, r7]
 80106b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80106b4:	4637      	mov	r7, r6
 80106b6:	42bb      	cmp	r3, r7
 80106b8:	460e      	mov	r6, r1
 80106ba:	d9f4      	bls.n	80106a6 <_printf_i+0x11a>
 80106bc:	2b08      	cmp	r3, #8
 80106be:	d10b      	bne.n	80106d8 <_printf_i+0x14c>
 80106c0:	6823      	ldr	r3, [r4, #0]
 80106c2:	07de      	lsls	r6, r3, #31
 80106c4:	d508      	bpl.n	80106d8 <_printf_i+0x14c>
 80106c6:	6923      	ldr	r3, [r4, #16]
 80106c8:	6861      	ldr	r1, [r4, #4]
 80106ca:	4299      	cmp	r1, r3
 80106cc:	bfde      	ittt	le
 80106ce:	2330      	movle	r3, #48	; 0x30
 80106d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80106d8:	1b52      	subs	r2, r2, r5
 80106da:	6122      	str	r2, [r4, #16]
 80106dc:	f8cd a000 	str.w	sl, [sp]
 80106e0:	464b      	mov	r3, r9
 80106e2:	aa03      	add	r2, sp, #12
 80106e4:	4621      	mov	r1, r4
 80106e6:	4640      	mov	r0, r8
 80106e8:	f7ff fee2 	bl	80104b0 <_printf_common>
 80106ec:	3001      	adds	r0, #1
 80106ee:	d14c      	bne.n	801078a <_printf_i+0x1fe>
 80106f0:	f04f 30ff 	mov.w	r0, #4294967295
 80106f4:	b004      	add	sp, #16
 80106f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106fa:	4835      	ldr	r0, [pc, #212]	; (80107d0 <_printf_i+0x244>)
 80106fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010700:	6829      	ldr	r1, [r5, #0]
 8010702:	6823      	ldr	r3, [r4, #0]
 8010704:	f851 6b04 	ldr.w	r6, [r1], #4
 8010708:	6029      	str	r1, [r5, #0]
 801070a:	061d      	lsls	r5, r3, #24
 801070c:	d514      	bpl.n	8010738 <_printf_i+0x1ac>
 801070e:	07df      	lsls	r7, r3, #31
 8010710:	bf44      	itt	mi
 8010712:	f043 0320 	orrmi.w	r3, r3, #32
 8010716:	6023      	strmi	r3, [r4, #0]
 8010718:	b91e      	cbnz	r6, 8010722 <_printf_i+0x196>
 801071a:	6823      	ldr	r3, [r4, #0]
 801071c:	f023 0320 	bic.w	r3, r3, #32
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	2310      	movs	r3, #16
 8010724:	e7b0      	b.n	8010688 <_printf_i+0xfc>
 8010726:	6823      	ldr	r3, [r4, #0]
 8010728:	f043 0320 	orr.w	r3, r3, #32
 801072c:	6023      	str	r3, [r4, #0]
 801072e:	2378      	movs	r3, #120	; 0x78
 8010730:	4828      	ldr	r0, [pc, #160]	; (80107d4 <_printf_i+0x248>)
 8010732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010736:	e7e3      	b.n	8010700 <_printf_i+0x174>
 8010738:	0659      	lsls	r1, r3, #25
 801073a:	bf48      	it	mi
 801073c:	b2b6      	uxthmi	r6, r6
 801073e:	e7e6      	b.n	801070e <_printf_i+0x182>
 8010740:	4615      	mov	r5, r2
 8010742:	e7bb      	b.n	80106bc <_printf_i+0x130>
 8010744:	682b      	ldr	r3, [r5, #0]
 8010746:	6826      	ldr	r6, [r4, #0]
 8010748:	6961      	ldr	r1, [r4, #20]
 801074a:	1d18      	adds	r0, r3, #4
 801074c:	6028      	str	r0, [r5, #0]
 801074e:	0635      	lsls	r5, r6, #24
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	d501      	bpl.n	8010758 <_printf_i+0x1cc>
 8010754:	6019      	str	r1, [r3, #0]
 8010756:	e002      	b.n	801075e <_printf_i+0x1d2>
 8010758:	0670      	lsls	r0, r6, #25
 801075a:	d5fb      	bpl.n	8010754 <_printf_i+0x1c8>
 801075c:	8019      	strh	r1, [r3, #0]
 801075e:	2300      	movs	r3, #0
 8010760:	6123      	str	r3, [r4, #16]
 8010762:	4615      	mov	r5, r2
 8010764:	e7ba      	b.n	80106dc <_printf_i+0x150>
 8010766:	682b      	ldr	r3, [r5, #0]
 8010768:	1d1a      	adds	r2, r3, #4
 801076a:	602a      	str	r2, [r5, #0]
 801076c:	681d      	ldr	r5, [r3, #0]
 801076e:	6862      	ldr	r2, [r4, #4]
 8010770:	2100      	movs	r1, #0
 8010772:	4628      	mov	r0, r5
 8010774:	f7ef fdb4 	bl	80002e0 <memchr>
 8010778:	b108      	cbz	r0, 801077e <_printf_i+0x1f2>
 801077a:	1b40      	subs	r0, r0, r5
 801077c:	6060      	str	r0, [r4, #4]
 801077e:	6863      	ldr	r3, [r4, #4]
 8010780:	6123      	str	r3, [r4, #16]
 8010782:	2300      	movs	r3, #0
 8010784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010788:	e7a8      	b.n	80106dc <_printf_i+0x150>
 801078a:	6923      	ldr	r3, [r4, #16]
 801078c:	462a      	mov	r2, r5
 801078e:	4649      	mov	r1, r9
 8010790:	4640      	mov	r0, r8
 8010792:	47d0      	blx	sl
 8010794:	3001      	adds	r0, #1
 8010796:	d0ab      	beq.n	80106f0 <_printf_i+0x164>
 8010798:	6823      	ldr	r3, [r4, #0]
 801079a:	079b      	lsls	r3, r3, #30
 801079c:	d413      	bmi.n	80107c6 <_printf_i+0x23a>
 801079e:	68e0      	ldr	r0, [r4, #12]
 80107a0:	9b03      	ldr	r3, [sp, #12]
 80107a2:	4298      	cmp	r0, r3
 80107a4:	bfb8      	it	lt
 80107a6:	4618      	movlt	r0, r3
 80107a8:	e7a4      	b.n	80106f4 <_printf_i+0x168>
 80107aa:	2301      	movs	r3, #1
 80107ac:	4632      	mov	r2, r6
 80107ae:	4649      	mov	r1, r9
 80107b0:	4640      	mov	r0, r8
 80107b2:	47d0      	blx	sl
 80107b4:	3001      	adds	r0, #1
 80107b6:	d09b      	beq.n	80106f0 <_printf_i+0x164>
 80107b8:	3501      	adds	r5, #1
 80107ba:	68e3      	ldr	r3, [r4, #12]
 80107bc:	9903      	ldr	r1, [sp, #12]
 80107be:	1a5b      	subs	r3, r3, r1
 80107c0:	42ab      	cmp	r3, r5
 80107c2:	dcf2      	bgt.n	80107aa <_printf_i+0x21e>
 80107c4:	e7eb      	b.n	801079e <_printf_i+0x212>
 80107c6:	2500      	movs	r5, #0
 80107c8:	f104 0619 	add.w	r6, r4, #25
 80107cc:	e7f5      	b.n	80107ba <_printf_i+0x22e>
 80107ce:	bf00      	nop
 80107d0:	080118bd 	.word	0x080118bd
 80107d4:	080118ce 	.word	0x080118ce

080107d8 <__sread>:
 80107d8:	b510      	push	{r4, lr}
 80107da:	460c      	mov	r4, r1
 80107dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107e0:	f000 f8de 	bl	80109a0 <_read_r>
 80107e4:	2800      	cmp	r0, #0
 80107e6:	bfab      	itete	ge
 80107e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80107ea:	89a3      	ldrhlt	r3, [r4, #12]
 80107ec:	181b      	addge	r3, r3, r0
 80107ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80107f2:	bfac      	ite	ge
 80107f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80107f6:	81a3      	strhlt	r3, [r4, #12]
 80107f8:	bd10      	pop	{r4, pc}

080107fa <__swrite>:
 80107fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107fe:	461f      	mov	r7, r3
 8010800:	898b      	ldrh	r3, [r1, #12]
 8010802:	05db      	lsls	r3, r3, #23
 8010804:	4605      	mov	r5, r0
 8010806:	460c      	mov	r4, r1
 8010808:	4616      	mov	r6, r2
 801080a:	d505      	bpl.n	8010818 <__swrite+0x1e>
 801080c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010810:	2302      	movs	r3, #2
 8010812:	2200      	movs	r2, #0
 8010814:	f000 f868 	bl	80108e8 <_lseek_r>
 8010818:	89a3      	ldrh	r3, [r4, #12]
 801081a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801081e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010822:	81a3      	strh	r3, [r4, #12]
 8010824:	4632      	mov	r2, r6
 8010826:	463b      	mov	r3, r7
 8010828:	4628      	mov	r0, r5
 801082a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801082e:	f000 b817 	b.w	8010860 <_write_r>

08010832 <__sseek>:
 8010832:	b510      	push	{r4, lr}
 8010834:	460c      	mov	r4, r1
 8010836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801083a:	f000 f855 	bl	80108e8 <_lseek_r>
 801083e:	1c43      	adds	r3, r0, #1
 8010840:	89a3      	ldrh	r3, [r4, #12]
 8010842:	bf15      	itete	ne
 8010844:	6560      	strne	r0, [r4, #84]	; 0x54
 8010846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801084a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801084e:	81a3      	strheq	r3, [r4, #12]
 8010850:	bf18      	it	ne
 8010852:	81a3      	strhne	r3, [r4, #12]
 8010854:	bd10      	pop	{r4, pc}

08010856 <__sclose>:
 8010856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801085a:	f000 b813 	b.w	8010884 <_close_r>
	...

08010860 <_write_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4d07      	ldr	r5, [pc, #28]	; (8010880 <_write_r+0x20>)
 8010864:	4604      	mov	r4, r0
 8010866:	4608      	mov	r0, r1
 8010868:	4611      	mov	r1, r2
 801086a:	2200      	movs	r2, #0
 801086c:	602a      	str	r2, [r5, #0]
 801086e:	461a      	mov	r2, r3
 8010870:	f7f9 fa73 	bl	8009d5a <_write>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_write_r+0x1e>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_write_r+0x1e>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	24001e94 	.word	0x24001e94

08010884 <_close_r>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	4d06      	ldr	r5, [pc, #24]	; (80108a0 <_close_r+0x1c>)
 8010888:	2300      	movs	r3, #0
 801088a:	4604      	mov	r4, r0
 801088c:	4608      	mov	r0, r1
 801088e:	602b      	str	r3, [r5, #0]
 8010890:	f7f9 fa7f 	bl	8009d92 <_close>
 8010894:	1c43      	adds	r3, r0, #1
 8010896:	d102      	bne.n	801089e <_close_r+0x1a>
 8010898:	682b      	ldr	r3, [r5, #0]
 801089a:	b103      	cbz	r3, 801089e <_close_r+0x1a>
 801089c:	6023      	str	r3, [r4, #0]
 801089e:	bd38      	pop	{r3, r4, r5, pc}
 80108a0:	24001e94 	.word	0x24001e94

080108a4 <_fstat_r>:
 80108a4:	b538      	push	{r3, r4, r5, lr}
 80108a6:	4d07      	ldr	r5, [pc, #28]	; (80108c4 <_fstat_r+0x20>)
 80108a8:	2300      	movs	r3, #0
 80108aa:	4604      	mov	r4, r0
 80108ac:	4608      	mov	r0, r1
 80108ae:	4611      	mov	r1, r2
 80108b0:	602b      	str	r3, [r5, #0]
 80108b2:	f7f9 fa7a 	bl	8009daa <_fstat>
 80108b6:	1c43      	adds	r3, r0, #1
 80108b8:	d102      	bne.n	80108c0 <_fstat_r+0x1c>
 80108ba:	682b      	ldr	r3, [r5, #0]
 80108bc:	b103      	cbz	r3, 80108c0 <_fstat_r+0x1c>
 80108be:	6023      	str	r3, [r4, #0]
 80108c0:	bd38      	pop	{r3, r4, r5, pc}
 80108c2:	bf00      	nop
 80108c4:	24001e94 	.word	0x24001e94

080108c8 <_isatty_r>:
 80108c8:	b538      	push	{r3, r4, r5, lr}
 80108ca:	4d06      	ldr	r5, [pc, #24]	; (80108e4 <_isatty_r+0x1c>)
 80108cc:	2300      	movs	r3, #0
 80108ce:	4604      	mov	r4, r0
 80108d0:	4608      	mov	r0, r1
 80108d2:	602b      	str	r3, [r5, #0]
 80108d4:	f7f9 fa79 	bl	8009dca <_isatty>
 80108d8:	1c43      	adds	r3, r0, #1
 80108da:	d102      	bne.n	80108e2 <_isatty_r+0x1a>
 80108dc:	682b      	ldr	r3, [r5, #0]
 80108de:	b103      	cbz	r3, 80108e2 <_isatty_r+0x1a>
 80108e0:	6023      	str	r3, [r4, #0]
 80108e2:	bd38      	pop	{r3, r4, r5, pc}
 80108e4:	24001e94 	.word	0x24001e94

080108e8 <_lseek_r>:
 80108e8:	b538      	push	{r3, r4, r5, lr}
 80108ea:	4d07      	ldr	r5, [pc, #28]	; (8010908 <_lseek_r+0x20>)
 80108ec:	4604      	mov	r4, r0
 80108ee:	4608      	mov	r0, r1
 80108f0:	4611      	mov	r1, r2
 80108f2:	2200      	movs	r2, #0
 80108f4:	602a      	str	r2, [r5, #0]
 80108f6:	461a      	mov	r2, r3
 80108f8:	f7f9 fa72 	bl	8009de0 <_lseek>
 80108fc:	1c43      	adds	r3, r0, #1
 80108fe:	d102      	bne.n	8010906 <_lseek_r+0x1e>
 8010900:	682b      	ldr	r3, [r5, #0]
 8010902:	b103      	cbz	r3, 8010906 <_lseek_r+0x1e>
 8010904:	6023      	str	r3, [r4, #0]
 8010906:	bd38      	pop	{r3, r4, r5, pc}
 8010908:	24001e94 	.word	0x24001e94

0801090c <memmove>:
 801090c:	4288      	cmp	r0, r1
 801090e:	b510      	push	{r4, lr}
 8010910:	eb01 0402 	add.w	r4, r1, r2
 8010914:	d902      	bls.n	801091c <memmove+0x10>
 8010916:	4284      	cmp	r4, r0
 8010918:	4623      	mov	r3, r4
 801091a:	d807      	bhi.n	801092c <memmove+0x20>
 801091c:	1e43      	subs	r3, r0, #1
 801091e:	42a1      	cmp	r1, r4
 8010920:	d008      	beq.n	8010934 <memmove+0x28>
 8010922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010926:	f803 2f01 	strb.w	r2, [r3, #1]!
 801092a:	e7f8      	b.n	801091e <memmove+0x12>
 801092c:	4402      	add	r2, r0
 801092e:	4601      	mov	r1, r0
 8010930:	428a      	cmp	r2, r1
 8010932:	d100      	bne.n	8010936 <memmove+0x2a>
 8010934:	bd10      	pop	{r4, pc}
 8010936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801093a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801093e:	e7f7      	b.n	8010930 <memmove+0x24>

08010940 <_realloc_r>:
 8010940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010944:	4680      	mov	r8, r0
 8010946:	4614      	mov	r4, r2
 8010948:	460e      	mov	r6, r1
 801094a:	b921      	cbnz	r1, 8010956 <_realloc_r+0x16>
 801094c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010950:	4611      	mov	r1, r2
 8010952:	f7fe bf4f 	b.w	800f7f4 <_malloc_r>
 8010956:	b92a      	cbnz	r2, 8010964 <_realloc_r+0x24>
 8010958:	f7fe fee0 	bl	800f71c <_free_r>
 801095c:	4625      	mov	r5, r4
 801095e:	4628      	mov	r0, r5
 8010960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010964:	f000 f82e 	bl	80109c4 <_malloc_usable_size_r>
 8010968:	4284      	cmp	r4, r0
 801096a:	4607      	mov	r7, r0
 801096c:	d802      	bhi.n	8010974 <_realloc_r+0x34>
 801096e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010972:	d812      	bhi.n	801099a <_realloc_r+0x5a>
 8010974:	4621      	mov	r1, r4
 8010976:	4640      	mov	r0, r8
 8010978:	f7fe ff3c 	bl	800f7f4 <_malloc_r>
 801097c:	4605      	mov	r5, r0
 801097e:	2800      	cmp	r0, #0
 8010980:	d0ed      	beq.n	801095e <_realloc_r+0x1e>
 8010982:	42bc      	cmp	r4, r7
 8010984:	4622      	mov	r2, r4
 8010986:	4631      	mov	r1, r6
 8010988:	bf28      	it	cs
 801098a:	463a      	movcs	r2, r7
 801098c:	f7fe feb0 	bl	800f6f0 <memcpy>
 8010990:	4631      	mov	r1, r6
 8010992:	4640      	mov	r0, r8
 8010994:	f7fe fec2 	bl	800f71c <_free_r>
 8010998:	e7e1      	b.n	801095e <_realloc_r+0x1e>
 801099a:	4635      	mov	r5, r6
 801099c:	e7df      	b.n	801095e <_realloc_r+0x1e>
	...

080109a0 <_read_r>:
 80109a0:	b538      	push	{r3, r4, r5, lr}
 80109a2:	4d07      	ldr	r5, [pc, #28]	; (80109c0 <_read_r+0x20>)
 80109a4:	4604      	mov	r4, r0
 80109a6:	4608      	mov	r0, r1
 80109a8:	4611      	mov	r1, r2
 80109aa:	2200      	movs	r2, #0
 80109ac:	602a      	str	r2, [r5, #0]
 80109ae:	461a      	mov	r2, r3
 80109b0:	f7f9 f9b6 	bl	8009d20 <_read>
 80109b4:	1c43      	adds	r3, r0, #1
 80109b6:	d102      	bne.n	80109be <_read_r+0x1e>
 80109b8:	682b      	ldr	r3, [r5, #0]
 80109ba:	b103      	cbz	r3, 80109be <_read_r+0x1e>
 80109bc:	6023      	str	r3, [r4, #0]
 80109be:	bd38      	pop	{r3, r4, r5, pc}
 80109c0:	24001e94 	.word	0x24001e94

080109c4 <_malloc_usable_size_r>:
 80109c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109c8:	1f18      	subs	r0, r3, #4
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	bfbc      	itt	lt
 80109ce:	580b      	ldrlt	r3, [r1, r0]
 80109d0:	18c0      	addlt	r0, r0, r3
 80109d2:	4770      	bx	lr

080109d4 <_init>:
 80109d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109d6:	bf00      	nop
 80109d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109da:	bc08      	pop	{r3}
 80109dc:	469e      	mov	lr, r3
 80109de:	4770      	bx	lr

080109e0 <_fini>:
 80109e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e2:	bf00      	nop
 80109e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109e6:	bc08      	pop	{r3}
 80109e8:	469e      	mov	lr, r3
 80109ea:	4770      	bx	lr
